
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 -D TARGET_SYS=2 --long-address --flat -b -o kernel_U.bin --list kernel_U.lst --labels=kernel_U.lbl src\kernel.asm
; Sat Aug 07 21:56:17 2021

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=1						TARGET=1
=2						TARGET_SYS=2

;******  Processing input file: src\kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$180000					  START_OF_FLASH := $180000                   ; The Foenix U Flash starts at $180000
=$190400					  START_OF_KERNEL := $190400                  ; The kernel itself starts at $190400
=$1a0000					  START_OF_BASIC := $1A0000                   ; The BASIC flash code starts at $1A0000
=$1b0000					  START_OF_CREDITS := $1B0000                 ; The credits screen starts at $1B0000
=$1e0000					  START_OF_SPLASH := $1E0000                  ; SplashScreen Code and Data $3E0000
=$1f0000					  START_OF_FONT := $1F0000                    ; The font starts at $3F0000

;******  Processing file: src\Includes/macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1b						CHAR_ESC = $1B      ; ESC
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$3b						CHAR_F1 = $3B       ; Function key scan codes
=$3c						CHAR_F2 = $3C
=$3d						CHAR_F3 = $3D
=$3e						CHAR_F4 = $3E
=$3f						CHAR_F5 = $3F
=$40						CHAR_F6 = $40
=$41						CHAR_F7 = $41
=$42						CHAR_F8 = $42
=$43						CHAR_F9 = $43
=$44						CHAR_F10 = $44
=$57						CHAR_F11 = $57
=$58						CHAR_F12 = $58
=$39						SCAN_SP = $39
=$1c						SCAN_CR = $1C

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					COLORBEGIN       = $000022 ;3 Byte, address of the color screen
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000063					EVID_COLS_VISIBLE     = $000063 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000065					EVID_COLS_PER_LINE    = $000065 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000067					EVID_LINES_VISIBLE    = $000067 ;2 Bytes The number of rows visible on the screen. Default=25
=$000069					EVID_LINES_MAX        = $000069 ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006b					EVID_CURSORPOS        = $00006B ;3 Bytes The next character written to the screen will be written in this location.
=$00006e					EVID_CURSORX          = $00006E ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000070					EVID_CURSORY          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURCOLOR         = $000072 ;1 Byte Color of next character to be printed to the screen.
=$000073					EVID_COLORBEGIN       = $000073 ;
=$000076					EVID_COLORPOS         = $000076 ;3 Byte address of cursor's position in the color matrix
=$000079					EVID_TMPPTR1          = $000079 ; 4 byte temporary pointer
=$00007d					EVID_PRESENT          = $00007D ;1 Byte: is the EVID present?
=$000098					TEXT_SRC_PTR_L   = $000098
=$00009a					TEXT_SRC_PTR_H   = $00009A
=$00009c					TEXT_DST_PTR_L   = $00009C
=$00009e					TEXT_DST_PTR_H   = $00009E
=$0000a0					TEXT_INDEX       = $0000A0
=$0000a0					MOD_SELECT_L     = $0000A0
=$0000a2					MOD_SELECT_H     = $0000A2
=$0000a2					TEXT_CURSOR_X    = $0000A2
=$0000a4					TEXT_CURSOR_Y    = $0000A4
=$0000a6					LINE_INDEX       = $0000A6
=$0000a8					COLOR_DST_PTR_L  = $0000A8
=$0000aa					COLOR_DST_PTR_H  = $0000AA
=$0000b0					MODEL            = $0000B0
=$0000e0					MOUSE_IDX        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000e6					MOUSE_BUTTONS    = $0000E6
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$0000f0					INTERRUPT_STATE  = $0000F0      ; 1 byte: current state of the boot menu color cycler
=$0000f1					INTERRUPT_COUNT  = $0000F1      ; 1 byte: counter for the boot menu color cycler
=$0000f2					IRQ_COLOR_CHOICE = $0000F2      ; 1 byte: index of the color to cycle in the boot menu
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000370					DOS_BLOCK_SIZE   = $000370      ; 4 bytes - the size of a block to load (in bytes)
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KBD_VARS = $000F00
=$000f00					KBD_STATE           = $000F00   ; 1 byte - The state of the keyboard controller state machine
=$000f01					KBD_SC_BUF          = $000F01   ; 16 bytes - Buffer for keyboard scancodes read
=$000f11					KBD_SC_HEAD         = $000F11   ; 1 byte - Index of the first scancode cell to write to
=$000f12					KBD_CHAR_BUF        = $000F12   ; 16 bytes - Character buffer
=$000f22					KBD_CHAR_HEAD       = $000F22   ; 1 byte - Number of characters in the character buffer
=$000f23					KBD_MODIFIERS       = $000F23   ; 1 byte - State of the modifier keys
=$000f24					KBD_LOCKS           = $000F24   ; 1 byte - State of the lock keys: Caps, Num, Scroll
=$000f25					KBD_TBL_UNMOD       = $000F25   ; 4 bytes - Pointer to the scan code translation table for unmodified keys
=$000f29					KBD_TBL_SHIFT       = $000F29   ; 4 bytes - Pointer to the scan code translation table for shifted keys
=$000f2d					KBD_TBL_CTRL        = $000F2D   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL
=$000f31					KBD_TBL_LOCK        = $000F31   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
=$000f35					KBD_TBL_LOCK_SHIFT  = $000F35   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
=$000f39					KBD_TBL_CTRL_SHIFT  = $000F39   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL and SHIFT
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$18ff00					        ISR_BEGIN        = $18FF00 ; Byte  Beginning of CPU vectors in Direct page
=$18ff00					        HRESET           = $18FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$18ff10					        HCOP             = $18FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$18ff20					        HBRK             = $18FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$18ff30					        HABORT           = $18FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$18ff40					        HNMI             = $18FF40 ;32 Bytes Handle NMI
=$18ff60					        HIRQ             = $18FF60 ;32 Bytes Handle IRQ
=$18ff80					        Unused_FF80      = $18FF80 ;End of direct page Interrrupt handlers
=$18ffe0					        VECTORS_BEGIN    = $18FFE0 ;0 Byte  Interrupt vectors
=$18ffe0					        JMP_READY        = $18FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$18ffe4					        VECTOR_COP       = $18FFE4 ;2 Bytes Native COP Interrupt vector
=$18ffe6					        VECTOR_BRK       = $18FFE6 ;2 Bytes Native BRK Interrupt vector
=$18ffe8					        VECTOR_ABORT     = $18FFE8 ;2 Bytes Native ABORT Interrupt vector
=$18ffea					        VECTOR_NMI       = $18FFEA ;2 Bytes Native NMI Interrupt vector
=$18ffec					        VECTOR_RESET     = $18FFEC ;2 Bytes Unused (Native RESET vector)
=$18ffee					        VECTOR_IRQ       = $18FFEE ;2 Bytes Native IRQ Vector
=$18fff0					        RETURN           = $18FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$18fff4					        VECTOR_ECOP      = $18FFF4 ;2 Bytes Emulation mode interrupt handler
=$18fff6					        VECTOR_EBRK      = $18FFF6 ;2 Bytes Emulation mode interrupt handler
=$18fff8					        VECTOR_EABORT    = $18FFF8 ;2 Bytes Emulation mode interrupt handler
=$18fffa					        VECTOR_ENMI      = $18FFFA ;2 Bytes Emulation mode interrupt handler
=$18fffc					        VECTOR_ERESET    = $18FFFC ;2 Bytes Emulation mode interrupt handler
=$18fffe					        VECTOR_EIRQ      = $18FFFE ;2 Bytes Emulation mode interrupt handler
=$200000					        VECTORS_END      = $200000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_data.asm

>180000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>180003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>180005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>180007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>180009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>18000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>18000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>180013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>180014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>180016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_code.asm

.18ff00		18		clc		RHRESET         CLC
.18ff01		fb		xce		                XCE
.18ff02		5c 00 10 00	jmp $001000	                JML BOOT
.18ff10						RHCOP
.18ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff12		8b		phb		                PHB
.18ff13		0b		phd		                PHD
.18ff14		48		pha		                PHA
.18ff15		da		phx		                PHX
.18ff16		5a		phy		                PHY
.18ff17		5c 08 10 00	jmp $001008	                JML BREAK
.18ff20						RHBRK
.18ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff22		8b		phb		                PHB
.18ff23		0b		phd		                PHD
.18ff24		48		pha		                PHA
.18ff25		da		phx		                PHX
.18ff26		5a		phy		                PHY
.18ff27		5c 08 10 00	jmp $001008	                JML BREAK
.18ff30						RHABORT
.18ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff32		8b		phb		                PHB
.18ff33		0b		phd		                PHD
.18ff34		48		pha		                PHA
.18ff35		da		phx		                PHX
.18ff36		5a		phy		                PHY
.18ff37		5c 08 10 00	jmp $001008	                JML BREAK
.18ff40						 RHNMI
.18ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff42		8b		phb		                PHB
.18ff43		0b		phd		                PHD
.18ff44		48		pha		                PHA
.18ff45		da		phx		                PHX
.18ff46		5a		phy		                PHY
.18ff47		22 96 19 18	jsl $181996	                JSL NMI_HANDLER
.18ff4b		7a		ply		                PLY
.18ff4c		fa		plx		                PLX
.18ff4d		68		pla		                PLA
.18ff4e		2b		pld		                PLD
.18ff4f		ab		plb		                PLB
.18ff50		40		rti		                RTI
.18ff60						RHIRQ
.18ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff62		8b		phb		                PHB
.18ff63		0b		phd		                PHD
.18ff64		48		pha		                PHA
.18ff65		da		phx		                PHX
.18ff66		5a		phy		                PHY
.18ff67		22 c0 17 18	jsl $1817c0	                JSL IRQ_HANDLER
.18ff6b		7a		ply		                PLY
.18ff6c		fa		plx		                PLX
.18ff6d		68		pla		                PLA
.18ff6e		2b		pld		                PLD
.18ff6f		ab		plb		                PLB
.18ff70		40		rti		                RTI
.18ffe0		5c 04 00 1a	jmp $1a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>18ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>18ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>18ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>18ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>18ffec		00 00				                .word $0000    ; FFEC
>18ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.18fff0		5c 7f 06 19	jmp $19067f	RRETURN         JML IRETURN
>18fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>18fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>18fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>18fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>18fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>18fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/fdc_inc.asm

=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/basic_inc.asm

=$1a0000					    BASIC = $1A0000
=1703940					    MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.181000	1000	5c 00 04 19	jmp $190400	BOOT            JML IBOOT
.181004	1004	5c 8a 05 19	jmp $19058a	RESTORE         JML IRESTORE
.181008	1008	5c 1e 06 19	jmp $19061e	BREAK           JML IBREAK
.18100c	100c	5c 65 06 19	jmp $190665	READY           JML IREADY
.181010	1010	5c 9a 10 19	jmp $19109a	SCINIT          JML ISCINIT
.181014	1014	5c 9b 10 19	jmp $19109b	IOINIT          JML IIOINIT
.181018	1018	5c 21 07 19	jmp $190721	PUTC            JML IPUTC
.18101c	101c	5c 0a 07 19	jmp $19070a	PUTS            JML IPUTS
.181020	1020	5c c5 07 19	jmp $1907c5	PUTB            JML IPUTB
.181024	1024	5c 7b 3b 19	jmp $193b7b	PUTBLOCK        JML IPUTBLOCK
.181028	1028	5c 7a 76 19	jmp $19767a	GETSCANCODE     JML KBD_GET_SCANCODE    ; Get the next 8-bit scan code from the keyboard: A = 0 if no scancode present, contains the scancode otherwise
.18102c	102c	5c 30 77 19	jmp $197730	GETLOCKS        JML KBD_GETLOCKS        ; Get the state of the lock keys on the keyboard
.181030	1030	5c 9e 10 19	jmp $19109e	OPEN            JML IOPEN
.181034	1034	5c 9f 10 19	jmp $19109f	CLOSE           JML ICLOSE
.181038	1038	5c 80 06 19	jmp $190680	SETIN           JML ISETIN
.18103c	103c	5c 89 06 19	jmp $190689	SETOUT          JML ISETOUT
.181040	1040	5c a0 10 19	jmp $1910a0	GETB            JML IGETB
.181044	1044	5c 1c 3b 19	jmp $193b1c	GETBLOCK        JML IGETBLOCK
.181048	1048	5c ce 06 19	jmp $1906ce	GETCH           JML IGETCH
.18104c	104c	5c 9b 06 19	jmp $19069b	GETCHW          JML IGETCHW
.181050	1050	5c 92 06 19	jmp $190692	GETCHE          JML IGETCHE
.181054	1054	5c a1 10 19	jmp $1910a1	GETS            JML IGETS
.181058	1058	5c a2 10 19	jmp $1910a2	GETLINE         JML IGETLINE
.18105c	105c	5c a3 10 19	jmp $1910a3	GETFIELD        JML IGETFIELD
.181060	1060	5c a4 10 19	jmp $1910a4	TRIM            JML ITRIM
.181064	1064	5c a5 10 19	jmp $1910a5	PRINTC          JML IPRINTC
.181068	1068	5c a6 10 19	jmp $1910a6	PRINTS          JML IPRINTS
.18106c	106c	5c c6 07 19	jmp $1907c6	PRINTCR         JML IPRINTCR
.181070	1070	5c a7 10 19	jmp $1910a7	PRINTF          JML IPRINTF
.181074	1074	5c a8 10 19	jmp $1910a8	PRINTI          JML IPRINTI
.181078	1078	5c 7a 08 19	jmp $19087a	PRINTH          JML IPRINTH
.18107c	107c	5c a9 10 19	jmp $1910a9	PRINTAI         JML IPRINTAI
.181080	1080	5c 97 08 19	jmp $190897	PRINTAH         JML IPRINTAH
.181084	1084	5c 5e 08 19	jmp $19085e	LOCATE          JML ILOCATE
.181088	1088	5c aa 10 19	jmp $1910aa	PUSHKEY         JML IPUSHKEY
.18108c	108c	5c ab 10 19	jmp $1910ab	PUSHKEYS        JML IPUSHKEYS
.181090	1090	5c 26 08 19	jmp $190826	CSRRIGHT        JML ICSRRIGHT
.181094	1094	5c 35 08 19	jmp $190835	CSRLEFT         JML ICSRLEFT
.181098	1098	5c 44 08 19	jmp $190844	CSRUP           JML ICSRUP
.18109c	109c	5c 53 08 19	jmp $190853	CSRDOWN         JML ICSRDOWN
.1810a0	10a0	5c 15 08 19	jmp $190815	CSRHOME         JML ICSRHOME
.1810a4	10a4	5c 69 08 19	jmp $190869	SCROLLUP        JML ISCROLLUP
.1810a8	10a8	5c e5 08 19	jmp $1908e5	CLRSCREEN       JML ICLRSCREEN
.1810ac	10ac	5c 90 09 19	jmp $190990	INITCHLUT	    JML IINITCHLUT
.1810b0	10b0	5c b9 0b 19	jmp $190bb9	INITSUPERIO	    JML IINITSUPERIO
.1810b4	10b4	5c c5 73 19	jmp $1973c5	INITKEYBOARD    JML IINITKEYBOARD
.1810b8	10b8	5c 00 7f 19	jmp $197f00	INITMOUSE       JML IINITMOUSE
.1810bc	10bc	5c 9a 0b 19	jmp $190b9a	INITCURSOR      JML IINITCURSOR
.1810c0	10c0	5c 62 0b 19	jmp $190b62	INITFONTSET     JML IINITFONTSET
.1810c4	10c4	5c 9d 09 19	jmp $19099d	INITGAMMATABLE  JML IINITGAMMATABLE
.1810c8	10c8	5c bd 09 19	jmp $1909bd	INITALLLUT      JML IINITALLLUT
.1810cc	10cc	5c 83 0a 19	jmp $190a83	INITVKYTXTMODE  JML IINITVKYTXTMODE
.1810d0	10d0	5c 06 0b 19	jmp $190b06	INITVKYGRPMODE  JML IINITVKYGRPMODE
.1810d4	10d4	5c 61 0b 19	jmp $190b61	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810d8	10d8	5c 61 0b 19	jmp $190b61	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810dc	10dc	5c d3 0c 19	jmp $190cd3	INITCODEC       JML IINITCODEC
.1810e0	10e0	5c 62 0d 19	jmp $190d62	RESETCODEC      JML IRESETCODEC
.1810e4	10e4	5c d0 0d 19	jmp $190dd0	BMP_PARSER      JML IBMP_PARSER
.1810e8	10e8	5c 85 0d 19	jmp $190d85	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.1810ec	10ec	5c 28 31 19	jmp $193128	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.1810f0	10f0	5c fa 4d 19	jmp $194dfa	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.1810f4	10f4	5c 8d 4e 19	jmp $194e8d	F_CREATE        JML IF_CREATE       ; create a new file
.1810f8	10f8	5c c7 4e 19	jmp $194ec7	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.1810fc	10fc	5c 60 4f 19	jmp $194f60	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.181100	1100	5c fb 4e 19	jmp $194efb	F_READ          JML IF_READ         ; read the next cluster from the file
.181104	1104	5c 0a 50 19	jmp $19500a	F_DELETE        JML IF_DELETE       ; delete a file / directory
.181108	1108	5c cc 4f 19	jmp $194fcc	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.18110c	110c	5c 06 50 19	jmp $195006	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.181110	1110	5c a3 50 19	jmp $1950a3	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.181114	1114	5c ca 50 19	jmp $1950ca	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.181118	1118	5c ce 50 19	jmp $1950ce	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.18111c	111c	5c 29 54 19	jmp $195429	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.181120	1120	5c f2 3a 19	jmp $193af2	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.181124	1124	5c c2 54 19	jmp $1954c2	F_RUN           JML IF_RUN          ; Load an run a binary file
.181128	1128	5c 15 3f 19	jmp $193f15	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.18112c	112c	5c 01 0b 19	jmp $190b01	SETSIZES        JML ISETSIZES       ; Set the size information in the kernel's text screen routines based on the screen configuration
.181130	1130	5c 11 56 19	jmp $195611	F_COPY          JML IF_COPY         ; Copy a file
.181134	1134	5c 5b 55 19	jmp $19555b	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.181138	1138	5c af 55 19	jmp $1955af	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.18113c	113c	5c db 76 19	jmp $1976db	TESTBREAK       JML KBD_TEST_BREAK  ; Check if BREAK was pressed recently by the user (C is set if true, clear if false)
.181140	1140	5c 14 79 19	jmp $197914	SETTABLE        JML KBD_SETTABLE    ; Set the keyboard scan code -> character translation tables (B:X points to the new tables)
.181144	1144	5c 3e 0b 19	jmp $190b3e	READVRAM        JML IREADVRAM       ; Read a byte from video RAM at B:X
.181148	1148	5c 6c 17 18	jmp $18176c	SETHANDLER      JML ISETHANDLER     ; Set the handler for the interrupt # in A to the FAR routine at Y:X
.18114c	114c	5c da 0f 19	jmp $190fda	DELAY           JML IDELAY          ; Wait at least Y:X ticks of the system clock.
=$001700					VEC_INT_START = *                           ; Label for the start of the IRQ vectors
.181700	1700	5c 2a 65 19	jmp $19652a	VEC_INT00_SOF   JML FDC_TIME_HANDLE         ; IRQ 0, 0 --- Start Of Frame interrupt
.181704	1704	5c ae 10 19	jmp $1910ae	VEC_INT01_SOL   JML IRQHANDLESTUB           ; IRQ 0, 1 --- Start Of Line interrupt
.181708	1708	5c ae 10 19	jmp $1910ae	VEC_INT02_TMR0  JML IRQHANDLESTUB           ; IRQ 0, 2 --- Timer 0 interrupt
.18170c	170c	5c ae 10 19	jmp $1910ae	VEC_INT03_TMR1  JML IRQHANDLESTUB           ; IRQ 0, 3 --- Timer 1 interrupt
.181710	1710	5c ae 10 19	jmp $1910ae	VEC_INT04_TMR2  JML IRQHANDLESTUB           ; IRQ 0, 4 --- Timer 2 interrupt
.181714	1714	5c ae 10 19	jmp $1910ae	VEC_INT05_RTC   JML IRQHANDLESTUB           ; IRQ 0, 5 --- Real Time Clock interrupt
.181718	1718	5c ae 10 19	jmp $1910ae	VEC_INT06_FDC   JML IRQHANDLESTUB           ; IRQ 0, 6 --- Floppy Drive Controller interrupt
.18171c	171c	5c 28 80 19	jmp $198028	VEC_INT07_MOUSE JML MOUSE_INTERRUPT         ; IRQ 0, 7 --- Mouse interrupt
.181720	1720	5c 28 75 19	jmp $197528	VEC_INT10_KBD   JML KBD_PROCESS_BYTE        ; IRQ 1, 0 --- Keyboard interrupt
.181724	1724	5c ae 10 19	jmp $1910ae	VEC_INT11_COL0  JML IRQHANDLESTUB           ; IRQ 1, 1 --- VICKY_II (INT2) Sprite Collision
.181728	1728	5c ae 10 19	jmp $1910ae	VEC_INT12_COL1  JML IRQHANDLESTUB           ; IRQ 1, 2 --- VICKY_II (INT3) Bitmap Collision
.18172c	172c	5c ae 10 19	jmp $1910ae	VEC_INT13_COM2  JML IRQHANDLESTUB           ; IRQ 1, 3 --- Serial port #2 interrupt
.181730	1730	5c ae 10 19	jmp $1910ae	VEC_INT14_COM1  JML IRQHANDLESTUB           ; IRQ 1, 4 --- Serial port #1 interrupt
.181734	1734	5c ae 10 19	jmp $1910ae	VEC_INT15_MIDI  JML IRQHANDLESTUB           ; IRQ 1, 5 --- MIDI controller interrupt
.181738	1738	5c ae 10 19	jmp $1910ae	VEC_INT16_LPT   JML IRQHANDLESTUB           ; IRQ 1, 6 --- Parallel port interrupt
.18173c	173c	5c ae 10 19	jmp $1910ae	VEC_INT17_SDC   JML IRQHANDLESTUB           ; IRQ 1, 7 --- SD Card Controller interrupt (CH376S???)
.181740	1740	5c ae 10 19	jmp $1910ae	VEC_INT20_OPL   JML IRQHANDLESTUB           ; IRQ 2, 0 --- OPL3
.181744	1744	5c ae 10 19	jmp $1910ae	VEC_INT21_GABE0 JML IRQHANDLESTUB           ; IRQ 2, 1 --- GABE (INT0) - TBD
.181748	1748	5c ae 10 19	jmp $1910ae	VEC_INT22_GABE1 JML IRQHANDLESTUB           ; IRQ 2, 2 --- GABE (INT1) - TBD
.18174c	174c	5c ae 10 19	jmp $1910ae	VEC_INT23_VDMA  JML IRQHANDLESTUB           ; IRQ 2, 3 --- VICKY_II (INT4) - VDMA Interrupt
.181750	1750	5c ae 10 19	jmp $1910ae	VEC_INT24_COL2  JML IRQHANDLESTUB           ; IRQ 2, 4 --- VICKY_II (INT5) Tile Collision
.181754	1754	5c ae 10 19	jmp $1910ae	VEC_INT25_GABE2 JML IRQHANDLESTUB           ; IRQ 2, 5 --- GABE (INT2) - TBD
.181758	1758	5c ae 10 19	jmp $1910ae	VEC_INT26_EXT   JML IRQHANDLESTUB           ; IRQ 2, 6 --- External Expansion
.18175c	175c	5c ae 10 19	jmp $1910ae	VEC_INT17_SDINS JML IRQHANDLESTUB           ; IRQ 2, 7 --- SDCARD Insertion
.181760	1760	5c ae 10 19	jmp $1910ae	VEC_INT30_OPN2  JML IRQHANDLESTUB           ; IRQ 3, 0 --- OPN2
.181764	1764	5c ae 10 19	jmp $1910ae	VEC_INT31_OPM   JML IRQHANDLESTUB           ; IRQ 3, 1 --- OPM
.181768	1768	5c ae 10 19	jmp $1910ae	VEC_INT32_IDE   JML IRQHANDLESTUB           ; IRQ 3, 2 --- HDD IDE Interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.18176c						ISETHANDLER
.18176c		8b		phb		                PHB
.18176d		08		php		                PHP
.18176e		48		pha		                PHA             ; begin setdbr macro
.18176f		08		php		                PHP
.181770		e2 20		sep #$20	                SEP #$20        ; set A short
.181772		a9 00		lda #$00	                LDA #0
.181774		48		pha		                PHA
.181775		ab		plb		                PLB
.181776		28		plp		                PLP
.181777		68		pla		                PLA             ; end setdbr macro
.181778		e2 20		sep #$20	                SEP #$20        ; set A short
.18177a		c2 10		rep #$10	                REP #$10        ; set X long
.18177c		48		pha		                PHA                     ; Save the interrupt number
.18177d		5a		phy		                PHY                     ; Save the handler's bank
.18177e		da		phx		                PHX                     ; Save the handler's address
.18177f		f4 00 00	pea #$0000	                PEA #0                  ; Make room for the offset to the vector
.181782						LOCALS
>0001						l_vector        .word ?                 ; Address of vector in bank 0
>0003						l_handler       .dword ?                ; The address of the handler (only 24 bits, really)
>0007						l_number        .byte ?                 ; The interrupt number
.181782		29 30		and #$30	                AND #$30                ; Isolate the block #
.181784		0a		asl a		                ASL A                   ; Multiply by 2 to get the offset to the first vector of the block
.181785		83 01		sta $01,s	                STA l_vector
.181787		a3 07		lda $07,s	                LDA l_number            ; Get the number bank
.181789		29 07		and #$07	                AND #$07                ; Isolate the interrupt number
.18178b		0a		asl a		                ASL A                   ; Multiply by four to get the first byte of that interrupt's vector
.18178c		0a		asl a		                ASL A
.18178d		03 01		ora $01,s	                ORA l_vector            ; Add it to the offset to the block
.18178f		83 01		sta $01,s	                STA l_vector            ; Store back to the vector address
.181791		18		clc		                CLC                     ; Add the address of the start of the interrupt vector table
.181792		a9 00		lda #$00	                LDA #<VEC_INT_START
.181794		63 01		adc $01,s	                ADC l_vector
.181796		83 01		sta $01,s	                STA l_vector
.181798		a9 17		lda #$17	                LDA #>VEC_INT_START
.18179a		63 02		adc $02,s	                ADC l_vector+1
.18179c		83 02		sta $02,s	                STA l_vector+1
.18179e		78		sei		                SEI                     ; Disable the interrupts while we update the vector
.18179f		a0 00 00	ldy #$0000	                LDY #0
.1817a2		a9 5c		lda #$5c	                LDA #$5C                ; Opcode for JML
.1817a4		93 01		sta ($01,s),y	                STA (l_vector),Y        ; Make sure the first byte is a JML instruction
.1817a6		c8		iny		                INY                     ; Move to the low byte of the vector address
.1817a7		a3 03		lda $03,s	                LDA l_handler
.1817a9		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817ab		c8		iny		                INY                     ; Move to the high byte of the vector address
.1817ac		a3 04		lda $04,s	                LDA l_handler+1
.1817ae		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817b0		c8		iny		                INY                     ; Move to the bank of the vector address
.1817b1		a3 05		lda $05,s	                LDA l_handler+2
.1817b3		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817b5		c2 20		rep #$20	                REP #$20        ; set A long
.1817b7		18		clc		                CLC                     ; Clean up the locals off the stack
.1817b8		3b		tsc		                TSC
.1817b9		69 07 00	adc #$0007	                ADC #SIZE(LOCALS)
.1817bc		1b		tcs		                TCS
.1817bd		28		plp		                PLP
.1817be		ab		plb		                PLB
.1817bf		6b		rtl		                RTL
.1817c0						IRQ_HANDLER
.1817c0		08		php		                PHP
.1817c1		e2 20		sep #$20	                SEP #$20        ; set A short
.1817c3		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0     ; Get the block 0 pending interrupts
.1817c7		d0 03		bne $1817cc	                BNE process_reg0
.1817c9		82 80 00	brl $18184c	                BRL CHECK_PENDING_REG1      ; If nothing: skip to block 1
.1817cc						process_reg0
.1817cc		89 01		bit #$01	                BIT #FNX0_INT00_SOF           ; Check to see if the bit is set
.1817ce		f0 0c		beq $1817dc	                BEQ continue            ; If not: skip the rest of this macro
.1817d0		29 01		and #$01	                AND #FNX0_INT00_SOF           ; Mask out all other pending interrupts
.1817d2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817d6		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF            ; And call its handler
.1817da		e2 20		sep #$20	                SEP #$20        ; set A short
.1817dc						continue
.1817dc		89 02		bit #$02	                BIT #FNX0_INT01_SOL           ; Check to see if the bit is set
.1817de		f0 0c		beq $1817ec	                BEQ continue            ; If not: skip the rest of this macro
.1817e0		29 02		and #$02	                AND #FNX0_INT01_SOL           ; Mask out all other pending interrupts
.1817e2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817e6		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL            ; And call its handler
.1817ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1817ec						continue
.1817ec		89 04		bit #$04	                BIT #FNX0_INT02_TMR0           ; Check to see if the bit is set
.1817ee		f0 0c		beq $1817fc	                BEQ continue            ; If not: skip the rest of this macro
.1817f0		29 04		and #$04	                AND #FNX0_INT02_TMR0           ; Mask out all other pending interrupts
.1817f2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817f6		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0            ; And call its handler
.1817fa		e2 20		sep #$20	                SEP #$20        ; set A short
.1817fc						continue
.1817fc		89 08		bit #$08	                BIT #FNX0_INT03_TMR1           ; Check to see if the bit is set
.1817fe		f0 0c		beq $18180c	                BEQ continue            ; If not: skip the rest of this macro
.181800		29 08		and #$08	                AND #FNX0_INT03_TMR1           ; Mask out all other pending interrupts
.181802		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181806		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1            ; And call its handler
.18180a		e2 20		sep #$20	                SEP #$20        ; set A short
.18180c						continue
.18180c		89 10		bit #$10	                BIT #FNX0_INT04_TMR2           ; Check to see if the bit is set
.18180e		f0 0c		beq $18181c	                BEQ continue            ; If not: skip the rest of this macro
.181810		29 10		and #$10	                AND #FNX0_INT04_TMR2           ; Mask out all other pending interrupts
.181812		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181816		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2            ; And call its handler
.18181a		e2 20		sep #$20	                SEP #$20        ; set A short
.18181c						continue
.18181c		89 20		bit #$20	                BIT #FNX0_INT05_RTC           ; Check to see if the bit is set
.18181e		f0 0c		beq $18182c	                BEQ continue            ; If not: skip the rest of this macro
.181820		29 20		and #$20	                AND #FNX0_INT05_RTC           ; Mask out all other pending interrupts
.181822		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181826		22 14 17 00	jsl $001714	                JSL VEC_INT05_RTC            ; And call its handler
.18182a		e2 20		sep #$20	                SEP #$20        ; set A short
.18182c						continue
.18182c		89 40		bit #$40	                BIT #FNX0_INT06_FDC           ; Check to see if the bit is set
.18182e		f0 0c		beq $18183c	                BEQ continue            ; If not: skip the rest of this macro
.181830		29 40		and #$40	                AND #FNX0_INT06_FDC           ; Mask out all other pending interrupts
.181832		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181836		22 18 17 00	jsl $001718	                JSL VEC_INT06_FDC            ; And call its handler
.18183a		e2 20		sep #$20	                SEP #$20        ; set A short
.18183c						continue
.18183c		89 80		bit #$80	                BIT #FNX0_INT07_MOUSE           ; Check to see if the bit is set
.18183e		f0 0c		beq $18184c	                BEQ continue            ; If not: skip the rest of this macro
.181840		29 80		and #$80	                AND #FNX0_INT07_MOUSE           ; Mask out all other pending interrupts
.181842		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181846		22 1c 17 00	jsl $00171c	                JSL VEC_INT07_MOUSE            ; And call its handler
.18184a		e2 20		sep #$20	                SEP #$20        ; set A short
.18184c						continue
.18184c						CHECK_PENDING_REG1
.18184c		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1
.181850		d0 03		bne $181855	                BNE process_reg1
.181852		82 80 00	brl $1818d5	                BRL CHECK_PENDING_REG2
.181855						process_reg1
.181855		89 01		bit #$01	                BIT #FNX1_INT00_KBD           ; Check to see if the bit is set
.181857		f0 0c		beq $181865	                BEQ continue            ; If not: skip the rest of this macro
.181859		29 01		and #$01	                AND #FNX1_INT00_KBD           ; Mask out all other pending interrupts
.18185b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18185f		22 20 17 00	jsl $001720	                JSL VEC_INT10_KBD            ; And call its handler
.181863		e2 20		sep #$20	                SEP #$20        ; set A short
.181865						continue
.181865		89 02		bit #$02	                BIT #FNX1_INT01_COL0           ; Check to see if the bit is set
.181867		f0 0c		beq $181875	                BEQ continue            ; If not: skip the rest of this macro
.181869		29 02		and #$02	                AND #FNX1_INT01_COL0           ; Mask out all other pending interrupts
.18186b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18186f		22 24 17 00	jsl $001724	                JSL VEC_INT11_COL0            ; And call its handler
.181873		e2 20		sep #$20	                SEP #$20        ; set A short
.181875						continue
.181875		89 04		bit #$04	                BIT #FNX1_INT02_COL1           ; Check to see if the bit is set
.181877		f0 0c		beq $181885	                BEQ continue            ; If not: skip the rest of this macro
.181879		29 04		and #$04	                AND #FNX1_INT02_COL1           ; Mask out all other pending interrupts
.18187b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18187f		22 28 17 00	jsl $001728	                JSL VEC_INT12_COL1            ; And call its handler
.181883		e2 20		sep #$20	                SEP #$20        ; set A short
.181885						continue
.181885		89 08		bit #$08	                BIT #FNX1_INT03_COM2           ; Check to see if the bit is set
.181887		f0 0c		beq $181895	                BEQ continue            ; If not: skip the rest of this macro
.181889		29 08		and #$08	                AND #FNX1_INT03_COM2           ; Mask out all other pending interrupts
.18188b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18188f		22 2c 17 00	jsl $00172c	                JSL VEC_INT13_COM2            ; And call its handler
.181893		e2 20		sep #$20	                SEP #$20        ; set A short
.181895						continue
.181895		89 10		bit #$10	                BIT #FNX1_INT04_COM1           ; Check to see if the bit is set
.181897		f0 0c		beq $1818a5	                BEQ continue            ; If not: skip the rest of this macro
.181899		29 10		and #$10	                AND #FNX1_INT04_COM1           ; Mask out all other pending interrupts
.18189b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18189f		22 30 17 00	jsl $001730	                JSL VEC_INT14_COM1            ; And call its handler
.1818a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818a5						continue
.1818a5		89 20		bit #$20	                BIT #FNX1_INT05_MPU401           ; Check to see if the bit is set
.1818a7		f0 0c		beq $1818b5	                BEQ continue            ; If not: skip the rest of this macro
.1818a9		29 20		and #$20	                AND #FNX1_INT05_MPU401           ; Mask out all other pending interrupts
.1818ab		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818af		22 34 17 00	jsl $001734	                JSL VEC_INT15_MIDI            ; And call its handler
.1818b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818b5						continue
.1818b5		89 40		bit #$40	                BIT #FNX1_INT06_LPT           ; Check to see if the bit is set
.1818b7		f0 0c		beq $1818c5	                BEQ continue            ; If not: skip the rest of this macro
.1818b9		29 40		and #$40	                AND #FNX1_INT06_LPT           ; Mask out all other pending interrupts
.1818bb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818bf		22 38 17 00	jsl $001738	                JSL VEC_INT16_LPT            ; And call its handler
.1818c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818c5						continue
.1818c5		89 80		bit #$80	                BIT #FNX1_INT07_SDCARD           ; Check to see if the bit is set
.1818c7		f0 0c		beq $1818d5	                BEQ continue            ; If not: skip the rest of this macro
.1818c9		29 80		and #$80	                AND #FNX1_INT07_SDCARD           ; Mask out all other pending interrupts
.1818cb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818cf		22 3c 17 00	jsl $00173c	                JSL VEC_INT17_SDC            ; And call its handler
.1818d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818d5						continue
.1818d5						CHECK_PENDING_REG2
.1818d5		af 42 01 00	lda $000142	                LDA @l INT_PENDING_REG2
.1818d9		d0 03		bne $1818de	                BNE process_reg2
.1818db		82 80 00	brl $18195e	                BRL CHECK_PENDING_REG3
.1818de						process_reg2
.1818de		89 01		bit #$01	                BIT #FNX2_INT00_OPL3           ; Check to see if the bit is set
.1818e0		f0 0c		beq $1818ee	                BEQ continue            ; If not: skip the rest of this macro
.1818e2		29 01		and #$01	                AND #FNX2_INT00_OPL3           ; Mask out all other pending interrupts
.1818e4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818e8		22 40 17 00	jsl $001740	                JSL VEC_INT20_OPL            ; And call its handler
.1818ec		e2 20		sep #$20	                SEP #$20        ; set A short
.1818ee						continue
.1818ee		89 02		bit #$02	                BIT #FNX2_INT01_GABE_INT0           ; Check to see if the bit is set
.1818f0		f0 0c		beq $1818fe	                BEQ continue            ; If not: skip the rest of this macro
.1818f2		29 02		and #$02	                AND #FNX2_INT01_GABE_INT0           ; Mask out all other pending interrupts
.1818f4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818f8		22 44 17 00	jsl $001744	                JSL VEC_INT21_GABE0            ; And call its handler
.1818fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1818fe						continue
.1818fe		89 04		bit #$04	                BIT #FNX2_INT02_GABE_INT1           ; Check to see if the bit is set
.181900		f0 0c		beq $18190e	                BEQ continue            ; If not: skip the rest of this macro
.181902		29 04		and #$04	                AND #FNX2_INT02_GABE_INT1           ; Mask out all other pending interrupts
.181904		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181908		22 48 17 00	jsl $001748	                JSL VEC_INT22_GABE1            ; And call its handler
.18190c		e2 20		sep #$20	                SEP #$20        ; set A short
.18190e						continue
.18190e		89 08		bit #$08	                BIT #FNX2_INT03_VDMA           ; Check to see if the bit is set
.181910		f0 0c		beq $18191e	                BEQ continue            ; If not: skip the rest of this macro
.181912		29 08		and #$08	                AND #FNX2_INT03_VDMA           ; Mask out all other pending interrupts
.181914		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181918		22 4c 17 00	jsl $00174c	                JSL VEC_INT23_VDMA            ; And call its handler
.18191c		e2 20		sep #$20	                SEP #$20        ; set A short
.18191e						continue
.18191e		89 10		bit #$10	                BIT #FNX2_INT04_COL2           ; Check to see if the bit is set
.181920		f0 0c		beq $18192e	                BEQ continue            ; If not: skip the rest of this macro
.181922		29 10		and #$10	                AND #FNX2_INT04_COL2           ; Mask out all other pending interrupts
.181924		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181928		22 50 17 00	jsl $001750	                JSL VEC_INT24_COL2            ; And call its handler
.18192c		e2 20		sep #$20	                SEP #$20        ; set A short
.18192e						continue
.18192e		89 20		bit #$20	                BIT #FNX2_INT05_GABE_INT2           ; Check to see if the bit is set
.181930		f0 0c		beq $18193e	                BEQ continue            ; If not: skip the rest of this macro
.181932		29 20		and #$20	                AND #FNX2_INT05_GABE_INT2           ; Mask out all other pending interrupts
.181934		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181938		22 54 17 00	jsl $001754	                JSL VEC_INT25_GABE2            ; And call its handler
.18193c		e2 20		sep #$20	                SEP #$20        ; set A short
.18193e						continue
.18193e		89 40		bit #$40	                BIT #FNX2_INT06_EXT           ; Check to see if the bit is set
.181940		f0 0c		beq $18194e	                BEQ continue            ; If not: skip the rest of this macro
.181942		29 40		and #$40	                AND #FNX2_INT06_EXT           ; Mask out all other pending interrupts
.181944		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181948		22 58 17 00	jsl $001758	                JSL VEC_INT26_EXT            ; And call its handler
.18194c		e2 20		sep #$20	                SEP #$20        ; set A short
.18194e						continue
.18194e		89 80		bit #$80	                BIT #FNX2_INT07_SDCARD_INS           ; Check to see if the bit is set
.181950		f0 0c		beq $18195e	                BEQ continue            ; If not: skip the rest of this macro
.181952		29 80		and #$80	                AND #FNX2_INT07_SDCARD_INS           ; Mask out all other pending interrupts
.181954		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181958		22 5c 17 00	jsl $00175c	                JSL VEC_INT17_SDINS            ; And call its handler
.18195c		e2 20		sep #$20	                SEP #$20        ; set A short
.18195e						continue
.18195e						CHECK_PENDING_REG3
.18195e		af 43 01 00	lda $000143	                LDA @l INT_PENDING_REG3
.181962		f0 30		beq $181994	                BEQ EXIT_IRQ_HANDLE
.181964		89 01		bit #$01	                BIT #FNX3_INT00_OPN2           ; Check to see if the bit is set
.181966		f0 0c		beq $181974	                BEQ continue            ; If not: skip the rest of this macro
.181968		29 01		and #$01	                AND #FNX3_INT00_OPN2           ; Mask out all other pending interrupts
.18196a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18196e		22 60 17 00	jsl $001760	                JSL VEC_INT30_OPN2            ; And call its handler
.181972		e2 20		sep #$20	                SEP #$20        ; set A short
.181974						continue
.181974		89 02		bit #$02	                BIT #FNX3_INT01_OPM           ; Check to see if the bit is set
.181976		f0 0c		beq $181984	                BEQ continue            ; If not: skip the rest of this macro
.181978		29 02		and #$02	                AND #FNX3_INT01_OPM           ; Mask out all other pending interrupts
.18197a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18197e		22 64 17 00	jsl $001764	                JSL VEC_INT31_OPM            ; And call its handler
.181982		e2 20		sep #$20	                SEP #$20        ; set A short
.181984						continue
.181984		89 04		bit #$04	                BIT #FNX3_INT02_IDE           ; Check to see if the bit is set
.181986		f0 0c		beq $181994	                BEQ continue            ; If not: skip the rest of this macro
.181988		29 04		and #$04	                AND #FNX3_INT02_IDE           ; Mask out all other pending interrupts
.18198a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18198e		22 68 17 00	jsl $001768	                JSL VEC_INT32_IDE            ; And call its handler
.181992		e2 20		sep #$20	                SEP #$20        ; set A short
.181994						continue
.181994						EXIT_IRQ_HANDLE
.181994		28		plp		                PLP
.181995		6b		rtl		                RTL
.181996		6b		rtl		NMI_HANDLER     RTL
.181997						HANDLE_TIMER0
.181997		48		pha		                PHA
.181998		08		php		                PHP
.181999		e2 20		sep #$20	                SEP #$20        ; set A short
.18199b		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.18199f		09 80		ora #$80	                ORA #TIMER0TRIGGER
.1819a1		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.1819a5		28		plp		                PLP
.1819a6		68		pla		                PLA
.1819a7		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/super_io_def.asm

=$af1060					SIO_KB                  = $AF1060
=$af1100					PME_STS_REG             = $AF1100
=$af1102					PME_EN_REG		        = $AF1102
=$af1104					PME_STS1_REG		    = $AF1104
=$af1105					PME_STS2_REG		    = $AF1105
=$af1106					PME_STS3_REG		    = $AF1106
=$af1107					PME_STS4_REG		    = $AF1107
=$af1108					PME_STS5_REG		    = $AF1108
=$af110a					PME_EN1_REG             = $AF110A
=$af110b					PME_EN2_REG             = $AF110B
=$af110c					PME_EN3_REG             = $AF110C
=$af110d					PME_EN4_REG             = $AF110D
=$af110e					PME_EN5_REG             = $AF110E
=$af1110					SMI_STS1_REG		    = $AF1110
=$af1111					SMI_STS2_REG		    = $AF1111
=$af1112					SMI_STS3_REG		    = $AF1112
=$af1113					SMI_STS4_REG		    = $AF1113
=$af1114					SMI_STS5_REG		    = $AF1114
=$af1116					SMI_EN1_REG             = $AF1116
=$af1117					SMI_EN2_REG             = $AF1117
=$af1118					SMI_EN3_REG             = $AF1118
=$af1119					SMI_EN4_REG             = $AF1119
=$af111a					SMI_EN5_REG             = $AF111A
=$af111c					MSC_ST_REG              = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		    = $AF1123
=$af1124					GP11_REG    		    = $AF1124
=$af1125					GP12_REG    		    = $AF1125
=$af1126					GP13_REG    		    = $AF1126
=$af1127					GP14_REG    		    = $AF1127
=$af1128					GP15_REG    		    = $AF1128
=$af1129					GP16_REG    		    = $AF1129
=$af112a					GP17_REG    		    = $AF112A
=$af112b					GP20_REG    		    = $AF112B
=$af112c					GP21_REG    		    = $AF112C
=$af112d					GP22_REG		        = $AF112D
=$af112f					GP24_REG		        = $AF112F
=$af1130					GP25_REG		        = $AF1130
=$af1131					GP26_REG		        = $AF1131
=$af1132					GP27_REG		        = $AF1132
=$af1133					GP30_REG		        = $AF1133
=$af1134					GP31_REG		        = $AF1134
=$af1135					GP32_REG		        = $AF1135
=$af1136					GP33_REG		        = $AF1136
=$af1137					GP34_REG		        = $AF1137
=$af1138					GP35_REG		        = $AF1138
=$af1139					GP36_REG		        = $AF1139
=$af113a					GP37_REG		        = $AF113A
=$af113b					GP40_REG		        = $AF113B
=$af113c					GP41_REG		        = $AF113C
=$af113d					GP42_REG		        = $AF113D
=$af113e					GP43_REG		        = $AF113E
=$af113f					GP50_REG		        = $AF113F
=$af1140					GP51_REG		        = $AF1140
=$af1141					GP52_REG		        = $AF1141
=$af1142					GP53_REG		        = $AF1142
=$af1143					GP54_REG		        = $AF1143
=$af1144					GP55_REG		        = $AF1144
=$af1145					GP56_REG		        = $AF1145
=$af1146					GP57_REG		        = $AF1146
=$af1147					GP60_REG		        = $AF1147
=$af1148					GP61_REG		        = $AF1148
=$af114b					GP1_REG			        = $AF114B
=$af114c					GP2_REG			        = $AF114C
=$af114d					GP3_REG			        = $AF114D
=$af114e					GP4_REG			        = $AF114E
=$af114f					GP5_REG			        = $AF114F
=$af1150					GP6_REG			        = $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG                = $AF1157
=$af1158					FAN_CTRL_REG  	        = $AF1158
=$af1159					FAN1_TACH_REG           = $AF1159
=$af115a					FAN2_TACH_REG           = $AF115A
=$af115b					FAN1_PRELOAD_REG        = $AF115B
=$af115c					FAN2_PRELOAD_REG        = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE      = $AF115F
=$af1200					SIO_JOY                 = $AF1200
=$af12f8					SIO_COM1                = $AF12F8
=$af1330					SIO_MPU                 = $AF1330
=$af1378					SIO_LPT0                = $AF1378
=$af13f0					SIO_FDC                 = $AF13F0
=$af13f0					SIO_FDC_SRA             = $AF13F0 ; Read Only - Status Register A
=$af13f1					SIO_FDC_SRB             = $AF13F1 ; Read Only - Status Register B
=$af13f2					SIO_FDC_DOR             = $AF13F2 ; Read/Write - Digital Output Register
=$af13f3					SIO_FDC_TSR             = $AF13F3 ; Read/Write - Tape Drive Status
=$af13f4					SIO_FDC_MSR             = $AF13F4 ; Read - Main Status Register
=$af13f4					SIO_FDC_DSR             = $AF13F4 ; Write - Data Select Register
=$af13f5					SIO_FDC_DTA             = $AF13F5 ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV             = $AF13F6 ; Reserved
=$af13f7					SIO_FDC_DIR             = $AF13F7 ; Read - Digital Input Register
=$af13f8					SIO_FDC_CCR             = $AF13F8 ; Write - Configuration Control Register
=$af13f8					SIO_COM0                = $AF13F8

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/keyboard_def.asm

=$af1807					    STATUS_PORT 	= $AF1807
=$af1807					    KBD_STATUS      = $AF1807
=$af1807					    KBD_CMD_BUF		= $AF1807
=$af1803					    KBD_OUT_BUF 	= $AF1803
=$af1803					    KBD_INPT_BUF	= $AF1803
=$af1803					    KBD_DATA_BUF	= $AF1803
=$af180a					    PORT_A		    = $AF180A   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$af180b					    PORT_B			= $AF180B   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=4						CHAN_EVID     = 4           ; ID for the second video port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$04						SYNC_Turn_Off           = $04 ; 0 = Normal Operation, 1 = Turn Off Sync to get sleep mode from Monitor
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select, Bit[6] - Collision On
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Pos: [13-4] Scroll: [3:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Pos: [13:4] Scroll: [3:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ;  Direction: [14] Pos: [13-4] Scroll: [3:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Pos: [13:4] Scroll: [3:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ;  Direction: [14] Pos: [13-4] Scroll: [3:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Pos: [13:4] Scroll: [3:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ;  Direction: [14] Pos: [13-4] Scroll: [3:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Pos: [13:4] Scroll: [3:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src\kernel.asm

.190400						IBOOT
.190400		18		clc		                CLC               ; clear the carry flag
.190401		fb		xce		                XCE               ; move carry to emulation flag.
.190402		78		sei		                SEI               ; Disable interrupts
.190403		c2 30		rep #$30	                REP #$30        ; set A&X long
.190405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.190408		1b		tcs		                TAS
.190409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.19040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.19040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.190412		54 00 18	mvn $18,$00	                MVN $18,$00       ; Or during soft loading of the kernel from the debug port
.190415		48		pha		                PHA             ; begin setdp macro
.190416		08		php		                PHP
.190417		c2 20		rep #$20	                REP #$20        ; set A long
.190419		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19041c		5b		tcd		                TCD
.19041d		28		plp		                PLP
.19041e		68		pla		                PLA             ; end setdp macro
.19041f		e2 20		sep #$20	                SEP #$20        ; set A short
.190421		a2 00 00	ldx #$0000	                LDX #$0000
.190424		a9 00		lda #$00	                LDA #$00
.190426						CLEAR_MEM_LOOP
.190426		95 00		sta $00,x	                STA $0000, X
.190428		e8		inx		                INX
.190429		e0 00 01	cpx #$0100	                CPX #$0100
.19042c		d0 f8		bne $190426	                BNE CLEAR_MEM_LOOP
.19042e		ea		nop		                NOP
.19042f		a9 ff		lda #$ff	                LDA #$FF
.190431		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.190435		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.190439		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.19043d		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.190441		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.190445		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190449		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.19044d		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.190451		22 b8 0c 19	jsl $190cb8	                JSL INITRTC               ; Initialize the RTC
.190455		e2 20		sep #$20	                SEP #$20        ; set A short
.190457		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.19045b		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.19045d		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.19045f		d0 1e		bne $19047f	                BNE SkipInitExpC100C200
.190461		c2 20		rep #$20	                REP #$20        ; set A long
.190463		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.190467		c9 64 00	cmp #$0064	                CMP #$0064
.19046a		f0 0f		beq $19047b	                BEQ InitC100ESID
.19046c		c9 c8 00	cmp #$00c8	                CMP #$00C8
.19046f		d0 0e		bne $19047f	                BNE SkipInitExpC100C200
.190471		22 04 69 19	jsl $196904	                JSL SIMPLE_INIT_ETHERNET_CTRL
.190475		22 8b 69 19	jsl $19698b	                JSL INIT_EVID_VID_MODE
.190479		80 04		bra $19047f	                BRA SkipInitExpC100C200
.19047b						InitC100ESID:
.19047b		22 04 69 19	jsl $196904	                JSL SIMPLE_INIT_ETHERNET_CTRL
.19047f						SkipInitExpC100C200:
.19047f		e2 20		sep #$20	                SEP #$20        ; set A short
.190481		c2 10		rep #$10	                REP #$10        ; set X long
.190483		a9 9f		lda #$9f	                LDA #$9F              ; Channel 1 - Full Atteniation
.190485		8f 00 f1 af	sta $aff100	                STA $AFF100
.190489		a9 bf		lda #$bf	                LDA #$BF              ; Channel 2 - Full Atteniation
.19048b		8f 00 f1 af	sta $aff100	                STA $AFF100
.19048f		a9 df		lda #$df	                LDA #$DF              ; Channel 3 - No Atteniation
.190491		8f 00 f1 af	sta $aff100	                STA $AFF100
.190495		a9 ff		lda #$ff	                LDA #$FF              ; Channel 4 - No Atteniation
.190497		8f 00 f1 af	sta $aff100	                STA $AFF100
.19049b		a9 70		lda #$70	                LDA #$70                  ; Set the default text color to dim white on black
.19049d		85 1e		sta $1e		                STA CURCOLOR
.19049f		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.1904a3		29 01		and #$01	                AND #$01
.1904a5		c9 01		cmp #$01	                CMP #$01
.1904a7		d0 14		bne $1904bd	                BNE Alreadyin640480Mode
.1904a9		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904ad		29 fc		and #$fc	                AND #$FC
.1904af		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904b3		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904b7		09 01		ora #$01	                ORA #$01
.1904b9		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904bd						Alreadyin640480Mode
.1904bd		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904c1		29 fc		and #$fc	                AND #$FC
.1904c3		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.1904c7		a9 00		lda #$00	                LDA #0
.1904c9		22 38 10 00	jsl $001038	                JSL SETIN
.1904cd		22 3c 10 00	jsl $00103c	                JSL SETOUT
.1904d1		22 1e 6b 19	jsl $196b1e	                JSL ANSI_INIT
.1904d5		22 2c 11 00	jsl $00112c	                JSL SETSIZES
.1904d9		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.1904dd		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.1904e1		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.1904e5		22 7b 0b 19	jsl $190b7b	                JSL INITMOUSEPOINTER
.1904e9		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.1904ed		c2 20		rep #$20	                REP #$20        ; set A long
.1904ef		48		pha		                PHA             ; begin setdp macro
.1904f0		08		php		                PHP
.1904f1		c2 20		rep #$20	                REP #$20        ; set A long
.1904f3		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1904f6		5b		tcd		                TCD
.1904f7		28		plp		                PLP
.1904f8		68		pla		                PLA             ; end setdp macro
.1904f9		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD        ; Initialize the keyboard
.1904fd		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE           ; Initialize the mouse
.190501		58		cli		                CLI
.190502		a9 00 00	lda #$0000	                LDA #0
.190505		8d e0 00	sta $00e0	                STA @w MOUSE_IDX
.190508		e2 20		sep #$20	                SEP #$20        ; set A short
.19050a		c2 10		rep #$10	                REP #$10        ; set X long
.19050c		48		pha		                PHA             ; begin setdbr macro
.19050d		08		php		                PHP
.19050e		e2 20		sep #$20	                SEP #$20        ; set A short
.190510		a9 19		lda #$19	                LDA #`greet_msg
.190512		48		pha		                PHA
.190513		ab		plb		                PLB
.190514		28		plp		                PLP
.190515		68		pla		                PLA             ; end setdbr macro
.190516		a2 00 00	ldx #$0000	                LDX #0
.190519		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.19051d		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.190521		e8		inx		                INX
.190522		e0 00 10	cpx #$1000	                CPX #$1000
.190525		d0 f2		bne $190519	                BNE jmpcopy
.190527						retry_boot
.190527		22 43 3e 19	jsl $193e43	                JSL DOS_INIT            ; Initialize the "disc operating system"
.19052b		22 73 80 19	jsl $198073	                JSL BOOT_SOUND          ; Play the boot sound
.19052f		22 00 00 1e	jsl $1e0000	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.190533		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN           ; Clear Screen and Set a standard color in Color Memory
.190537		22 a0 10 00	jsl $0010a0	                JSL CSRHOME             ; Move to the home position
.19053b						greet
.19053b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19053d		48		pha		                PHA             ; begin setdbr macro
.19053e		08		php		                PHP
.19053f		e2 20		sep #$20	                SEP #$20        ; set A short
.190541		a9 19		lda #$19	                LDA #`greet_msg
.190543		48		pha		                PHA
.190544		ab		plb		                PLB
.190545		28		plp		                PLP
.190546		68		pla		                PLA             ; end setdbr macro
.190547		a2 2a 81	ldx #$812a	                LDX #<>greet_msg
.19054a		22 01 07 19	jsl $190701	                JSL IPRINT              ; print the first line
.19054e		22 10 09 19	jsl $190910	                JSL ICOLORFLAG          ; This is to set the color memory for the text logo
.190552		22 6b 6a 19	jsl $196a6b	                JSL EVID_GREET          ; Print the EVID greeting, if the EVID card is installed
.190556		c2 30		rep #$30	                REP #$30        ; set A&X long
.190558		a9 ff fe	lda #$feff	                LDA #STACK_END          ; We are the root, let's make sure from now on, that we start clean
.19055b		1b		tcs		                TAS
.19055c		e2 20		sep #$20	                SEP #$20        ; set A short
.19055e		c2 10		rep #$10	                REP #$10        ; set X long
.190560		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.190564		c9 39		cmp #$39	                CMP #SCAN_SP          ; Did the user press SPACE?
.190566		f0 10		beq $190578	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.190568		c9 1c		cmp #$1c	                CMP #SCAN_CR          ; Did the user press RETURN?
.19056a		f0 1e		beq $19058a	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.19056c		c9 3b		cmp #$3b	                CMP #CHAR_F1          ; Did the user press F1?
.19056e		f0 62		beq $1905d2	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.190570		c9 3c		cmp #$3c	                CMP #CHAR_F2          ; Did the user press F2?
.190572		f0 1d		beq $190591	                BEQ BOOTSDC           ; Yes: boot via the SDC
.190574		c9 3d		cmp #$3d	                CMP #CHAR_F3          ; Did the user press F3?
.190576		f0 39		beq $1905b1	                BEQ BOOTIDE           ; Yes: boot via the IDE
.190578		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.19057c		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.19057e		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.190580		f0 2f		beq $1905b1	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.190582		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.190584		f0 0b		beq $190591	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.190586		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.190588		f0 48		beq $1905d2	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.19058a						IRESTORE
.19058a		5c 00 00 1a	jmp $1a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.19058e		ea		nop		CREDIT_LOCK     NOP
.19058f		80 fd		bra $19058e	                BRA CREDIT_LOCK
.190591		a2 59 85	ldx #$8559	BOOTSDC         LDX #<>sdc_boot
.190594		22 01 07 19	jsl $190701	                JSL IPRINT
.190598		e2 20		sep #$20	                SEP #$20        ; set A short
.19059a		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.19059c		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905a0		22 15 3f 19	jsl $193f15	                JSL DOS_MOUNT         ; Mount the SDC
.1905a4		90 06		bcc $1905ac	                BCC sdc_error         ; Print an error message if couldn't get anything
.1905a6		22 d0 40 19	jsl $1940d0	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.1905aa		80 de		bra $19058a	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.1905ac		a2 dd 84	ldx #$84dd	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.1905af		80 40		bra $1905f1	                BRA PR_BOOT_ERROR
.1905b1		a2 70 85	ldx #$8570	BOOTIDE         LDX #<>ide_boot
.1905b4		22 01 07 19	jsl $190701	                JSL IPRINT
.1905b8		e2 20		sep #$20	                SEP #$20        ; set A short
.1905ba		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.1905bc		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905c0		22 15 3f 19	jsl $193f15	                JSL DOS_MOUNT         ; Mount the IDE drive
.1905c4		90 07		bcc $1905cd	                BCC hdc_error         ; Print an error message if couldn't get anything
.1905c6		22 d0 40 19	jsl $1940d0	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.1905ca		82 bd ff	brl $19058a	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.1905cd		a2 f9 84	ldx #$84f9	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.1905d0		80 1f		bra $1905f1	                BRA PR_BOOT_ERROR
.1905d2		a2 42 85	ldx #$8542	BOOTFLOPPY      LDX #<>fdc_boot
.1905d5		22 01 07 19	jsl $190701	                JSL IPRINT
.1905d9		e2 20		sep #$20	                SEP #$20        ; set A short
.1905db		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.1905dd		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905e1		22 c3 62 19	jsl $1962c3	                JSL FDC_MOUNT         ; Mount the floppy drive
.1905e5		90 07		bcc $1905ee	                BCC fdc_error         ; Print an error message if couldn't get anything
.1905e7		22 d0 40 19	jsl $1940d0	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.1905eb		82 9c ff	brl $19058a	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.1905ee		a2 1c 85	ldx #$851c	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.1905f1		22 01 07 19	jsl $190701	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.1905f5		a2 b8 84	ldx #$84b8	                LDX #<>boot_retry     ; Print the boot retry prompt
.1905f8		22 01 07 19	jsl $190701	                JSL IPRINT
.1905fc		22 9b 06 19	jsl $19069b	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.190600		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.190602		d0 03		bne $190607	                BNE chk_r_lc
.190604		82 20 ff	brl $190527	                BRL retry_boot        ; Yes: retry the boot sequence
.190607		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.190609		d0 03		bne $19060e	                BNE chk_b_lc
.19060b		82 19 ff	brl $190527	                BRL retry_boot
.19060e		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.190610		d0 03		bne $190615	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.190612		82 75 ff	brl $19058a	                BRL BOOTBASIC
.190615						chk_b_lc_not:
.190615		c9 42		cmp #$42	                CMP #'B'
.190617		d0 03		bne $19061c	                BNE chk_b_lc_not0
.190619		82 6e ff	brl $19058a	                BRL BOOTBASIC
.19061c						chk_b_lc_not0:
.19061c		80 de		bra $1905fc	                BRA boot_wait_key     ; No: keep waiting
.19061e						IBREAK
.19061e		48		pha		                PHA             ; begin setdp macro
.19061f		08		php		                PHP
.190620		c2 20		rep #$20	                REP #$20        ; set A long
.190622		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190625		5b		tcd		                TCD
.190626		28		plp		                PLP
.190627		68		pla		                PLA             ; end setdp macro
.190628		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.190629		8f 48 02 00	sta $000248	                STA CPUY
.19062d		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.19062e		8f 46 02 00	sta $000246	                STA CPUX
.190632		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.190633		8f 44 02 00	sta $000244	                STA CPUA
.190637		68		pla		                PLA
.190638		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.19063c		e2 20		sep #$20	                SEP #$20        ; set A short
.19063e		68		pla		                PLA             ; Pull Data Bank (8 bits)
.19063f		8f 4e 02 00	sta $00024e	                STA CPUDBR
.190643		68		pla		                PLA             ; Pull Flags (8 bits)
.190644		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.190648		c2 20		rep #$20	                REP #$20        ; set A long
.19064a		68		pla		                PLA             ; Pull Program Counter (16 bits)
.19064b		8f 40 02 00	sta $000240	                STA CPUPC
.19064f		e2 20		sep #$20	                SEP #$20        ; set A short
.190651		68		pla		                PLA             ; Pull Program Bank (8 bits)
.190652		8f 42 02 00	sta $000242	                STA CPUPBR
.190656		c2 20		rep #$20	                REP #$20        ; set A long
.190658		3b		tsc		                TSA             ; Get the stack
.190659		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.19065d		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.190660		1b		tcs		                TAS
.190661		5c 04 00 1a	jmp $1a0004	                JML MONITOR
.190665						IREADY
.190665		48		pha		                PHA             ; begin setdbr macro
.190666		08		php		                PHP
.190667		e2 20		sep #$20	                SEP #$20        ; set A short
.190669		a9 19		lda #$19	                LDA #`ready_msg
.19066b		48		pha		                PHA
.19066c		ab		plb		                PLB
.19066d		28		plp		                PLP
.19066e		68		pla		                PLA             ; end setdbr macro
.19066f		e2 20		sep #$20	                SEP #$20        ; set A short
.190671		a2 8b 85	ldx #$858b	                LDX #<>ready_msg
.190674		22 01 07 19	jsl $190701	                JSL IPRINT
.190678						IREADYWAIT
.190678		22 92 06 19	jsl $190692	                JSL IGETCHE
.19067c		80 fa		bra $190678	                BRA IREADYWAIT
.19067e		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.19067f		db		stp		IRETURN         STP
.190680		08		php		ISETIN          PHP
.190681		e2 20		sep #$20	                SEP #$20        ; set A short
.190683		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.190687		28		plp		                PLP
.190688		6b		rtl		                RTL
.190689		08		php		ISETOUT         PHP
.19068a		e2 20		sep #$20	                SEP #$20        ; set A short
.19068c		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.190690		28		plp		                PLP
.190691		6b		rtl		                RTL
.190692		22 4c 10 00	jsl $00104c	IGETCHE         JSL GETCHW
.190696		22 18 10 00	jsl $001018	                JSL PUTC
.19069a		6b		rtl		                RTL
.19069b						IGETCHW
.19069b		da		phx		                PHX
.19069c		5a		phy		                PHY
.19069d		8b		phb		                PHB
.19069e		0b		phd		                PHD
.19069f		08		php		                PHP
.1906a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1906a2		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.1906a6		f0 1b		beq $1906c3	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.1906a8		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1906aa		f0 0d		beq $1906b9	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906ac		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1906ae		f0 09		beq $1906b9	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906b0		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.1906b2		28		plp		                PLP
.1906b3		38		sec		                SEC                 ; And return carry set
.1906b4		2b		pld		                PLD
.1906b5		ab		plb		                PLB
.1906b6		7a		ply		                PLY
.1906b7		fa		plx		                PLX
.1906b8		6b		rtl		                RTL
.1906b9		22 29 57 19	jsl $195729	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.1906bd		22 dd 57 19	jsl $1957dd	                JSL UART_GETC       ; Get the charater from the COM port
.1906c1		80 04		bra $1906c7	                BRA done
.1906c3		22 7c 77 19	jsl $19777c	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.1906c7		28		plp		done            PLP
.1906c8		18		clc		                CLC                 ; Return carry clear for valid data
.1906c9		2b		pld		                PLD
.1906ca		ab		plb		                PLB
.1906cb		7a		ply		                PLY
.1906cc		fa		plx		                PLX
.1906cd		6b		rtl		                RTL
.1906ce						IGETCH
.1906ce		da		phx		                PHX
.1906cf		5a		phy		                PHY
.1906d0		8b		phb		                PHB
.1906d1		0b		phd		                PHD
.1906d2		08		php		                PHP
.1906d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1906d5		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.1906d9		f0 1b		beq $1906f6	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.1906db		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1906dd		f0 0d		beq $1906ec	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906df		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1906e1		f0 09		beq $1906ec	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906e3		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.1906e5		28		plp		                PLP
.1906e6		38		sec		                SEC                 ; And return carry set
.1906e7		2b		pld		                PLD
.1906e8		ab		plb		                PLB
.1906e9		7a		ply		                PLY
.1906ea		fa		plx		                PLX
.1906eb		6b		rtl		                RTL
.1906ec		22 29 57 19	jsl $195729	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.1906f0		22 dd 57 19	jsl $1957dd	                JSL UART_GETC       ; Get the charater from the COM port
.1906f4		80 04		bra $1906fa	                BRA done
.1906f6		22 88 77 19	jsl $197788	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.1906fa		28		plp		done            PLP
.1906fb		18		clc		                CLC                 ; Return carry clear for valid data
.1906fc		2b		pld		                PLD
.1906fd		ab		plb		                PLB
.1906fe		7a		ply		                PLY
.1906ff		fa		plx		                PLX
.190700		6b		rtl		                RTL
.190701		22 1c 10 00	jsl $00101c	IPRINT          JSL PUTS
.190705		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.190709		6b		rtl		                RTL
.19070a		48		pha		IPUTS           PHA
.19070b		08		php		                PHP
.19070c		e2 20		sep #$20	                SEP #$20        ; set A short
.19070e		c2 10		rep #$10	                REP #$10        ; set X long
.190710		bd 00 00	lda $190000,x	iputs1          LDA $0,b,x      ; read from the string
.190713		f0 08		beq $19071d	                BEQ iputs_done
.190715		22 18 10 00	jsl $001018	iputs2          JSL PUTC
.190719		e8		inx		iputs3          INX
.19071a		4c 10 07	jmp $190710	                JMP iputs1
.19071d		e8		inx		iputs_done      INX
.19071e		28		plp		                PLP
.19071f		68		pla		                PLA
.190720		6b		rtl		                RTL
.190721						IPUTC
.190721		da		phx		                PHX
.190722		5a		phy		                PHY
.190723		0b		phd		                PHD
.190724		8b		phb		                PHB
.190725		08		php		                PHP                 ; stash the flags (we'll be changing M)
.190726		48		pha		                PHA             ; begin setdp macro
.190727		08		php		                PHP
.190728		c2 20		rep #$20	                REP #$20        ; set A long
.19072a		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19072d		5b		tcd		                TCD
.19072e		28		plp		                PLP
.19072f		68		pla		                PLA             ; end setdp macro
.190730		48		pha		                PHA             ; begin setdbr macro
.190731		08		php		                PHP
.190732		e2 20		sep #$20	                SEP #$20        ; set A short
.190734		a9 00		lda #$00	                LDA #0
.190736		48		pha		                PHA
.190737		ab		plb		                PLB
.190738		28		plp		                PLP
.190739		68		pla		                PLA             ; end setdbr macro
.19073a		e2 20		sep #$20	                SEP #$20        ; set A short
.19073c		c2 10		rep #$10	                REP #$10        ; set X long
.19073e		48		pha		                PHA                 ; Save the character to print
.19073f		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.190743		f0 1a		beq $19075f	                BEQ putc_ansi       ; If it's 0: print to the screen
.190745		c9 04		cmp #$04	                CMP #CHAN_EVID      ; Check to see if it's the second video port
.190747		f0 16		beq $19075f	                BEQ putc_ansi       ; Yes: handle printing to the second video port
.190749		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.19074b		f0 07		beq $190754	                BEQ putc_uart       ; Yes: handle printing to the UART
.19074d		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.19074f		f0 03		beq $190754	                BEQ putc_uart       ; Yes: handle printing to the UART
.190751		68		pla		                PLA                 ; Otherwise, just exit
.190752		80 10		bra $190764	                BRA done
.190754		22 29 57 19	jsl $195729	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.190758		68		pla		                PLA                 ; Recover the character to send
.190759		22 fe 57 19	jsl $1957fe	                JSL UART_PUTC       ; Send the character
.19075d		80 05		bra $190764	                BRA done
.19075f		68		pla		putc_ansi       PLA                 ; Recover the character to send
.190760		22 5d 6d 19	jsl $196d5d	                JSL ANSI_PUTC       ; Print to the current selected ANSI screen
.190764		28		plp		done            PLP
.190765		ab		plb		                PLB
.190766		2b		pld		                PLD
.190767		7a		ply		                PLY
.190768		fa		plx		                PLX
.190769		6b		rtl		                RTL
.19076a		da		phx		SCRSHIFTLL      PHX
.19076b		5a		phy		                PHY
.19076c		48		pha		                PHA
.19076d		0b		phd		                PHD
.19076e		08		php		                PHP
.19076f		48		pha		                PHA             ; begin setdp macro
.190770		08		php		                PHP
.190771		c2 20		rep #$20	                REP #$20        ; set A long
.190773		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190776		5b		tcd		                TCD
.190777		28		plp		                PLP
.190778		68		pla		                PLA             ; end setdp macro
.190779		c2 30		rep #$30	                REP #$30        ; set A&X long
.19077b		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.19077d		a8		tay		                TAY                 ; Set it as the destination
.19077e		aa		tax		                TAX
.19077f		e8		inx		                INX                 ; And set the next cell as the source
.190780		18		clc		                CLC                 ; Calculate the length of the block to move
.190781		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.190783		e5 1a		sbc $1a		                SBC CURSORX
.190785		54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.190788		28		plp		                PLP
.190789		2b		pld		                PLD
.19078a		68		pla		                PLA
.19078b		7a		ply		                PLY
.19078c		fa		plx		                PLX
.19078d		6b		rtl		                RTL
.19078e		da		phx		SCRSHIFTLR      PHX
.19078f		48		pha		                PHA
.190790		0b		phd		                PHD
.190791		08		php		                PHP
.190792		48		pha		                PHA             ; begin setdp macro
.190793		08		php		                PHP
.190794		c2 20		rep #$20	                REP #$20        ; set A long
.190796		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190799		5b		tcd		                TCD
.19079a		28		plp		                PLP
.19079b		68		pla		                PLA             ; end setdp macro
.19079c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19079e		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.1907a0		1a		inc a		                INC A
.1907a1		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.1907a3		b0 1b		bcs $1907c0	                BGE done            ; Yes: just skip the whole thing
.1907a5		38		sec		                SEC                 ; Calculate the length of the block to move
.1907a6		a5 0f		lda $0f		                LDA COLS_VISIBLE
.1907a8		e5 1a		sbc $1a		                SBC CURSORX
.1907aa		1a		inc a		                INC A
.1907ab		18		clc		                CLC
.1907ac		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.1907ae		3a		dec a		                DEC A
.1907af		a8		tay		                TAY                 ; Make it the destination
.1907b0		3a		dec a		                DEC A               ; Move to the previous column
.1907b1		aa		tax		                TAX                 ; Make it the source
.1907b2		38		sec		                SEC                 ; Calculate the length of the block to move
.1907b3		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.1907b5		e5 1a		sbc $1a		                SBC CURSORX
.1907b7		44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.1907ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1907bc		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.1907be		87 17		sta [$17]	                STA [CURSORPOS]
.1907c0		28		plp		done            PLP
.1907c1		2b		pld		                PLD
.1907c2		68		pla		                PLA
.1907c3		fa		plx		                PLX
.1907c4		6b		rtl		                RTL
.1907c5						IPUTB
.1907c5		6b		rtl		                RTL
.1907c6						IPRINTCR
.1907c6		da		phx		                PHX
.1907c7		5a		phy		                PHY
.1907c8		8b		phb		                PHB
.1907c9		0b		phd		                PHD
.1907ca		08		php		                PHP
.1907cb		48		pha		                PHA             ; begin setdbr macro
.1907cc		08		php		                PHP
.1907cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1907cf		a9 00		lda #$00	                LDA #0
.1907d1		48		pha		                PHA
.1907d2		ab		plb		                PLB
.1907d3		28		plp		                PLP
.1907d4		68		pla		                PLA             ; end setdbr macro
.1907d5		48		pha		                PHA             ; begin setdp macro
.1907d6		08		php		                PHP
.1907d7		c2 20		rep #$20	                REP #$20        ; set A long
.1907d9		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1907dc		5b		tcd		                TCD
.1907dd		28		plp		                PLP
.1907de		68		pla		                PLA             ; end setdp macro
.1907df		e2 20		sep #$20	                SEP #$20        ; set A short
.1907e1		c2 10		rep #$10	                REP #$10        ; set X long
.1907e3		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.1907e7		f0 1c		beq $190805	                BEQ scr_printcr
.1907e9		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1907eb		f0 06		beq $1907f3	                BEQ uart_printcr    ; Yes: handle printing to the UART
.1907ed		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1907ef		f0 02		beq $1907f3	                BEQ uart_printcr    ; Yes: handle printing to the UART
.1907f1		80 1c		bra $19080f	                BRA done
.1907f3		22 29 57 19	jsl $195729	uart_printcr    JSL UART_SELECT
.1907f7		a9 0d		lda #$0d	                LDA #CHAR_CR
.1907f9		22 18 10 00	jsl $001018	                JSL PUTC
.1907fd		a9 0a		lda #$0a	                LDA #CHAR_LF
.1907ff		22 18 10 00	jsl $001018	                JSL PUTC
.190803		80 0a		bra $19080f	                BRA done
.190805		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.190808		a4 1c		ldy $1c		                LDY CURSORY
.19080a		c8		iny		                INY
.19080b		22 84 10 00	jsl $001084	                JSL LOCATE
.19080f		28		plp		done            PLP
.190810		2b		pld		                PLD
.190811		ab		plb		                PLB
.190812		7a		ply		                PLY
.190813		fa		plx		                PLX
.190814		6b		rtl		                RTL
.190815		da		phx		ICSRHOME        PHX
.190816		5a		phy		                PHY
.190817		08		php		                PHP
.190818		a2 00 00	ldx #$0000	                LDX #0
.19081b		a0 00 00	ldy #$0000	                LDY #0
.19081e		22 84 10 00	jsl $001084	                JSL LOCATE
.190822		28		plp		                PLP
.190823		7a		ply		                PLY
.190824		fa		plx		                PLX
.190825		6b		rtl		                RTL
.190826		da		phx		ICSRRIGHT       PHX
.190827		5a		phy		                PHY
.190828		48		pha		                PHA
.190829		0b		phd		                PHD
.19082a		08		php		                PHP
.19082b		22 15 72 19	jsl $197215	                JSL ANSI_CSRRIGHT
.19082f		28		plp		                PLP
.190830		2b		pld		                PLD
.190831		68		pla		                PLA
.190832		7a		ply		                PLY
.190833		fa		plx		                PLX
.190834		6b		rtl		                RTL
.190835						ICSRLEFT
.190835		da		phx		                PHX
.190836		5a		phy		                PHY
.190837		48		pha		                PHA
.190838		0b		phd		                PHD
.190839		08		php		                PHP
.19083a		22 40 72 19	jsl $197240	                JSL ANSI_CSRLEFT
.19083e		28		plp		                PLP
.19083f		2b		pld		                PLD
.190840		68		pla		                PLA
.190841		7a		ply		                PLY
.190842		fa		plx		                PLX
.190843		6b		rtl		                RTL
.190844						ICSRUP
.190844		da		phx		                PHX
.190845		5a		phy		                PHY
.190846		48		pha		                PHA
.190847		0b		phd		                PHD
.190848		08		php		                PHP
.190849		22 5e 72 19	jsl $19725e	                JSL ANSI_CSRUP
.19084d		28		plp		                PLP
.19084e		2b		pld		                PLD
.19084f		68		pla		                PLA
.190850		7a		ply		                PLY
.190851		fa		plx		                PLX
.190852		6b		rtl		                RTL
.190853		da		phx		ICSRDOWN        PHX
.190854		5a		phy		                PHY
.190855		0b		phd		                PHD
.190856		22 7c 72 19	jsl $19727c	                JSL ANSI_CSRDOWN
.19085a		2b		pld		                PLD
.19085b		7a		ply		                PLY
.19085c		fa		plx		                PLX
.19085d		6b		rtl		                RTL
.19085e		48		pha		ILOCATE         PHA
.19085f		0b		phd		                PHD
.190860		08		php		                PHP
.190861		22 9f 72 19	jsl $19729f	                JSL ANSI_LOCATE
.190865		28		plp		ilocate_done    PLP
.190866		2b		pld		                PLD
.190867		68		pla		                PLA
.190868		6b		rtl		                RTL
.190869						ISCROLLUP
.190869		48		pha		                PHA
.19086a		da		phx		                PHX
.19086b		5a		phy		                PHY
.19086c		8b		phb		                PHB
.19086d		0b		phd		                PHD
.19086e		08		php		                PHP
.19086f		22 03 73 19	jsl $197303	                JSL ANSI_SCROLLUP
.190873		28		plp		                PLP
.190874		2b		pld		                PLD
.190875		ab		plb		                PLB
.190876		7a		ply		                PLY
.190877		fa		plx		                PLX
.190878		68		pla		                PLA
.190879		6b		rtl		                RTL
.19087a		08		php		IPRINTH         PHP
.19087b		48		pha		                PHA
.19087c						iprinth1
.19087c		e2 20		sep #$20	                SEP #$20        ; set A short
.19087e		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.190881		4a		lsr a		                LSR
.190882		4a		lsr a		                LSR
.190883		4a		lsr a		                LSR
.190884		4a		lsr a		                LSR
.190885		22 d4 08 19	jsl $1908d4	                JSL iprint_digit
.190889		bd 00 00	lda $0000,x	                LDA #0,b,x
.19088c		22 d4 08 19	jsl $1908d4	                JSL iprint_digit
.190890		ca		dex		                DEX
.190891		88		dey		                DEY
.190892		d0 e8		bne $19087c	                BNE iprinth1
.190894		68		pla		                PLA
.190895		28		plp		                PLP
.190896		6b		rtl		                RTL
.190897						IPRINTAH
.190897		48		pha		                PHA
.190898		08		php		                PHP
.190899		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.19089d		08		php		                PHP                   ; Get the processor status into A
.19089e		e2 20		sep #$20	                SEP #$20        ; set A short
.1908a0		c2 10		rep #$10	                REP #$10        ; set X long
.1908a2		68		pla		                PLA
.1908a3		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.1908a5		c9 20		cmp #$20	                CMP #%00100000
.1908a7		f0 14		beq $1908bd	                BEQ eight_bit
.1908a9		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.1908ad		4a		lsr a		                LSR A
.1908ae		4a		lsr a		                LSR A
.1908af		4a		lsr a		                LSR A
.1908b0		4a		lsr a		                LSR A
.1908b1		22 d4 08 19	jsl $1908d4	                JSL iprint_digit      ; And print it
.1908b5		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.1908b9		22 d4 08 19	jsl $1908d4	                JSL iprint_digit      ; And print it
.1908bd		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.1908c1		4a		lsr a		                LSR A
.1908c2		4a		lsr a		                LSR A
.1908c3		4a		lsr a		                LSR A
.1908c4		4a		lsr a		                LSR A
.1908c5		22 d4 08 19	jsl $1908d4	                JSL iprint_digit      ; And print it
.1908c9		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.1908cd		22 d4 08 19	jsl $1908d4	                JSL iprint_digit      ; And print it
.1908d1		28		plp		                PLP
.1908d2		68		pla		                PLA
.1908d3		6b		rtl		                RTL
.1908d4		da		phx		iprint_digit    PHX
.1908d5		c2 20		rep #$20	                REP #$20        ; set A long
.1908d7		29 0f 00	and #$000f	                AND #$0F
.1908da		aa		tax		                TAX
.1908db		bf 9f 85 19	lda $19859f,x	                LDA hex_digits,X
.1908df		22 21 07 19	jsl $190721	                JSL IPUTC       ; Print the digit
.1908e3		fa		plx		                PLX
.1908e4		6b		rtl		                RTL
.1908e5		48		pha		ICLRSCREEN	    PHA
.1908e6		da		phx		                PHX
.1908e7		08		php		                PHP
.1908e8		22 98 73 19	jsl $197398	                JSL ANSI_CLRSCREEN
.1908ec		28		plp		                PLP
.1908ed		fa		plx		                PLX
.1908ee		68		pla		                PLA
.1908ef		6b		rtl		                RTL
.1908f0						COPYBYTES42
.1908f0		08		php		                PHP
.1908f1		0b		phd		                PHD
.1908f2		48		pha		                PHA             ; begin setdp macro
.1908f3		08		php		                PHP
.1908f4		c2 20		rep #$20	                REP #$20        ; set A long
.1908f6		a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.1908f9		5b		tcd		                TCD
.1908fa		28		plp		                PLP
.1908fb		68		pla		                PLA             ; end setdp macro
.1908fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1908fe		c2 10		rep #$10	                REP #$10        ; set X long
.190900		a0 00 00	ldy #$0000	                LDY #0
.190903		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.190905		97 04		sta [$04],y	                STA [TMPPTR2],Y
.190907		c8		iny		                INY
.190908		c0 2a 00	cpy #$002a	                CPY #42
.19090b		d0 f6		bne $190903	                BNE copy_loop
.19090d		2b		pld		                PLD
.19090e		28		plp		                PLP
.19090f		60		rts		                RTS
.190910						ICOLORFLAG
.190910		48		pha		                PHA
.190911		da		phx		                PHX
.190912		5a		phy		                PHY
.190913		08		php		                PHP
.190914		8b		phb		                PHB
.190915		0b		phd		                PHD
.190916		48		pha		                PHA             ; begin setdp macro
.190917		08		php		                PHP
.190918		c2 20		rep #$20	                REP #$20        ; set A long
.19091a		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19091d		5b		tcd		                TCD
.19091e		28		plp		                PLP
.19091f		68		pla		                PLA             ; end setdp macro
.190920		c2 30		rep #$30	                REP #$30        ; set A&X long
.190922		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.190925		85 04		sta $04		                STA TMPPTR2
.190927		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.19092a		85 06		sta $06		                STA TMPPTR2+2
.19092c		a9 fc 81	lda #$81fc	                LDA #<>greet_clr_line1
.19092f		85 00		sta $00		                STA TMPPTR1
.190931		a9 19 00	lda #$0019	                LDA #`greet_clr_line1
.190934		85 02		sta $02		                STA TMPPTR1+2
.190936		20 f0 08	jsr $1908f0	                JSR COPYBYTES42
.190939		18		clc		                CLC
.19093a		a5 04		lda $04		                LDA TMPPTR2
.19093c		65 11		adc $11		                ADC COLS_PER_LINE
.19093e		85 04		sta $04		                STA TMPPTR2
.190940		a9 26 82	lda #$8226	                LDA #<>greet_clr_line2
.190943		85 00		sta $00		                STA TMPPTR1
.190945		a9 19 00	lda #$0019	                LDA #`greet_clr_line2
.190948		85 02		sta $02		                STA TMPPTR1+2
.19094a		20 f0 08	jsr $1908f0	                JSR COPYBYTES42
.19094d		18		clc		                CLC
.19094e		a5 04		lda $04		                LDA TMPPTR2
.190950		65 11		adc $11		                ADC COLS_PER_LINE
.190952		85 04		sta $04		                STA TMPPTR2
.190954		a9 50 82	lda #$8250	                LDA #<>greet_clr_line3
.190957		85 00		sta $00		                STA TMPPTR1
.190959		a9 19 00	lda #$0019	                LDA #`greet_clr_line3
.19095c		85 02		sta $02		                STA TMPPTR1+2
.19095e		20 f0 08	jsr $1908f0	                JSR COPYBYTES42
.190961		18		clc		                CLC
.190962		a5 04		lda $04		                LDA TMPPTR2
.190964		65 11		adc $11		                ADC COLS_PER_LINE
.190966		85 04		sta $04		                STA TMPPTR2
.190968		a9 7a 82	lda #$827a	                LDA #<>greet_clr_line4
.19096b		85 00		sta $00		                STA TMPPTR1
.19096d		a9 19 00	lda #$0019	                LDA #`greet_clr_line4
.190970		85 02		sta $02		                STA TMPPTR1+2
.190972		20 f0 08	jsr $1908f0	                JSR COPYBYTES42
.190975		18		clc		                CLC
.190976		a5 04		lda $04		                LDA TMPPTR2
.190978		65 11		adc $11		                ADC COLS_PER_LINE
.19097a		85 04		sta $04		                STA TMPPTR2
.19097c		a9 a4 82	lda #$82a4	                LDA #<>greet_clr_line5
.19097f		85 00		sta $00		                STA TMPPTR1
.190981		a9 19 00	lda #$0019	                LDA #`greet_clr_line5
.190984		85 02		sta $02		                STA TMPPTR1+2
.190986		20 f0 08	jsr $1908f0	                JSR COPYBYTES42
.190989		2b		pld		                PLD
.19098a		ab		plb		                PLB
.19098b		28		plp		                PLP
.19098c		7a		ply		                PLY
.19098d		fa		plx		                PLX
.19098e		68		pla		                PLA
.19098f		6b		rtl		                RTL
.190990		0b		phd		IINITCHLUT		  PHD
.190991		08		php		                PHP
.190992		48		pha		                PHA
.190993		da		phx		                PHX
.190994		22 63 6b 19	jsl $196b63	                JSL ANSI_INIT_LUTS
.190998		fa		plx		                PLX
.190999		68		pla		                PLA
.19099a		28		plp		                PLP
.19099b		2b		pld		                PLD
.19099c		6b		rtl		                RTL
.19099d						IINITGAMMATABLE
.19099d		e2 20		sep #$20	                SEP #$20        ; set A short
.19099f		c2 10		rep #$10	                REP #$10        ; set X long
.1909a1		a2 00 00	ldx #$0000	                ldx #$0000
.1909a4		bf 00 8a 19	lda $198a00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.1909a8		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.1909ac		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.1909b0		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.1909b4		e8		inx		                inx
.1909b5		e0 00 01	cpx #$0100	                cpx #$0100
.1909b8		d0 ea		bne $1909a4	                bne initgammaloop
.1909ba		c2 30		rep #$30	                REP #$30        ; set A&X long
.1909bc		6b		rtl		                RTL
.1909bd		48		pha		IINITALLLUT     PHA
.1909be		da		phx		                PHX
.1909bf		a2 00 00	ldx #$0000	                LDX #$0000
.1909c2		e2 20		sep #$20	                SEP #$20        ; set A short
.1909c4		a9 00		lda #$00	                LDA #$00
.1909c6		85 0a		sta $0a		                STA $0A     ; Temp Location
.1909c8						iinit_lut_loop
.1909c8		86 02		stx $02		                STX $02
.1909ca		a6 0a		ldx $0a		                LDX $0A
.1909cc		bf 00 89 19	lda $198900,x	                LDA GAMMA_2_2_Tbl, x
.1909d0		49 55		eor #$55	                EOR  #$55
.1909d2		a6 02		ldx $02		                LDX $02
.1909d4		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.1909d8		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.1909dc		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.1909e0		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.1909e4		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.1909e8		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.1909ec		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.1909f0		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.1909f4		e8		inx		                inx
.1909f5		86 02		stx $02		                STX $02
.1909f7		a6 0a		ldx $0a		                LDX $0A
.1909f9		bf 00 8b 19	lda $198b00,x	                LDA RANDOM_LUT_Tbl, x
.1909fd		a6 02		ldx $02		                LDX $02
.1909ff		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a03		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a07		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a0b		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a0f		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a13		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a17		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a1b		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a1f		e8		inx		                inx
.190a20		86 02		stx $02		                STX $02
.190a22		a6 0a		ldx $0a		                LDX $0A
.190a24		bf 00 8a 19	lda $198a00,x	                LDA GAMMA_1_8_Tbl, x
.190a28		49 aa		eor #$aa	                EOR  #$AA
.190a2a		a6 02		ldx $02		                LDX $02
.190a2c		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a30		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a34		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a38		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a3c		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a40		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a44		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a48		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a4c		e8		inx		                inx
.190a4d		a9 ff		lda #$ff	                LDA #$FF
.190a4f		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a53		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a57		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a5b		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a5f		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a63		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a67		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a6b		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a6f		e6 0a		inc $0a		                inc $0A
.190a71		e8		inx		                inx
.190a72		e0 00 04	cpx #$0400	                cpx #$0400
.190a75		f0 03		beq $190a7a	                beq iinit_lut_exit
.190a77		82 4e ff	brl $1909c8	                brl iinit_lut_loop
.190a7a						iinit_lut_exit
.190a7a		c2 30		rep #$30	                REP #$30        ; set A&X long
.190a7c		fa		plx		                PLX
.190a7d		68		pla		                PLA
.190a7e		6b		rtl		                RTL
.190a7f						INITVKYTXTMODE_BYPASS_DPSW
.190a7f		48		pha		                PHA
.190a80		08		php		                PHP
.190a81		80 24		bra $190aa7	                BRA WeNeed640480Here
.190a83						IINITVKYTXTMODE
.190a83		48		pha		                PHA
.190a84		08		php		                PHP
.190a85		e2 20		sep #$20	                SEP #$20        ; set A short
.190a87		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.190a8b		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.190a8d		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.190a8f		f0 16		beq $190aa7	                BEQ WeNeed640480Here
.190a91		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190a95		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.190a97		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.190a99		f0 33		beq $190ace	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.190a9b		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.190a9f		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.190aa1		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190aa5		80 27		bra $190ace	                BRA INITVICKYMODEHIRES
.190aa7						WeNeed640480Here:
.190aa7		e2 20		sep #$20	                SEP #$20        ; set A short
.190aa9		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190aad		29 01		and #$01	                AND #$01
.190aaf		c9 01		cmp #$01	                CMP #$01
.190ab1		d0 15		bne $190ac8	                BNE INITVICKYMODE
.190ab3		a9 00		lda #$00	                LDA #$00
.190ab5		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190ab9		ea		nop		                NOP
.190aba		ea		nop		                NOP
.190abb		ea		nop		                NOP
.190abc		ea		nop		                NOP
.190abd		ea		nop		                NOP
.190abe		a9 01		lda #$01	                LDA #$01
.190ac0		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190ac4		ea		nop		                NOP
.190ac5		ea		nop		                NOP
.190ac6		ea		nop		                NOP
.190ac7		ea		nop		                NOP
.190ac8						INITVICKYMODE
.190ac8		a9 00		lda #$00	                LDA #$00
.190aca		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.190ace						INITVICKYMODEHIRES
.190ace		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.190ad0		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.190ad4		e2 20		sep #$20	                SEP #$20        ; set A short
.190ad6		a9 00		lda #$00	                LDA #$00
.190ad8		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.190adc		a9 54		lda #$54	                LDA #$54
.190ade		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.190ae2		a9 54		lda #$54	                LDA #$54
.190ae4		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.190ae8		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.190aea		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.190aee		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.190af0		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.190af4		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.190af8		c2 30		rep #$30	                REP #$30        ; set A&X long
.190afa		22 2c 11 00	jsl $00112c	                JSL SETSIZES                      ; Calculate the size of the text screen
.190afe		28		plp		                PLP
.190aff		68		pla		                PLA
.190b00		6b		rtl		                RTL
.190b01						ISETSIZES
.190b01		22 34 6c 19	jsl $196c34	                JSL ANSI_SETSIZES
.190b05		6b		rtl		                RTL
.190b06						IINITVKYGRPMODE
.190b06		48		pha		                PHA
.190b07		e2 20		sep #$20	                SEP #$20        ; set A short
.190b09		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190b0b		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.190b0f		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190b11		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.190b15		a9 c0		lda #$c0	                LDA #$C0
.190b17		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.190b1b		a9 00		lda #$00	                LDA #$00
.190b1d		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.190b21		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190b23		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.190b27		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190b29		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.190b2d		a9 c0		lda #$c0	                LDA #$C0
.190b2f		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.190b33		a9 00		lda #$00	                LDA #$00
.190b35		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.190b39		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b3b		68		pla		                PLA
.190b3c		6b		rtl		                RTL
.190b3d						IINITTILEMODE
.190b3d		6b		rtl		                RTL
.190b3e						IREADVRAM
.190b3e		08		php		                PHP
.190b3f		e2 20		sep #$20	                SEP #$20        ; set A short
.190b41		bd 00 00	lda $000000,x	                LDA #0,B,X                      ; Request the byte
.190b44		c2 20		rep #$20	                REP #$20        ; set A long
.190b46		a2 64 00	ldx #$0064	                LDX #100
.190b49		af 02 09 af	lda $af0902	wait_loop       LDA @l VMEM2CPU_Fifo_Count_LO   ; Wait for the FIFO to have data
.190b4d		89 00 80	bit #$8000	                BIT #$8000
.190b50		f0 06		beq $190b58	                BEQ read_byte                   ; If it has data, go read the byte
.190b52		ca		dex		                DEX                             ; Otherwise, decrement timeout counter
.190b53		d0 f4		bne $190b49	                BNE wait_loop                   ; Keep waiting so long as it's not 0
.190b55		28		plp		ret_failure     PLP                             ; Return failure
.190b56		18		clc		                CLC
.190b57		6b		rtl		                RTL
.190b58						read_byte
.190b58		e2 20		sep #$20	                SEP #$20        ; set A short
.190b5a		af 01 09 af	lda $af0901	                LDA @l VMEM2CPU_Data_Port       ; Get the byte from Vicky
.190b5e		28		plp		ret_success     PLP                             ; Return success
.190b5f		18		clc		                CLC
.190b60		6b		rtl		                RTL
.190b61		6b		rtl		INOP            RTL
.190b62						IINITFONTSET
.190b62		48		pha		                PHA
.190b63		da		phx		                PHX
.190b64		5a		phy		                PHY
.190b65		8b		phb		                PHB
.190b66		08		php		                PHP
.190b67		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b69		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.190b6c		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.190b6f		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.190b72		54 af 1f	mvn $1f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.190b75		28		plp		                PLP
.190b76		ab		plb		                PLB
.190b77		7a		ply		                PLY
.190b78		fa		plx		                PLX
.190b79		68		pla		                PLA
.190b7a		6b		rtl		                RTL
.190b7b						INITMOUSEPOINTER
.190b7b		e2 20		sep #$20	                SEP #$20        ; set A short
.190b7d		c2 10		rep #$10	                REP #$10        ; set X long
.190b7f		a2 00 00	ldx #$0000	                LDX #$0000
.190b82						FILL_MOUSE_MARKER
.190b82		bf 00 8c 19	lda $198c00,x	                LDA @lMOUSE_POINTER_PTR,X
.190b86		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.190b8a		e8		inx		                INX
.190b8b		e0 00 01	cpx #$0100	                CPX #$0100
.190b8e		d0 f2		bne $190b82	                BNE FILL_MOUSE_MARKER
.190b90		ea		nop		                nop
.190b91		a9 01		lda #$01	                LDA #$01
.190b93		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.190b97		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b99		6b		rtl		                RTL
.190b9a						IINITCURSOR
.190b9a		e2 20		sep #$20	                SEP #$20        ; set A short
.190b9c		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.190b9e		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.190ba2		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.190ba4		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.190ba8		c2 30		rep #$30	                REP #$30        ; set A&X long
.190baa		a9 00 00	lda #$0000	                LDA #$0000;
.190bad		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.190bb1		a9 06 00	lda #$0006	                LDA #$0006;
.190bb4		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.190bb8		6b		rtl		                RTL
.190bb9		0b		phd		IINITSUPERIO	  PHD
.190bba		08		php		                PHP
.190bbb		48		pha		                PHA
.190bbc		e2 20		sep #$20	                SEP #$20        ; set A short
.190bbe		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bc0		8f 23 11 af	sta $af1123	                STA GP10_REG
.190bc4		af 23 11 af	lda $af1123	                LDA GP10_REG
.190bc8		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bca		8f 24 11 af	sta $af1124	                STA GP11_REG
.190bce		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bd0		8f 25 11 af	sta $af1125	                STA GP12_REG
.190bd4		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bd6		8f 26 11 af	sta $af1126	                STA GP13_REG
.190bda		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.190bdc		8f 27 11 af	sta $af1127	                STA GP14_REG
.190be0		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.190be2		8f 28 11 af	sta $af1128	                STA GP15_REG
.190be6		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.190be8		8f 29 11 af	sta $af1129	                STA GP16_REG
.190bec		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.190bee		8f 2a 11 af	sta $af112a	                STA GP17_REG
.190bf2		a9 00		lda #$00	                LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.190bf4		8f 2b 11 af	sta $af112b	                STA GP20_REG
.190bf8		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bfa		8f 2f 11 af	sta $af112f	                STA GP24_REG
.190bfe		a9 05		lda #$05	                LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.190c00		8f 30 11 af	sta $af1130	                STA GP25_REG
.190c04		a9 84		lda #$84	                LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.190c06		8f 31 11 af	sta $af1131	                STA GP26_REG
.190c0a		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.190c0c		8f 33 11 af	sta $af1133	                STA GP30_REG
.190c10		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.190c12		8f 34 11 af	sta $af1134	                STA GP31_REG
.190c16		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.190c18		8f 35 11 af	sta $af1135	                STA GP32_REG
.190c1c		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.190c1e		8f 36 11 af	sta $af1136	                STA GP33_REG
.190c22		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.190c24		8f 37 11 af	sta $af1137	                STA GP34_REG
.190c28		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.190c2a		8f 38 11 af	sta $af1138	                STA GP35_REG
.190c2e		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.190c30		8f 39 11 af	sta $af1139	                STA GP36_REG
.190c34		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.190c36		8f 3a 11 af	sta $af113a	                STA GP37_REG
.190c3a		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190c3c		8f 3d 11 af	sta $af113d	                STA GP42_REG
.190c40		a9 01		lda #$01	                LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.190c42		8f 3e 11 af	sta $af113e	                STA GP43_REG
.190c46		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.190c48		8f 3f 11 af	sta $af113f	                STA GP50_REG
.190c4c		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.190c4e		8f 40 11 af	sta $af1140	                STA GP51_REG
.190c52		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.190c54		8f 41 11 af	sta $af1141	                STA GP52_REG
.190c58		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.190c5a		8f 42 11 af	sta $af1142	                STA GP53_REG
.190c5e		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.190c60		8f 43 11 af	sta $af1143	                STA GP54_REG
.190c64		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.190c66		8f 44 11 af	sta $af1144	                STA GP55_REG
.190c6a		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.190c6c		8f 45 11 af	sta $af1145	                STA GP56_REG
.190c70		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.190c72		8f 46 11 af	sta $af1146	                STA GP57_REG
.190c76		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.190c78		8f 47 11 af	sta $af1147	                STA GP60_REG
.190c7c		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.190c7e		8f 48 11 af	sta $af1148	                STA GP61_REG
.190c82		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.190c84		8f 4b 11 af	sta $af114b	                STA GP1_REG
.190c88		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.190c8a		8f 4c 11 af	sta $af114c	                STA GP2_REG
.190c8e		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.190c90		8f 4d 11 af	sta $af114d	                STA GP3_REG
.190c94		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.190c96		8f 4e 11 af	sta $af114e	                STA GP4_REG
.190c9a		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.190c9c		8f 4f 11 af	sta $af114f	                STA GP5_REG
.190ca0		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.190ca2		8f 50 11 af	sta $af1150	                STA GP6_REG
.190ca6		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.190ca8		8f 5d 11 af	sta $af115d	                STA LED1_REG
.190cac		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.190cae		8f 5e 11 af	sta $af115e	                STA LED2_REG
.190cb2		c2 20		rep #$20	                REP #$20        ; set A long
.190cb4		68		pla		                PLA
.190cb5		28		plp			              PLP
.190cb6		2b		pld				            PLD
.190cb7		6b		rtl		                RTL
.190cb8		48		pha		INITRTC         PHA
.190cb9		08		php		                PHP
.190cba		e2 20		sep #$20	                SEP #$20        ; set A short
.190cbc		a9 00		lda #$00	                LDA #0
.190cbe		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.190cc2		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.190cc6		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.190cca		09 04		ora #$04	                ORA #%00000100
.190ccc		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.190cd0		28		plp		                PLP
.190cd1		68		pla		                PLA
.190cd2		6b		rtl		                RTL
.190cd3		48		pha		IINITCODEC      PHA
.190cd4		08		php		                PHP
.190cd5		c2 20		rep #$20	                REP #$20        ; set A long
.190cd7		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.190cda		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190cde		a9 01 00	lda #$0001	                LDA #$0001
.190ce1		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190ce5		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190ce8		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.190ceb		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190cef		a9 01 00	lda #$0001	                LDA #$0001
.190cf2		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190cf6		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190cf9		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.190cfc		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d00		a9 01 00	lda #$0001	                LDA #$0001
.190d03		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d07		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d0a		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.190d0d		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d11		a9 01 00	lda #$0001	                LDA #$0001
.190d14		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d18		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d1b		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.190d1e		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d22		a9 01 00	lda #$0001	                LDA #$0001
.190d25		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d29		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d2c		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.190d2f		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d33		a9 01 00	lda #$0001	                LDA #$0001
.190d36		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d3a		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d3d		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.190d40		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d44		a9 01 00	lda #$0001	                LDA #$0001
.190d47		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d4b		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d4e		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.190d51		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d55		a9 01 00	lda #$0001	                LDA #$0001
.190d58		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d5c		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d5f		28		plp		                PLP
.190d60		68		pla		                PLA
.190d61		6b		rtl		                RTL
.190d62						IRESETCODEC
.190d62		c2 20		rep #$20	                REP #$20        ; set A long
.190d64		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.190d67		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d6b		a9 01 00	lda #$0001	                LDA #$0001
.190d6e		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d72		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d75		6b		rtl		                RTL
.190d76						CODEC_TRF_FINISHED
.190d76		e2 20		sep #$20	                SEP #$20        ; set A short
.190d78		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.190d7c		29 01		and #$01	                AND #$01
.190d7e		c9 01		cmp #$01	                CMP #$01
.190d80		f0 f6		beq $190d78	                BEQ CODEC_LOOP
.190d82		c2 20		rep #$20	                REP #$20        ; set A long
.190d84		60		rts		                RTS
.190d85						IBM_FILL_SCREEN
.190d85		c2 30		rep #$30	                REP #$30        ; set A&X long
.190d87		a9 00 00	lda #$0000	                LDA #$0000
.190d8a		a2 00 00	ldx #$0000	                LDX #$0000
.190d8d						BM_FILL_SCREEN_LOOPY
.190d8d		a0 00 00	ldy #$0000	                LDY #$0000
.190d90		e2 20		sep #$20	                SEP #$20        ; set A short
.190d92						BM_FILL_SCREEN_LOOPX
.190d92		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190d94		c8		iny		                INY
.190d95		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.190d97		d0 f9		bne $190d92	                BNE BM_FILL_SCREEN_LOOPX
.190d99		20 a4 0d	jsr $190da4	                JSR BM_FILL_COMPUTE_Y_DST
.190d9c		e8		inx		                INX
.190d9d		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.190d9f		d0 ec		bne $190d8d	                BNE BM_FILL_SCREEN_LOOPY
.190da1		c2 30		rep #$30	                REP #$30        ; set A&X long
.190da3		6b		rtl		                RTL
.190da4						BM_FILL_COMPUTE_Y_DST
.190da4		c2 20		rep #$20	                REP #$20        ; set A long
.190da6		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190da8		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190dac		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.190dae		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190db2		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.190db5		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190db9		a9 00 00	lda #$0000	                LDA #$0000
.190dbc		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190dc0		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190dc4		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190dc6		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190dca		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190dcc		a9 00 00	lda #$0000	                LDA #$0000
.190dcf		60		rts		                RTS
.190dd0						IBMP_PARSER
.190dd0		c2 30		rep #$30	                REP #$30        ; set A&X long
.190dd2		a0 00 00	ldy #$0000	                LDY #$0000
.190dd5		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.190dd7		c9 42 4d	cmp #$4d42	                CMP #$4D42
.190dda		f0 03		beq $190ddf	                BEQ IBMP_PARSER_CONT
.190ddc		82 04 01	brl $190ee3	                BRL BMP_PARSER_END_WITH_ERROR
.190ddf						IBMP_PARSER_CONT
.190ddf		a0 02 00	ldy #$0002	                LDY #$0002
.190de2		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.190de4		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190de8		a0 04 00	ldy #$0004	                LDY #$0004
.190deb		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.190ded		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190df1		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.190df4		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190df8		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190dfc		18		clc		                CLC
.190dfd		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190e01		85 50		sta $50		                STA BMP_FILE_SIZE
.190e03		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190e07		85 52		sta $52		                STA BMP_FILE_SIZE+2
.190e09		a0 12 00	ldy #$0012	                LDY #$0012
.190e0c		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e0e		85 40		sta $40		                STA BMP_X_SIZE
.190e10		a0 16 00	ldy #$0016	                LDY #$0016
.190e13		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e15		85 42		sta $42		                STA BMP_Y_SIZE
.190e17		a0 2e 00	ldy #$002e	                LDY #$002E
.190e1a		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e1c		0a		asl a		                ASL A; Multiply by 2
.190e1d		0a		asl a		                ASL A; Multiply by 2
.190e1e		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.190e20		e0 00 00	cpx #$0000	                CPX #$0000
.190e23		d0 05		bne $190e2a	                BNE BMP_LUT1_PICK
.190e25		20 eb 0e	jsr $190eeb	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.190e28		80 08		bra $190e32	                BRA DONE_TRANSFER_LUT;
.190e2a						  BMP_LUT1_PICK
.190e2a		e0 01 00	cpx #$0001	                CPX #$0001
.190e2d		d0 03		bne $190e32	                BNE BMP_LUT2_PICK
.190e2f		20 1b 0f	jsr $190f1b	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.190e32						  BMP_LUT2_PICK
.190e32						  DONE_TRANSFER_LUT
.190e32		a5 56		lda $56		                LDA BMP_POSITION_Y
.190e34		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.190e38		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.190e3a		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.190e3e		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.190e42		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190e46		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.190e4a		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190e4e		a5 54		lda $54		                LDA BMP_POSITION_X
.190e50		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.190e54		a9 00 00	lda #$0000	                LDA #$0000
.190e57		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190e5b		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.190e5f		85 f0		sta $f0		                STA USER_TEMP
.190e61		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.190e65		85 f2		sta $f2		                STA USER_TEMP+2
.190e67		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190e69		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190e6d		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190e6f		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190e73		a5 f0		lda $f0		                LDA USER_TEMP
.190e75		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.190e79		a5 f2		lda $f2		                LDA USER_TEMP+2
.190e7b		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.190e7f		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.190e83		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190e85		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.190e89		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190e8b		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.190e8d		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190e91		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.190e93		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190e97		a5 50		lda $50		                LDA BMP_FILE_SIZE
.190e99		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190e9d		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.190e9f		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190ea3		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190ea7		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190ea9		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190ead		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190eaf		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190eb1		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190eb5		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190eb7		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190ebb		18		clc		                CLC
.190ebc		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.190ebe		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.190ec1		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.190ec4		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.190ec8		a9 ff ff	lda #$ffff	                LDA #$FFFF
.190ecb		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.190ecf		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190ed3		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190ed5		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190ed9		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190edb		20 4b 0f	jsr $190f4b	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.190ede		a2 60 84	ldx #$8460	                LDX #<>bmp_parser_msg0
.190ee1		80 03		bra $190ee6	                BRA BMP_PARSER_END_NO_ERROR
.190ee3						BMP_PARSER_END_WITH_ERROR
.190ee3		a2 4c 84	ldx #$844c	                LDX #<>bmp_parser_err0
.190ee6						BMP_PARSER_END_NO_ERROR
.190ee6		22 01 07 19	jsl $190701	                JSL IPRINT       ; print the first line
.190eea		6b		rtl		                RTL
.190eeb						BMP_PARSER_UPDATE_LUT0
.190eeb		38		sec		                SEC
.190eec		a0 7a 00	ldy #$007a	                LDY #$007A
.190eef		a2 00 00	ldx #$0000	                LDX #$0000
.190ef2		e2 20		sep #$20	                SEP #$20        ; set A short
.190ef4						BMP_PARSER_UPDATE_LOOP
.190ef4		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190ef6		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.190efa		c8		iny		                INY
.190efb		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190efd		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.190f01		c8		iny		                INY
.190f02		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190f04		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.190f08		c8		iny		                INY
.190f09		a9 80		lda #$80	                LDA #$80
.190f0b		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.190f0f		c8		iny		                INY ; For the Alpha Value, nobody cares
.190f10		e8		inx		                INX
.190f11		e8		inx		                INX
.190f12		e8		inx		                INX
.190f13		e8		inx		                INX
.190f14		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190f16		d0 dc		bne $190ef4	                BNE BMP_PARSER_UPDATE_LOOP
.190f18		c2 20		rep #$20	                REP #$20        ; set A long
.190f1a		60		rts		                RTS
.190f1b						BMP_PARSER_UPDATE_LUT1
.190f1b		38		sec		                SEC
.190f1c		a0 36 00	ldy #$0036	                LDY #$0036
.190f1f		a2 00 00	ldx #$0000	                LDX #$0000
.190f22		e2 20		sep #$20	                SEP #$20        ; set A short
.190f24						PALETTE_LUT1_LOOP
.190f24		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190f26		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.190f2a		c8		iny		                INY
.190f2b		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190f2d		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.190f31		c8		iny		                INY
.190f32		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190f34		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.190f38		c8		iny		                INY
.190f39		a9 80		lda #$80	                LDA #$80
.190f3b		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.190f3f		c8		iny		                INY ; For the Alpha Value, nobody cares
.190f40		e8		inx		                INX
.190f41		e8		inx		                INX
.190f42		e8		inx		                INX
.190f43		e8		inx		                INX
.190f44		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190f46		d0 dc		bne $190f24	                BNE PALETTE_LUT1_LOOP
.190f48		c2 20		rep #$20	                REP #$20        ; set A long
.190f4a		60		rts		                RTS
.190f4b						BMP_PARSER_DMA_SHIT_OUT
.190f4b		a2 00 00	ldx #$0000	                LDX #$0000
.190f4e						BMP_PARSER_LOOPY
.190f4e		a0 00 00	ldy #$0000	                LDY #$0000
.190f51		e2 20		sep #$20	                SEP #$20        ; set A short
.190f53						BMP_PARSER_LOOPX
.190f53		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.190f55		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190f57		c8		iny		                INY
.190f58		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.190f5a		d0 f7		bne $190f53	                BNE BMP_PARSER_LOOPX
.190f5c		20 68 0f	jsr $190f68	                JSR BMP_PARSER_COMPUTE_Y_SRC
.190f5f		20 83 0f	jsr $190f83	                JSR BMP_PARSER_COMPUTE_Y_DST
.190f62		e8		inx		                INX
.190f63		e4 42		cpx $42		                CPX BMP_Y_SIZE
.190f65		d0 e7		bne $190f4e	                BNE BMP_PARSER_LOOPY
.190f67		60		rts		                RTS
.190f68						BMP_PARSER_COMPUTE_Y_SRC
.190f68		c2 20		rep #$20	                REP #$20        ; set A long
.190f6a		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190f6c		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190f70		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190f72		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190f76		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190f7a		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190f7c		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190f80		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190f82		60		rts		                RTS
.190f83						BMP_PARSER_COMPUTE_Y_DST
.190f83		c2 20		rep #$20	                REP #$20        ; set A long
.190f85		18		clc		                CLC
.190f86		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190f88		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.190f8a		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190f8c		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190f8e		69 00 00	adc #$0000	                ADC #$0000
.190f91		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190f93		60		rts		                RTS
.190f94		ea		nop		ILOOP           NOP
.190f95		ea		nop		                NOP
.190f96		ea		nop		                NOP
.190f97		ea		nop		                NOP
.190f98		ea		nop		                NOP
.190f99		ea		nop		                NOP
.190f9a		ea		nop		                NOP
.190f9b		ea		nop		                NOP
.190f9c		ea		nop		                NOP
.190f9d		ea		nop		                NOP
.190f9e		6b		rtl		                RTL
.190f9f		22 94 0f 19	jsl $190f94	ILOOP_1         JSL ILOOP
.190fa3		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fa7		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fab		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190faf		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fb3		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fb7		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fbb		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fbf		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fc3		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fc7		6b		rtl		                RTL
.190fc8		22 9f 0f 19	jsl $190f9f	ILOOP_1MS       JSL ILOOP_1
.190fcc		6b		rtl		                RTL
.190fcd		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.190fd0		f0 07		beq $190fd9	                BEQ LOOP_MS_END
.190fd2		22 c8 0f 19	jsl $190fc8	                JSL ILOOP_1MS
.190fd6		ca		dex		                DEX
.190fd7		80 f4		bra $190fcd	                BRA ILOOP_MS
.190fd9		6b		rtl		LOOP_MS_END     RTL
.190fda						IDELAY
.190fda		48		pha		                PHA
.190fdb		8b		phb		                PHB
.190fdc		08		php		                PHP
.190fdd		48		pha		                PHA             ; begin setdbr macro
.190fde		08		php		                PHP
.190fdf		e2 20		sep #$20	                SEP #$20        ; set A short
.190fe1		a9 00		lda #$00	                LDA #0
.190fe3		48		pha		                PHA
.190fe4		ab		plb		                PLB
.190fe5		28		plp		                PLP
.190fe6		68		pla		                PLA             ; end setdbr macro
.190fe7		c2 30		rep #$30	                REP #$30        ; set A&X long
.190fe9		da		phx		                PHX                         ; Save the delay amount
.190fea		5a		phy		                PHY
.190feb		a9 02 00	lda #$0002	                LDA #$02                    ; Set the handler for TIMER0 interrupts
.190fee		a0 18 00	ldy #$0018	                LDY #`HANDLE_TIMER0
.190ff1		a2 97 19	ldx #$1997	                LDX #<>HANDLE_TIMER0
.190ff4		22 48 11 00	jsl $001148	                JSL SETHANDLER
.190ff8		7a		ply		                PLY                         ; Restore the delay amount
.190ff9		fa		plx		                PLX
.190ffa		e2 20		sep #$20	                SEP #$20        ; set A short
.190ffc		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.190ffe		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.191002		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.191006		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.191008		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.19100c		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.19100e		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.191011		a9 00		lda #$00	                LDA #0
.191013		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.191017		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.19101b		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.19101f		c2 30		rep #$30	                REP #$30        ; set A&X long
.191021		8a		txa		                TXA
.191022		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.191026		98		tya		                TYA
.191027		e2 20		sep #$20	                SEP #$20        ; set A short
.191029		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.19102d		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.19102f		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.191033		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.191035		cb		wai		loop            WAI                         ; Wait for an interrupt
.191036		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.191039		f0 fa		beq $191035	                BEQ loop                    ; Keep checking until it's set
.19103b		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.19103d		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.191041		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.191043		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.191046		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.19104a		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.19104c		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.191050		28		plp		                PLP
.191051		ab		plb		                PLB
.191052		68		pla		                PLA
.191053		6b		rtl		                RTL
.191054						SHOW_CREDITS
.191054		48		pha		                PHA
.191055		da		phx		                PHX
.191056		5a		phy		                PHY
.191057		08		php		                PHP
.191058		e2 20		sep #$20	                SEP #$20        ; set A short
.19105a		c2 10		rep #$10	                REP #$10        ; set X long
.19105c		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.191060		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.191062		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.191066		a2 00 00	ldx #$0000	                LDX #0
.191069		bf 00 00 1b	lda $1b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.19106d		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.191071		bf 00 18 1b	lda $1b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.191075		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.191079		e8		inx		                INX
.19107a		e0 00 20	cpx #$2000	                CPX #128 * 64
.19107d		d0 ea		bne $191069	                BNE credit_loop
.19107f		22 9b 06 19	jsl $19069b	                JSL IGETCHW                     ; Wait for a keypress
.191083		22 e5 08 19	jsl $1908e5	                JSL ICLRSCREEN                  ; Then clear the screen and return
.191087		22 15 08 19	jsl $190815	                JSL ICSRHOME                    ; Move cursor to the home position
.19108b		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.19108f		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.191091		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.191095		28		plp		                PLP
.191096		7a		ply		                PLY
.191097		fa		plx		                PLX
.191098		68		pla		                PLA
.191099		6b		rtl		                RTL
.19109a		00		brk #		ISCINIT         BRK ;
.19109b		00		brk #		IIOINIT         BRK ;
.19109c		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.19109d		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.19109e		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.19109f		00		brk #		ICLOSE          BRK ; Close a channel
.1910a0		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.1910a1		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.1910a2		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.1910a3		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.1910a4		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.1910a5		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.1910a6		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.1910a7		00		brk #		IPRINTF         BRK ; Print a float value
.1910a8		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.1910a9		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.1910aa		00		brk #		IPUSHKEY        BRK ;
.1910ab		00		brk #		IPUSHKEYS       BRK ;
.1910ac		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.1910ad		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.1910ae		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>1910af		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>1910b7		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>1910c7		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>1910cf		12
>1910d0		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>1910d8		15
>1910d9		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>1910df		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>1910e4		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Instruments.asm

>1910ea		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>1910f2		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>191100		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>191108		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>191116		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>19111e		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>19112c		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>191134		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>191142		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>19114a		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>191158		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>191160		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>19116e		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>191176		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>191184		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>19118c		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>19119a		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>1911a2		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>1911b0		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>1911b8		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>1911c6		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>1911ce		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>1911dc		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>1911e4		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>1911f2		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>1911fa		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>191208		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>191210		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>19121e		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>191226		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>191234		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>19123c		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>19124a		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>191252		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>191260		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>191268		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>191276		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>19127e		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>19128c		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>191294		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>1912a2		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>1912aa		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>1912b8		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>1912c0		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>1912ce		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>1912d6		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>1912e4		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>1912ec		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>1912fa		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>191302		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>191310		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>191318		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>191326		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>19132e		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>19133c		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>191344		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>191352		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>19135a		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>191368		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>191370		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>19137e		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>191386		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>191394		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>19139c		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>1913aa		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>1913b2		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>1913c0		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>1913c8		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>1913d6		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>1913de		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>1913ec		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>1913f4		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>191402		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>19140a		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>191418		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>191420		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>19142e		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>191436		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>191444		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>19144c		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>19145a		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>191462		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>191470		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>191478		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>191486		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>19148e		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>19149c		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>1914a4		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>1914b2		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>1914ba		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>1914c8		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>1914d0		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>1914de		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>1914e6		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>1914f4		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>1914fc		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>19150a		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>191512		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>191520		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>191528		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>191536		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>19153e		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>19154c		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>191554		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>191562		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>19156a		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>191578		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>191580		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>19158e		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>191596		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>1915a4		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>1915ac		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>1915ba		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>1915c2		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>1915d0		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>1915d8		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>1915e6		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>1915ee		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>1915fc		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>191604		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>191612		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>19161a		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>191628		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>191630		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>19163e		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>191646		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>191654		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>19165c		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>19166a		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>191672		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>191680		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>191688		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>191696		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>19169e		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>1916ac		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>1916b4		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>1916c2		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>1916ca		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>1916d8		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>1916e0		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>1916ee		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>1916f6		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>191704		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>19170c		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>19171a		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>191722		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>191730		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>191738		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>191746		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>19174e		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>19175c		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>191764		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>191772		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>19177a		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>191788		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>191790		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>19179e		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>1917a6		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>1917b4		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>1917bc		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>1917ca		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>1917d2		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>1917e0		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>1917e8		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>1917f6		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>1917fe		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>19180c		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>191814		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>191822		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>19182a		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>191838		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>191840		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>19184e		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>191856		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>191864		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>19186c		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>19187a		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>191882		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>191890		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>191898		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>1918a6		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>1918ae		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>1918bc		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>1918c4		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>1918d2		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>1918da		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>1918e8		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>1918f0		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>1918fe		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>191906		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>191914		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>19191c		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>19192a		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>191932		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>191940		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>191948		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>191956		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>19195e		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>19196c		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>191974		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>191982		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>19198a		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>191998		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>1919a0		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>1919ae		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>1919b6		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>1919c4		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>1919cc		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>1919da		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>1919e2		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>1919f0		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>1919f8		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>191a06		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>191a0e		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>191a1c		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>191a24		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>191a32		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>191a3a		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>191a48		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>191a50		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>191a5e		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>191a66		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>191a74		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>191a7c		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>191a8a		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>191a92		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>191aa0		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>191aa8		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>191ab6		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>191abe		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>191acc		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>191ad4		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>191ae2		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>191aea		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>191af8		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>191b00		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>191b0e		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>191b16		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>191b24		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>191b2c		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>191b3a		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>191b42		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>191b50		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>191b58		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>191b66		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>191b6e		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>191b7c		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>191b84		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>191b92		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>191b9a		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>191ba8		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>191bb0		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>191bbe		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>191bc6		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>191bd4		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>191bdc		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>191bea		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>191bf2		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>191c00		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>191c08		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>191c16		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>191c1e		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>191c2c		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>191c34		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>191c42		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>191c4a		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>191c58		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>191c60		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>191c6e		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>191c76		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>191c84		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>191c8c		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>191c9a		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>191ca2		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>191cb0		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>191cb8		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>191cc6		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>191cce		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>191cdc		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>191ce4		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>191cf2		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>191cfa		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>191d08		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>191d10		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>191d1e		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>191d26		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>191d34		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>191d3c		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>191d4a		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>191d52		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Drums.asm

>191d60		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>191d68		00 87 fa 00
>191d6c		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>191d74		00 88 98 03
>191d78		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>191d80		00 88 98 03
>191d84		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191d8c		00 f9 69 00
>191d90		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>191d98		80 e8 4a 00
>191d9c		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191da4		00 f6 9a 00
>191da8		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>191db0		1b f2 34 00
>191db4		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>191dbc		00 f7 8a 00
>191dc0		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>191dc8		00 f6 47 00
>191dcc		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191dd4		00 f9 69 00
>191dd8		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>191de0		00 f7 a9 00
>191de4		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>191dec		00 87 fa 00
>191df0		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>191df8		00 f7 a9 00
>191dfc		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e04		00 f5 f5 00
>191e08		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>191e10		06 b8 d8 03
>191e14		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e1c		00 f5 f5 00
>191e20		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>191e28		06 b8 d8 03
>191e2c		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e34		00 f5 f5 00
>191e38		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>191e40		10 74 f8 03
>191e44		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e4c		00 f5 f5 00
>191e50		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e58		00 f5 f5 00
>191e5c		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191e64		05 c5 d4 03
>191e68		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e70		00 f5 f5 00
>191e74		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191e7c		04 f9 44 03
>191e80		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191e88		05 c5 d4 03
>191e8c		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191e94		04 f9 44 03
>191e98		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>191ea0		03 87 f7 03
>191ea4		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191eac		05 c5 d4 03
>191eb0		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>191eb8		00 f6 28 00
>191ebc		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191ec4		05 c5 d4 03
>191ec8		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>191ed0		00 f5 f7 01
>191ed4		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191edc		04 f9 44 03
>191ee0		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>191ee8		00 99 f9 00
>191eec		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>191ef4		00 a8 f7 00
>191ef8		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>191f00		00 99 f9 00
>191f04		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>191f0c		00 a6 f6 00
>191f10		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>191f18		00 a6 f6 00
>191f1c		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>191f24		00 f6 36 02
>191f28		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>191f30		00 f6 36 02
>191f34		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>191f3c		00 96 e8 01
>191f40		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>191f48		00 96 e8 01
>191f4c		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191f54		02 79 77 03
>191f58		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191f60		02 79 77 03
>191f64		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>191f6c		00 a5 2b 02
>191f70		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>191f78		00 93 3b 02
>191f7c		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>191f84		01 89 3b 03
>191f88		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>191f90		0a 53 2b 02
>191f94		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>191f9c		00 f6 89 00
>191fa0		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191fa8		00 f6 9a 00
>191fac		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191fb4		00 f6 9a 00
>191fb8		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>191fc0		00 87 4b 01
>191fc4		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>191fcc		00 78 67 01
>191fd0		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>191fd8		02 f8 fc 00
>191fdc		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>191fe4		40 f5 f5 00
>191fe8		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191ff0		02 79 77 03
>191ff4		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>191ffc		40 f5 f5 00
>192000		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>192008		40 f5 f5 00
>19200c		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>192014		00 f9 69 00
>192018		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>192020		00 f9 69 00
>192024		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>19202c		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>192030		60 1d 19 00 6c 1d 19 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>192038		78 1d 19 00 84 1d 19 00
>192040		90 1d 19 00 9c 1d 19 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>192048		a8 1d 19 00 b4 1d 19 00
>192050		c0 1d 19 00 cc 1d 19 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>192058		d8 1d 19 00 e4 1d 19 00
>192060		f0 1d 19 00 fc 1d 19 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>192068		08 1e 19 00 14 1e 19 00
>192070		20 1e 19 00 2c 1e 19 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>192078		38 1e 19 00 44 1e 19 00
>192080		50 1e 19 00 5c 1e 19 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>192088		68 1e 19 00 74 1e 19 00
>192090		80 1e 19 00 8c 1e 19 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>192098		98 1e 19 00 a4 1e 19 00
>1920a0		b0 1e 19 00 bc 1e 19 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>1920a8		c8 1e 19 00 d4 1e 19 00
>1920b0		e0 1e 19 00 ec 1e 19 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>1920b8		f8 1e 19 00 04 1f 19 00
>1920c0		10 1f 19 00 1c 1f 19 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>1920c8		28 1f 19 00 34 1f 19 00
>1920d0		40 1f 19 00 4c 1f 19 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>1920d8		58 1f 19 00 64 1f 19 00
>1920e0		70 1f 19 00 7c 1f 19 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>1920e8		88 1f 19 00 94 1f 19 00
>1920f0		a0 1f 19 00 ac 1f 19 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>1920f8		b8 1f 19 00 c4 1f 19 00
>192100		d0 1f 19 00 dc 1f 19 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>192108		e8 1f 19 00 f4 1f 19 00
>192110		00 20 19 00 0c 20 19 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>192118		18 20 19 00 24 20 19 00

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments.asm

>192120		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>192128		00 b1 f5 01
>19212c		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>192134		03 f1 f5 00
>192138		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>192140		03 c1 f5 00
>192144		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>19214c		00 92 f5 01
>192150		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>192158		00 f1 f9 00
>19215c		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>192164		00 f1 f5 00
>192168		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>192170		02 81 f6 01
>192174		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>19217c		00 c2 b9 01
>192180		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>192188		05 b2 35 00
>19218c		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>192194		1b f2 34 00
>192198		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>1921a0		01 f5 74 00
>1921a4		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>1921ac		00 61 e3 00
>1921b0		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>1921b8		00 a4 64 00
>1921bc		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>1921c4		07 b5 f5 00
>1921c8		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>1921d0		00 f3 74 00
>1921d4		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>1921dc		00 c3 94 01
>1921e0		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>1921e8		00 f4 0d 01
>1921ec		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>1921f4		00 f5 0b 01
>1921f8		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>192200		00 bf 07 00
>192204		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>19220c		00 6d 08 01
>192210		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>192218		00 51 17 01
>19221c		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>192224		00 51 17 01
>192228		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>192230		00 53 08 01
>192234		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>19223c		00 53 06 01
>192240		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>192248		00 d2 f8 00
>19224c		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>192254		00 e2 c7 01
>192258		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>192260		00 f1 9c 00
>192264		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>19226c		02 f2 c9 01
>192270		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>192278		03 95 fb 00
>19227c		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>192284		04 a1 59 00
>192288		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>192290		03 91 fc 03
>192294		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>19229c		02 b4 ec 00
>1922a0		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>1922a8		00 93 f7 00
>1922ac		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>1922b4		04 c1 58 00
>1922b8		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>1922c0		02 c3 6a 00
>1922c4		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>1922cc		00 62 87 00
>1922d0		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>1922d8		00 f3 97 00
>1922dc		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>1922e4		00 b3 97 00
>1922e8		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>1922f0		04 f3 cc 00
>1922f4		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>1922fc		00 93 aa 00
>192300		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>192308		00 78 08 01
>19230c		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>192314		00 78 08 01
>192318		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>192320		00 54 27 01
>192324		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>19232c		00 61 56 00
>192330		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>192338		00 75 16 01
>19233c		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>192344		00 f5 f6 01
>192348		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>192350		80 f3 e3 00
>192354		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>19235c		00 b5 f5 00
>192360		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>192368		80 71 16 00
>19236c		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>192374		00 30 55 01
>192378		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>192380		00 62 36 01
>192384		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>19238c		02 51 07 00
>192390		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>192398		00 62 39 00
>19239c		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>1923a4		00 66 27 00
>1923a8		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>1923b0		00 73 46 00
>1923b4		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>1923bc		00 74 76 01
>1923c0		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>1923c8		81 92 38 00
>1923cc		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>1923d4		02 71 19 00
>1923d8		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>1923e0		01 81 09 00
>1923e4		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>1923ec		00 83 4b 02
>1923f0		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>1923f8		05 71 59 00
>1923fc		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>192404		03 82 39 00
>192408		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>192410		82 84 17 00
>192414		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>19241c		02 72 16 00
>192420		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>192428		00 7b 0a 00
>19242c		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>192434		00 85 0c 01
>192438		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>192440		00 7b 0a 01
>192444		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>19244c		00 79 18 01
>192450		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>192458		01 73 08 00
>19245c		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>192464		04 77 0a 00
>192468		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>192470		00 51 19 00
>192474		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>19247c		01 74 09 00
>192480		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>192488		01 63 28 00
>19248c		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>192494		00 65 0a 00
>192498		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>1924a0		00 67 29 00
>1924a4		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>1924ac		00 67 09 00
>1924b0		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>1924b8		01 6a 28 00
>1924bc		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>1924c4		00 55 27 00
>1924c8		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>1924d0		00 6f 08 00
>1924d4		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>1924dc		00 7a 07 00
>1924e0		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>1924e8		06 a2 0d 00
>1924ec		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>1924f4		00 a3 5f 00
>1924f8		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>192500		00 42 27 00
>192504		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>19250c		05 b2 49 00
>192510		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>192518		00 b2 79 01
>19251c		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>192524		00 7a 1a 00
>192528		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>192530		00 82 28 01
>192534		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>19253c		02 c3 5f 00
>192540		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>192548		86 c4 95 01
>19254c		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>192554		00 44 15 00
>192558		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>192560		00 d1 06 00
>192564		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>19256c		00 82 37 00
>192570		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>192578		00 41 35 00
>19257c		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>192584		02 32 f5 01
>192588		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>192590		00 61 26 00
>192594		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>19259c		84 3f 05 01
>1925a0		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>1925a8		01 d1 f6 00
>1925ac		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>1925b4		00 41 05 01
>1925b8		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>1925c0		05 f3 e4 00
>1925c4		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>1925cc		00 92 f5 01
>1925d0		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>1925d8		04 f2 e4 01
>1925dc		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>1925e4		00 45 25 00
>1925e8		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>1925f0		01 a3 36 00
>1925f4		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>1925fc		01 98 05 01
>192600		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>192608		02 a3 f6 01
>19260c		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>192614		00 f6 f8 00
>192618		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>192620		00 f3 f5 00
>192624		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>19262c		00 94 e5 01
>192630		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>192638		00 84 44 00
>19263c		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>192644		03 83 18 01
>192648		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>192650		01 78 08 01
>192654		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>19265c		03 8e 08 01
>192660		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>192668		09 f2 46 00
>19266c		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>192674		00 96 e8 01
>192678		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>192680		00 f6 f6 01
>192684		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>19268c		00 f6 9a 00
>192690		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>192698		00 c6 45 00
>19269c		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>1926a4		00 f4 b4 00
>1926a8		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>1926b0		00 d5 25 00
>1926b4		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>1926bc		0e 21 2d 00
>1926c0		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>1926c8		00 55 87 02
>1926cc		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>1926d4		08 98 87 01
>1926d8		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>1926e0		04 17 04 03
>1926e4		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>1926ec		05 77 f9 02
>1926f0		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>1926f8		02 f4 08 00
>1926fc		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>192704		00 36 05 01
>192708		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>192710		05 32 55 03
>192714		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>19271c		00 f3 df 00
>192720		20 21 19 00 2c 21 19 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>192728		38 21 19 00 44 21 19 00 50 21 19 00 5c 21 19 00
>192738		68 21 19 00 74 21 19 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>192740		80 21 19 00 8c 21 19 00 98 21 19 00 a4 21 19 00
>192750		b0 21 19 00 bc 21 19 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>192758		c8 21 19 00 d4 21 19 00 e0 21 19 00 ec 21 19 00
>192768		f8 21 19 00 04 22 19 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>192770		10 22 19 00 1c 22 19 00 28 22 19 00 34 22 19 00
>192780		40 22 19 00 4c 22 19 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>192788		58 22 19 00 64 22 19 00 70 22 19 00 7c 22 19 00
>192798		88 22 19 00 94 22 19 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>1927a0		a0 22 19 00 ac 22 19 00 b8 22 19 00 c4 22 19 00
>1927b0		d0 22 19 00 dc 22 19 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>1927b8		e8 22 19 00 f4 22 19 00 00 23 19 00 0c 23 19 00
>1927c8		18 23 19 00 24 23 19 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>1927d0		30 23 19 00 3c 23 19 00 48 23 19 00 54 23 19 00
>1927e0		60 23 19 00 6c 23 19 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>1927e8		78 23 19 00 84 23 19 00 90 23 19 00 9c 23 19 00
>1927f8		a8 23 19 00 b4 23 19 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>192800		c0 23 19 00 cc 23 19 00 d8 23 19 00 e4 23 19 00
>192810		f0 23 19 00 fc 23 19 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>192818		08 24 19 00 14 24 19 00 20 24 19 00 2c 24 19 00
>192828		38 24 19 00 44 24 19 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>192830		50 24 19 00 5c 24 19 00 68 24 19 00 74 24 19 00
>192840		80 24 19 00 8c 24 19 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>192848		98 24 19 00 a4 24 19 00 b0 24 19 00 bc 24 19 00
>192858		c8 24 19 00 d4 24 19 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>192860		e0 24 19 00 ec 24 19 00 f8 24 19 00 04 25 19 00
>192870		10 25 19 00 1c 25 19 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>192878		28 25 19 00 34 25 19 00 40 25 19 00 4c 25 19 00
>192888		58 25 19 00 64 25 19 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>192890		70 25 19 00 7c 25 19 00 88 25 19 00 94 25 19 00
>1928a0		a0 25 19 00 ac 25 19 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>1928a8		b8 25 19 00 c4 25 19 00 d0 25 19 00 dc 25 19 00
>1928b8		e8 25 19 00 f4 25 19 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>1928c0		00 26 19 00 0c 26 19 00 18 26 19 00 24 26 19 00
>1928d0		30 26 19 00 3c 26 19 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>1928d8		48 26 19 00 54 26 19 00 60 26 19 00 6c 26 19 00
>1928e8		78 26 19 00 84 26 19 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>1928f0		90 26 19 00 9c 26 19 00 a8 26 19 00 b4 26 19 00
>192900		c0 26 19 00 cc 26 19 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>192908		d8 26 19 00 e4 26 19 00 f0 26 19 00 fc 26 19 00
>192918		08 27 19 00 14 27 19 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments_Win31.asm

>192920		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>192928		0d f2 f7 00
>19292c		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>192934		07 f2 f7 00
>192938		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>192940		07 f2 f6 00
>192944		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>19294c		07 f2 f7 00
>192950		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>192958		07 f2 f7 00
>19295c		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>192964		07 f2 f7 00
>192968		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192970		00 00 00 00
>192974		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>19297c		00 00 00 00
>192980		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192988		00 00 00 00
>19298c		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>192994		87 f2 f1 00
>192998		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>1929a0		07 f4 f4 00
>1929a4		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>1929ac		07 f2 f6 00
>1929b0		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>1929b8		07 e7 f7 00
>1929bc		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>1929c4		07 f6 f6 00
>1929c8		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>1929d0		87 a3 f3 00
>1929d4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929dc		00 00 00 00
>1929e0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929e8		00 00 00 00
>1929ec		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929f4		00 00 00 00
>1929f8		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>192a00		07 8a 08 00
>192a04		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>192a0c		07 55 14 00
>192a10		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>192a18		87 55 04 00
>192a1c		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>192a24		07 46 1a 00
>192a28		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>192a30		07 61 07 00
>192a34		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>192a3c		90 61 07 00
>192a40		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a48		00 00 00 00
>192a4c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a54		00 00 00 00
>192a58		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a60		00 00 00 00
>192a64		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>192a6c		87 f3 f8 00
>192a70		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>192a78		07 f6 3a 00
>192a7c		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>192a84		0c 84 19 00
>192a88		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>192a90		07 94 19 00
>192a94		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>192a9c		87 d1 f8 00
>192aa0		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>192aa8		07 c3 a6 00
>192aac		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ab4		00 00 00 00
>192ab8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ac0		00 00 00 00
>192ac4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192acc		00 00 00 00
>192ad0		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>192ad8		47 f2 df 00
>192adc		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>192ae4		0f a1 df 00
>192ae8		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>192af0		07 f1 78 00
>192af4		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>192afc		07 f1 18 00
>192b00		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>192b08		07 56 26 00
>192b0c		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>192b14		07 66 06 00
>192b18		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b20		00 00 00 00
>192b24		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b2c		00 00 00 00
>192b30		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b38		00 00 00 00
>192b3c		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>192b44		87 85 35 00
>192b48		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>192b50		87 f3 f4 00
>192b54		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>192b5c		07 f2 c3 00
>192b60		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>192b68		08 72 08 00
>192b6c		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>192b74		07 3f 07 01
>192b78		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>192b80		07 4f 05 00
>192b84		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b8c		00 00 00 00
>192b90		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b98		00 00 00 00
>192b9c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ba4		00 00 00 00
>192ba8		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>192bb0		07 7a 05 00
>192bb4		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>192bbc		07 a5 45 00
>192bc0		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>192bc8		08 8f 09 00
>192bcc		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>192bd4		0c 8f 09 00
>192bd8		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>192be0		07 82 37 00
>192be4		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>192bec		07 62 2c 01
>192bf0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192bf8		00 00 00 00
>192bfc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c04		00 00 00 00
>192c08		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c10		00 00 00 00
>192c14		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>192c1c		07 a6 1c 00
>192c20		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>192c28		07 72 0b 00
>192c2c		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>192c34		07 72 09 00
>192c38		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>192c40		07 82 09 00
>192c44		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>192c4c		07 72 0f 00
>192c50		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>192c58		07 8f 0a 00
>192c5c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c64		00 00 00 00
>192c68		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c70		00 00 00 00
>192c74		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c7c		00 00 00 00
>192c80		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>192c88		07 65 1a 00
>192c8c		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>192c94		07 65 1a 00
>192c98		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>192ca0		07 75 0a 00
>192ca4		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>192cac		07 65 1a 00
>192cb0		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>192cb8		07 65 26 00
>192cbc		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>192cc4		07 55 36 00
>192cc8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192cd0		00 00 00 00
>192cd4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192cdc		00 00 00 00
>192ce0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ce8		00 00 00 00
>192cec		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>192cf4		07 ff 0f 01
>192cf8		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>192d00		87 64 18 00
>192d04		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>192d0c		07 96 0a 00
>192d10		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>192d18		07 91 2a 00
>192d1c		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>192d24		47 6f 07 00
>192d28		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>192d30		07 8f 06 02
>192d34		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d3c		00 00 00 00
>192d40		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d48		00 00 00 00
>192d4c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d54		00 00 00 00
>192d58		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>192d60		07 55 16 00
>192d64		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>192d6c		07 6a 03 00
>192d70		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>192d78		07 42 35 00
>192d7c		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>192d84		07 31 47 01
>192d88		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>192d90		0a 42 25 00
>192d94		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>192d9c		07 cf 07 00
>192da0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192da8		00 00 00 00
>192dac		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192db4		00 00 00 00
>192db8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192dc0		00 00 00 00
>192dc4		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>192dcc		8a f2 26 00
>192dd0		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>192dd8		07 f2 f5 00
>192ddc		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>192de4		87 11 13 00
>192de8		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>192df0		87 1d 03 00
>192df4		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>192dfc		07 81 23 00
>192e00		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>192e08		0a f2 f6 01
>192e0c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e14		00 00 00 00
>192e18		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e20		00 00 00 00
>192e24		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e2c		00 00 00 00
>192e30		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>192e38		07 c2 05 00
>192e3c		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>192e44		07 6f 0c 01
>192e48		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>192e50		07 56 16 00
>192e54		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>192e5c		88 8f 0b 00
>192e60		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>192e68		87 c3 e5 00
>192e6c		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>192e74		07 f8 16 00
>192e78		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e80		00 00 00 00
>192e84		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e8c		00 00 00 00
>192e90		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e98		00 00 00 00
>192e9c		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>192ea4		0a f3 03 00
>192ea8		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>192eb0		07 f3 02 00
>192eb4		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>192ebc		07 1f ff 03
>192ec0		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>192ec8		8f 56 84 02
>192ecc		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>192ed4		0c 34 04 03
>192ed8		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>192ee0		07 1f 02 03
>192ee4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192eec		00 00 00 00
>192ef0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ef8		00 00 00 00
>192efc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f04		00 00 00 00
>192f08		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>192f10		07 12 16 01
>192f14		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>192f1c		07 f6 c9 02
>192f20		20 29 19 00 2c 29 19 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>192f28		38 29 19 00 44 29 19 00 50 29 19 00 5c 29 19 00
>192f38		68 29 19 00 74 29 19 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>192f40		80 29 19 00 8c 29 19 00 98 29 19 00 a4 29 19 00
>192f50		b0 29 19 00 bc 29 19 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>192f58		c8 29 19 00 d4 29 19 00 e0 29 19 00 ec 29 19 00
>192f68		f8 29 19 00 04 2a 19 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>192f70		10 2a 19 00 1c 2a 19 00 28 2a 19 00 34 2a 19 00
>192f80		40 2a 19 00 4c 2a 19 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>192f88		58 2a 19 00 64 2a 19 00 70 2a 19 00 7c 2a 19 00
>192f98		88 2a 19 00 94 2a 19 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>192fa0		a0 2a 19 00 ac 2a 19 00 b8 2a 19 00 c4 2a 19 00
>192fb0		d0 2a 19 00 dc 2a 19 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>192fb8		e8 2a 19 00 f4 2a 19 00 00 2b 19 00 0c 2b 19 00
>192fc8		18 2b 19 00 24 2b 19 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>192fd0		30 2b 19 00 3c 2b 19 00 48 2b 19 00 54 2b 19 00
>192fe0		60 2b 19 00 6c 2b 19 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>192fe8		78 2b 19 00 84 2b 19 00 90 2b 19 00 9c 2b 19 00
>192ff8		a8 2b 19 00 b4 2b 19 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>193000		c0 2b 19 00 cc 2b 19 00 d8 2b 19 00 e4 2b 19 00
>193010		f0 2b 19 00 fc 2b 19 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>193018		08 2c 19 00 14 2c 19 00 20 2c 19 00 2c 2c 19 00
>193028		38 2c 19 00 44 2c 19 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>193030		50 2c 19 00 5c 2c 19 00 68 2c 19 00 74 2c 19 00
>193040		80 2c 19 00 8c 2c 19 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>193048		98 2c 19 00 a4 2c 19 00 b0 2c 19 00 bc 2c 19 00
>193058		c8 2c 19 00 d4 2c 19 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>193060		e0 2c 19 00 ec 2c 19 00 f8 2c 19 00 04 2d 19 00
>193070		10 2d 19 00 1c 2d 19 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>193078		28 2d 19 00 34 2d 19 00 40 2d 19 00 4c 2d 19 00
>193088		58 2d 19 00 64 2d 19 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>193090		70 2d 19 00 7c 2d 19 00 88 2d 19 00 94 2d 19 00
>1930a0		a0 2d 19 00 ac 2d 19 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>1930a8		b8 2d 19 00 c4 2d 19 00 d0 2d 19 00 dc 2d 19 00
>1930b8		e8 2d 19 00 f4 2d 19 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>1930c0		00 2e 19 00 0c 2e 19 00 18 2e 19 00 24 2e 19 00
>1930d0		30 2e 19 00 3c 2e 19 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>1930d8		48 2e 19 00 54 2e 19 00 60 2e 19 00 6c 2e 19 00
>1930e8		78 2e 19 00 84 2e 19 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>1930f0		90 2e 19 00 9c 2e 19 00 a8 2e 19 00 b4 2e 19 00
>193100		c0 2e 19 00 cc 2e 19 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>193108		d8 2e 19 00 e4 2e 19 00 f0 2e 19 00 fc 2e 19 00
>193118		08 2f 19 00 14 2f 19 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm

>193120		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.193128						IOPL2_TONE_TEST
.193128		e2 20		sep #$20	                SEP #$20        ; set A short
.19312a		c2 10		rep #$10	                REP #$10        ; set X long
.19312c		a2 00 00	ldx #$0000	                LDX #0
.19312f						OPL2_TONE_TESTING_L1
.19312f		bf 20 31 19	lda $193120,x	                LDA NOTE_INTRO, X
.193133		29 0f		and #$0f	                AND #$F
.193135		85 30		sta $30		                STA OPL2_NOTE ; start at C
.193137		bf 20 31 19	lda $193120,x	                LDA NOTE_INTRO, X
.19313b		29 70		and #$70	                AND #$70
.19313d		4a		lsr a		                LSR A
.19313e		4a		lsr a		                LSR A
.19313f		4a		lsr a		                LSR A
.193140		4a		lsr a		                LSR A
.193141		85 31		sta $31		                STA OPL2_OCTAVE
.193143		8a		txa		                TXA
.193144		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.193146		85 27		sta $27		                STA OPL2_CHANNEL
.193148		22 18 33 19	jsl $193318	                JSL OPL2_PLAYNOTE
.19314c		a0 00 00	ldy #$0000	                LDY #$0000
.19314f						OPL2_TONE_TESTING_L2
.19314f		ea		nop		                NOP
.193150		ea		nop		                NOP
.193151		ea		nop		                NOP
.193152		ea		nop		                NOP
.193153		c8		iny		                INY
.193154		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.193157		d0 f6		bne $19314f	                BNE OPL2_TONE_TESTING_L2
.193159		e8		inx		                INX
.19315a		e0 08 00	cpx #$0008	                CPX #8
.19315d		d0 d0		bne $19312f	                BNE OPL2_TONE_TESTING_L1
.19315f		6b		rtl		                RTL
.193160						OPL2_INIT
.193160		c2 20		rep #$20	                REP #$20        ; set A long
.193162		a9 00 00	lda #$0000	                LDA #$0000
.193165		85 28		sta $28		                STA OPL2_REG_REGION
.193167		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193169		85 30		sta $30		                STA OPL2_NOTE
.19316b		85 32		sta $32		                STA OPL2_PARAMETER0
.19316d		85 34		sta $34		                STA OPL2_PARAMETER2
.19316f		a9 ea 10	lda #$10ea	                LDA #<>INSTRUMENT_ACCORDN
.193172		85 50		sta $50		                STA RAD_ADDR
.193174		a9 19 00	lda #$0019	                LDA #<`INSTRUMENT_ACCORDN
.193177		85 52		sta $52		                STA RAD_ADDR + 2
.193179		e2 20		sep #$20	                SEP #$20        ; set A short
.19317b		6b		rtl		                RTL
.19317c						OPL2_Reset
.19317c		6b		rtl		                RTL
.19317d						OPL2_Get_FrequencyBlock
.19317d		6b		rtl		                RTL
.19317e						OPL2_GET_REGISTER
.19317e		48		pha		                PHA             ; begin setdp macro
.19317f		08		php		                PHP
.193180		c2 20		rep #$20	                REP #$20        ; set A long
.193182		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193185		5b		tcd		                TCD
.193186		28		plp		                PLP
.193187		68		pla		                PLA             ; end setdp macro
.193188		c2 20		rep #$20	                REP #$20        ; set A long
.19318a		18		clc		              CLC
.19318b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19318e		65 32		adc $32		              ADC OPL2_PARAMETER0
.193190		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193192		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193195		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193197		e2 20		sep #$20	                SEP #$20        ; set A short
.193199		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19319b		6b		rtl		              RTL
.19319c						OPL2_GET_WAVEFORM_SELECT
.19319c		48		pha		                PHA             ; begin setdp macro
.19319d		08		php		                PHP
.19319e		c2 20		rep #$20	                REP #$20        ; set A long
.1931a0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1931a3		5b		tcd		                TCD
.1931a4		28		plp		                PLP
.1931a5		68		pla		                PLA             ; end setdp macro
.1931a6		c2 20		rep #$20	                REP #$20        ; set A long
.1931a8		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1931ab		69 01 00	adc #$0001	              ADC #$0001
.1931ae		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1931b0		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1931b3		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1931b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1931b7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1931b9		29 20		and #$20	              AND #$20
.1931bb		6b		rtl		              RTL
.1931bc						OPL2_GET_SCALINGLEVEL
.1931bc		48		pha		                PHA             ; begin setdp macro
.1931bd		08		php		                PHP
.1931be		c2 20		rep #$20	                REP #$20        ; set A long
.1931c0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1931c3		5b		tcd		                TCD
.1931c4		28		plp		                PLP
.1931c5		68		pla		                PLA             ; end setdp macro
.1931c6		c2 20		rep #$20	                REP #$20        ; set A long
.1931c8		a9 40 00	lda #$0040	              LDA #$0040  ;
.1931cb		85 28		sta $28		              STA OPL2_REG_REGION
.1931cd		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.1931d0		e2 20		sep #$20	                SEP #$20        ; set A short
.1931d2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1931d4		29 c0		and #$c0	              AND #$C0
.1931d6		4a		lsr a		              LSR A
.1931d7		4a		lsr a		              LSR A
.1931d8		4a		lsr a		              LSR A
.1931d9		4a		lsr a		              LSR A
.1931da		4a		lsr a		              LSR A
.1931db		4a		lsr a		              LSR A
.1931dc		6b		rtl		              RTL
.1931dd						OPL2_GET_BLOCK
.1931dd		48		pha		                PHA             ; begin setdp macro
.1931de		08		php		                PHP
.1931df		c2 20		rep #$20	                REP #$20        ; set A long
.1931e1		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1931e4		5b		tcd		                TCD
.1931e5		28		plp		                PLP
.1931e6		68		pla		                PLA             ; end setdp macro
.1931e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1931e9		18		clc		              CLC
.1931ea		a5 27		lda $27		              LDA OPL2_CHANNEL
.1931ec		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.1931ee		69 b0		adc #$b0	              ADC #$B0
.1931f0		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.1931f2		a9 00		lda #$00	              LDA #$00
.1931f4		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.1931f6		c2 30		rep #$30	                REP #$30        ; set A&X long
.1931f8		18		clc		              CLC
.1931f9		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1931fc		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.1931fe		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193200		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193203		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193205		e2 20		sep #$20	                SEP #$20        ; set A short
.193207		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193209		29 1c		and #$1c	              AND #$1C
.19320b		4a		lsr a		              LSR A
.19320c		4a		lsr a		              LSR A
.19320d		6b		rtl		              RTL
.19320e						OPL2_GET_KEYON
.19320e		48		pha		                PHA             ; begin setdp macro
.19320f		08		php		                PHP
.193210		c2 20		rep #$20	                REP #$20        ; set A long
.193212		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193215		5b		tcd		                TCD
.193216		28		plp		                PLP
.193217		68		pla		                PLA             ; end setdp macro
.193218		e2 20		sep #$20	                SEP #$20        ; set A short
.19321a		18		clc		              CLC
.19321b		a5 27		lda $27		              LDA OPL2_CHANNEL
.19321d		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19321f		69 b0		adc #$b0	              ADC #$B0
.193221		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193223		a9 00		lda #$00	              LDA #$00
.193225		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193227		c2 30		rep #$30	                REP #$30        ; set A&X long
.193229		18		clc		              CLC
.19322a		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19322d		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19322f		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193231		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193234		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193236		e2 20		sep #$20	                SEP #$20        ; set A short
.193238		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19323a		29 20		and #$20	              AND #$20
.19323c		6b		rtl		              RTL
.19323d						OPL2_GET_FEEDBACK
.19323d		48		pha		                PHA             ; begin setdp macro
.19323e		08		php		                PHP
.19323f		c2 20		rep #$20	                REP #$20        ; set A long
.193241		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193244		5b		tcd		                TCD
.193245		28		plp		                PLP
.193246		68		pla		                PLA             ; end setdp macro
.193247		e2 20		sep #$20	                SEP #$20        ; set A short
.193249		18		clc		              CLC
.19324a		a5 27		lda $27		              LDA OPL2_CHANNEL
.19324c		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19324e		69 c0		adc #$c0	              ADC #$C0
.193250		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193252		a9 00		lda #$00	              LDA #$00
.193254		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193256		c2 30		rep #$30	                REP #$30        ; set A&X long
.193258		18		clc		              CLC
.193259		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19325c		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19325e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193260		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193263		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193265		e2 20		sep #$20	                SEP #$20        ; set A short
.193267		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193269		29 e0		and #$e0	              AND #$E0
.19326b		4a		lsr a		              LSR
.19326c		6b		rtl		              RTL
.19326d						OPL2_GET_SYNTHMODE
.19326d		48		pha		                PHA             ; begin setdp macro
.19326e		08		php		                PHP
.19326f		c2 20		rep #$20	                REP #$20        ; set A long
.193271		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193274		5b		tcd		                TCD
.193275		28		plp		                PLP
.193276		68		pla		                PLA             ; end setdp macro
.193277		e2 20		sep #$20	                SEP #$20        ; set A short
.193279		18		clc		              CLC
.19327a		a5 27		lda $27		              LDA OPL2_CHANNEL
.19327c		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19327e		69 c0		adc #$c0	              ADC #$C0
.193280		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193282		a9 00		lda #$00	              LDA #$00
.193284		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193286		c2 30		rep #$30	                REP #$30        ; set A&X long
.193288		18		clc		              CLC
.193289		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19328c		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19328e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193290		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193293		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193295		e2 20		sep #$20	                SEP #$20        ; set A short
.193297		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193299		29 01		and #$01	              AND #$01
.19329b		6b		rtl		              RTL
.19329c						OPL2_GET_DEEPTREMOLO
.19329c		48		pha		                PHA             ; begin setdp macro
.19329d		08		php		                PHP
.19329e		c2 20		rep #$20	                REP #$20        ; set A long
.1932a0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932a3		5b		tcd		                TCD
.1932a4		28		plp		                PLP
.1932a5		68		pla		                PLA             ; end setdp macro
.1932a6		c2 20		rep #$20	                REP #$20        ; set A long
.1932a8		a9 bd 00	lda #$00bd	              LDA #$00BD;
.1932ab		85 28		sta $28		              STA OPL2_REG_REGION
.1932ad		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.1932b0		e2 20		sep #$20	                SEP #$20        ; set A short
.1932b2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932b4		29 80		and #$80	              AND #$80
.1932b6		6b		rtl		              RTL
.1932b7						OPL2_GET_DEEPVIBRATO
.1932b7		48		pha		                PHA             ; begin setdp macro
.1932b8		08		php		                PHP
.1932b9		c2 20		rep #$20	                REP #$20        ; set A long
.1932bb		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932be		5b		tcd		                TCD
.1932bf		28		plp		                PLP
.1932c0		68		pla		                PLA             ; end setdp macro
.1932c1		c2 20		rep #$20	                REP #$20        ; set A long
.1932c3		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1932c6		69 bd 00	adc #$00bd	              ADC #$00BD
.1932c9		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1932cb		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1932ce		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1932d0		e2 20		sep #$20	                SEP #$20        ; set A short
.1932d2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932d4		29 40		and #$40	              AND #$40
.1932d6		6b		rtl		              RTL
.1932d7						OPL2_GET_PERCUSSION
.1932d7		48		pha		                PHA             ; begin setdp macro
.1932d8		08		php		                PHP
.1932d9		c2 20		rep #$20	                REP #$20        ; set A long
.1932db		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932de		5b		tcd		                TCD
.1932df		28		plp		                PLP
.1932e0		68		pla		                PLA             ; end setdp macro
.1932e1		c2 20		rep #$20	                REP #$20        ; set A long
.1932e3		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1932e6		69 bd 00	adc #$00bd	              ADC #$00BD
.1932e9		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1932eb		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1932ee		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1932f0		e2 20		sep #$20	                SEP #$20        ; set A short
.1932f2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932f4		29 20		and #$20	              AND #$20
.1932f6		6b		rtl		              RTL
.1932f7						OPL2_GET_DRUMS
.1932f7		48		pha		                PHA             ; begin setdp macro
.1932f8		08		php		                PHP
.1932f9		c2 20		rep #$20	                REP #$20        ; set A long
.1932fb		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932fe		5b		tcd		                TCD
.1932ff		28		plp		                PLP
.193300		68		pla		                PLA             ; end setdp macro
.193301		c2 20		rep #$20	                REP #$20        ; set A long
.193303		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193306		69 bd 00	adc #$00bd	              ADC #$00BD
.193309		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19330b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19330e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193310		e2 20		sep #$20	                SEP #$20        ; set A short
.193312		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193314		29 1f		and #$1f	              AND #$1F
.193316		6b		rtl		              RTL
.193317						OPL2_Get_WaveForm
.193317		6b		rtl		                RTL
.193318						OPL2_PLAYNOTE
.193318		48		pha		                PHA             ; begin setdp macro
.193319		08		php		                PHP
.19331a		c2 20		rep #$20	                REP #$20        ; set A long
.19331c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19331f		5b		tcd		                TCD
.193320		28		plp		                PLP
.193321		68		pla		                PLA             ; end setdp macro
.193322		e2 20		sep #$20	                SEP #$20        ; set A short
.193324		da		phx		                PHX
.193325		a9 00		lda #$00	                LDA #$00
.193327		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.193329		20 00 39	jsr $193900	                JSR OPL2_SET_KEYON
.19332c		20 c5 38	jsr $1938c5	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.19332f		e2 10		sep #$10	                SEP #$10        ; set X short
.193331		a5 30		lda $30		                LDA OPL2_NOTE
.193333		3a		dec a		                DEC A
.193334		0a		asl a		                ASL A
.193335		aa		tax		                TAX
.193336		bf af 10 19	lda $1910af,x	                LDA @lnoteFNumbers,X
.19333a		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.19333c		e8		inx		                INX
.19333d		bf af 10 19	lda $1910af,x	                LDA @lnoteFNumbers,X
.193341		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.193343		22 43 38 19	jsl $193843	                JSL OPL2_SET_FNUMBER
.193347		a9 01		lda #$01	                LDA #$01
.193349		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.19334b		20 00 39	jsr $193900	                JSR OPL2_SET_KEYON
.19334e		c2 10		rep #$10	                REP #$10        ; set X long
.193350		fa		plx		                PLX
.193351		6b		rtl		                RTL
.193352						OPL2_PLAYDRUM
.193352		6b		rtl		                RTL
.193353						OPL2_SET_INSTRUMENT
.193353		48		pha		                PHA             ; begin setdp macro
.193354		08		php		                PHP
.193355		c2 20		rep #$20	                REP #$20        ; set A long
.193357		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19335a		5b		tcd		                TCD
.19335b		28		plp		                PLP
.19335c		68		pla		                PLA             ; end setdp macro
.19335d		38		sec		              SEC ; Set the WaveFormSelect to True
.19335e		22 41 35 19	jsl $193541	              JSL OPL2_SET_WAVEFORMSELECT;
.193362		e2 20		sep #$20	                SEP #$20        ; set A short
.193364		c2 10		rep #$10	                REP #$10        ; set X long
.193366		a0 00 00	ldy #$0000	              LDY #$0000
.193369		a2 00 00	ldx #$0000	              LDX #$0000
.19336c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.19336e		85 35		sta $35		              STA OPL2_PARAMETER3
.193370		c8		iny		              INY
.193371		c9 06		cmp #$06	              CMP #$06
.193373		d0 03		bne $193378	              BNE PERCUSSION_NEXT07
.193375		82 70 01	brl $1934e8	              BRL Percussion_6
.193378						PERCUSSION_NEXT07
.193378		c9 07		cmp #$07	              CMP #$07
.19337a		d0 03		bne $19337f	              BNE PERCUSSION_NEXT08
.19337c		82 44 01	brl $1934c3	              BRL Percussion_7
.19337f						PERCUSSION_NEXT08
.19337f		c9 08		cmp #$08	              CMP #$08
.193381		d0 03		bne $193386	              BNE PERCUSSION_NEXT09
.193383		82 18 01	brl $19349e	              BRL Percussion_8
.193386						PERCUSSION_NEXT09
.193386		c9 09		cmp #$09	              CMP #$09
.193388		d0 03		bne $19338d	              BNE PERCUSSION_NEXT0A
.19338a		82 ec 00	brl $193479	              BRL Percussion_9
.19338d						PERCUSSION_NEXT0A
.19338d		c9 0a		cmp #$0a	              CMP #$0A
.19338f		d0 03		bne $193394	              BNE Percussion_Default
.193391		82 c0 00	brl $193454	              BRL Percussion_A
.193394						Percussion_Default
.193394		a9 00		lda #$00	              LDA #$00
.193396		85 26		sta $26		              STA OPL2_OPERATOR
.193398		c2 20		rep #$20	                REP #$20        ; set A long
.19339a		a9 20 00	lda #$0020	              LDA #$0020;
.19339d		85 28		sta $28		              STA OPL2_REG_REGION
.19339f		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.1933a2		e2 20		sep #$20	                SEP #$20        ; set A short
.1933a4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1933a6		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933a8		c8		iny		              INY
.1933a9		c2 20		rep #$20	                REP #$20        ; set A long
.1933ab		a9 40 00	lda #$0040	              LDA #$0040;
.1933ae		85 28		sta $28		              STA OPL2_REG_REGION
.1933b0		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.1933b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1933b5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1933b7		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933b9		c8		iny		              INY
.1933ba		c2 20		rep #$20	                REP #$20        ; set A long
.1933bc		a9 60 00	lda #$0060	              LDA #$0060;
.1933bf		85 28		sta $28		              STA OPL2_REG_REGION
.1933c1		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.1933c4		e2 20		sep #$20	                SEP #$20        ; set A short
.1933c6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1933c8		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933ca		c8		iny		              INY
.1933cb		c2 20		rep #$20	                REP #$20        ; set A long
.1933cd		a9 80 00	lda #$0080	              LDA #$0080;
.1933d0		85 28		sta $28		              STA OPL2_REG_REGION
.1933d2		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.1933d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1933d7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1933d9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933db		c8		iny		              INY
.1933dc		c2 20		rep #$20	                REP #$20        ; set A long
.1933de		a9 e0 00	lda #$00e0	              LDA #$00E0;
.1933e1		85 28		sta $28		              STA OPL2_REG_REGION
.1933e3		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.1933e6		e2 20		sep #$20	                SEP #$20        ; set A short
.1933e8		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1933ea		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933ec		c8		iny		              INY
.1933ed		e2 10		sep #$10	                SEP #$10        ; set X short
.1933ef		a5 27		lda $27		              LDA OPL2_CHANNEL
.1933f1		29 0f		and #$0f	              AND #$0F
.1933f3		aa		tax		              TAX
.1933f4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.1933f6		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.1933fa		c8		iny		              INY
.1933fb		a9 01		lda #$01	              LDA #$01
.1933fd		85 26		sta $26		              STA OPL2_OPERATOR
.1933ff		c2 20		rep #$20	                REP #$20        ; set A long
.193401		a9 20 00	lda #$0020	              LDA #$0020;
.193404		85 28		sta $28		              STA OPL2_REG_REGION
.193406		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.193409		e2 20		sep #$20	                SEP #$20        ; set A short
.19340b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.19340d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19340f		c8		iny		              INY
.193410		c2 20		rep #$20	                REP #$20        ; set A long
.193412		a9 40 00	lda #$0040	              LDA #$0040;
.193415		85 28		sta $28		              STA OPL2_REG_REGION
.193417		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.19341a		e2 20		sep #$20	                SEP #$20        ; set A short
.19341c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.19341e		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193420		c8		iny		              INY
.193421		c2 20		rep #$20	                REP #$20        ; set A long
.193423		a9 60 00	lda #$0060	              LDA #$0060;
.193426		85 28		sta $28		              STA OPL2_REG_REGION
.193428		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.19342b		e2 20		sep #$20	                SEP #$20        ; set A short
.19342d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.19342f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193431		c8		iny		              INY
.193432		c2 20		rep #$20	                REP #$20        ; set A long
.193434		a9 80 00	lda #$0080	              LDA #$0080;
.193437		85 28		sta $28		              STA OPL2_REG_REGION
.193439		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.19343c		e2 20		sep #$20	                SEP #$20        ; set A short
.19343e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.193440		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193442		c8		iny		              INY
.193443		c2 20		rep #$20	                REP #$20        ; set A long
.193445		a9 e0 00	lda #$00e0	              LDA #$00E0;
.193448		85 28		sta $28		              STA OPL2_REG_REGION
.19344a		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.19344d		e2 20		sep #$20	                SEP #$20        ; set A short
.19344f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.193451		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193453		6b		rtl		                RTL
.193454						Percussion_A
.193454		e2 20		sep #$20	                SEP #$20        ; set A short
.193456		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193458		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.19345c		c8		iny		              INY
.19345d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.19345f		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.193463		c8		iny		              INY
.193464		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193466		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.19346a		c8		iny		              INY
.19346b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.19346d		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.193471		c8		iny		              INY
.193472		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193474		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.193478		6b		rtl		                RTL
.193479						Percussion_9
.193479		e2 20		sep #$20	                SEP #$20        ; set A short
.19347b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.19347d		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.193481		c8		iny		              INY
.193482		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.193484		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.193488		c8		iny		              INY
.193489		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.19348b		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.19348f		c8		iny		              INY
.193490		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193492		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.193496		c8		iny		              INY
.193497		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193499		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.19349d		6b		rtl		              RTL
.19349e						Percussion_8
.19349e		e2 20		sep #$20	                SEP #$20        ; set A short
.1934a0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1934a2		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.1934a6		c8		iny		              INY
.1934a7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1934a9		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.1934ad		c8		iny		              INY
.1934ae		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1934b0		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.1934b4		c8		iny		              INY
.1934b5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1934b7		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.1934bb		c8		iny		              INY
.1934bc		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1934be		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.1934c2		6b		rtl		              RTL
.1934c3						Percussion_7
.1934c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1934c5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1934c7		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.1934cb		c8		iny		              INY
.1934cc		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1934ce		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.1934d2		c8		iny		              INY
.1934d3		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1934d5		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.1934d9		c8		iny		              INY
.1934da		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1934dc		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.1934e0		c8		iny		              INY
.1934e1		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1934e3		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.1934e7		6b		rtl		              RTL
.1934e8						Percussion_6
.1934e8		e2 20		sep #$20	                SEP #$20        ; set A short
.1934ea		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1934ec		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.1934f0		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.1934f4		c8		iny		              INY
.1934f5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1934f7		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.1934fb		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.1934ff		c8		iny		              INY
.193500		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193502		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.193506		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.19350a		c8		iny		              INY
.19350b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.19350d		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.193511		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.193515		c8		iny		              INY
.193516		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193518		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.19351c		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.193520		6b		rtl		              RTL
.193521						OPL2_SET_REGISTER
.193521		48		pha		                PHA             ; begin setdp macro
.193522		08		php		                PHP
.193523		c2 20		rep #$20	                REP #$20        ; set A long
.193525		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193528		5b		tcd		                TCD
.193529		28		plp		                PLP
.19352a		68		pla		                PLA             ; end setdp macro
.19352b		c2 20		rep #$20	                REP #$20        ; set A long
.19352d		18		clc		              CLC
.19352e		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193531		65 32		adc $32		              ADC OPL2_PARAMETER0
.193533		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193535		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193538		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19353a		e2 20		sep #$20	                SEP #$20        ; set A short
.19353c		a5 33		lda $33		              LDA OPL2_PARAMETER1
.19353e		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193540		6b		rtl		              RTL
.193541						OPL2_SET_WAVEFORMSELECT
.193541		48		pha		                PHA             ; begin setdp macro
.193542		08		php		                PHP
.193543		c2 20		rep #$20	                REP #$20        ; set A long
.193545		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193548		5b		tcd		                TCD
.193549		28		plp		                PLP
.19354a		68		pla		                PLA             ; end setdp macro
.19354b		c2 20		rep #$20	                REP #$20        ; set A long
.19354d		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.193550		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193552		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193555		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193557		e2 20		sep #$20	                SEP #$20        ; set A short
.193559		b0 07		bcs $193562	              BCS OPL2_Set_WaveFormSelect_set
.19355b		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19355d		29 df		and #$df	              AND #$DF
.19355f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193561		6b		rtl		              RTL
.193562						OPL2_Set_WaveFormSelect_set
.193562		48		pha		                PHA             ; begin setdp macro
.193563		08		php		                PHP
.193564		c2 20		rep #$20	                REP #$20        ; set A long
.193566		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193569		5b		tcd		                TCD
.19356a		28		plp		                PLP
.19356b		68		pla		                PLA             ; end setdp macro
.19356c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19356e		09 20 00	ora #$0020	              ORA #$20
.193571		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193573		6b		rtl		                RTL
.193574						OPL2_SET_TREMOLO
.193574		48		pha		                PHA             ; begin setdp macro
.193575		08		php		                PHP
.193576		c2 20		rep #$20	                REP #$20        ; set A long
.193578		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19357b		5b		tcd		                TCD
.19357c		28		plp		                PLP
.19357d		68		pla		                PLA             ; end setdp macro
.19357e		08		php		                PHP ; Push the Carry
.19357f		c2 20		rep #$20	                REP #$20        ; set A long
.193581		18		clc		                CLC
.193582		a9 20 00	lda #$0020	                LDA #$0020 ;
.193585		85 28		sta $28		                STA OPL2_REG_REGION
.193587		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.19358a		28		plp		                PLP ; Pull the Carry out
.19358b		e2 20		sep #$20	                SEP #$20        ; set A short
.19358d		b0 08		bcs $193597	                BCS OPL2_Set_Tremolo_Set;
.19358f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193591		29 7f		and #$7f	                AND #$7F
.193593		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193595		80 06		bra $19359d	                BRA OPL2_Set_Tremolo_Exit
.193597						OPL2_Set_Tremolo_Set
.193597		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193599		09 80		ora #$80	                ORA #$80
.19359b		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19359d						OPL2_Set_Tremolo_Exit
.19359d		6b		rtl		                RTL
.19359e						OPL2_GET_TREMOLO
.19359e		48		pha		                PHA             ; begin setdp macro
.19359f		08		php		                PHP
.1935a0		c2 20		rep #$20	                REP #$20        ; set A long
.1935a2		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935a5		5b		tcd		                TCD
.1935a6		28		plp		                PLP
.1935a7		68		pla		                PLA             ; end setdp macro
.1935a8		c2 20		rep #$20	                REP #$20        ; set A long
.1935aa		a9 20 00	lda #$0020	                LDA #$0020;
.1935ad		85 28		sta $28		                STA OPL2_REG_REGION
.1935af		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.1935b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1935b4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935b6		29 80		and #$80	                AND #$80
.1935b8		6b		rtl		                RTL
.1935b9						OPL2_SET_VIBRATO
.1935b9		48		pha		                PHA             ; begin setdp macro
.1935ba		08		php		                PHP
.1935bb		c2 20		rep #$20	                REP #$20        ; set A long
.1935bd		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935c0		5b		tcd		                TCD
.1935c1		28		plp		                PLP
.1935c2		68		pla		                PLA             ; end setdp macro
.1935c3		08		php		                PHP ; Push the Carry
.1935c4		c2 20		rep #$20	                REP #$20        ; set A long
.1935c6		18		clc		                CLC
.1935c7		a9 20 00	lda #$0020	                LDA #$0020;
.1935ca		85 28		sta $28		                STA OPL2_REG_REGION
.1935cc		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.1935cf		28		plp		                PLP ; Pull the Carry out
.1935d0		e2 20		sep #$20	                SEP #$20        ; set A short
.1935d2		b0 08		bcs $1935dc	                BCS OPL2_Set_Vibrato_Set;
.1935d4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935d6		29 bf		and #$bf	                AND #$BF
.1935d8		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1935da		80 06		bra $1935e2	                BRA OPL2_Set_Vibrato_Exit
.1935dc						OPL2_Set_Vibrato_Set
.1935dc		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935de		09 40		ora #$40	                ORA #$40
.1935e0		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1935e2						OPL2_Set_Vibrato_Exit
.1935e2		6b		rtl		                RTL
.1935e3						OPL2_GET_VIBRATO
.1935e3		48		pha		                PHA             ; begin setdp macro
.1935e4		08		php		                PHP
.1935e5		c2 20		rep #$20	                REP #$20        ; set A long
.1935e7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935ea		5b		tcd		                TCD
.1935eb		28		plp		                PLP
.1935ec		68		pla		                PLA             ; end setdp macro
.1935ed		c2 20		rep #$20	                REP #$20        ; set A long
.1935ef		a9 20 00	lda #$0020	                LDA #$0020;
.1935f2		85 28		sta $28		                STA OPL2_REG_REGION
.1935f4		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.1935f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1935f9		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935fb		29 40		and #$40	                AND #$40
.1935fd		6b		rtl		                RTL
.1935fe						OPL2_SET_MAINTAINSUSTAIN
.1935fe		48		pha		                PHA             ; begin setdp macro
.1935ff		08		php		                PHP
.193600		c2 20		rep #$20	                REP #$20        ; set A long
.193602		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193605		5b		tcd		                TCD
.193606		28		plp		                PLP
.193607		68		pla		                PLA             ; end setdp macro
.193608		08		php		              PHP ; Push the Carry
.193609		c2 20		rep #$20	                REP #$20        ; set A long
.19360b		18		clc		              CLC
.19360c		a9 20 00	lda #$0020	              LDA #$0020;
.19360f		85 28		sta $28		              STA OPL2_REG_REGION
.193611		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.193614		28		plp		              PLP ; Pull the Carry out
.193615		e2 20		sep #$20	                SEP #$20        ; set A short
.193617		b0 08		bcs $193621	              BCS OPL2_Set_MaintainSustain_Set;
.193619		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19361b		29 df		and #$df	              AND #$DF
.19361d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19361f		80 06		bra $193627	              BRA OPL2_Set_MaintainSustain_Exit
.193621						OPL2_Set_MaintainSustain_Set
.193621		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193623		09 20		ora #$20	              ORA #$20
.193625		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193627						OPL2_Set_MaintainSustain_Exit
.193627		6b		rtl		                RTL
.193628						OPL2_GET_MAINTAINSUSTAIN
.193628		48		pha		                PHA             ; begin setdp macro
.193629		08		php		                PHP
.19362a		c2 20		rep #$20	                REP #$20        ; set A long
.19362c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19362f		5b		tcd		                TCD
.193630		28		plp		                PLP
.193631		68		pla		                PLA             ; end setdp macro
.193632		c2 20		rep #$20	                REP #$20        ; set A long
.193634		a9 20 00	lda #$0020	              LDA #$0020;
.193637		85 28		sta $28		              STA OPL2_REG_REGION
.193639		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.19363c		e2 20		sep #$20	                SEP #$20        ; set A short
.19363e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193640		29 20		and #$20	              AND #$20
.193642		6b		rtl		                RTL
.193643						OPL2_SET_ENVELOPESCALING
.193643		48		pha		                PHA             ; begin setdp macro
.193644		08		php		                PHP
.193645		c2 20		rep #$20	                REP #$20        ; set A long
.193647		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19364a		5b		tcd		                TCD
.19364b		28		plp		                PLP
.19364c		68		pla		                PLA             ; end setdp macro
.19364d		08		php		              PHP ; Push the Carry
.19364e		c2 20		rep #$20	                REP #$20        ; set A long
.193650		18		clc		              CLC
.193651		a9 20 00	lda #$0020	              LDA #$0020;
.193654		85 28		sta $28		              STA OPL2_REG_REGION
.193656		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.193659		28		plp		              PLP ; Pull the Carry out
.19365a		e2 20		sep #$20	                SEP #$20        ; set A short
.19365c		b0 08		bcs $193666	              BCS OPL2_Set_EnvelopeScaling_Set;
.19365e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193660		29 ef		and #$ef	              AND #$EF
.193662		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193664		80 06		bra $19366c	              BRA OPL2_Set_EnvelopeScaling_Exit
.193666						OPL2_Set_EnvelopeScaling_Set
.193666		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193668		09 10		ora #$10	              ORA #$10
.19366a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19366c						OPL2_Set_EnvelopeScaling_Exit
.19366c		6b		rtl		                RTL
.19366d						OPL2_GET_ENVELOPESCALING
.19366d		48		pha		                PHA             ; begin setdp macro
.19366e		08		php		                PHP
.19366f		c2 20		rep #$20	                REP #$20        ; set A long
.193671		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193674		5b		tcd		                TCD
.193675		28		plp		                PLP
.193676		68		pla		                PLA             ; end setdp macro
.193677		c2 20		rep #$20	                REP #$20        ; set A long
.193679		a9 20 00	lda #$0020	              LDA #$0020;
.19367c		85 28		sta $28		              STA OPL2_REG_REGION
.19367e		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.193681		e2 20		sep #$20	                SEP #$20        ; set A short
.193683		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193685		29 10		and #$10	              AND #$10
.193687		6b		rtl		                RTL
.193688						OPL2_GET_MODFREQMULTIPLE
.193688		48		pha		                PHA             ; begin setdp macro
.193689		08		php		                PHP
.19368a		c2 20		rep #$20	                REP #$20        ; set A long
.19368c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19368f		5b		tcd		                TCD
.193690		28		plp		                PLP
.193691		68		pla		                PLA             ; end setdp macro
.193692		c2 20		rep #$20	                REP #$20        ; set A long
.193694		a9 20 00	lda #$0020	              LDA #$0020;
.193697		85 28		sta $28		              STA OPL2_REG_REGION
.193699		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.19369c		e2 20		sep #$20	                SEP #$20        ; set A short
.19369e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1936a0		29 0f		and #$0f	              AND #$0F
.1936a2		6b		rtl		              RTL
.1936a3						OPL2_SET_MODFREQMULTIPLE
.1936a3		48		pha		                PHA             ; begin setdp macro
.1936a4		08		php		                PHP
.1936a5		c2 20		rep #$20	                REP #$20        ; set A long
.1936a7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936aa		5b		tcd		                TCD
.1936ab		28		plp		                PLP
.1936ac		68		pla		                PLA             ; end setdp macro
.1936ad		c2 20		rep #$20	                REP #$20        ; set A long
.1936af		a9 20 00	lda #$0020	                LDA #$0020;
.1936b2		85 28		sta $28		                STA OPL2_REG_REGION
.1936b4		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.1936b7		e2 20		sep #$20	                SEP #$20        ; set A short
.1936b9		a5 32		lda $32		                LDA OPL2_PARAMETER0
.1936bb		29 0f		and #$0f	                AND #$0F
.1936bd		85 32		sta $32		                STA OPL2_PARAMETER0
.1936bf		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936c1		29 f0		and #$f0	                AND #$F0
.1936c3		05 32		ora $32		                ORA OPL2_PARAMETER0
.1936c5		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1936c7		6b		rtl		                RTL
.1936c8						OPL2_SET_SCALINGLEVEL
.1936c8		48		pha		                PHA             ; begin setdp macro
.1936c9		08		php		                PHP
.1936ca		c2 20		rep #$20	                REP #$20        ; set A long
.1936cc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936cf		5b		tcd		                TCD
.1936d0		28		plp		                PLP
.1936d1		68		pla		                PLA             ; end setdp macro
.1936d2		c2 20		rep #$20	                REP #$20        ; set A long
.1936d4		a9 40 00	lda #$0040	                LDA #$0040;
.1936d7		85 28		sta $28		                STA OPL2_REG_REGION
.1936d9		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.1936dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1936de		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1936e0		29 03		and #$03	                AND #$03
.1936e2		0a		asl a		                ASL
.1936e3		0a		asl a		                ASL
.1936e4		0a		asl a		                ASL
.1936e5		0a		asl a		                ASL
.1936e6		0a		asl a		                ASL
.1936e7		0a		asl a		                ASL
.1936e8		85 32		sta $32		                STA OPL2_PARAMETER0
.1936ea		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936ec		29 3f		and #$3f	                AND #$3F
.1936ee		05 32		ora $32		                ORA OPL2_PARAMETER0
.1936f0		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1936f2		6b		rtl		                RTL
.1936f3						OPL2_SET_VOLUME
.1936f3		48		pha		                PHA             ; begin setdp macro
.1936f4		08		php		                PHP
.1936f5		c2 20		rep #$20	                REP #$20        ; set A long
.1936f7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936fa		5b		tcd		                TCD
.1936fb		28		plp		                PLP
.1936fc		68		pla		                PLA             ; end setdp macro
.1936fd		c2 20		rep #$20	                REP #$20        ; set A long
.1936ff		a9 40 00	lda #$0040	                LDA #$0040  ;
.193702		85 28		sta $28		                STA OPL2_REG_REGION
.193704		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.193707		e2 20		sep #$20	                SEP #$20        ; set A short
.193709		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.19370b		29 3f		and #$3f	                AND #$3F
.19370d		85 32		sta $32		                STA OPL2_PARAMETER0
.19370f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193711		29 c0		and #$c0	                AND #$C0
.193713		05 32		ora $32		                ORA OPL2_PARAMETER0
.193715		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193717		6b		rtl		                RTL
.193718						OPL2_GET_VOLUME
.193718		48		pha		                PHA             ; begin setdp macro
.193719		08		php		                PHP
.19371a		c2 20		rep #$20	                REP #$20        ; set A long
.19371c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19371f		5b		tcd		                TCD
.193720		28		plp		                PLP
.193721		68		pla		                PLA             ; end setdp macro
.193722		c2 20		rep #$20	                REP #$20        ; set A long
.193724		a9 40 00	lda #$0040	                LDA #$0040  ;
.193727		85 28		sta $28		                STA OPL2_REG_REGION
.193729		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.19372c		e2 20		sep #$20	                SEP #$20        ; set A short
.19372e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193730		29 3f		and #$3f	                AND #$3F
.193732		6b		rtl		                RTL
.193733						OPL2_SET_ATTACK
.193733		48		pha		                PHA             ; begin setdp macro
.193734		08		php		                PHP
.193735		c2 20		rep #$20	                REP #$20        ; set A long
.193737		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19373a		5b		tcd		                TCD
.19373b		28		plp		                PLP
.19373c		68		pla		                PLA             ; end setdp macro
.19373d		c2 20		rep #$20	                REP #$20        ; set A long
.19373f		a9 60 00	lda #$0060	                LDA #$0060  ;
.193742		85 28		sta $28		                STA OPL2_REG_REGION
.193744		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.193747		e2 20		sep #$20	                SEP #$20        ; set A short
.193749		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.19374b		29 0f		and #$0f	                AND #$0F
.19374d		0a		asl a		                ASL
.19374e		0a		asl a		                ASL
.19374f		0a		asl a		                ASL
.193750		0a		asl a		                ASL
.193751		85 32		sta $32		                STA OPL2_PARAMETER0
.193753		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193755		29 0f		and #$0f	                AND #$0F
.193757		05 32		ora $32		                ORA OPL2_PARAMETER0
.193759		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19375b		6b		rtl		                RTL
.19375c						OPL2_GET_ATTACK
.19375c		48		pha		                PHA             ; begin setdp macro
.19375d		08		php		                PHP
.19375e		c2 20		rep #$20	                REP #$20        ; set A long
.193760		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193763		5b		tcd		                TCD
.193764		28		plp		                PLP
.193765		68		pla		                PLA             ; end setdp macro
.193766		c2 20		rep #$20	                REP #$20        ; set A long
.193768		a9 60 00	lda #$0060	                LDA #$0060
.19376b		85 28		sta $28		                STA OPL2_REG_REGION
.19376d		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.193770		e2 20		sep #$20	                SEP #$20        ; set A short
.193772		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193774		29 f0		and #$f0	                AND #$F0
.193776		4a		lsr a		                LSR
.193777		4a		lsr a		                LSR
.193778		4a		lsr a		                LSR
.193779		4a		lsr a		                LSR
.19377a		6b		rtl		                RTL
.19377b						OPL2_SET_DECAY
.19377b		48		pha		                PHA             ; begin setdp macro
.19377c		08		php		                PHP
.19377d		c2 20		rep #$20	                REP #$20        ; set A long
.19377f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193782		5b		tcd		                TCD
.193783		28		plp		                PLP
.193784		68		pla		                PLA             ; end setdp macro
.193785		c2 20		rep #$20	                REP #$20        ; set A long
.193787		a9 60 00	lda #$0060	                LDA #$0060;
.19378a		85 28		sta $28		                STA OPL2_REG_REGION
.19378c		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.19378f		e2 20		sep #$20	                SEP #$20        ; set A short
.193791		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193793		29 0f		and #$0f	                AND #$0F
.193795		85 32		sta $32		                STA OPL2_PARAMETER0
.193797		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193799		29 f0		and #$f0	                AND #$F0
.19379b		05 32		ora $32		                ORA OPL2_PARAMETER0
.19379d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19379f		6b		rtl		                RTL
.1937a0						OPL2_GET_DECAY
.1937a0		48		pha		                PHA             ; begin setdp macro
.1937a1		08		php		                PHP
.1937a2		c2 20		rep #$20	                REP #$20        ; set A long
.1937a4		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937a7		5b		tcd		                TCD
.1937a8		28		plp		                PLP
.1937a9		68		pla		                PLA             ; end setdp macro
.1937aa		c2 20		rep #$20	                REP #$20        ; set A long
.1937ac		a9 60 00	lda #$0060	                LDA #$0060
.1937af		85 28		sta $28		                STA OPL2_REG_REGION
.1937b1		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.1937b4		e2 20		sep #$20	                SEP #$20        ; set A short
.1937b6		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937b8		29 0f		and #$0f	                AND #$0F
.1937ba		6b		rtl		                RTL
.1937bb						OPL2_SET_SUSTAIN
.1937bb		48		pha		                PHA             ; begin setdp macro
.1937bc		08		php		                PHP
.1937bd		c2 20		rep #$20	                REP #$20        ; set A long
.1937bf		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937c2		5b		tcd		                TCD
.1937c3		28		plp		                PLP
.1937c4		68		pla		                PLA             ; end setdp macro
.1937c5		c2 20		rep #$20	                REP #$20        ; set A long
.1937c7		a9 80 00	lda #$0080	                LDA #$0080;
.1937ca		85 28		sta $28		                STA OPL2_REG_REGION
.1937cc		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.1937cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1937d1		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1937d3		29 0f		and #$0f	                AND #$0F
.1937d5		0a		asl a		                ASL
.1937d6		0a		asl a		                ASL
.1937d7		0a		asl a		                ASL
.1937d8		0a		asl a		                ASL
.1937d9		85 32		sta $32		                STA OPL2_PARAMETER0
.1937db		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937dd		29 0f		and #$0f	                AND #$0F
.1937df		05 32		ora $32		                ORA OPL2_PARAMETER0
.1937e1		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1937e3		6b		rtl		                RTL
.1937e4						OPL2_GET_SUSTAIN
.1937e4		48		pha		                PHA             ; begin setdp macro
.1937e5		08		php		                PHP
.1937e6		c2 20		rep #$20	                REP #$20        ; set A long
.1937e8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937eb		5b		tcd		                TCD
.1937ec		28		plp		                PLP
.1937ed		68		pla		                PLA             ; end setdp macro
.1937ee		c2 20		rep #$20	                REP #$20        ; set A long
.1937f0		a9 80 00	lda #$0080	                LDA #$0080
.1937f3		85 28		sta $28		                STA OPL2_REG_REGION
.1937f5		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.1937f8		e2 20		sep #$20	                SEP #$20        ; set A short
.1937fa		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937fc		29 f0		and #$f0	                AND #$F0
.1937fe		4a		lsr a		                LSR
.1937ff		4a		lsr a		                LSR
.193800		4a		lsr a		                LSR
.193801		4a		lsr a		                LSR
.193802		6b		rtl		                RTL
.193803						OPL2_SET_RELEASE
.193803		48		pha		                PHA             ; begin setdp macro
.193804		08		php		                PHP
.193805		c2 20		rep #$20	                REP #$20        ; set A long
.193807		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19380a		5b		tcd		                TCD
.19380b		28		plp		                PLP
.19380c		68		pla		                PLA             ; end setdp macro
.19380d		c2 20		rep #$20	                REP #$20        ; set A long
.19380f		a9 80 00	lda #$0080	                LDA #$0080;
.193812		85 28		sta $28		                STA OPL2_REG_REGION
.193814		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.193817		e2 20		sep #$20	                SEP #$20        ; set A short
.193819		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.19381b		29 0f		and #$0f	                AND #$0F
.19381d		85 32		sta $32		                STA OPL2_PARAMETER0
.19381f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193821		29 f0		and #$f0	                AND #$F0
.193823		05 32		ora $32		                ORA OPL2_PARAMETER0
.193825		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193827		6b		rtl		                RTL
.193828						OPL2_GET_RELEASE
.193828		48		pha		                PHA             ; begin setdp macro
.193829		08		php		                PHP
.19382a		c2 20		rep #$20	                REP #$20        ; set A long
.19382c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19382f		5b		tcd		                TCD
.193830		28		plp		                PLP
.193831		68		pla		                PLA             ; end setdp macro
.193832		c2 20		rep #$20	                REP #$20        ; set A long
.193834		a9 80 00	lda #$0080	                LDA #$0080
.193837		85 28		sta $28		                STA OPL2_REG_REGION
.193839		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.19383c		e2 20		sep #$20	                SEP #$20        ; set A short
.19383e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193840		29 0f		and #$0f	                AND #$0F
.193842		6b		rtl		                RTL
.193843						OPL2_SET_FNUMBER
.193843		48		pha		                PHA             ; begin setdp macro
.193844		08		php		                PHP
.193845		c2 20		rep #$20	                REP #$20        ; set A long
.193847		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19384a		5b		tcd		                TCD
.19384b		28		plp		                PLP
.19384c		68		pla		                PLA             ; end setdp macro
.19384d		e2 20		sep #$20	                SEP #$20        ; set A short
.19384f		18		clc		                CLC
.193850		a5 27		lda $27		                LDA OPL2_CHANNEL
.193852		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193854		69 a0		adc #$a0	                ADC #$A0
.193856		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193858		a9 00		lda #$00	                LDA #$00
.19385a		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.19385c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19385e		18		clc		                CLC
.19385f		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193862		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193864		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193866		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193869		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.19386b		e2 20		sep #$20	                SEP #$20        ; set A short
.19386d		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.19386f		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.193871		18		clc		                CLC
.193872		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.193874		69 10		adc #$10	                ADC #$10
.193876		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193878		a5 33		lda $33		                LDA OPL2_PARAMETER1
.19387a		29 03		and #$03	                AND #$03
.19387c		85 33		sta $33		                STA OPL2_PARAMETER1
.19387e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193880		29 fc		and #$fc	                AND #$FC
.193882		05 33		ora $33		                ORA OPL2_PARAMETER1
.193884		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193886		6b		rtl		                RTL
.193887						OPL2_GET_FNUMBER
.193887		48		pha		                PHA             ; begin setdp macro
.193888		08		php		                PHP
.193889		c2 20		rep #$20	                REP #$20        ; set A long
.19388b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19388e		5b		tcd		                TCD
.19388f		28		plp		                PLP
.193890		68		pla		                PLA             ; end setdp macro
.193891		e2 20		sep #$20	                SEP #$20        ; set A short
.193893		18		clc		                CLC
.193894		a5 27		lda $27		                LDA OPL2_CHANNEL
.193896		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193898		69 a0		adc #$a0	                ADC #$A0
.19389a		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.19389c		a9 00		lda #$00	                LDA #$00
.19389e		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1938a0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1938a2		18		clc		                CLC
.1938a3		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.1938a6		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.1938a8		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1938aa		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.1938ad		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1938af		e2 20		sep #$20	                SEP #$20        ; set A short
.1938b1		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938b3		85 32		sta $32		                STA OPL2_PARAMETER0
.1938b5		18		clc		                CLC
.1938b6		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.1938b8		69 10		adc #$10	                ADC #$10
.1938ba		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1938bc		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938be		29 03		and #$03	                AND #$03
.1938c0		85 33		sta $33		                STA OPL2_PARAMETER1
.1938c2		6b		rtl		                RTL
.1938c3						OPL2_Set_Frequency
.1938c3		6b		rtl		                RTL
.1938c4						OPL2_Get_Frequency
.1938c4		6b		rtl		                RTL
.1938c5						OPL2_SET_BLOCK
.1938c5		48		pha		                PHA             ; begin setdp macro
.1938c6		08		php		                PHP
.1938c7		c2 20		rep #$20	                REP #$20        ; set A long
.1938c9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1938cc		5b		tcd		                TCD
.1938cd		28		plp		                PLP
.1938ce		68		pla		                PLA             ; end setdp macro
.1938cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1938d1		18		clc		                CLC
.1938d2		a5 27		lda $27		                LDA OPL2_CHANNEL
.1938d4		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.1938d6		69 b0		adc #$b0	                ADC #$B0
.1938d8		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1938da		a9 00		lda #$00	                LDA #$00
.1938dc		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1938de		c2 30		rep #$30	                REP #$30        ; set A&X long
.1938e0		18		clc		                CLC
.1938e1		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.1938e4		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.1938e6		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1938e8		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.1938eb		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1938ed		e2 20		sep #$20	                SEP #$20        ; set A short
.1938ef		a5 31		lda $31		                LDA OPL2_OCTAVE
.1938f1		29 07		and #$07	                AND #$07
.1938f3		0a		asl a		                ASL
.1938f4		0a		asl a		                ASL
.1938f5		85 31		sta $31		                STA OPL2_OCTAVE
.1938f7		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938f9		29 e3		and #$e3	                AND #$E3
.1938fb		05 31		ora $31		                ORA OPL2_OCTAVE
.1938fd		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1938ff		60		rts		                RTS
.193900						OPL2_SET_KEYON
.193900		48		pha		                PHA             ; begin setdp macro
.193901		08		php		                PHP
.193902		c2 20		rep #$20	                REP #$20        ; set A long
.193904		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193907		5b		tcd		                TCD
.193908		28		plp		                PLP
.193909		68		pla		                PLA             ; end setdp macro
.19390a		e2 20		sep #$20	                SEP #$20        ; set A short
.19390c		18		clc		                CLC
.19390d		a5 27		lda $27		                LDA OPL2_CHANNEL
.19390f		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193911		69 b0		adc #$b0	                ADC #$B0
.193913		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193915		a9 00		lda #$00	                LDA #$00
.193917		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193919		c2 30		rep #$30	                REP #$30        ; set A&X long
.19391b		18		clc		                CLC
.19391c		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.19391f		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193921		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193923		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193926		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193928		e2 20		sep #$20	                SEP #$20        ; set A short
.19392a		a5 32		lda $32		                LDA OPL2_PARAMETER0
.19392c		29 01		and #$01	                AND #$01
.19392e		f0 02		beq $193932	                BEQ SET_KEYON_OFF
.193930		a9 20		lda #$20	                LDA #$20
.193932						    SET_KEYON_OFF
.193932		85 32		sta $32		                STA OPL2_PARAMETER0
.193934		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193936		29 df		and #$df	                AND #$DF
.193938		05 32		ora $32		                ORA OPL2_PARAMETER0
.19393a		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19393c		60		rts		                RTS
.19393d						OPL2_SET_FEEDBACK
.19393d		48		pha		                PHA             ; begin setdp macro
.19393e		08		php		                PHP
.19393f		c2 20		rep #$20	                REP #$20        ; set A long
.193941		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193944		5b		tcd		                TCD
.193945		28		plp		                PLP
.193946		68		pla		                PLA             ; end setdp macro
.193947		e2 20		sep #$20	                SEP #$20        ; set A short
.193949		18		clc		              CLC
.19394a		a5 27		lda $27		              LDA OPL2_CHANNEL
.19394c		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19394e		69 c0		adc #$c0	              ADC #$C0
.193950		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193952		a9 00		lda #$00	              LDA #$00
.193954		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193956		c2 30		rep #$30	                REP #$30        ; set A&X long
.193958		18		clc		              CLC
.193959		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19395c		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19395e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193960		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193963		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193965		e2 20		sep #$20	                SEP #$20        ; set A short
.193967		a5 32		lda $32		              LDA OPL2_PARAMETER0
.193969		29 07		and #$07	              AND #$07
.19396b		0a		asl a		              ASL
.19396c		85 32		sta $32		              STA OPL2_PARAMETER0
.19396e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193970		29 01		and #$01	              AND #$01
.193972		05 32		ora $32		              ORA OPL2_PARAMETER0
.193974		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193976		6b		rtl		                RTL
.193977						OPL2_SET_SYNTHMODE
.193977		48		pha		                PHA             ; begin setdp macro
.193978		08		php		                PHP
.193979		c2 20		rep #$20	                REP #$20        ; set A long
.19397b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19397e		5b		tcd		                TCD
.19397f		28		plp		                PLP
.193980		68		pla		                PLA             ; end setdp macro
.193981		08		php		              PHP ; Push the Carry
.193982		e2 20		sep #$20	                SEP #$20        ; set A short
.193984		18		clc		              CLC
.193985		a5 27		lda $27		              LDA OPL2_CHANNEL
.193987		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193989		69 c0		adc #$c0	              ADC #$C0
.19398b		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.19398d		a9 00		lda #$00	              LDA #$00
.19398f		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193991		c2 30		rep #$30	                REP #$30        ; set A&X long
.193993		18		clc		              CLC
.193994		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193997		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193999		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19399b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19399e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1939a0		28		plp		              PLP ; Pull the Carry out
.1939a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1939a3		b0 08		bcs $1939ad	              BCS OPL2_Set_Synthmode_Set;
.1939a5		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939a7		29 fe		and #$fe	              AND #$FE
.1939a9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939ab		80 06		bra $1939b3	              BRA OPL2_Set_Synthmode_Exit
.1939ad						OPL2_Set_Synthmode_Set
.1939ad		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939af		09 01		ora #$01	              ORA #$01
.1939b1		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939b3						OPL2_Set_Synthmode_Exit
.1939b3		6b		rtl		                RTL
.1939b4						OPL2_SET_DEEPTREMOLO
.1939b4		48		pha		                PHA             ; begin setdp macro
.1939b5		08		php		                PHP
.1939b6		c2 20		rep #$20	                REP #$20        ; set A long
.1939b8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939bb		5b		tcd		                TCD
.1939bc		28		plp		                PLP
.1939bd		68		pla		                PLA             ; end setdp macro
.1939be		c2 20		rep #$20	                REP #$20        ; set A long
.1939c0		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.1939c3		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1939c5		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1939c8		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1939ca		e2 20		sep #$20	                SEP #$20        ; set A short
.1939cc		b0 08		bcs $1939d6	              BCS OPL2_Set_DeepTremolo_Set;
.1939ce		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939d0		29 7f		and #$7f	              AND #$7F
.1939d2		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939d4		80 06		bra $1939dc	              BRA OPL2_Set_DeepTremolo_Exit
.1939d6						OPL2_Set_DeepTremolo_Set
.1939d6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939d8		09 80		ora #$80	              ORA #$80
.1939da		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939dc						OPL2_Set_DeepTremolo_Exit
.1939dc		6b		rtl		                RTL
.1939dd						OPL2_SET_DEEPVIBRATO
.1939dd		48		pha		                PHA             ; begin setdp macro
.1939de		08		php		                PHP
.1939df		c2 20		rep #$20	                REP #$20        ; set A long
.1939e1		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939e4		5b		tcd		                TCD
.1939e5		28		plp		                PLP
.1939e6		68		pla		                PLA             ; end setdp macro
.1939e7		c2 20		rep #$20	                REP #$20        ; set A long
.1939e9		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.1939ec		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1939ee		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1939f1		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1939f3		e2 20		sep #$20	                SEP #$20        ; set A short
.1939f5		b0 08		bcs $1939ff	              BCS OPL2_Set_DeepVibrato_Set;
.1939f7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939f9		29 bf		and #$bf	              AND #$BF
.1939fb		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939fd		80 06		bra $193a05	              BRA OPL2_Set_DeepVibrato_Exit
.1939ff						OPL2_Set_DeepVibrato_Set
.1939ff		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193a01		09 40		ora #$40	              ORA #$40
.193a03		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193a05						OPL2_Set_DeepVibrato_Exit
.193a05		6b		rtl		                RTL
.193a06						OPL2_SET_PERCUSSION
.193a06		48		pha		                PHA             ; begin setdp macro
.193a07		08		php		                PHP
.193a08		c2 20		rep #$20	                REP #$20        ; set A long
.193a0a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a0d		5b		tcd		                TCD
.193a0e		28		plp		                PLP
.193a0f		68		pla		                PLA             ; end setdp macro
.193a10		c2 20		rep #$20	                REP #$20        ; set A long
.193a12		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.193a15		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193a17		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193a1a		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193a1c		e2 20		sep #$20	                SEP #$20        ; set A short
.193a1e		b0 08		bcs $193a28	                BCS OPL2_Set_Percussion_Set;
.193a20		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a22		29 df		and #$df	                AND #$DF
.193a24		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a26		80 06		bra $193a2e	                BRA OPL2_Set_Percussion_Exit
.193a28						OPL2_Set_Percussion_Set
.193a28		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a2a		09 20		ora #$20	                ORA #$20
.193a2c		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a2e						OPL2_Set_Percussion_Exit
.193a2e		6b		rtl		                RTL
.193a2f						OPL2_SET_DRUMS
.193a2f		48		pha		                PHA             ; begin setdp macro
.193a30		08		php		                PHP
.193a31		c2 20		rep #$20	                REP #$20        ; set A long
.193a33		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a36		5b		tcd		                TCD
.193a37		28		plp		                PLP
.193a38		68		pla		                PLA             ; end setdp macro
.193a39		c2 20		rep #$20	                REP #$20        ; set A long
.193a3b		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.193a3e		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193a40		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193a43		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193a45		e2 20		sep #$20	                SEP #$20        ; set A short
.193a47		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193a49		29 1f		and #$1f	                AND #$1F
.193a4b		85 32		sta $32		                STA OPL2_PARAMETER0
.193a4d		49 ff		eor #$ff	                EOR #$FF
.193a4f		85 33		sta $33		                STA OPL2_PARAMETER1
.193a51		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a53		25 33		and $33		                AND OPL2_PARAMETER1
.193a55		05 32		ora $32		                ORA OPL2_PARAMETER0
.193a57		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a59		6b		rtl		                RTL
.193a5a						OPL2_SET_WAVEFORM
.193a5a		48		pha		                PHA             ; begin setdp macro
.193a5b		08		php		                PHP
.193a5c		c2 20		rep #$20	                REP #$20        ; set A long
.193a5e		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a61		5b		tcd		                TCD
.193a62		28		plp		                PLP
.193a63		68		pla		                PLA             ; end setdp macro
.193a64		c2 20		rep #$20	                REP #$20        ; set A long
.193a66		a9 e0 00	lda #$00e0	                LDA #$00E0;
.193a69		85 28		sta $28		                STA OPL2_REG_REGION
.193a6b		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.193a6e		e2 20		sep #$20	                SEP #$20        ; set A short
.193a70		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193a72		29 03		and #$03	                AND #$03
.193a74		85 32		sta $32		                STA OPL2_PARAMETER0
.193a76		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a78		29 fc		and #$fc	                AND #$FC
.193a7a		05 32		ora $32		                ORA OPL2_PARAMETER0
.193a7c		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a7e		6b		rtl		                RTL
.193a7f						OPL2_GET_REG_OFFSET
.193a7f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.193a81		a5 27		lda $27		                LDA OPL2_CHANNEL
.193a83		29 0f		and #$0f	                AND #$0F
.193a85		aa		tax		                TAX
.193a86		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.193a88		d0 06		bne $193a90	                BNE OPL2_Get_Register_Offset_l0
.193a8a		bf c7 10 19	lda $1910c7,x	                LDA @lregisterOffsets_operator0, X
.193a8e		80 04		bra $193a94	                BRA OPL2_Get_Register_Offset_exit
.193a90						OPL2_Get_Register_Offset_l0
.193a90		bf d0 10 19	lda $1910d0,x	                LDA @lregisterOffsets_operator1, X
.193a94						OPL2_Get_Register_Offset_exit
.193a94		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193a96		a9 00		lda #$00	                LDA #$00
.193a98		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193a9a		c2 30		rep #$30	                REP #$30        ; set A&X long
.193a9c		18		clc		                CLC
.193a9d		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193aa0		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193aa2		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.193aa4		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193aa6		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193aa9		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193aab		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SDCard_Controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\SDOS.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.193aac						ITRACE
.193aac		08		php		                PHP
.193aad		c2 30		rep #$30	                REP #$30        ; set A&X long
.193aaf		8b		phb		                PHB                 ; Print the text
.193ab0		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.193ab2		aa		tax		                TAX                 ; ... into X
.193ab3		e2 20		sep #$20	                SEP #$20        ; set A short
.193ab5		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.193ab7		48		pha		                PHA
.193ab8		ab		plb		                PLB                 ; ... into B
.193ab9		22 0a 07 19	jsl $19070a	                JSL IPUTS           ; Print the string
.193abd		c2 20		rep #$20	                REP #$20        ; set A long
.193abf		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.193ac1		83 08		sta $08,s	                STA #8,S
.193ac3		a3 02		lda $02,s	                LDA #2,S
.193ac5		83 06		sta $06,s	                STA #6,S
.193ac7		ab		plb		                PLB
.193ac8		68		pla		                PLA                 ; Clean up the stack
.193ac9		68		pla		                PLA
.193aca		28		plp		                PLP
.193acb		6b		rtl		                RTL
.193acc						ISETTIMEOUT
.193acc		8b		phb		                PHB
.193acd		0b		phd		                PHD
.193ace		08		php		                PHP
.193acf		48		pha		                PHA             ; begin setdbr macro
.193ad0		08		php		                PHP
.193ad1		e2 20		sep #$20	                SEP #$20        ; set A short
.193ad3		a9 00		lda #$00	                LDA #0
.193ad5		48		pha		                PHA
.193ad6		ab		plb		                PLB
.193ad7		28		plp		                PLP
.193ad8		68		pla		                PLA             ; end setdbr macro
.193ad9		48		pha		                PHA             ; begin setdp macro
.193ada		08		php		                PHP
.193adb		c2 20		rep #$20	                REP #$20        ; set A long
.193add		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193ae0		5b		tcd		                TCD
.193ae1		28		plp		                PLP
.193ae2		68		pla		                PLA             ; end setdp macro
.193ae3		78		sei		                SEI                             ; We don't want to be interrupted
.193ae4		e2 20		sep #$20	                SEP #$20        ; set A short
.193ae6		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.193ae8		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.193aea		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.193aec		85 0c		sta $032c	                STA @b BIOS_FLAGS
.193aee		28		plp		done            PLP
.193aef		2b		pld		                PLD
.193af0		ab		plb		                PLB
.193af1		6b		rtl		                RTL
.193af2						ICMDBLOCK
.193af2		0b		phd		                PHD
.193af3		08		php		                PHP
.193af4		48		pha		                PHA             ; begin setdp macro
.193af5		08		php		                PHP
.193af6		c2 20		rep #$20	                REP #$20        ; set A long
.193af8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193afb		5b		tcd		                TCD
.193afc		28		plp		                PLP
.193afd		68		pla		                PLA             ; end setdp macro
.193afe		e2 20		sep #$20	                SEP #$20        ; set A short
.193b00		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.193b02		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.193b04		d0 06		bne $193b0c	                BNE ret_success             ; No: just return
.193b06		22 ed 63 19	jsl $1963ed	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.193b0a		90 0c		bcc $193b18	                BCC pass_failure
.193b0c						ret_success
.193b0c		e2 20		sep #$20	                SEP #$20        ; set A short
.193b0e		64 00		stz $0320	                STZ BIOS_STATUS
.193b10		28		plp		                PLP
.193b11		2b		pld		                PLD
.193b12		38		sec		                SEC
.193b13		6b		rtl		                RTL
.193b14						ret_failure
.193b14		e2 20		sep #$20	                SEP #$20        ; set A short
.193b16		85 00		sta $0320	                STA BIOS_STATUS
.193b18		28		plp		pass_failure    PLP
.193b19		2b		pld		                PLD
.193b1a		18		clc		                CLC
.193b1b		6b		rtl		                RTL
.193b1c						IGETBLOCK
.193b1c		5a		phy		                PHY
.193b1d		0b		phd		                PHD
.193b1e		8b		phb		                PHB
.193b1f		08		php		                PHP
.193b20		48		pha		                PHA             ; begin setdbr macro
.193b21		08		php		                PHP
.193b22		e2 20		sep #$20	                SEP #$20        ; set A short
.193b24		a9 00		lda #$00	                LDA #0
.193b26		48		pha		                PHA
.193b27		ab		plb		                PLB
.193b28		28		plp		                PLP
.193b29		68		pla		                PLA             ; end setdbr macro
.193b2a		48		pha		                PHA             ; begin setdp macro
.193b2b		08		php		                PHP
.193b2c		c2 20		rep #$20	                REP #$20        ; set A long
.193b2e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193b31		5b		tcd		                TCD
.193b32		28		plp		                PLP
.193b33		68		pla		                PLA             ; end setdp macro
.193b34		e2 20		sep #$20	                SEP #$20        ; set A short
.193b36		a0 00 00	ldy #$0000	                LDY #0
.193b39		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.193b3b		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.193b3d		c8		iny		                INY
.193b3e		c0 00 02	cpy #$0200	                CPY #512
.193b41		d0 f8		bne $193b3b	                BNE clr_loop
.193b43		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.193b45		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.193b47		f0 10		beq $193b59	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.193b49		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.193b4b		f0 14		beq $193b61	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.193b4d		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193b4f		f0 18		beq $193b69	                BEQ hd_getblock
.193b51		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.193b53		28		plp		ret_failure     PLP
.193b54		ab		plb		                PLB
.193b55		2b		pld		                PLD
.193b56		7a		ply		                PLY
.193b57		38		sec		                SEC                                 ; Return failure
.193b58		6b		rtl		                RTL
.193b59		22 03 59 19	jsl $195903	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.193b5d		b0 12		bcs $193b71	                BCS ret_success
.193b5f		80 f2		bra $193b53	                BRA ret_failure
.193b61		22 f2 61 19	jsl $1961f2	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.193b65		b0 0a		bcs $193b71	                BCS ret_success
.193b67		80 ea		bra $193b53	                BRA ret_failure
.193b69		22 ce 67 19	jsl $1967ce	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.193b6d		b0 02		bcs $193b71	                BCS ret_success
.193b6f		80 e2		bra $193b53	                BRA ret_failure
.193b71						ret_success
.193b71		e2 20		sep #$20	                SEP #$20        ; set A short
.193b73		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.193b75		28		plp		                PLP
.193b76		ab		plb		                PLB
.193b77		2b		pld		                PLD
.193b78		7a		ply		                PLY
.193b79		38		sec		                SEC                                 ; Return success
.193b7a		6b		rtl		                RTL
.193b7b						IPUTBLOCK
.193b7b		0b		phd		                PHD
.193b7c		8b		phb		                PHB
.193b7d		08		php		                PHP
.193b7e		48		pha		                PHA             ; begin setdbr macro
.193b7f		08		php		                PHP
.193b80		e2 20		sep #$20	                SEP #$20        ; set A short
.193b82		a9 00		lda #$00	                LDA #0
.193b84		48		pha		                PHA
.193b85		ab		plb		                PLB
.193b86		28		plp		                PLP
.193b87		68		pla		                PLA             ; end setdbr macro
.193b88		48		pha		                PHA             ; begin setdp macro
.193b89		08		php		                PHP
.193b8a		c2 20		rep #$20	                REP #$20        ; set A long
.193b8c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193b8f		5b		tcd		                TCD
.193b90		28		plp		                PLP
.193b91		68		pla		                PLA             ; end setdp macro
.193b92		e2 20		sep #$20	                SEP #$20        ; set A short
.193b94		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.193b96		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.193b98		f0 0f		beq $193ba9	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.193b9a		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.193b9c		f0 13		beq $193bb1	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.193b9e		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193ba0		f0 17		beq $193bb9	                BEQ hd_putblock
.193ba2		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.193ba4		28		plp		ret_failure     PLP
.193ba5		ab		plb		                PLB
.193ba6		2b		pld		                PLD
.193ba7		18		clc		                CLC                                 ; Return failure
.193ba8		6b		rtl		                RTL
.193ba9		22 a0 59 19	jsl $1959a0	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.193bad		90 f5		bcc $193ba4	                BCC ret_failure
.193baf		80 10		bra $193bc1	                BRA ret_success
.193bb1		22 57 62 19	jsl $196257	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.193bb5		90 ed		bcc $193ba4	                BCC ret_failure
.193bb7		80 08		bra $193bc1	                BRA ret_success
.193bb9		22 59 68 19	jsl $196859	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.193bbd		90 e5		bcc $193ba4	                BCC ret_failure
.193bbf		80 00		bra $193bc1	                BRA ret_success
.193bc1						ret_success
.193bc1		e2 20		sep #$20	                SEP #$20        ; set A short
.193bc3		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.193bc5		28		plp		                PLP
.193bc6		ab		plb		                PLB
.193bc7		2b		pld		                PLD
.193bc8		38		sec		                SEC                                 ; Return success
.193bc9		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.193bca						DOS_DIROPEN
.193bca		da		phx		                PHX
.193bcb		5a		phy		                PHY
.193bcc		0b		phd		                PHD
.193bcd		8b		phb		                PHB
.193bce		08		php		                PHP
.193bcf		48		pha		                PHA             ; begin setdbr macro
.193bd0		08		php		                PHP
.193bd1		e2 20		sep #$20	                SEP #$20        ; set A short
.193bd3		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193bd5		48		pha		                PHA
.193bd6		ab		plb		                PLB
.193bd7		28		plp		                PLP
.193bd8		68		pla		                PLA             ; end setdbr macro
.193bd9		48		pha		                PHA             ; begin setdp macro
.193bda		08		php		                PHP
.193bdb		c2 20		rep #$20	                REP #$20        ; set A long
.193bdd		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193be0		5b		tcd		                TCD
.193be1		28		plp		                PLP
.193be2		68		pla		                PLA             ; end setdp macro
.193be3		ad 20 a0	lda $18a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.193be6		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.193be9		ad 22 a0	lda $18a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.193bec		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193bef		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.193bf2		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193bf4		85 18		sta $0338	                STA DOS_DIR_PTR
.193bf6		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193bf9		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193bfb		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193bfd		e2 20		sep #$20	                SEP #$20        ; set A short
.193bff		ad 01 a0	lda $18a001	                LDA FILE_SYSTEM             ; Check the file system
.193c02		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.193c04		d0 24		bne $193c2a	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.193c06						fetch_fat12
.193c06		e2 20		sep #$20	                SEP #$20        ; set A short
.193c08		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.193c0a		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.193c0d		c2 20		rep #$20	                REP #$20        ; set A long
.193c0f		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.193c11		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193c13		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.193c15		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193c17		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.193c1a		85 02		sta $0322	                STA BIOS_LBA
.193c1c		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193c1f		85 04		sta $0324	                STA BIOS_LBA+2
.193c21		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.193c25		b0 1f		bcs $193c46	                BCS do_success              ; If sucessful, set the directory cursor
.193c27		82 84 18	brl $1954ae	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193c2a						fetch_fat32
.193c2a		e2 20		sep #$20	                SEP #$20        ; set A short
.193c2c		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.193c2e		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.193c31		c2 20		rep #$20	                REP #$20        ; set A long
.193c33		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.193c36		85 10		sta $0330	                STA DOS_CLUS_ID
.193c38		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193c3b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193c3d		22 ad 41 19	jsl $1941ad	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.193c41		b0 03		bcs $193c46	                BCS do_success              ; If successful: set the directory cursor
.193c43		82 68 18	brl $1954ae	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193c46		82 6c 18	brl $1954b5	do_success      BRL IF_SUCCESS
.193c49						DOS_DIRFIRST
.193c49		0b		phd		                PHD
.193c4a		08		php		                PHP
.193c4b		48		pha		                PHA             ; begin setdp macro
.193c4c		08		php		                PHP
.193c4d		c2 20		rep #$20	                REP #$20        ; set A long
.193c4f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193c52		5b		tcd		                TCD
.193c53		28		plp		                PLP
.193c54		68		pla		                PLA             ; end setdp macro
.193c55		c2 20		rep #$20	                REP #$20        ; set A long
.193c57		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.193c5a		85 18		sta $0338	                STA DOS_DIR_PTR
.193c5c		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193c5f		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193c61		28		plp		                PLP
.193c62		2b		pld		                PLD
.193c63		6b		rtl		                RTL
.193c64						DOS_DIRNEXT
.193c64		da		phx		                PHX
.193c65		5a		phy		                PHY
.193c66		0b		phd		                PHD
.193c67		8b		phb		                PHB
.193c68		08		php		                PHP
.193c69		48		pha		                PHA             ; begin setdbr macro
.193c6a		08		php		                PHP
.193c6b		e2 20		sep #$20	                SEP #$20        ; set A short
.193c6d		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193c6f		48		pha		                PHA
.193c70		ab		plb		                PLB
.193c71		28		plp		                PLP
.193c72		68		pla		                PLA             ; end setdbr macro
.193c73		48		pha		                PHA             ; begin setdp macro
.193c74		08		php		                PHP
.193c75		c2 20		rep #$20	                REP #$20        ; set A long
.193c77		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193c7a		5b		tcd		                TCD
.193c7b		28		plp		                PLP
.193c7c		68		pla		                PLA             ; end setdp macro
.193c7d		c2 20		rep #$20	                REP #$20        ; set A long
.193c7f		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.193c80		a5 18		lda $0338	                LDA DOS_DIR_PTR
.193c82		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.193c85		85 18		sta $0338	                STA DOS_DIR_PTR
.193c87		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.193c89		69 00 00	adc #$0000	                ADC #0
.193c8c		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193c8e		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.193c8f		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.193c92		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.193c94		85 28		sta $0348	                STA DOS_TEMP
.193c96		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER_END
.193c99		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.193c9b		85 2a		sta $034a	                STA DOS_TEMP+2
.193c9d		30 0c		bmi $193cab	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.193c9f		f0 03		beq $193ca4	                BEQ check_lower
.193ca1		82 11 18	brl $1954b5	                BRL IF_SUCCESS
.193ca4		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.193ca6		f0 03		beq $193cab	                BEQ get_next_block
.193ca8		82 0a 18	brl $1954b5	                BRL IF_SUCCESS
.193cab						get_next_block
.193cab		e2 20		sep #$20	                SEP #$20        ; set A short
.193cad		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.193cb0		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.193cb2		f0 38		beq $193cec	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.193cb4						next_sector
.193cb4		c2 20		rep #$20	                REP #$20        ; set A long
.193cb6		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.193cb9		1a		inc a		                INC A
.193cba		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.193cbd		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.193cc0		d0 07		bne $193cc9	                BNE read_sector
.193cc2		e2 20		sep #$20	                SEP #$20        ; set A short
.193cc4		a9 00		lda #$00	                LDA #0
.193cc6		82 e1 17	brl $1954aa	                BRL IF_FAILURE
.193cc9						read_sector
.193cc9		c2 20		rep #$20	                REP #$20        ; set A long
.193ccb		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.193cce		85 02		sta $0322	                STA BIOS_LBA
.193cd0		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193cd3		85 04		sta $0324	                STA BIOS_LBA+2
.193cd5		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.193cd8		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193cda		85 18		sta $0338	                STA DOS_DIR_PTR
.193cdc		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193cdf		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193ce1		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193ce3		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.193ce7		b0 39		bcs $193d22	                BCS do_success              ; If successful: set the directory cursor
.193ce9		82 c2 17	brl $1954ae	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193cec						next_cluster
.193cec		c2 20		rep #$20	                REP #$20        ; set A long
.193cee		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.193cf1		85 10		sta $0330	                STA DOS_CLUS_ID
.193cf3		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193cf6		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193cf8		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.193cfb		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193cfd		85 18		sta $0338	                STA DOS_DIR_PTR
.193cff		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193d02		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193d04		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193d06		22 c1 45 19	jsl $1945c1	                JSL NEXTCLUSTER             ; Try to find the next cluster
.193d0a		b0 03		bcs $193d0f	                BCS set_next
.193d0c		82 9f 17	brl $1954ae	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.193d0f		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.193d11		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.193d14		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.193d16		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193d19		22 ad 41 19	jsl $1941ad	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.193d1d		b0 03		bcs $193d22	                BCS do_success              ; If successful: set the directory cursor
.193d1f		82 8c 17	brl $1954ae	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193d22		82 90 17	brl $1954b5	do_success      BRL IF_SUCCESS
.193d25						DOS_DIRFINDFREE
.193d25		da		phx		                PHX
.193d26		5a		phy		                PHY
.193d27		0b		phd		                PHD
.193d28		8b		phb		                PHB
.193d29		08		php		                PHP
.193d2a		48		pha		                PHA             ; begin setdbr macro
.193d2b		08		php		                PHP
.193d2c		e2 20		sep #$20	                SEP #$20        ; set A short
.193d2e		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193d30		48		pha		                PHA
.193d31		ab		plb		                PLB
.193d32		28		plp		                PLP
.193d33		68		pla		                PLA             ; end setdbr macro
.193d34		48		pha		                PHA             ; begin setdp macro
.193d35		08		php		                PHP
.193d36		c2 20		rep #$20	                REP #$20        ; set A long
.193d38		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193d3b		5b		tcd		                TCD
.193d3c		28		plp		                PLP
.193d3d		68		pla		                PLA             ; end setdp macro
.193d3e		22 cc 4f 19	jsl $194fcc	                JSL IF_DIROPEN
.193d42		b0 06		bcs $193d4a	                BCS start_walk
.193d44		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.193d47		82 28 00	brl $193d72	                BRL ret_failure
.193d4a		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.193d4d						chk_entry
.193d4d		e2 20		sep #$20	                SEP #$20        ; set A short
.193d4f		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.193d51		f0 1c		beq $193d6f	                BEQ ret_success             ; If 0: we have a blank... return it
.193d53		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.193d55		f0 18		beq $193d6f	                BEQ ret_success             ; Yes: return it
.193d57		22 06 50 19	jsl $195006	                JSL IF_DIRNEXT              ; Go to the next directory entry
.193d5b		b0 ed		bcs $193d4a	                BCS start_walk              ; If we got one, start walking it
.193d5d		22 75 3d 19	jsl $193d75	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.193d61		90 0f		bcc $193d72	                BCC ret_failure             ; If that didn't work, return the failure
.193d63		c2 20		rep #$20	                REP #$20        ; set A long
.193d65		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.193d68		85 18		sta $0338	                STA DOS_DIR_PTR
.193d6a		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193d6d		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193d6f		82 43 17	brl $1954b5	ret_success     BRL IF_SUCCESS
.193d72		82 35 17	brl $1954aa	ret_failure     BRL IF_FAILURE
.193d75						DOS_DIRAPPEND
.193d75		da		phx		                PHX
.193d76		8b		phb		                PHB
.193d77		0b		phd		                PHD
.193d78		08		php		                PHP
.193d79		48		pha		                PHA             ; begin setdbr macro
.193d7a		08		php		                PHP
.193d7b		e2 20		sep #$20	                SEP #$20        ; set A short
.193d7d		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193d7f		48		pha		                PHA
.193d80		ab		plb		                PLB
.193d81		28		plp		                PLP
.193d82		68		pla		                PLA             ; end setdbr macro
.193d83		48		pha		                PHA             ; begin setdp macro
.193d84		08		php		                PHP
.193d85		c2 20		rep #$20	                REP #$20        ; set A long
.193d87		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193d8a		5b		tcd		                TCD
.193d8b		28		plp		                PLP
.193d8c		68		pla		                PLA             ; end setdp macro
.193d8d		e2 20		sep #$20	                SEP #$20        ; set A short
.193d8f		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE
.193d92		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.193d94		f0 09		beq $193d9f	                BEQ clr_sector                  ; Yes: clear out the directory data
.193d96						ret_failure
.193d96		e2 20		sep #$20	                SEP #$20        ; set A short
.193d98		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.193d9a		85 0e		sta $032e	                STA DOS_STATUS
.193d9c		82 3e 00	brl $193ddd	                BRL pass_failure
.193d9f						clr_sector
.193d9f		c2 20		rep #$20	                REP #$20        ; set A long
.193da1		a9 00 00	lda #$0000	                LDA #0
.193da4		a2 00 00	ldx #$0000	                LDX #0
.193da7		9d 00 a1	sta $18a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.193daa		e8		inx		                INX
.193dab		e8		inx		                INX
.193dac		e0 00 02	cpx #$0200	                CPX #512
.193daf		d0 f6		bne $193da7	                BNE clr_loop
.193db1		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.193db4		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193db6		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193db9		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193dbb		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.193dbe		85 10		sta $0330	                STA DOS_CLUS_ID
.193dc0		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193dc3		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193dc5		22 e2 49 19	jsl $1949e2	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.193dc9		90 12		bcc $193ddd	                BCC pass_failure                ; If there was an error, pass it up the chain
.193dcb		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.193dce		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.193dd1		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.193dd4		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193dd7		28		plp		ret_success     PLP
.193dd8		2b		pld		                PLD
.193dd9		ab		plb		                PLB
.193dda		fa		plx		                PLX
.193ddb		38		sec		                SEC
.193ddc		6b		rtl		                RTL
.193ddd		28		plp		pass_failure    PLP
.193dde		2b		pld		                PLD
.193ddf		ab		plb		                PLB
.193de0		fa		plx		                PLX
.193de1		18		clc		                CLC
.193de2		6b		rtl		                RTL
.193de3						DOS_DIRWRITE
.193de3		da		phx		                PHX
.193de4		5a		phy		                PHY
.193de5		0b		phd		                PHD
.193de6		8b		phb		                PHB
.193de7		08		php		                PHP
.193de8		48		pha		                PHA             ; begin setdbr macro
.193de9		08		php		                PHP
.193dea		e2 20		sep #$20	                SEP #$20        ; set A short
.193dec		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193dee		48		pha		                PHA
.193def		ab		plb		                PLB
.193df0		28		plp		                PLP
.193df1		68		pla		                PLA             ; end setdbr macro
.193df2		48		pha		                PHA             ; begin setdp macro
.193df3		08		php		                PHP
.193df4		c2 20		rep #$20	                REP #$20        ; set A long
.193df6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193df9		5b		tcd		                TCD
.193dfa		28		plp		                PLP
.193dfb		68		pla		                PLA             ; end setdp macro
.193dfc		e2 20		sep #$20	                SEP #$20        ; set A short
.193dfe		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.193e01		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.193e03		f0 1f		beq $193e24	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.193e05						write_sector
.193e05		c2 20		rep #$20	                REP #$20        ; set A long
.193e07		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.193e0a		85 02		sta $0322	                STA BIOS_LBA
.193e0c		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193e0f		85 04		sta $0324	                STA BIOS_LBA+2
.193e11		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.193e14		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193e16		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193e19		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193e1b		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.193e1f		b0 1f		bcs $193e40	                BCS ret_success
.193e21		82 86 16	brl $1954aa	ret_failure     BRL IF_FAILURE
.193e24						write_cluster
.193e24		c2 20		rep #$20	                REP #$20        ; set A long
.193e26		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.193e29		85 10		sta $0330	                STA DOS_CLUS_ID
.193e2b		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193e2e		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193e30		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.193e33		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193e35		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193e38		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193e3a		22 ea 41 19	jsl $1941ea	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.193e3e		90 e1		bcc $193e21	                BCC ret_failure
.193e40		82 72 16	brl $1954b5	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=24						DOS_ERR_EOF = 24                        ; At end of file
=25						DOS_ERR_PGZSIG = 25                     ; File does not have the PGZ signature
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\Includes/sdos_fat_vars_user_inc.asm

=$18a000					    DOS_HIGH_VARIABLES      = $18A000
=$18a000					    DEVICE                  = $18A000       ; 1 byte - The number of the block device
=$18a001					    FILE_SYSTEM             = $18A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$18a002					    PARTITION               = $18A002       ; 1 byte - The number of the partitions on the device
=$18a003					    SECTORS_PER_CLUSTER     = $18A003       ; 1 byte - The number of sectors in a cluster
=$18a004					    FIRSTSECTOR             = $18A004       ; 4 bytes - The LBA of the first sector on the volume
=$18a008					    SECTORCOUNT             = $18A008       ; 4 bytes - The number of sectors in the volume
=$18a00c					    NUM_RSRV_SEC            = $18A00C       ; 2 bytes - The number of hidden or reserved sectors
=$18a00e					    CLUSTER_SIZE            = $18A00E       ; 2 bytes - The size of a cluster in bytes
=$18a010					    SEC_PER_FAT             = $18A010       ; 4 bytes - The number of sectors per FAT
=$18a014					    FAT_BEGIN_LBA           = $18A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$18a018					    FAT2_BEGIN_LBA          = $18A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$18a01c					    CLUSTER_BEGIN_LBA       = $18A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$18a020					    ROOT_DIR_FIRST_CLUSTER  = $18A020       ; 4 bytes - The number of the first cluster in the root directory
=$18a024					    ROOT_DIR_MAX_ENTRY      = $18A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$18a026					    VOLUME_ID               = $18A026       ; 4 bytes - The ID of the volume
=$18a02a					    DOS_CURR_CLUS           = $18A02A       ; 4 bytes - The current cluster (for delete)
=$18a02e					    DOS_NEXT_CLUS           = $18A02E       ; 4 bytes - The next cluster in a file (for delete)
=$18a032					    DOS_DIR_BLOCK_ID        = $18A032       ; 4 bytes - The ID of the current directory block
=$18a036					    DOS_NEW_CLUSTER         = $18A036       ; 4 bytes - Space to store a newly written cluster ID
=$18a03a					    DOS_SHORT_NAME          = $18A03A       ; 11 bytes - The short name for a desired file
=$18a045					    DOS_DIR_TYPE            = $18A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$18a046					    DOS_CURR_DIR_ID         = $18A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$18a04a					    DOS_DEV_NAMES           = $18A04A       ; 4 byte - pointer to the linked list of device names
=$18a04e					    FDC_MOTOR_TIMER         = $18A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$18a050					    DOS_MOUNT_DEV           = $18A050       ; 1 byte - the device code of the currently mounted device
=$18a100					    DOS_DIR_CLUSTER         = $18A100       ; 512 bytes - A buffer for directory entries
=$18a300					    DOS_DIR_CLUSTER_END     = $18A300       ; The byte just past the end of the directory cluster buffer
=$18a300					    DOS_SECTOR              = $18A300       ; 512 bytes - A buffer for block device read/write
=$18a500					    DOS_SECTOR_END          = $18A500       ; The byte just past the end of the cluster buffer
=$18a500					    DOS_FAT_SECTORS         = $18A500       ; 1024 bytes - two sectors worth of the FAT
=$18a900					    DOS_FAT_SECTORS_END     = $18A900       ; The byte just past the end of the FAT buffers
=$18a900					    DOS_BOOT_SECTOR         = $18A900       ; A sector for holding the boot sector
=$18ab00					    DOS_BOOT_SECTOR_END     = $18AB00
=$18ab00					    DOS_SPARE_SECTOR        = $18AB00       ; A spare 512 byte buffer for loading sectors
=$18ad00					    DOS_SPARE_SECTOR_END    = $18AD00
=$18ad00					    DOS_SPARE_FD            = $18AD00       ; A spare file descriptor buffer
=1617184					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=1617184					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=1617440					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$18b000					    DOS_FILE_BUFFS          = $18B000
=1622016					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.193e43						DOS_INIT
.193e43		8b		phb		                PHB
.193e44		0b		phd		                PHD
.193e45		08		php		                PHP
.193e46		48		pha		                PHA             ; begin setdbr macro
.193e47		08		php		                PHP
.193e48		e2 20		sep #$20	                SEP #$20        ; set A short
.193e4a		a9 00		lda #$00	                LDA #0
.193e4c		48		pha		                PHA
.193e4d		ab		plb		                PLB
.193e4e		28		plp		                PLP
.193e4f		68		pla		                PLA             ; end setdbr macro
.193e50		48		pha		                PHA             ; begin setdp macro
.193e51		08		php		                PHP
.193e52		c2 20		rep #$20	                REP #$20        ; set A long
.193e54		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193e57		5b		tcd		                TCD
.193e58		28		plp		                PLP
.193e59		68		pla		                PLA             ; end setdp macro
.193e5a		e2 20		sep #$20	                SEP #$20        ; set A short
.193e5c		c2 10		rep #$10	                REP #$10        ; set X long
.193e5e		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.193e61		a9 00		lda #$00	                LDA #0
.193e63		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.193e66		e8		inx		                INX
.193e67		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.193e6a		d0 f7		bne $193e63	                BNE b0_clr_loop
.193e6c		48		pha		                PHA             ; begin setdbr macro
.193e6d		08		php		                PHP
.193e6e		e2 20		sep #$20	                SEP #$20        ; set A short
.193e70		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193e72		48		pha		                PHA
.193e73		ab		plb		                PLB
.193e74		28		plp		                PLP
.193e75		68		pla		                PLA             ; end setdbr macro
.193e76		48		pha		                PHA             ; begin setdp macro
.193e77		08		php		                PHP
.193e78		c2 20		rep #$20	                REP #$20        ; set A long
.193e7a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193e7d		5b		tcd		                TCD
.193e7e		28		plp		                PLP
.193e7f		68		pla		                PLA             ; end setdp macro
.193e80		e2 20		sep #$20	                SEP #$20        ; set A short
.193e82		c2 10		rep #$10	                REP #$10        ; set X long
.193e84		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.193e87		a9 00		lda #$00	                LDA #0
.193e89		9d 00 a0	sta $18a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.193e8c		e8		inx		                INX
.193e8d		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.193e90		d0 f7		bne $193e89	                BNE b38_clr_loop
.193e92		c2 20		rep #$20	                REP #$20        ; set A long
.193e94		a9 42 42	lda #$4242	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.193e97		8f 4a a0 18	sta $18a04a	                STA @l DOS_DEV_NAMES
.193e9b		a9 19 00	lda #$0019	                LDA #`DOS_HD_DESC
.193e9e		8f 4c a0 18	sta $18a04c	                STA @l DOS_DEV_NAMES+2
.193ea2		e2 20		sep #$20	                SEP #$20        ; set A short
.193ea4		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.193ea6		85 01		sta $0321	                STA BIOS_DEV
.193ea8		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.193eaa		8f 50 a0 18	sta $18a050	                STA @l DOS_MOUNT_DEV
.193eae		a9 00		lda #$00	                LDA #0
.193eb0		a2 00 00	ldx #$0000	                LDX #0
.193eb3		9d 20 ad	sta $18ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.193eb6		e8		inx		                INX
.193eb7		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.193eba		d0 f7		bne $193eb3	                BNE fd_zero_loop
.193ebc		a9 00		lda #$00	                LDA #0
.193ebe		a2 00 00	ldx #$0000	                LDX #0
.193ec1		9d 00 b0	sta $18b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.193ec4		e8		inx		                INX
.193ec5		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.193ec8		d0 f7		bne $193ec1	                BNE sect_zero_loop
.193eca		c2 20		rep #$20	                REP #$20        ; set A long
.193ecc		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.193ecf		85 20		sta $0340	                STA @b DOS_FD_PTR
.193ed1		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.193ed4		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.193ed6		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.193ed9		85 28		sta $0348	                STA @b DOS_TEMP
.193edb		a9 18 00	lda #$0018	                LDA #`DOS_FILE_BUFFS
.193ede		85 2a		sta $034a	                STA @b DOS_TEMP+2
.193ee0		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.193ee3		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.193ee6		a5 28		lda $0348	                LDA @b DOS_TEMP
.193ee8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.193eea		c8		iny		                INY
.193eeb		c8		iny		                INY
.193eec		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.193eee		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.193ef0		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.193ef1		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.193ef3		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.193ef6		85 20		sta $0340	                STA @b DOS_FD_PTR
.193ef8		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.193efa		69 00 00	adc #$0000	                ADC #0
.193efd		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.193eff		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.193f00		a5 28		lda $0348	                LDA @b DOS_TEMP
.193f02		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.193f05		85 28		sta $0348	                STA @b DOS_TEMP
.193f07		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.193f09		69 00 00	adc #$0000	                ADC #0
.193f0c		85 2a		sta $034a	                STA @b DOS_TEMP+2
.193f0e		ca		dex		                DEX                     ; Count down the descriptors...
.193f0f		d0 d2		bne $193ee3	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.193f11		28		plp		                PLP
.193f12		2b		pld		                PLD
.193f13		ab		plb		                PLB
.193f14		6b		rtl		                RTL
.193f15						DOS_MOUNT
.193f15		8b		phb		                PHB
.193f16		0b		phd		                PHD
.193f17		08		php		                PHP
.193f18		48		pha		                PHA             ; begin setdbr macro
.193f19		08		php		                PHP
.193f1a		e2 20		sep #$20	                SEP #$20        ; set A short
.193f1c		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193f1e		48		pha		                PHA
.193f1f		ab		plb		                PLB
.193f20		28		plp		                PLP
.193f21		68		pla		                PLA             ; end setdbr macro
.193f22		48		pha		                PHA             ; begin setdp macro
.193f23		08		php		                PHP
.193f24		c2 20		rep #$20	                REP #$20        ; set A long
.193f26		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193f29		5b		tcd		                TCD
.193f2a		28		plp		                PLP
.193f2b		68		pla		                PLA             ; end setdp macro
.193f2c		e2 20		sep #$20	                SEP #$20        ; set A short
.193f2e		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.193f30		8f 50 a0 18	sta $18a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.193f34		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.193f36		f0 1f		beq $193f57	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.193f38		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.193f3a		f0 26		beq $193f62	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.193f3c		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.193f3e		f0 0b		beq $193f4b	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.193f40		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.193f42		85 0e		sta $032e	                STA DOS_STATUS
.193f44		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.193f46		85 00		sta $0320	                STA BIOS_STATUS
.193f48		82 7c 01	brl $1940c7	                BRL ret_failure
.193f4b		22 c3 62 19	jsl $1962c3	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.193f4f		b0 03		bcs $193f54	                BCS fdc_success
.193f51		82 73 01	brl $1940c7	                BRL ret_failure
.193f54		82 67 01	brl $1940be	fdc_success     BRL ret_success
.193f57		22 c1 58 19	jsl $1958c1	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.193f5b		b0 10		bcs $193f6d	                BCS get_mbr             ; Continue if success
.193f5d		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.193f5f		82 65 01	brl $1940c7	                BRL ret_failure
.193f62		22 d3 66 19	jsl $1966d3	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.193f66		b0 05		bcs $193f6d	                BCS get_mbr             ; Continue if success
.193f68		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.193f6a		82 5a 01	brl $1940c7	                BRL ret_failure
.193f6d						get_mbr
.193f6d		c2 30		rep #$30	                REP #$30        ; set A&X long
.193f6f		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.193f71		64 04		stz $0324	                STZ BIOS_LBA+2
.193f73		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.193f76		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193f78		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.193f7b		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193f7d		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.193f81		b0 07		bcs $193f8a	                BCS chk_signature       ; If success, check the signature bytes
.193f83		e2 20		sep #$20	                SEP #$20        ; set A short
.193f85		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.193f87		82 3d 01	brl $1940c7	                BRL ret_failure
.193f8a						chk_signature
.193f8a		e2 20		sep #$20	                SEP #$20        ; set A short
.193f8c		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.193f8f		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.193f91		d0 07		bne $193f9a	                BNE not_mbr             ; No: signal we could find the MBR
.193f93		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.193f96		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.193f98		f0 05		beq $193f9f	                BEQ chk_part_type       ; Yes: we have an MBR
.193f9a		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.193f9c		82 28 01	brl $1940c7	                BRL ret_failure
.193f9f		ad c2 a4	lda $18a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.193fa2		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.193fa4		f0 05		beq $193fab	                BEQ get_LBA             ; Is FAT32 with LBA?
.193fa6		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.193fa8		82 1c 01	brl $1940c7	                BRL ret_failure
.193fab		8d 01 a0	sta $18a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.193fae		c2 20		rep #$20	                REP #$20        ; set A long
.193fb0		ad c6 a4	lda $18a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.193fb3		8d 04 a0	sta $18a004	                STA FIRSTSECTOR
.193fb6		ad c8 a4	lda $18a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.193fb9		8d 06 a0	sta $18a006	                STA FIRSTSECTOR+2
.193fbc		ad cb a4	lda $18a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.193fbf		8d 08 a0	sta $18a008	                STA SECTORCOUNT
.193fc2		ad cd a4	lda $18a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.193fc5		8d 0a a0	sta $18a00a	                STA SECTORCOUNT+2
.193fc8		e2 20		sep #$20	                SEP #$20        ; set A short
.193fca		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.193fcc		8d 00 a0	sta $18a000	                STA DEVICE
.193fcf		a9 00		lda #$00	                LDA #0
.193fd1		8d 02 a0	sta $18a002	                STA PARTITION           ; For the moment, we only support the first partition
.193fd4		c2 20		rep #$20	                REP #$20        ; set A long
.193fd6		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.193fd9		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193fdb		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.193fde		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193fe0		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.193fe3		85 02		sta $0322	                STA BIOS_LBA
.193fe5		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.193fe8		85 04		sta $0324	                STA BIOS_LBA+2
.193fea		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.193fee		b0 1c		bcs $19400c	                BCS get_first_sec       ; Got it? Start parsing it
.193ff0		e2 20		sep #$20	                SEP #$20        ; set A short
.193ff2		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.193ff4		82 d0 00	brl $1940c7	                BRL ret_failure
.193ff7						chk_bpb_sig
.193ff7		e2 20		sep #$20	                SEP #$20        ; set A short
.193ff9		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.193ffc		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.193ffe		d0 07		bne $194007	                BNE not_bpb             ; No: signal we could find the volume ID
.194000		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.194003		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.194005		f0 05		beq $19400c	                BEQ get_first_sec       ; Yes: we have an volume ID
.194007		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.194009		82 bb 00	brl $1940c7	                BRL ret_failure
.19400c						get_first_sec
.19400c		c2 20		rep #$20	                REP #$20        ; set A long
.19400e		ad 2c a3	lda $18a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.194011		8d 20 a0	sta $18a020	                STA ROOT_DIR_FIRST_CLUSTER
.194014		ad 2e a3	lda $18a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.194017		8d 22 a0	sta $18a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.19401a		ad 0e a3	lda $18a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.19401d		8d 0c a0	sta $18a00c	                STA NUM_RSRV_SEC
.194020		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.194021		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.194024		6d 0c a0	adc $18a00c	                ADC NUM_RSRV_SEC
.194027		8d 14 a0	sta $18a014	                STA FAT_BEGIN_LBA
.19402a		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.19402d		69 00 00	adc #$0000	                ADC #0
.194030		8d 16 a0	sta $18a016	                STA FAT_BEGIN_LBA+2
.194033		e2 20		sep #$20	                SEP #$20        ; set A short
.194035		a2 00 00	ldx #$0000	                LDX #0
.194038		bf 24 a3 18	lda $18a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.19403c		9f 10 a0 18	sta $18a010,x	                STA @l SEC_PER_FAT,X
.194040		e8		inx		                INX
.194041		e0 04 00	cpx #$0004	                CPX #4
.194044		d0 f2		bne $194038	                BNE cpy_secperfat
.194046		ad 10 a0	lda $18a010	                LDA SEC_PER_FAT
.194049		0a		asl a		                ASL A
.19404a		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.19404d		ad 11 a0	lda $18a011	                LDA SEC_PER_FAT+1
.194050		2a		rol a		                ROL A
.194051		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.194054		ad 12 a0	lda $18a012	                LDA SEC_PER_FAT+2
.194057		2a		rol a		                ROL A
.194058		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.19405b		ad 13 a0	lda $18a013	                LDA SEC_PER_FAT+3
.19405e		2a		rol a		                ROL A
.19405f		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.194062		18		clc		                CLC
.194063		ad 1c a0	lda $18a01c	                LDA CLUSTER_BEGIN_LBA
.194066		6d 14 a0	adc $18a014	                ADC FAT_BEGIN_LBA
.194069		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.19406c		ad 1d a0	lda $18a01d	                LDA CLUSTER_BEGIN_LBA+1
.19406f		6d 15 a0	adc $18a015	                ADC FAT_BEGIN_LBA+1
.194072		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.194075		ad 1e a0	lda $18a01e	                LDA CLUSTER_BEGIN_LBA+2
.194078		6d 16 a0	adc $18a016	                ADC FAT_BEGIN_LBA+2
.19407b		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.19407e		ad 1f a0	lda $18a01f	                LDA CLUSTER_BEGIN_LBA+3
.194081		6d 17 a0	adc $18a017	                ADC FAT_BEGIN_LBA+3
.194084		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.194087		e2 20		sep #$20	                SEP #$20        ; set A short
.194089		ad 0d a3	lda $18a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.19408c		8d 03 a0	sta $18a003	                STA SECTORS_PER_CLUSTER
.19408f		18		clc		                CLC
.194090		ad 14 a0	lda $18a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.194093		6d 10 a0	adc $18a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.194096		8d 18 a0	sta $18a018	                STA FAT2_BEGIN_LBA
.194099		ad 15 a0	lda $18a015	                LDA FAT_BEGIN_LBA+1
.19409c		6d 11 a0	adc $18a011	                ADC SEC_PER_FAT+1
.19409f		8d 19 a0	sta $18a019	                STA FAT2_BEGIN_LBA+1
.1940a2		ad 16 a0	lda $18a016	                LDA FAT_BEGIN_LBA+2
.1940a5		6d 12 a0	adc $18a012	                ADC SEC_PER_FAT+2
.1940a8		8d 1a a0	sta $18a01a	                STA FAT2_BEGIN_LBA+2
.1940ab		ad 17 a0	lda $18a017	                LDA FAT_BEGIN_LBA+3
.1940ae		6d 13 a0	adc $18a013	                ADC SEC_PER_FAT+3
.1940b1		8d 1b a0	sta $18a01b	                STA FAT2_BEGIN_LBA+3
.1940b4		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.1940b6		8d 0e a0	sta $18a00e	                STA CLUSTER_SIZE
.1940b9		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.1940bb		8d 0f a0	sta $18a00f	                STA CLUSTER_SIZE+1
.1940be						ret_success
.1940be		e2 20		sep #$20	                SEP #$20        ; set A short
.1940c0		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.1940c2		28		plp		                PLP
.1940c3		2b		pld		                PLD
.1940c4		ab		plb		                PLB
.1940c5		38		sec		                SEC
.1940c6		6b		rtl		                RTL
.1940c7						ret_failure
.1940c7		e2 20		sep #$20	                SEP #$20        ; set A short
.1940c9		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.1940cb		28		plp		                PLP
.1940cc		2b		pld		                PLD
.1940cd		ab		plb		                PLB
.1940ce		18		clc		                CLC
.1940cf		6b		rtl		                RTL
.1940d0						DOS_TESTBOOT
.1940d0		8b		phb		                PHB
.1940d1		0b		phd		                PHD
.1940d2		da		phx		                PHX
.1940d3		08		php		                PHP
.1940d4		48		pha		                PHA             ; begin setdbr macro
.1940d5		08		php		                PHP
.1940d6		e2 20		sep #$20	                SEP #$20        ; set A short
.1940d8		a9 00		lda #$00	                LDA #0
.1940da		48		pha		                PHA
.1940db		ab		plb		                PLB
.1940dc		28		plp		                PLP
.1940dd		68		pla		                PLA             ; end setdbr macro
.1940de		48		pha		                PHA             ; begin setdp macro
.1940df		08		php		                PHP
.1940e0		c2 20		rep #$20	                REP #$20        ; set A long
.1940e2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1940e5		5b		tcd		                TCD
.1940e6		28		plp		                PLP
.1940e7		68		pla		                PLA             ; end setdp macro
.1940e8		c2 10		rep #$10	                REP #$10        ; set X long
.1940ea						chk_dev
.1940ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1940ec		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.1940ee		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.1940f0		f0 24		beq $194116	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.1940f2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1940f4		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.1940f7		85 02		sta $0322	                STA @b BIOS_LBA
.1940f9		85 04		sta $0324	                STA @b BIOS_LBA+2
.1940fb		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.1940fe		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.194100		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.194103		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.194105		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.194109		b0 03		bcs $19410e	                BCS chk_mbr_brl
.19410b		82 47 00	brl $194155	                BRL done                    ; If failed... just return
.19410e						chk_mbr_brl
.19410e		e2 20		sep #$20	                SEP #$20        ; set A short
.194110		af 00 a3 18	lda $18a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.194114		80 04		bra $19411a	                BRA chk_brl
.194116		af 3e a3 18	lda $18a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.19411a		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.19411c		f0 06		beq $194124	                BEQ chk_magic               ; Yes: check for the magic text
.19411e		c9 82		cmp #$82	                CMP #$82
.194120		f0 02		beq $194124	                BEQ chk_magic
.194122		80 31		bra $194155	                BRA done                    ; No: just return
.194124		a2 00 00	ldx #$0000	chk_magic       LDX #0
.194127		bf 03 a3 18	lda $18a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.19412b		df 5a 41 19	cmp $19415a,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.19412f		d0 24		bne $194155	                BNE done                    ; If it's not equal, just return
.194131		e8		inx		                INX                         ; Otherwise, check the next one
.194132		e0 08 00	cpx #$0008	                CPX #8
.194135		d0 f0		bne $194127	                BNE magic_loop              ; Until we've checked all 8 bytes
.194137		c2 30		rep #$30	                REP #$30        ; set A&X long
.194139		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.19413c		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.19413f		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.194142		44 18 18	mvp $18,$18	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.194145		e2 20		sep #$20	                SEP #$20        ; set A short
.194147		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.194149		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.19414b		f0 04		beq $194151	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.19414d		5c 00 a9 18	jmp $18a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.194151		5c 3e a9 18	jmp $18a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.194155		28		plp		done            PLP
.194156		2b		pld		                PLD
.194157		ab		plb		                PLB
.194158		fa		plx		                PLX
.194159		6b		rtl		                RTL
>19415a		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.194162						DOS_CALC_LBA
.194162		8b		phb		                PHB
.194163		0b		phd		                PHD
.194164		08		php		                PHP
.194165		48		pha		                PHA             ; begin setdbr macro
.194166		08		php		                PHP
.194167		e2 20		sep #$20	                SEP #$20        ; set A short
.194169		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19416b		48		pha		                PHA
.19416c		ab		plb		                PLB
.19416d		28		plp		                PLP
.19416e		68		pla		                PLA             ; end setdbr macro
.19416f		48		pha		                PHA             ; begin setdp macro
.194170		08		php		                PHP
.194171		c2 20		rep #$20	                REP #$20        ; set A long
.194173		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194176		5b		tcd		                TCD
.194177		28		plp		                PLP
.194178		68		pla		                PLA             ; end setdp macro
.194179		c2 20		rep #$20	                REP #$20        ; set A long
.19417b		38		sec		                SEC
.19417c		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.19417e		e9 02 00	sbc #$0002	                SBC #2
.194181		85 28		sta $0348	                STA DOS_TEMP
.194183		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194185		e9 00 00	sbc #$0000	                SBC #0
.194188		85 2a		sta $034a	                STA DOS_TEMP+2
.19418a		e2 10		sep #$10	                SEP #$10        ; set X short
.19418c		ae 03 a0	ldx $18a003	                LDX SECTORS_PER_CLUSTER
.19418f		e0 01		cpx #$01	mult_loop       CPX #1
.194191		f0 07		beq $19419a	                BEQ add_offset
.194193		06 28		asl $0348	                ASL DOS_TEMP
.194195		26 28		rol $0348	                ROL DOS_TEMP
.194197		ca		dex		                DEX
.194198		80 f5		bra $19418f	                BRA mult_loop
.19419a		18		clc		add_offset      CLC
.19419b		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.19419d		6d 1c a0	adc $18a01c	                ADC CLUSTER_BEGIN_LBA
.1941a0		85 02		sta $0322	                STA BIOS_LBA
.1941a2		a5 2a		lda $034a	                LDA DOS_TEMP+2
.1941a4		6d 1e a0	adc $18a01e	                ADC CLUSTER_BEGIN_LBA+2
.1941a7		85 04		sta $0324	                STA BIOS_LBA+2
.1941a9		28		plp		                PLP
.1941aa		2b		pld		                PLD
.1941ab		ab		plb		                PLB
.1941ac		6b		rtl		                RTL
.1941ad						DOS_GETCLUSTER
.1941ad		8b		phb		                PHB
.1941ae		0b		phd		                PHD
.1941af		08		php		                PHP
.1941b0		48		pha		                PHA             ; begin setdbr macro
.1941b1		08		php		                PHP
.1941b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1941b4		a9 00		lda #$00	                LDA #0
.1941b6		48		pha		                PHA
.1941b7		ab		plb		                PLB
.1941b8		28		plp		                PLP
.1941b9		68		pla		                PLA             ; end setdbr macro
.1941ba		48		pha		                PHA             ; begin setdp macro
.1941bb		08		php		                PHP
.1941bc		c2 20		rep #$20	                REP #$20        ; set A long
.1941be		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1941c1		5b		tcd		                TCD
.1941c2		28		plp		                PLP
.1941c3		68		pla		                PLA             ; end setdp macro
.1941c4		c2 20		rep #$20	                REP #$20        ; set A long
.1941c6		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.1941c8		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1941ca		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.1941cc		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1941ce		22 62 41 19	jsl $194162	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.1941d2		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.1941d6		90 09		bcc $1941e1	                BCC ret_failure
.1941d8						ret_success
.1941d8		e2 20		sep #$20	                SEP #$20        ; set A short
.1941da		64 0e		stz $032e	                STZ DOS_STATUS
.1941dc		28		plp		                PLP
.1941dd		2b		pld		                PLD
.1941de		ab		plb		                PLB
.1941df		38		sec		                SEC
.1941e0		6b		rtl		                RTL
.1941e1						ret_failure
.1941e1		e2 20		sep #$20	                SEP #$20        ; set A short
.1941e3		85 0e		sta $032e	                STA DOS_STATUS
.1941e5		28		plp		                PLP
.1941e6		2b		pld		                PLD
.1941e7		ab		plb		                PLB
.1941e8		18		clc		                CLC
.1941e9		6b		rtl		                RTL
.1941ea						DOS_PUTCLUSTER
.1941ea		8b		phb		                PHB
.1941eb		0b		phd		                PHD
.1941ec		08		php		                PHP
.1941ed		48		pha		                PHA             ; begin setdbr macro
.1941ee		08		php		                PHP
.1941ef		e2 20		sep #$20	                SEP #$20        ; set A short
.1941f1		a9 00		lda #$00	                LDA #0
.1941f3		48		pha		                PHA
.1941f4		ab		plb		                PLB
.1941f5		28		plp		                PLP
.1941f6		68		pla		                PLA             ; end setdbr macro
.1941f7		48		pha		                PHA             ; begin setdp macro
.1941f8		08		php		                PHP
.1941f9		c2 20		rep #$20	                REP #$20        ; set A long
.1941fb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1941fe		5b		tcd		                TCD
.1941ff		28		plp		                PLP
.194200		68		pla		                PLA             ; end setdp macro
.194201		c2 20		rep #$20	                REP #$20        ; set A long
.194203		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.194205		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194207		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.194209		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19420b		22 62 41 19	jsl $194162	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.19420f		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.194213		90 09		bcc $19421e	                BCC ret_failure
.194215						ret_success
.194215		e2 20		sep #$20	                SEP #$20        ; set A short
.194217		64 0e		stz $032e	                STZ DOS_STATUS
.194219		28		plp		                PLP
.19421a		2b		pld		                PLD
.19421b		ab		plb		                PLB
.19421c		38		sec		                SEC
.19421d		6b		rtl		                RTL
.19421e						ret_failure
.19421e		e2 20		sep #$20	                SEP #$20        ; set A short
.194220		85 0e		sta $032e	                STA DOS_STATUS
.194222		28		plp		                PLP
.194223		2b		pld		                PLD
.194224		ab		plb		                PLB
.194225		18		clc		                CLC
.194226		6b		rtl		                RTL
>194227		40 46 00			DOS_FDC_NAME    .null "@F"
.19422a						DOS_FDC_DESC
>19422a		27 42 19 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>19422e		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>19422f		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>194233		40 53 00			DOS_SDC_NAME    .null "@S"
.194236						DOS_SDC_DESC
>194236		33 42 19 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>19423a		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>19423b		2a 42 19 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>19423f		40 48 00			DOS_HDC_NAME    .null "@H"
.194242						DOS_HD_DESC
>194242		3f 42 19 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>194246		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>194247		36 42 19 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.19424b						DOS_PARSE_DEV
.19424b		8b		phb		                PHB
.19424c		0b		phd		                PHD
.19424d		08		php		                PHP
.19424e		48		pha		                PHA             ; begin setdbr macro
.19424f		08		php		                PHP
.194250		e2 20		sep #$20	                SEP #$20        ; set A short
.194252		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194254		48		pha		                PHA
.194255		ab		plb		                PLB
.194256		28		plp		                PLP
.194257		68		pla		                PLA             ; end setdbr macro
.194258		48		pha		                PHA             ; begin setdp macro
.194259		08		php		                PHP
.19425a		c2 20		rep #$20	                REP #$20        ; set A long
.19425c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19425f		5b		tcd		                TCD
.194260		28		plp		                PLP
.194261		68		pla		                PLA             ; end setdp macro
.194262		c2 30		rep #$30	                REP #$30        ; set A&X long
.194264		af 4a a0 18	lda $18a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.194268		85 28		sta $0348	                STA DOS_TEMP
.19426a		af 4c a0 18	lda $18a04c	                LDA @l DOS_DEV_NAMES+2
.19426e		85 2a		sta $034a	                STA DOS_TEMP+2
.194270		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.194273		85 48		sta $0368	                STA DOS_STR2_PTR
.194275		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.194278		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.19427a		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.19427d		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.19427f		85 44		sta $0364	                STA DOS_STR1_PTR
.194281		c8		iny		                INY
.194282		c8		iny		                INY
.194283		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194285		85 46		sta $0366	                STA DOS_STR1_PTR+2
.194287		e2 20		sep #$20	                SEP #$20        ; set A short
.194289		a0 00 00	ldy #$0000	                LDY #0
.19428c		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.19428e		f0 24		beq $1942b4	                BEQ found                   ; If it's NULL, we found a match
.194290		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.194292		d0 03		bne $194297	                BNE next_device             ; If no match, try to load the next device
.194294		c8		iny		                INY                         ; Go to the next character
.194295		80 f5		bra $19428c	                BRA cmp_loop
.194297						next_device
.194297		c2 20		rep #$20	                REP #$20        ; set A long
.194299		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.19429c		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.19429e		48		pha		                PHA
.19429f		c8		iny		                INY
.1942a0		c8		iny		                INY
.1942a1		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.1942a3		85 2a		sta $034a	                STA DOS_TEMP+2
.1942a5		68		pla		                PLA
.1942a6		85 28		sta $0348	                STA DOS_TEMP
.1942a8		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.1942aa		d0 ce		bne $19427a	                BNE dev_loop                ; No: check this device
.1942ac		a5 2a		lda $034a	                LDA DOS_TEMP+2
.1942ae		d0 ca		bne $19427a	                BNE dev_loop
.1942b0		28		plp		done            PLP                         ; Otherwise, return having not found a match
.1942b1		2b		pld		                PLD
.1942b2		ab		plb		                PLB
.1942b3		6b		rtl		                RTL
.1942b4		22 c5 42 19	jsl $1942c5	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.1942b8		e2 20		sep #$20	                SEP #$20        ; set A short
.1942ba		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.1942bd		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.1942bf		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1942c3		80 eb		bra $1942b0	                BRA done
.1942c5						DOS_ADJUSTPATH
.1942c5		da		phx		                PHX
.1942c6		5a		phy		                PHY
.1942c7		8b		phb		                PHB
.1942c8		0b		phd		                PHD
.1942c9		08		php		                PHP
.1942ca		48		pha		                PHA             ; begin setdbr macro
.1942cb		08		php		                PHP
.1942cc		e2 20		sep #$20	                SEP #$20        ; set A short
.1942ce		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1942d0		48		pha		                PHA
.1942d1		ab		plb		                PLB
.1942d2		28		plp		                PLP
.1942d3		68		pla		                PLA             ; end setdbr macro
.1942d4		48		pha		                PHA             ; begin setdp macro
.1942d5		08		php		                PHP
.1942d6		c2 20		rep #$20	                REP #$20        ; set A long
.1942d8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1942db		5b		tcd		                TCD
.1942dc		28		plp		                PLP
.1942dd		68		pla		                PLA             ; end setdp macro
.1942de		c2 30		rep #$30	                REP #$30        ; set A&X long
.1942e0		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.1942e2		98		tya		                TYA                             ; Compute the address of the first source byte
.1942e3		18		clc		                CLC
.1942e4		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.1942e7		aa		tax		                TAX
.1942e8		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.1942eb		a8		tay		                TAY
.1942ec		38		sec		                SEC                             ; Compute the number of bytes to copy
.1942ed		a9 00 01	lda #$0100	                LDA #256
.1942f0		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.1942f2		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.1942f5		28		plp		                PLP
.1942f6		2b		pld		                PLD
.1942f7		ab		plb		                PLB
.1942f8		7a		ply		                PLY
.1942f9		fa		plx		                PLX
.1942fa		6b		rtl		                RTL
.1942fb						DOS_PARSE_PATH
.1942fb		8b		phb		                PHB
.1942fc		0b		phd		                PHD
.1942fd		08		php		                PHP
.1942fe		48		pha		                PHA             ; begin setdbr macro
.1942ff		08		php		                PHP
.194300		e2 20		sep #$20	                SEP #$20        ; set A short
.194302		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194304		48		pha		                PHA
.194305		ab		plb		                PLB
.194306		28		plp		                PLP
.194307		68		pla		                PLA             ; end setdbr macro
.194308		48		pha		                PHA             ; begin setdp macro
.194309		08		php		                PHP
.19430a		c2 20		rep #$20	                REP #$20        ; set A long
.19430c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19430f		5b		tcd		                TCD
.194310		28		plp		                PLP
.194311		68		pla		                PLA             ; end setdp macro
.194312		c2 10		rep #$10	                REP #$10        ; set X long
.194314		e2 20		sep #$20	                SEP #$20        ; set A short
.194316		a2 00 00	ldx #$0000	                LDX #0
.194319		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.19431b		f0 1b		beq $194338	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.19431d		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.19431f		b0 05		bcs $194326	                BGE check_case          ; No: check the case
.194321		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.194323		82 64 00	brl $19438a	                BRL ret_failure
.194326		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.194328		90 08		bcc $194332	                BLT next_char
.19432a		c9 7b		cmp #$7b	                CMP #'z'+1
.19432c		b0 04		bcs $194332	                BGE next_char
.19432e		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.194330		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.194332		e8		inx		next_char       INX                     ; Move to the next character
.194333		e0 00 01	cpx #$0100	                CPX #$100
.194336		d0 e1		bne $194319	                BNE upcase_loop
.194338		22 4b 42 19	jsl $19424b	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.19433c		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.19433e		c9 3a		cmp #$3a	                CMP #':'
.194340		d0 07		bne $194349	                BNE clr_name            ; If not colon, treat it as a file name
.194342		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.194345		22 c5 42 19	jsl $1942c5	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.194349		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.19434c		a9 20		lda #$20	                LDA #' '
.19434e		99 3a a0	sta $18a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.194351		c8		iny		                INY
.194352		c0 0b 00	cpy #$000b	                CPY #11
.194355		d0 f7		bne $19434e	                BNE clr_loop
.194357		a2 00 00	ldx #$0000	                LDX #0
.19435a		a0 00 00	ldy #$0000	                LDY #0
.19435d		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.19435f		f0 20		beq $194381	                BEQ ret_success         ; If NULL: we've finished parsing the path
.194361		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.194363		f0 0a		beq $19436f	                BEQ cpy_ext             ; And move to the extension
.194365		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.194368		e8		inx		                INX
.194369		c8		iny		                INY                     ; Move to the next character
.19436a		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.19436d		d0 ee		bne $19435d	                BNE cpy_name_loop       ; No: process this one
.19436f		e8		inx		cpy_ext         INX                     ; Skip the dot
.194370		a0 08 00	ldy #$0008	                LDY #8
.194373		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.194375		f0 0a		beq $194381	                BEQ ret_success         ; If it's NULL, we've finished
.194377		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.19437a		e8		inx		                INX
.19437b		c8		iny		                INY                     ; Move to the next character
.19437c		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.19437f		d0 f2		bne $194373	                BNE cpy_ext_loop        ; No: process this one
.194381						ret_success
.194381		e2 20		sep #$20	                SEP #$20        ; set A short
.194383		64 0e		stz $032e	                STZ DOS_STATUS
.194385		28		plp		                PLP
.194386		2b		pld		                PLD
.194387		ab		plb		                PLB
.194388		38		sec		                SEC
.194389		6b		rtl		                RTL
.19438a						ret_failure
.19438a		e2 20		sep #$20	                SEP #$20        ; set A short
.19438c		85 0e		sta $032e	                STA DOS_STATUS
.19438e		28		plp		                PLP
.19438f		2b		pld		                PLD
.194390		ab		plb		                PLB
.194391		18		clc		                CLC
.194392		6b		rtl		                RTL
.194393						DOS_FINDFILE
.194393		8b		phb		                PHB
.194394		0b		phd		                PHD
.194395		08		php		                PHP
.194396		48		pha		                PHA             ; begin setdbr macro
.194397		08		php		                PHP
.194398		e2 20		sep #$20	                SEP #$20        ; set A short
.19439a		a9 00		lda #$00	                LDA #0
.19439c		48		pha		                PHA
.19439d		ab		plb		                PLB
.19439e		28		plp		                PLP
.19439f		68		pla		                PLA             ; end setdbr macro
.1943a0		48		pha		                PHA             ; begin setdp macro
.1943a1		08		php		                PHP
.1943a2		c2 20		rep #$20	                REP #$20        ; set A long
.1943a4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1943a7		5b		tcd		                TCD
.1943a8		28		plp		                PLP
.1943a9		68		pla		                PLA             ; end setdp macro
.1943aa		c2 30		rep #$30	                REP #$30        ; set A&X long
.1943ac		22 fb 42 19	jsl $1942fb	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.1943b0		b0 05		bcs $1943b7	                BCS mount                       ; If success: try to open the directory
.1943b2		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.1943b3		2b		pld		                PLD
.1943b4		ab		plb		                PLB
.1943b5		18		clc		                CLC
.1943b6		6b		rtl		                RTL
.1943b7		22 15 3f 19	jsl $193f15	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.1943bb		b0 07		bcs $1943c4	                BCS get_directory
.1943bd		e2 20		sep #$20	                SEP #$20        ; set A short
.1943bf		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.1943c1		82 56 00	brl $19441a	                BRL ret_failure
.1943c4						get_directory
.1943c4		c2 20		rep #$20	                REP #$20        ; set A long
.1943c6		22 ca 3b 19	jsl $193bca	                JSL DOS_DIROPEN                 ; Get the directory
.1943ca		b0 07		bcs $1943d3	                BCS scan_entries                ; If success: start scanning the directory entries
.1943cc		e2 20		sep #$20	                SEP #$20        ; set A short
.1943ce		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.1943d0		82 47 00	brl $19441a	                BRL ret_failure
.1943d3		22 49 3c 19	jsl $193c49	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.1943d7						scan_loop
.1943d7		e2 20		sep #$20	                SEP #$20        ; set A short
.1943d9		a0 00 00	ldy #$0000	                LDY #0
.1943dc		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.1943de		d0 05		bne $1943e5	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.1943e0		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.1943e2		82 35 00	brl $19441a	                BRL ret_failure
.1943e5		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.1943e7		f0 26		beq $19440f	                BEQ next_entry                  ; Go to the next entry
.1943e9		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.1943ec		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.1943ee		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.1943f0		d0 1d		bne $19440f	                BNE next_entry                  ; Yes: skip it!
.1943f2		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.1943f4		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.1943f6		f0 17		beq $19440f	                BEQ next_entry                  ; Yes: skip it!
.1943f8		a2 00 00	ldx #$0000	                LDX #0
.1943fb		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.1943fe		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.194400		df 3a a0 18	cmp $18a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.194404		d0 09		bne $19440f	                BNE next_entry                  ; If not equal: try the next entry
.194406		c8		iny		                INY                             ; Advance to the next character
.194407		e8		inx		                INX
.194408		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.19440b		f0 16		beq $194423	                BEQ match                       ; Yes: we have a match!
.19440d		80 ef		bra $1943fe	                BRA scan_cmp_loop               ; No: keep checking
.19440f		22 64 3c 19	jsl $193c64	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.194413		90 05		bcc $19441a	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.194415		82 bf ff	brl $1943d7	                BRL scan_loop                   ; If found: keep scanning
.194418		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.19441a						ret_failure
.19441a		e2 20		sep #$20	                SEP #$20        ; set A short
.19441c		85 0e		sta $032e	                STA DOS_STATUS
.19441e		28		plp		                PLP
.19441f		2b		pld		                PLD
.194420		ab		plb		                PLB
.194421		18		clc		                CLC
.194422		6b		rtl		                RTL
.194423						match
.194423		c2 20		rep #$20	                REP #$20        ; set A long
.194425		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.194428		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.19442a		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.19442c		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.19442f		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194431		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194433						ret_success
.194433		e2 20		sep #$20	                SEP #$20        ; set A short
.194435		64 0e		stz $032e	                STZ DOS_STATUS
.194437		28		plp		                PLP
.194438		2b		pld		                PLD
.194439		ab		plb		                PLB
.19443a		38		sec		                SEC
.19443b		6b		rtl		                RTL
.19443c						DOS_READFILE
.19443c		8b		phb		                PHB
.19443d		0b		phd		                PHD
.19443e		08		php		                PHP
.19443f		48		pha		                PHA             ; begin setdbr macro
.194440		08		php		                PHP
.194441		e2 20		sep #$20	                SEP #$20        ; set A short
.194443		a9 00		lda #$00	                LDA #0
.194445		48		pha		                PHA
.194446		ab		plb		                PLB
.194447		28		plp		                PLP
.194448		68		pla		                PLA             ; end setdbr macro
.194449		48		pha		                PHA             ; begin setdp macro
.19444a		08		php		                PHP
.19444b		c2 20		rep #$20	                REP #$20        ; set A long
.19444d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194450		5b		tcd		                TCD
.194451		28		plp		                PLP
.194452		68		pla		                PLA             ; end setdp macro
.194453		c2 30		rep #$30	                REP #$30        ; set A&X long
.194455		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.194457		48		pha		                PHA
.194458		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.19445a		48		pha		                PHA
.19445b		22 93 43 19	jsl $194393	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.19445f		68		pla		                PLA
.194460		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194462		68		pla		                PLA
.194463		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194465		90 0f		bcc $194476	                BCC pass_failure                    ; If found: try to load the cluster
.194467		22 ad 41 19	jsl $1941ad	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.19446b		90 09		bcc $194476	                BCC pass_failure                    ; If there's an error... pass it up the chain
.19446d						ret_success
.19446d		e2 20		sep #$20	                SEP #$20        ; set A short
.19446f		64 0e		stz $032e	                STZ DOS_STATUS
.194471		28		plp		                PLP
.194472		2b		pld		                PLD
.194473		ab		plb		                PLB
.194474		38		sec		                SEC
.194475		6b		rtl		                RTL
.194476		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.194477		2b		pld		                PLD
.194478		ab		plb		                PLB
.194479		18		clc		                CLC
.19447a		6b		rtl		                RTL
.19447b						ENTRYFORCLUS12
.19447b		8b		phb		                PHB
.19447c		0b		phd		                PHD
.19447d		08		php		                PHP
.19447e		48		pha		                PHA             ; begin setdbr macro
.19447f		08		php		                PHP
.194480		e2 20		sep #$20	                SEP #$20        ; set A short
.194482		a9 00		lda #$00	                LDA #0
.194484		48		pha		                PHA
.194485		ab		plb		                PLB
.194486		28		plp		                PLP
.194487		68		pla		                PLA             ; end setdbr macro
.194488		48		pha		                PHA             ; begin setdp macro
.194489		08		php		                PHP
.19448a		c2 20		rep #$20	                REP #$20        ; set A long
.19448c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19448f		5b		tcd		                TCD
.194490		28		plp		                PLP
.194491		68		pla		                PLA             ; end setdp macro
.194492		c2 30		rep #$30	                REP #$30        ; set A&X long
.194494		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.194496		0a		asl a		                ASL A
.194497		85 28		sta $0348	                STA DOS_TEMP
.194499		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.19449b		2a		rol a		                ROL A
.19449c		85 2a		sta $034a	                STA DOS_TEMP+2
.19449e		18		clc		                CLC
.19449f		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1944a1		65 28		adc $0348	                ADC DOS_TEMP
.1944a3		85 28		sta $0348	                STA DOS_TEMP
.1944a5		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1944a7		65 2a		adc $034a	                ADC DOS_TEMP+2
.1944a9		85 2a		sta $034a	                STA DOS_TEMP+2
.1944ab		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.1944ad		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.1944af		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.1944b1		29 ff 03	and #$03ff	                AND #$003FF
.1944b4		aa		tax		                TAX
.1944b5		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944b7		66 28		ror $0348	                ROR DOS_TEMP
.1944b9		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944bb		66 28		ror $0348	                ROR DOS_TEMP
.1944bd		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944bf		66 28		ror $0348	                ROR DOS_TEMP
.1944c1		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944c3		66 28		ror $0348	                ROR DOS_TEMP
.1944c5		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944c7		66 28		ror $0348	                ROR DOS_TEMP
.1944c9		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944cb		66 28		ror $0348	                ROR DOS_TEMP
.1944cd		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944cf		66 28		ror $0348	                ROR DOS_TEMP
.1944d1		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944d3		66 28		ror $0348	                ROR DOS_TEMP
.1944d5		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944d7		66 28		ror $0348	                ROR DOS_TEMP
.1944d9		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.1944da		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA
.1944de		65 28		adc $0348	                ADC DOS_TEMP
.1944e0		85 24		sta $0344	                STA DOS_FAT_LBA
.1944e2		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.1944e6		65 2a		adc $034a	                ADC DOS_TEMP+2
.1944e8		85 26		sta $0346	                STA DOS_FAT_LBA+2
.1944ea		28		plp		                PLP
.1944eb		2b		pld		                PLD
.1944ec		ab		plb		                PLB
.1944ed		6b		rtl		                RTL
.1944ee						FATFORCLUSTER12
.1944ee		8b		phb		                PHB
.1944ef		0b		phd		                PHD
.1944f0		08		php		                PHP
.1944f1		48		pha		                PHA             ; begin setdbr macro
.1944f2		08		php		                PHP
.1944f3		e2 20		sep #$20	                SEP #$20        ; set A short
.1944f5		a9 00		lda #$00	                LDA #0
.1944f7		48		pha		                PHA
.1944f8		ab		plb		                PLB
.1944f9		28		plp		                PLP
.1944fa		68		pla		                PLA             ; end setdbr macro
.1944fb		48		pha		                PHA             ; begin setdp macro
.1944fc		08		php		                PHP
.1944fd		c2 20		rep #$20	                REP #$20        ; set A long
.1944ff		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194502		5b		tcd		                TCD
.194503		28		plp		                PLP
.194504		68		pla		                PLA             ; end setdp macro
.194505		c2 30		rep #$30	                REP #$30        ; set A&X long
.194507		a2 00 00	ldx #$0000	                LDX #0
.19450a		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.19450d		8f 00 a5 18	sta $18a500	clr_loop        STA DOS_FAT_SECTORS
.194511		e8		inx		                INX
.194512		e8		inx		                INX
.194513		e0 00 04	cpx #$0400	                CPX #1024
.194516		d0 f5		bne $19450d	                BNE clr_loop
.194518		22 7b 44 19	jsl $19447b	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.19451c		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.19451e		85 02		sta $0322	                STA BIOS_LBA
.194520		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194522		85 04		sta $0324	                STA BIOS_LBA+2
.194524		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.194527		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194529		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.19452c		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19452e		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.194532		90 17		bcc $19454b	                BCC error
.194534		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.194536		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.194539		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19453b		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.19453e		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194540		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.194544		90 05		bcc $19454b	                BCC error
.194546		28		plp		                PLP
.194547		2b		pld		                PLD
.194548		ab		plb		                PLB
.194549		38		sec		                SEC
.19454a		6b		rtl		                RTL
.19454b						error
.19454b		e2 20		sep #$20	                SEP #$20        ; set A short
.19454d		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.19454f		85 0e		sta $032e	                STA DOS_STATUS
.194551		28		plp		                PLP
.194552		2b		pld		                PLD
.194553		ab		plb		                PLB
.194554		18		clc		                CLC
.194555		6b		rtl		                RTL
.194556						FATFORCLUSTER32
.194556		8b		phb		                PHB
.194557		0b		phd		                PHD
.194558		48		pha		                PHA             ; begin setdbr macro
.194559		08		php		                PHP
.19455a		e2 20		sep #$20	                SEP #$20        ; set A short
.19455c		a9 00		lda #$00	                LDA #0
.19455e		48		pha		                PHA
.19455f		ab		plb		                PLB
.194560		28		plp		                PLP
.194561		68		pla		                PLA             ; end setdbr macro
.194562		48		pha		                PHA             ; begin setdp macro
.194563		08		php		                PHP
.194564		c2 20		rep #$20	                REP #$20        ; set A long
.194566		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194569		5b		tcd		                TCD
.19456a		28		plp		                PLP
.19456b		68		pla		                PLA             ; end setdp macro
.19456c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19456e		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194570		85 24		sta $0344	                STA DOS_FAT_LBA
.194572		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194574		85 26		sta $0346	                STA DOS_FAT_LBA+2
.194576		a2 07 00	ldx #$0007	                LDX #7
.194579		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.19457b		66 24		ror $0344	                ROR DOS_FAT_LBA
.19457d		ca		dex		                DEX
.19457e		d0 f9		bne $194579	                BNE div_loop
.194580		18		clc		                CLC
.194581		a5 24		lda $0344	                LDA DOS_FAT_LBA
.194583		6f 14 a0 18	adc $18a014	                ADC FAT_BEGIN_LBA
.194587		85 24		sta $0344	                STA DOS_FAT_LBA
.194589		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.19458b		6f 16 a0 18	adc $18a016	                ADC FAT_BEGIN_LBA+2
.19458f		85 26		sta $0346	                STA DOS_FAT_LBA+2
.194591		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.194593		85 02		sta $0322	                STA BIOS_LBA
.194595		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194597		85 04		sta $0324	                STA BIOS_LBA+2
.194599		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.19459c		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19459e		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.1945a1		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1945a3		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.1945a7		b0 06		bcs $1945af	                BCS find_entry
.1945a9		e2 20		sep #$20	                SEP #$20        ; set A short
.1945ab		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.1945ad		80 0e		bra $1945bd	                BRA ret_failure
.1945af						find_entry
.1945af		c2 20		rep #$20	                REP #$20        ; set A long
.1945b1		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1945b3		0a		asl a		                ASL A
.1945b4		0a		asl a		                ASL A                           ; * 4
.1945b5		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.1945b8		aa		tax		                TAX                             ; X should be the offset within the sector
.1945b9		2b		pld		ret_success     PLD
.1945ba		ab		plb		                PLB
.1945bb		38		sec		                SEC                             ; return success
.1945bc		6b		rtl		                RTL
.1945bd		2b		pld		ret_failure     PLD
.1945be		ab		plb		                PLB
.1945bf		18		clc		                CLC                             ; Return failure
.1945c0		6b		rtl		                RTL
.1945c1						NEXTCLUSTER
.1945c1		08		php		                PHP
.1945c2		e2 20		sep #$20	                SEP #$20        ; set A short
.1945c4		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.1945c8		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.1945ca		d0 08		bne $1945d4	                BNE fat32                       ; No: assume it's FAT32
.1945cc		22 e2 45 19	jsl $1945e2	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.1945d0		90 0d		bcc $1945df	                BCC pass_failure                ; If there was an error, pass it up the chain
.1945d2		80 06		bra $1945da	                BRA ret_success
.1945d4		22 4a 46 19	jsl $19464a	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.1945d8		90 05		bcc $1945df	                BCC pass_failure                ; If there was an error, pass it up the chain
.1945da		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.1945dc		28		plp		                PLP
.1945dd		38		sec		                SEC
.1945de		6b		rtl		                RTL
.1945df		28		plp		pass_failure    PLP
.1945e0		18		clc		                CLC
.1945e1		6b		rtl		                RTL
.1945e2						NEXTCLUSTER12
.1945e2		8b		phb		                    PHB
.1945e3		0b		phd		                    PHD
.1945e4		08		php		                    PHP
.1945e5		48		pha		                PHA             ; begin setdbr macro
.1945e6		08		php		                PHP
.1945e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1945e9		a9 00		lda #$00	                LDA #0
.1945eb		48		pha		                PHA
.1945ec		ab		plb		                PLB
.1945ed		28		plp		                PLP
.1945ee		68		pla		                PLA             ; end setdbr macro
.1945ef		48		pha		                PHA             ; begin setdp macro
.1945f0		08		php		                PHP
.1945f1		c2 20		rep #$20	                REP #$20        ; set A long
.1945f3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1945f6		5b		tcd		                TCD
.1945f7		28		plp		                PLP
.1945f8		68		pla		                PLA             ; end setdp macro
.1945f9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1945fb		22 ee 44 19	jsl $1944ee	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.1945ff		b0 03		bcs $194604	                    BCS chk_clus_id
.194601		82 41 00	brl $194645	                    BRL pass_failure
.194604		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.194606		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.194609		d0 0d		bne $194618	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.19460b						is_even
.19460b		c2 20		rep #$20	                REP #$20        ; set A long
.19460d		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.194611		29 ff 0f	and #$0fff	                    AND #$0FFF
.194614		85 28		sta $0348	                    STA DOS_TEMP
.194616		80 0c		bra $194624	                    BRA check_id
.194618						is_odd
.194618		c2 20		rep #$20	                REP #$20        ; set A long
.19461a		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.19461e		4a		lsr a		                    LSR A
.19461f		4a		lsr a		                    LSR A
.194620		4a		lsr a		                    LSR A
.194621		4a		lsr a		                    LSR A
.194622		85 28		sta $0348	                    STA DOS_TEMP
.194624						check_id
.194624		c2 20		rep #$20	                REP #$20        ; set A long
.194626		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.194628		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.19462b		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.19462e		f0 0f		beq $19463f	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.194630		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.194632		85 10		sta $0330	                    STA DOS_CLUS_ID
.194634		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.194636						ret_success
.194636		e2 20		sep #$20	                SEP #$20        ; set A short
.194638		64 0e		stz $032e	                    STZ DOS_STATUS
.19463a		28		plp		                    PLP
.19463b		2b		pld		                    PLD
.19463c		ab		plb		                    PLB
.19463d		38		sec		                    SEC
.19463e		6b		rtl		                    RTL
.19463f						no_more
.19463f		e2 20		sep #$20	                SEP #$20        ; set A short
.194641		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.194643		85 0e		sta $032e	                    STA DOS_STATUS
.194645		28		plp		pass_failure        PLP
.194646		2b		pld		                    PLD
.194647		ab		plb		                    PLB
.194648		18		clc		                    CLC
.194649		6b		rtl		                    RTL
.19464a						NEXTCLUSTER32
.19464a		8b		phb		                PHB
.19464b		0b		phd		                PHD
.19464c		08		php		                PHP
.19464d		48		pha		                PHA             ; begin setdbr macro
.19464e		08		php		                PHP
.19464f		e2 20		sep #$20	                SEP #$20        ; set A short
.194651		a9 00		lda #$00	                LDA #0
.194653		48		pha		                PHA
.194654		ab		plb		                PLB
.194655		28		plp		                PLP
.194656		68		pla		                PLA             ; end setdbr macro
.194657		48		pha		                PHA             ; begin setdp macro
.194658		08		php		                PHP
.194659		c2 20		rep #$20	                REP #$20        ; set A long
.19465b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19465e		5b		tcd		                TCD
.19465f		28		plp		                PLP
.194660		68		pla		                PLA             ; end setdp macro
.194661		c2 30		rep #$30	                REP #$30        ; set A&X long
.194663		22 56 45 19	jsl $194556	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.194667		90 53		bcc $1946bc	                BCC ret_failure                 ; If it did not work, return the error
.194669		e2 20		sep #$20	                SEP #$20        ; set A short
.19466b		bf 00 a5 18	lda $18a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.19466f		85 28		sta $0348	                STA DOS_TEMP
.194671		bf 01 a5 18	lda $18a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.194675		85 29		sta $0349	                STA DOS_TEMP+1
.194677		bf 02 a5 18	lda $18a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.19467b		85 2a		sta $034a	                STA DOS_TEMP+2
.19467d		bf 03 a5 18	lda $18a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.194681		85 2b		sta $034b	                STA DOS_TEMP+3
.194683		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.194685		c9 ff		cmp #$ff	                CMP #$FF
.194687		d0 18		bne $1946a1	                BNE found_next
.194689		a5 29		lda $0349	                LDA DOS_TEMP+1
.19468b		c9 ff		cmp #$ff	                CMP #$FF
.19468d		d0 12		bne $1946a1	                BNE found_next
.19468f		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194691		c9 ff		cmp #$ff	                CMP #$FF
.194693		d0 0c		bne $1946a1	                BNE found_next
.194695		a5 2b		lda $034b	                LDA DOS_TEMP+3
.194697		c9 0f		cmp #$0f	                CMP #$0F
.194699		d0 06		bne $1946a1	                BNE found_next                  ; No: return this cluster as the next
.19469b		e2 20		sep #$20	                SEP #$20        ; set A short
.19469d		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.19469f		80 1b		bra $1946bc	                BRA ret_failure
.1946a1						found_next
.1946a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1946a3		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.1946a5		85 10		sta $0330	                STA DOS_CLUS_ID
.1946a7		a5 29		lda $0349	                LDA DOS_TEMP+1
.1946a9		85 11		sta $0331	                STA DOS_CLUS_ID+1
.1946ab		a5 2a		lda $034a	                LDA DOS_TEMP+2
.1946ad		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1946af		a5 2b		lda $034b	                LDA DOS_TEMP+3
.1946b1		85 13		sta $0333	                STA DOS_CLUS_ID+3
.1946b3						ret_success
.1946b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1946b5		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.1946b7		28		plp		                PLP
.1946b8		2b		pld		                PLD
.1946b9		ab		plb		                PLB
.1946ba		38		sec		                SEC
.1946bb		6b		rtl		                RTL
.1946bc						ret_failure
.1946bc		e2 20		sep #$20	                SEP #$20        ; set A short
.1946be		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.1946c0		28		plp		                PLP
.1946c1		2b		pld		                PLD
.1946c2		ab		plb		                PLB
.1946c3		18		clc		                CLC
.1946c4		6b		rtl		                RTL
.1946c5						DOS_READNEXT
.1946c5		08		php		                PHP
.1946c6		c2 30		rep #$30	                REP #$30        ; set A&X long
.1946c8		22 c1 45 19	jsl $1945c1	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.1946cc		90 09		bcc $1946d7	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.1946ce		22 ad 41 19	jsl $1941ad	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.1946d2		90 03		bcc $1946d7	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.1946d4		28		plp		ret_success     PLP
.1946d5		38		sec		                SEC
.1946d6		6b		rtl		                RTL
.1946d7		28		plp		pass_failure    PLP
.1946d8		18		clc		                CLC
.1946d9		6b		rtl		                RTL
.1946da						DOS_FREECLUS
.1946da		08		php		                PHP
.1946db		48		pha		                PHA             ; begin setdp macro
.1946dc		08		php		                PHP
.1946dd		c2 20		rep #$20	                REP #$20        ; set A long
.1946df		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1946e2		5b		tcd		                TCD
.1946e3		28		plp		                PLP
.1946e4		68		pla		                PLA             ; end setdp macro
.1946e5		e2 20		sep #$20	                SEP #$20        ; set A short
.1946e7		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.1946eb		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.1946ed		d0 08		bne $1946f7	                BNE fat32                       ; No: assume it's FAT32
.1946ef		22 6b 47 19	jsl $19476b	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.1946f3		90 0d		bcc $194702	                BCC pass_failure                ; If there was an error, pass it up the chain
.1946f5		80 06		bra $1946fd	                BRA ret_success
.1946f7		22 43 48 19	jsl $194843	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.1946fb		90 05		bcc $194702	                BCC pass_failure                ; If there was an error, pass it up the chain
.1946fd		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.1946ff		28		plp		                PLP
.194700		38		sec		                SEC
.194701		6b		rtl		                RTL
.194702		28		plp		pass_failure    PLP
.194703		18		clc		                CLC
.194704		6b		rtl		                RTL
.194705						FDC_READ2FAT12
.194705		8b		phb		                    PHB
.194706		0b		phd		                    PHD
.194707		08		php		                    PHP
.194708		48		pha		                PHA             ; begin setdbr macro
.194709		08		php		                PHP
.19470a		e2 20		sep #$20	                SEP #$20        ; set A short
.19470c		a9 00		lda #$00	                LDA #0
.19470e		48		pha		                PHA
.19470f		ab		plb		                PLB
.194710		28		plp		                PLP
.194711		68		pla		                PLA             ; end setdbr macro
.194712		48		pha		                PHA             ; begin setdp macro
.194713		08		php		                PHP
.194714		c2 20		rep #$20	                REP #$20        ; set A long
.194716		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194719		5b		tcd		                TCD
.19471a		28		plp		                PLP
.19471b		68		pla		                PLA             ; end setdp macro
.19471c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19471e		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.194721		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.194723		a9 18 00	lda #$0018	                    LDA #`DOS_FAT_SECTORS
.194726		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.194728		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.19472a		85 02		sta $0322	                    STA BIOS_LBA
.19472c		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.19472e		85 04		sta $0324	                    STA BIOS_LBA+2
.194730		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.194734		b0 07		bcs $19473d	                    BCS inc_sect2                   ; If success: start getting the second sector
.194736		e2 20		sep #$20	                SEP #$20        ; set A short
.194738		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.19473a		82 1c 00	brl $194759	                    BRL ret_failure
.19473d						inc_sect2
.19473d		c2 20		rep #$20	                REP #$20        ; set A long
.19473f		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.194741		d0 02		bne $194745	                    BNE inc_buff_ptr
.194743		e6 04		inc $0324	                    INC BIOS_LBA+2
.194745		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194748		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.19474a		a9 18 00	lda #$0018	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.19474d		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.19474f		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.194753		b0 0d		bcs $194762	                    BCS ret_success                 ; If success, return success
.194755		e2 20		sep #$20	                SEP #$20        ; set A short
.194757		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.194759						ret_failure
.194759		e2 20		sep #$20	                SEP #$20        ; set A short
.19475b		85 0e		sta $032e	                    STA DOS_STATUS
.19475d		28		plp		                    PLP
.19475e		2b		pld		                    PLD
.19475f		ab		plb		                    PLB
.194760		18		clc		                    CLC
.194761		6b		rtl		                    RTL
.194762						ret_success
.194762		e2 20		sep #$20	                SEP #$20        ; set A short
.194764		64 0e		stz $032e	                    STZ DOS_STATUS
.194766		28		plp		                    PLP
.194767		2b		pld		                    PLD
.194768		ab		plb		                    PLB
.194769		38		sec		                    SEC
.19476a		6b		rtl		                    RTL
.19476b						DOS_FREECLUS12
.19476b		da		phx		                PHX
.19476c		8b		phb		                PHB
.19476d		0b		phd		                PHD
.19476e		08		php		                PHP
.19476f		48		pha		                PHA             ; begin setdbr macro
.194770		08		php		                PHP
.194771		e2 20		sep #$20	                SEP #$20        ; set A short
.194773		a9 00		lda #$00	                LDA #0
.194775		48		pha		                PHA
.194776		ab		plb		                PLB
.194777		28		plp		                PLP
.194778		68		pla		                PLA             ; end setdbr macro
.194779		48		pha		                PHA             ; begin setdp macro
.19477a		08		php		                PHP
.19477b		c2 20		rep #$20	                REP #$20        ; set A long
.19477d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194780		5b		tcd		                TCD
.194781		28		plp		                PLP
.194782		68		pla		                PLA             ; end setdp macro
.194783		c2 30		rep #$30	                REP #$30        ; set A&X long
.194785		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.194788		85 10		sta $0330	                STA DOS_CLUS_ID
.19478a		a9 00 00	lda #$0000	                LDA #0
.19478d		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19478f		22 7b 44 19	jsl $19447b	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.194793		22 05 47 19	jsl $194705	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.194797		b0 07		bcs $1947a0	                BCS start_of_fat                ; If success, move X to the start of the FAT
.194799		e2 20		sep #$20	                SEP #$20        ; set A short
.19479b		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.19479d		82 99 00	brl $194839	                BRL ret_failure
.1947a0						start_of_fat
.1947a0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1947a2		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.1947a4		89 01 00	bit #$0001	                BIT #1
.1947a7		d0 09		bne $1947b2	                BNE is_odd
.1947a9		bf 00 a5 18	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.1947ad		29 ff 0f	and #$0fff	                AND #$0FFF
.1947b0		80 08		bra $1947ba	                BRA chk_available
.1947b2		bf 00 a5 18	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.1947b6		4a		lsr a		                LSR A
.1947b7		4a		lsr a		                LSR A
.1947b8		4a		lsr a		                LSR A
.1947b9		4a		lsr a		                LSR A
.1947ba						chk_available
.1947ba		85 28		sta $0348	                STA DOS_TEMP
.1947bc		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.1947bf		f0 03		beq $1947c4	                BEQ chk_found
.1947c1		82 39 00	brl $1947fd	                BRL next_cluster                ; No: advance to the next cluster
.1947c4		8a		txa		chk_found       TXA
.1947c5		85 2a		sta $034a	                STA DOS_TEMP+2
.1947c7		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.1947c9		89 01 00	bit #$0001	                BIT #1
.1947cc		d0 0d		bne $1947db	                BNE is_odd2
.1947ce						is_even2
.1947ce		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.1947d2		09 ff 0f	ora #$0fff	                ORA #$0FFF
.1947d5		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.1947d9		80 0b		bra $1947e6	                BRA write_fat
.1947db						is_odd2
.1947db		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.1947df		09 f0 ff	ora #$fff0	                ORA #$FFF0
.1947e2		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.1947e6		22 0d 49 19	jsl $19490d	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.1947ea		b0 07		bcs $1947f3	                BCS ret_success                 ; If success: return success
.1947ec		e2 20		sep #$20	                SEP #$20        ; set A short
.1947ee		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.1947f0		82 46 00	brl $194839	                BRL ret_failure
.1947f3						ret_success
.1947f3		e2 20		sep #$20	                SEP #$20        ; set A short
.1947f5		64 0e		stz $032e	                STZ DOS_STATUS
.1947f7		28		plp		                PLP
.1947f8		2b		pld		                PLD
.1947f9		ab		plb		                PLB
.1947fa		fa		plx		                PLX
.1947fb		38		sec		                SEC
.1947fc		6b		rtl		                RTL
.1947fd						next_cluster
.1947fd		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.1947ff		d0 02		bne $194803	                BNE calc_entry
.194801		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.194803		22 7b 44 19	jsl $19447b	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.194807		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.19480a		f0 03		beq $19480f	                BEQ chk_end_of_fat
.19480c		82 93 ff	brl $1947a2	                BRL chk_cluster                 ; No: go back and check it too
.19480f						chk_end_of_fat
.19480f		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.194811		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.194815		d0 0f		bne $194826	                BNE next_2
.194817		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194819		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.19481d		d0 07		bne $194826	                BNE next_2                      ; No: get the next to sectors
.19481f		e2 20		sep #$20	                SEP #$20        ; set A short
.194821		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.194823		82 13 00	brl $194839	                BRL ret_failure
.194826						next_2
.194826		22 05 47 19	jsl $194705	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.19482a		90 06		bcc $194832	                BCC fat_fail                    ; If failed: return error
.19482c		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.19482f		82 70 ff	brl $1947a2	                BRL chk_cluster                 ; And start checking from there
.194832						fat_fail
.194832		e2 20		sep #$20	                SEP #$20        ; set A short
.194834		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194836		82 00 00	brl $194839	                BRL ret_failure
.194839						ret_failure
.194839		e2 20		sep #$20	                SEP #$20        ; set A short
.19483b		85 0e		sta $032e	                STA DOS_STATUS
.19483d		28		plp		                PLP
.19483e		2b		pld		                PLD
.19483f		ab		plb		                PLB
.194840		fa		plx		                PLX
.194841		18		clc		                CLC
.194842		6b		rtl		                RTL
.194843						DOS_FREECLUS32
.194843		8b		phb		                PHB
.194844		0b		phd		                PHD
.194845		08		php		                PHP
.194846		48		pha		                PHA             ; begin setdbr macro
.194847		08		php		                PHP
.194848		e2 20		sep #$20	                SEP #$20        ; set A short
.19484a		a9 00		lda #$00	                LDA #0
.19484c		48		pha		                PHA
.19484d		ab		plb		                PLB
.19484e		28		plp		                PLP
.19484f		68		pla		                PLA             ; end setdbr macro
.194850		48		pha		                PHA             ; begin setdp macro
.194851		08		php		                PHP
.194852		c2 20		rep #$20	                REP #$20        ; set A long
.194854		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194857		5b		tcd		                TCD
.194858		28		plp		                PLP
.194859		68		pla		                PLA             ; end setdp macro
.19485a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19485c		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.19485f		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194861		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.194864		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194866		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.19486a		85 02		sta $0322	                STA BIOS_LBA
.19486c		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.194870		85 04		sta $0324	                STA BIOS_LBA+2
.194872		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.194876		b0 07		bcs $19487f	                BCS initial_entry               ; If OK: set the initial entry to check
.194878		e2 20		sep #$20	                SEP #$20        ; set A short
.19487a		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.19487c		82 6b 00	brl $1948ea	                BRL ret_failure
.19487f						initial_entry
.19487f		c2 20		rep #$20	                REP #$20        ; set A long
.194881		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.194884		85 10		sta $0330	                STA DOS_CLUS_ID
.194886		a9 00 00	lda #$0000	                LDA #0
.194889		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19488b		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.19488e		bf 00 a3 18	lda $18a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.194892		d0 06		bne $19489a	                BNE next_entry                  ; No: move to the next entry
.194894		bf 02 a3 18	lda $18a302,x	                LDA DOS_SECTOR+2,X
.194898		f0 36		beq $1948d0	                BEQ found_free                  ; Yes: go to allocate and return it
.19489a		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.19489c		d0 02		bne $1948a0	                BNE inc_ptr
.19489e		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.1948a0		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.1948a1		e8		inx		                INX
.1948a2		e8		inx		                INX
.1948a3		e8		inx		                INX
.1948a4		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.1948a7		90 e5		bcc $19488e	                BLT chk_entry                   ; No: check this entry
.1948a9		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.1948ab		d0 18		bne $1948c5	                BNE get_block
.1948ad		e6 04		inc $0324	                INC BIOS_LBA+2
.1948af		a5 04		lda $0324	                LDA BIOS_LBA+2
.1948b1		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.1948b5		90 0e		bcc $1948c5	                BLT get_block
.1948b7		a5 02		lda $0322	                LDA BIOS_LBA
.1948b9		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA
.1948bd		90 06		bcc $1948c5	                BLT get_block
.1948bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1948c1		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.1948c3		80 25		bra $1948ea	                BRA ret_failure
.1948c5		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.1948c9		90 1b		bcc $1948e6	                BCC ret_fat_error               ; If error: throw a FAT error
.1948cb		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.1948ce		80 be		bra $19488e	                BRA chk_entry                   ; Check this entry
.1948d0						found_free
.1948d0		c2 20		rep #$20	                REP #$20        ; set A long
.1948d2		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.1948d5		9f 00 a3 18	sta $18a300,x	                STA DOS_SECTOR,X
.1948d9		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.1948dc		9f 02 a3 18	sta $18a302,x	                STA DOS_SECTOR+2,X
.1948e0		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.1948e4		b0 0d		bcs $1948f3	                BCS ret_success                 ; If OK: return success
.1948e6						ret_fat_error
.1948e6		e2 20		sep #$20	                SEP #$20        ; set A short
.1948e8		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.1948ea						ret_failure
.1948ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1948ec		85 0e		sta $032e	                STA DOS_STATUS
.1948ee		28		plp		                PLP
.1948ef		2b		pld		                PLD
.1948f0		ab		plb		                PLB
.1948f1		18		clc		                CLC
.1948f2		6b		rtl		                RTL
.1948f3						ret_success
.1948f3		e2 20		sep #$20	                SEP #$20        ; set A short
.1948f5		64 0e		stz $032e	                STZ DOS_STATUS
.1948f7		28		plp		                PLP
.1948f8		2b		pld		                PLD
.1948f9		ab		plb		                PLB
.1948fa		38		sec		                SEC
.1948fb		6b		rtl		                RTL
.1948fc						DELCLUSTER
.1948fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1948fe		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194902		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194904		d0 04		bne $19490a	                BNE fat32                       ; No: assume it's FAT32
.194906		5c 54 49 19	jmp $194954	fat12           JML DELCLUSTER12
.19490a		4c a2 49	jmp $1949a2	fat32           JMP DELCLUSTER32
.19490d						WRITEFAT12
.19490d		8b		phb		                PHB
.19490e		0b		phd		                PHD
.19490f		48		pha		                PHA             ; begin setdbr macro
.194910		08		php		                PHP
.194911		e2 20		sep #$20	                SEP #$20        ; set A short
.194913		a9 00		lda #$00	                LDA #0
.194915		48		pha		                PHA
.194916		ab		plb		                PLB
.194917		28		plp		                PLP
.194918		68		pla		                PLA             ; end setdbr macro
.194919		48		pha		                PHA             ; begin setdp macro
.19491a		08		php		                PHP
.19491b		c2 20		rep #$20	                REP #$20        ; set A long
.19491d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194920		5b		tcd		                TCD
.194921		28		plp		                PLP
.194922		68		pla		                PLA             ; end setdp macro
.194923		c2 30		rep #$30	                REP #$30        ; set A&X long
.194925		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.194928		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19492a		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.19492d		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19492f		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.194931		85 02		sta $0322	                STA BIOS_LBA
.194933		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194935		85 04		sta $0324	                STA BIOS_LBA+2
.194937		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.19493b		90 14		bcc $194951	                BCC done
.19493d		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194940		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194942		a9 18 00	lda #$0018	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194945		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194947		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.194949		d0 02		bne $19494d	                BNE put_second
.19494b		e6 04		inc $0324	                INC BIOS_LBA+2
.19494d		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.194951		2b		pld		done            PLD
.194952		ab		plb		                PLB
.194953		6b		rtl		                RTL
.194954						DELCLUSTER12
.194954		8b		phb		                PHB
.194955		0b		phd		                PHD
.194956		08		php		                PHP
.194957		48		pha		                PHA             ; begin setdbr macro
.194958		08		php		                PHP
.194959		e2 20		sep #$20	                SEP #$20        ; set A short
.19495b		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19495d		48		pha		                PHA
.19495e		ab		plb		                PLB
.19495f		28		plp		                PLP
.194960		68		pla		                PLA             ; end setdbr macro
.194961		48		pha		                PHA             ; begin setdp macro
.194962		08		php		                PHP
.194963		c2 20		rep #$20	                REP #$20        ; set A long
.194965		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194968		5b		tcd		                TCD
.194969		28		plp		                PLP
.19496a		68		pla		                PLA             ; end setdp macro
.19496b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19496d		22 ee 44 19	jsl $1944ee	                JSL FATFORCLUSTER12
.194971		8a		txa		                TXA                             ; Check to see if the index is odd or even
.194972		89 01 00	bit #$0001	                BIT #1
.194975		d0 08		bne $19497f	                BNE is_odd
.194977		bd 00 a5	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.19497a		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.19497d		80 06		bra $194985	                BRA save_update
.19497f		bd 00 a5	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.194982		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.194985		9d 00 a5	sta $18a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.194988		22 0d 49 19	jsl $19490d	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.19498c		b0 0b		bcs $194999	                BCS ret_success
.19498e						ret_failure
.19498e		e2 20		sep #$20	                SEP #$20        ; set A short
.194990		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194992		85 0e		sta $032e	                STA DOS_STATUS
.194994		28		plp		                PLP
.194995		2b		pld		                PLD
.194996		ab		plb		                PLB
.194997		18		clc		                CLC
.194998		6b		rtl		                RTL
.194999						ret_success
.194999		e2 20		sep #$20	                SEP #$20        ; set A short
.19499b		64 0e		stz $032e	                STZ DOS_STATUS
.19499d		28		plp		                PLP
.19499e		2b		pld		                PLD
.19499f		ab		plb		                PLB
.1949a0		38		sec		                SEC
.1949a1		6b		rtl		                RTL
.1949a2						DELCLUSTER32
.1949a2		8b		phb		                PHB
.1949a3		0b		phd		                PHD
.1949a4		08		php		                PHP
.1949a5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1949a7		48		pha		                PHA             ; begin setdbr macro
.1949a8		08		php		                PHP
.1949a9		e2 20		sep #$20	                SEP #$20        ; set A short
.1949ab		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1949ad		48		pha		                PHA
.1949ae		ab		plb		                PLB
.1949af		28		plp		                PLP
.1949b0		68		pla		                PLA             ; end setdbr macro
.1949b1		48		pha		                PHA             ; begin setdp macro
.1949b2		08		php		                PHP
.1949b3		c2 20		rep #$20	                REP #$20        ; set A long
.1949b5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1949b8		5b		tcd		                TCD
.1949b9		28		plp		                PLP
.1949ba		68		pla		                PLA             ; end setdp macro
.1949bb		22 56 45 19	jsl $194556	                JSL FATFORCLUSTER32
.1949bf		a9 00 00	lda #$0000	                LDA #0
.1949c2		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.1949c5		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.1949c8		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.1949cc		b0 0b		bcs $1949d9	                BCS ret_success
.1949ce						ret_failure
.1949ce		e2 20		sep #$20	                SEP #$20        ; set A short
.1949d0		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.1949d2		85 0e		sta $032e	                STA DOS_STATUS
.1949d4		28		plp		                PLP
.1949d5		2b		pld		                PLD
.1949d6		ab		plb		                PLB
.1949d7		18		clc		                CLC
.1949d8		6b		rtl		                RTL
.1949d9						ret_success
.1949d9		e2 20		sep #$20	                SEP #$20        ; set A short
.1949db		64 0e		stz $032e	                STZ DOS_STATUS
.1949dd		28		plp		                PLP
.1949de		2b		pld		                PLD
.1949df		ab		plb		                PLB
.1949e0		38		sec		                SEC
.1949e1		6b		rtl		                RTL
.1949e2						DOS_APPENDCLUS
.1949e2		8b		phb		                PHB
.1949e3		0b		phd		                PHD
.1949e4		08		php		                PHP
.1949e5		48		pha		                PHA             ; begin setdbr macro
.1949e6		08		php		                PHP
.1949e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1949e9		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1949eb		48		pha		                PHA
.1949ec		ab		plb		                PLB
.1949ed		28		plp		                PLP
.1949ee		68		pla		                PLA             ; end setdbr macro
.1949ef		48		pha		                PHA             ; begin setdp macro
.1949f0		08		php		                PHP
.1949f1		c2 20		rep #$20	                REP #$20        ; set A long
.1949f3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1949f6		5b		tcd		                TCD
.1949f7		28		plp		                PLP
.1949f8		68		pla		                PLA             ; end setdp macro
.1949f9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1949fb		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.1949fd		48		pha		                PHA
.1949fe		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194a00		48		pha		                PHA
.194a01		22 da 46 19	jsl $1946da	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.194a05		b0 09		bcs $194a10	                BCS save_cluster                ; If we got a cluster, write the data to it
.194a07		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.194a08		85 10		sta $0330	                STA DOS_CLUS_ID
.194a0a		68		pla		                PLA
.194a0b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194a0d		82 7d 00	brl $194a8d	                BRL pass_failure                ; Pass the failure back up the chain
.194a10		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.194a12		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194a15		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194a17		8d 38 a0	sta $18a038	                STA DOS_NEW_CLUSTER+2
.194a1a		22 ea 41 19	jsl $1941ea	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.194a1e		90 e7		bcc $194a07	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.194a20		68		pla		                PLA                             ; Restore the cluster of the file
.194a21		85 10		sta $0330	                STA DOS_CLUS_ID
.194a23		68		pla		                PLA
.194a24		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194a26		22 c1 45 19	jsl $1945c1	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.194a2a		b0 fa		bcs $194a26	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.194a2c		e2 20		sep #$20	                SEP #$20        ; set A short
.194a2e		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194a32		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194a34		d0 3d		bne $194a73	                BNE fat32                       ; No: assume it's FAT32
.194a36						fat12
.194a36		c2 20		rep #$20	                REP #$20        ; set A long
.194a38		22 7b 44 19	jsl $19447b	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.194a3c		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.194a3e		89 01 00	bit #$0001	                BIT #1
.194a41		d0 11		bne $194a54	                BNE is_odd
.194a43		ad 36 a0	lda $18a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.194a46		29 ff 0f	and #$0fff	                AND #$0FFF
.194a49		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194a4c		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.194a4f		29 00 f0	and #$f000	                AND #$F000
.194a52		80 10		bra $194a64	                BRA update_fat12
.194a54		ad 36 a0	lda $18a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.194a57		0a		asl a		                ASL A
.194a58		0a		asl a		                ASL A
.194a59		0a		asl a		                ASL A
.194a5a		0a		asl a		                ASL A
.194a5b		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194a5e		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.194a61		29 0f 00	and #$000f	                AND #$000F
.194a64		0d 36 a0	ora $18a036	update_fat12    ORA DOS_NEW_CLUSTER
.194a67		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194a6a		22 0d 49 19	jsl $19490d	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.194a6e		b0 22		bcs $194a92	                BCS ret_success
.194a70		82 1a 00	brl $194a8d	                BRL pass_failure
.194a73						fat32
.194a73		c2 20		rep #$20	                REP #$20        ; set A long
.194a75		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.194a78		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194a7b		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.194a7e		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.194a81		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.194a85		b0 0b		bcs $194a92	                BCS ret_success
.194a87		e2 20		sep #$20	                SEP #$20        ; set A short
.194a89		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.194a8b		85 0e		sta $032e	                STA DOS_STATUS
.194a8d		28		plp		pass_failure    PLP
.194a8e		2b		pld		                PLD
.194a8f		ab		plb		                PLB
.194a90		18		clc		                CLC
.194a91		6b		rtl		                RTL
.194a92						ret_success
.194a92		e2 20		sep #$20	                SEP #$20        ; set A short
.194a94		64 0e		stz $032e	                STZ DOS_STATUS
.194a96		28		plp		                PLP
.194a97		2b		pld		                PLD
.194a98		ab		plb		                PLB
.194a99		38		sec		                SEC
.194a9a		6b		rtl		                RTL
.194a9b						BCD2BIN
.194a9b		8b		phb		                PHB
.194a9c		0b		phd		                PHD
.194a9d		08		php		                PHP
.194a9e		48		pha		                PHA             ; begin setdbr macro
.194a9f		08		php		                PHP
.194aa0		e2 20		sep #$20	                SEP #$20        ; set A short
.194aa2		a9 00		lda #$00	                LDA #0
.194aa4		48		pha		                PHA
.194aa5		ab		plb		                PLB
.194aa6		28		plp		                PLP
.194aa7		68		pla		                PLA             ; end setdbr macro
.194aa8		48		pha		                PHA             ; begin setdp macro
.194aa9		08		php		                PHP
.194aaa		c2 20		rep #$20	                REP #$20        ; set A long
.194aac		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194aaf		5b		tcd		                TCD
.194ab0		28		plp		                PLP
.194ab1		68		pla		                PLA             ; end setdp macro
.194ab2		c2 30		rep #$30	                REP #$30        ; set A&X long
.194ab4		85 28		sta $0348	                STA DOS_TEMP
.194ab6		29 0f 00	and #$000f	                AND #$000F
.194ab9		85 2a		sta $034a	                STA DOS_TEMP+2
.194abb		a5 28		lda $0348	                LDA DOS_TEMP
.194abd		4a		lsr a		                LSR A
.194abe		4a		lsr a		                LSR A
.194abf		4a		lsr a		                LSR A
.194ac0		4a		lsr a		                LSR A
.194ac1		85 28		sta $0348	                STA DOS_TEMP
.194ac3		29 0f 00	and #$000f	                AND #$000F
.194ac6		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194aca		a9 0a 00	lda #$000a	                LDA #10
.194acd		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194ad1		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194ad5		18		clc		                CLC
.194ad6		65 2a		adc $034a	                ADC DOS_TEMP+2
.194ad8		85 2a		sta $034a	                STA DOS_TEMP+2
.194ada		a5 28		lda $0348	                LDA DOS_TEMP
.194adc		4a		lsr a		                LSR A
.194add		4a		lsr a		                LSR A
.194ade		4a		lsr a		                LSR A
.194adf		4a		lsr a		                LSR A
.194ae0		85 28		sta $0348	                STA DOS_TEMP
.194ae2		29 0f 00	and #$000f	                AND #$000F
.194ae5		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194ae9		a9 64 00	lda #$0064	                LDA #100
.194aec		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194af0		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194af4		18		clc		                CLC
.194af5		65 2a		adc $034a	                ADC DOS_TEMP+2
.194af7		85 2a		sta $034a	                STA DOS_TEMP+2
.194af9		a5 28		lda $0348	                LDA DOS_TEMP
.194afb		4a		lsr a		                LSR A
.194afc		4a		lsr a		                LSR A
.194afd		4a		lsr a		                LSR A
.194afe		4a		lsr a		                LSR A
.194aff		29 0f 00	and #$000f	                AND #$000F
.194b02		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194b06		a9 e8 03	lda #$03e8	                LDA #1000
.194b09		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194b0d		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194b11		18		clc		                CLC
.194b12		65 2a		adc $034a	                ADC DOS_TEMP+2
.194b14		28		plp		                PLP
.194b15		2b		pld		                PLD
.194b16		ab		plb		                PLB
.194b17		6b		rtl		                RTL
.194b18						DOS_RTCCREATE
.194b18		8b		phb		                PHB
.194b19		0b		phd		                PHD
.194b1a		08		php		                PHP
.194b1b		48		pha		                PHA             ; begin setdbr macro
.194b1c		08		php		                PHP
.194b1d		e2 20		sep #$20	                SEP #$20        ; set A short
.194b1f		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194b21		48		pha		                PHA
.194b22		ab		plb		                PLB
.194b23		28		plp		                PLP
.194b24		68		pla		                PLA             ; end setdbr macro
.194b25		48		pha		                PHA             ; begin setdp macro
.194b26		08		php		                PHP
.194b27		c2 20		rep #$20	                REP #$20        ; set A long
.194b29		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194b2c		5b		tcd		                TCD
.194b2d		28		plp		                PLP
.194b2e		68		pla		                PLA             ; end setdp macro
.194b2f		c2 10		rep #$10	                REP #$10        ; set X long
.194b31		e2 20		sep #$20	                SEP #$20        ; set A short
.194b33		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.194b37		09 08		ora #$08	                ORA #%00001000
.194b39		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.194b3d		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.194b41		85 29		sta $0349	                STA DOS_TEMP+1
.194b43		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.194b47		85 28		sta $0348	                STA DOS_TEMP
.194b49		c2 20		rep #$20	                REP #$20        ; set A long
.194b4b		a5 28		lda $0348	                LDA DOS_TEMP
.194b4d		22 9b 4a 19	jsl $194a9b	                JSL BCD2BIN                 ; Convert it to binary
.194b51		85 28		sta $0348	                STA DOS_TEMP
.194b53		38		sec		                SEC                         ; Year is relative to 1980
.194b54		e9 bc 07	sbc #$07bc	                SBC #1980
.194b57		c2 20		rep #$20	                REP #$20        ; set A long
.194b59		0a		asl a		                ASL A
.194b5a		0a		asl a		                ASL A
.194b5b		0a		asl a		                ASL A
.194b5c		0a		asl a		                ASL A
.194b5d		0a		asl a		                ASL A
.194b5e		0a		asl a		                ASL A
.194b5f		0a		asl a		                ASL A
.194b60		0a		asl a		                ASL A
.194b61		0a		asl a		                ASL A
.194b62		29 00 fe	and #$fe00	                AND #$FE00
.194b65		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194b68		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b6a		e2 20		sep #$20	                SEP #$20        ; set A short
.194b6c		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.194b70		c2 20		rep #$20	                REP #$20        ; set A long
.194b72		29 ff 00	and #$00ff	                AND #$00FF
.194b75		22 9b 4a 19	jsl $194a9b	                JSL BCD2BIN                 ; Convert it to binary
.194b79		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.194b7c		0a		asl a		                ASL A
.194b7d		0a		asl a		                ASL A
.194b7e		0a		asl a		                ASL A
.194b7f		0a		asl a		                ASL A
.194b80		0a		asl a		                ASL A
.194b81		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.194b84		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194b87		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194b89		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b8b		e2 20		sep #$20	                SEP #$20        ; set A short
.194b8d		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.194b91		c2 20		rep #$20	                REP #$20        ; set A long
.194b93		29 ff 00	and #$00ff	                AND #$00FF
.194b96		22 9b 4a 19	jsl $194a9b	                JSL BCD2BIN                 ; Convert it to binary
.194b9a		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.194b9d		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194ba0		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194ba2		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194ba4		e2 20		sep #$20	                SEP #$20        ; set A short
.194ba6		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.194baa		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.194bac		c2 20		rep #$20	                REP #$20        ; set A long
.194bae		29 ff 00	and #$00ff	                AND #$00FF
.194bb1		22 9b 4a 19	jsl $194a9b	                JSL BCD2BIN                 ; Convert it to binary
.194bb5		c2 20		rep #$20	                REP #$20        ; set A long
.194bb7		0a		asl a		                ASL A
.194bb8		0a		asl a		                ASL A
.194bb9		0a		asl a		                ASL A
.194bba		0a		asl a		                ASL A
.194bbb		0a		asl a		                ASL A
.194bbc		0a		asl a		                ASL A
.194bbd		0a		asl a		                ASL A
.194bbe		0a		asl a		                ASL A
.194bbf		0a		asl a		                ASL A
.194bc0		0a		asl a		                ASL A
.194bc1		0a		asl a		                ASL A
.194bc2		29 00 f8	and #$f800	                AND #$F800
.194bc5		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.194bc8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194bca		e2 20		sep #$20	                SEP #$20        ; set A short
.194bcc		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.194bd0		c2 20		rep #$20	                REP #$20        ; set A long
.194bd2		29 ff 00	and #$00ff	                AND #$00FF
.194bd5		22 9b 4a 19	jsl $194a9b	                JSL BCD2BIN                 ; Convert it to binary
.194bd9		c2 20		rep #$20	                REP #$20        ; set A long
.194bdb		0a		asl a		                ASL A
.194bdc		0a		asl a		                ASL A
.194bdd		0a		asl a		                ASL A
.194bde		0a		asl a		                ASL A
.194bdf		0a		asl a		                ASL A
.194be0		29 e0 07	and #$07e0	                AND #$07E0
.194be3		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.194be6		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194be8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194bea		e2 20		sep #$20	                SEP #$20        ; set A short
.194bec		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.194bf0		c2 20		rep #$20	                REP #$20        ; set A long
.194bf2		29 ff 00	and #$00ff	                AND #$00FF
.194bf5		22 9b 4a 19	jsl $194a9b	                JSL BCD2BIN                 ; Convert it to binary
.194bf9		c2 20		rep #$20	                REP #$20        ; set A long
.194bfb		29 1f 00	and #$001f	                AND #$001F
.194bfe		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.194c01		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194c03		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c05		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.194c09		29 f7 00	and #$00f7	                AND #%11110111
.194c0c		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.194c10		28		plp		                PLP
.194c11		2b		pld		                PLD
.194c12		ab		plb		                PLB
.194c13		6b		rtl		                RTL
.194c14						DOS_CREATE
.194c14		8b		phb		                PHB
.194c15		0b		phd		                PHD
.194c16		08		php		                PHP
.194c17		48		pha		                PHA             ; begin setdbr macro
.194c18		08		php		                PHP
.194c19		e2 20		sep #$20	                SEP #$20        ; set A short
.194c1b		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194c1d		48		pha		                PHA
.194c1e		ab		plb		                PLB
.194c1f		28		plp		                PLP
.194c20		68		pla		                PLA             ; end setdbr macro
.194c21		48		pha		                PHA             ; begin setdp macro
.194c22		08		php		                PHP
.194c23		c2 20		rep #$20	                REP #$20        ; set A long
.194c25		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194c28		5b		tcd		                TCD
.194c29		28		plp		                PLP
.194c2a		68		pla		                PLA             ; end setdp macro
.194c2b		c2 30		rep #$30	                REP #$30        ; set A&X long
.194c2d		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.194c30		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c32		85 28		sta $0348	                STA DOS_TEMP
.194c34		c8		iny		                INY
.194c35		c8		iny		                INY
.194c36		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c38		85 2a		sta $034a	                STA DOS_TEMP+2
.194c3a		e2 20		sep #$20	                SEP #$20        ; set A short
.194c3c		a0 00 00	ldy #$0000	                LDY #0
.194c3f		a2 00 00	ldx #$0000	                LDX #0
.194c42		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.194c44		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.194c46		f0 04		beq $194c4c	                BEQ find_file                   ; If it's NULL, we're done
.194c48		e8		inx		                INX
.194c49		c8		iny		                INY
.194c4a		80 f6		bra $194c42	                BRA path_loop
.194c4c		22 fb 42 19	jsl $1942fb	find_file       JSL DOS_PARSE_PATH
.194c50		22 93 43 19	jsl $194393	                JSL DOS_FINDFILE
.194c54		90 07		bcc $194c5d	                BCC set_device
.194c56		e2 20		sep #$20	                SEP #$20        ; set A short
.194c58		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.194c5a		82 d2 00	brl $194d2f	                BRL ret_failure
.194c5d						set_device
.194c5d		e2 20		sep #$20	                SEP #$20        ; set A short
.194c5f		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.194c62		a5 01		lda $0321	                LDA BIOS_DEV
.194c64		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c66						validate_name
.194c66		22 da 46 19	jsl $1946da	                JSL DOS_FREECLUS
.194c6a		b0 03		bcs $194c6f	                BCS save_data
.194c6c		82 c4 00	brl $194d33	                BRL pass_failure
.194c6f						save_data
.194c6f		c2 20		rep #$20	                REP #$20        ; set A long
.194c71		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.194c74		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.194c76		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c78		c8		iny		                INY
.194c79		c8		iny		                INY
.194c7a		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194c7c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c7e		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.194c81		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c83		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194c85		c8		iny		                INY
.194c86		c8		iny		                INY
.194c87		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c89		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194c8b		22 ea 41 19	jsl $1941ea	                JSL DOS_PUTCLUSTER
.194c8f		b0 00		bcs $194c91	                BCS find_dir
.194c91						find_dir
.194c91		c2 20		rep #$20	                REP #$20        ; set A long
.194c93		22 25 3d 19	jsl $193d25	                JSL DOS_DIRFINDFREE
.194c97		b0 1a		bcs $194cb3	                BCS set_entry
.194c99		c2 20		rep #$20	                REP #$20        ; set A long
.194c9b		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.194c9e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.194ca0		85 10		sta $0330	                STA DOS_CLUS_ID
.194ca2		c8		iny		                INY
.194ca3		c8		iny		                INY
.194ca4		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ca6		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194ca8		22 a2 49 19	jsl $1949a2	                JSL DELCLUSTER32                ; Delete the cluster
.194cac		e2 20		sep #$20	                SEP #$20        ; set A short
.194cae		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.194cb0		82 7c 00	brl $194d2f	                BRL ret_failure
.194cb3						set_entry
.194cb3		e2 20		sep #$20	                SEP #$20        ; set A short
.194cb5		a0 00 00	ldy #$0000	                LDY #0
.194cb8		a9 00		lda #$00	                LDA #0                          ; NULL
.194cba		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.194cbc		c8		iny		                INY
.194cbd		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.194cc0		d0 f8		bne $194cba	                BNE copy_dir_loop
.194cc2		a0 00 00	ldy #$0000	                LDY #0
.194cc5		b9 3a a0	lda $18a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.194cc8		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194cca		c8		iny		                INY
.194ccb		c0 0b 00	cpy #$000b	                CPY #11
.194cce		d0 f5		bne $194cc5	                BNE name_loop
.194cd0		c2 20		rep #$20	                REP #$20        ; set A long
.194cd2		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.194cd5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194cd7		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.194cda		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194cdc		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.194cdf		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ce1		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.194ce4		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194ce6		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.194ce9		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ceb		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.194cee		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194cf0		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.194cf3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194cf5		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.194cf8		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194cfa		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.194cfd		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.194d00		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194d02		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.194d05		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194d07		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.194d0a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d0c		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.194d0f		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194d11		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.194d14		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194d16		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.194d19		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d1b		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.194d1e		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194d20		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.194d23		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194d25		c2 20		rep #$20	                REP #$20        ; set A long
.194d27		22 e3 3d 19	jsl $193de3	                JSL DOS_DIRWRITE
.194d2b		b0 0b		bcs $194d38	                BCS ret_success
.194d2d		80 04		bra $194d33	                BRA pass_failure
.194d2f						ret_failure
.194d2f		e2 20		sep #$20	                SEP #$20        ; set A short
.194d31		85 0e		sta $032e	                STA DOS_STATUS
.194d33		28		plp		pass_failure    PLP
.194d34		2b		pld		                PLD
.194d35		ab		plb		                PLB
.194d36		18		clc		                CLC
.194d37		6b		rtl		                RTL
.194d38						ret_success
.194d38		e2 20		sep #$20	                SEP #$20        ; set A short
.194d3a		64 0e		stz $032e	                STZ DOS_STATUS
.194d3c		28		plp		                PLP
.194d3d		2b		pld		                PLD
.194d3e		ab		plb		                PLB
.194d3f		38		sec		                SEC
.194d40		6b		rtl		                RTL
.194d41						DOS_COPYPATH
.194d41		da		phx		                PHX
.194d42		5a		phy		                PHY
.194d43		8b		phb		                PHB
.194d44		0b		phd		                PHD
.194d45		08		php		                PHP
.194d46		48		pha		                PHA             ; begin setdbr macro
.194d47		08		php		                PHP
.194d48		e2 20		sep #$20	                SEP #$20        ; set A short
.194d4a		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194d4c		48		pha		                PHA
.194d4d		ab		plb		                PLB
.194d4e		28		plp		                PLP
.194d4f		68		pla		                PLA             ; end setdbr macro
.194d50		48		pha		                PHA             ; begin setdp macro
.194d51		08		php		                PHP
.194d52		c2 20		rep #$20	                REP #$20        ; set A long
.194d54		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194d57		5b		tcd		                TCD
.194d58		28		plp		                PLP
.194d59		68		pla		                PLA             ; end setdp macro
.194d5a		c2 30		rep #$30	                REP #$30        ; set A&X long
.194d5c		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.194d5f		a2 00 00	ldx #$0000	                LDX #0
.194d62		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.194d64		e8		inx		                INX
.194d65		e8		inx		                INX
.194d66		e0 00 01	cpx #$0100	                CPX #256
.194d69		d0 f7		bne $194d62	                BNE clr_loop
.194d6b		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.194d6d		d0 04		bne $194d73	                BNE get_path            ; No: attempt to fetch the path
.194d6f		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.194d71		f0 27		beq $194d9a	                BEQ done                ; Yes: return an empty buffer
.194d73		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.194d76		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d78		85 28		sta $0348	                STA DOS_TEMP
.194d7a		c8		iny		                INY
.194d7b		c8		iny		                INY
.194d7c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d7e		85 2a		sta $034a	                STA DOS_TEMP+2
.194d80		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.194d82		d0 04		bne $194d88	                BNE start_copy          ; No: start copying it
.194d84		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194d86		f0 12		beq $194d9a	                BEQ done                ; Yes: return an empty buffer
.194d88						start_copy
.194d88		e2 20		sep #$20	                SEP #$20        ; set A short
.194d8a		a2 00 00	ldx #$0000	                LDX #0
.194d8d		a0 00 00	ldy #$0000	                LDY #0
.194d90		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.194d92		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.194d94		f0 04		beq $194d9a	                BEQ done
.194d96		e8		inx		                INX
.194d97		c8		iny		                INY
.194d98		d0 f6		bne $194d90	                BNE loop
.194d9a		28		plp		done            PLP
.194d9b		2b		pld		                PLD
.194d9c		ab		plb		                PLB
.194d9d		7a		ply		                PLY
.194d9e		fa		plx		                PLX
.194d9f		6b		rtl		                RTL

;******  Return to file: src\SDOS.asm

.194da0						DOS_TEST
.194da0		8b		phb		                PHB
.194da1		0b		phd		                PHD
.194da2		08		php		                PHP
.194da3		48		pha		                PHA             ; begin setdbr macro
.194da4		08		php		                PHP
.194da5		e2 20		sep #$20	                SEP #$20        ; set A short
.194da7		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194da9		48		pha		                PHA
.194daa		ab		plb		                PLB
.194dab		28		plp		                PLP
.194dac		68		pla		                PLA             ; end setdbr macro
.194dad		48		pha		                PHA             ; begin setdp macro
.194dae		08		php		                PHP
.194daf		c2 20		rep #$20	                REP #$20        ; set A long
.194db1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194db4		5b		tcd		                TCD
.194db5		28		plp		                PLP
.194db6		68		pla		                PLA             ; end setdp macro
.194db7		c2 30		rep #$30	                REP #$30        ; set A&X long
.194db9		a9 df 4d	lda #$4ddf	                LDA #<>src_file
.194dbc		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.194dc0		a9 19 00	lda #$0019	                LDA #`src_file
.194dc3		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.194dc7		a9 ec 4d	lda #$4dec	                LDA #<>dst_file
.194dca		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.194dce		a9 19 00	lda #$0019	                LDA #`dst_file
.194dd1		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.194dd5		22 11 56 19	jsl $195611	                JSL IF_COPY
.194dd9		b0 00		bcs $194ddb	                BCS done
.194ddb		28		plp		done            PLP
.194ddc		2b		pld		                PLD
.194ddd		ab		plb		                PLB
.194dde		6b		rtl		                RTL
>194ddf		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>194de7		2e 62 61 73 00
>194dec		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>194df4		32 2e 62 61 73 00
.194dfa						IF_OPEN
.194dfa		da		phx		                PHX
.194dfb		5a		phy		                PHY
.194dfc		0b		phd		                PHD
.194dfd		8b		phb		                PHB
.194dfe		08		php		                PHP
.194dff		48		pha		                PHA             ; begin setdbr macro
.194e00		08		php		                PHP
.194e01		e2 20		sep #$20	                SEP #$20        ; set A short
.194e03		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194e05		48		pha		                PHA
.194e06		ab		plb		                PLB
.194e07		28		plp		                PLP
.194e08		68		pla		                PLA             ; end setdbr macro
.194e09		48		pha		                PHA             ; begin setdp macro
.194e0a		08		php		                PHP
.194e0b		c2 20		rep #$20	                REP #$20        ; set A long
.194e0d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194e10		5b		tcd		                TCD
.194e11		28		plp		                PLP
.194e12		68		pla		                PLA             ; end setdp macro
.194e13		e2 20		sep #$20	                SEP #$20        ; set A short
.194e15		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.194e18		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e1a		89 20		bit #$20	                BIT #FD_STAT_OPEN
.194e1c		f0 05		beq $194e23	                BEQ ok_to_open
.194e1e		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.194e20		82 87 06	brl $1954aa	                BRL IF_FAILURE
.194e23		22 41 4d 19	jsl $194d41	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.194e27		22 93 43 19	jsl $194393	                JSL DOS_FINDFILE                ; Attempt to find the file
.194e2b		b0 03		bcs $194e30	                BCS is_found                    ; If OK: we found the file
.194e2d		82 7e 06	brl $1954ae	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.194e30						is_found
.194e30		e2 20		sep #$20	                SEP #$20        ; set A short
.194e32		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.194e35		a5 01		lda $0321	                LDA BIOS_DEV
.194e37		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e39		c2 20		rep #$20	                REP #$20        ; set A long
.194e3b		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.194e3e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e40		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194e42		c8		iny		                INY
.194e43		c8		iny		                INY
.194e44		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e46		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194e48		22 ad 41 19	jsl $1941ad	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.194e4c		b0 03		bcs $194e51	                BCS read_cluster
.194e4e		82 5d 06	brl $1954ae	                BRL IF_PASSFAILURE
.194e51		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.194e54		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194e56		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e58		c8		iny		                INY
.194e59		c8		iny		                INY
.194e5a		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194e5c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e5e		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.194e61		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194e63		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e65		c8		iny		                INY
.194e66		c8		iny		                INY
.194e67		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194e69		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e6b		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.194e6e		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194e70		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.194e73		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e75		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.194e78		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194e7a		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.194e7d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e7f		e2 20		sep #$20	                SEP #$20        ; set A short
.194e81		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.194e84		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.194e86		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194e88		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e8a		82 28 06	brl $1954b5	                BRL IF_SUCCESS
.194e8d						IF_CREATE
.194e8d		da		phx		                PHX
.194e8e		5a		phy		                PHY
.194e8f		0b		phd		                PHD
.194e90		8b		phb		                PHB
.194e91		08		php		                PHP
.194e92		48		pha		                PHA             ; begin setdbr macro
.194e93		08		php		                PHP
.194e94		e2 20		sep #$20	                SEP #$20        ; set A short
.194e96		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194e98		48		pha		                PHA
.194e99		ab		plb		                PLB
.194e9a		28		plp		                PLP
.194e9b		68		pla		                PLA             ; end setdbr macro
.194e9c		48		pha		                PHA             ; begin setdp macro
.194e9d		08		php		                PHP
.194e9e		c2 20		rep #$20	                REP #$20        ; set A long
.194ea0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194ea3		5b		tcd		                TCD
.194ea4		28		plp		                PLP
.194ea5		68		pla		                PLA             ; end setdp macro
.194ea6		22 14 4c 19	jsl $194c14	                JSL DOS_CREATE                  ; Attempt to create the file
.194eaa		90 18		bcc $194ec4	                BCC pass_failure                ; If it fails: pass the failure up the chain
.194eac		c2 30		rep #$30	                REP #$30        ; set A&X long
.194eae		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.194eb1		a9 00 00	lda #$0000	                LDA #0
.194eb4		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194eb6		c8		iny		                INY
.194eb7		c8		iny		                INY
.194eb8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194eba		e2 20		sep #$20	                SEP #$20        ; set A short
.194ebc		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.194ebf		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.194ec1		82 f1 05	brl $1954b5	                BRL IF_SUCCESS
.194ec4		82 e3 05	brl $1954aa	pass_failure    BRL IF_FAILURE
.194ec7						IF_CLOSE
.194ec7		da		phx		                PHX
.194ec8		5a		phy		                PHY
.194ec9		0b		phd		                PHD
.194eca		8b		phb		                PHB
.194ecb		08		php		                PHP
.194ecc		48		pha		                PHA             ; begin setdbr macro
.194ecd		08		php		                PHP
.194ece		e2 20		sep #$20	                SEP #$20        ; set A short
.194ed0		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194ed2		48		pha		                PHA
.194ed3		ab		plb		                PLB
.194ed4		28		plp		                PLP
.194ed5		68		pla		                PLA             ; end setdbr macro
.194ed6		48		pha		                PHA             ; begin setdp macro
.194ed7		08		php		                PHP
.194ed8		c2 20		rep #$20	                REP #$20        ; set A long
.194eda		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194edd		5b		tcd		                TCD
.194ede		28		plp		                PLP
.194edf		68		pla		                PLA             ; end setdp macro
.194ee0		e2 20		sep #$20	                SEP #$20        ; set A short
.194ee2		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.194ee5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ee7		89 02		bit #$02	                BIT #FD_STAT_WRITE
.194ee9		f0 09		beq $194ef4	                BEQ set_flag                    ; No, just mark it closed
.194eeb		22 60 4f 19	jsl $194f60	                JSL IF_WRITE                    ; Attempt to write the cluster
.194eef		b0 03		bcs $194ef4	                BCS set_flag
.194ef1		82 ba 05	brl $1954ae	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.194ef4		22 af 55 19	jsl $1955af	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.194ef8		82 ba 05	brl $1954b5	                BRL IF_SUCCESS
.194efb						IF_READ
.194efb		da		phx		                PHX
.194efc		5a		phy		                PHY
.194efd		0b		phd		                PHD
.194efe		8b		phb		                PHB
.194eff		08		php		                PHP
.194f00		48		pha		                PHA             ; begin setdbr macro
.194f01		08		php		                PHP
.194f02		e2 20		sep #$20	                SEP #$20        ; set A short
.194f04		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194f06		48		pha		                PHA
.194f07		ab		plb		                PLB
.194f08		28		plp		                PLP
.194f09		68		pla		                PLA             ; end setdbr macro
.194f0a		48		pha		                PHA             ; begin setdp macro
.194f0b		08		php		                PHP
.194f0c		c2 20		rep #$20	                REP #$20        ; set A long
.194f0e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194f11		5b		tcd		                TCD
.194f12		28		plp		                PLP
.194f13		68		pla		                PLA             ; end setdp macro
.194f14		c2 10		rep #$10	                REP #$10        ; set X long
.194f16		e2 20		sep #$20	                SEP #$20        ; set A short
.194f18						get_dev
.194f18		e2 20		sep #$20	                SEP #$20        ; set A short
.194f1a		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.194f1d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f1f		85 01		sta $0321	                STA BIOS_DEV
.194f21		22 15 3f 19	jsl $193f15	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.194f25		c2 20		rep #$20	                REP #$20        ; set A long
.194f27		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.194f2a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f2c		85 10		sta $0330	                STA DOS_CLUS_ID
.194f2e		c8		iny		                INY
.194f2f		c8		iny		                INY
.194f30		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f32		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194f34		22 c1 45 19	jsl $1945c1	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.194f38		90 13		bcc $194f4d	                BCC pass_failure                ; If not OK: pass the failure up the chain
.194f3a		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.194f3d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f3f		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194f41		c8		iny		                INY
.194f42		c8		iny		                INY
.194f43		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f45		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194f47		22 ad 41 19	jsl $1941ad	                JSL DOS_GETCLUSTER              ; Get the cluster
.194f4b		b0 03		bcs $194f50	                BCS ret_success                 ; If ok: return success
.194f4d						pass_failure
.194f4d		82 5e 05	brl $1954ae	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194f50		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.194f53		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194f55		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f57		c8		iny		                INY
.194f58		c8		iny		                INY
.194f59		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194f5b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f5d		82 55 05	brl $1954b5	                BRL IF_SUCCESS
.194f60						IF_WRITE
.194f60		da		phx		                PHX
.194f61		5a		phy		                PHY
.194f62		0b		phd		                PHD
.194f63		8b		phb		                PHB
.194f64		08		php		                PHP
.194f65		48		pha		                PHA             ; begin setdbr macro
.194f66		08		php		                PHP
.194f67		e2 20		sep #$20	                SEP #$20        ; set A short
.194f69		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194f6b		48		pha		                PHA
.194f6c		ab		plb		                PLB
.194f6d		28		plp		                PLP
.194f6e		68		pla		                PLA             ; end setdbr macro
.194f6f		48		pha		                PHA             ; begin setdp macro
.194f70		08		php		                PHP
.194f71		c2 20		rep #$20	                REP #$20        ; set A long
.194f73		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194f76		5b		tcd		                TCD
.194f77		28		plp		                PLP
.194f78		68		pla		                PLA             ; end setdp macro
.194f79		c2 10		rep #$10	                REP #$10        ; set X long
.194f7b		e2 20		sep #$20	                SEP #$20        ; set A short
.194f7d		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.194f80		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f82		85 01		sta $0321	                STA BIOS_DEV
.194f84		22 15 3f 19	jsl $193f15	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.194f88		c2 20		rep #$20	                REP #$20        ; set A long
.194f8a		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.194f8d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f8f		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194f91		c8		iny		                INY
.194f92		c8		iny		                INY
.194f93		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f95		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194f97		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.194f9a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f9c		85 10		sta $0330	                STA DOS_CLUS_ID
.194f9e		c8		iny		                INY
.194f9f		c8		iny		                INY
.194fa0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194fa2		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194fa4		d0 1a		bne $194fc0	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.194fa6		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194fa8		d0 16		bne $194fc0	                BNE rewrite_cluster
.194faa		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.194fad		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194faf		85 10		sta $0330	                STA DOS_CLUS_ID
.194fb1		c8		iny		                INY
.194fb2		c8		iny		                INY
.194fb3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194fb5		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194fb7		22 e2 49 19	jsl $1949e2	                JSL DOS_APPENDCLUS              ; Append the cluster
.194fbb		b0 0c		bcs $194fc9	                BCS ret_success                 ; If OK: return success
.194fbd		82 ee 04	brl $1954ae	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194fc0		22 ea 41 19	jsl $1941ea	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.194fc4		b0 03		bcs $194fc9	                BCS ret_success                 ; If ok: return success
.194fc6		82 e5 04	brl $1954ae	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194fc9		82 e9 04	brl $1954b5	ret_success     BRL IF_SUCCESS
.194fcc						IF_DIROPEN
.194fcc		da		phx		                PHX
.194fcd		5a		phy		                PHY
.194fce		0b		phd		                PHD
.194fcf		8b		phb		                PHB
.194fd0		08		php		                PHP
.194fd1		48		pha		                PHA             ; begin setdbr macro
.194fd2		08		php		                PHP
.194fd3		e2 20		sep #$20	                SEP #$20        ; set A short
.194fd5		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194fd7		48		pha		                PHA
.194fd8		ab		plb		                PLB
.194fd9		28		plp		                PLP
.194fda		68		pla		                PLA             ; end setdbr macro
.194fdb		48		pha		                PHA             ; begin setdp macro
.194fdc		08		php		                PHP
.194fdd		c2 20		rep #$20	                REP #$20        ; set A long
.194fdf		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194fe2		5b		tcd		                TCD
.194fe3		28		plp		                PLP
.194fe4		68		pla		                PLA             ; end setdp macro
.194fe5		c2 30		rep #$30	                REP #$30        ; set A&X long
.194fe7		22 41 4d 19	jsl $194d41	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.194feb		22 fb 42 19	jsl $1942fb	                JSL DOS_PARSE_PATH          ; Parse the path
.194fef		22 15 3f 19	jsl $193f15	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.194ff3		b0 03		bcs $194ff8	                BCS get_root_dir            ; If successful: get the root directory
.194ff5		82 b6 04	brl $1954ae	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.194ff8						get_root_dir
.194ff8		c2 30		rep #$30	                REP #$30        ; set A&X long
.194ffa		22 ca 3b 19	jsl $193bca	                JSL DOS_DIROPEN
.194ffe		b0 03		bcs $195003	                BCS success
.195000		82 ab 04	brl $1954ae	                BRL IF_PASSFAILURE
.195003		82 af 04	brl $1954b5	success         BRL IF_SUCCESS
.195006						IF_DIRNEXT
.195006		5c 64 3c 19	jmp $193c64	                JML DOS_DIRNEXT
.19500a						IF_DELETE
.19500a		da		phx		                PHX
.19500b		5a		phy		                PHY
.19500c		0b		phd		                PHD
.19500d		8b		phb		                PHB
.19500e		08		php		                PHP
.19500f		48		pha		                PHA             ; begin setdbr macro
.195010		08		php		                PHP
.195011		e2 20		sep #$20	                SEP #$20        ; set A short
.195013		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195015		48		pha		                PHA
.195016		ab		plb		                PLB
.195017		28		plp		                PLP
.195018		68		pla		                PLA             ; end setdbr macro
.195019		48		pha		                PHA             ; begin setdp macro
.19501a		08		php		                PHP
.19501b		c2 20		rep #$20	                REP #$20        ; set A long
.19501d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195020		5b		tcd		                TCD
.195021		28		plp		                PLP
.195022		68		pla		                PLA             ; end setdp macro
.195023		c2 30		rep #$30	                REP #$30        ; set A&X long
.195025		22 93 43 19	jsl $194393	                JSL DOS_FINDFILE
.195029		b0 03		bcs $19502e	                BCS get_first_clus
.19502b		82 80 04	brl $1954ae	                BRL IF_PASSFAILURE
.19502e						get_first_clus
.19502e		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.195031		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.195033		85 10		sta $0330	                STA DOS_CLUS_ID
.195035		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.195038		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.19503a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19503c		a5 10		lda $0330	                LDA DOS_CLUS_ID
.19503e		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.195041		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.195043		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.195046		22 c1 45 19	jsl $1945c1	del_loop        JSL NEXTCLUSTER
.19504a		90 2f		bcc $19507b	                BCC del_one
.19504c		a5 10		lda $0330	                LDA DOS_CLUS_ID
.19504e		8d 2e a0	sta $18a02e	                STA DOS_NEXT_CLUS
.195051		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.195053		8d 30 a0	sta $18a030	                STA DOS_NEXT_CLUS+2
.195056		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.195059		85 10		sta $0330	                STA DOS_CLUS_ID
.19505b		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.19505e		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195060		22 a2 49 19	jsl $1949a2	                JSL DELCLUSTER32
.195064		b0 03		bcs $195069	                BCS go_next
.195066		82 45 04	brl $1954ae	                BRL IF_PASSFAILURE
.195069						go_next
.195069		ad 2e a0	lda $18a02e	                LDA DOS_NEXT_CLUS
.19506c		85 10		sta $0330	                STA DOS_CLUS_ID
.19506e		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.195071		ad 30 a0	lda $18a030	                LDA DOS_NEXT_CLUS+2
.195074		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195076		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.195079		80 cb		bra $195046	                BRA del_loop
.19507b						del_one
.19507b		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.19507e		85 10		sta $0330	                STA DOS_CLUS_ID
.195080		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.195083		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195085		22 fc 48 19	jsl $1948fc	                JSL DELCLUSTER
.195089		b0 03		bcs $19508e	                BCS free_dir_entry
.19508b		82 20 04	brl $1954ae	                BRL IF_PASSFAILURE
.19508e						free_dir_entry
.19508e		e2 20		sep #$20	                SEP #$20        ; set A short
.195090		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.195093		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.195095		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.195097		22 e3 3d 19	jsl $193de3	                JSL DOS_DIRWRITE                ; Write the directory entry back
.19509b		b0 03		bcs $1950a0	                BCS ret_success
.19509d		82 0e 04	brl $1954ae	                BRL IF_PASSFAILURE
.1950a0		82 12 04	brl $1954b5	ret_success     BRL IF_SUCCESS
.1950a3						IF_DIRREAD
.1950a3		da		phx		                PHX
.1950a4		5a		phy		                PHY
.1950a5		0b		phd		                PHD
.1950a6		8b		phb		                PHB
.1950a7		08		php		                PHP
.1950a8		48		pha		                PHA             ; begin setdbr macro
.1950a9		08		php		                PHP
.1950aa		e2 20		sep #$20	                SEP #$20        ; set A short
.1950ac		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1950ae		48		pha		                PHA
.1950af		ab		plb		                PLB
.1950b0		28		plp		                PLP
.1950b1		68		pla		                PLA             ; end setdbr macro
.1950b2		48		pha		                PHA             ; begin setdp macro
.1950b3		08		php		                PHP
.1950b4		c2 20		rep #$20	                REP #$20        ; set A long
.1950b6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1950b9		5b		tcd		                TCD
.1950ba		28		plp		                PLP
.1950bb		68		pla		                PLA             ; end setdp macro
.1950bc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1950be		22 93 43 19	jsl $194393	                JSL DOS_FINDFILE
.1950c2		b0 03		bcs $1950c7	                BCS success
.1950c4		82 e3 03	brl $1954aa	                BRL IF_FAILURE
.1950c7		82 eb 03	brl $1954b5	success         BRL IF_SUCCESS
.1950ca						IF_DIRWRITE
.1950ca		5c e3 3d 19	jmp $193de3	                JML DOS_DIRWRITE
.1950ce						IF_LOAD
.1950ce		da		phx		                PHX
.1950cf		5a		phy		                PHY
.1950d0		0b		phd		                PHD
.1950d1		8b		phb		                PHB
.1950d2		08		php		                PHP
.1950d3		48		pha		                PHA             ; begin setdbr macro
.1950d4		08		php		                PHP
.1950d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1950d7		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1950d9		48		pha		                PHA
.1950da		ab		plb		                PLB
.1950db		28		plp		                PLP
.1950dc		68		pla		                PLA             ; end setdbr macro
.1950dd		48		pha		                PHA             ; begin setdp macro
.1950de		08		php		                PHP
.1950df		c2 20		rep #$20	                REP #$20        ; set A long
.1950e1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1950e4		5b		tcd		                TCD
.1950e5		28		plp		                PLP
.1950e6		68		pla		                PLA             ; end setdp macro
.1950e7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1950e9		22 fa 4d 19	jsl $194dfa	                JSL IF_OPEN
.1950ed		b0 03		bcs $1950f2	                BCS setup                   ; If success: start setting things up
.1950ef		82 bc 03	brl $1954ae	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.1950f2						setup
.1950f2		c2 20		rep #$20	                REP #$20        ; set A long
.1950f4		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.1950f7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950f9		85 2c		sta $034c	                STA DOS_FILE_SIZE
.1950fb		c8		iny		                INY
.1950fc		c8		iny		                INY
.1950fd		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950ff		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.195101		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.195104		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195106		85 30		sta $0350	                STA DOS_SRC_PTR
.195108		c8		iny		                INY
.195109		c8		iny		                INY
.19510a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19510c		85 32		sta $0352	                STA DOS_SRC_PTR+2
.19510e		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.195110		c9 40 00	cmp #$0040	                CMP #$0040
.195113		b0 04		bcs $195119	                BGE load_by_type            ; No: try to load it by type
.195115		5c 5f 53 19	jmp $19535f	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.195119		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.19511c		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.19511f						type_loop
.19511f		e2 20		sep #$20	                SEP #$20        ; set A short
.195121		bf 65 51 19	lda $195165,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.195125		f0 37		beq $19515e	                BEQ no_match                ; If NULL... we didn't get a match
.195127		d9 3a a0	cmp $18a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.19512a		d0 28		bne $195154	                BNE next_entry              ; If they don't match, try the next entry
.19512c		bf 66 51 19	lda $195166,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.195130		d9 3b a0	cmp $18a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.195133		d0 1f		bne $195154	                BNE next_entry              ; If they don't match, try the next entry
.195135		bf 67 51 19	lda $195167,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.195139		d9 3c a0	cmp $18a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.19513c		d0 16		bne $195154	                BNE next_entry              ; If they don't match, try the next entry
.19513e		c2 20		rep #$20	                REP #$20        ; set A long
.195140		bf 68 51 19	lda $195168,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.195144		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.195146		e2 20		sep #$20	                SEP #$20        ; set A short
.195148		bf 6a 51 19	lda $19516a,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.19514c		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.19514e		a2 00 00	ldx #$0000	                LDX #0
.195151		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.195154						next_entry
.195154		c2 30		rep #$30	                REP #$30        ; set A&X long
.195156		8a		txa		                TXA
.195157		18		clc		                CLC
.195158		69 06 00	adc #$0006	                ADC #6
.19515b		aa		tax		                TAX
.19515c		80 c1		bra $19511f	                BRA type_loop               ; And check it against the file
.19515e						no_match
.19515e		e2 20		sep #$20	                SEP #$20        ; set A short
.195160		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.195162		82 45 03	brl $1954aa	                BRL IF_FAILURE
>195165		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>195168		72 51				                .word <>IF_LOADPGX
>19516a		19				                .byte `IF_LOADPGX
>19516b		50 47 5a			                .text "PGZ"                 ; "PGZ" --> IF_LOADPGZ
>19516e		fa 51				                .word <>IF_LOADPGZ
>195170		19				                .byte `IF_LOADPGZ
>195171		00				                .byte 0
.195172						IF_LOADPGX
.195172		c2 10		rep #$10	                REP #$10        ; set X long
.195174		e2 20		sep #$20	                SEP #$20        ; set A short
.195176		a0 00 00	ldy #$0000	                LDY #0
.195179		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.19517b		c9 50		cmp #$50	                CMP #'P'
.19517d		d0 15		bne $195194	                BNE fail_sig                        ; If not found, fail
.19517f		c8		iny		                INY
.195180		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195182		c9 47		cmp #$47	                CMP #'G'
.195184		d0 0e		bne $195194	                BNE fail_sig
.195186		c8		iny		                INY
.195187		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195189		c9 58		cmp #$58	                CMP #'X'
.19518b		d0 07		bne $195194	                BNE fail_sig
.19518d		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.19518e		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195190		c9 01		cmp #$01	                CMP #$01
.195192		f0 17		beq $1951ab	                BEQ get_dest                        ; All passes: go to get the destination address
.195194		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.195196		22 aa 54 19	jsl $1954aa	                JSL IF_FAILURE
.19519a						adjust_size
.19519a		c2 20		rep #$20	                REP #$20        ; set A long
.19519c		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.19519d		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.19519f		e9 08 00	sbc #$0008	                SBC #8
.1951a2		85 2c		sta $034c	                STA DOS_FILE_SIZE
.1951a4		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1951a6		e9 00 00	sbc #$0000	                SBC #0
.1951a9		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.1951ab						get_dest
.1951ab		c2 20		rep #$20	                REP #$20        ; set A long
.1951ad		c8		iny		                INY
.1951ae		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.1951b0		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.1951b2		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.1951b4		c8		iny		                INY
.1951b5		c8		iny		                INY
.1951b6		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.1951b8		85 36		sta $0356	                STA DOS_DST_PTR+2
.1951ba		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.1951bc		c8		iny		                INY                                 ; Point to the first data byte
.1951bd		c8		iny		                INY
.1951be						copy_loop
.1951be		e2 20		sep #$20	                SEP #$20        ; set A short
.1951c0		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.1951c2		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.1951c4		c2 20		rep #$20	                REP #$20        ; set A long
.1951c6		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.1951c8		d0 02		bne $1951cc	                BNE dec_file_size
.1951ca		e6 36		inc $0356	                INC DOS_DST_PTR+2
.1951cc		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.1951cd		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.1951cf		e9 01 00	sbc #$0001	                SBC #1
.1951d2		85 2c		sta $034c	                STA DOS_FILE_SIZE
.1951d4		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1951d6		e9 00 00	sbc #$0000	                SBC #0
.1951d9		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.1951db		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.1951dd		d0 04		bne $1951e3	                BNE next_byte
.1951df		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1951e1		f0 14		beq $1951f7	                BEQ done                            ; Yes: we're done
.1951e3		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.1951e4		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.1951e7		d0 d5		bne $1951be	                BNE copy_loop                       ; No: keep copying
.1951e9		22 c5 46 19	jsl $1946c5	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.1951ed		b0 03		bcs $1951f2	                BCS next_cluster
.1951ef		82 bc 02	brl $1954ae	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.1951f2		a0 00 00	ldy #$0000	next_cluster    LDY #0
.1951f5		80 c7		bra $1951be	                BRA copy_loop                       ; Go back to copying
.1951f7		82 bb 02	brl $1954b5	done            BRL IF_SUCCESS
.1951fa						IF_LOADPGZ
.1951fa		48		pha		                PHA             ; begin setdbr macro
.1951fb		08		php		                PHP
.1951fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1951fe		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195200		48		pha		                PHA
.195201		ab		plb		                PLB
.195202		28		plp		                PLP
.195203		68		pla		                PLA             ; end setdbr macro
.195204		48		pha		                PHA             ; begin setdp macro
.195205		08		php		                PHP
.195206		c2 20		rep #$20	                REP #$20        ; set A long
.195208		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19520b		5b		tcd		                TCD
.19520c		28		plp		                PLP
.19520d		68		pla		                PLA             ; end setdp macro
.19520e		c2 30		rep #$30	                REP #$30        ; set A&X long
.195210		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE                  ; Get the file size
.195213		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195215		85 2c		sta $034c	                STA DOS_FILE_SIZE                   ; And save it to DOS_FILE_SIZE
.195217		c8		iny		                INY
.195218		c8		iny		                INY
.195219		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19521b		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.19521d		e2 20		sep #$20	                SEP #$20        ; set A short
.19521f		a0 00 00	ldy #$0000	                LDY #0                              ; Starting at the beginning of the file
.195222		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "Z" signature
.195224		c9 5a		cmp #$5a	                CMP #'Z'
.195226		f0 06		beq $19522e	                BEQ start_block                     ; If found, get the starting address
.195228		a9 19		lda #$19	fail_sig        LDA #DOS_ERR_PGZSIG                 ; Fail with a PGZSIG error code
.19522a		22 aa 54 19	jsl $1954aa	                JSL IF_FAILURE
.19522e		c8		iny		start_block     INY
.19522f						get_addr
.19522f		e2 20		sep #$20	                SEP #$20        ; set A short
.195231		22 b4 52 19	jsl $1952b4	                JSL IF_FILE_EOF                     ; Check if EOF
.195235		90 03		bcc $19523a	                BCC get_addr_lo
.195237		82 7b 02	brl $1954b5	done            BRL IF_SUCCESS                      ; If so: we're done
.19523a		22 f2 52 19	jsl $1952f2	get_addr_lo     JSL IF_READ_NEXT                    ; Get the next byte
.19523e		90 47		bcc $195287	                BCC ret_failure                     ; Got an error: pass it on
.195240		85 34		sta $0354	                STA DOS_DST_PTR                     ; Save it as the low byte of the destination address
.195242		22 f2 52 19	jsl $1952f2	                JSL IF_READ_NEXT                    ; Get the next byte
.195246		90 3f		bcc $195287	                BCC ret_failure                     ; Got an error: pass it on
.195248		85 35		sta $0355	                STA DOS_DST_PTR+1                   ; Save it as the middle byte of the destination address
.19524a		22 f2 52 19	jsl $1952f2	                JSL IF_READ_NEXT                    ; Get the next byte
.19524e		90 37		bcc $195287	                BCC ret_failure                     ; Got an error: pass it on
.195250		85 36		sta $0356	                STA DOS_DST_PTR+2                   ; Save it as the high byte of the destination address
.195252		22 f2 52 19	jsl $1952f2	                JSL IF_READ_NEXT                    ; Get the next byte
.195256		90 2f		bcc $195287	                BCC ret_failure                     ; Got an error: pass it on
.195258		85 50		sta $0370	                STA DOS_BLOCK_SIZE                  ; Save it as the low byte of the block size
.19525a		22 f2 52 19	jsl $1952f2	                JSL IF_READ_NEXT                    ; Get the next byte
.19525e		90 27		bcc $195287	                BCC ret_failure                     ; Got an error: pass it on
.195260		85 51		sta $0371	                STA DOS_BLOCK_SIZE+1                ; Save it as the middle byte of the block size
.195262		22 f2 52 19	jsl $1952f2	                JSL IF_READ_NEXT                    ; Get the next byte
.195266		90 1f		bcc $195287	                BCC ret_failure                     ; Got an error: pass it on
.195268		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2                ; Save it as the high byte of the block size
.19526a		64 53		stz $0373	                STZ DOS_BLOCK_SIZE+3                ; And MSB is 0
.19526c		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; If DOS_BLOCK_SIZE <> 0, we have data to load
.19526e		d0 1a		bne $19528a	                BNE read_data
.195270		a5 51		lda $0371	                LDA DOS_BLOCK_SIZE+1
.195272		d0 16		bne $19528a	                BNE read_data
.195274		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.195276		d0 12		bne $19528a	                BNE read_data
.195278		a5 34		lda $0354	                LDA DOS_DST_PTR                     ; If DOS_BLOCK_SIZE = 0, we have the run address
.19527a		85 3c		sta $035c	                STA DOS_RUN_PTR
.19527c		a5 35		lda $0355	                LDA DOS_DST_PTR+1
.19527e		85 3d		sta $035d	                STA DOS_RUN_PTR+1
.195280		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.195282		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.195284		82 2e 02	brl $1954b5	                BRL IF_SUCCESS                      ; And finish
.195287		82 20 02	brl $1954aa	ret_failure     BRL IF_FAILURE                      ; If there was an error, pass it up to the caller
.19528a						read_data
.19528a		e2 20		sep #$20	                SEP #$20        ; set A short
.19528c		22 f2 52 19	jsl $1952f2	                JSL IF_READ_NEXT                    ; Get the next byte
.195290		90 f5		bcc $195287	                BCC ret_failure
.195292		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Save it to the destination address
.195294		c2 20		rep #$20	                REP #$20        ; set A long
.195296		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Increment the destination pointer
.195298		d0 02		bne $19529c	                BNE dec_block_size
.19529a		e6 36		inc $0356	                INC DOS_DST_PTR+2
.19529c		38		sec		dec_block_size  SEC
.19529d		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE
.19529f		e9 01 00	sbc #$0001	                SBC #1
.1952a2		85 50		sta $0370	                STA DOS_BLOCK_SIZE
.1952a4		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.1952a6		e9 00 00	sbc #$0000	                SBC #0
.1952a9		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2
.1952ab		d0 dd		bne $19528a	                BNE read_data
.1952ad		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; Is block size = 0?
.1952af		d0 d9		bne $19528a	                BNE read_data                       ; No: keep reading data
.1952b1		82 7b ff	brl $19522f	                BRL get_addr                        ; Yes: check for another block
.1952b4						IF_FILE_EOF
.1952b4		48		pha		                PHA
.1952b5		5a		phy		                PHY
.1952b6		8b		phb		                PHB
.1952b7		0b		phd		                PHD
.1952b8		08		php		                PHP
.1952b9		48		pha		                PHA             ; begin setdbr macro
.1952ba		08		php		                PHP
.1952bb		e2 20		sep #$20	                SEP #$20        ; set A short
.1952bd		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1952bf		48		pha		                PHA
.1952c0		ab		plb		                PLB
.1952c1		28		plp		                PLP
.1952c2		68		pla		                PLA             ; end setdbr macro
.1952c3		48		pha		                PHA             ; begin setdp macro
.1952c4		08		php		                PHP
.1952c5		c2 20		rep #$20	                REP #$20        ; set A long
.1952c7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1952ca		5b		tcd		                TCD
.1952cb		28		plp		                PLP
.1952cc		68		pla		                PLA             ; end setdp macro
.1952cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1952cf		c2 10		rep #$10	                REP #$10        ; set X long
.1952d1		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.1952d4		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y                  ; Restore the index
.1952d6		89 80		bit #$80	                BIT #FD_STAT_EOF                    ; Check if the file is EOF
.1952d8		f0 07		beq $1952e1	                BEQ chk_file_size                   ; If not: check the file size
.1952da		28		plp		ret_true        PLP                                 ; Return true
.1952db		2b		pld		                PLD
.1952dc		ab		plb		                PLB
.1952dd		7a		ply		                PLY
.1952de		68		pla		                PLA
.1952df		38		sec		                SEC
.1952e0		6b		rtl		                RTL
.1952e1						chk_file_size
.1952e1		c2 20		rep #$20	                REP #$20        ; set A long
.1952e3		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; if DOS_FILE_SIZE = 0
.1952e5		d0 04		bne $1952eb	                BNE ret_false
.1952e7		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1952e9		f0 ef		beq $1952da	                BEQ ret_true
.1952eb		28		plp		ret_false       PLP                                 ; Return false
.1952ec		2b		pld		                PLD
.1952ed		ab		plb		                PLB
.1952ee		7a		ply		                PLY
.1952ef		68		pla		                PLA
.1952f0		18		clc		                CLC
.1952f1		6b		rtl		                RTL
.1952f2						IF_READ_NEXT
.1952f2		8b		phb		                PHB
.1952f3		0b		phd		                PHD
.1952f4		08		php		                PHP
.1952f5		48		pha		                PHA             ; begin setdbr macro
.1952f6		08		php		                PHP
.1952f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1952f9		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1952fb		48		pha		                PHA
.1952fc		ab		plb		                PLB
.1952fd		28		plp		                PLP
.1952fe		68		pla		                PLA             ; end setdbr macro
.1952ff		48		pha		                PHA             ; begin setdp macro
.195300		08		php		                PHP
.195301		c2 20		rep #$20	                REP #$20        ; set A long
.195303		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195306		5b		tcd		                TCD
.195307		28		plp		                PLP
.195308		68		pla		                PLA             ; end setdp macro
.195309		e2 20		sep #$20	                SEP #$20        ; set A short
.19530b		c2 10		rep #$10	                REP #$10        ; set X long
.19530d		22 b4 52 19	jsl $1952b4	                JSL IF_FILE_EOF                     ; Check if the file is EOF
.195311		90 06		bcc $195319	                BCC get_byte                        ; If not: get the next byte
.195313		a9 18		lda #$18	                LDA #DOS_ERR_EOF                    ; If so: return an EOF error
.195315		85 0e		sta $032e	                STA DOS_STATUS
.195317		80 3f		bra $195358	                BRA ret_failure
.195319		b7 30		lda [$0350],y	get_byte        LDA [DOS_SRC_PTR],Y                 ; Read the byte...
.19531b		48		pha		                PHA                                 ; And save it for the moment
.19531c		c2 20		rep #$20	                REP #$20        ; set A long
.19531e		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Decrement the file size...
.195320		d0 02		bne $195324	                BNE dec_low
.195322		c6 2e		dec $034e	                DEC DOS_FILE_SIZE+2
.195324		c6 2c		dec $034c	dec_low         DEC DOS_FILE_SIZE
.195326		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.195328		d0 04		bne $19532e	                BNE next_byte
.19532a		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.19532c		f0 1b		beq $195349	                BEQ ret_eof                         ; Yes: mark the file as EOF
.19532e						next_byte
.19532e		e2 20		sep #$20	                SEP #$20        ; set A short
.195330		c8		iny		                INY                                 ; Move to the next byte
.195331		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE                ; Have we reached the end of the sector?
.195334		90 0b		bcc $195341	                BLT ret_success                     ; No: just return the byte
.195336		22 c5 46 19	jsl $1946c5	                JSL DOS_READNEXT                    ; Yes: read the next sector
.19533a		b0 02		bcs $19533e	                BCS reset_index
.19533c		80 1a		bra $195358	                BRA ret_failure                     ; If failure: pass the error up the chain
.19533e		a0 00 00	ldy #$0000	reset_index     LDY #0                              ; Reset the index
.195341						ret_success
.195341		e2 20		sep #$20	                SEP #$20        ; set A short
.195343		68		pla		                PLA                                 ; Return the byte retrieved
.195344		28		plp		                PLP
.195345		2b		pld		                PLD
.195346		ab		plb		                PLB
.195347		38		sec		                SEC
.195348		6b		rtl		                RTL
.195349						ret_eof
.195349		e2 20		sep #$20	                SEP #$20        ; set A short
.19534b		5a		phy		                PHY                                 ; Save the index
.19534c		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.19534f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195351		09 80		ora #$80	                ORA #FD_STAT_EOF                    ; Mark it EOF
.195353		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y                  ; And update the status
.195355		7a		ply		                PLY                                 ; Restore the index
.195356		80 e9		bra $195341	                BRA ret_success
.195358						ret_failure
.195358		e2 20		sep #$20	                SEP #$20        ; set A short
.19535a		28		plp		                PLP
.19535b		2b		pld		                PLD
.19535c		ab		plb		                PLB
.19535d		18		clc		                CLC
.19535e		6b		rtl		                RTL
.19535f						IF_LOADRAW
.19535f		c2 30		rep #$30	                REP #$30        ; set A&X long
.195361		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.195364						copy_loop
.195364		e2 20		sep #$20	                SEP #$20        ; set A short
.195366		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.195368		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.19536a		c2 20		rep #$20	                REP #$20        ; set A long
.19536c		38		sec		                SEC                         ; Count down the number of bytes left
.19536d		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.19536f		e9 01 00	sbc #$0001	                SBC #1
.195372		85 2c		sta $034c	                STA DOS_FILE_SIZE
.195374		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.195376		e9 00 00	sbc #$0000	                SBC #0
.195379		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.19537b		d0 04		bne $195381	                BNE continue
.19537d		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.19537f		f0 1b		beq $19539c	                BEQ close_file              ; If not: we're done
.195381		c8		iny		continue        INY
.195382		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.195385		d0 dd		bne $195364	                BNE copy_loop               ; No: keep processing the bytes
.195387		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.195388		a5 34		lda $0354	                LDA DOS_DST_PTR
.19538a		6d 0e a0	adc $18a00e	                ADC CLUSTER_SIZE
.19538d		85 34		sta $0354	                STA DOS_DST_PTR
.19538f		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.195391		69 00 00	adc #$0000	                ADC #0
.195394		85 36		sta $0356	                STA DOS_DST_PTR+2
.195396		22 fb 4e 19	jsl $194efb	                JSL IF_READ                 ; Yes: load the next cluster
.19539a		b0 c5		bcs $195361	                BCS copy_cluster            ; And start copying it
.19539c						close_file
.19539c		82 16 01	brl $1954b5	ret_success     BRL IF_SUCCESS
.19539f						IF_NULLBUFFER
.19539f		5a		phy		                PHY
.1953a0		8b		phb		                PHB
.1953a1		0b		phd		                PHD
.1953a2		08		php		                PHP
.1953a3		48		pha		                PHA             ; begin setdbr macro
.1953a4		08		php		                PHP
.1953a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1953a7		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1953a9		48		pha		                PHA
.1953aa		ab		plb		                PLB
.1953ab		28		plp		                PLP
.1953ac		68		pla		                PLA             ; end setdbr macro
.1953ad		48		pha		                PHA             ; begin setdp macro
.1953ae		08		php		                PHP
.1953af		c2 20		rep #$20	                REP #$20        ; set A long
.1953b1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1953b4		5b		tcd		                TCD
.1953b5		28		plp		                PLP
.1953b6		68		pla		                PLA             ; end setdp macro
.1953b7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1953b9		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1953bc		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953be		85 28		sta $0348	                STA DOS_TEMP
.1953c0		c8		iny		                INY
.1953c1		c8		iny		                INY
.1953c2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953c4		85 2a		sta $034a	                STA DOS_TEMP+2
.1953c6		a0 00 00	ldy #$0000	                LDY #0
.1953c9		a9 00 00	lda #$0000	                LDA #0
.1953cc		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.1953ce		c8		iny		                INY
.1953cf		c8		iny		                INY
.1953d0		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.1953d3		d0 f7		bne $1953cc	                BNE loop
.1953d5		28		plp		                PLP
.1953d6		2b		pld		                PLD
.1953d7		ab		plb		                PLB
.1953d8		7a		ply		                PLY
.1953d9		6b		rtl		                RTL
.1953da						IF_COPY2BUFF
.1953da		5a		phy		                PHY
.1953db		8b		phb		                PHB
.1953dc		0b		phd		                PHD
.1953dd		08		php		                PHP
.1953de		48		pha		                PHA             ; begin setdbr macro
.1953df		08		php		                PHP
.1953e0		e2 20		sep #$20	                SEP #$20        ; set A short
.1953e2		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1953e4		48		pha		                PHA
.1953e5		ab		plb		                PLB
.1953e6		28		plp		                PLP
.1953e7		68		pla		                PLA             ; end setdbr macro
.1953e8		48		pha		                PHA             ; begin setdp macro
.1953e9		08		php		                PHP
.1953ea		c2 20		rep #$20	                REP #$20        ; set A long
.1953ec		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1953ef		5b		tcd		                TCD
.1953f0		28		plp		                PLP
.1953f1		68		pla		                PLA             ; end setdp macro
.1953f2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1953f4		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1953f7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953f9		85 28		sta $0348	                STA DOS_TEMP
.1953fb		c8		iny		                INY
.1953fc		c8		iny		                INY
.1953fd		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953ff		85 2a		sta $034a	                STA DOS_TEMP+2
.195401		a0 00 00	ldy #$0000	                LDY #0
.195404						copy_loop
.195404		e2 20		sep #$20	                SEP #$20        ; set A short
.195406		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.195408		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.19540a		c2 20		rep #$20	                REP #$20        ; set A long
.19540c		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.19540e		d0 02		bne $195412	                BNE adv_dest
.195410		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.195412		c8		iny		adv_dest        INY                         ; Count it
.195413		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.195416		f0 0c		beq $195424	                BEQ done                    ; Yes: we're done
.195418		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.19541a		c5 38		cmp $0358	                CMP DOS_END_PTR
.19541c		d0 e6		bne $195404	                BNE copy_loop               ; No: keep copying
.19541e		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.195420		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.195422		d0 e0		bne $195404	                BNE copy_loop
.195424		28		plp		done            PLP
.195425		2b		pld		                PLD
.195426		ab		plb		                PLB
.195427		7a		ply		                PLY
.195428		6b		rtl		                RTL
.195429						IF_SAVE
.195429		da		phx		                PHX
.19542a		5a		phy		                PHY
.19542b		0b		phd		                PHD
.19542c		8b		phb		                PHB
.19542d		08		php		                PHP
.19542e		48		pha		                PHA             ; begin setdbr macro
.19542f		08		php		                PHP
.195430		e2 20		sep #$20	                SEP #$20        ; set A short
.195432		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195434		48		pha		                PHA
.195435		ab		plb		                PLB
.195436		28		plp		                PLP
.195437		68		pla		                PLA             ; end setdbr macro
.195438		48		pha		                PHA             ; begin setdp macro
.195439		08		php		                PHP
.19543a		c2 20		rep #$20	                REP #$20        ; set A long
.19543c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19543f		5b		tcd		                TCD
.195440		28		plp		                PLP
.195441		68		pla		                PLA             ; end setdp macro
.195442		c2 30		rep #$30	                REP #$30        ; set A&X long
.195444		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.195447		38		sec		                SEC
.195448		a5 38		lda $0358	                LDA DOS_END_PTR
.19544a		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.19544c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19544e		c8		iny		                INY
.19544f		c8		iny		                INY
.195450		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.195452		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.195454		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195456		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.195459		18		clc		                CLC
.19545a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19545c		69 01 00	adc #$0001	                ADC #1
.19545f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195461		90 09		bcc $19546c	                BCC first_block
.195463		c8		iny		                INY
.195464		c8		iny		                INY
.195465		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195467		69 00 00	adc #$0000	                ADC #0
.19546a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19546c		22 9f 53 19	jsl $19539f	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.195470		22 da 53 19	jsl $1953da	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.195474		22 8d 4e 19	jsl $194e8d	                JSL IF_CREATE           ; Create file.
.195478		b0 03		bcs $19547d	                BCS check_for_end
.19547a		82 31 00	brl $1954ae	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.19547d		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.19547f		c5 38		cmp $0358	                CMP DOS_END_PTR
.195481		d0 06		bne $195489	                BNE next_block
.195483		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.195485		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.195487		f0 1d		beq $1954a6	                BEQ done                ; Yes: we're done
.195489		22 9f 53 19	jsl $19539f	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.19548d		22 da 53 19	jsl $1953da	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.195491		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.195494		a9 00 00	lda #$0000	                LDA #0
.195497		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195499		c8		iny		                INY
.19549a		c8		iny		                INY
.19549b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19549d		22 60 4f 19	jsl $194f60	                JSL IF_WRITE            ; Append to the file
.1954a1		b0 da		bcs $19547d	                BCS check_for_end       ; And try again
.1954a3		82 08 00	brl $1954ae	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.1954a6		5c b5 54 19	jmp $1954b5	done            JML IF_SUCCESS
.1954aa						IF_FAILURE
.1954aa		e2 20		sep #$20	                SEP #$20        ; set A short
.1954ac		85 0e		sta $032e	                STA DOS_STATUS
.1954ae		28		plp		IF_PASSFAILURE  PLP
.1954af		18		clc		                CLC
.1954b0		ab		plb		                PLB
.1954b1		2b		pld		                PLD
.1954b2		7a		ply		                PLY
.1954b3		fa		plx		                PLX
.1954b4		6b		rtl		                RTL
.1954b5						IF_SUCCESS
.1954b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1954b7		64 00		stz $0320	                STZ BIOS_STATUS
.1954b9		64 0e		stz $032e	                STZ DOS_STATUS
.1954bb		28		plp		                PLP
.1954bc		38		sec		                SEC
.1954bd		ab		plb		                PLB
.1954be		2b		pld		                PLD
.1954bf		7a		ply		                PLY
.1954c0		fa		plx		                PLX
.1954c1		6b		rtl		                RTL
.1954c2						IF_RUN
.1954c2		da		phx		                PHX
.1954c3		5a		phy		                PHY
.1954c4		0b		phd		                PHD
.1954c5		8b		phb		                PHB
.1954c6		08		php		                PHP
.1954c7		48		pha		                PHA             ; begin setdbr macro
.1954c8		08		php		                PHP
.1954c9		e2 20		sep #$20	                SEP #$20        ; set A short
.1954cb		a9 00		lda #$00	                LDA #0
.1954cd		48		pha		                PHA
.1954ce		ab		plb		                PLB
.1954cf		28		plp		                PLP
.1954d0		68		pla		                PLA             ; end setdbr macro
.1954d1		48		pha		                PHA             ; begin setdp macro
.1954d2		08		php		                PHP
.1954d3		c2 20		rep #$20	                REP #$20        ; set A long
.1954d5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1954d8		5b		tcd		                TCD
.1954d9		28		plp		                PLP
.1954da		68		pla		                PLA             ; end setdp macro
.1954db		e2 20		sep #$20	                SEP #$20        ; set A short
.1954dd		c2 10		rep #$10	                REP #$10        ; set X long
.1954df		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.1954e1		a2 00 00	ldx #$0000	                LDX #0
.1954e4		9f 00 ad 18	sta $18ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.1954e8		e8		inx		                INX
.1954e9		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.1954ec		d0 f6		bne $1954e4	                BNE clr_fd_loop
.1954ee		c2 20		rep #$20	                REP #$20        ; set A long
.1954f0		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.1954f3		8f 0e ad 18	sta $18ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.1954f7		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_SECTOR
.1954fa		8f 10 ad 18	sta $18ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.1954fe		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.195500		8f 02 ad 18	sta $18ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.195504		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.195506		8f 04 ad 18	sta $18ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.19550a		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.19550d		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.19550f		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.195511		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.195514		85 20		sta $0340	                STA DOS_FD_PTR
.195516		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_FD
.195519		85 22		sta $0342	                STA DOS_FD_PTR+2
.19551b		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.19551e		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.195522		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.195526		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.19552a		b0 03		bcs $19552f	                BCS chk_execute
.19552c		82 7f ff	brl $1954ae	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.19552f						chk_execute
.19552f		c2 20		rep #$20	                REP #$20        ; set A long
.195531		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.195533		d0 0b		bne $195540	                BNE try_execute                         ; If so: call it
.195535		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.195537		d0 07		bne $195540	                BNE try_execute
.195539		e2 20		sep #$20	                SEP #$20        ; set A short
.19553b		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.19553d		82 6a ff	brl $1954aa	                BRL IF_FAILURE
.195540						try_execute
.195540		e2 20		sep #$20	                SEP #$20        ; set A short
.195542		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.195544		48		pha		                PHA
.195545		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.195547		48		pha		                PHA
.195548		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.19554a		48		pha		                PHA
.19554b		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.19554d		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.19554f		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.195553		e2 20		sep #$20	                SEP #$20        ; set A short
.195555		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.195556		68		pla		                PLA
.195557		68		pla		                PLA
.195558		82 5a ff	brl $1954b5	                BRL IF_SUCCESS                          ; Return success
.19555b						IF_ALLOCFD
.19555b		da		phx		                PHX
.19555c		5a		phy		                PHY
.19555d		0b		phd		                PHD
.19555e		8b		phb		                PHB
.19555f		08		php		                PHP
.195560		48		pha		                PHA             ; begin setdbr macro
.195561		08		php		                PHP
.195562		e2 20		sep #$20	                SEP #$20        ; set A short
.195564		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195566		48		pha		                PHA
.195567		ab		plb		                PLB
.195568		28		plp		                PLP
.195569		68		pla		                PLA             ; end setdbr macro
.19556a		48		pha		                PHA             ; begin setdp macro
.19556b		08		php		                PHP
.19556c		c2 20		rep #$20	                REP #$20        ; set A long
.19556e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195571		5b		tcd		                TCD
.195572		28		plp		                PLP
.195573		68		pla		                PLA             ; end setdp macro
.195574		c2 10		rep #$10	                REP #$10        ; set X long
.195576		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.195579						chk_fd
.195579		e2 20		sep #$20	                SEP #$20        ; set A short
.19557b		bd 20 ad	lda $18ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.19557e		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.195580		f0 14		beq $195596	                BEQ found                           ; No: flag and return the found descriptor
.195582						next_fd
.195582		c2 20		rep #$20	                REP #$20        ; set A long
.195584		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.195585		18		clc		                CLC
.195586		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.195589		aa		tax		                TAX
.19558a		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.19558d		90 ea		bcc $195579	                BLT chk_fd                          ; No: check this new file descriptor
.19558f		e2 20		sep #$20	                SEP #$20        ; set A short
.195591		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.195593		82 14 ff	brl $1954aa	                BRL IF_FAILURE
.195596		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.195598		9d 20 ad	sta $18ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.19559b		c2 20		rep #$20	                REP #$20        ; set A long
.19559d		8a		txa		                TXA
.19559e		18		clc		                CLC
.19559f		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.1955a2		85 20		sta $0340	                STA @b DOS_FD_PTR
.1955a4		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.1955a7		69 00 00	adc #$0000	                ADC #0
.1955aa		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1955ac		82 06 ff	brl $1954b5	                BRL IF_SUCCESS                      ; Return this file descriptor
.1955af						IF_FREEFD
.1955af		da		phx		                PHX
.1955b0		5a		phy		                PHY
.1955b1		0b		phd		                PHD
.1955b2		8b		phb		                PHB
.1955b3		08		php		                PHP
.1955b4		48		pha		                PHA             ; begin setdbr macro
.1955b5		08		php		                PHP
.1955b6		e2 20		sep #$20	                SEP #$20        ; set A short
.1955b8		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1955ba		48		pha		                PHA
.1955bb		ab		plb		                PLB
.1955bc		28		plp		                PLP
.1955bd		68		pla		                PLA             ; end setdbr macro
.1955be		48		pha		                PHA             ; begin setdp macro
.1955bf		08		php		                PHP
.1955c0		c2 20		rep #$20	                REP #$20        ; set A long
.1955c2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1955c5		5b		tcd		                TCD
.1955c6		28		plp		                PLP
.1955c7		68		pla		                PLA             ; end setdp macro
.1955c8		e2 20		sep #$20	                SEP #$20        ; set A short
.1955ca		c2 10		rep #$10	                REP #$10        ; set X long
.1955cc		a9 00		lda #$00	                LDA #0
.1955ce		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.1955d0		82 e2 fe	brl $1954b5	                BRL IF_SUCCESS
.1955d3						DOS_SRC2DST
.1955d3		da		phx		                PHX
.1955d4		5a		phy		                PHY
.1955d5		0b		phd		                PHD
.1955d6		8b		phb		                PHB
.1955d7		08		php		                PHP
.1955d8		48		pha		                PHA             ; begin setdp macro
.1955d9		08		php		                PHP
.1955da		c2 20		rep #$20	                REP #$20        ; set A long
.1955dc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1955df		5b		tcd		                TCD
.1955e0		28		plp		                PLP
.1955e1		68		pla		                PLA             ; end setdp macro
.1955e2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1955e4		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1955e7		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1955e9		aa		tax		                TAX                                     ; X := source buffer address
.1955ea		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.1955ec		a8		tay		                TAY                                     ; Y := destination buffer address
.1955ed		e2 20		sep #$20	                SEP #$20        ; set A short
.1955ef		a9 18		lda #$18	                LDA #`DOS_FILE_BUFFS
.1955f1		48		pha		                PHA
.1955f2		ab		plb		                PLB
.1955f3		c2 20		rep #$20	                REP #$20        ; set A long
.1955f5		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.1955f8		f0 11		beq $19560b	loop            BEQ done
.1955fa		48		pha		                PHA
.1955fb		e2 20		sep #$20	                SEP #$20        ; set A short
.1955fd		bd 00 00	lda $180000,x	                LDA #0,B,X
.195600		99 00 00	sta $180000,y	                STA #0,B,Y
.195603		c2 20		rep #$20	                REP #$20        ; set A long
.195605		68		pla		                PLA
.195606		3a		dec a		                DEC A
.195607		e8		inx		                INX
.195608		c8		iny		                INY
.195609		80 ed		bra $1955f8	                BRA loop
.19560b		28		plp		done            PLP
.19560c		ab		plb		                PLB
.19560d		2b		pld		                PLD
.19560e		7a		ply		                PLY
.19560f		fa		plx		                PLX
.195610		6b		rtl		                RTL
.195611						IF_COPY
.195611		da		phx		                PHX
.195612		5a		phy		                PHY
.195613		0b		phd		                PHD
.195614		8b		phb		                PHB
.195615		08		php		                PHP
.195616		48		pha		                PHA             ; begin setdbr macro
.195617		08		php		                PHP
.195618		e2 20		sep #$20	                SEP #$20        ; set A short
.19561a		a9 00		lda #$00	                LDA #0
.19561c		48		pha		                PHA
.19561d		ab		plb		                PLB
.19561e		28		plp		                PLP
.19561f		68		pla		                PLA             ; end setdbr macro
.195620		48		pha		                PHA             ; begin setdp macro
.195621		08		php		                PHP
.195622		c2 20		rep #$20	                REP #$20        ; set A long
.195624		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195627		5b		tcd		                TCD
.195628		28		plp		                PLP
.195629		68		pla		                PLA             ; end setdp macro
.19562a		22 5b 55 19	jsl $19555b	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.19562e		b0 03		bcs $195633	                BCS set_src_path
.195630		82 7b fe	brl $1954ae	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.195633						set_src_path
.195633		c2 30		rep #$30	                REP #$30        ; set A&X long
.195635		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.195638		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.19563a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19563c		c8		iny		                INY
.19563d		c8		iny		                INY
.19563e		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.195640		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195642						alloc_dest
.195642		c2 30		rep #$30	                REP #$30        ; set A&X long
.195644		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.195646		85 30		sta $0350	                STA @b DOS_SRC_PTR
.195648		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.19564a		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.19564c		22 5b 55 19	jsl $19555b	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.195650		b0 0f		bcs $195661	                BCS set_paths                   ; If everything is ok... start setting the paths
.195652		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195654		85 20		sta $0340	                STA @b DOS_FD_PTR
.195656		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195658		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.19565a		22 af 55 19	jsl $1955af	                JSL IF_FREEFD                   ; And free it
.19565e		82 4d fe	brl $1954ae	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.195661						set_paths
.195661		c2 30		rep #$30	                REP #$30        ; set A&X long
.195663		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.195665		85 34		sta $0354	                STA @b DOS_DST_PTR
.195667		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.195669		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.19566b		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.19566e		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.195670		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195672		c8		iny		                INY
.195673		c8		iny		                INY
.195674		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.195676		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195678		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.19567a		85 20		sta $0340	                STA @b DOS_FD_PTR
.19567c		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.19567e		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195680		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.195684		b0 10		bcs $195696	                BCS src_open                    ; If success, work with the openned file
.195686		00		brk #		                BRK
.195687		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195689		85 20		sta $0340	                STA @b DOS_FD_PTR
.19568b		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.19568d		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.19568f		22 af 55 19	jsl $1955af	                JSL IF_FREEFD                   ; And free it
.195693		82 bc ff	brl $195652	                BRL err_free_src_fd             ; Free the source file descriptor
.195696		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.195699		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.19569b		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.19569d		c8		iny		                INY
.19569e		c8		iny		                INY
.19569f		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1956a1		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1956a3		22 d3 55 19	jsl $1955d3	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.1956a7		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1956a9		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956ab		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1956ad		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956af		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.1956b3		b0 0f		bcs $1956c4	                BCS read_next                   ; If sucessful, try to get the next cluster
.1956b5		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.1956b7		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956b9		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.1956bb		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956bd		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.1956c1		82 c3 ff	brl $195687	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.1956c4						read_next
.1956c4		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.1956c6		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956c8		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.1956ca		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956cc		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.1956d0		b0 19		bcs $1956eb	                BCS copy2dest                   ; If successful, copy the sector
.1956d2		e2 20		sep #$20	                SEP #$20        ; set A short
.1956d4		a5 0e		lda $032e	                LDA @b DOS_STATUS
.1956d6		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.1956d8		f0 32		beq $19570c	                BEQ file_copied                 ; Yes: we're done copying
.1956da						err_dest_close
.1956da		c2 20		rep #$20	                REP #$20        ; set A long
.1956dc		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1956de		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956e0		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1956e2		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956e4		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.1956e8		82 ca ff	brl $1956b5	                BRL err_src_close               ; Close the source and throw an error
.1956eb						copy2dest
.1956eb		22 d3 55 19	jsl $1955d3	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.1956ef		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.1956f2		a9 00 00	lda #$0000	                LDA #0
.1956f5		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1956f7		c8		iny		                INY
.1956f8		c8		iny		                INY
.1956f9		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1956fb		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1956fd		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956ff		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195701		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195703		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.195707		90 d1		bcc $1956da	                BCC err_dest_close              ; If error: close all files and throw the error
.195709		82 b8 ff	brl $1956c4	                BRL read_next                   ; Otherwise: repeat the loop
.19570c						file_copied
.19570c		c2 20		rep #$20	                REP #$20        ; set A long
.19570e		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195710		85 20		sta $0340	                STA @b DOS_FD_PTR
.195712		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195714		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195716		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.19571a		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.19571c		85 20		sta $0340	                STA @b DOS_FD_PTR
.19571e		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195720		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195722		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.195726		82 8c fd	brl $1954b5	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/uart.asm

=$af18f8					    UART1_BASE = $AF18F8        ; Base address for UART 1 (COM1) in the C256 Foenix U (only 1 Serial port)
=$af18f8					    UART2_BASE = $AF18F8
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.195729						UART_SELECT
.195729		08		php		            PHP
.19572a		c2 20		rep #$20	                REP #$20        ; set A long
.19572c		c9 02 00	cmp #$0002	            CMP #2
.19572f		f0 07		beq $195738	            BEQ is_COM2
.195731		c2 20		rep #$20	                REP #$20        ; set A long
.195733		a9 f8 18	lda #$18f8	            LDA #<>UART1_BASE
.195736		80 05		bra $19573d	            BRA setaddr
.195738						is_COM2
.195738		c2 20		rep #$20	                REP #$20        ; set A long
.19573a		a9 f8 18	lda #$18f8	            LDA #<>UART2_BASE
.19573d		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.195741		e2 20		sep #$20	                SEP #$20        ; set A short
.195743		a9 af		lda #$af	            LDA #`UART1_BASE
.195745		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.195749		28		plp		            PLP
.19574a		6b		rtl		            RTL
.19574b						UART_SETBPS
.19574b		08		php		            PHP
.19574c		0b		phd		            PHD
.19574d		48		pha		                PHA             ; begin setdp macro
.19574e		08		php		                PHP
.19574f		c2 20		rep #$20	                REP #$20        ; set A long
.195751		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195754		5b		tcd		                TCD
.195755		28		plp		                PLP
.195756		68		pla		                PLA             ; end setdp macro
.195757		c2 30		rep #$30	                REP #$30        ; set A&X long
.195759		48		pha		            PHA
.19575a		e2 20		sep #$20	                SEP #$20        ; set A short
.19575c		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.19575f		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.195761		09 80		ora #$80	            ORA #LCR_DLB
.195763		97 00		sta [$0700],y	            STA [CURRUART],Y
.195765		c2 20		rep #$20	                REP #$20        ; set A long
.195767		68		pla		            PLA
.195768		a0 00 00	ldy #$0000	            LDY #UART_DLL
.19576b		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.19576d		e2 20		sep #$20	                SEP #$20        ; set A short
.19576f		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.195772		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.195774		49 80		eor #$80	            EOR #LCR_DLB
.195776		97 00		sta [$0700],y	            STA [CURRUART],Y
.195778		2b		pld		            PLD
.195779		28		plp		            PLP
.19577a		6b		rtl		            RTL
.19577b						UART_SETLCR
.19577b		08		php		            PHP
.19577c		0b		phd		            PHD
.19577d		48		pha		                PHA             ; begin setdp macro
.19577e		08		php		                PHP
.19577f		c2 20		rep #$20	                REP #$20        ; set A long
.195781		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195784		5b		tcd		                TCD
.195785		28		plp		                PLP
.195786		68		pla		                PLA             ; end setdp macro
.195787		e2 20		sep #$20	                SEP #$20        ; set A short
.195789		c2 10		rep #$10	                REP #$10        ; set X long
.19578b		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.19578d		a0 03 00	ldy #$0003	            LDY #UART_LCR
.195790		97 00		sta [$0700],y	            STA [CURRUART],Y
.195792		2b		pld		            PLD
.195793		28		plp		            PLP
.195794		6b		rtl		            RTL
.195795						UART_INIT
.195795		08		php		            PHP
.195796		0b		phd		            PHD
.195797		c2 30		rep #$30	                REP #$30        ; set A&X long
.195799		48		pha		                PHA             ; begin setdp macro
.19579a		08		php		                PHP
.19579b		c2 20		rep #$20	                REP #$20        ; set A long
.19579d		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1957a0		5b		tcd		                TCD
.1957a1		28		plp		                PLP
.1957a2		68		pla		                PLA             ; end setdp macro
.1957a3		a9 01 00	lda #$0001	            LDA #UART_115200
.1957a6		22 4b 57 19	jsl $19574b	            JSL UART_SETBPS
.1957aa		e2 20		sep #$20	                SEP #$20        ; set A short
.1957ac		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.1957ae		22 7b 57 19	jsl $19577b	            JSL UART_SETLCR
.1957b2		a9 e1		lda #$e1	            LDA #%11100001
.1957b4		a0 02 00	ldy #$0002	            LDY #UART_FCR
.1957b7		97 00		sta [$0700],y	            STA [CURRUART],Y
.1957b9		2b		pld		            PLD
.1957ba		28		plp		            PLP
.1957bb		6b		rtl		            RTL
.1957bc						UART_HASBYT
.1957bc		08		php		            PHP
.1957bd		0b		phd		            PHD
.1957be		c2 30		rep #$30	                REP #$30        ; set A&X long
.1957c0		48		pha		                PHA             ; begin setdp macro
.1957c1		08		php		                PHP
.1957c2		c2 20		rep #$20	                REP #$20        ; set A long
.1957c4		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1957c7		5b		tcd		                TCD
.1957c8		28		plp		                PLP
.1957c9		68		pla		                PLA             ; end setdp macro
.1957ca		e2 20		sep #$20	                SEP #$20        ; set A short
.1957cc		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.1957cf		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.1957d1		29 01		and #$01	            AND #LSR_DATA_AVAIL
.1957d3		d0 04		bne $1957d9	            BNE ret_true            ; If flag is set, return true
.1957d5		2b		pld		ret_false   PLD                     ; Return false
.1957d6		28		plp		            PLP
.1957d7		18		clc		            CLC
.1957d8		6b		rtl		            RTL
.1957d9		2b		pld		ret_true    PLD                     ; Return true
.1957da		28		plp		            PLP
.1957db		38		sec		            SEC
.1957dc		6b		rtl		            RTL
.1957dd						UART_GETC
.1957dd		08		php		            PHP
.1957de		0b		phd		            PHD
.1957df		c2 30		rep #$30	                REP #$30        ; set A&X long
.1957e1		48		pha		                PHA             ; begin setdp macro
.1957e2		08		php		                PHP
.1957e3		c2 20		rep #$20	                REP #$20        ; set A long
.1957e5		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1957e8		5b		tcd		                TCD
.1957e9		28		plp		                PLP
.1957ea		68		pla		                PLA             ; end setdp macro
.1957eb		e2 20		sep #$20	                SEP #$20        ; set A short
.1957ed		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.1957f0		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.1957f2		29 01		and #$01	            AND #LSR_DATA_AVAIL
.1957f4		f0 fa		beq $1957f0	            BEQ wait_getc           ; If the flag is clear, wait
.1957f6		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.1957f9		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.1957fb		2b		pld		            PLD
.1957fc		28		plp		            PLP
.1957fd		6b		rtl		            RTL
.1957fe						UART_PUTC
.1957fe		08		php		            PHP
.1957ff		0b		phd		            PHD
.195800		c2 30		rep #$30	                REP #$30        ; set A&X long
.195802		48		pha		                PHA             ; begin setdp macro
.195803		08		php		                PHP
.195804		c2 20		rep #$20	                REP #$20        ; set A long
.195806		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195809		5b		tcd		                TCD
.19580a		28		plp		                PLP
.19580b		68		pla		                PLA             ; end setdp macro
.19580c		e2 20		sep #$20	                SEP #$20        ; set A short
.19580e		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.19580f		a0 05 00	ldy #$0005	            LDY #UART_LSR
.195812		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.195814		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.195816		f0 fa		beq $195812	            BEQ wait_putc
.195818		68		pla		            PLA
.195819		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.19581c		97 00		sta [$0700],y	            STA [CURRUART],Y
.19581e		2b		pld		            PLD
.19581f		28		plp		            PLP
.195820		6b		rtl		            RTL
.195821						UART_PUTS
.195821		08		php		            PHP
.195822		e2 20		sep #$20	                SEP #$20        ; set A short
.195824		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.195827		f0 07		beq $195830	            BEQ done
.195829		22 fe 57 19	jsl $1957fe	            JSL UART_PUTC
.19582d		e8		inx		            INX
.19582e		80 f4		bra $195824	            BRA put_loop
.195830		28		plp		done        PLP
.195831		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Joystick.asm

.195832						JOYSTICK_SET_NES_MODE
.195832		e2 20		sep #$20	                SEP #$20        ; set A short
.195834		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195838		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.19583a		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19583e		6b		rtl		          RTL
.19583f						JOYSTICK_SET_SNES_MODE
.19583f		e2 20		sep #$20	                SEP #$20        ; set A short
.195841		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195845		29 fb		and #$fb	          AND #~NES_SNES_JOY
.195847		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.195849		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19584d		6b		rtl		          RTL
.19584e						JOYSTICK_ENABLE_NES_SNES_PORT0
.19584e		e2 20		sep #$20	                SEP #$20        ; set A short
.195850		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195854		29 fe		and #$fe	          AND #~NES_SNES_EN0
.195856		09 01		ora #$01	          ORA #NES_SNES_EN0
.195858		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19585c		6b		rtl		          RTL
.19585d						JOYSTICK_ENABLE_NES_SNES_PORT1
.19585d		e2 20		sep #$20	                SEP #$20        ; set A short
.19585f		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195863		29 fd		and #$fd	          AND #~NES_SNES_EN1
.195865		09 02		ora #$02	          ORA #NES_SNES_EN1
.195867		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19586b		6b		rtl		          RTL
.19586c						JOYSTICK_DISABLE_NES_SNES_PORT0
.19586c		e2 20		sep #$20	                SEP #$20        ; set A short
.19586e		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195872		29 fe		and #$fe	          AND #~NES_SNES_EN0
.195874		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195878		6b		rtl		          RTL
.195879						JOYSTICK_DISABLE_NES_SNES_PORT1
.195879		e2 20		sep #$20	                SEP #$20        ; set A short
.19587b		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19587f		29 fd		and #$fd	          AND #~NES_SNES_EN1
.195881		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195885		6b		rtl		          RTL
.195886						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.195886		e2 20		sep #$20	                SEP #$20        ; set A short
.195888		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19588c		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.19588e		c9 00		cmp #$00	          CMP #$00
.195890		f0 14		beq $1958a6	          BEQ END_OF_JOYSTICK_POLL
.195892		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195896		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.195898		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19589c						JOYSTICK_POLLING_ISNOTOVER
.19589c		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.1958a0		29 40		and #$40	          AND #NES_SNES_DONE
.1958a2		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.1958a4		d0 f6		bne $19589c	          BNE JOYSTICK_POLLING_ISNOTOVER
.1958a6						END_OF_JOYSTICK_POLL
.1958a6		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/sdc_library.asm

.1958a7						SDC_WAITBUSY
.1958a7		08		php		                PHP
.1958a8		e2 20		sep #$20	                SEP #$20        ; set A short
.1958aa		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.1958ae		29 01		and #$01	                AND #SDC_TRANS_BUSY
.1958b0		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.1958b2		f0 f6		beq $1958aa	                BEQ wait_xact
.1958b4		28		plp		                PLP
.1958b5		6b		rtl		                RTL
.1958b6						SDC_RESET
.1958b6		08		php		                PHP
.1958b7		e2 20		sep #$20	                SEP #$20        ; set A short
.1958b9		a9 01		lda #$01	                LDA #1
.1958bb		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.1958bf		28		plp		                PLP
.1958c0		6b		rtl		                RTL
.1958c1						SDC_INIT
.1958c1		0b		phd		                PHD
.1958c2		8b		phb		                PHB
.1958c3		08		php		                PHP
.1958c4		48		pha		                PHA             ; begin setdbr macro
.1958c5		08		php		                PHP
.1958c6		e2 20		sep #$20	                SEP #$20        ; set A short
.1958c8		a9 00		lda #$00	                LDA #0
.1958ca		48		pha		                PHA
.1958cb		ab		plb		                PLB
.1958cc		28		plp		                PLP
.1958cd		68		pla		                PLA             ; end setdbr macro
.1958ce		48		pha		                PHA             ; begin setdp macro
.1958cf		08		php		                PHP
.1958d0		c2 20		rep #$20	                REP #$20        ; set A long
.1958d2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1958d5		5b		tcd		                TCD
.1958d6		28		plp		                PLP
.1958d7		68		pla		                PLA             ; end setdp macro
.1958d8		e2 20		sep #$20	                SEP #$20        ; set A short
.1958da		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.1958dc		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.1958e0		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.1958e2		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.1958e6		22 a7 58 19	jsl $1958a7	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.1958ea		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.1958ee		d0 07		bne $1958f7	                BNE ret_error                       ; Is there one? Process the error
.1958f0		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.1958f2		28		plp		                PLP
.1958f3		ab		plb		                PLB
.1958f4		2b		pld		                PLD
.1958f5		38		sec		                SEC
.1958f6		6b		rtl		                RTL
.1958f7		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.1958fa		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.1958fc		85 00		sta $0320	set_error       STA BIOS_STATUS
.1958fe		28		plp		                PLP
.1958ff		ab		plb		                PLB
.195900		2b		pld		                PLD
.195901		18		clc		                CLC
.195902		6b		rtl		                RTL
.195903						SDC_GETBLOCK
.195903		0b		phd		                PHD
.195904		8b		phb		                PHB
.195905		08		php		                PHP
.195906		48		pha		                PHA             ; begin setdbr macro
.195907		08		php		                PHP
.195908		e2 20		sep #$20	                SEP #$20        ; set A short
.19590a		a9 00		lda #$00	                LDA #0
.19590c		48		pha		                PHA
.19590d		ab		plb		                PLB
.19590e		28		plp		                PLP
.19590f		68		pla		                PLA             ; end setdbr macro
.195910		48		pha		                PHA             ; begin setdp macro
.195911		08		php		                PHP
.195912		c2 20		rep #$20	                REP #$20        ; set A long
.195914		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195917		5b		tcd		                TCD
.195918		28		plp		                PLP
.195919		68		pla		                PLA             ; end setdp macro
.19591a		e2 20		sep #$20	                SEP #$20        ; set A short
.19591c		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.195920		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.195922		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195926		a9 00		lda #$00	                LDA #0
.195928		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.19592c		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.19592e		0a		asl a		                ASL A
.19592f		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.195933		a5 03		lda $0323	                LDA BIOS_LBA+1
.195935		2a		rol a		                ROL A
.195936		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.19593a		a5 04		lda $0324	                LDA BIOS_LBA+2
.19593c		2a		rol a		                ROL A
.19593d		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.195941		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.195943		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.195947		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195949		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.19594d		22 a7 58 19	jsl $1958a7	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.195951		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195955		d0 36		bne $19598d	                BNE ret_error                       ; Is there one? Process the error
.195957		e2 20		sep #$20	                SEP #$20        ; set A short
.195959		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.19595d		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.19595f		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.195963		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.195965		c2 10		rep #$10	                REP #$10        ; set X long
.195967		a0 00 00	ldy #$0000	                LDY #0
.19596a		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.19596e		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.195970		c8		iny		                INY                                 ; Advance to the next byte
.195971		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.195974		d0 f4		bne $19596a	                BNE loop_rd                         ; No: keep reading
.195976		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.19597a		d0 11		bne $19598d	                BNE ret_error                       ; Is there one? Process the error
.19597c		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.19597e		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195982		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195984		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195988		28		plp		                PLP
.195989		ab		plb		                PLB
.19598a		2b		pld		                PLD
.19598b		38		sec		                SEC
.19598c		6b		rtl		                RTL
.19598d		a9 82		lda #$82	ret_error       LDA #BIOS_ERR_READ                  ; Return a read error
.19598f		85 00		sta $0320	                STA BIOS_STATUS
.195991		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195995		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195997		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.19599b		28		plp		                PLP
.19599c		ab		plb		                PLB
.19599d		2b		pld		                PLD
.19599e		18		clc		                CLC
.19599f		6b		rtl		                RTL
.1959a0						SDC_PUTBLOCK
.1959a0		0b		phd		                PHD
.1959a1		8b		phb		                PHB
.1959a2		08		php		                PHP
.1959a3		48		pha		                PHA             ; begin setdbr macro
.1959a4		08		php		                PHP
.1959a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1959a7		a9 00		lda #$00	                LDA #0
.1959a9		48		pha		                PHA
.1959aa		ab		plb		                PLB
.1959ab		28		plp		                PLP
.1959ac		68		pla		                PLA             ; end setdbr macro
.1959ad		48		pha		                PHA             ; begin setdp macro
.1959ae		08		php		                PHP
.1959af		c2 20		rep #$20	                REP #$20        ; set A long
.1959b1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1959b4		5b		tcd		                TCD
.1959b5		28		plp		                PLP
.1959b6		68		pla		                PLA             ; end setdp macro
.1959b7		e2 20		sep #$20	                SEP #$20        ; set A short
.1959b9		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.1959bd		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.1959bf		f0 04		beq $1959c5	                BEQ led_on                          ; Yes: start the transaction
.1959c1		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.1959c3		80 65		bra $195a2a	                BRA save_error
.1959c5		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.1959c9		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.1959cb		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.1959cf		c2 10		rep #$10	                REP #$10        ; set X long
.1959d1		a0 00 00	ldy #$0000	                LDY #0
.1959d4		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.1959d6		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.1959da		c8		iny		                INY                                 ; Advance to the next byte
.1959db		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.1959de		d0 f4		bne $1959d4	                BNE loop_wr                         ; No: keep writing
.1959e0		a9 00		lda #$00	                LDA #0
.1959e2		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.1959e6		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.1959e8		0a		asl a		                ASL A
.1959e9		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.1959ed		a5 03		lda $0323	                LDA BIOS_LBA+1
.1959ef		2a		rol a		                ROL A
.1959f0		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.1959f4		a5 04		lda $0324	                LDA BIOS_LBA+2
.1959f6		2a		rol a		                ROL A
.1959f7		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.1959fb		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.1959fd		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.195a01		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195a03		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195a07		22 a7 58 19	jsl $1958a7	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.195a0b		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195a0f		8d 06 03	sta $0306	                STA FDC_ST0                         ; Save any to the hardware status byte
.195a12		d0 14		bne $195a28	                BNE ret_error                       ; Is there one? Process the error
.195a14		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.195a16		9c 06 03	stz $0306	                STZ FDC_ST0
.195a19		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195a1d		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195a1f		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195a23		28		plp		                PLP
.195a24		ab		plb		                PLB
.195a25		2b		pld		                PLD
.195a26		38		sec		                SEC
.195a27		6b		rtl		                RTL
.195a28		a9 83		lda #$83	ret_error       LDA #BIOS_ERR_WRITE                 ; Return a write error
.195a2a		85 00		sta $0320	save_error      STA BIOS_STATUS
.195a2c		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195a30		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195a32		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195a36		28		plp		                PLP
.195a37		ab		plb		                PLB
.195a38		2b		pld		                PLD
.195a39		18		clc		                CLC
.195a3a		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.195a3b						FDC_TEST
.195a3b		8b		phb		                    PHB
.195a3c		0b		phd		                    PHD
.195a3d		08		php		                    PHP
.195a3e		48		pha		                PHA             ; begin setdbr macro
.195a3f		08		php		                PHP
.195a40		e2 20		sep #$20	                SEP #$20        ; set A short
.195a42		a9 00		lda #$00	                LDA #0
.195a44		48		pha		                PHA
.195a45		ab		plb		                PLB
.195a46		28		plp		                PLP
.195a47		68		pla		                PLA             ; end setdbr macro
.195a48		48		pha		                PHA             ; begin setdp macro
.195a49		08		php		                PHP
.195a4a		c2 20		rep #$20	                REP #$20        ; set A long
.195a4c		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195a4f		5b		tcd		                TCD
.195a50		28		plp		                PLP
.195a51		68		pla		                PLA             ; end setdp macro
.195a52		e2 20		sep #$20	                SEP #$20        ; set A short
.195a54		a9 f0		lda #$f0	                    LDA #$F0
.195a56		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.195a59		22 a8 10 00	jsl $0010a8	                    JSL CLRSCREEN
.195a5d		22 a0 10 00	jsl $0010a0	                    JSL CSRHOME
.195a61		c2 30		rep #$30	                REP #$30        ; set A&X long
.195a63		22 31 5d 19	jsl $195d31	                    JSL FDC_Init
.195a67		b0 03		bcs $195a6c	                    BCS init_ok
.195a69		82 20 00	brl $195a8c	                    BRL motor_off
.195a6c		22 30 64 19	jsl $196430	init_ok             JSL FDC_CHK_MEDIA
.195a70		90 03		bcc $195a75	                    BCC no_media
.195a72		82 03 00	brl $195a78	                    BRL is_ok1
.195a75						no_media
.195a75		82 14 00	brl $195a8c	                    BRL motor_off
.195a78		22 c3 62 19	jsl $1962c3	is_ok1              JSL FDC_MOUNT
.195a7c		90 03		bcc $195a81	                    BCC mount_err
.195a7e		82 03 00	brl $195a84	                    BRL is_ok2
.195a81						mount_err
.195a81		82 08 00	brl $195a8c	                    BRL motor_off
.195a84		22 98 5a 19	jsl $195a98	is_ok2              JSL FDC_TEST_PUTBLOCK
.195a88		b0 02		bcs $195a8c	                    BCS all_ok
.195a8a		80 00		bra $195a8c	                    BRA motor_off
.195a8c						all_ok
.195a8c		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.195a90		22 e1 5d 19	jsl $195de1	                    JSL FDC_Motor_Off
.195a94		28		plp		                    PLP
.195a95		2b		pld		                    PLD
.195a96		ab		plb		                    PLB
.195a97		6b		rtl		                    RTL
.195a98						FDC_TEST_PUTBLOCK
.195a98		e2 20		sep #$20	                SEP #$20        ; set A short
.195a9a		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.195a9c		a2 00 00	ldx #$0000	                    LDX #0
.195a9f		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.195aa3		1a		inc a		                    INC A
.195aa4		e8		inx		                    INX
.195aa5		e0 00 02	cpx #$0200	                    CPX #512
.195aa8		d0 f5		bne $195a9f	                    BNE init_loop
.195aaa		c2 20		rep #$20	                REP #$20        ; set A long
.195aac		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.195aaf		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.195ab3		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.195ab6		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.195aba		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.195abd		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.195ac1		a9 00 00	lda #$0000	                    LDA #0
.195ac4		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.195ac8		22 57 62 19	jsl $196257	                    JSL FDC_PUTBLOCK                ; Try to write the data
.195acc		6b		rtl		                    RTL
>195acd		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>195ad5		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>195ae5		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.195ae9						FDC_Check_RQM
.195ae9		0b		phd		                    PHD
.195aea		08		php		                    PHP
.195aeb		48		pha		                PHA             ; begin setdp macro
.195aec		08		php		                PHP
.195aed		c2 20		rep #$20	                REP #$20        ; set A long
.195aef		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195af2		5b		tcd		                TCD
.195af3		28		plp		                PLP
.195af4		68		pla		                PLA             ; end setdp macro
.195af5		e2 20		sep #$20	                SEP #$20        ; set A short
.195af7		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195af9		22 cc 3a 19	jsl $193acc	                    JSL ISETTIMEOUT
.195afd		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195aff		30 12		bmi $195b13	                    BMI time_out            ; If so: signal a time out
.195b01		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195b05		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.195b07		f0 f4		beq $195afd	                    BEQ loop
.195b09		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195b0b		22 cc 3a 19	jsl $193acc	                    JSL ISETTIMEOUT
.195b0f		28		plp		                    PLP
.195b10		2b		pld		                    PLD
.195b11		38		sec		                    SEC
.195b12		60		rts		                    RTS
.195b13		28		plp		time_out            PLP
.195b14		2b		pld		                    PLD
.195b15		18		clc		                    CLC
.195b16		60		rts		                    RTS
.195b17						FDC_Check_DRV0_BSY
.195b17		0b		phd		                    PHD
.195b18		08		php		                    PHP
.195b19		48		pha		                PHA             ; begin setdp macro
.195b1a		08		php		                PHP
.195b1b		c2 20		rep #$20	                REP #$20        ; set A long
.195b1d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195b20		5b		tcd		                TCD
.195b21		28		plp		                PLP
.195b22		68		pla		                PLA             ; end setdp macro
.195b23		e2 20		sep #$20	                SEP #$20        ; set A short
.195b25		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195b27		22 cc 3a 19	jsl $193acc	                    JSL ISETTIMEOUT
.195b2b		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195b2d		30 12		bmi $195b41	                    BMI time_out            ; If so: signal a time out
.195b2f		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195b33		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.195b35		d0 f4		bne $195b2b	                    BNE loop
.195b37		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195b39		22 cc 3a 19	jsl $193acc	                    JSL ISETTIMEOUT
.195b3d		28		plp		                    PLP
.195b3e		2b		pld		                    PLD
.195b3f		38		sec		                    SEC
.195b40		60		rts		                    RTS
.195b41		28		plp		time_out            PLP
.195b42		2b		pld		                    PLD
.195b43		18		clc		                    CLC
.195b44		60		rts		                    RTS
.195b45						FDC_Check_CMD_BSY
.195b45		0b		phd		                    PHD
.195b46		08		php		                    PHP
.195b47		48		pha		                PHA             ; begin setdp macro
.195b48		08		php		                PHP
.195b49		c2 20		rep #$20	                REP #$20        ; set A long
.195b4b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195b4e		5b		tcd		                TCD
.195b4f		28		plp		                PLP
.195b50		68		pla		                PLA             ; end setdp macro
.195b51		e2 20		sep #$20	                SEP #$20        ; set A short
.195b53		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195b55		22 cc 3a 19	jsl $193acc	                    JSL ISETTIMEOUT
.195b59		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195b5b		30 12		bmi $195b6f	                    BMI time_out            ; If so: signal a time out
.195b5d		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195b61		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.195b63		d0 f4		bne $195b59	                    BNE loop
.195b65		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195b67		22 cc 3a 19	jsl $193acc	                    JSL ISETTIMEOUT
.195b6b		28		plp		                    PLP
.195b6c		2b		pld		                    PLD
.195b6d		38		sec		                    SEC
.195b6e		60		rts		                    RTS
.195b6f		28		plp		time_out            PLP
.195b70		2b		pld		                    PLD
.195b71		18		clc		                    CLC
.195b72		60		rts		                    RTS
.195b73						FDC_Can_Read_Data
.195b73		0b		phd		                    PHD
.195b74		08		php		                    PHP
.195b75		48		pha		                PHA             ; begin setdp macro
.195b76		08		php		                PHP
.195b77		c2 20		rep #$20	                REP #$20        ; set A long
.195b79		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195b7c		5b		tcd		                TCD
.195b7d		28		plp		                PLP
.195b7e		68		pla		                PLA             ; end setdp macro
.195b7f		e2 20		sep #$20	                SEP #$20        ; set A short
.195b81		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195b83		22 cc 3a 19	jsl $193acc	                    JSL ISETTIMEOUT
.195b87		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195b89		30 14		bmi $195b9f	                    BMI time_out            ; If so: signal a time out
.195b8b		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195b8f		29 40		and #$40	                    AND #FDC_MSR_DIO
.195b91		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.195b93		d0 f2		bne $195b87	                    BNE loop
.195b95		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195b97		22 cc 3a 19	jsl $193acc	                    JSL ISETTIMEOUT
.195b9b		28		plp		                    PLP
.195b9c		2b		pld		                    PLD
.195b9d		38		sec		                    SEC
.195b9e		60		rts		                    RTS
.195b9f		28		plp		time_out            PLP
.195ba0		2b		pld		                    PLD
.195ba1		18		clc		                    CLC
.195ba2		60		rts		                    RTS
.195ba3						FDC_CAN_WRITE
.195ba3		0b		phd		                    PHD
.195ba4		08		php		                    PHP
.195ba5		48		pha		                PHA             ; begin setdp macro
.195ba6		08		php		                PHP
.195ba7		c2 20		rep #$20	                REP #$20        ; set A long
.195ba9		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195bac		5b		tcd		                TCD
.195bad		28		plp		                PLP
.195bae		68		pla		                PLA             ; end setdp macro
.195baf		e2 20		sep #$20	                SEP #$20        ; set A short
.195bb1		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195bb3		22 cc 3a 19	jsl $193acc	                    JSL ISETTIMEOUT
.195bb7		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195bb9		30 14		bmi $195bcf	                    BMI time_out            ; If so: signal a time out
.195bbb		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195bbf		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195bc1		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.195bc3		d0 f2		bne $195bb7	                    BNE loop
.195bc5		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195bc7		22 cc 3a 19	jsl $193acc	                    JSL ISETTIMEOUT
.195bcb		28		plp		                    PLP
.195bcc		2b		pld		                    PLD
.195bcd		38		sec		                    SEC
.195bce		60		rts		                    RTS
.195bcf		28		plp		time_out            PLP
.195bd0		2b		pld		                    PLD
.195bd1		18		clc		                    CLC
.195bd2		60		rts		                    RTS
.195bd3						FDC_DELAY_10MS
.195bd3		da		phx		                    PHX
.195bd4		08		php		                    PHP
.195bd5		c2 10		rep #$10	                REP #$10        ; set X long
.195bd7		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.195bda		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.195bdb		ca		dex		                    DEX
.195bdc		e0 00 00	cpx #$0000	                    CPX #0
.195bdf		d0 f9		bne $195bda	                    BNE loop
.195be1		28		plp		                    PLP
.195be2		fa		plx		                    PLX
.195be3		6b		rtl		                    RTL
.195be4						FDC_COMMAND
.195be4		da		phx		                    PHX
.195be5		8b		phb		                    PHB
.195be6		0b		phd		                    PHD
.195be7		08		php		                    PHP
.195be8		48		pha		                PHA             ; begin setdbr macro
.195be9		08		php		                PHP
.195bea		e2 20		sep #$20	                SEP #$20        ; set A short
.195bec		a9 00		lda #$00	                LDA #0
.195bee		48		pha		                PHA
.195bef		ab		plb		                PLB
.195bf0		28		plp		                PLP
.195bf1		68		pla		                PLA             ; end setdbr macro
.195bf2		48		pha		                PHA             ; begin setdp macro
.195bf3		08		php		                PHP
.195bf4		c2 20		rep #$20	                REP #$20        ; set A long
.195bf6		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195bf9		5b		tcd		                TCD
.195bfa		28		plp		                PLP
.195bfb		68		pla		                PLA             ; end setdp macro
.195bfc		22 d3 5b 19	jsl $195bd3	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.195c00		e2 30		sep #$30	                SEP #$30        ; set A&X short
.195c02		a2 00		ldx #$00	                    LDX #0
.195c04		a9 00		lda #$00	                    LDA #0
.195c06		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.195c09		e8		inx		                    INX
.195c0a		e0 10		cpx #$10	                    CPX #16
.195c0c		d0 f8		bne $195c06	                    BNE clr_results
.195c0e		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.195c12		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195c14		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.195c16		f0 04		beq $195c1c	                    BEQ start_send                          ; If so, start sending
.195c18		22 31 5d 19	jsl $195d31	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.195c1c						start_send
.195c1c		e2 10		sep #$10	                SEP #$10        ; set X short
.195c1e		a2 00		ldx #$00	                    LDX #0
.195c20		20 e9 5a	jsr $195ae9	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.195c23		b0 03		bcs $195c28	                    BCS send_param
.195c25		82 5e 00	brl $195c86	                    BRL time_out                            ; If there was a timeout, flag the time out
.195c28		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.195c2b		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.195c2f		22 d3 5b 19	jsl $195bd3	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.195c33		e8		inx		                    INX                                     ; Advance to the next byte
.195c34		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.195c37		d0 e7		bne $195c20	                    BNE send_loop                           ; Keep sending until we've sent them all
.195c39		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.195c3c		d0 03		bne $195c41	                    BNE chk_data_dir
.195c3e		82 80 00	brl $195cc1	                    BRL result_phase                        ; If 0: we just want a result
.195c41		10 3c		bpl $195c7f	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.195c43						wr_data
.195c43		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.195c45		30 03		bmi $195c4a	                    BMI wr_chk_rqm
.195c47		82 3c 00	brl $195c86	                    BRL time_out                            ; If not, raise an error
.195c4a		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.195c4e		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.195c50		f0 f1		beq $195c43	                    BEQ wr_data_rdy
.195c52		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.195c54		d0 03		bne $195c59	                    BNE wr_data_phase                       ; If so: transfer the data
.195c56		82 68 00	brl $195cc1	                    BRL result_phase                          ; If not: it's an error
.195c59						wr_data_phase
.195c59		c2 10		rep #$10	                REP #$10        ; set X long
.195c5b		a0 00 00	ldy #$0000	                    LDY #0
.195c5e		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.195c60		30 03		bmi $195c65	                    BMI wr_chk_nondma
.195c62		82 21 00	brl $195c86	                    BRL time_out                            ; If not, raise an error
.195c65		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.195c69		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.195c6b		f0 54		beq $195cc1	                    BEQ result_phase                        ; If not: break out to result phase
.195c6d		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.195c6f		f0 ed		beq $195c5e	                    BEQ wr_data_loop                        ; No: keep waiting
.195c71		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.195c73		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.195c77		c8		iny		                    INY                                     ; Move to the next position
.195c78		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.195c7b		d0 e1		bne $195c5e	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.195c7d		80 42		bra $195cc1	                    BRA result_phase                        ; ready for the result phase
.195c7f		20 73 5b	jsr $195b73	rd_data             JSR FDC_Can_Read_Data
.195c82		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.195c84		30 07		bmi $195c8d	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.195c86						time_out
.195c86		e2 20		sep #$20	                SEP #$20        ; set A short
.195c88		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.195c8a		82 9c 00	brl $195d29	                    BRL pass_error
.195c8d		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.195c91		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195c93		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.195c95		d0 eb		bne $195c82	                    BNE rd_data_rdy
.195c97		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.195c9b		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.195c9d		d0 03		bne $195ca2	                    BNE rd_data_phase                       ; If so: transfer the data
.195c9f		82 83 00	brl $195d25	                    BRL error                               ; If not: it's an error
.195ca2						rd_data_phase
.195ca2		c2 10		rep #$10	                REP #$10        ; set X long
.195ca4		a0 00 00	ldy #$0000	                    LDY #0
.195ca7		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.195ca9		10 db		bpl $195c86	                    BPL time_out                            ; If not: throw a timeout error
.195cab		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.195caf		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195cb1		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.195cb3		d0 f2		bne $195ca7	                    BNE rd_data_loop
.195cb5		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.195cb9		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.195cbb		c8		iny		                    INY                                     ; Move to the next position
.195cbc		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.195cbf		d0 e6		bne $195ca7	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.195cc1		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.195cc4		f0 34		beq $195cfa	                    BEQ chk_busy                            ; Then we're done
.195cc6		e2 10		sep #$10	                SEP #$10        ; set X short
.195cc8		a2 00		ldx #$00	                    LDX #0
.195cca		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.195ccc		22 cc 3a 19	jsl $193acc	                    JSL ISETTIMEOUT
.195cd0		20 73 5b	jsr $195b73	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.195cd3		90 b1		bcc $195c86	                    BCC time_out                            ; If there was a time out, raise an error
.195cd5		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.195cd9		20 73 5b	jsr $195b73	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.195cdc		90 a8		bcc $195c86	                    BCC time_out                            ; If there was a time out, raise an error
.195cde		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.195ce2		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.195ce5		20 e9 5a	jsr $195ae9	                    JSR FDC_Check_RQM
.195ce8		90 9c		bcc $195c86	                    BCC time_out                            ; If there was a time out, flag the error
.195cea		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.195cee		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.195cf0		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.195cf2		d0 06		bne $195cfa	                    BNE chk_busy
.195cf4		e8		inx		                    INX                                     ; Move to the next result positions
.195cf5		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.195cf8		d0 e4		bne $195cde	                    BNE read_result                         ; And keep looping until we've read all
.195cfa						chk_busy
.195cfa		c2 10		rep #$10	                REP #$10        ; set X long
.195cfc		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.195cff		22 cd 0f 19	jsl $190fcd	                    JSL ILOOP_MS
.195d03		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.195d07		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.195d09		f0 12		beq $195d1d	                    BEQ done                                ; If not set: we're done
.195d0b		20 73 5b	jsr $195b73	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.195d0e		b0 03		bcs $195d13	                    BCS get_result_byte
.195d10		82 73 ff	brl $195c86	                    BRL time_out                            ; If there was a time out, flag the error
.195d13		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.195d17		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.195d1a		e8		inx		                    INX
.195d1b		80 dd		bra $195cfa	                    BRA chk_busy                            ; And keep checking
.195d1d						done
.195d1d		64 20		stz $0320	                    STZ BIOS_STATUS
.195d1f		28		plp		                    PLP
.195d20		2b		pld		                    PLD
.195d21		ab		plb		                    PLB
.195d22		fa		plx		                    PLX
.195d23		38		sec		                    SEC
.195d24		6b		rtl		                    RTL
.195d25						error
.195d25		e2 20		sep #$20	                SEP #$20        ; set A short
.195d27		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.195d29		85 20		sta $0320	pass_error          STA BIOS_STATUS
.195d2b		28		plp		                    PLP
.195d2c		2b		pld		                    PLD
.195d2d		ab		plb		                    PLB
.195d2e		fa		plx		                    PLX
.195d2f		18		clc		                    CLC
.195d30		6b		rtl		                    RTL
.195d31						FDC_Init
.195d31		08		php		                    PHP
.195d32		c2 10		rep #$10	                REP #$10        ; set X long
.195d34		e2 20		sep #$20	                SEP #$20        ; set A short
.195d36		a9 00		lda #$00	                    LDA #0
.195d38		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.195d3c		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.195d3f		a0 00 00	ldy #$0000	                    LDY #0
.195d42		22 da 0f 19	jsl $190fda	                    JSL IDELAY
.195d46		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.195d48		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.195d4c		ea		nop		                    NOP
.195d4d		ea		nop		                    NOP
.195d4e		ea		nop		                    NOP
.195d4f		ea		nop		                    NOP
.195d50		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.195d52		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.195d56		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.195d58		8f f8 13 af	sta $af13f8	                    STA @l SIO_FDC_CCR
.195d5c		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.195d5f		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.195d62		22 da 0f 19	jsl $190fda	                    JSL IDELAY
.195d66		22 41 5e 19	jsl $195e41	                    JSL FDC_Sense_Int_Status
.195d6a		90 25		bcc $195d91	                    BCC pass_failure
.195d6c		22 41 5e 19	jsl $195e41	                    JSL FDC_Sense_Int_Status
.195d70		90 1f		bcc $195d91	                    BCC pass_failure
.195d72		22 41 5e 19	jsl $195e41	                    JSL FDC_Sense_Int_Status
.195d76		90 19		bcc $195d91	                    BCC pass_failure
.195d78		22 41 5e 19	jsl $195e41	                    JSL FDC_Sense_Int_Status
.195d7c		90 13		bcc $195d91	                    BCC pass_failure
.195d7e		22 03 5f 19	jsl $195f03	                    JSL FDC_Configure_Command
.195d82		90 0d		bcc $195d91	                    BCC pass_failure
.195d84		22 aa 5e 19	jsl $195eaa	                    JSL FDC_Specify_Command
.195d88		90 07		bcc $195d91	                    BCC pass_failure
.195d8a		22 ad 5d 19	jsl $195dad	                    JSL FDC_Motor_On
.195d8e		28		plp		                    PLP
.195d8f		38		sec		                    SEC
.195d90		6b		rtl		                    RTL
.195d91		28		plp		pass_failure        PLP
.195d92		18		clc		                    CLC
.195d93		6b		rtl		                    RTL
.195d94						FDC_MOTOR_NEEDED
.195d94		08		php		                    PHP
.195d95		c2 20		rep #$20	                REP #$20        ; set A long
.195d97		78		sei		                    SEI                         ; Turn off interrupts
.195d98		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.195d9b		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.195d9f		e2 20		sep #$20	                SEP #$20        ; set A short
.195da1		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.195da5		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.195da7		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.195dab		28		plp		                    PLP
.195dac		6b		rtl		                    RTL
.195dad						FDC_Motor_On
.195dad		08		php		                    PHP
.195dae		22 94 5d 19	jsl $195d94	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.195db2		e2 20		sep #$20	                SEP #$20        ; set A short
.195db4		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.195db8		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.195dba		d0 1f		bne $195ddb	                    BNE done                    ; If so: skip
.195dbc		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.195dbe		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.195dc2		20 e9 5a	jsr $195ae9	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.195dc5		90 17		bcc $195dde	                    BCC time_out
.195dc7		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.195dca		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.195dcd		22 da 0f 19	jsl $190fda	                    JSL IDELAY
.195dd1		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.195dd5		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.195dd7		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.195ddb		28		plp		done                PLP
.195ddc		38		sec		                    SEC
.195ddd		6b		rtl		                    RTL
.195dde		28		plp		time_out            PLP                         ; Return a timeout error
.195ddf		18		clc		                    CLC
.195de0		6b		rtl		                    RTL
.195de1						FDC_Motor_Off
.195de1		08		php		                    PHP
.195de2		e2 20		sep #$20	                SEP #$20        ; set A short
.195de4		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.195de6		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.195dea		c2 20		rep #$20	                REP #$20        ; set A long
.195dec		78		sei		                    SEI                         ; Turn off interrupts
.195ded		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.195df0		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.195df4		e2 20		sep #$20	                SEP #$20        ; set A short
.195df6		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.195dfa		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.195dfc		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.195e00		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.195e04		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.195e06		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.195e0a		28		plp		                    PLP
.195e0b		6b		rtl		                    RTL
.195e0c						FDC_Recalibrate_Command
.195e0c		0b		phd		                    PHD
.195e0d		08		php		                    PHP
.195e0e		48		pha		                PHA             ; begin setdp macro
.195e0f		08		php		                PHP
.195e10		c2 20		rep #$20	                REP #$20        ; set A long
.195e12		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195e15		5b		tcd		                TCD
.195e16		28		plp		                PLP
.195e17		68		pla		                PLA             ; end setdp macro
.195e18		22 94 5d 19	jsl $195d94	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.195e1c		e2 20		sep #$20	                SEP #$20        ; set A short
.195e1e		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.195e20		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195e23		a5 00		lda $0300	                    LDA FDC_DRIVE
.195e25		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.195e28		a9 02		lda #$02	                    LDA #2
.195e2a		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.195e2d		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.195e30		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.195e33		22 e4 5b 19	jsl $195be4	                    JSL FDC_COMMAND             ; Issue the command
.195e37		90 04		bcc $195e3d	                    BCC pass_failure            ; If failure, pass the failure up
.195e39		28		plp		                    PLP
.195e3a		2b		pld		                    PLD
.195e3b		38		sec		                    SEC
.195e3c		6b		rtl		                    RTL
.195e3d		28		plp		pass_failure        PLP
.195e3e		2b		pld		                    PLD
.195e3f		18		clc		                    CLC
.195e40		6b		rtl		                    RTL
.195e41						FDC_Sense_Int_Status
.195e41		8b		phb		                    PHB
.195e42		0b		phd		                    PHD
.195e43		08		php		                    PHP
.195e44		48		pha		                PHA             ; begin setdbr macro
.195e45		08		php		                PHP
.195e46		e2 20		sep #$20	                SEP #$20        ; set A short
.195e48		a9 00		lda #$00	                LDA #0
.195e4a		48		pha		                PHA
.195e4b		ab		plb		                PLB
.195e4c		28		plp		                PLP
.195e4d		68		pla		                PLA             ; end setdbr macro
.195e4e		48		pha		                PHA             ; begin setdp macro
.195e4f		08		php		                PHP
.195e50		c2 20		rep #$20	                REP #$20        ; set A long
.195e52		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195e55		5b		tcd		                TCD
.195e56		28		plp		                PLP
.195e57		68		pla		                PLA             ; end setdp macro
.195e58		c2 30		rep #$30	                REP #$30        ; set A&X long
.195e5a		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.195e5d		22 cd 0f 19	jsl $190fcd	                    JSL ILOOP_MS
.195e61		e2 20		sep #$20	                SEP #$20        ; set A short
.195e63		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.195e65		a9 ff		lda #$ff	                    LDA #$FF
.195e67		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.195e69		20 45 5b	jsr $195b45	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.195e6c		90 30		bcc $195e9e	                    BCC time_out                        ; If there was a time out, raise an error
.195e6e		20 e9 5a	jsr $195ae9	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195e71		90 2b		bcc $195e9e	                    BCC time_out                        ; If there was a time out, raise an error
.195e73		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.195e75		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195e79		20 73 5b	jsr $195b73	                    JSR FDC_Can_Read_Data
.195e7c		90 20		bcc $195e9e	                    BCC time_out                        ; If there was a time out, raise an error
.195e7e		20 e9 5a	jsr $195ae9	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195e81		90 1b		bcc $195e9e	                    BCC time_out                        ; If there was a time out, raise an error
.195e83		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.195e87		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.195e89		20 e9 5a	jsr $195ae9	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195e8c		90 10		bcc $195e9e	                    BCC time_out                        ; If there was a time out, raise an error
.195e8e		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.195e92		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.195e94		e2 20		sep #$20	                SEP #$20        ; set A short
.195e96		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.195e99		28		plp		                    PLP
.195e9a		2b		pld		                    PLD
.195e9b		ab		plb		                    PLB
.195e9c		38		sec		                    SEC
.195e9d		6b		rtl		                    RTL
.195e9e						time_out
.195e9e		e2 20		sep #$20	                SEP #$20        ; set A short
.195ea0		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.195ea2		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195ea5		28		plp		                    PLP
.195ea6		2b		pld		                    PLD
.195ea7		ab		plb		                    PLB
.195ea8		18		clc		                    CLC
.195ea9		6b		rtl		                    RTL
.195eaa						FDC_Specify_Command
.195eaa		8b		phb		                    PHB
.195eab		0b		phd		                    PHD
.195eac		08		php		                    PHP
.195ead		48		pha		                PHA             ; begin setdbr macro
.195eae		08		php		                PHP
.195eaf		e2 20		sep #$20	                SEP #$20        ; set A short
.195eb1		a9 00		lda #$00	                LDA #0
.195eb3		48		pha		                PHA
.195eb4		ab		plb		                PLB
.195eb5		28		plp		                PLP
.195eb6		68		pla		                PLA             ; end setdbr macro
.195eb7		48		pha		                PHA             ; begin setdp macro
.195eb8		08		php		                PHP
.195eb9		c2 20		rep #$20	                REP #$20        ; set A long
.195ebb		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195ebe		5b		tcd		                TCD
.195ebf		28		plp		                PLP
.195ec0		68		pla		                PLA             ; end setdp macro
.195ec1		c2 30		rep #$30	                REP #$30        ; set A&X long
.195ec3		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.195ec6		22 cd 0f 19	jsl $190fcd	                    JSL ILOOP_MS
.195eca		e2 20		sep #$20	                SEP #$20        ; set A short
.195ecc		20 45 5b	jsr $195b45	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195ecf		90 26		bcc $195ef7	                    BCC time_out            ; If there was a time out, raise an error
.195ed1		20 e9 5a	jsr $195ae9	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195ed4		90 21		bcc $195ef7	                    BCC time_out            ; If there was a time out, raise an error
.195ed6		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.195ed8		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195edc		20 e9 5a	jsr $195ae9	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195edf		90 16		bcc $195ef7	                    BCC time_out            ; If there was a time out, raise an error
.195ee1		a9 cf		lda #$cf	                    LDA #$CF
.195ee3		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195ee7		20 e9 5a	jsr $195ae9	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195eea		90 0b		bcc $195ef7	                    BCC time_out            ; If there was a time out, raise an error
.195eec		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.195eee		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195ef2		28		plp		                    PLP
.195ef3		2b		pld		                    PLD
.195ef4		ab		plb		                    PLB
.195ef5		38		sec		                    SEC
.195ef6		6b		rtl		                    RTL
.195ef7						time_out
.195ef7		e2 20		sep #$20	                SEP #$20        ; set A short
.195ef9		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.195efb		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195efe		28		plp		                    PLP
.195eff		2b		pld		                    PLD
.195f00		ab		plb		                    PLB
.195f01		18		clc		                    CLC
.195f02		6b		rtl		                    RTL
.195f03						FDC_Configure_Command
.195f03		8b		phb		                    PHB
.195f04		0b		phd		                    PHD
.195f05		08		php		                    PHP
.195f06		48		pha		                PHA             ; begin setdbr macro
.195f07		08		php		                PHP
.195f08		e2 20		sep #$20	                SEP #$20        ; set A short
.195f0a		a9 00		lda #$00	                LDA #0
.195f0c		48		pha		                PHA
.195f0d		ab		plb		                PLB
.195f0e		28		plp		                PLP
.195f0f		68		pla		                PLA             ; end setdbr macro
.195f10		48		pha		                PHA             ; begin setdp macro
.195f11		08		php		                PHP
.195f12		c2 20		rep #$20	                REP #$20        ; set A long
.195f14		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195f17		5b		tcd		                TCD
.195f18		28		plp		                PLP
.195f19		68		pla		                PLA             ; end setdp macro
.195f1a		c2 30		rep #$30	                REP #$30        ; set A&X long
.195f1c		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.195f1f		22 cd 0f 19	jsl $190fcd	                    JSL ILOOP_MS
.195f23		e2 20		sep #$20	                SEP #$20        ; set A short
.195f25		20 45 5b	jsr $195b45	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195f28		90 36		bcc $195f60	                    BCC time_out            ; If there was a time out, raise an error
.195f2a		20 e9 5a	jsr $195ae9	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f2d		90 31		bcc $195f60	                    BCC time_out            ; If there was a time out, raise an error
.195f2f		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.195f31		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f35		20 e9 5a	jsr $195ae9	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f38		90 26		bcc $195f60	                    BCC time_out            ; If there was a time out, raise an error
.195f3a		a9 00		lda #$00	                    LDA #$00
.195f3c		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f40		20 e9 5a	jsr $195ae9	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f43		90 1b		bcc $195f60	                    BCC time_out            ; If there was a time out, raise an error
.195f45		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.195f47		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f4b		20 e9 5a	jsr $195ae9	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f4e		90 10		bcc $195f60	                    BCC time_out            ; If there was a time out, raise an error
.195f50		a9 00		lda #$00	                    LDA #$00
.195f52		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f56		20 45 5b	jsr $195b45	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195f59		90 05		bcc $195f60	                    BCC time_out            ; If there was a time out, raise an error
.195f5b		28		plp		                    PLP
.195f5c		2b		pld		                    PLD
.195f5d		ab		plb		                    PLB
.195f5e		38		sec		                    SEC
.195f5f		6b		rtl		                    RTL
.195f60						time_out
.195f60		e2 20		sep #$20	                SEP #$20        ; set A short
.195f62		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.195f64		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195f67		28		plp		                    PLP
.195f68		2b		pld		                    PLD
.195f69		ab		plb		                    PLB
.195f6a		18		clc		                    CLC
.195f6b		6b		rtl		                    RTL
.195f6c						FDC_Read_ID_Command
.195f6c		8b		phb		                    PHB
.195f6d		0b		phd		                    PHD
.195f6e		08		php		                    PHP
.195f6f		48		pha		                PHA             ; begin setdbr macro
.195f70		08		php		                PHP
.195f71		e2 20		sep #$20	                SEP #$20        ; set A short
.195f73		a9 00		lda #$00	                LDA #0
.195f75		48		pha		                PHA
.195f76		ab		plb		                PLB
.195f77		28		plp		                PLP
.195f78		68		pla		                PLA             ; end setdbr macro
.195f79		48		pha		                PHA             ; begin setdp macro
.195f7a		08		php		                PHP
.195f7b		c2 20		rep #$20	                REP #$20        ; set A long
.195f7d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195f80		5b		tcd		                TCD
.195f81		28		plp		                PLP
.195f82		68		pla		                PLA             ; end setdp macro
.195f83		e2 20		sep #$20	                SEP #$20        ; set A short
.195f85		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.195f87		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195f8a		a9 01		lda #$01	                    LDA #1
.195f8c		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.195f8f		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.195f92		a9 07		lda #$07	                    LDA #7
.195f94		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.195f97		22 e4 5b 19	jsl $195be4	                    JSL FDC_COMMAND                     ; Issue the command
.195f9b		90 27		bcc $195fc4	                    BCC pass_failure
.195f9d		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.195fa0		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.195fa2		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.195fa5		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.195fa7		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.195faa		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.195fac		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.195faf		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.195fb1		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.195fb4		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.195fb6		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.195fb9		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.195fbb		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.195fbe		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.195fc0		28		plp		                    PLP
.195fc1		2b		pld		                    PLD
.195fc2		ab		plb		                    PLB
.195fc3		6b		rtl		                    RTL
.195fc4		28		plp		pass_failure        PLP
.195fc5		2b		pld		                    PLD
.195fc6		ab		plb		                    PLB
.195fc7		18		clc		                    CLC
.195fc8		6b		rtl		                    RTL
.195fc9						FDC_DumpReg_Command
.195fc9		0b		phd		                    PHD
.195fca		08		php		                    PHP
.195fcb		e2 20		sep #$20	                SEP #$20        ; set A short
.195fcd		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.195fcf		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195fd2		a9 01		lda #$01	                    LDA #1
.195fd4		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.195fd7		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.195fda		a9 0a		lda #$0a	                    LDA #10
.195fdc		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.195fdf		22 e4 5b 19	jsl $195be4	                    JSL FDC_COMMAND                     ; Issue the command
.195fe3		90 03		bcc $195fe8	                    BCC pass_failure
.195fe5		28		plp		                    PLP
.195fe6		2b		pld		                    PLD
.195fe7		6b		rtl		                    RTL
.195fe8		28		plp		pass_failure        PLP
.195fe9		2b		pld		                    PLD
.195fea		18		clc		                    CLC
.195feb		6b		rtl		                    RTL
.195fec						FDC_Seek_Track
.195fec		8b		phb		                    PHB
.195fed		0b		phd		                    PHD
.195fee		08		php		                    PHP
.195fef		48		pha		                PHA             ; begin setdbr macro
.195ff0		08		php		                PHP
.195ff1		e2 20		sep #$20	                SEP #$20        ; set A short
.195ff3		a9 00		lda #$00	                LDA #0
.195ff5		48		pha		                PHA
.195ff6		ab		plb		                PLB
.195ff7		28		plp		                PLP
.195ff8		68		pla		                PLA             ; end setdbr macro
.195ff9		48		pha		                PHA             ; begin setdp macro
.195ffa		08		php		                PHP
.195ffb		c2 20		rep #$20	                REP #$20        ; set A long
.195ffd		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196000		5b		tcd		                TCD
.196001		28		plp		                PLP
.196002		68		pla		                PLA             ; end setdp macro
.196003		22 94 5d 19	jsl $195d94	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.196007		e2 20		sep #$20	                SEP #$20        ; set A short
.196009		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.19600b		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.19600e		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.196010		29 01		and #$01	                    AND #$01
.196012		0a		asl a		                    ASL A
.196013		0a		asl a		                    ASL A
.196014		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.196016		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.196019		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.19601b		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.19601e		a9 03		lda #$03	                    LDA #3
.196020		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.196023		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.196026		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.196029		22 e4 5b 19	jsl $195be4	                    JSL FDC_COMMAND                     ; Issue the command
.19602d		90 05		bcc $196034	                    BCC pass_failure
.19602f		28		plp		                    PLP
.196030		2b		pld		                    PLD
.196031		ab		plb		                    PLB
.196032		38		sec		                    SEC
.196033		6b		rtl		                    RTL
.196034		28		plp		pass_failure        PLP
.196035		2b		pld		                    PLD
.196036		ab		plb		                    PLB
.196037		18		clc		                    CLC
.196038		6b		rtl		                    RTL
.196039						FDC_Read_Sector
.196039		8b		phb		                    PHB
.19603a		0b		phd		                    PHD
.19603b		08		php		                    PHP
.19603c		48		pha		                PHA             ; begin setdbr macro
.19603d		08		php		                PHP
.19603e		e2 20		sep #$20	                SEP #$20        ; set A short
.196040		a9 00		lda #$00	                LDA #0
.196042		48		pha		                PHA
.196043		ab		plb		                PLB
.196044		28		plp		                PLP
.196045		68		pla		                PLA             ; end setdbr macro
.196046		48		pha		                PHA             ; begin setdp macro
.196047		08		php		                PHP
.196048		c2 20		rep #$20	                REP #$20        ; set A long
.19604a		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19604d		5b		tcd		                TCD
.19604e		28		plp		                PLP
.19604f		68		pla		                PLA             ; end setdp macro
.196050		22 94 5d 19	jsl $195d94	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.196054		e2 20		sep #$20	                SEP #$20        ; set A short
.196056		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.196058		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.19605a		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.19605d		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.19605f		29 01		and #$01	                    AND #$01
.196061		0a		asl a		                    ASL A
.196062		0a		asl a		                    ASL A
.196063		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.196065		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.196068		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.19606a		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.19606d		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.19606f		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.196072		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.196074		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.196077		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.196079		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.19607c		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.19607e		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.196081		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.196083		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.196086		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.196088		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.19608b		a9 09		lda #$09	                    LDA #9
.19608d		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.196090		a9 01		lda #$01	                    LDA #1
.196092		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.196095		a9 07		lda #$07	                    LDA #7
.196097		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.19609a		22 e4 5b 19	jsl $195be4	command             JSL FDC_COMMAND                     ; Issue the command
.19609e		08		php		                    PHP
.19609f		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.1960a2		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.1960a4		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.1960a7		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.1960a9		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.1960ac		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.1960ae		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.1960b1		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.1960b3		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.1960b6		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.1960b8		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.1960bb		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.1960bd		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.1960c0		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.1960c2		28		plp		                    PLP
.1960c3		90 04		bcc $1960c9	                    BCC pass_failure
.1960c5		28		plp		done                PLP
.1960c6		2b		pld		                    PLD
.1960c7		ab		plb		                    PLB
.1960c8		6b		rtl		                    RTL
.1960c9		28		plp		pass_failure        PLP
.1960ca		2b		pld		                    PLD
.1960cb		ab		plb		                    PLB
.1960cc		18		clc		                    CLC
.1960cd		6b		rtl		                    RTL
.1960ce						FDC_Write_Sector
.1960ce		8b		phb		                    PHB
.1960cf		0b		phd		                    PHD
.1960d0		08		php		                    PHP
.1960d1		48		pha		                PHA             ; begin setdbr macro
.1960d2		08		php		                PHP
.1960d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1960d5		a9 00		lda #$00	                LDA #0
.1960d7		48		pha		                PHA
.1960d8		ab		plb		                PLB
.1960d9		28		plp		                PLP
.1960da		68		pla		                PLA             ; end setdbr macro
.1960db		48		pha		                PHA             ; begin setdp macro
.1960dc		08		php		                PHP
.1960dd		c2 20		rep #$20	                REP #$20        ; set A long
.1960df		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1960e2		5b		tcd		                TCD
.1960e3		28		plp		                PLP
.1960e4		68		pla		                PLA             ; end setdp macro
.1960e5		e2 20		sep #$20	                SEP #$20        ; set A short
.1960e7		22 94 5d 19	jsl $195d94	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.1960eb		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.1960ed		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.1960ef		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.1960f2		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.1960f4		29 01		and #$01	                    AND #$01
.1960f6		0a		asl a		                    ASL A
.1960f7		0a		asl a		                    ASL A
.1960f8		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.1960fa		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.1960fd		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.1960ff		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.196102		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.196104		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.196107		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.196109		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.19610c		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.19610e		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.196111		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.196113		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.196116		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.196118		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.19611b		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.19611d		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.196120		a9 09		lda #$09	                    LDA #9
.196122		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.196125		a9 ff		lda #$ff	                    LDA #$FF
.196127		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.19612a		a9 07		lda #$07	                    LDA #7
.19612c		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.19612f		22 e4 5b 19	jsl $195be4	command             JSL FDC_COMMAND                     ; Issue the command
.196133		08		php		                    PHP
.196134		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.196137		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.196139		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.19613c		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.19613e		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.196141		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.196143		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.196146		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.196148		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.19614b		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.19614d		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.196150		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.196152		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.196155		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.196157		28		plp		check_status        PLP
.196158		90 04		bcc $19615e	                    BCC pass_failure
.19615a		28		plp		done                PLP
.19615b		2b		pld		                    PLD
.19615c		ab		plb		                    PLB
.19615d		6b		rtl		                    RTL
.19615e		28		plp		pass_failure        PLP
.19615f		2b		pld		                    PLD
.196160		ab		plb		                    PLB
.196161		18		clc		                    CLC
.196162		6b		rtl		                    RTL
.196163						DIVIDE32
.196163		da		phx		                    PHX
.196164		5a		phy		                    PHY
.196165		0b		phd		                    PHD
.196166		08		php		                    PHP
.196167		48		pha		                PHA             ; begin setdp macro
.196168		08		php		                PHP
.196169		c2 20		rep #$20	                REP #$20        ; set A long
.19616b		a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.19616e		5b		tcd		                TCD
.19616f		28		plp		                PLP
.196170		68		pla		                PLA             ; end setdp macro
.196171		c2 30		rep #$30	                REP #$30        ; set A&X long
.196173		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.196175		64 0a		stz $0316	                    STZ REMAINDER+2
.196177		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.19617a		06 00		asl $030c	loop                ASL DIVIDEND
.19617c		26 02		rol $030e	                    ROL DIVIDEND+2
.19617e		26 08		rol $0314	                    ROL REMAINDER
.196180		26 0a		rol $0316	                    ROL REMAINDER+2
.196182		a5 08		lda $0314	                    LDA REMAINDER
.196184		38		sec		                    SEC
.196185		e5 04		sbc $0310	                    SBC DIVISOR
.196187		a8		tay		                    TAY
.196188		a5 0a		lda $0316	                    LDA REMAINDER+2
.19618a		e5 06		sbc $0312	                    SBC DIVISOR+2
.19618c		90 06		bcc $196194	                    BCC skip
.19618e		85 0a		sta $0316	                    STA REMAINDER+2
.196190		84 08		sty $0314	                    STY REMAINDER
.196192		e6 00		inc $030c	                    INC DIVIDEND
.196194		ca		dex		skip                DEX
.196195		d0 e3		bne $19617a	                    BNE loop
.196197		28		plp		                    PLP
.196198		2b		pld		                    PLD
.196199		7a		ply		                    PLY
.19619a		fa		plx		                    PLX
.19619b		60		rts		                    RTS
.19619c						LBA2CHS
.19619c		8b		phb		                    PHB
.19619d		0b		phd		                    PHD
.19619e		08		php		                    PHP
.19619f		48		pha		                PHA             ; begin setdbr macro
.1961a0		08		php		                PHP
.1961a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1961a3		a9 00		lda #$00	                LDA #0
.1961a5		48		pha		                PHA
.1961a6		ab		plb		                PLB
.1961a7		28		plp		                PLP
.1961a8		68		pla		                PLA             ; end setdbr macro
.1961a9		48		pha		                PHA             ; begin setdp macro
.1961aa		08		php		                PHP
.1961ab		c2 20		rep #$20	                REP #$20        ; set A long
.1961ad		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1961b0		5b		tcd		                TCD
.1961b1		28		plp		                PLP
.1961b2		68		pla		                PLA             ; end setdp macro
.1961b3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1961b5		a5 22		lda $0322	                    LDA BIOS_LBA
.1961b7		85 0c		sta $030c	                    STA DIVIDEND
.1961b9		a5 24		lda $0324	                    LDA BIOS_LBA+2
.1961bb		85 0e		sta $030e	                    STA DIVIDEND+2
.1961bd		a9 24 00	lda #$0024	                    LDA #36
.1961c0		85 10		sta $0310	                    STA DIVISOR
.1961c2		64 12		stz $0312	                    STZ DIVISOR+2
.1961c4		20 63 61	jsr $196163	                    JSR DIVIDE32
.1961c7		e2 20		sep #$20	                SEP #$20        ; set A short
.1961c9		a5 0c		lda $030c	                    LDA DIVIDEND
.1961cb		85 02		sta $0302	                    STA FDC_CYLINDER
.1961cd		c2 20		rep #$20	                REP #$20        ; set A long
.1961cf		a5 14		lda $0314	                    LDA REMAINDER
.1961d1		85 0c		sta $030c	                    STA DIVIDEND
.1961d3		a5 16		lda $0316	                    LDA REMAINDER+2
.1961d5		85 0e		sta $030e	                    STA DIVIDEND+2
.1961d7		a9 12 00	lda #$0012	                    LDA #18
.1961da		85 10		sta $0310	                    STA DIVISOR
.1961dc		64 12		stz $0312	                    STZ DIVISOR+2
.1961de		20 63 61	jsr $196163	                    JSR DIVIDE32
.1961e1		e2 20		sep #$20	                SEP #$20        ; set A short
.1961e3		a5 0c		lda $030c	                    LDA DIVIDEND
.1961e5		29 01		and #$01	                    AND #$01
.1961e7		85 01		sta $0301	                    STA FDC_HEAD
.1961e9		a5 14		lda $0314	                    LDA REMAINDER
.1961eb		1a		inc a		                    INC A
.1961ec		85 03		sta $0303	                    STA FDC_SECTOR
.1961ee		28		plp		                    PLP
.1961ef		2b		pld		                    PLD
.1961f0		ab		plb		                    PLB
.1961f1		6b		rtl		                    RTL
.1961f2						FDC_GETBLOCK
.1961f2		8b		phb		                    PHB
.1961f3		0b		phd		                    PHD
.1961f4		08		php		                    PHP
.1961f5		48		pha		                PHA             ; begin setdbr macro
.1961f6		08		php		                PHP
.1961f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1961f9		a9 00		lda #$00	                LDA #0
.1961fb		48		pha		                PHA
.1961fc		ab		plb		                PLB
.1961fd		28		plp		                PLP
.1961fe		68		pla		                PLA             ; end setdbr macro
.1961ff		48		pha		                PHA             ; begin setdp macro
.196200		08		php		                PHP
.196201		c2 20		rep #$20	                REP #$20        ; set A long
.196203		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196206		5b		tcd		                TCD
.196207		28		plp		                PLP
.196208		68		pla		                PLA             ; end setdp macro
.196209		e2 20		sep #$20	                SEP #$20        ; set A short
.19620b		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.19620d		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.196210		c2 30		rep #$30	                REP #$30        ; set A&X long
.196212		22 9c 61 19	jsl $19619c	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.196216		e2 20		sep #$20	                SEP #$20        ; set A short
.196218		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.19621a		f0 29		beq $196245	                    BEQ read_failure
.19621c						try_read
.19621c		c2 20		rep #$20	                REP #$20        ; set A long
.19621e		22 39 60 19	jsl $196039	                    JSL FDC_Read_Sector         ; Read the sector
.196222		90 14		bcc $196238	                    BCC retry
.196224		e2 20		sep #$20	                SEP #$20        ; set A short
.196226		a5 06		lda $0306	                    LDA FDC_ST0
.196228		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.19622a		d0 19		bne $196245	                    BNE read_failure
.19622c						ret_success
.19622c		e2 20		sep #$20	                SEP #$20        ; set A short
.19622e		a9 00		lda #$00	                    LDA #0
.196230		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.196233		28		plp		                    PLP
.196234		2b		pld		                    PLD
.196235		ab		plb		                    PLB
.196236		38		sec		                    SEC
.196237		6b		rtl		                    RTL
.196238						retry
.196238		e2 20		sep #$20	                SEP #$20        ; set A short
.19623a		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.19623d		30 13		bmi $196252	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.19623f		22 31 5d 19	jsl $195d31	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.196243		80 d7		bra $19621c	                    BRA try_read                ; And try the read again
.196245						read_failure
.196245		e2 20		sep #$20	                SEP #$20        ; set A short
.196247		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.196249		80 04		bra $19624f	                    BRA ret_failure
.19624b						seek_failure
.19624b		e2 20		sep #$20	                SEP #$20        ; set A short
.19624d		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.19624f		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.196252		28		plp		pass_failure        PLP
.196253		2b		pld		                    PLD
.196254		ab		plb		                    PLB
.196255		18		clc		                    CLC
.196256		6b		rtl		                    RTL
.196257						FDC_PUTBLOCK
.196257		8b		phb		                    PHB
.196258		0b		phd		                    PHD
.196259		08		php		                    PHP
.19625a		48		pha		                PHA             ; begin setdbr macro
.19625b		08		php		                PHP
.19625c		e2 20		sep #$20	                SEP #$20        ; set A short
.19625e		a9 00		lda #$00	                LDA #0
.196260		48		pha		                PHA
.196261		ab		plb		                PLB
.196262		28		plp		                PLP
.196263		68		pla		                PLA             ; end setdbr macro
.196264		48		pha		                PHA             ; begin setdp macro
.196265		08		php		                PHP
.196266		c2 20		rep #$20	                REP #$20        ; set A long
.196268		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19626b		5b		tcd		                TCD
.19626c		28		plp		                PLP
.19626d		68		pla		                PLA             ; end setdp macro
.19626e		e2 20		sep #$20	                SEP #$20        ; set A short
.196270		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.196272		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.196275		c2 30		rep #$30	                REP #$30        ; set A&X long
.196277		22 9c 61 19	jsl $19619c	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.19627b		22 ce 60 19	jsl $1960ce	retry               JSL FDC_Write_Sector        ; Write the sector
.19627f		b0 03		bcs $196284	                    BCS chk_st0
.196281		82 28 00	brl $1962ac	                    BRL attempt_retry
.196284						chk_st0
.196284		e2 20		sep #$20	                SEP #$20        ; set A short
.196286		a5 06		lda $0306	                    LDA FDC_ST0
.196288		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.19628a		d0 0c		bne $196298	                    BNE write_failure
.19628c						ret_success
.19628c		e2 20		sep #$20	                SEP #$20        ; set A short
.19628e		a9 00		lda #$00	                    LDA #0
.196290		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.196293		28		plp		                    PLP
.196294		2b		pld		                    PLD
.196295		ab		plb		                    PLB
.196296		38		sec		                    SEC
.196297		6b		rtl		                    RTL
.196298						write_failure
.196298		e2 20		sep #$20	                SEP #$20        ; set A short
.19629a		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.19629c		89 02		bit #$02	                    BIT #FDC_ST1_NW
.19629e		f0 04		beq $1962a4	                    BEQ generic_err
.1962a0		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.1962a2		80 17		bra $1962bb	                    BRA ret_failure
.1962a4		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.1962a6		d0 e4		bne $19628c	                    BNE ret_success
.1962a8		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.1962aa		d0 e0		bne $19628c	                    BNE ret_success
.1962ac						attempt_retry
.1962ac		e2 20		sep #$20	                SEP #$20        ; set A short
.1962ae		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.1962b1		d0 c8		bne $19627b	                    BNE retry                           ; And retry unless we have none left
.1962b3		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.1962b5		80 04		bra $1962bb	                    BRA ret_failure
.1962b7						seek_failure
.1962b7		e2 20		sep #$20	                SEP #$20        ; set A short
.1962b9		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.1962bb						ret_failure
.1962bb		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.1962be		28		plp		pass_failure        PLP
.1962bf		2b		pld		                    PLD
.1962c0		ab		plb		                    PLB
.1962c1		18		clc		                    CLC
.1962c2		6b		rtl		                    RTL
.1962c3						FDC_MOUNT
.1962c3		8b		phb		                    PHB
.1962c4		0b		phd		                    PHD
.1962c5		08		php		                    PHP
.1962c6		48		pha		                PHA             ; begin setdbr macro
.1962c7		08		php		                PHP
.1962c8		e2 20		sep #$20	                SEP #$20        ; set A short
.1962ca		a9 00		lda #$00	                LDA #0
.1962cc		48		pha		                PHA
.1962cd		ab		plb		                PLB
.1962ce		28		plp		                PLP
.1962cf		68		pla		                PLA             ; end setdbr macro
.1962d0		48		pha		                PHA             ; begin setdp macro
.1962d1		08		php		                PHP
.1962d2		c2 20		rep #$20	                REP #$20        ; set A long
.1962d4		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1962d7		5b		tcd		                TCD
.1962d8		28		plp		                PLP
.1962d9		68		pla		                PLA             ; end setdp macro
.1962da		22 31 5d 19	jsl $195d31	                    JSL FDC_INIT
.1962de		e2 20		sep #$20	                SEP #$20        ; set A short
.1962e0		c2 10		rep #$10	                REP #$10        ; set X long
.1962e2		a9 00		lda #$00	                    LDA #0
.1962e4		a2 00 00	ldx #$0000	                    LDX #0
.1962e7		9f 00 a3 18	sta $18a300,x	zero_loop           STA DOS_SECTOR,X
.1962eb		e8		inx		                    INX
.1962ec		e0 00 02	cpx #$0200	                    CPX #512
.1962ef		d0 f6		bne $1962e7	                    BNE zero_loop
.1962f1		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.1962f3		85 00		sta $0300	                    STA FDC_DRIVE
.1962f5		22 ad 5d 19	jsl $195dad	                    JSL FDC_Motor_On                        ; Turn the motor on
.1962f9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1962fb		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.1962fe		85 22		sta $0322	                    STA BIOS_LBA
.196300		85 24		sta $0324	                    STA BIOS_LBA+2
.196302		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.196305		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.196307		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.19630a		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.19630c		22 f2 61 19	jsl $1961f2	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.196310		b0 03		bcs $196315	                    BCS parse_boot                          ; If ok: start parsing the boot record
.196312		82 d3 00	brl $1963e8	                    BRL pass_failure                        ; Pass the error up the chain
.196315						parse_boot
.196315		e2 20		sep #$20	                SEP #$20        ; set A short
.196317		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.196319		8f 01 a0 18	sta $18a001	                    STA @l FILE_SYSTEM
.19631d		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.19631f		8f 02 a0 18	sta $18a002	                    STA @l PARTITION
.196323		e2 20		sep #$20	                SEP #$20        ; set A short
.196325		af 0d a3 18	lda $18a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.196329		8f 03 a0 18	sta $18a003	                    STA @l SECTORS_PER_CLUSTER
.19632d		c2 20		rep #$20	                REP #$20        ; set A long
.19632f		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.196332		8f 04 a0 18	sta $18a004	                    STA @l FIRSTSECTOR
.196336		8f 06 a0 18	sta $18a006	                    STA @l FIRSTSECTOR+2
.19633a		af 16 a3 18	lda $18a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.19633e		8f 10 a0 18	sta $18a010	                    STA @l SEC_PER_FAT
.196342		a9 00 00	lda #$0000	                    LDA #0
.196345		8f 12 a0 18	sta $18a012	                    STA @l SEC_PER_FAT+2
.196349		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.19634c		8f 14 a0 18	sta $18a014	                    STA @l FAT_BEGIN_LBA
.196350		18		clc		                    CLC
.196351		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.196355		8f 18 a0 18	sta $18a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.196359		a9 00 00	lda #$0000	                    LDA #0
.19635c		8f 16 a0 18	sta $18a016	                    STA @l FAT_BEGIN_LBA+2
.196360		8f 1a a0 18	sta $18a01a	                    STA @L FAT2_BEGIN_LBA+2
.196364		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.196365		af 18 a0 18	lda $18a018	                    LDA @l FAT2_BEGIN_LBA
.196369		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.19636d		8f 20 a0 18	sta $18a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.196371		a9 00 00	lda #$0000	                    LDA #0
.196374		8f 22 a0 18	sta $18a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.196378		af 11 a3 18	lda $18a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.19637c		8f 24 a0 18	sta $18a024	                    STA @l ROOT_DIR_MAX_ENTRY
.196380		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.196381		4a		lsr a		                    LSR A
.196382		4a		lsr a		                    LSR A
.196383		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.196384		18		clc		                    CLC
.196385		6f 20 a0 18	adc $18a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.196389		8f 1c a0 18	sta $18a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.19638d		a9 00 00	lda #$0000	                    LDA #0
.196390		8f 1e a0 18	sta $18a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.196394		af 13 a3 18	lda $18a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.196398		8f 08 a0 18	sta $18a008	                    STA @l SECTORCOUNT
.19639c		a9 00 00	lda #$0000	                    LDA #0
.19639f		8f 0a a0 18	sta $18a00a	                    STA @l SECTORCOUNT+2
.1963a3		af 0e a3 18	lda $18a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.1963a7		8f 0c a0 18	sta $18a00c	                    STA @l NUM_RSRV_SEC
.1963ab		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.1963ae		8f 0e a0 18	sta $18a00e	                    STA @l CLUSTER_SIZE
.1963b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1963b4		af 26 a3 18	lda $18a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.1963b8		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.1963ba		80 14		bra $1963d0	                    BRA no_volume_id                        ; No: there is no volume ID
.1963bc						is_extended
.1963bc		c2 20		rep #$20	                REP #$20        ; set A long
.1963be		af 27 a3 18	lda $18a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.1963c2		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.1963c6		af 29 a3 18	lda $18a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.1963ca		8f 28 a0 18	sta $18a028	                    STA @l VOLUME_ID+2
.1963ce		80 0d		bra $1963dd	                    BRA ret_success
.1963d0						no_volume_id
.1963d0		c2 20		rep #$20	                REP #$20        ; set A long
.1963d2		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.1963d5		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.1963d9		8f 28 a0 18	sta $18a028	                    STA @L VOLUME_ID+2
.1963dd						ret_success
.1963dd		e2 20		sep #$20	                SEP #$20        ; set A short
.1963df		a9 00		lda #$00	                    LDA #0
.1963e1		85 20		sta $0320	                    STA BIOS_STATUS
.1963e3		28		plp		                    PLP
.1963e4		2b		pld		                    PLD
.1963e5		ab		plb		                    PLB
.1963e6		38		sec		                    SEC
.1963e7		6b		rtl		                    RTL
.1963e8		28		plp		pass_failure        PLP
.1963e9		2b		pld		                    PLD
.1963ea		ab		plb		                    PLB
.1963eb		18		clc		                    CLC
.1963ec		6b		rtl		                    RTL
.1963ed						FDC_CMDBLOCK
.1963ed		8b		phb		                    PHB
.1963ee		0b		phd		                    PHD
.1963ef		08		php		                    PHP
.1963f0		48		pha		                PHA             ; begin setdbr macro
.1963f1		08		php		                PHP
.1963f2		e2 20		sep #$20	                SEP #$20        ; set A short
.1963f4		a9 00		lda #$00	                LDA #0
.1963f6		48		pha		                PHA
.1963f7		ab		plb		                PLB
.1963f8		28		plp		                PLP
.1963f9		68		pla		                PLA             ; end setdbr macro
.1963fa		48		pha		                PHA             ; begin setdp macro
.1963fb		08		php		                PHP
.1963fc		c2 20		rep #$20	                REP #$20        ; set A long
.1963fe		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196401		5b		tcd		                TCD
.196402		28		plp		                PLP
.196403		68		pla		                PLA             ; end setdp macro
.196404		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196406		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.196408		f0 0f		beq $196419	                    BEQ motor_on
.19640a		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.19640c		f0 11		beq $19641f	                    BEQ motor_off
.19640e		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.196410		f0 13		beq $196425	                    BEQ recalibrate
.196412		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.196414		28		plp		                    PLP
.196415		2b		pld		                    PLD
.196416		ab		plb		                    PLB
.196417		38		sec		                    SEC
.196418		6b		rtl		                    RTL
.196419		22 ad 5d 19	jsl $195dad	motor_on            JSL FDC_Motor_On
.19641d		80 f3		bra $196412	                    BRA ret_success
.19641f		22 e1 5d 19	jsl $195de1	motor_off           JSL FDC_Motor_Off
.196423		80 ed		bra $196412	                    BRA ret_success
.196425		22 0c 5e 19	jsl $195e0c	recalibrate         JSL FDC_Recalibrate_Command
.196429		b0 e7		bcs $196412	                    BCS ret_success
.19642b		28		plp		pass_failure        PLP
.19642c		2b		pld		                    PLD
.19642d		ab		plb		                    PLB
.19642e		18		clc		                    CLC
.19642f		6b		rtl		                    RTL
.196430						FDC_CHK_MEDIA
.196430		0b		phd		                    PHD
.196431		08		php		                    PHP
.196432		48		pha		                PHA             ; begin setdp macro
.196433		08		php		                PHP
.196434		c2 20		rep #$20	                REP #$20        ; set A long
.196436		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196439		5b		tcd		                TCD
.19643a		28		plp		                PLP
.19643b		68		pla		                PLA             ; end setdp macro
.19643c		22 ad 5d 19	jsl $195dad	                    JSL FDC_Motor_On                ; Turn on the motor
.196440		e2 20		sep #$20	                SEP #$20        ; set A short
.196442		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.196446		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.196448		f0 42		beq $19648c	                    BEQ ret_true                    ; If not: assume the disk is present
.19644a		a9 00		lda #$00	                    LDA #0
.19644c		85 00		sta $0300	                    STA FDC_DRIVE
.19644e		a9 00		lda #$00	                    LDA #0
.196450		85 01		sta $0301	                    STA FDC_HEAD
.196452		a9 50		lda #$50	                    LDA #80
.196454		85 02		sta $0302	                    STA FDC_CYLINDER
.196456		22 ec 5f 19	jsl $195fec	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.19645a		90 34		bcc $196490	                    BCC ret_false                   ; If fail: return false
.19645c		c2 10		rep #$10	                REP #$10        ; set X long
.19645e		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.196461		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.196464		22 da 0f 19	jsl $190fda	                    JSL IDELAY
.196468		22 41 5e 19	jsl $195e41	                    JSL FDC_Sense_Int_Status
.19646c		a5 06		lda $0306	                    LDA FDC_ST0
.19646e		29 d0		and #$d0	                    AND #%11010000
.196470		d0 1e		bne $196490	                    BNE ret_false
.196472		22 0c 5e 19	jsl $195e0c	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.196476		90 18		bcc $196490	                    BCC ret_false                   ; If fail: return false
.196478		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.19647b		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.19647e		22 da 0f 19	jsl $190fda	                    JSL IDELAY
.196482		22 41 5e 19	jsl $195e41	                    JSL FDC_Sense_Int_Status
.196486		a5 06		lda $0306	                    LDA FDC_ST0
.196488		29 d0		and #$d0	                    AND #%11010000
.19648a		d0 04		bne $196490	                    BNE ret_false
.19648c						ret_true
.19648c		28		plp		                    PLP
.19648d		2b		pld		                    PLD
.19648e		38		sec		                    SEC
.19648f		6b		rtl		                    RTL
.196490						ret_false
.196490		28		plp		                    PLP
.196491		2b		pld		                    PLD
.196492		18		clc		                    CLC
.196493		6b		rtl		                    RTL
.196494						FDC_WRITEVBR
.196494		8b		phb		                    PHB
.196495		0b		phd		                    PHD
.196496		08		php		                    PHP
.196497		48		pha		                PHA             ; begin setdbr macro
.196498		08		php		                PHP
.196499		e2 20		sep #$20	                SEP #$20        ; set A short
.19649b		a9 00		lda #$00	                LDA #0
.19649d		48		pha		                PHA
.19649e		ab		plb		                PLB
.19649f		28		plp		                PLP
.1964a0		68		pla		                PLA             ; end setdbr macro
.1964a1		48		pha		                PHA             ; begin setdp macro
.1964a2		08		php		                PHP
.1964a3		c2 20		rep #$20	                REP #$20        ; set A long
.1964a5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1964a8		5b		tcd		                TCD
.1964a9		28		plp		                PLP
.1964aa		68		pla		                PLA             ; end setdp macro
.1964ab		22 c3 62 19	jsl $1962c3	                    JSL FDC_MOUNT               ; Mount the floppy disk
.1964af		c2 30		rep #$30	                REP #$30        ; set A&X long
.1964b1		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.1964b4		a2 00 00	ldx #$0000	                    LDX #0
.1964b7		9f 00 a3 18	sta $18a300,x	clr_loop            STA DOS_SECTOR,X
.1964bb		e8		inx		                    INX
.1964bc		e8		inx		                    INX
.1964bd		e0 00 02	cpx #$0200	                    CPX #512
.1964c0		d0 f5		bne $1964b7	                    BNE clr_loop
.1964c2		e2 20		sep #$20	                SEP #$20        ; set A short
.1964c4		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.1964c7		bf 7c 65 19	lda $19657c,x	copy_loop           LDA FDC_VBR_BEGIN,X
.1964cb		9f 00 a3 18	sta $18a300,x	                    STA DOS_SECTOR,X
.1964cf		e8		inx		                    INX
.1964d0		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.1964d3		d0 f2		bne $1964c7	                    BNE copy_loop
.1964d5		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.1964d8		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.1964db		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.1964dd		9f 00 a3 18	sta $18a300,x	                    STA DOS_SECTOR,X
.1964e1		f0 07		beq $1964ea	                    BEQ path_copy_done
.1964e3		e8		inx		                    INX
.1964e4		c8		iny		                    INY
.1964e5		c0 80 00	cpy #$0080	                    CPY #128
.1964e8		d0 f1		bne $1964db	                    BNE path_copy_loop
.1964ea						path_copy_done
.1964ea		c2 20		rep #$20	                REP #$20        ; set A long
.1964ec		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.1964ef		8f fe a4 18	sta $18a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.1964f3		c2 20		rep #$20	                REP #$20        ; set A long
.1964f5		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.1964f8		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.1964fa		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.1964fd		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.1964ff		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.196502		85 02		sta $0322	                    STA BIOS_LBA
.196504		85 04		sta $0324	                    STA BIOS_LBA+2
.196506		e2 20		sep #$20	                SEP #$20        ; set A short
.196508		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.19650a		85 01		sta $0321	                    STA BIOS_DEV
.19650c		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.196510		b0 09		bcs $19651b	                    BCS ret_success
.196512		22 e1 5d 19	jsl $195de1	                    JSL FDC_Motor_Off
.196516		28		plp		                    PLP                         ; Return the failure
.196517		2b		pld		                    PLD
.196518		ab		plb		                    PLB
.196519		18		clc		                    CLC
.19651a		6b		rtl		                    RTL
.19651b		22 e1 5d 19	jsl $195de1	ret_success         JSL FDC_Motor_Off
.19651f		e2 20		sep #$20	                SEP #$20        ; set A short
.196521		a9 00		lda #$00	                    LDA #0
.196523		85 00		sta $0320	                    STA BIOS_STATUS
.196525		28		plp		                    PLP
.196526		2b		pld		                    PLD
.196527		ab		plb		                    PLB
.196528		38		sec		                    SEC
.196529		6b		rtl		                    RTL
.19652a						FDC_TIME_HANDLE
.19652a		08		php		                    PHP
.19652b		e2 20		sep #$20	                SEP #$20        ; set A short
.19652d		af 4e a0 18	lda $18a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.196531		d0 06		bne $196539	                    BNE dec_motor                   ; If not zero: decrement the timer
.196533		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.196537		f0 28		beq $196561	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.196539		af 4e a0 18	lda $18a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.19653d		3a		dec a		                    DEC A
.19653e		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.196542		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.196544		d0 0b		bne $196551	                    BNE chk_motor_end               ; No: check to see if we're a the end
.196546		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.19654a		3a		dec a		                    DEC A
.19654b		8f 4f a0 18	sta $18a04f	                    STA @l FDC_MOTOR_TIMER+1
.19654f		80 10		bra $196561	                    BRA sof_timeout                 ; And move on to the next timer
.196551		af 4e a0 18	lda $18a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.196555		d0 0a		bne $196561	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.196557		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1
.19655b		d0 04		bne $196561	                    BNE sof_timeout
.19655d		22 e1 5d 19	jsl $195de1	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.196561						sof_timeout
.196561		e2 20		sep #$20	                SEP #$20        ; set A short
.196563		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.196567		f0 11		beq $19657a	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.196569		3a		dec a		                    DEC A                           ; Count down one tick
.19656a		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.19656e		d0 0a		bne $19657a	                    BNE sof_int_done                ; If not 0, we're done
.196570		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.196574		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.196576		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.19657a		28		plp		sof_int_done        PLP
.19657b		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.19657c						FDC_VBR_BEGIN
>19657c		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>19657f		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>196587		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>196589		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>19658a		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>19658c		02				num_fat             .byte 2                 ; Number of FATs
>19658d		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>19658f		40 0b				total_sectors       .word 2880              ; Total sectors
>196591		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>196592		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>196594		12 00				sec_per_track       .word 18                ; Sectors per track
>196596		02 00				num_head            .word 2                 ; Number of heads
>196598		00 00 00 00			ignore2             .dword 0
>19659c		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>1965a0		00 00				ignore3             .word 0
>1965a2		29				boot_signature      .byte $29
>1965a3		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>1965a7		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>1965af		20 20 20
>1965b2		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.1965ba		80 40		bra $1965fc	                    BRA vbr_start
>1965bc						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.1965fc						vbr_start
.1965fc		c2 20		rep #$20	                REP #$20        ; set A long
.1965fe		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.196601		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.196605		a9 18 00	lda #$0018	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.196608		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.19660c		22 24 11 00	jsl $001124	                    JSL F_RUN               ; And try to execute the binary file
.196610		b0 0c		bcs $19661e	                    BCS lock                ; If it returned success... lock up... I guess?
.196612						error
.196612		e2 20		sep #$20	                SEP #$20        ; set A short
.196614		4b		phk		                    PHK                     ; Otherwise, print an error message
.196615		ab		plb		                    PLB
.196616		62 08 00	per $196621	                    PER message
.196619		fa		plx		                    PLX
.19661a		22 1c 10 00	jsl $00101c	                    JSL PUTS
.19661e		ea		nop		lock                NOP                     ; And lock up
.19661f		80 fd		bra $19661e	                    BRA lock
>196621		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>196629		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>196639		65 20 62 69 6e 61 72 79 2e 0d 00
.196644						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.196644						IDE_TEST
.196644		08		php		                PHP
.196645		c2 20		rep #$20	                REP #$20        ; set A long
.196647		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.19664a		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.19664e		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.196651		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.196655		22 40 67 19	jsl $196740	                JSL IDE_IDENTIFY
.196659		b0 03		bcs $19665e	                BCS id_ok
.19665b		82 73 00	brl $1966d1	                BRL done
.19665e						id_ok
.19665e		c2 10		rep #$10	                REP #$10        ; set X long
.196660		e2 20		sep #$20	                SEP #$20        ; set A short
.196662		a0 28 00	ldy #$0028	                LDY #40
.196665		a2 36 00	ldx #$0036	                LDX #27*2
.196668		bf 01 a3 18	lda $18a301,x	pr_model        LDA DOS_SECTOR+1,X
.19666c		22 18 10 00	jsl $001018	                JSL PUTC
.196670		bf 00 a3 18	lda $18a300,x	                LDA DOS_SECTOR,X
.196674		22 18 10 00	jsl $001018	                JSL PUTC
.196678		e8		inx		                INX
.196679		e8		inx		                INX
.19667a		88		dey		                DEY
.19667b		88		dey		                DEY
.19667c		d0 ea		bne $196668	                BNE pr_model
.19667e		c2 10		rep #$10	                REP #$10        ; set X long
.196680		e2 20		sep #$20	                SEP #$20        ; set A short
.196682		a0 14 00	ldy #$0014	                LDY #20
.196685		a2 14 00	ldx #$0014	                LDX #10*2
.196688		bf 01 a3 18	lda $18a301,x	pr_serial       LDA DOS_SECTOR+1,X
.19668c		22 18 10 00	jsl $001018	                JSL PUTC
.196690		bf 00 a3 18	lda $18a300,x	                LDA DOS_SECTOR,X
.196694		22 18 10 00	jsl $001018	                JSL PUTC
.196698		e8		inx		                INX
.196699		e8		inx		                INX
.19669a		88		dey		                DEY
.19669b		88		dey		                DEY
.19669c		d0 ea		bne $196688	                BNE pr_serial
.19669e		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.1966a2						read_sect1
.1966a2		c2 20		rep #$20	                REP #$20        ; set A long
.1966a4		a9 00 00	lda #$0000	                LDA #0                 ; Set LBA = 0
.1966a7		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.1966ab		a9 00 00	lda #$0000	                LDA #0
.1966ae		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.1966b2		a9 00 a9	lda #$a900	                LDA #<>DOS_BOOT_SECTOR
.1966b5		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.1966b9		a9 18 00	lda #$0018	                LDA #`DOS_BOOT_SECTOR
.1966bc		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.1966c0		22 ce 67 19	jsl $1967ce	                JSL IDE_GETBLOCK        ; Attempt to read the block
.1966c4		b0 06		bcs $1966cc	                BCS all_ok
.1966c6		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.1966ca		80 05		bra $1966d1	                BRA done
.1966cc						all_ok
.1966cc		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.1966d0		00		brk #		                BRK
.1966d1		28		plp		done            PLP
.1966d2		6b		rtl		                RTL
.1966d3						IDE_INIT
.1966d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1966d5		a9 00		lda #$00	              LDA #$00
.1966d7		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.1966db		20 fc 66	jsr $1966fc	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.1966de		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.1966e0		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.1966e4		a9 01		lda #$01	              LDA #$01
.1966e6		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.1966ea		a9 00		lda #$00	              LDA #$00
.1966ec		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.1966f0		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.1966f4		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.1966f8		20 1a 67	jsr $19671a	              JSR IDE_DRV_READY_NOTBUSY
.1966fb		6b		rtl		              RTL
.1966fc						IDE_DRIVE_BSY
.1966fc		08		php		                PHP
.1966fd		e2 20		sep #$20	                SEP #$20        ; set A short
.1966ff		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.196703		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.196705		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.196707		f0 f6		beq $1966ff	                BEQ loop
.196709		28		plp		                PLP
.19670a		60		rts		                RTS
.19670b						IDE_DRIVE_READY
.19670b		08		php		                PHP
.19670c		e2 20		sep #$20	                SEP #$20        ; set A short
.19670e		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.196712		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.196714		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.196716		d0 f6		bne $19670e	                BNE loop
.196718		28		plp		                PLP
.196719		60		rts		                RTS
.19671a						IDE_DRV_READY_NOTBUSY
.19671a		08		php		                PHP
.19671b		e2 20		sep #$20	                SEP #$20        ; set A short
.19671d		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.196721		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.196723		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.196725		d0 f6		bne $19671d	                BNE loop                            ; No: keep waiting
.196727		28		plp		ret_success     PLP                                 ; Return success
.196728		38		sec		                SEC
.196729		60		rts		                RTS
.19672a		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.19672e		28		plp		                PLP                                 ; Return failure
.19672f		18		clc		                CLC
.196730		60		rts		                RTS
.196731						IDE_NOT_DRQ
.196731		08		php		                PHP
.196732		e2 20		sep #$20	                SEP #$20        ; set A short
.196734		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.196738		29 08		and #$08	                AND #IDE_STAT_DRQ
.19673a		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.19673c		d0 f6		bne $196734	                BNE loop                ; No: keep waiting
.19673e		28		plp		                PLP
.19673f		60		rts		                RTS
.196740						IDE_IDENTIFY
.196740		5a		phy		                PHY
.196741		8b		phb		                PHB
.196742		0b		phd		                PHD
.196743		08		php		                PHP
.196744		48		pha		                PHA             ; begin setdbr macro
.196745		08		php		                PHP
.196746		e2 20		sep #$20	                SEP #$20        ; set A short
.196748		a9 00		lda #$00	                LDA #0
.19674a		48		pha		                PHA
.19674b		ab		plb		                PLB
.19674c		28		plp		                PLP
.19674d		68		pla		                PLA             ; end setdbr macro
.19674e		48		pha		                PHA             ; begin setdp macro
.19674f		08		php		                PHP
.196750		c2 20		rep #$20	                REP #$20        ; set A long
.196752		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.196755		5b		tcd		                TCD
.196756		28		plp		                PLP
.196757		68		pla		                PLA             ; end setdp macro
.196758		e2 20		sep #$20	                SEP #$20        ; set A short
.19675a		20 1a 67	jsr $19671a	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.19675d		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.19675f		29 07		and #$07	                AND #$07
.196761		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.196763		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.196767		20 1a 67	jsr $19671a	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.19676a		e2 20		sep #$20	                SEP #$20        ; set A short
.19676c		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.19676e		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.196772		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196776		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.19677a		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.19677e		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.196780		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.196784		f0 29		beq $1967af	                BEQ no_media                    ; If 0: there is no drive
.196786		20 fc 66	jsr $1966fc	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.196789		20 1a 67	jsr $19671a	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.19678c		90 2d		bcc $1967bb	                BCC ret_failure                 ; If an error occurred, return it
.19678e		c2 30		rep #$30	                REP #$30        ; set A&X long
.196790		a0 00 00	ldy #$0000	                LDY #0
.196793		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.196797		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.196799		c8		iny		                INY                             ; Move to the next position
.19679a		c8		iny		                INY
.19679b		c0 00 02	cpy #$0200	                CPY #512
.19679e		d0 f3		bne $196793	                BNE read_loop
.1967a0						ret_success
.1967a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1967a2		a9 00		lda #$00	                LDA #0
.1967a4		85 00		sta $0320	                STA BIOS_STATUS
.1967a6		8d 06 03	sta $0306	                STA @w FDC_ST0
.1967a9		28		plp		                PLP                             ; Return success
.1967aa		2b		pld		                PLD
.1967ab		ab		plb		                PLB
.1967ac		7a		ply		                PLY
.1967ad		38		sec		                SEC
.1967ae		6b		rtl		                RTL
.1967af						no_media
.1967af		e2 20		sep #$20	                SEP #$20        ; set A short
.1967b1		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.1967b3		80 0a		bra $1967bf	                BRA pass_failure
.1967b5						not_ata
.1967b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1967b7		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.1967b9		80 04		bra $1967bf	                BRA pass_failure
.1967bb						ret_failure
.1967bb		e2 20		sep #$20	                SEP #$20        ; set A short
.1967bd		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.1967bf		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.1967c1		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.1967c5		8d 06 03	sta $0306	                STA @w FDC_ST0
.1967c8		28		plp		                PLP
.1967c9		2b		pld		                PLD
.1967ca		ab		plb		                PLB
.1967cb		7a		ply		                PLY
.1967cc		18		clc		                CLC
.1967cd		6b		rtl		                RTL
.1967ce						IDE_GETBLOCK
.1967ce		5a		phy		                PHY
.1967cf		8b		phb		                PHB
.1967d0		0b		phd		                PHD
.1967d1		08		php		                PHP
.1967d2		48		pha		                PHA             ; begin setdbr macro
.1967d3		08		php		                PHP
.1967d4		e2 20		sep #$20	                SEP #$20        ; set A short
.1967d6		a9 00		lda #$00	                LDA #0
.1967d8		48		pha		                PHA
.1967d9		ab		plb		                PLB
.1967da		28		plp		                PLP
.1967db		68		pla		                PLA             ; end setdbr macro
.1967dc		48		pha		                PHA             ; begin setdp macro
.1967dd		08		php		                PHP
.1967de		c2 20		rep #$20	                REP #$20        ; set A long
.1967e0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1967e3		5b		tcd		                TCD
.1967e4		28		plp		                PLP
.1967e5		68		pla		                PLA             ; end setdp macro
.1967e6		e2 20		sep #$20	                SEP #$20        ; set A short
.1967e8		20 1a 67	jsr $19671a	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.1967eb		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.1967ed		29 07		and #$07	                AND #$07
.1967ef		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.1967f1		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.1967f5		20 1a 67	jsr $19671a	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.1967f8		e2 20		sep #$20	                SEP #$20        ; set A short
.1967fa		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.1967fc		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.196800		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.196802		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196806		a5 03		lda $0323	                LDA BIOS_LBA+1
.196808		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.19680c		a5 04		lda $0324	                LDA BIOS_LBA+2
.19680e		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.196812		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.196814		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.196818		ea		nop		                NOP                             ; Wait about 500ns
.196819		ea		nop		                NOP
.19681a		ea		nop		                NOP
.19681b		ea		nop		                NOP
.19681c		20 1a 67	jsr $19671a	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.19681f		90 25		bcc $196846	                BCC ret_failure                 ; If an error occurred, return it
.196821		a0 00 00	ldy #$0000	                LDY #0
.196824		c2 30		rep #$30	                REP #$30        ; set A&X long
.196826		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.19682a		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.19682c		c8		iny		                INY                             ; Move to the next position
.19682d		c8		iny		                INY
.19682e		c0 00 02	cpy #$0200	                CPY #512
.196831		d0 f3		bne $196826	                BNE read_loop
.196833		ea		nop		                NOP                             ; Wait about 500ns
.196834		ea		nop		                NOP
.196835		ea		nop		                NOP
.196836		ea		nop		                NOP
.196837						ret_success
.196837		e2 20		sep #$20	                SEP #$20        ; set A short
.196839		a9 00		lda #$00	                LDA #0
.19683b		85 00		sta $0320	                STA BIOS_STATUS
.19683d		8d 06 03	sta $0306	                STA @w FDC_ST0
.196840		28		plp		                PLP                             ; Return success
.196841		2b		pld		                PLD
.196842		ab		plb		                PLB
.196843		7a		ply		                PLY
.196844		38		sec		                SEC
.196845		6b		rtl		                RTL
.196846						ret_failure
.196846		e2 20		sep #$20	                SEP #$20        ; set A short
.196848		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.19684c		8d 06 03	sta $0306	                STA @w FDC_ST0
.19684f		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.196851		85 00		sta $0320	                STA BIOS_STATUS
.196853		28		plp		                PLP
.196854		2b		pld		                PLD
.196855		ab		plb		                PLB
.196856		7a		ply		                PLY
.196857		18		clc		                CLC
.196858		6b		rtl		                RTL
.196859						IDE_PUTBLOCK
.196859		5a		phy		                PHY
.19685a		8b		phb		                PHB
.19685b		0b		phd		                PHD
.19685c		08		php		                PHP
.19685d		48		pha		                PHA             ; begin setdbr macro
.19685e		08		php		                PHP
.19685f		e2 20		sep #$20	                SEP #$20        ; set A short
.196861		a9 00		lda #$00	                LDA #0
.196863		48		pha		                PHA
.196864		ab		plb		                PLB
.196865		28		plp		                PLP
.196866		68		pla		                PLA             ; end setdbr macro
.196867		48		pha		                PHA             ; begin setdp macro
.196868		08		php		                PHP
.196869		c2 20		rep #$20	                REP #$20        ; set A long
.19686b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19686e		5b		tcd		                TCD
.19686f		28		plp		                PLP
.196870		68		pla		                PLA             ; end setdp macro
.196871		e2 20		sep #$20	                SEP #$20        ; set A short
.196873		20 1a 67	jsr $19671a	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.196876		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.196878		29 07		and #$07	                AND #$07
.19687a		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.19687c		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.196880		20 1a 67	jsr $19671a	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.196883		e2 20		sep #$20	                SEP #$20        ; set A short
.196885		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.196887		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.19688b		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.19688d		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196891		a5 03		lda $0323	                LDA BIOS_LBA+1
.196893		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196897		a5 04		lda $0324	                LDA BIOS_LBA+2
.196899		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.19689d		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.19689f		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.1968a3		ea		nop		                NOP                             ; Wait about 500ns
.1968a4		ea		nop		                NOP
.1968a5		ea		nop		                NOP
.1968a6		ea		nop		                NOP
.1968a7		20 1a 67	jsr $19671a	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.1968aa		90 37		bcc $1968e3	                BCC ret_failure                 ; If an error occurred, return it
.1968ac		c2 30		rep #$30	                REP #$30        ; set A&X long
.1968ae		a0 00 00	ldy #$0000	                LDY #0
.1968b1		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.1968b3		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.1968b7		c8		iny		                INY                             ; Move to the next position
.1968b8		c8		iny		                INY
.1968b9		c0 00 02	cpy #$0200	                CPY #512
.1968bc		d0 f3		bne $1968b1	                BNE read_loop
.1968be		ea		nop		                NOP                             ; Wait about 500ns
.1968bf		ea		nop		                NOP
.1968c0		ea		nop		                NOP
.1968c1		ea		nop		                NOP
.1968c2		20 1a 67	jsr $19671a	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.1968c5		90 1c		bcc $1968e3	                BCC ret_failure                 ; If an error occurred, return it
.1968c7		ea		nop		                NOP                             ; Wait about 500ns
.1968c8		ea		nop		                NOP
.1968c9		ea		nop		                NOP
.1968ca		ea		nop		                NOP
.1968cb		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.1968cf		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.1968d2		d0 0f		bne $1968e3	                BNE ret_failure                 ; If error: return failure
.1968d4						ret_success
.1968d4		e2 20		sep #$20	                SEP #$20        ; set A short
.1968d6		a9 00		lda #$00	                LDA #0
.1968d8		85 00		sta $0320	                STA BIOS_STATUS
.1968da		8d 06 03	sta $0306	                STA @w FDC_ST0
.1968dd		28		plp		                PLP                             ; Return success
.1968de		2b		pld		                PLD
.1968df		ab		plb		                PLB
.1968e0		7a		ply		                PLY
.1968e1		38		sec		                SEC
.1968e2		6b		rtl		                RTL
.1968e3		ea		nop		ret_failure     NOP                             ; Wait about 500ns
.1968e4		ea		nop		                NOP
.1968e5		ea		nop		                NOP
.1968e6		ea		nop		                NOP
.1968e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1968e9		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.1968ed		80 08		bra $1968f7	                BRA save_error
.1968ef		ea		nop		                NOP
.1968f0		ea		nop		                NOP
.1968f1		ea		nop		                NOP
.1968f2		ea		nop		                NOP
.1968f3		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.1968f7		8d 06 03	sta $0306	save_error      STA @w FDC_ST0
.1968fa		a9 83		lda #$83	                LDA #BIOS_ERR_WRITE
.1968fc		85 00		sta $0320	                STA BIOS_STATUS
.1968fe		28		plp		                PLP
.1968ff		2b		pld		                PLD
.196900		ab		plb		                PLB
.196901		7a		ply		                PLY
.196902		18		clc		                CLC
.196903		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/Ethernet_Init_library.asm

.196904						SIMPLE_INIT_ETHERNET_CTRL
.196904						WaitforittobeReady:
.196904		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.196908		29 01 00	and #$0001	                AND #$0001
.19690b		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.19690e		d0 f4		bne $196904	                BNE WaitforittobeReady
.196910		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.196914		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.196918		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.19691c		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.196920		a9 00 00	lda #$0000	                LDA #$0000
.196923		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.196927		a9 00 70	lda #$7000	                LDA #$7000
.19692a		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.19692e		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.196931		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.196935		a9 0b 00	lda #$000b	                LDA #$000B
.196938		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.19693c		a9 00 00	lda #$0000	                LDA #$0000
.19693f		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.196943		20 77 69	jsr $196977	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.196946		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.196949		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.19694d		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.196950		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.196954		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.196957		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.19695b		20 77 69	jsr $196977	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.19695e		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.196961		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.196965		a9 0c 00	lda #$000c	                LDA #$000C
.196968		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.19696c		a9 04 00	lda #$0004	                LDA #$0004
.19696f		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.196973		20 77 69	jsr $196977	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.196976		6b		rtl		                RTL
.196977						MAC_ACCESS_WAIT_FOR_COMPLETION
.196977		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.19697a		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.19697e						WaitForCompletion:
.19697e		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.196982		29 00 80	and #$8000	                AND #$8000
.196985		c9 00 80	cmp #$8000	                CMP #$8000
.196988		f0 f4		beq $19697e	                BEQ WaitForCompletion
.19698a		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/EXP-C200_EVID_Library.asm

=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.19698b						INIT_EVID_VID_MODE
.19698b		e2 20		sep #$20	                SEP #$20        ; set A short
.19698d		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable     ; 0 - 80x60, 1- 100x75
.19698f		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.196993		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable    ; Enable the Border
.196995		8f 04 1e ae	sta $ae1e04	                STA @l EVID_BORDER_CTRL_REG
.196999		a9 08		lda #$08	                LDA #8                          ; Set the border to the standard 8 pixels
.19699b		8f 08 1e ae	sta $ae1e08	                STA @l EVID_BORDER_X_SIZE       ; Let's use maximum space
.19699f		8f 09 1e ae	sta $ae1e09	                STA @l EVID_BORDER_Y_SIZE
.1969a3		a9 20		lda #$20	                LDA #$20
.1969a5		8f 07 1e ae	sta $ae1e07	                STA @l EVID_BORDER_COLOR_R      ; R
.1969a9		a9 00		lda #$00	                LDA #$00
.1969ab		8f 06 1e ae	sta $ae1e06	                STA @l EVID_BORDER_COLOR_G      ; G
.1969af		a9 20		lda #$20	                LDA #$20
.1969b1		8f 05 1e ae	sta $ae1e05	                STA @l EVID_BORDER_COLOR_B      ; B
.1969b5		22 b7 6a 19	jsl $196ab7	                JSL INIT_EVID_LUT
.1969b9		22 a0 6a 19	jsl $196aa0	                JSL INIT_EVID_FONTSET
.1969bd		22 db 6a 19	jsl $196adb	                JSL INIT_EVID_CURSOR
.1969c1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1969c3		a9 62 00	lda #$0062	                LDA #(100-2)
.1969c6		8f 63 00 00	sta $000063	                STA @l EVID_COLS_VISIBLE
.1969ca		a9 49 00	lda #$0049	                LDA #(75-2)
.1969cd		8f 67 00 00	sta $000067	                STA @l EVID_LINES_VISIBLE
.1969d1		a9 64 00	lda #$0064	                LDA #100
.1969d4		8f 65 00 00	sta $000065	                STA @l EVID_COLS_PER_LINE
.1969d8		a9 4b 00	lda #$004b	                LDA #75
.1969db		8f 69 00 00	sta $000069	                STA @l EVID_LINES_MAX
.1969df		a9 70 00	lda #$0070	                LDA #$70                        ; Set the default text color to light gray on dark gray
.1969e2		8f 72 00 00	sta $000072	                STA @l EVID_CURCOLOR
.1969e6		c2 30		rep #$30	                REP #$30        ; set A&X long
.1969e8		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM            ; store the initial screen buffer location
.1969eb		8f 60 00 00	sta $000060	                STA @l EVID_SCREENBEGIN
.1969ef		8f 6b 00 00	sta $00006b	                STA @l EVID_CURSORPOS
.1969f3		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM           ; Set the initial COLOR cursor position
.1969f6		8d 76 00	sta $0076	                STA EVID_COLORPOS
.1969f9		e2 20		sep #$20	                SEP #$20        ; set A short
.1969fb		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.1969fd		8f 62 00 00	sta $000062	                STA @l EVID_SCREENBEGIN + 2
.196a01		8f 6d 00 00	sta $00006d	                STA @l EVID_CURSORPOS+2
.196a05		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM            ; Set the initial COLOR cursor position
.196a07		8f 78 00 00	sta $000078	                STA @l EVID_COLORPOS + 2
.196a0b		6b		rtl		                RTL
>196a0c		1b 5b 31 6d 1b 5b 33 31		EVID_DEV_RDY0   .text $1B, "[1m", $1B, "[31m", $0B, $0C, $1B, "[35m", $0B, $0C, $1B, "[33m", $0B, $0C, $1B
>196a14		6d 0b 0c 1b 5b 33 35 6d 0b 0c 1b 5b 33 33 6d 0b
>196a24		0c 1b
>196a26		5b 33 32 6d 0b 0c 1b 5b		                .null "[32m", $0B, $0C, $1B, "[34m", $0B, $0C, $1B, "[0m", $20, "C256 Foenix EXP-C200-EVID", $0D
>196a2e		33 34 6d 0b 0c 1b 5b 30 6d 20 43 32 35 36 20 46
>196a3e		6f 65 6e 69 78 20 45 58 50 2d 43 32 30 30 2d 45
>196a4e		56 49 44 0d 00
>196a53		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1   .null "Your Device is Ready..."
>196a5b		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
.196a6b						EVID_GREET
.196a6b		48		pha		                PHA
.196a6c		da		phx		                PHX
.196a6d		08		php		                PHP
.196a6e		e2 20		sep #$20	                SEP #$20        ; set A short
.196a70		af 7d 00 00	lda $00007d	                LDA @l EVID_PRESENT             ; Check if the EVID screen is present
.196a74		f0 26		beq $196a9c	                BEQ done                        ; If not, skip this routine
.196a76		a9 04		lda #$04	                LDA #CHAN_EVID                  ; Switch to the EVID screen
.196a78		22 3c 10 00	jsl $00103c	                JSL SETOUT
.196a7c		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN                   ; Clear the screen
.196a80		c2 10		rep #$10	                REP #$10        ; set X long
.196a82		8b		phb		                PHB                             ; Print the messages
.196a83		a9 19		lda #$19	                LDA #`EVID_DEV_RDY0
.196a85		48		pha		                PHA
.196a86		ab		plb		                PLB
.196a87		a2 0c 6a	ldx #$6a0c	                LDX #<>EVID_DEV_RDY0
.196a8a		22 01 07 19	jsl $190701	                JSL IPRINT
.196a8e		a2 53 6a	ldx #$6a53	                LDX #<>EVID_DEV_RDY1
.196a91		22 01 07 19	jsl $190701	                JSL IPRINT
.196a95		ab		plb		                PLB
.196a96		a9 00		lda #$00	                LDA #CHAN_CONSOLE               ; Go back to the main console
.196a98		22 3c 10 00	jsl $00103c	                JSL SETOUT
.196a9c		28		plp		done            PLP
.196a9d		fa		plx		                PLX
.196a9e		68		pla		                PLA
.196a9f		6b		rtl		                RTL
.196aa0						INIT_EVID_FONTSET
.196aa0		e2 20		sep #$20	                SEP #$20        ; set A short
.196aa2		c2 10		rep #$10	                REP #$10        ; set X long
.196aa4		a2 00 00	ldx #$0000	                LDX #$0000
.196aa7						initFontsetbranch0
.196aa7		bf 00 00 1f	lda $1f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.196aab		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X   ; Vicky FONT RAM Bank
.196aaf		e8		inx		                INX
.196ab0		e0 00 08	cpx #$0800	                CPX #$0800
.196ab3		d0 f2		bne $196aa7	                BNE initFontsetbranch0
.196ab5		ea		nop		                NOP
.196ab6		6b		rtl		                RTL
.196ab7						INIT_EVID_LUT
.196ab7		e2 20		sep #$20	                SEP #$20        ; set A short
.196ab9		e2 10		sep #$10	                SEP #$10        ; set X short
.196abb		a2 00		ldx #$00	                LDX	#$00
.196abd		bf ce 82 19	lda $1982ce,x	lutinitloop0	LDA @lfg_color_lut,x    ; get Local Data c64_character_Color_LUT_4_Txt
.196ac1		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	    ; Write in LUT Memory
.196ac5		e8		inx		                inx
.196ac6		e0 40		cpx #$40	                cpx #$40
.196ac8		d0 f3		bne $196abd	                bne lutinitloop0
.196aca		a2 00		ldx #$00	                LDX	#$00
.196acc		bf 0e 83 19	lda $19830e,x	lutinitloop1	LDA @lbg_color_lut,x    ; get Local Data
.196ad0		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	    ; Write in LUT Memory
.196ad4		e8		inx		                INX
.196ad5		e0 40		cpx #$40	                CPX #$40
.196ad7		d0 f3		bne $196acc	                bne lutinitloop1
.196ad9		ea		nop		                NOP
.196ada		6b		rtl		                RTL
.196adb						INIT_EVID_CURSOR
.196adb		08		php		                PHP
.196adc		e2 20		sep #$20	                SEP #$20        ; set A short
.196ade		a9 b1		lda #$b1	                LDA #$B1                                            ; The Cursor Character will be a Fully Filled Block
.196ae0		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.196ae4		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0) ; Set Cursor Enable And Flash Rate @1Hz
.196ae6		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG
.196aea		c2 30		rep #$30	                REP #$30        ; set A&X long
.196aec		a9 00 00	lda #$0000	                LDA #$0000;
.196aef		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L   ; Set the X to Position 1
.196af3		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L   ; Set the Y to Position 6 (Below)
.196af7		28		plp		                PLP
.196af8		6b		rtl		                RTL
.196af9						INIT_EVID_CLRSCREEN
.196af9		08		php		                PHP
.196afa		e2 20		sep #$20	                SEP #$20        ; set A short
.196afc		c2 10		rep #$10	                REP #$10        ; set X long
.196afe		a2 00 00	ldx #$0000	                LDX #$0000		        ; Only Use One Pointer
.196b01		a9 20		lda #$20	                LDA #$20		        ; Fill the Entire Screen with Space
.196b03		9f 00 20 ae	sta $ae2000,x	iclearloop0	    STA @l EVID_TEXT_MEM,X
.196b07		e8		inx		                inx
.196b08		e0 00 20	cpx #$2000	                cpx #$2000
.196b0b		d0 f6		bne $196b03	                bne iclearloop0
.196b0d		a2 00 00	ldx #$0000	                LDX	#$0000		        ; Only Use One Pointer
.196b10		a9 f0		lda #$f0	                LDA #$F0		        ; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.196b12		9f 00 40 ae	sta $ae4000,x	iclearloop1	    STA @l EVID_COLOR_MEM,X
.196b16		e8		inx		                inx
.196b17		e0 00 20	cpx #$2000	                cpx #$2000
.196b1a		d0 f6		bne $196b12	                bne iclearloop1
.196b1c		28		plp		                PLP
.196b1d		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ansi_screens.asm

.0000						S_ANSI_VARS
>0000						SCREENBEGIN         .long ?     ; Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>0003						COLS_VISIBLE        .word ?     ; Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>0005						COLS_PER_LINE       .word ?     ; Columns in memory per screen line. A virtual line can be this long. Default=128
>0007						LINES_VISIBLE       .word ?     ; The number of rows visible on the screen. Default=25
>0009						LINES_MAX           .word ?     ; The number of rows in memory for the screen. Default=64
>000b						CURSORPOS           .long ?     ; The next character written to the screen will be written in this location.
>000e						CURSORX             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0010						CURSORY             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0012						CURCOLOR            .byte ?     ; Color of next character to be printed to the screen.
>0013						COLORPOS            .long ?     ; Address of cursor's position in the color matrix
>0016						COLORBEGIN          .long ?     ; Address of the first byte of the color matrix for this screen
>0019						TMPPTR1             .dword ?    ; Temporary pointer
>001d						PRESENT             .byte ?     ; Screen is present on the machine (EVID only)
>001e						STATE               .byte ?     ; State of the escape code parser
>001f						CONTROL             .byte ?     ; Control bit
>0020						ARGC                .byte ?     ; The number of arguments provided by the escape sequence (max 2)
>0021						ARG0                .byte ?     ; First ANSI code argument
>0022						ARG1                .byte ?     ; Second ANSI code argument
=0						ST_INIT = 0             ; Starting state for the ANSI code parser. Most characters just print
=1						ST_ESCAPE = 1           ; ESC has been seen
=2						ST_CSI = 2              ; Full CSI has been seen "ESC ["
=2						ANSI_MAX_ARG = 2        ; We'll limit ourselves to two arguments
=$70						ANSI_DEF_COLOR = $70    ; Default color (dim white on dim black)
=$80						CONTROL_INVERT = $80    ; Control bit: Colors are inverted
=$40						CONTROL_BOLD = $40      ; Control bit: Colors should be intense
.196b1e						ANSI_INIT
.196b1e		da		phx		                    PHX
.196b1f		5a		phy		                    PHY
.196b20		8b		phb		                    PHB
.196b21		0b		phd		                    PHD
.196b22		08		php		                    PHP
.196b23		c2 30		rep #$30	                REP #$30        ; set A&X long
.196b25		a0 00 00	ldy #$0000	                    LDY #0
.196b28		22 d4 6b 19	jsl $196bd4	                    JSL INIT_SCREEN_Y               ; Set up the main screen
.196b2c		e2 20		sep #$20	                SEP #$20        ; set A short
.196b2e		af 87 e8 af	lda $afe887	                    LDA @l GABE_SYS_STAT            ; Let's check the Presence of an Expansion Card here
.196b32		29 10		and #$10	                    AND #GABE_SYS_STAT_EXP          ; When there is a Card the Value is 1
.196b34		c9 10		cmp #$10	                    CMP #GABE_SYS_STAT_EXP
.196b36		d0 1d		bne $196b55	                    BNE no_evid
.196b38		c2 20		rep #$20	                REP #$20        ; set A long
.196b3a		af 12 00 ae	lda $ae0012	                    LDA @l ESID_ID_CARD_ID_Lo       ; Load the Card ID and check for C100 or C200
.196b3e		c9 c8 00	cmp #$00c8	                    CMP #$00C8                      ; Is it the EVID card?
.196b41		d0 12		bne $196b55	                    BNE no_evid                     ; No: mark the EVID screen as not present
.196b43		e2 20		sep #$20	                SEP #$20        ; set A short
.196b45		a9 01		lda #$01	                    LDA #1                          ; Otherwise: Mark that there is an EVID present
.196b47		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.196b4b		a0 01 00	ldy #$0001	                    LDY #1
.196b4e		22 d4 6b 19	jsl $196bd4	                    JSL INIT_SCREEN_Y               ; Initialize the EVID screen variables
.196b52		80 09		bra $196b5d	                    BRA done
.196b54		00		brk #		                    BRK
.196b55						no_evid
.196b55		e2 20		sep #$20	                SEP #$20        ; set A short
.196b57		a9 00		lda #$00	                    LDA #0                          ; Mark that there is no EVID present
.196b59		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.196b5d		28		plp		done                PLP
.196b5e		2b		pld		                    PLD
.196b5f		ab		plb		                    PLB
.196b60		7a		ply		                    PLY
.196b61		fa		plx		                    PLX
.196b62		6b		rtl		                    RTL
.196b63						ANSI_INIT_LUTS
.196b63		08		php		                    PHP
.196b64		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196b66		a2 00		ldx #$00	                    LDX #0
.196b68		bf 94 6b 19	lda $196b94,x	vicky_loop          LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.196b6c		9f 40 1f af	sta $af1f40,x	                    STA @l FG_CHAR_LUT_PTR,X        ; Set the corresponding foreground color component on Vicky
.196b70		9f 80 1f af	sta $af1f80,x	                    STA @l BG_CHAR_LUT_PTR,X        ; Set the corresponding background color component on Vicky
.196b74		e8		inx		                    INX
.196b75		e0 40		cpx #$40	                    CPX #4*16
.196b77		d0 ef		bne $196b68	                    BNE vicky_loop
.196b79		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Check to see if EVID is present
.196b7d		f0 13		beq $196b92	                    BEQ done                        ; If not, we're done
.196b7f		a2 00		ldx #$00	                    LDX #0
.196b81		bf 94 6b 19	lda $196b94,x	evid_loop           LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.196b85		9f 00 1b ae	sta $ae1b00,x	                    STA @l EVID_FG_LUT,X            ; Set the corresponding foreground color component on the EVID card
.196b89		9f 40 1b ae	sta $ae1b40,x	                    STA @l EVID_BG_LUT,X            ; Set the corresponding background color component on the EVID card
.196b8d		e8		inx		                    INX
.196b8e		e0 40		cpx #$40	                    CPX #4*16
.196b90		d0 ef		bne $196b81	                    BNE evid_loop
.196b92		28		plp		done                PLP
.196b93		6b		rtl		                    RTL
.196b94						ANSI_TEXT_LUT
>196b94		00 00 00 00			                    .byte 0, 0, 0, 0
>196b98		00 00 80 00			                    .byte 0, 0, 128, 0
>196b9c		00 80 00 00			                    .byte 0, 128, 0, 0
>196ba0		00 80 80 00			                    .byte 0, 128, 128, 0
>196ba4		80 00 00 00			                    .byte 128, 0, 0, 0
>196ba8		80 00 80 00			                    .byte 128, 0, 128, 0
>196bac		80 80 00 00			                    .byte 128, 128, 0, 0
>196bb0		c0 c0 c0 00			                    .byte 192, 192, 192, 0
>196bb4		80 80 80 00			                    .byte 128, 128, 128, 0
>196bb8		00 00 ff 00			                    .byte 0, 0, 255, 0
>196bbc		00 ff 00 00			                    .byte 0, 255, 0, 0
>196bc0		00 ff ff 00			                    .byte 0, 255, 255, 0
>196bc4		ff 00 00 00			                    .byte 255, 0, 0, 0
>196bc8		00 7f fc 00			                    .byte 0, 127, 252, 0
>196bcc		ff ff 00 00			                    .byte 255, 255, 0, 0
>196bd0		ff ff ff 00			                    .byte 255, 255, 255, 0
.196bd4						INIT_SCREEN_Y
.196bd4		c2 30		rep #$30	                REP #$30        ; set A&X long
.196bd6		c0 00 00	cpy #$0000	                    CPY #0
.196bd9		f0 06		beq $196be1	                    BEQ setdp_0
.196bdb		a9 60 00	lda #$0060	setdp_1             LDA #<>EVID_SCREENBEGIN         ; Set DP to the EVID variable block
.196bde		5b		tcd		                    TCD
.196bdf		80 04		bra $196be5	                    BRA set_addresses
.196be1		a9 0c 00	lda #$000c	setdp_0             LDA #<>SCREENBEGIN              ; Set DP to the main screen variable block
.196be4		5b		tcd		                    TCD
.196be5		98		tya		set_addresses       TYA                             ; Compute offset to screen Y's addresses
.196be6		0a		asl a		                    ASL A
.196be7		0a		asl a		                    ASL A
.196be8		aa		tax		                    TAX
.196be9		bf 24 6c 19	lda $196c24,x	                    LDA @l text_address,X
.196bed		85 00		sta $0320	                    STA #S_ANSI_VARS.SCREENBEGIN,D  ; Set the address of the text matrix
.196bef		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D    ; And the cursor pointer
.196bf1		e2 20		sep #$20	                SEP #$20        ; set A short
.196bf3		bf 26 6c 19	lda $196c26,x	                    LDA @l text_address+2,X
.196bf7		85 02		sta $0322	                    STA #S_ANSI_VARS.SCREENBEGIN+2,D
.196bf9		85 0d		sta $032d	                    STA #S_ANSI_VARS.CURSORPOS+2,D
.196bfb		c2 20		rep #$20	                REP #$20        ; set A long
.196bfd		bf 2c 6c 19	lda $196c2c,x	                    LDA @l color_address,X
.196c01		85 16		sta $0336	                    STA #S_ANSI_VARS.COLORBEGIN,D   ; Set the address of the color matrix
.196c03		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D     ; And the color cursor pointer
.196c05		e2 20		sep #$20	                SEP #$20        ; set A short
.196c07		bf 2e 6c 19	lda $196c2e,x	                    LDA @l color_address+2,X
.196c0b		85 18		sta $0338	                    STA #S_ANSI_VARS.COLORBEGIN+2,D
.196c0d		85 15		sta $0335	                    STA #S_ANSI_VARS.COLORPOS+2,D
.196c0f		c2 20		rep #$20	                REP #$20        ; set A long
.196c11		64 0e		stz $032e	                    STZ #S_ANSI_VARS.CURSORX,D      ; Set the cursor position to 0, 0
.196c13		64 10		stz $0330	                    STZ #S_ANSI_VARS.CURSORY,D
.196c15		e2 20		sep #$20	                SEP #$20        ; set A short
.196c17		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D        ; Set the state of the ANSI parser to S0
.196c19		64 1f		stz $033f	                    STZ #S_ANSI_VARS.CONTROL,D      ; Set the control bits to 0 (default)
.196c1b		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.196c1d		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D     ; Set the current color to the default
.196c1f		22 6d 6c 19	jsl $196c6d	                    JSL ANSI_SETSIZE_Y              ; Set the size variables for the main screen
.196c23		6b		rtl		                    RTL
>196c24		00 a0 af 00 00 20 ae 00		text_address        .dword CS_TEXT_MEM_PTR, EVID_TEXT_MEM
>196c2c		00 c0 af 00 00 40 ae 00		color_address       .dword CS_COLOR_MEM_PTR, EVID_COLOR_MEM
.196c34						ANSI_SETSIZES
.196c34		48		pha		                    PHA
.196c35		da		phx		                    PHX
.196c36		5a		phy		                    PHY
.196c37		0b		phd		                    PHD
.196c38		08		php		                    PHP
.196c39		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196c3b		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Save the current output channel
.196c3f		48		pha		                    PHA
.196c40		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; Set the sizes for the main screen
.196c42		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.196c46		22 30 6d 19	jsl $196d30	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.196c4a		a0 00		ldy #$00	                    LDY #0
.196c4c		22 6d 6c 19	jsl $196c6d	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.196c50		a9 04		lda #$04	                    LDA #CHAN_EVID                  ; Set the sizes for the EVID screen
.196c52		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.196c56		22 30 6d 19	jsl $196d30	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.196c5a		b0 06		bcs $196c62	                    BCS done                        ; Not present, just return
.196c5c		a0 01		ldy #$01	                    LDY #1
.196c5e		22 6d 6c 19	jsl $196c6d	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.196c62		68		pla		done                PLA
.196c63		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT                 ; Restore the output channel
.196c67		28		plp		                    PLP
.196c68		2b		pld		                    PLD
.196c69		7a		ply		                    PLY
.196c6a		fa		plx		                    PLX
.196c6b		68		pla		                    PLA
.196c6c		6b		rtl		                    RTL
.196c6d						ANSI_SETSIZE_Y
.196c6d		08		php		                    PHP
.196c6e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196c70		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196c72		f0 06		beq $196c7a	                    BEQ vky_master                      ; Yes: get the resolution from Vicky
.196c74		af 01 1e ae	lda $ae1e01	                    LDA @l EVID_MSTR_CTRL_REG_H         ; No: get the resolution from EVID
.196c78		80 04		bra $196c7e	                    BRA resolution
.196c7a		af 01 00 af	lda $af0001	vky_master          LDA @l MASTER_CTRL_REG_H
.196c7e		29 03		and #$03	resolution          AND #$03                            ; Mask off the resolution bits
.196c80		0a		asl a		                    ASL A
.196c81		aa		tax		                    TAX                                 ; Index to the col/line count in X
.196c82		c2 20		rep #$20	                REP #$20        ; set A long
.196c84		bf 20 6d 19	lda $196d20,x	                    LDA @l cols_by_res,X                ; Get the number of columns
.196c88		85 05		sta $0325	                    STA #S_ANSI_VARS.COLS_PER_LINE,D    ; This is how many columns there are per line in the memory
.196c8a		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D     ; This is how many would be visible with no border
.196c8c		bf 28 6d 19	lda $196d28,x	                    LDA @l lines_by_res,X               ; Get the number of lines
.196c90		85 09		sta $0329	                    STA #S_ANSI_VARS.LINES_MAX,D        ; This is the total number of lines in memory
.196c92		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D    ; This is how many lines would be visible with no border
.196c94		e2 20		sep #$20	                SEP #$20        ; set A short
.196c96		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196c98		f0 06		beq $196ca0	                    BEQ vky_border                      ; Yes: get the border from Vicky
.196c9a		af 04 1e ae	lda $ae1e04	                    LDA @l EVID_BORDER_CTRL_REG         ; No: Check EVID to see if we have a border
.196c9e		80 04		bra $196ca4	                    BRA border
.196ca0		af 04 00 af	lda $af0004	vky_border          LDA @l BORDER_CTRL_REG              ; Check Vicky to see if we have a border
.196ca4		89 01		bit #$01	border              BIT #Border_Ctrl_Enable
.196ca6		f0 76		beq $196d1e	                    BEQ done                            ; No border... the sizes are correct now
.196ca8		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196caa		f0 06		beq $196cb2	                    BEQ vky_border_size                 ; Yes: get the border size from Vicky
.196cac		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the horizontal border width from EVID
.196cb0		80 04		bra $196cb6	                    BRA get_border_x_size
.196cb2		af 08 00 af	lda $af0008	vky_border_size     LDA @l BORDER_X_SIZE                ; Get the horizontal border width from Vicky
.196cb6		29 3f		and #$3f	get_border_x_size   AND #$3F
.196cb8		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.196cba		d0 04		bne $196cc0	                    BNE frac_width
.196cbc		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.196cbd		4a		lsr a		                    LSR A
.196cbe		80 03		bra $196cc3	                    BRA store_width
.196cc0		4a		lsr a		frac_width          LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.196cc1		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.196cc2		1a		inc a		                    INC A
.196cc3		85 19		sta $0339	store_width         STA #S_ANSI_VARS.TMPPTR1,D
.196cc5		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.196cc7		e2 20		sep #$20	                SEP #$20        ; set A short
.196cc9		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.196ccb		f0 0c		beq $196cd9	                    BEQ adjust_width                    ; Yes: skip the pixel doubling check
.196ccd		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check Vucky if we're pixel doubling
.196cd1		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.196cd3		f0 04		beq $196cd9	                    BEQ adjust_width                    ; No... just adjust the width of the screen
.196cd5		c2 20		rep #$20	                REP #$20        ; set A long
.196cd7		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.196cd9						adjust_width
.196cd9		c2 20		rep #$20	                REP #$20        ; set A long
.196cdb		38		sec		                    SEC
.196cdc		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.196cde		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.196ce0		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D
.196ce2		e2 20		sep #$20	                SEP #$20        ; set A short
.196ce4		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196ce6		f0 06		beq $196cee	                    BEQ vky_border_y_size               ; Yes: get the border Y size from Vicky
.196ce8		af 09 1e ae	lda $ae1e09	                    LDA @l EVID_BORDER_Y_SIZE           ; No: Get the vertical border width from EVID
.196cec		80 04		bra $196cf2	                    BRA get_border_y_size
.196cee		af 09 00 af	lda $af0009	vky_border_y_size   LDA @l BORDER_Y_SIZE                ; Get the vertical border width from Vicky
.196cf2		29 3f		and #$3f	get_border_y_size   AND #$3F
.196cf4		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.196cf6		d0 04		bne $196cfc	                    BNE frac_height
.196cf8		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.196cf9		4a		lsr a		                    LSR A
.196cfa		80 03		bra $196cff	                    BRA store_height
.196cfc		4a		lsr a		frac_height         LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.196cfd		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.196cfe		1a		inc a		                    INC A
.196cff		85 19		sta $0339	store_height        STA #S_ANSI_VARS.TMPPTR1,D
.196d01		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.196d03		e2 20		sep #$20	                SEP #$20        ; set A short
.196d05		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.196d07		f0 0c		beq $196d15	                    BEQ adjust_height                   ; Yes: skip the pixel doubling check
.196d09		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check if we're pixel doubling
.196d0d		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.196d0f		f0 04		beq $196d15	                    BEQ adjust_height                   ; No... just adjust the height of the screen
.196d11		c2 20		rep #$20	                REP #$20        ; set A long
.196d13		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.196d15						adjust_height
.196d15		c2 20		rep #$20	                REP #$20        ; set A long
.196d17		38		sec		                    SEC
.196d18		a5 09		lda $0329	                    LDA #S_ANSI_VARS.LINES_MAX,D
.196d1a		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.196d1c		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D
.196d1e		28		plp		done                PLP
.196d1f		6b		rtl		                    RTL
>196d20		50 00 64 00 28 00 32 00		cols_by_res         .word 80,100,40,50
>196d28		3c 00 4b 00 1e 00 25 00		lines_by_res        .word 60,75,30,37
.196d30						ANSI_SETDEVICE
.196d30		48		pha		                    PHA
.196d31		08		php		                    PHP
.196d32		e2 20		sep #$20	                SEP #$20        ; set A short
.196d34		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check the current output channel
.196d38		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE               ; Is it the console?
.196d3a		f0 08		beq $196d44	                    BEQ console                     ; Yes: point to the console
.196d3c		c9 04		cmp #$04	                    CMP #CHAN_EVID                  ; Is it the EVID?
.196d3e		f0 0b		beq $196d4b	                    BEQ evid                        ; Check to see if the EVID is present
.196d40		28		plp		bad_device          PLP
.196d41		68		pla		                    PLA
.196d42		38		sec		                    SEC
.196d43		6b		rtl		                    RTL
.196d44						console
.196d44		c2 20		rep #$20	                REP #$20        ; set A long
.196d46		a9 0c 00	lda #$000c	                    LDA #<>SCREENBEGIN              ; Point to the the main screen's variables
.196d49		80 0d		bra $196d58	                    BRA set_dp
.196d4b						evid
.196d4b		e2 20		sep #$20	                SEP #$20        ; set A short
.196d4d		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Is the EVID present?
.196d51		f0 ed		beq $196d40	                    BEQ bad_device                  ; No: return that the device is bad
.196d53		c2 20		rep #$20	                REP #$20        ; set A long
.196d55		a9 60 00	lda #$0060	                    LDA #<>EVID_SCREENBEGIN         ; Yes: point to the EVID's variables
.196d58		5b		tcd		set_dp              TCD
.196d59		28		plp		                    PLP
.196d5a		68		pla		                    PLA
.196d5b		18		clc		                    CLC
.196d5c		6b		rtl		                    RTL
.196d5d						ANSI_PUTC
.196d5d		da		phx		                    PHX
.196d5e		5a		phy		                    PHY
.196d5f		0b		phd		                    PHD
.196d60		08		php		                    PHP
.196d61		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196d63		22 30 6d 19	jsl $196d30	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.196d67		90 03		bcc $196d6c	                    BCC get_state               ; If valid, check the current state
.196d69		82 9d 00	brl $196e09	                    BRL done                    ; If invalid, just return
.196d6c		a6 1e		ldx $033e	get_state           LDX #S_ANSI_VARS.STATE,D    ; Get the current state
.196d6e		f0 0c		beq $196d7c	                    BEQ do_st_init              ; Dispatch to the correct code for the state
.196d70		e0 01		cpx #$01	                    CPX #ST_ESCAPE
.196d72		f0 21		beq $196d95	                    BEQ do_st_escape
.196d74		e0 02		cpx #$02	                    CPX #ST_CSI
.196d76		f0 3f		beq $196db7	                    BEQ do_st_csi
.196d78		64 1e		stz $033e	pr_and_reset        STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.196d7a		80 06		bra $196d82	                    BRA print_raw
.196d7c		c9 1b		cmp #$1b	do_st_init          CMP #CHAR_ESC               ; Is it ESC?
.196d7e		f0 09		beq $196d89	                    BEQ go_escape               ; Yes, handle the ESC
.196d80		90 0d		bcc $196d8f	                    BLT do_control              ; If less than, handle as a control code
.196d82		22 ea 6e 19	jsl $196eea	print_raw           JSL ANSI_PUTRAWC            ; Otherwise: Just print the raw character
.196d86		82 80 00	brl $196e09	                    BRL done
.196d89		a9 01		lda #$01	go_escape           LDA #ST_ESCAPE
.196d8b		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the ESCAPE state
.196d8d		80 7a		bra $196e09	                    BRA done
.196d8f		22 a1 6e 19	jsl $196ea1	do_control          JSL ANSI_PR_CONTROL         ; Hand a single byte control code
.196d93		80 74		bra $196e09	                    BRA done
.196d95		c9 5c		cmp #$5c	do_st_escape        CMP #'\'                    ; Have we gotten 'ESC\' (String terminator)?
.196d97		f0 08		beq $196da1	                    BEQ go_init                 ; Yes: go back to the init state (we do nothing with this)
.196d99		c9 5f		cmp #$5f	chk_apc             CMP #'_'                    ; Have we gotten 'ESC_' (Application Program Command)?
.196d9b		d0 0a		bne $196da7	                    BNE chk_csi                 ; No: check to see if we have a CSI
.196d9d		22 54 10 19	jsl $191054	                    JSL SHOW_CREDITS            ; Yes: show the credits
.196da1		a9 00		lda #$00	go_init             LDA #ST_INIT
.196da3		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the INIT state
.196da5		80 62		bra $196e09	                    BRA done
.196da7		c9 5b		cmp #$5b	chk_csi             CMP #'['                    ; Have we gotten 'ESC['?
.196da9		d0 cd		bne $196d78	                    BNE pr_and_reset            ; No: print this and return to ST_INIT
.196dab		64 21		stz $0341	                    STZ #S_ANSI_VARS.ARG0,D     ; Clear the arguments
.196dad		64 22		stz $0342	                    STZ #S_ANSI_VARS.ARG1,D
.196daf		64 20		stz $0340	                    STZ #S_ANSI_VARS.ARGC,D
.196db1		a9 02		lda #$02	                    LDA #ST_CSI
.196db3		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the CSI state
.196db5		80 52		bra $196e09	                    BRA done
.196db7		c9 30		cmp #$30	do_st_csi           CMP #'0'                    ; Do we have a digit?
.196db9		90 1d		bcc $196dd8	                    BLT csi_not_digit
.196dbb		c9 3a		cmp #$3a	                    CMP #'9'+1
.196dbd		b0 19		bcs $196dd8	                    BGE csi_not_digit
.196dbf		38		sec		                    SEC                         ; Have digit... convert to a number
.196dc0		e9 30		sbc #$30	                    SBC #'0'
.196dc2		48		pha		                    PHA                         ; Save it
.196dc3		a6 20		ldx $0340	                    LDX #S_ANSI_VARS.ARGC,D
.196dc5		16 21		asl $0341,x	                    ASL #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 2
.196dc7		b5 21		lda $0341,x	                    LDA #S_ANSI_VARS.ARG0,D,X
.196dc9		0a		asl a		                    ASL A                       ; A := arg * 4
.196dca		0a		asl a		                    ASL A                       ; A := arg * 8
.196dcb		18		clc		                    CLC
.196dcc		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10
.196dce		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := A
.196dd0		18		clc		                    CLC
.196dd1		68		pla		                    PLA                         ; Get the digit back
.196dd2		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10 + digit
.196dd4		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 10 + digit
.196dd6		80 31		bra $196e09	                    BRA done                    ; And we're done with this particular character
.196dd8		c9 3b		cmp #$3b	csi_not_digit       CMP #';'                    ; Is it an argument separator?
.196dda		d0 0e		bne $196dea	                    BNE csi_not_sep
.196ddc		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D     ; Get the argument count
.196dde		c9 02		cmp #$02	                    CMP #ANSI_MAX_ARG           ; Are we at the maximum argument count?
.196de0		d0 03		bne $196de5	                    BNE csi_next_arg            ; No: move to the next argument
.196de2		82 93 ff	brl $196d78	                    BRL pr_and_reset            ; Yes: print and reset state
.196de5		1a		inc a		csi_next_arg        INC A
.196de6		85 20		sta $0340	                    STA #S_ANSI_VARS.ARGC,D     ; Set the new argument count
.196de8		80 1f		bra $196e09	                    BRA done                    ; And we're done with this character
.196dea		c9 40		cmp #$40	csi_not_sep         CMP #'@'
.196dec		90 0a		bcc $196df8	                    BLT csi_not_upper
.196dee		c9 5b		cmp #$5b	                    CMP #'Z'+1
.196df0		b0 06		bcs $196df8	                    BGE csi_not_upper
.196df2		22 19 6e 19	jsl $196e19	                    JSL ANSI_ANSI_UPPER         ; Process an ANSI upper case code
.196df6		80 11		bra $196e09	                    BRA done
.196df8		c9 61		cmp #$61	csi_not_upper       CMP #'a'
.196dfa		90 0a		bcc $196e06	                    BLT csi_not_lower
.196dfc		c9 7b		cmp #$7b	                    CMP #'z'+1
.196dfe		b0 06		bcs $196e06	                    BGE csi_not_lower
.196e00		22 5e 6e 19	jsl $196e5e	                    JSL ANSI_ANSI_LOWER         ; Process an ANSI lower case code
.196e04		80 03		bra $196e09	                    BRA done
.196e06		82 6f ff	brl $196d78	csi_not_lower       BRL pr_and_reset            ; Invalid sequence: print it and reset
.196e09		28		plp		done                PLP
.196e0a		2b		pld		                    PLD
.196e0b		7a		ply		                    PLY
.196e0c		fa		plx		                    PLX
.196e0d		6b		rtl		                    RTL
.196e0e						ANSI_INVALID
.196e0e		08		php		                    PHP
.196e0f		e2 20		sep #$20	                SEP #$20        ; set A short
.196e11		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.196e13		22 ea 6e 19	jsl $196eea	                    JSL ANSI_PUTRAWC            ; Print the character
.196e17		28		plp		                    PLP
.196e18		6b		rtl		                    RTL
.196e19						ANSI_ANSI_UPPER
.196e19		08		php		                    PHP
.196e1a		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196e1c		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.196e1e		38		sec		                    SEC
.196e1f		e9 40		sbc #$40	                    SBC #'@'
.196e21		0a		asl a		                    ASL A
.196e22		aa		tax		                    TAX
.196e23		fc 28 6e	jsr ($196e28,x)	                    JSR (ansi_table,X)
.196e26		28		plp		                    PLP
.196e27		6b		rtl		                    RTL
>196e28		82 71				ansi_table          .word <>ANSI_ICH        ; '@' -- ICH -- Insert Character
>196e2a		05 6f				                    .word <>ANSI_CUU        ; 'A' -- CUU -- Cursor Up
>196e2c		19 6f				                    .word <>ANSI_CUD        ; 'B' -- CUD -- Cursor Down
>196e2e		2d 6f				                    .word <>ANSI_CUF        ; 'C' -- CUF -- Cursor Forward
>196e30		41 6f				                    .word <>ANSI_CUB        ; 'D' -- CUB -- Cursor Back
>196e32		0e 6e				                    .word <>ANSI_INVALID    ; 'E' -- CNL -- Cursor Next Line
>196e34		0e 6e				                    .word <>ANSI_INVALID    ; 'F' -- CPL -- Cursor Previous Line
>196e36		0e 6e				                    .word <>ANSI_INVALID    ; 'G' -- CHA -- Cursor Horizontal Absolute
>196e38		55 6f				                    .word <>ANSI_CUP        ; 'H' -- CUP -- Cursor Position
>196e3a		0e 6e				                    .word <>ANSI_INVALID    ; 'I'
>196e3c		d4 70				                    .word <>ANSI_ED         ; 'J' -- ED -- Erase In Display
>196e3e		31 71				                    .word <>ANSI_EL         ; 'K' -- EL -- Erase In Line
>196e40		0e 6e				                    .word <>ANSI_INVALID    ; 'L'
>196e42		0e 6e				                    .word <>ANSI_INVALID    ; 'M'
>196e44		0e 6e				                    .word <>ANSI_INVALID    ; 'N'
>196e46		0e 6e				                    .word <>ANSI_INVALID    ; 'O'
>196e48		c6 71				                    .word <>ANSI_DCH        ; 'P' -- DCH -- Delete Character
>196e4a		0e 6e				                    .word <>ANSI_INVALID    ; 'Q'
>196e4c		0e 6e				                    .word <>ANSI_INVALID    ; 'R'
>196e4e		0e 6e				                    .word <>ANSI_INVALID    ; 'S' -- SU -- Scroll Up
>196e50		0e 6e				                    .word <>ANSI_INVALID    ; 'T' -- SD -- Scroll Down
>196e52		0e 6e				                    .word <>ANSI_INVALID    ; 'U'
>196e54		0e 6e				                    .word <>ANSI_INVALID    ; 'V'
>196e56		0e 6e				                    .word <>ANSI_INVALID    ; 'W'
>196e58		0e 6e				                    .word <>ANSI_INVALID    ; 'X'
>196e5a		0e 6e				                    .word <>ANSI_INVALID    ; 'Y'
>196e5c		0e 6e				                    .word <>ANSI_INVALID    ; 'Z'
.196e5e						ANSI_ANSI_LOWER
.196e5e		08		php		                    PHP
.196e5f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196e61		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.196e63		38		sec		                    SEC
.196e64		e9 61		sbc #$61	                    SBC #'a'
.196e66		0a		asl a		                    ASL A
.196e67		aa		tax		                    TAX
.196e68		fc 6d 6e	jsr ($196e6d,x)	                    JSR (ansi_table,X)
.196e6b		28		plp		                    PLP
.196e6c		6b		rtl		                    RTL
>196e6d		0e 6e				ansi_table          .word <>ANSI_INVALID    ; 'a'
>196e6f		0e 6e				                    .word <>ANSI_INVALID    ; 'b'
>196e71		0e 6e				                    .word <>ANSI_INVALID    ; 'c'
>196e73		0e 6e				                    .word <>ANSI_INVALID    ; 'd'
>196e75		0e 6e				                    .word <>ANSI_INVALID    ; 'e'
>196e77		0e 6e				                    .word <>ANSI_INVALID    ; 'f' -- HVP -- Horizontal Vertical Position
>196e79		0e 6e				                    .word <>ANSI_INVALID    ; 'g'
>196e7b		6e 6f				                    .word <>ANSI_SET_MODE   ; 'h'
>196e7d		0e 6e				                    .word <>ANSI_INVALID    ; 'i'
>196e7f		0e 6e				                    .word <>ANSI_INVALID    ; 'j'
>196e81		0e 6e				                    .word <>ANSI_INVALID    ; 'k'
>196e83		ab 6f				                    .word <>ANSI_RESET_MODE ; 'l'
>196e85		e8 6f				                    .word <>ANSI_SGR        ; 'm' -- SGR -- Select Graphics Rendition
>196e87		0e 6e				                    .word <>ANSI_INVALID    ; 'n'
>196e89		0e 6e				                    .word <>ANSI_INVALID    ; 'o'
>196e8b		0e 6e				                    .word <>ANSI_INVALID    ; 'p'
>196e8d		0e 6e				                    .word <>ANSI_INVALID    ; 'q'
>196e8f		0e 6e				                    .word <>ANSI_INVALID    ; 'r'
>196e91		0e 6e				                    .word <>ANSI_INVALID    ; 's'
>196e93		0e 6e				                    .word <>ANSI_INVALID    ; 't'
>196e95		0e 6e				                    .word <>ANSI_INVALID    ; 'u'
>196e97		0e 6e				                    .word <>ANSI_INVALID    ; 'v'
>196e99		0e 6e				                    .word <>ANSI_INVALID    ; 'w'
>196e9b		0e 6e				                    .word <>ANSI_INVALID    ; 'x'
>196e9d		0e 6e				                    .word <>ANSI_INVALID    ; 'y'
>196e9f		0e 6e				                    .word <>ANSI_INVALID    ; 'z'
.196ea1						ANSI_PR_CONTROL
.196ea1		08		php		                    PHP
.196ea2		e2 20		sep #$20	                SEP #$20        ; set A short
.196ea4		c2 10		rep #$10	                REP #$10        ; set X long
.196ea6		c9 0d		cmp #$0d	                    CMP #CHAR_CR                ; Handle carriage return
.196ea8		f0 12		beq $196ebc	                    BEQ do_cr
.196eaa		c9 0a		cmp #$0a	                    CMP #CHAR_LF                ; Handle line feed
.196eac		f0 1a		beq $196ec8	                    BEQ do_lf
.196eae		c9 08		cmp #$08	                    CMP #CHAR_BS                ; Handle back space
.196eb0		f0 1c		beq $196ece	                    BEQ do_bs
.196eb2		c9 09		cmp #$09	                    CMP #CHAR_TAB               ; Handle TAB
.196eb4		f0 1e		beq $196ed4	                    BEQ do_tab
.196eb6		22 ea 6e 19	jsl $196eea	                    JSL ANSI_PUTRAWC            ; Otherwise, just print it raw and wriggling!
.196eba		80 2c		bra $196ee8	                    BRA done
.196ebc		a2 00 00	ldx #$0000	do_cr               LDX #0                      ; Move to the beginning of the next line
.196ebf		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.196ec1		c8		iny		                    INY
.196ec2		22 9f 72 19	jsl $19729f	                    JSL ANSI_LOCATE
.196ec6		80 20		bra $196ee8	                    BRA done
.196ec8		22 7c 72 19	jsl $19727c	do_lf               JSL ANSI_CSRDOWN            ; Move the cursor down a line
.196ecc		80 1a		bra $196ee8	                    BRA done
.196ece		22 40 72 19	jsl $197240	do_bs               JSL ANSI_CSRLEFT            ; Move the cursor to the left (TODO: delete to the left?)
.196ed2		80 14		bra $196ee8	                    BRA done
.196ed4						do_tab
.196ed4		c2 30		rep #$30	                REP #$30        ; set A&X long
.196ed6		a5 0e		lda $032e	                    LDA #S_ANSI_VARS.CURSORX,D  ; Move to the next power 8th column
.196ed8		29 f8 ff	and #$fff8	                    AND #$FFF8
.196edb		18		clc		                    CLC
.196edc		69 08 00	adc #$0008	                    ADC #$0008
.196edf		aa		tax		                    TAX
.196ee0		e2 20		sep #$20	                SEP #$20        ; set A short
.196ee2		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.196ee4		22 9f 72 19	jsl $19729f	                    JSL ANSI_LOCATE
.196ee8		28		plp		done                PLP
.196ee9		6b		rtl		                    RTL
.196eea						ANSI_PUTRAWC
.196eea		da		phx		                    PHX
.196eeb		5a		phy		                    PHY
.196eec		0b		phd		                    PHD
.196eed		08		php		                    PHP
.196eee		e2 20		sep #$20	                SEP #$20        ; set A short
.196ef0		22 30 6d 19	jsl $196d30	                    JSL ANSI_SETDEVICE              ; Look at the current output channel and point
.196ef4		b0 0a		bcs $196f00	                    BCS done                        ; If invalid, just return
.196ef6		87 0b		sta [$032b]	                    STA [#S_ANSI_VARS.CURSORPOS,D]  ; Save the character on the screen
.196ef8		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Set the color based on CURCOLOR
.196efa		87 13		sta [$0333]	                    STA [#S_ANSI_VARS.COLORPOS,D]
.196efc		22 15 72 19	jsl $197215	                    JSL ANSI_CSRRIGHT              ; And advance the cursor
.196f00		28		plp		done                PLP
.196f01		2b		pld		                    PLD
.196f02		7a		ply		                    PLY
.196f03		fa		plx		                    PLX
.196f04		6b		rtl		                    RTL
.196f05						ANSI_CUU
.196f05		08		php		                    PHP
.196f06		e2 20		sep #$20	                SEP #$20        ; set A short
.196f08		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196f0a		d0 02		bne $196f0e	                    BNE loop                        ; Move so long as not 0
.196f0c		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.196f0e		48		pha		loop                PHA                             ; Save the count
.196f0f		22 5e 72 19	jsl $19725e	                    JSL ANSI_CSRUP                  ; Cursor Up
.196f13		68		pla		                    PLA                             ; Restore the count
.196f14		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196f15		d0 f7		bne $196f0e	                    BNE loop
.196f17		28		plp		                    PLP
.196f18		60		rts		                    RTS
.196f19						ANSI_CUD
.196f19		08		php		                    PHP
.196f1a		e2 20		sep #$20	                SEP #$20        ; set A short
.196f1c		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196f1e		d0 02		bne $196f22	                    BNE loop                        ; Move so long as not 0
.196f20		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.196f22		48		pha		loop                PHA                             ; Save the count
.196f23		22 7c 72 19	jsl $19727c	                    JSL ANSI_CSRDOWN                ; Cursor Down
.196f27		68		pla		                    PLA                             ; Restore the count
.196f28		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196f29		d0 f7		bne $196f22	                    BNE loop
.196f2b		28		plp		                    PLP
.196f2c		60		rts		                    RTS
.196f2d						ANSI_CUF
.196f2d		08		php		                    PHP
.196f2e		e2 20		sep #$20	                SEP #$20        ; set A short
.196f30		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196f32		d0 02		bne $196f36	                    BNE loop                        ; Move so long as not 0
.196f34		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.196f36		48		pha		loop                PHA                             ; Save the count
.196f37		22 15 72 19	jsl $197215	                    JSL ANSI_CSRRIGHT               ; Cursor right
.196f3b		68		pla		                    PLA                             ; Restore the count
.196f3c		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196f3d		d0 f7		bne $196f36	                    BNE loop
.196f3f		28		plp		                    PLP
.196f40		60		rts		                    RTS
.196f41						ANSI_CUB
.196f41		08		php		                    PHP
.196f42		e2 20		sep #$20	                SEP #$20        ; set A short
.196f44		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196f46		d0 02		bne $196f4a	                    BNE loop                        ; Move so long as not 0
.196f48		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.196f4a		48		pha		loop                PHA                             ; Save the count
.196f4b		22 40 72 19	jsl $197240	                    JSL ANSI_CSRLEFT                ; Cursor left
.196f4f		68		pla		                    PLA                             ; Restore the count
.196f50		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196f51		d0 f7		bne $196f4a	                    BNE loop
.196f53		28		plp		                    PLP
.196f54		60		rts		                    RTS
.196f55						ANSI_CUP
.196f55		08		php		                    PHP
.196f56		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196f58		a6 21		ldx $0341	                    LDX #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196f5a		d0 02		bne $196f5e	                    BNE get_row
.196f5c		a2 01		ldx #$01	                    LDX #1                          ; Default to 1
.196f5e		a4 22		ldy $0342	get_row             LDY #S_ANSI_VARS.ARG1,D         ; Get the second argument
.196f60		d0 02		bne $196f64	                    BNE adjust_coords
.196f62		a0 01		ldy #$01	                    LDY #1                          ; Default to 1
.196f64		ca		dex		adjust_coords       DEX                             ; Translate from base 1 to base 0 coordinates
.196f65		88		dey		                    DEY
.196f66		c2 30		rep #$30	                REP #$30        ; set A&X long
.196f68		22 9f 72 19	jsl $19729f	                    JSL ANSI_LOCATE                 ; Set the cursor position
.196f6c		28		plp		                    PLP
.196f6d		60		rts		                    RTS
.196f6e						ANSI_SET_MODE
.196f6e		08		php		                    PHP
.196f6f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196f71		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196f73		c9 19		cmp #$19	                    CMP #25
.196f75		d0 24		bne $196f9b	                    BNE chk_break
.196f77		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.196f7b		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.196f7d		d0 0c		bne $196f8b	                    BNE check_evid
.196f7f		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.196f83		09 01		ora #$01	                    ORA #Vky_Cursor_Enable
.196f85		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.196f89		80 1e		bra $196fa9	                    BRA done
.196f8b		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.196f8d		d0 1a		bne $196fa9	                    BNE done
.196f8f		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.196f93		09 01		ora #$01	                    ORA #EVID_Cursor_Enable
.196f95		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.196f99		80 0e		bra $196fa9	                    BRA done
.196f9b		c9 1c		cmp #$1c	chk_break           CMP #28
.196f9d		d0 0a		bne $196fa9	                    BNE done
.196f9f		22 56 77 19	jsl $197756	                    JSL KBD_GET_CONTROL
.196fa3		09 80		ora #$80	                    ORA #KBD_CTRL_BREAK
.196fa5		22 69 77 19	jsl $197769	                    JSL KBD_SET_CONTROL
.196fa9		28		plp		done                PLP
.196faa		60		rts		                    RTS
.196fab						ANSI_RESET_MODE
.196fab		08		php		                    PHP
.196fac		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196fae		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196fb0		c9 19		cmp #$19	                    CMP #25
.196fb2		d0 24		bne $196fd8	                    BNE chk_break
.196fb4		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.196fb8		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.196fba		d0 0c		bne $196fc8	                    BNE check_evid
.196fbc		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.196fc0		29 fe		and #$fe	                    AND #~Vky_Cursor_Enable
.196fc2		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.196fc6		80 1e		bra $196fe6	                    BRA done
.196fc8		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.196fca		d0 1a		bne $196fe6	                    BNE done
.196fcc		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.196fd0		29 fe		and #$fe	                    AND #~EVID_Cursor_Enable
.196fd2		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.196fd6		80 0e		bra $196fe6	                    BRA done
.196fd8		c9 1c		cmp #$1c	chk_break           CMP #28
.196fda		d0 0a		bne $196fe6	                    BNE done
.196fdc		22 56 77 19	jsl $197756	                    JSL KBD_GET_CONTROL
.196fe0		29 7f		and #$7f	                    AND #~KBD_CTRL_BREAK
.196fe2		22 69 77 19	jsl $197769	                    JSL KBD_SET_CONTROL
.196fe6		28		plp		done                PLP
.196fe7		60		rts		                    RTS
.196fe8						ANSI_SGR
.196fe8		08		php		                    PHP
.196fe9		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196feb		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196fed		d0 0d		bne $196ffc	                    BNE chk_1
.196fef		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR             ; 0 ==> Return to the default colors
.196ff1		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196ff3		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Switch off inversion
.196ff5		29 3f		and #$3f	                    AND #~(CONTROL_INVERT | CONTROL_BOLD)
.196ff7		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.196ff9		82 d6 00	brl $1970d2	                    BRL done
.196ffc		c9 01		cmp #$01	chk_1               CMP #1
.196ffe		d0 0f		bne $19700f	                    BNE chk_2
.197000		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Make the current color bold
.197002		09 80		ora #$80	                    ORA #$80
.197004		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197006		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be bold
.197008		09 40		ora #$40	                    ORA #CONTROL_BOLD
.19700a		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.19700c		82 c3 00	brl $1970d2	                    BRL done
.19700f		c9 02		cmp #$02	chk_2               CMP #2
.197011		f0 04		beq $197017	                    BEQ normal_intensity
.197013		c9 16		cmp #$16	chk_22              CMP #22
.197015		d0 0f		bne $197026	                    BNE chk_7
.197017		a5 12		lda $0332	normal_intensity    LDA #S_ANSI_VARS.CURCOLOR,D     ; 2 ==> Set the foreground to normal intensity
.197019		29 7f		and #$7f	                    AND #~$80
.19701b		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.19701d		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be normal
.19701f		29 bf		and #$bf	                    AND #~CONTROL_BOLD
.197021		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.197023		82 ac 00	brl $1970d2	                    BRL done
.197026		c9 07		cmp #$07	chk_7               CMP #7
.197028		d0 2c		bne $197056	                    BNE chk_27
.19702a		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors already inverted?
.19702c		89 80		bit #$80	                    BIT #CONTROL_INVERT
.19702e		f0 03		beq $197033	                    BEQ invert_on
.197030		82 9f 00	brl $1970d2	                    BRL done                        ; Yes: just finish
.197033		09 80		ora #$80	invert_on           ORA #CONTROL_INVERT             ; No: Mark that the colors are inverted
.197035		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.197037		a5 12		lda $0332	swap_colors         LDA #S_ANSI_VARS.CURCOLOR,D     ; Exchange the upper and lower nibbles
.197039		0a		asl a		                    ASL  A
.19703a		69 80		adc #$80	                    ADC  #$80
.19703c		2a		rol a		                    ROL  A
.19703d		0a		asl a		                    ASL  A
.19703e		69 80		adc #$80	                    ADC  #$80
.197040		2a		rol a		                    ROL  A
.197041		29 f7		and #$f7	                    AND #%11110111                  ; Make sure the background is not bolded
.197043		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197045		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.197047		89 40		bit #$40	                    BIT #CONTROL_BOLD
.197049		d0 03		bne $19704e	                    BNE bold_on
.19704b		82 84 00	brl $1970d2	                    BRL done                        ; No: we're done
.19704e		a5 12		lda $0332	bold_on             LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.197050		09 80		ora #$80	                    ORA #$80
.197052		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197054		80 7c		bra $1970d2	                    BRA done
.197056		c9 1b		cmp #$1b	chk_27              CMP #27
.197058		d0 0c		bne $197066	                    BNE chk_39
.19705a		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors inverted?
.19705c		89 80		bit #$80	                    BIT #CONTROL_INVERT
.19705e		f0 72		beq $1970d2	                    BEQ done                        ; No: just finish
.197060		29 7f		and #$7f	                    AND #~CONTROL_INVERT            ; Yes: Mark that the colors are back to normal
.197062		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.197064		80 d1		bra $197037	                    BRA swap_colors                 ; And go swap the colors
.197066		c9 27		cmp #$27	chk_39              CMP #39
.197068		d0 10		bne $19707a	                    BNE chk_49
.19706a		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.19706c		29 0f		and #$0f	                    AND #$0F
.19706e		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197070		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.197072		29 f0		and #$f0	                    AND #$F0
.197074		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.197076		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197078		80 58		bra $1970d2	                    BRA done
.19707a		c9 31		cmp #$31	chk_49              CMP #49
.19707c		d0 10		bne $19708e	                    BNE chk_foreground
.19707e		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.197080		29 f0		and #$f0	                    AND #$F0
.197082		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197084		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.197086		29 0f		and #$0f	                    AND #$0F
.197088		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.19708a		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.19708c		80 44		bra $1970d2	                    BRA done
.19708e		c9 1e		cmp #$1e	chk_foreground      CMP #30                         ; If [30..37], set the foreground color
.197090		90 29		bcc $1970bb	                    BLT chk_background
.197092		c9 26		cmp #$26	                    CMP #38
.197094		b0 25		bcs $1970bb	                    BGE chk_background
.197096		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.197098		29 0f		and #$0f	                    AND #$0F
.19709a		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.19709c		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.19709e		38		sec		                    SEC
.19709f		e9 1e		sbc #$1e	                    SBC #30
.1970a1		0a		asl a		                    ASL A
.1970a2		0a		asl a		                    ASL A
.1970a3		0a		asl a		                    ASL A
.1970a4		0a		asl a		                    ASL A
.1970a5		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.1970a7		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1970a9		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.1970ab		89 40		bit #$40	                    BIT #CONTROL_BOLD
.1970ad		d0 03		bne $1970b2	                    BNE bold_fore                   ; No: we're done
.1970af		82 20 00	brl $1970d2	                    BRL done
.1970b2		a5 12		lda $0332	bold_fore           LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.1970b4		09 80		ora #$80	                    ORA #$80
.1970b6		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1970b8		82 17 00	brl $1970d2	                    BRL done
.1970bb		c9 28		cmp #$28	chk_background      CMP #40                         ; If [40..47], set the background color
.1970bd		90 13		bcc $1970d2	                    BLT done
.1970bf		c9 30		cmp #$30	                    CMP #48
.1970c1		b0 0f		bcs $1970d2	                    BGE done
.1970c3		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.1970c5		29 f0		and #$f0	                    AND #$F0
.1970c7		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1970c9		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.1970cb		38		sec		                    SEC
.1970cc		e9 28		sbc #$28	                    SBC #40
.1970ce		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.1970d0		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1970d2		28		plp		done                PLP
.1970d3		60		rts		                    RTS
.1970d4						ANSI_ED
.1970d4		5a		phy		                    PHY
.1970d5		08		php		                    PHP
.1970d6		e2 20		sep #$20	                SEP #$20        ; set A short
.1970d8		c2 10		rep #$10	                REP #$10        ; set X long
.1970da		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.1970dc		d0 1b		bne $1970f9	                    BNE not_0                           ; Is the code 0?
.1970de						code_0
.1970de		c2 20		rep #$20	                REP #$20        ; set A long
.1970e0		38		sec		                    SEC                                 ; Calculate min index to erase
.1970e1		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.1970e3		e5 00		sbc $0320	                    SBC #S_ANSI_VARS.SCREENBEGIN,D
.1970e5		a8		tay		                    TAY
.1970e6		e2 20		sep #$20	                SEP #$20        ; set A short
.1970e8		a9 20		lda #$20	code_2_loop         LDA #' '
.1970ea		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.1970ec		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.1970ee		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.1970f0		c8		iny		                    INY
.1970f1		c0 00 20	cpy #$2000	                    CPY #$2000
.1970f4		d0 f2		bne $1970e8	                    BNE code_2_loop
.1970f6		82 35 00	brl $19712e	                    BRL done
.1970f9		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.1970fb		d0 18		bne $197115	                    BNE not_1
.1970fd						code_1
.1970fd		c2 20		rep #$20	                REP #$20        ; set A long
.1970ff		38		sec		                    SEC                                 ; Calculate max index to erase
.197100		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.197102		e5 00		sbc $0320	                    SBC #S_ANSI_VARS.SCREENBEGIN,D
.197104		a8		tay		                    TAY
.197105		e2 20		sep #$20	                SEP #$20        ; set A short
.197107		a9 20		lda #$20	code_1_loop         LDA #' '
.197109		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.19710b		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.19710d		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.19710f		88		dey		                    DEY                                 ; Move to the previous index
.197110		10 f5		bpl $197107	                    BPL code_1_loop                     ; And loop until we're done
.197112		82 19 00	brl $19712e	                    BRL done
.197115		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.197117		f0 04		beq $19711d	                    BEQ cls_all
.197119		c9 03		cmp #$03	                    CMP #3
.19711b		d0 11		bne $19712e	                    BNE done                            ; No: just ignore the sequence
.19711d		a0 00 00	ldy #$0000	cls_all             LDY #0                              ; Start with the cursor's position
.197120		a9 20		lda #$20	cls_all_loop        LDA #' '
.197122		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.197124		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.197126		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.197128		c8		iny		                    INY                                 ; Go to the next position
.197129		c0 00 20	cpy #$2000	                    CPY #$2000                          ; Have we reached the end?
.19712c		d0 f2		bne $197120	                    BNE cls_all_loop                    ; No: keep going
.19712e		28		plp		done                PLP
.19712f		7a		ply		                    PLY
.197130		60		rts		                    RTS
.197131						ANSI_EL
.197131		da		phx		                    PHX
.197132		5a		phy		                    PHY
.197133		08		php		                    PHP
.197134		c2 30		rep #$30	                REP #$30        ; set A&X long
.197136		38		sec		                    SEC
.197137		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D        ; Compute the address of the first character of the line
.197139		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.19713b		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.19713d		e2 20		sep #$20	                SEP #$20        ; set A short
.19713f		a5 02		lda $0322	                    LDA #S_ANSI_VARS.SCREENBEGIN+2,D    ; Get the bank of the screen
.197141		85 1b		sta $033b	                    STA #S_ANSI_VARS.TMPPTR1+2,D        ; And put it in the TMPPTR1
.197143		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.197145		d0 0e		bne $197155	                    BNE not_0                           ; Is the code 0?
.197147						code_0
.197147		a9 20		lda #$20	                    LDA #' '
.197149		a4 0e		ldy $032e	                    LDY #S_ANSI_VARS.CURSORX,D          ; Start at the cursor position
.19714b		97 19		sta [$0339],y	code_0_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.19714d		c8		iny		                    INY
.19714e		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.197150		d0 f9		bne $19714b	                    BNE code_0_loop                     ; No: keep looping
.197152		82 29 00	brl $19717e	                    BRL done
.197155		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.197157		d0 11		bne $19716a	                    BNE not_1
.197159						code_1
.197159		a9 20		lda #$20	                    LDA #' '
.19715b		a0 00 00	ldy #$0000	                    LDY #0
.19715e		97 19		sta [$0339],y	code_1_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.197160		c8		iny		                    INY
.197161		c4 0e		cpy $032e	                    CPY #S_ANSI_VARS.CURSORX,D          ; Have we reached the cursor?
.197163		d0 f9		bne $19715e	                    BNE code_1_loop                     ; No: keep looping
.197165		97 19		sta [$0339],y	                    STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; And clear under the cursor
.197167		82 14 00	brl $19717e	                    BRL done
.19716a		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.19716c		f0 04		beq $197172	                    BEQ code_2_3
.19716e		c9 03		cmp #$03	                    CMP #3
.197170		d0 0c		bne $19717e	                    BNE done                            ; No: just ignore the sequence
.197172						code_2_3
.197172		a9 20		lda #$20	                    LDA #' '
.197174		a0 00 00	ldy #$0000	                    LDY #0
.197177		97 19		sta [$0339],y	code_2_3_loop       STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.197179		c8		iny		                    INY
.19717a		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.19717c		d0 f9		bne $197177	                    BNE code_2_3_loop                   ; No: keep looping
.19717e		28		plp		done                PLP
.19717f		7a		ply		                    PLY
.197180		fa		plx		                    PLX
.197181		60		rts		                    RTS
.197182						ANSI_ICH
.197182		5a		phy		                    PHY
.197183		08		php		                    PHP
.197184		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197186		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.197188		f0 04		beq $19718e	                    BEQ default_1                       ; If 0, default to 1
.19718a		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.19718c		d0 04		bne $197192	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.19718e		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.197190		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.197192		38		sec		calc_src_dest       SEC
.197193		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D     ; TMPPTR1 := COLS_VISIBLE - CURSORX (destination index)
.197195		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.197197		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.197199		38		sec		                    SEC
.19719a		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D             ; TMPPTR1+1 := TMPPTR1 - n (source index)
.19719c		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D
.19719e		a4 1a		ldy $033a	insert_loop         LDY #S_ANSI_VARS.TMPPTR1+1,D        ; text[dest] := text[source]
.1971a0		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.1971a2		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.1971a4		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.1971a6		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D        ; color[dest] := color[source]
.1971a8		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.1971aa		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.1971ac		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.1971ae		c6 19		dec $0339	                    DEC #S_ANSI_VARS.TMPPTR1,D          ; Move to the previous position
.1971b0		c6 1a		dec $033a	                    DEC #S_ANSI_VARS.TMPPTR1+1,D
.1971b2		10 ea		bpl $19719e	                    BPL insert_loop                     ; Keep looping until we reach the end
.1971b4		a0 00		ldy #$00	                    LDY #0
.1971b6		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.1971b8		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.1971ba		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.1971bc		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.1971be		c8		iny		                    INY                                 ; Move to the next byte
.1971bf		c4 21		cpy $0341	                    CPY #S_ANSI_VARS.ARG0,D             ; Until we reach the end
.1971c1		d0 f3		bne $1971b6	                    BNE fill_loop
.1971c3		28		plp		                    PLP
.1971c4		7a		ply		                    PLY
.1971c5		60		rts		                    RTS
.1971c6						ANSI_DCH
.1971c6		5a		phy		                    PHY
.1971c7		08		php		                    PHP
.1971c8		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1971ca		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.1971cc		f0 04		beq $1971d2	                    BEQ default_1                       ; If 0, default to 1
.1971ce		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.1971d0		d0 04		bne $1971d6	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.1971d2		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.1971d4		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.1971d6		a9 00		lda #$00	calc_src_dest       LDA #0
.1971d8		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D        ; TMPPTR+1 := 0 (destination)
.1971da		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.1971dc		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D          ; TMPPTR+1 := n (source)
.1971de		38		sec		                    SEC                                 ; Calculate end offset
.1971df		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D
.1971e1		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.1971e3		85 22		sta $0342	                    STA #S_ANSI_VARS.ARG1,D
.1971e5		a4 19		ldy $0339	del_loop            LDY #S_ANSI_VARS.TMPPTR1,D          ; text[dest] := text[source]
.1971e7		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.1971e9		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.1971eb		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.1971ed		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D          ; color[dest] := color[source]
.1971ef		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.1971f1		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.1971f3		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.1971f5		e6 19		inc $0339	                    INC #S_ANSI_VARS.TMPPTR1,D          ; Move to the next position
.1971f7		e6 1a		inc $033a	                    INC #S_ANSI_VARS.TMPPTR1+1,D
.1971f9		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.1971fb		c5 22		cmp $0342	                    CMP #S_ANSI_VARS.ARG1,D
.1971fd		90 e6		bcc $1971e5	                    BLT del_loop                        ; Keep looping until we reach the end
.1971ff		38		sec		                    SEC                                 ; Calculate the starting point to fill with blanks
.197200		a5 1a		lda $033a	                    LDA #S_ANSI_VARS.TMPPTR1+1,D
.197202		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D
.197204		a8		tay		                    TAY
.197205		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.197207		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.197209		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.19720b		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.19720d		c8		iny		                    INY                                 ; Move to the next byte
.19720e		c4 22		cpy $0342	                    CPY #S_ANSI_VARS.ARG1,D             ; Until we reach the end
.197210		90 f3		bcc $197205	                    BLT fill_loop
.197212		28		plp		                    PLP
.197213		7a		ply		                    PLY
.197214		60		rts		                    RTS
.197215						ANSI_CSRRIGHT
.197215		da		phx		                    PHX
.197216		5a		phy		                    PHY
.197217		0b		phd		                    PHD
.197218		08		php		                    PHP
.197219		c2 30		rep #$30	                REP #$30        ; set A&X long
.19721b		22 30 6d 19	jsl $196d30	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.19721f		b0 1a		bcs $19723b	                    BCS done                            ; If invalid, just return
.197221		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the new column
.197223		e8		inx		                    INX
.197224		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the current row
.197226		e4 03		cpx $0323	                    CPX #S_ANSI_VARS.COLS_VISIBLE,D     ; Are we off screen?
.197228		90 0d		bcc $197237	                    BCC nowrap                          ; No: just set the position
.19722a		a2 00 00	ldx #$0000	                    LDX #0                              ; Yes: move to the first column
.19722d		c8		iny		                    INY                                 ; And move to the next row
.19722e		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Are we still off screen?
.197230		90 05		bcc $197237	                    BCC nowrap                          ; No: just set the position
.197232		88		dey		                    DEY                                 ; Yes: lock to the last row
.197233		22 03 73 19	jsl $197303	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.197237		22 9f 72 19	jsl $19729f	nowrap              JSL ANSI_LOCATE                     ; Set the cursor position
.19723b		28		plp		done                PLP
.19723c		2b		pld		                    PLD
.19723d		7a		ply		                    PLY
.19723e		fa		plx		                    PLX
.19723f		6b		rtl		                    RTL
.197240						ANSI_CSRLEFT
.197240		da		phx		                    PHX
.197241		5a		phy		                    PHY
.197242		0b		phd		                    PHD
.197243		08		php		                    PHP
.197244		c2 30		rep #$30	                REP #$30        ; set A&X long
.197246		22 30 6d 19	jsl $196d30	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.19724a		b0 0d		bcs $197259	                    BCS done                    ; If invalid, just return
.19724c		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D  ; Check that we are not already @ Zero
.19724e		f0 09		beq $197259	                    BEQ done                    ; If so, just ignore this call
.197250		ca		dex		                    DEX
.197251		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.197253		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.197255		22 9f 72 19	jsl $19729f	                    JSL ANSI_LOCATE
.197259		28		plp		done                PLP
.19725a		2b		pld		                    PLD
.19725b		7a		ply		                    PLY
.19725c		fa		plx		                    PLX
.19725d		6b		rtl		                    RTL
.19725e						ANSI_CSRUP
.19725e		da		phx		                    PHX
.19725f		5a		phy		                    PHY
.197260		0b		phd		                    PHD
.197261		08		php		                    PHP
.197262		c2 30		rep #$30	                REP #$30        ; set A&X long
.197264		22 30 6d 19	jsl $196d30	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.197268		b0 0d		bcs $197277	                    BCS done                    ; If invalid, just return
.19726a		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D  ; Check if we are not already @ Zero
.19726c		f0 09		beq $197277	                    BEQ done                    ; If we are, just ignore the call
.19726e		88		dey		                    DEY
.19726f		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.197271		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D
.197273		22 9f 72 19	jsl $19729f	                    JSL ANSI_LOCATE
.197277		28		plp		done                PLP
.197278		2b		pld		                    PLD
.197279		7a		ply		                    PLY
.19727a		fa		plx		                    PLX
.19727b		6b		rtl		                    RTL
.19727c						ANSI_CSRDOWN
.19727c		da		phx		                    PHX
.19727d		5a		phy		                    PHY
.19727e		0b		phd		                    PHD
.19727f		08		php		                    PHP
.197280		c2 30		rep #$30	                REP #$30        ; set A&X long
.197282		22 30 6d 19	jsl $196d30	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.197286		b0 12		bcs $19729a	                    BCS done                            ; If invalid, just return
.197288		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the current column
.19728a		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the new row
.19728c		c8		iny		                    INY
.19728d		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Check to see if we're off screen
.19728f		90 05		bcc $197296	                    BCC noscroll                        ; No: go ahead and set the position
.197291		88		dey		                    DEY                                 ; Yes: go back to the last row
.197292		22 03 73 19	jsl $197303	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.197296		22 9f 72 19	jsl $19729f	noscroll            JSL ANSI_LOCATE                     ; And set the cursor position
.19729a		28		plp		done                PLP
.19729b		2b		pld		                    PLD
.19729c		7a		ply		                    PLY
.19729d		fa		plx		                    PLX
.19729e		6b		rtl		                    RTL
.19729f						ANSI_LOCATE
.19729f		da		phx		                    PHX
.1972a0		5a		phy		                    PHY
.1972a1		0b		phd		                    PHD
.1972a2		08		php		                    PHP
.1972a3		22 30 6d 19	jsl $196d30	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.1972a7		b0 55		bcs $1972fe	                    BCS done                    ; If invalid, just return
.1972a9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1972ab						locate_scroll
.1972ab		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D
.1972ad		90 07		bcc $1972b6	                    BCC locate_scrolldone
.1972af		22 03 73 19	jsl $197303	                    JSL ANSI_SCROLLUP
.1972b3		88		dey		                    DEY
.1972b4		80 f5		bra $1972ab	                    BRA locate_scroll
.1972b6						locate_scrolldone
.1972b6		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.1972b8		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.1972ba		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.1972bc						locate_row
.1972bc		c0 00 00	cpy #$0000	                    CPY #$0
.1972bf		f0 08		beq $1972c9	                    BEQ locate_right
.1972c1		18		clc		locate_down         CLC
.1972c2		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.1972c4		88		dey		                    DEY
.1972c5		f0 02		beq $1972c9	                    BEQ locate_right
.1972c7		80 f8		bra $1972c1	                    BRA locate_down
.1972c9		18		clc		locate_right        CLC
.1972ca		65 0e		adc $032e	                    ADC #S_ANSI_VARS.CURSORX,D      ; move the cursor right X columns
.1972cc		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D
.1972ce		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.1972d0		e2 20		sep #$20	                SEP #$20        ; set A short
.1972d2		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT
.1972d6		c9 04		cmp #$04	                    CMP #CHAN_EVID
.1972d8		f0 0e		beq $1972e8	                    beq locate_evid
.1972da		c2 20		rep #$20	                REP #$20        ; set A long
.1972dc		98		tya		                    TYA
.1972dd		8f 16 00 af	sta $af0016	                    STA @l VKY_TXT_CURSOR_Y_REG_L
.1972e1		8a		txa		                    TXA
.1972e2		8f 14 00 af	sta $af0014	                    STA @l VKY_TXT_CURSOR_X_REG_L
.1972e6		80 0c		bra $1972f4	                    BRA update_colorpos
.1972e8						locate_evid
.1972e8		c2 20		rep #$20	                REP #$20        ; set A long
.1972ea		98		tya		                    TYA
.1972eb		8f 16 1e ae	sta $ae1e16	                    STA @l EVID_TXT_CURSOR_Y_REG_L
.1972ef		8a		txa		                    TXA
.1972f0		8f 14 1e ae	sta $ae1e14	                    STA @l EVID_TXT_CURSOR_X_REG_L
.1972f4						update_colorpos
.1972f4		c2 20		rep #$20	                REP #$20        ; set A long
.1972f6		18		clc		                    CLC
.1972f7		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.1972f9		69 00 20	adc #$2000	                    ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.1972fc		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D
.1972fe		28		plp		done                PLP
.1972ff		2b		pld		                    PLD
.197300		7a		ply		                    PLY
.197301		fa		plx		                    PLX
.197302		6b		rtl		                    RTL
.197303						ANSI_SCROLLUP
.197303		da		phx		                    PHX
.197304		5a		phy		                    PHY
.197305		8b		phb		                    PHB
.197306		0b		phd		                    PHD
.197307		08		php		                    PHP
.197308		22 30 6d 19	jsl $196d30	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.19730c		90 03		bcc $197311	                    BCC calc_size
.19730e		82 81 00	brl $197392	                    BRL done                    ; If invalid, just return
.197311						calc_size
.197311		c2 30		rep #$30	                REP #$30        ; set A&X long
.197313		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.197315		8f 00 01 00	sta $000100	                    STA @l UNSIGNED_MULT_A_LO
.197319		a5 07		lda $0327	                    LDA #S_ANSI_VARS.LINES_VISIBLE,D
.19731b		8f 02 01 00	sta $000102	                    STA @l UNSIGNED_MULT_B_LO
.19731f		af 04 01 00	lda $000104	                    LDA @l UNSIGNED_MULT_AL_LO
.197323		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.197325		18		clc		                    CLC
.197326		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.197328		a8		tay		                    TAY
.197329		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.19732b		aa		tax		                    TAX
.19732c		e2 20		sep #$20	                SEP #$20        ; set A short
.19732e		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID
.197332		c9 04		cmp #$04	                    CMP #CHAN_EVID
.197334		f0 09		beq $19733f	                    BEQ move_text_1                             ; Yes: do the move on the EVID memory
.197336						move_text_0
.197336		c2 20		rep #$20	                REP #$20        ; set A long
.197338		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.19733a		54 af af	mvn $af,$af	                    MVN `CS_TEXT_MEM_PTR,`CS_TEXT_MEM_PTR       ; Move the data on the main screen
.19733d		80 07		bra $197346	                    BRA scroll_color
.19733f						move_text_1
.19733f		c2 20		rep #$20	                REP #$20        ; set A long
.197341		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.197343		54 ae ae	mvn $ae,$ae	                    MVN `EVID_TEXT_MEM,`EVID_TEXT_MEM           ; Move the data on the EVID screen
.197346						scroll_color
.197346		c2 30		rep #$30	                REP #$30        ; set A&X long
.197348		18		clc		                    CLC
.197349		a5 16		lda $0336	                    LDA #S_ANSI_VARS.COLORBEGIN,D
.19734b		a8		tay		                    TAY
.19734c		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.19734e		aa		tax		                    TAX
.19734f		e2 20		sep #$20	                SEP #$20        ; set A short
.197351		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID?
.197355		c9 04		cmp #$04	                    CMP #CHAN_EVID
.197357		f0 09		beq $197362	                    BEQ move_color_1                            ; Yes: scroll the EVID color matrix
.197359						move_color_0
.197359		c2 20		rep #$20	                REP #$20        ; set A long
.19735b		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.19735d		54 af af	mvn $af,$af	                    MVN `CS_COLOR_MEM_PTR,`CS_COLOR_MEM_PTR     ; Move the data on the main screen
.197360		80 07		bra $197369	                    BRA vicky_lastline
.197362						move_color_1
.197362		c2 20		rep #$20	                REP #$20        ; set A long
.197364		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.197366		54 ae ae	mvn $ae,$ae	                    MVN `EVID_COLOR_MEM,`EVID_COLOR_MEM         ; Move the data on the EVID screen
.197369						vicky_lastline
.197369		c2 20		rep #$20	                REP #$20        ; set A long
.19736b		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.19736d		48		pha		                    PHA
.19736e		18		clc		                    CLC
.19736f		65 00		adc $0320	                    ADC #S_ANSI_VARS.SCREENBEGIN,D
.197371		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.197373		a0 00 00	ldy #$0000	start_clear         LDY #0
.197376		a9 20 00	lda #$0020	                    LDA #' '
.197379		97 19		sta [$0339],y	clr_text            STA [#S_ANSI_VARS.TMPPTR1,D],Y
.19737b		c8		iny		                    INY
.19737c		c4 0f		cpy $032f	                    CPY #COLS_VISIBLE,D
.19737e		d0 f9		bne $197379	                    BNE clr_text
.197380		68		pla		vicky_lastcolor     PLA
.197381		18		clc		                    CLC
.197382		65 16		adc $0336	                    ADC #S_ANSI_VARS.COLORBEGIN,D
.197384		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.197386		a0 00 00	ldy #$0000	start_color         LDY #0
.197389		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.19738b		97 19		sta [$0339],y	clr_color           STA [#S_ANSI_VARS.TMPPTR1,D],Y
.19738d		c8		iny		                    INY
.19738e		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D
.197390		d0 f9		bne $19738b	                    BNE clr_color
.197392		28		plp		done                PLP
.197393		2b		pld		                    PLD
.197394		ab		plb		                    PLB
.197395		7a		ply		                    PLY
.197396		fa		plx		                    PLX
.197397		6b		rtl		                    RTL
.197398						ANSI_CLRSCREEN
.197398		da		phx		                    PHX
.197399		5a		phy		                    PHY
.19739a		0b		phd		                    PHD
.19739b		08		php		                    PHP
.19739c		22 30 6d 19	jsl $196d30	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.1973a0		b0 1e		bcs $1973c0	                    BCS done                            ; If invalid, just return
.1973a2		e2 20		sep #$20	                SEP #$20        ; set A short
.1973a4		c2 10		rep #$10	                REP #$10        ; set X long
.1973a6		a0 00 00	ldy #$0000	                    LDY #0
.1973a9		a9 20		lda #$20	                    LDA #$20		                    ; Fill the Entire Screen with Space
.1973ab		97 00		sta [$0320],y	iclearloop0	        STA [#S_ANSI_VARS.SCREENBEGIN,D],Y
.1973ad		c8		iny		                    INY
.1973ae		c0 00 20	cpy #$2000	                    CPY #$2000
.1973b1		d0 f8		bne $1973ab	                    BNE iclearloop0
.1973b3		a0 00 00	ldy #$0000	                    LDY	#0
.1973b6		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D         ; Fill the current color
.1973b8		97 16		sta [$0336],y	evid_clearloop1     STA [#S_ANSI_VARS.COLORBEGIN,D],Y
.1973ba		c8		iny		                    INY
.1973bb		c0 00 20	cpy #$2000	                    CPY #$2000
.1973be		d0 f8		bne $1973b8	                    BNE evid_clearloop1
.1973c0		28		plp		done                PLP
.1973c1		2b		pld		                    PLD
.1973c2		7a		ply		                    PLY
.1973c3		fa		plx		                    PLX
.1973c4		6b		rtl		                    RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/kbd_driver.asm

=16						KBD_INBUF_SIZE = 16         ; Number of scan codes that can be buffered
=0						KBD_STATE_IDLE = 0          ; Keyboard is IDLE
=1						KBD_STATE_E0 = 1            ; Keyboard has sent E0
=2						KBD_STATE_E02A = 2          ; Keyboard has sent E0 2A (leading to Print Screen E02AE037)
=3						KBD_STATE_E02AE0 = 3
=4						KBD_STATE_E1 = 4            ; Keyboard has sent E1 (leading to Pause/Break)
=5						KBD_STATE_E11D = 5
=6						KBD_STATE_E11D45 = 6
=7						KBD_STATE_E11D45E1 = 7
=8						KBD_STATE_E11D45E19D = 8
=9						KBD_STATE_E0B7 = 9          ; Keyboard has sent E0 B7 (leading to break of Print Screen E0 B7 E0 AA)
=10						KBD_STATE_E0B7E0 = 10
=0						KBD_ACTION_IGNORE = 0       ; State machine action: do nothing with the current byte
=1						KBD_ACTION_EMIT_BASE = 1    ; State machine action: translate scancode from base table and emit it
=2						KBD_ACTION_EMIT_E0 = 2      ; State machine action: translate scancode from E0 prefix table and emit it
=$01						KBD_STAT_OBF = $01          ; Keyboard status: Output Buffer is Full
=$02						KBD_STAT_IBF = $02          ; Keyboard status: Input Buffer is Full
=$a7						KBD_CTRL_CMD_DISABLE2 = $A7 ; Keyboard controller command: disable output device #2
=$a9						KBD_CTRL_CMD_ENABLE2 = $A9  ; Keyboard controller command: enable output device #2
=$aa						KBD_CTRL_CMD_SELFTEST = $AA ; Keyboard controller command: start self test
=$ab						KBD_CTRL_CMD_KBDTEST = $AB  ; Keyboard controller command: start keyboard test
=$ad						KBD_CTRL_CMD_DISABLE1 = $AD ; Keyboard controller command: disable output device #1
=$ae						KBD_CTRL_CMD_ENABLE1 = $AE  ; Keyboard controller command: enable output device #1
=$60						KBD_CTRL_CMD_WRITECMD = $60 ; Keyboard controller command: write to the command register
=$ff						KBD_CMD_RESET = $FF         ; Keyboard command: reset the keyboard
=$f4						KBD_CMD_ENABLE = $F4        ; Keyboard command: enable to keyboard
=$ed						KBD_CMD_SET_LED = $ED       ; Keyboard command: set the LEDs
=$55						KBD_RESP_OK = $55           ; Keyboard response: Command was OK
=$fa						KBD_RESP_ACK = $FA          ; Keyboard response: command acknowledged
=$01						KBD_LOCK_SCROLL = $01       ; LED/lock mask for Scroll Lock key
=$02						KBD_LOCK_NUMBER = $02       ; LED/lock mask for Num Lock key
=$04						KBD_LOCK_CAPS = $04         ; LED/lock mask for Caps Lock key
=$01						KBD_MOD_LSHIFT  = %00000001     ; Left shift is pressed
=$02						KBD_MOD_RSHIFT  = %00000010     ; Right shift is pressed
=$04						KBD_MOD_LCTRL   = %00000100     ; Left CTRL is pressed
=$08						KBD_MOD_RCTRL   = %00001000     ; Right CTRL is pressed
=$10						KBD_MOD_LALT    = %00010000     ; Left ALT is pressed
=$20						KBD_MOD_RALT    = %00100000     ; Right ALT is pressed
=$40						KBD_MOD_OS      = %01000000     ; OS key (e.g. Windows Key) is pressed
=$80						KBD_MOD_MENU    = %10000000     ; Menu key is pressed
=$80						KBD_CTRL_BREAK      = %10000000 ; CONTROL Flag to indicate if keyboard should capture BREAK
=$40						KBD_CTRL_MONITOR    = %01000000 ; CONTROL Flag to indicate if keyboard should trap ALT-BREAK to go to the monitor
=$80						KBD_STAT_BREAK  = %10000000     ; STATUS flag, BREAK has been pressed recently
=$01						KBD_STAT_SCAN   = %00000001     ; STATUS flag to indicate if there are scan codes in the queue
=$02						KBD_STAT_CHAR   = %00000010     ; STATUS flag to indicate if there are characters in the queue
=$61						KBD_SC_BREAK = $61              ; Scan code for the PAUSE/BREAK key
=$3a						KBD_SC_CAPSLOCK = $3A           ; Scan code for the CAPS lock key
=$45						KBD_SC_NUMLOCK = $45            ; Scan code for the NUM lock key
=$46						KBD_SC_SCROLL = $46             ; Scan code for the SCROLL lock key
=$2a						KBD_SC_LSHIFT = $2A             ; Scan code for the left SHIFT key
=$1d						KBD_SC_LCTRL = $1D              ; Scan code for the left CTLR key
=$38						KBD_SC_LALT = $38               ; Scan code for the left ALT key
=$36						KBD_SC_RSHIFT = $36             ; Scan code for the right SHIFT key
=$5e						KBD_SC_RCTRL = $5E              ; Scan code for the right CTRL key
=$5c						KBD_SC_RALT = $5C               ; Scan code for the right ALT key
=$38						KBD_SC_PIVOT = $38              ; Scan code we will use as a pivot for checking NUM lock
.0000						S_KBD_CONTROL
>0000						STATE               .byte ?                     ; The state of the keyboard controller state machine
>0001						CONTROL             .byte ?                     ; Control register
>0002						STATUS              .byte ?                     ; Status register
>0003						SC_BUF              .fill KBD_INBUF_SIZE        ; Buffer for keyboard scancodes read
>0013						SC_HEAD             .byte ?                     ; Index of the first scancode cell to write to
>0014						CHAR_BUF            .fill KBD_INBUF_SIZE        ; Character buffer
>0024						CHAR_HEAD           .byte ?                     ; Number of characters in the character buffer
>0025						MODIFIERS           .byte ?                     ; State of the modifier keys
>0026						LOCKS               .byte ?                     ; State of the lock keys: Caps, Num, Scroll
>0027						TBL_UNMOD           .dword ?                    ; Pointer to the scan code translation table for unmodified keys
>002b						TBL_SHIFT           .dword ?                    ; Pointer to the scan code translation table for shifted keys
>002f						TBL_CTRL            .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL
>0033						TBL_LOCK            .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
>0037						TBL_LOCK_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
>003b						TBL_CTRL_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL and SHIFT
.1973c5						IINITKEYBOARD
.1973c5		da		phx		                    PHX
.1973c6		5a		phy		                    PHY
.1973c7		0b		phd		                    PHD
.1973c8		08		php		                    PHP
.1973c9		48		pha		                PHA             ; begin setdp macro
.1973ca		08		php		                PHP
.1973cb		c2 20		rep #$20	                REP #$20        ; set A long
.1973cd		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1973d0		5b		tcd		                TCD
.1973d1		28		plp		                PLP
.1973d2		68		pla		                PLA             ; end setdp macro
.1973d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1973d5		c2 10		rep #$10	                REP #$10        ; set X long
.1973d7		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1                        ; Disable the keyboard interrupts while we get things started
.1973db		09 01		ora #$01	                    ORA #FNX1_INT00_KBD
.1973dd		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.1973e1		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                         ; Set the state machine to the starting IDLE state
.1973e3		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.1973e5		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D                ; Mark the scancode buffer as empty
.1973e7		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D              ; Mark the character buffer as empty
.1973e9		64 25		stz $0f25	                    STZ #S_KBD_CONTROL.MODIFIERS,D              ; Default to modifiers being off
.1973eb		64 02		stz $0f02	                    STZ #S_KBD_CONTROL.STATUS,D                 ; Clear the status register
.1973ed		a9 80		lda #$80	                    LDA #KBD_CTRL_BREAK                         ; Enable BREAK processing
.1973ef		85 01		sta $0f01	                    STA #S_KBD_CONTROL.CONTROL,D
.1973f1		c2 20		rep #$20	                REP #$20        ; set A long
.1973f3		a9 00 7c	lda #$7c00	                    LDA #<>SC_US_UNMOD
.1973f6		85 27		sta $0f27	                    STA #S_KBD_CONTROL.TBL_UNMOD,D
.1973f8		a9 80 7c	lda #$7c80	                    LDA #<>SC_US_SHFT
.1973fb		85 2b		sta $0f2b	                    STA #S_KBD_CONTROL.TBL_SHIFT,D
.1973fd		a9 00 7d	lda #$7d00	                    LDA #<>SC_US_CTRL
.197400		85 2f		sta $0f2f	                    STA #S_KBD_CONTROL.TBL_CTRL,D
.197402		a9 80 7d	lda #$7d80	                    LDA #<>SC_US_LOCK
.197405		85 33		sta $0f33	                    STA #S_KBD_CONTROL.TBL_LOCK,D
.197407		a9 00 7e	lda #$7e00	                    LDA #<>SC_US_LOCK_SHFT
.19740a		85 37		sta $0f37	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.19740c		a9 80 7e	lda #$7e80	                    LDA #<>SC_US_CTRL_SHFT
.19740f		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.197411		e2 20		sep #$20	                SEP #$20        ; set A short
.197413		a9 19		lda #$19	                    LDA #`SC_US_UNMOD
.197415		85 29		sta $0f29	                    STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.197417		a9 19		lda #$19	                    LDA #`SC_US_SHFT
.197419		85 2d		sta $0f2d	                    STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.19741b		a9 19		lda #$19	                    LDA #`SC_US_CTRL
.19741d		85 31		sta $0f31	                    STA #S_KBD_CONTROL.TBL_CTRL+2,D
.19741f		a9 19		lda #$19	                    LDA #`SC_US_LOCK
.197421		85 35		sta $0f35	                    STA #S_KBD_CONTROL.TBL_LOCK+2,D
.197423		a9 19		lda #$19	                    LDA #`SC_US_LOCK_SHFT
.197425		85 39		sta $0f39	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.197427		a9 19		lda #$19	                    LDA #`SC_US_CTRL_SHFT
.197429		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.19742b		a9 ad		lda #$ad	                    LDA #KBD_CTRL_CMD_DISABLE1  ; Disable the keyboard sending data
.19742d		22 b1 74 19	jsl $1974b1	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.197431		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.197435		af 03 18 af	lda $af1803	flush_output        LDA @l KBD_DATA_BUF         ; We just throw that away
.197439		a9 aa		lda #$aa	                    LDA #KBD_CTRL_CMD_SELFTEST  ; Send the self test command
.19743b		22 bc 74 19	jsl $1974bc	                    JSL KBD_CTRL_SND_CMD
.19743f		c9 55		cmp #$55	                    CMP #KBD_RESP_OK            ; Did we get an OK?
.197441		f0 05		beq $197448	                    BEQ test_AB
.197443		a9 02		lda #$02	                    LDA #2                      ; Return error #2
.197445		82 59 00	brl $1974a1	                    BRL done
.197448		a9 ab		lda #$ab	test_AB             LDA #KBD_CTRL_CMD_KBDTEST   ; Send the keyboard test command
.19744a		22 bc 74 19	jsl $1974bc	                    JSL KBD_CTRL_SND_CMD
.19744e		c9 00		cmp #$00	                    CMP #0                      ; Did we get a good response?
.197450		f0 05		beq $197457	                    BEQ write_command
.197452		a9 03		lda #$03	                    LDA #3                      ; Return error #3
.197454		82 4a 00	brl $1974a1	                    BRL done
.197457		a9 60		lda #$60	write_command       LDA #KBD_CTRL_CMD_WRITECMD
.197459		a2 43 00	ldx #$0043	                    LDX #%01000011              ; Translate to set 1, no interrupts
.19745c		22 16 75 19	jsl $197516	                    JSL KBD_CTRL_SND_CMD_P
.197460		a9 ae		lda #$ae	enable_dev1         LDA #KBD_CTRL_CMD_ENABLE1   ; Re-enable the keyboard sending data
.197462		22 b1 74 19	jsl $1974b1	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.197466		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.19746a		a9 ff		lda #$ff	reset_kbd           LDA #KBD_CMD_RESET          ; Send a reset command to the keyboard
.19746c		a2 ff ff	ldx #$ffff	                    LDX #$FFFF                  ; And wait a while for it to complete the reset
.19746f		22 cd 74 19	jsl $1974cd	                    JSL KBD_SND_CMD
.197473		a0 80 00	ldy #$0080	                    LDY #128                    ; Attemp enabling the keyboard 128 times
.197476		a9 f4		lda #$f4	enable_loop         LDA #KBD_CMD_ENABLE         ; Try to enable the keyboard
.197478		a2 00 00	ldx #$0000	                    LDX #0
.19747b		22 cd 74 19	jsl $1974cd	                    JSL KBD_SND_CMD
.19747f		a9 36		lda #$36	set_led             LDA #"6"
.197481		22 18 10 00	jsl $001018	                    JSL PUTC
.197485		a9 00		lda #$00	                    LDA #0                      ; Set the state of the locks
.197487		22 43 77 19	jsl $197743	                    JSL KBD_SETLOCKS
.19748b		af 41 01 00	lda $000141	                    LDA @l INT_PENDING_REG1     ; Read the Pending Register &
.19748f		29 01		and #$01	                    AND #FNX1_INT00_KBD
.197491		8f 41 01 00	sta $000141	                    STA @l INT_PENDING_REG1     ; Writing it back will clear the Active Bit
.197495		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.197499		29 fe		and #$fe	                    AND #~FNX1_INT00_KBD
.19749b		8f 4d 01 00	sta $00014d	                    STA @l INT_MASK_REG1
.19749f		a9 00		lda #$00	return_0            LDA #0                      ; Return status code for success
.1974a1		28		plp		done                PLP
.1974a2		2b		pld		                    PLD
.1974a3		7a		ply		                    PLY
.1974a4		fa		plx		                    PLX
.1974a5		6b		rtl		                    RTL
.1974a6						KBD_WAIT_OUT
.1974a6		48		pha		                    PHA
.1974a7		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.1974ab		89 01		bit #$01	                    BIT #KBD_STAT_OBF       ; Check to see if the output buffer is full
.1974ad		f0 f8		beq $1974a7	                    BEQ wait                ; If it isn't, keep waiting
.1974af		68		pla		                    PLA
.1974b0		6b		rtl		                    RTL
.1974b1						KBD_WAIT_IN
.1974b1		48		pha		                    PHA
.1974b2		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.1974b6		89 02		bit #$02	                    BIT #KBD_STAT_IBF       ; Check to see if the input buffer has data
.1974b8		d0 f8		bne $1974b2	                    BNE wait                ; If not, wait for it to have something
.1974ba		68		pla		                    PLA
.1974bb		6b		rtl		                    RTL
.1974bc						KBD_CTRL_SND_CMD
.1974bc		22 b1 74 19	jsl $1974b1	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.1974c0		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.1974c4		22 a6 74 19	jsl $1974a6	                    JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.1974c8		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.1974cc		6b		rtl		                    RTL
.1974cd						KBD_SND_CMD
.1974cd		22 b1 74 19	jsl $1974b1	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.1974d1		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.1974d5		c2 10		rep #$10	                REP #$10        ; set X long
.1974d7		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.1974da		f0 0b		beq $1974e7	                    BEQ get_response        ; If 0, check for a response
.1974dc		ca		dex		                    DEX                     ; Count down
.1974dd		ea		nop		                    NOP                     ; And do a delay
.1974de		ea		nop		                    NOP
.1974df		ea		nop		                    NOP
.1974e0		ea		nop		                    NOP
.1974e1		ea		nop		                    NOP
.1974e2		ea		nop		                    NOP
.1974e3		ea		nop		                    NOP
.1974e4		ea		nop		                    NOP
.1974e5		80 f0		bra $1974d7	                    BRA delay
.1974e7		22 a6 74 19	jsl $1974a6	get_response        JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.1974eb		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.1974ef		6b		rtl		                    RTL
.1974f0						KBD_SND_CMD_P
.1974f0		22 b1 74 19	jsl $1974b1	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.1974f4		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.1974f8		8a		txa		                    TXA                     ; Send the parameter to the keyboard
.1974f9		c2 10		rep #$10	                REP #$10        ; set X long
.1974fb		a2 e8 03	ldx #$03e8	                    LDX #1000
.1974fe		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.197501		f0 0a		beq $19750d	                    BEQ send_data           ; If 0, check for a response
.197503		ca		dex		                    DEX                     ; Count down
.197504		ea		nop		                    NOP                     ; And do a delay
.197505		ea		nop		                    NOP
.197506		ea		nop		                    NOP
.197507		ea		nop		                    NOP
.197508		ea		nop		                    NOP
.197509		ea		nop		                    NOP
.19750a		ea		nop		                    NOP
.19750b		80 f1		bra $1974fe	                    BRA delay
.19750d		22 b1 74 19	jsl $1974b1	send_data           JSL KBD_WAIT_IN
.197511		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.197515						get_response
.197515		6b		rtl		                    RTL
.197516						KBD_CTRL_SND_CMD_P
.197516		22 b1 74 19	jsl $1974b1	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.19751a		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.19751e		8a		txa		                    TXA
.19751f		22 b1 74 19	jsl $1974b1	                    JSL KBD_WAIT_IN         ; Send the parameter to the controller
.197523		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.197527		6b		rtl		                    RTL
.197528						KBD_PROCESS_BYTE
.197528		8b		phb		                    PHB
.197529		0b		phd		                    PHD
.19752a		08		php		                    PHP
.19752b		48		pha		                PHA             ; begin setdbr macro
.19752c		08		php		                PHP
.19752d		e2 20		sep #$20	                SEP #$20        ; set A short
.19752f		a9 19		lda #$19	                LDA #`KBD_STATE_MACH
.197531		48		pha		                PHA
.197532		ab		plb		                PLB
.197533		28		plp		                PLP
.197534		68		pla		                PLA             ; end setdbr macro
.197535		48		pha		                PHA             ; begin setdp macro
.197536		08		php		                PHP
.197537		c2 20		rep #$20	                REP #$20        ; set A long
.197539		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.19753c		5b		tcd		                TCD
.19753d		28		plp		                PLP
.19753e		68		pla		                PLA             ; end setdp macro
.19753f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197541		a9 00		lda #$00	                    LDA #0
.197543		8f e0 00 00	sta $0000e0	                    STA @l MOUSE_IDX                    ; A bit of a hack to try to stabilize the mouse
.197547		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF                 ; Get the current scancode byte
.19754b		d0 03		bne $197550	                    BNE save_scancode
.19754d		82 67 00	brl $1975b7	                    BRL done                            ; If it's 0, just ignore it
.197550						LOCALS
>0001						l_break             .byte ?                             ; The make/break bit of the scancode
>0002						l_code              .byte ?                             ; The scancode
.197550		48		pha		save_scancode       PHA
.197551		48		pha		                    PHA
.197552		29 80		and #$80	                    AND #$80
.197554		83 01		sta $01,s	                    STA l_break                         ; Save the make/break bit
.197556		a2 00		ldx #$00	                    LDX #0                              ; Start from the beginning
.197558		bf 00 7b 19	lda $197b00,x	chk_transition      LDA @l KBD_STATE_MACH,X             ; Get the tranition's start state
.19755c		c9 ff		cmp #$ff	                    CMP #$FF
.19755e		d0 03		bne $197563	                    BNE compare_state
.197560		82 54 00	brl $1975b7	                    BRL done                            ; If $FF: we've reached the end... this is an error... just ignore it?
.197563		c5 00		cmp $0f00	compare_state       CMP #S_KBD_CONTROL.STATE,D          ; Compare it to the current state
.197565		d0 0e		bne $197575	                    BNE next_transition                 ; If they don't match, go to the next transition
.197567		bf 01 7b 19	lda $197b01,x	                    LDA @l KBD_STATE_MACH+1,X           ; Get the tranition's test byte
.19756b		f0 0e		beq $19757b	                    BEQ apply                           ; Is it 0? Yes: the default applies
.19756d		a3 02		lda $02,s	                    LDA l_code                          ; Otherwise: get the scan code back
.19756f		df 01 7b 19	cmp $197b01,x	                    CMP @l KBD_STATE_MACH+1,X           ; Compare it to the transition's test byte
.197573		f0 06		beq $19757b	                    BEQ apply                           ; If equal: this matches, apply the transition
.197575		e8		inx		next_transition     INX                                 ; Move to the next transition
.197576		e8		inx		                    INX
.197577		e8		inx		                    INX
.197578		e8		inx		                    INX
.197579		80 dd		bra $197558	                    BRA chk_transition                  ; Check to see if the next transition applies
.19757b		bf 02 7b 19	lda $197b02,x	apply               LDA @l KBD_STATE_MACH+2,X           ; Get the tranition's destination state
.19757f		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D          ; And save it as our new state
.197581		bf 03 7b 19	lda $197b03,x	                    LDA @l KBD_STATE_MACH+3,X           ; Get the tranition's action
.197585		c9 00		cmp #$00	                    CMP #KBD_ACTION_IGNORE              ; Is it IGNORE?
.197587		f0 2e		beq $1975b7	                    BEQ done                            ; Yes: we're done for now
.197589		c9 01		cmp #$01	                    CMP #KBD_ACTION_EMIT_BASE           ; Is it EMIT_BASE?
.19758b		f0 06		beq $197593	                    BEQ emit_base                       ; Yes: emit the translation of the base byte
.19758d		c9 02		cmp #$02	                    CMP #KBD_ACTION_EMIT_E0             ; Is it EMIT_E0?
.19758f		f0 0f		beq $1975a0	                    BEQ emit_e0                         ; Yes: emit the translation of the E0 prefixed byte
.197591		80 18		bra $1975ab	                    BRA emit_A                          ; Otherwise: just emit the action byte as the new scan code
.197593		a3 02		lda $02,s	emit_base           LDA l_code
.197595		29 7f		and #$7f	                    AND #$7F                            ; Strip off the make/break bit
.197597		aa		tax		                    TAX
.197598		bf 00 7a 19	lda $197a00,x	                    LDA @l TBL_SET1,X                   ; Get the translation of the base scan code
.19759c		03 01		ora $01,s	                    ORA l_break                         ; Add the make/break bit back
.19759e		80 0b		bra $1975ab	                    BRA emit_A                          ; Emit the translation
.1975a0		a3 02		lda $02,s	emit_e0             LDA l_code
.1975a2		29 7f		and #$7f	                    AND #$7F                            ; Strip off any make/break bit
.1975a4		aa		tax		                    TAX
.1975a5		bf 80 7a 19	lda $197a80,x	                    LDA @l TBL_SET1_E0,X                ; Get the translation of the E0 prefixed scan code
.1975a9		03 01		ora $01,s	                    ORA l_break                         ; Add in the make/break flag
.1975ab		c9 00		cmp #$00	emit_A              CMP #0                              ; Is the code NUL?
.1975ad		f0 08		beq $1975b7	                    BEQ done                            ; If so, skip enqueuing it
.1975af		22 bf 75 19	jsl $1975bf	enqueue             JSL KBD_SC_ENQUEUE                  ; Enqueue the scancode
.1975b3		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                 ; Set the state machine to the initial state
.1975b5		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.1975b7						done
.1975b7		e2 20		sep #$20	                SEP #$20        ; set A short
.1975b9		68		pla		                    PLA                                 ; Clean the scan code byte from the stack
.1975ba		68		pla		                    PLA
.1975bb		28		plp		                    PLP
.1975bc		2b		pld		                    PLD
.1975bd		ab		plb		                    PLB
.1975be		6b		rtl		                    RTL
.1975bf						KBD_SC_ENQUEUE
.1975bf		0b		phd		                    PHD
.1975c0		08		php		                    PHP
.1975c1		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.1975c2		48		pha		                PHA             ; begin setdp macro
.1975c3		08		php		                PHP
.1975c4		c2 20		rep #$20	                REP #$20        ; set A long
.1975c6		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1975c9		5b		tcd		                TCD
.1975ca		28		plp		                PLP
.1975cb		68		pla		                PLA             ; end setdp macro
.1975cc		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1975ce		c9 00		cmp #$00	                    CMP #0                          ; Is the scan code a NUL?
.1975d0		f0 2f		beq $197601	                    BEQ done                        ; Yes: just ignore
.1975d2		c9 61		cmp #$61	                    CMP #KBD_SC_BREAK               ; Is it the BREAK key?
.1975d4		d0 10		bne $1975e6	                    BNE chk_locks                   ; No: check the various lock keys
.1975d6		a5 01		lda $0f01	                    LDA #S_KBD_CONTROL.CONTROL,D
.1975d8		89 80		bit #$80	                    BIT #KBD_CTRL_BREAK                 ; Are we processing BREAK?
.1975da		f0 08		beq $1975e4	                    BEQ enqueue_break                   ; No: enqueue it as normal
.1975dc		a9 80		lda #$80	                    LDA #KBD_STAT_BREAK                 ; Yes: turn on the BREAK bit
.1975de		05 02		ora $0f02	                    ORA #S_KBD_CONTROL.STATUS,D
.1975e0		85 02		sta $0f02	                    STA #S_KBD_CONTROL.STATUS,D
.1975e2		80 1d		bra $197601	                    BRA done                            ; And we're done
.1975e4		a9 61		lda #$61	enqueue_break       LDA #KBD_SC_BREAK
.1975e6		c9 3a		cmp #$3a	chk_locks           CMP #KBD_SC_CAPSLOCK            ; Is it the CAPS lock?
.1975e8		f0 1a		beq $197604	                    BEQ toggle_caps                 ; Yes: toggle the CAPS lock bits
.1975ea		c9 45		cmp #$45	                    CMP #KBD_SC_NUMLOCK             ; Is it the NUM lock?
.1975ec		f0 20		beq $19760e	                    BEQ toggle_num                  ; Yes: toggle the NUM lock bits
.1975ee		c9 46		cmp #$46	                    CMP #KBD_SC_SCROLL              ; Is it the SCROLL lock?
.1975f0		f0 22		beq $197614	                    BEQ toggle_scroll               ; Yes: toggle the SCROLL lock bits
.1975f2		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.1975f4		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.1975f6		f0 09		beq $197601	                    BEQ done                        ; Yes: we're full... ignore the scancode
.1975f8		95 03		sta $0f03,x	                    STA #S_KBD_CONTROL.SC_BUF,D,X   ; No: we have room, write the scan code to the buffer
.1975fa		e8		inx		                    INX                             ; Advance to the next location
.1975fb		86 13		stx $0f13	                    STX #S_KBD_CONTROL.SC_HEAD,D
.1975fd		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Set the KBD_STAT_SCAN bit
.1975ff		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.197601		28		plp		done                PLP
.197602		2b		pld		                    PLD
.197603		6b		rtl		                    RTL
.197604		a5 26		lda $0f26	toggle_caps         LDA #S_KBD_CONTROL.LOCKS,D
.197606		49 04		eor #$04	                    EOR #KBD_LOCK_CAPS              ; Toggle the CAPS lock
.197608		22 43 77 19	jsl $197743	save_locks          JSL KBD_SETLOCKS                ; Set the locks
.19760c		80 f3		bra $197601	                    BRA done
.19760e		a5 26		lda $0f26	toggle_num          LDA #S_KBD_CONTROL.LOCKS,D
.197610		49 02		eor #$02	                    EOR #KBD_LOCK_NUMBER            ; Toggle the NUM lock
.197612		80 f4		bra $197608	                    BRA save_locks
.197614		a5 26		lda $0f26	toggle_scroll       LDA #S_KBD_CONTROL.LOCKS,D
.197616		49 01		eor #$01	                    EOR #KBD_LOCK_SCROLL            ; Toggle the SCROLL lock
.197618		80 ee		bra $197608	                    BRA save_locks
.19761a						KBD_CHAR_ENQUEUE
.19761a		0b		phd		                    PHD
.19761b		08		php		                    PHP
.19761c		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.19761d		48		pha		                PHA             ; begin setdp macro
.19761e		08		php		                PHP
.19761f		c2 20		rep #$20	                REP #$20        ; set A long
.197621		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197624		5b		tcd		                TCD
.197625		28		plp		                PLP
.197626		68		pla		                PLA             ; end setdp macro
.197627		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197629		c9 00		cmp #$00	                    CMP #0                          ; Is the character a NUL?
.19762b		f0 0f		beq $19763c	                    BEQ done                        ; Yes: just ignore
.19762d		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D  ; Get the index of the next free spot
.19762f		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.197631		f0 09		beq $19763c	                    BEQ done                        ; Yes: we're full... ignore the scancode
.197633		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X ; No: we have room, write the scan code to the buffer
.197635		e8		inx		                    INX                             ; Advance to the next location
.197636		86 24		stx $0f24	                    STX #S_KBD_CONTROL.CHAR_HEAD,D
.197638		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR              ; Set the KBD_STAT_CHAR bit
.19763a		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.19763c		28		plp		done                PLP
.19763d		2b		pld		                    PLD
.19763e		6b		rtl		                    RTL
.19763f						KBD_CHAR_DEQUEUE
.19763f		da		phx		                    PHX
.197640		0b		phd		                    PHD
.197641		08		php		                    PHP
.197642		48		pha		                PHA             ; begin setdp macro
.197643		08		php		                PHP
.197644		c2 20		rep #$20	                REP #$20        ; set A long
.197646		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197649		5b		tcd		                TCD
.19764a		28		plp		                PLP
.19764b		68		pla		                PLA             ; end setdp macro
.19764c		78		sei		                    SEI                                 ; Disable IRQ for the duration of this routine to avoid race conditions
.19764d		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19764f		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; Get the index of the next free spot
.197651		f0 21		beq $197674	                    BEQ return_empty                    ; If it's 0, we have no data
.197653		a5 14		lda $0f14	                    LDA #S_KBD_CONTROL.CHAR_BUF,D       ; Get the character at the head of the queue
.197655		48		pha		                    PHA                                 ; Save it
.197656		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; How many bytes were there?
.197658		e0 01		cpx #$01	                    CPX #1                              ; Is it one?
.19765a		d0 08		bne $197664	                    BNE copy_down                       ; No: we need to copy down the remaining bytes
.19765c		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D      ; Yes: mark that we have no data in the queue now
.19765e		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR                  ; Clear the KBD_STAT_CHAR bit
.197660		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.197662		80 0d		bra $197671	                    BRA return_head                     ; And return the character we found
.197664		a2 00		ldx #$00	copy_down           LDX #0                              ; Starting at the beginning of the buffer...
.197666		b5 15		lda $0f15,x	loop                LDA #S_KBD_CONTROL.CHAR_BUF+1,D,X   ; Get the next byte
.197668		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X     ; Move it down
.19766a		e8		inx		                    INX                                 ; And move to the next byte
.19766b		e4 24		cpx $0f24	                    CPX #S_KBD_CONTROL.CHAR_HEAD,D      ; Have we reached the end?
.19766d		d0 f7		bne $197666	                    BNE loop                            ; No: keep copying bytes
.19766f		c6 24		dec $0f24	                    DEC #S_KBD_CONTROL.CHAR_HEAD,D      ; Decrement the index
.197671		68		pla		return_head         PLA                                 ; Get the character back
.197672		80 02		bra $197676	                    BRA done                            ; And return it
.197674		a9 00		lda #$00	return_empty        LDA #0                              ; Return: 0 for no character
.197676		28		plp		done                PLP
.197677		2b		pld		                    PLD
.197678		fa		plx		                    PLX
.197679		6b		rtl		                    RTL
.19767a						KBD_GET_SCANCODE
.19767a		da		phx		                    PHX
.19767b		0b		phd		                    PHD
.19767c		08		php		                    PHP
.19767d		48		pha		                PHA             ; begin setdp macro
.19767e		08		php		                PHP
.19767f		c2 20		rep #$20	                REP #$20        ; set A long
.197681		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197684		5b		tcd		                TCD
.197685		28		plp		                PLP
.197686		68		pla		                PLA             ; end setdp macro
.197687		78		sei		                    SEI                             ; Disable IRQ for the duration of this routine to avoid race conditions
.197688		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19768a		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.19768c		f0 21		beq $1976af	                    BEQ return_empty                ; If it's 0, we have no data
.19768e		a5 03		lda $0f03	                    LDA #S_KBD_CONTROL.SC_BUF,D     ; Get the scan code at the head of the queue
.197690		48		pha		                    PHA                             ; Save it
.197691		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; How many bytes were there?
.197693		e0 01		cpx #$01	                    CPX #1                          ; Is it one?
.197695		d0 08		bne $19769f	                    BNE copy_down                   ; No: we need to copy down the remaining bytes
.197697		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D    ; Yes: mark that we have no data in the queue now
.197699		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Clear the KBD_STAT_SCAN bit
.19769b		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.19769d		80 0d		bra $1976ac	                    BRA return_head                 ; And return the scan code we found
.19769f		a2 00		ldx #$00	copy_down           LDX #0                          ; Starting at the beginning of the buffer...
.1976a1		b5 04		lda $0f04,x	loop                LDA #S_KBD_CONTROL.SC_BUF+1,D,X ; Get the next byte
.1976a3		85 03		sta $0f03	                    STA #S_KBD_CONTROL.SC_BUF,D     ; Move it down
.1976a5		e8		inx		                    INX                             ; And move to the next byte
.1976a6		e4 13		cpx $0f13	                    CPX #S_KBD_CONTROL.SC_HEAD,D    ; Have we reached the end?
.1976a8		d0 f7		bne $1976a1	                    BNE loop                        ; No: keep copying bytes
.1976aa		c6 13		dec $0f13	                    DEC #S_KBD_CONTROL.SC_HEAD,D    ; Reduce the index to the next free byte
.1976ac		68		pla		return_head         PLA                             ; Get the scan code back
.1976ad		80 02		bra $1976b1	                    BRA done                        ; And return it
.1976af		a9 00		lda #$00	return_empty        LDA #0                          ; Return: 0 for no scan code
.1976b1		28		plp		done                PLP
.1976b2		2b		pld		                    PLD
.1976b3		fa		plx		                    PLX
.1976b4		6b		rtl		                    RTL
.1976b5						KBD_GETMODS
.1976b5		0b		phd		                PHD
.1976b6		08		php		                PHP
.1976b7		48		pha		                PHA             ; begin setdp macro
.1976b8		08		php		                PHP
.1976b9		c2 20		rep #$20	                REP #$20        ; set A long
.1976bb		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1976be		5b		tcd		                TCD
.1976bf		28		plp		                PLP
.1976c0		68		pla		                PLA             ; end setdp macro
.1976c1		e2 20		sep #$20	                SEP #$20        ; set A short
.1976c3		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.1976c5		28		plp		                PLP
.1976c6		2b		pld		                PLD
.1976c7		6b		rtl		                RTL
.1976c8						KBD_GET_STAT
.1976c8		0b		phd		                PHD
.1976c9		08		php		                PHP
.1976ca		48		pha		                PHA             ; begin setdp macro
.1976cb		08		php		                PHP
.1976cc		c2 20		rep #$20	                REP #$20        ; set A long
.1976ce		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1976d1		5b		tcd		                TCD
.1976d2		28		plp		                PLP
.1976d3		68		pla		                PLA             ; end setdp macro
.1976d4		e2 20		sep #$20	                SEP #$20        ; set A short
.1976d6		a5 02		lda $0f02	                LDA #S_KBD_CONTROL.STATUS,D
.1976d8		28		plp		                PLP
.1976d9		2b		pld		                PLD
.1976da		6b		rtl		                RTL
.1976db						KBD_TEST_BREAK
.1976db		0b		phd		                PHD
.1976dc		08		php		                PHP
.1976dd		48		pha		                PHA             ; begin setdp macro
.1976de		08		php		                PHP
.1976df		c2 20		rep #$20	                REP #$20        ; set A long
.1976e1		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1976e4		5b		tcd		                TCD
.1976e5		28		plp		                PLP
.1976e6		68		pla		                PLA             ; end setdp macro
.1976e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1976e9		a9 80		lda #$80	                LDA #KBD_STAT_BREAK             ; Check the BREAK bit in STATUS
.1976eb		14 02		trb $0f02	                TRB #S_KBD_CONTROL.STATUS,D     ; ... and clear it
.1976ed		d0 04		bne $1976f3	                BNE ret_true                    ; If it was set, return TRUE
.1976ef		28		plp		ret_false       PLP                             ; Otherwise, return false
.1976f0		2b		pld		                PLD
.1976f1		18		clc		                CLC
.1976f2		6b		rtl		                RTL
.1976f3		28		plp		ret_true        PLP
.1976f4		2b		pld		                PLD
.1976f5		38		sec		                SEC
.1976f6		6b		rtl		                RTL
.1976f7						KBD_GETMODS_ANSI
.1976f7		0b		phd		                    PHD
.1976f8		08		php		                    PHP
.1976f9		48		pha		                PHA             ; begin setdp macro
.1976fa		08		php		                PHP
.1976fb		c2 20		rep #$20	                REP #$20        ; set A long
.1976fd		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197700		5b		tcd		                TCD
.197701		28		plp		                PLP
.197702		68		pla		                PLA             ; end setdp macro
.197703		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197705		a9 00		lda #$00	                    LDA #0                      ; Make space for the result code
.197707		48		pha		                    PHA
>0001						l_result            .byte ?
.197708		a5 25		lda $0f25	                    LDA #S_KBD_CONTROL.MODIFIERS,D
.19770a		89 03		bit #$03	                    BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT
.19770c		f0 06		beq $197714	                    BEQ check_alt
.19770e		a3 01		lda $01,s	                    LDA l_result
.197710		09 02		ora #$02	                    ORA #%00000010
.197712		83 01		sta $01,s	                    STA l_result
.197714		a5 25		lda $0f25	check_alt           LDA #S_KBD_CONTROL.MODIFIERS,D
.197716		89 30		bit #$30	                    BIT #KBD_MOD_LALT | KBD_MOD_RALT
.197718		f0 06		beq $197720	                    BEQ check_ctrl
.19771a		a3 01		lda $01,s	                    LDA l_result
.19771c		09 04		ora #$04	                    ORA #%00000100
.19771e		83 01		sta $01,s	                    STA l_result
.197720		a5 25		lda $0f25	check_ctrl          LDA #S_KBD_CONTROL.MODIFIERS,D
.197722		89 0c		bit #$0c	                    BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL
.197724		f0 06		beq $19772c	                    BEQ return_result
.197726		a3 01		lda $01,s	                    LDA l_result
.197728		09 08		ora #$08	                    ORA #%00001000
.19772a		83 01		sta $01,s	                    STA l_result
.19772c		68		pla		return_result       PLA
.19772d		28		plp		                    PLP
.19772e		2b		pld		                    PLD
.19772f		6b		rtl		                    RTL
.197730						KBD_GETLOCKS
.197730		0b		phd		                PHD
.197731		08		php		                PHP
.197732		48		pha		                PHA             ; begin setdp macro
.197733		08		php		                PHP
.197734		c2 20		rep #$20	                REP #$20        ; set A long
.197736		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197739		5b		tcd		                TCD
.19773a		28		plp		                PLP
.19773b		68		pla		                PLA             ; end setdp macro
.19773c		e2 20		sep #$20	                SEP #$20        ; set A short
.19773e		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D
.197740		28		plp		                PLP
.197741		2b		pld		                PLD
.197742		6b		rtl		                RTL
.197743						KBD_SETLOCKS
.197743		0b		phd		                PHD
.197744		08		php		                PHP
.197745		48		pha		                PHA             ; begin setdp macro
.197746		08		php		                PHP
.197747		c2 20		rep #$20	                REP #$20        ; set A long
.197749		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.19774c		5b		tcd		                TCD
.19774d		28		plp		                PLP
.19774e		68		pla		                PLA             ; end setdp macro
.19774f		e2 20		sep #$20	                SEP #$20        ; set A short
.197751		85 26		sta $0f26	                STA #S_KBD_CONTROL.LOCKS,D
.197753		28		plp		                PLP
.197754		2b		pld		                PLD
.197755		6b		rtl		                RTL
.197756						KBD_GET_CONTROL
.197756		0b		phd		                PHD
.197757		08		php		                PHP
.197758		48		pha		                PHA             ; begin setdp macro
.197759		08		php		                PHP
.19775a		c2 20		rep #$20	                REP #$20        ; set A long
.19775c		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.19775f		5b		tcd		                TCD
.197760		28		plp		                PLP
.197761		68		pla		                PLA             ; end setdp macro
.197762		e2 20		sep #$20	                SEP #$20        ; set A short
.197764		a5 01		lda $0f01	                LDA #S_KBD_CONTROL.CONTROL,D
.197766		28		plp		                PLP
.197767		2b		pld		                PLD
.197768		6b		rtl		                RTL
.197769						KBD_SET_CONTROL
.197769		0b		phd		                PHD
.19776a		08		php		                PHP
.19776b		48		pha		                PHA             ; begin setdp macro
.19776c		08		php		                PHP
.19776d		c2 20		rep #$20	                REP #$20        ; set A long
.19776f		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197772		5b		tcd		                TCD
.197773		28		plp		                PLP
.197774		68		pla		                PLA             ; end setdp macro
.197775		e2 20		sep #$20	                SEP #$20        ; set A short
.197777		85 01		sta $0f01	                STA #S_KBD_CONTROL.CONTROL,D
.197779		28		plp		                PLP
.19777a		2b		pld		                PLD
.19777b		6b		rtl		                RTL
.19777c						KBD_GETCW
.19777c		22 88 77 19	jsl $197788	                JSL KBD_GETC
.197780		c9 00		cmp #$00	                CMP #0
.197782		f0 01		beq $197785	                BEQ wait
.197784		6b		rtl		                RTL
.197785		cb		wai		wait            WAI
.197786		80 f4		bra $19777c	                BRA KBD_GETCW
.197788						KBD_GETC
.197788		0b		phd		                PHD
.197789		08		php		                PHP
.19778a		48		pha		                PHA             ; begin setdp macro
.19778b		08		php		                PHP
.19778c		c2 20		rep #$20	                REP #$20        ; set A long
.19778e		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197791		5b		tcd		                TCD
.197792		28		plp		                PLP
.197793		68		pla		                PLA             ; end setdp macro
.197794		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197796		22 3f 76 19	jsl $19763f	                JSL KBD_CHAR_DEQUEUE        ; Try to fetch a character from the character queue
.19779a		c9 00		cmp #$00	                CMP #0                      ; Did we get anything back?
.19779c		f0 03		beq $1977a1	                BEQ get_scancode            ; No: try to get a scan code
.19779e		82 cb 00	brl $19786c	                BRL done                    ; Yes: return the character we had queued
.1977a1		22 7a 76 19	jsl $19767a	get_scancode    JSL KBD_GET_SCANCODE        ; Fetch the next scancode
.1977a5		c9 00		cmp #$00	                CMP #0                      ; Is it NUL?
.1977a7		d0 04		bne $1977ad	                BNE chk_make_break
.1977a9		28		plp		                PLP                         ; Yes: return 0... we got nothin
.1977aa		38		sec		                SEC
.1977ab		2b		pld		                PLD
.1977ac		6b		rtl		                RTL
.1977ad		89 80		bit #$80	chk_make_break  BIT #$80                    ; Is it a break scan code?
.1977af		d0 08		bne $1977b9	                BNE handle_break            ; Yes: process the break
.1977b1		c9 2a		cmp #$2a	handle_make     CMP #KBD_SC_LSHIFT          ; Is it a make LSHIFT?
.1977b3		d0 0c		bne $1977c1	                BNE not_make_ls
.1977b5		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.1977b7		80 4e		bra $197807	                BRA set_modifier
.1977b9		c9 aa		cmp #$aa	handle_break    CMP #KBD_SC_LSHIFT | $80    ; Is it a break LSHIFT?
.1977bb		d0 0c		bne $1977c9	                BNE not_break_ls
.1977bd		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.1977bf		80 50		bra $197811	                BRA clr_modifier
.1977c1		c9 1d		cmp #$1d	not_make_ls     CMP #KBD_SC_LCTRL           ; Is it a make LCTRL?
.1977c3		d0 0c		bne $1977d1	                BNE not_make_lc
.1977c5		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.1977c7		80 3e		bra $197807	                BRA set_modifier
.1977c9		c9 9d		cmp #$9d	not_break_ls    CMP #KBD_SC_LCTRL | $80     ; Is it a break LCTRL?
.1977cb		d0 0c		bne $1977d9	                BNE not_break_lc
.1977cd		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.1977cf		80 40		bra $197811	                BRA clr_modifier
.1977d1		c9 38		cmp #$38	not_make_lc     CMP #KBD_SC_LALT            ; Is it a make LALT?
.1977d3		d0 0c		bne $1977e1	                BNE not_make_la
.1977d5		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.1977d7		80 2e		bra $197807	                BRA set_modifier
.1977d9		c9 b8		cmp #$b8	not_break_lc    CMP #KBD_SC_LALT | $80      ; Is it a break LALT?
.1977db		d0 0c		bne $1977e9	                BNE not_break_la
.1977dd		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.1977df		80 30		bra $197811	                BRA clr_modifier
.1977e1		c9 36		cmp #$36	not_make_la     CMP #KBD_SC_RSHIFT          ; Is it a make RSHIFT?
.1977e3		d0 0c		bne $1977f1	                BNE not_make_rs
.1977e5		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.1977e7		80 1e		bra $197807	                BRA set_modifier
.1977e9		c9 b6		cmp #$b6	not_break_la    CMP #KBD_SC_RSHIFT | $80    ; Is it a break RSHIFT?
.1977eb		d0 0c		bne $1977f9	                BNE not_break_rs
.1977ed		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.1977ef		80 20		bra $197811	                BRA clr_modifier
.1977f1		c9 5e		cmp #$5e	not_make_rs     CMP #KBD_SC_RCTRL           ; Is it a make RCTRL?
.1977f3		d0 0c		bne $197801	                BNE not_make_rc
.1977f5		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.1977f7		80 0e		bra $197807	                BRA set_modifier
.1977f9		c9 de		cmp #$de	not_break_rs    CMP #KBD_SC_RCTRL | $80     ; Is it a break RCTRL?
.1977fb		d0 0e		bne $19780b	                BNE not_break_rc
.1977fd		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.1977ff		80 10		bra $197811	                BRA clr_modifier
.197801		c9 5c		cmp #$5c	not_make_rc     CMP #KBD_SC_RALT            ; Is it a make RALT?
.197803		d0 12		bne $197817	                BNE not_make_ra
.197805		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.197807		04 25		tsb $0f25	set_modifier    TSB #S_KBD_CONTROL.MODIFIERS,D  ; Set the indicated modifier bit
.197809		80 08		bra $197813	                BRA return_null
.19780b		c9 dc		cmp #$dc	not_break_rc    CMP #KBD_SC_RALT | $80          ; Is it a break RALT?
.19780d		d0 04		bne $197813	                BNE return_null                 ; No: we don't use any other break scan codes
.19780f		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.197811		14 25		trb $0f25	clr_modifier    TRB #S_KBD_CONTROL.MODIFIERS,D  ; Clear the indicated modifier bit
.197813		a9 00		lda #$00	return_null     LDA #0
.197815		80 55		bra $19786c	                BRA done
.197817		a8		tay		not_make_ra     TAY                                     ; Use the scan code as an index...
.197818		c9 38		cmp #$38	                CMP #KBD_SC_PIVOT
.19781a		90 0e		bcc $19782a	                BLT below_38
.19781c		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D              ; Check the NUM lock
.19781e		89 02		bit #$02	                BIT #KBD_LOCK_NUMBER
.197820		f0 2a		beq $19784c	                BEQ fetch_unmod                         ; No: translate the keys as unmodified
.197822		a5 25		lda $0f25	chk_num_shift   LDA #S_KBD_CONTROL.MODIFIERS,D
.197824		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Check for a shift key being pressed
.197826		d0 24		bne $19784c	                BNE fetch_unmod                         ; If so: translate the keys as modified
.197828		80 30		bra $19785a	                BRA fetch_caps                          ; No: translate the key using the lock table
.19782a		a5 25		lda $0f25	below_38        LDA #S_KBD_CONTROL.MODIFIERS,D
.19782c		89 0c		bit #$0c	                BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL      ; Is either control key pressed?
.19782e		f0 0c		beq $19783c	                BEQ chk_capslock                        ; No: check for capslock
.197830		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.197832		f0 04		beq $197838	                BEQ fetch_control                       ; No: translate just based off of control
.197834		b7 3b		lda [$0f3b],y	                LDA [#S_KBD_CONTROL.TBL_CTRL_SHIFT,D],Y ; Look up the key modfified by CTRL and SHIFT
.197836		80 26		bra $19785e	                BRA chk_ansi
.197838		b7 2f		lda [$0f2f],y	fetch_control   LDA [#S_KBD_CONTROL.TBL_CTRL,D],Y       ; Look up the key modified by CONTROL
.19783a		80 22		bra $19785e	                BRA chk_ansi
.19783c		a5 26		lda $0f26	chk_capslock    LDA #S_KBD_CONTROL.LOCKS,D              ; Check the CAPS lock
.19783e		89 04		bit #$04	                BIT #KBD_LOCK_CAPS
.197840		d0 0e		bne $197850	                BNE chk_caps_shift                      ; Yes: check the state of the SHIFT key
.197842		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.197844		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.197846		f0 04		beq $19784c	                BEQ fetch_unmod                         ; No: translate just based off of control
.197848		b7 2b		lda [$0f2b],y	fetch_shifted   LDA [#S_KBD_CONTROL.TBL_SHIFT,D],Y      ; Look up the key modified by SHIFT
.19784a		80 12		bra $19785e	                BRA chk_ansi
.19784c		b7 27		lda [$0f27],y	fetch_unmod     LDA [#S_KBD_CONTROL.TBL_UNMOD,D],Y      ; Look up the unmodified key
.19784e		80 0e		bra $19785e	                BRA chk_ansi
.197850		a5 25		lda $0f25	chk_caps_shift  LDA #S_KBD_CONTROL.MODIFIERS,D
.197852		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.197854		f0 04		beq $19785a	                BEQ fetch_caps                          ; No: translate just based off of control
.197856		b7 37		lda [$0f37],y	                LDA [#S_KBD_CONTROL.TBL_LOCK_SHIFT,D],Y ; Look up the key modified by CAPS and SHIFT
.197858		80 04		bra $19785e	                BRA chk_ansi
.19785a		b7 33		lda [$0f33],y	fetch_caps      LDA [#S_KBD_CONTROL.TBL_LOCK,D],Y       ; Look up the key modified by CAPSLOCK
.19785c		80 00		bra $19785e	                BRA chk_ansi
.19785e		c9 80		cmp #$80	chk_ansi        CMP #$80                                ; Check to see if we have an ANSI escape sequence to send
.197860		90 0a		bcc $19786c	                BLT done                                ; If not, just return the character
.197862		c9 96		cmp #$96	                CMP #$96
.197864		b0 06		bcs $19786c	                BGE done
.197866		22 a8 78 19	jsl $1978a8	                JSL KBD_ENQ_ANSI                        ; Expand and enqueue the ANSI sequence
.19786a		a9 1b		lda #$1b	                LDA #CHAR_ESC                           ; And return the ESC key to start the sequence
.19786c		28		plp		done            PLP
.19786d		2b		pld		                PLD
.19786e		18		clc		                CLC
.19786f		6b		rtl		                RTL
.197870						KBD_ENQUEUE_BCD
.197870		08		php		                PHP
.197871		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197873		48		pha		                PHA                     ; Save the value
.197874		4a		lsr a		                LSR A                   ; Get the 10s digit
.197875		4a		lsr a		                LSR A
.197876		4a		lsr a		                LSR A
.197877		4a		lsr a		                LSR A
.197878		c9 00		cmp #$00	                CMP #0                  ; If it's 0, move to the 1s digit
.19787a		f0 0b		beq $197887	                BEQ enqueue_1
.19787c		c9 0a		cmp #$0a	                CMP #$0A                ; If it's out of range, ignore this whole call
.19787e		b0 13		bcs $197893	                BGE done_A
.197880		18		clc		                CLC                     ; Enqueue the tens digit
.197881		69 30		adc #$30	                ADC #'0'
.197883		22 1a 76 19	jsl $19761a	                JSL KBD_CHAR_ENQUEUE
.197887		68		pla		enqueue_1       PLA                     ; Enqueue the ones digit
.197888		29 0f		and #$0f	                AND #$0F
.19788a		18		clc		                CLC
.19788b		69 30		adc #$30	                ADC #'0'
.19788d		22 1a 76 19	jsl $19761a	                JSL KBD_CHAR_ENQUEUE
.197891		28		plp		done            PLP
.197892		6b		rtl		                RTL
.197893		68		pla		done_A          PLA
.197894		80 fb		bra $197891	                BRA done
.197896						KBD_BIN_TO_BCD
.197896		da		phx		                PHX
.197897		08		php		                PHP
.197898		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19789a		aa		tax		                TAX
.19789b		a9 99		lda #$99	                LDA #$99                ; Start with -1 in BCD form
.19789d		f8		sed		                SED                     ; Switch to Decimal arithmetic
.19789e		18		clc		loop            CLC
.19789f		69 01		adc #$01	                ADC #1                  ; Add 1 with BCD arithmetic
.1978a1		ca		dex		                DEX                     ; Decrement input value in X
.1978a2		10 fa		bpl $19789e	                BPL loop                ; loop until input value < 0
.1978a4		d8		cld		                CLD                     ; Switch back to Binary arithmetic
.1978a5		28		plp		                PLP
.1978a6		fa		plx		                PLX
.1978a7		6b		rtl		                RTL
.1978a8						KBD_ENQ_ANSI
.1978a8		08		php		                PHP
.1978a9		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1978ab		c9 80		cmp #$80	                CMP #$80                        ; check to make sure the code is within range
.1978ad		b0 03		bcs $1978b2	                BGE chk_high_end
.1978af		82 4a 00	brl $1978fc	                BRL done                        ; Out of range, just ignore it
.1978b2		c9 96		cmp #$96	chk_high_end    CMP #$96
.1978b4		90 03		bcc $1978b9	                BLT save_value
.1978b6		82 43 00	brl $1978fc	                BRL done                        ; Out of range, just ignore it
.1978b9		48		pha		save_value      PHA
.1978ba		a9 5b		lda #$5b	                LDA #'['
.1978bc		22 1a 76 19	jsl $19761a	                JSL KBD_CHAR_ENQUEUE
.1978c0		68		pla		                PLA
.1978c1		38		sec		                SEC
.1978c2		e9 80		sbc #$80	                SBC #$80                ; Convert to an offset
.1978c4		aa		tax		                TAX                     ; And use it as an index to...
.1978c5		bf fe 78 19	lda $1978fe,x	                LDA @l ENCODE_CODE,X    ; Get the number
.1978c9		10 0b		bpl $1978d6	                BPL send_number         ; If MSB is not set, send the number as-is
.1978cb		29 7f		and #$7f	                AND #$7F                ; Remove the MSB
.1978cd		18		clc		                CLC
.1978ce		69 41		adc #$41	                ADC #'A'                ; Convert to 'A' .. 'D'
.1978d0		22 1a 76 19	jsl $19761a	                JSL KBD_CHAR_ENQUEUE    ; Enqueue the code
.1978d4		80 26		bra $1978fc	                BRA done
.1978d6		22 96 78 19	jsl $197896	send_number     JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.1978da		22 70 78 19	jsl $197870	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.1978de		22 f7 76 19	jsl $1976f7	chk_modifier    JSL KBD_GETMODS_ANSI    ; Get the modifiers
.1978e2		c9 00		cmp #$00	                CMP #0                  ; Are there any?
.1978e4		f0 10		beq $1978f6	                BEQ close               ; No: close the sequence
.1978e6		48		pha		                PHA
.1978e7		a9 3b		lda #$3b	                LDA #';'                ; Enqueue the separator
.1978e9		22 1a 76 19	jsl $19761a	                JSL KBD_CHAR_ENQUEUE
.1978ed		68		pla		                PLA
.1978ee		22 96 78 19	jsl $197896	                JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.1978f2		22 70 78 19	jsl $197870	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.1978f6		a9 7e		lda #$7e	close           LDA #'~'                ; Enqueue closing code
.1978f8		22 1a 76 19	jsl $19761a	                JSL KBD_CHAR_ENQUEUE
.1978fc		28		plp		done            PLP
.1978fd		6b		rtl		                RTL
>1978fe		01 02 03 04 05 06		ENCODE_CODE     .byte 1, 2, 3, 4, 5, 6      ; Insert, etc...
>197904		80 81 82 83			                .byte $80, $81, $82, $83    ; Cursor keys
>197908		0b 0c 0d 0e 0f			                .byte 11, 12, 13, 14, 15    ; F1 - F5
>19790d		11 12 13 14 15			                .byte 17, 18, 19, 20, 21    ; F6 - F10
>197912		17 18				                .byte 23, 24                ; F11 - F12
.197914						KBD_SETTABLE
.197914		48		pha		                PHA
.197915		8b		phb		                PHB
.197916		0b		phd		                PHD
.197917		08		php		                PHP
.197918		48		pha		                PHA             ; begin setdp macro
.197919		08		php		                PHP
.19791a		c2 20		rep #$20	                REP #$20        ; set A long
.19791c		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.19791f		5b		tcd		                TCD
.197920		28		plp		                PLP
.197921		68		pla		                PLA             ; end setdp macro
.197922		e2 20		sep #$20	                SEP #$20        ; set A short
.197924		8b		phb		                PHB                 ; Get the data bank into A
.197925		68		pla		                PLA
.197926		c2 20		rep #$20	                REP #$20        ; set A long
.197928		29 ff 00	and #$00ff	                AND #$00FF
.19792b		85 29		sta $0f29	                STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.19792d		85 2d		sta $0f2d	                STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.19792f		85 31		sta $0f31	                STA #S_KBD_CONTROL.TBL_CTRL+2,D
.197931		85 35		sta $0f35	                STA #S_KBD_CONTROL.TBL_LOCK+2,D
.197933		85 39		sta $0f39	                STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.197935		85 3d		sta $0f3d	                STA #S_KBD_CONTROL.TBL_CTRL_SHIFT+2,D
.197937		86 27		stx $0f27	                STX #S_KBD_CONTROL.TBL_UNMOD,D
.197939		86 2b		stx $0f2b	                STX #S_KBD_CONTROL.TBL_SHIFT,D
.19793b		86 2f		stx $0f2f	                STX #S_KBD_CONTROL.TBL_CTRL,D
.19793d		86 33		stx $0f33	                STX #S_KBD_CONTROL.TBL_LOCK,D
.19793f		86 37		stx $0f37	                STX #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.197941		86 3b		stx $0f3b	                STX #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.197943		28		plp		                PLP
.197944		2b		pld		                PLD
.197945		ab		plb		                PLB
.197946		68		pla		                PLA
.197947		6b		rtl		                RTL
>197948						.align 256
>197a00		00 01 02 03 04 05 06 07		TBL_SET1        .byte $00, $01, $02, $03, $04, $05, $06, $07    ; $00 - $07
>197a08		08 09 0a 0b 0c 0d 0e 0f		                .byte $08, $09, $0A, $0B, $0C, $0D, $0E, $0F    ; $08 - $0F
>197a10		10 11 12 13 14 15 16 17		                .byte $10, $11, $12, $13, $14, $15, $16, $17    ; $10 - $17
>197a18		18 19 1a 1b 1c 1d 1e 1f		                .byte $18, $19, $1A, $1B, $1C, $1D, $1E, $1F    ; $18 - $1F
>197a20		20 21 22 23 24 25 26 27		                .byte $20, $21, $22, $23, $24, $25, $26, $27    ; $20 - $27
>197a28		28 29 2a 2b 2c 2d 2e 2f		                .byte $28, $29, $2A, $2B, $2C, $2D, $2E, $2F    ; $28 - $2F
>197a30		30 31 32 33 34 35 36 37		                .byte $30, $31, $32, $33, $34, $35, $36, $37    ; $30 - $37
>197a38		38 39 3a 3b 3c 3d 3e 3f		                .byte $38, $39, $3A, $3B, $3C, $3D, $3E, $3F    ; $38 - $3F
>197a40		40 41 42 43 44 45 46 47		                .byte $40, $41, $42, $43, $44, $45, $46, $47    ; $40 - $47
>197a48		48 49 4a 4b 4c 4d 4e 4f		                .byte $48, $49, $4A, $4B, $4C, $4D, $4E, $4F    ; $48 - $4F
>197a50		50 51 52 53 54 55 56 57		                .byte $50, $51, $52, $53, $54, $55, $56, $57    ; $50 - $57
>197a58		58 00 00 00 00 00 00 00		                .byte $58, $00, $00, $00, $00, $00, $00, $00    ; $58 - $5F
>197a60		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>197a68		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>197a70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>197a78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
>197a80		00 00 00 00 00 00 00 00		TBL_SET1_E0     .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $00 - $07
>197a88		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $08 - $0F
>197a90		70 00 00 00 00 00 00 00		                .byte $70, $00, $00, $00, $00, $00, $00, $00    ; $10 - $17
>197a98		00 71 00 00 6d 5e 00 00		                .byte $00, $71, $00, $00, $6D, $5E, $00, $00    ; $18 - $1F
>197aa0		72 00 6e 00 6f 00 00 00		                .byte $72, $00, $6E, $00, $6F, $00, $00, $00    ; $20 - $27
>197aa8		00 00 00 00 00 00 73 00		                .byte $00, $00, $00, $00, $00, $00, $73, $00    ; $28 - $2F
>197ab0		74 00 00 00 00 6c 00 00		                .byte $74, $00, $00, $00, $00, $6C, $00, $00    ; $30 - $37
>197ab8		5c 00 00 00 00 00 00 00		                .byte $5C, $00, $00, $00, $00, $00, $00, $00    ; $38 - $3F
>197ac0		00 00 00 00 00 00 61 63		                .byte $00, $00, $00, $00, $00, $00, $61, $63    ; $40 - $47
>197ac8		68 64 00 69 00 6b 00 66		                .byte $68, $64, $00, $69, $00, $6B, $00, $66    ; $48 - $4F
>197ad0		6a 67 62 65 00 00 00 00		                .byte $6A, $67, $62, $65, $00, $00, $00, $00    ; $50 - $57
>197ad8		00 00 00 00 00 5d 00 00		                .byte $00, $00, $00, $00, $00, $5D, $00, $00    ; $58 - $5F
>197ae0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>197ae8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>197af0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>197af8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
.197b00						KBD_STATE_MACH
>197b00		00 e0 01 00			                .byte KBD_STATE_IDLE, $E0, KBD_STATE_E0, 0                          ; IDLE =[E0]=> STATE_E0
>197b04		00 e1 04 00			                .byte KBD_STATE_IDLE, $E1, KBD_STATE_E1, 0                          ; IDLE =[E1]=> STATE_E1
>197b08		00 00 00 01			                .byte KBD_STATE_IDLE, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_BASE       ; IDLE =[default]=> IDLE / emit(TBL_SET1[x])
>197b0c		01 2a 02 00			                .byte KBD_STATE_E0, $2A, KBD_STATE_E02A, 0                          ; STATE_E0 =[2A]=> STATE_E02A
>197b10		01 b7 09 00			                .byte KBD_STATE_E0, $B7, KBD_STATE_E0B7, 0                          ; STATE_E0 =[B7]=> STATE_E0B7
>197b14		01 00 00 02			                .byte KBD_STATE_E0, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_E0           ; STATE_E0 =[default]=> IDLE, emit(TBL_SET1_E0[x])
>197b18		02 e0 03 00			                .byte KBD_STATE_E02A, $E0, KBD_STATE_E02AE0, 0                      ; STATE_E02A =[E0]=> STATE_E02AE0
>197b1c		02 00 00 00			                .byte KBD_STATE_E02A, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E02A =[default]=> IDLE, ignore(x)
>197b20		03 37 00 60			                .byte KBD_STATE_E02AE0, $37, KBD_STATE_IDLE, $60                    ; STATE_E02AE0 =[37]=> IDLE, emit(make{PrintScreen})
>197b24		03 00 00 00			                .byte KBD_STATE_E02AE0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E02AE0 =[default]=> IDLE, ignore(x)
>197b28		09 e0 0a 00			                .byte KBD_STATE_E0B7, $E0, KBD_STATE_E0B7E0, 0                      ; STATE_E0B7 =[E0]=> STATE_E0B7E0
>197b2c		09 00 00 00			                .byte KBD_STATE_E0B7, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E0B7 =[default]=> IDLE, ignore(x)
>197b30		0a aa 00 e0			                .byte KBD_STATE_E0B7E0, $AA, KBD_STATE_IDLE, $E0                    ; STATE_E0B7E0 =[AA]=> IDLE, emit(break{PrintScreen})
>197b34		0a 00 00 00			                .byte KBD_STATE_E0B7E0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E0B7E0 =[default]=> IDLE, ignore(x)
>197b38		04 1d 05 00			                .byte KBD_STATE_E1, $1D, KBD_STATE_E11D, 0                          ; STATE_E1 =[1D]=> STATE_E11D
>197b3c		04 00 00 00			                .byte KBD_STATE_E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE            ; STATE_E1 =[default]=> IDLE, ignore(x)
>197b40		05 45 06 00			                .byte KBD_STATE_E11D, $45, KBD_STATE_E11D45, 0                      ; STATE_E11D =[45]=> STATE_E11D45
>197b44		05 00 00 00			                .byte KBD_STATE_E11D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E11D =[default]=> IDLE, ignore(x)
>197b48		06 e1 07 00			                .byte KBD_STATE_E11D45, $E1, KBD_STATE_E11D45E1, 0                  ; STATE_E11D45 =[E1]=> STATE_E11D45E1
>197b4c		06 00 00 00			                .byte KBD_STATE_E11D45, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E11D45 =[default]=> IDLE, ignore(x)
>197b50		07 9d 08 00			                .byte KBD_STATE_E11D45E1, $9D, KBD_STATE_E11D45E19D, 0              ; STATE_E11D45E1 =[9D]=> STATE_E11D45E19D
>197b54		07 00 00 00			                .byte KBD_STATE_E11D45E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE      ; STATE_E11D45E1 =[default]=> IDLE, ignore(x)
>197b58		08 c5 00 61			                .byte KBD_STATE_E11D45E19D, $C5, KBD_STATE_IDLE, $61                ; STATE_E11D45E19D =[C5]=> IDLE, emit(make{Pause})
>197b5c		08 00 00 00			                .byte KBD_STATE_E11D45E19D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE    ; STATE_E11D45E19D =[default]=> IDLE, ignore(x)
>197b60		ff ff ff ff			                .byte $FF, $FF, $FF, $FF                                            ; End of state machine
>197b64						.align 256
>197c00		00 1b 31 32 33 34 35 36		SC_US_UNMOD     .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>197c08		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>197c10		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>197c18		6f 70 5b 5d 0d 00 61 73		                .byte 'o', 'p', '[', ']', $0D, $00, 'a', 's'                        ; $18 - $1F
>197c20		64 66 67 68 6a 6b 6c 3b		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';'                        ; $20 - $27
>197c28		27 60 00 5c 7a 78 63 76		                .byte $27, '`', $00, '\', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>197c30		62 6e 6d 2c 2e 2f 00 2a		                .byte 'b', 'n', 'm', ',', '.', '/', $00, '*'                        ; $30 - $37
>197c38		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197c40		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197c48		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197c50		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197c58		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197c60		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197c68		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197c70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197c78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197c80		00 1b 21 40 23 24 25 5e		SC_US_SHFT      .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197c88		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197c90		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>197c98		4f 50 7b 7d 0a 00 41 53		                .byte 'O', 'P', '{', '}', $0A, $00, 'A', 'S'                        ; $18 - $1F
>197ca0		44 46 47 48 4a 4b 4c 3a		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':'                        ; $20 - $27
>197ca8		22 7e 00 7c 5a 58 43 56		                .byte $22, '~', $00, '|', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>197cb0		42 4e 4d 3c 3e 3f 00 00		                .byte 'B', 'N', 'M', '<', '>', '?', $00, $00                        ; $30 - $37
>197cb8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197cc0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197cc8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197cd0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197cd8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197ce0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197ce8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197cf0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197cf8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197d00		00 1b 31 32 33 34 35 1e		SC_US_CTRL      .byte $00, $1B, '1', '2', '3', '4', '5', $1E                        ; $00 - $07
>197d08		37 38 39 30 1f 3d 08 09		                .byte '7', '8', '9', '0', $1F, '=', $08, $09                        ; $08 - $0F
>197d10		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>197d18		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>197d20		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>197d28		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>197d30		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>197d38		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197d40		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197d48		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197d50		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197d58		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197d60		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197d68		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197d70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197d78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197d80		00 1b 31 32 33 34 35 36		SC_US_LOCK      .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>197d88		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>197d90		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>197d98		4f 50 5b 5d 0d 00 41 53		                .byte 'O', 'P', '[', ']', $0D, $00, 'A', 'S'                        ; $18 - $1F
>197da0		44 46 47 48 4a 4b 4c 3b		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';'                        ; $20 - $27
>197da8		27 60 00 5c 5a 58 43 56		                .byte $27, '`', $00, '\', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>197db0		42 4e 4d 2c 2e 2f 00 00		                .byte 'B', 'N', 'M', ',', '.', '/', $00, $00                        ; $30 - $37
>197db8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197dc0		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>197dc8		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>197dd0		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>197dd8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197de0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197de8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197df0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197df8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197e00		00 1b 21 40 23 24 25 5e		SC_US_LOCK_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197e08		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197e10		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>197e18		6f 70 7b 7d 0a 00 61 73		                .byte 'o', 'p', '{', '}', $0A, $00, 'a', 's'                        ; $18 - $1F
>197e20		64 66 67 68 6a 6b 6c 3a		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ':'                        ; $20 - $27
>197e28		22 7e 00 7c 7a 78 63 76		                .byte $22, '~', $00, '|', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>197e30		62 6e 6d 3c 3e 3f 00 00		                .byte 'b', 'n', 'm', '<', '>', '?', $00, $00                        ; $30 - $37
>197e38		00 20 00 00 00 00 00 00		                .byte $00, ' ', $00, $00, $00, $00, $00, $00                        ; $38 - $3F
>197e40		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>197e48		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>197e50		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>197e58		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197e60		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197e68		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197e70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197e78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197e80		00 1b 21 40 23 24 25 5e		SC_US_CTRL_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197e88		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197e90		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>197e98		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>197ea0		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>197ea8		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>197eb0		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>197eb8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197ec0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197ec8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197ed0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197ed8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197ee0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197ee8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197ef0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197ef8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/mouse_driver.asm

.197f00						IINITMOUSE
.197f00		48		pha		                PHA
.197f01		da		phx		                PHX
.197f02		8b		phb		                PHB
.197f03		0b		phd		                PHD
.197f04		08		php		                PHP
.197f05		48		pha		                PHA             ; begin setdbr macro
.197f06		08		php		                PHP
.197f07		e2 20		sep #$20	                SEP #$20        ; set A short
.197f09		a9 00		lda #$00	                LDA #0
.197f0b		48		pha		                PHA
.197f0c		ab		plb		                PLB
.197f0d		28		plp		                PLP
.197f0e		68		pla		                PLA             ; end setdbr macro
.197f0f		48		pha		                PHA             ; begin setdp macro
.197f10		08		php		                PHP
.197f11		c2 20		rep #$20	                REP #$20        ; set A long
.197f13		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.197f16		5b		tcd		                TCD
.197f17		28		plp		                PLP
.197f18		68		pla		                PLA             ; end setdp macro
.197f19		78		sei		                SEI
.197f1a		e2 20		sep #$20	                SEP #$20        ; set A short
.197f1c		c2 10		rep #$10	                REP #$10        ; set X long
.197f1e		18		clc		                CLC
.197f1f		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.197f22		20 0d 80	jsr $19800d	DO_CMD_A9_AGAIN JSR Poll_Inbuf_Mouse_TimeOut
.197f25		b0 0b		bcs $197f32	                BCS mouse_init_fail
.197f27		a9 a9		lda #$a9	                LDA #$A9                        ; Tests second PS2 Channel
.197f29		8f 07 18 af	sta $af1807	                STA @l KBD_CMD_BUF
.197f2d		20 e5 7f	jsr $197fe5	                JSR Poll_Outbuf_Mouse_TimeOut
.197f30		90 2b		bcc $197f5d	                BCC mouse_found
.197f32		a9 00		lda #$00	mouse_init_fail LDA #0                          ; Disable the mouse pointer
.197f34		8f 00 07 af	sta $af0700	                STA @l MOUSE_PTR_CTRL_REG_L
.197f38		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Make sure the mouse interrupt is disabled
.197f3c		09 80		ora #$80	                ORA #FNX0_INT07_MOUSE
.197f3e		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.197f42		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1         ; Read the Pending Register &
.197f46		29 01		and #$01	                AND #FNX1_INT00_KBD
.197f48		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1         ; Writing it back will clear the Active Bit
.197f4c		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.197f50		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.197f52		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.197f56		28		plp		                PLP                             ; Return failure
.197f57		2b		pld		                PLD
.197f58		ab		plb		                PLB
.197f59		fa		plx		                PLX
.197f5a		68		pla		                PLA
.197f5b		38		sec		                SEC
.197f5c		6b		rtl		                RTL
.197f5d		af 03 18 af	lda $af1803	mouse_found     LDA @l KBD_OUT_BUF              ; Clear the Output buffer
.197f61		c9 00		cmp #$00	                CMP #$00
.197f63		d0 bd		bne $197f22	                BNE DO_CMD_A9_AGAIN
.197f65		a9 f5		lda #$f5	                LDA #$F5                        ; Disable the mouse
.197f67		20 b7 7f	jsr $197fb7	                JSR MOUSE_WRITE
.197f6a		20 cc 7f	jsr $197fcc	                JSR MOUSE_READ
.197f6d		b0 c3		bcs $197f32	                BCS mouse_init_fail
.197f6f		a9 f6		lda #$f6	                LDA #$F6                        ;Tell the mouse to use default settings
.197f71		20 b7 7f	jsr $197fb7	                JSR MOUSE_WRITE
.197f74		20 cc 7f	jsr $197fcc	                JSR MOUSE_READ
.197f77		b0 b9		bcs $197f32	                BCS mouse_init_fail
.197f79		a9 e8		lda #$e8	                LDA #$E8
.197f7b		20 b7 7f	jsr $197fb7	                JSR MOUSE_WRITE
.197f7e		20 cc 7f	jsr $197fcc	                JSR MOUSE_READ
.197f81		b0 af		bcs $197f32	                BCS mouse_init_fail
.197f83		a9 00		lda #$00	                LDA #$00
.197f85		20 b7 7f	jsr $197fb7	                JSR MOUSE_WRITE
.197f88		20 cc 7f	jsr $197fcc	                JSR MOUSE_READ
.197f8b		b0 a5		bcs $197f32	                BCS mouse_init_fail
.197f8d		a9 f4		lda #$f4	                LDA #$F4                        ; Enable the Mouse
.197f8f		20 b7 7f	jsr $197fb7	                JSR MOUSE_WRITE
.197f92		20 cc 7f	jsr $197fcc	                JSR MOUSE_READ
.197f95		b0 9b		bcs $197f32	                BCS mouse_init_fail
.197f97		a9 00		lda #$00	                LDA #$00
.197f99		8d e0 00	sta $00e0	                STA @w MOUSE_IDX
.197f9c		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.197fa0		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.197fa2		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.197fa6		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Enable the mouse interrupt
.197faa		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.197fac		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.197fb0		28		plp		mouse_init_ok   PLP
.197fb1		2b		pld		                PLD
.197fb2		ab		plb		                PLB
.197fb3		fa		plx		                PLX
.197fb4		68		pla		                PLA
.197fb5		18		clc		                CLC
.197fb6		6b		rtl		                RTL
.197fb7						MOUSE_WRITE
.197fb7		e2 20		sep #$20	                SEP #$20        ; set A short
.197fb9		48		pha		                PHA
.197fba		20 00 80	jsr $198000	                JSR Poll_Inbuf          ; Test bit $01 (if 2, Full)
.197fbd		a9 d4		lda #$d4	                LDA #$D4
.197fbf		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF         ; KBD_CMD_BUF		= $AF1064
.197fc3		20 00 80	jsr $198000	                JSR Poll_Inbuf
.197fc6		68		pla		                PLA
.197fc7		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF        ; KBD_DATA_BUF	= $AF1060
.197fcb		60		rts		                RTS
.197fcc						MOUSE_READ
.197fcc		e2 20		sep #$20	                SEP #$20        ; set A short
.197fce		20 e5 7f	jsr $197fe5	                JSR Poll_Outbuf_Mouse_TimeOut   ; Test bit $01 (if 1, Full)
.197fd1		b0 04		bcs $197fd7	                BCS done
.197fd3		af 03 18 af	lda $af1803	                LDA KBD_INPT_BUF        ; KBD_INPT_BUF	= $AF1060
.197fd7		60		rts		done            RTS
.197fd8						Poll_Outbuf_Mouse
.197fd8		e2 20		sep #$20	                SEP #$20        ; set A short
.197fda		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.197fde		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.197fe0		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.197fe2		d0 f6		bne $197fda	                BNE wait
.197fe4		60		rts		                RTS
.197fe5						Poll_Outbuf_Mouse_TimeOut
.197fe5		e2 20		sep #$20	                SEP #$20        ; set A short
.197fe7		c2 10		rep #$10	                REP #$10        ; set X long
.197fe9		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.197fec		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.197ff0		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.197ff2		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.197ff4		f0 08		beq $197ffe	                BEQ ret_success
.197ff6		ca		dex		                DEX
.197ff7		e0 00 00	cpx #$0000	                CPX #$0000
.197ffa		d0 f0		bne $197fec	                BNE wait
.197ffc		38		sec		                SEC                     ; Return timeout error
.197ffd		60		rts		                RTS
.197ffe		18		clc		ret_success     CLC                     ; Return success
.197fff		60		rts		                RTS
.198000						Poll_Inbuf
.198000		e2 20		sep #$20	                SEP #$20        ; set A short
.198002		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT         ; Load Status Byte
.198006		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.198008		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.19800a		f0 f6		beq $198002	                BEQ wait
.19800c		60		rts		                RTS
.19800d						Poll_Inbuf_Mouse_TimeOut
.19800d		e2 20		sep #$20	                SEP #$20        ; set A short
.19800f		c2 10		rep #$10	                REP #$10        ; set X long
.198011		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.198014		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.198018		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.19801a		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.19801c		d0 08		bne $198026	                BNE ret_success
.19801e		ca		dex		                DEX
.19801f		e0 00 00	cpx #$0000	                CPX #$0000
.198022		d0 f0		bne $198014	                BNE wait
.198024		38		sec		                SEC                     ; Return timeout error
.198025		60		rts		                RTS
.198026		18		clc		ret_success     CLC                     ; Return success
.198027		60		rts		                RTS
.198028						MOUSE_INTERRUPT
.198028		8b		phb		                PHB
.198029		0b		phd		                PHD
.19802a		08		php		                PHP
.19802b						                setasx
.19802b		78		sei		                SEI
.19802c		48		pha		                PHA             ; begin setdbr macro
.19802d		08		php		                PHP
.19802e		e2 20		sep #$20	                SEP #$20        ; set A short
.198030		a9 00		lda #$00	                LDA #0
.198032		48		pha		                PHA
.198033		ab		plb		                PLB
.198034		28		plp		                PLP
.198035		68		pla		                PLA             ; end setdbr macro
.198036		48		pha		                PHA             ; begin setdp macro
.198037		08		php		                PHP
.198038		c2 20		rep #$20	                REP #$20        ; set A long
.19803a		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19803d		5b		tcd		                TCD
.19803e		28		plp		                PLP
.19803f		68		pla		                PLA             ; end setdp macro
.198040		ae e0 00	ldx $00e0	                LDX @w MOUSE_IDX                ; Get the # of the mouse byte to write
.198043		af 03 18 af	lda $af1803	                LDA @l KBD_INPT_BUF             ; Get the byte from the PS/2 interface
.198047		9f 06 07 af	sta $af0706,x	                STA @l MOUSE_PTR_BYTE0,X        ; Store it into the correct Vicky register
.19804b		e8		inx		next_byte       INX                             ; Move to the next byte
.19804c		e0 03 00	cpx #$0003	                CPX #$03                        ; Have we written 3 bytes?
.19804f		d0 1b		bne $19806c	                BNE save_ptr                    ; No: return and wait for the next mouse interrupt
.198051		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.198055		85 e1		sta $e1		                STA @b MOUSE_POS_X_LO
.198057		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.19805b		85 e2		sta $e2		                STA @b MOUSE_POS_X_HI
.19805d		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.198061		85 e3		sta $e3		                STA @b MOUSE_POS_Y_LO
.198063		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.198067		85 e4		sta $e4		                STA @b MOUSE_POS_Y_HI
.198069		a2 00 00	ldx #$0000	                LDX #0                          ; Reset our state machine to the beginning
.19806c		8e e0 00	stx $00e0	save_ptr        STX @w MOUSE_IDX                ; Save our next byte position (state)
.19806f		28		plp		                PLP
.198070		2b		pld		                PLD
.198071		ab		plb		                PLB
.198072		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/boot_sound.asm

.198073						BOOT_SOUND
.198073		48		pha		                PHA
.198074		da		phx		                PHX
.198075		08		php		                PHP
.198076		e2 20		sep #$20	                SEP #$20        ; set A short
.198078		a9 00		lda #$00	                LDA #0
.19807a		a2 00 00	ldx #$0000	                LDX #0
.19807d		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.198081		e8		inx		                INX                             ; Move to the next SID register
.198082		e0 18 00	cpx #$0018	                CPX #24
.198085		d0 f6		bne $19807d	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.198087		a9 29		lda #$29	                LDA #$29                        ; Attack = 2, Decay = 9
.198089		8f 05 e4 af	sta $afe405	                STA @l SID0_V1_ATCK_DECY
.19808d		8f 0c e4 af	sta $afe40c	                STA @l SID0_V2_ATCK_DECY
.198091		8f 13 e4 af	sta $afe413	                STA @l SID0_V3_ATCK_DECY
.198095		a9 1f		lda #$1f	                LDA #$1F                        ; Sustain = 1, Release = 5
.198097		8f 06 e4 af	sta $afe406	                STA @l SID0_V1_SSTN_RLSE
.19809b		8f 0d e4 af	sta $afe40d	                STA @l SID0_V2_SSTN_RLSE
.19809f		8f 14 e4 af	sta $afe414	                STA @l SID0_V3_SSTN_RLSE
.1980a3		a9 0f		lda #$0f	                LDA #15                         ; Set the volume to max
.1980a5		8f 18 e4 af	sta $afe418	                STA @l SID0_MODE_VOL
.1980a9		a9 60		lda #$60	                LDA #96                         ; Set voice 1 to F-3
.1980ab		8f 00 e4 af	sta $afe400	                STA @l SID0_V1_FREQ_LO
.1980af		a9 16		lda #$16	                LDA #22
.1980b1		8f 01 e4 af	sta $afe401	                STA @l SID0_V1_FREQ_HI
.1980b5		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.1980b7		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.1980bb		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.1980be		22 cd 0f 19	jsl $190fcd	                JSL ILOOP_MS
.1980c2		a9 31		lda #$31	                LDA #49                         ; Set voice 2 to A-3
.1980c4		8f 07 e4 af	sta $afe407	                STA @l SID0_V2_FREQ_LO
.1980c8		a9 08		lda #$08	                LDA #8
.1980ca		8f 08 e4 af	sta $afe408	                STA @l SID0_V2_FREQ_HI
.1980ce		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.1980d0		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.1980d4		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.1980d7		22 cd 0f 19	jsl $190fcd	                JSL ILOOP_MS
.1980db		a9 87		lda #$87	                LDA #135                        ; Set voice 3 to C-3
.1980dd		8f 0e e4 af	sta $afe40e	                STA @l SID0_V3_FREQ_LO
.1980e1		a9 21		lda #$21	                LDA #33
.1980e3		8f 0f e4 af	sta $afe40f	                STA @l SID0_V3_FREQ_HI
.1980e7		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.1980e9		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.1980ed		a2 20 4e	ldx #$4e20	                LDX #20000                      ; Hold down the keys, so to speak... for a while
.1980f0		22 cd 0f 19	jsl $190fcd	                JSL ILOOP_MS
.1980f4		a9 10		lda #$10	                LDA #$10                        ; Release the keys...
.1980f6		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.1980fa		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.1980fe		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.198102		a9 0e		lda #$0e	                LDA #14
.198104		8f 18 e4 af	sta $afe418	dampen          STA @l SID0_MODE_VOL
.198108		a2 64 00	ldx #$0064	                LDX #100
.19810b		22 cd 0f 19	jsl $190fcd	                JSL ILOOP_MS
.19810f		3a		dec a		                DEC A
.198110		d0 f2		bne $198104	                BNE dampen
.198112		28		plp		                PLP
.198113		fa		plx		                PLX
.198114		68		pla		                PLA
.198115		6b		rtl		                RTL
.198116						BOOT_SOUND_OFF
.198116		48		pha		                PHA
.198117		da		phx		                PHX
.198118		08		php		                PHP
.198119		a2 00 00	ldx #$0000	                LDX #0
.19811c		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.198120		e8		inx		                INX                             ; Move to the next SID register
.198121		e0 18 00	cpx #$0018	                CPX #24
.198124		d0 f6		bne $19811c	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.198126		28		plp		                PLP
.198127		fa		plx		                PLX
.198128		68		pla		                PLA
.198129		6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.19812a						    KERNEL_DATA
>19812a		20 20 20 20 0b 0c 0b 0c		    greet_msg   .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " UU    UU" ,$0D
>198132		0b 0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>198142		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>19814a		0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>198159		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>198161		0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>19816f		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>198177		0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>198184		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UUUUUUUU",$0D
>19818c		0b 0c 20 55 55 55 55 55 55 55 55 0d
>198198		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX U -- 1,572,864 Bytes Free", $0D
>1981a0		45 4e 49 58 20 55 20 2d 2d 20 31 2c 35 37 32 2c
>1981b0		38 36 34 20 42 79 74 65 73 20 46 72 65 65 0d
>1981bf		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com -- Kernel: "
>1981c7		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 2d 20 4b 65
>1981d7		72 6e 65 6c 3a 20

;******  Processing file: src\version.asm

>1981dd		76 30 2e 34 2e 30 2d 61		.text "v0.4.0-alpha+333 (2021-08-07)"
>1981e5		6c 70 68 61 2b 33 33 33 20 28 32 30 32 31 2d 30
>1981f5		38 2d 30 37 29

;******  Return to file: src\kernel.asm

>1981fa		0d 00				                .text $0D,$00
>1981fc		90 90 90 90 90 90 d0 d0		  greet_clr_line1 .text $90, $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>198204		b0 b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198214		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198224		f0 f0
>198226		90 90 90 90 90 d0 d0 b0		  greet_clr_line2 .text $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>19822e		b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>19823e		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>19824e		f0 f0
>198250		90 90 90 90 d0 d0 b0 b0		  greet_clr_line3 .text $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>198258		a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198268		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198278		f0 f0
>19827a		90 90 90 d0 d0 b0 b0 a0		  greet_clr_line4 .text $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>198282		a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198292		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1982a2		f0 f0
>1982a4		90 90 d0 d0 b0 b0 a0 a0		  greet_clr_line5 .text $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>1982ac		e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1982bc		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1982cc		f0 f0
>1982ce		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>1982d2		00 00 80 ff			                .text $00, $00, $80, $FF
>1982d6		00 80 00 ff			                .text $00, $80, $00, $FF
>1982da		80 00 00 ff			                .text $80, $00, $00, $FF
>1982de		00 80 80 ff			                .text $00, $80, $80, $FF
>1982e2		80 80 00 ff			                .text $80, $80, $00, $FF
>1982e6		80 00 80 ff			                .text $80, $00, $80, $FF
>1982ea		80 80 80 ff			                .text $80, $80, $80, $FF
>1982ee		00 45 ff ff			                .text $00, $45, $FF, $FF
>1982f2		13 45 8b ff			                .text $13, $45, $8B, $FF
>1982f6		00 00 20 ff			                .text $00, $00, $20, $FF
>1982fa		00 20 00 ff			                .text $00, $20, $00, $FF
>1982fe		20 00 00 ff			                .text $20, $00, $00, $FF
>198302		20 20 20 ff			                .text $20, $20, $20, $FF
>198306		40 40 40 ff			                .text $40, $40, $40, $FF
>19830a		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>19830e		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>198312		00 00 80 ff			                .text $00, $00, $80, $FF
>198316		00 80 00 ff			                .text $00, $80, $00, $FF
>19831a		80 00 00 ff			                .text $80, $00, $00, $FF
>19831e		00 20 20 ff			                .text $00, $20, $20, $FF
>198322		20 20 00 ff			                .text $20, $20, $00, $FF
>198326		20 00 20 ff			                .text $20, $00, $20, $FF
>19832a		20 20 20 ff			                .text $20, $20, $20, $FF
>19832e		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>198332		13 45 8b ff			                .text $13, $45, $8B, $FF
>198336		00 00 20 ff			                .text $00, $00, $20, $FF
>19833a		00 20 00 ff			                .text $00, $20, $00, $FF
>19833e		40 00 00 ff			                .text $40, $00, $00, $FF
>198342		10 10 10 ff			                .text $10, $10, $10, $FF
>198346		40 40 40 ff			                .text $40, $40, $40, $FF
>19834a		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>19834e		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>198356		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>198366		00
>198367		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>19836f		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>19837f		00
>198380		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>198388		20 45 78 65 63 75 74 65 64 2e 0d 00
>198394		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>19839c		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>1983ac		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>1983b4		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>1983c4		64 2e 2e 2e 0d 00
>1983ca		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>1983d2		20 50 72 65 73 65 6e 74 0d 00
>1983dc		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>1983e4		65 73 65 6e 74 0d 00
>1983eb		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>1983f3		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>198403		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>198413		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>19841b		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>19842b		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>198438		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>198440		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>19844c		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>198454		54 55 52 45 20 46 4f 55 4e 44 2e 00
>198460		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>198468		45 44 2e 00
>19846c		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>198474		47 20 42 4d 50 20 50 41 52 53 45 52 00
>198481		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>198489		50 72 65 73 65 6e 74 3a 00
>198492		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>19849a		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>1984aa		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>1984b8		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>1984c0		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>1984d0		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>1984dd		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>1984e5		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>1984f5		72 64 2e 00
>1984f9		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>198501		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>198511		49 44 45 20 64 72 69 76 65 2e 00
>19851c		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>198524		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>198534		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>198542		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>19854a		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>198559		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>198561		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>198570		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>198578		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>198588		2e 2e 00
>19858b		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>198593		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>19859b		52 4f 52 00
>19859f		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>1985a7		38 39 41 42 43 44 45 46 00
>1985b0						.align 256
>198600		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198608		37 38 39 30 2d 3d 08 09
>198610		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198618		6f 70 5b 5d 0d 00 61 73
>198620		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198628		27 60 00 5c 7a 78 63 76
>198630		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>198638		00 20 00 81 82 83 84 85
>198640		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>198648		11 00 00 9d 00 1d 00 00
>198650		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>198658		8c 00 00 00 00 00 00 00
>198660		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198668		00 00 00 00 00 00 00 00
>198670		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198678		00 00 00 00 00 00 00 00
>198680		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>198688		26 2a 28 29 5f 2b 08 09
>198690		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>198698		4f 50 7b 7d 0d 00 41 53
>1986a0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>1986a8		22 7e 00 7c 5a 58 43 56
>1986b0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1986b8		00 20 00 00 00 00 00 00
>1986c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1986c8		00 00 00 00 00 00 00 00
>1986d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1986d8		00 00 00 00 00 00 00 00
>1986e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1986e8		00 00 00 00 00 00 00 00
>1986f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1986f8		00 00 00 00 00 00 00 00
>198700		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198708		37 38 39 30 2d 3d 08 09
>198710		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>198718		0f 10 5b 5d 0d 00 01 13
>198720		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>198728		27 00 00 5c 1a 18 03 16
>198730		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198738		00 20 00 00 00 00 00 00
>198740		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198748		00 00 00 00 00 00 00 00
>198750		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198758		00 00 00 00 00 00 00 00
>198760		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198768		00 00 00 00 00 00 00 00
>198770		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198778		00 00 00 00 00 00 00 00
>198780		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198788		37 38 39 30 2d 3d 08 09
>198790		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198798		6f 70 5b 5d 0d 00 61 73
>1987a0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>1987a8		27 60 00 5c 7a 78 63 76
>1987b0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1987b8		00 20 00 00 00 00 00 00
>1987c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1987c8		00 00 00 00 00 00 00 00
>1987d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1987d8		00 00 00 00 00 00 00 00
>1987e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1987e8		00 00 00 00 00 00 00 00
>1987f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1987f8		00 00 00 00 00 00 00 00
>198800		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198808		37 38 39 30 2d 3d 08 09
>198810		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198818		6f 70 5b 5d 0d 00 61 73
>198820		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198828		27 60 00 5c 7a 78 63 76
>198830		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198838		00 20 00 00 00 00 00 00
>198840		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198848		00 00 00 00 00 00 00 00
>198850		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198858		00 00 00 00 00 00 00 00
>198860		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198868		00 00 00 00 00 00 00 00
>198870		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198878		00 00 00 00 00 00 00 00
>198880		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>198888		00 00 00 00 00 00 00 00
>198890		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>198898		00 00 00 00 00 00 00 00
>1988a0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>1988a8		00 00 00 00 00 00 00 00
>1988b0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>1988b8		00 00 00 00 00 00 00 00
>1988c0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>1988c8		11 00 00 9d 00 1d 00 05
>1988d0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1988d8		00 00 00 00 00 00 00 00
>1988e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1988e8		00 00 00 00 00 00 00 00
>1988f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1988f8		00 00 00 00 00 00 00 00
>198900						.align 256
>198900		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>198908		34 37 3a 3d 3f 41 44 46
>198910		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>198918		57 58 5a 5b 5d 5e 60 61
>198920		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>198928		6d 6f 70 71 72 73 75 76
>198930		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>198938		80 81 82 83 84 85 86 87
>198940		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>198948		8f 90 91 92 93 93 94 95
>198950		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>198958		9d 9e 9e 9f a0 a1 a2 a2
>198960		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>198968		a9 aa ab ab ac ad ae ae
>198970		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>198978		b5 b5 b6 b7 b7 b8 b9 b9
>198980		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>198988		bf c0 c0 c1 c2 c2 c3 c4
>198990		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>198998		c9 ca ca cb cb cc cd cd
>1989a0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>1989a8		d2 d3 d4 d4 d5 d5 d6 d6
>1989b0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>1989b8		db dc dc dd de de df df
>1989c0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>1989c8		e4 e4 e5 e5 e6 e6 e7 e7
>1989d0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>1989d8		ec ec ed ed ee ee ef ef
>1989e0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>1989e8		f4 f4 f5 f5 f6 f6 f7 f7
>1989f0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>1989f8		fb fc fc fd fd fe fe ff
>198a00						.align 256
>198a00		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>198a08		25 27 2a 2c 2e 30 32 34
>198a10		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>198a18		44 46 47 49 4a 4c 4d 4f
>198a20		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>198a28		5b 5c 5d 5e 60 61 62 63
>198a30		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>198a38		6d 6e 70 71 72 73 74 75
>198a40		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>198a48		7e 7f 80 81 82 83 84 84
>198a50		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>198a58		8d 8e 8e 8f 90 91 92 93
>198a60		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>198a68		9a 9b 9c 9d 9e 9f 9f a0
>198a70		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>198a78		a7 a8 a9 aa aa ab ac ad
>198a80		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>198a88		b3 b4 b5 b6 b6 b7 b8 b8
>198a90		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>198a98		bf bf c0 c1 c2 c2 c3 c4
>198aa0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>198aa8		ca ca cb cc cc cd ce ce
>198ab0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>198ab8		d4 d5 d6 d6 d7 d7 d8 d9
>198ac0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>198ac8		de df e0 e0 e1 e1 e2 e3
>198ad0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>198ad8		e8 e9 e9 ea ea eb ec ec
>198ae0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>198ae8		f1 f2 f3 f3 f4 f4 f5 f5
>198af0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>198af8		fb fb fc fc fd fd fe ff
>198b00						.align 256
>198b00		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>198b08		83 dd ce 39 cd c5 3b 15
>198b10		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>198b18		87 12 31 65 89 27 88 42
>198b20		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>198b28		94 ce 56 ec fe da 58 c9
>198b30		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>198b38		d0 10 2c b2 4b ea 32 61
>198b40		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>198b48		a1 e6 ca 2d b3 ce b0 79
>198b50		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>198b58		5f e3 fb bd 15 2e be f5
>198b60		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>198b68		8d 8f 2c 80 0a 5e 99 36
>198b70		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>198b78		13 52 44 2f e3 ef 44 a2
>198b80		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>198b88		be 23 02 58 0a 52 5e b4
>198b90		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>198b98		d5 cf 3e df c4 9e da bb
>198ba0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>198ba8		77 7d b1 3b 4a 68 35 6e
>198bb0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>198bb8		b5 8f 44 63 55 6f e1 50
>198bc0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>198bc8		57 74 b9 bd 05 14 50 eb
>198bd0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>198bd8		44 bc ec db 22 58 fc be
>198be0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>198be8		24 aa 82 11 5c 9f 43 4d
>198bf0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>198bf8		3e 3d 66 7e 0a 1c 6b 74
>198c00						.align 16
>198c00		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>198c08		01 01 01 00 00 00 00 00
>198c10		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>198c18		ff ff ff 01 00 00 00 00
>198c20		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>198c28		01 55 ff ff 01 00 00 00
>198c30		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>198c38		ff ff ff ff 01 00 00 00
>198c40		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>198c48		ff ff 01 ff ff 01 00 00
>198c50		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>198c58		01 ff ff 01 ff 01 00 00
>198c60		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>198c68		ff 01 ff ff ff 01 00 00
>198c70		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>198c78		ff ff ff ff ff 01 01 00
>198c80		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>198c88		ff ff ff ff 01 ff ff 01
>198c90		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>198c98		ff ff ff ff ff ff ff 01
>198ca0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>198ca8		55 55 01 ff ff 55 01 00
>198cb0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>198cb8		01 01 55 ff 55 01 00 00
>198cc0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>198cc8		01 55 55 55 01 00 00 00
>198cd0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>198cd8		01 55 55 01 00 00 00 00
>198ce0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>198ce8		00 01 01 00 00 00 00 00
>198cf0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>198cf8		00 00 00 00 00 00 00 00
>1a0000		5c 67 8a 1a 5c 79 70 1a		        .binary "binaries/basic816_1A0000.bin"
>1a0008		5c 6b 27 1a 5c ba 02 1a 5c 58 00 1a 5c b8 00 1a
>1a0018		5c 0f 04 1a 5c 5e 02 1a 5c 79 02 1a 5c 80 02 1a
>1a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>1a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>1a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>1a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>1a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>1a0078		0d d0 03 4c b1 00 c9 08 d0 1a e0 00 00 f0 ed da
>1a0088		bf 01 4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0
>1a0098		fa ca 80 0e c9 20 90 d4 9f 00 4c 00 e8 20 18 00
>1a00a8		80 ca a9 08 20 18 00 80 c3 a9 00 20 1c 00 28 60
>1a00b8		da 5a 8b 0b 08 22 4c 10 00 28 2b ab 7a fa 60 08
>1a00c8		e2 30 48 a9 1b 20 18 00 a9 5b 20 18 00 68 20 18
>1a00d8		00 28 60 0b 8b 08 08 e2 20 48 a9 00 48 ab 68 28
>1a00e8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 3b 38 e9 04
>1a00f8		00 1b e2 20 a9 00 83 02 83 03 83 04 20 14 00 c9
>1a0108		00 f0 f9 83 01 a3 02 d0 35 a3 01 c9 08 d0 0a 20
>1a0118		18 00 a9 50 20 c7 00 80 e3 c9 0d f0 0a c9 1b d0
>1a0128		06 a9 01 83 02 80 d5 20 18 00 a3 01 85 0c c2 20
>1a0138		3b 18 69 04 00 1b e2 20 a5 0c 28 2b ab 60 c9 01
>1a0148		d0 10 a3 01 c9 5b f0 03 82 a9 ff a9 02 83 02 82
>1a0158		aa ff c9 02 d0 29 a3 01 c9 41 90 0c c9 45 b0 08
>1a0168		a3 01 20 c7 00 82 8c ff c9 30 90 10 c9 3a b0 0c
>1a0178		38 e9 30 83 03 a9 03 83 02 82 80 ff 82 75 ff c9
>1a0188		03 d0 41 a3 01 c9 30 90 29 c9 3a b0 25 a3 03 8f
>1a0198		00 01 00 a9 00 8f 01 01 00 8f 03 01 00 a9 0a 8f
>1a01a8		02 01 00 a3 01 38 e9 30 18 6f 04 01 00 83 03 82
>1a01b8		4a ff c9 3b d0 07 a9 04 83 02 82 3f ff c9 7e f0
>1a01c8		40 82 30 ff c9 04 f0 03 82 5f ff a3 01 c9 30 90
>1a01d8		29 c9 3a b0 25 a3 04 8f 00 01 00 a9 00 8f 01 01
>1a01e8		00 8f 03 01 00 a9 0a 8f 02 01 00 a3 01 38 e9 30
>1a01f8		18 6f 04 01 00 83 04 82 02 ff c9 7e f0 03 82 f3
>1a0208		fe a3 03 c9 02 f0 0b c9 03 f0 0b c9 18 f0 0f 82
>1a0218		e2 fe a9 40 80 02 a9 50 20 c7 00 82 d6 fe a5 d2
>1a0228		d0 10 a3 04 c9 08 d0 0a a9 1b 20 18 00 a9 5f 20
>1a0238		18 00 82 bf fe 08 e2 20 af 00 00 af 89 3c f0 08
>1a0248		09 03 8f 00 00 af 80 0c 09 01 8f 00 00 af a9 00
>1a0258		22 3c 10 00 28 60 08 e2 20 c9 00 f0 08 af 10 00
>1a0268		af 09 01 80 06 af 10 00 af 29 fe 8f 10 00 af 28
>1a0278		60 08 22 84 10 00 28 60 48 da 5a 0b 08 e2 20 c2
>1a0288		10 a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f 00
>1a0298		c0 af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00 5b
>1a02a8		68 28 a2 00 00 a0 00 00 22 84 10 00 28 2b 7a fa
>1a02b8		68 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a02c8		c2 30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2 20
>1a02d8		29 ff 00 85 0a af 11 00 00 8f 08 01 00 af 1c 00
>1a02e8		00 3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08 a5
>1a02f8		0a 69 00 00 85 0a e2 20 af 0f 00 00 85 8f a0 00
>1a0308		00 a2 00 00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0 f4
>1a0318		af 0f 00 00 3a aa bf 00 4f 00 c9 20 d0 09 a9 00
>1a0328		9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 20 69
>1a0338		03 a2 00 00 a9 00 9f 18 f0 1a e8 e0 40 00 d0 f6
>1a0348		a9 80 8f b4 08 00 e2 20 a9 00 8f 89 0f 00 a9 00
>1a0358		8f 00 02 af 8f 0c 02 af 8f 18 02 af 8f 24 02 af
>1a0368		60 08 e2 20 af 0e 08 af 09 08 8f 0e 08 af af 00
>1a0378		08 af 8f 84 e8 af af 02 08 af 8f 85 e8 af a9 03
>1a0388		8f 86 e8 af af 0e 08 af 29 f7 8f 0e 08 af ea ea
>1a0398		ea a9 01 8f 86 e8 af 28 60 08 e2 20 48 48 a9 00
>1a03a8		22 3c 10 00 68 22 18 10 00 af 89 0f 00 29 01 d0
>1a03b8		f8 68 28 60 08 e2 20 48 48 a9 01 22 3c 10 00 68
>1a03c8		22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60 08
>1a03d8		c2 20 48 e2 20 a9 0d 20 18 00 c2 20 68 28 60 08
>1a03e8		22 78 10 00 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>1a03f8		68 28 e2 20 a5 b6 1a 85 b6 cf 13 00 00 90 05 20
>1a0408		14 00 64 b6 2b 28 60 da 5a 0b 08 08 c2 20 48 a9
>1a0418		00 08 5b 68 28 e2 20 c2 10 8f b5 08 00 af b4 08
>1a0428		00 29 20 f0 07 af b5 08 00 20 28 00 af b4 08 00
>1a0438		29 80 f0 07 af b5 08 00 20 a1 03 af b4 08 00 29
>1a0448		40 f0 14 af b5 08 00 20 bc 03 af b5 08 00 c9 0d
>1a0458		d0 05 a9 0a 20 bc 03 28 2b 7a fa 60 08 e2 20 bd
>1a0468		00 00 f0 06 20 18 00 e8 80 f5 28 60 08 c2 20 48
>1a0478		48 4a 4a 4a 4a 4a 4a 4a 4a 20 8e 04 68 29 ff 00
>1a0488		20 8e 04 68 28 60 08 c2 20 48 e2 20 48 4a 4a 4a
>1a0498		4a 20 a5 04 68 20 a5 04 c2 20 68 28 60 08 c2 30
>1a04a8		da 29 0f 00 aa bf 00 d0 1a 20 18 00 fa 28 60 08
>1a04b8		c2 30 48 da 5a 8b 0b c2 30 a3 0b 18 69 03 00 aa
>1a04c8		e2 20 a9 1a 48 ab bd 00 00 f0 06 20 a1 03 e8 80
>1a04d8		f5 c2 30 2b ab 7a fa 68 28 60 08 e2 20 c9 5b b0
>1a04e8		04 c9 41 b0 0b c9 7b b0 04 c9 61 b0 03 28 18 60
>1a04f8		28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 03 28 18
>1a0508		60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 13 c9
>1a0518		67 b0 04 c9 61 b0 0b c9 47 b0 04 c9 41 b0 03 28
>1a0528		18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 12
>1a0538		c9 67 b0 04 c9 61 b0 0f c9 47 b0 04 c9 41 b0 09
>1a0548		28 60 38 e9 30 80 f9 29 df 38 e9 37 80 f2 08 e2
>1a0558		20 c9 7b b0 06 c9 61 90 02 29 df 28 60 08 e2 20
>1a0568		c2 10 bd 00 00 f0 09 20 56 05 9d 00 00 e8 80 f2
>1a0578		28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>1a0588		48 06 23 26 25 a5 23 85 0c a5 25 85 0e 06 0c 26
>1a0598		0e 06 0c 26 0e 18 a5 23 65 0c 85 23 a5 25 65 0e
>1a05a8		85 25 68 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>1a05b8		68 28 c2 20 a5 23 8f 1a 01 00 a9 0a 00 8f 18 01
>1a05c8		00 af 1c 01 00 85 23 64 25 af 1e 01 00 85 29 64
>1a05d8		2b e2 20 a9 00 85 27 85 2d 2b 28 60 08 0b 08 c2
>1a05e8		20 48 a9 00 08 5b 68 28 c2 20 a5 23 8f 1a 01 00
>1a05f8		a9 64 00 8f 18 01 00 af 1c 01 00 85 23 64 25 af
>1a0608		1e 01 00 85 29 64 2b e2 20 a9 00 85 27 85 2d 2b
>1a0618		28 60 08 c2 20 a5 23 d0 08 a5 25 d0 04 28 e2 02
>1a0628		60 28 c2 02 60 08 c2 30 a9 ff ff 85 23 85 25 e2
>1a0638		20 a9 00 85 27 28 60 08 c2 30 a9 00 00 85 23 85
>1a0648		25 e2 20 a9 00 85 27 28 60 08 e2 20 a5 27 c9 00
>1a0658		f0 07 c9 01 d0 05 20 ff 5b 28 60 08 c2 20 48 a9
>1a0668		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a0678		ff 00 20 5b 1e e2 20 dc d4 08 08 e2 20 a5 2d c9
>1a0688		00 f0 37 c9 01 d0 35 c2 20 a5 25 48 a5 23 48 c2
>1a0698		20 a5 29 85 23 a5 2b 85 25 e2 20 a9 01 85 27 20
>1a06a8		ff 5b c2 20 a5 23 85 29 a5 25 85 2b e2 20 a9 00
>1a06b8		85 2d c2 20 68 85 23 68 85 25 28 60 08 c2 20 48
>1a06c8		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>1a06d8		29 ff 00 20 5b 1e e2 20 dc d4 08 08 e2 20 a5 27
>1a06e8		c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a06f8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a0708		e2 20 dc d4 08 08 e2 20 a5 27 c9 00 f0 07 c9 01
>1a0718		d0 0b 20 ff 5b c2 20 a5 25 d0 21 28 60 08 c2 20
>1a0728		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a0738		20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2 20 48
>1a0748		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>1a0758		29 ff 00 20 5b 1e e2 20 dc d4 08 08 e2 20 a5 27
>1a0768		c9 00 f0 07 c9 01 d0 11 20 ff 5b a5 26 d0 29 a5
>1a0778		25 d0 25 a5 24 d0 21 28 60 08 c2 20 48 a9 00 08
>1a0788		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a0798		20 5b 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a07a8		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a07b8		5b 1e e2 20 dc d4 08 08 e2 20 a5 27 c9 01 f0 26
>1a07c8		c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a07d8		a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>1a07e8		dc d4 08 20 f9 5b 28 60 08 e2 20 a5 2d c9 01 f0
>1a07f8		26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a0808		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>1a0818		20 dc d4 08 20 21 08 28 60 c2 20 a5 25 48 a5 23
>1a0828		48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20 a9 00 85
>1a0838		27 20 f9 5b c2 20 a5 23 85 29 a5 25 85 2b e2 20
>1a0848		a9 01 85 2d c2 20 68 85 23 68 85 25 60 08 e2 20
>1a0858		a5 27 c9 00 f0 23 c9 01 f0 2e 08 c2 20 48 a9 00
>1a0868		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a0878		00 20 5b 1e e2 20 dc d4 08 a5 2d c9 00 f0 16 c9
>1a0888		01 d0 d7 20 f9 5b 80 0d a5 2d c9 01 f0 07 c9 00
>1a0898		d0 c8 20 21 08 e2 20 a5 27 28 60 08 e2 20 a5 27
>1a08a8		c9 02 d0 25 a5 2d c9 02 f0 24 08 c2 20 48 a9 00
>1a08b8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a08c8		00 20 5b 1e e2 20 dc d4 08 20 55 08 a5 27 28 60
>1a08d8		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 64 23
>1a08e8		64 25 e2 20 64 27 a7 00 c9 26 f0 44 e2 20 a7 00
>1a08f8		20 fb 04 90 76 20 7a 05 38 e9 30 c2 20 29 ff 00
>1a0908		18 65 23 85 23 a5 25 69 00 00 85 25 20 1a 21 80
>1a0918		db 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a0928		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a0938		20 1a 21 a7 00 c9 48 f0 04 c9 68 d0 d4 20 1a 21
>1a0948		e2 20 a7 00 20 0c 05 90 22 20 2d 05 c2 20 06 23
>1a0958		26 25 06 23 26 25 06 23 26 25 06 23 26 25 29 ff
>1a0968		00 18 65 23 85 23 20 1a 21 80 d5 2b 28 60 08 c2
>1a0978		30 a5 04 f0 1c 38 a5 04 e5 1a a8 e2 20 b7 1a f0
>1a0988		10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0 ff ff d0
>1a0998		ec a9 00 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>1a09a8		c2 30 a5 1a 85 00 e2 20 a5 1c 85 02 20 3b 21 a7
>1a09b8		00 20 fb 04 90 0c 20 d8 08 c2 20 a5 23 85 d7 20
>1a09c8		3b 21 c2 20 a5 00 85 1a e2 20 a5 02 85 1c 20 ea
>1a09d8		09 e2 20 20 5b 0a c9 00 f0 05 20 06 0c 80 f4 2b
>1a09e8		28 60 08 c2 20 a5 1a 85 00 a5 1c 85 02 a2 00 00
>1a09f8		e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0 53 c9 3a
>1a0a08		f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0 10 c9
>1a0a18		72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72 d0 1a c8
>1a0a28		b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7 00 f0
>1a0a38		20 c9 4d f0 0a c9 6d f0 06 e8 20 1a 21 80 b3 a7
>1a0a48		00 c9 3a d0 03 20 1a 21 a9 03 85 1e a9 91 20 06
>1a0a58		0c 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a0a68		20 a9 7f 85 1e c2 10 20 bb 0b a5 1e d0 03 4c fb
>1a0a78		0a c2 20 a5 1a 85 00 e2 20 a5 1c 85 02 c2 20 64
>1a0a88		04 64 06 e2 30 a0 00 b7 00 f0 da c9 91 f0 d6 c8
>1a0a98		c4 1e 90 f3 c2 10 a7 00 c9 22 d0 05 20 1d 0b 80
>1a0aa8		28 a5 1e c9 03 90 19 c2 20 a5 00 c5 1a d0 08 e2
>1a0ab8		20 a5 02 c5 1c f0 09 e2 20 a7 04 20 42 51 b0 09
>1a0ac8		e2 20 20 2d 0b c9 00 d0 11 c2 20 a5 00 85 04 e2
>1a0ad8		20 a5 02 85 06 20 1a 21 80 a9 c9 81 d0 15 20 76
>1a0ae8		09 c9 00 f0 11 89 80 f0 08 c9 90 f0 04 a9 af 80
>1a0af8		02 a9 81 2b 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a0b08		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a0b18		e2 20 dc d4 08 08 e2 20 20 1a 21 a7 00 f0 04 c9
>1a0b28		22 d0 f5 28 60 da 5a 08 0b 08 c2 20 48 a9 00 08
>1a0b38		5b 68 28 c2 20 a5 04 d0 0a e2 20 a5 04 d0 04 a9
>1a0b48		00 80 0a e2 20 a7 04 20 42 51 a9 00 2a 85 28 c2
>1a0b58		30 a9 fb 0c 85 08 e2 20 a9 1a 85 0a a2 80 00 e2
>1a0b68		20 a0 01 00 b7 08 f0 31 c5 1e d0 32 c2 30 a0 02
>1a0b78		00 b7 08 85 0c e2 20 a9 1a 85 0e a5 28 f0 07 a7
>1a0b88		0c 20 42 51 b0 18 e2 10 a0 00 b7 00 20 56 05 d7
>1a0b98		0c d0 0b c8 c4 1e 90 f2 8a 2b 28 7a fa 60 c2 30
>1a0ba8		18 a5 08 69 08 00 85 08 e2 20 a5 0a 69 00 85 0a
>1a0bb8		e8 80 ac 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>1a0bc8		c2 30 a9 fb 0c 85 08 a9 1a 00 85 0a 64 0c e2 20
>1a0bd8		a0 01 00 b7 08 f0 1d c5 1e b0 06 c5 0c 90 02 85
>1a0be8		0c c2 20 18 a5 08 69 08 00 85 08 a5 0a 69 00 00
>1a0bf8		85 0a 80 da e2 20 a5 0c 85 1e ab 2b 28 60 08 0b
>1a0c08		08 c2 20 48 a9 00 08 5b 68 28 e2 20 87 00 c2 20
>1a0c18		18 a5 00 69 01 00 85 08 a5 02 69 00 00 85 0a e2
>1a0c28		10 a4 1e 88 e2 20 b7 08 87 08 f0 13 c2 20 18 a5
>1a0c38		08 69 01 00 85 08 a5 0a 69 00 00 85 0a 80 e5 2b
>1a0c48		28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69 fb 0c aa
>1a0c58		28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>1a0c68		e2 20 48 a9 1a 48 ab 68 28 e2 20 c2 10 20 4a 0c
>1a0c78		bd 00 00 c2 20 29 0f 00 2b ab 28 60 08 8b 0b 08
>1a0c88		c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 1a 48
>1a0c98		ab 68 28 c2 30 20 4a 0c bd 04 00 2b ab 28 60 08
>1a0ca8		8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>1a0cb8		a9 1a 48 ab 68 28 e2 20 c2 10 20 4a 0c bd 00 00
>1a0cc8		c2 20 29 f0 00 2b ab 28 60 08 8b 0b 08 c2 20 48
>1a0cd8		a9 00 08 5b 68 28 08 e2 20 48 a9 1a 48 ab 68 28
>1a0ce8		e2 20 c2 10 20 4a 0c bd 06 00 c2 20 29 ff 00 2b
>1a0cf8		ab 28 60 03 01 10 d0 d8 27 02 00 03 01 12 d0 18
>1a0d08		28 02 00 02 01 14 d0 4f 28 02 00 02 01 16 d0 86
>1a0d18		28 02 00 02 03 18 d0 90 28 02 00 00 01 1c d0 a3
>1a0d28		28 02 00 04 02 1e d0 61 2a 02 00 04 02 21 d0 21
>1a0d38		2a 02 00 04 02 24 d0 e1 29 02 00 04 01 27 d0 21
>1a0d48		29 02 00 04 01 29 d0 a1 29 02 00 04 01 2b d0 61
>1a0d58		29 02 00 05 03 2d d0 0b 29 01 00 06 03 31 d0 dd
>1a0d68		28 02 00 07 02 35 d0 f4 28 02 00 ff 01 38 d0 00
>1a0d78		00 00 00 40 01 3a d0 00 00 00 00 20 03 3c d0 74
>1a0d88		41 00 00 20 05 40 d0 79 45 00 00 20 03 46 d0 c4
>1a0d98		44 00 00 20 04 4a d0 64 44 00 00 20 03 4f d0 5b
>1a0da8		44 00 00 20 02 53 d0 f3 43 00 00 50 04 56 d0 00
>1a0db8		00 00 00 50 04 5b d0 00 00 00 00 20 05 60 d0 36
>1a0dc8		43 00 00 20 06 66 d0 af 43 00 00 20 03 6d d0 8b
>1a0dd8		41 00 00 50 02 71 d0 00 00 00 00 50 04 74 d0 00
>1a0de8		00 00 00 20 04 79 d0 7f 42 00 00 20 02 7e d0 85
>1a0df8		41 00 00 20 04 81 d0 88 41 00 00 50 05 86 d0 00
>1a0e08		00 00 00 50 05 8c d0 00 00 00 00 20 04 92 d0 82
>1a0e18		41 00 00 20 03 97 d0 ba 44 00 00 20 04 9b d0 55
>1a0e28		41 00 00 20 04 a0 d0 e5 40 00 00 20 05 a5 d0 7b
>1a0e38		40 00 00 20 05 ab d0 08 40 00 00 20 03 b1 d0 04
>1a0e48		40 00 00 20 04 b5 d0 e5 3e 00 00 20 04 ba d0 f7
>1a0e58		3f 00 00 20 07 bf d0 fb 3f 00 00 20 03 c7 d0 38
>1a0e68		3e 00 00 20 04 cb d0 a1 3d 00 00 00 01 d0 d0 a1
>1a0e78		2a 01 00 30 03 d2 d0 91 4b 00 00 30 04 d6 d0 e1
>1a0e88		4b 00 00 30 05 db d0 aa 4c 00 00 30 05 e1 d0 37
>1a0e98		4c 00 00 30 04 e7 d0 09 4d 00 00 30 03 ec d0 5e
>1a0ea8		4d 00 00 30 03 f0 d0 a3 4d 00 00 30 03 f4 d0 2c
>1a0eb8		4e 00 00 30 03 f8 d0 b5 4e 00 00 30 03 fc d0 17
>1a0ec8		4f 00 00 30 04 00 d1 03 4b 00 00 30 03 05 d1 a2
>1a0ed8		4a 00 00 30 04 09 d1 54 4a 00 00 30 03 0e d1 fe
>1a0ee8		49 00 00 30 05 12 d1 35 49 00 00 30 06 18 d1 54
>1a0ef8		48 00 00 30 04 1f d1 9f 47 00 00 10 03 24 d1 7e
>1a0f08		50 00 00 10 03 28 d1 49 50 00 00 10 04 2c d1 52
>1a0f18		6c 00 00 10 04 31 d1 95 50 00 00 10 03 36 d1 79
>1a0f28		69 00 00 20 05 3a d1 24 6b 00 00 10 04 40 d1 ff
>1a0f38		6b 00 00 20 05 45 d1 0b 6d 00 00 20 03 4b d1 2a
>1a0f48		6e 00 00 10 04 4f d1 97 6d 00 00 20 06 54 d1 a0
>1a0f58		6e 00 00 20 04 5b d1 c4 6f 00 00 10 07 60 d1 46
>1a0f68		50 00 00 20 03 68 d1 2f 3d 00 00 20 05 6c d1 3f
>1a0f78		3c 00 00 20 09 72 d1 60 2c 00 00 20 09 7c d1 ed
>1a0f88		2b 00 00 20 0a 86 d1 1d 2c 00 00 20 07 91 d1 5a
>1a0f98		2b 00 00 30 08 99 d1 56 46 00 00 20 07 a2 d1 ef
>1a0fa8		2a 00 00 30 08 aa d1 c0 46 00 00 20 08 b3 d1 a5
>1a0fb8		2d 00 00 20 08 bc d1 d9 2c 00 00 20 06 c5 d1 df
>1a0fc8		2e 00 00 20 09 cc d1 e7 2f 00 00 20 04 d6 d1 44
>1a0fd8		31 00 00 20 04 db d1 b5 31 00 00 20 04 e0 d1 4e
>1a0fe8		32 00 00 20 06 e5 d1 8a 33 00 00 20 08 ec d1 28
>1a0ff8		34 00 00 20 0a f5 d1 76 34 00 00 20 07 00 d2 ad
>1a1008		35 00 00 20 07 08 d2 2b 36 00 00 20 08 10 d2 9d
>1a1018		36 00 00 20 06 19 d2 da 36 00 00 20 07 20 d2 0a
>1a1028		3a 00 00 50 06 28 d2 00 00 00 00 50 04 2f d2 00
>1a1038		00 00 00 20 06 34 d2 1f 3c 00 00 30 03 3b d2 6d
>1a1048		4f 00 00 30 03 3f d2 25 47 00 00 30 03 43 d2 80
>1a1058		4f 00 00 30 03 47 d2 96 4f 00 00 30 03 4b d2 ac
>1a1068		4f 00 00 30 02 4f d2 c2 4f 00 00 30 04 52 d2 d8
>1a1078		4f 00 00 30 04 57 d2 ee 4f 00 00 30 04 5c d2 04
>1a1088		50 00 00 30 03 61 d2 1a 50 00 00 30 03 65 d2 30
>1a1098		50 00 00 30 05 69 d2 7b 47 00 00 00 00 00 00 00
>1a10a8		00 00 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a10b8		30 a9 ff ff 85 ba e2 20 a9 17 85 bc c2 20 64 b7
>1a10c8		64 bd e2 20 64 b9 64 bf 2b 28 60 5a 08 e2 20 85
>1a10d8		ea c2 10 86 8f c2 20 a5 0e 48 a5 0c 48 a5 12 48
>1a10e8		a5 10 48 20 83 11 b0 03 20 07 11 20 0f 13 c2 20
>1a10f8		68 85 10 68 85 12 68 85 0c 68 85 0e 28 7a 60 08
>1a1108		0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a6 8f ca
>1a1118		86 0c e8 c2 30 38 a5 ba e5 0c 85 c0 e2 20 a5 bc
>1a1128		e9 00 85 c2 20 0f 13 e2 20 a5 ea a0 00 00 97 c3
>1a1138		a9 00 a0 01 00 97 c3 a0 02 00 97 c3 c2 20 a9 00
>1a1148		00 97 c3 c2 20 18 a5 ba 69 01 00 a0 05 00 97 c3
>1a1158		e2 20 c8 c8 a5 bc 69 00 97 c3 c2 20 a5 c0 85 b7
>1a1168		e2 20 a5 c2 85 b9 c2 20 38 a5 c3 e9 01 00 85 ba
>1a1178		e2 20 a5 c5 e9 00 85 bc 2b 28 60 08 0b 08 c2 20
>1a1188		48 a9 00 08 5b 68 28 c2 30 c2 20 a5 bd 85 c9 e2
>1a1198		20 a5 bf 85 cb a5 c9 d0 17 e2 20 a5 cb d0 11 c2
>1a11a8		20 a9 00 00 85 cf e2 20 a9 00 85 d1 2b 28 18 60
>1a11b8		c2 20 a0 05 00 b7 c9 85 cc e2 20 c8 c8 b7 c9 85
>1a11c8		ce c2 20 18 a5 c9 65 8f 85 0c e2 20 a5 cb 69 00
>1a11d8		85 0e c2 20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e
>1a11e8		69 00 85 0e c2 20 a5 0c c5 cc d0 28 e2 20 a5 0e
>1a11f8		c5 ce d0 20 c2 20 a5 cf d0 5d e2 20 a5 d1 d0 57
>1a1208		c2 20 a0 02 00 b7 c9 85 bd e2 20 c8 c8 b7 c9 85
>1a1218		bf 4c c0 12 c2 20 a5 0c 69 08 00 85 10 e2 20 a5
>1a1228		0e 69 00 85 12 e2 20 a5 c6 c5 10 b0 3e 90 08 c2
>1a1238		20 a5 c6 c5 10 b0 34 c2 20 a5 c9 85 cf e2 20 a5
>1a1248		cb 85 d1 c2 20 a0 02 00 b7 cf 85 c9 e2 20 c8 c8
>1a1258		b7 cf 85 cb 4c 9d 11 c2 20 a0 02 00 b7 c9 97 cf
>1a1268		e2 20 c8 c8 b7 c9 97 cf 4c c0 12 c2 20 a0 05 00
>1a1278		b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a0 02
>1a1288		00 b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a5
>1a1298		cf d0 14 e2 20 a5 cf d0 0e c2 20 a5 0c 85 bd e2
>1a12a8		20 a5 0e 85 bf 80 11 c2 20 a0 02 00 a5 0c 97 cf
>1a12b8		e2 20 c8 c8 a5 0e 97 cf c2 20 a5 c9 85 c3 e2 20
>1a12c8		a5 cb 85 c5 c2 20 a5 c3 85 b7 e2 20 a5 c5 85 b9
>1a12d8		c2 20 a0 05 00 a5 0c 97 c3 e2 20 c8 c8 a5 0e 97
>1a12e8		c3 c2 20 a0 02 00 a9 00 00 97 c3 e2 20 c8 c8 97
>1a12f8		c3 e2 20 a5 ea e2 20 a0 00 00 97 c3 a0 01 00 a9
>1a1308		00 97 c3 2b 28 38 60 08 c2 20 38 a5 c0 e9 08 00
>1a1318		85 c3 e2 20 a5 c2 e9 00 85 c5 28 60 08 e2 20 a5
>1a1328		c5 f0 04 c9 18 b0 12 c2 20 a5 c3 f0 0c e2 20 a0
>1a1338		01 00 b7 c3 1a 97 c3 28 60 00 ea 08 e2 20 a5 c5
>1a1348		f0 04 c9 18 b0 17 c2 20 a5 c3 f0 11 e2 20 a0 01
>1a1358		00 b7 c3 3a 97 c3 d0 03 20 67 13 28 60 00 ea 08
>1a1368		c2 20 a5 bd d0 21 e2 20 a5 bf d0 1b a5 c5 85 bf
>1a1378		c2 20 a5 c3 85 bd a9 00 00 a0 02 00 97 c3 c8 c8
>1a1388		e2 20 97 c3 4c 4e 14 e2 20 a5 bf c5 c5 90 28 c2
>1a1398		20 a5 bd c5 c3 90 20 c2 20 a5 bd a0 02 00 97 c3
>1a13a8		e2 20 c8 c8 a5 bf 97 c3 c2 20 a5 c3 85 bd e2 20
>1a13b8		a5 c5 85 bf 4c 4e 14 c2 20 a5 bd 85 08 e2 20 a5
>1a13c8		bf 85 0a e2 20 a0 04 00 b7 08 c5 c8 90 32 d0 0b
>1a13d8		c2 20 a0 02 00 b7 08 c5 c6 90 25 c2 20 a0 02 00
>1a13e8		b7 08 97 c3 e2 20 c8 c8 b7 08 97 c3 c2 20 a5 c3
>1a13f8		a0 02 00 97 08 e2 20 a5 c5 c8 c8 97 08 4c 4e 14
>1a1408		c2 20 a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0
>1a1418		19 c2 20 a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08
>1a1428		85 0a c2 20 a5 0c 85 08 80 99 c2 20 a5 c3 a0 02
>1a1438		00 97 08 e2 20 c8 c8 a5 c5 97 08 a9 00 97 c3 c2
>1a1448		20 a0 02 00 97 c3 20 53 14 28 60 08 c2 20 a5 bd
>1a1458		85 c3 e2 20 a5 bf 85 c5 c2 20 a5 c3 d0 09 e2 20
>1a1468		a5 c5 d0 03 4c f6 14 c2 20 a0 02 00 b7 c3 85 0c
>1a1478		e2 20 c8 c8 b7 c3 85 0e c2 20 a0 05 00 b7 c3 85
>1a1488		10 e2 20 c8 c8 b7 c3 85 12 c2 20 a5 0c c5 10 d0
>1a1498		08 e2 20 a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c3
>1a14a8		85 0c e2 20 c8 c8 b7 c3 85 0e c2 20 a5 0c 85 c3
>1a14b8		e2 20 a5 0e 85 c5 80 a0 c2 20 a0 02 00 b7 c3 85
>1a14c8		0c e2 20 c8 c8 b7 c3 85 0e c2 20 a0 02 00 b7 0c
>1a14d8		97 c3 e2 20 c8 c8 b7 0c 97 c3 c2 20 a0 05 00 b7
>1a14e8		0c 97 c3 e2 20 c8 c8 b7 0c 97 c3 4c 6f 14 28 60
>1a14f8		08 c2 20 64 16 64 18 28 60 08 c2 30 a5 16 d0 16
>1a1508		a5 18 d0 12 e2 20 64 16 a5 e2 1a 1a 85 17 a5 e3
>1a1518		85 18 64 19 80 07 c2 20 a5 17 1a 85 17 c2 20 a5
>1a1528		bb 3a c5 17 f0 02 b0 1f 08 c2 20 48 a9 00 08 5b
>1a1538		68 28 e2 20 a9 03 8f d3 08 00 c2 20 29 ff 00 20
>1a1548		5b 1e e2 20 dc d4 08 28 60 c9 00 d0 05 c0 01 00
>1a1558		f0 05 09 30 97 16 c8 60 08 c2 30 64 0c a5 25 10
>1a1568		1a 18 a5 23 49 ff ff 69 01 00 85 23 a5 25 49 ff
>1a1578		ff 69 00 00 85 25 a9 ff ff 85 0c 64 10 64 12 64
>1a1588		14 a2 1f 00 f8 06 23 26 25 a5 10 65 10 85 10 a5
>1a1598		12 65 12 85 12 a5 14 65 14 85 14 ca 10 e7 d8 e2
>1a15a8		20 20 01 15 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9
>1a15b8		20 97 16 c8 a2 05 00 b5 10 29 f0 4a 4a 4a 4a 20
>1a15c8		51 15 b5 10 29 0f 20 51 15 ca 10 eb c0 01 00 d0
>1a15d8		0c a9 20 87 16 a0 01 00 a9 30 97 16 c8 a9 00 97
>1a15e8		16 28 60 00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00
>1a15f8		f0 04 e8 c8 80 f7 28 60 08 0b 08 c2 20 48 a9 00
>1a1608		08 5b 68 28 e2 20 c2 10 a0 00 00 b7 23 d0 04 b7
>1a1618		29 f0 25 b7 23 d7 29 90 12 d0 03 c8 80 ed c2 20
>1a1628		a9 01 00 85 23 e2 20 64 25 80 15 c2 20 a9 ff ff
>1a1638		85 23 e2 20 85 25 80 08 c2 20 64 23 e2 20 64 25
>1a1648		e2 20 a9 00 85 27 2b 28 60 08 0b 8b 08 c2 20 48
>1a1658		a9 00 08 5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20
>1a1668		a5 25 48 ab c2 20 68 28 a6 23 20 ed 15 84 0c 08
>1a1678		c2 20 48 e2 20 a5 2b 48 ab c2 20 68 28 a6 29 20
>1a1688		ed 15 c2 20 98 38 65 0c aa e2 20 a9 02 20 d3 10
>1a1698		c2 20 a5 b7 85 08 e2 20 a5 b9 85 0a a0 00 00 08
>1a16a8		c2 20 48 e2 20 a5 25 48 ab c2 20 68 28 a6 23 bd
>1a16b8		00 00 f0 06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48
>1a16c8		e2 20 a5 2b 48 ab c2 20 68 28 a6 29 bd 00 00 97
>1a16d8		08 f0 04 e8 c8 80 f5 c2 20 a5 08 85 23 e2 20 a5
>1a16e8		0a 85 25 a9 02 85 27 ab 2b 28 60 da 5a 08 0b 8b
>1a16f8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 0a 48 a5
>1a1708		08 48 c2 30 08 c2 20 48 e2 20 a5 25 48 ab c2 20
>1a1718		68 28 a6 23 20 ed 15 98 aa e8 e2 20 a9 02 20 d3
>1a1728		10 c2 20 a5 c0 85 08 a5 c2 85 0a a0 00 00 e2 20
>1a1738		b7 23 97 08 f0 03 c8 80 f7 c2 20 a5 08 85 23 a5
>1a1748		0a 85 25 c2 20 68 85 08 68 85 0a ab 2b 28 7a fa
>1a1758		60 08 e2 20 c2 10 a0 00 00 b7 23 f0 05 c8 80 f9
>1a1768		84 92 c2 30 c4 29 90 13 f0 11 a5 8f 30 0d f0 0b
>1a1778		c4 8f b0 12 a5 29 d0 0e 4c d7 17 20 01 15 e2 20
>1a1788		a9 00 87 16 80 39 20 01 15 c2 30 18 a5 23 65 29
>1a1798		85 23 a5 25 69 00 00 85 25 a0 00 00 e2 20 a7 23
>1a17a8		97 16 f0 1b c2 20 18 a5 23 69 01 00 85 23 a5 25
>1a17b8		69 00 00 85 25 c8 c4 8f d0 e2 a9 00 00 97 16 c2
>1a17c8		20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28
>1a17d8		60 08 c2 30 20 00 16 a5 23 c9 ff ff d0 05 20 2d
>1a17e8		06 80 03 20 3f 06 28 60 08 c2 30 20 00 16 a5 23
>1a17f8		c9 01 00 d0 05 20 2d 06 80 03 20 3f 06 28 60 08
>1a1808		c2 30 20 00 16 a5 23 c9 00 00 d0 05 20 2d 06 80
>1a1818		03 20 3f 06 28 60 08 c2 30 20 00 16 a5 23 c9 00
>1a1828		00 f0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2 30
>1a1838		20 00 16 a5 23 c9 ff ff f0 05 20 2d 06 80 03 20
>1a1848		3f 06 28 60 08 c2 30 20 00 16 a5 23 c9 01 00 f0
>1a1858		05 20 2d 06 80 03 20 3f 06 28 60 08 e2 20 a5 27
>1a1868		c9 02 d0 1d a5 23 d0 19 a5 24 d0 15 a5 25 d0 11
>1a1878		20 01 15 a9 00 87 16 c2 20 a5 16 85 23 a5 18 85
>1a1888		25 28 60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>1a1898		28 c2 30 a9 00 00 85 00 85 1a a9 16 00 85 02 85
>1a18a8		1c 22 3c 11 00 b0 20 a0 02 00 b7 1a f0 0f c5 55
>1a18b8		90 10 c5 59 f0 02 b0 05 20 ee 18 80 e4 28 2b 7a
>1a18c8		68 60 20 f7 21 80 da 08 c2 20 48 a9 00 08 5b 68
>1a18d8		28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20 5b
>1a18e8		1e e2 20 dc d4 08 08 c2 30 85 23 64 25 20 60 15
>1a18f8		a5 16 1a 85 23 a5 18 85 25 20 f5 45 18 a5 1a 69
>1a1908		04 00 85 00 a5 1c 69 00 00 85 02 e2 20 a9 20 20
>1a1918		18 00 c2 20 20 2d 19 90 fb e2 20 a9 0d 20 18 00
>1a1928		20 f7 21 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>1a1938		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>1a1948		a7 00 f0 3a 30 05 20 18 00 80 29 c2 20 29 7f 00
>1a1958		0a 0a 0a 18 69 fb 0c 85 08 a9 1a 00 69 00 00 85
>1a1968		0a 08 e2 20 48 a9 1a 48 ab 68 28 a0 02 00 b7 08
>1a1978		aa 20 64 04 c2 20 20 1a 21 ab 2b 28 18 60 ab 2b
>1a1988		28 38 60 08 c2 20 a9 ff 6f 85 1f a9 ff 7f 85 21
>1a1998		a9 ff ff 85 23 85 25 85 29 85 2b e2 20 85 27 85
>1a19a8		2d 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>1a19b8		08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a a4 1f bd
>1a19c8		00 00 99 00 00 bd 02 00 99 02 00 e2 20 bd 04 00
>1a19d8		99 04 00 c2 20 38 98 e9 05 00 85 1f 7a ab 2b 28
>1a19e8		60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>1a19f8		20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5 1f 69 05
>1a1a08		00 85 1f a8 b9 00 00 9d 00 00 b9 02 00 9d 02 00
>1a1a18		e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab 2b 28 60
>1a1a28		08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>1a1a38		48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 21 99 00
>1a1a48		00 88 84 21 7a ab 2b 28 60 08 0b 8b 08 c2 20 48
>1a1a58		a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>1a1a68		e2 20 c2 10 5a a4 21 c8 84 21 b9 00 00 c2 20 29
>1a1a78		ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20 28 1a 28
>1a1a88		60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68 28 e2 20
>1a1a98		a4 21 b9 01 00 c9 01 d0 08 c2 20 e6 21 ab 28 7a
>1a1aa8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a1ab8		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a1ac8		48 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>1a1ad8		20 48 a9 00 48 ab 68 28 e2 20 a4 21 c0 ff 7f f0
>1a1ae8		11 20 5a 0c 85 0c b9 01 00 20 5a 0c c5 0c f0 02
>1a1af8		90 08 c2 20 ab 2b 28 68 18 60 c2 20 ab 2b 28 68
>1a1b08		38 60 08 e2 20 a9 00 8f 00 4d 00 a2 01 00 20 09
>1a1b18		1d 20 51 06 c2 20 a5 23 9f 00 4d 00 e2 20 af 00
>1a1b28		4d 00 1a 30 3e 8f 00 4d 00 e8 e8 20 3b 21 e2 20
>1a1b38		a7 00 c9 90 f0 09 c9 2c d0 0a 20 1a 21 80 cf 20
>1a1b48		1a 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a1b58		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>1a1b68		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a1b78		0a 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a1b88		d4 08 08 20 15 54 90 47 e2 20 a5 ea 29 80 d0 06
>1a1b98		20 16 52 4c d5 1b 20 88 51 90 53 c2 20 a5 c2 48
>1a1ba8		a5 c0 48 a0 09 00 b7 08 85 c0 e2 20 c8 c8 b7 08
>1a1bb8		85 c2 e2 20 a9 8f 20 27 22 20 7f 1a 20 0a 1b 20
>1a1bc8		ec 68 20 89 1a c2 20 68 85 c2 68 85 c0 28 60 08
>1a1bd8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a1be8		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>1a1bf8		20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00
>1a1c08		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 0b 08
>1a1c18		c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 20 1a 21
>1a1c28		a0 00 00 b7 00 f0 24 c9 22 f0 03 c8 80 f5 84 0c
>1a1c38		e2 20 a9 02 a6 0c e8 20 01 15 a0 00 00 c4 0c f0
>1a1c48		29 a7 00 97 16 c8 20 1a 21 80 f2 08 c2 20 48 a9
>1a1c58		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>1a1c68		ff 00 20 5b 1e e2 20 dc d4 08 a9 00 97 16 c2 20
>1a1c78		a5 16 85 23 a5 18 85 25 a9 02 00 85 27 20 1a 21
>1a1c88		2b 28 60 08 e2 20 a7 00 c2 20 29 ff 00 20 84 0c
>1a1c98		85 2f 20 7f 1a 08 e2 20 48 a9 00 48 ab 68 28 20
>1a1ca8		af 1c 20 89 1a 28 60 20 1a 21 6c 2f 08 48 08 0b
>1a1cb8		8b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20 51 1a
>1a1cc8		89 80 00 f0 37 48 20 84 0c 85 2f 68 20 d1 0c c9
>1a1cd8		01 00 f0 08 c2 30 a2 29 08 20 e9 19 c2 30 a2 23
>1a1ce8		08 20 e9 19 08 e2 20 48 a9 00 48 ab 68 28 20 06
>1a1cf8		1d a2 23 08 20 ab 19 ab 2b 28 68 60 00 ea 6c 2f
>1a1d08		08 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>1a1d18		a9 00 48 ab 68 28 c2 10 da e2 20 a7 00 d0 03 4c
>1a1d28		cc 1d 30 33 c9 20 d0 03 4c c6 1d c9 3a b0 04 c9
>1a1d38		30 b0 56 c9 26 f0 52 c9 22 d0 03 4c df 1d c9 5b
>1a1d48		b0 07 c9 41 90 03 4c eb 1d c9 7b b0 07 c9 61 90
>1a1d58		03 4c eb 1d 4c cc 1d c9 8f f0 40 c9 90 f0 41 20
>1a1d68		a7 0c c9 30 d0 0c 20 8b 1c a2 23 08 20 ab 19 4c
>1a1d78		21 1d c9 00 d0 4e a7 00 a6 21 e0 ff 7f f0 05 20
>1a1d88		c8 1a b0 12 20 28 1a 80 35 c2 20 20 37 5a a2 23
>1a1d98		08 20 ab 19 80 83 20 b5 1c 80 dd 20 28 1a 80 1e
>1a1da8		e2 20 a4 21 c0 ff 7f f0 46 a4 21 b9 01 00 c9 01
>1a1db8		f0 3d c9 8f f0 05 20 b5 1c 80 ee 20 51 1a 20 1a
>1a1dc8		21 4c 21 1d a6 21 e0 ff 7f b0 24 bd 01 00 c9 01
>1a1dd8		f0 1d 20 b5 1c 80 ed 20 15 1c a2 23 08 20 ab 19
>1a1de8		4c 21 1d 20 8a 1b a2 23 08 20 ab 19 4c 21 1d a2
>1a1df8		23 08 20 e9 19 fa 28 60 08 0b 8b 08 e2 20 48 a9
>1a1e08		00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a1e18		30 a9 fd 5f 85 33 ab 2b 28 60 08 0b 08 c2 20 48
>1a1e28		a9 00 08 5b 68 28 c2 30 92 33 c6 33 c6 33 2b 28
>1a1e38		60 08 c2 30 29 ff 00 20 22 1e 28 60 08 0b 08 c2
>1a1e48		20 48 a9 00 08 5b 68 28 c2 30 e6 33 e6 33 b2 33
>1a1e58		2b 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a1e68		08 e2 20 48 a9 00 48 ab 68 28 c2 20 85 23 a9 00
>1a1e78		00 85 25 e2 20 a9 00 85 27 85 ea a9 1a 85 e9 c2
>1a1e88		20 a9 b5 1e 85 e7 20 78 53 c2 20 a5 d7 85 23 a5
>1a1e98		d9 85 25 e2 20 a9 00 85 27 85 ea a9 1a 85 e9 c2
>1a1ea8		20 a9 b9 1e 85 e7 20 78 53 28 2b ab 60 45 52 52
>1a1eb8		00 45 52 4c 00 e2 20 c2 10 20 d7 03 af d3 08 00
>1a1ec8		0a c2 20 29 ff 00 a8 08 e2 20 48 a9 1a 48 ab 68
>1a1ed8		28 be 0f 1f 20 64 04 c2 20 a5 d7 f0 27 a2 3f 1f
>1a1ee8		20 64 04 08 e2 20 48 a9 00 48 ab 68 28 c2 20 af
>1a1ef8		d7 08 00 8f 23 08 00 a9 00 00 8f 25 08 00 20 13
>1a1f08		46 20 d7 03 4c b5 27 43 1f 46 1f 4c 1f 59 1f 67
>1a1f18		1f 75 1f 88 1f 9e 1f ae 1f bd 1f ca 1f db 1f ea
>1a1f28		1f f7 1f 05 20 14 20 25 20 3e 20 52 20 66 20 7c
>1a1f38		20 90 20 ab 20 c3 20 20 61 74 00 4f 4b 00 42 72
>1a1f48		65 61 6b 00 53 79 6e 74 61 78 20 65 72 72 6f 72
>1a1f58		00 4f 75 74 20 6f 66 20 6d 65 6d 6f 72 79 00 54
>1a1f68		79 70 65 20 6d 69 73 6d 61 74 63 68 00 56 61 72
>1a1f78		69 61 62 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00
>1a1f88		4c 69 6e 65 20 6e 75 6d 62 65 72 20 6e 6f 74 20
>1a1f98		66 6f 75 6e 64 00 53 74 61 63 6b 20 75 6e 64 65
>1a1fa8		72 66 6c 6f 77 00 53 74 61 63 6b 20 6f 76 65 72
>1a1fb8		66 6c 6f 77 00 4f 75 74 20 6f 66 20 72 61 6e 67
>1a1fc8		65 00 49 6c 6c 65 67 61 6c 20 61 72 67 75 6d 65
>1a1fd8		6e 74 00 46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e
>1a1fe8		64 00 4e 6f 74 20 61 20 6e 75 6d 62 65 72 00 4d
>1a1ff8		61 74 68 20 6f 76 65 72 66 6c 6f 77 00 4d 61 74
>1a2008		68 20 75 6e 64 65 72 66 6c 6f 77 00 44 69 76 69
>1a2018		73 69 6f 6e 20 62 79 20 7a 65 72 6f 00 55 6e 61
>1a2028		62 6c 65 20 74 6f 20 72 65 61 64 20 64 69 72 65
>1a2038		63 74 6f 72 79 00 55 6e 61 62 6c 65 20 74 6f 20
>1a2048		6c 6f 61 64 20 66 69 6c 65 00 55 6e 61 62 6c 65
>1a2058		20 74 6f 20 73 61 76 65 20 66 69 6c 65 00 55 6e
>1a2068		61 62 6c 65 20 74 6f 20 64 65 6c 65 74 65 20 66
>1a2078		69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74 20 66 69
>1a2088		6e 64 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f
>1a2098		74 20 75 70 64 61 74 65 20 64 69 72 65 63 74 6f
>1a20a8		72 79 00 43 6f 75 6c 64 20 6e 6f 74 20 63 6f 70
>1a20b8		79 20 74 68 65 20 66 69 6c 65 00 41 72 67 75 6d
>1a20c8		65 6e 74 20 6f 75 74 73 69 64 65 20 64 6f 6d 61
>1a20d8		69 6e 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a20e8		20 a9 00 85 d2 2b 28 60 0b 08 08 c2 20 48 a9 00
>1a20f8		08 5b 68 28 08 c2 20 a9 bd 1e 8f d4 08 00 e2 20
>1a2108		a9 1a 8f d6 08 00 28 20 ba 44 20 fb 3f 64 31 28
>1a2118		2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>1a2128		18 a5 00 69 01 00 85 00 e2 20 a5 02 69 00 85 02
>1a2138		2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a2148		20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02 80 05 20
>1a2158		1a 21 80 ed 2b 28 60 08 e2 20 a7 00 f0 09 c9 3a
>1a2168		f0 05 20 1a 21 80 f3 28 60 08 e2 20 64 36 a7 00
>1a2178		f0 19 c5 37 f0 2c c9 9b f0 1e c9 9f f0 1a c9 9e
>1a2188		f0 1a c9 a0 f0 16 20 1a 21 80 e3 20 f7 21 c2 20
>1a2198		a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea c6 36 30 30
>1a21a8		80 e4 a5 35 30 06 a5 36 f0 02 80 da 20 1a 21 28
>1a21b8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a21c8		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a21d8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>1a21e8		08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08
>1a21f8		c2 30 a0 00 00 b7 1a 85 0c 18 a5 1a 65 0c 85 1a
>1a2208		a5 1c 69 00 00 85 1c a0 02 00 b7 1a 85 d7 18 a5
>1a2218		1a 69 04 00 85 00 a5 1c 69 00 00 85 02 28 60 08
>1a2228		e2 20 48 20 3b 21 68 e2 20 c7 00 d0 08 20 1a 21
>1a2238		20 3b 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a2248		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>1a2258		20 dc d4 08 08 e2 20 20 3b 21 e2 20 a7 00 f0 10
>1a2268		c9 3a f0 0c c5 37 f0 05 20 1a 21 80 ef 28 38 60
>1a2278		28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0 0d c9 3a
>1a2288		f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a 60 08 0b
>1a2298		8b 08 c2 20 48 a9 00 08 5b 68 28 20 f8 14 20 8b
>1a22a8		19 e2 20 a9 00 85 dc 22 3c 11 00 b0 4b a7 00 c9
>1a22b8		3a d0 03 20 1a 21 20 3b 21 a7 00 d0 03 4c 4a 23
>1a22c8		20 e2 04 b0 52 a7 00 10 10 20 a7 0c 85 0c c9 20
>1a22d8		d0 03 4c 38 23 a5 d2 f0 51 08 c2 20 48 a9 00 08
>1a22e8		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a22f8		20 5b 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a2308		68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20
>1a2318		5b 1e e2 20 dc d4 08 20 c4 44 4c 4a 23 08 e2 20
>1a2328		48 a9 00 48 ab 68 28 6c 2f 08 a5 0c c9 10 d0 a9
>1a2338		a7 00 20 84 0c c2 20 85 2f 20 8b 19 20 1a 21 20
>1a2348		25 23 ab 2b 28 60 08 58 20 db 20 20 00 1e e2 20
>1a2358		9c 8a 0f c2 20 a5 1a 85 00 a5 1c 85 02 4c 8c 23
>1a2368		08 c2 20 a0 02 00 b7 1a 85 d7 e2 20 a5 dc c9 03
>1a2378		f0 12 c2 20 18 a5 1a 69 04 00 85 00 e2 20 a5 1c
>1a2388		69 00 85 02 c2 20 20 96 22 e2 20 a5 dc c9 03 f0
>1a2398		f3 c9 00 d0 31 e2 20 20 3b 21 a7 00 f0 28 c9 3a
>1a23a8		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a23b8		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a23c8		08 20 1a 21 80 be 28 60 08 58 e2 20 a9 80 85 d2
>1a23d8		9c 8a 0f 20 00 1e c2 30 64 31 c2 20 a0 02 00 b7
>1a23e8		1a f0 28 20 68 23 e2 20 a5 dc c9 01 f0 1d c9 02
>1a23f8		f0 e8 c9 03 f0 e4 c2 20 a0 00 00 18 a5 1a 77 1a
>1a2408		85 1a a5 1c 69 00 00 85 1c 80 cf e2 20 a9 00 85
>1a2418		d2 28 60 08 c2 30 a9 00 00 85 08 a9 16 00 85 0a
>1a2428		a0 02 00 b7 08 f0 2c c5 23 f0 19 b0 26 a0 00 00
>1a2438		18 a5 08 77 08 85 0c a5 0a 69 00 00 85 0a a5 0c
>1a2448		85 08 80 dc c2 20 a5 08 85 1a e2 20 a5 0a 85 1c
>1a2458		28 38 60 28 18 60 08 e2 20 a7 0c 87 08 c2 20 a5
>1a2468		0c c5 00 d0 08 e2 20 a5 0e c5 02 f0 26 c2 20 18
>1a2478		a5 0c 69 01 00 85 0c e2 20 a5 0e 69 00 85 0e c2
>1a2488		20 18 a5 08 69 01 00 85 08 e2 20 a5 0a 69 00 85
>1a2498		0a 80 c4 28 60 08 e2 20 a7 0c 87 08 c2 20 a5 0c
>1a24a8		c5 00 d0 06 a5 0e c5 02 f0 26 c2 20 38 a5 0c e9
>1a24b8		01 00 85 0c e2 20 a5 0e e9 00 85 0e c2 20 38 a5
>1a24c8		08 e9 01 00 85 08 e2 20 a5 0a e9 00 85 0a 80 c6
>1a24d8		28 60 08 a0 00 00 c2 20 18 a5 08 77 08 85 0c e2
>1a24e8		20 a5 0a 69 00 85 0e c2 20 18 a5 d9 69 04 00 85
>1a24f8		00 e2 20 a5 db 69 00 85 02 a0 00 00 c2 20 38 a5
>1a2508		d9 f7 08 85 d9 e2 20 a5 db e9 00 85 db 20 5e 24
>1a2518		20 ba 44 28 60 08 08 c2 20 48 a9 00 08 5b 68 28
>1a2528		c2 30 a0 02 00 97 d9 18 a5 d9 69 04 00 85 08 e2
>1a2538		20 a5 db 69 00 85 0a e2 20 a0 00 00 b7 1a 97 08
>1a2548		f0 03 c8 80 f7 c2 20 98 18 69 05 00 85 0c c2 20
>1a2558		a0 00 00 a5 0c 97 d9 c2 20 18 a5 d9 65 0c 85 0c
>1a2568		e2 20 a5 db 69 00 85 db c2 20 a5 0c 85 d9 c2 20
>1a2578		a0 00 00 a9 00 00 97 d9 c8 c0 05 00 d0 f8 20 ba
>1a2588		44 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a2598		30 a9 00 00 85 08 a9 16 00 85 0a a0 02 00 b7 08
>1a25a8		f0 1d c5 d7 f0 25 b0 1d a0 00 00 18 a5 08 77 08
>1a25b8		85 0c a5 0a 69 00 00 85 0a a5 0c 85 08 80 dc a9
>1a25c8		00 00 28 2b 60 a9 01 00 28 2b 60 a9 02 00 28 2b
>1a25d8		60 08 c2 30 a9 05 00 85 10 a0 00 00 e2 20 b7 1a
>1a25e8		f0 07 c2 20 e6 10 c8 80 f3 c2 20 a5 08 85 00 a5
>1a25f8		0a 85 02 18 a5 d9 69 04 00 85 0c a5 db 69 00 00
>1a2608		85 0e 18 a5 d9 65 10 85 d9 a5 db 69 00 00 85 db
>1a2618		18 a5 d9 69 04 00 85 08 a5 db 69 00 00 85 0a 20
>1a2628		9d 24 c2 20 a5 10 a0 00 00 97 00 a5 d7 a0 02 00
>1a2638		97 00 18 a5 00 69 04 00 85 00 a5 02 69 00 00 85
>1a2648		02 a0 00 00 e2 20 b7 1a 97 00 f0 03 c8 80 f7 20
>1a2658		ba 44 28 60 08 c2 30 85 d7 20 8b 25 c9 00 00 f0
>1a2668		2c c9 01 00 f0 22 c2 20 a5 08 48 a5 0a 48 20 da
>1a2678		24 68 85 0a 68 85 08 a5 1a 85 00 a5 1c 85 02 20
>1a2688		3b 21 e2 20 a7 00 f0 0a 20 d9 25 80 05 a5 d7 20
>1a2698		1d 25 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a26a8		e2 20 c2 10 a2 00 00 bd 00 4f f0 03 e8 80 f8 86
>1a26b8		0c c2 30 8a c9 02 00 90 12 3a 18 69 00 4f aa 18
>1a26c8		65 8f a8 a5 0c 3a 8b 44 00 00 ab c2 20 a6 55 a0
>1a26d8		00 4f a5 8f 8b 54 00 1a ab e2 20 a5 0c c9 02 90
>1a26e8		18 a6 8f a9 22 9d 00 4f e8 bd 00 4f d0 fa a9 22
>1a26f8		9d 00 4f a9 00 e8 9d 00 4f 28 2b 60 da 5a 8b 0b
>1a2708		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 ad
>1a2718		00 4f c9 23 f0 0a c9 7c f0 17 28 2b ab 7a fa 60
>1a2728		c2 20 a9 03 00 85 8f a9 4a 27 85 55 20 9c 26 80
>1a2738		e9 c2 20 a9 04 00 85 8f a9 4e 27 85 55 20 9c 26
>1a2748		80 d8 44 49 52 00 42 52 55 4e 00 8b 08 20 3d 02
>1a2758		08 e2 20 48 a9 1a 48 ab 68 28 a2 6f d2 20 64 04
>1a2768		28 ab 60 08 e2 30 a9 01 20 1c 00 20 db 00 c9 00
>1a2778		f0 f9 c9 0d f0 02 80 f3 28 60 0b 08 08 c2 20 48
>1a2788		a9 00 08 5b 68 28 c2 30 64 d7 a9 00 4f 85 1a a9
>1a2798		00 00 85 1c 20 9c 09 c2 20 a5 d7 d0 05 20 4e 23
>1a27a8		80 07 20 5c 26 28 2b 38 60 28 2b 18 60 c2 30 a2
>1a27b8		ff fe 9a 20 53 27 20 08 00 20 0c 00 22 3c 11 00
>1a27c8		a9 00 00 20 1c 00 20 04 27 20 82 27 b0 e8 80 e3
>1a27d8		08 e2 20 20 a3 08 c9 00 f0 2c c9 01 f0 2d c9 02
>1a27e8		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>1a27f8		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a2808		08 20 51 16 80 08 20 67 54 80 03 20 d6 56 28 60
>1a2818		08 e2 20 20 55 08 c9 00 f0 23 c9 01 f0 24 08 c2
>1a2828		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a2838		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 20 79 54
>1a2848		80 03 20 cb 56 28 60 08 e2 20 20 55 08 c9 00 f0
>1a2858		23 c9 01 f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a2868		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>1a2878		20 dc d4 08 20 8b 54 80 03 20 6c 57 28 60 20 bf
>1a2888		07 20 f0 07 20 21 57 60 a5 23 8f 1a 01 00 a5 29
>1a2898		8f 18 01 00 af 1e 01 00 85 23 60 08 c2 30 48 20
>1a28a8		bf 07 a5 2d c9 00 00 d0 0d a5 2b d0 09 da a6 29
>1a28b8		20 3f 64 fa 80 1c 20 f0 07 c2 20 a5 2b 48 a5 29
>1a28c8		48 20 ca 62 c2 20 68 85 29 68 85 2b 20 6c 57 20
>1a28d8		a9 64 68 28 60 08 20 51 06 20 82 06 c2 20 a5 23
>1a28e8		25 29 85 23 a5 25 25 2b 85 25 28 60 08 20 51 06
>1a28f8		20 82 06 c2 20 a5 23 05 29 85 23 a5 25 05 2b 85
>1a2908		25 28 60 08 20 51 06 c2 20 a5 23 49 ff ff 85 23
>1a2918		a5 25 49 ff ff 85 25 28 60 08 e2 20 20 a3 08 c9
>1a2928		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>1a2938		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a2948		ff 00 20 5b 1e e2 20 dc d4 08 20 d9 17 80 08 20
>1a2958		8c 55 80 03 20 01 5d 28 60 08 e2 20 20 a3 08 c9
>1a2968		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>1a2978		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a2988		ff 00 20 5b 1e e2 20 dc d4 08 20 f0 17 80 08 20
>1a2998		ad 55 80 03 20 16 5d 28 60 08 e2 20 20 a3 08 c9
>1a29a8		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>1a29b8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a29c8		ff 00 20 5b 1e e2 20 dc d4 08 20 07 18 80 08 20
>1a29d8		da 55 80 03 20 2b 5d 28 60 08 e2 20 20 a3 08 c9
>1a29e8		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>1a29f8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a2a08		ff 00 20 5b 1e e2 20 dc d4 08 20 1e 18 80 08 20
>1a2a18		f8 55 80 03 20 6a 5d 28 60 08 e2 20 20 a3 08 c9
>1a2a28		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>1a2a38		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a2a48		ff 00 20 5b 1e e2 20 dc d4 08 20 35 18 80 08 20
>1a2a58		16 56 80 03 20 55 5d 28 60 08 e2 20 20 a3 08 c9
>1a2a68		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>1a2a78		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a2a88		ff 00 20 5b 1e e2 20 dc d4 08 20 4c 18 80 08 20
>1a2a98		43 56 80 03 20 40 5d 28 60 08 e2 20 a5 27 c9 00
>1a2aa8		f0 2d c9 01 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a2ab8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a2ac8		e2 20 dc d4 08 e2 20 a5 26 49 80 85 26 80 16 c2
>1a2ad8		20 a5 23 49 ff ff 85 23 a5 25 49 ff ff 85 25 e6
>1a2ae8		23 d0 02 e6 25 28 60 08 e2 20 20 09 1d 20 63 07
>1a2af8		20 ae 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 27
>1a2b08		22 20 09 1d 20 63 07 20 ae 05 a5 23 0a 0a 0a 0a
>1a2b18		05 29 48 a9 2c 20 27 22 20 09 1d 20 63 07 20 ae
>1a2b28		05 a5 23 0a 0a 0a 0a 05 29 48 af 0e 08 af 09 0c
>1a2b38		8f 0e 08 af 68 8f 00 08 af 68 8f 02 08 af 68 8f
>1a2b48		04 08 af af 0e 08 af 29 f7 8f 0e 08 af 20 5f 21
>1a2b58		28 60 08 e2 20 20 09 1d 20 63 07 20 ae 05 a5 23
>1a2b68		0a 0a 0a 0a 05 29 48 a9 2c 20 27 22 20 09 1d 20
>1a2b78		63 07 20 ae 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c
>1a2b88		20 27 22 20 09 1d 20 51 06 20 e4 05 c2 20 a5 23
>1a2b98		85 92 a5 29 85 23 20 ae 05 e2 20 a5 23 0a 0a 0a
>1a2ba8		0a 05 29 48 c2 20 a5 92 85 23 20 ae 05 e2 20 a5
>1a2bb8		23 0a 0a 0a 0a 05 29 48 af 0e 08 af 09 0c 8f 0e
>1a2bc8		08 af 68 8f 0f 08 af 68 8f 0a 08 af 68 8f 09 08
>1a2bd8		af 68 8f 06 08 af af 0e 08 af 29 f7 8f 0e 08 af
>1a2be8		20 5f 21 28 60 08 e2 20 48 20 09 1d 20 63 07 e2
>1a2bf8		20 a5 23 29 0f 0a 0a 0a 0a 83 01 a9 2c 20 27 22
>1a2c08		20 09 1d 20 63 07 a5 23 29 0f 03 01 8f 1e 00 00
>1a2c18		e2 20 68 28 60 08 c2 20 f4 00 00 e2 20 20 09 1d
>1a2c28		20 63 07 a5 23 83 01 a9 2c 20 27 22 20 09 1d 20
>1a2c38		63 07 a5 23 83 02 a9 2c 20 27 22 20 09 1d 20 63
>1a2c48		07 a5 23 8f 0d 00 af a3 02 8f 0e 00 af a3 01 8f
>1a2c58		0f 00 af c2 20 68 28 60 08 c2 20 f4 00 00 e2 20
>1a2c68		20 09 1d 20 51 06 a5 23 f0 16 a9 01 8f 04 00 af
>1a2c78		a9 20 8f 08 00 af 8f 09 00 af 22 2c 11 00 80 0a
>1a2c88		a9 00 8f 04 00 af 22 2c 11 00 a9 2c 85 37 20 5c
>1a2c98		22 90 39 20 1a 21 20 09 1d 20 63 07 a5 23 83 01
>1a2ca8		a9 2c 20 27 22 20 09 1d 20 63 07 a5 23 83 02 a9
>1a2cb8		2c 20 27 22 20 09 1d 20 63 07 a5 23 8f 05 00 af
>1a2cc8		a3 02 8f 06 00 af a3 01 8f 07 00 af c2 20 68 28
>1a2cd8		60 08 c2 20 3b 38 e9 05 00 1b e2 20 20 09 1d 20
>1a2ce8		63 07 a5 23 c9 0a 90 1f 08 c2 20 48 a9 00 08 5b
>1a2cf8		68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20
>1a2d08		5b 1e e2 20 dc d4 08 83 01 a9 2c 20 27 22 20 09
>1a2d18		1d 20 63 07 a5 23 83 02 a9 2c 20 27 22 20 09 1d
>1a2d28		20 63 07 a5 23 83 03 a9 2c 20 27 22 20 09 1d 20
>1a2d38		63 07 a5 23 83 04 a9 2c 20 27 22 20 09 1d 20 63
>1a2d48		07 a5 23 83 05 a9 af 85 a0 a3 01 0a c2 20 29 ff
>1a2d58		00 aa bf 91 2d 1a 85 9e e2 20 a3 02 c2 20 29 ff
>1a2d68		00 0a 0a 18 65 9e 85 9e e2 20 a0 02 00 a3 03 97
>1a2d78		9e a0 01 00 a3 04 97 9e a0 00 00 a3 05 97 9e c2
>1a2d88		20 3b 18 69 05 00 1b 28 60 00 20 00 24 00 28 00
>1a2d98		2c 00 30 00 34 00 38 00 3c 40 1f 80 1f da 5a 08
>1a2da8		20 09 1d 20 51 06 c2 20 a5 23 89 00 01 d0 17 af
>1a2db8		00 00 af 89 00 01 f0 0e e2 20 a9 00 8f 01 00 af
>1a2dc8		a9 01 8f 01 00 af c2 20 a5 23 8f 00 00 af e2 20
>1a2dd8		a5 24 c2 20 29 03 00 0a aa c2 20 bf 2c 2e 1a 8f
>1a2de8		10 f0 1a bf 34 2e 1a 8f 12 f0 1a af 10 f0 1a 8f
>1a2df8		08 01 00 af 12 f0 1a 8f 0a 01 00 af 0c 01 00 8f
>1a2e08		14 f0 1a e2 20 af 0e 01 00 8f 16 f0 1a 22 2c 11
>1a2e18		00 c2 20 af 1a 00 00 aa af 1c 00 00 a8 20 20 00
>1a2e28		28 7a fa 60 80 02 20 03 40 01 90 01 e0 01 58 02
>1a2e38		f0 00 2c 01 50 00 64 00 28 00 32 00 3c 00 4b 00
>1a2e48		1e 00 32 00 48 00 5c 00 20 00 2a 00 34 00 43 00
>1a2e58		16 00 34 00 da 08 c2 30 c9 02 00 b0 1c 0a 0a aa
>1a2e68		bf 00 f0 1a 85 9e bf 02 f0 1a 85 a0 c9 f0 00 b0
>1a2e78		08 c9 b0 00 90 03 28 fa 60 08 c2 20 48 a9 00 08
>1a2e88		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>1a2e98		20 5b 1e e2 20 dc d4 08 da 08 c2 30 c9 02 00 b0
>1a2ea8		17 0a 0a aa bf 08 f0 1a 85 9e bf 0a f0 1a 85 a0
>1a2eb8		c9 40 00 b0 03 28 fa 60 08 c2 20 48 a9 00 08 5b
>1a2ec8		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a2ed8		5b 1e e2 20 dc d4 08 08 c2 30 3b 38 e9 07 00 1b
>1a2ee8		20 09 1d 20 63 07 c2 20 a5 23 c9 02 00 b0 59 83
>1a2ef8		01 e2 20 a9 2c 20 27 22 20 09 1d 20 63 07 a5 23
>1a2f08		83 03 a9 2c 20 27 22 20 09 1d 20 63 07 a3 01 0a
>1a2f18		0a 0a aa a3 03 d0 05 a5 23 0a 80 04 a5 23 38 2a
>1a2f28		9f 00 01 af c2 20 a9 2c 00 85 37 20 5c 22 b0 37
>1a2f38		c2 20 08 c2 20 a9 00 00 85 23 a9 b0 00 85 25 e2
>1a2f48		20 a9 00 85 27 28 80 27 08 c2 20 48 a9 00 08 5b
>1a2f58		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a2f68		5b 1e e2 20 dc d4 08 c2 20 20 1a 21 20 09 1d c2
>1a2f78		20 a3 01 0a 0a aa a5 23 9f 00 f0 1a 9f 08 f0 1a
>1a2f88		83 04 a5 25 9f 02 f0 1a 38 e9 b0 00 9f 0a f0 1a
>1a2f98		83 06 a3 01 0a 0a 0a aa e2 20 a3 04 9f 01 01 af
>1a2fa8		a3 05 9f 02 01 af a3 06 9f 03 01 af a9 00 9f 04
>1a2fb8		01 af 9f 05 01 af c2 30 3b 18 69 07 00 1b 28 60
>1a2fc8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>1a2fd8		08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08
>1a2fe8		c2 20 20 09 1d 20 63 07 a5 23 20 a0 2e c2 20 a5
>1a2ff8		9e 8f 05 04 af af 14 f0 1a 8f 08 04 af e2 20 a5
>1a3008		a0 8f 07 04 af af 16 f0 1a 8f 0a 04 af a9 00 8f
>1a3018		01 04 af a9 85 8f 00 04 af af 01 04 af 30 fa a9
>1a3028		00 8f 00 04 af 28 60 08 c2 20 a5 59 cf 10 f0 1a
>1a3038		90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>1a3048		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a3058		08 c2 30 a5 5d cf 12 f0 1a b0 d7 8f 08 01 00 af
>1a3068		10 f0 1a 8f 0a 01 00 18 af 0c 01 00 65 59 85 0c
>1a3078		af 0e 01 00 69 00 00 85 0e 18 a5 0c 65 9e 85 0c
>1a3088		a5 0e 65 a0 85 0e e2 20 a5 55 87 0c 28 60 c2 20
>1a3098		a9 01 00 85 dd 38 a5 61 e5 59 85 69 10 0b 49 ff
>1a30a8		ff 1a 85 69 a9 ff ff 85 dd a9 01 00 85 df 38 a5
>1a30b8		65 e5 5d 85 6d 10 0b 49 ff ff 1a 85 6d a9 ff ff
>1a30c8		85 df a5 6d c9 01 00 d0 19 a5 69 c9 01 00 d0 10
>1a30d8		20 2f 30 a5 61 85 59 a5 65 85 5d 20 2f 30 80 5b
>1a30e8		a5 6d c5 69 b0 04 a5 69 80 06 a5 6d 49 ff ff 1a
>1a30f8		48 0a 68 6a 85 71 20 2f 30 a5 59 c5 61 d0 06 a5
>1a3108		5d c5 65 f0 36 a5 71 85 75 a5 69 49 ff ff 1a c5
>1a3118		75 10 10 f0 0e 38 a5 71 e5 6d 85 71 18 a5 59 65
>1a3128		dd 85 59 a5 75 c5 6d 10 cd f0 cb 18 a5 71 65 69
>1a3138		85 71 18 a5 5d 65 df 85 5d 80 bb 60 08 c2 20 3b
>1a3148		38 e9 06 00 1b 08 c2 20 48 a9 00 08 5b 68 28 08
>1a3158		e2 20 48 a9 00 48 ab 68 28 c2 30 20 09 1d 20 63
>1a3168		07 83 01 a9 2c 00 20 27 22 20 09 1d 20 51 06 a5
>1a3178		23 83 03 a9 2c 00 20 27 22 20 09 1d 20 51 06 a5
>1a3188		23 83 05 a9 2c 00 20 27 22 20 09 1d 20 63 07 a5
>1a3198		23 85 55 a3 03 85 59 a3 05 85 5d a3 01 20 5c 2e
>1a31a8		20 2f 30 c2 20 3b 18 69 06 00 1b 28 60 08 c2 20
>1a31b8		3b 38 e9 0a 00 1b 08 c2 20 48 a9 00 08 5b 68 28
>1a31c8		08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 09 1d 20
>1a31d8		63 07 83 01 a9 2c 00 20 27 22 20 09 1d 20 51 06
>1a31e8		a5 23 83 03 a9 2c 00 20 27 22 20 09 1d 20 51 06
>1a31f8		a5 23 83 05 a9 2c 00 20 27 22 20 09 1d 20 51 06
>1a3208		a5 23 83 07 a9 2c 00 20 27 22 20 09 1d 20 51 06
>1a3218		a5 23 83 09 a9 2c 00 20 27 22 20 09 1d 20 63 07
>1a3228		a5 23 85 55 a3 03 85 59 a3 05 85 5d a3 07 85 61
>1a3238		a3 09 85 65 a3 01 20 5c 2e 20 96 30 c2 20 3b 18
>1a3248		69 0a 00 1b 28 60 08 c2 20 3b 38 e9 0c 00 1b 08
>1a3258		c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>1a3268		ab 68 28 c2 30 20 09 1d 20 63 07 83 01 a9 2c 00
>1a3278		20 27 22 20 09 1d 20 51 06 a5 23 83 03 a9 2c 00
>1a3288		20 27 22 20 09 1d 20 51 06 a5 23 83 05 a9 2c 00
>1a3298		20 27 22 20 09 1d 20 51 06 a5 23 83 07 a9 2c 00
>1a32a8		20 27 22 20 09 1d 20 51 06 a5 23 83 09 a9 2c 00
>1a32b8		20 27 22 20 09 1d 20 63 07 a5 23 83 0b a3 01 20
>1a32c8		a0 2e a9 07 00 8f 00 04 af c2 20 a3 05 8f 00 01
>1a32d8		00 af 10 f0 1a 8f 02 01 00 18 af 04 01 00 63 03
>1a32e8		85 0c e2 20 af 06 01 00 69 00 85 0e c2 20 18 a5
>1a32f8		9e 65 0c 8f 05 04 af e2 20 a5 a0 65 0e 8f 07 04
>1a3308		af c2 20 38 a3 07 e3 03 85 0c 8f 08 04 af 38 af
>1a3318		10 f0 1a 8f 0e 04 af 38 a3 09 e3 05 8f 0a 04 af
>1a3328		e2 20 a3 0b 8f 01 04 af af 00 04 af 09 80 8f 00
>1a3338		04 af af 01 04 af 30 fa a9 00 8f 00 04 af c2 20
>1a3348		3b 18 69 0c 00 1b 28 60 08 c2 20 c9 40 00 b0 13
>1a3358		0a 0a 0a 18 69 00 0c 85 9e a9 af 00 69 00 00 85
>1a3368		a0 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a3378		09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a3388		d4 08 08 c2 20 3b 38 e9 03 00 1b c2 30 20 09 1d
>1a3398		20 63 07 a5 23 83 01 a9 2c 00 20 27 22 e2 20 20
>1a33a8		09 1d 20 63 07 a5 23 c9 08 b0 56 83 03 a9 2c 20
>1a33b8		27 22 20 09 1d 20 51 06 c2 20 38 a5 23 e9 00 00
>1a33c8		85 23 a5 25 e9 b0 00 85 25 30 36 c2 20 a3 01 aa
>1a33d8		20 50 33 a5 23 a0 01 00 97 9e e2 20 a5 25 c8 c8
>1a33e8		97 9e bf 18 f0 1a 29 f1 85 0c a3 03 0a 29 0e 05
>1a33f8		0c 87 9e 9f 18 f0 1a c2 20 3b 18 69 03 00 1b 28
>1a3408		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a3418		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a3428		08 c2 20 3b 38 e9 04 00 1b c2 30 20 09 1d 20 63
>1a3438		07 a5 23 83 01 a9 2c 00 20 27 22 20 09 1d 20 51
>1a3448		06 a5 23 83 03 a9 2c 00 20 27 22 20 09 1d 20 51
>1a3458		06 a3 01 20 50 33 a3 03 a0 04 00 97 9e a5 23 a0
>1a3468		06 00 97 9e c2 20 3b 18 69 04 00 1b 28 60 08 c2
>1a3478		20 3b 38 e9 03 00 1b c2 30 20 09 1d 20 63 07 a5
>1a3488		23 83 01 a9 2c 00 20 27 22 e2 20 20 09 1d 20 51
>1a3498		06 a5 23 d0 04 83 03 80 04 a9 01 83 03 a9 2c 85
>1a34a8		37 20 5c 22 b0 20 c2 30 a3 01 aa 20 50 33 e2 20
>1a34b8		bf 18 f0 1a 29 fe 85 0c a3 03 29 01 05 0c 9f 18
>1a34c8		f0 1a 87 9e 80 36 c2 30 20 1a 21 20 09 1d 20 63
>1a34d8		07 a5 23 c9 08 00 b0 2e 0a 0a 0a 0a 85 0c a3 01
>1a34e8		aa 20 50 33 e2 20 a3 03 29 01 05 0c 85 0c bf 18
>1a34f8		f0 1a 29 8e 05 0c 87 9e 9f 18 f0 1a c2 20 3b 18
>1a3508		69 03 00 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a3518		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a3528		e2 20 dc d4 08 08 c2 20 c9 04 00 b0 19 8d 00 01
>1a3538		a9 04 00 8d 02 01 18 ad 04 01 69 80 02 85 9e a9
>1a3548		af 00 85 a0 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a3558		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a3568		e2 20 dc d4 08 08 c2 20 c9 04 00 b0 19 8d 00 01
>1a3578		a9 0c 00 8d 02 01 18 ad 04 01 69 00 02 85 9e a9
>1a3588		af 00 85 a0 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a3598		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a35a8		e2 20 dc d4 08 08 c2 20 3b 38 e9 06 00 1b c2 20
>1a35b8		20 09 1d 20 63 07 a5 23 83 01 a9 2c 00 20 27 22
>1a35c8		20 09 1d 20 63 07 a5 23 83 03 a9 2c 00 20 27 22
>1a35d8		20 09 1d 20 63 07 a5 23 83 05 a9 2c 00 20 27 22
>1a35e8		20 09 1d 20 51 06 a3 01 20 2d 35 a5 23 87 9e e2
>1a35f8		20 38 a5 25 e9 b0 a0 02 00 97 9e a3 05 d0 0d e2
>1a3608		20 a3 03 29 07 a0 03 00 97 9e 80 0d e2 20 a3 03
>1a3618		29 07 09 08 a0 03 00 97 9e c2 20 3b 18 69 06 00
>1a3628		1b 28 60 08 c2 20 3b 38 e9 06 00 1b c2 20 20 09
>1a3638		1d 20 63 07 a5 23 83 01 a9 2c 00 20 27 22 20 09
>1a3648		1d 20 51 06 a5 23 83 03 a9 2c 00 20 27 22 20 09
>1a3658		1d 20 51 06 a5 23 83 05 a9 2c 00 20 27 22 20 09
>1a3668		1d 20 51 06 a3 01 20 6d 35 a5 23 a0 01 00 97 9e
>1a3678		e2 20 38 a5 25 e9 b0 c8 c8 97 9e c2 20 a3 03 a0
>1a3688		04 00 97 9e a3 05 a0 06 00 97 9e c2 20 3b 18 69
>1a3698		06 00 1b 28 60 08 c2 20 f4 00 00 c2 20 20 09 1d
>1a36a8		20 63 07 a5 23 83 01 a9 2c 00 20 27 22 20 09 1d
>1a36b8		20 51 06 a3 01 20 6d 35 a5 23 d0 06 e2 20 a9 00
>1a36c8		80 04 e2 20 a9 01 e2 20 a0 00 00 97 9e c2 20 68
>1a36d8		28 60 08 c2 20 3b 38 e9 04 00 1b c2 20 20 09 1d
>1a36e8		20 63 07 a5 23 83 01 a9 2c 00 20 27 22 20 09 1d
>1a36f8		20 51 06 a5 23 83 03 a9 2c 00 20 27 22 20 09 1d
>1a3708		20 51 06 a3 01 20 6d 35 a5 23 a0 0a 00 97 9e a3
>1a3718		03 a0 08 00 97 9e c2 20 3b 18 69 04 00 1b 28 60
>1a3728		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 00
>1a3738		8f 58 f0 1a af 5c f0 1a c9 b0 b0 1c 8f 24 04 af
>1a3748		af 5b f0 1a 8f 23 04 af af 5a f0 1a 8f 22 04 af
>1a3758		a9 10 8f 58 f0 1a 80 17 38 e9 b0 8f 04 04 af af
>1a3768		5b f0 1a 8f 03 04 af af 5a f0 1a 8f 02 04 af af
>1a3778		59 f0 1a d0 3c af 58 f0 1a f0 1b af 5d f0 1a 8f
>1a3788		28 04 af af 5e f0 1a 8f 29 04 af af 5f f0 1a 8f
>1a3798		2a 04 af 82 8b 00 af 5d f0 1a 8f 08 04 af af 5e
>1a37a8		f0 1a 8f 09 04 af af 5f f0 1a 8f 0a 04 af 82 70
>1a37b8		00 af 58 f0 1a 09 01 8f 58 f0 1a 89 10 f0 32 af
>1a37c8		60 f0 1a 8f 28 04 af af 61 f0 1a 8f 29 04 af af
>1a37d8		62 f0 1a 8f 2a 04 af af 63 f0 1a 8f 2b 04 af af
>1a37e8		64 f0 1a 8f 2c 04 af af 65 f0 1a 8f 2d 04 af 80
>1a37f8		30 af 60 f0 1a 8f 08 04 af af 61 f0 1a 8f 09 04
>1a3808		af af 62 f0 1a 8f 0a 04 af af 63 f0 1a 8f 0b 04
>1a3818		af af 64 f0 1a 8f 0c 04 af af 65 f0 1a 8f 0d 04
>1a3828		af e2 20 af 69 f0 1a c9 b0 b0 20 8f 27 04 af af
>1a3838		68 f0 1a 8f 26 04 af af 67 f0 1a 8f 25 04 af af
>1a3848		58 f0 1a 09 20 8f 58 f0 1a 80 17 38 e9 b0 8f 07
>1a3858		04 af af 68 f0 1a 8f 06 04 af af 67 f0 1a 8f 05
>1a3868		04 af af 66 f0 1a d0 3e af 58 f0 1a 89 20 f0 1b
>1a3878		af 6a f0 1a 8f 28 04 af af 6b f0 1a 8f 29 04 af
>1a3888		af 6c f0 1a 8f 2a 04 af 82 8b 00 af 6a f0 1a 8f
>1a3898		08 04 af af 6b f0 1a 8f 09 04 af af 6c f0 1a 8f
>1a38a8		0a 04 af 82 70 00 af 58 f0 1a 09 02 8f 58 f0 1a
>1a38b8		89 20 f0 32 af 6d f0 1a 8f 28 04 af af 6e f0 1a
>1a38c8		8f 29 04 af af 6f f0 1a 8f 2a 04 af af 70 f0 1a
>1a38d8		8f 2b 04 af af 71 f0 1a 8f 2e 04 af af 72 f0 1a
>1a38e8		8f 2f 04 af 80 30 af 6d f0 1a 8f 08 04 af af 6e
>1a38f8		f0 1a 8f 09 04 af af 6f f0 1a 8f 0a 04 af af 70
>1a3908		f0 1a 8f 0b 04 af af 71 f0 1a 8f 0e 04 af af 72
>1a3918		f0 1a 8f 0f 04 af af 58 f0 1a 29 30 f0 43 c9 10
>1a3928		f0 76 c9 20 d0 03 82 8a 00 af 58 f0 1a 29 03 f0
>1a3938		23 c9 03 f0 23 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a3948		20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>1a3958		20 dc d4 08 a9 01 80 02 a9 03 8f 20 04 af 82 7d
>1a3968		00 af 58 f0 1a 29 03 f0 23 c9 03 f0 23 08 c2 20
>1a3978		48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2
>1a3988		20 29 ff 00 20 5b 1e e2 20 dc d4 08 a9 01 80 02
>1a3998		a9 03 8f 00 04 af 80 34 af 58 f0 1a 29 01 0a 09
>1a39a8		11 8f 20 04 af af 58 f0 1a 29 02 09 11 8f 00 04
>1a39b8		af 80 19 af 58 f0 1a 29 02 09 21 8f 20 04 af af
>1a39c8		58 f0 1a 29 01 0a 09 21 8f 00 04 af af 00 04 af
>1a39d8		09 80 8f 00 04 af af 58 f0 1a 29 30 f0 0f af 20
>1a39e8		04 af 09 80 8f 20 04 af ea ea ea ea ea af 01 04
>1a39f8		af 89 80 d0 f8 a9 00 8f 20 04 af 8f 00 04 af 28
>1a3a08		2b 60 0b 08 e2 20 c2 10 a9 00 a2 00 00 8f 59 f0
>1a3a18		1a e8 e0 1a 00 d0 f6 20 7b 22 c9 e6 f0 23 c9 e7
>1a3a28		f0 5e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a3a38		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a3a48		08 20 27 22 20 09 1d 20 51 06 c2 20 a5 23 8f 5a
>1a3a58		f0 1a e2 20 a5 25 8f 5c f0 1a a9 2c 20 27 22 20
>1a3a68		09 1d 20 51 06 c2 20 a5 23 8f 5d f0 1a e2 20 a5
>1a3a78		25 8f 5f f0 1a e2 20 a9 00 8f 59 f0 1a 82 74 00
>1a3a88		20 27 22 20 09 1d 20 51 06 c2 20 a5 23 8f 5a f0
>1a3a98		1a e2 20 a5 25 8f 5c f0 1a a9 2c 20 27 22 20 09
>1a3aa8		1d 20 0d 07 c2 20 a5 23 8f 60 f0 1a 8d 00 01 a9
>1a3ab8		2c 00 20 27 22 20 09 1d 20 0d 07 c2 20 a5 23 8f
>1a3ac8		62 f0 1a 8d 02 01 a9 2c 00 20 27 22 20 09 1d 20
>1a3ad8		0d 07 c2 20 a5 23 8f 64 f0 1a c2 20 ad 04 01 8f
>1a3ae8		5d f0 1a e2 20 ad 06 01 8f 5f f0 1a e2 20 a9 01
>1a3af8		8f 59 f0 1a e2 20 a9 9c 20 27 22 20 7b 22 c9 e6
>1a3b08		f0 23 c9 e7 f0 5e 08 c2 20 48 a9 00 08 5b 68 28
>1a3b18		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a3b28		e2 20 dc d4 08 20 27 22 20 09 1d 20 51 06 c2 20
>1a3b38		a5 23 8f 67 f0 1a e2 20 a5 25 8f 69 f0 1a a9 2c
>1a3b48		20 27 22 20 09 1d 20 51 06 c2 20 a5 23 8f 6a f0
>1a3b58		1a e2 20 a5 25 8f 6c f0 1a e2 20 a9 00 8f 66 f0
>1a3b68		1a 82 74 00 20 27 22 20 09 1d 20 51 06 c2 20 a5
>1a3b78		23 8f 67 f0 1a e2 20 a5 25 8f 69 f0 1a a9 2c 20
>1a3b88		27 22 20 09 1d 20 0d 07 c2 20 a5 23 8f 6d f0 1a
>1a3b98		8d 00 01 a9 2c 00 20 27 22 20 09 1d 20 0d 07 c2
>1a3ba8		20 a5 23 8f 6f f0 1a 8d 02 01 a9 2c 00 20 27 22
>1a3bb8		20 09 1d 20 0d 07 c2 20 a5 23 8f 71 f0 1a c2 20
>1a3bc8		ad 04 01 8f 6a f0 1a e2 20 ad 06 01 8f 6c f0 1a
>1a3bd8		e2 20 a9 01 8f 66 f0 1a c2 20 af 5d f0 1a cf 6a
>1a3be8		f0 1a d0 14 e2 20 af 5f f0 1a cf 6c f0 1a d0 08
>1a3bf8		c2 20 20 28 37 28 2b 60 08 c2 20 48 a9 00 08 5b
>1a3c08		68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20
>1a3c18		5b 1e e2 20 dc d4 08 08 c2 30 20 09 1d 20 63 07
>1a3c28		a5 23 48 a9 2c 00 20 27 22 20 09 1d 20 63 07 a4
>1a3c38		23 fa 20 20 00 28 60 08 20 3b 21 e2 20 a7 00 d0
>1a3c48		03 4c e7 3c c9 3a d0 03 4c e7 3c c9 22 d0 0b 20
>1a3c58		15 1c 20 f5 45 a9 3b 20 27 22 20 e2 04 90 44 20
>1a3c68		15 54 90 3f a9 3f 20 18 00 a9 20 20 18 00 20 10
>1a3c78		00 e2 20 a5 ea c9 02 f0 49 c9 00 d0 03 82 84 00
>1a3c88		c9 01 f0 5d 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a3c98		a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>1a3ca8		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a3cb8		02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a3cc8		d4 08 c2 20 a9 00 4c 85 23 a9 00 00 85 25 e2 20
>1a3cd8		a9 02 85 27 c2 20 20 78 53 a9 0d 00 20 18 00 28
>1a3ce8		60 c2 20 a5 00 85 40 a5 02 85 42 a9 00 4c 85 00
>1a3cf8		a9 00 00 85 02 20 37 5a c2 20 a5 40 85 00 a5 42
>1a3d08		85 02 80 d0 c2 20 a5 00 85 40 a5 02 85 42 a9 00
>1a3d18		4c 85 00 a9 00 00 85 02 20 d8 08 c2 20 a5 40 85
>1a3d28		00 a5 42 85 02 80 ad 08 20 3b 21 e2 20 a7 00 f0
>1a3d38		47 c9 3a f0 43 20 e2 04 90 40 20 15 54 90 3b 20
>1a3d48		01 15 20 14 00 e2 20 a0 00 00 97 16 a9 00 c8 97
>1a3d58		16 c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>1a3d68		27 20 78 53 20 3b 21 a7 00 f0 0d c9 3a f0 09 c9
>1a3d78		2c d0 07 20 1a 21 80 b0 28 60 08 c2 20 48 a9 00
>1a3d88		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>1a3d98		00 20 5b 1e e2 20 dc d4 08 08 20 09 1d 20 51 06
>1a3da8		e2 20 a9 5c 85 a2 c2 20 a5 23 85 a3 e2 20 a5 25
>1a3db8		85 a5 e2 20 a9 2c 85 37 20 5c 22 90 41 20 1a 21
>1a3dc8		20 09 1d 20 0d 07 c2 20 a5 23 85 55 e2 20 a9 2c
>1a3dd8		85 37 20 5c 22 90 27 20 1a 21 20 09 1d 20 0d 07
>1a3de8		c2 20 a5 23 85 59 e2 20 a9 2c 85 37 20 5c 22 90
>1a3df8		0d 20 1a 21 20 09 1d 20 0d 07 c2 20 a4 23 a6 59
>1a3e08		a5 55 0b 8b 08 22 a2 08 00 28 ab 2b 20 5f 21 28
>1a3e18		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>1a3e28		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a3e38		08 e2 20 20 3b 21 20 15 54 90 64 a9 8f 20 27 22
>1a3e48		a9 01 20 28 1a a2 01 00 a9 00 8f 00 4d 00 20 09
>1a3e58		1d 20 51 06 c2 20 a5 23 9f 00 4d 00 e2 20 af 00
>1a3e68		4d 00 1a 8f 00 4d 00 30 55 e8 e8 20 3b 21 a7 00
>1a3e78		c9 2c f0 25 c9 90 d0 27 20 1a 21 20 93 66 c2 20
>1a3e88		a5 c0 85 23 e2 20 a5 c2 85 25 64 26 a5 ea 09 80
>1a3e98		85 ea 85 27 20 78 53 28 60 20 1a 21 4c 56 3e 08
>1a3ea8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a3eb8		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>1a3ec8		20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00
>1a3ed8		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 20 3b
>1a3ee8		21 e2 20 a7 00 f0 28 c9 3a f0 24 20 e2 04 90 21
>1a3ef8		20 15 54 90 1c 20 38 3f 20 78 53 20 3b 21 a7 00
>1a3f08		f0 0d c9 3a f0 09 c9 2c d0 07 20 1a 21 80 cf 28
>1a3f18		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a3f28		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a3f38		08 a5 02 85 42 a5 00 85 40 a5 1c 85 46 a5 1a 85
>1a3f48		44 c2 20 a5 3a d0 04 a5 38 f0 4e a5 38 85 00 a5
>1a3f58		3a 85 02 a5 3c 85 1a a5 3e 85 1c e2 20 a7 00 f0
>1a3f68		53 c9 3a f0 4f c9 2c d0 03 20 1a 21 20 3b 21 a7
>1a3f78		00 c9 22 f0 4e 20 fb 04 b0 4e 08 c2 20 48 a9 00
>1a3f88		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>1a3f98		00 20 5b 1e e2 20 dc d4 08 c2 20 a9 00 00 85 1a
>1a3fa8		a9 16 00 85 1c 18 a5 1a 69 04 00 85 00 a5 1c 69
>1a3fb8		00 00 85 02 e2 20 a9 80 85 35 a9 ab 85 37 20 71
>1a3fc8		21 80 a9 20 15 1c 80 03 20 37 5a c2 20 a5 00 85
>1a3fd8		38 a5 02 85 3a a5 1a 85 3c a5 1c 85 3e a5 44 85
>1a3fe8		1a a5 46 85 1c a5 40 85 00 a5 42 85 02 28 60 20
>1a3ff8		5f 21 60 64 38 64 3a 64 3c 64 3e 60 20 24 00 60
>1a4008		20 09 1d c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9
>1a4018		2c d0 22 20 1a 21 20 09 1d c2 20 a5 26 d0 35 68
>1a4028		85 08 68 85 0a c2 20 a5 23 87 08 e2 20 a0 02 00
>1a4038		a5 25 97 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4048		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>1a4058		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4068		a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>1a4078		dc d4 08 20 09 1d c2 20 a5 25 48 a5 23 48 e2 20
>1a4088		a7 00 c9 2c d0 19 20 1a 21 20 09 1d c2 20 a5 25
>1a4098		d0 2c 68 85 08 68 85 0a c2 20 a5 23 87 08 60 08
>1a40a8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a40b8		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>1a40c8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a40d8		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 20 09 1d
>1a40e8		c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0 1f
>1a40f8		20 1a 21 20 09 1d e2 20 a5 24 d0 32 c2 20 a5 25
>1a4108		d0 2c 68 85 08 68 85 0a e2 20 a5 23 87 08 60 08
>1a4118		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a4128		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>1a4138		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a4148		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2 20
>1a4158		48 a9 00 08 5b 68 28 e2 20 a9 01 8f d3 08 00 c2
>1a4168		20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 e2 20 a7
>1a4178		00 f0 05 20 1a 21 80 f7 28 60 08 28 60 08 28 60
>1a4188		08 28 60 08 c2 20 a5 1c 20 22 1e a5 1a 20 22 1e
>1a4198		a5 02 48 a5 00 48 20 5f 21 a5 02 20 22 1e a5 00
>1a41a8		20 22 1e 68 85 00 68 85 02 20 3b 21 20 15 54 b0
>1a41b8		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f
>1a41c8		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a41d8		e2 20 a5 ea 20 39 1e a5 e9 20 39 1e c2 20 a5 e7
>1a41e8		20 22 1e 20 3b 21 e2 20 a7 00 c9 8a d0 6a a5 ea
>1a41f8		c9 00 f0 04 c9 01 f0 00 20 1a 21 20 09 1d 20 78
>1a4208		53 e2 20 a9 9c 20 27 22 20 09 1d c2 20 a5 27 20
>1a4218		22 1e a5 25 20 22 1e a5 23 20 22 1e e2 20 a9 9d
>1a4228		85 37 20 5c 22 90 1b 20 1a 21 20 09 1d e2 20 a5
>1a4238		27 20 22 1e c2 20 a5 25 20 22 1e a5 23 20 22 1e
>1a4248		80 14 c2 20 a9 00 00 20 22 1e a9 00 00 20 22 1e
>1a4258		a9 01 00 20 22 1e 28 60 08 c2 20 48 a9 00 08 5b
>1a4268		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>1a4278		5b 1e e2 20 dc d4 08 08 8b 08 e2 20 48 a9 00 48
>1a4288		ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a4
>1a4298		33 c8 c8 c2 20 b9 0c 00 85 e7 b9 0e 00 e2 20 85
>1a42a8		e9 b9 10 00 85 ea c2 20 5a 20 16 52 7a c2 20 b9
>1a42b8		00 00 85 29 b9 02 00 85 2b e2 20 b9 04 00 85 2d
>1a42c8		c2 20 5a 20 d8 27 20 78 53 7a c2 20 b9 06 00 85
>1a42d8		29 b9 08 00 85 2b e2 20 b9 0a 00 85 2d c2 20 b9
>1a42e8		02 00 30 0a 20 61 2a 20 1a 06 f0 28 80 08 20 21
>1a42f8		2a 20 1a 06 f0 1e c2 20 b9 12 00 85 00 b9 14 00
>1a4308		85 02 b9 16 00 85 1a b9 18 00 85 1c e2 20 a9 03
>1a4318		85 dc 80 17 a2 23 08 20 e9 19 c2 20 18 a5 33 69
>1a4328		1a 00 85 33 a5 35 69 00 00 85 35 ab 28 60 08 a5
>1a4338		1a 48 a5 1c 48 20 3b 21 20 d8 08 a5 23 f0 26 20
>1a4348		1b 24 90 42 e2 20 a9 02 85 dc 20 5f 21 c2 20 68
>1a4358		20 22 1e 68 20 22 1e a5 02 20 22 1e a5 00 20 22
>1a4368		1e e6 31 28 60 68 68 08 c2 20 48 a9 00 08 5b 68
>1a4378		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b
>1a4388		1e e2 20 dc d4 08 68 68 08 c2 20 48 a9 00 08 5b
>1a4398		68 28 e2 20 a9 06 8f d3 08 00 c2 20 29 ff 00 20
>1a43a8		5b 1e e2 20 dc d4 08 08 c2 30 a5 31 f0 1e 20 44
>1a43b8		1e 85 00 20 44 1e 85 02 20 44 1e 85 1a 20 44 1e
>1a43c8		85 1c c6 31 e2 20 a9 03 85 dc 28 60 08 c2 20 48
>1a43d8		a9 00 08 5b 68 28 e2 20 a9 07 8f d3 08 00 c2 20
>1a43e8		29 ff 00 20 5b 1e e2 20 dc d4 08 08 20 09 1d 20
>1a43f8		1a 06 f0 1c e2 20 a9 97 20 27 22 20 d8 08 20 1a
>1a4408		06 f0 12 20 1b 24 90 2c e2 20 a9 02 85 dc 80 03
>1a4418		20 5f 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4428		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>1a4438		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4448		a9 06 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>1a4458		dc d4 08 08 e2 20 a9 01 85 dc 28 60 08 20 3b 21
>1a4468		20 d8 08 a5 23 f0 0d 20 1b 24 90 27 e2 20 a9 02
>1a4478		85 dc 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4488		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>1a4498		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a44a8		06 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a44b8		d4 08 20 8b 19 20 ab 10 20 15 51 60 08 a7 00 10
>1a44c8		03 20 1a 21 20 15 54 b0 03 4c 3b 45 e2 20 a5 ea
>1a44d8		48 a5 e9 48 a5 e8 48 a5 e7 48 20 7b 22 c9 8f d0
>1a44e8		0e a9 8f 20 27 22 a9 00 8f 00 4d 00 20 0a 1b 20
>1a44f8		3b 21 e2 20 a7 00 c9 8a f0 03 4c 3b 45 20 1a 21
>1a4508		20 09 1d 68 85 e7 68 85 e8 68 85 e9 68 85 ea 29
>1a4518		80 f0 1b 20 88 51 90 3a c2 20 a0 09 00 b7 08 85
>1a4528		c0 e2 20 c8 c8 b7 08 85 c2 20 7f 68 80 03 20 78
>1a4538		53 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a4548		02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a4558		d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05
>1a4568		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a4578		08 08 e2 20 20 7b 22 c9 00 f0 6d 20 09 1d e2 20
>1a4588		a5 27 c9 ff f0 1b c9 02 d0 05 20 f5 45 80 12 c9
>1a4598		00 d0 05 20 13 46 80 09 c9 01 d0 4f 20 26 46 80
>1a45a8		00 20 3b 21 a7 00 f0 40 c9 3a f0 3c c9 2c f0 23
>1a45b8		c9 3b f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a45c8		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>1a45d8		dc d4 08 a9 09 20 18 00 20 1a 21 20 3b 21 a7 00
>1a45e8		f0 09 c9 3a f0 05 80 93 20 d7 03 28 60 08 8b 08
>1a45f8		c2 20 48 a9 00 08 5b 68 28 e2 20 a0 00 00 b7 23
>1a4608		f0 06 20 18 00 c8 80 f6 ab 28 60 08 c2 20 20 60
>1a4618		15 a5 16 85 23 a5 18 85 25 20 f5 45 28 60 08 20
>1a4628		de 5d c2 20 a5 16 85 23 a5 18 85 25 20 f5 45 28
>1a4638		60 08 e2 20 85 b5 4a 4a 4a 4a 29 0f 18 69 30 97
>1a4648		16 c8 a5 b5 29 0f 18 69 30 97 16 c8 28 60 e2 20
>1a4658		a9 8f 20 27 22 08 20 09 1d e2 20 c2 10 af 0e 08
>1a4668		af 09 08 8f 0e 08 af 20 01 15 a0 00 00 af 06 08
>1a4678		af 20 39 46 a9 2f 97 16 c8 af 09 08 af 20 39 46
>1a4688		a9 2f 97 16 c8 af 0f 08 af 20 39 46 af 0a 08 af
>1a4698		20 39 46 a9 00 97 16 af 0e 08 af 29 f7 8f 0e 08
>1a46a8		af c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>1a46b8		27 28 e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 08
>1a46c8		20 09 1d e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08
>1a46d8		af 20 01 15 a0 00 00 af 04 08 af 29 7f 20 39 46
>1a46e8		a9 3a 97 16 c8 af 02 08 af 20 39 46 a9 3a 97 16
>1a46f8		c8 af 00 08 af 20 39 46 a9 00 97 16 af 0e 08 af
>1a4708		29 f7 8f 0e 08 af c2 20 a5 16 85 23 a5 18 85 25
>1a4718		e2 20 a9 02 85 27 28 e2 20 20 1a 21 60 e2 20 a9
>1a4728		8f 20 27 22 08 20 09 1d e2 20 a9 01 85 27 a9 03
>1a4738		8f 00 e2 af a9 01 8f 01 e2 af c2 30 af 84 e8 af
>1a4748		8f 08 e2 af af 84 e8 af 29 ff 7f 8f 0a e2 af a9
>1a4758		ff ff 8f 0c e2 af a9 ff 7f 8f 0e e2 af ea ea ea
>1a4768		af 08 e2 af 85 23 af 0a e2 af 85 25 28 e2 20 20
>1a4778		1a 21 60 e2 20 a9 8f 20 27 22 08 20 09 1d 22 28
>1a4788		10 00 e2 20 85 23 64 24 64 25 64 26 a9 00 85 27
>1a4798		28 e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 08 c2
>1a47a8		30 20 09 1d 20 e3 06 c2 20 a5 25 48 a5 23 48 20
>1a47b8		3b 21 e2 20 a7 00 c9 2c f0 03 4c 16 48 20 1a 21
>1a47c8		20 09 1d 20 0d 07 c2 20 a5 23 48 20 3b 21 e2 20
>1a47d8		a7 00 c9 2c f0 03 4c 16 48 20 1a 21 20 09 1d 20
>1a47e8		0d 07 c2 20 a5 23 85 8f e2 20 a5 25 85 91 c2 20
>1a47f8		68 85 29 a9 00 00 85 2b 68 85 23 68 85 25 e2 20
>1a4808		a9 02 85 27 20 59 17 e2 20 20 1a 21 28 60 08 c2
>1a4818		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a4828		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2 20
>1a4838		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>1a4848		20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f
>1a4858		20 27 22 08 c2 30 20 09 1d e2 20 a5 27 c9 02 f0
>1a4868		03 4c d8 48 c2 20 a5 25 48 a5 23 48 20 3b 21 e2
>1a4878		20 a7 00 c9 2c f0 03 4c f7 48 20 1a 21 20 09 1d
>1a4888		e2 20 a5 27 c9 00 d0 48 c2 20 a5 23 85 8f c2 20
>1a4898		68 85 23 68 85 25 e2 20 a9 02 85 27 e2 20 a0 00
>1a48a8		00 b7 23 f0 03 c8 80 f9 c2 20 98 38 e5 8f 30 09
>1a48b8		85 29 a9 00 00 85 2b 80 07 a9 00 00 85 29 85 2b
>1a48c8		e2 20 a9 00 85 2d 20 59 17 e2 20 20 1a 21 28 60
>1a48d8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a48e8		08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08
>1a48f8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a4908		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>1a4918		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a4928		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9
>1a4938		8f 20 27 22 08 c2 30 20 09 1d e2 20 a5 27 c9 02
>1a4948		f0 03 4c a1 49 c2 20 a5 25 48 a5 23 48 20 3b 21
>1a4958		e2 20 a7 00 c9 2c f0 03 4c c0 49 20 1a 21 20 09
>1a4968		1d e2 20 a5 27 c9 00 d0 30 c2 20 a5 23 85 8f c2
>1a4978		20 a9 00 00 85 29 a9 00 00 85 2b e2 20 a9 00 85
>1a4988		2d c2 20 68 85 23 68 85 25 e2 20 a9 02 85 27 20
>1a4998		59 17 e2 20 20 1a 21 28 60 08 c2 20 48 a9 00 08
>1a49a8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a49b8		20 5b 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a49c8		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>1a49d8		5b 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>1a49e8		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b
>1a49f8		1e e2 20 dc d4 08 e2 20 a9 8f 20 27 22 20 09 1d
>1a4a08		c2 10 e2 20 a5 27 c9 02 d0 23 c2 20 a5 00 85 40
>1a4a18		a5 02 85 42 a5 23 85 00 a5 25 85 02 20 d8 08 a5
>1a4a28		40 85 00 a5 42 85 02 e2 20 20 1a 21 60 08 c2 20
>1a4a38		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a4a48		20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f
>1a4a58		20 27 22 08 20 09 1d c2 10 e2 20 a5 27 c9 00 d0
>1a4a68		1a 20 60 15 c2 20 a5 16 85 23 a5 18 85 25 e2 20
>1a4a78		a9 02 85 27 28 e2 20 20 1a 21 60 08 c2 20 48 a9
>1a4a88		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a4a98		ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f 20 27
>1a4aa8		22 08 20 09 1d 20 e3 06 c2 20 64 0c 64 0e e2 30
>1a4ab8		a0 00 b7 23 c9 20 f0 04 c9 24 d0 03 c8 80 f3 b7
>1a4ac8		23 20 0c 05 90 1e c2 20 06 0c 26 0e 06 0c 26 0e
>1a4ad8		06 0c 26 0e 06 0c 26 0e e2 20 20 2d 05 05 0c 85
>1a4ae8		0c c8 80 db c2 20 a5 0c 85 23 a5 0e 85 25 e2 20
>1a4af8		a9 00 85 27 28 e2 20 20 1a 21 60 e2 20 a9 8f 20
>1a4b08		27 22 08 20 09 1d 20 51 06 20 01 15 e2 30 a0 ff
>1a4b18		a9 00 97 16 88 a5 23 29 0f aa bf 00 d0 1a 97 16
>1a4b28		88 a5 23 29 f0 4a 4a 4a 4a aa bf 00 d0 1a 97 16
>1a4b38		88 a5 24 85 23 a5 25 85 24 a5 26 85 25 a9 00 85
>1a4b48		26 a5 23 d0 d0 a5 24 d0 cc a5 25 d0 c8 98 38 65
>1a4b58		16 85 23 a5 17 85 24 a5 18 85 25 a5 19 85 26 a9
>1a4b68		02 85 27 28 e2 20 20 1a 21 60 08 c2 20 48 a9 00
>1a4b78		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a4b88		00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f 20 27 22
>1a4b98		20 09 1d e2 20 a5 27 c9 02 d0 1f 8b a5 25 48 ab
>1a4ba8		c2 10 a6 23 20 ed 15 ab 84 23 c2 20 64 25 e2 20
>1a4bb8		a9 00 85 27 e2 20 20 1a 21 60 08 c2 20 48 a9 00
>1a4bc8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a4bd8		00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f 20 27 22
>1a4be8		20 09 1d 20 51 06 e2 20 a5 25 c9 b0 90 10 c9 f0
>1a4bf8		b0 0c 8b 48 ab a6 23 22 44 11 00 ab 80 04 e2 20
>1a4c08		a7 23 85 23 64 24 64 25 64 26 e2 20 20 1a 21 60
>1a4c18		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a4c28		08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2
>1a4c38		20 a9 8f 20 27 22 20 09 1d 20 51 06 e2 20 a5 25
>1a4c48		c9 b0 90 22 c9 f0 b0 1e 8b 48 ab a6 23 da 22 44
>1a4c58		11 00 85 0c fa e8 da 22 44 11 00 85 0d fa e8 22
>1a4c68		44 11 00 ab 80 0d c2 20 a7 23 85 0c e2 20 a0 02
>1a4c78		00 b7 23 85 25 64 26 c2 20 a5 0c 85 23 e2 20 20
>1a4c88		1a 21 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a4c98		04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a4ca8		d4 08 e2 20 a9 8f 20 27 22 20 09 1d 20 51 06 e2
>1a4cb8		20 a5 25 c9 b0 90 1d c9 f0 b0 19 8b 48 ab a6 23
>1a4cc8		da 22 44 11 00 85 23 fa e8 22 44 11 00 85 24 ab
>1a4cd8		c2 20 80 06 c2 20 a7 23 85 23 64 25 e2 20 20 1a
>1a4ce8		21 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>1a4cf8		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a4d08		08 e2 20 a9 8f 20 27 22 20 09 1d e2 20 a5 27 c9
>1a4d18		00 d0 24 20 01 15 a5 23 87 16 a9 00 a0 01 00 97
>1a4d28		16 c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>1a4d38		27 e2 20 20 1a 21 60 08 c2 20 48 a9 00 08 5b 68
>1a4d48		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b
>1a4d58		1e e2 20 dc d4 08 e2 20 a9 8f 20 27 22 20 09 1d
>1a4d68		e2 20 a5 27 c9 02 d0 14 a7 23 85 23 64 24 64 25
>1a4d78		64 26 a9 00 85 27 e2 20 20 1a 21 60 08 c2 20 48
>1a4d88		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>1a4d98		29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f 20
>1a4da8		27 22 20 09 1d e2 20 a5 27 c9 00 d0 39 e2 20 a5
>1a4db8		26 d0 52 a5 25 d0 4e a5 24 d0 4a c2 10 20 01 15
>1a4dc8		a4 23 e2 20 a9 00 97 16 88 30 07 a9 20 97 16 88
>1a4dd8		10 fb a9 02 85 27 c2 20 a5 16 85 23 a5 18 85 25
>1a4de8		e2 20 20 1a 21 60 08 c2 20 48 a9 00 08 5b 68 28
>1a4df8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a4e08		e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4e18		20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>1a4e28		20 dc d4 08 e2 20 a9 8f 20 27 22 20 09 1d e2 20
>1a4e38		a5 27 c9 00 d0 39 e2 20 a5 26 d0 52 a5 25 d0 4e
>1a4e48		a5 24 d0 4a c2 10 20 01 15 a4 23 e2 20 a9 00 97
>1a4e58		16 88 30 07 a9 09 97 16 88 10 fb a9 02 85 27 c2
>1a4e68		20 a5 16 85 23 a5 18 85 25 e2 20 20 1a 21 60 08
>1a4e78		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a4e88		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>1a4e98		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a4ea8		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9
>1a4eb8		8f 20 27 22 20 09 1d e2 20 a5 27 c9 00 f0 23 c9
>1a4ec8		01 f0 3e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a4ed8		04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a4ee8		d4 08 c2 20 a5 25 10 21 49 ff ff 85 25 a5 23 49
>1a4ef8		ff ff 18 69 01 00 85 23 a5 25 69 00 00 85 25 80
>1a4f08		08 e2 20 a5 26 29 7f 85 26 e2 20 20 1a 21 60 e2
>1a4f18		20 a9 8f 20 27 22 20 09 1d e2 20 a5 27 c9 00 d0
>1a4f28		25 c2 20 a5 25 30 12 d0 04 a5 23 f0 13 a9 00 00
>1a4f38		85 25 a9 01 00 85 23 80 07 a9 ff ff 85 25 85 23
>1a4f48		e2 20 20 1a 21 60 08 c2 20 48 a9 00 08 5b 68 28
>1a4f58		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a4f68		e2 20 dc d4 08 e2 20 a9 8f 20 27 22 20 09 1d 20
>1a4f78		51 06 e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 20
>1a4f88		09 1d 20 bf 07 20 3e 62 e2 20 20 1a 21 60 e2 20
>1a4f98		a9 8f 20 27 22 20 09 1d 20 bf 07 20 6d 62 e2 20
>1a4fa8		20 1a 21 60 e2 20 a9 8f 20 27 22 20 09 1d 20 bf
>1a4fb8		07 20 9c 62 e2 20 20 1a 21 60 e2 20 a9 8f 20 27
>1a4fc8		22 20 09 1d 20 bf 07 20 ca 62 e2 20 20 1a 21 60
>1a4fd8		e2 20 a9 8f 20 27 22 20 09 1d 20 bf 07 20 f3 63
>1a4fe8		e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 20 09 1d
>1a4ff8		20 bf 07 20 c9 63 e2 20 20 1a 21 60 e2 20 a9 8f
>1a5008		20 27 22 20 09 1d 20 bf 07 20 15 64 e2 20 20 1a
>1a5018		21 60 e2 20 a9 8f 20 27 22 20 09 1d 20 bf 07 20
>1a5028		a9 64 e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 20
>1a5038		09 1d 20 bf 07 20 2b 65 e2 20 20 1a 21 60 00 ea
>1a5048		60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2
>1a5058		20 a9 00 00 85 d9 e2 20 a9 16 85 db c2 30 a9 00
>1a5068		00 a0 00 00 97 d9 a0 02 00 97 d9 a0 04 00 97 d9
>1a5078		20 f0 20 2b 28 60 8b 08 c2 20 a9 00 00 85 1a a9
>1a5088		16 00 85 1c 20 f0 20 20 d0 23 28 ab 60 08 c2 20
>1a5098		64 55 a9 ff 7f 85 59 20 d7 03 20 7b 22 29 ff 00
>1a50a8		c9 00 00 f0 2c c9 81 00 f0 1a 20 3b 21 20 d8 08
>1a50b8		a5 23 85 55 20 7b 22 29 ff 00 c9 00 00 f0 12 c9
>1a50c8		81 00 d0 2a 20 27 22 20 3b 21 20 d8 08 a5 23 85
>1a50d8		59 a5 1c 48 a5 1a 48 a5 02 48 a5 00 48 20 8b 18
>1a50e8		68 85 00 68 85 02 68 85 1a 68 85 1c 28 60 08 c2
>1a50f8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a5108		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 08 c2
>1a5118		20 48 a9 00 08 5b 68 28 c2 20 64 e4 64 e7 e2 20
>1a5128		64 e6 64 e9 64 ea c2 20 38 a5 d9 69 04 00 85 e1
>1a5138		e2 20 a5 db 69 00 85 e3 28 60 c9 5f f0 1a c9 3a
>1a5148		b0 04 c9 30 b0 12 c9 5b b0 04 c9 41 b0 0a c9 7b
>1a5158		b0 04 c9 61 b0 02 18 60 38 60 08 e2 20 c2 10 a0
>1a5168		00 00 b7 0c f0 0a d7 e7 d0 13 c8 c0 08 00 d0 f2
>1a5178		b7 e7 20 56 05 20 42 51 b0 03 28 38 60 28 18 60
>1a5188		08 e2 20 c2 10 a0 00 00 a2 00 00 b7 e7 f0 0b 20
>1a5198		56 05 9f 00 4e 00 c8 e8 80 f1 a9 00 9f 00 4e 00
>1a51a8		c2 20 a9 00 4e 85 e7 e2 20 a9 00 85 e9 c2 20 a5
>1a51b8		e4 85 08 d0 06 e2 20 a5 e6 f0 4d e2 20 a5 e6 85
>1a51c8		0a a5 ea a0 00 00 d7 08 d0 17 c2 20 18 a5 08 69
>1a51d8		01 00 85 0c e2 20 a5 0a 69 00 85 0e 20 62 51 b0
>1a51e8		2a a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2 20 b7 08
>1a51f8		85 0e d0 06 c2 20 a5 0c f0 0e c2 20 a5 0c 85 08
>1a5208		e2 20 a5 0e 85 0a 80 b9 28 18 60 28 38 60 08 20
>1a5218		88 51 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a5228		a9 05 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>1a5238		dc d4 08 c2 30 a0 09 00 b7 08 85 23 c8 c8 b7 08
>1a5248		85 25 e2 20 a0 00 00 b7 08 85 27 28 60 08 c2 20
>1a5258		18 a5 e1 69 10 00 85 08 e2 20 a5 e3 69 00 85 0a
>1a5268		c5 bc 90 27 c2 20 a5 08 c5 ba 90 1f 08 c2 20 48
>1a5278		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>1a5288		29 ff 00 20 5b 1e e2 20 dc d4 08 c2 20 a5 e1 85
>1a5298		c0 e2 20 a5 e3 85 c2 c2 20 a5 08 85 e1 e2 20 a5
>1a52a8		0a 85 e3 28 60 08 e2 20 a5 27 c5 ea f0 33 a5 ea
>1a52b8		c9 00 d0 05 20 51 06 80 2f c9 01 d0 05 20 bf 07
>1a52c8		80 26 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>1a52d8		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a52e8		08 c9 02 d0 03 20 f3 16 c2 10 20 55 52 c2 30 18
>1a52f8		a5 c0 69 01 00 85 08 e2 20 a5 c2 69 00 85 0a a0
>1a5308		00 00 a9 00 97 08 c8 c0 08 00 d0 f8 a0 00 00 b7
>1a5318		e7 f0 10 20 56 05 20 42 51 90 08 97 08 c8 c0 08
>1a5328		00 d0 ec c2 20 a0 09 00 a5 23 97 c0 a5 25 c8 c8
>1a5338		97 c0 a5 e4 a0 0d 00 97 c0 c8 c8 e2 20 a5 e6 97
>1a5348		c0 c2 20 a5 c0 85 e4 e2 20 a5 c2 85 e6 e2 20 a0
>1a5358		00 00 a5 27 97 c0 c9 02 f0 02 28 60 c2 20 a5 23
>1a5368		85 c0 e2 20 a5 25 85 c2 20 0f 13 20 24 13 80 ea
>1a5378		08 c2 30 a5 e4 d0 06 e2 20 a5 e6 f0 05 20 88 51
>1a5388		b0 05 20 ad 52 80 4e e2 20 a5 27 c5 ea f0 33 a5
>1a5398		ea c9 00 d0 05 20 51 06 80 2c c9 01 d0 05 20 bf
>1a53a8		07 80 23 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a53b8		04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a53c8		d4 08 c9 02 f0 11 c2 30 a0 09 00 a5 23 97 08 c8
>1a53d8		c8 a5 25 97 08 28 60 20 f3 16 a0 09 00 b7 08 85
>1a53e8		c0 c8 c8 e2 20 b7 08 85 c2 20 0f 13 20 43 13 e2
>1a53f8		20 a5 27 c9 02 f0 02 80 cd c2 20 a5 23 85 c0 e2
>1a5408		20 a5 25 85 c2 20 0f 13 20 24 13 80 b9 08 20 3b
>1a5418		21 e2 20 a7 00 20 e2 04 90 42 c2 20 a5 00 85 e7
>1a5428		e2 20 a5 02 85 e9 20 1a 21 a7 00 f0 0d c9 24 f0
>1a5438		14 c9 25 f0 09 20 42 51 b0 ec a9 01 80 0c 20 1a
>1a5448		21 a9 00 80 05 20 1a 21 a9 02 85 ea 20 7b 22 c9
>1a5458		8f d0 06 a5 ea 09 80 85 ea 28 38 60 28 18 60 08
>1a5468		c2 20 18 a5 23 65 29 85 23 a5 25 65 2b 85 25 28
>1a5478		60 08 c2 20 38 a5 23 e5 29 85 23 a5 25 e5 2b 85
>1a5488		25 28 60 08 c2 20 3b 38 e9 0a 00 1b c2 30 a9 00
>1a5498		00 83 01 83 03 83 05 83 07 83 09 a5 25 10 18 a9
>1a54a8		00 80 83 01 a5 25 49 ff ff 85 25 a5 23 49 ff ff
>1a54b8		1a 85 23 d0 02 e6 25 a5 2b 10 1a a3 01 49 00 80
>1a54c8		83 01 a5 2b 49 ff ff 85 2b a5 29 49 ff ff 1a 85
>1a54d8		29 d0 02 e6 2b a5 25 f0 04 a5 2b d0 5a a5 23 8f
>1a54e8		00 01 00 a5 29 8f 02 01 00 af 04 01 00 83 03 af
>1a54f8		06 01 00 83 05 a5 25 8f 00 01 00 a5 29 8f 02 01
>1a5508		00 18 af 04 01 00 63 05 83 05 af 06 01 00 63 07
>1a5518		83 07 a5 23 8f 00 01 00 a5 2b 8f 02 01 00 18 af
>1a5528		04 01 00 63 05 83 05 af 06 01 00 63 07 83 07 a3
>1a5538		07 f0 23 a3 09 f0 1f 08 c2 20 48 a9 00 08 5b 68
>1a5548		28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00 20 5b
>1a5558		1e e2 20 dc d4 08 c2 30 a3 01 10 16 a3 05 49 ff
>1a5568		ff 83 05 a3 03 49 ff ff 1a 83 03 d0 05 a3 05 1a
>1a5578		83 05 a3 03 85 23 a3 05 85 25 c2 20 3b 18 69 0a
>1a5588		00 1b 28 60 08 c2 20 a5 23 c5 29 a5 25 e5 2b 50
>1a5598		03 49 00 80 30 06 64 23 64 25 80 07 a9 ff ff 85
>1a55a8		23 85 25 28 60 08 c2 20 a5 23 c5 29 d0 0c a5 25
>1a55b8		c5 2b d0 06 64 23 64 25 80 16 a5 29 c5 23 a5 2b
>1a55c8		e5 25 50 03 49 00 80 10 eb a9 ff ff 85 23 85 25
>1a55d8		28 60 08 c2 20 a5 2b c5 25 d0 0f a5 29 c5 23 d0
>1a55e8		09 a9 ff ff 85 23 85 25 80 04 64 23 64 25 28 60
>1a55f8		08 c2 20 a5 2b c5 25 d0 0c a5 29 c5 23 d0 06 64
>1a5608		23 64 25 80 07 a9 ff ff 85 23 85 25 28 60 08 c2
>1a5618		20 a5 23 c5 29 d0 0f a5 25 c5 2b d0 09 a9 ff ff
>1a5628		85 23 85 25 80 13 a5 29 c5 23 a5 2b e5 25 50 03
>1a5638		49 00 80 30 e8 64 23 64 25 28 60 08 c2 20 a5 23
>1a5648		c5 29 d0 0f a5 25 c5 2b d0 09 a9 ff ff 85 23 85
>1a5658		25 80 13 a5 23 c5 29 a5 25 e5 2b 50 03 49 00 80
>1a5668		30 e8 64 23 64 25 28 60 08 c2 20 8f 12 01 00 8a
>1a5678		8f 10 01 00 af 16 01 00 aa af 14 01 00 28 60 08
>1a5688		e2 20 a9 03 8f 00 e2 af a9 00 8f 01 e2 af c2 20
>1a5698		a5 23 8f 08 e2 af a5 25 8f 0a e2 af a9 00 00 8f
>1a56a8		0c e2 af a9 00 01 8f 0e e2 af ea ea ea ea ea ea
>1a56b8		af 08 e2 af 85 23 af 0a e2 af 85 25 a9 01 00 85
>1a56c8		27 28 60 08 e2 20 a9 40 8f 00 e2 af 80 09 08 e2
>1a56d8		20 a9 48 8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5
>1a56e8		23 8f 08 e2 af a5 25 8f 0a e2 af a5 29 8f 0c e2
>1a56f8		af a5 2b 8f 0e e2 af ea ea ea e2 20 af 06 e2 af
>1a5708		29 07 d0 10 c2 20 af 08 e2 af 85 23 af 0a e2 af
>1a5718		85 25 28 60 20 b7 57 80 f9 08 e2 20 a9 01 8f 01
>1a5728		e2 af a9 00 8f 00 e2 af c2 20 a5 23 8f 08 e2 af
>1a5738		a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e
>1a5748		e2 af ea ea ea e2 20 af 05 e2 af 29 17 d0 10 c2
>1a5758		20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60 20
>1a5768		b7 57 80 f9 08 e2 20 a9 00 8f 01 e2 af a9 00 8f
>1a5778		00 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2
>1a5788		af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af ea ea ea
>1a5798		e2 20 af 04 e2 af 29 07 d0 10 c2 20 af 08 e2 af
>1a57a8		85 23 af 0a e2 af 85 25 28 60 20 b7 57 80 f9 e2
>1a57b8		20 89 01 f0 20 00 08 c2 20 48 a9 00 08 5b 68 28
>1a57c8		e2 20 a9 0c 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a57d8		e2 20 dc d4 08 89 02 f0 1f 08 c2 20 48 a9 00 08
>1a57e8		5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00
>1a57f8		20 5b 1e e2 20 dc d4 08 89 04 f0 1f 08 c2 20 48
>1a5808		a9 00 08 5b 68 28 e2 20 a9 0e 8f d3 08 00 c2 20
>1a5818		29 ff 00 20 5b 1e e2 20 dc d4 08 60 08 e2 20 a9
>1a5828		00 8f 01 e2 af a9 02 8f 00 e2 af c2 20 a9 00 a0
>1a5838		8f 0c e2 af a9 00 00 8f 0e e2 af a5 23 8f 08 e2
>1a5848		af a5 25 8f 0a e2 af ea ea ea e2 20 af 04 e2 af
>1a5858		89 07 f0 01 00 c2 20 af 08 e2 af 85 23 af 0a e2
>1a5868		af 85 25 28 60 08 e2 20 a9 01 8f 01 e2 af a9 02
>1a5878		8f 00 e2 af c2 20 a9 00 a0 8f 0c e2 af a9 00 00
>1a5888		8f 0e e2 af a5 23 8f 08 e2 af a5 25 8f 0a e2 af
>1a5898		ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 28
>1a58a8		60 08 c2 20 a5 23 d0 0a a5 25 29 ff 7f d0 03 28
>1a58b8		38 60 28 18 60 08 e2 20 38 e9 30 20 7a 05 c2 20
>1a58c8		29 ff 00 18 65 23 85 23 a5 25 69 00 00 85 25 28
>1a58d8		60 08 e2 20 c9 30 90 04 c9 3a 90 1c c9 61 90 04
>1a58e8		c9 67 90 0a c9 41 90 04 c9 47 90 07 80 31 38 e9
>1a58f8		57 80 08 38 e9 37 80 03 38 e9 30 06 23 26 24 26
>1a5908		25 26 26 06 23 26 24 26 25 26 26 06 23 26 24 26
>1a5918		25 26 26 06 23 26 24 26 25 26 26 05 23 85 23 28
>1a5928		60 08 e2 20 c9 30 f0 06 c9 31 f0 0a 80 0f c2 20
>1a5938		06 23 26 25 80 07 c2 20 38 26 23 26 25 28 60 08
>1a5948		e2 30 a5 61 f0 0d aa a5 69 d0 15 a9 00 8f 01 e2
>1a5958		af 80 15 e2 20 a9 03 8f 01 e2 af ea ea ea 80 62
>1a5968		e2 20 a9 01 8f 01 e2 af e2 20 a9 43 8f 00 e2 af
>1a5978		c2 20 a9 00 10 8f 08 e2 af a9 00 00 8f 0a e2 af
>1a5988		c2 20 a9 00 a0 8f 0c e2 af a9 00 00 8f 0e e2 af
>1a5998		ea ea ea ca f0 2c af 08 e2 af 8f 0c 08 00 af 0a
>1a59a8		e2 af 8f 0e 08 00 e2 20 a9 42 8f 00 e2 af c2 20
>1a59b8		af 0c 08 00 8f 08 e2 af af 0e 08 00 8f 0a e2 af
>1a59c8		80 be c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25
>1a59d8		e2 20 a9 01 85 27 28 60 08 c2 20 a5 5d 85 23 a5
>1a59e8		5f 85 25 20 f9 5b c2 20 a5 23 85 29 a5 25 85 2b
>1a59f8		c2 20 a5 59 85 23 a5 5b 85 25 20 21 57 c2 20 a5
>1a5a08		55 85 29 a5 57 85 2b 20 d6 56 c2 20 a5 23 85 29
>1a5a18		a5 25 85 2b 20 47 59 20 6c 57 c2 20 a5 65 f0 07
>1a5a28		a5 25 09 00 80 85 25 e2 20 a9 01 85 27 28 60 5a
>1a5a38		08 c2 30 64 23 64 25 64 55 64 57 64 65 64 59 64
>1a5a48		5b a9 01 00 85 5d 64 5f 64 61 64 63 64 69 e2 20
>1a5a58		a0 00 00 b7 00 c9 2b f0 33 c9 2d f0 2b c9 26 f0
>1a5a68		3a 20 fb 04 90 03 82 ac 00 08 c2 20 48 a9 00 08
>1a5a78		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a5a88		20 5b 1e e2 20 dc d4 08 a9 01 85 65 c8 b7 00 c9
>1a5a98		26 f0 08 20 fb 04 90 d1 82 7a 00 c8 b7 00 c9 68
>1a5aa8		f0 0e c9 48 f0 0a c9 62 f0 4c c9 42 f0 48 80 b9
>1a5ab8		c8 b7 00 20 0c 05 b0 02 80 af 20 d9 58 c8 b7 00
>1a5ac8		20 0c 05 b0 f5 e2 20 a5 65 f0 11 c2 20 38 a9 00
>1a5ad8		00 e5 23 85 23 a9 00 00 e5 25 85 25 e2 20 a9 00
>1a5ae8		85 27 c2 20 18 98 65 00 85 00 a5 02 69 00 00 85
>1a5af8		02 e2 20 28 7a 60 c8 b7 00 c9 30 f0 07 c9 31 f0
>1a5b08		03 82 65 ff 20 29 59 c8 b7 00 c9 30 f0 f6 c9 31
>1a5b18		f0 f2 82 b0 ff 20 bd 58 c8 b7 00 c9 2e f0 08 20
>1a5b28		fb 04 b0 f1 82 9e ff c2 20 20 f9 5b c2 20 a5 23
>1a5b38		85 55 a5 25 85 57 64 23 64 25 e2 20 80 36 20 bd
>1a5b48		58 c2 20 a5 5f 8f 00 01 00 a9 0a 00 8f 02 01 00
>1a5b58		af 04 01 00 85 5f a5 5d 8f 00 01 00 a9 0a 00 8f
>1a5b68		02 01 00 af 04 01 00 85 5d af 06 01 00 18 65 5f
>1a5b78		85 5f e2 20 c8 b7 00 c9 65 f0 24 c9 45 f0 20 20
>1a5b88		fb 04 b0 ba c2 20 20 f9 5b c2 20 a5 23 85 59 a5
>1a5b98		25 85 5b 64 23 64 25 20 e0 59 e2 20 82 43 ff c2
>1a5ba8		20 20 f9 5b c2 20 a5 23 85 59 a5 25 85 5b 64 23
>1a5bb8		64 25 e2 20 c8 b7 00 c9 2b f0 10 c9 2d f0 08 20
>1a5bc8		fb 04 b0 12 82 a2 fe a9 01 85 69 c8 b7 00 20 fb
>1a5bd8		04 b0 03 82 93 fe 20 bd 58 c8 b7 00 20 fb 04 b0
>1a5be8		f5 c2 20 a5 23 85 61 a5 25 85 63 20 e0 59 82 f1
>1a5bf8		fe 08 20 87 56 28 60 08 c2 20 a9 f6 5e 85 29 a9
>1a5c08		1a 00 85 2b e2 20 a9 01 85 2d c2 20 20 d2 5c c9
>1a5c18		ff ff d0 0c a9 00 00 8d 23 08 8d 25 08 82 a1 00
>1a5c28		f4 00 00 f4 00 00 f4 00 00 e2 20 ad 26 08 29 80
>1a5c38		83 01 ad 25 08 2a ad 26 08 2a 83 02 a9 00 83 06
>1a5c48		ad 25 08 09 80 83 05 ad 24 08 83 04 ad 23 08 83
>1a5c58		03 a3 02 c9 96 f0 3a 90 1f 08 c2 20 48 a9 00 08
>1a5c68		5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00
>1a5c78		20 5b 1e e2 20 dc d4 08 c2 20 a3 05 4a 83 05 a3
>1a5c88		03 6a 83 03 e2 20 a3 02 1a 83 02 c9 96 f0 02 80
>1a5c98		e7 a3 01 f0 1b c2 20 a3 03 49 ff ff 18 69 01 00
>1a5ca8		8d 23 08 a3 05 49 ff ff 69 00 00 8d 25 08 80 0c
>1a5cb8		c2 20 a3 03 8d 23 08 a3 05 8d 25 08 c2 20 68 68
>1a5cc8		68 e2 20 a9 00 8d 27 08 28 60 da 08 c2 20 a5 25
>1a5cd8		48 a5 23 48 20 cb 56 20 a9 58 b0 11 a5 25 89 00
>1a5ce8		80 d0 05 a9 01 00 80 08 a9 ff ff 80 03 a9 00 00
>1a5cf8		fa 86 23 fa 86 25 28 fa 60 08 c2 30 20 d2 5c c9
>1a5d08		ff ff d0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2
>1a5d18		30 20 d2 5c c9 01 00 d0 05 20 2d 06 80 03 20 3f
>1a5d28		06 28 60 08 c2 30 20 d2 5c c9 00 00 d0 05 20 2d
>1a5d38		06 80 03 20 3f 06 28 60 08 c2 30 20 d2 5c c9 01
>1a5d48		00 f0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2 30
>1a5d58		20 d2 5c c9 ff ff f0 05 20 2d 06 80 03 20 3f 06
>1a5d68		28 60 08 c2 30 20 d2 5c c9 00 00 f0 05 20 2d 06
>1a5d78		80 03 20 3f 06 28 60 08 e2 20 97 23 c8 a9 00 97
>1a5d88		23 28 60 da 08 e2 20 c9 80 90 0a 48 a9 2d 20 7f
>1a5d98		5d 68 49 ff 1a c2 30 29 ff 00 c9 64 00 90 0e a2
>1a5da8		64 00 20 70 56 18 69 30 00 20 7f 5d 8a a2 0a 00
>1a5db8		20 70 56 18 69 30 00 20 7f 5d 8a 18 69 30 00 20
>1a5dc8		7f 5d 28 fa 60 08 e2 20 c2 10 a0 00 00 b7 23 f0
>1a5dd8		03 c8 80 f9 28 60 08 e2 20 c2 10 f4 00 00 f4 00
>1a5de8		00 f4 00 00 20 a9 58 90 19 20 01 15 e2 20 a0 00
>1a5df8		00 a9 20 97 16 c8 a9 30 97 16 c8 a9 00 97 16 82
>1a5e08		ce 00 e2 20 a5 26 10 08 29 7f 85 26 a9 01 83 01
>1a5e18		c2 20 a9 00 00 83 03 c2 20 af f2 5e 1a 85 29 af
>1a5e28		f4 5e 1a 85 2b 20 d2 5c 89 00 80 d0 12 20 6d 58
>1a5e38		a3 03 1a 83 03 20 d2 5c c9 ff ff f0 12 80 ee 20
>1a5e48		24 58 a3 03 3a 83 03 20 d2 5c c9 ff ff f0 f0 e2
>1a5e58		30 a5 25 0a a5 26 2a 83 05 38 a9 96 e3 05 aa f0
>1a5e68		0f a5 25 09 80 85 25 46 25 66 24 66 23 ca d0 f7
>1a5e78		c2 10 e2 20 64 26 a9 00 85 27 a3 01 f0 11 c2 20
>1a5e88		38 a9 00 00 e5 23 85 23 a9 00 00 e5 25 85 25 20
>1a5e98		60 15 c2 20 a5 16 85 23 a5 18 85 25 20 cd 5d e2
>1a5ea8		20 c8 a9 00 97 23 88 88 b7 23 c8 97 23 c0 02 00
>1a5eb8		d0 f4 a9 2e 97 23 e2 20 18 a3 03 69 05 83 06 f0
>1a5ec8		19 20 cd 5d a9 45 20 7f 5d a3 06 20 8b 5d 80 0a
>1a5ed8		c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27
>1a5ee8		c2 20 3b 18 69 06 00 1b 28 60 00 50 c3 47 00 00
>1a5ef8		80 3f f3 04 b5 3f f3 04 35 3f e2 20 a9 48 8f 00
>1a5f08		e2 af c2 20 bd 00 00 8f 08 e2 af bd 02 00 8f 0a
>1a5f18		e2 af 88 e8 e8 e8 e8 e2 20 a9 00 8f 01 e2 af c2
>1a5f28		20 af 23 08 00 8f 0c e2 af af 25 08 00 8f 0e e2
>1a5f38		af ea ea ea af 08 e2 af 48 af 0a e2 af 8f 0a e2
>1a5f48		af 68 8f 08 e2 af e2 20 a9 02 8f 01 e2 af c2 20
>1a5f58		bd 00 00 8f 0c e2 af bd 02 00 8f 0e e2 af ea ea
>1a5f68		ea 88 f0 14 af 08 e2 af 48 af 0a e2 af 8f 0a e2
>1a5f78		af 68 8f 08 e2 af 80 9b af 08 e2 af 8f 23 08 00
>1a5f88		af 0a e2 af 8f 25 08 00 60 e2 20 a9 00 8f 00 e2
>1a5f98		af a9 00 8f 01 e2 af c2 20 a5 23 8f 08 e2 af 8f
>1a5fa8		0c e2 af af 25 08 00 8f 0a e2 af 8f 0e e2 af ea
>1a5fb8		ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 60 e2
>1a5fc8		20 a9 00 8f 00 e2 af a9 01 8f 01 e2 af c2 20 a5
>1a5fd8		23 8f 0c e2 af af 25 08 00 8f 0e e2 af af 1b 66
>1a5fe8		1a 8f 08 e2 af af 1d 66 1a 8f 0a e2 af ea ea ea
>1a5ff8		af 08 e2 af 85 23 af 0a e2 af 85 25 60 a2 00 00
>1a6008		a5 23 c5 29 a5 25 e5 2b 90 1e a5 23 8f 08 e2 af
>1a6018		a5 25 8f 0a e2 af ea ea ea af 08 e2 af 85 23 af
>1a6028		0a e2 af 85 25 e8 80 d8 60 e2 20 a5 26 10 09 29
>1a6038		7f 85 26 a9 01 48 80 03 a9 00 48 a9 40 8f 00 e2
>1a6048		af a9 02 8f 01 e2 af c2 30 af 83 66 1a 85 29 8f
>1a6058		0c e2 af af 85 66 1a 85 2b 8f 0e e2 af 20 05 60
>1a6068		e2 20 68 c2 20 f0 1e a5 23 8f 08 e2 af a5 25 8f
>1a6078		0a e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af
>1a6088		29 ff 7f 85 25 60 5a a2 00 00 a0 00 00 a5 23 df
>1a6098		87 66 1a a5 25 ff 89 66 1a 90 2c bf 83 66 1a 8f
>1a60a8		08 e2 af bf 85 66 1a 8f 0a e2 af a5 23 8f 0c e2
>1a60b8		af a5 25 8f 0e e2 af ea ea ea af 08 e2 af 85 23
>1a60c8		af 0a e2 af 85 25 38 98 2a a8 e8 e8 e8 e8 e0 0c
>1a60d8		00 d0 ba 98 aa 7a 60 08 c2 30 48 da 20 91 5f 8b
>1a60e8		e2 20 a9 1a 48 ab c2 20 a2 c3 65 5a a0 05 00 20
>1a60f8		02 5f 7a a9 01 00 8f 27 08 00 ab fa 68 28 60 08
>1a6108		c2 30 48 da a5 23 85 29 a5 25 85 2b 20 91 5f 8b
>1a6118		e2 20 a9 1a 48 ab c2 20 a2 d7 65 5a a0 05 00 20
>1a6128		02 5f 7a ab 20 6c 57 fa 68 28 60 08 c2 30 48 da
>1a6138		a5 23 85 29 a5 25 85 2b 20 91 5f 8b e2 20 a9 1a
>1a6148		48 ab c2 20 a2 eb 65 5a a0 05 00 20 02 5f 7a ab
>1a6158		20 6c 57 fa 68 28 60 08 c2 30 48 da e2 20 a9 40
>1a6168		8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f 08
>1a6178		e2 af a5 25 8f 0a e2 af af 1b 66 1a 8f 0c e2 af
>1a6188		af 1d 66 1a 8f 0e e2 af ea ea ea af 08 e2 af 85
>1a6198		0c af 0a e2 af 85 0e e2 20 a9 48 8f 00 e2 af c2
>1a61a8		20 ea ea ea af 08 e2 af 85 10 af 0a e2 af 85 12
>1a61b8		e2 20 a9 01 8f 01 e2 af c2 20 a5 0c 8f 08 e2 af
>1a61c8		a5 0e 8f 0a e2 af a5 10 8f 0c e2 af a5 12 8f 0e
>1a61d8		e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85
>1a61e8		25 e2 20 a9 08 8f 00 e2 af a9 02 8f 01 e2 af c2
>1a61f8		20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af ea ea ea
>1a6208		af 08 e2 af 85 29 af 0a e2 af 85 2b 20 91 5f 8b
>1a6218		e2 20 a9 1a 48 ab c2 20 a2 ff 65 5a a0 08 00 20
>1a6228		02 5f 7a a9 01 00 8f 27 08 00 8f 2d 08 00 20 6c
>1a6238		57 ab fa 68 28 60 08 c2 30 48 da 20 31 60 20 8e
>1a6248		60 da 8a 29 01 00 d0 05 20 07 61 80 03 20 df 60
>1a6258		fa 8a 29 04 00 f0 0a e2 20 a5 26 09 80 85 26 c2
>1a6268		20 fa 68 28 60 08 c2 30 48 da 20 31 60 20 8e 60
>1a6278		da 8a 29 01 00 d0 05 20 df 60 80 03 20 07 61 fa
>1a6288		8a 29 02 00 f0 0a e2 20 a5 26 09 80 85 26 c2 20
>1a6298		fa 68 28 60 08 c2 30 48 da 20 31 60 20 8e 60 20
>1a62a8		33 61 8a 29 01 00 f0 03 20 c7 5f 8a e2 20 4a 4a
>1a62b8		69 00 29 01 f0 06 a5 26 09 80 85 26 c2 20 fa 68
>1a62c8		28 60 08 c2 30 48 da 5a a5 25 10 1f 08 c2 20 48
>1a62d8		a9 00 08 5b 68 28 e2 20 a9 17 8f d3 08 00 c2 20
>1a62e8		29 ff 00 20 5b 1e e2 20 dc d4 08 c2 30 a5 23 cf
>1a62f8		1b 66 1a a5 25 cf 1d 66 1a b0 04 20 c7 5f 18 a9
>1a6308		00 00 a8 2a 48 e2 20 a9 00 8f 00 e2 af a9 01 8f
>1a6318		01 e2 af c2 20 af 73 66 1a 85 29 8f 0c e2 af af
>1a6328		75 66 1a 85 2b 8f 0e e2 af 20 05 60 8a f0 07 0a
>1a6338		0a 0a 0a 0a 0a a8 af 77 66 1a 85 29 8f 0c e2 af
>1a6348		af 79 66 1a 85 2b 8f 0e e2 af 20 05 60 8a f0 0b
>1a6358		0a 0a 0a 0a 85 29 18 98 65 29 a8 af 7b 66 1a 85
>1a6368		29 8f 0c e2 af af 7d 66 1a 85 2b 8f 0e e2 af 20
>1a6378		05 60 8a f0 09 0a 0a 85 29 18 98 65 29 a8 af 7f
>1a6388		66 1a 85 29 8f 0c e2 af af 81 66 1a 85 2b 8f 0e
>1a6398		e2 af 20 05 60 86 29 18 98 65 29 a8 20 5f 61 a5
>1a63a8		23 85 29 a5 25 85 2b 98 85 23 64 25 20 f9 5b 20
>1a63b8		d6 56 68 d0 07 a5 25 09 00 80 85 25 7a fa 68 28
>1a63c8		60 08 c2 30 48 da a5 23 85 29 a5 25 85 2b 20 91
>1a63d8		5f 8b e2 20 a9 1a 48 ab c2 20 a2 23 66 a0 05 00
>1a63e8		20 02 5f ab 20 6c 57 fa 68 28 60 08 c2 30 48 da
>1a63f8		20 c9 63 af 8b 66 1a 85 29 af 8d 66 1a 85 2b 20
>1a6408		cb 56 a5 25 49 00 80 85 25 fa 68 28 60 08 c2 30
>1a6418		48 da a5 23 85 29 a5 25 85 2b 20 91 5f 8b e2 20
>1a6428		a9 1a 48 ab c2 20 a2 37 66 a0 05 00 20 02 5f ab
>1a6438		20 6c 57 fa 68 28 60 c2 20 a5 23 85 29 a5 25 85
>1a6448		2b c2 20 af 1b 66 1a 85 23 af 1d 66 1a 85 25 8a
>1a6458		f0 30 4a aa 90 03 20 6c 57 c2 20 a5 25 48 a5 23
>1a6468		48 c2 20 a5 29 85 23 a5 2b 85 25 20 91 5f c2 20
>1a6478		a5 23 85 29 a5 25 85 2b c2 20 68 85 23 68 85 25
>1a6488		80 cd 60 08 c2 30 48 da 8b e2 20 a9 1a 48 ab c2
>1a6498		20 a2 4b 66 5a a0 0a 00 20 02 5f 7a ab fa 68 28
>1a64a8		60 08 c2 30 48 da 5a a5 23 05 25 d0 10 c2 20 af
>1a64b8		1b 66 1a 85 23 af 1d 66 1a 85 25 80 61 a5 25 29
>1a64c8		00 80 a8 f0 07 a5 25 29 ff 7f 85 25 c2 20 a5 25
>1a64d8		48 a5 23 48 20 51 06 a6 23 20 bf 07 c2 20 a5 23
>1a64e8		85 29 a5 25 85 2b c2 20 68 85 23 68 85 25 20 cb
>1a64f8		56 20 8b 64 c2 20 a5 25 48 a5 23 48 c2 20 af 7f
>1a6508		66 1a 85 23 af 81 66 1a 85 25 20 3f 64 c2 20 68
>1a6518		85 29 68 85 2b 20 6c 57 98 f0 03 20 c7 5f 7a fa
>1a6528		68 28 60 08 c2 30 48 a5 25 10 1f 08 c2 20 48 a9
>1a6538		00 08 5b 68 28 e2 20 a9 17 8f d3 08 00 c2 20 29
>1a6548		ff 00 20 5b 1e e2 20 dc d4 08 c2 30 05 23 f0 68
>1a6558		c2 20 af 1f 66 1a 85 29 af 21 66 1a 85 2b e2 20
>1a6568		a9 01 85 2d c2 20 c2 20 a5 25 48 a5 23 48 20 21
>1a6578		57 a5 25 c5 2b d0 09 a5 23 45 29 29 f8 ff f0 30
>1a6588		20 d6 56 c2 20 af 1f 66 1a 85 29 af 21 66 1a 85
>1a6598		2b 20 21 57 c2 20 a5 23 85 29 a5 25 85 2b c2 20
>1a65a8		68 85 23 68 85 25 c2 20 a5 25 48 a5 23 48 80 be
>1a65b8		c2 20 68 85 29 68 85 2b 68 28 60 01 0d d0 37 61
>1a65c8		0b b6 ba ab aa 2a 3d 00 00 00 bf 00 00 80 3f 1d
>1a65d8		ef 38 36 01 0d 50 b9 89 88 08 3c ab aa 2a be 00
>1a65e8		00 80 3f a4 27 b3 3c d1 0d 5d 3d 89 88 08 3e ab
>1a65f8		aa aa 3e 00 00 80 3f 89 88 88 3d d9 89 9d 3d 8c
>1a6608		2e ba 3d 39 8e e3 3d 25 49 12 3e cd cc 4c 3e ab
>1a6618		aa aa 3e 00 00 80 3f 00 00 00 40 8e e3 f8 3c 6e
>1a6628		db 36 3d 9a 99 99 3d ab aa 2a 3e 00 00 80 3f 39
>1a6638		8e e3 3d 25 49 12 be cd cc 4c 3e ab aa aa be 00
>1a6648		00 80 3f 1d ef 38 36 01 0d d0 37 01 0d 50 39 61
>1a6658		0b b6 3a 89 88 08 3c ab aa 2a 3d ab aa 2a 3e 00
>1a6668		00 00 3f 00 00 80 3f 00 00 80 3f c1 2c a1 6d 5f
>1a6678		97 07 4b 81 64 5a 42 54 f8 2d 40 db 0f c9 40 db
>1a6688		0f 49 40 db 0f c9 3f db 0f 49 3f 08 20 0f 13 c2
>1a6698		20 a9 01 00 85 23 a9 00 00 85 25 e2 20 af 00 4d
>1a66a8		00 c2 20 29 ff 00 85 8f a8 a2 01 00 c2 20 bf 00
>1a66b8		4d 00 85 29 a9 00 00 85 2b e2 20 a9 00 85 2d c2
>1a66c8		20 20 4f 28 e8 e8 88 d0 e3 c2 20 a9 04 00 85 29
>1a66d8		a9 00 00 85 2b 20 4f 28 e2 20 af 00 4d 00 85 0c
>1a66e8		a9 00 85 0d c2 20 06 0c 38 a5 23 65 0c 85 23 a5
>1a66f8		25 69 00 00 85 25 d0 29 e2 20 a5 ea 09 80 a6 23
>1a6708		20 d3 10 e2 20 af 00 4d 00 87 c0 a0 01 00 a2 00
>1a6718		00 e2 20 bf 01 4d 00 97 c0 e4 8f f0 23 e8 c8 80
>1a6728		f0 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a6738		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a6748		e2 20 38 a5 c0 67 c0 85 08 a5 c1 69 00 85 09 a5
>1a6758		c2 69 00 85 0a 64 0b c2 20 a0 05 00 b7 c3 85 0c
>1a6768		e2 20 c8 c8 b7 c3 85 0e 64 0f e2 20 a9 00 87 08
>1a6778		c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85
>1a6788		0a c5 0e d0 e5 a5 08 c5 0c d0 df 28 60 08 c2 20
>1a6798		64 08 64 0a e2 20 af 00 4d 00 85 8f 64 90 a2 01
>1a67a8		00 e2 20 a7 c0 c5 8f f0 22 a6 8f 00 08 c2 20 48
>1a67b8		a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20
>1a67c8		29 ff 00 20 5b 1e e2 20 dc d4 08 c9 01 f0 3a a0
>1a67d8		01 00 e2 20 bf 00 4d 00 85 23 64 24 64 25 64 26
>1a67e8		b7 c0 85 29 64 2a 64 2b 64 2c a5 23 c5 29 b0 68
>1a67f8		20 4f 28 c2 20 18 a5 08 65 23 85 08 a5 0a 65 25
>1a6808		85 0a e8 e8 c8 c4 8f d0 c9 e2 20 18 bf 00 4d 00
>1a6818		85 90 65 08 85 08 a5 09 69 00 85 09 c2 20 a5 0a
>1a6828		69 00 00 85 0a c2 20 06 08 26 0a 06 08 26 0a e2
>1a6838		20 38 a5 08 65 8f 85 08 a5 09 69 00 85 09 c2 20
>1a6848		a5 0a 69 00 00 85 0a 18 a5 08 65 c0 85 08 e2 20
>1a6858		a5 0a 65 c2 85 0a 28 60 08 c2 20 48 a9 00 08 5b
>1a6868		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a6878		5b 1e e2 20 dc d4 08 08 20 0f 13 e2 20 a0 00 00
>1a6888		b7 c3 29 7f c9 02 d0 05 20 e3 06 80 10 c9 00 d0
>1a6898		05 20 51 06 80 07 c9 01 d0 2b 20 bf 07 a5 27 48
>1a68a8		c2 20 a5 25 48 a5 23 48 20 95 67 68 85 23 68 85
>1a68b8		25 e2 20 68 85 27 c2 20 a5 23 87 08 a0 02 00 a5
>1a68c8		25 97 08 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a68d8		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>1a68e8		20 dc d4 08 08 20 0f 13 f4 00 00 f4 00 00 e2 20
>1a68f8		48 20 95 67 e2 20 68 c2 20 68 68 c2 20 a7 08 85
>1a6908		23 a0 02 00 b7 08 85 25 e2 20 a0 00 00 b7 c3 29
>1a6918		7f 85 27 20 63 18 28 60 da 0b 08 08 c2 20 48 a9
>1a6928		00 08 5b 68 28 c2 30 a5 25 89 f0 ff d0 29 89 0f
>1a6938		00 d0 0c a5 23 89 00 fc d0 05 20 13 46 80 2e a2
>1a6948		0a 00 46 25 66 23 ca d0 f9 20 13 46 e2 20 a9 4b
>1a6958		20 18 00 c2 20 80 16 a2 14 00 46 25 66 23 ca d0
>1a6968		f9 20 13 46 e2 20 a9 4d 20 18 00 c2 20 28 2b fa
>1a6978		60 0b 08 c2 30 a9 00 00 8f b6 08 00 8f b8 08 00
>1a6988		e2 20 20 7b 22 c9 00 f0 08 20 09 1d 20 e3 06 80
>1a6998		11 c2 20 a9 00 00 85 23 85 25 e2 20 a9 02 85 27
>1a69a8		c2 20 20 da 6a 22 08 11 00 b0 22 20 8b 6b 08 c2
>1a69b8		20 48 a9 00 08 5b 68 28 e2 20 a9 10 8f d3 08 00
>1a69c8		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 20 d7 03
>1a69d8		08 c2 20 48 a9 20 03 5b 68 28 e2 20 a0 00 00 b7
>1a69e8		18 d0 03 82 a9 00 c9 e5 d0 03 82 96 00 a0 0b 00
>1a69f8		b7 18 89 08 f0 03 82 a9 00 89 02 f0 03 82 83 00
>1a6a08		29 0f c9 0f d0 03 82 7a 00 a0 00 00 b7 18 20 18
>1a6a18		00 c8 c0 08 00 d0 f5 a9 20 20 18 00 a0 08 00 b7
>1a6a28		18 20 18 00 c8 c0 0b 00 d0 f5 a9 09 20 18 00 a0
>1a6a38		0b 00 b7 18 89 10 d0 1e c2 20 a0 1c 00 b7 18 8f
>1a6a48		23 08 00 c8 c8 b7 18 8f 25 08 00 e2 20 a9 00 8f
>1a6a58		27 08 00 20 20 69 a9 09 20 18 00 a0 0b 00 b7 18
>1a6a68		89 08 d0 1c 89 01 f0 05 a9 52 20 18 00 89 04 f0
>1a6a78		05 a9 53 20 18 00 89 10 f0 05 a9 44 20 18 00 ea
>1a6a88		20 d7 03 20 ee 03 22 0c 11 00 90 03 82 41 ff 20
>1a6a98		8b 6b 08 c2 20 48 a9 00 08 5b 68 28 20 5f 21 28
>1a6aa8		2b 60 08 c2 20 48 a9 20 03 5b 68 28 e2 20 29 0f
>1a6ab8		c9 0f f0 cf a9 5b 20 18 00 a0 00 00 b7 18 c9 20
>1a6ac8		f0 09 20 18 00 c8 c0 08 00 d0 f1 a9 5d 20 18 00
>1a6ad8		80 ae 0b 08 08 c2 20 48 a9 20 03 5b 68 28 c2 30
>1a6ae8		a9 73 f2 85 20 a9 1a 00 85 22 a0 00 00 e2 20 a9
>1a6af8		00 97 20 c8 c0 1e 00 d0 f8 c2 20 a9 73 f0 8f 81
>1a6b08		f2 1a a9 1a 00 8f 83 f2 1a af 23 08 00 8f 75 f2
>1a6b18		1a af 25 08 00 8f 77 f2 1a 28 2b 60 08 c2 30 20
>1a6b28		3b 21 20 09 1d 20 e3 06 20 da 6a e2 20 a9 2c 85
>1a6b38		37 20 5c 22 b0 0f c2 20 a9 ff ff 8f 54 03 00 8f
>1a6b48		56 03 00 80 17 20 1a 21 20 09 1d 20 51 06 c2 20
>1a6b58		a5 23 8f 54 03 00 a5 25 8f 56 03 00 22 18 11 00
>1a6b68		b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11
>1a6b78		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a6b88		08 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a6b98		08 e2 20 48 a9 00 48 ab 68 28 e2 20 af 2e 03 00
>1a6ba8		85 23 a9 00 85 24 85 25 85 26 a9 00 85 27 85 ea
>1a6bb8		a9 1a 85 e9 c2 20 a9 ee 6b 85 e7 20 78 53 e2 20
>1a6bc8		af 20 03 00 85 23 a9 00 85 24 85 25 85 26 a9 00
>1a6bd8		85 27 85 ea a9 1a 85 e9 c2 20 a9 f6 6b 85 e7 20
>1a6be8		78 53 28 2b ab 60 44 4f 53 53 54 41 54 00 42 49
>1a6bf8		4f 53 53 54 41 54 00 08 c2 30 20 3b 21 20 09 1d
>1a6c08		20 e3 06 a5 23 8f 60 03 00 a5 25 8f 62 03 00 a9
>1a6c18		ff ff 8f 54 03 00 8f 56 03 00 22 24 11 00 b0 25
>1a6c28		20 5b 1e 20 8b 6b 08 c2 20 48 a9 00 08 5b 68 28
>1a6c38		e2 20 a9 11 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a6c48		e2 20 dc d4 08 20 5b 1e 28 60 08 c2 30 20 3b 21
>1a6c58		20 09 1d 20 e3 06 20 da 6a a9 00 00 8f 54 03 00
>1a6c68		a9 01 00 8f 56 03 00 20 49 50 22 18 11 00 b0 22
>1a6c78		20 8b 6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a6c88		11 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a6c98		d4 08 20 8b 6b c2 20 a2 12 00 18 bf 73 f2 1a 69
>1a6ca8		00 00 85 92 bf 75 f2 1a 69 01 00 85 94 e2 20 a9
>1a6cb8		00 87 92 c2 20 a9 00 00 85 7a a9 01 00 85 7c a2
>1a6cc8		00 00 e2 20 a7 7a f0 2a c9 0d f0 12 c9 0a f0 04
>1a6cd8		9d 00 4f e8 c2 20 e6 7a d0 e8 e6 7c 80 e4 e2 20
>1a6ce8		a9 00 9d 00 4f 20 82 27 c2 20 e6 7a d0 d1 e6 7c
>1a6cf8		80 cd e0 00 00 f0 0a e2 20 a9 00 9d 00 4f 20 82
>1a6d08		27 28 60 08 c2 30 20 3b 21 20 09 1d 20 e3 06 20
>1a6d18		da 6a e2 20 a9 2c 20 27 22 c2 20 20 09 1d 20 51
>1a6d28		06 a5 23 8f 50 03 00 a5 25 8f 52 03 00 e2 20 a9
>1a6d38		2c c2 20 20 27 22 20 09 1d 20 51 06 a5 23 8f 58
>1a6d48		03 00 a5 25 8f 5a 03 00 22 1c 11 00 b0 22 20 8b
>1a6d58		6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f
>1a6d68		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a6d78		20 8b 6b 28 60 da 5a 08 a2 00 00 a0 00 00 e2 20
>1a6d88		b7 23 9d 00 04 f0 04 e8 c8 80 f5 28 7a fa 60 08
>1a6d98		c2 30 20 3b 21 20 09 1d 20 e3 06 20 da 6a a9 00
>1a6da8		00 85 a6 e2 20 a9 01 85 a8 a9 20 85 b4 c2 20 a9
>1a6db8		00 00 85 ab a9 ff ff 85 a9 c2 20 a9 00 00 85 55
>1a6dc8		85 57 a9 ff ff 85 59 a9 ff 7f 85 5b 20 8b 18 e2
>1a6dd8		20 a9 80 85 b4 c2 20 c6 ab 18 a9 00 00 8f 50 03
>1a6de8		00 65 ab 8f 58 03 00 a9 01 00 8f 52 03 00 69 00
>1a6df8		00 8f 5a 03 00 22 1c 11 00 b0 22 20 8b 6b 08 c2
>1a6e08		20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f d3 08 00
>1a6e18		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 20 8b 6b
>1a6e28		28 60 08 c2 30 20 3b 21 20 09 1d 20 e3 06 20 7d
>1a6e38		6d 22 04 11 00 b0 22 20 8b 6b 08 c2 20 48 a9 00
>1a6e48		08 5b 68 28 e2 20 a9 13 8f d3 08 00 c2 20 29 ff
>1a6e58		00 20 5b 1e e2 20 dc d4 08 20 8b 6b 28 60 da 08
>1a6e68		e2 20 c9 61 90 08 c9 7b b0 04 29 df 80 13 c9 20
>1a6e78		90 13 a2 00 00 df 91 6e 1a f0 0a e8 e0 0f 00 d0
>1a6e88		f4 28 38 fa 6b 28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c
>1a6e98		3d 3e 3f 5c 5b 5d 7c 22 08 08 c2 20 48 a9 00 08
>1a6ea8		5b 68 28 c2 30 20 09 1d 20 e3 06 20 7d 6d 22 10
>1a6eb8		11 00 b0 22 20 8b 6b 08 c2 20 48 a9 00 08 5b 68
>1a6ec8		28 e2 20 a9 14 8f d3 08 00 c2 20 29 ff 00 20 5b
>1a6ed8		1e e2 20 dc d4 08 e2 20 a9 2c 20 27 22 c2 20 20
>1a6ee8		09 1d 20 e3 06 ad 38 03 85 08 ad 3a 03 85 0a e2
>1a6ef8		20 a2 00 00 a9 20 95 7e e8 e0 0b 00 d0 f8 a2 00
>1a6f08		00 a0 00 00 b7 23 f0 76 c9 2e f0 39 22 66 6e 1a
>1a6f18		b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>1a6f28		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a6f38		08 95 7e c8 e8 c0 08 00 d0 ca b7 23 f0 40 c9 2e
>1a6f48		f0 03 c8 80 f5 c8 a2 08 00 b7 23 f0 31 22 66 6e
>1a6f58		1a b0 22 20 8b 6b 08 c2 20 48 a9 00 08 5b 68 28
>1a6f68		e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a6f78		e2 20 dc d4 08 95 7e c8 e8 c0 0c 00 d0 cb a2 00
>1a6f88		00 a0 00 00 b5 7e 97 08 e8 c8 c0 0b 00 d0 f5 22
>1a6f98		14 11 00 b0 22 20 8b 6b 08 c2 20 48 a9 00 08 5b
>1a6fa8		68 28 e2 20 a9 15 8f d3 08 00 c2 20 29 ff 00 20
>1a6fb8		5b 1e e2 20 dc d4 08 20 8b 6b 28 60 08 08 c2 20
>1a6fc8		48 a9 00 08 5b 68 28 c2 30 20 09 1d 20 e3 06 a5
>1a6fd8		23 8f 64 03 00 a5 25 8f 66 03 00 e2 20 a9 2c 20
>1a6fe8		27 22 c2 20 20 09 1d 20 e3 06 a5 23 8f 68 03 00
>1a6ff8		a5 25 8f 6a 03 00 22 30 11 00 b0 1f 08 c2 20 48
>1a7008		a9 00 08 5b 68 28 e2 20 a9 16 8f d3 08 00 c2 20
>1a7018		29 ff 00 20 5b 1e e2 20 dc d4 08 28 60 5c e2 89
>1a7028		1a 5c 33 88 1a 5c e3 89 1a 5c 5f 79 1a 5c bc 79
>1a7038		1a 5c ef 78 1a 5c 75 78 1a 5c f2 7d 1a 5c e0 74
>1a7048		1a 5c 0d 78 1a 5c c8 77 1a 5c 52 77 1a 5c f1 88
>1a7058		1a 5c ee 75 1a 5c 3e 74 1a 5c 6c 89 1a 5c 1c 75
>1a7068		1a 5c e5 89 1a 5c de 89 1a 5c 0b 77 1a 5c e6 89
>1a7078		1a 18 fb 58 5c 80 70 1a c2 30 22 3e 74 1a 20 08
>1a7088		00 20 0c 00 8b e2 20 a9 00 48 ab a2 00 4f 20 65
>1a7098		05 ab 22 29 70 1a 22 31 70 1a 80 e2 08 8b e2 20
>1a70a8		a9 1a 48 ab c2 10 a2 b7 70 20 64 04 ab 28 6b 41
>1a70b8		20 3c 73 74 61 72 74 3e 20 3c 61 73 73 65 6d 62
>1a70c8		6c 79 3e 0d 20 20 41 73 73 65 6d 62 6c 65 20 61
>1a70d8		20 70 72 6f 67 72 61 6d 0d 0d 43 20 3c 73 74 61
>1a70e8		72 74 31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c
>1a70f8		65 6e 20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d
>1a7108		0d 20 20 43 6f 6d 70 61 72 65 20 74 6f 20 73 65
>1a7118		63 74 69 6f 6e 73 20 6f 66 20 6d 65 6d 6f 72 79
>1a7128		0d 0d 44 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64
>1a7138		5d 0d 20 20 44 69 73 61 73 73 65 6d 62 6c 65 20
>1a7148		61 20 70 72 6f 67 72 61 6d 0d 0d 46 20 3c 73 74
>1a7158		61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65
>1a7168		3e 0d 20 20 46 69 6c 6c 20 61 20 62 6c 6f 63 6b
>1a7178		20 6f 66 20 6d 65 6d 6f 72 79 20 77 69 74 68 20
>1a7188		61 20 62 79 74 65 0d 0d 47 20 5b 61 64 64 72 65
>1a7198		73 73 5d 0d 20 20 53 74 61 72 74 20 65 78 65 63
>1a71a8		75 74 69 6f 6e 20 61 74 20 61 20 6c 6f 63 61 74
>1a71b8		69 6f 6e 0d 0d 4a 20 5b 61 64 64 72 65 73 73 5d
>1a71c8		20 2d 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63
>1a71d8		61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d
>1a71e8		20 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63 61
>1a71f8		74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>1a7208		48 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20
>1a7218		3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 0d
>1a7228		20 20 48 75 6e 74 20 66 6f 72 20 76 61 6c 75 65
>1a7238		73 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 4c 20 20
>1a7248		20 20 20 4c 4f 41 44 20 20 20 20 20 20 20 20 20
>1a7258		22 46 69 6c 65 22 20 5b 64 65 73 74 69 6e 61 74
>1a7268		69 6f 6e 5d 0d 4d 20 3c 73 74 61 72 74 3e 20 5b
>1a7278		65 6e 64 5d 0d 20 20 44 75 6d 70 20 74 68 65 20
>1a7288		76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79 0d
>1a7298		0d 52 20 2d 20 44 69 73 70 6c 61 79 20 74 68 65
>1a72a8		20 76 61 6c 75 65 73 20 6f 66 20 74 68 65 20 72
>1a72b8		65 67 69 73 74 65 72 73 0d 0d 3b 20 3c 50 43 3e
>1a72c8		20 3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50
>1a72d8		3e 20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56
>1a72e8		4d 58 44 49 5a 43 3e 0d 20 20 43 68 61 6e 67 65
>1a72f8		20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66
>1a7308		20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>1a7318		53 20 20 20 20 20 53 41 56 45 20 20 20 20 20 20
>1a7328		20 20 20 22 46 69 6c 65 22 20 3c 73 74 61 72 74
>1a7338		3e 20 3c 65 6e 64 3e 0d 54 20 3c 73 74 61 72 74
>1a7348		3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61
>1a7358		74 69 6f 6e 3e 0d 20 20 54 72 61 6e 73 66 65 72
>1a7368		20 28 63 6f 70 79 29 20 64 61 74 61 20 77 69 74
>1a7378		68 69 6e 20 6d 65 6d 6f 72 79 0d 0d 57 20 3c 62
>1a7388		79 74 65 3e 0d 20 20 53 65 74 20 74 68 65 20 72
>1a7398		65 67 69 73 74 65 72 20 77 69 64 74 68 20 66 6c
>1a73a8		61 67 73 20 66 6f 72 20 74 68 65 20 64 69 73 61
>1a73b8		73 73 65 6d 62 6c 65 72 0d 0d 58 20 2d 20 52 65
>1a73c8		74 75 72 6e 20 74 6f 20 42 41 53 49 43 0d 0d 3e
>1a73d8		20 3c 73 74 61 72 74 3e 20 3c 62 79 74 65 3e 20
>1a73e8		5b 62 79 74 65 5d 2e 2e 2e 0d 20 20 45 64 69 74
>1a73f8		20 64 61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d
>1a7408		0d 3f 20 2d 20 44 69 73 70 6c 61 79 20 61 20 73
>1a7418		68 6f 72 74 20 68 65 6c 70 20 73 63 72 65 65 6e
>1a7428		0d 0d 00 08 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>1a7438		a5 0d 85 4e 28 6b 20 3d 02 08 e2 20 48 a9 1a 48
>1a7448		ab 68 28 a2 23 8a 20 64 04 e2 20 a9 3b 20 18 00
>1a7458		a9 20 20 18 00 c2 30 08 e2 20 48 a9 00 48 ab 68
>1a7468		28 a0 03 00 a2 42 02 20 e7 03 c2 20 a9 20 00 20
>1a7478		18 00 af 44 02 00 20 74 04 a9 20 00 20 18 00 af
>1a7488		46 02 00 20 74 04 a9 20 00 20 18 00 af 48 02 00
>1a7498		20 74 04 a9 20 00 20 18 00 af 4a 02 00 20 74 04
>1a74a8		a9 20 00 20 18 00 af 4e 02 00 20 8e 04 a9 20 00
>1a74b8		20 18 00 a9 20 00 20 18 00 af 4c 02 00 20 74 04
>1a74c8		a9 20 00 20 18 00 08 e2 20 ad 4f 02 22 3c 87 1a
>1a74d8		28 20 d7 03 20 d7 03 6b 08 0b 08 c2 20 48 a9 48
>1a74e8		08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5 0f c5 13
>1a74f8		d0 0e c2 20 a5 0d c5 11 d0 06 20 d7 03 2b 28 6b
>1a7508		c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69 00
>1a7518		85 0e 80 d0 08 0b 08 c2 20 48 a9 48 08 5b 68 28
>1a7528		e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5 15 90 3d
>1a7538		e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2 20 a5 0d
>1a7548		c5 11 d0 03 4c d3 75 c2 20 18 a5 0d 69 01 00 85
>1a7558		0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5 15 69 01
>1a7568		00 85 15 e2 20 a5 16 69 00 85 16 80 c3 c2 20 38
>1a7578		a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85 1b c2 20
>1a7588		18 a5 19 65 15 85 15 e2 20 a5 1b 65 17 85 17 e2
>1a7598		20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20 a5 11 c5
>1a75a8		0d d0 02 80 26 c2 20 38 a5 11 e9 01 00 85 11 e2
>1a75b8		20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9 01 00 85
>1a75c8		15 e2 20 a5 16 e9 00 85 16 80 c4 20 d7 03 2b 28
>1a75d8		6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9 a0 90 03
>1a75e8		28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48 a9 48 08
>1a75f8		5b 68 28 e2 20 a9 00 8f b6 08 00 a5 31 c9 02 b0
>1a7608		16 c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11 e2
>1a7618		20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5
>1a7628		0f 85 34 80 12 c2 20 18 a5 32 69 00 01 85 11 e2
>1a7638		20 a5 34 69 00 85 13 e2 20 a0 00 00 c2 20 a5 32
>1a7648		85 19 e2 20 a5 34 85 1b e2 20 a7 19 22 d9 75 1a
>1a7658		b0 02 a9 3f 99 7e 08 c2 20 18 a5 19 69 01 00 85
>1a7668		19 e2 20 a5 1b 69 00 85 1b c8 c0 08 00 90 db a9
>1a7678		00 99 7e 08 a9 3e 20 18 00 a9 20 20 18 00 e2 20
>1a7688		a5 34 20 8e 04 a9 3a 20 18 00 c2 20 a5 32 20 74
>1a7698		04 c2 20 a9 08 00 85 47 e2 20 a9 20 20 18 00 a7
>1a76a8		32 20 8e 04 22 1b 87 1a e2 20 c6 47 d0 ea a9 20
>1a76b8		20 18 00 a9 20 20 18 00 08 e2 20 48 a9 00 48 ab
>1a76c8		68 28 a2 7e 08 20 64 04 20 d7 03 20 ee 03 a5 34
>1a76d8		c5 13 90 0f c2 20 a5 32 c5 11 90 07 20 d7 03 2b
>1a76e8		ab 28 6b 4c 3f 76 08 8d 92 08 e2 20 bd 00 00 99
>1a76f8		00 00 ad 92 08 f0 0a c8 e8 e8 e8 e8 ce 92 08 80
>1a7708		eb 28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b 68 28
>1a7718		08 e2 20 48 a9 00 48 ab 68 28 c2 30 a5 0d 85 32
>1a7728		a5 0f 85 34 e2 20 a5 31 3a 85 47 a2 59 08 a0 7e
>1a7738		08 22 ee 76 1a a0 00 00 b9 7e 08 87 32 22 1b 87
>1a7748		1a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b 8b 08 c2 20
>1a7758		48 a9 48 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>1a7768		28 e2 20 c2 10 a5 31 3a 3a 85 47 a2 5d 08 a0 7e
>1a7778		08 22 ee 76 1a c2 20 a5 0d 85 32 a5 0f 85 34 c2
>1a7788		20 a5 34 c5 13 d0 06 a5 32 c5 11 f0 2c e2 20 a0
>1a7798		00 00 b7 32 d9 7e 08 d0 1a c8 c4 47 d0 f4 c2 20
>1a77a8		a5 32 85 4a a5 34 85 4c 22 c5 81 1a e2 20 a9 20
>1a77b8		20 18 00 22 1b 87 1a 80 c6 20 d7 03 ab 2b 28 6b
>1a77c8		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0 0e
>1a77d8		c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46
>1a77e8		02 00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c 02
>1a77f8		00 5b e2 20 a9 1a 48 a9 78 48 a9 08 48 4c 3f 78
>1a7808		ea 5c 04 00 1a 08 c2 20 48 a9 48 08 5b 68 28 e2
>1a7818		20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02 00 a5 0f 8f
>1a7828		42 02 00 af 46 02 00 aa af 48 02 00 a8 af 4a 02
>1a7838		00 1b af 4c 02 00 5b e2 20 af 4e 02 00 48 ab a9
>1a7848		5c 8f a2 08 00 af 42 02 00 8f a5 08 00 af 41 02
>1a7858		00 8f a4 08 00 af 40 02 00 8f a3 08 00 af 4f 02
>1a7868		00 48 c2 20 af 44 02 00 28 5c a2 08 00 08 0b 8b
>1a7878		08 e2 20 48 a9 1a 48 ab 68 28 08 c2 20 48 a9 48
>1a7888		08 5b 68 28 c2 10 e2 20 a5 31 c9 02 f0 0c c9 03
>1a7898		d0 11 c2 20 a5 15 85 47 80 11 c2 20 a9 01 00 85
>1a78a8		47 80 08 a2 e7 89 20 64 04 80 35 a5 0d 85 4a a5
>1a78b8		0f 85 4c a0 00 00 e2 20 a7 4a d7 11 f0 09 22 c5
>1a78c8		81 1a a9 20 20 18 00 c2 20 18 a5 4a 69 01 00 85
>1a78d8		4a a5 4c 69 00 00 85 4c c8 c4 47 d0 d9 20 d7 03
>1a78e8		20 d7 03 ab 2b 28 6b 08 0b 8b 08 e2 20 48 a9 00
>1a78f8		48 ab 68 28 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>1a7908		a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e 42 02 c9 01
>1a7918		f0 41 a6 11 8e 44 02 c9 02 f0 38 a6 15 8e 46 02
>1a7928		c9 03 f0 2f a6 19 8e 48 02 c9 04 f0 26 a6 1d 8e
>1a7938		4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e 02 c9 06 f0
>1a7948		12 c2 10 a6 25 8e 4c 02 c9 07 f0 07 e2 10 a6 29
>1a7958		8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 48
>1a7968		08 5b 68 28 e2 20 c2 10 a2 00 00 bf 54 8a 1a f0
>1a7978		18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a aa bf 95 79
>1a7988		1a 8f 2f 08 00 22 b9 79 1a ab 2b 28 6b 35 70 3d
>1a7998		70 41 70 45 70 49 70 4d 70 51 70 55 70 59 70 5d
>1a79a8		70 39 70 61 70 65 70 69 70 2b 74 6d 70 71 70 a4
>1a79b8		70 6c 2f 08 08 8b 0b 08 c2 20 48 a9 48 08 5b 68
>1a79c8		28 e2 20 a5 31 c9 02 b0 03 4c 62 7b c2 20 a5 0d
>1a79d8		85 32 a5 0f 85 34 c2 20 22 64 7d 1a c9 ff ff f0
>1a79e8		10 85 54 e2 20 a5 31 c9 03 f0 36 a9 13 85 4f 80
>1a79f8		4c 20 d7 03 08 e2 20 48 a9 1a 48 ab 68 28 c2 10
>1a7a08		a2 99 7b 20 64 04 4c 62 7b 20 d7 03 08 e2 20 48
>1a7a18		a9 1a 48 ab 68 28 c2 10 a2 a8 7b 20 64 04 4c 62
>1a7a28		7b e2 20 22 9a 7d 1a c9 ff f0 de 85 4f c9 03 f0
>1a7a38		62 c9 0b f0 5e c9 13 f0 04 c9 08 f0 00 22 92 7c
>1a7a48		1a b0 03 4c 2b 7b 87 32 22 1b 87 1a 08 e2 20 48
>1a7a58		a9 00 48 ab 68 28 c2 20 a5 32 85 56 a5 34 85 58
>1a7a68		e2 20 a5 4f c9 12 f0 6c c9 16 f0 68 c9 14 f0 7c
>1a7a78		29 3f c9 02 d0 03 4c 59 7b c2 20 29 ff 00 aa e2
>1a7a88		20 bf 61 86 1a c9 03 f0 57 c9 02 f0 5f c9 01 f0
>1a7a98		67 80 71 c2 20 a5 54 c9 d9 82 f0 26 c9 3d 83 f0
>1a7aa8		2a c9 bd 82 f0 1c c9 c1 82 f0 17 c9 c9 82 f0 12
>1a7ab8		c9 b1 82 f0 0d c9 c5 82 f0 08 c9 ad 82 f0 03 4c
>1a7ac8		45 7a e2 20 a9 12 85 4f 4c 45 7a e2 20 a9 16 85
>1a7ad8		4f 4c 45 7a 22 d5 7b 1a 90 60 c9 02 f0 0e 80 18
>1a7ae8		a0 02 00 b9 98 08 97 56 22 1b 87 1a a0 01 00 b9
>1a7af8		98 08 97 56 22 1b 87 1a a0 00 00 b9 98 08 97 56
>1a7b08		22 1b 87 1a e2 20 a9 41 20 18 00 a9 20 20 18 00
>1a7b18		a6 32 86 4a a6 34 86 4c 22 c5 81 1a a9 20 20 18
>1a7b28		00 80 37 20 d7 03 08 e2 20 48 a9 1a 48 ab 68 28
>1a7b38		c2 10 a2 66 7b 20 64 04 80 20 20 d7 03 08 e2 20
>1a7b48		48 a9 1a 48 ab 68 28 c2 10 a2 b6 7b 20 64 04 80
>1a7b58		09 a5 4f 29 c0 d0 95 4c 00 7b 2b ab 28 6b 41 64
>1a7b68		64 72 65 73 73 69 6e 67 20 6d 6f 64 65 20 6e 6f
>1a7b78		74 20 64 65 66 69 6e 65 64 20 66 6f 72 20 74 68
>1a7b88		61 74 20 69 6e 73 74 72 75 63 74 69 6f 6e 2e 0d
>1a7b98		00 42 61 64 20 6d 6e 65 6d 6f 6e 69 63 2e 0d 00
>1a7ba8		42 61 64 20 6f 70 65 72 61 6e 64 2e 0d 00 52 65
>1a7bb8		6c 61 74 69 76 65 20 6f 66 66 73 65 74 20 69 73
>1a7bc8		20 74 6f 6f 20 6c 61 72 67 65 2e 0d 00 08 0b 08
>1a7bd8		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4f c9 12 f0
>1a7be8		0a c2 20 18 a5 32 69 02 00 80 08 c2 20 18 a5 32
>1a7bf8		69 01 00 85 4a a5 34 69 00 00 85 4c 38 a5 50 e5
>1a7c08		4a 85 50 a5 52 e5 4c 85 52 e2 20 a5 4f c9 16 f0
>1a7c18		1e a5 50 30 0c a5 51 d0 2a a5 52 d0 26 a9 01 80
>1a7c28		26 a5 51 c9 ff d0 1c a5 52 c9 ff d0 16 80 18 a5
>1a7c38		51 30 06 a5 52 d0 0c 80 0e a5 52 c9 ff d0 04 a9
>1a7c48		02 80 04 2b 28 18 6b 2b 28 38 6b 08 0b c2 10 da
>1a7c58		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a2 00 00 df
>1a7c68		00 d0 1a f0 08 e8 e0 10 00 f0 1b 80 f2 c2 20 06
>1a7c78		50 26 52 06 50 26 52 06 50 26 52 06 50 26 52 e2
>1a7c88		20 8a 05 50 85 50 fa 2b 28 6b 0b 8b 08 c2 20 48
>1a7c98		a9 48 08 5b 68 28 08 e2 20 48 a9 1a 48 ab 68 28
>1a7ca8		e2 20 a5 4f 29 3f 85 4a c2 30 a2 00 00 a0 00 00
>1a7cb8		bd 5f 83 f0 1b c5 54 d0 0d e2 20 b9 61 85 29 3f
>1a7cc8		c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98 38 ab 2b 6b
>1a7cd8		18 ab 2b 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28
>1a7ce8		e2 20 c2 10 a0 00 00 64 50 64 52 b7 03 f0 11 c9
>1a7cf8		64 f0 19 48 b7 36 85 4a 68 c5 4a d0 0b c8 80 eb
>1a7d08		b7 36 d0 04 2b 28 38 6b 2b 28 18 6b e2 20 b7 36
>1a7d18		c9 3a b0 04 c9 30 b0 14 c9 47 b0 04 c9 41 b0 0c
>1a7d28		c9 67 b0 e4 c9 61 b0 02 80 de 29 df 22 53 7c 1a
>1a7d38		80 cb 0b 08 c2 20 48 a9 48 08 5b 68 28 a0 00 00
>1a7d48		e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8 5a 68 18 65
>1a7d58		03 85 03 a5 05 69 00 00 85 05 2b 6b 0b 08 c2 20
>1a7d68		48 a9 48 08 5b 68 28 c2 20 a5 11 85 36 a5 13 85
>1a7d78		38 a9 ed 81 85 03 a9 1a 00 85 05 22 dc 7c 1a b0
>1a7d88		0d 22 3a 7d 1a a7 03 d0 f2 a9 ff ff 80 02 a5 03
>1a7d98		2b 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28 c2 30
>1a7da8		a5 15 85 36 a5 17 85 38 a9 79 86 85 03 a9 1a 00
>1a7db8		85 05 22 dc 7c 1a b0 22 22 3a 7d 1a c2 20 18 a5
>1a7dc8		03 69 01 00 85 03 a5 05 69 00 00 85 05 e2 20 a7
>1a7dd8		03 d0 df c2 20 a9 ff ff 80 0d 22 3a 7d 1a e2 20
>1a7de8		a7 03 c2 20 29 ff 00 2b 28 6b 08 8b 0b 08 c2 20
>1a7df8		48 a9 48 08 5b 68 28 e2 20 a9 00 8f b6 08 00 a5
>1a7e08		31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00
>1a7e18		01 85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85
>1a7e28		32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69 00
>1a7e38		01 85 11 e2 20 a5 34 69 00 85 13 22 5e 7e 1a e2
>1a7e48		20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11 90 ec 20
>1a7e58		d7 03 2b ab 28 6b 08 0b e2 20 a9 41 20 18 00 a9
>1a7e68		20 20 18 00 08 c2 20 48 a9 7a 08 5b 68 28 c2 20
>1a7e78		a5 00 85 18 e2 20 a5 02 85 1a 22 c5 81 1a a9 20
>1a7e88		20 18 00 c2 20 18 a5 00 69 01 00 85 18 e2 20 a5
>1a7e98		02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2 d0 0b 48
>1a7ea8		a7 18 49 ff 2f 96 08 00 80 0b c9 e2 d0 0c 48 a7
>1a7eb8		18 0f 96 08 00 8f 96 08 00 68 c2 20 29 ff 00 0a
>1a7ec8		aa bf 5f 83 1a aa 22 3f 81 1a e2 20 a7 00 aa bf
>1a7ed8		61 85 1a 22 1b 87 1a 22 ec 7e 1a 20 d7 03 20 ee
>1a7ee8		03 2b 28 6b 08 e2 20 48 29 3f 0a c2 10 aa 68 7c
>1a7ef8		fa 7e 2a 7f 45 7f 4c 7f 71 7f 78 7f 93 7f b5 7f
>1a7f08		c6 7f 03 80 0b 80 1c 80 2d 80 34 80 59 80 86 80
>1a7f18		f2 7f d7 7f a4 7f 79 80 83 80 97 80 c6 80 74 80
>1a7f28		d7 80 a9 28 20 18 00 22 ee 80 1a a9 2c 20 18 00
>1a7f38		a9 58 20 18 00 a9 29 20 18 00 4c e8 80 22 ee 80
>1a7f48		1a 4c e8 80 e2 20 48 a9 23 20 18 00 68 29 c0 c9
>1a7f58		00 f0 0f 4a 4a 2f 96 08 00 d0 07 22 f8 80 1a 4c
>1a7f68		e8 80 22 ee 80 1a 4c e8 80 22 f8 80 1a 4c e8 80
>1a7f78		a9 28 20 18 00 22 ee 80 1a a9 29 20 18 00 a9 2c
>1a7f88		20 18 00 a9 59 20 18 00 4c e8 80 22 ee 80 1a a9
>1a7f98		2c 20 18 00 a9 58 20 18 00 4c e8 80 22 ee 80 1a
>1a7fa8		a9 2c 20 18 00 a9 59 20 18 00 4c e8 80 22 f8 80
>1a7fb8		1a a9 2c 20 18 00 a9 59 20 18 00 4c e8 80 22 f8
>1a7fc8		80 1a a9 2c 20 18 00 a9 58 20 18 00 4c e8 80 a9
>1a7fd8		28 20 18 00 22 f8 80 1a a9 2c 20 18 00 a9 58 20
>1a7fe8		18 00 a9 29 20 18 00 4c e8 80 a9 28 20 18 00 22
>1a7ff8		ee 80 1a a9 29 20 18 00 4c e8 80 a9 41 20 18 00
>1a8008		4c ec 80 22 ee 80 1a a9 2c 20 18 00 a9 53 20 18
>1a8018		00 4c e8 80 a9 5b 20 18 00 22 ee 80 1a a9 5d 20
>1a8028		18 00 4c e8 80 22 06 81 1a 4c ec 80 a9 28 20 18
>1a8038		00 22 ee 80 1a a9 2c 20 18 00 a9 53 20 18 00 a9
>1a8048		29 20 18 00 a9 2c 20 18 00 a9 59 20 18 00 4c e8
>1a8058		80 a9 5b 20 18 00 22 ee 80 1a a9 5d 20 18 00 a9
>1a8068		2c 20 18 00 a9 59 20 18 00 4c e8 80 a0 02 00 80
>1a8078		03 a0 01 00 22 6c 81 1a 4c ec 80 4c ec 80 22 06
>1a8088		81 1a a9 2c 20 18 00 a9 58 20 18 00 4c ec 80 a9
>1a8098		23 20 18 00 8b a5 02 48 ab a6 00 e8 a0 01 00 22
>1a80a8		e7 03 1a a9 2c 20 18 00 a9 23 20 18 00 a6 00 a0
>1a80b8		01 00 22 e7 03 1a ab 22 1b 87 1a 4c e8 80 a9 28
>1a80c8		20 18 00 22 f8 80 1a a9 29 20 18 00 4c e8 80 a9
>1a80d8		5b 20 18 00 22 f8 80 1a a9 5d 20 18 00 4c e8 80
>1a80e8		22 1b 87 1a 28 6b 08 e2 20 a7 00 20 8e 04 28 6b
>1a80f8		08 c2 30 a7 00 20 74 04 22 1b 87 1a 28 6b 08 8b
>1a8108		0b c2 30 5a 08 c2 20 48 a9 7a 08 5b 68 28 08 e2
>1a8118		20 48 a9 00 48 ab 68 28 e2 20 a0 00 00 a7 00 99
>1a8128		92 08 22 1b 87 1a c8 c0 03 00 d0 f1 22 c5 81 1a
>1a8138		c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10 08 e2 20
>1a8148		48 a9 1a 48 ab 68 28 bd 00 00 20 18 00 e8 bd 00
>1a8158		00 20 18 00 e8 bd 00 00 20 18 00 e8 a9 20 20 18
>1a8168		00 ab 28 6b 08 0b 08 c2 20 48 a9 7a 08 5b 68 28
>1a8178		e2 20 c0 02 00 f0 14 a7 00 85 18 30 06 64 19 64
>1a8188		1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00 85 18 22
>1a8198		1b 87 1a a7 00 85 19 30 04 64 1a 80 04 a9 ff 85
>1a81a8		1a c2 20 38 a5 00 65 18 85 18 e2 20 a5 02 65 1a
>1a81b8		85 1a 22 c5 81 1a 22 1b 87 1a 2b 28 6b 08 0b c2
>1a81c8		20 48 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4c
>1a81d8		20 8e 04 e2 20 a9 3a 20 18 00 c2 20 a5 4a 20 74
>1a81e8		04 68 2b 28 6b 4f 52 41 00 41 4e 44 00 45 4f 52
>1a81f8		00 41 44 43 00 53 54 41 00 4c 44 41 00 43 4d 50
>1a8208		00 53 42 43 00 41 53 4c 00 52 4f 4c 00 4c 53 52
>1a8218		00 52 4f 52 00 53 54 58 00 4c 44 58 00 44 45 43
>1a8228		00 49 4e 43 00 42 49 54 00 4a 4d 50 00 53 54 59
>1a8238		00 4c 44 59 00 43 50 59 00 43 50 58 00 42 52 4b
>1a8248		00 4a 53 52 00 52 54 49 00 52 54 53 00 50 48 50
>1a8258		00 50 4c 50 00 50 48 41 00 50 4c 41 00 44 45 59
>1a8268		00 54 41 59 00 49 4e 59 00 49 4e 58 00 43 4c 43
>1a8278		00 53 45 43 00 43 4c 49 00 53 45 49 00 54 59 41
>1a8288		00 43 4c 56 00 43 4c 44 00 53 45 44 00 54 58 41
>1a8298		00 54 58 53 00 54 41 58 00 54 53 58 00 44 45 58
>1a82a8		00 4e 4f 50 00 42 50 4c 00 42 4d 49 00 42 56 43
>1a82b8		00 42 56 53 00 42 43 43 00 42 43 53 00 42 4e 45
>1a82c8		00 42 45 51 00 54 53 42 00 54 52 42 00 53 54 5a
>1a82d8		00 42 52 41 00 50 48 59 00 50 4c 59 00 50 48 58
>1a82e8		00 50 4c 58 00 50 48 44 00 50 4c 44 00 50 48 4b
>1a82f8		00 52 54 4c 00 50 48 42 00 50 4c 42 00 57 41 49
>1a8308		00 58 42 41 00 54 43 53 00 54 53 43 00 54 43 44
>1a8318		00 54 44 43 00 54 58 59 00 54 59 58 00 53 54 50
>1a8328		00 58 43 45 00 43 4f 50 00 4a 53 4c 00 57 44 4d
>1a8338		00 50 45 52 00 42 52 4c 00 52 45 50 00 53 45 50
>1a8348		00 4d 56 50 00 4d 56 4e 00 50 45 49 00 50 45 41
>1a8358		00 4a 4d 4c 00 00 00 45 82 ed 81 2d 83 ed 81 cd
>1a8368		82 ed 81 0d 82 ed 81 55 82 ed 81 0d 82 ed 82 cd
>1a8378		82 ed 81 0d 82 ed 81 ad 82 ed 81 ed 81 ed 81 d1
>1a8388		82 ed 81 0d 82 ed 81 75 82 ed 81 29 82 0d 83 d1
>1a8398		82 ed 81 0d 82 ed 81 49 82 f1 81 31 83 f1 81 2d
>1a83a8		82 f1 81 11 82 f1 81 59 82 f1 81 11 82 f1 82 2d
>1a83b8		82 f1 81 11 82 f1 81 b1 82 f1 81 f1 81 f1 81 2d
>1a83c8		82 f1 81 11 82 f1 81 79 82 f1 81 25 82 11 83 2d
>1a83d8		82 f1 81 11 82 f1 81 4d 82 f5 81 35 83 f5 81 49
>1a83e8		83 f5 81 15 82 f5 81 5d 82 f5 81 15 82 f5 82 31
>1a83f8		82 f5 81 15 82 f5 81 b5 82 f5 81 f5 81 f5 81 4d
>1a8408		83 f5 81 15 82 f5 81 7d 82 f5 81 dd 82 15 83 59
>1a8418		83 f5 81 15 82 f5 81 51 82 f9 81 39 83 f9 81 d5
>1a8428		82 f9 81 19 82 f9 81 61 82 f9 81 19 82 f9 82 31
>1a8438		82 f9 81 19 82 f9 81 b9 82 f9 81 f9 81 f9 81 d5
>1a8448		82 f9 81 19 82 f9 81 81 82 f9 81 e1 82 19 83 31
>1a8458		82 f9 81 19 82 f9 81 d9 82 fd 81 3d 83 fd 81 35
>1a8468		82 fd 81 1d 82 fd 81 65 82 2d 82 95 82 fd 82 35
>1a8478		82 fd 81 1d 82 fd 81 bd 82 fd 81 fd 81 fd 81 35
>1a8488		82 fd 81 1d 82 fd 81 85 82 fd 81 99 82 1d 83 d5
>1a8498		82 fd 81 d5 82 fd 81 39 82 01 82 21 82 01 82 39
>1a84a8		82 01 82 21 82 01 82 69 82 01 82 9d 82 01 83 39
>1a84b8		82 01 82 21 82 01 82 c1 82 01 82 01 82 01 82 39
>1a84c8		82 01 82 21 82 01 82 89 82 01 82 a1 82 21 83 39
>1a84d8		82 01 82 21 82 01 82 3d 82 05 82 41 83 05 82 3d
>1a84e8		82 05 82 25 82 05 82 6d 82 05 82 a5 82 05 83 3d
>1a84f8		82 05 82 25 82 05 82 c5 82 05 82 05 82 05 82 51
>1a8508		83 05 82 25 82 05 82 8d 82 05 82 e5 82 25 83 59
>1a8518		83 05 82 25 82 05 82 41 82 09 82 45 83 09 82 41
>1a8528		82 09 82 29 82 09 82 71 82 09 82 a9 82 09 83 41
>1a8538		82 09 82 29 82 09 82 c9 82 09 82 09 82 09 82 55
>1a8548		83 09 82 29 82 09 82 91 82 09 82 e9 82 29 83 49
>1a8558		82 09 82 29 82 09 82 00 00 13 00 02 09 01 01 01
>1a8568		0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 01 05 05
>1a8578		0d 13 06 08 13 03 07 07 0e 03 00 0b 09 01 01 01
>1a8588		0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 05 05 05
>1a8598		0d 13 06 08 13 07 07 07 0e 13 00 13 09 14 01 01
>1a85a8		0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 14 05 05
>1a85b8		0d 13 06 13 13 0b 07 07 0b 13 00 16 09 01 01 01
>1a85c8		0a 13 82 08 13 15 03 03 0b 12 04 0f 0c 05 05 05
>1a85d8		0d 13 06 13 13 10 07 07 0e 12 00 16 09 01 01 01
>1a85e8		0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05 11
>1a85f8		0d 13 06 13 13 03 07 07 0e 82 00 42 09 01 01 01
>1a8608		0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05 11
>1a8618		0d 13 06 13 13 07 07 06 0e 42 00 02 09 01 01 01
>1a8628		0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 01 05 05
>1a8638		0d 13 06 13 13 17 07 07 0e 42 00 02 09 01 01 01
>1a8648		0f 13 82 13 13 03 03 03 0b 12 04 0f 0c 03 05 05
>1a8658		0d 13 06 13 13 10 07 07 0e 01 01 01 02 01 01 02
>1a8668		02 00 01 01 03 01 01 03 01 02 01 01 00 02 02 02
>1a8678		02 41 00 08 64 64 3a 64 64 64 64 2c 58 00 0e 64
>1a8688		64 3a 64 64 64 64 00 0b 64 64 64 64 2c 58 00 07
>1a8698		64 64 64 64 2c 59 00 06 64 64 64 64 00 03 64 64
>1a86a8		2c 58 00 05 64 64 2c 59 00 11 64 64 2c 53 00 09
>1a86b8		64 64 00 01 23 64 64 64 64 00 c2 23 64 64 2c 23
>1a86c8		64 64 00 14 23 64 64 00 02 28 64 64 2c 53 29 2c
>1a86d8		59 00 0c 28 64 64 64 64 2c 58 29 00 10 28 64 64
>1a86e8		64 64 29 00 10 28 64 64 2c 58 29 00 00 28 64 64
>1a86f8		29 2c 59 00 04 28 64 64 29 00 0f 5b 64 64 64 64
>1a8708		5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64 64 5d 00
>1a8718		0a 00 00 08 c2 20 48 18 af 7a 08 00 69 01 00 8f
>1a8728		7a 08 00 e2 20 af 7c 08 00 69 00 8f 7c 08 00 c2
>1a8738		20 68 28 6b 08 c2 10 e2 20 da a2 08 00 0a b0 08
>1a8748		48 a9 30 20 18 00 80 06 48 a9 31 20 18 00 68 ca
>1a8758		d0 eb fa 28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2
>1a8768		20 a7 32 f0 0a c9 20 d0 06 22 1b 87 1a 80 f2 6b
>1a8778		08 08 c2 20 48 a9 48 08 5b 68 28 22 1b 87 1a 22
>1a8788		5d 87 1a c2 30 a5 31 c2 20 29 ff 00 0a 0a aa a5
>1a8798		32 95 0d a5 34 95 0f e2 20 a7 32 f0 14 c9 22 f0
>1a87a8		06 22 1b 87 1a 80 f2 a9 00 87 32 22 1b 87 1a e6
>1a87b8		31 28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 64
>1a87c8		4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a f0 0d 20
>1a87d8		0c 05 90 0e 22 53 7c 1a a9 01 85 4a 22 1b 87 1a
>1a87e8		80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00 0a 0a aa
>1a87f8		a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b e2 20 64
>1a8808		31 22 5d 87 1a a7 32 f0 21 c9 22 d0 06 22 78 87
>1a8818		1a 80 0a 22 bb 87 1a a5 31 c9 09 b0 0d a7 32 f0
>1a8828		09 c9 20 f0 dc 20 0c 05 b0 d7 6b 08 0b 08 c2 20
>1a8838		48 a9 48 08 5b 68 28 c2 10 e2 20 a2 31 00 74 00
>1a8848		ca d0 fb a9 00 85 02 85 34 c2 20 a9 00 4f 85 00
>1a8858		85 32 e2 20 22 5d 87 1a c9 00 f0 38 c2 20 a5 32
>1a8868		85 08 e2 20 a5 34 85 0a a2 01 00 22 1b 87 1a a7
>1a8878		32 d0 06 86 0b 64 31 80 1b c9 20 f0 03 e8 80 eb
>1a8888		86 0b a9 00 87 32 22 1b 87 1a a7 08 c9 41 f0 07
>1a8898		22 05 88 1a 2b 28 6b 22 5d 87 1a a7 32 f0 f5 22
>1a88a8		bb 87 1a 22 5d 87 1a a7 32 f0 e9 c2 20 a5 32 85
>1a88b8		11 e2 20 a5 34 85 13 22 1b 87 1a a7 32 f0 26 c9
>1a88c8		20 d0 f4 a9 00 87 32 e6 31 22 1b 87 1a 22 5d 87
>1a88d8		1a a7 32 f0 bf c2 20 a5 32 85 15 e2 20 a5 34 85
>1a88e8		17 e6 31 80 af e6 31 80 ab 08 c2 10 e2 20 a5 31
>1a88f8		d0 0f a2 e7 89 a9 1a 48 ab 20 64 04 20 d7 03 80
>1a8908		61 c2 20 a5 0d 8f 23 08 00 a5 0f 8f 25 08 00 20
>1a8918		da 6a e2 20 a5 31 c9 01 d0 0f c2 20 a9 ff ff 8f
>1a8928		54 03 00 8f 56 03 00 80 0e c2 20 a5 11 8f 54 03
>1a8938		00 a5 13 8f 56 03 00 22 18 11 00 b0 25 e2 20 a2
>1a8948		0d 8a a9 1a 48 ab 20 64 04 af 2e 03 00 20 8e 04
>1a8958		a9 20 20 18 00 af 20 03 00 20 8e 04 20 d7 03 20
>1a8968		d7 03 28 6b 8b 08 c2 10 e2 20 a5 31 c9 03 f0 0f
>1a8978		a2 e7 89 a9 1a 48 ab 20 64 04 20 d7 03 80 54 c2
>1a8988		20 a5 0d 8f 23 08 00 a5 0f 8f 25 08 00 20 da 6a
>1a8998		a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5 15 8f 58
>1a89a8		03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0 25 e2 20
>1a89b8		a2 f7 89 a9 1a 48 ab 20 64 04 af 2e 03 00 20 8e
>1a89c8		04 a9 20 20 18 00 af 20 03 00 20 8e 04 20 d7 03
>1a89d8		20 d7 03 28 ab 6b 5c b5 27 1a 6b 00 00 00 00 42
>1a89e8		61 64 20 61 72 67 75 6d 65 6e 74 73 0d 0d 00 55
>1a89f8		6e 61 62 6c 65 20 74 6f 20 73 61 76 65 20 66 69
>1a8a08		6c 65 3a 20 00 55 6e 61 62 6c 65 20 74 6f 20 6c
>1a8a18		6f 61 64 20 66 69 6c 65 3a 20 00 0d 20 20 50 43
>1a8a28		20 20 20 20 20 41 20 20 20 20 58 20 20 20 20 59
>1a8a38		20 20 20 20 53 50 20 20 20 44 42 52 20 44 50 20
>1a8a48		20 20 4e 56 4d 58 44 49 5a 43 0d 00 41 43 44 46
>1a8a58		47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e 3f 00 18
>1a8a68		fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>1a8a78		00 48 ab 68 28 c2 30 20 a6 8a a9 ff fe 1b 08 e2
>1a8a88		20 48 a9 1a 48 ab 68 28 a2 77 d2 20 64 04 08 e2
>1a8a98		20 48 a9 00 48 ab 68 28 4c b5 27 4c a3 8a 08 20
>1a8aa8		34 03 20 49 50 28 60 00 00 00 00 00 00 00 00 00
>1a8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1107 times (17712 bytes)...
>1acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>1ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>1ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>1ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>1ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>1ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>1ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>1ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>1ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>1ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>1ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>1ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>1ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>1ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>1ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>1ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>1ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>1ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>1ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>1ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>1ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>1ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>1ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>1ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>1ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>1ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>1ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>1ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>1ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>1ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>1ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>1ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>1ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>1ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>1ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>1ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>1ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>1ad248		4f 53 00 54 41 4e 00 4c 4e 00 41 43 4f 53 00 41
>1ad258		53 49 4e 00 41 54 41 4e 00 45 58 50 00 53 51 52
>1ad268		00 49 4e 4b 45 59 00 0d 52 45 41 44 59 0d 00 43
>1ad278		32 35 36 20 46 6f 65 6e 69 78 20 42 41 53 49 43
>1ad288		38 31 36 20 76 30 2e 32 2e 30 2d 61 6c 70 68 61
>1ad298		2b 34 31 31 0d 00
>1b0000						.align 256
.1b0000						CREDITS_TEXT
>1b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>1b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>1b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>1b004f		20
>1b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>1b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>1b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>1b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>1b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>1b009f		20
>1b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b00ef		20
>1b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b013f		20
>1b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>1b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>1b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>1b0168		6e 79 20 41 6c 6c 61 69 72 65
>1b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>1b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b018a		20 20 20 20 20 20
>1b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>1b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>1b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>1b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b01da		20 20 20 20 20 20
>1b01e0		20				                .text " "
>1b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0229		20 20 20 20 20 20 20
>1b0230		20				                .text " "
>1b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0279		20 20 20 20 20 20 20
>1b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>1b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>1b0298		53 3a
>1b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>1b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>1b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>1b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>1b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>1b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b031d		20 20 20
>1b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>1b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>1b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>1b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>1b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>1b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>1b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>1b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>1b0398		75 73 68
>1b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>1b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>1b03c8		54 68 61 6e 6b 73 3a
>1b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>1b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0407		20 20 20 20 20 20 20 20 20
>1b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>1b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>1b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>1b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>1b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>1b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b045f		20
>1b0460		20				                .text " "
>1b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04a9		20 20 20 20 20 20 20
>1b04b0		20				                .text " "
>1b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04f9		20 20 20 20 20 20 20
>1b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>1b0508		45 53 20 41 55 54 48 4f 52 53 3a
>1b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>1b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b054b		20 20 20 20 20
>1b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>1b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>1b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>1b0578		63 6f 72 65 73 2e 6f 72 67
>1b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>1b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0599		20 20 20 20 20 20 20
>1b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>1b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>1b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>1b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>1b05d8		6d
>1b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>1b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>1b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>1b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>1b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>1b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>1b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>1b063b		20 20 20 20 20
>1b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>1b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>1b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>1b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>1b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b068b		20 20 20 20 20
>1b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>1b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>1b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>1b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>1b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06da		20 20 20 20 20 20
>1b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>1b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>1b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>1b0708		6a 61 64 61 20 47 6f 6d 65 7a
>1b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b072a		20 20 20 20 20 20
>1b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>1b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>1b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>1b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>1b0768		6f 6d
>1b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>1b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>1b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>1b0798		6e 69 78 20 55 29 3a 20 54 42 44
>1b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>1b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07cb		20 20 20 20 20
>1b07d0		20				                .text " "
>1b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0819		20 20 20 20 20 20 20
>1b0820		20				                .text " "
>1b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0869		20 20 20 20 20 20 20
>1b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>1b0878		54 48 41 4e 4b 53 3a
>1b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>1b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b08b7		20 20 20 20 20 20 20 20 20
>1b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>1b08c8		56 61 6e 68 61 72 65 6e
>1b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>1b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0908		20 20 20 20 20 20 20 20
>1b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>1b0918		65 77
>1b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>1b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>1b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>1b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>1b0988		65 66 65 72 65 6e 63 65 73 29
>1b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>1b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b09aa		20 20 20 20 20 20
>1b09b0		20				                .text " "
>1b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b09f9		20 20 20 20 20 20 20
>1b0a00		20				                .text " "
>1b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0a49		20 20 20 20 20 20 20
>1b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0a9f		20
>1b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>1b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>1b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>1b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>1b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>1b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>1b0aec		20 20 20 20
>1b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>1b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>1b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>1b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>1b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>1b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>1b0b3c		20 20 20 20
>1b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>1b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>1b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>1b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>1b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>1b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>1b0b8d		20 20 20
>1b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>1b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>1b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>1b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>1b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>1b0bdd		20 20 20
>1b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>1b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>1b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>1b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>1b0c2d		20 20 20
>1b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0c7f		20
>1b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>1b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c98		53 74 65 66 61 6e 79
>1b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>1b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cc7		20 20 20 20 20 20 20 20 20
>1b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>1b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>1b1768		20 20 20 20 20 20 20 20
>1b1770						.align 256
>1b1800		f4 f4 f4 f4 f4 f4 f4 f4		CREDITS_COLOR   .fill 80 * 60, $F4
>1b1808		f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4
;		...repeated 298 times (4768 bytes)...
>1b2ab8		f4 f4 f4 f4 f4 f4 f4 f4
.1e0000						BOOT_MENU
.1e0000						SplashScreenMain:
.1e0000		48		pha		                PHA             ; begin setdp macro
.1e0001		08		php		                PHP
.1e0002		c2 20		rep #$20	                REP #$20        ; set A long
.1e0004		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1e0007		5b		tcd		                TCD
.1e0008		28		plp		                PLP
.1e0009		68		pla		                PLA             ; end setdp macro
.1e000a		c2 10		rep #$10	                REP #$10        ; set X long
.1e000c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e000e		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.1e0012		a9 00		lda #$00	                LDA #$00
.1e0014		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0016		85 f1		sta $f1		                STA INTERRUPT_COUNT
.1e0018		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e001a		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.1e001e		29 04		and #$04	                AND #FNX0_INT02_TMR0
.1e0020		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.1e0024		20 ee 00	jsr $1e00ee	                JSR Splash_Get_Machine_ID
.1e0027		20 21 01	jsr $1e0121	                JSR Splash_Clear_Screen
.1e002a		20 0b 01	jsr $1e010b	                JSR Splash_Load_FontSet
.1e002d		22 08 03 1e	jsl $1e0308	                JSL Splashscreen_BitMapSetup
.1e0031		20 1b 06	jsr $1e061b	                JSR Model_Update_Info_Field
.1e0034		20 fc 05	jsr $1e05fc	                JSR Set_Text_Color
.1e0037		a9 00		lda #$00	                LDA #$00
.1e0039		85 a6		sta $a6		                STA LINE_INDEX  ; Point to the first line to be displayed
.1e003b		85 a7		sta $a7		                STA LINE_INDEX + 1
.1e003d		20 a3 08	jsr $1e08a3	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e0040						HAVE_FUN:
.1e0040		22 16 81 19	jsl $198116	                JSL BOOT_SOUND_OFF
.1e0044		22 3b 01 1e	jsl $1e013b	                JSL Splash_Moniker_Color_Rolling  ; Go Move The Colors on the Logo
.1e0048		a6 a6		ldx $a6		                LDX LINE_INDEX
.1e004a		e0 17 00	cpx #$0017	                CPX #NumberOfEntry
.1e004d		f0 08		beq $1e0057	                BEQ ByPassCharDisplay           ; If Equal all Lines have been displayed
.1e004f		20 e0 08	jsr $1e08e0	                JSR Line_Display_1_Character    ; Go move the cursor one stop
.1e0052		90 21		bcc $1e0075	                BCC Still_Displaying_Char
.1e0054		20 a3 08	jsr $1e08a3	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e0057						ByPassCharDisplay:
.1e0057		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0059		22 28 10 00	jsl $001028	                JSL GETSCANCODE         ; Try to get a scan code
.1e005d		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.1e005f		f0 14		beq $1e0075	                BEQ Still_Displaying_Char            ; No: keep waiting until timeout
.1e0061		c9 3b		cmp #$3b	                CMP #CHAR_F1            ; Did the user press F1?
.1e0063		f0 1f		beq $1e0084	                BEQ return              ; Yes: return it
.1e0065		c9 3c		cmp #$3c	                CMP #CHAR_F2            ; Did the user press F2?
.1e0067		f0 1b		beq $1e0084	                BEQ return              ; Yes: return it
.1e0069		c9 3d		cmp #$3d	                CMP #CHAR_F3            ; Did the user press F3?
.1e006b		f0 17		beq $1e0084	                BEQ return              ; Yes: return it
.1e006d		c9 1c		cmp #$1c	                CMP #SCAN_CR            ; Did the user press CR?
.1e006f		f0 13		beq $1e0084	                BEQ return              ; Yes: return it
.1e0071		c9 39		cmp #$39	                CMP #SCAN_SP            ; Did the user press SPACE?
.1e0073		f0 0d		beq $1e0082	                BEQ exitshere
.1e0075						Still_Displaying_Char:
.1e0075						WaitForNextSOF:
.1e0075		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0
.1e0079		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e007b		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.1e007d		d0 f6		bne $1e0075	                BNE WaitForNextSOF;
.1e007f		4c 40 00	jmp $1e0040	                JMP HAVE_FUN
.1e0082						exitshere:
.1e0082						timeout
.1e0082		a9 00		lda #$00	                LDA #0                  ; Return 0 for a timeout / SPACE
.1e0084						return
.1e0084		8f 08 00 00	sta $000008	                STA @l KRNL_BOOT_MENU_K          ; Store ther Keyboard Value
.1e0088		a9 00		lda #$00	                LDA #$00
.1e008a		8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L         ; Disable Everything
.1e008e		22 3c 05 1e	jsl $1e053c	                JSL SS_VDMA_CLEAR_MEMORY_640_480 ; Clear the Bitmap Screen
.1e0092		20 a7 00	jsr $1e00a7	                JSR VickyII_Registers_Clear      ; Reset All Vicky Registers
.1e0095		22 c0 10 00	jsl $0010c0	                JSL INITFONTSET ; Reload the Official FONT set
.1e0099		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR ; Reset the Cursor to its origin
.1e009d		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.1e00a1		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE  ; Init VICKY TextMode now contains Hi-Res Dipswitch read and Automatic Text Size Parameter adjust
.1e00a5		ea		nop		                NOP
.1e00a6		6b		rtl		                RTL
.1e00a7						VickyII_Registers_Clear:
.1e00a7		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00a9		c2 10		rep #$10	                REP #$10        ; set X long
.1e00ab		a2 00 00	ldx #$0000	                LDX #$0000
.1e00ae		a9 00		lda #$00	                LDA #$00
.1e00b0						ClearSpriteRegisters:
.1e00b0		9f 00 0c af	sta $af0c00,x	                STA @l SP00_CONTROL_REG, X
.1e00b4		e8		inx		                INX
.1e00b5		e0 00 02	cpx #$0200	                CPX #$0200
.1e00b8		d0 f6		bne $1e00b0	                BNE ClearSpriteRegisters
.1e00ba		a2 00 00	ldx #$0000	                LDX #$0000
.1e00bd		a9 00		lda #$00	                LDA #$00
.1e00bf						ClearTiles0Registers:
.1e00bf		9f 00 02 af	sta $af0200,x	                STA @l TL0_CONTROL_REG, X
.1e00c3		e8		inx		                INX
.1e00c4		e0 30 00	cpx #$0030	                CPX #$0030
.1e00c7		d0 f6		bne $1e00bf	                BNE ClearTiles0Registers
.1e00c9		ea		nop		                NOP
.1e00ca		a2 00 00	ldx #$0000	                LDX #$0000
.1e00cd		a9 00		lda #$00	                LDA #$00
.1e00cf						ClearTiles1Registers:
.1e00cf		9f 80 02 af	sta $af0280,x	                STA @l TILESET0_ADDY_L, X
.1e00d3		e8		inx		                INX
.1e00d4		e0 20 00	cpx #$0020	                CPX #$0020
.1e00d7		d0 f6		bne $1e00cf	                BNE ClearTiles1Registers
.1e00d9		ea		nop		                NOP
.1e00da		a2 00 00	ldx #$0000	                LDX #$0000
.1e00dd		a9 00		lda #$00	                LDA #$00
.1e00df						ClearBitmapRegisters:
.1e00df		9f 00 01 af	sta $af0100,x	                STA @l BM0_CONTROL_REG, X
.1e00e3		9f 08 01 af	sta $af0108,x	                STA @l BM1_CONTROL_REG, X
.1e00e7		e8		inx		                INX
.1e00e8		e0 10 00	cpx #$0010	                CPX #$0010
.1e00eb		d0 f2		bne $1e00df	                BNE ClearBitmapRegisters
.1e00ed		60		rts		                RTS
.1e00ee						Splash_Get_Machine_ID
.1e00ee		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00f0		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e00f4		29 03		and #$03	                AND #$03        ; Isolate the first 2 bits to know if it is a U or FMX
.1e00f6		85 b0		sta $b0		                STA MODEL
.1e00f8		c9 00		cmp #$00	                CMP #$00
.1e00fa		f0 0e		beq $1e010a	                BEQ DONE
.1e00fc		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e0100		29 04		and #$04	                AND #GABE_SYS_STAT_MID2 ; High 4Meg, Low - 2Megs
.1e0102		c9 04		cmp #$04	                CMP #GABE_SYS_STAT_MID2
.1e0104		f0 04		beq $1e010a	                BEQ DONE
.1e0106		a9 02		lda #$02	                LDA #$02
.1e0108		85 b0		sta $b0		                STA MODEL       ; In this Scheme 00 - FMX, 01 - U+, 02 - U
.1e010a						DONE:
.1e010a		60		rts		                RTS
.1e010b						Splash_Load_FontSet
.1e010b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e010d		c2 10		rep #$10	                REP #$10        ; set X long
.1e010f		a2 00 00	ldx #$0000	                LDX #$0000
.1e0112						DONE_LOADING_FONT:
.1e0112		bf 00 08 1f	lda $1f0800,x	                LDA @l FONT_4_SPLASH, X
.1e0116		9f 00 80 af	sta $af8000,x	                STA @l FONT_MEMORY_BANK0, X
.1e011a		e8		inx		                INX
.1e011b		e0 00 08	cpx #$0800	                CPX #2048
.1e011e		d0 f2		bne $1e0112	                BNE DONE_LOADING_FONT
.1e0120		60		rts		                RTS
.1e0121						Splash_Clear_Screen
.1e0121		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0123		c2 10		rep #$10	                REP #$10        ; set X long
.1e0125		a2 00 00	ldx #$0000	                LDX #$0000
.1e0128						Branch_Clear:
.1e0128		a9 20		lda #$20	                LDA #$20
.1e012a		9f 00 a0 af	sta $afa000,x	                STA @l CS_TEXT_MEM_PTR,X
.1e012e		a9 f0		lda #$f0	                LDA #$F0
.1e0130		9f 00 c0 af	sta $afc000,x	                STA @l CS_COLOR_MEM_PTR,X
.1e0134		e8		inx		                INX
.1e0135		e0 00 20	cpx #$2000	                CPX #$2000
.1e0138		d0 ee		bne $1e0128	                BNE Branch_Clear
.1e013a		60		rts		                RTS
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
.1e013b						Splash_Moniker_Color_Rolling
.1e013b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e013d		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.1e0141		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e0143		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.1e0147		a5 f0		lda $f0		                LDA INTERRUPT_STATE
.1e0149		c9 00		cmp #$00	                CMP #IRQ_SOF_ST0
.1e014b		f0 0c		beq $1e0159	                BEQ SERVE_STATE0
.1e014d		c9 01		cmp #$01	                CMP #IRQ_SOF_ST1
.1e014f		f0 1a		beq $1e016b	                BEQ SERVE_STATE1
.1e0151		c9 02		cmp #$02	                CMP #IRQ_SOF_ST2
.1e0153		d0 03		bne $1e0158	                BNE NOT_SERVE_STATE2
.1e0155		82 39 01	brl $1e0291	                BRL SERVE_STATE2
.1e0158						NOT_SERVE_STATE2
.1e0158		6b		rtl		                RTL
.1e0159						SERVE_STATE0
.1e0159		a5 f1		lda $f1		                LDA INTERRUPT_COUNT
.1e015b		c9 04		cmp #$04	                CMP #$04
.1e015d		f0 03		beq $1e0162	                BEQ SERVE_NEXT_STATE
.1e015f		e6 f1		inc $f1		                INC INTERRUPT_COUNT
.1e0161		6b		rtl		                RTL
.1e0162						SERVE_NEXT_STATE
.1e0162		a9 00		lda #$00	                LDA #$00
.1e0164		85 f1		sta $f1		                STA INTERRUPT_COUNT
.1e0166		a9 01		lda #$01	                LDA #IRQ_SOF_ST1
.1e0168		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e016a		6b		rtl		                RTL
.1e016b						SERVE_STATE1
.1e016b		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e016d		a9 00 00	lda #$0000	                LDA #$0000
.1e0170		a2 00 00	ldx #$0000	                LDX #$0000
.1e0173		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1e0175		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0177		bf c0 02 1e	lda $1e02c0,x	                LDA @lCOLOR_POINTER+0, X
.1e017b		aa		tax		                TAX
.1e017c		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e0180		8f e0 3f af	sta $af3fe0	                STA @lGRPH_LUT7_PTR+992
.1e0184		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0188		8f e1 3f af	sta $af3fe1	                STA @lGRPH_LUT7_PTR+993
.1e018c		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e0190		8f e2 3f af	sta $af3fe2	                STA @lGRPH_LUT7_PTR+994
.1e0194		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0196		bf c1 02 1e	lda $1e02c1,x	                LDA @lCOLOR_POINTER+1, X
.1e019a		aa		tax		                TAX
.1e019b		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e019f		8f e4 3f af	sta $af3fe4	                STA @lGRPH_LUT7_PTR+996
.1e01a3		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01a7		8f e5 3f af	sta $af3fe5	                STA @lGRPH_LUT7_PTR+997
.1e01ab		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01af		8f e6 3f af	sta $af3fe6	                STA @lGRPH_LUT7_PTR+998
.1e01b3		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01b5		bf c2 02 1e	lda $1e02c2,x	                LDA @lCOLOR_POINTER+2, X
.1e01b9		aa		tax		                TAX
.1e01ba		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01be		8f e8 3f af	sta $af3fe8	                STA @lGRPH_LUT7_PTR+1000
.1e01c2		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01c6		8f e9 3f af	sta $af3fe9	                STA @lGRPH_LUT7_PTR+1001
.1e01ca		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01ce		8f ea 3f af	sta $af3fea	                STA @lGRPH_LUT7_PTR+1002
.1e01d2		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01d4		bf c3 02 1e	lda $1e02c3,x	                LDA @lCOLOR_POINTER+3, X
.1e01d8		aa		tax		                TAX
.1e01d9		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01dd		8f ec 3f af	sta $af3fec	                STA @lGRPH_LUT7_PTR+1004
.1e01e1		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01e5		8f ed 3f af	sta $af3fed	                STA @lGRPH_LUT7_PTR+1005
.1e01e9		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01ed		8f ee 3f af	sta $af3fee	                STA @lGRPH_LUT7_PTR+1006
.1e01f1		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01f3		bf c4 02 1e	lda $1e02c4,x	                LDA @lCOLOR_POINTER+4, X
.1e01f7		aa		tax		                TAX
.1e01f8		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01fc		8f f0 3f af	sta $af3ff0	                STA @lGRPH_LUT7_PTR+1008
.1e0200		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0204		8f f1 3f af	sta $af3ff1	                STA @lGRPH_LUT7_PTR+1009
.1e0208		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e020c		8f f2 3f af	sta $af3ff2	                STA @lGRPH_LUT7_PTR+1010
.1e0210		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0212		bf c5 02 1e	lda $1e02c5,x	                LDA @lCOLOR_POINTER+5, X
.1e0216		aa		tax		                TAX
.1e0217		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e021b		8f f4 3f af	sta $af3ff4	                STA @lGRPH_LUT7_PTR+1012
.1e021f		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0223		8f f5 3f af	sta $af3ff5	                STA @lGRPH_LUT7_PTR+1013
.1e0227		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e022b		8f f6 3f af	sta $af3ff6	                STA @lGRPH_LUT7_PTR+1014
.1e022f		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0231		bf c6 02 1e	lda $1e02c6,x	                LDA @lCOLOR_POINTER+6, X
.1e0235		aa		tax		                TAX
.1e0236		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e023a		8f f8 3f af	sta $af3ff8	                STA @lGRPH_LUT7_PTR+1016
.1e023e		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0242		8f f9 3f af	sta $af3ff9	                STA @lGRPH_LUT7_PTR+1017
.1e0246		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e024a		8f fa 3f af	sta $af3ffa	                STA @lGRPH_LUT7_PTR+1018
.1e024e		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0250		bf c7 02 1e	lda $1e02c7,x	                LDA @lCOLOR_POINTER+7, X
.1e0254		aa		tax		                TAX
.1e0255		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e0259		8f fc 3f af	sta $af3ffc	                STA @lGRPH_LUT7_PTR+1020
.1e025d		8f 50 1f af	sta $af1f50	                STA @lFG_CHAR_LUT_PTR + $10           ;
.1e0261		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0265		8f fd 3f af	sta $af3ffd	                STA @lGRPH_LUT7_PTR+1021
.1e0269		8f 51 1f af	sta $af1f51	                STA @lFG_CHAR_LUT_PTR + $11            ;
.1e026d		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e0271		8f fe 3f af	sta $af3ffe	                STA @lGRPH_LUT7_PTR+1022
.1e0275		8f 52 1f af	sta $af1f52	                STA @lFG_CHAR_LUT_PTR + $12            ;
.1e0279						HERE
.1e0279		18		clc		                CLC
.1e027a		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.1e027c		69 09		adc #$09	                ADC #$09
.1e027e		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e0280		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.1e0282		c9 48		cmp #$48	                CMP #$48
.1e0284		d0 04		bne $1e028a	                BNE EXIT_COLOR_CHANGE
.1e0286		a9 00		lda #$00	                LDA #$00
.1e0288		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e028a						EXIT_COLOR_CHANGE
.1e028a		c2 10		rep #$10	                REP #$10        ; set X long
.1e028c		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e028e		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0290		6b		rtl		                RTL
.1e0291						SERVE_STATE2
.1e0291		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e0293		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0295		6b		rtl		                RTL
>1e0296						.align 16
>1e02a0		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>1e02a4		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>1e02a8		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>1e02ac		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>1e02b0		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>1e02b4		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>1e02b8		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>1e02bc		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>1e02c0		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>1e02c8		00
>1e02c9		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>1e02d1		00
>1e02d2		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>1e02da		00
>1e02db		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>1e02e3		00
>1e02e4		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>1e02ec		00
>1e02ed		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>1e02f5		00
>1e02f6		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>1e02fe		00
>1e02ff		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>1e0307		00

;******  Processing file: src\SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480
.1e0308						Splashscreen_BitMapSetup
.1e0308		e2 20		sep #$20	                SEP #$20        ; set A short
.1e030a		c2 10		rep #$10	                REP #$10        ; set X long
.1e030c		a9 0f		lda #$0f	        LDA #( Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay );
.1e030e		8f 00 00 af	sta $af0000	        STA @l MASTER_CTRL_REG_L
.1e0312		a9 00		lda #$00	        LDA #$00
.1e0314		8f 01 00 af	sta $af0001	        STA @l MASTER_CTRL_REG_H
.1e0318		a9 00		lda #$00	        LDA #$00
.1e031a		8f 00 01 af	sta $af0100	        STA @l BM0_CONTROL_REG
.1e031e		a9 0f		lda #$0f	        LDA #( BM_Enable | BM_LUT7)
.1e0320		8f 08 01 af	sta $af0108	        STA @l BM1_CONTROL_REG
.1e0324		a9 00		lda #$00	        LDA #$00
.1e0326		8f 09 01 af	sta $af0109	        STA @l BM1_START_ADDY_L
.1e032a		a9 00		lda #$00	        LDA #$00
.1e032c		8f 0a 01 af	sta $af010a	        STA @l BM1_START_ADDY_M
.1e0330		8f 0b 01 af	sta $af010b	        STA @l BM1_START_ADDY_H
.1e0334		a9 01		lda #$01	        LDA #$01
.1e0336		8f 04 00 af	sta $af0004	        STA BORDER_CTRL_REG
.1e033a		a9 08		lda #$08	        LDA #$08
.1e033c		8f 08 00 af	sta $af0008	        STA BORDER_X_SIZE
.1e0340		8f 09 00 af	sta $af0009	        STA BORDER_Y_SIZE
.1e0344		a9 80		lda #$80	        LDA #$80
.1e0346		8f 06 00 af	sta $af0006	        STA BORDER_COLOR_G
.1e034a		a9 00		lda #$00	        LDA #$00
.1e034c		8f 05 00 af	sta $af0005	        STA BORDER_COLOR_B
.1e0350		8f 07 00 af	sta $af0007	        STA BORDER_COLOR_R
.1e0354		a9 a0		lda #$a0	        LDA #$A0
.1e0356		8f 12 00 af	sta $af0012	        STA @l VKY_TXT_CURSOR_CHAR_REG
.1e035a		a9 10		lda #$10	        LDA #$10
.1e035c		8f 0e 00 af	sta $af000e	        STA @l BACKGROUND_COLOR_G
.1e0360		a9 10		lda #$10	        LDA #$10
.1e0362		8f 0f 00 af	sta $af000f	        STA @l BACKGROUND_COLOR_R
.1e0366		8f 0d 00 af	sta $af000d	        STA @l BACKGROUND_COLOR_B
.1e036a		e2 20		sep #$20	                SEP #$20        ; set A short
.1e036c		c2 10		rep #$10	                REP #$10        ; set X long
.1e036e		a2 00 00	ldx #$0000	        LDX #$0000
.1e0371						SS_LUT_BRANCH:
.1e0371		bf 00 0e 1e	lda $1e0e00,x	        LDA @l SS_MONIKER_LUT, X
.1e0375		ea		nop		        NOP
.1e0376		9f 00 3c af	sta $af3c00,x	        STA @l GRPH_LUT7_PTR, X
.1e037a		e8		inx		        INX
.1e037b		e0 00 04	cpx #$0400	        CPX #1024
.1e037e		d0 f1		bne $1e0371	        BNE SS_LUT_BRANCH
.1e0380		a9 00		lda #$00	        LDA #$00
.1e0382		8f 04 3c af	sta $af3c04	        STA @l GRPH_LUT7_PTR + 4
.1e0386		8f 05 3c af	sta $af3c05	        STA @l GRPH_LUT7_PTR + 5
.1e038a		8f 06 3c af	sta $af3c06	        STA @l GRPH_LUT7_PTR + 6
.1e038e		22 3c 05 1e	jsl $1e053c	        JSL SS_VDMA_CLEAR_MEMORY_640_480;
.1e0392		c2 20		rep #$20	                REP #$20        ; set A long
.1e0394		a9 00 12	lda #$1200	        LDA #<>SS_MONIKER      ; Set up the Source
.1e0397		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e039b		a9 00 50	lda #$5000	        LDA #<>( C256Moniker_SizeX * C256Moniker_SizeY )
.1e039e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e03a2		a9 00 00	lda #$0000	        LDA #$0000
.1e03a5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e03a9		a9 a0 78	lda #$78a0	        LDA #<>( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)    ; Set up the Source
.1e03ac		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e03b0		a9 40 01	lda #$0140	        LDA #C256Moniker_SizeX
.1e03b3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e03b7		a9 40 00	lda #$0040	        LDA #C256Moniker_SizeY
.1e03ba		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e03be		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e03c1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e03c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03c7		a9 1e		lda #$1e	        LDA #`SS_MONIKER
.1e03c9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e03cd		a9 00		lda #$00	        LDA #`( C256Moniker_SizeX * C256Moniker_SizeY )
.1e03cf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e03d3		a9 00		lda #$00	        LDA #$00
.1e03d5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e03d9		a9 00		lda #$00	        LDA #`( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)
.1e03db		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e03df		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e03e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03e5		af b0 00 00	lda $0000b0	        LDA @lMODEL
.1e03e9		29 03		and #$03	        AND #$03
.1e03eb		c9 00		cmp #$00	        CMP #$00
.1e03ed		f0 0b		beq $1e03fa	        BEQ DMA_FMX_Moniker
.1e03ef		c9 01		cmp #$01	        CMP #$01
.1e03f1		f0 5b		beq $1e044e	        BEQ DMA_UPlus_Moniker
.1e03f3		c9 02		cmp #$02	        CMP #$02
.1e03f5		d0 03		bne $1e03fa	        BNE BAD_MODEL_NUMBER
.1e03f7		82 a8 00	brl $1e04a2	        BRL DMA_U_Moniker
.1e03fa						 BAD_MODEL_NUMBER:
.1e03fa						DMA_FMX_Moniker:
.1e03fa		c2 20		rep #$20	                REP #$20        ; set A long
.1e03fc		a9 00 62	lda #$6200	        LDA #<>SS_FMX_TXT      ; Set up the Source
.1e03ff		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e0403		a9 00 32	lda #$3200	        LDA #<>( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e0406		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e040a		a9 00 00	lda #$0000	        LDA #$0000
.1e040d		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0411		a9 f0 13	lda #$13f0	        LDA #<>( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)    ; Set up the Source
.1e0414		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0418		a9 a0 00	lda #$00a0	        LDA #FMXMoniker_SizeX
.1e041b		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e041f		a9 50 00	lda #$0050	        LDA #FMXMoniker_SizeY
.1e0422		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e0426		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e0429		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e042d		e2 20		sep #$20	                SEP #$20        ; set A short
.1e042f		a9 1e		lda #$1e	        LDA #`SS_FMX_TXT
.1e0431		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0435		a9 00		lda #$00	        LDA #`( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e0437		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e043b		a9 00		lda #$00	        LDA #$00
.1e043d		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0441		a9 01		lda #$01	        LDA #`( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)
.1e0443		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e0447		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e044b		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e044e						DMA_UPlus_Moniker:
.1e044e		c2 20		rep #$20	                REP #$20        ; set A long
.1e0450		a9 00 94	lda #$9400	        LDA #<>SS_UPlus_TXT      ; Set up the Source
.1e0453		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e0457		a9 00 18	lda #$1800	        LDA #<>( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e045a		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e045e		a9 00 00	lda #$0000	        LDA #$0000
.1e0461		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0465		a9 10 14	lda #$1410	        LDA #<>( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)    ; Set up the Source
.1e0468		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e046c		a9 60 00	lda #$0060	        LDA #UPlusMoniker_SizeX
.1e046f		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e0473		a9 40 00	lda #$0040	        LDA #UPlusMoniker_SizeY
.1e0476		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e047a		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e047d		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e0481		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0483		a9 1e		lda #$1e	        LDA #`SS_UPlus_TXT
.1e0485		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0489		a9 00		lda #$00	        LDA #`( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e048b		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e048f		a9 00		lda #$00	        LDA #$00
.1e0491		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0495		a9 01		lda #$01	        LDA #`( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)
.1e0497		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e049b		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e049f		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e04a2						DMA_U_Moniker:
.1e04a2		c2 20		rep #$20	                REP #$20        ; set A long
.1e04a4		a9 00 ac	lda #$ac00	        LDA #<>SS_U_TXT      ; Set up the Source
.1e04a7		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e04ab		a9 00 10	lda #$1000	        LDA #<>( UMoniker_SizeX *UMoniker_SizeY )
.1e04ae		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e04b2		a9 00 00	lda #$0000	        LDA #$0000
.1e04b5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e04b9		a9 20 14	lda #$1420	        LDA #<>( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)    ; Set up the Source
.1e04bc		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e04c0		a9 40 00	lda #$0040	        LDA #UMoniker_SizeX
.1e04c3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e04c7		a9 40 00	lda #$0040	        LDA #UMoniker_SizeY
.1e04ca		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e04ce		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e04d1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e04d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04d7		a9 1e		lda #$1e	        LDA #`SS_U_TXT
.1e04d9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e04dd		a9 00		lda #$00	        LDA #`( UMoniker_SizeX * UMoniker_SizeY )
.1e04df		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e04e3		a9 00		lda #$00	        LDA #$00
.1e04e5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e04e9		a9 01		lda #$01	        LDA #`( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)
.1e04eb		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e04ef		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e04f3		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e04f6						Done_DMA_Model_Moniker
.1e04f6		6b		rtl		        RTL
.1e04f7						SS_VDMA_SETUP_2_TRANSFER_IMAGE
.1e04f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04f9		a9 11		lda #$11	        LDA #( SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src )
.1e04fb		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e04ff		a9 13		lda #$13	        LDA #( VDMA_CTRL_Enable |  VDMA_CTRL_SysRAM_Src | VDMA_CTRL_1D_2D )
.1e0501		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0505		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0507		af 00 04 af	lda $af0400	        LDA @l VDMA_CONTROL_REG
.1e050b		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e050d		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0511		af 20 04 af	lda $af0420	        LDA @l SDMA_CTRL_REG0
.1e0515		09 80		ora #$80	        ORA #SDMA_CTRL0_Start_TRF
.1e0517		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e051b		ea		nop		        NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e051c		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e051d		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e051e		ea		nop		        NOP
.1e051f		ea		nop		        NOP
.1e0520		ea		nop		        NOP
.1e0521		ea		nop		        NOP
.1e0522		ea		nop		        NOP
.1e0523		ea		nop		        NOP
.1e0524		ea		nop		        NOP
.1e0525		a9 00		lda #$00	        LDA #$00
.1e0527		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e052b						NOTFINISHED:
.1e052b		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e052f		29 80		and #$80	        AND #$80
.1e0531		c9 80		cmp #$80	        CMP #$80
.1e0533		f0 f6		beq $1e052b	        BEQ NOTFINISHED
.1e0535		a9 00		lda #$00	        LDA #$00
.1e0537		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e053b		6b		rtl		        RTL
.1e053c						SS_VDMA_CLEAR_MEMORY_640_480
.1e053c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e053e		a9 05		lda #$05	        LDA #( VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill )
.1e0540		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0544		a9 00		lda #$00	        LDA #$00
.1e0546		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e054a		c2 20		rep #$20	                REP #$20        ; set A long
.1e054c		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e054f		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0553		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0555		a9 00		lda #$00	        LDA #$00
.1e0557		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e055b		c2 20		rep #$20	                REP #$20        ; set A long
.1e055d		a9 00 b0	lda #$b000	        LDA #<>(640*480)
.1e0560		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e0564		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0566		a9 04		lda #$04	        LDA #`(640*480)
.1e0568		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e056c		a9 00		lda #$00	        LDA #$00
.1e056e		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0572		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e0576		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e0578		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e057c		ea		nop		         NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e057d		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e057e		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e057f		ea		nop		        NOP
.1e0580		ea		nop		        NOP
.1e0581		ea		nop		        NOP
.1e0582		ea		nop		        NOP
.1e0583		ea		nop		        NOP
.1e0584						SS_VDMA_CLR_LOOPA:
.1e0584		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e0588		29 80		and #$80	        AND #$80
.1e058a		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e058c		f0 f6		beq $1e0584	        BEQ SS_VDMA_CLR_LOOPA
.1e058e		ea		nop		        NOP
.1e058f		a9 00		lda #$00	        LDA #$00
.1e0591		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0595		6b		rtl		        RTL
.1e0596						SS_VDMA_TRANSFER_VRAM_2_VRAM
.1e0596		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0598		a9 01		lda #$01	        LDA #( VDMA_CTRL_Enable )
.1e059a		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e059e		a9 00		lda #$00	        LDA #$00
.1e05a0		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e05a4		c2 20		rep #$20	                REP #$20        ; set A long
.1e05a6		a9 00 96	lda #$9600	        LDA #$9600      ; Set up the Source
.1e05a9		8f 02 04 af	sta $af0402	        STA @l VDMA_SRC_ADDY_L
.1e05ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05af		a9 00		lda #$00	        LDA #$00
.1e05b1		8f 04 04 af	sta $af0404	        STA @l VDMA_SRC_ADDY_H
.1e05b5		c2 20		rep #$20	                REP #$20        ; set A long
.1e05b7		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e05ba		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e05be		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05c0		a9 00		lda #$00	        LDA #$00
.1e05c2		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e05c6		c2 20		rep #$20	                REP #$20        ; set A long
.1e05c8		a9 00 14	lda #$1400	        LDA #<>(320*16)
.1e05cb		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e05cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05d1		a9 00		lda #$00	        LDA #`(320*16)
.1e05d3		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e05d7		a9 00		lda #$00	        LDA #$00
.1e05d9		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e05dd		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e05e1		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e05e3		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e05e7		ea		nop		        NOP
.1e05e8		ea		nop		        NOP
.1e05e9		ea		nop		        NOP
.1e05ea						SS_VDMA_CLR_LOOPB:
.1e05ea		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e05ee		29 80		and #$80	        AND #$80
.1e05f0		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e05f2		f0 f6		beq $1e05ea	        BEQ SS_VDMA_CLR_LOOPB
.1e05f4		ea		nop		        NOP
.1e05f5		a9 00		lda #$00	        LDA #$00
.1e05f7		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e05fb		6b		rtl		        RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/Splashscreen_Text_Display.asm

=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
.1e05fc						Set_Text_Color:
.1e05fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e05fe		a9 00 00	lda #$0000	            LDA #00
.1e0601		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e0603		a9 30 00	lda #$0030	            LDA #48
.1e0606		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e0608		20 fc 08	jsr $1e08fc	            JSR Line_Display_Compute_Pointer
.1e060b		a0 00 00	ldy #$0000	            LDY #$0000
.1e060e		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0610		a9 40		lda #$40	            LDA #$40
.1e0612						SetColorBranch:
.1e0612		97 a8		sta [$a8],y	            STA [COLOR_DST_PTR_L],Y
.1e0614		c8		iny		            INY
.1e0615		c0 50 00	cpy #$0050	            CPY #80
.1e0618		d0 f8		bne $1e0612	            BNE SetColorBranch
.1e061a		60		rts		            RTS
.1e061b						Model_Update_Info_Field:
.1e061b		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e061d		a9 00 00	lda #$0000	            LDA #$0000
.1e0620		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0622		a5 b0		lda $b0		            LDA MODEL
.1e0624		0a		asl a		            ASL
.1e0625		0a		asl a		            ASL
.1e0626		aa		tax		            TAX
.1e0627		c2 20		rep #$20	                REP #$20        ; set A long
.1e0629		bf af 0c 1e	lda $1e0caf,x	            LDA MODEL_TABLE, X
.1e062d		85 a0		sta $a0		            STA MOD_SELECT_L
.1e062f		bf b1 0c 1e	lda $1e0cb1,x	            LDA MODEL_TABLE + 2, X
.1e0633		85 a2		sta $a2		            STA MOD_SELECT_H
.1e0635		a0 00 00	ldy #$0000	            LDY #$0000
.1e0638		84 a6		sty $a6		            STY LINE_INDEX
.1e063a						Next_Change_Here:
.1e063a		c2 20		rep #$20	                REP #$20        ; set A long
.1e063c		a4 a6		ldy $a6		            LDY LINE_INDEX
.1e063e		bb		tyx		            TYX
.1e063f		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e0641		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e0643		bf ff 0c 1e	lda $1e0cff,x	            LDA LINE_MOD, X
.1e0647		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0649		c8		iny		            INY
.1e064a		c8		iny		            INY
.1e064b		bb		tyx		            TYX
.1e064c		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e064e		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e0650		bf ff 0c 1e	lda $1e0cff,x	            LDA LINE_MOD, X
.1e0654		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0656		c8		iny		            INY
.1e0657		c8		iny		            INY
.1e0658		84 a6		sty $a6		            STY LINE_INDEX
.1e065a		c0 10 00	cpy #$0010	            CPY #16
.1e065d		f0 10		beq $1e066f	            BEQ LetsMoveOn
.1e065f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0661		a0 00 00	ldy #$0000	            LDY #$0000
.1e0664						nextchar:
.1e0664		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e0666		c9 00		cmp #$00	            CMP #$00
.1e0668		f0 d0		beq $1e063a	            BEQ Next_Change_Here
.1e066a		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e066c		c8		iny		            INY
.1e066d		80 f5		bra $1e0664	            BRA nextchar
.1e066f						LetsMoveOn:
.1e066f		af 0b 0d 1e	lda $1e0d0b	            LDA LINE_MOD + 12
.1e0673		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0675		a0 00 00	ldy #$0000	            LDY #$0000
.1e0678		e2 20		sep #$20	                SEP #$20        ; set A short
.1e067a		af 05 e8 af	lda $afe805	            LDA @lREVOFPCB_C
.1e067e		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0680		c8		iny		            INY
.1e0681		af 06 e8 af	lda $afe806	            LDA @lREVOFPCB_4
.1e0685		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0687		c8		iny		            INY
.1e0688		af 07 e8 af	lda $afe807	            LDA @lREVOFPCB_A
.1e068c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e068e		18		clc		            CLC
.1e068f		af 0d 07 af	lda $af070d	            LDA @l FPGA_DOR   ; it is in BCD
.1e0693		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0696		8f da 0a 1e	sta $1e0ada	            STA @lLINE8 + 56    ; FAT VICKY in U/U+ Model
.1e069a		8f 13 0b 1e	sta $1e0b13	            STA @lLINE9 + 47    ; GABE in FMX
.1e069e		8f 59 0b 1e	sta $1e0b59	            STA @lLINE10 + 51   ; VICKY II in FMX
.1e06a2		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR
.1e06a6		29 0f		and #$0f	            AND #$0F
.1e06a8		69 30		adc #$30	            ADC #$30
.1e06aa		8f db 0a 1e	sta $1e0adb	            STA @lLINE8 + 57    ; FAT VICKY in U/U+ Model
.1e06ae		8f 14 0b 1e	sta $1e0b14	            STA @lLINE9 + 48    ; GABE in FMX
.1e06b2		8f 5a 0b 1e	sta $1e0b5a	            STA @lLINE10 + 52   ; VICKY II in FMX
.1e06b6		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR   ; it is in BCD
.1e06ba		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e06bd		8f dd 0a 1e	sta $1e0add	            STA @lLINE8 + 59    ; FAT VICKY in U/U+ Model
.1e06c1		8f 16 0b 1e	sta $1e0b16	            STA @lLINE9 + 50    ; GABE in FMX
.1e06c5		8f 5c 0b 1e	sta $1e0b5c	            STA @lLINE10 + 54   ; VICKY II in FMX
.1e06c9		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR
.1e06cd		29 0f		and #$0f	            AND #$0F
.1e06cf		69 30		adc #$30	            ADC #$30
.1e06d1		8f de 0a 1e	sta $1e0ade	            STA @lLINE8 + 60    ; FAT VICKY in U/U+ Model
.1e06d5		8f 17 0b 1e	sta $1e0b17	            STA @lLINE9 + 51    ; GABE in FMX
.1e06d9		8f 5d 0b 1e	sta $1e0b5d	            STA @lLINE10 + 55   ; VICKY II in FMX
.1e06dd		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR   ; it is in BCD
.1e06e1		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e06e4		8f e0 0a 1e	sta $1e0ae0	            STA @lLINE8 + 62    ; FAT VICKY in U/U+ Model
.1e06e8		8f 19 0b 1e	sta $1e0b19	            STA @lLINE9 + 53    ; GABE in FMX
.1e06ec		8f 5f 0b 1e	sta $1e0b5f	            STA @lLINE10 + 57   ; VICKY II in FMX
.1e06f0		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR
.1e06f4		29 0f		and #$0f	            AND #$0F
.1e06f6		69 30		adc #$30	            ADC #$30
.1e06f8		8f e1 0a 1e	sta $1e0ae1	            STA @lLINE8 + 63    ; FAT VICKY in U/U+ Model
.1e06fc		8f 1a 0b 1e	sta $1e0b1a	            STA @lLINE9 + 54    ; GABE in FMX
.1e0700		8f 60 0b 1e	sta $1e0b60	            STA @lLINE10 + 58   ; VICKY II in FMX
.1e0704		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e0708		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e070b		8f d0 0a 1e	sta $1e0ad0	            STA @lLINE8 + 46    ; U/U+
.1e070f		8f 09 0b 1e	sta $1e0b09	            STA @lLINE9 + 37    ; When FMX, this is the Info for GABE
.1e0713		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e0717		29 0f		and #$0f	            AND #$0F
.1e0719		69 30		adc #$30	            ADC #$30
.1e071b		8f d1 0a 1e	sta $1e0ad1	            STA @lLINE8 + 47
.1e071f		8f 0a 0b 1e	sta $1e0b0a	            STA @lLINE9 + 38    ; When FMX, this is the Info for GABE
.1e0723		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e0727		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e072a		8f 4f 0b 1e	sta $1e0b4f	            STA @lLINE10 + 41    ; When FMX, this is the Info for GABE
.1e072e		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e0732		29 0f		and #$0f	            AND #$0F
.1e0734		69 30		adc #$30	            ADC #$30
.1e0736		8f 50 0b 1e	sta $1e0b50	            STA @lLINE10 + 42    ; When FMX, this is the Info for GABE
.1e073a		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e073e		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0741		8f d2 0a 1e	sta $1e0ad2	            STA @lLINE8 + 48
.1e0745		8f 0b 0b 1e	sta $1e0b0b	            STA @lLINE9 + 39    ; When FMX, this is the Info for GABE
.1e0749		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e074d		29 0f		and #$0f	            AND #$0F
.1e074f		69 30		adc #$30	            ADC #$30
.1e0751		8f d3 0a 1e	sta $1e0ad3	            STA @lLINE8 + 49
.1e0755		8f 0c 0b 1e	sta $1e0b0c	            STA @lLINE9 + 40    ; When FMX, this is the Info for GABE
.1e0759		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e075d		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0760		8f 51 0b 1e	sta $1e0b51	            STA @lLINE10 + 43    ; When FMX, this is the Info for GABE
.1e0764		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e0768		29 0f		and #$0f	            AND #$0F
.1e076a		69 30		adc #$30	            ADC #$30
.1e076c		8f 52 0b 1e	sta $1e0b52	            STA @lLINE10 + 44    ; When FMX, this is the Info for GABE
.1e0770		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e0774		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0777		8f c4 0a 1e	sta $1e0ac4	            STA @lLINE8 + 34
.1e077b		8f fd 0a 1e	sta $1e0afd	            STA @lLINE9 + 25    ; When FMX, this is the Info for GABE
.1e077f		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e0783		29 0f		and #$0f	            AND #$0F
.1e0785		69 30		adc #$30	            ADC #$30
.1e0787		8f c5 0a 1e	sta $1e0ac5	            STA @lLINE8 + 35
.1e078b		8f fe 0a 1e	sta $1e0afe	            STA @lLINE9 + 26    ; When FMX, this is the Info for GABE
.1e078f		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e0793		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0796		8f 44 0b 1e	sta $1e0b44	            STA @lLINE10 + 30    ; When FMX, this is the Info for GABE
.1e079a		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e079e		29 0f		and #$0f	            AND #$0F
.1e07a0		69 30		adc #$30	            ADC #$30
.1e07a2		8f 45 0b 1e	sta $1e0b45	            STA @lLINE10 + 31    ; When FMX, this is the Info for GABE
.1e07a6		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e07aa		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e07ad		8f c6 0a 1e	sta $1e0ac6	            STA @lLINE8 + 36
.1e07b1		8f ff 0a 1e	sta $1e0aff	            STA @lLINE9 + 27    ; When FMX, this is the Info for GABE
.1e07b5		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e07b9		29 0f		and #$0f	            AND #$0F
.1e07bb		69 30		adc #$30	            ADC #$30
.1e07bd		8f c7 0a 1e	sta $1e0ac7	            STA @lLINE8 + 37
.1e07c1		8f 00 0b 1e	sta $1e0b00	            STA @lLINE9 + 28    ; When FMX, this is the Info for GABE
.1e07c5		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e07c9		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e07cc		8f 46 0b 1e	sta $1e0b46	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e07d0		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e07d4		29 0f		and #$0f	            AND #$0F
.1e07d6		69 30		adc #$30	            ADC #$30
.1e07d8		8f 46 0b 1e	sta $1e0b46	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e07dc		20 4f 08	jsr $1e084f	            JSR GODETECTHIRES ; Dip-Switch and Change Text
.1e07df		20 70 08	jsr $1e0870	            JSR GODETECTHDD   ; Dip-Switch and Change Text
.1e07e2		20 71 08	jsr $1e0871	            JSR GODETECTEXP   ; Go Check if there is a Card Change Text
.1e07e5		a5 b0		lda $b0		            LDA MODEL
.1e07e7		29 03		and #$03	            AND #$03
.1e07e9		c9 00		cmp #$00	            CMP #$00
.1e07eb		f0 12		beq $1e07ff	            BEQ Erase_FATVicky_Line;
.1e07ed		c9 01		cmp #$01	            CMP #$01
.1e07ef		f0 29		beq $1e081a	            BEQ Erase_2Lines;
.1e07f1		c9 02		cmp #$02	            CMP #$02
.1e07f3		f0 25		beq $1e081a	            BEQ Erase_2Lines;
.1e07f5		60		rts		            RTS
.1e07f6						HighNibblerBCD:
.1e07f6		29 f0		and #$f0	            AND #$F0
.1e07f8		4a		lsr a		            LSR A
.1e07f9		4a		lsr a		            LSR A
.1e07fa		4a		lsr a		            LSR A
.1e07fb		4a		lsr a		            LSR A
.1e07fc		69 30		adc #$30	            ADC #$30
.1e07fe		60		rts		            RTS
.1e07ff						Erase_FATVicky_Line:
.1e07ff		c2 20		rep #$20	                REP #$20        ; set A long
.1e0801		a9 a2 0a	lda #$0aa2	            LDA #<>LINE8
.1e0804		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0806		a9 1e 00	lda #$001e	            LDA #`LINE8
.1e0809		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e080b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e080d		a0 00 00	ldy #$0000	            LDY #$0000
.1e0810		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e0812		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0814		c8		iny		            INY
.1e0815		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e0817		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0819		60		rts		            RTS
.1e081a						Erase_2Lines
.1e081a		c2 20		rep #$20	                REP #$20        ; set A long
.1e081c		a9 e4 0a	lda #$0ae4	            LDA #<>LINE9
.1e081f		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0821		a9 1e 00	lda #$001e	            LDA #`LINE9
.1e0824		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0826		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0828		a0 00 00	ldy #$0000	            LDY #$0000
.1e082b		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e082d		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e082f		c8		iny		            INY
.1e0830		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e0832		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0834		c2 20		rep #$20	                REP #$20        ; set A long
.1e0836		a9 26 0b	lda #$0b26	            LDA #<>LINE10
.1e0839		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e083b		a9 1e 00	lda #$001e	            LDA #`LINE10
.1e083e		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0840		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0842		a0 00 00	ldy #$0000	            LDY #$0000
.1e0845		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e0847		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0849		c8		iny		            INY
.1e084a		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e084c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e084e		60		rts		            RTS
.1e084f						GODETECTHIRES
.1e084f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0851		af 02 00 af	lda $af0002	            LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.1e0855		29 10		and #$10	            AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.1e0857		c9 10		cmp #$10	            CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.1e0859		f0 14		beq $1e086f	            BEQ WeAreDone
.1e085b		c2 10		rep #$10	                REP #$10        ; set X long
.1e085d		a2 00 00	ldx #$0000	            LDX #$0000
.1e0860						ChangeNextChar
.1e0860		bf 5f 0d 1e	lda $1e0d5f,x	            LDA @l ON_TEXT, X
.1e0864		c9 00		cmp #$00	            CMP #$00
.1e0866		f0 07		beq $1e086f	            BEQ WeAreDone
.1e0868		9f 53 0c 1e	sta $1e0c53,x	            STA @l LINE17 +13, X
.1e086c		e8		inx		            INX
.1e086d		d0 f1		bne $1e0860	            BNE ChangeNextChar
.1e086f						WeAreDone
.1e086f						NoExpansionCardPresent
.1e086f		60		rts		            RTS
.1e0870						GODETECTHDD
.1e0870		60		rts		            RTS
.1e0871						GODETECTEXP
.1e0871		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0873		af 87 e8 af	lda $afe887	            LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.1e0877		29 10		and #$10	            AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.1e0879		c9 10		cmp #$10	            CMP #GABE_SYS_STAT_EXP
.1e087b		d0 25		bne $1e08a2	            BNE NoExpansionCardPresent
.1e087d		c2 10		rep #$10	                REP #$10        ; set X long
.1e087f		a2 00 00	ldx #$0000	            LDX #$0000
.1e0882						ChangeNextChar
.1e0882		bf 63 0d 1e	lda $1e0d63,x	            LDA @l YES_TEXT, X
.1e0886		c9 00		cmp #$00	            CMP #$00
.1e0888		f0 07		beq $1e0891	            BEQ WeAreDone
.1e088a		9f 85 0c 1e	sta $1e0c85,x	            STA @l LINE19 +26, X
.1e088e		e8		inx		            INX
.1e088f		d0 f1		bne $1e0882	            BNE ChangeNextChar
.1e0891						WeAreDone
.1e0891		a2 00 00	ldx #$0000	            LDX #$0000
.1e0894						AddCardName
.1e0894		bf 00 00 ae	lda $ae0000,x	            LDA @l EVID_ID_NAME_ASCII, X
.1e0898		9f 89 0c 1e	sta $1e0c89,x	            STA @l LINE20, X
.1e089c		e8		inx		            INX
.1e089d		e0 10 00	cpx #$0010	            CPX #$10
.1e08a0		d0 f2		bne $1e0894	            BNE AddCardName
.1e08a2						NoExpansionCardPresent
.1e08a2		60		rts		            RTS
.1e08a3						Line_Setup_Before_Display
.1e08a3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08a5		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08a7		c9 17 00	cmp #$0017	            CMP #NumberOfEntry
.1e08aa		f0 33		beq $1e08df	            BEQ DONE
.1e08ac		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08ae		0a		asl a		            ASL A
.1e08af		0a		asl a		            ASL A
.1e08b0		aa		tax		            TAX
.1e08b1		bf 24 09 1e	lda $1e0924,x	            LDA TEXT_TABLE, X
.1e08b5		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e08b7		bf 26 09 1e	lda $1e0926,x	            LDA TEXT_TABLE + 2, X
.1e08bb		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e08bd		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08bf		0a		asl a		            ASL A
.1e08c0		aa		tax		            TAX
.1e08c1		bf 80 09 1e	lda $1e0980,x	            LDA TEXT_POSX, X
.1e08c5		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e08c7		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e08cb		bf ae 09 1e	lda $1e09ae,x	            LDA TEXT_POSY, X
.1e08cf		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e08d1		8f 16 00 af	sta $af0016	            STA @l VKY_TXT_CURSOR_Y_REG_L
.1e08d5		20 fc 08	jsr $1e08fc	            JSR Line_Display_Compute_Pointer
.1e08d8		a9 00 00	lda #$0000	            LDA #$0000
.1e08db		85 a0		sta $a0		            STA TEXT_INDEX
.1e08dd		e6 a6		inc $a6		            INC LINE_INDEX
.1e08df						DONE:
.1e08df		60		rts		            RTS
.1e08e0						Line_Display_1_Character
.1e08e0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08e2		e6 a2		inc $a2		            INC TEXT_CURSOR_X       ; Always put the Cursor In Front of the "To be displayed Char"
.1e08e4		a5 a2		lda $a2		            LDA TEXT_CURSOR_X
.1e08e6		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e08ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1e08ec		38		sec		            SEC
.1e08ed		a4 a0		ldy $a0		            LDY TEXT_INDEX
.1e08ef		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e08f1		c9 00		cmp #$00	            CMP #$00
.1e08f3		f0 06		beq $1e08fb	            BEQ WE_ARE_DONE;
.1e08f5		18		clc		            CLC
.1e08f6		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e08f8		c8		iny		            INY
.1e08f9		84 a0		sty $a0		            STY TEXT_INDEX
.1e08fb						WE_ARE_DONE:
.1e08fb		60		rts		            RTS
.1e08fc						Line_Display_Compute_Pointer
.1e08fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08fe		a5 a4		lda $a4		            LDA TEXT_CURSOR_Y
.1e0900		8f 00 01 00	sta $000100	            STA @lUNSIGNED_MULT_A_LO
.1e0904		a9 50 00	lda #$0050	            LDA #80
.1e0907		8f 02 01 00	sta $000102	            STA @lUNSIGNED_MULT_B_LO
.1e090b		18		clc		            CLC
.1e090c		af 04 01 00	lda $000104	            LDA @lUNSIGNED_MULT_AL_LO
.1e0910		65 a2		adc $a2		            ADC TEXT_CURSOR_X
.1e0912		69 00 a0	adc #$a000	            ADC #$A000
.1e0915		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0917		69 00 20	adc #$2000	            ADC #$2000
.1e091a		85 a8		sta $a8		            STA COLOR_DST_PTR_L
.1e091c		a9 af 00	lda #$00af	            LDA #$00AF
.1e091f		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0921		85 aa		sta $aa		            STA COLOR_DST_PTR_H
.1e0923		60		rts		            RTS
>1e0924		dc 09 1e 00 fd 09 1e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>1e092c		13 0a 1e 00 21 0a 1e 00 39 0a 1e 00 5c 0a 1e 00
>1e093c		80 0a 1e 00 95 0a 1e 00
>1e0944		a2 0a 1e 00 e4 0a 1e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>1e094c		26 0b 1e 00 68 0b 1e 00 72 0b 1e 00 9b 0b 1e 00
>1e095c		d2 0b 1e 00 f5 0b 1e 00
>1e0964		07 0c 1e 00 46 0c 1e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>1e096c		58 0c 1e 00 6b 0c 1e 00 89 0c 1e 00 9a 0c 1e 00
>1e097c		ad 0c 1e 00
>1e0980		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>1e0988		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>1e0998		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>1e09a8		2d 00 1e 00 48 00
>1e09ae		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>1e09b6		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>1e09c6		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>1e09d6		35 00 39 00 39 00
=6						leftAlign = 6
>1e09dc		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>1e09e4		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>1e09f4		20 20 20 20 20 20 20 20 00
>1e09fd		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>1e0a05		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>1e0a13		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>1e0a1b		4e 46 4f 3a 20 00
>1e0a21		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>1e0a29		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>1e0a39		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>1e0a41		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>1e0a51		20 20 20 20 20 20 20 20 20 20 00
>1e0a5c		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>1e0a64		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>1e0a74		20 20 20 20 20 20 20 20 20 20 20 00
>1e0a80		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>1e0a88		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>1e0a95		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>1e0a9d		53 29 3a 20 00
>1e0aa2		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>1e0aaa		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>1e0aba		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>1e0aca		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>1e0ada		30 30 2f 30 30 2f 30 30 20 00
>1e0ae4		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533  - GABE     - REV:0000 SUBREV:0000 DATE:00/00/00     ", $00
>1e0aec		35 33 33 20 20 2d 20 47 41 42 45 20 20 20 20 20
>1e0afc		2d 20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45
>1e0b0c		56 3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30
>1e0b1c		30 2f 30 30 20 20 20 20 20 00
>1e0b26		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551  - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00     ", $00
>1e0b2e		35 35 31 20 20 2d 20 56 49 43 4b 59 20 49 49 20
>1e0b3e		2d 20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45
>1e0b4e		56 3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30
>1e0b5e		30 2f 30 30 20 20 20 20 20 00
>1e0b68		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>1e0b70		20 00
>1e0b72		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>1e0b7a		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>1e0b8a		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>1e0b9a		00
>1e0b9b		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>1e0ba3		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>1e0bb3		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>1e0bc3		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>1e0bd2		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>1e0bda		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>1e0bea		4c 20 54 52 45 4d 42 4c 41 59 00
>1e0bf5		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>1e0bfd		20 4d 45 4e 55 2d 2d 2d 2d 00
>1e0c07		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>1e0c0f		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>1e0c1f		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>1e0c2f		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>1e0c3f		46 41 55 4c 54 20 00
>1e0c46		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>1e0c4e		4f 44 45 3a 20 4f 46 46 20 00
>1e0c58		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>1e0c60		41 4c 4c 45 44 3a 20 2d 2d 20 00
>1e0c6b		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>1e0c73		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>1e0c83		3a 20 4e 4f 20 00
>1e0c89		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1e0c91		00 00 00 00 00 00 00 00 00
>1e0c9a		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>1e0ca2		46 4f 45 4e 49 58 2e 43 4f 4d 00
>1e0cad		20 00				LINE22 .text " ", $00
>1e0caf		bf 0c 1e 00 cf 0c 1e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>1e0cb7		df 0c 1e 00 ef 0c 1e 00
>1e0cbf		0f 0d 1e 00 4f 0d 1e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>1e0cc7		4f 0d 1e 00 00 00 00 00
>1e0ccf		1f 0d 1e 00 4f 0d 1e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>1e0cd7		3f 0d 1e 00 00 00 00 00
>1e0cdf		2f 0d 1e 00 3f 0d 1e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>1e0ce7		3f 0d 1e 00 00 00 00 00
>1e0cef		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>1e0cf7		00 00 00 00 00 00 00 00
>1e0cff		ec 09 1e 00 4b 0a 1e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>1e0d07		6f 0a 1e 00 8e 0a 1e 00
>1e0d0f		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>1e0d17		4e 49 58 20 46 4d 58 00
>1e0d1f		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>1e0d27		4e 49 58 20 55 2b 20 00
>1e0d2f		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>1e0d37		4e 49 58 20 55 20 20 00
>1e0d3f		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>1e0d47		32 20 42 59 54 45 53 00
>1e0d4f		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>1e0d57		34 20 42 59 54 45 53 00
>1e0d5f		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>1e0d63		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src\kernel.asm

>1e0d67						.align 256
.1e0e00						SS_MONIKER_LUT
>1e0e00		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>1e0e08		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>1e0e18		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>1e0e28		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>1e0e38		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>1e0e48		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>1e0e58		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>1e0e68		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>1e0e78		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>1e0e88		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>1e0e98		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>1e0ea8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>1e0eb8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>1e0ec8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>1e0ed8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>1e0ee8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>1e0ef8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>1e0f08		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>1e0f18		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>1e0f28		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>1e0f38		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>1e0f48		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>1e0f58		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>1e0f68		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>1e0f78		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>1e0f88		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>1e0f98		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>1e0fa8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>1e0fb8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>1e0fc8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>1e0fd8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>1e0fe8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>1e0ff8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>1e1008		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>1e1018		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>1e1028		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>1e1038		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>1e1048		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>1e1058		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>1e1068		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>1e1078		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>1e1088		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>1e1098		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>1e10a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>1e10b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>1e10c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>1e10d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>1e10e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>1e10f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>1e1108		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>1e1118		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>1e1128		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>1e1138		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>1e1148		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>1e1158		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>1e1168		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>1e1178		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>1e1188		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>1e1198		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>1e11a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>1e11b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>1e11c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>1e11d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>1e11e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>1e11f8		ff ff ff 00 e5 80 80 00
.1e1200						SS_MONIKER
>1e1200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>1e1208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>1e1808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e1818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e1828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e1958		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e1968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1a98		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>1e1aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1bd8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1d08		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1d18		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>1e1d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1e48		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1e58		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1f88		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e1f98		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e20c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e20d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e20e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2128		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>1e2138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2208		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>1e2218		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e2228		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2268		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e2278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2348		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e2358		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e23a8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e23b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2488		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2498		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e24a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e24e8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e24f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e25c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e25d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e25e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2628		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>1e2638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2668		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>1e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e2708		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2718		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2738		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2768		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>1e2778		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e2788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2798		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>1e27a8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e27b8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e27c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e27d8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>1e27e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e2848		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2868		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e28a8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>1e28b8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>1e28c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e28d8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>1e28e8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>1e28f8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2918		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>1e2928		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e2938		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e2948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2958		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>1e2968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2978		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>1e2988		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>1e29b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>1e29e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>1e29f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1e2a08		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>1e2a18		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>1e2a28		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>1e2a38		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e2a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2a58		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>1e2a68		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>1e2a78		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>1e2a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2a98		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>1e2aa8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>1e2ac8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>1e2ad8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>1e2ae8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>1e2af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b18		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2b28		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>1e2b38		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e2b48		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2b58		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e2b68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2b78		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2b98		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ba8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>1e2bb8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>1e2bc8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>1e2bd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2be8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>1e2bf8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2c08		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c18		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>1e2c28		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>1e2c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c58		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2c68		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c78		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2c88		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2c98		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>1e2ca8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e2cb8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2cc8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>1e2cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ce8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>1e2cf8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e2d08		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>1e2d18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2d28		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>1e2d38		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2d48		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2d58		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>1e2d68		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>1e2d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2d98		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2da8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2db8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2dc8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e2dd8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e2de8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e2df8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2e08		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e28		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>1e2e38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e48		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e68		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2e78		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>1e2e88		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2e98		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2ea8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>1e2eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1e2ed8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ee8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2ef8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e2f08		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f18		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>1e2f28		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f38		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2f48		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>1e2f88		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f98		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2fa8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2fb8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>1e2fc8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2fd8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2fe8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>1e2ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3008		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>1e3018		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3028		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e3038		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e3048		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3058		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>1e3068		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>1e3078		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3088		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e3098		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e30a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>1e30b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>1e30c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e30d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>1e30e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>1e30f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e3108		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>1e3118		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>1e3128		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>1e3138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3148		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e3158		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e3168		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3178		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3198		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e31a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e31b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e31c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e31d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>1e31e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>1e31f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>1e3208		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e3218		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>1e3228		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3238		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3248		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3258		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>1e3268		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3288		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3298		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e32a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e32b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>1e32d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e32e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3308		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>1e3318		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>1e3328		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3338		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>1e3348		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3358		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e3368		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3378		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3388		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>1e3398		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>1e33a8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e33b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e33c8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e33d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e33e8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>1e33f8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3408		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>1e3418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3428		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3448		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>1e3458		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>1e3468		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>1e3478		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>1e3488		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3498		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e34a8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e34b8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e34c8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e34d8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>1e34e8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e34f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3508		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3518		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>1e3528		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>1e3538		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3548		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e3558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e3568		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3588		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e3598		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e35a8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e35b8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e35c8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e35d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e35e8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e35f8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>1e3608		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e3618		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>1e3628		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3648		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3658		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>1e3668		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>1e3678		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3688		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>1e3698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e36a8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e36b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e36c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e36d8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e36e8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e36f8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3708		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3728		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3738		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e3748		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3758		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3768		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e3778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3788		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3798		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>1e37a8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>1e37b8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e37c8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e37d8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e37e8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>1e37f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3808		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e3818		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e3828		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3838		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3848		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3858		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e3868		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3878		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3888		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3898		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e38a8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e38b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e38c8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e38d8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>1e38e8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>1e38f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3908		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3918		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3928		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>1e3938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3948		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3958		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>1e3968		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>1e3978		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3988		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3998		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e39a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e39b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>1e39c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e39d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e39e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>1e39f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a08		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3a18		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e3a28		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3a38		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>1e3a48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a58		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>1e3a68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a78		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a88		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3a98		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>1e3aa8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3ab8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3ac8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3ad8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>1e3ae8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3af8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3b08		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e3b18		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3b28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e3b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e3b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b68		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3b78		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>1e3b88		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3b98		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>1e3ba8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3bb8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3bc8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>1e3bd8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>1e3be8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3bf8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3c08		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3c18		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3c28		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e3c38		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>1e3c48		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3c58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3c68		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e3c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3c88		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>1e3c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ca8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e3cb8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3cc8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cd8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3ce8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cf8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3d08		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>1e3d18		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>1e3d28		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d38		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3d48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3d58		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>1e3d68		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3d78		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>1e3d88		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d98		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3da8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3dc8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>1e3dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3de8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3df8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3e08		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>1e3e18		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3e28		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e38		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e3e48		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e58		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>1e3e68		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3e78		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3e88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e98		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e3ea8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3eb8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3ec8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3ed8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3ee8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f08		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f28		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3f38		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e3f48		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>1e3f58		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>1e3f68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f78		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e3f88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f98		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>1e3fa8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3fd8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>1e3fe8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>1e3ff8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e4008		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e4018		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e4028		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4048		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4068		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e4078		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4088		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e4098		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e40a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>1e40b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>1e40c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e40d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e40e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e40f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>1e4108		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>1e4118		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4128		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>1e4138		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4148		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4158		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4188		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>1e41b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>1e41e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4208		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4218		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4228		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4238		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>1e4248		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1e4258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4268		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>1e4278		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>1e4288		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4298		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e42a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e42d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1e42f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4308		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e4318		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4328		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e4338		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4348		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e4358		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4368		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4378		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>1e4388		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e43a8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e43b8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e43c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e43d8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e43e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e43f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4408		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4428		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4448		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e4458		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e4478		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4488		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1e4498		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e44a8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e44b8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e44c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e44d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e44e8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e44f8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e4508		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1e4518		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4528		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4548		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4558		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4568		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1e4578		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>1e4588		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>1e4598		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e45a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e45b8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e45c8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e45d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e45e8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e45f8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e4608		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4618		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4628		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4638		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>1e4648		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4658		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4668		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4688		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4698		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>1e46a8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e46b8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>1e46c8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e46d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e46e8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e46f8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4708		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e4718		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4728		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>1e4738		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>1e4748		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1e4758		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>1e4768		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4778		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4788		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>1e4798		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e47a8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e47b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e47c8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e47d8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>1e47e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e47f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1e4808		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4818		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4828		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4848		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4868		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>1e4878		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>1e4888		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>1e4898		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>1e48a8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e48b8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>1e48c8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e48d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1e48e8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e48f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4908		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4918		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4928		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4938		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4948		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4958		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4968		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>1e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4988		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e49a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>1e49b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>1e49c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>1e49d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>1e49e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e49f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4a08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>1e4a18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>1e4a28		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4a48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4a58		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>1e4a88		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a98		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4aa8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ac8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4ae8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4af8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1e4b08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b28		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4b38		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4b48		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4b58		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>1e4b68		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4b88		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4b98		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ba8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>1e4bd8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4be8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4c08		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4c28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c38		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>1e4c48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c68		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4c88		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e4c98		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4ca8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4cc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>1e4cd8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ce8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4cf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4d18		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d48		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d68		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d78		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>1e4d88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d98		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>1e4da8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4db8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4dc8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4dd8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4de8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>1e4df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4e08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>1e4e18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>1e4e28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e38		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>1e4e58		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>1e4e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4e88		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ea8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4eb8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ec8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ed8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4ee8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ef8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e4f08		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4f18		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4f28		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4f38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f58		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>1e4f68		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f78		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>1e4f98		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>1e4fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fc8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e4fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fe8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4ff8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5018		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>1e5028		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5038		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>1e5048		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e5058		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5068		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e5078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5088		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5098		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>1e50a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>1e50b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e50c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>1e50d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e50e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>1e50f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5108		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5128		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5138		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5148		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>1e5158		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>1e5168		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>1e5178		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>1e5188		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>1e5198		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e51a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e51d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>1e51e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>1e51f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5208		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5218		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>1e5228		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e5238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5248		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5268		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>1e5278		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5288		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>1e5298		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>1e52a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e52b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>1e52c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>1e52d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e52e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e52f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5308		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5318		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>1e5328		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>1e5338		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>1e5348		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5358		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>1e5368		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5388		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>1e5398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53a8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e53b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e53c8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e53d8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>1e53e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53f8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>1e5408		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>1e5418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e5428		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5448		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5458		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5468		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e5478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>1e54a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54c8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>1e54d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e5508		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5518		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>1e5528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5538		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e5548		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>1e5558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e5568		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5588		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>1e5598		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55a8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e5608		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>1e5618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5658		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>1e5668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5678		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e5688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56a8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56c8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>1e56d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>1e5748		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5798		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e57a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e57c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57e8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e5888		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>1e5898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e58d8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>1e58e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5928		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e59c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e59d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5a18		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>1e5a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>1e5b08		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>1e5c48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>1e61f8		00 00 00 00 00 00 00 00
.1e6200						SS_FMX_TXT
>1e6200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>1e6208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>1e64b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e64c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6558		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e65f8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6698		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e66a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e66f8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e6708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6738		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e6748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e6798		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e67a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e67d8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e67e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6838		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6878		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e6888		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e68c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e68d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e68e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6918		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>1e6928		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6968		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>1e6978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e69b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e69c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6a08		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>1e6a18		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a48		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a58		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6a68		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6aa8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>1e6ab8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ae8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6af8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6b08		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b28		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b48		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>1e6b58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b88		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b98		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>1e6ba8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6bc8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6be8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>1e6bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e6c28		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>1e6c38		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>1e6c48		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>1e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>1e6c68		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>1e6c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c88		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>1e6c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6cb8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>1e6cc8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>1e6cd8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>1e6ce8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e6d08		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>1e6d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d28		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>1e6d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d58		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>1e6d68		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6d78		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6d88		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6d98		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>1e6da8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>1e6db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6dc8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>1e6dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6de8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e6df8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e08		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e18		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6e28		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6e38		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>1e6e48		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>1e6e58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e68		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e88		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>1e6e98		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ea8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6eb8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>1e6ec8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6ed8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e6ee8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6ef8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6f08		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6f28		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>1e6f38		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f48		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f58		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>1e6f68		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6f78		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e6f88		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6f98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e6fa8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>1e6fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6fc8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>1e6fd8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6fe8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ff8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>1e7008		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e7018		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7028		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e7038		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e7048		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>1e7058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7068		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>1e7078		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7088		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7098		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>1e70a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e70b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>1e70c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e70d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>1e70e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>1e70f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7108		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>1e7118		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7128		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>1e7138		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>1e7148		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7158		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>1e7168		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e7178		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>1e7188		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>1e7198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e71a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>1e71b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e71c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>1e71d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e71e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e71f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>1e7208		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7218		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e7228		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7248		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7258		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e7268		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>1e7278		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7288		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7298		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e72a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>1e72b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e72c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e72d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7308		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e7318		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7328		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7338		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7348		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7358		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7368		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e7378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7388		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7398		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e73a8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e73b8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73c8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e73d8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e73e8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73f8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e7408		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>1e7418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7438		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7448		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7458		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7468		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>1e7478		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7488		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7498		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e74a8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e74b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e74e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74f8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7508		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>1e7518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7528		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7548		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e7558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7578		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>1e7588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7598		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e75a8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>1e75b8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75c8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e75d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75e8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e75f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7618		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e7628		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7638		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7648		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>1e7658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7668		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7678		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7688		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76b8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e76c8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>1e76d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e76e8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e76f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7708		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e7718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7758		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7768		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7778		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e7788		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7798		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e77a8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e77b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e77c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e77f8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7808		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7818		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7828		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7838		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7848		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7858		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7888		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>1e7898		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e78b8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e78c8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e78e8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e78f8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7928		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>1e7938		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7948		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>1e7958		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7968		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7978		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7988		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7998		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e79a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e79d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e79e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e79f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7a08		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a18		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7a28		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e7a38		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e7a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7a68		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a78		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a88		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>1e7a98		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7aa8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7ab8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7ac8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>1e7ad8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7af8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7b08		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b18		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b28		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7b38		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7b48		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7b58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7b68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e7b78		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ba8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>1e7bb8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>1e7bc8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7bd8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7be8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7bf8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7c08		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e7c18		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c48		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e7c58		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7c78		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c88		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>1e7c98		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7ca8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e7cb8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e7cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ce8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>1e7cf8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7d18		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d28		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>1e7d38		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e7d58		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d88		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>1e7d98		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7db8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7dc8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>1e7dd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7de8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7df8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e28		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>1e7e38		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7e58		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e68		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>1e7e78		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e88		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7e98		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ec8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7ed8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7ef8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7f08		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>1e7f18		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7f28		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7f38		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f68		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7f78		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7f88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7f98		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7fb8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7fd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8008		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8018		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e8038		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e8048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8058		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>1e8068		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e8078		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e8088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e80a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e80b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>1e8108		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>1e8118		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e8128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8148		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8158		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8168		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8178		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8188		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8198		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e81a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>1e81b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e81c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e81f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8208		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8218		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8228		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8238		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e8248		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8258		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8288		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8298		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e82e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e82f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e8308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8328		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8338		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8348		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8358		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8368		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8378		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>1e8388		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e8398		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e83a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83c8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e83d8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e83e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e83f8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>1e8408		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8418		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e8428		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e8438		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e8448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8478		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8488		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8498		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e84a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e84b8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e84c8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e84d8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e84e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e84f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8508		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e8518		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8528		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8538		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8548		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8558		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e8568		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8578		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e8588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85a8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e85b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85c8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e85d8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85e8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e85f8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>1e8608		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8618		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>1e8628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8648		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8658		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8668		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>1e8678		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8688		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e8698		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>1e86a8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e86b8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e86c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86e8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e86f8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8708		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>1e8718		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8728		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8738		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>1e8748		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8758		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8788		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8798		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87a8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87c8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e87d8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>1e87e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87f8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>1e8808		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8828		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8848		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e8858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8868		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8878		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>1e8888		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8898		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>1e88a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88c8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>1e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e88f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8908		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8918		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>1e8928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8938		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>1e8948		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8968		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>1e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e89a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e89b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>1e89e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a08		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>1e8a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8a48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a78		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>1e8a88		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8aa8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>1e8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8ae8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>1e8af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b18		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>1e8b28		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b48		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>1e8b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8b88		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e8b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bb8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>1e8bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8be8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>1e8bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8c28		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>1e8c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c58		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>1e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c88		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>1e8c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8cc8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8cf8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>1e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d28		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>1e8d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8d68		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d98		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1e8da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8dc8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8e08		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e8e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e38		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>1e8e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8ea8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>1e8eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ed8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e8ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8f48		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>1e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f78		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>1e8f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8fe8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>1e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e9028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e9088		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>1e9098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e90c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9128		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e9138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e91c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e91d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e9268		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>1e93f8		00 00 00 00 00 00 00 00
.1e9400						SS_UPlus_TXT
>1e9400		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>1e9408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>1e94f8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9558		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e95b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e95c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9618		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9668		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>1e9678		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e96c8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>1e96d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9728		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>1e9738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9788		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>1e9798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e97e8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>1e97f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9848		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>1e9858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e98a8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>1e98b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e98e8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>1e98f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9908		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e9948		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>1e9958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9968		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e99a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>1e99b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e99d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>1e99e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a08		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>1e9a18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a28		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e9a38		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a68		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9a78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9a88		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9a98		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>1e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ac8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9ad8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9ae8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9af8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>1e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9b48		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9b58		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e9b68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b88		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9ba8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9bb8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e9bc8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9be8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e9bf8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c08		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c18		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c28		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c48		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1e9c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c68		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c78		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ca8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9cb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9cc8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9cd8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e9ce8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d08		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9d18		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9d28		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9d38		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e9d48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d68		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9d78		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9d88		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e9d98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9da8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9dc8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9dd8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9de8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e9df8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e28		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e38		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e9e48		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e9e58		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>1e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e88		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e98		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e9ea8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9eb8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>1e9ec8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>1e9ed8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ee8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9ef8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f08		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9f18		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e9f28		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>1e9f38		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9f48		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9f58		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e9f78		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e9f88		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>1e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fa8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e9fc8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fd8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e9fe8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea008		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1ea018		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1ea028		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>1ea038		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea048		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>1ea058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea068		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea078		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1ea088		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>1ea098		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea0a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>1ea0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea0c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea0d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1ea0e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>1ea0f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea108		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1ea118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea128		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea138		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1ea148		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea158		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea168		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea188		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea198		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1ea1a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>1ea1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea1e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea1f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea208		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea218		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea228		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>1ea238		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea248		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea258		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea268		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea278		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>1ea288		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea298		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea2a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea2b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea2c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea2d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>1ea2e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea308		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea318		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1ea328		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>1ea338		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1ea348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea368		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea378		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea388		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>1ea398		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea3a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea3b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1ea3c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1ea3d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea3e8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea3f8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea418		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea428		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>1ea438		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea458		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea478		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea488		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1ea498		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea4a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea4b8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea4c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea4d8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea4e8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>1ea4f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1ea508		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea518		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea538		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea548		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>1ea558		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1ea568		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea578		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea598		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea5a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1ea5b8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1ea5c8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1ea5d8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea608		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea618		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1ea628		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea638		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea658		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea668		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea678		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1ea688		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea698		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea6c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea6d8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>1ea6e8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>1ea6f8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea718		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea728		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea738		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>1ea748		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea758		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea778		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea788		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea798		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1ea7a8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea7b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea7e8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea7f8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1ea808		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea858		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea868		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1ea878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1ea8a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea8b8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8c8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>1ea8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea918		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea928		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea968		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>1ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea988		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea9c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>1ea9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea9e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaa28		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>1eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>1eabf8		00 00 00 00 00 00 00 00
.1eac00						SS_U_TXT
>1eac00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>1eac08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>1eacb8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eacc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eacf8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ead38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1ead78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eada8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>1eadb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eade8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>1eadf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae28		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>1eae38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae68		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>1eae78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaea8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>1eaeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaee8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>1eaef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaf28		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>1eaf38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf48		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>1eaf58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf68		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eaf78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf88		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>1eaf98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafa8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eafb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafc8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>1eafd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafe8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eaff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb008		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>1eb018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb028		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eb038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb048		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb068		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb088		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb0a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb0c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb0e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb108		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb128		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb148		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1eb158		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb168		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>1eb198		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb1a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb1c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb1d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb1e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb208		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb218		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb228		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb248		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb258		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb268		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1eb278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb288		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb298		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb2a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1eb2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb2c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb2d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1eb2e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1eb2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb308		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb318		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1eb328		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb348		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb358		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb368		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb388		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb398		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb3a8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb3c8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb3d8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb3e8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb408		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1eb418		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb428		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb448		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb458		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1eb468		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb488		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb498		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1eb4a8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb4c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb4d8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1eb4e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb508		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb518		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1eb528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb538		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb548		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb558		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb578		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb588		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb598		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb5c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb5d8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb608		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1eb618		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1eb628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb638		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb648		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1eb658		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb678		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1eb688		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>1eb698		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb6c8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1eb6d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb6e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb708		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>1eb718		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb738		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb748		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>1eb758		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1eb768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb778		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb788		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>1eb798		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1eb7a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb7c8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>1eb7d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1eb7e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb808		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb818		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1eb828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb838		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb848		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb858		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1eb868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb878		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb888		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb898		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>1eb8a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8b8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb8c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb8d8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1eb8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8f8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb918		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb938		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb948		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb958		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb978		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb988		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb998		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1eb9c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb9d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1eba08		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1eba18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eba48		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>1eba58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eba88		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>1eba98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ebac8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1ebad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1ebbf8		00 00 00 00 00 00 00 00
.1f0000						FONT_4_BANK0
>1f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>1f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>1f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>1f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>1f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>1f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>1f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>1f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>1f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>1f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>1f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>1f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>1f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>1f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>1f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>1f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>1f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>1f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>1f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>1f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>1f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>1f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>1f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>1f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>1f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>1f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>1f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>1f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>1f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>1f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>1f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>1f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>1f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>1f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>1f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>1f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>1f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>1f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>1f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>1f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>1f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>1f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>1f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>1f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>1f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>1f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>1f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>1f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>1f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>1f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>1f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>1f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>1f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>1f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>1f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>1f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>1f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>1f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>1f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>1f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>1f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>1f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>1f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>1f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>1f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>1f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>1f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>1f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>1f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>1f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>1f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>1f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>1f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>1f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>1f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>1f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>1f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>1f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>1f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>1f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>1f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>1f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>1f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>1f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>1f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>1f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>1f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>1f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>1f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>1f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>1f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>1f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>1f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>1f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>1f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>1f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>1f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>1f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>1f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>1f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>1f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>1f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>1f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>1f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>1f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>1f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>1f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>1f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>1f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>1f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>1f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>1f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>1f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>1f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>1f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>1f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>1f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>1f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>1f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>1f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>1f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>1f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>1f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>1f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>1f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>1f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>1f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>1f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>1f07f8		00 00 00 00 00 00 00 00
.1f0800						FONT_4_SPLASH
>1f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>1f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>1f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>1f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>1f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>1f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>1f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>1f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>1f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>1f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>1f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>1f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>1f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>1f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>1f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>1f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>1f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>1f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>1f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>1f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>1f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>1f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>1f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>1f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>1f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>1f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>1f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>1f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>1f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>1f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>1f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>1f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>1f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>1f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>1f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>1f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>1f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>1f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>1f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>1f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>1f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>1f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>1f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>1f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>1f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>1f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>1f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>1f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>1f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>1f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>1f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>1f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>1f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>1f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>1f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>1f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>1f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>1f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>1f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>1f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>1f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>1f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>1f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>1f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>1f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>1f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>1f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>1f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>1f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>1f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>1f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>1f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>1f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>1f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>1f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>1f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>1f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>1f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>1f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>1f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>1f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>1f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>1f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>1f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>1f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>1f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>1f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>1f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>1f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>1f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>1f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>1f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>1f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>1f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>1f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>1f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>1f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>1f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>1f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>1f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>1f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>1f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>1f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>1f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>1f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>1f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>1f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>1f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>1f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>1f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>1f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>1f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>1f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>1f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>1f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>1f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>1f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>1f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>1f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>1f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>1f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>1f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>1f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>1f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>1f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>1f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>1f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>1f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>1f0ff8		0f 0f 0f 0f f0 f0 f0 00
>1fffff		ff				                .byte $FF               ; Last byte of flash data

;******  End of listing
