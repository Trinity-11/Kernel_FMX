
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 -D TARGET_SYS=2 --long-address --flat -b -o kernel_U.bin --list kernel_U.lst --labels=kernel_U.lbl src\kernel.asm
; Sat May 08 19:34:13 2021

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=1						TARGET=1
=2						TARGET_SYS=2

;******  Processing input file: src\kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$180000					  START_OF_FLASH := $180000                   ; The Foenix U Flash starts at $180000
=$190400					  START_OF_KERNEL := $190400                  ; The kernel itself starts at $190400
=$1a0000					  START_OF_BASIC := $1A0000                   ; The BASIC flash code starts at $1A0000
=$1b0000					  START_OF_CREDITS := $1B0000                 ; The credits screen starts at $1B0000
=$1e0000					  START_OF_SPLASH := $1E0000                  ; SplashScreen Code and Data $3E0000
=$1f0000					  START_OF_FONT := $1F0000                    ; The font starts at $3F0000

;******  Processing file: src\Includes/macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1b						CHAR_ESC = $1B      ; ESC
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81						CHAR_F1 = $81       ; Function keys
=$82						CHAR_F2 = $82
=$83						CHAR_F3 = $83
=$84						CHAR_F4 = $84
=$85						CHAR_F5 = $85
=$86						CHAR_F6 = $86
=$87						CHAR_F7 = $87
=$88						CHAR_F8 = $88
=$89						CHAR_F9 = $89
=$8a						CHAR_F10 = $8A
=$8b						CHAR_F11 = $8B
=$8c						CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					COLORBEGIN       = $000022 ;3 Byte, address of the color screen
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000063					EVID_COLS_VISIBLE     = $000063 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000065					EVID_COLS_PER_LINE    = $000065 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000067					EVID_LINES_VISIBLE    = $000067 ;2 Bytes The number of rows visible on the screen. Default=25
=$000069					EVID_LINES_MAX        = $000069 ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006b					EVID_CURSORPOS        = $00006B ;3 Bytes The next character written to the screen will be written in this location.
=$00006e					EVID_CURSORX          = $00006E ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000070					EVID_CURSORY          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURCOLOR         = $000072 ;1 Byte Color of next character to be printed to the screen.
=$000073					EVID_COLORBEGIN       = $000073 ;
=$000076					EVID_COLORPOS         = $000076 ;3 Byte address of cursor's position in the color matrix
=$000079					EVID_TMPPTR1          = $000079 ; 4 byte temporary pointer
=$00007d					EVID_PRESENT          = $00007D ;1 Byte: is the EVID present?
=$000098					TEXT_SRC_PTR_L   = $000098
=$00009a					TEXT_SRC_PTR_H   = $00009A
=$00009c					TEXT_DST_PTR_L   = $00009C
=$00009e					TEXT_DST_PTR_H   = $00009E
=$0000a0					TEXT_INDEX       = $0000A0
=$0000a0					MOD_SELECT_L     = $0000A0
=$0000a2					MOD_SELECT_H     = $0000A2
=$0000a2					TEXT_CURSOR_X    = $0000A2
=$0000a4					TEXT_CURSOR_Y    = $0000A4
=$0000a6					LINE_INDEX       = $0000A6
=$0000a8					COLOR_DST_PTR_L  = $0000A8
=$0000aa					COLOR_DST_PTR_H  = $0000AA
=$0000b0					MODEL            = $0000B0
=$0000e0					MOUSE_PTR        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$0000f0					INTERRUPT_STATE  = $0000F0      ; 1 byte: current state of the boot menu color cycler
=$0000f1					INTERRUPT_COUNT  = $0000F1      ; 1 byte: counter for the boot menu color cycler
=$0000f2					IRQ_COLOR_CHOICE = $0000F2      ; 1 byte: index of the color to cycle in the boot menu
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000370					DOS_BLOCK_SIZE   = $000370      ; 4 bytes - the size of a block to load (in bytes)
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KBD_VARS = $000F00
=$000f00					KBD_STATE           = $000F00   ; 1 byte - The state of the keyboard controller state machine
=$000f01					KBD_SC_BUF          = $000F01   ; 16 bytes - Buffer for keyboard scancodes read
=$000f11					KBD_SC_HEAD         = $000F11   ; 1 byte - Index of the first scancode cell to write to
=$000f12					KBD_CHAR_BUF        = $000F12   ; 16 bytes - Character buffer
=$000f22					KBD_CHAR_HEAD       = $000F22   ; 1 byte - Number of characters in the character buffer
=$000f23					KBD_MODIFIERS       = $000F23   ; 1 byte - State of the modifier keys
=$000f24					KBD_LOCKS           = $000F24   ; 1 byte - State of the lock keys: Caps, Num, Scroll
=$000f25					KBD_TBL_UNMOD       = $000F25   ; 4 bytes - Pointer to the scan code translation table for unmodified keys
=$000f29					KBD_TBL_SHIFT       = $000F29   ; 4 bytes - Pointer to the scan code translation table for shifted keys
=$000f2d					KBD_TBL_CTRL        = $000F2D   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL
=$000f31					KBD_TBL_LOCK        = $000F31   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
=$000f35					KBD_TBL_LOCK_SHIFT  = $000F35   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
=$000f39					KBD_TBL_CTRL_SHIFT  = $000F39   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL and SHIFT
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$18ff00					        ISR_BEGIN        = $18FF00 ; Byte  Beginning of CPU vectors in Direct page
=$18ff00					        HRESET           = $18FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$18ff10					        HCOP             = $18FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$18ff20					        HBRK             = $18FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$18ff30					        HABORT           = $18FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$18ff40					        HNMI             = $18FF40 ;32 Bytes Handle NMI
=$18ff60					        HIRQ             = $18FF60 ;32 Bytes Handle IRQ
=$18ff80					        Unused_FF80      = $18FF80 ;End of direct page Interrrupt handlers
=$18ffe0					        VECTORS_BEGIN    = $18FFE0 ;0 Byte  Interrupt vectors
=$18ffe0					        JMP_READY        = $18FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$18ffe4					        VECTOR_COP       = $18FFE4 ;2 Bytes Native COP Interrupt vector
=$18ffe6					        VECTOR_BRK       = $18FFE6 ;2 Bytes Native BRK Interrupt vector
=$18ffe8					        VECTOR_ABORT     = $18FFE8 ;2 Bytes Native ABORT Interrupt vector
=$18ffea					        VECTOR_NMI       = $18FFEA ;2 Bytes Native NMI Interrupt vector
=$18ffec					        VECTOR_RESET     = $18FFEC ;2 Bytes Unused (Native RESET vector)
=$18ffee					        VECTOR_IRQ       = $18FFEE ;2 Bytes Native IRQ Vector
=$18fff0					        RETURN           = $18FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$18fff4					        VECTOR_ECOP      = $18FFF4 ;2 Bytes Emulation mode interrupt handler
=$18fff6					        VECTOR_EBRK      = $18FFF6 ;2 Bytes Emulation mode interrupt handler
=$18fff8					        VECTOR_EABORT    = $18FFF8 ;2 Bytes Emulation mode interrupt handler
=$18fffa					        VECTOR_ENMI      = $18FFFA ;2 Bytes Emulation mode interrupt handler
=$18fffc					        VECTOR_ERESET    = $18FFFC ;2 Bytes Emulation mode interrupt handler
=$18fffe					        VECTOR_EIRQ      = $18FFFE ;2 Bytes Emulation mode interrupt handler
=$200000					        VECTORS_END      = $200000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_data.asm

>180000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>180003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>180005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>180007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>180009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>18000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>18000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>180013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>180014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>180016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_code.asm

.18ff00		18		clc		RHRESET         CLC
.18ff01		fb		xce		                XCE
.18ff02		5c 00 10 00	jmp $001000	                JML BOOT
.18ff10						RHCOP
.18ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff12		8b		phb		                PHB
.18ff13		0b		phd		                PHD
.18ff14		48		pha		                PHA
.18ff15		da		phx		                PHX
.18ff16		5a		phy		                PHY
.18ff17		5c 08 10 00	jmp $001008	                JML BREAK
.18ff20						RHBRK
.18ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff22		8b		phb		                PHB
.18ff23		0b		phd		                PHD
.18ff24		48		pha		                PHA
.18ff25		da		phx		                PHX
.18ff26		5a		phy		                PHY
.18ff27		5c 08 10 00	jmp $001008	                JML BREAK
.18ff30						RHABORT
.18ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff32		8b		phb		                PHB
.18ff33		0b		phd		                PHD
.18ff34		48		pha		                PHA
.18ff35		da		phx		                PHX
.18ff36		5a		phy		                PHY
.18ff37		5c 08 10 00	jmp $001008	                JML BREAK
.18ff40						 RHNMI
.18ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff42		8b		phb		                PHB
.18ff43		0b		phd		                PHD
.18ff44		48		pha		                PHA
.18ff45		da		phx		                PHX
.18ff46		5a		phy		                PHY
.18ff47		22 96 19 18	jsl $181996	                JSL NMI_HANDLER
.18ff4b		7a		ply		                PLY
.18ff4c		fa		plx		                PLX
.18ff4d		68		pla		                PLA
.18ff4e		2b		pld		                PLD
.18ff4f		ab		plb		                PLB
.18ff50		40		rti		                RTI
.18ff60						RHIRQ
.18ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff62		8b		phb		                PHB
.18ff63		0b		phd		                PHD
.18ff64		48		pha		                PHA
.18ff65		da		phx		                PHX
.18ff66		5a		phy		                PHY
.18ff67		22 c0 17 18	jsl $1817c0	                JSL IRQ_HANDLER
.18ff6b		7a		ply		                PLY
.18ff6c		fa		plx		                PLX
.18ff6d		68		pla		                PLA
.18ff6e		2b		pld		                PLD
.18ff6f		ab		plb		                PLB
.18ff70		40		rti		                RTI
.18ffe0		5c 04 00 1a	jmp $1a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>18ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>18ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>18ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>18ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>18ffec		00 00				                .word $0000    ; FFEC
>18ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.18fff0		5c bb 06 19	jmp $1906bb	RRETURN         JML IRETURN
>18fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>18fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>18fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>18fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>18fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>18fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/fdc_inc.asm

=$af13f0					SIO_FDC  = $AF13F0
=$af13f0					SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1					SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2					SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3					SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4					SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4					SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5					SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7					SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7					SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/basic_inc.asm

=$1a0000					    BASIC = $1A0000
=1703940					    MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.181000	1000	5c 00 04 19	jmp $190400	BOOT            JML IBOOT
.181004	1004	5c c6 05 19	jmp $1905c6	RESTORE         JML IRESTORE
.181008	1008	5c 5a 06 19	jmp $19065a	BREAK           JML IBREAK
.18100c	100c	5c a1 06 19	jmp $1906a1	READY           JML IREADY
.181010	1010	5c 7b 11 19	jmp $19117b	SCINIT          JML ISCINIT
.181014	1014	5c 7c 11 19	jmp $19117c	IOINIT          JML IIOINIT
.181018	1018	5c 5d 07 19	jmp $19075d	PUTC            JML IPUTC
.18101c	101c	5c 46 07 19	jmp $190746	PUTS            JML IPUTS
.181020	1020	5c 01 08 19	jmp $190801	PUTB            JML IPUTB
.181024	1024	5c 60 3c 19	jmp $193c60	PUTBLOCK        JML IPUTBLOCK
.181028	1028	5c 00 7b 19	jmp $197b00	GETSCANCODE     JML KBD_GET_SCANCODE    ; Get the next 8-bit scan code from the keyboard: A = 0 if no scancode present, contains the scancode otherwise
.18102c	102c	5c b6 7b 19	jmp $197bb6	GETLOCKS        JML KBD_GETLOCKS        ; Get the state of the lock keys on the keyboard
.181030	1030	5c 7f 11 19	jmp $19117f	OPEN            JML IOPEN
.181034	1034	5c 80 11 19	jmp $191180	CLOSE           JML ICLOSE
.181038	1038	5c bc 06 19	jmp $1906bc	SETIN           JML ISETIN
.18103c	103c	5c c5 06 19	jmp $1906c5	SETOUT          JML ISETOUT
.181040	1040	5c 81 11 19	jmp $191181	GETB            JML IGETB
.181044	1044	5c fd 3b 19	jmp $193bfd	GETBLOCK        JML IGETBLOCK
.181048	1048	5c 0a 07 19	jmp $19070a	GETCH           JML IGETCH
.18104c	104c	5c d7 06 19	jmp $1906d7	GETCHW          JML IGETCHW
.181050	1050	5c ce 06 19	jmp $1906ce	GETCHE          JML IGETCHE
.181054	1054	5c 82 11 19	jmp $191182	GETS            JML IGETS
.181058	1058	5c 83 11 19	jmp $191183	GETLINE         JML IGETLINE
.18105c	105c	5c 84 11 19	jmp $191184	GETFIELD        JML IGETFIELD
.181060	1060	5c 85 11 19	jmp $191185	TRIM            JML ITRIM
.181064	1064	5c 86 11 19	jmp $191186	PRINTC          JML IPRINTC
.181068	1068	5c 87 11 19	jmp $191187	PRINTS          JML IPRINTS
.18106c	106c	5c 02 08 19	jmp $190802	PRINTCR         JML IPRINTCR
.181070	1070	5c 88 11 19	jmp $191188	PRINTF          JML IPRINTF
.181074	1074	5c 89 11 19	jmp $191189	PRINTI          JML IPRINTI
.181078	1078	5c b6 08 19	jmp $1908b6	PRINTH          JML IPRINTH
.18107c	107c	5c 8a 11 19	jmp $19118a	PRINTAI         JML IPRINTAI
.181080	1080	5c d3 08 19	jmp $1908d3	PRINTAH         JML IPRINTAH
.181084	1084	5c 9a 08 19	jmp $19089a	LOCATE          JML ILOCATE
.181088	1088	5c 8b 11 19	jmp $19118b	PUSHKEY         JML IPUSHKEY
.18108c	108c	5c 8c 11 19	jmp $19118c	PUSHKEYS        JML IPUSHKEYS
.181090	1090	5c 62 08 19	jmp $190862	CSRRIGHT        JML ICSRRIGHT
.181094	1094	5c 71 08 19	jmp $190871	CSRLEFT         JML ICSRLEFT
.181098	1098	5c 80 08 19	jmp $190880	CSRUP           JML ICSRUP
.18109c	109c	5c 8f 08 19	jmp $19088f	CSRDOWN         JML ICSRDOWN
.1810a0	10a0	5c 51 08 19	jmp $190851	CSRHOME         JML ICSRHOME
.1810a4	10a4	5c a5 08 19	jmp $1908a5	SCROLLUP        JML ISCROLLUP
.1810a8	10a8	5c 21 09 19	jmp $190921	CLRSCREEN       JML ICLRSCREEN
.1810ac	10ac	5c cc 09 19	jmp $1909cc	INITCHLUT	    JML IINITCHLUT
.1810b0	10b0	5c 99 0c 19	jmp $190c99	INITSUPERIO	    JML IINITSUPERIO
.1810b4	10b4	5c 4c 78 19	jmp $19784c	INITKEYBOARD    JML IINITKEYBOARD
.1810b8	10b8	5c 00 83 19	jmp $198300	INITMOUSE       JML IINITMOUSE
.1810bc	10bc	5c 7a 0c 19	jmp $190c7a	INITCURSOR      JML IINITCURSOR
.1810c0	10c0	5c 42 0c 19	jmp $190c42	INITFONTSET     JML IINITFONTSET
.1810c4	10c4	5c d9 09 19	jmp $1909d9	INITGAMMATABLE  JML IINITGAMMATABLE
.1810c8	10c8	5c f9 09 19	jmp $1909f9	INITALLLUT      JML IINITALLLUT
.1810cc	10cc	5c bf 0a 19	jmp $190abf	INITVKYTXTMODE  JML IINITVKYTXTMODE
.1810d0	10d0	5c f0 0b 19	jmp $190bf0	INITVKYGRPMODE  JML IINITVKYGRPMODE
.1810d4	10d4	5c 41 0c 19	jmp $190c41	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810d8	10d8	5c 41 0c 19	jmp $190c41	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810dc	10dc	5c c9 0d 19	jmp $190dc9	INITCODEC       JML IINITCODEC
.1810e0	10e0	5c 58 0e 19	jmp $190e58	RESETCODEC      JML IRESETCODEC
.1810e4	10e4	5c c6 0e 19	jmp $190ec6	BMP_PARSER      JML IBMP_PARSER
.1810e8	10e8	5c 7b 0e 19	jmp $190e7b	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.1810ec	10ec	5c 09 32 19	jmp $193209	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.1810f0	10f0	5c e3 4e 19	jmp $194ee3	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.1810f4	10f4	5c 76 4f 19	jmp $194f76	F_CREATE        JML IF_CREATE       ; create a new file
.1810f8	10f8	5c b0 4f 19	jmp $194fb0	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.1810fc	10fc	5c 49 50 19	jmp $195049	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.181100	1100	5c e4 4f 19	jmp $194fe4	F_READ          JML IF_READ         ; read the next cluster from the file
.181104	1104	5c f3 50 19	jmp $1950f3	F_DELETE        JML IF_DELETE       ; delete a file / directory
.181108	1108	5c b5 50 19	jmp $1950b5	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.18110c	110c	5c ef 50 19	jmp $1950ef	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.181110	1110	5c 8c 51 19	jmp $19518c	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.181114	1114	5c b3 51 19	jmp $1951b3	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.181118	1118	5c b7 51 19	jmp $1951b7	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.18111c	111c	5c 12 55 19	jmp $195512	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.181120	1120	5c d3 3b 19	jmp $193bd3	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.181124	1124	5c ab 55 19	jmp $1955ab	F_RUN           JML IF_RUN          ; Load an run a binary file
.181128	1128	5c fe 3f 19	jmp $193ffe	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.18112c	112c	5c 3d 0b 19	jmp $190b3d	SETSIZES        JML ISETSIZES
.181130	1130	5c fa 56 19	jmp $1956fa	F_COPY          JML IF_COPY         ; Copy a file
.181134	1134	5c 44 56 19	jmp $195644	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.181138	1138	5c 98 56 19	jmp $195698	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.18113c	113c	5c 61 7b 19	jmp $197b61	TESTBREAK       JML KBD_TEST_BREAK  ; Check if BREAK was pressed recently by the user (C is set if true, clear if false)
.181140	1140	5c 9a 7d 19	jmp $197d9a	SETTABLE        JML KBD_SETTABLE    ; Set the keyboard scan code -> character translation tables (B:X points to the new tables)
.181144	1144	5c 28 0c 19	jmp $190c28	READVRAM        JML IREADVRAM       ; Read a byte from video RAM at B:X
=$001700					VEC_INT_START = *                           ; Label for the start of the IRQ vectors
.181700	1700	5c 75 66 19	jmp $196675	VEC_INT00_SOF   JML FDC_TIME_HANDLE         ; IRQ 0, 0 --- Start Of Frame interrupt
.181704	1704	5c 8f 11 19	jmp $19118f	VEC_INT01_SOL   JML IRQHANDLESTUB           ; IRQ 0, 1 --- Start Of Line interrupt
.181708	1708	5c 8f 11 19	jmp $19118f	VEC_INT02_TMR0  JML IRQHANDLESTUB           ; IRQ 0, 2 --- Timer 0 interrupt
.18170c	170c	5c 8f 11 19	jmp $19118f	VEC_INT03_TMR1  JML IRQHANDLESTUB           ; IRQ 0, 3 --- Timer 1 interrupt
.181710	1710	5c 8f 11 19	jmp $19118f	VEC_INT04_TMR2  JML IRQHANDLESTUB           ; IRQ 0, 4 --- Timer 2 interrupt
.181714	1714	5c 8f 11 19	jmp $19118f	VEC_INT05_RTC   JML IRQHANDLESTUB           ; IRQ 0, 5 --- Real Time Clock interrupt
.181718	1718	5c 8f 11 19	jmp $19118f	VEC_INT06_FDC   JML IRQHANDLESTUB           ; IRQ 0, 6 --- Floppy Drive Controller interrupt
.18171c	171c	5c ac 83 19	jmp $1983ac	VEC_INT07_MOUSE JML MOUSE_INTERRUPT         ; IRQ 0, 7 --- Mouse interrupt
.181720	1720	5c b4 79 19	jmp $1979b4	VEC_INT10_KBD   JML KBD_PROCESS_BYTE        ; IRQ 1, 0 --- Keyboard interrupt
.181724	1724	5c 8f 11 19	jmp $19118f	VEC_INT11_COL0  JML IRQHANDLESTUB           ; IRQ 1, 1 --- VICKY_II (INT2) Sprite Collision
.181728	1728	5c 8f 11 19	jmp $19118f	VEC_INT12_COL1  JML IRQHANDLESTUB           ; IRQ 1, 2 --- VICKY_II (INT3) Bitmap Collision
.18172c	172c	5c 8f 11 19	jmp $19118f	VEC_INT13_COM2  JML IRQHANDLESTUB           ; IRQ 1, 3 --- Serial port #2 interrupt
.181730	1730	5c 8f 11 19	jmp $19118f	VEC_INT14_COM1  JML IRQHANDLESTUB           ; IRQ 1, 4 --- Serial port #1 interrupt
.181734	1734	5c 8f 11 19	jmp $19118f	VEC_INT15_MIDI  JML IRQHANDLESTUB           ; IRQ 1, 5 --- MIDI controller interrupt
.181738	1738	5c 8f 11 19	jmp $19118f	VEC_INT16_LPT   JML IRQHANDLESTUB           ; IRQ 1, 6 --- Parallel port interrupt
.18173c	173c	5c 8f 11 19	jmp $19118f	VEC_INT17_SDC   JML IRQHANDLESTUB           ; IRQ 1, 7 --- SD Card Controller interrupt (CH376S???)
.181740	1740	5c 8f 11 19	jmp $19118f	VEC_INT20_OPL   JML IRQHANDLESTUB           ; IRQ 2, 0 --- OPL3
.181744	1744	5c 8f 11 19	jmp $19118f	VEC_INT21_GABE0 JML IRQHANDLESTUB           ; IRQ 2, 1 --- GABE (INT0) - TBD
.181748	1748	5c 8f 11 19	jmp $19118f	VEC_INT22_GABE1 JML IRQHANDLESTUB           ; IRQ 2, 2 --- GABE (INT1) - TBD
.18174c	174c	5c 8f 11 19	jmp $19118f	VEC_INT23_VDMA  JML IRQHANDLESTUB           ; IRQ 2, 3 --- VICKY_II (INT4) - VDMA Interrupt
.181750	1750	5c 8f 11 19	jmp $19118f	VEC_INT24_COL2  JML IRQHANDLESTUB           ; IRQ 2, 4 --- VICKY_II (INT5) Tile Collision
.181754	1754	5c 8f 11 19	jmp $19118f	VEC_INT25_GABE2 JML IRQHANDLESTUB           ; IRQ 2, 5 --- GABE (INT2) - TBD
.181758	1758	5c 8f 11 19	jmp $19118f	VEC_INT26_EXT   JML IRQHANDLESTUB           ; IRQ 2, 6 --- External Expansion
.18175c	175c	5c 8f 11 19	jmp $19118f	VEC_INT17_SDINS JML IRQHANDLESTUB           ; IRQ 2, 7 --- SDCARD Insertion
.181760	1760	5c 8f 11 19	jmp $19118f	VEC_INT30_OPN2  JML IRQHANDLESTUB           ; IRQ 3, 0 --- OPN2
.181764	1764	5c 8f 11 19	jmp $19118f	VEC_INT31_OPM   JML IRQHANDLESTUB           ; IRQ 3, 1 --- OPM
.181768	1768	5c 8f 11 19	jmp $19118f	VEC_INT32_IDE   JML IRQHANDLESTUB           ; IRQ 3, 2 --- HDD IDE Interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.18176c						ISETHANDLER
.18176c		8b		phb		                PHB
.18176d		08		php		                PHP
.18176e		48		pha		                PHA             ; begin setdbr macro
.18176f		08		php		                PHP
.181770		e2 20		sep #$20	                SEP #$20        ; set A short
.181772		a9 00		lda #$00	                LDA #0
.181774		48		pha		                PHA
.181775		ab		plb		                PLB
.181776		28		plp		                PLP
.181777		68		pla		                PLA             ; end setdbr macro
.181778		e2 20		sep #$20	                SEP #$20        ; set A short
.18177a		c2 10		rep #$10	                REP #$10        ; set X long
.18177c		48		pha		                PHA                     ; Save the interrupt number
.18177d		5a		phy		                PHY                     ; Save the handler's bank
.18177e		da		phx		                PHX                     ; Save the handler's address
.18177f		f4 00 00	pea #$0000	                PEA #0                  ; Make room for the offset to the vector
.181782						LOCALS
>0001						l_vector        .word ?                 ; Address of vector in bank 0
>0003						l_handler       .dword ?                ; The address of the handler (only 24 bits, really)
>0007						l_number        .byte ?                 ; The interrupt number
.181782		29 30		and #$30	                AND #$30                ; Isolate the block #
.181784		0a		asl a		                ASL A                   ; Multiply by 2 to get the offset to the first vector of the block
.181785		83 01		sta $01,s	                STA l_vector
.181787		a3 07		lda $07,s	                LDA l_number            ; Get the number bank
.181789		29 07		and #$07	                AND #$07                ; Isolate the interrupt number
.18178b		0a		asl a		                ASL A                   ; Multiply by four to get the first byte of that interrupt's vector
.18178c		0a		asl a		                ASL A
.18178d		03 01		ora $01,s	                ORA l_vector            ; Add it to the offset to the block
.18178f		83 01		sta $01,s	                STA l_vector            ; Store back to the vector address
.181791		18		clc		                CLC                     ; Add the address of the start of the interrupt vector table
.181792		a9 00		lda #$00	                LDA #<VEC_INT_START
.181794		63 01		adc $01,s	                ADC l_vector
.181796		83 01		sta $01,s	                STA l_vector
.181798		a9 17		lda #$17	                LDA #>VEC_INT_START
.18179a		63 02		adc $02,s	                ADC l_vector+1
.18179c		83 02		sta $02,s	                STA l_vector+1
.18179e		78		sei		                SEI                     ; Disable the interrupts while we update the vector
.18179f		a0 00 00	ldy #$0000	                LDY #0
.1817a2		a9 5c		lda #$5c	                LDA #$5C                ; Opcode for JML
.1817a4		93 01		sta ($01,s),y	                STA (l_vector),Y        ; Make sure the first byte is a JML instruction
.1817a6		c8		iny		                INY                     ; Move to the low byte of the vector address
.1817a7		a3 03		lda $03,s	                LDA l_handler
.1817a9		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817ab		c8		iny		                INY                     ; Move to the high byte of the vector address
.1817ac		a3 04		lda $04,s	                LDA l_handler+1
.1817ae		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817b0		c8		iny		                INY                     ; Move to the bank of the vector address
.1817b1		a3 05		lda $05,s	                LDA l_handler+2
.1817b3		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817b5		c2 20		rep #$20	                REP #$20        ; set A long
.1817b7		18		clc		                CLC                     ; Clean up the locals off the stack
.1817b8		3b		tsc		                TSC
.1817b9		69 07 00	adc #$0007	                ADC #SIZE(LOCALS)
.1817bc		1b		tcs		                TCS
.1817bd		28		plp		                PLP
.1817be		ab		plb		                PLB
.1817bf		6b		rtl		                RTL
.1817c0						IRQ_HANDLER
.1817c0		08		php		                PHP
.1817c1		e2 20		sep #$20	                SEP #$20        ; set A short
.1817c3		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0     ; Get the block 0 pending interrupts
.1817c7		d0 03		bne $1817cc	                BNE process_reg0
.1817c9		82 80 00	brl $18184c	                BRL CHECK_PENDING_REG1      ; If nothing: skip to block 1
.1817cc						process_reg0
.1817cc		89 01		bit #$01	                BIT #FNX0_INT00_SOF           ; Check to see if the bit is set
.1817ce		f0 0c		beq $1817dc	                BEQ continue            ; If not: skip the rest of this macro
.1817d0		29 01		and #$01	                AND #FNX0_INT00_SOF           ; Mask out all other pending interrupts
.1817d2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817d6		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF            ; And call its handler
.1817da		e2 20		sep #$20	                SEP #$20        ; set A short
.1817dc						continue
.1817dc		89 02		bit #$02	                BIT #FNX0_INT01_SOL           ; Check to see if the bit is set
.1817de		f0 0c		beq $1817ec	                BEQ continue            ; If not: skip the rest of this macro
.1817e0		29 02		and #$02	                AND #FNX0_INT01_SOL           ; Mask out all other pending interrupts
.1817e2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817e6		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL            ; And call its handler
.1817ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1817ec						continue
.1817ec		89 04		bit #$04	                BIT #FNX0_INT02_TMR0           ; Check to see if the bit is set
.1817ee		f0 0c		beq $1817fc	                BEQ continue            ; If not: skip the rest of this macro
.1817f0		29 04		and #$04	                AND #FNX0_INT02_TMR0           ; Mask out all other pending interrupts
.1817f2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817f6		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0            ; And call its handler
.1817fa		e2 20		sep #$20	                SEP #$20        ; set A short
.1817fc						continue
.1817fc		89 08		bit #$08	                BIT #FNX0_INT03_TMR1           ; Check to see if the bit is set
.1817fe		f0 0c		beq $18180c	                BEQ continue            ; If not: skip the rest of this macro
.181800		29 08		and #$08	                AND #FNX0_INT03_TMR1           ; Mask out all other pending interrupts
.181802		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181806		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1            ; And call its handler
.18180a		e2 20		sep #$20	                SEP #$20        ; set A short
.18180c						continue
.18180c		89 10		bit #$10	                BIT #FNX0_INT04_TMR2           ; Check to see if the bit is set
.18180e		f0 0c		beq $18181c	                BEQ continue            ; If not: skip the rest of this macro
.181810		29 10		and #$10	                AND #FNX0_INT04_TMR2           ; Mask out all other pending interrupts
.181812		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181816		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2            ; And call its handler
.18181a		e2 20		sep #$20	                SEP #$20        ; set A short
.18181c						continue
.18181c		89 20		bit #$20	                BIT #FNX0_INT05_RTC           ; Check to see if the bit is set
.18181e		f0 0c		beq $18182c	                BEQ continue            ; If not: skip the rest of this macro
.181820		29 20		and #$20	                AND #FNX0_INT05_RTC           ; Mask out all other pending interrupts
.181822		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181826		22 14 17 00	jsl $001714	                JSL VEC_INT05_RTC            ; And call its handler
.18182a		e2 20		sep #$20	                SEP #$20        ; set A short
.18182c						continue
.18182c		89 40		bit #$40	                BIT #FNX0_INT06_FDC           ; Check to see if the bit is set
.18182e		f0 0c		beq $18183c	                BEQ continue            ; If not: skip the rest of this macro
.181830		29 40		and #$40	                AND #FNX0_INT06_FDC           ; Mask out all other pending interrupts
.181832		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181836		22 18 17 00	jsl $001718	                JSL VEC_INT06_FDC            ; And call its handler
.18183a		e2 20		sep #$20	                SEP #$20        ; set A short
.18183c						continue
.18183c		89 80		bit #$80	                BIT #FNX0_INT07_MOUSE           ; Check to see if the bit is set
.18183e		f0 0c		beq $18184c	                BEQ continue            ; If not: skip the rest of this macro
.181840		29 80		and #$80	                AND #FNX0_INT07_MOUSE           ; Mask out all other pending interrupts
.181842		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181846		22 1c 17 00	jsl $00171c	                JSL VEC_INT07_MOUSE            ; And call its handler
.18184a		e2 20		sep #$20	                SEP #$20        ; set A short
.18184c						continue
.18184c						CHECK_PENDING_REG1
.18184c		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1
.181850		d0 03		bne $181855	                BNE process_reg1
.181852		82 80 00	brl $1818d5	                BRL CHECK_PENDING_REG2
.181855						process_reg1
.181855		89 01		bit #$01	                BIT #FNX1_INT00_KBD           ; Check to see if the bit is set
.181857		f0 0c		beq $181865	                BEQ continue            ; If not: skip the rest of this macro
.181859		29 01		and #$01	                AND #FNX1_INT00_KBD           ; Mask out all other pending interrupts
.18185b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18185f		22 20 17 00	jsl $001720	                JSL VEC_INT10_KBD            ; And call its handler
.181863		e2 20		sep #$20	                SEP #$20        ; set A short
.181865						continue
.181865		89 02		bit #$02	                BIT #FNX1_INT01_COL0           ; Check to see if the bit is set
.181867		f0 0c		beq $181875	                BEQ continue            ; If not: skip the rest of this macro
.181869		29 02		and #$02	                AND #FNX1_INT01_COL0           ; Mask out all other pending interrupts
.18186b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18186f		22 24 17 00	jsl $001724	                JSL VEC_INT11_COL0            ; And call its handler
.181873		e2 20		sep #$20	                SEP #$20        ; set A short
.181875						continue
.181875		89 04		bit #$04	                BIT #FNX1_INT02_COL1           ; Check to see if the bit is set
.181877		f0 0c		beq $181885	                BEQ continue            ; If not: skip the rest of this macro
.181879		29 04		and #$04	                AND #FNX1_INT02_COL1           ; Mask out all other pending interrupts
.18187b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18187f		22 28 17 00	jsl $001728	                JSL VEC_INT12_COL1            ; And call its handler
.181883		e2 20		sep #$20	                SEP #$20        ; set A short
.181885						continue
.181885		89 08		bit #$08	                BIT #FNX1_INT03_COM2           ; Check to see if the bit is set
.181887		f0 0c		beq $181895	                BEQ continue            ; If not: skip the rest of this macro
.181889		29 08		and #$08	                AND #FNX1_INT03_COM2           ; Mask out all other pending interrupts
.18188b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18188f		22 2c 17 00	jsl $00172c	                JSL VEC_INT13_COM2            ; And call its handler
.181893		e2 20		sep #$20	                SEP #$20        ; set A short
.181895						continue
.181895		89 10		bit #$10	                BIT #FNX1_INT04_COM1           ; Check to see if the bit is set
.181897		f0 0c		beq $1818a5	                BEQ continue            ; If not: skip the rest of this macro
.181899		29 10		and #$10	                AND #FNX1_INT04_COM1           ; Mask out all other pending interrupts
.18189b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18189f		22 30 17 00	jsl $001730	                JSL VEC_INT14_COM1            ; And call its handler
.1818a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818a5						continue
.1818a5		89 20		bit #$20	                BIT #FNX1_INT05_MPU401           ; Check to see if the bit is set
.1818a7		f0 0c		beq $1818b5	                BEQ continue            ; If not: skip the rest of this macro
.1818a9		29 20		and #$20	                AND #FNX1_INT05_MPU401           ; Mask out all other pending interrupts
.1818ab		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818af		22 34 17 00	jsl $001734	                JSL VEC_INT15_MIDI            ; And call its handler
.1818b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818b5						continue
.1818b5		89 40		bit #$40	                BIT #FNX1_INT06_LPT           ; Check to see if the bit is set
.1818b7		f0 0c		beq $1818c5	                BEQ continue            ; If not: skip the rest of this macro
.1818b9		29 40		and #$40	                AND #FNX1_INT06_LPT           ; Mask out all other pending interrupts
.1818bb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818bf		22 38 17 00	jsl $001738	                JSL VEC_INT16_LPT            ; And call its handler
.1818c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818c5						continue
.1818c5		89 80		bit #$80	                BIT #FNX1_INT07_SDCARD           ; Check to see if the bit is set
.1818c7		f0 0c		beq $1818d5	                BEQ continue            ; If not: skip the rest of this macro
.1818c9		29 80		and #$80	                AND #FNX1_INT07_SDCARD           ; Mask out all other pending interrupts
.1818cb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818cf		22 3c 17 00	jsl $00173c	                JSL VEC_INT17_SDC            ; And call its handler
.1818d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818d5						continue
.1818d5						CHECK_PENDING_REG2
.1818d5		af 42 01 00	lda $000142	                LDA @l INT_PENDING_REG2
.1818d9		d0 03		bne $1818de	                BNE process_reg2
.1818db		82 80 00	brl $18195e	                BRL CHECK_PENDING_REG3
.1818de						process_reg2
.1818de		89 01		bit #$01	                BIT #FNX2_INT00_OPL3           ; Check to see if the bit is set
.1818e0		f0 0c		beq $1818ee	                BEQ continue            ; If not: skip the rest of this macro
.1818e2		29 01		and #$01	                AND #FNX2_INT00_OPL3           ; Mask out all other pending interrupts
.1818e4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818e8		22 40 17 00	jsl $001740	                JSL VEC_INT20_OPL            ; And call its handler
.1818ec		e2 20		sep #$20	                SEP #$20        ; set A short
.1818ee						continue
.1818ee		89 02		bit #$02	                BIT #FNX2_INT01_GABE_INT0           ; Check to see if the bit is set
.1818f0		f0 0c		beq $1818fe	                BEQ continue            ; If not: skip the rest of this macro
.1818f2		29 02		and #$02	                AND #FNX2_INT01_GABE_INT0           ; Mask out all other pending interrupts
.1818f4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818f8		22 44 17 00	jsl $001744	                JSL VEC_INT21_GABE0            ; And call its handler
.1818fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1818fe						continue
.1818fe		89 04		bit #$04	                BIT #FNX2_INT02_GABE_INT1           ; Check to see if the bit is set
.181900		f0 0c		beq $18190e	                BEQ continue            ; If not: skip the rest of this macro
.181902		29 04		and #$04	                AND #FNX2_INT02_GABE_INT1           ; Mask out all other pending interrupts
.181904		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181908		22 48 17 00	jsl $001748	                JSL VEC_INT22_GABE1            ; And call its handler
.18190c		e2 20		sep #$20	                SEP #$20        ; set A short
.18190e						continue
.18190e		89 08		bit #$08	                BIT #FNX2_INT03_VDMA           ; Check to see if the bit is set
.181910		f0 0c		beq $18191e	                BEQ continue            ; If not: skip the rest of this macro
.181912		29 08		and #$08	                AND #FNX2_INT03_VDMA           ; Mask out all other pending interrupts
.181914		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181918		22 4c 17 00	jsl $00174c	                JSL VEC_INT23_VDMA            ; And call its handler
.18191c		e2 20		sep #$20	                SEP #$20        ; set A short
.18191e						continue
.18191e		89 10		bit #$10	                BIT #FNX2_INT04_COL2           ; Check to see if the bit is set
.181920		f0 0c		beq $18192e	                BEQ continue            ; If not: skip the rest of this macro
.181922		29 10		and #$10	                AND #FNX2_INT04_COL2           ; Mask out all other pending interrupts
.181924		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181928		22 50 17 00	jsl $001750	                JSL VEC_INT24_COL2            ; And call its handler
.18192c		e2 20		sep #$20	                SEP #$20        ; set A short
.18192e						continue
.18192e		89 20		bit #$20	                BIT #FNX2_INT05_GABE_INT2           ; Check to see if the bit is set
.181930		f0 0c		beq $18193e	                BEQ continue            ; If not: skip the rest of this macro
.181932		29 20		and #$20	                AND #FNX2_INT05_GABE_INT2           ; Mask out all other pending interrupts
.181934		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181938		22 54 17 00	jsl $001754	                JSL VEC_INT25_GABE2            ; And call its handler
.18193c		e2 20		sep #$20	                SEP #$20        ; set A short
.18193e						continue
.18193e		89 40		bit #$40	                BIT #FNX2_INT06_EXT           ; Check to see if the bit is set
.181940		f0 0c		beq $18194e	                BEQ continue            ; If not: skip the rest of this macro
.181942		29 40		and #$40	                AND #FNX2_INT06_EXT           ; Mask out all other pending interrupts
.181944		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181948		22 58 17 00	jsl $001758	                JSL VEC_INT26_EXT            ; And call its handler
.18194c		e2 20		sep #$20	                SEP #$20        ; set A short
.18194e						continue
.18194e		89 80		bit #$80	                BIT #FNX2_INT07_SDCARD_INS           ; Check to see if the bit is set
.181950		f0 0c		beq $18195e	                BEQ continue            ; If not: skip the rest of this macro
.181952		29 80		and #$80	                AND #FNX2_INT07_SDCARD_INS           ; Mask out all other pending interrupts
.181954		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181958		22 5c 17 00	jsl $00175c	                JSL VEC_INT17_SDINS            ; And call its handler
.18195c		e2 20		sep #$20	                SEP #$20        ; set A short
.18195e						continue
.18195e						CHECK_PENDING_REG3
.18195e		af 43 01 00	lda $000143	                LDA @l INT_PENDING_REG3
.181962		f0 30		beq $181994	                BEQ EXIT_IRQ_HANDLE
.181964		89 01		bit #$01	                BIT #FNX3_INT00_OPN2           ; Check to see if the bit is set
.181966		f0 0c		beq $181974	                BEQ continue            ; If not: skip the rest of this macro
.181968		29 01		and #$01	                AND #FNX3_INT00_OPN2           ; Mask out all other pending interrupts
.18196a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18196e		22 60 17 00	jsl $001760	                JSL VEC_INT30_OPN2            ; And call its handler
.181972		e2 20		sep #$20	                SEP #$20        ; set A short
.181974						continue
.181974		89 02		bit #$02	                BIT #FNX3_INT01_OPM           ; Check to see if the bit is set
.181976		f0 0c		beq $181984	                BEQ continue            ; If not: skip the rest of this macro
.181978		29 02		and #$02	                AND #FNX3_INT01_OPM           ; Mask out all other pending interrupts
.18197a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18197e		22 64 17 00	jsl $001764	                JSL VEC_INT31_OPM            ; And call its handler
.181982		e2 20		sep #$20	                SEP #$20        ; set A short
.181984						continue
.181984		89 04		bit #$04	                BIT #FNX3_INT02_IDE           ; Check to see if the bit is set
.181986		f0 0c		beq $181994	                BEQ continue            ; If not: skip the rest of this macro
.181988		29 04		and #$04	                AND #FNX3_INT02_IDE           ; Mask out all other pending interrupts
.18198a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18198e		22 68 17 00	jsl $001768	                JSL VEC_INT32_IDE            ; And call its handler
.181992		e2 20		sep #$20	                SEP #$20        ; set A short
.181994						continue
.181994						EXIT_IRQ_HANDLE
.181994		28		plp		                PLP
.181995		6b		rtl		                RTL
.181996		6b		rtl		NMI_HANDLER     RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/super_io_def.asm

=$af1100					PME_STS_REG     = $AF1100
=$af1102					PME_EN_REG		  = $AF1102
=$af1104					PME_STS1_REG		= $AF1104
=$af1105					PME_STS2_REG		= $AF1105
=$af1106					PME_STS3_REG		= $AF1106
=$af1107					PME_STS4_REG		= $AF1107
=$af1108					PME_STS5_REG		= $AF1108
=$af110a					PME_EN1_REG     = $AF110A
=$af110b					PME_EN2_REG     = $AF110B
=$af110c					PME_EN3_REG     = $AF110C
=$af110d					PME_EN4_REG     = $AF110D
=$af110e					PME_EN5_REG     = $AF110E
=$af1110					SMI_STS1_REG		= $AF1110
=$af1111					SMI_STS2_REG		= $AF1111
=$af1112					SMI_STS3_REG		= $AF1112
=$af1113					SMI_STS4_REG		= $AF1113
=$af1114					SMI_STS5_REG		= $AF1114
=$af1116					SMI_EN1_REG     = $AF1116
=$af1117					SMI_EN2_REG     = $AF1117
=$af1118					SMI_EN3_REG     = $AF1118
=$af1119					SMI_EN4_REG     = $AF1119
=$af111a					SMI_EN5_REG     = $AF111A
=$af111c					MSC_ST_REG      = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		= $AF1123
=$af1124					GP11_REG    		= $AF1124
=$af1125					GP12_REG    		= $AF1125
=$af1126					GP13_REG    		= $AF1126
=$af1127					GP14_REG    		= $AF1127
=$af1128					GP15_REG    		= $AF1128
=$af1129					GP16_REG    		= $AF1129
=$af112a					GP17_REG    		= $AF112A
=$af112b					GP20_REG    		= $AF112B
=$af112c					GP21_REG    		= $AF112C
=$af112d					GP22_REG		= $AF112D
=$af112f					GP24_REG		= $AF112F
=$af1130					GP25_REG		= $AF1130
=$af1131					GP26_REG		= $AF1131
=$af1132					GP27_REG		= $AF1132
=$af1133					GP30_REG		= $AF1133
=$af1134					GP31_REG		= $AF1134
=$af1135					GP32_REG		= $AF1135
=$af1136					GP33_REG		= $AF1136
=$af1137					GP34_REG		= $AF1137
=$af1138					GP35_REG		= $AF1138
=$af1139					GP36_REG		= $AF1139
=$af113a					GP37_REG		= $AF113A
=$af113b					GP40_REG		= $AF113B
=$af113c					GP41_REG		= $AF113C
=$af113d					GP42_REG		= $AF113D
=$af113e					GP43_REG		= $AF113E
=$af113f					GP50_REG		= $AF113F
=$af1140					GP51_REG		= $AF1140
=$af1141					GP52_REG		= $AF1141
=$af1142					GP53_REG		= $AF1142
=$af1143					GP54_REG		= $AF1143
=$af1144					GP55_REG		= $AF1144
=$af1145					GP56_REG		= $AF1145
=$af1146					GP57_REG		= $AF1146
=$af1147					GP60_REG		= $AF1147
=$af1148					GP61_REG		= $AF1148
=$af114b					GP1_REG			= $AF114B
=$af114c					GP2_REG			= $AF114C
=$af114d					GP3_REG			= $AF114D
=$af114e					GP4_REG			= $AF114E
=$af114f					GP5_REG			= $AF114F
=$af1150					GP6_REG			= $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG            = $AF1157
=$af1158					FAN_CTRL_REG  	    = $AF1158
=$af1159					FAN1_TACH_REG       = $AF1159
=$af115a					FAN2_TACH_REG       = $AF115A
=$af115b					FAN1_PRELOAD_REG    = $AF115B
=$af115c					FAN2_PRELOAD_REG    = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/keyboard_def.asm

=$af1807					    STATUS_PORT 	= $AF1807
=$af1807					    KBD_STATUS      = $AF1807
=$af1807					    KBD_CMD_BUF		= $AF1807
=$af1803					    KBD_OUT_BUF 	= $AF1803
=$af1803					    KBD_INPT_BUF	= $AF1803
=$af1803					    KBD_DATA_BUF	= $AF1803
=$af180a					    PORT_A		    = $AF180A   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$af180b					    PORT_B			= $AF180B   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=4						CHAN_EVID     = 4           ; ID for the second video port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src\kernel.asm

.190400						IBOOT
.190400		18		clc		                CLC               ; clear the carry flag
.190401		fb		xce		                XCE               ; move carry to emulation flag.
.190402		78		sei		                SEI               ; Disable interrupts
.190403		c2 30		rep #$30	                REP #$30        ; set A&X long
.190405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.190408		1b		tcs		                TAS
.190409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.19040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.19040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.190412		54 00 18	mvn $18,$00	                MVN $18,$00       ; Or during soft loading of the kernel from the debug port
.190415		48		pha		                PHA             ; begin setdp macro
.190416		08		php		                PHP
.190417		c2 20		rep #$20	                REP #$20        ; set A long
.190419		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19041c		5b		tcd		                TCD
.19041d		28		plp		                PLP
.19041e		68		pla		                PLA             ; end setdp macro
.19041f		e2 20		sep #$20	                SEP #$20        ; set A short
.190421		a2 00 00	ldx #$0000	                LDX #$0000
.190424		a9 00		lda #$00	                LDA #$00
.190426						CLEAR_MEM_LOOP
.190426		95 00		sta $00,x	                STA $0000, X
.190428		e8		inx		                INX
.190429		e0 00 01	cpx #$0100	                CPX #$0100
.19042c		d0 f8		bne $190426	                BNE CLEAR_MEM_LOOP
.19042e		ea		nop		                NOP
.19042f		a9 ff		lda #$ff	                LDA #$FF
.190431		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.190435		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.190439		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.19043d		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.190441		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.190445		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190449		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.19044d		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.190451		22 ae 0d 19	jsl $190dae	                JSL INITRTC               ; Initialize the RTC
.190455		22 f3 6f 19	jsl $196ff3	                JSL ANSI_INIT             ; Initialize the ANSI screen driver
.190459		e2 20		sep #$20	                SEP #$20        ; set A short
.19045b		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.19045f		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.190461		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.190463		d0 1e		bne $190483	                BNE SkipInitExpC100C200
.190465		c2 20		rep #$20	                REP #$20        ; set A long
.190467		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.19046b		c9 64 00	cmp #$0064	                CMP #$0064
.19046e		f0 0f		beq $19047f	                BEQ InitC100ESID
.190470		c9 c8 00	cmp #$00c8	                CMP #$00C8
.190473		d0 0e		bne $190483	                BNE SkipInitExpC100C200
.190475		22 87 6a 19	jsl $196a87	                JSL SIMPLE_INIT_ETHERNET_CTRL
.190479		22 92 6e 19	jsl $196e92	                JSL INIT_EVID_VID_MODE
.19047d		80 04		bra $190483	                BRA SkipInitExpC100C200
.19047f						InitC100ESID:
.19047f		22 87 6a 19	jsl $196a87	                JSL SIMPLE_INIT_ETHERNET_CTRL
.190483						SkipInitExpC100C200:
.190483		c2 30		rep #$30	                REP #$30        ; set A&X long
.190485		a9 00 00	lda #$0000	                LDA #$00
.190488		8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG       ; Clear the Keyboard Flag
.19048b		a9 9f 00	lda #$009f	                LDA #$9F                  ; Channel Two - No Atteniation
.19048e		8f 00 f1 af	sta $aff100	                STA $AFF100
.190492		a9 bf 00	lda #$00bf	                LDA #$BF                  ; Channel Two - No Atteniation
.190495		8f 00 f1 af	sta $aff100	                STA $AFF100
.190499		a9 df 00	lda #$00df	                LDA #$DF                  ; Channel Two - No Atteniation
.19049c		8f 00 f1 af	sta $aff100	                STA $AFF100
.1904a0		a9 ff 00	lda #$00ff	                LDA #$FF                  ; Channel Two - No Atteniation
.1904a3		8f 00 f1 af	sta $aff100	                STA $AFF100
.1904a7		a9 70 00	lda #$0070	                LDA #$70                  ; Set the default text color to dim white on black
.1904aa		85 1e		sta $1e		                STA CURCOLOR
.1904ac		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.1904b0		29 01 00	and #$0001	                AND #$01
.1904b3		c9 01 00	cmp #$0001	                CMP #$01
.1904b6		d0 16		bne $1904ce	                BNE Alreadyin640480Mode
.1904b8		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904bc		29 fc 00	and #$00fc	                AND #$FC
.1904bf		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904c3		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904c7		09 01 00	ora #$0001	                ORA #$01
.1904ca		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904ce						Alreadyin640480Mode
.1904ce		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904d2		29 fc 00	and #$00fc	                AND #$FC
.1904d5		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.1904d9		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.1904dd		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.1904e1		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.1904e5		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT
.1904e9		22 5b 0c 19	jsl $190c5b	                JSL INITMOUSEPOINTER
.1904ed		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.1904f1		a9 00 00	lda #$0000	                LDA #0
.1904f4		22 38 10 00	jsl $001038	                JSL SETIN
.1904f8		22 3c 10 00	jsl $00103c	                JSL SETOUT
.1904fc		c2 20		rep #$20	                REP #$20        ; set A long
.1904fe		48		pha		                PHA             ; begin setdp macro
.1904ff		08		php		                PHP
.190500		c2 20		rep #$20	                REP #$20        ; set A long
.190502		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190505		5b		tcd		                TCD
.190506		28		plp		                PLP
.190507		68		pla		                PLA             ; end setdp macro
.190508		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD      ; INITKEYBOARD  ; KBD_INIT
.19050c		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE
.190510		e2 20		sep #$20	                SEP #$20        ; set A short
.190512		c2 10		rep #$10	                REP #$10        ; set X long
.190514		a9 9f		lda #$9f	                LDA #$9F              ; Channel Two - No Atteniation
.190516		8f 00 f1 af	sta $aff100	                STA $AFF100
.19051a		a9 bf		lda #$bf	                LDA #$BF              ; Channel Two - No Atteniation
.19051c		8f 00 f1 af	sta $aff100	                STA $AFF100
.190520		a9 df		lda #$df	                LDA #$DF              ; Channel Two - No Atteniation
.190522		8f 00 f1 af	sta $aff100	                STA $AFF100
.190526		a9 ff		lda #$ff	                LDA #$FF              ; Channel Two - No Atteniation
.190528		8f 00 f1 af	sta $aff100	                STA $AFF100
.19052c		a9 83		lda #$83	                LDA #$83              ; Channel Zero - No Atteniation
.19052e		8f 00 f1 af	sta $aff100	                STA $AFF100
.190532		a9 12		lda #$12	                LDA #$12              ; Channel Zero - No Atteniation
.190534		8f 00 f1 af	sta $aff100	                STA $AFF100
.190538		a9 90		lda #$90	                LDA #$90              ; Channel One - No Atteniation
.19053a		8f 00 f1 af	sta $aff100	                STA $AFF100
.19053e		a2 00 40	ldx #$4000	                LDX #16384            ; 400ms
.190541		22 c3 10 19	jsl $1910c3	                JSL ILOOP_MS
.190545		a9 9f		lda #$9f	                LDA #$9F              ; Channel Two - No Atteniation
.190547		8f 00 f1 af	sta $aff100	                STA $AFF100
.19054b		58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.19054c		e2 20		sep #$20	                SEP #$20        ; set A short
.19054e		c2 10		rep #$10	                REP #$10        ; set X long
.190550		48		pha		                PHA             ; begin setdbr macro
.190551		08		php		                PHP
.190552		e2 20		sep #$20	                SEP #$20        ; set A short
.190554		a9 19		lda #$19	                LDA #`greet_msg
.190556		48		pha		                PHA
.190557		ab		plb		                PLB
.190558		28		plp		                PLP
.190559		68		pla		                PLA             ; end setdbr macro
.19055a		a2 00 00	ldx #$0000	                LDX #0
.19055d		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.190561		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.190565		e8		inx		                INX
.190566		e0 00 10	cpx #$1000	                CPX #$1000
.190569		d0 f2		bne $19055d	                BNE jmpcopy
.19056b						retry_boot
.19056b		22 2c 3f 19	jsl $193f2c	                JSL DOS_INIT            ; Initialize the "disc operating system"
.19056f		22 00 00 1e	jsl $1e0000	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.190573		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN           ; Clear Screen and Set a standard color in Color Memory
.190577		c2 30		rep #$30	                REP #$30        ; set A&X long
.190579		22 a0 10 00	jsl $0010a0	                JSL CSRHOME             ; Move to the home position
.19057d						greet
.19057d		48		pha		                PHA             ; begin setdbr macro
.19057e		08		php		                PHP
.19057f		e2 20		sep #$20	                SEP #$20        ; set A short
.190581		a9 19		lda #$19	                LDA #`greet_msg
.190583		48		pha		                PHA
.190584		ab		plb		                PLB
.190585		28		plp		                PLP
.190586		68		pla		                PLA             ; end setdbr macro
.190587		a2 f0 83	ldx #$83f0	                LDX #<>greet_msg
.19058a		22 3d 07 19	jsl $19073d	                JSL IPRINT              ; print the first line
.19058e		22 4c 09 19	jsl $19094c	                JSL ICOLORFLAG          ; This is to set the color memory for the text logo
.190592		c2 30		rep #$30	                REP #$30        ; set A&X long
.190594		a9 ff fe	lda #$feff	                LDA #STACK_END          ; We are the root, let's make sure from now on, that we start clean
.190597		1b		tcs		                TAS
.190598		e2 20		sep #$20	                SEP #$20        ; set A short
.19059a		c2 10		rep #$10	                REP #$10        ; set X long
.19059c		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.1905a0		c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.1905a2		f0 10		beq $1905b4	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.1905a4		c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.1905a6		f0 1e		beq $1905c6	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.1905a8		c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.1905aa		f0 62		beq $19060e	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.1905ac		c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.1905ae		f0 1d		beq $1905cd	                BEQ BOOTSDC           ; Yes: boot via the SDC
.1905b0		c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.1905b2		f0 39		beq $1905ed	                BEQ BOOTIDE           ; Yes: boot via the IDE
.1905b4		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.1905b8		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.1905ba		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.1905bc		f0 2f		beq $1905ed	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.1905be		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.1905c0		f0 0b		beq $1905cd	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.1905c2		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.1905c4		f0 48		beq $19060e	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.1905c6						IRESTORE
.1905c6		5c 00 00 1a	jmp $1a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.1905ca		ea		nop		CREDIT_LOCK     NOP
.1905cb		80 fd		bra $1905ca	                BRA CREDIT_LOCK
.1905cd		a2 33 88	ldx #$8833	BOOTSDC         LDX #<>sdc_boot
.1905d0		22 3d 07 19	jsl $19073d	                JSL IPRINT
.1905d4		e2 20		sep #$20	                SEP #$20        ; set A short
.1905d6		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.1905d8		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905dc		22 fe 3f 19	jsl $193ffe	                JSL DOS_MOUNT         ; Mount the SDC
.1905e0		90 06		bcc $1905e8	                BCC sdc_error         ; Print an error message if couldn't get anything
.1905e2		22 b9 41 19	jsl $1941b9	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.1905e6		80 de		bra $1905c6	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.1905e8		a2 b7 87	ldx #$87b7	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.1905eb		80 40		bra $19062d	                BRA PR_BOOT_ERROR
.1905ed		a2 4a 88	ldx #$884a	BOOTIDE         LDX #<>ide_boot
.1905f0		22 3d 07 19	jsl $19073d	                JSL IPRINT
.1905f4		e2 20		sep #$20	                SEP #$20        ; set A short
.1905f6		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.1905f8		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905fc		22 fe 3f 19	jsl $193ffe	                JSL DOS_MOUNT         ; Mount the IDE drive
.190600		90 07		bcc $190609	                BCC hdc_error         ; Print an error message if couldn't get anything
.190602		22 b9 41 19	jsl $1941b9	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.190606		82 bd ff	brl $1905c6	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.190609		a2 d3 87	ldx #$87d3	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.19060c		80 1f		bra $19062d	                BRA PR_BOOT_ERROR
.19060e		a2 1c 88	ldx #$881c	BOOTFLOPPY      LDX #<>fdc_boot
.190611		22 3d 07 19	jsl $19073d	                JSL IPRINT
.190615		e2 20		sep #$20	                SEP #$20        ; set A short
.190617		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.190619		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.19061d		22 0e 64 19	jsl $19640e	                JSL FDC_MOUNT         ; Mount the floppy drive
.190621		90 07		bcc $19062a	                BCC fdc_error         ; Print an error message if couldn't get anything
.190623		22 b9 41 19	jsl $1941b9	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.190627		82 9c ff	brl $1905c6	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.19062a		a2 f6 87	ldx #$87f6	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.19062d		22 3d 07 19	jsl $19073d	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.190631		a2 92 87	ldx #$8792	                LDX #<>boot_retry     ; Print the boot retry prompt
.190634		22 3d 07 19	jsl $19073d	                JSL IPRINT
.190638		22 d7 06 19	jsl $1906d7	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.19063c		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.19063e		d0 03		bne $190643	                BNE chk_r_lc
.190640		82 28 ff	brl $19056b	                BRL retry_boot        ; Yes: retry the boot sequence
.190643		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.190645		d0 03		bne $19064a	                BNE chk_b_lc
.190647		82 21 ff	brl $19056b	                BRL retry_boot
.19064a		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.19064c		d0 03		bne $190651	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.19064e		82 75 ff	brl $1905c6	                BRL BOOTBASIC
.190651						chk_b_lc_not:
.190651		c9 42		cmp #$42	                CMP #'B'
.190653		d0 03		bne $190658	                BNE chk_b_lc_not0
.190655		82 6e ff	brl $1905c6	                BRL BOOTBASIC
.190658						chk_b_lc_not0:
.190658		80 de		bra $190638	                BRA boot_wait_key     ; No: keep waiting
.19065a						IBREAK
.19065a		48		pha		                PHA             ; begin setdp macro
.19065b		08		php		                PHP
.19065c		c2 20		rep #$20	                REP #$20        ; set A long
.19065e		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190661		5b		tcd		                TCD
.190662		28		plp		                PLP
.190663		68		pla		                PLA             ; end setdp macro
.190664		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.190665		8f 48 02 00	sta $000248	                STA CPUY
.190669		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.19066a		8f 46 02 00	sta $000246	                STA CPUX
.19066e		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.19066f		8f 44 02 00	sta $000244	                STA CPUA
.190673		68		pla		                PLA
.190674		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.190678		e2 20		sep #$20	                SEP #$20        ; set A short
.19067a		68		pla		                PLA             ; Pull Data Bank (8 bits)
.19067b		8f 4e 02 00	sta $00024e	                STA CPUDBR
.19067f		68		pla		                PLA             ; Pull Flags (8 bits)
.190680		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.190684		c2 20		rep #$20	                REP #$20        ; set A long
.190686		68		pla		                PLA             ; Pull Program Counter (16 bits)
.190687		8f 40 02 00	sta $000240	                STA CPUPC
.19068b		e2 20		sep #$20	                SEP #$20        ; set A short
.19068d		68		pla		                PLA             ; Pull Program Bank (8 bits)
.19068e		8f 42 02 00	sta $000242	                STA CPUPBR
.190692		c2 20		rep #$20	                REP #$20        ; set A long
.190694		3b		tsc		                TSA             ; Get the stack
.190695		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.190699		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.19069c		1b		tcs		                TAS
.19069d		5c 04 00 1a	jmp $1a0004	                JML MONITOR
.1906a1						IREADY
.1906a1		48		pha		                PHA             ; begin setdbr macro
.1906a2		08		php		                PHP
.1906a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1906a5		a9 19		lda #$19	                LDA #`ready_msg
.1906a7		48		pha		                PHA
.1906a8		ab		plb		                PLB
.1906a9		28		plp		                PLP
.1906aa		68		pla		                PLA             ; end setdbr macro
.1906ab		e2 20		sep #$20	                SEP #$20        ; set A short
.1906ad		a2 65 88	ldx #$8865	                LDX #<>ready_msg
.1906b0		22 3d 07 19	jsl $19073d	                JSL IPRINT
.1906b4						IREADYWAIT
.1906b4		22 ce 06 19	jsl $1906ce	                JSL IGETCHE
.1906b8		80 fa		bra $1906b4	                BRA IREADYWAIT
.1906ba		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.1906bb		db		stp		IRETURN         STP
.1906bc		08		php		ISETIN          PHP
.1906bd		e2 20		sep #$20	                SEP #$20        ; set A short
.1906bf		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.1906c3		28		plp		                PLP
.1906c4		6b		rtl		                RTL
.1906c5		08		php		ISETOUT         PHP
.1906c6		e2 20		sep #$20	                SEP #$20        ; set A short
.1906c8		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.1906cc		28		plp		                PLP
.1906cd		6b		rtl		                RTL
.1906ce		22 4c 10 00	jsl $00104c	IGETCHE         JSL GETCHW
.1906d2		22 18 10 00	jsl $001018	                JSL PUTC
.1906d6		6b		rtl		                RTL
.1906d7						IGETCHW
.1906d7		da		phx		                PHX
.1906d8		5a		phy		                PHY
.1906d9		8b		phb		                PHB
.1906da		0b		phd		                PHD
.1906db		08		php		                PHP
.1906dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1906de		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.1906e2		f0 1b		beq $1906ff	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.1906e4		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1906e6		f0 0d		beq $1906f5	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906e8		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1906ea		f0 09		beq $1906f5	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906ec		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.1906ee		28		plp		                PLP
.1906ef		38		sec		                SEC                 ; And return carry set
.1906f0		2b		pld		                PLD
.1906f1		ab		plb		                PLB
.1906f2		7a		ply		                PLY
.1906f3		fa		plx		                PLX
.1906f4		6b		rtl		                RTL
.1906f5		22 12 58 19	jsl $195812	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.1906f9		22 c6 58 19	jsl $1958c6	                JSL UART_GETC       ; Get the charater from the COM port
.1906fd		80 04		bra $190703	                BRA done
.1906ff		22 02 7c 19	jsl $197c02	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.190703		28		plp		done            PLP
.190704		18		clc		                CLC                 ; Return carry clear for valid data
.190705		2b		pld		                PLD
.190706		ab		plb		                PLB
.190707		7a		ply		                PLY
.190708		fa		plx		                PLX
.190709		6b		rtl		                RTL
.19070a						IGETCH
.19070a		da		phx		                PHX
.19070b		5a		phy		                PHY
.19070c		8b		phb		                PHB
.19070d		0b		phd		                PHD
.19070e		08		php		                PHP
.19070f		e2 20		sep #$20	                SEP #$20        ; set A short
.190711		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.190715		f0 1b		beq $190732	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.190717		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.190719		f0 0d		beq $190728	                BEQ getc_uart       ; Yes: handle reading from the UART
.19071b		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.19071d		f0 09		beq $190728	                BEQ getc_uart       ; Yes: handle reading from the UART
.19071f		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.190721		28		plp		                PLP
.190722		38		sec		                SEC                 ; And return carry set
.190723		2b		pld		                PLD
.190724		ab		plb		                PLB
.190725		7a		ply		                PLY
.190726		fa		plx		                PLX
.190727		6b		rtl		                RTL
.190728		22 12 58 19	jsl $195812	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.19072c		22 c6 58 19	jsl $1958c6	                JSL UART_GETC       ; Get the charater from the COM port
.190730		80 04		bra $190736	                BRA done
.190732		22 0e 7c 19	jsl $197c0e	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.190736		28		plp		done            PLP
.190737		18		clc		                CLC                 ; Return carry clear for valid data
.190738		2b		pld		                PLD
.190739		ab		plb		                PLB
.19073a		7a		ply		                PLY
.19073b		fa		plx		                PLX
.19073c		6b		rtl		                RTL
.19073d		22 1c 10 00	jsl $00101c	IPRINT          JSL PUTS
.190741		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.190745		6b		rtl		                RTL
.190746		48		pha		IPUTS           PHA
.190747		08		php		                PHP
.190748		e2 20		sep #$20	                SEP #$20        ; set A short
.19074a		c2 10		rep #$10	                REP #$10        ; set X long
.19074c		bd 00 00	lda $190000,x	iputs1          LDA $0,b,x      ; read from the string
.19074f		f0 08		beq $190759	                BEQ iputs_done
.190751		22 18 10 00	jsl $001018	iputs2          JSL PUTC
.190755		e8		inx		iputs3          INX
.190756		4c 4c 07	jmp $19074c	                JMP iputs1
.190759		e8		inx		iputs_done      INX
.19075a		28		plp		                PLP
.19075b		68		pla		                PLA
.19075c		6b		rtl		                RTL
.19075d						IPUTC
.19075d		da		phx		                PHX
.19075e		5a		phy		                PHY
.19075f		0b		phd		                PHD
.190760		8b		phb		                PHB
.190761		08		php		                PHP                 ; stash the flags (we'll be changing M)
.190762		48		pha		                PHA             ; begin setdp macro
.190763		08		php		                PHP
.190764		c2 20		rep #$20	                REP #$20        ; set A long
.190766		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190769		5b		tcd		                TCD
.19076a		28		plp		                PLP
.19076b		68		pla		                PLA             ; end setdp macro
.19076c		48		pha		                PHA             ; begin setdbr macro
.19076d		08		php		                PHP
.19076e		e2 20		sep #$20	                SEP #$20        ; set A short
.190770		a9 00		lda #$00	                LDA #0
.190772		48		pha		                PHA
.190773		ab		plb		                PLB
.190774		28		plp		                PLP
.190775		68		pla		                PLA             ; end setdbr macro
.190776		e2 20		sep #$20	                SEP #$20        ; set A short
.190778		c2 10		rep #$10	                REP #$10        ; set X long
.19077a		48		pha		                PHA                 ; Save the character to print
.19077b		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.19077f		f0 1a		beq $19079b	                BEQ putc_ansi       ; If it's 0: print to the screen
.190781		c9 04		cmp #$04	                CMP #CHAN_EVID      ; Check to see if it's the second video port
.190783		f0 16		beq $19079b	                BEQ putc_ansi       ; Yes: handle printing to the second video port
.190785		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.190787		f0 07		beq $190790	                BEQ putc_uart       ; Yes: handle printing to the UART
.190789		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.19078b		f0 03		beq $190790	                BEQ putc_uart       ; Yes: handle printing to the UART
.19078d		68		pla		                PLA                 ; Otherwise, just exit
.19078e		80 10		bra $1907a0	                BRA done
.190790		22 12 58 19	jsl $195812	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.190794		68		pla		                PLA                 ; Recover the character to send
.190795		22 e7 58 19	jsl $1958e7	                JSL UART_PUTC       ; Send the character
.190799		80 05		bra $1907a0	                BRA done
.19079b		68		pla		putc_ansi       PLA                 ; Recover the character to send
.19079c		22 25 72 19	jsl $197225	                JSL ANSI_PUTC       ; Print to the current selected ANSI screen
.1907a0		28		plp		done            PLP
.1907a1		ab		plb		                PLB
.1907a2		2b		pld		                PLD
.1907a3		7a		ply		                PLY
.1907a4		fa		plx		                PLX
.1907a5		6b		rtl		                RTL
.1907a6		da		phx		SCRSHIFTLL      PHX
.1907a7		5a		phy		                PHY
.1907a8		48		pha		                PHA
.1907a9		0b		phd		                PHD
.1907aa		08		php		                PHP
.1907ab		48		pha		                PHA             ; begin setdp macro
.1907ac		08		php		                PHP
.1907ad		c2 20		rep #$20	                REP #$20        ; set A long
.1907af		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1907b2		5b		tcd		                TCD
.1907b3		28		plp		                PLP
.1907b4		68		pla		                PLA             ; end setdp macro
.1907b5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1907b7		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.1907b9		a8		tay		                TAY                 ; Set it as the destination
.1907ba		aa		tax		                TAX
.1907bb		e8		inx		                INX                 ; And set the next cell as the source
.1907bc		18		clc		                CLC                 ; Calculate the length of the block to move
.1907bd		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.1907bf		e5 1a		sbc $1a		                SBC CURSORX
.1907c1		54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.1907c4		28		plp		                PLP
.1907c5		2b		pld		                PLD
.1907c6		68		pla		                PLA
.1907c7		7a		ply		                PLY
.1907c8		fa		plx		                PLX
.1907c9		6b		rtl		                RTL
.1907ca		da		phx		SCRSHIFTLR      PHX
.1907cb		48		pha		                PHA
.1907cc		0b		phd		                PHD
.1907cd		08		php		                PHP
.1907ce		48		pha		                PHA             ; begin setdp macro
.1907cf		08		php		                PHP
.1907d0		c2 20		rep #$20	                REP #$20        ; set A long
.1907d2		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1907d5		5b		tcd		                TCD
.1907d6		28		plp		                PLP
.1907d7		68		pla		                PLA             ; end setdp macro
.1907d8		c2 30		rep #$30	                REP #$30        ; set A&X long
.1907da		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.1907dc		1a		inc a		                INC A
.1907dd		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.1907df		b0 1b		bcs $1907fc	                BGE done            ; Yes: just skip the whole thing
.1907e1		38		sec		                SEC                 ; Calculate the length of the block to move
.1907e2		a5 0f		lda $0f		                LDA COLS_VISIBLE
.1907e4		e5 1a		sbc $1a		                SBC CURSORX
.1907e6		1a		inc a		                INC A
.1907e7		18		clc		                CLC
.1907e8		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.1907ea		3a		dec a		                DEC A
.1907eb		a8		tay		                TAY                 ; Make it the destination
.1907ec		3a		dec a		                DEC A               ; Move to the previous column
.1907ed		aa		tax		                TAX                 ; Make it the source
.1907ee		38		sec		                SEC                 ; Calculate the length of the block to move
.1907ef		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.1907f1		e5 1a		sbc $1a		                SBC CURSORX
.1907f3		44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.1907f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1907f8		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.1907fa		87 17		sta [$17]	                STA [CURSORPOS]
.1907fc		28		plp		done            PLP
.1907fd		2b		pld		                PLD
.1907fe		68		pla		                PLA
.1907ff		fa		plx		                PLX
.190800		6b		rtl		                RTL
.190801						IPUTB
.190801		6b		rtl		                RTL
.190802						IPRINTCR
.190802		da		phx		                PHX
.190803		5a		phy		                PHY
.190804		8b		phb		                PHB
.190805		0b		phd		                PHD
.190806		08		php		                PHP
.190807		48		pha		                PHA             ; begin setdbr macro
.190808		08		php		                PHP
.190809		e2 20		sep #$20	                SEP #$20        ; set A short
.19080b		a9 00		lda #$00	                LDA #0
.19080d		48		pha		                PHA
.19080e		ab		plb		                PLB
.19080f		28		plp		                PLP
.190810		68		pla		                PLA             ; end setdbr macro
.190811		48		pha		                PHA             ; begin setdp macro
.190812		08		php		                PHP
.190813		c2 20		rep #$20	                REP #$20        ; set A long
.190815		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190818		5b		tcd		                TCD
.190819		28		plp		                PLP
.19081a		68		pla		                PLA             ; end setdp macro
.19081b		e2 20		sep #$20	                SEP #$20        ; set A short
.19081d		c2 10		rep #$10	                REP #$10        ; set X long
.19081f		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.190823		f0 1c		beq $190841	                BEQ scr_printcr
.190825		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.190827		f0 06		beq $19082f	                BEQ uart_printcr    ; Yes: handle printing to the UART
.190829		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.19082b		f0 02		beq $19082f	                BEQ uart_printcr    ; Yes: handle printing to the UART
.19082d		80 1c		bra $19084b	                BRA done
.19082f		22 12 58 19	jsl $195812	uart_printcr    JSL UART_SELECT
.190833		a9 0d		lda #$0d	                LDA #CHAR_CR
.190835		22 18 10 00	jsl $001018	                JSL PUTC
.190839		a9 0a		lda #$0a	                LDA #CHAR_LF
.19083b		22 18 10 00	jsl $001018	                JSL PUTC
.19083f		80 0a		bra $19084b	                BRA done
.190841		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.190844		a4 1c		ldy $1c		                LDY CURSORY
.190846		c8		iny		                INY
.190847		22 84 10 00	jsl $001084	                JSL LOCATE
.19084b		28		plp		done            PLP
.19084c		2b		pld		                PLD
.19084d		ab		plb		                PLB
.19084e		7a		ply		                PLY
.19084f		fa		plx		                PLX
.190850		6b		rtl		                RTL
.190851		da		phx		ICSRHOME        PHX
.190852		5a		phy		                PHY
.190853		08		php		                PHP
.190854		a2 00 00	ldx #$0000	                LDX #0
.190857		a0 00 00	ldy #$0000	                LDY #0
.19085a		22 84 10 00	jsl $001084	                JSL LOCATE
.19085e		28		plp		                PLP
.19085f		7a		ply		                PLY
.190860		fa		plx		                PLX
.190861		6b		rtl		                RTL
.190862		da		phx		ICSRRIGHT       PHX
.190863		5a		phy		                PHY
.190864		48		pha		                PHA
.190865		0b		phd		                PHD
.190866		08		php		                PHP
.190867		22 9c 76 19	jsl $19769c	                JSL ANSI_CSRRIGHT
.19086b		28		plp		                PLP
.19086c		2b		pld		                PLD
.19086d		68		pla		                PLA
.19086e		7a		ply		                PLY
.19086f		fa		plx		                PLX
.190870		6b		rtl		                RTL
.190871						ICSRLEFT
.190871		da		phx		                PHX
.190872		5a		phy		                PHY
.190873		48		pha		                PHA
.190874		0b		phd		                PHD
.190875		08		php		                PHP
.190876		22 c7 76 19	jsl $1976c7	                JSL ANSI_CSRLEFT
.19087a		28		plp		                PLP
.19087b		2b		pld		                PLD
.19087c		68		pla		                PLA
.19087d		7a		ply		                PLY
.19087e		fa		plx		                PLX
.19087f		6b		rtl		                RTL
.190880						ICSRUP
.190880		da		phx		                PHX
.190881		5a		phy		                PHY
.190882		48		pha		                PHA
.190883		0b		phd		                PHD
.190884		08		php		                PHP
.190885		22 e5 76 19	jsl $1976e5	                JSL ANSI_CSRUP
.190889		28		plp		                PLP
.19088a		2b		pld		                PLD
.19088b		68		pla		                PLA
.19088c		7a		ply		                PLY
.19088d		fa		plx		                PLX
.19088e		6b		rtl		                RTL
.19088f		da		phx		ICSRDOWN        PHX
.190890		5a		phy		                PHY
.190891		0b		phd		                PHD
.190892		22 03 77 19	jsl $197703	                JSL ANSI_CSRDOWN
.190896		2b		pld		                PLD
.190897		7a		ply		                PLY
.190898		fa		plx		                PLX
.190899		6b		rtl		                RTL
.19089a		48		pha		ILOCATE         PHA
.19089b		0b		phd		                PHD
.19089c		08		php		                PHP
.19089d		22 26 77 19	jsl $197726	                JSL ANSI_LOCATE
.1908a1		28		plp		ilocate_done    PLP
.1908a2		2b		pld		                PLD
.1908a3		68		pla		                PLA
.1908a4		6b		rtl		                RTL
.1908a5						ISCROLLUP
.1908a5		48		pha		                PHA
.1908a6		da		phx		                PHX
.1908a7		5a		phy		                PHY
.1908a8		8b		phb		                PHB
.1908a9		0b		phd		                PHD
.1908aa		08		php		                PHP
.1908ab		22 8a 77 19	jsl $19778a	                JSL ANSI_SCROLLUP
.1908af		28		plp		                PLP
.1908b0		2b		pld		                PLD
.1908b1		ab		plb		                PLB
.1908b2		7a		ply		                PLY
.1908b3		fa		plx		                PLX
.1908b4		68		pla		                PLA
.1908b5		6b		rtl		                RTL
.1908b6		08		php		IPRINTH         PHP
.1908b7		48		pha		                PHA
.1908b8						iprinth1
.1908b8		e2 20		sep #$20	                SEP #$20        ; set A short
.1908ba		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.1908bd		4a		lsr a		                LSR
.1908be		4a		lsr a		                LSR
.1908bf		4a		lsr a		                LSR
.1908c0		4a		lsr a		                LSR
.1908c1		22 10 09 19	jsl $190910	                JSL iprint_digit
.1908c5		bd 00 00	lda $0000,x	                LDA #0,b,x
.1908c8		22 10 09 19	jsl $190910	                JSL iprint_digit
.1908cc		ca		dex		                DEX
.1908cd		88		dey		                DEY
.1908ce		d0 e8		bne $1908b8	                BNE iprinth1
.1908d0		68		pla		                PLA
.1908d1		28		plp		                PLP
.1908d2		6b		rtl		                RTL
.1908d3						IPRINTAH
.1908d3		48		pha		                PHA
.1908d4		08		php		                PHP
.1908d5		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.1908d9		08		php		                PHP                   ; Get the processor status into A
.1908da		e2 20		sep #$20	                SEP #$20        ; set A short
.1908dc		c2 10		rep #$10	                REP #$10        ; set X long
.1908de		68		pla		                PLA
.1908df		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.1908e1		c9 20		cmp #$20	                CMP #%00100000
.1908e3		f0 14		beq $1908f9	                BEQ eight_bit
.1908e5		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.1908e9		4a		lsr a		                LSR A
.1908ea		4a		lsr a		                LSR A
.1908eb		4a		lsr a		                LSR A
.1908ec		4a		lsr a		                LSR A
.1908ed		22 10 09 19	jsl $190910	                JSL iprint_digit      ; And print it
.1908f1		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.1908f5		22 10 09 19	jsl $190910	                JSL iprint_digit      ; And print it
.1908f9		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.1908fd		4a		lsr a		                LSR A
.1908fe		4a		lsr a		                LSR A
.1908ff		4a		lsr a		                LSR A
.190900		4a		lsr a		                LSR A
.190901		22 10 09 19	jsl $190910	                JSL iprint_digit      ; And print it
.190905		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.190909		22 10 09 19	jsl $190910	                JSL iprint_digit      ; And print it
.19090d		28		plp		                PLP
.19090e		68		pla		                PLA
.19090f		6b		rtl		                RTL
.190910		da		phx		iprint_digit    PHX
.190911		c2 20		rep #$20	                REP #$20        ; set A long
.190913		29 0f 00	and #$000f	                AND #$0F
.190916		aa		tax		                TAX
.190917		bf 79 88 19	lda $198879,x	                LDA hex_digits,X
.19091b		22 5d 07 19	jsl $19075d	                JSL IPUTC       ; Print the digit
.19091f		fa		plx		                PLX
.190920		6b		rtl		                RTL
.190921		48		pha		ICLRSCREEN	    PHA
.190922		da		phx		                PHX
.190923		08		php		                PHP
.190924		22 1f 78 19	jsl $19781f	                JSL ANSI_CLRSCREEN
.190928		28		plp		                PLP
.190929		fa		plx		                PLX
.19092a		68		pla		                PLA
.19092b		6b		rtl		                RTL
.19092c						COPYBYTES42
.19092c		08		php		                PHP
.19092d		0b		phd		                PHD
.19092e		48		pha		                PHA             ; begin setdp macro
.19092f		08		php		                PHP
.190930		c2 20		rep #$20	                REP #$20        ; set A long
.190932		a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.190935		5b		tcd		                TCD
.190936		28		plp		                PLP
.190937		68		pla		                PLA             ; end setdp macro
.190938		e2 20		sep #$20	                SEP #$20        ; set A short
.19093a		c2 10		rep #$10	                REP #$10        ; set X long
.19093c		a0 00 00	ldy #$0000	                LDY #0
.19093f		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.190941		97 04		sta [$04],y	                STA [TMPPTR2],Y
.190943		c8		iny		                INY
.190944		c0 2a 00	cpy #$002a	                CPY #42
.190947		d0 f6		bne $19093f	                BNE copy_loop
.190949		2b		pld		                PLD
.19094a		28		plp		                PLP
.19094b		60		rts		                RTS
.19094c						ICOLORFLAG
.19094c		48		pha		                PHA
.19094d		da		phx		                PHX
.19094e		5a		phy		                PHY
.19094f		08		php		                PHP
.190950		8b		phb		                PHB
.190951		0b		phd		                PHD
.190952		48		pha		                PHA             ; begin setdp macro
.190953		08		php		                PHP
.190954		c2 20		rep #$20	                REP #$20        ; set A long
.190956		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190959		5b		tcd		                TCD
.19095a		28		plp		                PLP
.19095b		68		pla		                PLA             ; end setdp macro
.19095c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19095e		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.190961		85 04		sta $04		                STA TMPPTR2
.190963		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.190966		85 06		sta $06		                STA TMPPTR2+2
.190968		a9 d6 84	lda #$84d6	                LDA #<>greet_clr_line1
.19096b		85 00		sta $00		                STA TMPPTR1
.19096d		a9 19 00	lda #$0019	                LDA #`greet_clr_line1
.190970		85 02		sta $02		                STA TMPPTR1+2
.190972		20 2c 09	jsr $19092c	                JSR COPYBYTES42
.190975		18		clc		                CLC
.190976		a5 04		lda $04		                LDA TMPPTR2
.190978		65 11		adc $11		                ADC COLS_PER_LINE
.19097a		85 04		sta $04		                STA TMPPTR2
.19097c		a9 00 85	lda #$8500	                LDA #<>greet_clr_line2
.19097f		85 00		sta $00		                STA TMPPTR1
.190981		a9 19 00	lda #$0019	                LDA #`greet_clr_line2
.190984		85 02		sta $02		                STA TMPPTR1+2
.190986		20 2c 09	jsr $19092c	                JSR COPYBYTES42
.190989		18		clc		                CLC
.19098a		a5 04		lda $04		                LDA TMPPTR2
.19098c		65 11		adc $11		                ADC COLS_PER_LINE
.19098e		85 04		sta $04		                STA TMPPTR2
.190990		a9 2a 85	lda #$852a	                LDA #<>greet_clr_line3
.190993		85 00		sta $00		                STA TMPPTR1
.190995		a9 19 00	lda #$0019	                LDA #`greet_clr_line3
.190998		85 02		sta $02		                STA TMPPTR1+2
.19099a		20 2c 09	jsr $19092c	                JSR COPYBYTES42
.19099d		18		clc		                CLC
.19099e		a5 04		lda $04		                LDA TMPPTR2
.1909a0		65 11		adc $11		                ADC COLS_PER_LINE
.1909a2		85 04		sta $04		                STA TMPPTR2
.1909a4		a9 54 85	lda #$8554	                LDA #<>greet_clr_line4
.1909a7		85 00		sta $00		                STA TMPPTR1
.1909a9		a9 19 00	lda #$0019	                LDA #`greet_clr_line4
.1909ac		85 02		sta $02		                STA TMPPTR1+2
.1909ae		20 2c 09	jsr $19092c	                JSR COPYBYTES42
.1909b1		18		clc		                CLC
.1909b2		a5 04		lda $04		                LDA TMPPTR2
.1909b4		65 11		adc $11		                ADC COLS_PER_LINE
.1909b6		85 04		sta $04		                STA TMPPTR2
.1909b8		a9 7e 85	lda #$857e	                LDA #<>greet_clr_line5
.1909bb		85 00		sta $00		                STA TMPPTR1
.1909bd		a9 19 00	lda #$0019	                LDA #`greet_clr_line5
.1909c0		85 02		sta $02		                STA TMPPTR1+2
.1909c2		20 2c 09	jsr $19092c	                JSR COPYBYTES42
.1909c5		2b		pld		                PLD
.1909c6		ab		plb		                PLB
.1909c7		28		plp		                PLP
.1909c8		7a		ply		                PLY
.1909c9		fa		plx		                PLX
.1909ca		68		pla		                PLA
.1909cb		6b		rtl		                RTL
.1909cc		0b		phd		IINITCHLUT		  PHD
.1909cd		08		php		                PHP
.1909ce		48		pha		                PHA
.1909cf		da		phx		                PHX
.1909d0		22 37 70 19	jsl $197037	                JSL ANSI_INIT_LUTS
.1909d4		fa		plx		                PLX
.1909d5		68		pla		                PLA
.1909d6		28		plp		                PLP
.1909d7		2b		pld		                PLD
.1909d8		6b		rtl		                RTL
.1909d9						IINITGAMMATABLE
.1909d9		e2 20		sep #$20	                SEP #$20        ; set A short
.1909db		c2 10		rep #$10	                REP #$10        ; set X long
.1909dd		a2 00 00	ldx #$0000	                ldx #$0000
.1909e0		bf 00 8d 19	lda $198d00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.1909e4		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.1909e8		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.1909ec		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.1909f0		e8		inx		                inx
.1909f1		e0 00 01	cpx #$0100	                cpx #$0100
.1909f4		d0 ea		bne $1909e0	                bne initgammaloop
.1909f6		c2 30		rep #$30	                REP #$30        ; set A&X long
.1909f8		6b		rtl		                RTL
.1909f9		48		pha		IINITALLLUT     PHA
.1909fa		da		phx		                PHX
.1909fb		a2 00 00	ldx #$0000	                LDX #$0000
.1909fe		e2 20		sep #$20	                SEP #$20        ; set A short
.190a00		a9 00		lda #$00	                LDA #$00
.190a02		85 0a		sta $0a		                STA $0A     ; Temp Location
.190a04						iinit_lut_loop
.190a04		86 02		stx $02		                STX $02
.190a06		a6 0a		ldx $0a		                LDX $0A
.190a08		bf 00 8c 19	lda $198c00,x	                LDA GAMMA_2_2_Tbl, x
.190a0c		49 55		eor #$55	                EOR  #$55
.190a0e		a6 02		ldx $02		                LDX $02
.190a10		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a14		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a18		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a1c		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a20		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a24		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a28		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a2c		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a30		e8		inx		                inx
.190a31		86 02		stx $02		                STX $02
.190a33		a6 0a		ldx $0a		                LDX $0A
.190a35		bf 00 8e 19	lda $198e00,x	                LDA RANDOM_LUT_Tbl, x
.190a39		a6 02		ldx $02		                LDX $02
.190a3b		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a3f		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a43		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a47		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a4b		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a4f		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a53		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a57		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a5b		e8		inx		                inx
.190a5c		86 02		stx $02		                STX $02
.190a5e		a6 0a		ldx $0a		                LDX $0A
.190a60		bf 00 8d 19	lda $198d00,x	                LDA GAMMA_1_8_Tbl, x
.190a64		49 aa		eor #$aa	                EOR  #$AA
.190a66		a6 02		ldx $02		                LDX $02
.190a68		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a6c		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a70		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a74		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a78		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a7c		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a80		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a84		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a88		e8		inx		                inx
.190a89		a9 ff		lda #$ff	                LDA #$FF
.190a8b		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a8f		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a93		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a97		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a9b		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a9f		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190aa3		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190aa7		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190aab		e6 0a		inc $0a		                inc $0A
.190aad		e8		inx		                inx
.190aae		e0 00 04	cpx #$0400	                cpx #$0400
.190ab1		f0 03		beq $190ab6	                beq iinit_lut_exit
.190ab3		82 4e ff	brl $190a04	                brl iinit_lut_loop
.190ab6						iinit_lut_exit
.190ab6		c2 30		rep #$30	                REP #$30        ; set A&X long
.190ab8		fa		plx		                PLX
.190ab9		68		pla		                PLA
.190aba		6b		rtl		                RTL
.190abb						INITVKYTXTMODE_BYPASS_DPSW
.190abb		48		pha		                PHA
.190abc		08		php		                PHP
.190abd		80 24		bra $190ae3	                BRA WeNeed640480Here
.190abf						IINITVKYTXTMODE
.190abf		48		pha		                PHA
.190ac0		08		php		                PHP
.190ac1		e2 20		sep #$20	                SEP #$20        ; set A short
.190ac3		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.190ac7		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.190ac9		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.190acb		f0 16		beq $190ae3	                BEQ WeNeed640480Here
.190acd		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190ad1		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.190ad3		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.190ad5		f0 33		beq $190b0a	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.190ad7		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.190adb		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.190add		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190ae1		80 27		bra $190b0a	                BRA INITVICKYMODEHIRES
.190ae3						WeNeed640480Here:
.190ae3		e2 20		sep #$20	                SEP #$20        ; set A short
.190ae5		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190ae9		29 01		and #$01	                AND #$01
.190aeb		c9 01		cmp #$01	                CMP #$01
.190aed		d0 15		bne $190b04	                BNE INITVICKYMODE
.190aef		a9 00		lda #$00	                LDA #$00
.190af1		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190af5		ea		nop		                NOP
.190af6		ea		nop		                NOP
.190af7		ea		nop		                NOP
.190af8		ea		nop		                NOP
.190af9		ea		nop		                NOP
.190afa		a9 01		lda #$01	                LDA #$01
.190afc		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190b00		ea		nop		                NOP
.190b01		ea		nop		                NOP
.190b02		ea		nop		                NOP
.190b03		ea		nop		                NOP
.190b04						INITVICKYMODE
.190b04		a9 00		lda #$00	                LDA #$00
.190b06		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.190b0a						INITVICKYMODEHIRES
.190b0a		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.190b0c		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.190b10		e2 20		sep #$20	                SEP #$20        ; set A short
.190b12		a9 00		lda #$00	                LDA #$00
.190b14		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.190b18		a9 54		lda #$54	                LDA #$54
.190b1a		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.190b1e		a9 54		lda #$54	                LDA #$54
.190b20		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.190b24		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.190b26		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.190b2a		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.190b2c		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.190b30		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.190b34		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b36		22 2c 11 00	jsl $00112c	                JSL SETSIZES                      ; Calculate the size of the text screen
.190b3a		28		plp		                PLP
.190b3b		68		pla		                PLA
.190b3c		6b		rtl		                RTL
.190b3d						ISETSIZES
.190b3d		48		pha		                PHA
.190b3e		da		phx		                PHX
.190b3f		5a		phy		                PHY
.190b40		8b		phb		                PHB
.190b41		0b		phd		                PHD
.190b42		08		php		                PHP
.190b43		48		pha		                PHA             ; begin setdp macro
.190b44		08		php		                PHP
.190b45		c2 20		rep #$20	                REP #$20        ; set A long
.190b47		a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.190b4a		5b		tcd		                TCD
.190b4b		28		plp		                PLP
.190b4c		68		pla		                PLA             ; end setdp macro
.190b4d		48		pha		                PHA             ; begin setdbr macro
.190b4e		08		php		                PHP
.190b4f		e2 20		sep #$20	                SEP #$20        ; set A short
.190b51		a9 00		lda #$00	                LDA #0
.190b53		48		pha		                PHA
.190b54		ab		plb		                PLB
.190b55		28		plp		                PLP
.190b56		68		pla		                PLA             ; end setdbr macro
.190b57		e2 30		sep #$30	                SEP #$30        ; set A&X short
.190b59		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190b5d		29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.190b5f		0a		asl a		                ASL A
.190b60		aa		tax		                TAX                         ; Index to the col/line count in X
.190b61		c2 20		rep #$20	                REP #$20        ; set A long
.190b63		bf e0 0b 19	lda $190be0,x	                LDA cols_by_res,X           ; Get the number of columns
.190b67		85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.190b69		85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.190b6b		bf e8 0b 19	lda $190be8,x	                LDA lines_by_res,X          ; Get the number of lines
.190b6f		85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.190b71		85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.190b73		e2 20		sep #$20	                SEP #$20        ; set A short
.190b75		af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.190b79		89 01		bit #$01	                BIT #Border_Ctrl_Enable
.190b7b		f0 5c		beq $190bd9	                BEQ done                    ; No border... the sizes are correct now
.190b7d		af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.190b81		29 3f		and #$3f	                AND #$3F
.190b83		89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.190b85		d0 04		bne $190b8b	                BNE frac_width
.190b87		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.190b88		4a		lsr a		                LSR A
.190b89		80 03		bra $190b8e	                BRA store_width
.190b8b		4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.190b8c		4a		lsr a		                LSR A                       ; because a column is partially hidden
.190b8d		1a		inc a		                INC A
.190b8e		85 00		sta $00		store_width     STA TMPPTR1
.190b90		64 01		stz $01		                STZ TMPPTR1+1
.190b92		e2 20		sep #$20	                SEP #$20        ; set A short
.190b94		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.190b98		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.190b9a		f0 04		beq $190ba0	                BEQ adjust_width            ; No... just adjust the width of the screen
.190b9c		c2 20		rep #$20	                REP #$20        ; set A long
.190b9e		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.190ba0						adjust_width
.190ba0		c2 20		rep #$20	                REP #$20        ; set A long
.190ba2		38		sec		                SEC
.190ba3		a5 11		lda $11		                LDA COLS_PER_LINE
.190ba5		e5 00		sbc $00		                SBC TMPPTR1
.190ba7		85 0f		sta $0f		                STA COLS_VISIBLE
.190ba9		af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.190bad		29 3f 00	and #$003f	                AND #$3F
.190bb0		89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.190bb3		d0 04		bne $190bb9	                BNE frac_height
.190bb5		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.190bb6		4a		lsr a		                LSR A
.190bb7		80 03		bra $190bbc	                BRA store_height
.190bb9		4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.190bba		4a		lsr a		                LSR A                       ; because a column is partially hidden
.190bbb		1a		inc a		                INC A
.190bbc		85 00		sta $00		store_height    STA TMPPTR1
.190bbe		64 01		stz $01		                STZ TMPPTR1+1
.190bc0		e2 20		sep #$20	                SEP #$20        ; set A short
.190bc2		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.190bc6		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.190bc8		f0 04		beq $190bce	                BEQ adjust_height           ; No... just adjust the height of the screen
.190bca		c2 20		rep #$20	                REP #$20        ; set A long
.190bcc		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.190bce						adjust_height
.190bce		c2 20		rep #$20	                REP #$20        ; set A long
.190bd0		38		sec		                SEC
.190bd1		a5 15		lda $15		                LDA LINES_MAX
.190bd3		e5 00		sbc $00		                SBC TMPPTR1
.190bd5		85 13		sta $13		                STA LINES_VISIBLE
.190bd7		c2 30		rep #$30	                REP #$30        ; set A&X long
.190bd9		28		plp		done            PLP
.190bda		2b		pld		                PLD
.190bdb		ab		plb		                PLB
.190bdc		7a		ply		                PLY
.190bdd		fa		plx		                PLX
.190bde		68		pla		                PLA
.190bdf		6b		rtl		                RTL
>190be0		50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>190be8		3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.190bf0						IINITVKYGRPMODE
.190bf0		48		pha		                PHA
.190bf1		e2 20		sep #$20	                SEP #$20        ; set A short
.190bf3		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190bf5		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.190bf9		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190bfb		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.190bff		a9 c0		lda #$c0	                LDA #$C0
.190c01		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.190c05		a9 00		lda #$00	                LDA #$00
.190c07		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.190c0b		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190c0d		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.190c11		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190c13		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.190c17		a9 c0		lda #$c0	                LDA #$C0
.190c19		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.190c1d		a9 00		lda #$00	                LDA #$00
.190c1f		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.190c23		c2 30		rep #$30	                REP #$30        ; set A&X long
.190c25		68		pla		                PLA
.190c26		6b		rtl		                RTL
.190c27						IINITTILEMODE
.190c27		6b		rtl		                RTL
.190c28						IREADVRAM
.190c28		08		php		                PHP
.190c29		e2 20		sep #$20	                SEP #$20        ; set A short
.190c2b		bd 00 00	lda $0000,x	                LDA #0,B,X                      ; Request the byte
.190c2e		c2 20		rep #$20	                REP #$20        ; set A long
.190c30		af 02 09 af	lda $af0902	wait_loop       LDA @l VMEM2CPU_Fifo_Count_LO   ; Wait for the FIFO to have data
.190c34		89 00 80	bit #$8000	                BIT #$8000
.190c37		d0 f7		bne $190c30	                BNE wait_loop
.190c39		e2 20		sep #$20	                SEP #$20        ; set A short
.190c3b		af 01 09 af	lda $af0901	                LDA @l VMEM2CPU_Data_Port
.190c3f		28		plp		                PLP
.190c40		6b		rtl		                RTL
.190c41		6b		rtl		INOP            RTL
.190c42						IINITFONTSET
.190c42		48		pha		                PHA
.190c43		da		phx		                PHX
.190c44		5a		phy		                PHY
.190c45		8b		phb		                PHB
.190c46		08		php		                PHP
.190c47		c2 30		rep #$30	                REP #$30        ; set A&X long
.190c49		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.190c4c		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.190c4f		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.190c52		54 af 1f	mvn $1f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.190c55		28		plp		                PLP
.190c56		ab		plb		                PLB
.190c57		7a		ply		                PLY
.190c58		fa		plx		                PLX
.190c59		68		pla		                PLA
.190c5a		6b		rtl		                RTL
.190c5b						INITMOUSEPOINTER
.190c5b		e2 20		sep #$20	                SEP #$20        ; set A short
.190c5d		c2 10		rep #$10	                REP #$10        ; set X long
.190c5f		a2 00 00	ldx #$0000	                LDX #$0000
.190c62						FILL_MOUSE_MARKER
.190c62		bf 00 8f 19	lda $198f00,x	                LDA @lMOUSE_POINTER_PTR,X
.190c66		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.190c6a		e8		inx		                INX
.190c6b		e0 00 01	cpx #$0100	                CPX #$0100
.190c6e		d0 f2		bne $190c62	                BNE FILL_MOUSE_MARKER
.190c70		ea		nop		                nop
.190c71		a9 01		lda #$01	                LDA #$01
.190c73		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.190c77		c2 30		rep #$30	                REP #$30        ; set A&X long
.190c79		6b		rtl		                RTL
.190c7a						IINITCURSOR
.190c7a		e2 20		sep #$20	                SEP #$20        ; set A short
.190c7c		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.190c7e		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.190c82		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.190c84		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.190c88		c2 30		rep #$30	                REP #$30        ; set A&X long
.190c8a		a9 00 00	lda #$0000	                LDA #$0000;
.190c8d		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.190c91		a9 06 00	lda #$0006	                LDA #$0006;
.190c94		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.190c98		6b		rtl		                RTL
.190c99		0b		phd		IINITSUPERIO	  PHD
.190c9a		08		php		                PHP
.190c9b		48		pha		                PHA
.190c9c		e2 20		sep #$20	                SEP #$20        ; set A short
.190c9e		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190ca0		8f 23 11 af	sta $af1123	                STA GP10_REG
.190ca4		af 23 11 af	lda $af1123	                LDA GP10_REG
.190ca8		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190caa		8f 24 11 af	sta $af1124	                STA GP11_REG
.190cae		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190cb0		8f 25 11 af	sta $af1125	                STA GP12_REG
.190cb4		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190cb6		8f 26 11 af	sta $af1126	                STA GP13_REG
.190cba		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.190cbc		8f 27 11 af	sta $af1127	                STA GP14_REG
.190cc0		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.190cc2		8f 28 11 af	sta $af1128	                STA GP15_REG
.190cc6		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.190cc8		8f 29 11 af	sta $af1129	                STA GP16_REG
.190ccc		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.190cce		8f 2a 11 af	sta $af112a	                STA GP17_REG
.190cd2		a9 00		lda #$00	                LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.190cd4		8f 2b 11 af	sta $af112b	                STA GP20_REG
.190cd8		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190cda		8f 2f 11 af	sta $af112f	                STA GP24_REG
.190cde		a9 05		lda #$05	                LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.190ce0		8f 30 11 af	sta $af1130	                STA GP25_REG
.190ce4		a9 84		lda #$84	                LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.190ce6		8f 31 11 af	sta $af1131	                STA GP26_REG
.190cea		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.190cec		8f 33 11 af	sta $af1133	                STA GP30_REG
.190cf0		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.190cf2		8f 34 11 af	sta $af1134	                STA GP31_REG
.190cf6		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.190cf8		8f 35 11 af	sta $af1135	                STA GP32_REG
.190cfc		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.190cfe		8f 36 11 af	sta $af1136	                STA GP33_REG
.190d02		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.190d04		8f 37 11 af	sta $af1137	                STA GP34_REG
.190d08		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.190d0a		8f 38 11 af	sta $af1138	                STA GP35_REG
.190d0e		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.190d10		8f 39 11 af	sta $af1139	                STA GP36_REG
.190d14		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.190d16		8f 3a 11 af	sta $af113a	                STA GP37_REG
.190d1a		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190d1c		8f 3d 11 af	sta $af113d	                STA GP42_REG
.190d20		a9 01		lda #$01	                LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.190d22		8f 3e 11 af	sta $af113e	                STA GP43_REG
.190d26		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.190d28		8f 3f 11 af	sta $af113f	                STA GP50_REG
.190d2c		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.190d2e		8f 40 11 af	sta $af1140	                STA GP51_REG
.190d32		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.190d34		8f 41 11 af	sta $af1141	                STA GP52_REG
.190d38		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.190d3a		8f 42 11 af	sta $af1142	                STA GP53_REG
.190d3e		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.190d40		8f 43 11 af	sta $af1143	                STA GP54_REG
.190d44		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.190d46		8f 44 11 af	sta $af1144	                STA GP55_REG
.190d4a		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.190d4c		8f 45 11 af	sta $af1145	                STA GP56_REG
.190d50		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.190d52		8f 46 11 af	sta $af1146	                STA GP57_REG
.190d56		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.190d58		8f 47 11 af	sta $af1147	                STA GP60_REG
.190d5c		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.190d5e		8f 48 11 af	sta $af1148	                STA GP61_REG
.190d62		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.190d64		8f 4b 11 af	sta $af114b	                STA GP1_REG
.190d68		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.190d6a		8f 4c 11 af	sta $af114c	                STA GP2_REG
.190d6e		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.190d70		8f 4d 11 af	sta $af114d	                STA GP3_REG
.190d74		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.190d76		8f 4e 11 af	sta $af114e	                STA GP4_REG
.190d7a		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.190d7c		8f 4f 11 af	sta $af114f	                STA GP5_REG
.190d80		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.190d82		8f 50 11 af	sta $af1150	                STA GP6_REG
.190d86		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.190d88		8f 5d 11 af	sta $af115d	                STA LED1_REG
.190d8c		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.190d8e		8f 5e 11 af	sta $af115e	                STA LED2_REG
.190d92		c2 20		rep #$20	                REP #$20        ; set A long
.190d94		68		pla		                PLA
.190d95		28		plp			              PLP
.190d96		2b		pld				            PLD
.190d97		6b		rtl		                RTL
.190d98						Poll_Inbuf
.190d98		af 07 18 af	lda $af1807	                LDA STATUS_PORT		; Load Status Byte
.190d9c		29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.190d9e		c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.190da0		f0 f6		beq $190d98					        BEQ Poll_Inbuf
.190da2		60		rts		                RTS
.190da3						Poll_Outbuf
.190da3		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.190da7		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.190da9		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.190dab		d0 f6		bne $190da3	                BNE Poll_Outbuf
.190dad		60		rts		                RTS
.190dae		48		pha		INITRTC         PHA
.190daf		08		php		                PHP
.190db0		e2 20		sep #$20	                SEP #$20        ; set A short
.190db2		a9 00		lda #$00	                LDA #0
.190db4		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.190db8		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.190dbc		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.190dc0		09 04		ora #$04	                ORA #%00000100
.190dc2		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.190dc6		28		plp		                PLP
.190dc7		68		pla		                PLA
.190dc8		6b		rtl		                RTL
.190dc9		48		pha		IINITCODEC      PHA
.190dca		08		php		                PHP
.190dcb		c2 20		rep #$20	                REP #$20        ; set A long
.190dcd		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.190dd0		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190dd4		a9 01 00	lda #$0001	                LDA #$0001
.190dd7		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190ddb		20 6c 0e	jsr $190e6c	                JSR CODEC_TRF_FINISHED
.190dde		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.190de1		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190de5		a9 01 00	lda #$0001	                LDA #$0001
.190de8		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190dec		20 6c 0e	jsr $190e6c	                JSR CODEC_TRF_FINISHED
.190def		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.190df2		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190df6		a9 01 00	lda #$0001	                LDA #$0001
.190df9		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190dfd		20 6c 0e	jsr $190e6c	                JSR CODEC_TRF_FINISHED
.190e00		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.190e03		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190e07		a9 01 00	lda #$0001	                LDA #$0001
.190e0a		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190e0e		20 6c 0e	jsr $190e6c	                JSR CODEC_TRF_FINISHED
.190e11		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.190e14		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190e18		a9 01 00	lda #$0001	                LDA #$0001
.190e1b		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190e1f		20 6c 0e	jsr $190e6c	                JSR CODEC_TRF_FINISHED
.190e22		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.190e25		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190e29		a9 01 00	lda #$0001	                LDA #$0001
.190e2c		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190e30		20 6c 0e	jsr $190e6c	                JSR CODEC_TRF_FINISHED
.190e33		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.190e36		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190e3a		a9 01 00	lda #$0001	                LDA #$0001
.190e3d		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190e41		20 6c 0e	jsr $190e6c	                JSR CODEC_TRF_FINISHED
.190e44		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.190e47		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190e4b		a9 01 00	lda #$0001	                LDA #$0001
.190e4e		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190e52		20 6c 0e	jsr $190e6c	                JSR CODEC_TRF_FINISHED
.190e55		28		plp		                PLP
.190e56		68		pla		                PLA
.190e57		6b		rtl		                RTL
.190e58						IRESETCODEC
.190e58		c2 20		rep #$20	                REP #$20        ; set A long
.190e5a		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.190e5d		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190e61		a9 01 00	lda #$0001	                LDA #$0001
.190e64		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190e68		20 6c 0e	jsr $190e6c	                JSR CODEC_TRF_FINISHED
.190e6b		6b		rtl		                RTL
.190e6c						CODEC_TRF_FINISHED
.190e6c		e2 20		sep #$20	                SEP #$20        ; set A short
.190e6e		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.190e72		29 01		and #$01	                AND #$01
.190e74		c9 01		cmp #$01	                CMP #$01
.190e76		f0 f6		beq $190e6e	                BEQ CODEC_LOOP
.190e78		c2 20		rep #$20	                REP #$20        ; set A long
.190e7a		60		rts		                RTS
.190e7b						IBM_FILL_SCREEN
.190e7b		c2 30		rep #$30	                REP #$30        ; set A&X long
.190e7d		a9 00 00	lda #$0000	                LDA #$0000
.190e80		a2 00 00	ldx #$0000	                LDX #$0000
.190e83						BM_FILL_SCREEN_LOOPY
.190e83		a0 00 00	ldy #$0000	                LDY #$0000
.190e86		e2 20		sep #$20	                SEP #$20        ; set A short
.190e88						BM_FILL_SCREEN_LOOPX
.190e88		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190e8a		c8		iny		                INY
.190e8b		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.190e8d		d0 f9		bne $190e88	                BNE BM_FILL_SCREEN_LOOPX
.190e8f		20 9a 0e	jsr $190e9a	                JSR BM_FILL_COMPUTE_Y_DST
.190e92		e8		inx		                INX
.190e93		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.190e95		d0 ec		bne $190e83	                BNE BM_FILL_SCREEN_LOOPY
.190e97		c2 30		rep #$30	                REP #$30        ; set A&X long
.190e99		6b		rtl		                RTL
.190e9a						BM_FILL_COMPUTE_Y_DST
.190e9a		c2 20		rep #$20	                REP #$20        ; set A long
.190e9c		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190e9e		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190ea2		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.190ea4		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190ea8		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.190eab		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190eaf		a9 00 00	lda #$0000	                LDA #$0000
.190eb2		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190eb6		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190eba		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190ebc		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190ec0		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190ec2		a9 00 00	lda #$0000	                LDA #$0000
.190ec5		60		rts		                RTS
.190ec6						IBMP_PARSER
.190ec6		c2 30		rep #$30	                REP #$30        ; set A&X long
.190ec8		a0 00 00	ldy #$0000	                LDY #$0000
.190ecb		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.190ecd		c9 42 4d	cmp #$4d42	                CMP #$4D42
.190ed0		f0 03		beq $190ed5	                BEQ IBMP_PARSER_CONT
.190ed2		82 04 01	brl $190fd9	                BRL BMP_PARSER_END_WITH_ERROR
.190ed5						IBMP_PARSER_CONT
.190ed5		a0 02 00	ldy #$0002	                LDY #$0002
.190ed8		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.190eda		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190ede		a0 04 00	ldy #$0004	                LDY #$0004
.190ee1		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.190ee3		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190ee7		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.190eea		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190eee		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190ef2		18		clc		                CLC
.190ef3		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190ef7		85 50		sta $50		                STA BMP_FILE_SIZE
.190ef9		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190efd		85 52		sta $52		                STA BMP_FILE_SIZE+2
.190eff		a0 12 00	ldy #$0012	                LDY #$0012
.190f02		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190f04		85 40		sta $40		                STA BMP_X_SIZE
.190f06		a0 16 00	ldy #$0016	                LDY #$0016
.190f09		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190f0b		85 42		sta $42		                STA BMP_Y_SIZE
.190f0d		a0 2e 00	ldy #$002e	                LDY #$002E
.190f10		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190f12		0a		asl a		                ASL A; Multiply by 2
.190f13		0a		asl a		                ASL A; Multiply by 2
.190f14		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.190f16		e0 00 00	cpx #$0000	                CPX #$0000
.190f19		d0 05		bne $190f20	                BNE BMP_LUT1_PICK
.190f1b		20 e1 0f	jsr $190fe1	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.190f1e		80 08		bra $190f28	                BRA DONE_TRANSFER_LUT;
.190f20						  BMP_LUT1_PICK
.190f20		e0 01 00	cpx #$0001	                CPX #$0001
.190f23		d0 03		bne $190f28	                BNE BMP_LUT2_PICK
.190f25		20 11 10	jsr $191011	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.190f28						  BMP_LUT2_PICK
.190f28						  DONE_TRANSFER_LUT
.190f28		a5 56		lda $56		                LDA BMP_POSITION_Y
.190f2a		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.190f2e		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.190f30		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.190f34		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.190f38		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190f3c		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.190f40		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190f44		a5 54		lda $54		                LDA BMP_POSITION_X
.190f46		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.190f4a		a9 00 00	lda #$0000	                LDA #$0000
.190f4d		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190f51		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.190f55		85 f0		sta $f0		                STA USER_TEMP
.190f57		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.190f5b		85 f2		sta $f2		                STA USER_TEMP+2
.190f5d		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190f5f		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190f63		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190f65		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190f69		a5 f0		lda $f0		                LDA USER_TEMP
.190f6b		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.190f6f		a5 f2		lda $f2		                LDA USER_TEMP+2
.190f71		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.190f75		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.190f79		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190f7b		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.190f7f		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190f81		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.190f83		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190f87		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.190f89		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190f8d		a5 50		lda $50		                LDA BMP_FILE_SIZE
.190f8f		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190f93		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.190f95		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190f99		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190f9d		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190f9f		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190fa3		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190fa5		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190fa7		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190fab		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190fad		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190fb1		18		clc		                CLC
.190fb2		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.190fb4		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.190fb7		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.190fba		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.190fbe		a9 ff ff	lda #$ffff	                LDA #$FFFF
.190fc1		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.190fc5		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190fc9		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190fcb		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190fcf		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190fd1		20 41 10	jsr $191041	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.190fd4		a2 3a 87	ldx #$873a	                LDX #<>bmp_parser_msg0
.190fd7		80 03		bra $190fdc	                BRA BMP_PARSER_END_NO_ERROR
.190fd9						BMP_PARSER_END_WITH_ERROR
.190fd9		a2 26 87	ldx #$8726	                LDX #<>bmp_parser_err0
.190fdc						BMP_PARSER_END_NO_ERROR
.190fdc		22 3d 07 19	jsl $19073d	                JSL IPRINT       ; print the first line
.190fe0		6b		rtl		                RTL
.190fe1						BMP_PARSER_UPDATE_LUT0
.190fe1		38		sec		                SEC
.190fe2		a0 7a 00	ldy #$007a	                LDY #$007A
.190fe5		a2 00 00	ldx #$0000	                LDX #$0000
.190fe8		e2 20		sep #$20	                SEP #$20        ; set A short
.190fea						BMP_PARSER_UPDATE_LOOP
.190fea		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190fec		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.190ff0		c8		iny		                INY
.190ff1		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190ff3		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.190ff7		c8		iny		                INY
.190ff8		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190ffa		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.190ffe		c8		iny		                INY
.190fff		a9 80		lda #$80	                LDA #$80
.191001		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.191005		c8		iny		                INY ; For the Alpha Value, nobody cares
.191006		e8		inx		                INX
.191007		e8		inx		                INX
.191008		e8		inx		                INX
.191009		e8		inx		                INX
.19100a		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.19100c		d0 dc		bne $190fea	                BNE BMP_PARSER_UPDATE_LOOP
.19100e		c2 20		rep #$20	                REP #$20        ; set A long
.191010		60		rts		                RTS
.191011						BMP_PARSER_UPDATE_LUT1
.191011		38		sec		                SEC
.191012		a0 36 00	ldy #$0036	                LDY #$0036
.191015		a2 00 00	ldx #$0000	                LDX #$0000
.191018		e2 20		sep #$20	                SEP #$20        ; set A short
.19101a						PALETTE_LUT1_LOOP
.19101a		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.19101c		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.191020		c8		iny		                INY
.191021		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.191023		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.191027		c8		iny		                INY
.191028		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.19102a		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.19102e		c8		iny		                INY
.19102f		a9 80		lda #$80	                LDA #$80
.191031		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.191035		c8		iny		                INY ; For the Alpha Value, nobody cares
.191036		e8		inx		                INX
.191037		e8		inx		                INX
.191038		e8		inx		                INX
.191039		e8		inx		                INX
.19103a		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.19103c		d0 dc		bne $19101a	                BNE PALETTE_LUT1_LOOP
.19103e		c2 20		rep #$20	                REP #$20        ; set A long
.191040		60		rts		                RTS
.191041						BMP_PARSER_DMA_SHIT_OUT
.191041		a2 00 00	ldx #$0000	                LDX #$0000
.191044						BMP_PARSER_LOOPY
.191044		a0 00 00	ldy #$0000	                LDY #$0000
.191047		e2 20		sep #$20	                SEP #$20        ; set A short
.191049						BMP_PARSER_LOOPX
.191049		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.19104b		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.19104d		c8		iny		                INY
.19104e		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.191050		d0 f7		bne $191049	                BNE BMP_PARSER_LOOPX
.191052		20 5e 10	jsr $19105e	                JSR BMP_PARSER_COMPUTE_Y_SRC
.191055		20 79 10	jsr $191079	                JSR BMP_PARSER_COMPUTE_Y_DST
.191058		e8		inx		                INX
.191059		e4 42		cpx $42		                CPX BMP_Y_SIZE
.19105b		d0 e7		bne $191044	                BNE BMP_PARSER_LOOPY
.19105d		60		rts		                RTS
.19105e						BMP_PARSER_COMPUTE_Y_SRC
.19105e		c2 20		rep #$20	                REP #$20        ; set A long
.191060		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.191062		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.191066		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.191068		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.19106c		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.191070		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.191072		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.191076		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.191078		60		rts		                RTS
.191079						BMP_PARSER_COMPUTE_Y_DST
.191079		c2 20		rep #$20	                REP #$20        ; set A long
.19107b		18		clc		                CLC
.19107c		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.19107e		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.191080		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.191082		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.191084		69 00 00	adc #$0000	                ADC #$0000
.191087		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.191089		60		rts		                RTS
.19108a		ea		nop		ILOOP           NOP
.19108b		ea		nop		                NOP
.19108c		ea		nop		                NOP
.19108d		ea		nop		                NOP
.19108e		ea		nop		                NOP
.19108f		ea		nop		                NOP
.191090		ea		nop		                NOP
.191091		ea		nop		                NOP
.191092		ea		nop		                NOP
.191093		ea		nop		                NOP
.191094		6b		rtl		                RTL
.191095		22 8a 10 19	jsl $19108a	ILOOP_1         JSL ILOOP
.191099		22 8a 10 19	jsl $19108a	                JSL ILOOP
.19109d		22 8a 10 19	jsl $19108a	                JSL ILOOP
.1910a1		22 8a 10 19	jsl $19108a	                JSL ILOOP
.1910a5		22 8a 10 19	jsl $19108a	                JSL ILOOP
.1910a9		22 8a 10 19	jsl $19108a	                JSL ILOOP
.1910ad		22 8a 10 19	jsl $19108a	                JSL ILOOP
.1910b1		22 8a 10 19	jsl $19108a	                JSL ILOOP
.1910b5		22 8a 10 19	jsl $19108a	                JSL ILOOP
.1910b9		22 8a 10 19	jsl $19108a	                JSL ILOOP
.1910bd		6b		rtl		                RTL
.1910be		22 95 10 19	jsl $191095	ILOOP_1MS       JSL ILOOP_1
.1910c2		6b		rtl		                RTL
.1910c3		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.1910c6		f0 07		beq $1910cf	                BEQ LOOP_MS_END
.1910c8		22 be 10 19	jsl $1910be	                JSL ILOOP_1MS
.1910cc		ca		dex		                DEX
.1910cd		80 f4		bra $1910c3	                BRA ILOOP_MS
.1910cf		6b		rtl		LOOP_MS_END     RTL
.1910d0						IDELAY
.1910d0		8b		phb		                PHB
.1910d1		08		php		                PHP
.1910d2		48		pha		                PHA             ; begin setdbr macro
.1910d3		08		php		                PHP
.1910d4		e2 20		sep #$20	                SEP #$20        ; set A short
.1910d6		a9 00		lda #$00	                LDA #0
.1910d8		48		pha		                PHA
.1910d9		ab		plb		                PLB
.1910da		28		plp		                PLP
.1910db		68		pla		                PLA             ; end setdbr macro
.1910dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1910de		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.1910e0		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.1910e4		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.1910e8		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.1910ea		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.1910ee		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.1910f0		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.1910f3		a9 00		lda #$00	                LDA #0
.1910f5		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.1910f9		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.1910fd		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.191101		c2 30		rep #$30	                REP #$30        ; set A&X long
.191103		8a		txa		                TXA
.191104		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.191108		98		tya		                TYA
.191109		e2 20		sep #$20	                SEP #$20        ; set A short
.19110b		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.19110f		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.191111		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.191115		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.191117		cb		wai		loop            WAI                         ; Wait for an interrupt
.191118		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.19111b		f0 fa		beq $191117	                BEQ loop                    ; Keep checking until it's set
.19111d		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.19111f		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.191123		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.191125		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.191128		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.19112c		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.19112e		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.191132		28		plp		                PLP
.191133		ab		plb		                PLB
.191134		6b		rtl		                RTL
.191135						SHOW_CREDITS
.191135		48		pha		                PHA
.191136		da		phx		                PHX
.191137		5a		phy		                PHY
.191138		08		php		                PHP
.191139		e2 20		sep #$20	                SEP #$20        ; set A short
.19113b		c2 10		rep #$10	                REP #$10        ; set X long
.19113d		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.191141		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.191143		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.191147		a2 00 00	ldx #$0000	                LDX #0
.19114a		bf 00 00 1b	lda $1b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.19114e		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.191152		bf 00 18 1b	lda $1b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.191156		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.19115a		e8		inx		                INX
.19115b		e0 00 20	cpx #$2000	                CPX #128 * 64
.19115e		d0 ea		bne $19114a	                BNE credit_loop
.191160		22 d7 06 19	jsl $1906d7	                JSL IGETCHW                     ; Wait for a keypress
.191164		22 21 09 19	jsl $190921	                JSL ICLRSCREEN                  ; Then clear the screen and return
.191168		22 51 08 19	jsl $190851	                JSL ICSRHOME                    ; Move cursor to the home position
.19116c		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.191170		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.191172		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.191176		28		plp		                PLP
.191177		7a		ply		                PLY
.191178		fa		plx		                PLX
.191179		68		pla		                PLA
.19117a		6b		rtl		                RTL
.19117b		00		brk #		ISCINIT         BRK ;
.19117c		00		brk #		IIOINIT         BRK ;
.19117d		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.19117e		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.19117f		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.191180		00		brk #		ICLOSE          BRK ; Close a channel
.191181		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.191182		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.191183		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.191184		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.191185		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.191186		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.191187		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.191188		00		brk #		IPRINTF         BRK ; Print a float value
.191189		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.19118a		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.19118b		00		brk #		IPUSHKEY        BRK ;
.19118c		00		brk #		IPUSHKEYS       BRK ;
.19118d		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.19118e		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.19118f		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>191190		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>191198		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>1911a8		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>1911b0		12
>1911b1		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>1911b9		15
>1911ba		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>1911c0		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>1911c5		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Instruments.asm

>1911cb		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>1911d3		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>1911e1		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>1911e9		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>1911f7		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>1911ff		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>19120d		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>191215		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>191223		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>19122b		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>191239		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>191241		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>19124f		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>191257		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>191265		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>19126d		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>19127b		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>191283		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>191291		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>191299		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>1912a7		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>1912af		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>1912bd		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>1912c5		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>1912d3		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>1912db		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>1912e9		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>1912f1		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>1912ff		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>191307		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>191315		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>19131d		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>19132b		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>191333		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>191341		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>191349		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>191357		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>19135f		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>19136d		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>191375		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>191383		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>19138b		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>191399		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>1913a1		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>1913af		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>1913b7		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>1913c5		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>1913cd		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>1913db		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>1913e3		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>1913f1		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>1913f9		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>191407		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>19140f		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>19141d		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>191425		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>191433		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>19143b		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>191449		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>191451		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>19145f		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>191467		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>191475		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>19147d		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>19148b		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>191493		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>1914a1		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>1914a9		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>1914b7		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>1914bf		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>1914cd		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>1914d5		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>1914e3		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>1914eb		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>1914f9		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>191501		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>19150f		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>191517		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>191525		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>19152d		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>19153b		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>191543		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>191551		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>191559		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>191567		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>19156f		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>19157d		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>191585		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>191593		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>19159b		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>1915a9		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>1915b1		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>1915bf		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>1915c7		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>1915d5		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>1915dd		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>1915eb		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>1915f3		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>191601		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>191609		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>191617		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>19161f		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>19162d		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>191635		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>191643		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>19164b		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>191659		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>191661		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>19166f		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>191677		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>191685		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>19168d		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>19169b		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>1916a3		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>1916b1		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>1916b9		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>1916c7		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>1916cf		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>1916dd		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>1916e5		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>1916f3		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>1916fb		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>191709		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>191711		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>19171f		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>191727		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>191735		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>19173d		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>19174b		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>191753		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>191761		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>191769		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>191777		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>19177f		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>19178d		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>191795		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>1917a3		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>1917ab		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>1917b9		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>1917c1		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>1917cf		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>1917d7		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>1917e5		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>1917ed		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>1917fb		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>191803		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>191811		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>191819		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>191827		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>19182f		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>19183d		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>191845		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>191853		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>19185b		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>191869		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>191871		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>19187f		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>191887		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>191895		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>19189d		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>1918ab		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>1918b3		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>1918c1		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>1918c9		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>1918d7		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>1918df		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>1918ed		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>1918f5		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>191903		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>19190b		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>191919		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>191921		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>19192f		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>191937		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>191945		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>19194d		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>19195b		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>191963		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>191971		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>191979		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>191987		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>19198f		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>19199d		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>1919a5		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>1919b3		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>1919bb		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>1919c9		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>1919d1		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>1919df		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>1919e7		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>1919f5		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>1919fd		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>191a0b		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>191a13		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>191a21		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>191a29		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>191a37		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>191a3f		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>191a4d		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>191a55		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>191a63		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>191a6b		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>191a79		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>191a81		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>191a8f		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>191a97		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>191aa5		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>191aad		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>191abb		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>191ac3		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>191ad1		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>191ad9		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>191ae7		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>191aef		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>191afd		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>191b05		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>191b13		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>191b1b		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>191b29		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>191b31		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>191b3f		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>191b47		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>191b55		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>191b5d		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>191b6b		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>191b73		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>191b81		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>191b89		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>191b97		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>191b9f		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>191bad		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>191bb5		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>191bc3		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>191bcb		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>191bd9		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>191be1		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>191bef		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>191bf7		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>191c05		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>191c0d		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>191c1b		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>191c23		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>191c31		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>191c39		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>191c47		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>191c4f		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>191c5d		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>191c65		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>191c73		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>191c7b		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>191c89		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>191c91		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>191c9f		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>191ca7		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>191cb5		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>191cbd		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>191ccb		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>191cd3		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>191ce1		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>191ce9		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>191cf7		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>191cff		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>191d0d		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>191d15		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>191d23		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>191d2b		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>191d39		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>191d41		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>191d4f		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>191d57		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>191d65		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>191d6d		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>191d7b		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>191d83		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>191d91		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>191d99		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>191da7		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>191daf		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>191dbd		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>191dc5		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>191dd3		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>191ddb		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>191de9		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>191df1		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>191dff		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>191e07		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>191e15		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>191e1d		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>191e2b		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>191e33		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Drums.asm

>191e41		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>191e49		00 87 fa 00
>191e4d		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>191e55		00 88 98 03
>191e59		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>191e61		00 88 98 03
>191e65		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191e6d		00 f9 69 00
>191e71		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>191e79		80 e8 4a 00
>191e7d		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191e85		00 f6 9a 00
>191e89		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>191e91		1b f2 34 00
>191e95		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>191e9d		00 f7 8a 00
>191ea1		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>191ea9		00 f6 47 00
>191ead		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191eb5		00 f9 69 00
>191eb9		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>191ec1		00 f7 a9 00
>191ec5		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>191ecd		00 87 fa 00
>191ed1		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>191ed9		00 f7 a9 00
>191edd		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191ee5		00 f5 f5 00
>191ee9		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>191ef1		06 b8 d8 03
>191ef5		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191efd		00 f5 f5 00
>191f01		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>191f09		06 b8 d8 03
>191f0d		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191f15		00 f5 f5 00
>191f19		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>191f21		10 74 f8 03
>191f25		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191f2d		00 f5 f5 00
>191f31		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191f39		00 f5 f5 00
>191f3d		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191f45		05 c5 d4 03
>191f49		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191f51		00 f5 f5 00
>191f55		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191f5d		04 f9 44 03
>191f61		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191f69		05 c5 d4 03
>191f6d		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191f75		04 f9 44 03
>191f79		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>191f81		03 87 f7 03
>191f85		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191f8d		05 c5 d4 03
>191f91		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>191f99		00 f6 28 00
>191f9d		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191fa5		05 c5 d4 03
>191fa9		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>191fb1		00 f5 f7 01
>191fb5		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191fbd		04 f9 44 03
>191fc1		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>191fc9		00 99 f9 00
>191fcd		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>191fd5		00 a8 f7 00
>191fd9		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>191fe1		00 99 f9 00
>191fe5		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>191fed		00 a6 f6 00
>191ff1		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>191ff9		00 a6 f6 00
>191ffd		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>192005		00 f6 36 02
>192009		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>192011		00 f6 36 02
>192015		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>19201d		00 96 e8 01
>192021		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>192029		00 96 e8 01
>19202d		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>192035		02 79 77 03
>192039		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>192041		02 79 77 03
>192045		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>19204d		00 a5 2b 02
>192051		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>192059		00 93 3b 02
>19205d		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>192065		01 89 3b 03
>192069		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>192071		0a 53 2b 02
>192075		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>19207d		00 f6 89 00
>192081		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>192089		00 f6 9a 00
>19208d		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>192095		00 f6 9a 00
>192099		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>1920a1		00 87 4b 01
>1920a5		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>1920ad		00 78 67 01
>1920b1		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>1920b9		02 f8 fc 00
>1920bd		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>1920c5		40 f5 f5 00
>1920c9		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>1920d1		02 79 77 03
>1920d5		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>1920dd		40 f5 f5 00
>1920e1		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>1920e9		40 f5 f5 00
>1920ed		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>1920f5		00 f9 69 00
>1920f9		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>192101		00 f9 69 00
>192105		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>19210d		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>192111		41 1e 19 00 4d 1e 19 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>192119		59 1e 19 00 65 1e 19 00
>192121		71 1e 19 00 7d 1e 19 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>192129		89 1e 19 00 95 1e 19 00
>192131		a1 1e 19 00 ad 1e 19 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>192139		b9 1e 19 00 c5 1e 19 00
>192141		d1 1e 19 00 dd 1e 19 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>192149		e9 1e 19 00 f5 1e 19 00
>192151		01 1f 19 00 0d 1f 19 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>192159		19 1f 19 00 25 1f 19 00
>192161		31 1f 19 00 3d 1f 19 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>192169		49 1f 19 00 55 1f 19 00
>192171		61 1f 19 00 6d 1f 19 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>192179		79 1f 19 00 85 1f 19 00
>192181		91 1f 19 00 9d 1f 19 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>192189		a9 1f 19 00 b5 1f 19 00
>192191		c1 1f 19 00 cd 1f 19 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>192199		d9 1f 19 00 e5 1f 19 00
>1921a1		f1 1f 19 00 fd 1f 19 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>1921a9		09 20 19 00 15 20 19 00
>1921b1		21 20 19 00 2d 20 19 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>1921b9		39 20 19 00 45 20 19 00
>1921c1		51 20 19 00 5d 20 19 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>1921c9		69 20 19 00 75 20 19 00
>1921d1		81 20 19 00 8d 20 19 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>1921d9		99 20 19 00 a5 20 19 00
>1921e1		b1 20 19 00 bd 20 19 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>1921e9		c9 20 19 00 d5 20 19 00
>1921f1		e1 20 19 00 ed 20 19 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>1921f9		f9 20 19 00 05 21 19 00

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments.asm

>192201		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>192209		00 b1 f5 01
>19220d		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>192215		03 f1 f5 00
>192219		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>192221		03 c1 f5 00
>192225		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>19222d		00 92 f5 01
>192231		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>192239		00 f1 f9 00
>19223d		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>192245		00 f1 f5 00
>192249		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>192251		02 81 f6 01
>192255		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>19225d		00 c2 b9 01
>192261		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>192269		05 b2 35 00
>19226d		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>192275		1b f2 34 00
>192279		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>192281		01 f5 74 00
>192285		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>19228d		00 61 e3 00
>192291		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>192299		00 a4 64 00
>19229d		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>1922a5		07 b5 f5 00
>1922a9		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>1922b1		00 f3 74 00
>1922b5		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>1922bd		00 c3 94 01
>1922c1		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>1922c9		00 f4 0d 01
>1922cd		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>1922d5		00 f5 0b 01
>1922d9		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>1922e1		00 bf 07 00
>1922e5		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>1922ed		00 6d 08 01
>1922f1		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>1922f9		00 51 17 01
>1922fd		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>192305		00 51 17 01
>192309		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>192311		00 53 08 01
>192315		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>19231d		00 53 06 01
>192321		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>192329		00 d2 f8 00
>19232d		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>192335		00 e2 c7 01
>192339		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>192341		00 f1 9c 00
>192345		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>19234d		02 f2 c9 01
>192351		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>192359		03 95 fb 00
>19235d		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>192365		04 a1 59 00
>192369		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>192371		03 91 fc 03
>192375		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>19237d		02 b4 ec 00
>192381		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>192389		00 93 f7 00
>19238d		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>192395		04 c1 58 00
>192399		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>1923a1		02 c3 6a 00
>1923a5		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>1923ad		00 62 87 00
>1923b1		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>1923b9		00 f3 97 00
>1923bd		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>1923c5		00 b3 97 00
>1923c9		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>1923d1		04 f3 cc 00
>1923d5		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>1923dd		00 93 aa 00
>1923e1		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>1923e9		00 78 08 01
>1923ed		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>1923f5		00 78 08 01
>1923f9		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>192401		00 54 27 01
>192405		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>19240d		00 61 56 00
>192411		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>192419		00 75 16 01
>19241d		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>192425		00 f5 f6 01
>192429		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>192431		80 f3 e3 00
>192435		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>19243d		00 b5 f5 00
>192441		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>192449		80 71 16 00
>19244d		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>192455		00 30 55 01
>192459		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>192461		00 62 36 01
>192465		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>19246d		02 51 07 00
>192471		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>192479		00 62 39 00
>19247d		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>192485		00 66 27 00
>192489		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>192491		00 73 46 00
>192495		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>19249d		00 74 76 01
>1924a1		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>1924a9		81 92 38 00
>1924ad		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>1924b5		02 71 19 00
>1924b9		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>1924c1		01 81 09 00
>1924c5		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>1924cd		00 83 4b 02
>1924d1		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>1924d9		05 71 59 00
>1924dd		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>1924e5		03 82 39 00
>1924e9		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>1924f1		82 84 17 00
>1924f5		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>1924fd		02 72 16 00
>192501		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>192509		00 7b 0a 00
>19250d		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>192515		00 85 0c 01
>192519		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>192521		00 7b 0a 01
>192525		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>19252d		00 79 18 01
>192531		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>192539		01 73 08 00
>19253d		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>192545		04 77 0a 00
>192549		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>192551		00 51 19 00
>192555		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>19255d		01 74 09 00
>192561		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>192569		01 63 28 00
>19256d		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>192575		00 65 0a 00
>192579		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>192581		00 67 29 00
>192585		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>19258d		00 67 09 00
>192591		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>192599		01 6a 28 00
>19259d		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>1925a5		00 55 27 00
>1925a9		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>1925b1		00 6f 08 00
>1925b5		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>1925bd		00 7a 07 00
>1925c1		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>1925c9		06 a2 0d 00
>1925cd		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>1925d5		00 a3 5f 00
>1925d9		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>1925e1		00 42 27 00
>1925e5		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>1925ed		05 b2 49 00
>1925f1		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>1925f9		00 b2 79 01
>1925fd		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>192605		00 7a 1a 00
>192609		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>192611		00 82 28 01
>192615		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>19261d		02 c3 5f 00
>192621		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>192629		86 c4 95 01
>19262d		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>192635		00 44 15 00
>192639		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>192641		00 d1 06 00
>192645		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>19264d		00 82 37 00
>192651		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>192659		00 41 35 00
>19265d		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>192665		02 32 f5 01
>192669		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>192671		00 61 26 00
>192675		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>19267d		84 3f 05 01
>192681		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>192689		01 d1 f6 00
>19268d		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>192695		00 41 05 01
>192699		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>1926a1		05 f3 e4 00
>1926a5		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>1926ad		00 92 f5 01
>1926b1		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>1926b9		04 f2 e4 01
>1926bd		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>1926c5		00 45 25 00
>1926c9		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>1926d1		01 a3 36 00
>1926d5		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>1926dd		01 98 05 01
>1926e1		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>1926e9		02 a3 f6 01
>1926ed		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>1926f5		00 f6 f8 00
>1926f9		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>192701		00 f3 f5 00
>192705		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>19270d		00 94 e5 01
>192711		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>192719		00 84 44 00
>19271d		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>192725		03 83 18 01
>192729		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>192731		01 78 08 01
>192735		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>19273d		03 8e 08 01
>192741		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>192749		09 f2 46 00
>19274d		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>192755		00 96 e8 01
>192759		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>192761		00 f6 f6 01
>192765		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>19276d		00 f6 9a 00
>192771		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>192779		00 c6 45 00
>19277d		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>192785		00 f4 b4 00
>192789		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>192791		00 d5 25 00
>192795		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>19279d		0e 21 2d 00
>1927a1		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>1927a9		00 55 87 02
>1927ad		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>1927b5		08 98 87 01
>1927b9		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>1927c1		04 17 04 03
>1927c5		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>1927cd		05 77 f9 02
>1927d1		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>1927d9		02 f4 08 00
>1927dd		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>1927e5		00 36 05 01
>1927e9		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>1927f1		05 32 55 03
>1927f5		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>1927fd		00 f3 df 00
>192801		01 22 19 00 0d 22 19 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>192809		19 22 19 00 25 22 19 00 31 22 19 00 3d 22 19 00
>192819		49 22 19 00 55 22 19 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>192821		61 22 19 00 6d 22 19 00 79 22 19 00 85 22 19 00
>192831		91 22 19 00 9d 22 19 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>192839		a9 22 19 00 b5 22 19 00 c1 22 19 00 cd 22 19 00
>192849		d9 22 19 00 e5 22 19 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>192851		f1 22 19 00 fd 22 19 00 09 23 19 00 15 23 19 00
>192861		21 23 19 00 2d 23 19 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>192869		39 23 19 00 45 23 19 00 51 23 19 00 5d 23 19 00
>192879		69 23 19 00 75 23 19 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>192881		81 23 19 00 8d 23 19 00 99 23 19 00 a5 23 19 00
>192891		b1 23 19 00 bd 23 19 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>192899		c9 23 19 00 d5 23 19 00 e1 23 19 00 ed 23 19 00
>1928a9		f9 23 19 00 05 24 19 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>1928b1		11 24 19 00 1d 24 19 00 29 24 19 00 35 24 19 00
>1928c1		41 24 19 00 4d 24 19 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>1928c9		59 24 19 00 65 24 19 00 71 24 19 00 7d 24 19 00
>1928d9		89 24 19 00 95 24 19 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>1928e1		a1 24 19 00 ad 24 19 00 b9 24 19 00 c5 24 19 00
>1928f1		d1 24 19 00 dd 24 19 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>1928f9		e9 24 19 00 f5 24 19 00 01 25 19 00 0d 25 19 00
>192909		19 25 19 00 25 25 19 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>192911		31 25 19 00 3d 25 19 00 49 25 19 00 55 25 19 00
>192921		61 25 19 00 6d 25 19 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>192929		79 25 19 00 85 25 19 00 91 25 19 00 9d 25 19 00
>192939		a9 25 19 00 b5 25 19 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>192941		c1 25 19 00 cd 25 19 00 d9 25 19 00 e5 25 19 00
>192951		f1 25 19 00 fd 25 19 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>192959		09 26 19 00 15 26 19 00 21 26 19 00 2d 26 19 00
>192969		39 26 19 00 45 26 19 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>192971		51 26 19 00 5d 26 19 00 69 26 19 00 75 26 19 00
>192981		81 26 19 00 8d 26 19 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>192989		99 26 19 00 a5 26 19 00 b1 26 19 00 bd 26 19 00
>192999		c9 26 19 00 d5 26 19 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>1929a1		e1 26 19 00 ed 26 19 00 f9 26 19 00 05 27 19 00
>1929b1		11 27 19 00 1d 27 19 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>1929b9		29 27 19 00 35 27 19 00 41 27 19 00 4d 27 19 00
>1929c9		59 27 19 00 65 27 19 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>1929d1		71 27 19 00 7d 27 19 00 89 27 19 00 95 27 19 00
>1929e1		a1 27 19 00 ad 27 19 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>1929e9		b9 27 19 00 c5 27 19 00 d1 27 19 00 dd 27 19 00
>1929f9		e9 27 19 00 f5 27 19 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments_Win31.asm

>192a01		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>192a09		0d f2 f7 00
>192a0d		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>192a15		07 f2 f7 00
>192a19		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>192a21		07 f2 f6 00
>192a25		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>192a2d		07 f2 f7 00
>192a31		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>192a39		07 f2 f7 00
>192a3d		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>192a45		07 f2 f7 00
>192a49		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a51		00 00 00 00
>192a55		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a5d		00 00 00 00
>192a61		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a69		00 00 00 00
>192a6d		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>192a75		87 f2 f1 00
>192a79		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>192a81		07 f4 f4 00
>192a85		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>192a8d		07 f2 f6 00
>192a91		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>192a99		07 e7 f7 00
>192a9d		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>192aa5		07 f6 f6 00
>192aa9		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>192ab1		87 a3 f3 00
>192ab5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192abd		00 00 00 00
>192ac1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ac9		00 00 00 00
>192acd		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ad5		00 00 00 00
>192ad9		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>192ae1		07 8a 08 00
>192ae5		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>192aed		07 55 14 00
>192af1		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>192af9		87 55 04 00
>192afd		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>192b05		07 46 1a 00
>192b09		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>192b11		07 61 07 00
>192b15		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>192b1d		90 61 07 00
>192b21		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b29		00 00 00 00
>192b2d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b35		00 00 00 00
>192b39		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b41		00 00 00 00
>192b45		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>192b4d		87 f3 f8 00
>192b51		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>192b59		07 f6 3a 00
>192b5d		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>192b65		0c 84 19 00
>192b69		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>192b71		07 94 19 00
>192b75		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>192b7d		87 d1 f8 00
>192b81		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>192b89		07 c3 a6 00
>192b8d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b95		00 00 00 00
>192b99		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ba1		00 00 00 00
>192ba5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192bad		00 00 00 00
>192bb1		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>192bb9		47 f2 df 00
>192bbd		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>192bc5		0f a1 df 00
>192bc9		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>192bd1		07 f1 78 00
>192bd5		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>192bdd		07 f1 18 00
>192be1		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>192be9		07 56 26 00
>192bed		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>192bf5		07 66 06 00
>192bf9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c01		00 00 00 00
>192c05		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c0d		00 00 00 00
>192c11		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c19		00 00 00 00
>192c1d		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>192c25		87 85 35 00
>192c29		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>192c31		87 f3 f4 00
>192c35		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>192c3d		07 f2 c3 00
>192c41		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>192c49		08 72 08 00
>192c4d		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>192c55		07 3f 07 01
>192c59		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>192c61		07 4f 05 00
>192c65		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c6d		00 00 00 00
>192c71		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c79		00 00 00 00
>192c7d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c85		00 00 00 00
>192c89		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>192c91		07 7a 05 00
>192c95		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>192c9d		07 a5 45 00
>192ca1		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>192ca9		08 8f 09 00
>192cad		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>192cb5		0c 8f 09 00
>192cb9		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>192cc1		07 82 37 00
>192cc5		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>192ccd		07 62 2c 01
>192cd1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192cd9		00 00 00 00
>192cdd		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ce5		00 00 00 00
>192ce9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192cf1		00 00 00 00
>192cf5		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>192cfd		07 a6 1c 00
>192d01		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>192d09		07 72 0b 00
>192d0d		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>192d15		07 72 09 00
>192d19		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>192d21		07 82 09 00
>192d25		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>192d2d		07 72 0f 00
>192d31		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>192d39		07 8f 0a 00
>192d3d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d45		00 00 00 00
>192d49		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d51		00 00 00 00
>192d55		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d5d		00 00 00 00
>192d61		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>192d69		07 65 1a 00
>192d6d		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>192d75		07 65 1a 00
>192d79		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>192d81		07 75 0a 00
>192d85		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>192d8d		07 65 1a 00
>192d91		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>192d99		07 65 26 00
>192d9d		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>192da5		07 55 36 00
>192da9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192db1		00 00 00 00
>192db5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192dbd		00 00 00 00
>192dc1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192dc9		00 00 00 00
>192dcd		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>192dd5		07 ff 0f 01
>192dd9		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>192de1		87 64 18 00
>192de5		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>192ded		07 96 0a 00
>192df1		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>192df9		07 91 2a 00
>192dfd		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>192e05		47 6f 07 00
>192e09		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>192e11		07 8f 06 02
>192e15		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e1d		00 00 00 00
>192e21		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e29		00 00 00 00
>192e2d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e35		00 00 00 00
>192e39		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>192e41		07 55 16 00
>192e45		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>192e4d		07 6a 03 00
>192e51		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>192e59		07 42 35 00
>192e5d		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>192e65		07 31 47 01
>192e69		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>192e71		0a 42 25 00
>192e75		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>192e7d		07 cf 07 00
>192e81		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e89		00 00 00 00
>192e8d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e95		00 00 00 00
>192e99		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ea1		00 00 00 00
>192ea5		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>192ead		8a f2 26 00
>192eb1		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>192eb9		07 f2 f5 00
>192ebd		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>192ec5		87 11 13 00
>192ec9		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>192ed1		87 1d 03 00
>192ed5		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>192edd		07 81 23 00
>192ee1		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>192ee9		0a f2 f6 01
>192eed		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ef5		00 00 00 00
>192ef9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f01		00 00 00 00
>192f05		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f0d		00 00 00 00
>192f11		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>192f19		07 c2 05 00
>192f1d		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>192f25		07 6f 0c 01
>192f29		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>192f31		07 56 16 00
>192f35		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>192f3d		88 8f 0b 00
>192f41		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>192f49		87 c3 e5 00
>192f4d		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>192f55		07 f8 16 00
>192f59		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f61		00 00 00 00
>192f65		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f6d		00 00 00 00
>192f71		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f79		00 00 00 00
>192f7d		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>192f85		0a f3 03 00
>192f89		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>192f91		07 f3 02 00
>192f95		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>192f9d		07 1f ff 03
>192fa1		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>192fa9		8f 56 84 02
>192fad		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>192fb5		0c 34 04 03
>192fb9		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>192fc1		07 1f 02 03
>192fc5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192fcd		00 00 00 00
>192fd1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192fd9		00 00 00 00
>192fdd		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192fe5		00 00 00 00
>192fe9		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>192ff1		07 12 16 01
>192ff5		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>192ffd		07 f6 c9 02
>193001		01 2a 19 00 0d 2a 19 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>193009		19 2a 19 00 25 2a 19 00 31 2a 19 00 3d 2a 19 00
>193019		49 2a 19 00 55 2a 19 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>193021		61 2a 19 00 6d 2a 19 00 79 2a 19 00 85 2a 19 00
>193031		91 2a 19 00 9d 2a 19 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>193039		a9 2a 19 00 b5 2a 19 00 c1 2a 19 00 cd 2a 19 00
>193049		d9 2a 19 00 e5 2a 19 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>193051		f1 2a 19 00 fd 2a 19 00 09 2b 19 00 15 2b 19 00
>193061		21 2b 19 00 2d 2b 19 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>193069		39 2b 19 00 45 2b 19 00 51 2b 19 00 5d 2b 19 00
>193079		69 2b 19 00 75 2b 19 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>193081		81 2b 19 00 8d 2b 19 00 99 2b 19 00 a5 2b 19 00
>193091		b1 2b 19 00 bd 2b 19 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>193099		c9 2b 19 00 d5 2b 19 00 e1 2b 19 00 ed 2b 19 00
>1930a9		f9 2b 19 00 05 2c 19 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>1930b1		11 2c 19 00 1d 2c 19 00 29 2c 19 00 35 2c 19 00
>1930c1		41 2c 19 00 4d 2c 19 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>1930c9		59 2c 19 00 65 2c 19 00 71 2c 19 00 7d 2c 19 00
>1930d9		89 2c 19 00 95 2c 19 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>1930e1		a1 2c 19 00 ad 2c 19 00 b9 2c 19 00 c5 2c 19 00
>1930f1		d1 2c 19 00 dd 2c 19 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>1930f9		e9 2c 19 00 f5 2c 19 00 01 2d 19 00 0d 2d 19 00
>193109		19 2d 19 00 25 2d 19 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>193111		31 2d 19 00 3d 2d 19 00 49 2d 19 00 55 2d 19 00
>193121		61 2d 19 00 6d 2d 19 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>193129		79 2d 19 00 85 2d 19 00 91 2d 19 00 9d 2d 19 00
>193139		a9 2d 19 00 b5 2d 19 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>193141		c1 2d 19 00 cd 2d 19 00 d9 2d 19 00 e5 2d 19 00
>193151		f1 2d 19 00 fd 2d 19 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>193159		09 2e 19 00 15 2e 19 00 21 2e 19 00 2d 2e 19 00
>193169		39 2e 19 00 45 2e 19 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>193171		51 2e 19 00 5d 2e 19 00 69 2e 19 00 75 2e 19 00
>193181		81 2e 19 00 8d 2e 19 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>193189		99 2e 19 00 a5 2e 19 00 b1 2e 19 00 bd 2e 19 00
>193199		c9 2e 19 00 d5 2e 19 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>1931a1		e1 2e 19 00 ed 2e 19 00 f9 2e 19 00 05 2f 19 00
>1931b1		11 2f 19 00 1d 2f 19 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>1931b9		29 2f 19 00 35 2f 19 00 41 2f 19 00 4d 2f 19 00
>1931c9		59 2f 19 00 65 2f 19 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>1931d1		71 2f 19 00 7d 2f 19 00 89 2f 19 00 95 2f 19 00
>1931e1		a1 2f 19 00 ad 2f 19 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>1931e9		b9 2f 19 00 c5 2f 19 00 d1 2f 19 00 dd 2f 19 00
>1931f9		e9 2f 19 00 f5 2f 19 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm

>193201		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.193209						IOPL2_TONE_TEST
.193209		e2 20		sep #$20	                SEP #$20        ; set A short
.19320b		c2 10		rep #$10	                REP #$10        ; set X long
.19320d		a2 00 00	ldx #$0000	                LDX #0
.193210						OPL2_TONE_TESTING_L1
.193210		bf 01 32 19	lda $193201,x	                LDA NOTE_INTRO, X
.193214		29 0f		and #$0f	                AND #$F
.193216		85 30		sta $30		                STA OPL2_NOTE ; start at C
.193218		bf 01 32 19	lda $193201,x	                LDA NOTE_INTRO, X
.19321c		29 70		and #$70	                AND #$70
.19321e		4a		lsr a		                LSR A
.19321f		4a		lsr a		                LSR A
.193220		4a		lsr a		                LSR A
.193221		4a		lsr a		                LSR A
.193222		85 31		sta $31		                STA OPL2_OCTAVE
.193224		8a		txa		                TXA
.193225		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.193227		85 27		sta $27		                STA OPL2_CHANNEL
.193229		22 f9 33 19	jsl $1933f9	                JSL OPL2_PLAYNOTE
.19322d		a0 00 00	ldy #$0000	                LDY #$0000
.193230						OPL2_TONE_TESTING_L2
.193230		ea		nop		                NOP
.193231		ea		nop		                NOP
.193232		ea		nop		                NOP
.193233		ea		nop		                NOP
.193234		c8		iny		                INY
.193235		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.193238		d0 f6		bne $193230	                BNE OPL2_TONE_TESTING_L2
.19323a		e8		inx		                INX
.19323b		e0 08 00	cpx #$0008	                CPX #8
.19323e		d0 d0		bne $193210	                BNE OPL2_TONE_TESTING_L1
.193240		6b		rtl		                RTL
.193241						OPL2_INIT
.193241		c2 20		rep #$20	                REP #$20        ; set A long
.193243		a9 00 00	lda #$0000	                LDA #$0000
.193246		85 28		sta $28		                STA OPL2_REG_REGION
.193248		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.19324a		85 30		sta $30		                STA OPL2_NOTE
.19324c		85 32		sta $32		                STA OPL2_PARAMETER0
.19324e		85 34		sta $34		                STA OPL2_PARAMETER2
.193250		a9 cb 11	lda #$11cb	                LDA #<>INSTRUMENT_ACCORDN
.193253		85 50		sta $50		                STA RAD_ADDR
.193255		a9 19 00	lda #$0019	                LDA #<`INSTRUMENT_ACCORDN
.193258		85 52		sta $52		                STA RAD_ADDR + 2
.19325a		e2 20		sep #$20	                SEP #$20        ; set A short
.19325c		6b		rtl		                RTL
.19325d						OPL2_Reset
.19325d		6b		rtl		                RTL
.19325e						OPL2_Get_FrequencyBlock
.19325e		6b		rtl		                RTL
.19325f						OPL2_GET_REGISTER
.19325f		48		pha		                PHA             ; begin setdp macro
.193260		08		php		                PHP
.193261		c2 20		rep #$20	                REP #$20        ; set A long
.193263		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193266		5b		tcd		                TCD
.193267		28		plp		                PLP
.193268		68		pla		                PLA             ; end setdp macro
.193269		c2 20		rep #$20	                REP #$20        ; set A long
.19326b		18		clc		              CLC
.19326c		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19326f		65 32		adc $32		              ADC OPL2_PARAMETER0
.193271		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193273		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193276		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193278		e2 20		sep #$20	                SEP #$20        ; set A short
.19327a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19327c		6b		rtl		              RTL
.19327d						OPL2_GET_WAVEFORM_SELECT
.19327d		48		pha		                PHA             ; begin setdp macro
.19327e		08		php		                PHP
.19327f		c2 20		rep #$20	                REP #$20        ; set A long
.193281		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193284		5b		tcd		                TCD
.193285		28		plp		                PLP
.193286		68		pla		                PLA             ; end setdp macro
.193287		c2 20		rep #$20	                REP #$20        ; set A long
.193289		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19328c		69 01 00	adc #$0001	              ADC #$0001
.19328f		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193291		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193294		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193296		e2 20		sep #$20	                SEP #$20        ; set A short
.193298		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19329a		29 20		and #$20	              AND #$20
.19329c		6b		rtl		              RTL
.19329d						OPL2_GET_SCALINGLEVEL
.19329d		48		pha		                PHA             ; begin setdp macro
.19329e		08		php		                PHP
.19329f		c2 20		rep #$20	                REP #$20        ; set A long
.1932a1		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932a4		5b		tcd		                TCD
.1932a5		28		plp		                PLP
.1932a6		68		pla		                PLA             ; end setdp macro
.1932a7		c2 20		rep #$20	                REP #$20        ; set A long
.1932a9		a9 40 00	lda #$0040	              LDA #$0040  ;
.1932ac		85 28		sta $28		              STA OPL2_REG_REGION
.1932ae		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.1932b1		e2 20		sep #$20	                SEP #$20        ; set A short
.1932b3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932b5		29 c0		and #$c0	              AND #$C0
.1932b7		4a		lsr a		              LSR A
.1932b8		4a		lsr a		              LSR A
.1932b9		4a		lsr a		              LSR A
.1932ba		4a		lsr a		              LSR A
.1932bb		4a		lsr a		              LSR A
.1932bc		4a		lsr a		              LSR A
.1932bd		6b		rtl		              RTL
.1932be						OPL2_GET_BLOCK
.1932be		48		pha		                PHA             ; begin setdp macro
.1932bf		08		php		                PHP
.1932c0		c2 20		rep #$20	                REP #$20        ; set A long
.1932c2		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932c5		5b		tcd		                TCD
.1932c6		28		plp		                PLP
.1932c7		68		pla		                PLA             ; end setdp macro
.1932c8		e2 20		sep #$20	                SEP #$20        ; set A short
.1932ca		18		clc		              CLC
.1932cb		a5 27		lda $27		              LDA OPL2_CHANNEL
.1932cd		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.1932cf		69 b0		adc #$b0	              ADC #$B0
.1932d1		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.1932d3		a9 00		lda #$00	              LDA #$00
.1932d5		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.1932d7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1932d9		18		clc		              CLC
.1932da		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1932dd		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.1932df		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1932e1		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1932e4		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1932e6		e2 20		sep #$20	                SEP #$20        ; set A short
.1932e8		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932ea		29 1c		and #$1c	              AND #$1C
.1932ec		4a		lsr a		              LSR A
.1932ed		4a		lsr a		              LSR A
.1932ee		6b		rtl		              RTL
.1932ef						OPL2_GET_KEYON
.1932ef		48		pha		                PHA             ; begin setdp macro
.1932f0		08		php		                PHP
.1932f1		c2 20		rep #$20	                REP #$20        ; set A long
.1932f3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932f6		5b		tcd		                TCD
.1932f7		28		plp		                PLP
.1932f8		68		pla		                PLA             ; end setdp macro
.1932f9		e2 20		sep #$20	                SEP #$20        ; set A short
.1932fb		18		clc		              CLC
.1932fc		a5 27		lda $27		              LDA OPL2_CHANNEL
.1932fe		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193300		69 b0		adc #$b0	              ADC #$B0
.193302		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193304		a9 00		lda #$00	              LDA #$00
.193306		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193308		c2 30		rep #$30	                REP #$30        ; set A&X long
.19330a		18		clc		              CLC
.19330b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19330e		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193310		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193312		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193315		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193317		e2 20		sep #$20	                SEP #$20        ; set A short
.193319		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19331b		29 20		and #$20	              AND #$20
.19331d		6b		rtl		              RTL
.19331e						OPL2_GET_FEEDBACK
.19331e		48		pha		                PHA             ; begin setdp macro
.19331f		08		php		                PHP
.193320		c2 20		rep #$20	                REP #$20        ; set A long
.193322		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193325		5b		tcd		                TCD
.193326		28		plp		                PLP
.193327		68		pla		                PLA             ; end setdp macro
.193328		e2 20		sep #$20	                SEP #$20        ; set A short
.19332a		18		clc		              CLC
.19332b		a5 27		lda $27		              LDA OPL2_CHANNEL
.19332d		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19332f		69 c0		adc #$c0	              ADC #$C0
.193331		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193333		a9 00		lda #$00	              LDA #$00
.193335		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193337		c2 30		rep #$30	                REP #$30        ; set A&X long
.193339		18		clc		              CLC
.19333a		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19333d		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19333f		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193341		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193344		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193346		e2 20		sep #$20	                SEP #$20        ; set A short
.193348		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19334a		29 e0		and #$e0	              AND #$E0
.19334c		4a		lsr a		              LSR
.19334d		6b		rtl		              RTL
.19334e						OPL2_GET_SYNTHMODE
.19334e		48		pha		                PHA             ; begin setdp macro
.19334f		08		php		                PHP
.193350		c2 20		rep #$20	                REP #$20        ; set A long
.193352		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193355		5b		tcd		                TCD
.193356		28		plp		                PLP
.193357		68		pla		                PLA             ; end setdp macro
.193358		e2 20		sep #$20	                SEP #$20        ; set A short
.19335a		18		clc		              CLC
.19335b		a5 27		lda $27		              LDA OPL2_CHANNEL
.19335d		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19335f		69 c0		adc #$c0	              ADC #$C0
.193361		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193363		a9 00		lda #$00	              LDA #$00
.193365		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193367		c2 30		rep #$30	                REP #$30        ; set A&X long
.193369		18		clc		              CLC
.19336a		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19336d		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19336f		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193371		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193374		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193376		e2 20		sep #$20	                SEP #$20        ; set A short
.193378		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19337a		29 01		and #$01	              AND #$01
.19337c		6b		rtl		              RTL
.19337d						OPL2_GET_DEEPTREMOLO
.19337d		48		pha		                PHA             ; begin setdp macro
.19337e		08		php		                PHP
.19337f		c2 20		rep #$20	                REP #$20        ; set A long
.193381		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193384		5b		tcd		                TCD
.193385		28		plp		                PLP
.193386		68		pla		                PLA             ; end setdp macro
.193387		c2 20		rep #$20	                REP #$20        ; set A long
.193389		a9 bd 00	lda #$00bd	              LDA #$00BD;
.19338c		85 28		sta $28		              STA OPL2_REG_REGION
.19338e		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.193391		e2 20		sep #$20	                SEP #$20        ; set A short
.193393		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193395		29 80		and #$80	              AND #$80
.193397		6b		rtl		              RTL
.193398						OPL2_GET_DEEPVIBRATO
.193398		48		pha		                PHA             ; begin setdp macro
.193399		08		php		                PHP
.19339a		c2 20		rep #$20	                REP #$20        ; set A long
.19339c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19339f		5b		tcd		                TCD
.1933a0		28		plp		                PLP
.1933a1		68		pla		                PLA             ; end setdp macro
.1933a2		c2 20		rep #$20	                REP #$20        ; set A long
.1933a4		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1933a7		69 bd 00	adc #$00bd	              ADC #$00BD
.1933aa		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1933ac		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1933af		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1933b1		e2 20		sep #$20	                SEP #$20        ; set A short
.1933b3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1933b5		29 40		and #$40	              AND #$40
.1933b7		6b		rtl		              RTL
.1933b8						OPL2_GET_PERCUSSION
.1933b8		48		pha		                PHA             ; begin setdp macro
.1933b9		08		php		                PHP
.1933ba		c2 20		rep #$20	                REP #$20        ; set A long
.1933bc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1933bf		5b		tcd		                TCD
.1933c0		28		plp		                PLP
.1933c1		68		pla		                PLA             ; end setdp macro
.1933c2		c2 20		rep #$20	                REP #$20        ; set A long
.1933c4		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1933c7		69 bd 00	adc #$00bd	              ADC #$00BD
.1933ca		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1933cc		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1933cf		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1933d1		e2 20		sep #$20	                SEP #$20        ; set A short
.1933d3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1933d5		29 20		and #$20	              AND #$20
.1933d7		6b		rtl		              RTL
.1933d8						OPL2_GET_DRUMS
.1933d8		48		pha		                PHA             ; begin setdp macro
.1933d9		08		php		                PHP
.1933da		c2 20		rep #$20	                REP #$20        ; set A long
.1933dc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1933df		5b		tcd		                TCD
.1933e0		28		plp		                PLP
.1933e1		68		pla		                PLA             ; end setdp macro
.1933e2		c2 20		rep #$20	                REP #$20        ; set A long
.1933e4		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1933e7		69 bd 00	adc #$00bd	              ADC #$00BD
.1933ea		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1933ec		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1933ef		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1933f1		e2 20		sep #$20	                SEP #$20        ; set A short
.1933f3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1933f5		29 1f		and #$1f	              AND #$1F
.1933f7		6b		rtl		              RTL
.1933f8						OPL2_Get_WaveForm
.1933f8		6b		rtl		                RTL
.1933f9						OPL2_PLAYNOTE
.1933f9		48		pha		                PHA             ; begin setdp macro
.1933fa		08		php		                PHP
.1933fb		c2 20		rep #$20	                REP #$20        ; set A long
.1933fd		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193400		5b		tcd		                TCD
.193401		28		plp		                PLP
.193402		68		pla		                PLA             ; end setdp macro
.193403		e2 20		sep #$20	                SEP #$20        ; set A short
.193405		da		phx		                PHX
.193406		a9 00		lda #$00	                LDA #$00
.193408		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.19340a		20 e1 39	jsr $1939e1	                JSR OPL2_SET_KEYON
.19340d		20 a6 39	jsr $1939a6	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.193410		e2 10		sep #$10	                SEP #$10        ; set X short
.193412		a5 30		lda $30		                LDA OPL2_NOTE
.193414		3a		dec a		                DEC A
.193415		0a		asl a		                ASL A
.193416		aa		tax		                TAX
.193417		bf 90 11 19	lda $191190,x	                LDA @lnoteFNumbers,X
.19341b		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.19341d		e8		inx		                INX
.19341e		bf 90 11 19	lda $191190,x	                LDA @lnoteFNumbers,X
.193422		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.193424		22 24 39 19	jsl $193924	                JSL OPL2_SET_FNUMBER
.193428		a9 01		lda #$01	                LDA #$01
.19342a		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.19342c		20 e1 39	jsr $1939e1	                JSR OPL2_SET_KEYON
.19342f		c2 10		rep #$10	                REP #$10        ; set X long
.193431		fa		plx		                PLX
.193432		6b		rtl		                RTL
.193433						OPL2_PLAYDRUM
.193433		6b		rtl		                RTL
.193434						OPL2_SET_INSTRUMENT
.193434		48		pha		                PHA             ; begin setdp macro
.193435		08		php		                PHP
.193436		c2 20		rep #$20	                REP #$20        ; set A long
.193438		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19343b		5b		tcd		                TCD
.19343c		28		plp		                PLP
.19343d		68		pla		                PLA             ; end setdp macro
.19343e		38		sec		              SEC ; Set the WaveFormSelect to True
.19343f		22 22 36 19	jsl $193622	              JSL OPL2_SET_WAVEFORMSELECT;
.193443		e2 20		sep #$20	                SEP #$20        ; set A short
.193445		c2 10		rep #$10	                REP #$10        ; set X long
.193447		a0 00 00	ldy #$0000	              LDY #$0000
.19344a		a2 00 00	ldx #$0000	              LDX #$0000
.19344d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.19344f		85 35		sta $35		              STA OPL2_PARAMETER3
.193451		c8		iny		              INY
.193452		c9 06		cmp #$06	              CMP #$06
.193454		d0 03		bne $193459	              BNE PERCUSSION_NEXT07
.193456		82 70 01	brl $1935c9	              BRL Percussion_6
.193459						PERCUSSION_NEXT07
.193459		c9 07		cmp #$07	              CMP #$07
.19345b		d0 03		bne $193460	              BNE PERCUSSION_NEXT08
.19345d		82 44 01	brl $1935a4	              BRL Percussion_7
.193460						PERCUSSION_NEXT08
.193460		c9 08		cmp #$08	              CMP #$08
.193462		d0 03		bne $193467	              BNE PERCUSSION_NEXT09
.193464		82 18 01	brl $19357f	              BRL Percussion_8
.193467						PERCUSSION_NEXT09
.193467		c9 09		cmp #$09	              CMP #$09
.193469		d0 03		bne $19346e	              BNE PERCUSSION_NEXT0A
.19346b		82 ec 00	brl $19355a	              BRL Percussion_9
.19346e						PERCUSSION_NEXT0A
.19346e		c9 0a		cmp #$0a	              CMP #$0A
.193470		d0 03		bne $193475	              BNE Percussion_Default
.193472		82 c0 00	brl $193535	              BRL Percussion_A
.193475						Percussion_Default
.193475		a9 00		lda #$00	              LDA #$00
.193477		85 26		sta $26		              STA OPL2_OPERATOR
.193479		c2 20		rep #$20	                REP #$20        ; set A long
.19347b		a9 20 00	lda #$0020	              LDA #$0020;
.19347e		85 28		sta $28		              STA OPL2_REG_REGION
.193480		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.193483		e2 20		sep #$20	                SEP #$20        ; set A short
.193485		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193487		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193489		c8		iny		              INY
.19348a		c2 20		rep #$20	                REP #$20        ; set A long
.19348c		a9 40 00	lda #$0040	              LDA #$0040;
.19348f		85 28		sta $28		              STA OPL2_REG_REGION
.193491		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.193494		e2 20		sep #$20	                SEP #$20        ; set A short
.193496		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.193498		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19349a		c8		iny		              INY
.19349b		c2 20		rep #$20	                REP #$20        ; set A long
.19349d		a9 60 00	lda #$0060	              LDA #$0060;
.1934a0		85 28		sta $28		              STA OPL2_REG_REGION
.1934a2		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.1934a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1934a7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1934a9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1934ab		c8		iny		              INY
.1934ac		c2 20		rep #$20	                REP #$20        ; set A long
.1934ae		a9 80 00	lda #$0080	              LDA #$0080;
.1934b1		85 28		sta $28		              STA OPL2_REG_REGION
.1934b3		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.1934b6		e2 20		sep #$20	                SEP #$20        ; set A short
.1934b8		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1934ba		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1934bc		c8		iny		              INY
.1934bd		c2 20		rep #$20	                REP #$20        ; set A long
.1934bf		a9 e0 00	lda #$00e0	              LDA #$00E0;
.1934c2		85 28		sta $28		              STA OPL2_REG_REGION
.1934c4		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.1934c7		e2 20		sep #$20	                SEP #$20        ; set A short
.1934c9		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1934cb		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1934cd		c8		iny		              INY
.1934ce		e2 10		sep #$10	                SEP #$10        ; set X short
.1934d0		a5 27		lda $27		              LDA OPL2_CHANNEL
.1934d2		29 0f		and #$0f	              AND #$0F
.1934d4		aa		tax		              TAX
.1934d5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.1934d7		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.1934db		c8		iny		              INY
.1934dc		a9 01		lda #$01	              LDA #$01
.1934de		85 26		sta $26		              STA OPL2_OPERATOR
.1934e0		c2 20		rep #$20	                REP #$20        ; set A long
.1934e2		a9 20 00	lda #$0020	              LDA #$0020;
.1934e5		85 28		sta $28		              STA OPL2_REG_REGION
.1934e7		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.1934ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1934ec		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.1934ee		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1934f0		c8		iny		              INY
.1934f1		c2 20		rep #$20	                REP #$20        ; set A long
.1934f3		a9 40 00	lda #$0040	              LDA #$0040;
.1934f6		85 28		sta $28		              STA OPL2_REG_REGION
.1934f8		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.1934fb		e2 20		sep #$20	                SEP #$20        ; set A short
.1934fd		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.1934ff		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193501		c8		iny		              INY
.193502		c2 20		rep #$20	                REP #$20        ; set A long
.193504		a9 60 00	lda #$0060	              LDA #$0060;
.193507		85 28		sta $28		              STA OPL2_REG_REGION
.193509		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.19350c		e2 20		sep #$20	                SEP #$20        ; set A short
.19350e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.193510		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193512		c8		iny		              INY
.193513		c2 20		rep #$20	                REP #$20        ; set A long
.193515		a9 80 00	lda #$0080	              LDA #$0080;
.193518		85 28		sta $28		              STA OPL2_REG_REGION
.19351a		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.19351d		e2 20		sep #$20	                SEP #$20        ; set A short
.19351f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.193521		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193523		c8		iny		              INY
.193524		c2 20		rep #$20	                REP #$20        ; set A long
.193526		a9 e0 00	lda #$00e0	              LDA #$00E0;
.193529		85 28		sta $28		              STA OPL2_REG_REGION
.19352b		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.19352e		e2 20		sep #$20	                SEP #$20        ; set A short
.193530		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.193532		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193534		6b		rtl		                RTL
.193535						Percussion_A
.193535		e2 20		sep #$20	                SEP #$20        ; set A short
.193537		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193539		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.19353d		c8		iny		              INY
.19353e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.193540		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.193544		c8		iny		              INY
.193545		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193547		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.19354b		c8		iny		              INY
.19354c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.19354e		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.193552		c8		iny		              INY
.193553		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193555		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.193559		6b		rtl		                RTL
.19355a						Percussion_9
.19355a		e2 20		sep #$20	                SEP #$20        ; set A short
.19355c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.19355e		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.193562		c8		iny		              INY
.193563		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.193565		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.193569		c8		iny		              INY
.19356a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.19356c		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.193570		c8		iny		              INY
.193571		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193573		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.193577		c8		iny		              INY
.193578		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.19357a		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.19357e		6b		rtl		              RTL
.19357f						Percussion_8
.19357f		e2 20		sep #$20	                SEP #$20        ; set A short
.193581		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193583		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.193587		c8		iny		              INY
.193588		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.19358a		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.19358e		c8		iny		              INY
.19358f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193591		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.193595		c8		iny		              INY
.193596		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193598		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.19359c		c8		iny		              INY
.19359d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.19359f		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.1935a3		6b		rtl		              RTL
.1935a4						Percussion_7
.1935a4		e2 20		sep #$20	                SEP #$20        ; set A short
.1935a6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1935a8		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.1935ac		c8		iny		              INY
.1935ad		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1935af		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.1935b3		c8		iny		              INY
.1935b4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1935b6		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.1935ba		c8		iny		              INY
.1935bb		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1935bd		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.1935c1		c8		iny		              INY
.1935c2		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1935c4		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.1935c8		6b		rtl		              RTL
.1935c9						Percussion_6
.1935c9		e2 20		sep #$20	                SEP #$20        ; set A short
.1935cb		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1935cd		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.1935d1		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.1935d5		c8		iny		              INY
.1935d6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1935d8		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.1935dc		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.1935e0		c8		iny		              INY
.1935e1		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1935e3		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.1935e7		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.1935eb		c8		iny		              INY
.1935ec		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1935ee		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.1935f2		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.1935f6		c8		iny		              INY
.1935f7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1935f9		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.1935fd		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.193601		6b		rtl		              RTL
.193602						OPL2_SET_REGISTER
.193602		48		pha		                PHA             ; begin setdp macro
.193603		08		php		                PHP
.193604		c2 20		rep #$20	                REP #$20        ; set A long
.193606		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193609		5b		tcd		                TCD
.19360a		28		plp		                PLP
.19360b		68		pla		                PLA             ; end setdp macro
.19360c		c2 20		rep #$20	                REP #$20        ; set A long
.19360e		18		clc		              CLC
.19360f		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193612		65 32		adc $32		              ADC OPL2_PARAMETER0
.193614		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193616		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193619		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19361b		e2 20		sep #$20	                SEP #$20        ; set A short
.19361d		a5 33		lda $33		              LDA OPL2_PARAMETER1
.19361f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193621		6b		rtl		              RTL
.193622						OPL2_SET_WAVEFORMSELECT
.193622		48		pha		                PHA             ; begin setdp macro
.193623		08		php		                PHP
.193624		c2 20		rep #$20	                REP #$20        ; set A long
.193626		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193629		5b		tcd		                TCD
.19362a		28		plp		                PLP
.19362b		68		pla		                PLA             ; end setdp macro
.19362c		c2 20		rep #$20	                REP #$20        ; set A long
.19362e		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.193631		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193633		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193636		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193638		e2 20		sep #$20	                SEP #$20        ; set A short
.19363a		b0 07		bcs $193643	              BCS OPL2_Set_WaveFormSelect_set
.19363c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19363e		29 df		and #$df	              AND #$DF
.193640		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193642		6b		rtl		              RTL
.193643						OPL2_Set_WaveFormSelect_set
.193643		48		pha		                PHA             ; begin setdp macro
.193644		08		php		                PHP
.193645		c2 20		rep #$20	                REP #$20        ; set A long
.193647		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19364a		5b		tcd		                TCD
.19364b		28		plp		                PLP
.19364c		68		pla		                PLA             ; end setdp macro
.19364d		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19364f		09 20 00	ora #$0020	              ORA #$20
.193652		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193654		6b		rtl		                RTL
.193655						OPL2_SET_TREMOLO
.193655		48		pha		                PHA             ; begin setdp macro
.193656		08		php		                PHP
.193657		c2 20		rep #$20	                REP #$20        ; set A long
.193659		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19365c		5b		tcd		                TCD
.19365d		28		plp		                PLP
.19365e		68		pla		                PLA             ; end setdp macro
.19365f		08		php		                PHP ; Push the Carry
.193660		c2 20		rep #$20	                REP #$20        ; set A long
.193662		18		clc		                CLC
.193663		a9 20 00	lda #$0020	                LDA #$0020 ;
.193666		85 28		sta $28		                STA OPL2_REG_REGION
.193668		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.19366b		28		plp		                PLP ; Pull the Carry out
.19366c		e2 20		sep #$20	                SEP #$20        ; set A short
.19366e		b0 08		bcs $193678	                BCS OPL2_Set_Tremolo_Set;
.193670		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193672		29 7f		and #$7f	                AND #$7F
.193674		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193676		80 06		bra $19367e	                BRA OPL2_Set_Tremolo_Exit
.193678						OPL2_Set_Tremolo_Set
.193678		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19367a		09 80		ora #$80	                ORA #$80
.19367c		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19367e						OPL2_Set_Tremolo_Exit
.19367e		6b		rtl		                RTL
.19367f						OPL2_GET_TREMOLO
.19367f		48		pha		                PHA             ; begin setdp macro
.193680		08		php		                PHP
.193681		c2 20		rep #$20	                REP #$20        ; set A long
.193683		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193686		5b		tcd		                TCD
.193687		28		plp		                PLP
.193688		68		pla		                PLA             ; end setdp macro
.193689		c2 20		rep #$20	                REP #$20        ; set A long
.19368b		a9 20 00	lda #$0020	                LDA #$0020;
.19368e		85 28		sta $28		                STA OPL2_REG_REGION
.193690		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.193693		e2 20		sep #$20	                SEP #$20        ; set A short
.193695		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193697		29 80		and #$80	                AND #$80
.193699		6b		rtl		                RTL
.19369a						OPL2_SET_VIBRATO
.19369a		48		pha		                PHA             ; begin setdp macro
.19369b		08		php		                PHP
.19369c		c2 20		rep #$20	                REP #$20        ; set A long
.19369e		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936a1		5b		tcd		                TCD
.1936a2		28		plp		                PLP
.1936a3		68		pla		                PLA             ; end setdp macro
.1936a4		08		php		                PHP ; Push the Carry
.1936a5		c2 20		rep #$20	                REP #$20        ; set A long
.1936a7		18		clc		                CLC
.1936a8		a9 20 00	lda #$0020	                LDA #$0020;
.1936ab		85 28		sta $28		                STA OPL2_REG_REGION
.1936ad		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.1936b0		28		plp		                PLP ; Pull the Carry out
.1936b1		e2 20		sep #$20	                SEP #$20        ; set A short
.1936b3		b0 08		bcs $1936bd	                BCS OPL2_Set_Vibrato_Set;
.1936b5		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936b7		29 bf		and #$bf	                AND #$BF
.1936b9		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1936bb		80 06		bra $1936c3	                BRA OPL2_Set_Vibrato_Exit
.1936bd						OPL2_Set_Vibrato_Set
.1936bd		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936bf		09 40		ora #$40	                ORA #$40
.1936c1		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1936c3						OPL2_Set_Vibrato_Exit
.1936c3		6b		rtl		                RTL
.1936c4						OPL2_GET_VIBRATO
.1936c4		48		pha		                PHA             ; begin setdp macro
.1936c5		08		php		                PHP
.1936c6		c2 20		rep #$20	                REP #$20        ; set A long
.1936c8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936cb		5b		tcd		                TCD
.1936cc		28		plp		                PLP
.1936cd		68		pla		                PLA             ; end setdp macro
.1936ce		c2 20		rep #$20	                REP #$20        ; set A long
.1936d0		a9 20 00	lda #$0020	                LDA #$0020;
.1936d3		85 28		sta $28		                STA OPL2_REG_REGION
.1936d5		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.1936d8		e2 20		sep #$20	                SEP #$20        ; set A short
.1936da		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936dc		29 40		and #$40	                AND #$40
.1936de		6b		rtl		                RTL
.1936df						OPL2_SET_MAINTAINSUSTAIN
.1936df		48		pha		                PHA             ; begin setdp macro
.1936e0		08		php		                PHP
.1936e1		c2 20		rep #$20	                REP #$20        ; set A long
.1936e3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936e6		5b		tcd		                TCD
.1936e7		28		plp		                PLP
.1936e8		68		pla		                PLA             ; end setdp macro
.1936e9		08		php		              PHP ; Push the Carry
.1936ea		c2 20		rep #$20	                REP #$20        ; set A long
.1936ec		18		clc		              CLC
.1936ed		a9 20 00	lda #$0020	              LDA #$0020;
.1936f0		85 28		sta $28		              STA OPL2_REG_REGION
.1936f2		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.1936f5		28		plp		              PLP ; Pull the Carry out
.1936f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1936f8		b0 08		bcs $193702	              BCS OPL2_Set_MaintainSustain_Set;
.1936fa		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1936fc		29 df		and #$df	              AND #$DF
.1936fe		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193700		80 06		bra $193708	              BRA OPL2_Set_MaintainSustain_Exit
.193702						OPL2_Set_MaintainSustain_Set
.193702		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193704		09 20		ora #$20	              ORA #$20
.193706		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193708						OPL2_Set_MaintainSustain_Exit
.193708		6b		rtl		                RTL
.193709						OPL2_GET_MAINTAINSUSTAIN
.193709		48		pha		                PHA             ; begin setdp macro
.19370a		08		php		                PHP
.19370b		c2 20		rep #$20	                REP #$20        ; set A long
.19370d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193710		5b		tcd		                TCD
.193711		28		plp		                PLP
.193712		68		pla		                PLA             ; end setdp macro
.193713		c2 20		rep #$20	                REP #$20        ; set A long
.193715		a9 20 00	lda #$0020	              LDA #$0020;
.193718		85 28		sta $28		              STA OPL2_REG_REGION
.19371a		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.19371d		e2 20		sep #$20	                SEP #$20        ; set A short
.19371f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193721		29 20		and #$20	              AND #$20
.193723		6b		rtl		                RTL
.193724						OPL2_SET_ENVELOPESCALING
.193724		48		pha		                PHA             ; begin setdp macro
.193725		08		php		                PHP
.193726		c2 20		rep #$20	                REP #$20        ; set A long
.193728		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19372b		5b		tcd		                TCD
.19372c		28		plp		                PLP
.19372d		68		pla		                PLA             ; end setdp macro
.19372e		08		php		              PHP ; Push the Carry
.19372f		c2 20		rep #$20	                REP #$20        ; set A long
.193731		18		clc		              CLC
.193732		a9 20 00	lda #$0020	              LDA #$0020;
.193735		85 28		sta $28		              STA OPL2_REG_REGION
.193737		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.19373a		28		plp		              PLP ; Pull the Carry out
.19373b		e2 20		sep #$20	                SEP #$20        ; set A short
.19373d		b0 08		bcs $193747	              BCS OPL2_Set_EnvelopeScaling_Set;
.19373f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193741		29 ef		and #$ef	              AND #$EF
.193743		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193745		80 06		bra $19374d	              BRA OPL2_Set_EnvelopeScaling_Exit
.193747						OPL2_Set_EnvelopeScaling_Set
.193747		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193749		09 10		ora #$10	              ORA #$10
.19374b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19374d						OPL2_Set_EnvelopeScaling_Exit
.19374d		6b		rtl		                RTL
.19374e						OPL2_GET_ENVELOPESCALING
.19374e		48		pha		                PHA             ; begin setdp macro
.19374f		08		php		                PHP
.193750		c2 20		rep #$20	                REP #$20        ; set A long
.193752		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193755		5b		tcd		                TCD
.193756		28		plp		                PLP
.193757		68		pla		                PLA             ; end setdp macro
.193758		c2 20		rep #$20	                REP #$20        ; set A long
.19375a		a9 20 00	lda #$0020	              LDA #$0020;
.19375d		85 28		sta $28		              STA OPL2_REG_REGION
.19375f		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.193762		e2 20		sep #$20	                SEP #$20        ; set A short
.193764		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193766		29 10		and #$10	              AND #$10
.193768		6b		rtl		                RTL
.193769						OPL2_GET_MODFREQMULTIPLE
.193769		48		pha		                PHA             ; begin setdp macro
.19376a		08		php		                PHP
.19376b		c2 20		rep #$20	                REP #$20        ; set A long
.19376d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193770		5b		tcd		                TCD
.193771		28		plp		                PLP
.193772		68		pla		                PLA             ; end setdp macro
.193773		c2 20		rep #$20	                REP #$20        ; set A long
.193775		a9 20 00	lda #$0020	              LDA #$0020;
.193778		85 28		sta $28		              STA OPL2_REG_REGION
.19377a		20 60 3b	jsr $193b60	              JSR OPL2_GET_REG_OFFSET
.19377d		e2 20		sep #$20	                SEP #$20        ; set A short
.19377f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193781		29 0f		and #$0f	              AND #$0F
.193783		6b		rtl		              RTL
.193784						OPL2_SET_MODFREQMULTIPLE
.193784		48		pha		                PHA             ; begin setdp macro
.193785		08		php		                PHP
.193786		c2 20		rep #$20	                REP #$20        ; set A long
.193788		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19378b		5b		tcd		                TCD
.19378c		28		plp		                PLP
.19378d		68		pla		                PLA             ; end setdp macro
.19378e		c2 20		rep #$20	                REP #$20        ; set A long
.193790		a9 20 00	lda #$0020	                LDA #$0020;
.193793		85 28		sta $28		                STA OPL2_REG_REGION
.193795		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.193798		e2 20		sep #$20	                SEP #$20        ; set A short
.19379a		a5 32		lda $32		                LDA OPL2_PARAMETER0
.19379c		29 0f		and #$0f	                AND #$0F
.19379e		85 32		sta $32		                STA OPL2_PARAMETER0
.1937a0		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937a2		29 f0		and #$f0	                AND #$F0
.1937a4		05 32		ora $32		                ORA OPL2_PARAMETER0
.1937a6		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1937a8		6b		rtl		                RTL
.1937a9						OPL2_SET_SCALINGLEVEL
.1937a9		48		pha		                PHA             ; begin setdp macro
.1937aa		08		php		                PHP
.1937ab		c2 20		rep #$20	                REP #$20        ; set A long
.1937ad		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937b0		5b		tcd		                TCD
.1937b1		28		plp		                PLP
.1937b2		68		pla		                PLA             ; end setdp macro
.1937b3		c2 20		rep #$20	                REP #$20        ; set A long
.1937b5		a9 40 00	lda #$0040	                LDA #$0040;
.1937b8		85 28		sta $28		                STA OPL2_REG_REGION
.1937ba		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.1937bd		e2 20		sep #$20	                SEP #$20        ; set A short
.1937bf		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1937c1		29 03		and #$03	                AND #$03
.1937c3		0a		asl a		                ASL
.1937c4		0a		asl a		                ASL
.1937c5		0a		asl a		                ASL
.1937c6		0a		asl a		                ASL
.1937c7		0a		asl a		                ASL
.1937c8		0a		asl a		                ASL
.1937c9		85 32		sta $32		                STA OPL2_PARAMETER0
.1937cb		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937cd		29 3f		and #$3f	                AND #$3F
.1937cf		05 32		ora $32		                ORA OPL2_PARAMETER0
.1937d1		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1937d3		6b		rtl		                RTL
.1937d4						OPL2_SET_VOLUME
.1937d4		48		pha		                PHA             ; begin setdp macro
.1937d5		08		php		                PHP
.1937d6		c2 20		rep #$20	                REP #$20        ; set A long
.1937d8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937db		5b		tcd		                TCD
.1937dc		28		plp		                PLP
.1937dd		68		pla		                PLA             ; end setdp macro
.1937de		c2 20		rep #$20	                REP #$20        ; set A long
.1937e0		a9 40 00	lda #$0040	                LDA #$0040  ;
.1937e3		85 28		sta $28		                STA OPL2_REG_REGION
.1937e5		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.1937e8		e2 20		sep #$20	                SEP #$20        ; set A short
.1937ea		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.1937ec		29 3f		and #$3f	                AND #$3F
.1937ee		85 32		sta $32		                STA OPL2_PARAMETER0
.1937f0		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937f2		29 c0		and #$c0	                AND #$C0
.1937f4		05 32		ora $32		                ORA OPL2_PARAMETER0
.1937f6		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1937f8		6b		rtl		                RTL
.1937f9						OPL2_GET_VOLUME
.1937f9		48		pha		                PHA             ; begin setdp macro
.1937fa		08		php		                PHP
.1937fb		c2 20		rep #$20	                REP #$20        ; set A long
.1937fd		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193800		5b		tcd		                TCD
.193801		28		plp		                PLP
.193802		68		pla		                PLA             ; end setdp macro
.193803		c2 20		rep #$20	                REP #$20        ; set A long
.193805		a9 40 00	lda #$0040	                LDA #$0040  ;
.193808		85 28		sta $28		                STA OPL2_REG_REGION
.19380a		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.19380d		e2 20		sep #$20	                SEP #$20        ; set A short
.19380f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193811		29 3f		and #$3f	                AND #$3F
.193813		6b		rtl		                RTL
.193814						OPL2_SET_ATTACK
.193814		48		pha		                PHA             ; begin setdp macro
.193815		08		php		                PHP
.193816		c2 20		rep #$20	                REP #$20        ; set A long
.193818		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19381b		5b		tcd		                TCD
.19381c		28		plp		                PLP
.19381d		68		pla		                PLA             ; end setdp macro
.19381e		c2 20		rep #$20	                REP #$20        ; set A long
.193820		a9 60 00	lda #$0060	                LDA #$0060  ;
.193823		85 28		sta $28		                STA OPL2_REG_REGION
.193825		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.193828		e2 20		sep #$20	                SEP #$20        ; set A short
.19382a		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.19382c		29 0f		and #$0f	                AND #$0F
.19382e		0a		asl a		                ASL
.19382f		0a		asl a		                ASL
.193830		0a		asl a		                ASL
.193831		0a		asl a		                ASL
.193832		85 32		sta $32		                STA OPL2_PARAMETER0
.193834		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193836		29 0f		and #$0f	                AND #$0F
.193838		05 32		ora $32		                ORA OPL2_PARAMETER0
.19383a		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19383c		6b		rtl		                RTL
.19383d						OPL2_GET_ATTACK
.19383d		48		pha		                PHA             ; begin setdp macro
.19383e		08		php		                PHP
.19383f		c2 20		rep #$20	                REP #$20        ; set A long
.193841		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193844		5b		tcd		                TCD
.193845		28		plp		                PLP
.193846		68		pla		                PLA             ; end setdp macro
.193847		c2 20		rep #$20	                REP #$20        ; set A long
.193849		a9 60 00	lda #$0060	                LDA #$0060
.19384c		85 28		sta $28		                STA OPL2_REG_REGION
.19384e		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.193851		e2 20		sep #$20	                SEP #$20        ; set A short
.193853		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193855		29 f0		and #$f0	                AND #$F0
.193857		4a		lsr a		                LSR
.193858		4a		lsr a		                LSR
.193859		4a		lsr a		                LSR
.19385a		4a		lsr a		                LSR
.19385b		6b		rtl		                RTL
.19385c						OPL2_SET_DECAY
.19385c		48		pha		                PHA             ; begin setdp macro
.19385d		08		php		                PHP
.19385e		c2 20		rep #$20	                REP #$20        ; set A long
.193860		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193863		5b		tcd		                TCD
.193864		28		plp		                PLP
.193865		68		pla		                PLA             ; end setdp macro
.193866		c2 20		rep #$20	                REP #$20        ; set A long
.193868		a9 60 00	lda #$0060	                LDA #$0060;
.19386b		85 28		sta $28		                STA OPL2_REG_REGION
.19386d		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.193870		e2 20		sep #$20	                SEP #$20        ; set A short
.193872		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193874		29 0f		and #$0f	                AND #$0F
.193876		85 32		sta $32		                STA OPL2_PARAMETER0
.193878		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19387a		29 f0		and #$f0	                AND #$F0
.19387c		05 32		ora $32		                ORA OPL2_PARAMETER0
.19387e		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193880		6b		rtl		                RTL
.193881						OPL2_GET_DECAY
.193881		48		pha		                PHA             ; begin setdp macro
.193882		08		php		                PHP
.193883		c2 20		rep #$20	                REP #$20        ; set A long
.193885		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193888		5b		tcd		                TCD
.193889		28		plp		                PLP
.19388a		68		pla		                PLA             ; end setdp macro
.19388b		c2 20		rep #$20	                REP #$20        ; set A long
.19388d		a9 60 00	lda #$0060	                LDA #$0060
.193890		85 28		sta $28		                STA OPL2_REG_REGION
.193892		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.193895		e2 20		sep #$20	                SEP #$20        ; set A short
.193897		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193899		29 0f		and #$0f	                AND #$0F
.19389b		6b		rtl		                RTL
.19389c						OPL2_SET_SUSTAIN
.19389c		48		pha		                PHA             ; begin setdp macro
.19389d		08		php		                PHP
.19389e		c2 20		rep #$20	                REP #$20        ; set A long
.1938a0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1938a3		5b		tcd		                TCD
.1938a4		28		plp		                PLP
.1938a5		68		pla		                PLA             ; end setdp macro
.1938a6		c2 20		rep #$20	                REP #$20        ; set A long
.1938a8		a9 80 00	lda #$0080	                LDA #$0080;
.1938ab		85 28		sta $28		                STA OPL2_REG_REGION
.1938ad		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.1938b0		e2 20		sep #$20	                SEP #$20        ; set A short
.1938b2		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1938b4		29 0f		and #$0f	                AND #$0F
.1938b6		0a		asl a		                ASL
.1938b7		0a		asl a		                ASL
.1938b8		0a		asl a		                ASL
.1938b9		0a		asl a		                ASL
.1938ba		85 32		sta $32		                STA OPL2_PARAMETER0
.1938bc		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938be		29 0f		and #$0f	                AND #$0F
.1938c0		05 32		ora $32		                ORA OPL2_PARAMETER0
.1938c2		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1938c4		6b		rtl		                RTL
.1938c5						OPL2_GET_SUSTAIN
.1938c5		48		pha		                PHA             ; begin setdp macro
.1938c6		08		php		                PHP
.1938c7		c2 20		rep #$20	                REP #$20        ; set A long
.1938c9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1938cc		5b		tcd		                TCD
.1938cd		28		plp		                PLP
.1938ce		68		pla		                PLA             ; end setdp macro
.1938cf		c2 20		rep #$20	                REP #$20        ; set A long
.1938d1		a9 80 00	lda #$0080	                LDA #$0080
.1938d4		85 28		sta $28		                STA OPL2_REG_REGION
.1938d6		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.1938d9		e2 20		sep #$20	                SEP #$20        ; set A short
.1938db		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938dd		29 f0		and #$f0	                AND #$F0
.1938df		4a		lsr a		                LSR
.1938e0		4a		lsr a		                LSR
.1938e1		4a		lsr a		                LSR
.1938e2		4a		lsr a		                LSR
.1938e3		6b		rtl		                RTL
.1938e4						OPL2_SET_RELEASE
.1938e4		48		pha		                PHA             ; begin setdp macro
.1938e5		08		php		                PHP
.1938e6		c2 20		rep #$20	                REP #$20        ; set A long
.1938e8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1938eb		5b		tcd		                TCD
.1938ec		28		plp		                PLP
.1938ed		68		pla		                PLA             ; end setdp macro
.1938ee		c2 20		rep #$20	                REP #$20        ; set A long
.1938f0		a9 80 00	lda #$0080	                LDA #$0080;
.1938f3		85 28		sta $28		                STA OPL2_REG_REGION
.1938f5		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.1938f8		e2 20		sep #$20	                SEP #$20        ; set A short
.1938fa		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1938fc		29 0f		and #$0f	                AND #$0F
.1938fe		85 32		sta $32		                STA OPL2_PARAMETER0
.193900		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193902		29 f0		and #$f0	                AND #$F0
.193904		05 32		ora $32		                ORA OPL2_PARAMETER0
.193906		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193908		6b		rtl		                RTL
.193909						OPL2_GET_RELEASE
.193909		48		pha		                PHA             ; begin setdp macro
.19390a		08		php		                PHP
.19390b		c2 20		rep #$20	                REP #$20        ; set A long
.19390d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193910		5b		tcd		                TCD
.193911		28		plp		                PLP
.193912		68		pla		                PLA             ; end setdp macro
.193913		c2 20		rep #$20	                REP #$20        ; set A long
.193915		a9 80 00	lda #$0080	                LDA #$0080
.193918		85 28		sta $28		                STA OPL2_REG_REGION
.19391a		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.19391d		e2 20		sep #$20	                SEP #$20        ; set A short
.19391f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193921		29 0f		and #$0f	                AND #$0F
.193923		6b		rtl		                RTL
.193924						OPL2_SET_FNUMBER
.193924		48		pha		                PHA             ; begin setdp macro
.193925		08		php		                PHP
.193926		c2 20		rep #$20	                REP #$20        ; set A long
.193928		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19392b		5b		tcd		                TCD
.19392c		28		plp		                PLP
.19392d		68		pla		                PLA             ; end setdp macro
.19392e		e2 20		sep #$20	                SEP #$20        ; set A short
.193930		18		clc		                CLC
.193931		a5 27		lda $27		                LDA OPL2_CHANNEL
.193933		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193935		69 a0		adc #$a0	                ADC #$A0
.193937		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193939		a9 00		lda #$00	                LDA #$00
.19393b		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.19393d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19393f		18		clc		                CLC
.193940		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193943		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193945		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193947		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.19394a		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.19394c		e2 20		sep #$20	                SEP #$20        ; set A short
.19394e		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.193950		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.193952		18		clc		                CLC
.193953		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.193955		69 10		adc #$10	                ADC #$10
.193957		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193959		a5 33		lda $33		                LDA OPL2_PARAMETER1
.19395b		29 03		and #$03	                AND #$03
.19395d		85 33		sta $33		                STA OPL2_PARAMETER1
.19395f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193961		29 fc		and #$fc	                AND #$FC
.193963		05 33		ora $33		                ORA OPL2_PARAMETER1
.193965		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193967		6b		rtl		                RTL
.193968						OPL2_GET_FNUMBER
.193968		48		pha		                PHA             ; begin setdp macro
.193969		08		php		                PHP
.19396a		c2 20		rep #$20	                REP #$20        ; set A long
.19396c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19396f		5b		tcd		                TCD
.193970		28		plp		                PLP
.193971		68		pla		                PLA             ; end setdp macro
.193972		e2 20		sep #$20	                SEP #$20        ; set A short
.193974		18		clc		                CLC
.193975		a5 27		lda $27		                LDA OPL2_CHANNEL
.193977		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193979		69 a0		adc #$a0	                ADC #$A0
.19397b		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.19397d		a9 00		lda #$00	                LDA #$00
.19397f		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193981		c2 30		rep #$30	                REP #$30        ; set A&X long
.193983		18		clc		                CLC
.193984		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193987		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193989		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19398b		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.19398e		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193990		e2 20		sep #$20	                SEP #$20        ; set A short
.193992		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193994		85 32		sta $32		                STA OPL2_PARAMETER0
.193996		18		clc		                CLC
.193997		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.193999		69 10		adc #$10	                ADC #$10
.19399b		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19399d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19399f		29 03		and #$03	                AND #$03
.1939a1		85 33		sta $33		                STA OPL2_PARAMETER1
.1939a3		6b		rtl		                RTL
.1939a4						OPL2_Set_Frequency
.1939a4		6b		rtl		                RTL
.1939a5						OPL2_Get_Frequency
.1939a5		6b		rtl		                RTL
.1939a6						OPL2_SET_BLOCK
.1939a6		48		pha		                PHA             ; begin setdp macro
.1939a7		08		php		                PHP
.1939a8		c2 20		rep #$20	                REP #$20        ; set A long
.1939aa		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939ad		5b		tcd		                TCD
.1939ae		28		plp		                PLP
.1939af		68		pla		                PLA             ; end setdp macro
.1939b0		e2 20		sep #$20	                SEP #$20        ; set A short
.1939b2		18		clc		                CLC
.1939b3		a5 27		lda $27		                LDA OPL2_CHANNEL
.1939b5		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.1939b7		69 b0		adc #$b0	                ADC #$B0
.1939b9		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1939bb		a9 00		lda #$00	                LDA #$00
.1939bd		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1939bf		c2 30		rep #$30	                REP #$30        ; set A&X long
.1939c1		18		clc		                CLC
.1939c2		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.1939c5		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.1939c7		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1939c9		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.1939cc		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1939ce		e2 20		sep #$20	                SEP #$20        ; set A short
.1939d0		a5 31		lda $31		                LDA OPL2_OCTAVE
.1939d2		29 07		and #$07	                AND #$07
.1939d4		0a		asl a		                ASL
.1939d5		0a		asl a		                ASL
.1939d6		85 31		sta $31		                STA OPL2_OCTAVE
.1939d8		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1939da		29 e3		and #$e3	                AND #$E3
.1939dc		05 31		ora $31		                ORA OPL2_OCTAVE
.1939de		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1939e0		60		rts		                RTS
.1939e1						OPL2_SET_KEYON
.1939e1		48		pha		                PHA             ; begin setdp macro
.1939e2		08		php		                PHP
.1939e3		c2 20		rep #$20	                REP #$20        ; set A long
.1939e5		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939e8		5b		tcd		                TCD
.1939e9		28		plp		                PLP
.1939ea		68		pla		                PLA             ; end setdp macro
.1939eb		e2 20		sep #$20	                SEP #$20        ; set A short
.1939ed		18		clc		                CLC
.1939ee		a5 27		lda $27		                LDA OPL2_CHANNEL
.1939f0		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.1939f2		69 b0		adc #$b0	                ADC #$B0
.1939f4		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1939f6		a9 00		lda #$00	                LDA #$00
.1939f8		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1939fa		c2 30		rep #$30	                REP #$30        ; set A&X long
.1939fc		18		clc		                CLC
.1939fd		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193a00		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193a02		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193a04		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193a07		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193a09		e2 20		sep #$20	                SEP #$20        ; set A short
.193a0b		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193a0d		29 01		and #$01	                AND #$01
.193a0f		f0 02		beq $193a13	                BEQ SET_KEYON_OFF
.193a11		a9 20		lda #$20	                LDA #$20
.193a13						    SET_KEYON_OFF
.193a13		85 32		sta $32		                STA OPL2_PARAMETER0
.193a15		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a17		29 df		and #$df	                AND #$DF
.193a19		05 32		ora $32		                ORA OPL2_PARAMETER0
.193a1b		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a1d		60		rts		                RTS
.193a1e						OPL2_SET_FEEDBACK
.193a1e		48		pha		                PHA             ; begin setdp macro
.193a1f		08		php		                PHP
.193a20		c2 20		rep #$20	                REP #$20        ; set A long
.193a22		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a25		5b		tcd		                TCD
.193a26		28		plp		                PLP
.193a27		68		pla		                PLA             ; end setdp macro
.193a28		e2 20		sep #$20	                SEP #$20        ; set A short
.193a2a		18		clc		              CLC
.193a2b		a5 27		lda $27		              LDA OPL2_CHANNEL
.193a2d		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193a2f		69 c0		adc #$c0	              ADC #$C0
.193a31		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193a33		a9 00		lda #$00	              LDA #$00
.193a35		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193a37		c2 30		rep #$30	                REP #$30        ; set A&X long
.193a39		18		clc		              CLC
.193a3a		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193a3d		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193a3f		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193a41		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193a44		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193a46		e2 20		sep #$20	                SEP #$20        ; set A short
.193a48		a5 32		lda $32		              LDA OPL2_PARAMETER0
.193a4a		29 07		and #$07	              AND #$07
.193a4c		0a		asl a		              ASL
.193a4d		85 32		sta $32		              STA OPL2_PARAMETER0
.193a4f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193a51		29 01		and #$01	              AND #$01
.193a53		05 32		ora $32		              ORA OPL2_PARAMETER0
.193a55		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193a57		6b		rtl		                RTL
.193a58						OPL2_SET_SYNTHMODE
.193a58		48		pha		                PHA             ; begin setdp macro
.193a59		08		php		                PHP
.193a5a		c2 20		rep #$20	                REP #$20        ; set A long
.193a5c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a5f		5b		tcd		                TCD
.193a60		28		plp		                PLP
.193a61		68		pla		                PLA             ; end setdp macro
.193a62		08		php		              PHP ; Push the Carry
.193a63		e2 20		sep #$20	                SEP #$20        ; set A short
.193a65		18		clc		              CLC
.193a66		a5 27		lda $27		              LDA OPL2_CHANNEL
.193a68		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193a6a		69 c0		adc #$c0	              ADC #$C0
.193a6c		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193a6e		a9 00		lda #$00	              LDA #$00
.193a70		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193a72		c2 30		rep #$30	                REP #$30        ; set A&X long
.193a74		18		clc		              CLC
.193a75		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193a78		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193a7a		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193a7c		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193a7f		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193a81		28		plp		              PLP ; Pull the Carry out
.193a82		e2 20		sep #$20	                SEP #$20        ; set A short
.193a84		b0 08		bcs $193a8e	              BCS OPL2_Set_Synthmode_Set;
.193a86		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193a88		29 fe		and #$fe	              AND #$FE
.193a8a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193a8c		80 06		bra $193a94	              BRA OPL2_Set_Synthmode_Exit
.193a8e						OPL2_Set_Synthmode_Set
.193a8e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193a90		09 01		ora #$01	              ORA #$01
.193a92		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193a94						OPL2_Set_Synthmode_Exit
.193a94		6b		rtl		                RTL
.193a95						OPL2_SET_DEEPTREMOLO
.193a95		48		pha		                PHA             ; begin setdp macro
.193a96		08		php		                PHP
.193a97		c2 20		rep #$20	                REP #$20        ; set A long
.193a99		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a9c		5b		tcd		                TCD
.193a9d		28		plp		                PLP
.193a9e		68		pla		                PLA             ; end setdp macro
.193a9f		c2 20		rep #$20	                REP #$20        ; set A long
.193aa1		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.193aa4		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193aa6		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193aa9		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193aab		e2 20		sep #$20	                SEP #$20        ; set A short
.193aad		b0 08		bcs $193ab7	              BCS OPL2_Set_DeepTremolo_Set;
.193aaf		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193ab1		29 7f		and #$7f	              AND #$7F
.193ab3		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193ab5		80 06		bra $193abd	              BRA OPL2_Set_DeepTremolo_Exit
.193ab7						OPL2_Set_DeepTremolo_Set
.193ab7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193ab9		09 80		ora #$80	              ORA #$80
.193abb		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193abd						OPL2_Set_DeepTremolo_Exit
.193abd		6b		rtl		                RTL
.193abe						OPL2_SET_DEEPVIBRATO
.193abe		48		pha		                PHA             ; begin setdp macro
.193abf		08		php		                PHP
.193ac0		c2 20		rep #$20	                REP #$20        ; set A long
.193ac2		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193ac5		5b		tcd		                TCD
.193ac6		28		plp		                PLP
.193ac7		68		pla		                PLA             ; end setdp macro
.193ac8		c2 20		rep #$20	                REP #$20        ; set A long
.193aca		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.193acd		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193acf		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193ad2		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193ad4		e2 20		sep #$20	                SEP #$20        ; set A short
.193ad6		b0 08		bcs $193ae0	              BCS OPL2_Set_DeepVibrato_Set;
.193ad8		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193ada		29 bf		and #$bf	              AND #$BF
.193adc		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193ade		80 06		bra $193ae6	              BRA OPL2_Set_DeepVibrato_Exit
.193ae0						OPL2_Set_DeepVibrato_Set
.193ae0		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193ae2		09 40		ora #$40	              ORA #$40
.193ae4		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193ae6						OPL2_Set_DeepVibrato_Exit
.193ae6		6b		rtl		                RTL
.193ae7						OPL2_SET_PERCUSSION
.193ae7		48		pha		                PHA             ; begin setdp macro
.193ae8		08		php		                PHP
.193ae9		c2 20		rep #$20	                REP #$20        ; set A long
.193aeb		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193aee		5b		tcd		                TCD
.193aef		28		plp		                PLP
.193af0		68		pla		                PLA             ; end setdp macro
.193af1		c2 20		rep #$20	                REP #$20        ; set A long
.193af3		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.193af6		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193af8		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193afb		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193afd		e2 20		sep #$20	                SEP #$20        ; set A short
.193aff		b0 08		bcs $193b09	                BCS OPL2_Set_Percussion_Set;
.193b01		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193b03		29 df		and #$df	                AND #$DF
.193b05		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193b07		80 06		bra $193b0f	                BRA OPL2_Set_Percussion_Exit
.193b09						OPL2_Set_Percussion_Set
.193b09		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193b0b		09 20		ora #$20	                ORA #$20
.193b0d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193b0f						OPL2_Set_Percussion_Exit
.193b0f		6b		rtl		                RTL
.193b10						OPL2_SET_DRUMS
.193b10		48		pha		                PHA             ; begin setdp macro
.193b11		08		php		                PHP
.193b12		c2 20		rep #$20	                REP #$20        ; set A long
.193b14		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193b17		5b		tcd		                TCD
.193b18		28		plp		                PLP
.193b19		68		pla		                PLA             ; end setdp macro
.193b1a		c2 20		rep #$20	                REP #$20        ; set A long
.193b1c		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.193b1f		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193b21		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193b24		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193b26		e2 20		sep #$20	                SEP #$20        ; set A short
.193b28		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193b2a		29 1f		and #$1f	                AND #$1F
.193b2c		85 32		sta $32		                STA OPL2_PARAMETER0
.193b2e		49 ff		eor #$ff	                EOR #$FF
.193b30		85 33		sta $33		                STA OPL2_PARAMETER1
.193b32		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193b34		25 33		and $33		                AND OPL2_PARAMETER1
.193b36		05 32		ora $32		                ORA OPL2_PARAMETER0
.193b38		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193b3a		6b		rtl		                RTL
.193b3b						OPL2_SET_WAVEFORM
.193b3b		48		pha		                PHA             ; begin setdp macro
.193b3c		08		php		                PHP
.193b3d		c2 20		rep #$20	                REP #$20        ; set A long
.193b3f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193b42		5b		tcd		                TCD
.193b43		28		plp		                PLP
.193b44		68		pla		                PLA             ; end setdp macro
.193b45		c2 20		rep #$20	                REP #$20        ; set A long
.193b47		a9 e0 00	lda #$00e0	                LDA #$00E0;
.193b4a		85 28		sta $28		                STA OPL2_REG_REGION
.193b4c		20 60 3b	jsr $193b60	                JSR OPL2_GET_REG_OFFSET
.193b4f		e2 20		sep #$20	                SEP #$20        ; set A short
.193b51		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193b53		29 03		and #$03	                AND #$03
.193b55		85 32		sta $32		                STA OPL2_PARAMETER0
.193b57		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193b59		29 fc		and #$fc	                AND #$FC
.193b5b		05 32		ora $32		                ORA OPL2_PARAMETER0
.193b5d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193b5f		6b		rtl		                RTL
.193b60						OPL2_GET_REG_OFFSET
.193b60		e2 30		sep #$30	                SEP #$30        ; set A&X short
.193b62		a5 27		lda $27		                LDA OPL2_CHANNEL
.193b64		29 0f		and #$0f	                AND #$0F
.193b66		aa		tax		                TAX
.193b67		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.193b69		d0 06		bne $193b71	                BNE OPL2_Get_Register_Offset_l0
.193b6b		bf a8 11 19	lda $1911a8,x	                LDA @lregisterOffsets_operator0, X
.193b6f		80 04		bra $193b75	                BRA OPL2_Get_Register_Offset_exit
.193b71						OPL2_Get_Register_Offset_l0
.193b71		bf b1 11 19	lda $1911b1,x	                LDA @lregisterOffsets_operator1, X
.193b75						OPL2_Get_Register_Offset_exit
.193b75		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193b77		a9 00		lda #$00	                LDA #$00
.193b79		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193b7b		c2 30		rep #$30	                REP #$30        ; set A&X long
.193b7d		18		clc		                CLC
.193b7e		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193b81		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193b83		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.193b85		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193b87		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193b8a		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193b8c		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/sdcard_controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.193b8d						ITRACE
.193b8d		08		php		                PHP
.193b8e		c2 30		rep #$30	                REP #$30        ; set A&X long
.193b90		8b		phb		                PHB                 ; Print the text
.193b91		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.193b93		aa		tax		                TAX                 ; ... into X
.193b94		e2 20		sep #$20	                SEP #$20        ; set A short
.193b96		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.193b98		48		pha		                PHA
.193b99		ab		plb		                PLB                 ; ... into B
.193b9a		22 46 07 19	jsl $190746	                JSL IPUTS           ; Print the string
.193b9e		c2 20		rep #$20	                REP #$20        ; set A long
.193ba0		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.193ba2		83 08		sta $08,s	                STA #8,S
.193ba4		a3 02		lda $02,s	                LDA #2,S
.193ba6		83 06		sta $06,s	                STA #6,S
.193ba8		ab		plb		                PLB
.193ba9		68		pla		                PLA                 ; Clean up the stack
.193baa		68		pla		                PLA
.193bab		28		plp		                PLP
.193bac		6b		rtl		                RTL
.193bad						ISETTIMEOUT
.193bad		8b		phb		                PHB
.193bae		0b		phd		                PHD
.193baf		08		php		                PHP
.193bb0		48		pha		                PHA             ; begin setdbr macro
.193bb1		08		php		                PHP
.193bb2		e2 20		sep #$20	                SEP #$20        ; set A short
.193bb4		a9 00		lda #$00	                LDA #0
.193bb6		48		pha		                PHA
.193bb7		ab		plb		                PLB
.193bb8		28		plp		                PLP
.193bb9		68		pla		                PLA             ; end setdbr macro
.193bba		48		pha		                PHA             ; begin setdp macro
.193bbb		08		php		                PHP
.193bbc		c2 20		rep #$20	                REP #$20        ; set A long
.193bbe		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193bc1		5b		tcd		                TCD
.193bc2		28		plp		                PLP
.193bc3		68		pla		                PLA             ; end setdp macro
.193bc4		78		sei		                SEI                             ; We don't want to be interrupted
.193bc5		e2 20		sep #$20	                SEP #$20        ; set A short
.193bc7		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.193bc9		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.193bcb		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.193bcd		85 0c		sta $032c	                STA @b BIOS_FLAGS
.193bcf		28		plp		done            PLP
.193bd0		2b		pld		                PLD
.193bd1		ab		plb		                PLB
.193bd2		6b		rtl		                RTL
.193bd3						ICMDBLOCK
.193bd3		0b		phd		                PHD
.193bd4		08		php		                PHP
.193bd5		48		pha		                PHA             ; begin setdp macro
.193bd6		08		php		                PHP
.193bd7		c2 20		rep #$20	                REP #$20        ; set A long
.193bd9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193bdc		5b		tcd		                TCD
.193bdd		28		plp		                PLP
.193bde		68		pla		                PLA             ; end setdp macro
.193bdf		e2 20		sep #$20	                SEP #$20        ; set A short
.193be1		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.193be3		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.193be5		d0 06		bne $193bed	                BNE ret_success             ; No: just return
.193be7		22 38 65 19	jsl $196538	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.193beb		90 0c		bcc $193bf9	                BCC pass_failure
.193bed						ret_success
.193bed		e2 20		sep #$20	                SEP #$20        ; set A short
.193bef		64 00		stz $0320	                STZ BIOS_STATUS
.193bf1		28		plp		                PLP
.193bf2		2b		pld		                PLD
.193bf3		38		sec		                SEC
.193bf4		6b		rtl		                RTL
.193bf5						ret_failure
.193bf5		e2 20		sep #$20	                SEP #$20        ; set A short
.193bf7		85 00		sta $0320	                STA BIOS_STATUS
.193bf9		28		plp		pass_failure    PLP
.193bfa		2b		pld		                PLD
.193bfb		18		clc		                CLC
.193bfc		6b		rtl		                RTL
.193bfd						IGETBLOCK
.193bfd		5a		phy		                PHY
.193bfe		0b		phd		                PHD
.193bff		8b		phb		                PHB
.193c00		08		php		                PHP
.193c01		48		pha		                PHA             ; begin setdbr macro
.193c02		08		php		                PHP
.193c03		e2 20		sep #$20	                SEP #$20        ; set A short
.193c05		a9 00		lda #$00	                LDA #0
.193c07		48		pha		                PHA
.193c08		ab		plb		                PLB
.193c09		28		plp		                PLP
.193c0a		68		pla		                PLA             ; end setdbr macro
.193c0b		48		pha		                PHA             ; begin setdp macro
.193c0c		08		php		                PHP
.193c0d		c2 20		rep #$20	                REP #$20        ; set A long
.193c0f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193c12		5b		tcd		                TCD
.193c13		28		plp		                PLP
.193c14		68		pla		                PLA             ; end setdp macro
.193c15		e2 20		sep #$20	                SEP #$20        ; set A short
.193c17		a0 00 00	ldy #$0000	                LDY #0
.193c1a		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.193c1c		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.193c1e		c8		iny		                INY
.193c1f		c0 00 02	cpy #$0200	                CPY #512
.193c22		d0 f8		bne $193c1c	                BNE clr_loop
.193c24		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.193c26		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.193c28		f0 14		beq $193c3e	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.193c2a		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.193c2c		f0 18		beq $193c46	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.193c2e		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193c30		f0 1c		beq $193c4e	                BEQ hd_getblock
.193c32		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.193c34						ret_failure
.193c34		e2 20		sep #$20	                SEP #$20        ; set A short
.193c36		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.193c38		28		plp		                PLP
.193c39		ab		plb		                PLB
.193c3a		2b		pld		                PLD
.193c3b		7a		ply		                PLY
.193c3c		38		sec		                SEC                                 ; Return failure
.193c3d		6b		rtl		                RTL
.193c3e		22 44 5a 19	jsl $195a44	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.193c42		b0 12		bcs $193c56	                BCS ret_success
.193c44		80 ee		bra $193c34	                BRA ret_failure
.193c46		22 3d 63 19	jsl $19633d	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.193c4a		b0 0a		bcs $193c56	                BCS ret_success
.193c4c		80 e6		bra $193c34	                BRA ret_failure
.193c4e		22 51 69 19	jsl $196951	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.193c52		b0 02		bcs $193c56	                BCS ret_success
.193c54		80 de		bra $193c34	                BRA ret_failure
.193c56						ret_success
.193c56		e2 20		sep #$20	                SEP #$20        ; set A short
.193c58		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.193c5a		28		plp		                PLP
.193c5b		ab		plb		                PLB
.193c5c		2b		pld		                PLD
.193c5d		7a		ply		                PLY
.193c5e		38		sec		                SEC                                 ; Return success
.193c5f		6b		rtl		                RTL
.193c60						IPUTBLOCK
.193c60		0b		phd		                PHD
.193c61		8b		phb		                PHB
.193c62		08		php		                PHP
.193c63		48		pha		                PHA             ; begin setdbr macro
.193c64		08		php		                PHP
.193c65		e2 20		sep #$20	                SEP #$20        ; set A short
.193c67		a9 00		lda #$00	                LDA #0
.193c69		48		pha		                PHA
.193c6a		ab		plb		                PLB
.193c6b		28		plp		                PLP
.193c6c		68		pla		                PLA             ; end setdbr macro
.193c6d		48		pha		                PHA             ; begin setdp macro
.193c6e		08		php		                PHP
.193c6f		c2 20		rep #$20	                REP #$20        ; set A long
.193c71		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193c74		5b		tcd		                TCD
.193c75		28		plp		                PLP
.193c76		68		pla		                PLA             ; end setdp macro
.193c77		e2 20		sep #$20	                SEP #$20        ; set A short
.193c79		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.193c7b		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.193c7d		f0 13		beq $193c92	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.193c7f		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.193c81		f0 17		beq $193c9a	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.193c83		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193c85		f0 1b		beq $193ca2	                BEQ hd_putblock
.193c87		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.193c89						ret_failure
.193c89		e2 20		sep #$20	                SEP #$20        ; set A short
.193c8b		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.193c8d		28		plp		                PLP
.193c8e		ab		plb		                PLB
.193c8f		2b		pld		                PLD
.193c90		18		clc		                CLC                                 ; Return failure
.193c91		6b		rtl		                RTL
.193c92		22 eb 5a 19	jsl $195aeb	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.193c96		90 f1		bcc $193c89	                BCC ret_failure
.193c98		80 10		bra $193caa	                BRA ret_success
.193c9a		22 a2 63 19	jsl $1963a2	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.193c9e		90 e9		bcc $193c89	                BCC ret_failure
.193ca0		80 08		bra $193caa	                BRA ret_success
.193ca2		22 dc 69 19	jsl $1969dc	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.193ca6		90 e1		bcc $193c89	                BCC ret_failure
.193ca8		80 00		bra $193caa	                BRA ret_success
.193caa						ret_success
.193caa		e2 20		sep #$20	                SEP #$20        ; set A short
.193cac		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.193cae		28		plp		                PLP
.193caf		ab		plb		                PLB
.193cb0		2b		pld		                PLD
.193cb1		38		sec		                SEC                                 ; Return success
.193cb2		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.193cb3						DOS_DIROPEN
.193cb3		da		phx		                PHX
.193cb4		5a		phy		                PHY
.193cb5		0b		phd		                PHD
.193cb6		8b		phb		                PHB
.193cb7		08		php		                PHP
.193cb8		48		pha		                PHA             ; begin setdbr macro
.193cb9		08		php		                PHP
.193cba		e2 20		sep #$20	                SEP #$20        ; set A short
.193cbc		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193cbe		48		pha		                PHA
.193cbf		ab		plb		                PLB
.193cc0		28		plp		                PLP
.193cc1		68		pla		                PLA             ; end setdbr macro
.193cc2		48		pha		                PHA             ; begin setdp macro
.193cc3		08		php		                PHP
.193cc4		c2 20		rep #$20	                REP #$20        ; set A long
.193cc6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193cc9		5b		tcd		                TCD
.193cca		28		plp		                PLP
.193ccb		68		pla		                PLA             ; end setdp macro
.193ccc		ad 20 a0	lda $18a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.193ccf		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.193cd2		ad 22 a0	lda $18a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.193cd5		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193cd8		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.193cdb		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193cdd		85 18		sta $0338	                STA DOS_DIR_PTR
.193cdf		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193ce2		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193ce4		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193ce6		e2 20		sep #$20	                SEP #$20        ; set A short
.193ce8		ad 01 a0	lda $18a001	                LDA FILE_SYSTEM             ; Check the file system
.193ceb		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.193ced		d0 24		bne $193d13	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.193cef						fetch_fat12
.193cef		e2 20		sep #$20	                SEP #$20        ; set A short
.193cf1		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.193cf3		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.193cf6		c2 20		rep #$20	                REP #$20        ; set A long
.193cf8		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.193cfa		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193cfc		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.193cfe		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193d00		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.193d03		85 02		sta $0322	                STA BIOS_LBA
.193d05		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193d08		85 04		sta $0324	                STA BIOS_LBA+2
.193d0a		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.193d0e		b0 1f		bcs $193d2f	                BCS do_success              ; If sucessful, set the directory cursor
.193d10		82 84 18	brl $195597	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193d13						fetch_fat32
.193d13		e2 20		sep #$20	                SEP #$20        ; set A short
.193d15		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.193d17		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.193d1a		c2 20		rep #$20	                REP #$20        ; set A long
.193d1c		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.193d1f		85 10		sta $0330	                STA DOS_CLUS_ID
.193d21		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193d24		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193d26		22 96 42 19	jsl $194296	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.193d2a		b0 03		bcs $193d2f	                BCS do_success              ; If successful: set the directory cursor
.193d2c		82 68 18	brl $195597	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193d2f		82 6c 18	brl $19559e	do_success      BRL IF_SUCCESS
.193d32						DOS_DIRFIRST
.193d32		0b		phd		                PHD
.193d33		08		php		                PHP
.193d34		48		pha		                PHA             ; begin setdp macro
.193d35		08		php		                PHP
.193d36		c2 20		rep #$20	                REP #$20        ; set A long
.193d38		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193d3b		5b		tcd		                TCD
.193d3c		28		plp		                PLP
.193d3d		68		pla		                PLA             ; end setdp macro
.193d3e		c2 20		rep #$20	                REP #$20        ; set A long
.193d40		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.193d43		85 18		sta $0338	                STA DOS_DIR_PTR
.193d45		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193d48		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193d4a		28		plp		                PLP
.193d4b		2b		pld		                PLD
.193d4c		6b		rtl		                RTL
.193d4d						DOS_DIRNEXT
.193d4d		da		phx		                PHX
.193d4e		5a		phy		                PHY
.193d4f		0b		phd		                PHD
.193d50		8b		phb		                PHB
.193d51		08		php		                PHP
.193d52		48		pha		                PHA             ; begin setdbr macro
.193d53		08		php		                PHP
.193d54		e2 20		sep #$20	                SEP #$20        ; set A short
.193d56		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193d58		48		pha		                PHA
.193d59		ab		plb		                PLB
.193d5a		28		plp		                PLP
.193d5b		68		pla		                PLA             ; end setdbr macro
.193d5c		48		pha		                PHA             ; begin setdp macro
.193d5d		08		php		                PHP
.193d5e		c2 20		rep #$20	                REP #$20        ; set A long
.193d60		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193d63		5b		tcd		                TCD
.193d64		28		plp		                PLP
.193d65		68		pla		                PLA             ; end setdp macro
.193d66		c2 20		rep #$20	                REP #$20        ; set A long
.193d68		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.193d69		a5 18		lda $0338	                LDA DOS_DIR_PTR
.193d6b		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.193d6e		85 18		sta $0338	                STA DOS_DIR_PTR
.193d70		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.193d72		69 00 00	adc #$0000	                ADC #0
.193d75		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193d77		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.193d78		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.193d7b		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.193d7d		85 28		sta $0348	                STA DOS_TEMP
.193d7f		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER_END
.193d82		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.193d84		85 2a		sta $034a	                STA DOS_TEMP+2
.193d86		30 0c		bmi $193d94	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.193d88		f0 03		beq $193d8d	                BEQ check_lower
.193d8a		82 11 18	brl $19559e	                BRL IF_SUCCESS
.193d8d		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.193d8f		f0 03		beq $193d94	                BEQ get_next_block
.193d91		82 0a 18	brl $19559e	                BRL IF_SUCCESS
.193d94						get_next_block
.193d94		e2 20		sep #$20	                SEP #$20        ; set A short
.193d96		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.193d99		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.193d9b		f0 38		beq $193dd5	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.193d9d						next_sector
.193d9d		c2 20		rep #$20	                REP #$20        ; set A long
.193d9f		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.193da2		1a		inc a		                INC A
.193da3		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.193da6		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.193da9		d0 07		bne $193db2	                BNE read_sector
.193dab		e2 20		sep #$20	                SEP #$20        ; set A short
.193dad		a9 00		lda #$00	                LDA #0
.193daf		82 e1 17	brl $195593	                BRL IF_FAILURE
.193db2						read_sector
.193db2		c2 20		rep #$20	                REP #$20        ; set A long
.193db4		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.193db7		85 02		sta $0322	                STA BIOS_LBA
.193db9		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193dbc		85 04		sta $0324	                STA BIOS_LBA+2
.193dbe		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.193dc1		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193dc3		85 18		sta $0338	                STA DOS_DIR_PTR
.193dc5		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193dc8		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193dca		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193dcc		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.193dd0		b0 39		bcs $193e0b	                BCS do_success              ; If successful: set the directory cursor
.193dd2		82 c2 17	brl $195597	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193dd5						next_cluster
.193dd5		c2 20		rep #$20	                REP #$20        ; set A long
.193dd7		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.193dda		85 10		sta $0330	                STA DOS_CLUS_ID
.193ddc		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193ddf		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193de1		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.193de4		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193de6		85 18		sta $0338	                STA DOS_DIR_PTR
.193de8		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193deb		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193ded		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193def		22 aa 46 19	jsl $1946aa	                JSL NEXTCLUSTER             ; Try to find the next cluster
.193df3		b0 03		bcs $193df8	                BCS set_next
.193df5		82 9f 17	brl $195597	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.193df8		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.193dfa		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.193dfd		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.193dff		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193e02		22 96 42 19	jsl $194296	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.193e06		b0 03		bcs $193e0b	                BCS do_success              ; If successful: set the directory cursor
.193e08		82 8c 17	brl $195597	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193e0b		82 90 17	brl $19559e	do_success      BRL IF_SUCCESS
.193e0e						DOS_DIRFINDFREE
.193e0e		da		phx		                PHX
.193e0f		5a		phy		                PHY
.193e10		0b		phd		                PHD
.193e11		8b		phb		                PHB
.193e12		08		php		                PHP
.193e13		48		pha		                PHA             ; begin setdbr macro
.193e14		08		php		                PHP
.193e15		e2 20		sep #$20	                SEP #$20        ; set A short
.193e17		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193e19		48		pha		                PHA
.193e1a		ab		plb		                PLB
.193e1b		28		plp		                PLP
.193e1c		68		pla		                PLA             ; end setdbr macro
.193e1d		48		pha		                PHA             ; begin setdp macro
.193e1e		08		php		                PHP
.193e1f		c2 20		rep #$20	                REP #$20        ; set A long
.193e21		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193e24		5b		tcd		                TCD
.193e25		28		plp		                PLP
.193e26		68		pla		                PLA             ; end setdp macro
.193e27		22 b5 50 19	jsl $1950b5	                JSL IF_DIROPEN
.193e2b		b0 06		bcs $193e33	                BCS start_walk
.193e2d		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.193e30		82 28 00	brl $193e5b	                BRL ret_failure
.193e33		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.193e36						chk_entry
.193e36		e2 20		sep #$20	                SEP #$20        ; set A short
.193e38		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.193e3a		f0 1c		beq $193e58	                BEQ ret_success             ; If 0: we have a blank... return it
.193e3c		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.193e3e		f0 18		beq $193e58	                BEQ ret_success             ; Yes: return it
.193e40		22 ef 50 19	jsl $1950ef	                JSL IF_DIRNEXT              ; Go to the next directory entry
.193e44		b0 ed		bcs $193e33	                BCS start_walk              ; If we got one, start walking it
.193e46		22 5e 3e 19	jsl $193e5e	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.193e4a		90 0f		bcc $193e5b	                BCC ret_failure             ; If that didn't work, return the failure
.193e4c		c2 20		rep #$20	                REP #$20        ; set A long
.193e4e		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.193e51		85 18		sta $0338	                STA DOS_DIR_PTR
.193e53		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193e56		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193e58		82 43 17	brl $19559e	ret_success     BRL IF_SUCCESS
.193e5b		82 35 17	brl $195593	ret_failure     BRL IF_FAILURE
.193e5e						DOS_DIRAPPEND
.193e5e		da		phx		                PHX
.193e5f		8b		phb		                PHB
.193e60		0b		phd		                PHD
.193e61		08		php		                PHP
.193e62		48		pha		                PHA             ; begin setdbr macro
.193e63		08		php		                PHP
.193e64		e2 20		sep #$20	                SEP #$20        ; set A short
.193e66		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193e68		48		pha		                PHA
.193e69		ab		plb		                PLB
.193e6a		28		plp		                PLP
.193e6b		68		pla		                PLA             ; end setdbr macro
.193e6c		48		pha		                PHA             ; begin setdp macro
.193e6d		08		php		                PHP
.193e6e		c2 20		rep #$20	                REP #$20        ; set A long
.193e70		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193e73		5b		tcd		                TCD
.193e74		28		plp		                PLP
.193e75		68		pla		                PLA             ; end setdp macro
.193e76		e2 20		sep #$20	                SEP #$20        ; set A short
.193e78		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE
.193e7b		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.193e7d		f0 09		beq $193e88	                BEQ clr_sector                  ; Yes: clear out the directory data
.193e7f						ret_failure
.193e7f		e2 20		sep #$20	                SEP #$20        ; set A short
.193e81		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.193e83		85 0e		sta $032e	                STA DOS_STATUS
.193e85		82 3e 00	brl $193ec6	                BRL pass_failure
.193e88						clr_sector
.193e88		c2 20		rep #$20	                REP #$20        ; set A long
.193e8a		a9 00 00	lda #$0000	                LDA #0
.193e8d		a2 00 00	ldx #$0000	                LDX #0
.193e90		9d 00 a1	sta $18a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.193e93		e8		inx		                INX
.193e94		e8		inx		                INX
.193e95		e0 00 02	cpx #$0200	                CPX #512
.193e98		d0 f6		bne $193e90	                BNE clr_loop
.193e9a		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.193e9d		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193e9f		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193ea2		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193ea4		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.193ea7		85 10		sta $0330	                STA DOS_CLUS_ID
.193ea9		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193eac		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193eae		22 cb 4a 19	jsl $194acb	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.193eb2		90 12		bcc $193ec6	                BCC pass_failure                ; If there was an error, pass it up the chain
.193eb4		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.193eb7		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.193eba		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.193ebd		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193ec0		28		plp		ret_success     PLP
.193ec1		2b		pld		                PLD
.193ec2		ab		plb		                PLB
.193ec3		fa		plx		                PLX
.193ec4		38		sec		                SEC
.193ec5		6b		rtl		                RTL
.193ec6		28		plp		pass_failure    PLP
.193ec7		2b		pld		                PLD
.193ec8		ab		plb		                PLB
.193ec9		fa		plx		                PLX
.193eca		18		clc		                CLC
.193ecb		6b		rtl		                RTL
.193ecc						DOS_DIRWRITE
.193ecc		da		phx		                PHX
.193ecd		5a		phy		                PHY
.193ece		0b		phd		                PHD
.193ecf		8b		phb		                PHB
.193ed0		08		php		                PHP
.193ed1		48		pha		                PHA             ; begin setdbr macro
.193ed2		08		php		                PHP
.193ed3		e2 20		sep #$20	                SEP #$20        ; set A short
.193ed5		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193ed7		48		pha		                PHA
.193ed8		ab		plb		                PLB
.193ed9		28		plp		                PLP
.193eda		68		pla		                PLA             ; end setdbr macro
.193edb		48		pha		                PHA             ; begin setdp macro
.193edc		08		php		                PHP
.193edd		c2 20		rep #$20	                REP #$20        ; set A long
.193edf		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193ee2		5b		tcd		                TCD
.193ee3		28		plp		                PLP
.193ee4		68		pla		                PLA             ; end setdp macro
.193ee5		e2 20		sep #$20	                SEP #$20        ; set A short
.193ee7		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.193eea		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.193eec		f0 1f		beq $193f0d	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.193eee						write_sector
.193eee		c2 20		rep #$20	                REP #$20        ; set A long
.193ef0		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.193ef3		85 02		sta $0322	                STA BIOS_LBA
.193ef5		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193ef8		85 04		sta $0324	                STA BIOS_LBA+2
.193efa		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.193efd		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193eff		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193f02		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193f04		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.193f08		b0 1f		bcs $193f29	                BCS ret_success
.193f0a		82 86 16	brl $195593	ret_failure     BRL IF_FAILURE
.193f0d						write_cluster
.193f0d		c2 20		rep #$20	                REP #$20        ; set A long
.193f0f		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.193f12		85 10		sta $0330	                STA DOS_CLUS_ID
.193f14		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193f17		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193f19		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.193f1c		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193f1e		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193f21		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193f23		22 d3 42 19	jsl $1942d3	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.193f27		90 e1		bcc $193f0a	                BCC ret_failure
.193f29		82 72 16	brl $19559e	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=24						DOS_ERR_EOF = 24                        ; At end of file
=25						DOS_ERR_PGZSIG = 25                     ; File does not have the PGZ signature
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\Includes/sdos_fat_vars_user_inc.asm

=$18a000					    DOS_HIGH_VARIABLES      = $18A000
=$18a000					    DEVICE                  = $18A000       ; 1 byte - The number of the block device
=$18a001					    FILE_SYSTEM             = $18A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$18a002					    PARTITION               = $18A002       ; 1 byte - The number of the partitions on the device
=$18a003					    SECTORS_PER_CLUSTER     = $18A003       ; 1 byte - The number of sectors in a cluster
=$18a004					    FIRSTSECTOR             = $18A004       ; 4 bytes - The LBA of the first sector on the volume
=$18a008					    SECTORCOUNT             = $18A008       ; 4 bytes - The number of sectors in the volume
=$18a00c					    NUM_RSRV_SEC            = $18A00C       ; 2 bytes - The number of hidden or reserved sectors
=$18a00e					    CLUSTER_SIZE            = $18A00E       ; 2 bytes - The size of a cluster in bytes
=$18a010					    SEC_PER_FAT             = $18A010       ; 4 bytes - The number of sectors per FAT
=$18a014					    FAT_BEGIN_LBA           = $18A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$18a018					    FAT2_BEGIN_LBA          = $18A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$18a01c					    CLUSTER_BEGIN_LBA       = $18A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$18a020					    ROOT_DIR_FIRST_CLUSTER  = $18A020       ; 4 bytes - The number of the first cluster in the root directory
=$18a024					    ROOT_DIR_MAX_ENTRY      = $18A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$18a026					    VOLUME_ID               = $18A026       ; 4 bytes - The ID of the volume
=$18a02a					    DOS_CURR_CLUS           = $18A02A       ; 4 bytes - The current cluster (for delete)
=$18a02e					    DOS_NEXT_CLUS           = $18A02E       ; 4 bytes - The next cluster in a file (for delete)
=$18a032					    DOS_DIR_BLOCK_ID        = $18A032       ; 4 bytes - The ID of the current directory block
=$18a036					    DOS_NEW_CLUSTER         = $18A036       ; 4 bytes - Space to store a newly written cluster ID
=$18a03a					    DOS_SHORT_NAME          = $18A03A       ; 11 bytes - The short name for a desired file
=$18a045					    DOS_DIR_TYPE            = $18A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$18a046					    DOS_CURR_DIR_ID         = $18A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$18a04a					    DOS_DEV_NAMES           = $18A04A       ; 4 byte - pointer to the linked list of device names
=$18a04e					    FDC_MOTOR_TIMER         = $18A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$18a050					    DOS_MOUNT_DEV           = $18A050       ; 1 byte - the device code of the currently mounted device
=$18a100					    DOS_DIR_CLUSTER         = $18A100       ; 512 bytes - A buffer for directory entries
=$18a300					    DOS_DIR_CLUSTER_END     = $18A300       ; The byte just past the end of the directory cluster buffer
=$18a300					    DOS_SECTOR              = $18A300       ; 512 bytes - A buffer for block device read/write
=$18a500					    DOS_SECTOR_END          = $18A500       ; The byte just past the end of the cluster buffer
=$18a500					    DOS_FAT_SECTORS         = $18A500       ; 1024 bytes - two sectors worth of the FAT
=$18a900					    DOS_FAT_SECTORS_END     = $18A900       ; The byte just past the end of the FAT buffers
=$18a900					    DOS_BOOT_SECTOR         = $18A900       ; A sector for holding the boot sector
=$18ab00					    DOS_BOOT_SECTOR_END     = $18AB00
=$18ab00					    DOS_SPARE_SECTOR        = $18AB00       ; A spare 512 byte buffer for loading sectors
=$18ad00					    DOS_SPARE_SECTOR_END    = $18AD00
=$18ad00					    DOS_SPARE_FD            = $18AD00       ; A spare file descriptor buffer
=1617184					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=1617184					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=1617440					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$18b000					    DOS_FILE_BUFFS          = $18B000
=1622016					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.193f2c						DOS_INIT
.193f2c		8b		phb		                PHB
.193f2d		0b		phd		                PHD
.193f2e		08		php		                PHP
.193f2f		48		pha		                PHA             ; begin setdbr macro
.193f30		08		php		                PHP
.193f31		e2 20		sep #$20	                SEP #$20        ; set A short
.193f33		a9 00		lda #$00	                LDA #0
.193f35		48		pha		                PHA
.193f36		ab		plb		                PLB
.193f37		28		plp		                PLP
.193f38		68		pla		                PLA             ; end setdbr macro
.193f39		48		pha		                PHA             ; begin setdp macro
.193f3a		08		php		                PHP
.193f3b		c2 20		rep #$20	                REP #$20        ; set A long
.193f3d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193f40		5b		tcd		                TCD
.193f41		28		plp		                PLP
.193f42		68		pla		                PLA             ; end setdp macro
.193f43		e2 20		sep #$20	                SEP #$20        ; set A short
.193f45		c2 10		rep #$10	                REP #$10        ; set X long
.193f47		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.193f4a		a9 00		lda #$00	                LDA #0
.193f4c		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.193f4f		e8		inx		                INX
.193f50		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.193f53		d0 f7		bne $193f4c	                BNE b0_clr_loop
.193f55		48		pha		                PHA             ; begin setdbr macro
.193f56		08		php		                PHP
.193f57		e2 20		sep #$20	                SEP #$20        ; set A short
.193f59		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193f5b		48		pha		                PHA
.193f5c		ab		plb		                PLB
.193f5d		28		plp		                PLP
.193f5e		68		pla		                PLA             ; end setdbr macro
.193f5f		48		pha		                PHA             ; begin setdp macro
.193f60		08		php		                PHP
.193f61		c2 20		rep #$20	                REP #$20        ; set A long
.193f63		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193f66		5b		tcd		                TCD
.193f67		28		plp		                PLP
.193f68		68		pla		                PLA             ; end setdp macro
.193f69		e2 20		sep #$20	                SEP #$20        ; set A short
.193f6b		c2 10		rep #$10	                REP #$10        ; set X long
.193f6d		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.193f70		a9 00		lda #$00	                LDA #0
.193f72		9d 00 a0	sta $18a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.193f75		e8		inx		                INX
.193f76		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.193f79		d0 f7		bne $193f72	                BNE b38_clr_loop
.193f7b		c2 20		rep #$20	                REP #$20        ; set A long
.193f7d		a9 2b 43	lda #$432b	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.193f80		8f 4a a0 18	sta $18a04a	                STA @l DOS_DEV_NAMES
.193f84		a9 19 00	lda #$0019	                LDA #`DOS_HD_DESC
.193f87		8f 4c a0 18	sta $18a04c	                STA @l DOS_DEV_NAMES+2
.193f8b		e2 20		sep #$20	                SEP #$20        ; set A short
.193f8d		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.193f8f		85 01		sta $0321	                STA BIOS_DEV
.193f91		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.193f93		8f 50 a0 18	sta $18a050	                STA @l DOS_MOUNT_DEV
.193f97		a9 00		lda #$00	                LDA #0
.193f99		a2 00 00	ldx #$0000	                LDX #0
.193f9c		9d 20 ad	sta $18ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.193f9f		e8		inx		                INX
.193fa0		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.193fa3		d0 f7		bne $193f9c	                BNE fd_zero_loop
.193fa5		a9 00		lda #$00	                LDA #0
.193fa7		a2 00 00	ldx #$0000	                LDX #0
.193faa		9d 00 b0	sta $18b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.193fad		e8		inx		                INX
.193fae		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.193fb1		d0 f7		bne $193faa	                BNE sect_zero_loop
.193fb3		c2 20		rep #$20	                REP #$20        ; set A long
.193fb5		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.193fb8		85 20		sta $0340	                STA @b DOS_FD_PTR
.193fba		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.193fbd		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.193fbf		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.193fc2		85 28		sta $0348	                STA @b DOS_TEMP
.193fc4		a9 18 00	lda #$0018	                LDA #`DOS_FILE_BUFFS
.193fc7		85 2a		sta $034a	                STA @b DOS_TEMP+2
.193fc9		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.193fcc		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.193fcf		a5 28		lda $0348	                LDA @b DOS_TEMP
.193fd1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.193fd3		c8		iny		                INY
.193fd4		c8		iny		                INY
.193fd5		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.193fd7		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.193fd9		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.193fda		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.193fdc		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.193fdf		85 20		sta $0340	                STA @b DOS_FD_PTR
.193fe1		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.193fe3		69 00 00	adc #$0000	                ADC #0
.193fe6		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.193fe8		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.193fe9		a5 28		lda $0348	                LDA @b DOS_TEMP
.193feb		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.193fee		85 28		sta $0348	                STA @b DOS_TEMP
.193ff0		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.193ff2		69 00 00	adc #$0000	                ADC #0
.193ff5		85 2a		sta $034a	                STA @b DOS_TEMP+2
.193ff7		ca		dex		                DEX                     ; Count down the descriptors...
.193ff8		d0 d2		bne $193fcc	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.193ffa		28		plp		                PLP
.193ffb		2b		pld		                PLD
.193ffc		ab		plb		                PLB
.193ffd		6b		rtl		                RTL
.193ffe						DOS_MOUNT
.193ffe		8b		phb		                PHB
.193fff		0b		phd		                PHD
.194000		08		php		                PHP
.194001		48		pha		                PHA             ; begin setdbr macro
.194002		08		php		                PHP
.194003		e2 20		sep #$20	                SEP #$20        ; set A short
.194005		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194007		48		pha		                PHA
.194008		ab		plb		                PLB
.194009		28		plp		                PLP
.19400a		68		pla		                PLA             ; end setdbr macro
.19400b		48		pha		                PHA             ; begin setdp macro
.19400c		08		php		                PHP
.19400d		c2 20		rep #$20	                REP #$20        ; set A long
.19400f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194012		5b		tcd		                TCD
.194013		28		plp		                PLP
.194014		68		pla		                PLA             ; end setdp macro
.194015		e2 20		sep #$20	                SEP #$20        ; set A short
.194017		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.194019		8f 50 a0 18	sta $18a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.19401d		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.19401f		f0 1f		beq $194040	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.194021		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.194023		f0 26		beq $19404b	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.194025		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.194027		f0 0b		beq $194034	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.194029		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.19402b		85 0e		sta $032e	                STA DOS_STATUS
.19402d		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.19402f		85 00		sta $0320	                STA BIOS_STATUS
.194031		82 7c 01	brl $1941b0	                BRL ret_failure
.194034		22 0e 64 19	jsl $19640e	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.194038		b0 03		bcs $19403d	                BCS fdc_success
.19403a		82 73 01	brl $1941b0	                BRL ret_failure
.19403d		82 67 01	brl $1941a7	fdc_success     BRL ret_success
.194040		22 f6 59 19	jsl $1959f6	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.194044		b0 10		bcs $194056	                BCS get_mbr             ; Continue if success
.194046		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.194048		82 65 01	brl $1941b0	                BRL ret_failure
.19404b		22 56 68 19	jsl $196856	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.19404f		b0 05		bcs $194056	                BCS get_mbr             ; Continue if success
.194051		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.194053		82 5a 01	brl $1941b0	                BRL ret_failure
.194056						get_mbr
.194056		c2 30		rep #$30	                REP #$30        ; set A&X long
.194058		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.19405a		64 04		stz $0324	                STZ BIOS_LBA+2
.19405c		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.19405f		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194061		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.194064		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194066		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.19406a		b0 07		bcs $194073	                BCS chk_signature       ; If success, check the signature bytes
.19406c		e2 20		sep #$20	                SEP #$20        ; set A short
.19406e		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.194070		82 3d 01	brl $1941b0	                BRL ret_failure
.194073						chk_signature
.194073		e2 20		sep #$20	                SEP #$20        ; set A short
.194075		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.194078		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.19407a		d0 07		bne $194083	                BNE not_mbr             ; No: signal we could find the MBR
.19407c		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.19407f		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.194081		f0 05		beq $194088	                BEQ chk_part_type       ; Yes: we have an MBR
.194083		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.194085		82 28 01	brl $1941b0	                BRL ret_failure
.194088		ad c2 a4	lda $18a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.19408b		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.19408d		f0 05		beq $194094	                BEQ get_LBA             ; Is FAT32 with LBA?
.19408f		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.194091		82 1c 01	brl $1941b0	                BRL ret_failure
.194094		8d 01 a0	sta $18a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.194097		c2 20		rep #$20	                REP #$20        ; set A long
.194099		ad c6 a4	lda $18a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.19409c		8d 04 a0	sta $18a004	                STA FIRSTSECTOR
.19409f		ad c8 a4	lda $18a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.1940a2		8d 06 a0	sta $18a006	                STA FIRSTSECTOR+2
.1940a5		ad cb a4	lda $18a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.1940a8		8d 08 a0	sta $18a008	                STA SECTORCOUNT
.1940ab		ad cd a4	lda $18a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.1940ae		8d 0a a0	sta $18a00a	                STA SECTORCOUNT+2
.1940b1		e2 20		sep #$20	                SEP #$20        ; set A short
.1940b3		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.1940b5		8d 00 a0	sta $18a000	                STA DEVICE
.1940b8		a9 00		lda #$00	                LDA #0
.1940ba		8d 02 a0	sta $18a002	                STA PARTITION           ; For the moment, we only support the first partition
.1940bd		c2 20		rep #$20	                REP #$20        ; set A long
.1940bf		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.1940c2		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1940c4		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.1940c7		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1940c9		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.1940cc		85 02		sta $0322	                STA BIOS_LBA
.1940ce		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.1940d1		85 04		sta $0324	                STA BIOS_LBA+2
.1940d3		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.1940d7		b0 1c		bcs $1940f5	                BCS get_first_sec       ; Got it? Start parsing it
.1940d9		e2 20		sep #$20	                SEP #$20        ; set A short
.1940db		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.1940dd		82 d0 00	brl $1941b0	                BRL ret_failure
.1940e0						chk_bpb_sig
.1940e0		e2 20		sep #$20	                SEP #$20        ; set A short
.1940e2		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.1940e5		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.1940e7		d0 07		bne $1940f0	                BNE not_bpb             ; No: signal we could find the volume ID
.1940e9		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.1940ec		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.1940ee		f0 05		beq $1940f5	                BEQ get_first_sec       ; Yes: we have an volume ID
.1940f0		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.1940f2		82 bb 00	brl $1941b0	                BRL ret_failure
.1940f5						get_first_sec
.1940f5		c2 20		rep #$20	                REP #$20        ; set A long
.1940f7		ad 2c a3	lda $18a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.1940fa		8d 20 a0	sta $18a020	                STA ROOT_DIR_FIRST_CLUSTER
.1940fd		ad 2e a3	lda $18a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.194100		8d 22 a0	sta $18a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.194103		ad 0e a3	lda $18a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.194106		8d 0c a0	sta $18a00c	                STA NUM_RSRV_SEC
.194109		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.19410a		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.19410d		6d 0c a0	adc $18a00c	                ADC NUM_RSRV_SEC
.194110		8d 14 a0	sta $18a014	                STA FAT_BEGIN_LBA
.194113		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.194116		69 00 00	adc #$0000	                ADC #0
.194119		8d 16 a0	sta $18a016	                STA FAT_BEGIN_LBA+2
.19411c		e2 20		sep #$20	                SEP #$20        ; set A short
.19411e		a2 00 00	ldx #$0000	                LDX #0
.194121		bf 24 a3 18	lda $18a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.194125		9f 10 a0 18	sta $18a010,x	                STA @l SEC_PER_FAT,X
.194129		e8		inx		                INX
.19412a		e0 04 00	cpx #$0004	                CPX #4
.19412d		d0 f2		bne $194121	                BNE cpy_secperfat
.19412f		ad 10 a0	lda $18a010	                LDA SEC_PER_FAT
.194132		0a		asl a		                ASL A
.194133		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.194136		ad 11 a0	lda $18a011	                LDA SEC_PER_FAT+1
.194139		2a		rol a		                ROL A
.19413a		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.19413d		ad 12 a0	lda $18a012	                LDA SEC_PER_FAT+2
.194140		2a		rol a		                ROL A
.194141		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.194144		ad 13 a0	lda $18a013	                LDA SEC_PER_FAT+3
.194147		2a		rol a		                ROL A
.194148		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.19414b		18		clc		                CLC
.19414c		ad 1c a0	lda $18a01c	                LDA CLUSTER_BEGIN_LBA
.19414f		6d 14 a0	adc $18a014	                ADC FAT_BEGIN_LBA
.194152		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.194155		ad 1d a0	lda $18a01d	                LDA CLUSTER_BEGIN_LBA+1
.194158		6d 15 a0	adc $18a015	                ADC FAT_BEGIN_LBA+1
.19415b		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.19415e		ad 1e a0	lda $18a01e	                LDA CLUSTER_BEGIN_LBA+2
.194161		6d 16 a0	adc $18a016	                ADC FAT_BEGIN_LBA+2
.194164		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.194167		ad 1f a0	lda $18a01f	                LDA CLUSTER_BEGIN_LBA+3
.19416a		6d 17 a0	adc $18a017	                ADC FAT_BEGIN_LBA+3
.19416d		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.194170		e2 20		sep #$20	                SEP #$20        ; set A short
.194172		ad 0d a3	lda $18a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.194175		8d 03 a0	sta $18a003	                STA SECTORS_PER_CLUSTER
.194178		18		clc		                CLC
.194179		ad 14 a0	lda $18a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.19417c		6d 10 a0	adc $18a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.19417f		8d 18 a0	sta $18a018	                STA FAT2_BEGIN_LBA
.194182		ad 15 a0	lda $18a015	                LDA FAT_BEGIN_LBA+1
.194185		6d 11 a0	adc $18a011	                ADC SEC_PER_FAT+1
.194188		8d 19 a0	sta $18a019	                STA FAT2_BEGIN_LBA+1
.19418b		ad 16 a0	lda $18a016	                LDA FAT_BEGIN_LBA+2
.19418e		6d 12 a0	adc $18a012	                ADC SEC_PER_FAT+2
.194191		8d 1a a0	sta $18a01a	                STA FAT2_BEGIN_LBA+2
.194194		ad 17 a0	lda $18a017	                LDA FAT_BEGIN_LBA+3
.194197		6d 13 a0	adc $18a013	                ADC SEC_PER_FAT+3
.19419a		8d 1b a0	sta $18a01b	                STA FAT2_BEGIN_LBA+3
.19419d		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.19419f		8d 0e a0	sta $18a00e	                STA CLUSTER_SIZE
.1941a2		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.1941a4		8d 0f a0	sta $18a00f	                STA CLUSTER_SIZE+1
.1941a7						ret_success
.1941a7		e2 20		sep #$20	                SEP #$20        ; set A short
.1941a9		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.1941ab		28		plp		                PLP
.1941ac		2b		pld		                PLD
.1941ad		ab		plb		                PLB
.1941ae		38		sec		                SEC
.1941af		6b		rtl		                RTL
.1941b0						ret_failure
.1941b0		e2 20		sep #$20	                SEP #$20        ; set A short
.1941b2		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.1941b4		28		plp		                PLP
.1941b5		2b		pld		                PLD
.1941b6		ab		plb		                PLB
.1941b7		18		clc		                CLC
.1941b8		6b		rtl		                RTL
.1941b9						DOS_TESTBOOT
.1941b9		8b		phb		                PHB
.1941ba		0b		phd		                PHD
.1941bb		da		phx		                PHX
.1941bc		08		php		                PHP
.1941bd		48		pha		                PHA             ; begin setdbr macro
.1941be		08		php		                PHP
.1941bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1941c1		a9 00		lda #$00	                LDA #0
.1941c3		48		pha		                PHA
.1941c4		ab		plb		                PLB
.1941c5		28		plp		                PLP
.1941c6		68		pla		                PLA             ; end setdbr macro
.1941c7		48		pha		                PHA             ; begin setdp macro
.1941c8		08		php		                PHP
.1941c9		c2 20		rep #$20	                REP #$20        ; set A long
.1941cb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1941ce		5b		tcd		                TCD
.1941cf		28		plp		                PLP
.1941d0		68		pla		                PLA             ; end setdp macro
.1941d1		c2 10		rep #$10	                REP #$10        ; set X long
.1941d3						chk_dev
.1941d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1941d5		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.1941d7		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.1941d9		f0 24		beq $1941ff	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.1941db		c2 30		rep #$30	                REP #$30        ; set A&X long
.1941dd		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.1941e0		85 02		sta $0322	                STA @b BIOS_LBA
.1941e2		85 04		sta $0324	                STA @b BIOS_LBA+2
.1941e4		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.1941e7		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.1941e9		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.1941ec		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.1941ee		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.1941f2		b0 03		bcs $1941f7	                BCS chk_mbr_brl
.1941f4		82 47 00	brl $19423e	                BRL done                    ; If failed... just return
.1941f7						chk_mbr_brl
.1941f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1941f9		af 00 a3 18	lda $18a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.1941fd		80 04		bra $194203	                BRA chk_brl
.1941ff		af 3e a3 18	lda $18a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.194203		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.194205		f0 06		beq $19420d	                BEQ chk_magic               ; Yes: check for the magic text
.194207		c9 82		cmp #$82	                CMP #$82
.194209		f0 02		beq $19420d	                BEQ chk_magic
.19420b		80 31		bra $19423e	                BRA done                    ; No: just return
.19420d		a2 00 00	ldx #$0000	chk_magic       LDX #0
.194210		bf 03 a3 18	lda $18a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.194214		df 43 42 19	cmp $194243,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.194218		d0 24		bne $19423e	                BNE done                    ; If it's not equal, just return
.19421a		e8		inx		                INX                         ; Otherwise, check the next one
.19421b		e0 08 00	cpx #$0008	                CPX #8
.19421e		d0 f0		bne $194210	                BNE magic_loop              ; Until we've checked all 8 bytes
.194220		c2 30		rep #$30	                REP #$30        ; set A&X long
.194222		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.194225		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.194228		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.19422b		44 18 18	mvp $18,$18	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.19422e		e2 20		sep #$20	                SEP #$20        ; set A short
.194230		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.194232		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.194234		f0 04		beq $19423a	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.194236		5c 00 a9 18	jmp $18a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.19423a		5c 3e a9 18	jmp $18a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.19423e		28		plp		done            PLP
.19423f		2b		pld		                PLD
.194240		ab		plb		                PLB
.194241		fa		plx		                PLX
.194242		6b		rtl		                RTL
>194243		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.19424b						DOS_CALC_LBA
.19424b		8b		phb		                PHB
.19424c		0b		phd		                PHD
.19424d		08		php		                PHP
.19424e		48		pha		                PHA             ; begin setdbr macro
.19424f		08		php		                PHP
.194250		e2 20		sep #$20	                SEP #$20        ; set A short
.194252		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194254		48		pha		                PHA
.194255		ab		plb		                PLB
.194256		28		plp		                PLP
.194257		68		pla		                PLA             ; end setdbr macro
.194258		48		pha		                PHA             ; begin setdp macro
.194259		08		php		                PHP
.19425a		c2 20		rep #$20	                REP #$20        ; set A long
.19425c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19425f		5b		tcd		                TCD
.194260		28		plp		                PLP
.194261		68		pla		                PLA             ; end setdp macro
.194262		c2 20		rep #$20	                REP #$20        ; set A long
.194264		38		sec		                SEC
.194265		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.194267		e9 02 00	sbc #$0002	                SBC #2
.19426a		85 28		sta $0348	                STA DOS_TEMP
.19426c		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.19426e		e9 00 00	sbc #$0000	                SBC #0
.194271		85 2a		sta $034a	                STA DOS_TEMP+2
.194273		e2 10		sep #$10	                SEP #$10        ; set X short
.194275		ae 03 a0	ldx $18a003	                LDX SECTORS_PER_CLUSTER
.194278		e0 01		cpx #$01	mult_loop       CPX #1
.19427a		f0 07		beq $194283	                BEQ add_offset
.19427c		06 28		asl $0348	                ASL DOS_TEMP
.19427e		26 28		rol $0348	                ROL DOS_TEMP
.194280		ca		dex		                DEX
.194281		80 f5		bra $194278	                BRA mult_loop
.194283		18		clc		add_offset      CLC
.194284		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.194286		6d 1c a0	adc $18a01c	                ADC CLUSTER_BEGIN_LBA
.194289		85 02		sta $0322	                STA BIOS_LBA
.19428b		a5 2a		lda $034a	                LDA DOS_TEMP+2
.19428d		6d 1e a0	adc $18a01e	                ADC CLUSTER_BEGIN_LBA+2
.194290		85 04		sta $0324	                STA BIOS_LBA+2
.194292		28		plp		                PLP
.194293		2b		pld		                PLD
.194294		ab		plb		                PLB
.194295		6b		rtl		                RTL
.194296						DOS_GETCLUSTER
.194296		8b		phb		                PHB
.194297		0b		phd		                PHD
.194298		08		php		                PHP
.194299		48		pha		                PHA             ; begin setdbr macro
.19429a		08		php		                PHP
.19429b		e2 20		sep #$20	                SEP #$20        ; set A short
.19429d		a9 00		lda #$00	                LDA #0
.19429f		48		pha		                PHA
.1942a0		ab		plb		                PLB
.1942a1		28		plp		                PLP
.1942a2		68		pla		                PLA             ; end setdbr macro
.1942a3		48		pha		                PHA             ; begin setdp macro
.1942a4		08		php		                PHP
.1942a5		c2 20		rep #$20	                REP #$20        ; set A long
.1942a7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1942aa		5b		tcd		                TCD
.1942ab		28		plp		                PLP
.1942ac		68		pla		                PLA             ; end setdp macro
.1942ad		c2 20		rep #$20	                REP #$20        ; set A long
.1942af		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.1942b1		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1942b3		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.1942b5		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1942b7		22 4b 42 19	jsl $19424b	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.1942bb		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.1942bf		90 09		bcc $1942ca	                BCC ret_failure
.1942c1						ret_success
.1942c1		e2 20		sep #$20	                SEP #$20        ; set A short
.1942c3		64 0e		stz $032e	                STZ DOS_STATUS
.1942c5		28		plp		                PLP
.1942c6		2b		pld		                PLD
.1942c7		ab		plb		                PLB
.1942c8		38		sec		                SEC
.1942c9		6b		rtl		                RTL
.1942ca						ret_failure
.1942ca		e2 20		sep #$20	                SEP #$20        ; set A short
.1942cc		85 0e		sta $032e	                STA DOS_STATUS
.1942ce		28		plp		                PLP
.1942cf		2b		pld		                PLD
.1942d0		ab		plb		                PLB
.1942d1		18		clc		                CLC
.1942d2		6b		rtl		                RTL
.1942d3						DOS_PUTCLUSTER
.1942d3		8b		phb		                PHB
.1942d4		0b		phd		                PHD
.1942d5		08		php		                PHP
.1942d6		48		pha		                PHA             ; begin setdbr macro
.1942d7		08		php		                PHP
.1942d8		e2 20		sep #$20	                SEP #$20        ; set A short
.1942da		a9 00		lda #$00	                LDA #0
.1942dc		48		pha		                PHA
.1942dd		ab		plb		                PLB
.1942de		28		plp		                PLP
.1942df		68		pla		                PLA             ; end setdbr macro
.1942e0		48		pha		                PHA             ; begin setdp macro
.1942e1		08		php		                PHP
.1942e2		c2 20		rep #$20	                REP #$20        ; set A long
.1942e4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1942e7		5b		tcd		                TCD
.1942e8		28		plp		                PLP
.1942e9		68		pla		                PLA             ; end setdp macro
.1942ea		c2 20		rep #$20	                REP #$20        ; set A long
.1942ec		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.1942ee		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1942f0		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.1942f2		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1942f4		22 4b 42 19	jsl $19424b	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.1942f8		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.1942fc		90 09		bcc $194307	                BCC ret_failure
.1942fe						ret_success
.1942fe		e2 20		sep #$20	                SEP #$20        ; set A short
.194300		64 0e		stz $032e	                STZ DOS_STATUS
.194302		28		plp		                PLP
.194303		2b		pld		                PLD
.194304		ab		plb		                PLB
.194305		38		sec		                SEC
.194306		6b		rtl		                RTL
.194307						ret_failure
.194307		e2 20		sep #$20	                SEP #$20        ; set A short
.194309		85 0e		sta $032e	                STA DOS_STATUS
.19430b		28		plp		                PLP
.19430c		2b		pld		                PLD
.19430d		ab		plb		                PLB
.19430e		18		clc		                CLC
.19430f		6b		rtl		                RTL
>194310		40 46 00			DOS_FDC_NAME    .null "@F"
.194313						DOS_FDC_DESC
>194313		10 43 19 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>194317		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>194318		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>19431c		40 53 00			DOS_SDC_NAME    .null "@S"
.19431f						DOS_SDC_DESC
>19431f		1c 43 19 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>194323		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>194324		13 43 19 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>194328		40 48 00			DOS_HDC_NAME    .null "@H"
.19432b						DOS_HD_DESC
>19432b		28 43 19 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>19432f		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>194330		1f 43 19 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.194334						DOS_PARSE_DEV
.194334		8b		phb		                PHB
.194335		0b		phd		                PHD
.194336		08		php		                PHP
.194337		48		pha		                PHA             ; begin setdbr macro
.194338		08		php		                PHP
.194339		e2 20		sep #$20	                SEP #$20        ; set A short
.19433b		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19433d		48		pha		                PHA
.19433e		ab		plb		                PLB
.19433f		28		plp		                PLP
.194340		68		pla		                PLA             ; end setdbr macro
.194341		48		pha		                PHA             ; begin setdp macro
.194342		08		php		                PHP
.194343		c2 20		rep #$20	                REP #$20        ; set A long
.194345		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194348		5b		tcd		                TCD
.194349		28		plp		                PLP
.19434a		68		pla		                PLA             ; end setdp macro
.19434b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19434d		af 4a a0 18	lda $18a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.194351		85 28		sta $0348	                STA DOS_TEMP
.194353		af 4c a0 18	lda $18a04c	                LDA @l DOS_DEV_NAMES+2
.194357		85 2a		sta $034a	                STA DOS_TEMP+2
.194359		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.19435c		85 48		sta $0368	                STA DOS_STR2_PTR
.19435e		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.194361		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.194363		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.194366		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194368		85 44		sta $0364	                STA DOS_STR1_PTR
.19436a		c8		iny		                INY
.19436b		c8		iny		                INY
.19436c		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.19436e		85 46		sta $0366	                STA DOS_STR1_PTR+2
.194370		e2 20		sep #$20	                SEP #$20        ; set A short
.194372		a0 00 00	ldy #$0000	                LDY #0
.194375		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.194377		f0 24		beq $19439d	                BEQ found                   ; If it's NULL, we found a match
.194379		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.19437b		d0 03		bne $194380	                BNE next_device             ; If no match, try to load the next device
.19437d		c8		iny		                INY                         ; Go to the next character
.19437e		80 f5		bra $194375	                BRA cmp_loop
.194380						next_device
.194380		c2 20		rep #$20	                REP #$20        ; set A long
.194382		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.194385		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194387		48		pha		                PHA
.194388		c8		iny		                INY
.194389		c8		iny		                INY
.19438a		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.19438c		85 2a		sta $034a	                STA DOS_TEMP+2
.19438e		68		pla		                PLA
.19438f		85 28		sta $0348	                STA DOS_TEMP
.194391		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.194393		d0 ce		bne $194363	                BNE dev_loop                ; No: check this device
.194395		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194397		d0 ca		bne $194363	                BNE dev_loop
.194399		28		plp		done            PLP                         ; Otherwise, return having not found a match
.19439a		2b		pld		                PLD
.19439b		ab		plb		                PLB
.19439c		6b		rtl		                RTL
.19439d		22 ae 43 19	jsl $1943ae	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.1943a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1943a3		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.1943a6		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.1943a8		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1943ac		80 eb		bra $194399	                BRA done
.1943ae						DOS_ADJUSTPATH
.1943ae		da		phx		                PHX
.1943af		5a		phy		                PHY
.1943b0		8b		phb		                PHB
.1943b1		0b		phd		                PHD
.1943b2		08		php		                PHP
.1943b3		48		pha		                PHA             ; begin setdbr macro
.1943b4		08		php		                PHP
.1943b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1943b7		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1943b9		48		pha		                PHA
.1943ba		ab		plb		                PLB
.1943bb		28		plp		                PLP
.1943bc		68		pla		                PLA             ; end setdbr macro
.1943bd		48		pha		                PHA             ; begin setdp macro
.1943be		08		php		                PHP
.1943bf		c2 20		rep #$20	                REP #$20        ; set A long
.1943c1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1943c4		5b		tcd		                TCD
.1943c5		28		plp		                PLP
.1943c6		68		pla		                PLA             ; end setdp macro
.1943c7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1943c9		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.1943cb		98		tya		                TYA                             ; Compute the address of the first source byte
.1943cc		18		clc		                CLC
.1943cd		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.1943d0		aa		tax		                TAX
.1943d1		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.1943d4		a8		tay		                TAY
.1943d5		38		sec		                SEC                             ; Compute the number of bytes to copy
.1943d6		a9 00 01	lda #$0100	                LDA #256
.1943d9		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.1943db		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.1943de		28		plp		                PLP
.1943df		2b		pld		                PLD
.1943e0		ab		plb		                PLB
.1943e1		7a		ply		                PLY
.1943e2		fa		plx		                PLX
.1943e3		6b		rtl		                RTL
.1943e4						DOS_PARSE_PATH
.1943e4		8b		phb		                PHB
.1943e5		0b		phd		                PHD
.1943e6		08		php		                PHP
.1943e7		48		pha		                PHA             ; begin setdbr macro
.1943e8		08		php		                PHP
.1943e9		e2 20		sep #$20	                SEP #$20        ; set A short
.1943eb		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1943ed		48		pha		                PHA
.1943ee		ab		plb		                PLB
.1943ef		28		plp		                PLP
.1943f0		68		pla		                PLA             ; end setdbr macro
.1943f1		48		pha		                PHA             ; begin setdp macro
.1943f2		08		php		                PHP
.1943f3		c2 20		rep #$20	                REP #$20        ; set A long
.1943f5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1943f8		5b		tcd		                TCD
.1943f9		28		plp		                PLP
.1943fa		68		pla		                PLA             ; end setdp macro
.1943fb		c2 10		rep #$10	                REP #$10        ; set X long
.1943fd		e2 20		sep #$20	                SEP #$20        ; set A short
.1943ff		a2 00 00	ldx #$0000	                LDX #0
.194402		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.194404		f0 1b		beq $194421	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.194406		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.194408		b0 05		bcs $19440f	                BGE check_case          ; No: check the case
.19440a		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.19440c		82 64 00	brl $194473	                BRL ret_failure
.19440f		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.194411		90 08		bcc $19441b	                BLT next_char
.194413		c9 7b		cmp #$7b	                CMP #'z'+1
.194415		b0 04		bcs $19441b	                BGE next_char
.194417		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.194419		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.19441b		e8		inx		next_char       INX                     ; Move to the next character
.19441c		e0 00 01	cpx #$0100	                CPX #$100
.19441f		d0 e1		bne $194402	                BNE upcase_loop
.194421		22 34 43 19	jsl $194334	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.194425		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.194427		c9 3a		cmp #$3a	                CMP #':'
.194429		d0 07		bne $194432	                BNE clr_name            ; If not colon, treat it as a file name
.19442b		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.19442e		22 ae 43 19	jsl $1943ae	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.194432		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.194435		a9 20		lda #$20	                LDA #' '
.194437		99 3a a0	sta $18a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.19443a		c8		iny		                INY
.19443b		c0 0b 00	cpy #$000b	                CPY #11
.19443e		d0 f7		bne $194437	                BNE clr_loop
.194440		a2 00 00	ldx #$0000	                LDX #0
.194443		a0 00 00	ldy #$0000	                LDY #0
.194446		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.194448		f0 20		beq $19446a	                BEQ ret_success         ; If NULL: we've finished parsing the path
.19444a		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.19444c		f0 0a		beq $194458	                BEQ cpy_ext             ; And move to the extension
.19444e		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.194451		e8		inx		                INX
.194452		c8		iny		                INY                     ; Move to the next character
.194453		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.194456		d0 ee		bne $194446	                BNE cpy_name_loop       ; No: process this one
.194458		e8		inx		cpy_ext         INX                     ; Skip the dot
.194459		a0 08 00	ldy #$0008	                LDY #8
.19445c		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.19445e		f0 0a		beq $19446a	                BEQ ret_success         ; If it's NULL, we've finished
.194460		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.194463		e8		inx		                INX
.194464		c8		iny		                INY                     ; Move to the next character
.194465		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.194468		d0 f2		bne $19445c	                BNE cpy_ext_loop        ; No: process this one
.19446a						ret_success
.19446a		e2 20		sep #$20	                SEP #$20        ; set A short
.19446c		64 0e		stz $032e	                STZ DOS_STATUS
.19446e		28		plp		                PLP
.19446f		2b		pld		                PLD
.194470		ab		plb		                PLB
.194471		38		sec		                SEC
.194472		6b		rtl		                RTL
.194473						ret_failure
.194473		e2 20		sep #$20	                SEP #$20        ; set A short
.194475		85 0e		sta $032e	                STA DOS_STATUS
.194477		28		plp		                PLP
.194478		2b		pld		                PLD
.194479		ab		plb		                PLB
.19447a		18		clc		                CLC
.19447b		6b		rtl		                RTL
.19447c						DOS_FINDFILE
.19447c		8b		phb		                PHB
.19447d		0b		phd		                PHD
.19447e		08		php		                PHP
.19447f		48		pha		                PHA             ; begin setdbr macro
.194480		08		php		                PHP
.194481		e2 20		sep #$20	                SEP #$20        ; set A short
.194483		a9 00		lda #$00	                LDA #0
.194485		48		pha		                PHA
.194486		ab		plb		                PLB
.194487		28		plp		                PLP
.194488		68		pla		                PLA             ; end setdbr macro
.194489		48		pha		                PHA             ; begin setdp macro
.19448a		08		php		                PHP
.19448b		c2 20		rep #$20	                REP #$20        ; set A long
.19448d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194490		5b		tcd		                TCD
.194491		28		plp		                PLP
.194492		68		pla		                PLA             ; end setdp macro
.194493		c2 30		rep #$30	                REP #$30        ; set A&X long
.194495		22 e4 43 19	jsl $1943e4	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.194499		b0 05		bcs $1944a0	                BCS mount                       ; If success: try to open the directory
.19449b		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.19449c		2b		pld		                PLD
.19449d		ab		plb		                PLB
.19449e		18		clc		                CLC
.19449f		6b		rtl		                RTL
.1944a0		22 fe 3f 19	jsl $193ffe	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.1944a4		b0 07		bcs $1944ad	                BCS get_directory
.1944a6		e2 20		sep #$20	                SEP #$20        ; set A short
.1944a8		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.1944aa		82 56 00	brl $194503	                BRL ret_failure
.1944ad						get_directory
.1944ad		c2 20		rep #$20	                REP #$20        ; set A long
.1944af		22 b3 3c 19	jsl $193cb3	                JSL DOS_DIROPEN                 ; Get the directory
.1944b3		b0 07		bcs $1944bc	                BCS scan_entries                ; If success: start scanning the directory entries
.1944b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1944b7		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.1944b9		82 47 00	brl $194503	                BRL ret_failure
.1944bc		22 32 3d 19	jsl $193d32	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.1944c0						scan_loop
.1944c0		e2 20		sep #$20	                SEP #$20        ; set A short
.1944c2		a0 00 00	ldy #$0000	                LDY #0
.1944c5		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.1944c7		d0 05		bne $1944ce	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.1944c9		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.1944cb		82 35 00	brl $194503	                BRL ret_failure
.1944ce		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.1944d0		f0 26		beq $1944f8	                BEQ next_entry                  ; Go to the next entry
.1944d2		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.1944d5		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.1944d7		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.1944d9		d0 1d		bne $1944f8	                BNE next_entry                  ; Yes: skip it!
.1944db		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.1944dd		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.1944df		f0 17		beq $1944f8	                BEQ next_entry                  ; Yes: skip it!
.1944e1		a2 00 00	ldx #$0000	                LDX #0
.1944e4		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.1944e7		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.1944e9		df 3a a0 18	cmp $18a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.1944ed		d0 09		bne $1944f8	                BNE next_entry                  ; If not equal: try the next entry
.1944ef		c8		iny		                INY                             ; Advance to the next character
.1944f0		e8		inx		                INX
.1944f1		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.1944f4		f0 16		beq $19450c	                BEQ match                       ; Yes: we have a match!
.1944f6		80 ef		bra $1944e7	                BRA scan_cmp_loop               ; No: keep checking
.1944f8		22 4d 3d 19	jsl $193d4d	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.1944fc		90 05		bcc $194503	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.1944fe		82 bf ff	brl $1944c0	                BRL scan_loop                   ; If found: keep scanning
.194501		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.194503						ret_failure
.194503		e2 20		sep #$20	                SEP #$20        ; set A short
.194505		85 0e		sta $032e	                STA DOS_STATUS
.194507		28		plp		                PLP
.194508		2b		pld		                PLD
.194509		ab		plb		                PLB
.19450a		18		clc		                CLC
.19450b		6b		rtl		                RTL
.19450c						match
.19450c		c2 20		rep #$20	                REP #$20        ; set A long
.19450e		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.194511		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194513		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.194515		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.194518		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.19451a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19451c						ret_success
.19451c		e2 20		sep #$20	                SEP #$20        ; set A short
.19451e		64 0e		stz $032e	                STZ DOS_STATUS
.194520		28		plp		                PLP
.194521		2b		pld		                PLD
.194522		ab		plb		                PLB
.194523		38		sec		                SEC
.194524		6b		rtl		                RTL
.194525						DOS_READFILE
.194525		8b		phb		                PHB
.194526		0b		phd		                PHD
.194527		08		php		                PHP
.194528		48		pha		                PHA             ; begin setdbr macro
.194529		08		php		                PHP
.19452a		e2 20		sep #$20	                SEP #$20        ; set A short
.19452c		a9 00		lda #$00	                LDA #0
.19452e		48		pha		                PHA
.19452f		ab		plb		                PLB
.194530		28		plp		                PLP
.194531		68		pla		                PLA             ; end setdbr macro
.194532		48		pha		                PHA             ; begin setdp macro
.194533		08		php		                PHP
.194534		c2 20		rep #$20	                REP #$20        ; set A long
.194536		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194539		5b		tcd		                TCD
.19453a		28		plp		                PLP
.19453b		68		pla		                PLA             ; end setdp macro
.19453c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19453e		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.194540		48		pha		                PHA
.194541		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.194543		48		pha		                PHA
.194544		22 7c 44 19	jsl $19447c	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.194548		68		pla		                PLA
.194549		85 1c		sta $033c	                STA DOS_BUFF_PTR
.19454b		68		pla		                PLA
.19454c		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.19454e		90 0f		bcc $19455f	                BCC pass_failure                    ; If found: try to load the cluster
.194550		22 96 42 19	jsl $194296	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.194554		90 09		bcc $19455f	                BCC pass_failure                    ; If there's an error... pass it up the chain
.194556						ret_success
.194556		e2 20		sep #$20	                SEP #$20        ; set A short
.194558		64 0e		stz $032e	                STZ DOS_STATUS
.19455a		28		plp		                PLP
.19455b		2b		pld		                PLD
.19455c		ab		plb		                PLB
.19455d		38		sec		                SEC
.19455e		6b		rtl		                RTL
.19455f		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.194560		2b		pld		                PLD
.194561		ab		plb		                PLB
.194562		18		clc		                CLC
.194563		6b		rtl		                RTL
.194564						ENTRYFORCLUS12
.194564		8b		phb		                PHB
.194565		0b		phd		                PHD
.194566		08		php		                PHP
.194567		48		pha		                PHA             ; begin setdbr macro
.194568		08		php		                PHP
.194569		e2 20		sep #$20	                SEP #$20        ; set A short
.19456b		a9 00		lda #$00	                LDA #0
.19456d		48		pha		                PHA
.19456e		ab		plb		                PLB
.19456f		28		plp		                PLP
.194570		68		pla		                PLA             ; end setdbr macro
.194571		48		pha		                PHA             ; begin setdp macro
.194572		08		php		                PHP
.194573		c2 20		rep #$20	                REP #$20        ; set A long
.194575		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194578		5b		tcd		                TCD
.194579		28		plp		                PLP
.19457a		68		pla		                PLA             ; end setdp macro
.19457b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19457d		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.19457f		0a		asl a		                ASL A
.194580		85 28		sta $0348	                STA DOS_TEMP
.194582		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194584		2a		rol a		                ROL A
.194585		85 2a		sta $034a	                STA DOS_TEMP+2
.194587		18		clc		                CLC
.194588		a5 10		lda $0330	                LDA DOS_CLUS_ID
.19458a		65 28		adc $0348	                ADC DOS_TEMP
.19458c		85 28		sta $0348	                STA DOS_TEMP
.19458e		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194590		65 2a		adc $034a	                ADC DOS_TEMP+2
.194592		85 2a		sta $034a	                STA DOS_TEMP+2
.194594		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.194596		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.194598		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.19459a		29 ff 03	and #$03ff	                AND #$003FF
.19459d		aa		tax		                TAX
.19459e		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1945a0		66 28		ror $0348	                ROR DOS_TEMP
.1945a2		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1945a4		66 28		ror $0348	                ROR DOS_TEMP
.1945a6		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1945a8		66 28		ror $0348	                ROR DOS_TEMP
.1945aa		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1945ac		66 28		ror $0348	                ROR DOS_TEMP
.1945ae		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1945b0		66 28		ror $0348	                ROR DOS_TEMP
.1945b2		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1945b4		66 28		ror $0348	                ROR DOS_TEMP
.1945b6		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1945b8		66 28		ror $0348	                ROR DOS_TEMP
.1945ba		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1945bc		66 28		ror $0348	                ROR DOS_TEMP
.1945be		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1945c0		66 28		ror $0348	                ROR DOS_TEMP
.1945c2		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.1945c3		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA
.1945c7		65 28		adc $0348	                ADC DOS_TEMP
.1945c9		85 24		sta $0344	                STA DOS_FAT_LBA
.1945cb		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.1945cf		65 2a		adc $034a	                ADC DOS_TEMP+2
.1945d1		85 26		sta $0346	                STA DOS_FAT_LBA+2
.1945d3		28		plp		                PLP
.1945d4		2b		pld		                PLD
.1945d5		ab		plb		                PLB
.1945d6		6b		rtl		                RTL
.1945d7						FATFORCLUSTER12
.1945d7		8b		phb		                PHB
.1945d8		0b		phd		                PHD
.1945d9		08		php		                PHP
.1945da		48		pha		                PHA             ; begin setdbr macro
.1945db		08		php		                PHP
.1945dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1945de		a9 00		lda #$00	                LDA #0
.1945e0		48		pha		                PHA
.1945e1		ab		plb		                PLB
.1945e2		28		plp		                PLP
.1945e3		68		pla		                PLA             ; end setdbr macro
.1945e4		48		pha		                PHA             ; begin setdp macro
.1945e5		08		php		                PHP
.1945e6		c2 20		rep #$20	                REP #$20        ; set A long
.1945e8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1945eb		5b		tcd		                TCD
.1945ec		28		plp		                PLP
.1945ed		68		pla		                PLA             ; end setdp macro
.1945ee		c2 30		rep #$30	                REP #$30        ; set A&X long
.1945f0		a2 00 00	ldx #$0000	                LDX #0
.1945f3		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.1945f6		8f 00 a5 18	sta $18a500	clr_loop        STA DOS_FAT_SECTORS
.1945fa		e8		inx		                INX
.1945fb		e8		inx		                INX
.1945fc		e0 00 04	cpx #$0400	                CPX #1024
.1945ff		d0 f5		bne $1945f6	                BNE clr_loop
.194601		22 64 45 19	jsl $194564	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.194605		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.194607		85 02		sta $0322	                STA BIOS_LBA
.194609		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.19460b		85 04		sta $0324	                STA BIOS_LBA+2
.19460d		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.194610		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194612		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.194615		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194617		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.19461b		90 17		bcc $194634	                BCC error
.19461d		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.19461f		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.194622		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194624		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.194627		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194629		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.19462d		90 05		bcc $194634	                BCC error
.19462f		28		plp		                PLP
.194630		2b		pld		                PLD
.194631		ab		plb		                PLB
.194632		38		sec		                SEC
.194633		6b		rtl		                RTL
.194634						error
.194634		e2 20		sep #$20	                SEP #$20        ; set A short
.194636		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194638		85 0e		sta $032e	                STA DOS_STATUS
.19463a		28		plp		                PLP
.19463b		2b		pld		                PLD
.19463c		ab		plb		                PLB
.19463d		18		clc		                CLC
.19463e		6b		rtl		                RTL
.19463f						FATFORCLUSTER32
.19463f		8b		phb		                PHB
.194640		0b		phd		                PHD
.194641		48		pha		                PHA             ; begin setdbr macro
.194642		08		php		                PHP
.194643		e2 20		sep #$20	                SEP #$20        ; set A short
.194645		a9 00		lda #$00	                LDA #0
.194647		48		pha		                PHA
.194648		ab		plb		                PLB
.194649		28		plp		                PLP
.19464a		68		pla		                PLA             ; end setdbr macro
.19464b		48		pha		                PHA             ; begin setdp macro
.19464c		08		php		                PHP
.19464d		c2 20		rep #$20	                REP #$20        ; set A long
.19464f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194652		5b		tcd		                TCD
.194653		28		plp		                PLP
.194654		68		pla		                PLA             ; end setdp macro
.194655		c2 30		rep #$30	                REP #$30        ; set A&X long
.194657		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194659		85 24		sta $0344	                STA DOS_FAT_LBA
.19465b		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.19465d		85 26		sta $0346	                STA DOS_FAT_LBA+2
.19465f		a2 07 00	ldx #$0007	                LDX #7
.194662		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.194664		66 24		ror $0344	                ROR DOS_FAT_LBA
.194666		ca		dex		                DEX
.194667		d0 f9		bne $194662	                BNE div_loop
.194669		18		clc		                CLC
.19466a		a5 24		lda $0344	                LDA DOS_FAT_LBA
.19466c		6f 14 a0 18	adc $18a014	                ADC FAT_BEGIN_LBA
.194670		85 24		sta $0344	                STA DOS_FAT_LBA
.194672		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194674		6f 16 a0 18	adc $18a016	                ADC FAT_BEGIN_LBA+2
.194678		85 26		sta $0346	                STA DOS_FAT_LBA+2
.19467a		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.19467c		85 02		sta $0322	                STA BIOS_LBA
.19467e		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194680		85 04		sta $0324	                STA BIOS_LBA+2
.194682		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.194685		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194687		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.19468a		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19468c		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.194690		b0 06		bcs $194698	                BCS find_entry
.194692		e2 20		sep #$20	                SEP #$20        ; set A short
.194694		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194696		80 0e		bra $1946a6	                BRA ret_failure
.194698						find_entry
.194698		c2 20		rep #$20	                REP #$20        ; set A long
.19469a		a5 10		lda $0330	                LDA DOS_CLUS_ID
.19469c		0a		asl a		                ASL A
.19469d		0a		asl a		                ASL A                           ; * 4
.19469e		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.1946a1		aa		tax		                TAX                             ; X should be the offset within the sector
.1946a2		2b		pld		ret_success     PLD
.1946a3		ab		plb		                PLB
.1946a4		38		sec		                SEC                             ; return success
.1946a5		6b		rtl		                RTL
.1946a6		2b		pld		ret_failure     PLD
.1946a7		ab		plb		                PLB
.1946a8		18		clc		                CLC                             ; Return failure
.1946a9		6b		rtl		                RTL
.1946aa						NEXTCLUSTER
.1946aa		08		php		                PHP
.1946ab		e2 20		sep #$20	                SEP #$20        ; set A short
.1946ad		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.1946b1		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.1946b3		d0 08		bne $1946bd	                BNE fat32                       ; No: assume it's FAT32
.1946b5		22 cb 46 19	jsl $1946cb	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.1946b9		90 0d		bcc $1946c8	                BCC pass_failure                ; If there was an error, pass it up the chain
.1946bb		80 06		bra $1946c3	                BRA ret_success
.1946bd		22 33 47 19	jsl $194733	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.1946c1		90 05		bcc $1946c8	                BCC pass_failure                ; If there was an error, pass it up the chain
.1946c3		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.1946c5		28		plp		                PLP
.1946c6		38		sec		                SEC
.1946c7		6b		rtl		                RTL
.1946c8		28		plp		pass_failure    PLP
.1946c9		18		clc		                CLC
.1946ca		6b		rtl		                RTL
.1946cb						NEXTCLUSTER12
.1946cb		8b		phb		                    PHB
.1946cc		0b		phd		                    PHD
.1946cd		08		php		                    PHP
.1946ce		48		pha		                PHA             ; begin setdbr macro
.1946cf		08		php		                PHP
.1946d0		e2 20		sep #$20	                SEP #$20        ; set A short
.1946d2		a9 00		lda #$00	                LDA #0
.1946d4		48		pha		                PHA
.1946d5		ab		plb		                PLB
.1946d6		28		plp		                PLP
.1946d7		68		pla		                PLA             ; end setdbr macro
.1946d8		48		pha		                PHA             ; begin setdp macro
.1946d9		08		php		                PHP
.1946da		c2 20		rep #$20	                REP #$20        ; set A long
.1946dc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1946df		5b		tcd		                TCD
.1946e0		28		plp		                PLP
.1946e1		68		pla		                PLA             ; end setdp macro
.1946e2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1946e4		22 d7 45 19	jsl $1945d7	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.1946e8		b0 03		bcs $1946ed	                    BCS chk_clus_id
.1946ea		82 41 00	brl $19472e	                    BRL pass_failure
.1946ed		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.1946ef		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.1946f2		d0 0d		bne $194701	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.1946f4						is_even
.1946f4		c2 20		rep #$20	                REP #$20        ; set A long
.1946f6		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.1946fa		29 ff 0f	and #$0fff	                    AND #$0FFF
.1946fd		85 28		sta $0348	                    STA DOS_TEMP
.1946ff		80 0c		bra $19470d	                    BRA check_id
.194701						is_odd
.194701		c2 20		rep #$20	                REP #$20        ; set A long
.194703		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.194707		4a		lsr a		                    LSR A
.194708		4a		lsr a		                    LSR A
.194709		4a		lsr a		                    LSR A
.19470a		4a		lsr a		                    LSR A
.19470b		85 28		sta $0348	                    STA DOS_TEMP
.19470d						check_id
.19470d		c2 20		rep #$20	                REP #$20        ; set A long
.19470f		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.194711		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.194714		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.194717		f0 0f		beq $194728	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.194719		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.19471b		85 10		sta $0330	                    STA DOS_CLUS_ID
.19471d		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.19471f						ret_success
.19471f		e2 20		sep #$20	                SEP #$20        ; set A short
.194721		64 0e		stz $032e	                    STZ DOS_STATUS
.194723		28		plp		                    PLP
.194724		2b		pld		                    PLD
.194725		ab		plb		                    PLB
.194726		38		sec		                    SEC
.194727		6b		rtl		                    RTL
.194728						no_more
.194728		e2 20		sep #$20	                SEP #$20        ; set A short
.19472a		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.19472c		85 0e		sta $032e	                    STA DOS_STATUS
.19472e		28		plp		pass_failure        PLP
.19472f		2b		pld		                    PLD
.194730		ab		plb		                    PLB
.194731		18		clc		                    CLC
.194732		6b		rtl		                    RTL
.194733						NEXTCLUSTER32
.194733		8b		phb		                PHB
.194734		0b		phd		                PHD
.194735		08		php		                PHP
.194736		48		pha		                PHA             ; begin setdbr macro
.194737		08		php		                PHP
.194738		e2 20		sep #$20	                SEP #$20        ; set A short
.19473a		a9 00		lda #$00	                LDA #0
.19473c		48		pha		                PHA
.19473d		ab		plb		                PLB
.19473e		28		plp		                PLP
.19473f		68		pla		                PLA             ; end setdbr macro
.194740		48		pha		                PHA             ; begin setdp macro
.194741		08		php		                PHP
.194742		c2 20		rep #$20	                REP #$20        ; set A long
.194744		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194747		5b		tcd		                TCD
.194748		28		plp		                PLP
.194749		68		pla		                PLA             ; end setdp macro
.19474a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19474c		22 3f 46 19	jsl $19463f	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.194750		90 53		bcc $1947a5	                BCC ret_failure                 ; If it did not work, return the error
.194752		e2 20		sep #$20	                SEP #$20        ; set A short
.194754		bf 00 a5 18	lda $18a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.194758		85 28		sta $0348	                STA DOS_TEMP
.19475a		bf 01 a5 18	lda $18a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.19475e		85 29		sta $0349	                STA DOS_TEMP+1
.194760		bf 02 a5 18	lda $18a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.194764		85 2a		sta $034a	                STA DOS_TEMP+2
.194766		bf 03 a5 18	lda $18a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.19476a		85 2b		sta $034b	                STA DOS_TEMP+3
.19476c		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.19476e		c9 ff		cmp #$ff	                CMP #$FF
.194770		d0 18		bne $19478a	                BNE found_next
.194772		a5 29		lda $0349	                LDA DOS_TEMP+1
.194774		c9 ff		cmp #$ff	                CMP #$FF
.194776		d0 12		bne $19478a	                BNE found_next
.194778		a5 2a		lda $034a	                LDA DOS_TEMP+2
.19477a		c9 ff		cmp #$ff	                CMP #$FF
.19477c		d0 0c		bne $19478a	                BNE found_next
.19477e		a5 2b		lda $034b	                LDA DOS_TEMP+3
.194780		c9 0f		cmp #$0f	                CMP #$0F
.194782		d0 06		bne $19478a	                BNE found_next                  ; No: return this cluster as the next
.194784		e2 20		sep #$20	                SEP #$20        ; set A short
.194786		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.194788		80 1b		bra $1947a5	                BRA ret_failure
.19478a						found_next
.19478a		e2 20		sep #$20	                SEP #$20        ; set A short
.19478c		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.19478e		85 10		sta $0330	                STA DOS_CLUS_ID
.194790		a5 29		lda $0349	                LDA DOS_TEMP+1
.194792		85 11		sta $0331	                STA DOS_CLUS_ID+1
.194794		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194796		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194798		a5 2b		lda $034b	                LDA DOS_TEMP+3
.19479a		85 13		sta $0333	                STA DOS_CLUS_ID+3
.19479c						ret_success
.19479c		e2 20		sep #$20	                SEP #$20        ; set A short
.19479e		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.1947a0		28		plp		                PLP
.1947a1		2b		pld		                PLD
.1947a2		ab		plb		                PLB
.1947a3		38		sec		                SEC
.1947a4		6b		rtl		                RTL
.1947a5						ret_failure
.1947a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1947a7		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.1947a9		28		plp		                PLP
.1947aa		2b		pld		                PLD
.1947ab		ab		plb		                PLB
.1947ac		18		clc		                CLC
.1947ad		6b		rtl		                RTL
.1947ae						DOS_READNEXT
.1947ae		08		php		                PHP
.1947af		c2 30		rep #$30	                REP #$30        ; set A&X long
.1947b1		22 aa 46 19	jsl $1946aa	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.1947b5		90 09		bcc $1947c0	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.1947b7		22 96 42 19	jsl $194296	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.1947bb		90 03		bcc $1947c0	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.1947bd		28		plp		ret_success     PLP
.1947be		38		sec		                SEC
.1947bf		6b		rtl		                RTL
.1947c0		28		plp		pass_failure    PLP
.1947c1		18		clc		                CLC
.1947c2		6b		rtl		                RTL
.1947c3						DOS_FREECLUS
.1947c3		08		php		                PHP
.1947c4		48		pha		                PHA             ; begin setdp macro
.1947c5		08		php		                PHP
.1947c6		c2 20		rep #$20	                REP #$20        ; set A long
.1947c8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1947cb		5b		tcd		                TCD
.1947cc		28		plp		                PLP
.1947cd		68		pla		                PLA             ; end setdp macro
.1947ce		e2 20		sep #$20	                SEP #$20        ; set A short
.1947d0		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.1947d4		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.1947d6		d0 08		bne $1947e0	                BNE fat32                       ; No: assume it's FAT32
.1947d8		22 54 48 19	jsl $194854	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.1947dc		90 0d		bcc $1947eb	                BCC pass_failure                ; If there was an error, pass it up the chain
.1947de		80 06		bra $1947e6	                BRA ret_success
.1947e0		22 2c 49 19	jsl $19492c	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.1947e4		90 05		bcc $1947eb	                BCC pass_failure                ; If there was an error, pass it up the chain
.1947e6		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.1947e8		28		plp		                PLP
.1947e9		38		sec		                SEC
.1947ea		6b		rtl		                RTL
.1947eb		28		plp		pass_failure    PLP
.1947ec		18		clc		                CLC
.1947ed		6b		rtl		                RTL
.1947ee						FDC_READ2FAT12
.1947ee		8b		phb		                    PHB
.1947ef		0b		phd		                    PHD
.1947f0		08		php		                    PHP
.1947f1		48		pha		                PHA             ; begin setdbr macro
.1947f2		08		php		                PHP
.1947f3		e2 20		sep #$20	                SEP #$20        ; set A short
.1947f5		a9 00		lda #$00	                LDA #0
.1947f7		48		pha		                PHA
.1947f8		ab		plb		                PLB
.1947f9		28		plp		                PLP
.1947fa		68		pla		                PLA             ; end setdbr macro
.1947fb		48		pha		                PHA             ; begin setdp macro
.1947fc		08		php		                PHP
.1947fd		c2 20		rep #$20	                REP #$20        ; set A long
.1947ff		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194802		5b		tcd		                TCD
.194803		28		plp		                PLP
.194804		68		pla		                PLA             ; end setdp macro
.194805		c2 30		rep #$30	                REP #$30        ; set A&X long
.194807		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.19480a		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.19480c		a9 18 00	lda #$0018	                    LDA #`DOS_FAT_SECTORS
.19480f		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.194811		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.194813		85 02		sta $0322	                    STA BIOS_LBA
.194815		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.194817		85 04		sta $0324	                    STA BIOS_LBA+2
.194819		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.19481d		b0 07		bcs $194826	                    BCS inc_sect2                   ; If success: start getting the second sector
.19481f		e2 20		sep #$20	                SEP #$20        ; set A short
.194821		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.194823		82 1c 00	brl $194842	                    BRL ret_failure
.194826						inc_sect2
.194826		c2 20		rep #$20	                REP #$20        ; set A long
.194828		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.19482a		d0 02		bne $19482e	                    BNE inc_buff_ptr
.19482c		e6 04		inc $0324	                    INC BIOS_LBA+2
.19482e		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194831		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.194833		a9 18 00	lda #$0018	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194836		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.194838		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.19483c		b0 0d		bcs $19484b	                    BCS ret_success                 ; If success, return success
.19483e		e2 20		sep #$20	                SEP #$20        ; set A short
.194840		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.194842						ret_failure
.194842		e2 20		sep #$20	                SEP #$20        ; set A short
.194844		85 00		sta $0320	                    STA BIOS_STATUS
.194846		28		plp		                    PLP
.194847		2b		pld		                    PLD
.194848		ab		plb		                    PLB
.194849		18		clc		                    CLC
.19484a		6b		rtl		                    RTL
.19484b						ret_success
.19484b		e2 20		sep #$20	                SEP #$20        ; set A short
.19484d		64 00		stz $0320	                    STZ BIOS_STATUS
.19484f		28		plp		                    PLP
.194850		2b		pld		                    PLD
.194851		ab		plb		                    PLB
.194852		38		sec		                    SEC
.194853		6b		rtl		                    RTL
.194854						DOS_FREECLUS12
.194854		da		phx		                PHX
.194855		8b		phb		                PHB
.194856		0b		phd		                PHD
.194857		08		php		                PHP
.194858		48		pha		                PHA             ; begin setdbr macro
.194859		08		php		                PHP
.19485a		e2 20		sep #$20	                SEP #$20        ; set A short
.19485c		a9 00		lda #$00	                LDA #0
.19485e		48		pha		                PHA
.19485f		ab		plb		                PLB
.194860		28		plp		                PLP
.194861		68		pla		                PLA             ; end setdbr macro
.194862		48		pha		                PHA             ; begin setdp macro
.194863		08		php		                PHP
.194864		c2 20		rep #$20	                REP #$20        ; set A long
.194866		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194869		5b		tcd		                TCD
.19486a		28		plp		                PLP
.19486b		68		pla		                PLA             ; end setdp macro
.19486c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19486e		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.194871		85 10		sta $0330	                STA DOS_CLUS_ID
.194873		a9 00 00	lda #$0000	                LDA #0
.194876		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194878		22 64 45 19	jsl $194564	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.19487c		22 ee 47 19	jsl $1947ee	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.194880		b0 07		bcs $194889	                BCS start_of_fat                ; If success, move X to the start of the FAT
.194882		e2 20		sep #$20	                SEP #$20        ; set A short
.194884		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194886		82 99 00	brl $194922	                BRL ret_failure
.194889						start_of_fat
.194889		c2 30		rep #$30	                REP #$30        ; set A&X long
.19488b		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.19488d		89 01 00	bit #$0001	                BIT #1
.194890		d0 09		bne $19489b	                BNE is_odd
.194892		bf 00 a5 18	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.194896		29 ff 0f	and #$0fff	                AND #$0FFF
.194899		80 08		bra $1948a3	                BRA chk_available
.19489b		bf 00 a5 18	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.19489f		4a		lsr a		                LSR A
.1948a0		4a		lsr a		                LSR A
.1948a1		4a		lsr a		                LSR A
.1948a2		4a		lsr a		                LSR A
.1948a3						chk_available
.1948a3		85 28		sta $0348	                STA DOS_TEMP
.1948a5		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.1948a8		f0 03		beq $1948ad	                BEQ chk_found
.1948aa		82 39 00	brl $1948e6	                BRL next_cluster                ; No: advance to the next cluster
.1948ad		8a		txa		chk_found       TXA
.1948ae		85 2a		sta $034a	                STA DOS_TEMP+2
.1948b0		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.1948b2		89 01 00	bit #$0001	                BIT #1
.1948b5		d0 0d		bne $1948c4	                BNE is_odd2
.1948b7						is_even2
.1948b7		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.1948bb		09 ff 0f	ora #$0fff	                ORA #$0FFF
.1948be		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.1948c2		80 0b		bra $1948cf	                BRA write_fat
.1948c4						is_odd2
.1948c4		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.1948c8		09 f0 ff	ora #$fff0	                ORA #$FFF0
.1948cb		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.1948cf		22 f6 49 19	jsl $1949f6	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.1948d3		b0 07		bcs $1948dc	                BCS ret_success                 ; If success: return success
.1948d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1948d7		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.1948d9		82 46 00	brl $194922	                BRL ret_failure
.1948dc						ret_success
.1948dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1948de		64 0e		stz $032e	                STZ DOS_STATUS
.1948e0		28		plp		                PLP
.1948e1		2b		pld		                PLD
.1948e2		ab		plb		                PLB
.1948e3		fa		plx		                PLX
.1948e4		38		sec		                SEC
.1948e5		6b		rtl		                RTL
.1948e6						next_cluster
.1948e6		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.1948e8		d0 02		bne $1948ec	                BNE calc_entry
.1948ea		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.1948ec		22 64 45 19	jsl $194564	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.1948f0		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.1948f3		f0 03		beq $1948f8	                BEQ chk_end_of_fat
.1948f5		82 93 ff	brl $19488b	                BRL chk_cluster                 ; No: go back and check it too
.1948f8						chk_end_of_fat
.1948f8		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.1948fa		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.1948fe		d0 0f		bne $19490f	                BNE next_2
.194900		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194902		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.194906		d0 07		bne $19490f	                BNE next_2                      ; No: get the next to sectors
.194908		e2 20		sep #$20	                SEP #$20        ; set A short
.19490a		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.19490c		82 13 00	brl $194922	                BRL ret_failure
.19490f						next_2
.19490f		22 ee 47 19	jsl $1947ee	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.194913		90 06		bcc $19491b	                BCC fat_fail                    ; If failed: return error
.194915		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.194918		82 70 ff	brl $19488b	                BRL chk_cluster                 ; And start checking from there
.19491b						fat_fail
.19491b		e2 20		sep #$20	                SEP #$20        ; set A short
.19491d		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.19491f		82 00 00	brl $194922	                BRL ret_failure
.194922						ret_failure
.194922		e2 20		sep #$20	                SEP #$20        ; set A short
.194924		85 0e		sta $032e	                STA DOS_STATUS
.194926		28		plp		                PLP
.194927		2b		pld		                PLD
.194928		ab		plb		                PLB
.194929		fa		plx		                PLX
.19492a		18		clc		                CLC
.19492b		6b		rtl		                RTL
.19492c						DOS_FREECLUS32
.19492c		8b		phb		                PHB
.19492d		0b		phd		                PHD
.19492e		08		php		                PHP
.19492f		48		pha		                PHA             ; begin setdbr macro
.194930		08		php		                PHP
.194931		e2 20		sep #$20	                SEP #$20        ; set A short
.194933		a9 00		lda #$00	                LDA #0
.194935		48		pha		                PHA
.194936		ab		plb		                PLB
.194937		28		plp		                PLP
.194938		68		pla		                PLA             ; end setdbr macro
.194939		48		pha		                PHA             ; begin setdp macro
.19493a		08		php		                PHP
.19493b		c2 20		rep #$20	                REP #$20        ; set A long
.19493d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194940		5b		tcd		                TCD
.194941		28		plp		                PLP
.194942		68		pla		                PLA             ; end setdp macro
.194943		c2 30		rep #$30	                REP #$30        ; set A&X long
.194945		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.194948		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19494a		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.19494d		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19494f		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.194953		85 02		sta $0322	                STA BIOS_LBA
.194955		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.194959		85 04		sta $0324	                STA BIOS_LBA+2
.19495b		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.19495f		b0 07		bcs $194968	                BCS initial_entry               ; If OK: set the initial entry to check
.194961		e2 20		sep #$20	                SEP #$20        ; set A short
.194963		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.194965		82 6b 00	brl $1949d3	                BRL ret_failure
.194968						initial_entry
.194968		c2 20		rep #$20	                REP #$20        ; set A long
.19496a		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.19496d		85 10		sta $0330	                STA DOS_CLUS_ID
.19496f		a9 00 00	lda #$0000	                LDA #0
.194972		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194974		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.194977		bf 00 a3 18	lda $18a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.19497b		d0 06		bne $194983	                BNE next_entry                  ; No: move to the next entry
.19497d		bf 02 a3 18	lda $18a302,x	                LDA DOS_SECTOR+2,X
.194981		f0 36		beq $1949b9	                BEQ found_free                  ; Yes: go to allocate and return it
.194983		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.194985		d0 02		bne $194989	                BNE inc_ptr
.194987		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.194989		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.19498a		e8		inx		                INX
.19498b		e8		inx		                INX
.19498c		e8		inx		                INX
.19498d		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.194990		90 e5		bcc $194977	                BLT chk_entry                   ; No: check this entry
.194992		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.194994		d0 18		bne $1949ae	                BNE get_block
.194996		e6 04		inc $0324	                INC BIOS_LBA+2
.194998		a5 04		lda $0324	                LDA BIOS_LBA+2
.19499a		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.19499e		90 0e		bcc $1949ae	                BLT get_block
.1949a0		a5 02		lda $0322	                LDA BIOS_LBA
.1949a2		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA
.1949a6		90 06		bcc $1949ae	                BLT get_block
.1949a8		e2 20		sep #$20	                SEP #$20        ; set A short
.1949aa		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.1949ac		80 25		bra $1949d3	                BRA ret_failure
.1949ae		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.1949b2		90 1b		bcc $1949cf	                BCC ret_fat_error               ; If error: throw a FAT error
.1949b4		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.1949b7		80 be		bra $194977	                BRA chk_entry                   ; Check this entry
.1949b9						found_free
.1949b9		c2 20		rep #$20	                REP #$20        ; set A long
.1949bb		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.1949be		9f 00 a3 18	sta $18a300,x	                STA DOS_SECTOR,X
.1949c2		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.1949c5		9f 02 a3 18	sta $18a302,x	                STA DOS_SECTOR+2,X
.1949c9		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.1949cd		b0 0d		bcs $1949dc	                BCS ret_success                 ; If OK: return success
.1949cf						ret_fat_error
.1949cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1949d1		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.1949d3						ret_failure
.1949d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1949d5		85 0e		sta $032e	                STA DOS_STATUS
.1949d7		28		plp		                PLP
.1949d8		2b		pld		                PLD
.1949d9		ab		plb		                PLB
.1949da		18		clc		                CLC
.1949db		6b		rtl		                RTL
.1949dc						ret_success
.1949dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1949de		64 0e		stz $032e	                STZ DOS_STATUS
.1949e0		28		plp		                PLP
.1949e1		2b		pld		                PLD
.1949e2		ab		plb		                PLB
.1949e3		38		sec		                SEC
.1949e4		6b		rtl		                RTL
.1949e5						DELCLUSTER
.1949e5		e2 20		sep #$20	                SEP #$20        ; set A short
.1949e7		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.1949eb		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.1949ed		d0 04		bne $1949f3	                BNE fat32                       ; No: assume it's FAT32
.1949ef		5c 3d 4a 19	jmp $194a3d	fat12           JML DELCLUSTER12
.1949f3		4c 8b 4a	jmp $194a8b	fat32           JMP DELCLUSTER32
.1949f6						WRITEFAT12
.1949f6		8b		phb		                PHB
.1949f7		0b		phd		                PHD
.1949f8		48		pha		                PHA             ; begin setdbr macro
.1949f9		08		php		                PHP
.1949fa		e2 20		sep #$20	                SEP #$20        ; set A short
.1949fc		a9 00		lda #$00	                LDA #0
.1949fe		48		pha		                PHA
.1949ff		ab		plb		                PLB
.194a00		28		plp		                PLP
.194a01		68		pla		                PLA             ; end setdbr macro
.194a02		48		pha		                PHA             ; begin setdp macro
.194a03		08		php		                PHP
.194a04		c2 20		rep #$20	                REP #$20        ; set A long
.194a06		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194a09		5b		tcd		                TCD
.194a0a		28		plp		                PLP
.194a0b		68		pla		                PLA             ; end setdp macro
.194a0c		c2 30		rep #$30	                REP #$30        ; set A&X long
.194a0e		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.194a11		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194a13		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.194a16		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194a18		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.194a1a		85 02		sta $0322	                STA BIOS_LBA
.194a1c		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194a1e		85 04		sta $0324	                STA BIOS_LBA+2
.194a20		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.194a24		90 14		bcc $194a3a	                BCC done
.194a26		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194a29		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194a2b		a9 18 00	lda #$0018	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194a2e		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194a30		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.194a32		d0 02		bne $194a36	                BNE put_second
.194a34		e6 04		inc $0324	                INC BIOS_LBA+2
.194a36		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.194a3a		2b		pld		done            PLD
.194a3b		ab		plb		                PLB
.194a3c		6b		rtl		                RTL
.194a3d						DELCLUSTER12
.194a3d		8b		phb		                PHB
.194a3e		0b		phd		                PHD
.194a3f		08		php		                PHP
.194a40		48		pha		                PHA             ; begin setdbr macro
.194a41		08		php		                PHP
.194a42		e2 20		sep #$20	                SEP #$20        ; set A short
.194a44		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194a46		48		pha		                PHA
.194a47		ab		plb		                PLB
.194a48		28		plp		                PLP
.194a49		68		pla		                PLA             ; end setdbr macro
.194a4a		48		pha		                PHA             ; begin setdp macro
.194a4b		08		php		                PHP
.194a4c		c2 20		rep #$20	                REP #$20        ; set A long
.194a4e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194a51		5b		tcd		                TCD
.194a52		28		plp		                PLP
.194a53		68		pla		                PLA             ; end setdp macro
.194a54		c2 30		rep #$30	                REP #$30        ; set A&X long
.194a56		22 d7 45 19	jsl $1945d7	                JSL FATFORCLUSTER12
.194a5a		8a		txa		                TXA                             ; Check to see if the index is odd or even
.194a5b		89 01 00	bit #$0001	                BIT #1
.194a5e		d0 08		bne $194a68	                BNE is_odd
.194a60		bd 00 a5	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.194a63		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.194a66		80 06		bra $194a6e	                BRA save_update
.194a68		bd 00 a5	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.194a6b		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.194a6e		9d 00 a5	sta $18a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.194a71		22 f6 49 19	jsl $1949f6	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.194a75		b0 0b		bcs $194a82	                BCS ret_success
.194a77						ret_failure
.194a77		e2 20		sep #$20	                SEP #$20        ; set A short
.194a79		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194a7b		85 0e		sta $032e	                STA DOS_STATUS
.194a7d		28		plp		                PLP
.194a7e		2b		pld		                PLD
.194a7f		ab		plb		                PLB
.194a80		18		clc		                CLC
.194a81		6b		rtl		                RTL
.194a82						ret_success
.194a82		e2 20		sep #$20	                SEP #$20        ; set A short
.194a84		64 0e		stz $032e	                STZ DOS_STATUS
.194a86		28		plp		                PLP
.194a87		2b		pld		                PLD
.194a88		ab		plb		                PLB
.194a89		38		sec		                SEC
.194a8a		6b		rtl		                RTL
.194a8b						DELCLUSTER32
.194a8b		8b		phb		                PHB
.194a8c		0b		phd		                PHD
.194a8d		08		php		                PHP
.194a8e		c2 30		rep #$30	                REP #$30        ; set A&X long
.194a90		48		pha		                PHA             ; begin setdbr macro
.194a91		08		php		                PHP
.194a92		e2 20		sep #$20	                SEP #$20        ; set A short
.194a94		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194a96		48		pha		                PHA
.194a97		ab		plb		                PLB
.194a98		28		plp		                PLP
.194a99		68		pla		                PLA             ; end setdbr macro
.194a9a		48		pha		                PHA             ; begin setdp macro
.194a9b		08		php		                PHP
.194a9c		c2 20		rep #$20	                REP #$20        ; set A long
.194a9e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194aa1		5b		tcd		                TCD
.194aa2		28		plp		                PLP
.194aa3		68		pla		                PLA             ; end setdp macro
.194aa4		22 3f 46 19	jsl $19463f	                JSL FATFORCLUSTER32
.194aa8		a9 00 00	lda #$0000	                LDA #0
.194aab		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.194aae		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.194ab1		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.194ab5		b0 0b		bcs $194ac2	                BCS ret_success
.194ab7						ret_failure
.194ab7		e2 20		sep #$20	                SEP #$20        ; set A short
.194ab9		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194abb		85 0e		sta $032e	                STA DOS_STATUS
.194abd		28		plp		                PLP
.194abe		2b		pld		                PLD
.194abf		ab		plb		                PLB
.194ac0		18		clc		                CLC
.194ac1		6b		rtl		                RTL
.194ac2						ret_success
.194ac2		e2 20		sep #$20	                SEP #$20        ; set A short
.194ac4		64 0e		stz $032e	                STZ DOS_STATUS
.194ac6		28		plp		                PLP
.194ac7		2b		pld		                PLD
.194ac8		ab		plb		                PLB
.194ac9		38		sec		                SEC
.194aca		6b		rtl		                RTL
.194acb						DOS_APPENDCLUS
.194acb		8b		phb		                PHB
.194acc		0b		phd		                PHD
.194acd		08		php		                PHP
.194ace		48		pha		                PHA             ; begin setdbr macro
.194acf		08		php		                PHP
.194ad0		e2 20		sep #$20	                SEP #$20        ; set A short
.194ad2		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194ad4		48		pha		                PHA
.194ad5		ab		plb		                PLB
.194ad6		28		plp		                PLP
.194ad7		68		pla		                PLA             ; end setdbr macro
.194ad8		48		pha		                PHA             ; begin setdp macro
.194ad9		08		php		                PHP
.194ada		c2 20		rep #$20	                REP #$20        ; set A long
.194adc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194adf		5b		tcd		                TCD
.194ae0		28		plp		                PLP
.194ae1		68		pla		                PLA             ; end setdp macro
.194ae2		c2 30		rep #$30	                REP #$30        ; set A&X long
.194ae4		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.194ae6		48		pha		                PHA
.194ae7		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194ae9		48		pha		                PHA
.194aea		22 c3 47 19	jsl $1947c3	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.194aee		b0 09		bcs $194af9	                BCS save_cluster                ; If we got a cluster, write the data to it
.194af0		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.194af1		85 10		sta $0330	                STA DOS_CLUS_ID
.194af3		68		pla		                PLA
.194af4		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194af6		82 7d 00	brl $194b76	                BRL pass_failure                ; Pass the failure back up the chain
.194af9		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.194afb		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194afe		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194b00		8d 38 a0	sta $18a038	                STA DOS_NEW_CLUSTER+2
.194b03		22 d3 42 19	jsl $1942d3	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.194b07		90 e7		bcc $194af0	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.194b09		68		pla		                PLA                             ; Restore the cluster of the file
.194b0a		85 10		sta $0330	                STA DOS_CLUS_ID
.194b0c		68		pla		                PLA
.194b0d		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194b0f		22 aa 46 19	jsl $1946aa	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.194b13		b0 fa		bcs $194b0f	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.194b15		e2 20		sep #$20	                SEP #$20        ; set A short
.194b17		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194b1b		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194b1d		d0 3d		bne $194b5c	                BNE fat32                       ; No: assume it's FAT32
.194b1f						fat12
.194b1f		c2 20		rep #$20	                REP #$20        ; set A long
.194b21		22 64 45 19	jsl $194564	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.194b25		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.194b27		89 01 00	bit #$0001	                BIT #1
.194b2a		d0 11		bne $194b3d	                BNE is_odd
.194b2c		ad 36 a0	lda $18a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.194b2f		29 ff 0f	and #$0fff	                AND #$0FFF
.194b32		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194b35		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.194b38		29 00 f0	and #$f000	                AND #$F000
.194b3b		80 10		bra $194b4d	                BRA update_fat12
.194b3d		ad 36 a0	lda $18a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.194b40		0a		asl a		                ASL A
.194b41		0a		asl a		                ASL A
.194b42		0a		asl a		                ASL A
.194b43		0a		asl a		                ASL A
.194b44		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194b47		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.194b4a		29 0f 00	and #$000f	                AND #$000F
.194b4d		0d 36 a0	ora $18a036	update_fat12    ORA DOS_NEW_CLUSTER
.194b50		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194b53		22 f6 49 19	jsl $1949f6	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.194b57		b0 22		bcs $194b7b	                BCS ret_success
.194b59		82 1a 00	brl $194b76	                BRL pass_failure
.194b5c						fat32
.194b5c		c2 20		rep #$20	                REP #$20        ; set A long
.194b5e		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.194b61		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194b64		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.194b67		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.194b6a		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.194b6e		b0 0b		bcs $194b7b	                BCS ret_success
.194b70		e2 20		sep #$20	                SEP #$20        ; set A short
.194b72		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.194b74		85 0e		sta $032e	                STA DOS_STATUS
.194b76		28		plp		pass_failure    PLP
.194b77		2b		pld		                PLD
.194b78		ab		plb		                PLB
.194b79		18		clc		                CLC
.194b7a		6b		rtl		                RTL
.194b7b						ret_success
.194b7b		e2 20		sep #$20	                SEP #$20        ; set A short
.194b7d		64 0e		stz $032e	                STZ DOS_STATUS
.194b7f		28		plp		                PLP
.194b80		2b		pld		                PLD
.194b81		ab		plb		                PLB
.194b82		38		sec		                SEC
.194b83		6b		rtl		                RTL
.194b84						BCD2BIN
.194b84		8b		phb		                PHB
.194b85		0b		phd		                PHD
.194b86		08		php		                PHP
.194b87		48		pha		                PHA             ; begin setdbr macro
.194b88		08		php		                PHP
.194b89		e2 20		sep #$20	                SEP #$20        ; set A short
.194b8b		a9 00		lda #$00	                LDA #0
.194b8d		48		pha		                PHA
.194b8e		ab		plb		                PLB
.194b8f		28		plp		                PLP
.194b90		68		pla		                PLA             ; end setdbr macro
.194b91		48		pha		                PHA             ; begin setdp macro
.194b92		08		php		                PHP
.194b93		c2 20		rep #$20	                REP #$20        ; set A long
.194b95		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194b98		5b		tcd		                TCD
.194b99		28		plp		                PLP
.194b9a		68		pla		                PLA             ; end setdp macro
.194b9b		c2 30		rep #$30	                REP #$30        ; set A&X long
.194b9d		85 28		sta $0348	                STA DOS_TEMP
.194b9f		29 0f 00	and #$000f	                AND #$000F
.194ba2		85 2a		sta $034a	                STA DOS_TEMP+2
.194ba4		a5 28		lda $0348	                LDA DOS_TEMP
.194ba6		4a		lsr a		                LSR A
.194ba7		4a		lsr a		                LSR A
.194ba8		4a		lsr a		                LSR A
.194ba9		4a		lsr a		                LSR A
.194baa		85 28		sta $0348	                STA DOS_TEMP
.194bac		29 0f 00	and #$000f	                AND #$000F
.194baf		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194bb3		a9 0a 00	lda #$000a	                LDA #10
.194bb6		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194bba		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194bbe		18		clc		                CLC
.194bbf		65 2a		adc $034a	                ADC DOS_TEMP+2
.194bc1		85 2a		sta $034a	                STA DOS_TEMP+2
.194bc3		a5 28		lda $0348	                LDA DOS_TEMP
.194bc5		4a		lsr a		                LSR A
.194bc6		4a		lsr a		                LSR A
.194bc7		4a		lsr a		                LSR A
.194bc8		4a		lsr a		                LSR A
.194bc9		85 28		sta $0348	                STA DOS_TEMP
.194bcb		29 0f 00	and #$000f	                AND #$000F
.194bce		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194bd2		a9 64 00	lda #$0064	                LDA #100
.194bd5		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194bd9		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194bdd		18		clc		                CLC
.194bde		65 2a		adc $034a	                ADC DOS_TEMP+2
.194be0		85 2a		sta $034a	                STA DOS_TEMP+2
.194be2		a5 28		lda $0348	                LDA DOS_TEMP
.194be4		4a		lsr a		                LSR A
.194be5		4a		lsr a		                LSR A
.194be6		4a		lsr a		                LSR A
.194be7		4a		lsr a		                LSR A
.194be8		29 0f 00	and #$000f	                AND #$000F
.194beb		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194bef		a9 e8 03	lda #$03e8	                LDA #1000
.194bf2		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194bf6		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194bfa		18		clc		                CLC
.194bfb		65 2a		adc $034a	                ADC DOS_TEMP+2
.194bfd		28		plp		                PLP
.194bfe		2b		pld		                PLD
.194bff		ab		plb		                PLB
.194c00		6b		rtl		                RTL
.194c01						DOS_RTCCREATE
.194c01		8b		phb		                PHB
.194c02		0b		phd		                PHD
.194c03		08		php		                PHP
.194c04		48		pha		                PHA             ; begin setdbr macro
.194c05		08		php		                PHP
.194c06		e2 20		sep #$20	                SEP #$20        ; set A short
.194c08		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194c0a		48		pha		                PHA
.194c0b		ab		plb		                PLB
.194c0c		28		plp		                PLP
.194c0d		68		pla		                PLA             ; end setdbr macro
.194c0e		48		pha		                PHA             ; begin setdp macro
.194c0f		08		php		                PHP
.194c10		c2 20		rep #$20	                REP #$20        ; set A long
.194c12		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194c15		5b		tcd		                TCD
.194c16		28		plp		                PLP
.194c17		68		pla		                PLA             ; end setdp macro
.194c18		c2 10		rep #$10	                REP #$10        ; set X long
.194c1a		e2 20		sep #$20	                SEP #$20        ; set A short
.194c1c		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.194c20		09 08		ora #$08	                ORA #%00001000
.194c22		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.194c26		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.194c2a		85 29		sta $0349	                STA DOS_TEMP+1
.194c2c		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.194c30		85 28		sta $0348	                STA DOS_TEMP
.194c32		c2 20		rep #$20	                REP #$20        ; set A long
.194c34		a5 28		lda $0348	                LDA DOS_TEMP
.194c36		22 84 4b 19	jsl $194b84	                JSL BCD2BIN                 ; Convert it to binary
.194c3a		85 28		sta $0348	                STA DOS_TEMP
.194c3c		38		sec		                SEC                         ; Year is relative to 1980
.194c3d		e9 bc 07	sbc #$07bc	                SBC #1980
.194c40		c2 20		rep #$20	                REP #$20        ; set A long
.194c42		0a		asl a		                ASL A
.194c43		0a		asl a		                ASL A
.194c44		0a		asl a		                ASL A
.194c45		0a		asl a		                ASL A
.194c46		0a		asl a		                ASL A
.194c47		0a		asl a		                ASL A
.194c48		0a		asl a		                ASL A
.194c49		0a		asl a		                ASL A
.194c4a		0a		asl a		                ASL A
.194c4b		29 00 fe	and #$fe00	                AND #$FE00
.194c4e		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194c51		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c53		e2 20		sep #$20	                SEP #$20        ; set A short
.194c55		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.194c59		c2 20		rep #$20	                REP #$20        ; set A long
.194c5b		29 ff 00	and #$00ff	                AND #$00FF
.194c5e		22 84 4b 19	jsl $194b84	                JSL BCD2BIN                 ; Convert it to binary
.194c62		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.194c65		0a		asl a		                ASL A
.194c66		0a		asl a		                ASL A
.194c67		0a		asl a		                ASL A
.194c68		0a		asl a		                ASL A
.194c69		0a		asl a		                ASL A
.194c6a		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.194c6d		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194c70		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194c72		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c74		e2 20		sep #$20	                SEP #$20        ; set A short
.194c76		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.194c7a		c2 20		rep #$20	                REP #$20        ; set A long
.194c7c		29 ff 00	and #$00ff	                AND #$00FF
.194c7f		22 84 4b 19	jsl $194b84	                JSL BCD2BIN                 ; Convert it to binary
.194c83		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.194c86		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194c89		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194c8b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c8d		e2 20		sep #$20	                SEP #$20        ; set A short
.194c8f		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.194c93		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.194c95		c2 20		rep #$20	                REP #$20        ; set A long
.194c97		29 ff 00	and #$00ff	                AND #$00FF
.194c9a		22 84 4b 19	jsl $194b84	                JSL BCD2BIN                 ; Convert it to binary
.194c9e		c2 20		rep #$20	                REP #$20        ; set A long
.194ca0		0a		asl a		                ASL A
.194ca1		0a		asl a		                ASL A
.194ca2		0a		asl a		                ASL A
.194ca3		0a		asl a		                ASL A
.194ca4		0a		asl a		                ASL A
.194ca5		0a		asl a		                ASL A
.194ca6		0a		asl a		                ASL A
.194ca7		0a		asl a		                ASL A
.194ca8		0a		asl a		                ASL A
.194ca9		0a		asl a		                ASL A
.194caa		0a		asl a		                ASL A
.194cab		29 00 f8	and #$f800	                AND #$F800
.194cae		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.194cb1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194cb3		e2 20		sep #$20	                SEP #$20        ; set A short
.194cb5		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.194cb9		c2 20		rep #$20	                REP #$20        ; set A long
.194cbb		29 ff 00	and #$00ff	                AND #$00FF
.194cbe		22 84 4b 19	jsl $194b84	                JSL BCD2BIN                 ; Convert it to binary
.194cc2		c2 20		rep #$20	                REP #$20        ; set A long
.194cc4		0a		asl a		                ASL A
.194cc5		0a		asl a		                ASL A
.194cc6		0a		asl a		                ASL A
.194cc7		0a		asl a		                ASL A
.194cc8		0a		asl a		                ASL A
.194cc9		29 e0 07	and #$07e0	                AND #$07E0
.194ccc		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.194ccf		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194cd1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194cd3		e2 20		sep #$20	                SEP #$20        ; set A short
.194cd5		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.194cd9		c2 20		rep #$20	                REP #$20        ; set A long
.194cdb		29 ff 00	and #$00ff	                AND #$00FF
.194cde		22 84 4b 19	jsl $194b84	                JSL BCD2BIN                 ; Convert it to binary
.194ce2		c2 20		rep #$20	                REP #$20        ; set A long
.194ce4		29 1f 00	and #$001f	                AND #$001F
.194ce7		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.194cea		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194cec		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194cee		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.194cf2		29 f7 00	and #$00f7	                AND #%11110111
.194cf5		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.194cf9		28		plp		                PLP
.194cfa		2b		pld		                PLD
.194cfb		ab		plb		                PLB
.194cfc		6b		rtl		                RTL
.194cfd						DOS_CREATE
.194cfd		8b		phb		                PHB
.194cfe		0b		phd		                PHD
.194cff		08		php		                PHP
.194d00		48		pha		                PHA             ; begin setdbr macro
.194d01		08		php		                PHP
.194d02		e2 20		sep #$20	                SEP #$20        ; set A short
.194d04		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194d06		48		pha		                PHA
.194d07		ab		plb		                PLB
.194d08		28		plp		                PLP
.194d09		68		pla		                PLA             ; end setdbr macro
.194d0a		48		pha		                PHA             ; begin setdp macro
.194d0b		08		php		                PHP
.194d0c		c2 20		rep #$20	                REP #$20        ; set A long
.194d0e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194d11		5b		tcd		                TCD
.194d12		28		plp		                PLP
.194d13		68		pla		                PLA             ; end setdp macro
.194d14		c2 30		rep #$30	                REP #$30        ; set A&X long
.194d16		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.194d19		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d1b		85 28		sta $0348	                STA DOS_TEMP
.194d1d		c8		iny		                INY
.194d1e		c8		iny		                INY
.194d1f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d21		85 2a		sta $034a	                STA DOS_TEMP+2
.194d23		e2 20		sep #$20	                SEP #$20        ; set A short
.194d25		a0 00 00	ldy #$0000	                LDY #0
.194d28		a2 00 00	ldx #$0000	                LDX #0
.194d2b		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.194d2d		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.194d2f		f0 04		beq $194d35	                BEQ find_file                   ; If it's NULL, we're done
.194d31		e8		inx		                INX
.194d32		c8		iny		                INY
.194d33		80 f6		bra $194d2b	                BRA path_loop
.194d35		22 e4 43 19	jsl $1943e4	find_file       JSL DOS_PARSE_PATH
.194d39		22 7c 44 19	jsl $19447c	                JSL DOS_FINDFILE
.194d3d		90 07		bcc $194d46	                BCC set_device
.194d3f		e2 20		sep #$20	                SEP #$20        ; set A short
.194d41		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.194d43		82 d2 00	brl $194e18	                BRL ret_failure
.194d46						set_device
.194d46		e2 20		sep #$20	                SEP #$20        ; set A short
.194d48		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.194d4b		a5 01		lda $0321	                LDA BIOS_DEV
.194d4d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194d4f						validate_name
.194d4f		22 c3 47 19	jsl $1947c3	                JSL DOS_FREECLUS
.194d53		b0 03		bcs $194d58	                BCS save_data
.194d55		82 c4 00	brl $194e1c	                BRL pass_failure
.194d58						save_data
.194d58		c2 20		rep #$20	                REP #$20        ; set A long
.194d5a		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.194d5d		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.194d5f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194d61		c8		iny		                INY
.194d62		c8		iny		                INY
.194d63		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194d65		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194d67		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.194d6a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d6c		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194d6e		c8		iny		                INY
.194d6f		c8		iny		                INY
.194d70		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d72		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194d74		22 d3 42 19	jsl $1942d3	                JSL DOS_PUTCLUSTER
.194d78		b0 00		bcs $194d7a	                BCS find_dir
.194d7a						find_dir
.194d7a		c2 20		rep #$20	                REP #$20        ; set A long
.194d7c		22 0e 3e 19	jsl $193e0e	                JSL DOS_DIRFINDFREE
.194d80		b0 1a		bcs $194d9c	                BCS set_entry
.194d82		c2 20		rep #$20	                REP #$20        ; set A long
.194d84		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.194d87		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.194d89		85 10		sta $0330	                STA DOS_CLUS_ID
.194d8b		c8		iny		                INY
.194d8c		c8		iny		                INY
.194d8d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d8f		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194d91		22 8b 4a 19	jsl $194a8b	                JSL DELCLUSTER32                ; Delete the cluster
.194d95		e2 20		sep #$20	                SEP #$20        ; set A short
.194d97		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.194d99		82 7c 00	brl $194e18	                BRL ret_failure
.194d9c						set_entry
.194d9c		e2 20		sep #$20	                SEP #$20        ; set A short
.194d9e		a0 00 00	ldy #$0000	                LDY #0
.194da1		a9 00		lda #$00	                LDA #0                          ; NULL
.194da3		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.194da5		c8		iny		                INY
.194da6		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.194da9		d0 f8		bne $194da3	                BNE copy_dir_loop
.194dab		a0 00 00	ldy #$0000	                LDY #0
.194dae		b9 3a a0	lda $18a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.194db1		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194db3		c8		iny		                INY
.194db4		c0 0b 00	cpy #$000b	                CPY #11
.194db7		d0 f5		bne $194dae	                BNE name_loop
.194db9		c2 20		rep #$20	                REP #$20        ; set A long
.194dbb		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.194dbe		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194dc0		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.194dc3		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194dc5		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.194dc8		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194dca		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.194dcd		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194dcf		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.194dd2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194dd4		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.194dd7		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194dd9		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.194ddc		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194dde		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.194de1		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194de3		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.194de6		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.194de9		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194deb		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.194dee		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194df0		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.194df3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194df5		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.194df8		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194dfa		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.194dfd		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194dff		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.194e02		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e04		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.194e07		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194e09		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.194e0c		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194e0e		c2 20		rep #$20	                REP #$20        ; set A long
.194e10		22 cc 3e 19	jsl $193ecc	                JSL DOS_DIRWRITE
.194e14		b0 0b		bcs $194e21	                BCS ret_success
.194e16		80 04		bra $194e1c	                BRA pass_failure
.194e18						ret_failure
.194e18		e2 20		sep #$20	                SEP #$20        ; set A short
.194e1a		85 0e		sta $032e	                STA DOS_STATUS
.194e1c		28		plp		pass_failure    PLP
.194e1d		2b		pld		                PLD
.194e1e		ab		plb		                PLB
.194e1f		18		clc		                CLC
.194e20		6b		rtl		                RTL
.194e21						ret_success
.194e21		e2 20		sep #$20	                SEP #$20        ; set A short
.194e23		64 0e		stz $032e	                STZ DOS_STATUS
.194e25		28		plp		                PLP
.194e26		2b		pld		                PLD
.194e27		ab		plb		                PLB
.194e28		38		sec		                SEC
.194e29		6b		rtl		                RTL
.194e2a						DOS_COPYPATH
.194e2a		da		phx		                PHX
.194e2b		5a		phy		                PHY
.194e2c		8b		phb		                PHB
.194e2d		0b		phd		                PHD
.194e2e		08		php		                PHP
.194e2f		48		pha		                PHA             ; begin setdbr macro
.194e30		08		php		                PHP
.194e31		e2 20		sep #$20	                SEP #$20        ; set A short
.194e33		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194e35		48		pha		                PHA
.194e36		ab		plb		                PLB
.194e37		28		plp		                PLP
.194e38		68		pla		                PLA             ; end setdbr macro
.194e39		48		pha		                PHA             ; begin setdp macro
.194e3a		08		php		                PHP
.194e3b		c2 20		rep #$20	                REP #$20        ; set A long
.194e3d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194e40		5b		tcd		                TCD
.194e41		28		plp		                PLP
.194e42		68		pla		                PLA             ; end setdp macro
.194e43		c2 30		rep #$30	                REP #$30        ; set A&X long
.194e45		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.194e48		a2 00 00	ldx #$0000	                LDX #0
.194e4b		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.194e4d		e8		inx		                INX
.194e4e		e8		inx		                INX
.194e4f		e0 00 01	cpx #$0100	                CPX #256
.194e52		d0 f7		bne $194e4b	                BNE clr_loop
.194e54		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.194e56		d0 04		bne $194e5c	                BNE get_path            ; No: attempt to fetch the path
.194e58		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.194e5a		f0 27		beq $194e83	                BEQ done                ; Yes: return an empty buffer
.194e5c		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.194e5f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e61		85 28		sta $0348	                STA DOS_TEMP
.194e63		c8		iny		                INY
.194e64		c8		iny		                INY
.194e65		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e67		85 2a		sta $034a	                STA DOS_TEMP+2
.194e69		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.194e6b		d0 04		bne $194e71	                BNE start_copy          ; No: start copying it
.194e6d		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194e6f		f0 12		beq $194e83	                BEQ done                ; Yes: return an empty buffer
.194e71						start_copy
.194e71		e2 20		sep #$20	                SEP #$20        ; set A short
.194e73		a2 00 00	ldx #$0000	                LDX #0
.194e76		a0 00 00	ldy #$0000	                LDY #0
.194e79		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.194e7b		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.194e7d		f0 04		beq $194e83	                BEQ done
.194e7f		e8		inx		                INX
.194e80		c8		iny		                INY
.194e81		d0 f6		bne $194e79	                BNE loop
.194e83		28		plp		done            PLP
.194e84		2b		pld		                PLD
.194e85		ab		plb		                PLB
.194e86		7a		ply		                PLY
.194e87		fa		plx		                PLX
.194e88		6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.194e89						DOS_TEST
.194e89		8b		phb		                PHB
.194e8a		0b		phd		                PHD
.194e8b		08		php		                PHP
.194e8c		48		pha		                PHA             ; begin setdbr macro
.194e8d		08		php		                PHP
.194e8e		e2 20		sep #$20	                SEP #$20        ; set A short
.194e90		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194e92		48		pha		                PHA
.194e93		ab		plb		                PLB
.194e94		28		plp		                PLP
.194e95		68		pla		                PLA             ; end setdbr macro
.194e96		48		pha		                PHA             ; begin setdp macro
.194e97		08		php		                PHP
.194e98		c2 20		rep #$20	                REP #$20        ; set A long
.194e9a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194e9d		5b		tcd		                TCD
.194e9e		28		plp		                PLP
.194e9f		68		pla		                PLA             ; end setdp macro
.194ea0		c2 30		rep #$30	                REP #$30        ; set A&X long
.194ea2		a9 c8 4e	lda #$4ec8	                LDA #<>src_file
.194ea5		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.194ea9		a9 19 00	lda #$0019	                LDA #`src_file
.194eac		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.194eb0		a9 d5 4e	lda #$4ed5	                LDA #<>dst_file
.194eb3		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.194eb7		a9 19 00	lda #$0019	                LDA #`dst_file
.194eba		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.194ebe		22 fa 56 19	jsl $1956fa	                JSL IF_COPY
.194ec2		b0 00		bcs $194ec4	                BCS done
.194ec4		28		plp		done            PLP
.194ec5		2b		pld		                PLD
.194ec6		ab		plb		                PLB
.194ec7		6b		rtl		                RTL
>194ec8		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>194ed0		2e 62 61 73 00
>194ed5		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>194edd		32 2e 62 61 73 00
.194ee3						IF_OPEN
.194ee3		da		phx		                PHX
.194ee4		5a		phy		                PHY
.194ee5		0b		phd		                PHD
.194ee6		8b		phb		                PHB
.194ee7		08		php		                PHP
.194ee8		48		pha		                PHA             ; begin setdbr macro
.194ee9		08		php		                PHP
.194eea		e2 20		sep #$20	                SEP #$20        ; set A short
.194eec		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194eee		48		pha		                PHA
.194eef		ab		plb		                PLB
.194ef0		28		plp		                PLP
.194ef1		68		pla		                PLA             ; end setdbr macro
.194ef2		48		pha		                PHA             ; begin setdp macro
.194ef3		08		php		                PHP
.194ef4		c2 20		rep #$20	                REP #$20        ; set A long
.194ef6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194ef9		5b		tcd		                TCD
.194efa		28		plp		                PLP
.194efb		68		pla		                PLA             ; end setdp macro
.194efc		e2 20		sep #$20	                SEP #$20        ; set A short
.194efe		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.194f01		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f03		89 20		bit #$20	                BIT #FD_STAT_OPEN
.194f05		f0 05		beq $194f0c	                BEQ ok_to_open
.194f07		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.194f09		82 87 06	brl $195593	                BRL IF_FAILURE
.194f0c		22 2a 4e 19	jsl $194e2a	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.194f10		22 7c 44 19	jsl $19447c	                JSL DOS_FINDFILE                ; Attempt to find the file
.194f14		b0 03		bcs $194f19	                BCS is_found                    ; If OK: we found the file
.194f16		82 7e 06	brl $195597	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.194f19						is_found
.194f19		e2 20		sep #$20	                SEP #$20        ; set A short
.194f1b		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.194f1e		a5 01		lda $0321	                LDA BIOS_DEV
.194f20		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f22		c2 20		rep #$20	                REP #$20        ; set A long
.194f24		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.194f27		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f29		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194f2b		c8		iny		                INY
.194f2c		c8		iny		                INY
.194f2d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f2f		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194f31		22 96 42 19	jsl $194296	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.194f35		b0 03		bcs $194f3a	                BCS read_cluster
.194f37		82 5d 06	brl $195597	                BRL IF_PASSFAILURE
.194f3a		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.194f3d		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194f3f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f41		c8		iny		                INY
.194f42		c8		iny		                INY
.194f43		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194f45		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f47		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.194f4a		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194f4c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f4e		c8		iny		                INY
.194f4f		c8		iny		                INY
.194f50		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194f52		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f54		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.194f57		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194f59		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.194f5c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f5e		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.194f61		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194f63		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.194f66		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f68		e2 20		sep #$20	                SEP #$20        ; set A short
.194f6a		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.194f6d		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.194f6f		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194f71		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f73		82 28 06	brl $19559e	                BRL IF_SUCCESS
.194f76						IF_CREATE
.194f76		da		phx		                PHX
.194f77		5a		phy		                PHY
.194f78		0b		phd		                PHD
.194f79		8b		phb		                PHB
.194f7a		08		php		                PHP
.194f7b		48		pha		                PHA             ; begin setdbr macro
.194f7c		08		php		                PHP
.194f7d		e2 20		sep #$20	                SEP #$20        ; set A short
.194f7f		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194f81		48		pha		                PHA
.194f82		ab		plb		                PLB
.194f83		28		plp		                PLP
.194f84		68		pla		                PLA             ; end setdbr macro
.194f85		48		pha		                PHA             ; begin setdp macro
.194f86		08		php		                PHP
.194f87		c2 20		rep #$20	                REP #$20        ; set A long
.194f89		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194f8c		5b		tcd		                TCD
.194f8d		28		plp		                PLP
.194f8e		68		pla		                PLA             ; end setdp macro
.194f8f		22 fd 4c 19	jsl $194cfd	                JSL DOS_CREATE                  ; Attempt to create the file
.194f93		90 18		bcc $194fad	                BCC pass_failure                ; If it fails: pass the failure up the chain
.194f95		c2 30		rep #$30	                REP #$30        ; set A&X long
.194f97		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.194f9a		a9 00 00	lda #$0000	                LDA #0
.194f9d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f9f		c8		iny		                INY
.194fa0		c8		iny		                INY
.194fa1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194fa3		e2 20		sep #$20	                SEP #$20        ; set A short
.194fa5		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.194fa8		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.194faa		82 f1 05	brl $19559e	                BRL IF_SUCCESS
.194fad		82 e3 05	brl $195593	pass_failure    BRL IF_FAILURE
.194fb0						IF_CLOSE
.194fb0		da		phx		                PHX
.194fb1		5a		phy		                PHY
.194fb2		0b		phd		                PHD
.194fb3		8b		phb		                PHB
.194fb4		08		php		                PHP
.194fb5		48		pha		                PHA             ; begin setdbr macro
.194fb6		08		php		                PHP
.194fb7		e2 20		sep #$20	                SEP #$20        ; set A short
.194fb9		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194fbb		48		pha		                PHA
.194fbc		ab		plb		                PLB
.194fbd		28		plp		                PLP
.194fbe		68		pla		                PLA             ; end setdbr macro
.194fbf		48		pha		                PHA             ; begin setdp macro
.194fc0		08		php		                PHP
.194fc1		c2 20		rep #$20	                REP #$20        ; set A long
.194fc3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194fc6		5b		tcd		                TCD
.194fc7		28		plp		                PLP
.194fc8		68		pla		                PLA             ; end setdp macro
.194fc9		e2 20		sep #$20	                SEP #$20        ; set A short
.194fcb		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.194fce		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194fd0		89 02		bit #$02	                BIT #FD_STAT_WRITE
.194fd2		f0 09		beq $194fdd	                BEQ set_flag                    ; No, just mark it closed
.194fd4		22 49 50 19	jsl $195049	                JSL IF_WRITE                    ; Attempt to write the cluster
.194fd8		b0 03		bcs $194fdd	                BCS set_flag
.194fda		82 ba 05	brl $195597	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.194fdd		22 98 56 19	jsl $195698	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.194fe1		82 ba 05	brl $19559e	                BRL IF_SUCCESS
.194fe4						IF_READ
.194fe4		da		phx		                PHX
.194fe5		5a		phy		                PHY
.194fe6		0b		phd		                PHD
.194fe7		8b		phb		                PHB
.194fe8		08		php		                PHP
.194fe9		48		pha		                PHA             ; begin setdbr macro
.194fea		08		php		                PHP
.194feb		e2 20		sep #$20	                SEP #$20        ; set A short
.194fed		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194fef		48		pha		                PHA
.194ff0		ab		plb		                PLB
.194ff1		28		plp		                PLP
.194ff2		68		pla		                PLA             ; end setdbr macro
.194ff3		48		pha		                PHA             ; begin setdp macro
.194ff4		08		php		                PHP
.194ff5		c2 20		rep #$20	                REP #$20        ; set A long
.194ff7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194ffa		5b		tcd		                TCD
.194ffb		28		plp		                PLP
.194ffc		68		pla		                PLA             ; end setdp macro
.194ffd		c2 10		rep #$10	                REP #$10        ; set X long
.194fff		e2 20		sep #$20	                SEP #$20        ; set A short
.195001						get_dev
.195001		e2 20		sep #$20	                SEP #$20        ; set A short
.195003		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.195006		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195008		85 01		sta $0321	                STA BIOS_DEV
.19500a		22 fe 3f 19	jsl $193ffe	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.19500e		c2 20		rep #$20	                REP #$20        ; set A long
.195010		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.195013		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195015		85 10		sta $0330	                STA DOS_CLUS_ID
.195017		c8		iny		                INY
.195018		c8		iny		                INY
.195019		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19501b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19501d		22 aa 46 19	jsl $1946aa	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.195021		90 13		bcc $195036	                BCC pass_failure                ; If not OK: pass the failure up the chain
.195023		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.195026		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195028		85 1c		sta $033c	                STA DOS_BUFF_PTR
.19502a		c8		iny		                INY
.19502b		c8		iny		                INY
.19502c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19502e		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.195030		22 96 42 19	jsl $194296	                JSL DOS_GETCLUSTER              ; Get the cluster
.195034		b0 03		bcs $195039	                BCS ret_success                 ; If ok: return success
.195036						pass_failure
.195036		82 5e 05	brl $195597	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.195039		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.19503c		a5 10		lda $0330	                LDA DOS_CLUS_ID
.19503e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195040		c8		iny		                INY
.195041		c8		iny		                INY
.195042		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.195044		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195046		82 55 05	brl $19559e	                BRL IF_SUCCESS
.195049						IF_WRITE
.195049		da		phx		                PHX
.19504a		5a		phy		                PHY
.19504b		0b		phd		                PHD
.19504c		8b		phb		                PHB
.19504d		08		php		                PHP
.19504e		48		pha		                PHA             ; begin setdbr macro
.19504f		08		php		                PHP
.195050		e2 20		sep #$20	                SEP #$20        ; set A short
.195052		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195054		48		pha		                PHA
.195055		ab		plb		                PLB
.195056		28		plp		                PLP
.195057		68		pla		                PLA             ; end setdbr macro
.195058		48		pha		                PHA             ; begin setdp macro
.195059		08		php		                PHP
.19505a		c2 20		rep #$20	                REP #$20        ; set A long
.19505c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19505f		5b		tcd		                TCD
.195060		28		plp		                PLP
.195061		68		pla		                PLA             ; end setdp macro
.195062		c2 10		rep #$10	                REP #$10        ; set X long
.195064		e2 20		sep #$20	                SEP #$20        ; set A short
.195066		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.195069		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19506b		85 01		sta $0321	                STA BIOS_DEV
.19506d		22 fe 3f 19	jsl $193ffe	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.195071		c2 20		rep #$20	                REP #$20        ; set A long
.195073		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.195076		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195078		85 1c		sta $033c	                STA DOS_BUFF_PTR
.19507a		c8		iny		                INY
.19507b		c8		iny		                INY
.19507c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19507e		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.195080		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.195083		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195085		85 10		sta $0330	                STA DOS_CLUS_ID
.195087		c8		iny		                INY
.195088		c8		iny		                INY
.195089		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19508b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19508d		d0 1a		bne $1950a9	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.19508f		a5 10		lda $0330	                LDA DOS_CLUS_ID
.195091		d0 16		bne $1950a9	                BNE rewrite_cluster
.195093		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.195096		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195098		85 10		sta $0330	                STA DOS_CLUS_ID
.19509a		c8		iny		                INY
.19509b		c8		iny		                INY
.19509c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19509e		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1950a0		22 cb 4a 19	jsl $194acb	                JSL DOS_APPENDCLUS              ; Append the cluster
.1950a4		b0 0c		bcs $1950b2	                BCS ret_success                 ; If OK: return success
.1950a6		82 ee 04	brl $195597	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.1950a9		22 d3 42 19	jsl $1942d3	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.1950ad		b0 03		bcs $1950b2	                BCS ret_success                 ; If ok: return success
.1950af		82 e5 04	brl $195597	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.1950b2		82 e9 04	brl $19559e	ret_success     BRL IF_SUCCESS
.1950b5						IF_DIROPEN
.1950b5		da		phx		                PHX
.1950b6		5a		phy		                PHY
.1950b7		0b		phd		                PHD
.1950b8		8b		phb		                PHB
.1950b9		08		php		                PHP
.1950ba		48		pha		                PHA             ; begin setdbr macro
.1950bb		08		php		                PHP
.1950bc		e2 20		sep #$20	                SEP #$20        ; set A short
.1950be		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1950c0		48		pha		                PHA
.1950c1		ab		plb		                PLB
.1950c2		28		plp		                PLP
.1950c3		68		pla		                PLA             ; end setdbr macro
.1950c4		48		pha		                PHA             ; begin setdp macro
.1950c5		08		php		                PHP
.1950c6		c2 20		rep #$20	                REP #$20        ; set A long
.1950c8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1950cb		5b		tcd		                TCD
.1950cc		28		plp		                PLP
.1950cd		68		pla		                PLA             ; end setdp macro
.1950ce		c2 30		rep #$30	                REP #$30        ; set A&X long
.1950d0		22 2a 4e 19	jsl $194e2a	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.1950d4		22 e4 43 19	jsl $1943e4	                JSL DOS_PARSE_PATH          ; Parse the path
.1950d8		22 fe 3f 19	jsl $193ffe	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.1950dc		b0 03		bcs $1950e1	                BCS get_root_dir            ; If successful: get the root directory
.1950de		82 b6 04	brl $195597	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.1950e1						get_root_dir
.1950e1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1950e3		22 b3 3c 19	jsl $193cb3	                JSL DOS_DIROPEN
.1950e7		b0 03		bcs $1950ec	                BCS success
.1950e9		82 ab 04	brl $195597	                BRL IF_PASSFAILURE
.1950ec		82 af 04	brl $19559e	success         BRL IF_SUCCESS
.1950ef						IF_DIRNEXT
.1950ef		5c 4d 3d 19	jmp $193d4d	                JML DOS_DIRNEXT
.1950f3						IF_DELETE
.1950f3		da		phx		                PHX
.1950f4		5a		phy		                PHY
.1950f5		0b		phd		                PHD
.1950f6		8b		phb		                PHB
.1950f7		08		php		                PHP
.1950f8		48		pha		                PHA             ; begin setdbr macro
.1950f9		08		php		                PHP
.1950fa		e2 20		sep #$20	                SEP #$20        ; set A short
.1950fc		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1950fe		48		pha		                PHA
.1950ff		ab		plb		                PLB
.195100		28		plp		                PLP
.195101		68		pla		                PLA             ; end setdbr macro
.195102		48		pha		                PHA             ; begin setdp macro
.195103		08		php		                PHP
.195104		c2 20		rep #$20	                REP #$20        ; set A long
.195106		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195109		5b		tcd		                TCD
.19510a		28		plp		                PLP
.19510b		68		pla		                PLA             ; end setdp macro
.19510c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19510e		22 7c 44 19	jsl $19447c	                JSL DOS_FINDFILE
.195112		b0 03		bcs $195117	                BCS get_first_clus
.195114		82 80 04	brl $195597	                BRL IF_PASSFAILURE
.195117						get_first_clus
.195117		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.19511a		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.19511c		85 10		sta $0330	                STA DOS_CLUS_ID
.19511e		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.195121		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.195123		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195125		a5 10		lda $0330	                LDA DOS_CLUS_ID
.195127		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.19512a		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.19512c		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.19512f		22 aa 46 19	jsl $1946aa	del_loop        JSL NEXTCLUSTER
.195133		90 2f		bcc $195164	                BCC del_one
.195135		a5 10		lda $0330	                LDA DOS_CLUS_ID
.195137		8d 2e a0	sta $18a02e	                STA DOS_NEXT_CLUS
.19513a		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.19513c		8d 30 a0	sta $18a030	                STA DOS_NEXT_CLUS+2
.19513f		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.195142		85 10		sta $0330	                STA DOS_CLUS_ID
.195144		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.195147		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195149		22 8b 4a 19	jsl $194a8b	                JSL DELCLUSTER32
.19514d		b0 03		bcs $195152	                BCS go_next
.19514f		82 45 04	brl $195597	                BRL IF_PASSFAILURE
.195152						go_next
.195152		ad 2e a0	lda $18a02e	                LDA DOS_NEXT_CLUS
.195155		85 10		sta $0330	                STA DOS_CLUS_ID
.195157		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.19515a		ad 30 a0	lda $18a030	                LDA DOS_NEXT_CLUS+2
.19515d		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19515f		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.195162		80 cb		bra $19512f	                BRA del_loop
.195164						del_one
.195164		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.195167		85 10		sta $0330	                STA DOS_CLUS_ID
.195169		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.19516c		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19516e		22 e5 49 19	jsl $1949e5	                JSL DELCLUSTER
.195172		b0 03		bcs $195177	                BCS free_dir_entry
.195174		82 20 04	brl $195597	                BRL IF_PASSFAILURE
.195177						free_dir_entry
.195177		e2 20		sep #$20	                SEP #$20        ; set A short
.195179		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.19517c		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.19517e		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.195180		22 cc 3e 19	jsl $193ecc	                JSL DOS_DIRWRITE                ; Write the directory entry back
.195184		b0 03		bcs $195189	                BCS ret_success
.195186		82 0e 04	brl $195597	                BRL IF_PASSFAILURE
.195189		82 12 04	brl $19559e	ret_success     BRL IF_SUCCESS
.19518c						IF_DIRREAD
.19518c		da		phx		                PHX
.19518d		5a		phy		                PHY
.19518e		0b		phd		                PHD
.19518f		8b		phb		                PHB
.195190		08		php		                PHP
.195191		48		pha		                PHA             ; begin setdbr macro
.195192		08		php		                PHP
.195193		e2 20		sep #$20	                SEP #$20        ; set A short
.195195		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195197		48		pha		                PHA
.195198		ab		plb		                PLB
.195199		28		plp		                PLP
.19519a		68		pla		                PLA             ; end setdbr macro
.19519b		48		pha		                PHA             ; begin setdp macro
.19519c		08		php		                PHP
.19519d		c2 20		rep #$20	                REP #$20        ; set A long
.19519f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1951a2		5b		tcd		                TCD
.1951a3		28		plp		                PLP
.1951a4		68		pla		                PLA             ; end setdp macro
.1951a5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1951a7		22 7c 44 19	jsl $19447c	                JSL DOS_FINDFILE
.1951ab		b0 03		bcs $1951b0	                BCS success
.1951ad		82 e3 03	brl $195593	                BRL IF_FAILURE
.1951b0		82 eb 03	brl $19559e	success         BRL IF_SUCCESS
.1951b3						IF_DIRWRITE
.1951b3		5c cc 3e 19	jmp $193ecc	                JML DOS_DIRWRITE
.1951b7						IF_LOAD
.1951b7		da		phx		                PHX
.1951b8		5a		phy		                PHY
.1951b9		0b		phd		                PHD
.1951ba		8b		phb		                PHB
.1951bb		08		php		                PHP
.1951bc		48		pha		                PHA             ; begin setdbr macro
.1951bd		08		php		                PHP
.1951be		e2 20		sep #$20	                SEP #$20        ; set A short
.1951c0		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1951c2		48		pha		                PHA
.1951c3		ab		plb		                PLB
.1951c4		28		plp		                PLP
.1951c5		68		pla		                PLA             ; end setdbr macro
.1951c6		48		pha		                PHA             ; begin setdp macro
.1951c7		08		php		                PHP
.1951c8		c2 20		rep #$20	                REP #$20        ; set A long
.1951ca		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1951cd		5b		tcd		                TCD
.1951ce		28		plp		                PLP
.1951cf		68		pla		                PLA             ; end setdp macro
.1951d0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1951d2		22 e3 4e 19	jsl $194ee3	                JSL IF_OPEN
.1951d6		b0 03		bcs $1951db	                BCS setup                   ; If success: start setting things up
.1951d8		82 bc 03	brl $195597	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.1951db						setup
.1951db		c2 20		rep #$20	                REP #$20        ; set A long
.1951dd		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.1951e0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1951e2		85 2c		sta $034c	                STA DOS_FILE_SIZE
.1951e4		c8		iny		                INY
.1951e5		c8		iny		                INY
.1951e6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1951e8		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.1951ea		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.1951ed		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1951ef		85 30		sta $0350	                STA DOS_SRC_PTR
.1951f1		c8		iny		                INY
.1951f2		c8		iny		                INY
.1951f3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1951f5		85 32		sta $0352	                STA DOS_SRC_PTR+2
.1951f7		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.1951f9		c9 40 00	cmp #$0040	                CMP #$0040
.1951fc		b0 04		bcs $195202	                BGE load_by_type            ; No: try to load it by type
.1951fe		5c 48 54 19	jmp $195448	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.195202		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.195205		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.195208						type_loop
.195208		e2 20		sep #$20	                SEP #$20        ; set A short
.19520a		bf 4e 52 19	lda $19524e,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.19520e		f0 37		beq $195247	                BEQ no_match                ; If NULL... we didn't get a match
.195210		d9 3a a0	cmp $18a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.195213		d0 28		bne $19523d	                BNE next_entry              ; If they don't match, try the next entry
.195215		bf 4f 52 19	lda $19524f,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.195219		d9 3b a0	cmp $18a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.19521c		d0 1f		bne $19523d	                BNE next_entry              ; If they don't match, try the next entry
.19521e		bf 50 52 19	lda $195250,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.195222		d9 3c a0	cmp $18a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.195225		d0 16		bne $19523d	                BNE next_entry              ; If they don't match, try the next entry
.195227		c2 20		rep #$20	                REP #$20        ; set A long
.195229		bf 51 52 19	lda $195251,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.19522d		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.19522f		e2 20		sep #$20	                SEP #$20        ; set A short
.195231		bf 53 52 19	lda $195253,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.195235		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.195237		a2 00 00	ldx #$0000	                LDX #0
.19523a		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.19523d						next_entry
.19523d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19523f		8a		txa		                TXA
.195240		18		clc		                CLC
.195241		69 06 00	adc #$0006	                ADC #6
.195244		aa		tax		                TAX
.195245		80 c1		bra $195208	                BRA type_loop               ; And check it against the file
.195247						no_match
.195247		e2 20		sep #$20	                SEP #$20        ; set A short
.195249		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.19524b		82 45 03	brl $195593	                BRL IF_FAILURE
>19524e		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>195251		5b 52				                .word <>IF_LOADPGX
>195253		19				                .byte `IF_LOADPGX
>195254		50 47 5a			                .text "PGZ"                 ; "PGZ" --> IF_LOADPGZ
>195257		e3 52				                .word <>IF_LOADPGZ
>195259		19				                .byte `IF_LOADPGZ
>19525a		00				                .byte 0
.19525b						IF_LOADPGX
.19525b		c2 10		rep #$10	                REP #$10        ; set X long
.19525d		e2 20		sep #$20	                SEP #$20        ; set A short
.19525f		a0 00 00	ldy #$0000	                LDY #0
.195262		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.195264		c9 50		cmp #$50	                CMP #'P'
.195266		d0 15		bne $19527d	                BNE fail_sig                        ; If not found, fail
.195268		c8		iny		                INY
.195269		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.19526b		c9 47		cmp #$47	                CMP #'G'
.19526d		d0 0e		bne $19527d	                BNE fail_sig
.19526f		c8		iny		                INY
.195270		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195272		c9 58		cmp #$58	                CMP #'X'
.195274		d0 07		bne $19527d	                BNE fail_sig
.195276		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.195277		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195279		c9 01		cmp #$01	                CMP #$01
.19527b		f0 17		beq $195294	                BEQ get_dest                        ; All passes: go to get the destination address
.19527d		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.19527f		22 93 55 19	jsl $195593	                JSL IF_FAILURE
.195283						adjust_size
.195283		c2 20		rep #$20	                REP #$20        ; set A long
.195285		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.195286		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.195288		e9 08 00	sbc #$0008	                SBC #8
.19528b		85 2c		sta $034c	                STA DOS_FILE_SIZE
.19528d		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.19528f		e9 00 00	sbc #$0000	                SBC #0
.195292		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.195294						get_dest
.195294		c2 20		rep #$20	                REP #$20        ; set A long
.195296		c8		iny		                INY
.195297		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.195299		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.19529b		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.19529d		c8		iny		                INY
.19529e		c8		iny		                INY
.19529f		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.1952a1		85 36		sta $0356	                STA DOS_DST_PTR+2
.1952a3		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.1952a5		c8		iny		                INY                                 ; Point to the first data byte
.1952a6		c8		iny		                INY
.1952a7						copy_loop
.1952a7		e2 20		sep #$20	                SEP #$20        ; set A short
.1952a9		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.1952ab		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.1952ad		c2 20		rep #$20	                REP #$20        ; set A long
.1952af		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.1952b1		d0 02		bne $1952b5	                BNE dec_file_size
.1952b3		e6 36		inc $0356	                INC DOS_DST_PTR+2
.1952b5		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.1952b6		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.1952b8		e9 01 00	sbc #$0001	                SBC #1
.1952bb		85 2c		sta $034c	                STA DOS_FILE_SIZE
.1952bd		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1952bf		e9 00 00	sbc #$0000	                SBC #0
.1952c2		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.1952c4		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.1952c6		d0 04		bne $1952cc	                BNE next_byte
.1952c8		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1952ca		f0 14		beq $1952e0	                BEQ done                            ; Yes: we're done
.1952cc		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.1952cd		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.1952d0		d0 d5		bne $1952a7	                BNE copy_loop                       ; No: keep copying
.1952d2		22 ae 47 19	jsl $1947ae	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.1952d6		b0 03		bcs $1952db	                BCS next_cluster
.1952d8		82 bc 02	brl $195597	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.1952db		a0 00 00	ldy #$0000	next_cluster    LDY #0
.1952de		80 c7		bra $1952a7	                BRA copy_loop                       ; Go back to copying
.1952e0		82 bb 02	brl $19559e	done            BRL IF_SUCCESS
.1952e3						IF_LOADPGZ
.1952e3		48		pha		                PHA             ; begin setdbr macro
.1952e4		08		php		                PHP
.1952e5		e2 20		sep #$20	                SEP #$20        ; set A short
.1952e7		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1952e9		48		pha		                PHA
.1952ea		ab		plb		                PLB
.1952eb		28		plp		                PLP
.1952ec		68		pla		                PLA             ; end setdbr macro
.1952ed		48		pha		                PHA             ; begin setdp macro
.1952ee		08		php		                PHP
.1952ef		c2 20		rep #$20	                REP #$20        ; set A long
.1952f1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1952f4		5b		tcd		                TCD
.1952f5		28		plp		                PLP
.1952f6		68		pla		                PLA             ; end setdp macro
.1952f7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1952f9		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE                  ; Get the file size
.1952fc		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1952fe		85 2c		sta $034c	                STA DOS_FILE_SIZE                   ; And save it to DOS_FILE_SIZE
.195300		c8		iny		                INY
.195301		c8		iny		                INY
.195302		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195304		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.195306		e2 20		sep #$20	                SEP #$20        ; set A short
.195308		a0 00 00	ldy #$0000	                LDY #0                              ; Starting at the beginning of the file
.19530b		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "Z" signature
.19530d		c9 5a		cmp #$5a	                CMP #'Z'
.19530f		f0 06		beq $195317	                BEQ start_block                     ; If found, get the starting address
.195311		a9 19		lda #$19	fail_sig        LDA #DOS_ERR_PGZSIG                 ; Fail with a PGZSIG error code
.195313		22 93 55 19	jsl $195593	                JSL IF_FAILURE
.195317		c8		iny		start_block     INY
.195318						get_addr
.195318		e2 20		sep #$20	                SEP #$20        ; set A short
.19531a		22 9d 53 19	jsl $19539d	                JSL IF_FILE_EOF                     ; Check if EOF
.19531e		90 03		bcc $195323	                BCC get_addr_lo
.195320		82 7b 02	brl $19559e	done            BRL IF_SUCCESS                      ; If so: we're done
.195323		22 db 53 19	jsl $1953db	get_addr_lo     JSL IF_READ_NEXT                    ; Get the next byte
.195327		90 47		bcc $195370	                BCC ret_failure                     ; Got an error: pass it on
.195329		85 34		sta $0354	                STA DOS_DST_PTR                     ; Save it as the low byte of the destination address
.19532b		22 db 53 19	jsl $1953db	                JSL IF_READ_NEXT                    ; Get the next byte
.19532f		90 3f		bcc $195370	                BCC ret_failure                     ; Got an error: pass it on
.195331		85 35		sta $0355	                STA DOS_DST_PTR+1                   ; Save it as the middle byte of the destination address
.195333		22 db 53 19	jsl $1953db	                JSL IF_READ_NEXT                    ; Get the next byte
.195337		90 37		bcc $195370	                BCC ret_failure                     ; Got an error: pass it on
.195339		85 36		sta $0356	                STA DOS_DST_PTR+2                   ; Save it as the high byte of the destination address
.19533b		22 db 53 19	jsl $1953db	                JSL IF_READ_NEXT                    ; Get the next byte
.19533f		90 2f		bcc $195370	                BCC ret_failure                     ; Got an error: pass it on
.195341		85 50		sta $0370	                STA DOS_BLOCK_SIZE                  ; Save it as the low byte of the block size
.195343		22 db 53 19	jsl $1953db	                JSL IF_READ_NEXT                    ; Get the next byte
.195347		90 27		bcc $195370	                BCC ret_failure                     ; Got an error: pass it on
.195349		85 51		sta $0371	                STA DOS_BLOCK_SIZE+1                ; Save it as the middle byte of the block size
.19534b		22 db 53 19	jsl $1953db	                JSL IF_READ_NEXT                    ; Get the next byte
.19534f		90 1f		bcc $195370	                BCC ret_failure                     ; Got an error: pass it on
.195351		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2                ; Save it as the high byte of the block size
.195353		64 53		stz $0373	                STZ DOS_BLOCK_SIZE+3                ; And MSB is 0
.195355		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; If DOS_BLOCK_SIZE <> 0, we have data to load
.195357		d0 1a		bne $195373	                BNE read_data
.195359		a5 51		lda $0371	                LDA DOS_BLOCK_SIZE+1
.19535b		d0 16		bne $195373	                BNE read_data
.19535d		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.19535f		d0 12		bne $195373	                BNE read_data
.195361		a5 34		lda $0354	                LDA DOS_DST_PTR                     ; If DOS_BLOCK_SIZE = 0, we have the run address
.195363		85 3c		sta $035c	                STA DOS_RUN_PTR
.195365		a5 35		lda $0355	                LDA DOS_DST_PTR+1
.195367		85 3d		sta $035d	                STA DOS_RUN_PTR+1
.195369		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.19536b		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.19536d		82 2e 02	brl $19559e	                BRL IF_SUCCESS                      ; And finish
.195370		82 20 02	brl $195593	ret_failure     BRL IF_FAILURE                      ; If there was an error, pass it up to the caller
.195373						read_data
.195373		e2 20		sep #$20	                SEP #$20        ; set A short
.195375		22 db 53 19	jsl $1953db	                JSL IF_READ_NEXT                    ; Get the next byte
.195379		90 f5		bcc $195370	                BCC ret_failure
.19537b		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Save it to the destination address
.19537d		c2 20		rep #$20	                REP #$20        ; set A long
.19537f		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Increment the destination pointer
.195381		d0 02		bne $195385	                BNE dec_block_size
.195383		e6 36		inc $0356	                INC DOS_DST_PTR+2
.195385		38		sec		dec_block_size  SEC
.195386		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE
.195388		e9 01 00	sbc #$0001	                SBC #1
.19538b		85 50		sta $0370	                STA DOS_BLOCK_SIZE
.19538d		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.19538f		e9 00 00	sbc #$0000	                SBC #0
.195392		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2
.195394		d0 dd		bne $195373	                BNE read_data
.195396		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; Is block size = 0?
.195398		d0 d9		bne $195373	                BNE read_data                       ; No: keep reading data
.19539a		82 7b ff	brl $195318	                BRL get_addr                        ; Yes: check for another block
.19539d						IF_FILE_EOF
.19539d		48		pha		                PHA
.19539e		5a		phy		                PHY
.19539f		8b		phb		                PHB
.1953a0		0b		phd		                PHD
.1953a1		08		php		                PHP
.1953a2		48		pha		                PHA             ; begin setdbr macro
.1953a3		08		php		                PHP
.1953a4		e2 20		sep #$20	                SEP #$20        ; set A short
.1953a6		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1953a8		48		pha		                PHA
.1953a9		ab		plb		                PLB
.1953aa		28		plp		                PLP
.1953ab		68		pla		                PLA             ; end setdbr macro
.1953ac		48		pha		                PHA             ; begin setdp macro
.1953ad		08		php		                PHP
.1953ae		c2 20		rep #$20	                REP #$20        ; set A long
.1953b0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1953b3		5b		tcd		                TCD
.1953b4		28		plp		                PLP
.1953b5		68		pla		                PLA             ; end setdp macro
.1953b6		e2 20		sep #$20	                SEP #$20        ; set A short
.1953b8		c2 10		rep #$10	                REP #$10        ; set X long
.1953ba		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.1953bd		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y                  ; Restore the index
.1953bf		89 80		bit #$80	                BIT #FD_STAT_EOF                    ; Check if the file is EOF
.1953c1		f0 07		beq $1953ca	                BEQ chk_file_size                   ; If not: check the file size
.1953c3		28		plp		ret_true        PLP                                 ; Return true
.1953c4		2b		pld		                PLD
.1953c5		ab		plb		                PLB
.1953c6		7a		ply		                PLY
.1953c7		68		pla		                PLA
.1953c8		38		sec		                SEC
.1953c9		6b		rtl		                RTL
.1953ca						chk_file_size
.1953ca		c2 20		rep #$20	                REP #$20        ; set A long
.1953cc		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; if DOS_FILE_SIZE = 0
.1953ce		d0 04		bne $1953d4	                BNE ret_false
.1953d0		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1953d2		f0 ef		beq $1953c3	                BEQ ret_true
.1953d4		28		plp		ret_false       PLP                                 ; Return false
.1953d5		2b		pld		                PLD
.1953d6		ab		plb		                PLB
.1953d7		7a		ply		                PLY
.1953d8		68		pla		                PLA
.1953d9		18		clc		                CLC
.1953da		6b		rtl		                RTL
.1953db						IF_READ_NEXT
.1953db		8b		phb		                PHB
.1953dc		0b		phd		                PHD
.1953dd		08		php		                PHP
.1953de		48		pha		                PHA             ; begin setdbr macro
.1953df		08		php		                PHP
.1953e0		e2 20		sep #$20	                SEP #$20        ; set A short
.1953e2		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1953e4		48		pha		                PHA
.1953e5		ab		plb		                PLB
.1953e6		28		plp		                PLP
.1953e7		68		pla		                PLA             ; end setdbr macro
.1953e8		48		pha		                PHA             ; begin setdp macro
.1953e9		08		php		                PHP
.1953ea		c2 20		rep #$20	                REP #$20        ; set A long
.1953ec		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1953ef		5b		tcd		                TCD
.1953f0		28		plp		                PLP
.1953f1		68		pla		                PLA             ; end setdp macro
.1953f2		e2 20		sep #$20	                SEP #$20        ; set A short
.1953f4		c2 10		rep #$10	                REP #$10        ; set X long
.1953f6		22 9d 53 19	jsl $19539d	                JSL IF_FILE_EOF                     ; Check if the file is EOF
.1953fa		90 06		bcc $195402	                BCC get_byte                        ; If not: get the next byte
.1953fc		a9 18		lda #$18	                LDA #DOS_ERR_EOF                    ; If so: return an EOF error
.1953fe		85 0e		sta $032e	                STA DOS_STATUS
.195400		80 3f		bra $195441	                BRA ret_failure
.195402		b7 30		lda [$0350],y	get_byte        LDA [DOS_SRC_PTR],Y                 ; Read the byte...
.195404		48		pha		                PHA                                 ; And save it for the moment
.195405		c2 20		rep #$20	                REP #$20        ; set A long
.195407		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Decrement the file size...
.195409		d0 02		bne $19540d	                BNE dec_low
.19540b		c6 2e		dec $034e	                DEC DOS_FILE_SIZE+2
.19540d		c6 2c		dec $034c	dec_low         DEC DOS_FILE_SIZE
.19540f		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.195411		d0 04		bne $195417	                BNE next_byte
.195413		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.195415		f0 1b		beq $195432	                BEQ ret_eof                         ; Yes: mark the file as EOF
.195417						next_byte
.195417		e2 20		sep #$20	                SEP #$20        ; set A short
.195419		c8		iny		                INY                                 ; Move to the next byte
.19541a		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE                ; Have we reached the end of the sector?
.19541d		90 0b		bcc $19542a	                BLT ret_success                     ; No: just return the byte
.19541f		22 ae 47 19	jsl $1947ae	                JSL DOS_READNEXT                    ; Yes: read the next sector
.195423		b0 02		bcs $195427	                BCS reset_index
.195425		80 1a		bra $195441	                BRA ret_failure                     ; If failure: pass the error up the chain
.195427		a0 00 00	ldy #$0000	reset_index     LDY #0                              ; Reset the index
.19542a						ret_success
.19542a		e2 20		sep #$20	                SEP #$20        ; set A short
.19542c		68		pla		                PLA                                 ; Return the byte retrieved
.19542d		28		plp		                PLP
.19542e		2b		pld		                PLD
.19542f		ab		plb		                PLB
.195430		38		sec		                SEC
.195431		6b		rtl		                RTL
.195432						ret_eof
.195432		e2 20		sep #$20	                SEP #$20        ; set A short
.195434		5a		phy		                PHY                                 ; Save the index
.195435		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.195438		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19543a		09 80		ora #$80	                ORA #FD_STAT_EOF                    ; Mark it EOF
.19543c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y                  ; And update the status
.19543e		7a		ply		                PLY                                 ; Restore the index
.19543f		80 e9		bra $19542a	                BRA ret_success
.195441						ret_failure
.195441		e2 20		sep #$20	                SEP #$20        ; set A short
.195443		28		plp		                PLP
.195444		2b		pld		                PLD
.195445		ab		plb		                PLB
.195446		18		clc		                CLC
.195447		6b		rtl		                RTL
.195448						IF_LOADRAW
.195448		c2 30		rep #$30	                REP #$30        ; set A&X long
.19544a		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.19544d						copy_loop
.19544d		e2 20		sep #$20	                SEP #$20        ; set A short
.19544f		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.195451		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195453		c2 20		rep #$20	                REP #$20        ; set A long
.195455		38		sec		                SEC                         ; Count down the number of bytes left
.195456		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.195458		e9 01 00	sbc #$0001	                SBC #1
.19545b		85 2c		sta $034c	                STA DOS_FILE_SIZE
.19545d		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.19545f		e9 00 00	sbc #$0000	                SBC #0
.195462		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.195464		d0 04		bne $19546a	                BNE continue
.195466		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.195468		f0 1b		beq $195485	                BEQ close_file              ; If not: we're done
.19546a		c8		iny		continue        INY
.19546b		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.19546e		d0 dd		bne $19544d	                BNE copy_loop               ; No: keep processing the bytes
.195470		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.195471		a5 34		lda $0354	                LDA DOS_DST_PTR
.195473		6d 0e a0	adc $18a00e	                ADC CLUSTER_SIZE
.195476		85 34		sta $0354	                STA DOS_DST_PTR
.195478		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.19547a		69 00 00	adc #$0000	                ADC #0
.19547d		85 36		sta $0356	                STA DOS_DST_PTR+2
.19547f		22 e4 4f 19	jsl $194fe4	                JSL IF_READ                 ; Yes: load the next cluster
.195483		b0 c5		bcs $19544a	                BCS copy_cluster            ; And start copying it
.195485						close_file
.195485		82 16 01	brl $19559e	ret_success     BRL IF_SUCCESS
.195488						IF_NULLBUFFER
.195488		5a		phy		                PHY
.195489		8b		phb		                PHB
.19548a		0b		phd		                PHD
.19548b		08		php		                PHP
.19548c		48		pha		                PHA             ; begin setdbr macro
.19548d		08		php		                PHP
.19548e		e2 20		sep #$20	                SEP #$20        ; set A short
.195490		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195492		48		pha		                PHA
.195493		ab		plb		                PLB
.195494		28		plp		                PLP
.195495		68		pla		                PLA             ; end setdbr macro
.195496		48		pha		                PHA             ; begin setdp macro
.195497		08		php		                PHP
.195498		c2 20		rep #$20	                REP #$20        ; set A long
.19549a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19549d		5b		tcd		                TCD
.19549e		28		plp		                PLP
.19549f		68		pla		                PLA             ; end setdp macro
.1954a0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1954a2		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1954a5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1954a7		85 28		sta $0348	                STA DOS_TEMP
.1954a9		c8		iny		                INY
.1954aa		c8		iny		                INY
.1954ab		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1954ad		85 2a		sta $034a	                STA DOS_TEMP+2
.1954af		a0 00 00	ldy #$0000	                LDY #0
.1954b2		a9 00 00	lda #$0000	                LDA #0
.1954b5		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.1954b7		c8		iny		                INY
.1954b8		c8		iny		                INY
.1954b9		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.1954bc		d0 f7		bne $1954b5	                BNE loop
.1954be		28		plp		                PLP
.1954bf		2b		pld		                PLD
.1954c0		ab		plb		                PLB
.1954c1		7a		ply		                PLY
.1954c2		6b		rtl		                RTL
.1954c3						IF_COPY2BUFF
.1954c3		5a		phy		                PHY
.1954c4		8b		phb		                PHB
.1954c5		0b		phd		                PHD
.1954c6		08		php		                PHP
.1954c7		48		pha		                PHA             ; begin setdbr macro
.1954c8		08		php		                PHP
.1954c9		e2 20		sep #$20	                SEP #$20        ; set A short
.1954cb		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1954cd		48		pha		                PHA
.1954ce		ab		plb		                PLB
.1954cf		28		plp		                PLP
.1954d0		68		pla		                PLA             ; end setdbr macro
.1954d1		48		pha		                PHA             ; begin setdp macro
.1954d2		08		php		                PHP
.1954d3		c2 20		rep #$20	                REP #$20        ; set A long
.1954d5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1954d8		5b		tcd		                TCD
.1954d9		28		plp		                PLP
.1954da		68		pla		                PLA             ; end setdp macro
.1954db		c2 30		rep #$30	                REP #$30        ; set A&X long
.1954dd		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1954e0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1954e2		85 28		sta $0348	                STA DOS_TEMP
.1954e4		c8		iny		                INY
.1954e5		c8		iny		                INY
.1954e6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1954e8		85 2a		sta $034a	                STA DOS_TEMP+2
.1954ea		a0 00 00	ldy #$0000	                LDY #0
.1954ed						copy_loop
.1954ed		e2 20		sep #$20	                SEP #$20        ; set A short
.1954ef		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.1954f1		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.1954f3		c2 20		rep #$20	                REP #$20        ; set A long
.1954f5		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.1954f7		d0 02		bne $1954fb	                BNE adv_dest
.1954f9		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.1954fb		c8		iny		adv_dest        INY                         ; Count it
.1954fc		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.1954ff		f0 0c		beq $19550d	                BEQ done                    ; Yes: we're done
.195501		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.195503		c5 38		cmp $0358	                CMP DOS_END_PTR
.195505		d0 e6		bne $1954ed	                BNE copy_loop               ; No: keep copying
.195507		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.195509		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.19550b		d0 e0		bne $1954ed	                BNE copy_loop
.19550d		28		plp		done            PLP
.19550e		2b		pld		                PLD
.19550f		ab		plb		                PLB
.195510		7a		ply		                PLY
.195511		6b		rtl		                RTL
.195512						IF_SAVE
.195512		da		phx		                PHX
.195513		5a		phy		                PHY
.195514		0b		phd		                PHD
.195515		8b		phb		                PHB
.195516		08		php		                PHP
.195517		48		pha		                PHA             ; begin setdbr macro
.195518		08		php		                PHP
.195519		e2 20		sep #$20	                SEP #$20        ; set A short
.19551b		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19551d		48		pha		                PHA
.19551e		ab		plb		                PLB
.19551f		28		plp		                PLP
.195520		68		pla		                PLA             ; end setdbr macro
.195521		48		pha		                PHA             ; begin setdp macro
.195522		08		php		                PHP
.195523		c2 20		rep #$20	                REP #$20        ; set A long
.195525		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195528		5b		tcd		                TCD
.195529		28		plp		                PLP
.19552a		68		pla		                PLA             ; end setdp macro
.19552b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19552d		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.195530		38		sec		                SEC
.195531		a5 38		lda $0358	                LDA DOS_END_PTR
.195533		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.195535		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195537		c8		iny		                INY
.195538		c8		iny		                INY
.195539		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.19553b		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.19553d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19553f		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.195542		18		clc		                CLC
.195543		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195545		69 01 00	adc #$0001	                ADC #1
.195548		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19554a		90 09		bcc $195555	                BCC first_block
.19554c		c8		iny		                INY
.19554d		c8		iny		                INY
.19554e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195550		69 00 00	adc #$0000	                ADC #0
.195553		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195555		22 88 54 19	jsl $195488	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.195559		22 c3 54 19	jsl $1954c3	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.19555d		22 76 4f 19	jsl $194f76	                JSL IF_CREATE           ; Create file.
.195561		b0 03		bcs $195566	                BCS check_for_end
.195563		82 31 00	brl $195597	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.195566		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.195568		c5 38		cmp $0358	                CMP DOS_END_PTR
.19556a		d0 06		bne $195572	                BNE next_block
.19556c		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.19556e		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.195570		f0 1d		beq $19558f	                BEQ done                ; Yes: we're done
.195572		22 88 54 19	jsl $195488	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.195576		22 c3 54 19	jsl $1954c3	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.19557a		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.19557d		a9 00 00	lda #$0000	                LDA #0
.195580		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195582		c8		iny		                INY
.195583		c8		iny		                INY
.195584		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195586		22 49 50 19	jsl $195049	                JSL IF_WRITE            ; Append to the file
.19558a		b0 da		bcs $195566	                BCS check_for_end       ; And try again
.19558c		82 08 00	brl $195597	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.19558f		5c 9e 55 19	jmp $19559e	done            JML IF_SUCCESS
.195593						IF_FAILURE
.195593		e2 20		sep #$20	                SEP #$20        ; set A short
.195595		85 0e		sta $032e	                STA DOS_STATUS
.195597		28		plp		IF_PASSFAILURE  PLP
.195598		18		clc		                CLC
.195599		ab		plb		                PLB
.19559a		2b		pld		                PLD
.19559b		7a		ply		                PLY
.19559c		fa		plx		                PLX
.19559d		6b		rtl		                RTL
.19559e						IF_SUCCESS
.19559e		e2 20		sep #$20	                SEP #$20        ; set A short
.1955a0		64 00		stz $0320	                STZ BIOS_STATUS
.1955a2		64 0e		stz $032e	                STZ DOS_STATUS
.1955a4		28		plp		                PLP
.1955a5		38		sec		                SEC
.1955a6		ab		plb		                PLB
.1955a7		2b		pld		                PLD
.1955a8		7a		ply		                PLY
.1955a9		fa		plx		                PLX
.1955aa		6b		rtl		                RTL
.1955ab						IF_RUN
.1955ab		da		phx		                PHX
.1955ac		5a		phy		                PHY
.1955ad		0b		phd		                PHD
.1955ae		8b		phb		                PHB
.1955af		08		php		                PHP
.1955b0		48		pha		                PHA             ; begin setdbr macro
.1955b1		08		php		                PHP
.1955b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1955b4		a9 00		lda #$00	                LDA #0
.1955b6		48		pha		                PHA
.1955b7		ab		plb		                PLB
.1955b8		28		plp		                PLP
.1955b9		68		pla		                PLA             ; end setdbr macro
.1955ba		48		pha		                PHA             ; begin setdp macro
.1955bb		08		php		                PHP
.1955bc		c2 20		rep #$20	                REP #$20        ; set A long
.1955be		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1955c1		5b		tcd		                TCD
.1955c2		28		plp		                PLP
.1955c3		68		pla		                PLA             ; end setdp macro
.1955c4		e2 20		sep #$20	                SEP #$20        ; set A short
.1955c6		c2 10		rep #$10	                REP #$10        ; set X long
.1955c8		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.1955ca		a2 00 00	ldx #$0000	                LDX #0
.1955cd		9f 00 ad 18	sta $18ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.1955d1		e8		inx		                INX
.1955d2		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.1955d5		d0 f6		bne $1955cd	                BNE clr_fd_loop
.1955d7		c2 20		rep #$20	                REP #$20        ; set A long
.1955d9		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.1955dc		8f 0e ad 18	sta $18ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.1955e0		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_SECTOR
.1955e3		8f 10 ad 18	sta $18ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.1955e7		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.1955e9		8f 02 ad 18	sta $18ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.1955ed		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.1955ef		8f 04 ad 18	sta $18ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.1955f3		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.1955f6		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.1955f8		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.1955fa		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.1955fd		85 20		sta $0340	                STA DOS_FD_PTR
.1955ff		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_FD
.195602		85 22		sta $0342	                STA DOS_FD_PTR+2
.195604		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.195607		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.19560b		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.19560f		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.195613		b0 03		bcs $195618	                BCS chk_execute
.195615		82 7f ff	brl $195597	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.195618						chk_execute
.195618		c2 20		rep #$20	                REP #$20        ; set A long
.19561a		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.19561c		d0 0b		bne $195629	                BNE try_execute                         ; If so: call it
.19561e		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.195620		d0 07		bne $195629	                BNE try_execute
.195622		e2 20		sep #$20	                SEP #$20        ; set A short
.195624		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.195626		82 6a ff	brl $195593	                BRL IF_FAILURE
.195629						try_execute
.195629		e2 20		sep #$20	                SEP #$20        ; set A short
.19562b		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.19562d		48		pha		                PHA
.19562e		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.195630		48		pha		                PHA
.195631		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.195633		48		pha		                PHA
.195634		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.195636		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.195638		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.19563c		e2 20		sep #$20	                SEP #$20        ; set A short
.19563e		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.19563f		68		pla		                PLA
.195640		68		pla		                PLA
.195641		82 5a ff	brl $19559e	                BRL IF_SUCCESS                          ; Return success
.195644						IF_ALLOCFD
.195644		da		phx		                PHX
.195645		5a		phy		                PHY
.195646		0b		phd		                PHD
.195647		8b		phb		                PHB
.195648		08		php		                PHP
.195649		48		pha		                PHA             ; begin setdbr macro
.19564a		08		php		                PHP
.19564b		e2 20		sep #$20	                SEP #$20        ; set A short
.19564d		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19564f		48		pha		                PHA
.195650		ab		plb		                PLB
.195651		28		plp		                PLP
.195652		68		pla		                PLA             ; end setdbr macro
.195653		48		pha		                PHA             ; begin setdp macro
.195654		08		php		                PHP
.195655		c2 20		rep #$20	                REP #$20        ; set A long
.195657		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19565a		5b		tcd		                TCD
.19565b		28		plp		                PLP
.19565c		68		pla		                PLA             ; end setdp macro
.19565d		c2 10		rep #$10	                REP #$10        ; set X long
.19565f		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.195662						chk_fd
.195662		e2 20		sep #$20	                SEP #$20        ; set A short
.195664		bd 20 ad	lda $18ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.195667		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.195669		f0 14		beq $19567f	                BEQ found                           ; No: flag and return the found descriptor
.19566b						next_fd
.19566b		c2 20		rep #$20	                REP #$20        ; set A long
.19566d		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.19566e		18		clc		                CLC
.19566f		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.195672		aa		tax		                TAX
.195673		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.195676		90 ea		bcc $195662	                BLT chk_fd                          ; No: check this new file descriptor
.195678		e2 20		sep #$20	                SEP #$20        ; set A short
.19567a		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.19567c		82 14 ff	brl $195593	                BRL IF_FAILURE
.19567f		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.195681		9d 20 ad	sta $18ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.195684		c2 20		rep #$20	                REP #$20        ; set A long
.195686		8a		txa		                TXA
.195687		18		clc		                CLC
.195688		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.19568b		85 20		sta $0340	                STA @b DOS_FD_PTR
.19568d		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.195690		69 00 00	adc #$0000	                ADC #0
.195693		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195695		82 06 ff	brl $19559e	                BRL IF_SUCCESS                      ; Return this file descriptor
.195698						IF_FREEFD
.195698		da		phx		                PHX
.195699		5a		phy		                PHY
.19569a		0b		phd		                PHD
.19569b		8b		phb		                PHB
.19569c		08		php		                PHP
.19569d		48		pha		                PHA             ; begin setdbr macro
.19569e		08		php		                PHP
.19569f		e2 20		sep #$20	                SEP #$20        ; set A short
.1956a1		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1956a3		48		pha		                PHA
.1956a4		ab		plb		                PLB
.1956a5		28		plp		                PLP
.1956a6		68		pla		                PLA             ; end setdbr macro
.1956a7		48		pha		                PHA             ; begin setdp macro
.1956a8		08		php		                PHP
.1956a9		c2 20		rep #$20	                REP #$20        ; set A long
.1956ab		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1956ae		5b		tcd		                TCD
.1956af		28		plp		                PLP
.1956b0		68		pla		                PLA             ; end setdp macro
.1956b1		e2 20		sep #$20	                SEP #$20        ; set A short
.1956b3		c2 10		rep #$10	                REP #$10        ; set X long
.1956b5		a9 00		lda #$00	                LDA #0
.1956b7		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.1956b9		82 e2 fe	brl $19559e	                BRL IF_SUCCESS
.1956bc						DOS_SRC2DST
.1956bc		da		phx		                PHX
.1956bd		5a		phy		                PHY
.1956be		0b		phd		                PHD
.1956bf		8b		phb		                PHB
.1956c0		08		php		                PHP
.1956c1		48		pha		                PHA             ; begin setdp macro
.1956c2		08		php		                PHP
.1956c3		c2 20		rep #$20	                REP #$20        ; set A long
.1956c5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1956c8		5b		tcd		                TCD
.1956c9		28		plp		                PLP
.1956ca		68		pla		                PLA             ; end setdp macro
.1956cb		c2 30		rep #$30	                REP #$30        ; set A&X long
.1956cd		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1956d0		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1956d2		aa		tax		                TAX                                     ; X := source buffer address
.1956d3		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.1956d5		a8		tay		                TAY                                     ; Y := destination buffer address
.1956d6		e2 20		sep #$20	                SEP #$20        ; set A short
.1956d8		a9 18		lda #$18	                LDA #`DOS_FILE_BUFFS
.1956da		48		pha		                PHA
.1956db		ab		plb		                PLB
.1956dc		c2 20		rep #$20	                REP #$20        ; set A long
.1956de		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.1956e1		f0 11		beq $1956f4	loop            BEQ done
.1956e3		48		pha		                PHA
.1956e4		e2 20		sep #$20	                SEP #$20        ; set A short
.1956e6		bd 00 00	lda $180000,x	                LDA #0,B,X
.1956e9		99 00 00	sta $180000,y	                STA #0,B,Y
.1956ec		c2 20		rep #$20	                REP #$20        ; set A long
.1956ee		68		pla		                PLA
.1956ef		3a		dec a		                DEC A
.1956f0		e8		inx		                INX
.1956f1		c8		iny		                INY
.1956f2		80 ed		bra $1956e1	                BRA loop
.1956f4		28		plp		done            PLP
.1956f5		ab		plb		                PLB
.1956f6		2b		pld		                PLD
.1956f7		7a		ply		                PLY
.1956f8		fa		plx		                PLX
.1956f9		6b		rtl		                RTL
.1956fa						IF_COPY
.1956fa		da		phx		                PHX
.1956fb		5a		phy		                PHY
.1956fc		0b		phd		                PHD
.1956fd		8b		phb		                PHB
.1956fe		08		php		                PHP
.1956ff		48		pha		                PHA             ; begin setdbr macro
.195700		08		php		                PHP
.195701		e2 20		sep #$20	                SEP #$20        ; set A short
.195703		a9 00		lda #$00	                LDA #0
.195705		48		pha		                PHA
.195706		ab		plb		                PLB
.195707		28		plp		                PLP
.195708		68		pla		                PLA             ; end setdbr macro
.195709		48		pha		                PHA             ; begin setdp macro
.19570a		08		php		                PHP
.19570b		c2 20		rep #$20	                REP #$20        ; set A long
.19570d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195710		5b		tcd		                TCD
.195711		28		plp		                PLP
.195712		68		pla		                PLA             ; end setdp macro
.195713		22 44 56 19	jsl $195644	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.195717		b0 03		bcs $19571c	                BCS set_src_path
.195719		82 7b fe	brl $195597	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.19571c						set_src_path
.19571c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19571e		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.195721		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.195723		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195725		c8		iny		                INY
.195726		c8		iny		                INY
.195727		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.195729		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19572b						alloc_dest
.19572b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19572d		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.19572f		85 30		sta $0350	                STA @b DOS_SRC_PTR
.195731		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.195733		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.195735		22 44 56 19	jsl $195644	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.195739		b0 0f		bcs $19574a	                BCS set_paths                   ; If everything is ok... start setting the paths
.19573b		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.19573d		85 20		sta $0340	                STA @b DOS_FD_PTR
.19573f		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195741		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195743		22 98 56 19	jsl $195698	                JSL IF_FREEFD                   ; And free it
.195747		82 4d fe	brl $195597	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.19574a						set_paths
.19574a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19574c		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.19574e		85 34		sta $0354	                STA @b DOS_DST_PTR
.195750		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.195752		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.195754		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.195757		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.195759		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.19575b		c8		iny		                INY
.19575c		c8		iny		                INY
.19575d		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.19575f		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195761		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195763		85 20		sta $0340	                STA @b DOS_FD_PTR
.195765		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195767		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195769		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.19576d		b0 10		bcs $19577f	                BCS src_open                    ; If success, work with the openned file
.19576f		00		brk #		                BRK
.195770		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195772		85 20		sta $0340	                STA @b DOS_FD_PTR
.195774		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195776		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195778		22 98 56 19	jsl $195698	                JSL IF_FREEFD                   ; And free it
.19577c		82 bc ff	brl $19573b	                BRL err_free_src_fd             ; Free the source file descriptor
.19577f		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.195782		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195784		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195786		c8		iny		                INY
.195787		c8		iny		                INY
.195788		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.19578a		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.19578c		22 bc 56 19	jsl $1956bc	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.195790		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195792		85 20		sta $0340	                STA @b DOS_FD_PTR
.195794		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195796		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195798		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.19579c		b0 0f		bcs $1957ad	                BCS read_next                   ; If sucessful, try to get the next cluster
.19579e		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.1957a0		85 20		sta $0340	                STA @b DOS_FD_PTR
.1957a2		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.1957a4		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1957a6		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.1957aa		82 c3 ff	brl $195770	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.1957ad						read_next
.1957ad		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.1957af		85 20		sta $0340	                STA @b DOS_FD_PTR
.1957b1		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.1957b3		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1957b5		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.1957b9		b0 19		bcs $1957d4	                BCS copy2dest                   ; If successful, copy the sector
.1957bb		e2 20		sep #$20	                SEP #$20        ; set A short
.1957bd		a5 0e		lda $032e	                LDA @b DOS_STATUS
.1957bf		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.1957c1		f0 32		beq $1957f5	                BEQ file_copied                 ; Yes: we're done copying
.1957c3						err_dest_close
.1957c3		c2 20		rep #$20	                REP #$20        ; set A long
.1957c5		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1957c7		85 20		sta $0340	                STA @b DOS_FD_PTR
.1957c9		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1957cb		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1957cd		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.1957d1		82 ca ff	brl $19579e	                BRL err_src_close               ; Close the source and throw an error
.1957d4						copy2dest
.1957d4		22 bc 56 19	jsl $1956bc	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.1957d8		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.1957db		a9 00 00	lda #$0000	                LDA #0
.1957de		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1957e0		c8		iny		                INY
.1957e1		c8		iny		                INY
.1957e2		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1957e4		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1957e6		85 20		sta $0340	                STA @b DOS_FD_PTR
.1957e8		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1957ea		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1957ec		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.1957f0		90 d1		bcc $1957c3	                BCC err_dest_close              ; If error: close all files and throw the error
.1957f2		82 b8 ff	brl $1957ad	                BRL read_next                   ; Otherwise: repeat the loop
.1957f5						file_copied
.1957f5		c2 20		rep #$20	                REP #$20        ; set A long
.1957f7		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1957f9		85 20		sta $0340	                STA @b DOS_FD_PTR
.1957fb		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1957fd		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1957ff		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.195803		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195805		85 20		sta $0340	                STA @b DOS_FD_PTR
.195807		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195809		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.19580b		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.19580f		82 8c fd	brl $19559e	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af18f8					    UART1_BASE = $AF18F8        ; Base address for UART 1 (COM1) in the C256 Foenix U (only 1 Serial port)
=$af18f8					    UART2_BASE = $AF18F8
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.195812						UART_SELECT
.195812		08		php		            PHP
.195813		c2 20		rep #$20	                REP #$20        ; set A long
.195815		c9 02 00	cmp #$0002	            CMP #2
.195818		f0 07		beq $195821	            BEQ is_COM2
.19581a		c2 20		rep #$20	                REP #$20        ; set A long
.19581c		a9 f8 18	lda #$18f8	            LDA #<>UART1_BASE
.19581f		80 05		bra $195826	            BRA setaddr
.195821						is_COM2
.195821		c2 20		rep #$20	                REP #$20        ; set A long
.195823		a9 f8 18	lda #$18f8	            LDA #<>UART2_BASE
.195826		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.19582a		e2 20		sep #$20	                SEP #$20        ; set A short
.19582c		a9 af		lda #$af	            LDA #`UART1_BASE
.19582e		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.195832		28		plp		            PLP
.195833		6b		rtl		            RTL
.195834						UART_SETBPS
.195834		08		php		            PHP
.195835		0b		phd		            PHD
.195836		48		pha		                PHA             ; begin setdp macro
.195837		08		php		                PHP
.195838		c2 20		rep #$20	                REP #$20        ; set A long
.19583a		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.19583d		5b		tcd		                TCD
.19583e		28		plp		                PLP
.19583f		68		pla		                PLA             ; end setdp macro
.195840		c2 30		rep #$30	                REP #$30        ; set A&X long
.195842		48		pha		            PHA
.195843		e2 20		sep #$20	                SEP #$20        ; set A short
.195845		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.195848		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.19584a		09 80		ora #$80	            ORA #LCR_DLB
.19584c		97 00		sta [$0700],y	            STA [CURRUART],Y
.19584e		c2 20		rep #$20	                REP #$20        ; set A long
.195850		68		pla		            PLA
.195851		a0 00 00	ldy #$0000	            LDY #UART_DLL
.195854		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.195856		e2 20		sep #$20	                SEP #$20        ; set A short
.195858		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.19585b		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.19585d		49 80		eor #$80	            EOR #LCR_DLB
.19585f		97 00		sta [$0700],y	            STA [CURRUART],Y
.195861		2b		pld		            PLD
.195862		28		plp		            PLP
.195863		6b		rtl		            RTL
.195864						UART_SETLCR
.195864		08		php		            PHP
.195865		0b		phd		            PHD
.195866		48		pha		                PHA             ; begin setdp macro
.195867		08		php		                PHP
.195868		c2 20		rep #$20	                REP #$20        ; set A long
.19586a		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.19586d		5b		tcd		                TCD
.19586e		28		plp		                PLP
.19586f		68		pla		                PLA             ; end setdp macro
.195870		e2 20		sep #$20	                SEP #$20        ; set A short
.195872		c2 10		rep #$10	                REP #$10        ; set X long
.195874		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.195876		a0 03 00	ldy #$0003	            LDY #UART_LCR
.195879		97 00		sta [$0700],y	            STA [CURRUART],Y
.19587b		2b		pld		            PLD
.19587c		28		plp		            PLP
.19587d		6b		rtl		            RTL
.19587e						UART_INIT
.19587e		08		php		            PHP
.19587f		0b		phd		            PHD
.195880		c2 30		rep #$30	                REP #$30        ; set A&X long
.195882		48		pha		                PHA             ; begin setdp macro
.195883		08		php		                PHP
.195884		c2 20		rep #$20	                REP #$20        ; set A long
.195886		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195889		5b		tcd		                TCD
.19588a		28		plp		                PLP
.19588b		68		pla		                PLA             ; end setdp macro
.19588c		a9 01 00	lda #$0001	            LDA #UART_115200
.19588f		22 34 58 19	jsl $195834	            JSL UART_SETBPS
.195893		e2 20		sep #$20	                SEP #$20        ; set A short
.195895		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.195897		22 64 58 19	jsl $195864	            JSL UART_SETLCR
.19589b		a9 e1		lda #$e1	            LDA #%11100001
.19589d		a0 02 00	ldy #$0002	            LDY #UART_FCR
.1958a0		97 00		sta [$0700],y	            STA [CURRUART],Y
.1958a2		2b		pld		            PLD
.1958a3		28		plp		            PLP
.1958a4		6b		rtl		            RTL
.1958a5						UART_HASBYT
.1958a5		08		php		            PHP
.1958a6		0b		phd		            PHD
.1958a7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1958a9		48		pha		                PHA             ; begin setdp macro
.1958aa		08		php		                PHP
.1958ab		c2 20		rep #$20	                REP #$20        ; set A long
.1958ad		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1958b0		5b		tcd		                TCD
.1958b1		28		plp		                PLP
.1958b2		68		pla		                PLA             ; end setdp macro
.1958b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1958b5		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.1958b8		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.1958ba		29 01		and #$01	            AND #LSR_DATA_AVAIL
.1958bc		d0 04		bne $1958c2	            BNE ret_true            ; If flag is set, return true
.1958be		2b		pld		ret_false   PLD                     ; Return false
.1958bf		28		plp		            PLP
.1958c0		18		clc		            CLC
.1958c1		6b		rtl		            RTL
.1958c2		2b		pld		ret_true    PLD                     ; Return true
.1958c3		28		plp		            PLP
.1958c4		38		sec		            SEC
.1958c5		6b		rtl		            RTL
.1958c6						UART_GETC
.1958c6		08		php		            PHP
.1958c7		0b		phd		            PHD
.1958c8		c2 30		rep #$30	                REP #$30        ; set A&X long
.1958ca		48		pha		                PHA             ; begin setdp macro
.1958cb		08		php		                PHP
.1958cc		c2 20		rep #$20	                REP #$20        ; set A long
.1958ce		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1958d1		5b		tcd		                TCD
.1958d2		28		plp		                PLP
.1958d3		68		pla		                PLA             ; end setdp macro
.1958d4		e2 20		sep #$20	                SEP #$20        ; set A short
.1958d6		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.1958d9		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.1958db		29 01		and #$01	            AND #LSR_DATA_AVAIL
.1958dd		f0 fa		beq $1958d9	            BEQ wait_getc           ; If the flag is clear, wait
.1958df		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.1958e2		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.1958e4		2b		pld		            PLD
.1958e5		28		plp		            PLP
.1958e6		6b		rtl		            RTL
.1958e7						UART_PUTC
.1958e7		08		php		            PHP
.1958e8		0b		phd		            PHD
.1958e9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1958eb		48		pha		                PHA             ; begin setdp macro
.1958ec		08		php		                PHP
.1958ed		c2 20		rep #$20	                REP #$20        ; set A long
.1958ef		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1958f2		5b		tcd		                TCD
.1958f3		28		plp		                PLP
.1958f4		68		pla		                PLA             ; end setdp macro
.1958f5		e2 20		sep #$20	                SEP #$20        ; set A short
.1958f7		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.1958f8		a0 05 00	ldy #$0005	            LDY #UART_LSR
.1958fb		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.1958fd		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.1958ff		f0 fa		beq $1958fb	            BEQ wait_putc
.195901		68		pla		            PLA
.195902		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.195905		97 00		sta [$0700],y	            STA [CURRUART],Y
.195907		2b		pld		            PLD
.195908		28		plp		            PLP
.195909		6b		rtl		            RTL
.19590a						UART_PUTS
.19590a		08		php		            PHP
.19590b		e2 20		sep #$20	                SEP #$20        ; set A short
.19590d		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.195910		f0 07		beq $195919	            BEQ done
.195912		22 e7 58 19	jsl $1958e7	            JSL UART_PUTC
.195916		e8		inx		            INX
.195917		80 f4		bra $19590d	            BRA put_loop
.195919		28		plp		done        PLP
.19591a		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.19591b						JOYSTICK_SET_NES_MODE
.19591b		e2 20		sep #$20	                SEP #$20        ; set A short
.19591d		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195921		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.195923		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195927		6b		rtl		          RTL
.195928						JOYSTICK_SET_SNES_MODE
.195928		e2 20		sep #$20	                SEP #$20        ; set A short
.19592a		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19592e		29 fb		and #$fb	          AND #~NES_SNES_JOY
.195930		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.195932		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195936		6b		rtl		          RTL
.195937						JOYSTICK_ENABLE_NES_SNES_PORT0
.195937		e2 20		sep #$20	                SEP #$20        ; set A short
.195939		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19593d		29 fe		and #$fe	          AND #~NES_SNES_EN0
.19593f		09 01		ora #$01	          ORA #NES_SNES_EN0
.195941		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195945		6b		rtl		          RTL
.195946						JOYSTICK_ENABLE_NES_SNES_PORT1
.195946		e2 20		sep #$20	                SEP #$20        ; set A short
.195948		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19594c		29 fd		and #$fd	          AND #~NES_SNES_EN1
.19594e		09 02		ora #$02	          ORA #NES_SNES_EN1
.195950		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195954		6b		rtl		          RTL
.195955						JOYSTICK_DISABLE_NES_SNES_PORT0
.195955		e2 20		sep #$20	                SEP #$20        ; set A short
.195957		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19595b		29 fe		and #$fe	          AND #~NES_SNES_EN0
.19595d		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195961		6b		rtl		          RTL
.195962						JOYSTICK_DISABLE_NES_SNES_PORT1
.195962		e2 20		sep #$20	                SEP #$20        ; set A short
.195964		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195968		29 fd		and #$fd	          AND #~NES_SNES_EN1
.19596a		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19596e		6b		rtl		          RTL
.19596f						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.19596f		e2 20		sep #$20	                SEP #$20        ; set A short
.195971		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195975		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.195977		c9 00		cmp #$00	          CMP #$00
.195979		f0 14		beq $19598f	          BEQ END_OF_JOYSTICK_POLL
.19597b		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19597f		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.195981		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195985						JOYSTICK_POLLING_ISNOTOVER
.195985		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.195989		29 40		and #$40	          AND #NES_SNES_DONE
.19598b		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.19598d		d0 f6		bne $195985	          BNE JOYSTICK_POLLING_ISNOTOVER
.19598f						END_OF_JOYSTICK_POLL
.19598f		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/sdc_library.asm

.195990						SDC_TEST
.195990		8b		phb		                PHB
.195991		0b		phd		                PHD
.195992		08		php		                PHP
.195993		48		pha		                PHA             ; begin setdbr macro
.195994		08		php		                PHP
.195995		e2 20		sep #$20	                SEP #$20        ; set A short
.195997		a9 00		lda #$00	                LDA #0
.195999		48		pha		                PHA
.19599a		ab		plb		                PLB
.19599b		28		plp		                PLP
.19599c		68		pla		                PLA             ; end setdbr macro
.19599d		48		pha		                PHA             ; begin setdp macro
.19599e		08		php		                PHP
.19599f		c2 20		rep #$20	                REP #$20        ; set A long
.1959a1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1959a4		5b		tcd		                TCD
.1959a5		28		plp		                PLP
.1959a6		68		pla		                PLA             ; end setdp macro
.1959a7		e2 20		sep #$20	                SEP #$20        ; set A short
.1959a9		a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.1959ab		8d 1e 00	sta $001e	                STA @w CURCOLOR
.1959ae		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.1959b2		22 a0 10 00	jsl $0010a0	                JSL CSRHOME
.1959b6		22 f6 59 19	jsl $1959f6	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.1959ba		b0 03		bcs $1959bf	                BCS init_ok
.1959bc		82 15 00	brl $1959d4	                BRL done
.1959bf		a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.1959c1		85 01		sta $0321	                STA BIOS_DEV
.1959c3		22 fe 3f 19	jsl $193ffe	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.1959c7		b0 03		bcs $1959cc	                BCS mount_ok
.1959c9		82 08 00	brl $1959d4	                BRL done
.1959cc		22 b5 50 19	jsl $1950b5	mount_ok        JSL IF_DIROPEN
.1959d0		b0 02		bcs $1959d4	                BCS all_ok
.1959d2		80 00		bra $1959d4	                BRA done
.1959d4						all_ok
.1959d4		22 6c 10 00	jsl $00106c	done            JSL PRINTCR
.1959d8		28		plp		                PLP
.1959d9		2b		pld		                PLD
.1959da		ab		plb		                PLB
.1959db		6b		rtl		                RTL
.1959dc						SDC_WAITBUSY
.1959dc		08		php		                PHP
.1959dd		e2 20		sep #$20	                SEP #$20        ; set A short
.1959df		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.1959e3		29 01		and #$01	                AND #SDC_TRANS_BUSY
.1959e5		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.1959e7		f0 f6		beq $1959df	                BEQ wait_xact
.1959e9		28		plp		                PLP
.1959ea		6b		rtl		                RTL
.1959eb						SDC_RESET
.1959eb		08		php		                PHP
.1959ec		e2 20		sep #$20	                SEP #$20        ; set A short
.1959ee		a9 01		lda #$01	                LDA #1
.1959f0		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.1959f4		28		plp		                PLP
.1959f5		6b		rtl		                RTL
.1959f6						SDC_INIT
.1959f6		0b		phd		                PHD
.1959f7		8b		phb		                PHB
.1959f8		08		php		                PHP
.1959f9		48		pha		                PHA             ; begin setdbr macro
.1959fa		08		php		                PHP
.1959fb		e2 20		sep #$20	                SEP #$20        ; set A short
.1959fd		a9 00		lda #$00	                LDA #0
.1959ff		48		pha		                PHA
.195a00		ab		plb		                PLB
.195a01		28		plp		                PLP
.195a02		68		pla		                PLA             ; end setdbr macro
.195a03		48		pha		                PHA             ; begin setdp macro
.195a04		08		php		                PHP
.195a05		c2 20		rep #$20	                REP #$20        ; set A long
.195a07		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195a0a		5b		tcd		                TCD
.195a0b		28		plp		                PLP
.195a0c		68		pla		                PLA             ; end setdp macro
.195a0d		e2 20		sep #$20	                SEP #$20        ; set A short
.195a0f		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.195a13		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.195a15		f0 04		beq $195a1b	                BEQ start_trans                     ; Yes: start the transaction
.195a17		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.195a19		80 22		bra $195a3d	                BRA set_error
.195a1b		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.195a1d		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.195a21		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195a23		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195a27		22 dc 59 19	jsl $1959dc	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.195a2b		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195a2f		d0 07		bne $195a38	                BNE ret_error                       ; Is there one? Process the error
.195a31		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.195a33		28		plp		                PLP
.195a34		ab		plb		                PLB
.195a35		2b		pld		                PLD
.195a36		38		sec		                SEC
.195a37		6b		rtl		                RTL
.195a38		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.195a3b		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.195a3d		85 00		sta $0320	set_error       STA BIOS_STATUS
.195a3f		28		plp		                PLP
.195a40		ab		plb		                PLB
.195a41		2b		pld		                PLD
.195a42		18		clc		                CLC
.195a43		6b		rtl		                RTL
.195a44						SDC_GETBLOCK
.195a44		0b		phd		                PHD
.195a45		8b		phb		                PHB
.195a46		08		php		                PHP
.195a47		48		pha		                PHA             ; begin setdbr macro
.195a48		08		php		                PHP
.195a49		e2 20		sep #$20	                SEP #$20        ; set A short
.195a4b		a9 00		lda #$00	                LDA #0
.195a4d		48		pha		                PHA
.195a4e		ab		plb		                PLB
.195a4f		28		plp		                PLP
.195a50		68		pla		                PLA             ; end setdbr macro
.195a51		48		pha		                PHA             ; begin setdp macro
.195a52		08		php		                PHP
.195a53		c2 20		rep #$20	                REP #$20        ; set A long
.195a55		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195a58		5b		tcd		                TCD
.195a59		28		plp		                PLP
.195a5a		68		pla		                PLA             ; end setdp macro
.195a5b		e2 20		sep #$20	                SEP #$20        ; set A short
.195a5d		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.195a61		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.195a63		f0 04		beq $195a69	                BEQ led_on                          ; Yes: turn on the LED
.195a65		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.195a67		80 71		bra $195ada	                BRA ret_error
.195a69		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.195a6d		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.195a6f		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195a73		a9 00		lda #$00	                LDA #0
.195a75		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.195a79		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.195a7b		0a		asl a		                ASL A
.195a7c		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.195a80		a5 03		lda $0323	                LDA BIOS_LBA+1
.195a82		2a		rol a		                ROL A
.195a83		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.195a87		a5 04		lda $0324	                LDA BIOS_LBA+2
.195a89		2a		rol a		                ROL A
.195a8a		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.195a8e		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.195a90		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.195a94		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195a96		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195a9a		22 dc 59 19	jsl $1959dc	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.195a9e		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195aa2		d0 36		bne $195ada	                BNE ret_error                       ; Is there one? Process the error
.195aa4		e2 20		sep #$20	                SEP #$20        ; set A short
.195aa6		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.195aaa		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.195aac		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.195ab0		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.195ab2		c2 10		rep #$10	                REP #$10        ; set X long
.195ab4		a0 00 00	ldy #$0000	                LDY #0
.195ab7		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.195abb		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.195abd		c8		iny		                INY                                 ; Advance to the next byte
.195abe		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.195ac1		d0 f4		bne $195ab7	                BNE loop_rd                         ; No: keep reading
.195ac3		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195ac7		d0 11		bne $195ada	                BNE ret_error                       ; Is there one? Process the error
.195ac9		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.195acb		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195acf		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195ad1		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195ad5		28		plp		                PLP
.195ad6		ab		plb		                PLB
.195ad7		2b		pld		                PLD
.195ad8		38		sec		                SEC
.195ad9		6b		rtl		                RTL
.195ada		85 00		sta $0320	ret_error       STA BIOS_STATUS
.195adc		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195ae0		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195ae2		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195ae6		28		plp		                PLP
.195ae7		ab		plb		                PLB
.195ae8		2b		pld		                PLD
.195ae9		18		clc		                CLC
.195aea		6b		rtl		                RTL
.195aeb						SDC_PUTBLOCK
.195aeb		0b		phd		                PHD
.195aec		8b		phb		                PHB
.195aed		08		php		                PHP
.195aee		48		pha		                PHA             ; begin setdbr macro
.195aef		08		php		                PHP
.195af0		e2 20		sep #$20	                SEP #$20        ; set A short
.195af2		a9 00		lda #$00	                LDA #0
.195af4		48		pha		                PHA
.195af5		ab		plb		                PLB
.195af6		28		plp		                PLP
.195af7		68		pla		                PLA             ; end setdbr macro
.195af8		48		pha		                PHA             ; begin setdp macro
.195af9		08		php		                PHP
.195afa		c2 20		rep #$20	                REP #$20        ; set A long
.195afc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195aff		5b		tcd		                TCD
.195b00		28		plp		                PLP
.195b01		68		pla		                PLA             ; end setdp macro
.195b02		e2 20		sep #$20	                SEP #$20        ; set A short
.195b04		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.195b08		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.195b0a		f0 04		beq $195b10	                BEQ check_wp                        ; Yes: check for write protect
.195b0c		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.195b0e		80 65		bra $195b75	                BRA ret_error
.195b10		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.195b12		f0 04		beq $195b18	                BEQ led_on                          ; Yes: start the transaction
.195b14		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.195b16		80 5d		bra $195b75	                BRA ret_error
.195b18		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.195b1c		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.195b1e		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195b22		c2 10		rep #$10	                REP #$10        ; set X long
.195b24		a0 00 00	ldy #$0000	                LDY #0
.195b27		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.195b29		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.195b2d		c8		iny		                INY                                 ; Advance to the next byte
.195b2e		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.195b31		d0 f4		bne $195b27	                BNE loop_wr                         ; No: keep writing
.195b33		a9 00		lda #$00	                LDA #0
.195b35		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.195b39		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.195b3b		0a		asl a		                ASL A
.195b3c		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.195b40		a5 03		lda $0323	                LDA BIOS_LBA+1
.195b42		2a		rol a		                ROL A
.195b43		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.195b47		a5 04		lda $0324	                LDA BIOS_LBA+2
.195b49		2a		rol a		                ROL A
.195b4a		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.195b4e		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.195b50		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.195b54		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195b56		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195b5a		22 dc 59 19	jsl $1959dc	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.195b5e		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195b62		d0 11		bne $195b75	                BNE ret_error                       ; Is there one? Process the error
.195b64		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.195b66		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195b6a		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195b6c		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195b70		28		plp		                PLP
.195b71		ab		plb		                PLB
.195b72		2b		pld		                PLD
.195b73		38		sec		                SEC
.195b74		6b		rtl		                RTL
.195b75		85 00		sta $0320	ret_error       STA BIOS_STATUS
.195b77		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195b7b		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195b7d		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195b81		28		plp		                PLP
.195b82		ab		plb		                PLB
.195b83		2b		pld		                PLD
.195b84		18		clc		                CLC
.195b85		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.195b86						FDC_TEST
.195b86		8b		phb		                    PHB
.195b87		0b		phd		                    PHD
.195b88		08		php		                    PHP
.195b89		48		pha		                PHA             ; begin setdbr macro
.195b8a		08		php		                PHP
.195b8b		e2 20		sep #$20	                SEP #$20        ; set A short
.195b8d		a9 00		lda #$00	                LDA #0
.195b8f		48		pha		                PHA
.195b90		ab		plb		                PLB
.195b91		28		plp		                PLP
.195b92		68		pla		                PLA             ; end setdbr macro
.195b93		48		pha		                PHA             ; begin setdp macro
.195b94		08		php		                PHP
.195b95		c2 20		rep #$20	                REP #$20        ; set A long
.195b97		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195b9a		5b		tcd		                TCD
.195b9b		28		plp		                PLP
.195b9c		68		pla		                PLA             ; end setdp macro
.195b9d		e2 20		sep #$20	                SEP #$20        ; set A short
.195b9f		a9 f0		lda #$f0	                    LDA #$F0
.195ba1		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.195ba4		22 a8 10 00	jsl $0010a8	                    JSL CLRSCREEN
.195ba8		22 a0 10 00	jsl $0010a0	                    JSL CSRHOME
.195bac		c2 30		rep #$30	                REP #$30        ; set A&X long
.195bae		22 7c 5e 19	jsl $195e7c	                    JSL FDC_Init
.195bb2		b0 03		bcs $195bb7	                    BCS init_ok
.195bb4		82 20 00	brl $195bd7	                    BRL motor_off
.195bb7		22 7b 65 19	jsl $19657b	init_ok             JSL FDC_CHK_MEDIA
.195bbb		90 03		bcc $195bc0	                    BCC no_media
.195bbd		82 03 00	brl $195bc3	                    BRL is_ok1
.195bc0						no_media
.195bc0		82 14 00	brl $195bd7	                    BRL motor_off
.195bc3		22 0e 64 19	jsl $19640e	is_ok1              JSL FDC_MOUNT
.195bc7		90 03		bcc $195bcc	                    BCC mount_err
.195bc9		82 03 00	brl $195bcf	                    BRL is_ok2
.195bcc						mount_err
.195bcc		82 08 00	brl $195bd7	                    BRL motor_off
.195bcf		22 e3 5b 19	jsl $195be3	is_ok2              JSL FDC_TEST_PUTBLOCK
.195bd3		b0 02		bcs $195bd7	                    BCS all_ok
.195bd5		80 00		bra $195bd7	                    BRA motor_off
.195bd7						all_ok
.195bd7		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.195bdb		22 2c 5f 19	jsl $195f2c	                    JSL FDC_Motor_Off
.195bdf		28		plp		                    PLP
.195be0		2b		pld		                    PLD
.195be1		ab		plb		                    PLB
.195be2		6b		rtl		                    RTL
.195be3						FDC_TEST_PUTBLOCK
.195be3		e2 20		sep #$20	                SEP #$20        ; set A short
.195be5		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.195be7		a2 00 00	ldx #$0000	                    LDX #0
.195bea		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.195bee		1a		inc a		                    INC A
.195bef		e8		inx		                    INX
.195bf0		e0 00 02	cpx #$0200	                    CPX #512
.195bf3		d0 f5		bne $195bea	                    BNE init_loop
.195bf5		c2 20		rep #$20	                REP #$20        ; set A long
.195bf7		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.195bfa		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.195bfe		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.195c01		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.195c05		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.195c08		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.195c0c		a9 00 00	lda #$0000	                    LDA #0
.195c0f		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.195c13		22 a2 63 19	jsl $1963a2	                    JSL FDC_PUTBLOCK                ; Try to write the data
.195c17		6b		rtl		                    RTL
>195c18		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>195c20		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>195c30		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.195c34						FDC_Check_RQM
.195c34		0b		phd		                    PHD
.195c35		08		php		                    PHP
.195c36		48		pha		                PHA             ; begin setdp macro
.195c37		08		php		                PHP
.195c38		c2 20		rep #$20	                REP #$20        ; set A long
.195c3a		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195c3d		5b		tcd		                TCD
.195c3e		28		plp		                PLP
.195c3f		68		pla		                PLA             ; end setdp macro
.195c40		e2 20		sep #$20	                SEP #$20        ; set A short
.195c42		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195c44		22 ad 3b 19	jsl $193bad	                    JSL ISETTIMEOUT
.195c48		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195c4a		30 12		bmi $195c5e	                    BMI time_out            ; If so: signal a time out
.195c4c		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195c50		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.195c52		f0 f4		beq $195c48	                    BEQ loop
.195c54		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195c56		22 ad 3b 19	jsl $193bad	                    JSL ISETTIMEOUT
.195c5a		28		plp		                    PLP
.195c5b		2b		pld		                    PLD
.195c5c		38		sec		                    SEC
.195c5d		60		rts		                    RTS
.195c5e		28		plp		time_out            PLP
.195c5f		2b		pld		                    PLD
.195c60		18		clc		                    CLC
.195c61		60		rts		                    RTS
.195c62						FDC_Check_DRV0_BSY
.195c62		0b		phd		                    PHD
.195c63		08		php		                    PHP
.195c64		48		pha		                PHA             ; begin setdp macro
.195c65		08		php		                PHP
.195c66		c2 20		rep #$20	                REP #$20        ; set A long
.195c68		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195c6b		5b		tcd		                TCD
.195c6c		28		plp		                PLP
.195c6d		68		pla		                PLA             ; end setdp macro
.195c6e		e2 20		sep #$20	                SEP #$20        ; set A short
.195c70		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195c72		22 ad 3b 19	jsl $193bad	                    JSL ISETTIMEOUT
.195c76		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195c78		30 12		bmi $195c8c	                    BMI time_out            ; If so: signal a time out
.195c7a		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195c7e		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.195c80		d0 f4		bne $195c76	                    BNE loop
.195c82		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195c84		22 ad 3b 19	jsl $193bad	                    JSL ISETTIMEOUT
.195c88		28		plp		                    PLP
.195c89		2b		pld		                    PLD
.195c8a		38		sec		                    SEC
.195c8b		60		rts		                    RTS
.195c8c		28		plp		time_out            PLP
.195c8d		2b		pld		                    PLD
.195c8e		18		clc		                    CLC
.195c8f		60		rts		                    RTS
.195c90						FDC_Check_CMD_BSY
.195c90		0b		phd		                    PHD
.195c91		08		php		                    PHP
.195c92		48		pha		                PHA             ; begin setdp macro
.195c93		08		php		                PHP
.195c94		c2 20		rep #$20	                REP #$20        ; set A long
.195c96		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195c99		5b		tcd		                TCD
.195c9a		28		plp		                PLP
.195c9b		68		pla		                PLA             ; end setdp macro
.195c9c		e2 20		sep #$20	                SEP #$20        ; set A short
.195c9e		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195ca0		22 ad 3b 19	jsl $193bad	                    JSL ISETTIMEOUT
.195ca4		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195ca6		30 12		bmi $195cba	                    BMI time_out            ; If so: signal a time out
.195ca8		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195cac		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.195cae		d0 f4		bne $195ca4	                    BNE loop
.195cb0		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195cb2		22 ad 3b 19	jsl $193bad	                    JSL ISETTIMEOUT
.195cb6		28		plp		                    PLP
.195cb7		2b		pld		                    PLD
.195cb8		38		sec		                    SEC
.195cb9		60		rts		                    RTS
.195cba		28		plp		time_out            PLP
.195cbb		2b		pld		                    PLD
.195cbc		18		clc		                    CLC
.195cbd		60		rts		                    RTS
.195cbe						FDC_Can_Read_Data
.195cbe		0b		phd		                    PHD
.195cbf		08		php		                    PHP
.195cc0		48		pha		                PHA             ; begin setdp macro
.195cc1		08		php		                PHP
.195cc2		c2 20		rep #$20	                REP #$20        ; set A long
.195cc4		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195cc7		5b		tcd		                TCD
.195cc8		28		plp		                PLP
.195cc9		68		pla		                PLA             ; end setdp macro
.195cca		e2 20		sep #$20	                SEP #$20        ; set A short
.195ccc		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195cce		22 ad 3b 19	jsl $193bad	                    JSL ISETTIMEOUT
.195cd2		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195cd4		30 14		bmi $195cea	                    BMI time_out            ; If so: signal a time out
.195cd6		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195cda		29 40		and #$40	                    AND #FDC_MSR_DIO
.195cdc		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.195cde		d0 f2		bne $195cd2	                    BNE loop
.195ce0		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195ce2		22 ad 3b 19	jsl $193bad	                    JSL ISETTIMEOUT
.195ce6		28		plp		                    PLP
.195ce7		2b		pld		                    PLD
.195ce8		38		sec		                    SEC
.195ce9		60		rts		                    RTS
.195cea		28		plp		time_out            PLP
.195ceb		2b		pld		                    PLD
.195cec		18		clc		                    CLC
.195ced		60		rts		                    RTS
.195cee						FDC_CAN_WRITE
.195cee		0b		phd		                    PHD
.195cef		08		php		                    PHP
.195cf0		48		pha		                PHA             ; begin setdp macro
.195cf1		08		php		                PHP
.195cf2		c2 20		rep #$20	                REP #$20        ; set A long
.195cf4		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195cf7		5b		tcd		                TCD
.195cf8		28		plp		                PLP
.195cf9		68		pla		                PLA             ; end setdp macro
.195cfa		e2 20		sep #$20	                SEP #$20        ; set A short
.195cfc		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195cfe		22 ad 3b 19	jsl $193bad	                    JSL ISETTIMEOUT
.195d02		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195d04		30 14		bmi $195d1a	                    BMI time_out            ; If so: signal a time out
.195d06		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195d0a		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195d0c		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.195d0e		d0 f2		bne $195d02	                    BNE loop
.195d10		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195d12		22 ad 3b 19	jsl $193bad	                    JSL ISETTIMEOUT
.195d16		28		plp		                    PLP
.195d17		2b		pld		                    PLD
.195d18		38		sec		                    SEC
.195d19		60		rts		                    RTS
.195d1a		28		plp		time_out            PLP
.195d1b		2b		pld		                    PLD
.195d1c		18		clc		                    CLC
.195d1d		60		rts		                    RTS
.195d1e						FDC_DELAY_10MS
.195d1e		da		phx		                    PHX
.195d1f		08		php		                    PHP
.195d20		c2 10		rep #$10	                REP #$10        ; set X long
.195d22		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.195d25		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.195d26		ca		dex		                    DEX
.195d27		e0 00 00	cpx #$0000	                    CPX #0
.195d2a		d0 f9		bne $195d25	                    BNE loop
.195d2c		28		plp		                    PLP
.195d2d		fa		plx		                    PLX
.195d2e		6b		rtl		                    RTL
.195d2f						FDC_COMMAND
.195d2f		da		phx		                    PHX
.195d30		8b		phb		                    PHB
.195d31		0b		phd		                    PHD
.195d32		08		php		                    PHP
.195d33		48		pha		                PHA             ; begin setdbr macro
.195d34		08		php		                PHP
.195d35		e2 20		sep #$20	                SEP #$20        ; set A short
.195d37		a9 00		lda #$00	                LDA #0
.195d39		48		pha		                PHA
.195d3a		ab		plb		                PLB
.195d3b		28		plp		                PLP
.195d3c		68		pla		                PLA             ; end setdbr macro
.195d3d		48		pha		                PHA             ; begin setdp macro
.195d3e		08		php		                PHP
.195d3f		c2 20		rep #$20	                REP #$20        ; set A long
.195d41		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195d44		5b		tcd		                TCD
.195d45		28		plp		                PLP
.195d46		68		pla		                PLA             ; end setdp macro
.195d47		22 1e 5d 19	jsl $195d1e	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.195d4b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.195d4d		a2 00		ldx #$00	                    LDX #0
.195d4f		a9 00		lda #$00	                    LDA #0
.195d51		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.195d54		e8		inx		                    INX
.195d55		e0 10		cpx #$10	                    CPX #16
.195d57		d0 f8		bne $195d51	                    BNE clr_results
.195d59		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.195d5d		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195d5f		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.195d61		f0 04		beq $195d67	                    BEQ start_send                          ; If so, start sending
.195d63		22 7c 5e 19	jsl $195e7c	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.195d67						start_send
.195d67		e2 10		sep #$10	                SEP #$10        ; set X short
.195d69		a2 00		ldx #$00	                    LDX #0
.195d6b		20 34 5c	jsr $195c34	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.195d6e		b0 03		bcs $195d73	                    BCS send_param
.195d70		82 5e 00	brl $195dd1	                    BRL time_out                            ; If there was a timeout, flag the time out
.195d73		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.195d76		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.195d7a		22 1e 5d 19	jsl $195d1e	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.195d7e		e8		inx		                    INX                                     ; Advance to the next byte
.195d7f		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.195d82		d0 e7		bne $195d6b	                    BNE send_loop                           ; Keep sending until we've sent them all
.195d84		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.195d87		d0 03		bne $195d8c	                    BNE chk_data_dir
.195d89		82 80 00	brl $195e0c	                    BRL result_phase                        ; If 0: we just want a result
.195d8c		10 3c		bpl $195dca	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.195d8e						wr_data
.195d8e		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.195d90		30 03		bmi $195d95	                    BMI wr_chk_rqm
.195d92		82 3c 00	brl $195dd1	                    BRL time_out                            ; If not, raise an error
.195d95		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.195d99		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.195d9b		f0 f1		beq $195d8e	                    BEQ wr_data_rdy
.195d9d		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.195d9f		d0 03		bne $195da4	                    BNE wr_data_phase                       ; If so: transfer the data
.195da1		82 68 00	brl $195e0c	                    BRL result_phase                          ; If not: it's an error
.195da4						wr_data_phase
.195da4		c2 10		rep #$10	                REP #$10        ; set X long
.195da6		a0 00 00	ldy #$0000	                    LDY #0
.195da9		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.195dab		30 03		bmi $195db0	                    BMI wr_chk_nondma
.195dad		82 21 00	brl $195dd1	                    BRL time_out                            ; If not, raise an error
.195db0		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.195db4		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.195db6		f0 54		beq $195e0c	                    BEQ result_phase                        ; If not: break out to result phase
.195db8		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.195dba		f0 ed		beq $195da9	                    BEQ wr_data_loop                        ; No: keep waiting
.195dbc		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.195dbe		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.195dc2		c8		iny		                    INY                                     ; Move to the next position
.195dc3		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.195dc6		d0 e1		bne $195da9	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.195dc8		80 42		bra $195e0c	                    BRA result_phase                        ; ready for the result phase
.195dca		20 be 5c	jsr $195cbe	rd_data             JSR FDC_Can_Read_Data
.195dcd		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.195dcf		30 07		bmi $195dd8	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.195dd1						time_out
.195dd1		e2 20		sep #$20	                SEP #$20        ; set A short
.195dd3		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.195dd5		82 9c 00	brl $195e74	                    BRL pass_error
.195dd8		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.195ddc		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195dde		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.195de0		d0 eb		bne $195dcd	                    BNE rd_data_rdy
.195de2		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.195de6		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.195de8		d0 03		bne $195ded	                    BNE rd_data_phase                       ; If so: transfer the data
.195dea		82 83 00	brl $195e70	                    BRL error                               ; If not: it's an error
.195ded						rd_data_phase
.195ded		c2 10		rep #$10	                REP #$10        ; set X long
.195def		a0 00 00	ldy #$0000	                    LDY #0
.195df2		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.195df4		10 db		bpl $195dd1	                    BPL time_out                            ; If not: throw a timeout error
.195df6		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.195dfa		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195dfc		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.195dfe		d0 f2		bne $195df2	                    BNE rd_data_loop
.195e00		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.195e04		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.195e06		c8		iny		                    INY                                     ; Move to the next position
.195e07		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.195e0a		d0 e6		bne $195df2	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.195e0c		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.195e0f		f0 34		beq $195e45	                    BEQ chk_busy                            ; Then we're done
.195e11		e2 10		sep #$10	                SEP #$10        ; set X short
.195e13		a2 00		ldx #$00	                    LDX #0
.195e15		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.195e17		22 ad 3b 19	jsl $193bad	                    JSL ISETTIMEOUT
.195e1b		20 be 5c	jsr $195cbe	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.195e1e		90 b1		bcc $195dd1	                    BCC time_out                            ; If there was a time out, raise an error
.195e20		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.195e24		20 be 5c	jsr $195cbe	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.195e27		90 a8		bcc $195dd1	                    BCC time_out                            ; If there was a time out, raise an error
.195e29		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.195e2d		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.195e30		20 34 5c	jsr $195c34	                    JSR FDC_Check_RQM
.195e33		90 9c		bcc $195dd1	                    BCC time_out                            ; If there was a time out, flag the error
.195e35		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.195e39		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.195e3b		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.195e3d		d0 06		bne $195e45	                    BNE chk_busy
.195e3f		e8		inx		                    INX                                     ; Move to the next result positions
.195e40		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.195e43		d0 e4		bne $195e29	                    BNE read_result                         ; And keep looping until we've read all
.195e45						chk_busy
.195e45		c2 10		rep #$10	                REP #$10        ; set X long
.195e47		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.195e4a		22 c3 10 19	jsl $1910c3	                    JSL ILOOP_MS
.195e4e		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.195e52		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.195e54		f0 12		beq $195e68	                    BEQ done                                ; If not set: we're done
.195e56		20 be 5c	jsr $195cbe	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.195e59		b0 03		bcs $195e5e	                    BCS get_result_byte
.195e5b		82 73 ff	brl $195dd1	                    BRL time_out                            ; If there was a time out, flag the error
.195e5e		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.195e62		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.195e65		e8		inx		                    INX
.195e66		80 dd		bra $195e45	                    BRA chk_busy                            ; And keep checking
.195e68						done
.195e68		64 20		stz $0320	                    STZ BIOS_STATUS
.195e6a		28		plp		                    PLP
.195e6b		2b		pld		                    PLD
.195e6c		ab		plb		                    PLB
.195e6d		fa		plx		                    PLX
.195e6e		38		sec		                    SEC
.195e6f		6b		rtl		                    RTL
.195e70						error
.195e70		e2 20		sep #$20	                SEP #$20        ; set A short
.195e72		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.195e74		85 20		sta $0320	pass_error          STA BIOS_STATUS
.195e76		28		plp		                    PLP
.195e77		2b		pld		                    PLD
.195e78		ab		plb		                    PLB
.195e79		fa		plx		                    PLX
.195e7a		18		clc		                    CLC
.195e7b		6b		rtl		                    RTL
.195e7c						FDC_Init
.195e7c		08		php		                    PHP
.195e7d		c2 10		rep #$10	                REP #$10        ; set X long
.195e7f		e2 20		sep #$20	                SEP #$20        ; set A short
.195e81		a9 00		lda #$00	                    LDA #0
.195e83		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.195e87		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.195e8a		a0 00 00	ldy #$0000	                    LDY #0
.195e8d		22 d0 10 19	jsl $1910d0	                    JSL IDELAY
.195e91		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.195e93		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.195e97		ea		nop		                    NOP
.195e98		ea		nop		                    NOP
.195e99		ea		nop		                    NOP
.195e9a		ea		nop		                    NOP
.195e9b		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.195e9d		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.195ea1		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.195ea3		8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.195ea7		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.195eaa		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.195ead		22 d0 10 19	jsl $1910d0	                    JSL IDELAY
.195eb1		22 8c 5f 19	jsl $195f8c	                    JSL FDC_Sense_Int_Status
.195eb5		90 25		bcc $195edc	                    BCC pass_failure
.195eb7		22 8c 5f 19	jsl $195f8c	                    JSL FDC_Sense_Int_Status
.195ebb		90 1f		bcc $195edc	                    BCC pass_failure
.195ebd		22 8c 5f 19	jsl $195f8c	                    JSL FDC_Sense_Int_Status
.195ec1		90 19		bcc $195edc	                    BCC pass_failure
.195ec3		22 8c 5f 19	jsl $195f8c	                    JSL FDC_Sense_Int_Status
.195ec7		90 13		bcc $195edc	                    BCC pass_failure
.195ec9		22 4e 60 19	jsl $19604e	                    JSL FDC_Configure_Command
.195ecd		90 0d		bcc $195edc	                    BCC pass_failure
.195ecf		22 f5 5f 19	jsl $195ff5	                    JSL FDC_Specify_Command
.195ed3		90 07		bcc $195edc	                    BCC pass_failure
.195ed5		22 f8 5e 19	jsl $195ef8	                    JSL FDC_Motor_On
.195ed9		28		plp		                    PLP
.195eda		38		sec		                    SEC
.195edb		6b		rtl		                    RTL
.195edc		28		plp		pass_failure        PLP
.195edd		18		clc		                    CLC
.195ede		6b		rtl		                    RTL
.195edf						FDC_MOTOR_NEEDED
.195edf		08		php		                    PHP
.195ee0		c2 20		rep #$20	                REP #$20        ; set A long
.195ee2		78		sei		                    SEI                         ; Turn off interrupts
.195ee3		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.195ee6		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.195eea		e2 20		sep #$20	                SEP #$20        ; set A short
.195eec		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.195ef0		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.195ef2		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.195ef6		28		plp		                    PLP
.195ef7		6b		rtl		                    RTL
.195ef8						FDC_Motor_On
.195ef8		08		php		                    PHP
.195ef9		22 df 5e 19	jsl $195edf	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.195efd		e2 20		sep #$20	                SEP #$20        ; set A short
.195eff		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.195f03		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.195f05		d0 1f		bne $195f26	                    BNE done                    ; If so: skip
.195f07		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.195f09		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.195f0d		20 34 5c	jsr $195c34	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.195f10		90 17		bcc $195f29	                    BCC time_out
.195f12		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.195f15		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.195f18		22 d0 10 19	jsl $1910d0	                    JSL IDELAY
.195f1c		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.195f20		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.195f22		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.195f26		28		plp		done                PLP
.195f27		38		sec		                    SEC
.195f28		6b		rtl		                    RTL
.195f29		28		plp		time_out            PLP                         ; Return a timeout error
.195f2a		18		clc		                    CLC
.195f2b		6b		rtl		                    RTL
.195f2c						FDC_Motor_Off
.195f2c		08		php		                    PHP
.195f2d		e2 20		sep #$20	                SEP #$20        ; set A short
.195f2f		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.195f31		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.195f35		c2 20		rep #$20	                REP #$20        ; set A long
.195f37		78		sei		                    SEI                         ; Turn off interrupts
.195f38		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.195f3b		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.195f3f		e2 20		sep #$20	                SEP #$20        ; set A short
.195f41		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.195f45		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.195f47		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.195f4b		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.195f4f		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.195f51		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.195f55		28		plp		                    PLP
.195f56		6b		rtl		                    RTL
.195f57						FDC_Recalibrate_Command
.195f57		0b		phd		                    PHD
.195f58		08		php		                    PHP
.195f59		48		pha		                PHA             ; begin setdp macro
.195f5a		08		php		                PHP
.195f5b		c2 20		rep #$20	                REP #$20        ; set A long
.195f5d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195f60		5b		tcd		                TCD
.195f61		28		plp		                PLP
.195f62		68		pla		                PLA             ; end setdp macro
.195f63		22 df 5e 19	jsl $195edf	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.195f67		e2 20		sep #$20	                SEP #$20        ; set A short
.195f69		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.195f6b		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195f6e		a5 00		lda $0300	                    LDA FDC_DRIVE
.195f70		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.195f73		a9 02		lda #$02	                    LDA #2
.195f75		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.195f78		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.195f7b		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.195f7e		22 2f 5d 19	jsl $195d2f	                    JSL FDC_COMMAND             ; Issue the command
.195f82		90 04		bcc $195f88	                    BCC pass_failure            ; If failure, pass the failure up
.195f84		28		plp		                    PLP
.195f85		2b		pld		                    PLD
.195f86		38		sec		                    SEC
.195f87		6b		rtl		                    RTL
.195f88		28		plp		pass_failure        PLP
.195f89		2b		pld		                    PLD
.195f8a		18		clc		                    CLC
.195f8b		6b		rtl		                    RTL
.195f8c						FDC_Sense_Int_Status
.195f8c		8b		phb		                    PHB
.195f8d		0b		phd		                    PHD
.195f8e		08		php		                    PHP
.195f8f		48		pha		                PHA             ; begin setdbr macro
.195f90		08		php		                PHP
.195f91		e2 20		sep #$20	                SEP #$20        ; set A short
.195f93		a9 00		lda #$00	                LDA #0
.195f95		48		pha		                PHA
.195f96		ab		plb		                PLB
.195f97		28		plp		                PLP
.195f98		68		pla		                PLA             ; end setdbr macro
.195f99		48		pha		                PHA             ; begin setdp macro
.195f9a		08		php		                PHP
.195f9b		c2 20		rep #$20	                REP #$20        ; set A long
.195f9d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195fa0		5b		tcd		                TCD
.195fa1		28		plp		                PLP
.195fa2		68		pla		                PLA             ; end setdp macro
.195fa3		c2 30		rep #$30	                REP #$30        ; set A&X long
.195fa5		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.195fa8		22 c3 10 19	jsl $1910c3	                    JSL ILOOP_MS
.195fac		e2 20		sep #$20	                SEP #$20        ; set A short
.195fae		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.195fb0		a9 ff		lda #$ff	                    LDA #$FF
.195fb2		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.195fb4		20 90 5c	jsr $195c90	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.195fb7		90 30		bcc $195fe9	                    BCC time_out                        ; If there was a time out, raise an error
.195fb9		20 34 5c	jsr $195c34	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195fbc		90 2b		bcc $195fe9	                    BCC time_out                        ; If there was a time out, raise an error
.195fbe		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.195fc0		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195fc4		20 be 5c	jsr $195cbe	                    JSR FDC_Can_Read_Data
.195fc7		90 20		bcc $195fe9	                    BCC time_out                        ; If there was a time out, raise an error
.195fc9		20 34 5c	jsr $195c34	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195fcc		90 1b		bcc $195fe9	                    BCC time_out                        ; If there was a time out, raise an error
.195fce		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.195fd2		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.195fd4		20 34 5c	jsr $195c34	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195fd7		90 10		bcc $195fe9	                    BCC time_out                        ; If there was a time out, raise an error
.195fd9		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.195fdd		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.195fdf		e2 20		sep #$20	                SEP #$20        ; set A short
.195fe1		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.195fe4		28		plp		                    PLP
.195fe5		2b		pld		                    PLD
.195fe6		ab		plb		                    PLB
.195fe7		38		sec		                    SEC
.195fe8		6b		rtl		                    RTL
.195fe9						time_out
.195fe9		e2 20		sep #$20	                SEP #$20        ; set A short
.195feb		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.195fed		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195ff0		28		plp		                    PLP
.195ff1		2b		pld		                    PLD
.195ff2		ab		plb		                    PLB
.195ff3		18		clc		                    CLC
.195ff4		6b		rtl		                    RTL
.195ff5						FDC_Specify_Command
.195ff5		8b		phb		                    PHB
.195ff6		0b		phd		                    PHD
.195ff7		08		php		                    PHP
.195ff8		48		pha		                PHA             ; begin setdbr macro
.195ff9		08		php		                PHP
.195ffa		e2 20		sep #$20	                SEP #$20        ; set A short
.195ffc		a9 00		lda #$00	                LDA #0
.195ffe		48		pha		                PHA
.195fff		ab		plb		                PLB
.196000		28		plp		                PLP
.196001		68		pla		                PLA             ; end setdbr macro
.196002		48		pha		                PHA             ; begin setdp macro
.196003		08		php		                PHP
.196004		c2 20		rep #$20	                REP #$20        ; set A long
.196006		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196009		5b		tcd		                TCD
.19600a		28		plp		                PLP
.19600b		68		pla		                PLA             ; end setdp macro
.19600c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19600e		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.196011		22 c3 10 19	jsl $1910c3	                    JSL ILOOP_MS
.196015		e2 20		sep #$20	                SEP #$20        ; set A short
.196017		20 90 5c	jsr $195c90	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.19601a		90 26		bcc $196042	                    BCC time_out            ; If there was a time out, raise an error
.19601c		20 34 5c	jsr $195c34	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.19601f		90 21		bcc $196042	                    BCC time_out            ; If there was a time out, raise an error
.196021		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.196023		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.196027		20 34 5c	jsr $195c34	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.19602a		90 16		bcc $196042	                    BCC time_out            ; If there was a time out, raise an error
.19602c		a9 cf		lda #$cf	                    LDA #$CF
.19602e		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.196032		20 34 5c	jsr $195c34	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.196035		90 0b		bcc $196042	                    BCC time_out            ; If there was a time out, raise an error
.196037		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.196039		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.19603d		28		plp		                    PLP
.19603e		2b		pld		                    PLD
.19603f		ab		plb		                    PLB
.196040		38		sec		                    SEC
.196041		6b		rtl		                    RTL
.196042						time_out
.196042		e2 20		sep #$20	                SEP #$20        ; set A short
.196044		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.196046		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.196049		28		plp		                    PLP
.19604a		2b		pld		                    PLD
.19604b		ab		plb		                    PLB
.19604c		18		clc		                    CLC
.19604d		6b		rtl		                    RTL
.19604e						FDC_Configure_Command
.19604e		8b		phb		                    PHB
.19604f		0b		phd		                    PHD
.196050		08		php		                    PHP
.196051		48		pha		                PHA             ; begin setdbr macro
.196052		08		php		                PHP
.196053		e2 20		sep #$20	                SEP #$20        ; set A short
.196055		a9 00		lda #$00	                LDA #0
.196057		48		pha		                PHA
.196058		ab		plb		                PLB
.196059		28		plp		                PLP
.19605a		68		pla		                PLA             ; end setdbr macro
.19605b		48		pha		                PHA             ; begin setdp macro
.19605c		08		php		                PHP
.19605d		c2 20		rep #$20	                REP #$20        ; set A long
.19605f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196062		5b		tcd		                TCD
.196063		28		plp		                PLP
.196064		68		pla		                PLA             ; end setdp macro
.196065		c2 30		rep #$30	                REP #$30        ; set A&X long
.196067		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.19606a		22 c3 10 19	jsl $1910c3	                    JSL ILOOP_MS
.19606e		e2 20		sep #$20	                SEP #$20        ; set A short
.196070		20 90 5c	jsr $195c90	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.196073		90 36		bcc $1960ab	                    BCC time_out            ; If there was a time out, raise an error
.196075		20 34 5c	jsr $195c34	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.196078		90 31		bcc $1960ab	                    BCC time_out            ; If there was a time out, raise an error
.19607a		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.19607c		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.196080		20 34 5c	jsr $195c34	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.196083		90 26		bcc $1960ab	                    BCC time_out            ; If there was a time out, raise an error
.196085		a9 00		lda #$00	                    LDA #$00
.196087		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.19608b		20 34 5c	jsr $195c34	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.19608e		90 1b		bcc $1960ab	                    BCC time_out            ; If there was a time out, raise an error
.196090		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.196092		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.196096		20 34 5c	jsr $195c34	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.196099		90 10		bcc $1960ab	                    BCC time_out            ; If there was a time out, raise an error
.19609b		a9 00		lda #$00	                    LDA #$00
.19609d		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.1960a1		20 90 5c	jsr $195c90	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.1960a4		90 05		bcc $1960ab	                    BCC time_out            ; If there was a time out, raise an error
.1960a6		28		plp		                    PLP
.1960a7		2b		pld		                    PLD
.1960a8		ab		plb		                    PLB
.1960a9		38		sec		                    SEC
.1960aa		6b		rtl		                    RTL
.1960ab						time_out
.1960ab		e2 20		sep #$20	                SEP #$20        ; set A short
.1960ad		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.1960af		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.1960b2		28		plp		                    PLP
.1960b3		2b		pld		                    PLD
.1960b4		ab		plb		                    PLB
.1960b5		18		clc		                    CLC
.1960b6		6b		rtl		                    RTL
.1960b7						FDC_Read_ID_Command
.1960b7		8b		phb		                    PHB
.1960b8		0b		phd		                    PHD
.1960b9		08		php		                    PHP
.1960ba		48		pha		                PHA             ; begin setdbr macro
.1960bb		08		php		                PHP
.1960bc		e2 20		sep #$20	                SEP #$20        ; set A short
.1960be		a9 00		lda #$00	                LDA #0
.1960c0		48		pha		                PHA
.1960c1		ab		plb		                PLB
.1960c2		28		plp		                PLP
.1960c3		68		pla		                PLA             ; end setdbr macro
.1960c4		48		pha		                PHA             ; begin setdp macro
.1960c5		08		php		                PHP
.1960c6		c2 20		rep #$20	                REP #$20        ; set A long
.1960c8		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1960cb		5b		tcd		                TCD
.1960cc		28		plp		                PLP
.1960cd		68		pla		                PLA             ; end setdp macro
.1960ce		e2 20		sep #$20	                SEP #$20        ; set A short
.1960d0		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.1960d2		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.1960d5		a9 01		lda #$01	                    LDA #1
.1960d7		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.1960da		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.1960dd		a9 07		lda #$07	                    LDA #7
.1960df		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.1960e2		22 2f 5d 19	jsl $195d2f	                    JSL FDC_COMMAND                     ; Issue the command
.1960e6		90 27		bcc $19610f	                    BCC pass_failure
.1960e8		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.1960eb		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.1960ed		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.1960f0		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.1960f2		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.1960f5		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.1960f7		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.1960fa		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.1960fc		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.1960ff		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.196101		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.196104		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.196106		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.196109		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.19610b		28		plp		                    PLP
.19610c		2b		pld		                    PLD
.19610d		ab		plb		                    PLB
.19610e		6b		rtl		                    RTL
.19610f		28		plp		pass_failure        PLP
.196110		2b		pld		                    PLD
.196111		ab		plb		                    PLB
.196112		18		clc		                    CLC
.196113		6b		rtl		                    RTL
.196114						FDC_DumpReg_Command
.196114		0b		phd		                    PHD
.196115		08		php		                    PHP
.196116		e2 20		sep #$20	                SEP #$20        ; set A short
.196118		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.19611a		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.19611d		a9 01		lda #$01	                    LDA #1
.19611f		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.196122		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.196125		a9 0a		lda #$0a	                    LDA #10
.196127		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.19612a		22 2f 5d 19	jsl $195d2f	                    JSL FDC_COMMAND                     ; Issue the command
.19612e		90 03		bcc $196133	                    BCC pass_failure
.196130		28		plp		                    PLP
.196131		2b		pld		                    PLD
.196132		6b		rtl		                    RTL
.196133		28		plp		pass_failure        PLP
.196134		2b		pld		                    PLD
.196135		18		clc		                    CLC
.196136		6b		rtl		                    RTL
.196137						FDC_Seek_Track
.196137		8b		phb		                    PHB
.196138		0b		phd		                    PHD
.196139		08		php		                    PHP
.19613a		48		pha		                PHA             ; begin setdbr macro
.19613b		08		php		                PHP
.19613c		e2 20		sep #$20	                SEP #$20        ; set A short
.19613e		a9 00		lda #$00	                LDA #0
.196140		48		pha		                PHA
.196141		ab		plb		                PLB
.196142		28		plp		                PLP
.196143		68		pla		                PLA             ; end setdbr macro
.196144		48		pha		                PHA             ; begin setdp macro
.196145		08		php		                PHP
.196146		c2 20		rep #$20	                REP #$20        ; set A long
.196148		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19614b		5b		tcd		                TCD
.19614c		28		plp		                PLP
.19614d		68		pla		                PLA             ; end setdp macro
.19614e		22 df 5e 19	jsl $195edf	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.196152		e2 20		sep #$20	                SEP #$20        ; set A short
.196154		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.196156		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.196159		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.19615b		29 01		and #$01	                    AND #$01
.19615d		0a		asl a		                    ASL A
.19615e		0a		asl a		                    ASL A
.19615f		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.196161		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.196164		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.196166		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.196169		a9 03		lda #$03	                    LDA #3
.19616b		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.19616e		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.196171		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.196174		22 2f 5d 19	jsl $195d2f	                    JSL FDC_COMMAND                     ; Issue the command
.196178		90 05		bcc $19617f	                    BCC pass_failure
.19617a		28		plp		                    PLP
.19617b		2b		pld		                    PLD
.19617c		ab		plb		                    PLB
.19617d		38		sec		                    SEC
.19617e		6b		rtl		                    RTL
.19617f		28		plp		pass_failure        PLP
.196180		2b		pld		                    PLD
.196181		ab		plb		                    PLB
.196182		18		clc		                    CLC
.196183		6b		rtl		                    RTL
.196184						FDC_Read_Sector
.196184		8b		phb		                    PHB
.196185		0b		phd		                    PHD
.196186		08		php		                    PHP
.196187		48		pha		                PHA             ; begin setdbr macro
.196188		08		php		                PHP
.196189		e2 20		sep #$20	                SEP #$20        ; set A short
.19618b		a9 00		lda #$00	                LDA #0
.19618d		48		pha		                PHA
.19618e		ab		plb		                PLB
.19618f		28		plp		                PLP
.196190		68		pla		                PLA             ; end setdbr macro
.196191		48		pha		                PHA             ; begin setdp macro
.196192		08		php		                PHP
.196193		c2 20		rep #$20	                REP #$20        ; set A long
.196195		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196198		5b		tcd		                TCD
.196199		28		plp		                PLP
.19619a		68		pla		                PLA             ; end setdp macro
.19619b		22 df 5e 19	jsl $195edf	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.19619f		e2 20		sep #$20	                SEP #$20        ; set A short
.1961a1		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.1961a3		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.1961a5		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.1961a8		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.1961aa		29 01		and #$01	                    AND #$01
.1961ac		0a		asl a		                    ASL A
.1961ad		0a		asl a		                    ASL A
.1961ae		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.1961b0		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.1961b3		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.1961b5		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.1961b8		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.1961ba		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.1961bd		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.1961bf		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.1961c2		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.1961c4		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.1961c7		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.1961c9		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.1961cc		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.1961ce		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.1961d1		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.1961d3		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.1961d6		a9 09		lda #$09	                    LDA #9
.1961d8		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.1961db		a9 01		lda #$01	                    LDA #1
.1961dd		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.1961e0		a9 07		lda #$07	                    LDA #7
.1961e2		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.1961e5		22 2f 5d 19	jsl $195d2f	command             JSL FDC_COMMAND                     ; Issue the command
.1961e9		08		php		                    PHP
.1961ea		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.1961ed		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.1961ef		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.1961f2		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.1961f4		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.1961f7		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.1961f9		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.1961fc		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.1961fe		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.196201		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.196203		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.196206		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.196208		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.19620b		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.19620d		28		plp		                    PLP
.19620e		90 04		bcc $196214	                    BCC pass_failure
.196210		28		plp		done                PLP
.196211		2b		pld		                    PLD
.196212		ab		plb		                    PLB
.196213		6b		rtl		                    RTL
.196214		28		plp		pass_failure        PLP
.196215		2b		pld		                    PLD
.196216		ab		plb		                    PLB
.196217		18		clc		                    CLC
.196218		6b		rtl		                    RTL
.196219						FDC_Write_Sector
.196219		8b		phb		                    PHB
.19621a		0b		phd		                    PHD
.19621b		08		php		                    PHP
.19621c		48		pha		                PHA             ; begin setdbr macro
.19621d		08		php		                PHP
.19621e		e2 20		sep #$20	                SEP #$20        ; set A short
.196220		a9 00		lda #$00	                LDA #0
.196222		48		pha		                PHA
.196223		ab		plb		                PLB
.196224		28		plp		                PLP
.196225		68		pla		                PLA             ; end setdbr macro
.196226		48		pha		                PHA             ; begin setdp macro
.196227		08		php		                PHP
.196228		c2 20		rep #$20	                REP #$20        ; set A long
.19622a		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19622d		5b		tcd		                TCD
.19622e		28		plp		                PLP
.19622f		68		pla		                PLA             ; end setdp macro
.196230		e2 20		sep #$20	                SEP #$20        ; set A short
.196232		22 df 5e 19	jsl $195edf	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.196236		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.196238		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.19623a		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.19623d		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.19623f		29 01		and #$01	                    AND #$01
.196241		0a		asl a		                    ASL A
.196242		0a		asl a		                    ASL A
.196243		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.196245		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.196248		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.19624a		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.19624d		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.19624f		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.196252		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.196254		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.196257		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.196259		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.19625c		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.19625e		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.196261		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.196263		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.196266		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.196268		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.19626b		a9 09		lda #$09	                    LDA #9
.19626d		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.196270		a9 ff		lda #$ff	                    LDA #$FF
.196272		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.196275		a9 07		lda #$07	                    LDA #7
.196277		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.19627a		22 2f 5d 19	jsl $195d2f	command             JSL FDC_COMMAND                     ; Issue the command
.19627e		08		php		                    PHP
.19627f		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.196282		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.196284		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.196287		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.196289		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.19628c		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.19628e		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.196291		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.196293		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.196296		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.196298		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.19629b		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.19629d		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.1962a0		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.1962a2		28		plp		check_status        PLP
.1962a3		90 04		bcc $1962a9	                    BCC pass_failure
.1962a5		28		plp		done                PLP
.1962a6		2b		pld		                    PLD
.1962a7		ab		plb		                    PLB
.1962a8		6b		rtl		                    RTL
.1962a9		28		plp		pass_failure        PLP
.1962aa		2b		pld		                    PLD
.1962ab		ab		plb		                    PLB
.1962ac		18		clc		                    CLC
.1962ad		6b		rtl		                    RTL
.1962ae						DIVIDE32
.1962ae		da		phx		                    PHX
.1962af		5a		phy		                    PHY
.1962b0		0b		phd		                    PHD
.1962b1		08		php		                    PHP
.1962b2		48		pha		                PHA             ; begin setdp macro
.1962b3		08		php		                PHP
.1962b4		c2 20		rep #$20	                REP #$20        ; set A long
.1962b6		a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.1962b9		5b		tcd		                TCD
.1962ba		28		plp		                PLP
.1962bb		68		pla		                PLA             ; end setdp macro
.1962bc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1962be		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.1962c0		64 0a		stz $0316	                    STZ REMAINDER+2
.1962c2		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.1962c5		06 00		asl $030c	loop                ASL DIVIDEND
.1962c7		26 02		rol $030e	                    ROL DIVIDEND+2
.1962c9		26 08		rol $0314	                    ROL REMAINDER
.1962cb		26 0a		rol $0316	                    ROL REMAINDER+2
.1962cd		a5 08		lda $0314	                    LDA REMAINDER
.1962cf		38		sec		                    SEC
.1962d0		e5 04		sbc $0310	                    SBC DIVISOR
.1962d2		a8		tay		                    TAY
.1962d3		a5 0a		lda $0316	                    LDA REMAINDER+2
.1962d5		e5 06		sbc $0312	                    SBC DIVISOR+2
.1962d7		90 06		bcc $1962df	                    BCC skip
.1962d9		85 0a		sta $0316	                    STA REMAINDER+2
.1962db		84 08		sty $0314	                    STY REMAINDER
.1962dd		e6 00		inc $030c	                    INC DIVIDEND
.1962df		ca		dex		skip                DEX
.1962e0		d0 e3		bne $1962c5	                    BNE loop
.1962e2		28		plp		                    PLP
.1962e3		2b		pld		                    PLD
.1962e4		7a		ply		                    PLY
.1962e5		fa		plx		                    PLX
.1962e6		60		rts		                    RTS
.1962e7						LBA2CHS
.1962e7		8b		phb		                    PHB
.1962e8		0b		phd		                    PHD
.1962e9		08		php		                    PHP
.1962ea		48		pha		                PHA             ; begin setdbr macro
.1962eb		08		php		                PHP
.1962ec		e2 20		sep #$20	                SEP #$20        ; set A short
.1962ee		a9 00		lda #$00	                LDA #0
.1962f0		48		pha		                PHA
.1962f1		ab		plb		                PLB
.1962f2		28		plp		                PLP
.1962f3		68		pla		                PLA             ; end setdbr macro
.1962f4		48		pha		                PHA             ; begin setdp macro
.1962f5		08		php		                PHP
.1962f6		c2 20		rep #$20	                REP #$20        ; set A long
.1962f8		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1962fb		5b		tcd		                TCD
.1962fc		28		plp		                PLP
.1962fd		68		pla		                PLA             ; end setdp macro
.1962fe		c2 30		rep #$30	                REP #$30        ; set A&X long
.196300		a5 22		lda $0322	                    LDA BIOS_LBA
.196302		85 0c		sta $030c	                    STA DIVIDEND
.196304		a5 24		lda $0324	                    LDA BIOS_LBA+2
.196306		85 0e		sta $030e	                    STA DIVIDEND+2
.196308		a9 24 00	lda #$0024	                    LDA #36
.19630b		85 10		sta $0310	                    STA DIVISOR
.19630d		64 12		stz $0312	                    STZ DIVISOR+2
.19630f		20 ae 62	jsr $1962ae	                    JSR DIVIDE32
.196312		e2 20		sep #$20	                SEP #$20        ; set A short
.196314		a5 0c		lda $030c	                    LDA DIVIDEND
.196316		85 02		sta $0302	                    STA FDC_CYLINDER
.196318		c2 20		rep #$20	                REP #$20        ; set A long
.19631a		a5 14		lda $0314	                    LDA REMAINDER
.19631c		85 0c		sta $030c	                    STA DIVIDEND
.19631e		a5 16		lda $0316	                    LDA REMAINDER+2
.196320		85 0e		sta $030e	                    STA DIVIDEND+2
.196322		a9 12 00	lda #$0012	                    LDA #18
.196325		85 10		sta $0310	                    STA DIVISOR
.196327		64 12		stz $0312	                    STZ DIVISOR+2
.196329		20 ae 62	jsr $1962ae	                    JSR DIVIDE32
.19632c		e2 20		sep #$20	                SEP #$20        ; set A short
.19632e		a5 0c		lda $030c	                    LDA DIVIDEND
.196330		29 01		and #$01	                    AND #$01
.196332		85 01		sta $0301	                    STA FDC_HEAD
.196334		a5 14		lda $0314	                    LDA REMAINDER
.196336		1a		inc a		                    INC A
.196337		85 03		sta $0303	                    STA FDC_SECTOR
.196339		28		plp		                    PLP
.19633a		2b		pld		                    PLD
.19633b		ab		plb		                    PLB
.19633c		6b		rtl		                    RTL
.19633d						FDC_GETBLOCK
.19633d		8b		phb		                    PHB
.19633e		0b		phd		                    PHD
.19633f		08		php		                    PHP
.196340		48		pha		                PHA             ; begin setdbr macro
.196341		08		php		                PHP
.196342		e2 20		sep #$20	                SEP #$20        ; set A short
.196344		a9 00		lda #$00	                LDA #0
.196346		48		pha		                PHA
.196347		ab		plb		                PLB
.196348		28		plp		                PLP
.196349		68		pla		                PLA             ; end setdbr macro
.19634a		48		pha		                PHA             ; begin setdp macro
.19634b		08		php		                PHP
.19634c		c2 20		rep #$20	                REP #$20        ; set A long
.19634e		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196351		5b		tcd		                TCD
.196352		28		plp		                PLP
.196353		68		pla		                PLA             ; end setdp macro
.196354		e2 20		sep #$20	                SEP #$20        ; set A short
.196356		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.196358		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.19635b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19635d		22 e7 62 19	jsl $1962e7	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.196361		e2 20		sep #$20	                SEP #$20        ; set A short
.196363		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.196365		f0 29		beq $196390	                    BEQ read_failure
.196367						try_read
.196367		c2 20		rep #$20	                REP #$20        ; set A long
.196369		22 84 61 19	jsl $196184	                    JSL FDC_Read_Sector         ; Read the sector
.19636d		90 14		bcc $196383	                    BCC retry
.19636f		e2 20		sep #$20	                SEP #$20        ; set A short
.196371		a5 06		lda $0306	                    LDA FDC_ST0
.196373		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.196375		d0 19		bne $196390	                    BNE read_failure
.196377						ret_success
.196377		e2 20		sep #$20	                SEP #$20        ; set A short
.196379		a9 00		lda #$00	                    LDA #0
.19637b		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.19637e		28		plp		                    PLP
.19637f		2b		pld		                    PLD
.196380		ab		plb		                    PLB
.196381		38		sec		                    SEC
.196382		6b		rtl		                    RTL
.196383						retry
.196383		e2 20		sep #$20	                SEP #$20        ; set A short
.196385		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.196388		30 13		bmi $19639d	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.19638a		22 7c 5e 19	jsl $195e7c	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.19638e		80 d7		bra $196367	                    BRA try_read                ; And try the read again
.196390						read_failure
.196390		e2 20		sep #$20	                SEP #$20        ; set A short
.196392		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.196394		80 04		bra $19639a	                    BRA ret_failure
.196396						seek_failure
.196396		e2 20		sep #$20	                SEP #$20        ; set A short
.196398		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.19639a		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.19639d		28		plp		pass_failure        PLP
.19639e		2b		pld		                    PLD
.19639f		ab		plb		                    PLB
.1963a0		18		clc		                    CLC
.1963a1		6b		rtl		                    RTL
.1963a2						FDC_PUTBLOCK
.1963a2		8b		phb		                    PHB
.1963a3		0b		phd		                    PHD
.1963a4		08		php		                    PHP
.1963a5		48		pha		                PHA             ; begin setdbr macro
.1963a6		08		php		                PHP
.1963a7		e2 20		sep #$20	                SEP #$20        ; set A short
.1963a9		a9 00		lda #$00	                LDA #0
.1963ab		48		pha		                PHA
.1963ac		ab		plb		                PLB
.1963ad		28		plp		                PLP
.1963ae		68		pla		                PLA             ; end setdbr macro
.1963af		48		pha		                PHA             ; begin setdp macro
.1963b0		08		php		                PHP
.1963b1		c2 20		rep #$20	                REP #$20        ; set A long
.1963b3		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1963b6		5b		tcd		                TCD
.1963b7		28		plp		                PLP
.1963b8		68		pla		                PLA             ; end setdp macro
.1963b9		e2 20		sep #$20	                SEP #$20        ; set A short
.1963bb		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.1963bd		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.1963c0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1963c2		22 e7 62 19	jsl $1962e7	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.1963c6		22 19 62 19	jsl $196219	retry               JSL FDC_Write_Sector        ; Write the sector
.1963ca		b0 03		bcs $1963cf	                    BCS chk_st0
.1963cc		82 28 00	brl $1963f7	                    BRL attempt_retry
.1963cf						chk_st0
.1963cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1963d1		a5 06		lda $0306	                    LDA FDC_ST0
.1963d3		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.1963d5		d0 0c		bne $1963e3	                    BNE write_failure
.1963d7						ret_success
.1963d7		e2 20		sep #$20	                SEP #$20        ; set A short
.1963d9		a9 00		lda #$00	                    LDA #0
.1963db		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.1963de		28		plp		                    PLP
.1963df		2b		pld		                    PLD
.1963e0		ab		plb		                    PLB
.1963e1		38		sec		                    SEC
.1963e2		6b		rtl		                    RTL
.1963e3						write_failure
.1963e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1963e5		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.1963e7		89 02		bit #$02	                    BIT #FDC_ST1_NW
.1963e9		f0 04		beq $1963ef	                    BEQ generic_err
.1963eb		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.1963ed		80 17		bra $196406	                    BRA ret_failure
.1963ef		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.1963f1		d0 e4		bne $1963d7	                    BNE ret_success
.1963f3		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.1963f5		d0 e0		bne $1963d7	                    BNE ret_success
.1963f7						attempt_retry
.1963f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1963f9		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.1963fc		d0 c8		bne $1963c6	                    BNE retry                           ; And retry unless we have none left
.1963fe		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.196400		80 04		bra $196406	                    BRA ret_failure
.196402						seek_failure
.196402		e2 20		sep #$20	                SEP #$20        ; set A short
.196404		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.196406						ret_failure
.196406		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.196409		28		plp		pass_failure        PLP
.19640a		2b		pld		                    PLD
.19640b		ab		plb		                    PLB
.19640c		18		clc		                    CLC
.19640d		6b		rtl		                    RTL
.19640e						FDC_MOUNT
.19640e		8b		phb		                    PHB
.19640f		0b		phd		                    PHD
.196410		08		php		                    PHP
.196411		48		pha		                PHA             ; begin setdbr macro
.196412		08		php		                PHP
.196413		e2 20		sep #$20	                SEP #$20        ; set A short
.196415		a9 00		lda #$00	                LDA #0
.196417		48		pha		                PHA
.196418		ab		plb		                PLB
.196419		28		plp		                PLP
.19641a		68		pla		                PLA             ; end setdbr macro
.19641b		48		pha		                PHA             ; begin setdp macro
.19641c		08		php		                PHP
.19641d		c2 20		rep #$20	                REP #$20        ; set A long
.19641f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196422		5b		tcd		                TCD
.196423		28		plp		                PLP
.196424		68		pla		                PLA             ; end setdp macro
.196425		22 7c 5e 19	jsl $195e7c	                    JSL FDC_INIT
.196429		e2 20		sep #$20	                SEP #$20        ; set A short
.19642b		c2 10		rep #$10	                REP #$10        ; set X long
.19642d		a9 00		lda #$00	                    LDA #0
.19642f		a2 00 00	ldx #$0000	                    LDX #0
.196432		9f 00 a3 18	sta $18a300,x	zero_loop           STA DOS_SECTOR,X
.196436		e8		inx		                    INX
.196437		e0 00 02	cpx #$0200	                    CPX #512
.19643a		d0 f6		bne $196432	                    BNE zero_loop
.19643c		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.19643e		85 00		sta $0300	                    STA FDC_DRIVE
.196440		22 f8 5e 19	jsl $195ef8	                    JSL FDC_Motor_On                        ; Turn the motor on
.196444		c2 30		rep #$30	                REP #$30        ; set A&X long
.196446		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.196449		85 22		sta $0322	                    STA BIOS_LBA
.19644b		85 24		sta $0324	                    STA BIOS_LBA+2
.19644d		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.196450		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.196452		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.196455		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.196457		22 3d 63 19	jsl $19633d	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.19645b		b0 03		bcs $196460	                    BCS parse_boot                          ; If ok: start parsing the boot record
.19645d		82 d3 00	brl $196533	                    BRL pass_failure                        ; Pass the error up the chain
.196460						parse_boot
.196460		e2 20		sep #$20	                SEP #$20        ; set A short
.196462		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.196464		8f 01 a0 18	sta $18a001	                    STA @l FILE_SYSTEM
.196468		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.19646a		8f 02 a0 18	sta $18a002	                    STA @l PARTITION
.19646e		e2 20		sep #$20	                SEP #$20        ; set A short
.196470		af 0d a3 18	lda $18a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.196474		8f 03 a0 18	sta $18a003	                    STA @l SECTORS_PER_CLUSTER
.196478		c2 20		rep #$20	                REP #$20        ; set A long
.19647a		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.19647d		8f 04 a0 18	sta $18a004	                    STA @l FIRSTSECTOR
.196481		8f 06 a0 18	sta $18a006	                    STA @l FIRSTSECTOR+2
.196485		af 16 a3 18	lda $18a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.196489		8f 10 a0 18	sta $18a010	                    STA @l SEC_PER_FAT
.19648d		a9 00 00	lda #$0000	                    LDA #0
.196490		8f 12 a0 18	sta $18a012	                    STA @l SEC_PER_FAT+2
.196494		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.196497		8f 14 a0 18	sta $18a014	                    STA @l FAT_BEGIN_LBA
.19649b		18		clc		                    CLC
.19649c		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.1964a0		8f 18 a0 18	sta $18a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.1964a4		a9 00 00	lda #$0000	                    LDA #0
.1964a7		8f 16 a0 18	sta $18a016	                    STA @l FAT_BEGIN_LBA+2
.1964ab		8f 1a a0 18	sta $18a01a	                    STA @L FAT2_BEGIN_LBA+2
.1964af		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.1964b0		af 18 a0 18	lda $18a018	                    LDA @l FAT2_BEGIN_LBA
.1964b4		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.1964b8		8f 20 a0 18	sta $18a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.1964bc		a9 00 00	lda #$0000	                    LDA #0
.1964bf		8f 22 a0 18	sta $18a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.1964c3		af 11 a3 18	lda $18a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.1964c7		8f 24 a0 18	sta $18a024	                    STA @l ROOT_DIR_MAX_ENTRY
.1964cb		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.1964cc		4a		lsr a		                    LSR A
.1964cd		4a		lsr a		                    LSR A
.1964ce		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.1964cf		18		clc		                    CLC
.1964d0		6f 20 a0 18	adc $18a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.1964d4		8f 1c a0 18	sta $18a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.1964d8		a9 00 00	lda #$0000	                    LDA #0
.1964db		8f 1e a0 18	sta $18a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.1964df		af 13 a3 18	lda $18a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.1964e3		8f 08 a0 18	sta $18a008	                    STA @l SECTORCOUNT
.1964e7		a9 00 00	lda #$0000	                    LDA #0
.1964ea		8f 0a a0 18	sta $18a00a	                    STA @l SECTORCOUNT+2
.1964ee		af 0e a3 18	lda $18a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.1964f2		8f 0c a0 18	sta $18a00c	                    STA @l NUM_RSRV_SEC
.1964f6		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.1964f9		8f 0e a0 18	sta $18a00e	                    STA @l CLUSTER_SIZE
.1964fd		e2 20		sep #$20	                SEP #$20        ; set A short
.1964ff		af 26 a3 18	lda $18a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.196503		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.196505		80 14		bra $19651b	                    BRA no_volume_id                        ; No: there is no volume ID
.196507						is_extended
.196507		c2 20		rep #$20	                REP #$20        ; set A long
.196509		af 27 a3 18	lda $18a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.19650d		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.196511		af 29 a3 18	lda $18a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.196515		8f 28 a0 18	sta $18a028	                    STA @l VOLUME_ID+2
.196519		80 0d		bra $196528	                    BRA ret_success
.19651b						no_volume_id
.19651b		c2 20		rep #$20	                REP #$20        ; set A long
.19651d		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.196520		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.196524		8f 28 a0 18	sta $18a028	                    STA @L VOLUME_ID+2
.196528						ret_success
.196528		e2 20		sep #$20	                SEP #$20        ; set A short
.19652a		a9 00		lda #$00	                    LDA #0
.19652c		85 20		sta $0320	                    STA BIOS_STATUS
.19652e		28		plp		                    PLP
.19652f		2b		pld		                    PLD
.196530		ab		plb		                    PLB
.196531		38		sec		                    SEC
.196532		6b		rtl		                    RTL
.196533		28		plp		pass_failure        PLP
.196534		2b		pld		                    PLD
.196535		ab		plb		                    PLB
.196536		18		clc		                    CLC
.196537		6b		rtl		                    RTL
.196538						FDC_CMDBLOCK
.196538		8b		phb		                    PHB
.196539		0b		phd		                    PHD
.19653a		08		php		                    PHP
.19653b		48		pha		                PHA             ; begin setdbr macro
.19653c		08		php		                PHP
.19653d		e2 20		sep #$20	                SEP #$20        ; set A short
.19653f		a9 00		lda #$00	                LDA #0
.196541		48		pha		                PHA
.196542		ab		plb		                PLB
.196543		28		plp		                PLP
.196544		68		pla		                PLA             ; end setdbr macro
.196545		48		pha		                PHA             ; begin setdp macro
.196546		08		php		                PHP
.196547		c2 20		rep #$20	                REP #$20        ; set A long
.196549		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19654c		5b		tcd		                TCD
.19654d		28		plp		                PLP
.19654e		68		pla		                PLA             ; end setdp macro
.19654f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196551		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.196553		f0 0f		beq $196564	                    BEQ motor_on
.196555		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.196557		f0 11		beq $19656a	                    BEQ motor_off
.196559		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.19655b		f0 13		beq $196570	                    BEQ recalibrate
.19655d		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.19655f		28		plp		                    PLP
.196560		2b		pld		                    PLD
.196561		ab		plb		                    PLB
.196562		38		sec		                    SEC
.196563		6b		rtl		                    RTL
.196564		22 f8 5e 19	jsl $195ef8	motor_on            JSL FDC_Motor_On
.196568		80 f3		bra $19655d	                    BRA ret_success
.19656a		22 2c 5f 19	jsl $195f2c	motor_off           JSL FDC_Motor_Off
.19656e		80 ed		bra $19655d	                    BRA ret_success
.196570		22 57 5f 19	jsl $195f57	recalibrate         JSL FDC_Recalibrate_Command
.196574		b0 e7		bcs $19655d	                    BCS ret_success
.196576		28		plp		pass_failure        PLP
.196577		2b		pld		                    PLD
.196578		ab		plb		                    PLB
.196579		18		clc		                    CLC
.19657a		6b		rtl		                    RTL
.19657b						FDC_CHK_MEDIA
.19657b		0b		phd		                    PHD
.19657c		08		php		                    PHP
.19657d		48		pha		                PHA             ; begin setdp macro
.19657e		08		php		                PHP
.19657f		c2 20		rep #$20	                REP #$20        ; set A long
.196581		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196584		5b		tcd		                TCD
.196585		28		plp		                PLP
.196586		68		pla		                PLA             ; end setdp macro
.196587		22 f8 5e 19	jsl $195ef8	                    JSL FDC_Motor_On                ; Turn on the motor
.19658b		e2 20		sep #$20	                SEP #$20        ; set A short
.19658d		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.196591		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.196593		f0 42		beq $1965d7	                    BEQ ret_true                    ; If not: assume the disk is present
.196595		a9 00		lda #$00	                    LDA #0
.196597		85 00		sta $0300	                    STA FDC_DRIVE
.196599		a9 00		lda #$00	                    LDA #0
.19659b		85 01		sta $0301	                    STA FDC_HEAD
.19659d		a9 50		lda #$50	                    LDA #80
.19659f		85 02		sta $0302	                    STA FDC_CYLINDER
.1965a1		22 37 61 19	jsl $196137	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.1965a5		90 34		bcc $1965db	                    BCC ret_false                   ; If fail: return false
.1965a7		c2 10		rep #$10	                REP #$10        ; set X long
.1965a9		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.1965ac		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.1965af		22 d0 10 19	jsl $1910d0	                    JSL IDELAY
.1965b3		22 8c 5f 19	jsl $195f8c	                    JSL FDC_Sense_Int_Status
.1965b7		a5 06		lda $0306	                    LDA FDC_ST0
.1965b9		29 d0		and #$d0	                    AND #%11010000
.1965bb		d0 1e		bne $1965db	                    BNE ret_false
.1965bd		22 57 5f 19	jsl $195f57	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.1965c1		90 18		bcc $1965db	                    BCC ret_false                   ; If fail: return false
.1965c3		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.1965c6		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.1965c9		22 d0 10 19	jsl $1910d0	                    JSL IDELAY
.1965cd		22 8c 5f 19	jsl $195f8c	                    JSL FDC_Sense_Int_Status
.1965d1		a5 06		lda $0306	                    LDA FDC_ST0
.1965d3		29 d0		and #$d0	                    AND #%11010000
.1965d5		d0 04		bne $1965db	                    BNE ret_false
.1965d7						ret_true
.1965d7		28		plp		                    PLP
.1965d8		2b		pld		                    PLD
.1965d9		38		sec		                    SEC
.1965da		6b		rtl		                    RTL
.1965db						ret_false
.1965db		28		plp		                    PLP
.1965dc		2b		pld		                    PLD
.1965dd		18		clc		                    CLC
.1965de		6b		rtl		                    RTL
.1965df						FDC_WRITEVBR
.1965df		8b		phb		                    PHB
.1965e0		0b		phd		                    PHD
.1965e1		08		php		                    PHP
.1965e2		48		pha		                PHA             ; begin setdbr macro
.1965e3		08		php		                PHP
.1965e4		e2 20		sep #$20	                SEP #$20        ; set A short
.1965e6		a9 00		lda #$00	                LDA #0
.1965e8		48		pha		                PHA
.1965e9		ab		plb		                PLB
.1965ea		28		plp		                PLP
.1965eb		68		pla		                PLA             ; end setdbr macro
.1965ec		48		pha		                PHA             ; begin setdp macro
.1965ed		08		php		                PHP
.1965ee		c2 20		rep #$20	                REP #$20        ; set A long
.1965f0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1965f3		5b		tcd		                TCD
.1965f4		28		plp		                PLP
.1965f5		68		pla		                PLA             ; end setdp macro
.1965f6		22 0e 64 19	jsl $19640e	                    JSL FDC_MOUNT               ; Mount the floppy disk
.1965fa		c2 30		rep #$30	                REP #$30        ; set A&X long
.1965fc		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.1965ff		a2 00 00	ldx #$0000	                    LDX #0
.196602		9f 00 a3 18	sta $18a300,x	clr_loop            STA DOS_SECTOR,X
.196606		e8		inx		                    INX
.196607		e8		inx		                    INX
.196608		e0 00 02	cpx #$0200	                    CPX #512
.19660b		d0 f5		bne $196602	                    BNE clr_loop
.19660d		e2 20		sep #$20	                SEP #$20        ; set A short
.19660f		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.196612		bf c7 66 19	lda $1966c7,x	copy_loop           LDA FDC_VBR_BEGIN,X
.196616		9f 00 a3 18	sta $18a300,x	                    STA DOS_SECTOR,X
.19661a		e8		inx		                    INX
.19661b		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.19661e		d0 f2		bne $196612	                    BNE copy_loop
.196620		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.196623		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.196626		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.196628		9f 00 a3 18	sta $18a300,x	                    STA DOS_SECTOR,X
.19662c		f0 07		beq $196635	                    BEQ path_copy_done
.19662e		e8		inx		                    INX
.19662f		c8		iny		                    INY
.196630		c0 80 00	cpy #$0080	                    CPY #128
.196633		d0 f1		bne $196626	                    BNE path_copy_loop
.196635						path_copy_done
.196635		c2 20		rep #$20	                REP #$20        ; set A long
.196637		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.19663a		8f fe a4 18	sta $18a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.19663e		c2 20		rep #$20	                REP #$20        ; set A long
.196640		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.196643		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.196645		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.196648		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.19664a		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.19664d		85 02		sta $0322	                    STA BIOS_LBA
.19664f		85 04		sta $0324	                    STA BIOS_LBA+2
.196651		e2 20		sep #$20	                SEP #$20        ; set A short
.196653		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.196655		85 01		sta $0321	                    STA BIOS_DEV
.196657		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.19665b		b0 09		bcs $196666	                    BCS ret_success
.19665d		22 2c 5f 19	jsl $195f2c	                    JSL FDC_Motor_Off
.196661		28		plp		                    PLP                         ; Return the failure
.196662		2b		pld		                    PLD
.196663		ab		plb		                    PLB
.196664		18		clc		                    CLC
.196665		6b		rtl		                    RTL
.196666		22 2c 5f 19	jsl $195f2c	ret_success         JSL FDC_Motor_Off
.19666a		e2 20		sep #$20	                SEP #$20        ; set A short
.19666c		a9 00		lda #$00	                    LDA #0
.19666e		85 00		sta $0320	                    STA BIOS_STATUS
.196670		28		plp		                    PLP
.196671		2b		pld		                    PLD
.196672		ab		plb		                    PLB
.196673		38		sec		                    SEC
.196674		6b		rtl		                    RTL
.196675						FDC_TIME_HANDLE
.196675		08		php		                    PHP
.196676		e2 20		sep #$20	                SEP #$20        ; set A short
.196678		af 4e a0 18	lda $18a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.19667c		d0 06		bne $196684	                    BNE dec_motor                   ; If not zero: decrement the timer
.19667e		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.196682		f0 28		beq $1966ac	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.196684		af 4e a0 18	lda $18a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.196688		3a		dec a		                    DEC A
.196689		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.19668d		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.19668f		d0 0b		bne $19669c	                    BNE chk_motor_end               ; No: check to see if we're a the end
.196691		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.196695		3a		dec a		                    DEC A
.196696		8f 4f a0 18	sta $18a04f	                    STA @l FDC_MOTOR_TIMER+1
.19669a		80 10		bra $1966ac	                    BRA sof_timeout                 ; And move on to the next timer
.19669c		af 4e a0 18	lda $18a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.1966a0		d0 0a		bne $1966ac	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.1966a2		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1
.1966a6		d0 04		bne $1966ac	                    BNE sof_timeout
.1966a8		22 2c 5f 19	jsl $195f2c	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.1966ac						sof_timeout
.1966ac		e2 20		sep #$20	                SEP #$20        ; set A short
.1966ae		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.1966b2		f0 11		beq $1966c5	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.1966b4		3a		dec a		                    DEC A                           ; Count down one tick
.1966b5		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.1966b9		d0 0a		bne $1966c5	                    BNE sof_int_done                ; If not 0, we're done
.1966bb		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.1966bf		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.1966c1		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.1966c5		28		plp		sof_int_done        PLP
.1966c6		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.1966c7						FDC_VBR_BEGIN
>1966c7		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>1966ca		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>1966d2		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>1966d4		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>1966d5		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>1966d7		02				num_fat             .byte 2                 ; Number of FATs
>1966d8		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>1966da		40 0b				total_sectors       .word 2880              ; Total sectors
>1966dc		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>1966dd		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>1966df		12 00				sec_per_track       .word 18                ; Sectors per track
>1966e1		02 00				num_head            .word 2                 ; Number of heads
>1966e3		00 00 00 00			ignore2             .dword 0
>1966e7		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>1966eb		00 00				ignore3             .word 0
>1966ed		29				boot_signature      .byte $29
>1966ee		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>1966f2		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>1966fa		20 20 20
>1966fd		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.196705		80 40		bra $196747	                    BRA vbr_start
>196707						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.196747						vbr_start
.196747		c2 20		rep #$20	                REP #$20        ; set A long
.196749		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.19674c		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.196750		a9 18 00	lda #$0018	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.196753		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.196757		22 24 11 00	jsl $001124	                    JSL F_RUN               ; And try to execute the binary file
.19675b		b0 0c		bcs $196769	                    BCS lock                ; If it returned success... lock up... I guess?
.19675d						error
.19675d		e2 20		sep #$20	                SEP #$20        ; set A short
.19675f		4b		phk		                    PHK                     ; Otherwise, print an error message
.196760		ab		plb		                    PLB
.196761		62 08 00	per $19676c	                    PER message
.196764		fa		plx		                    PLX
.196765		22 1c 10 00	jsl $00101c	                    JSL PUTS
.196769		ea		nop		lock                NOP                     ; And lock up
.19676a		80 fd		bra $196769	                    BRA lock
>19676c		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>196774		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>196784		65 20 62 69 6e 61 72 79 2e 0d 00
.19678f						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.19678f						IDE_TEST
.19678f		08		php		                PHP
.196790		c2 20		rep #$20	                REP #$20        ; set A long
.196792		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.196795		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.196799		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.19679c		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.1967a0		22 c3 68 19	jsl $1968c3	                JSL IDE_IDENTIFY
.1967a4		b0 03		bcs $1967a9	                BCS id_ok
.1967a6		82 ab 00	brl $196854	                BRL done
.1967a9						id_ok
.1967a9		c2 10		rep #$10	                REP #$10        ; set X long
.1967ab		e2 20		sep #$20	                SEP #$20        ; set A short
.1967ad		a0 28 00	ldy #$0028	                LDY #40
.1967b0		a2 36 00	ldx #$0036	                LDX #27*2
.1967b3		bf 01 a3 18	lda $18a301,x	pr_model        LDA DOS_SECTOR+1,X
.1967b7		22 18 10 00	jsl $001018	                JSL PUTC
.1967bb		bf 00 a3 18	lda $18a300,x	                LDA DOS_SECTOR,X
.1967bf		22 18 10 00	jsl $001018	                JSL PUTC
.1967c3		e8		inx		                INX
.1967c4		e8		inx		                INX
.1967c5		88		dey		                DEY
.1967c6		88		dey		                DEY
.1967c7		d0 ea		bne $1967b3	                BNE pr_model
.1967c9		c2 10		rep #$10	                REP #$10        ; set X long
.1967cb		e2 20		sep #$20	                SEP #$20        ; set A short
.1967cd		a0 14 00	ldy #$0014	                LDY #20
.1967d0		a2 14 00	ldx #$0014	                LDX #10*2
.1967d3		bf 01 a3 18	lda $18a301,x	pr_serial       LDA DOS_SECTOR+1,X
.1967d7		22 18 10 00	jsl $001018	                JSL PUTC
.1967db		bf 00 a3 18	lda $18a300,x	                LDA DOS_SECTOR,X
.1967df		22 18 10 00	jsl $001018	                JSL PUTC
.1967e3		e8		inx		                INX
.1967e4		e8		inx		                INX
.1967e5		88		dey		                DEY
.1967e6		88		dey		                DEY
.1967e7		d0 ea		bne $1967d3	                BNE pr_serial
.1967e9		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.1967ed		c2 30		rep #$30	                REP #$30        ; set A&X long
.1967ef		a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.1967f2		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.1967f6		a9 00 00	lda #$0000	                LDA #0
.1967f9		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.1967fd		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.196800		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.196804		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.196807		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.19680b		a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.19680e		a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.196811		9f 00 a3 18	sta $18a300,x	init_loop       STA DOS_SECTOR,X
.196815		e8		inx		                INX
.196816		e8		inx		                INX
.196817		e0 00 02	cpx #$0200	                CPX #512
.19681a		d0 f5		bne $196811	                BNE init_loop
.19681c		22 dc 69 19	jsl $1969dc	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.196820		b0 06		bcs $196828	                BCS read_sect1
.196822		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196826		80 2c		bra $196854	                BRA done
.196828		a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.19682b		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.19682f		a9 00 00	lda #$0000	                LDA #0
.196832		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.196836		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.196839		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.19683d		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.196840		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.196844		22 51 69 19	jsl $196951	                JSL IDE_GETBLOCK        ; Attempt to read the block
.196848		b0 06		bcs $196850	                BCS all_ok
.19684a		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.19684e		80 04		bra $196854	                BRA done
.196850						all_ok
.196850		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196854		28		plp		done            PLP
.196855		6b		rtl		                RTL
.196856						IDE_INIT
.196856		e2 20		sep #$20	                SEP #$20        ; set A short
.196858		a9 00		lda #$00	              LDA #$00
.19685a		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.19685e		20 7f 68	jsr $19687f	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.196861		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.196863		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.196867		a9 01		lda #$01	              LDA #$01
.196869		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.19686d		a9 00		lda #$00	              LDA #$00
.19686f		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.196873		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.196877		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.19687b		20 9d 68	jsr $19689d	              JSR IDE_DRV_READY_NOTBUSY
.19687e		6b		rtl		              RTL
.19687f						IDE_DRIVE_BSY
.19687f		08		php		                PHP
.196880		e2 20		sep #$20	                SEP #$20        ; set A short
.196882		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.196886		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.196888		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.19688a		f0 f6		beq $196882	                BEQ loop
.19688c		28		plp		                PLP
.19688d		60		rts		                RTS
.19688e						IDE_DRIVE_READY
.19688e		08		php		                PHP
.19688f		e2 20		sep #$20	                SEP #$20        ; set A short
.196891		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.196895		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.196897		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.196899		d0 f6		bne $196891	                BNE loop
.19689b		28		plp		                PLP
.19689c		60		rts		                RTS
.19689d						IDE_DRV_READY_NOTBUSY
.19689d		08		php		                PHP
.19689e		e2 20		sep #$20	                SEP #$20        ; set A short
.1968a0		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.1968a4		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.1968a6		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.1968a8		d0 f6		bne $1968a0	                BNE loop                            ; No: keep waiting
.1968aa		28		plp		ret_success     PLP                                 ; Return success
.1968ab		38		sec		                SEC
.1968ac		60		rts		                RTS
.1968ad		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.1968b1		28		plp		                PLP                                 ; Return failure
.1968b2		18		clc		                CLC
.1968b3		60		rts		                RTS
.1968b4						IDE_NOT_DRQ
.1968b4		08		php		                PHP
.1968b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1968b7		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.1968bb		29 08		and #$08	                AND #IDE_STAT_DRQ
.1968bd		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.1968bf		d0 f6		bne $1968b7	                BNE loop                ; No: keep waiting
.1968c1		28		plp		                PLP
.1968c2		60		rts		                RTS
.1968c3						IDE_IDENTIFY
.1968c3		5a		phy		                PHY
.1968c4		8b		phb		                PHB
.1968c5		0b		phd		                PHD
.1968c6		08		php		                PHP
.1968c7		48		pha		                PHA             ; begin setdbr macro
.1968c8		08		php		                PHP
.1968c9		e2 20		sep #$20	                SEP #$20        ; set A short
.1968cb		a9 00		lda #$00	                LDA #0
.1968cd		48		pha		                PHA
.1968ce		ab		plb		                PLB
.1968cf		28		plp		                PLP
.1968d0		68		pla		                PLA             ; end setdbr macro
.1968d1		48		pha		                PHA             ; begin setdp macro
.1968d2		08		php		                PHP
.1968d3		c2 20		rep #$20	                REP #$20        ; set A long
.1968d5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1968d8		5b		tcd		                TCD
.1968d9		28		plp		                PLP
.1968da		68		pla		                PLA             ; end setdp macro
.1968db		e2 20		sep #$20	                SEP #$20        ; set A short
.1968dd		20 9d 68	jsr $19689d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.1968e0		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.1968e2		29 07		and #$07	                AND #$07
.1968e4		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.1968e6		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.1968ea		20 9d 68	jsr $19689d	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.1968ed		e2 20		sep #$20	                SEP #$20        ; set A short
.1968ef		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.1968f1		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.1968f5		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.1968f9		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.1968fd		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.196901		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.196903		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.196907		f0 29		beq $196932	                BEQ no_media                    ; If 0: there is no drive
.196909		20 7f 68	jsr $19687f	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.19690c		20 9d 68	jsr $19689d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.19690f		90 2d		bcc $19693e	                BCC ret_failure                 ; If an error occurred, return it
.196911		c2 30		rep #$30	                REP #$30        ; set A&X long
.196913		a0 00 00	ldy #$0000	                LDY #0
.196916		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.19691a		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.19691c		c8		iny		                INY                             ; Move to the next position
.19691d		c8		iny		                INY
.19691e		c0 00 02	cpy #$0200	                CPY #512
.196921		d0 f3		bne $196916	                BNE read_loop
.196923						ret_success
.196923		e2 20		sep #$20	                SEP #$20        ; set A short
.196925		a9 00		lda #$00	                LDA #0
.196927		85 00		sta $0320	                STA BIOS_STATUS
.196929		8d 06 03	sta $0306	                STA @w FDC_ST0
.19692c		28		plp		                PLP                             ; Return success
.19692d		2b		pld		                PLD
.19692e		ab		plb		                PLB
.19692f		7a		ply		                PLY
.196930		38		sec		                SEC
.196931		6b		rtl		                RTL
.196932						no_media
.196932		e2 20		sep #$20	                SEP #$20        ; set A short
.196934		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.196936		80 0a		bra $196942	                BRA pass_failure
.196938						not_ata
.196938		e2 20		sep #$20	                SEP #$20        ; set A short
.19693a		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.19693c		80 04		bra $196942	                BRA pass_failure
.19693e						ret_failure
.19693e		e2 20		sep #$20	                SEP #$20        ; set A short
.196940		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.196942		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.196944		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196948		8d 06 03	sta $0306	                STA @w FDC_ST0
.19694b		28		plp		                PLP
.19694c		2b		pld		                PLD
.19694d		ab		plb		                PLB
.19694e		7a		ply		                PLY
.19694f		18		clc		                CLC
.196950		6b		rtl		                RTL
.196951						IDE_GETBLOCK
.196951		5a		phy		                PHY
.196952		8b		phb		                PHB
.196953		0b		phd		                PHD
.196954		08		php		                PHP
.196955		48		pha		                PHA             ; begin setdbr macro
.196956		08		php		                PHP
.196957		e2 20		sep #$20	                SEP #$20        ; set A short
.196959		a9 00		lda #$00	                LDA #0
.19695b		48		pha		                PHA
.19695c		ab		plb		                PLB
.19695d		28		plp		                PLP
.19695e		68		pla		                PLA             ; end setdbr macro
.19695f		48		pha		                PHA             ; begin setdp macro
.196960		08		php		                PHP
.196961		c2 20		rep #$20	                REP #$20        ; set A long
.196963		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.196966		5b		tcd		                TCD
.196967		28		plp		                PLP
.196968		68		pla		                PLA             ; end setdp macro
.196969		e2 20		sep #$20	                SEP #$20        ; set A short
.19696b		20 9d 68	jsr $19689d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.19696e		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.196970		29 07		and #$07	                AND #$07
.196972		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.196974		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.196978		20 9d 68	jsr $19689d	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.19697b		e2 20		sep #$20	                SEP #$20        ; set A short
.19697d		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.19697f		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.196983		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.196985		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196989		a5 03		lda $0323	                LDA BIOS_LBA+1
.19698b		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.19698f		a5 04		lda $0324	                LDA BIOS_LBA+2
.196991		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.196995		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.196997		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.19699b		ea		nop		                NOP                             ; Wait about 500ns
.19699c		ea		nop		                NOP
.19699d		ea		nop		                NOP
.19699e		ea		nop		                NOP
.19699f		20 9d 68	jsr $19689d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.1969a2		90 25		bcc $1969c9	                BCC ret_failure                 ; If an error occurred, return it
.1969a4		a0 00 00	ldy #$0000	                LDY #0
.1969a7		c2 20		rep #$20	                REP #$20        ; set A long
.1969a9		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.1969ad		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.1969af		c8		iny		                INY                             ; Move to the next position
.1969b0		c8		iny		                INY
.1969b1		c0 00 02	cpy #$0200	                CPY #512
.1969b4		d0 f3		bne $1969a9	                BNE read_loop
.1969b6		ea		nop		                NOP                             ; Wait about 500ns
.1969b7		ea		nop		                NOP
.1969b8		ea		nop		                NOP
.1969b9		ea		nop		                NOP
.1969ba						ret_success
.1969ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1969bc		a9 00		lda #$00	                LDA #0
.1969be		85 00		sta $0320	                STA BIOS_STATUS
.1969c0		8d 06 03	sta $0306	                STA @w FDC_ST0
.1969c3		28		plp		                PLP                             ; Return success
.1969c4		2b		pld		                PLD
.1969c5		ab		plb		                PLB
.1969c6		7a		ply		                PLY
.1969c7		38		sec		                SEC
.1969c8		6b		rtl		                RTL
.1969c9						ret_failure
.1969c9		e2 20		sep #$20	                SEP #$20        ; set A short
.1969cb		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.1969cf		8d 06 03	sta $0306	                STA @w FDC_ST0
.1969d2		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.1969d4		85 00		sta $0320	                STA BIOS_STATUS
.1969d6		28		plp		                PLP
.1969d7		2b		pld		                PLD
.1969d8		ab		plb		                PLB
.1969d9		7a		ply		                PLY
.1969da		18		clc		                CLC
.1969db		6b		rtl		                RTL
.1969dc						IDE_PUTBLOCK
.1969dc		5a		phy		                PHY
.1969dd		8b		phb		                PHB
.1969de		0b		phd		                PHD
.1969df		08		php		                PHP
.1969e0		48		pha		                PHA             ; begin setdbr macro
.1969e1		08		php		                PHP
.1969e2		e2 20		sep #$20	                SEP #$20        ; set A short
.1969e4		a9 00		lda #$00	                LDA #0
.1969e6		48		pha		                PHA
.1969e7		ab		plb		                PLB
.1969e8		28		plp		                PLP
.1969e9		68		pla		                PLA             ; end setdbr macro
.1969ea		48		pha		                PHA             ; begin setdp macro
.1969eb		08		php		                PHP
.1969ec		c2 20		rep #$20	                REP #$20        ; set A long
.1969ee		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1969f1		5b		tcd		                TCD
.1969f2		28		plp		                PLP
.1969f3		68		pla		                PLA             ; end setdp macro
.1969f4		e2 20		sep #$20	                SEP #$20        ; set A short
.1969f6		20 9d 68	jsr $19689d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.1969f9		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.1969fb		29 07		and #$07	                AND #$07
.1969fd		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.1969ff		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.196a03		20 9d 68	jsr $19689d	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.196a06		e2 20		sep #$20	                SEP #$20        ; set A short
.196a08		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.196a0a		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.196a0e		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.196a10		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196a14		a5 03		lda $0323	                LDA BIOS_LBA+1
.196a16		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196a1a		a5 04		lda $0324	                LDA BIOS_LBA+2
.196a1c		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.196a20		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.196a22		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.196a26		ea		nop		                NOP                             ; Wait about 500ns
.196a27		ea		nop		                NOP
.196a28		ea		nop		                NOP
.196a29		ea		nop		                NOP
.196a2a		20 9d 68	jsr $19689d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196a2d		90 37		bcc $196a66	                BCC ret_failure                 ; If an error occurred, return it
.196a2f		c2 30		rep #$30	                REP #$30        ; set A&X long
.196a31		a0 00 00	ldy #$0000	                LDY #0
.196a34		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.196a36		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.196a3a		c8		iny		                INY                             ; Move to the next position
.196a3b		c8		iny		                INY
.196a3c		c0 00 02	cpy #$0200	                CPY #512
.196a3f		d0 f3		bne $196a34	                BNE read_loop
.196a41		ea		nop		                NOP                             ; Wait about 500ns
.196a42		ea		nop		                NOP
.196a43		ea		nop		                NOP
.196a44		ea		nop		                NOP
.196a45		20 9d 68	jsr $19689d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196a48		90 1c		bcc $196a66	                BCC ret_failure                 ; If an error occurred, return it
.196a4a		ea		nop		                NOP                             ; Wait about 500ns
.196a4b		ea		nop		                NOP
.196a4c		ea		nop		                NOP
.196a4d		ea		nop		                NOP
.196a4e		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.196a52		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.196a55		d0 0f		bne $196a66	                BNE ret_failure                 ; If error: return failure
.196a57						ret_success
.196a57		e2 20		sep #$20	                SEP #$20        ; set A short
.196a59		a9 00		lda #$00	                LDA #0
.196a5b		85 00		sta $0320	                STA BIOS_STATUS
.196a5d		8d 06 03	sta $0306	                STA @w FDC_ST0
.196a60		28		plp		                PLP                             ; Return success
.196a61		2b		pld		                PLD
.196a62		ab		plb		                PLB
.196a63		7a		ply		                PLY
.196a64		38		sec		                SEC
.196a65		6b		rtl		                RTL
.196a66		ea		nop		ret_failure     NOP                             ; Wait about 500ns
.196a67		ea		nop		                NOP
.196a68		ea		nop		                NOP
.196a69		ea		nop		                NOP
.196a6a		e2 20		sep #$20	                SEP #$20        ; set A short
.196a6c		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196a70		80 08		bra $196a7a	                BRA save_error
.196a72		ea		nop		                NOP
.196a73		ea		nop		                NOP
.196a74		ea		nop		                NOP
.196a75		ea		nop		                NOP
.196a76		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196a7a		8d 06 03	sta $0306	save_error      STA @w FDC_ST0
.196a7d		a9 83		lda #$83	                LDA #BIOS_ERR_WRITE
.196a7f		85 00		sta $0320	                STA BIOS_STATUS
.196a81		28		plp		                PLP
.196a82		2b		pld		                PLD
.196a83		ab		plb		                PLB
.196a84		7a		ply		                PLY
.196a85		18		clc		                CLC
.196a86		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/Ethernet_Init_library.asm

.196a87						SIMPLE_INIT_ETHERNET_CTRL
.196a87						WaitforittobeReady:
.196a87		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.196a8b		29 01 00	and #$0001	                AND #$0001
.196a8e		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.196a91		d0 f4		bne $196a87	                BNE WaitforittobeReady
.196a93		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.196a97		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.196a9b		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.196a9f		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.196aa3		a9 00 00	lda #$0000	                LDA #$0000
.196aa6		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.196aaa		a9 00 70	lda #$7000	                LDA #$7000
.196aad		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.196ab1		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.196ab4		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.196ab8		a9 0b 00	lda #$000b	                LDA #$000B
.196abb		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.196abf		a9 00 00	lda #$0000	                LDA #$0000
.196ac2		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.196ac6		20 fa 6a	jsr $196afa	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.196ac9		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.196acc		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.196ad0		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.196ad3		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.196ad7		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.196ada		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.196ade		20 fa 6a	jsr $196afa	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.196ae1		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.196ae4		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.196ae8		a9 0c 00	lda #$000c	                LDA #$000C
.196aeb		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.196aef		a9 04 00	lda #$0004	                LDA #$0004
.196af2		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.196af6		20 fa 6a	jsr $196afa	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.196af9		6b		rtl		                RTL
.196afa						MAC_ACCESS_WAIT_FOR_COMPLETION
.196afa		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.196afd		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.196b01						WaitForCompletion:
.196b01		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.196b05		29 00 80	and #$8000	                AND #$8000
.196b08		c9 00 80	cmp #$8000	                CMP #$8000
.196b0b		f0 f4		beq $196b01	                BEQ WaitForCompletion
.196b0d		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/EXP-C200_EVID_Library.asm

=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.196b0e						EVID_IPRINT
.196b0e		22 17 6b 19	jsl $196b17	                JSL EVID_IPUTS
.196b12		22 89 6c 19	jsl $196c89	                JSL EVID_IPRINTCR
.196b16		6b		rtl		                RTL
.196b17						EVID_IPUTS
.196b17		48		pha		                PHA
.196b18		08		php		                PHP
.196b19		e2 20		sep #$20	                SEP #$20        ; set A short
.196b1b		c2 10		rep #$10	                REP #$10        ; set X long
.196b1d		bd 00 00	lda $0000,x	iputs1          LDA $0,b,x      ; read from the string
.196b20		f0 08		beq $196b2a	                BEQ iputs_done
.196b22		22 2e 6b 19	jsl $196b2e	iputs2          JSL EVID_IPUTC
.196b26		e8		inx		iputs3          INX
.196b27		4c 1d 6b	jmp $196b1d	                JMP iputs1
.196b2a		e8		inx		iputs_done      INX
.196b2b		28		plp		                PLP
.196b2c		68		pla		                PLA
.196b2d		6b		rtl		                RTL
.196b2e						EVID_IPUTC
.196b2e		da		phx		                PHX
.196b2f		5a		phy		                PHY
.196b30		0b		phd		                PHD
.196b31		8b		phb		                PHB
.196b32		08		php		                PHP                 ; stash the flags (we'll be changing M)
.196b33		48		pha		                PHA             ; begin setdp macro
.196b34		08		php		                PHP
.196b35		c2 20		rep #$20	                REP #$20        ; set A long
.196b37		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.196b3a		5b		tcd		                TCD
.196b3b		28		plp		                PLP
.196b3c		68		pla		                PLA             ; end setdp macro
.196b3d		48		pha		                PHA             ; begin setdbr macro
.196b3e		08		php		                PHP
.196b3f		e2 20		sep #$20	                SEP #$20        ; set A short
.196b41		a9 00		lda #$00	                LDA #0
.196b43		48		pha		                PHA
.196b44		ab		plb		                PLB
.196b45		28		plp		                PLP
.196b46		68		pla		                PLA             ; end setdbr macro
.196b47		e2 20		sep #$20	                SEP #$20        ; set A short
.196b49		c2 10		rep #$10	                REP #$10        ; set X long
.196b4b		c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.196b4d		f0 69		beq $196bb8	                BEQ go_down
.196b4f		c9 20		cmp #$20	                CMP #$20
.196b51		90 19		bcc $196b6c	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.196b53		c9 7f		cmp #$7f	                CMP #$7F
.196b55		f0 45		beq $196b9c	                BEQ do_del
.196b57		b0 02		bcs $196b5b	                BCS check_A0        ; [$20..$7E]: print it
.196b59		80 31		bra $196b8c	                BRA printc
.196b5b		c9 a0		cmp #$a0	check_A0        CMP #$A0
.196b5d		90 02		bcc $196b61	                BCC check_ctrl1
.196b5f		80 2b		bra $196b8c	                BRA printc          ; [$A0..$FF]: print it
.196b61		c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.196b63		f0 53		beq $196bb8	                BEQ go_down         ; ... move the cursor down one row
.196b65		c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.196b67		f0 61		beq $196bca	                BEQ go_left         ; ... move the cursor left one column
.196b69		4c 96 6b	jmp $196b96	                JMP done
.196b6c		c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.196b6e		f0 69		beq $196bd9	                BEQ do_TAB          ; ... move to the next TAB stop
.196b70		c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.196b72		f0 34		beq $196ba8	                BEQ backspace       ; ... move the cursor back and replace with a space
.196b74		c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.196b76		f0 3a		beq $196bb2	                BEQ do_cr           ; ... move cursor down and to the first column
.196b78		c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.196b7a		f0 42		beq $196bbe	                BEQ go_up           ; ... move the cursor up one row
.196b7c		c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.196b7e		f0 44		beq $196bc4	                BEQ go_right        ; ... move the cursor right one column
.196b80		c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.196b82		f0 1e		beq $196ba2	                BEQ do_ins          ; ... insert a space
.196b84		c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.196b86		f0 48		beq $196bd0	                BEQ go_sol          ; ... move the cursor to the start of the line
.196b88		c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.196b8a		f0 74		beq $196c00	                BEQ go_eol          ; ... move the cursor to the end of the line
.196b8c		87 6b		sta [$6b]	printc          STA [EVID_CURSORPOS]     ; Save the character on the screen
.196b8e		a5 72		lda $72		                LDA EVID_CURCOLOR        ; Set the color based on CURCOLOR
.196b90		87 76		sta [$76]	                STA [EVID_COLORPOS]
.196b92		22 c7 6c 19	jsl $196cc7	                JSL EVID_ICSRRIGHT       ; And advance the cursor
.196b96		28		plp		done            PLP
.196b97		ab		plb		                PLB
.196b98		2b		pld		                PLD
.196b99		7a		ply		                PLY
.196b9a		fa		plx		                PLX
.196b9b		6b		rtl		                RTL
.196b9c		22 2d 6c 19	jsl $196c2d	do_del          JSL EVID_SCRSHIFTLL      ; Shift the current line left one space into the cursor
.196ba0		80 f4		bra $196b96	                BRA done
.196ba2		22 51 6c 19	jsl $196c51	do_ins          JSL EVID_SCRSHIFTLR      ; Shift the current line right one space from the cursor
.196ba6		80 ee		bra $196b96	                BRA done
.196ba8		22 fa 6c 19	jsl $196cfa	backspace       JSL EVID_ICSRLEFT
.196bac		22 2d 6c 19	jsl $196c2d	                JSL EVID_SCRSHIFTLL      ; Shift the current line left one space into the cursor
.196bb0		80 e4		bra $196b96	                BRA done
.196bb2		22 89 6c 19	jsl $196c89	do_cr           JSL EVID_IPRINTCR        ; Move the cursor to the beginning of the next line
.196bb6		80 de		bra $196b96	                BRA done
.196bb8		22 46 6d 19	jsl $196d46	go_down         JSL EVID_ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.196bbc		80 d8		bra $196b96	                BRA done
.196bbe		22 20 6d 19	jsl $196d20	go_up           JSL EVID_ICSRUP          ; Move the cursor up one line
.196bc2		80 d2		bra $196b96	                BRA done
.196bc4		22 c7 6c 19	jsl $196cc7	go_right        JSL EVID_ICSRRIGHT       ; Move the cursor right one column
.196bc8		80 cc		bra $196b96	                BRA done
.196bca		22 fa 6c 19	jsl $196cfa	go_left         JSL EVID_ICSRLEFT        ; Move the cursor left one column
.196bce		80 c6		bra $196b96	                BRA done
.196bd0						go_sol
.196bd0		c2 20		rep #$20	                REP #$20        ; set A long
.196bd2		a2 00 00	ldx #$0000	                LDX #0
.196bd5		a4 70		ldy $70		                LDY EVID_CURSORY
.196bd7		80 21		bra $196bfa	                BRA do_locate
.196bd9						do_TAB
.196bd9		c2 20		rep #$20	                REP #$20        ; set A long
.196bdb		a5 6e		lda $6e		                LDA EVID_CURSORX         ; Get the current column
.196bdd		29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.196be0		18		clc		                CLC
.196be1		69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.196be4		aa		tax		                TAX
.196be5		a4 70		ldy $70		                LDY EVID_CURSORY
.196be7		e2 20		sep #$20	                SEP #$20        ; set A short
.196be9		e4 63		cpx $63		set_xy          CPX EVID_COLS_VISIBLE    ; Check if we're still on screen horizontally
.196beb		90 04		bcc $196bf1	                BCC check_row       ; Yes: check the row
.196bed		a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.196bf0		c8		iny		                INY                 ; ... and the next row
.196bf1		c4 67		cpy $67		check_row       CPY EVID_LINES_VISIBLE   ; Check if we're still on the screen vertically
.196bf3		90 05		bcc $196bfa	                BCC do_locate       ; Yes: reposition the cursor
.196bf5		22 b7 6d 19	jsl $196db7	                JSL EVID_ISCROLLUP       ; No: scroll the screen
.196bf9		88		dey		                DEY                 ; And set the row to the last one
.196bfa		22 6b 6d 19	jsl $196d6b	do_locate       JSL EVID_ILOCATE         ; Set the cursor position
.196bfe		80 96		bra $196b96	                BRA done
.196c00		a6 63		ldx $63		go_eol          LDX EVID_COLS_VISIBLE    ; Move the cursor to the right most column
.196c02		ca		dex		                DEX
.196c03		a4 70		ldy $70		                LDY EVID_CURSORY
.196c05		22 6b 6d 19	jsl $196d6b	                JSL EVID_ILOCATE
.196c09		e2 20		sep #$20	                SEP #$20        ; set A short
.196c0b		a7 6b		lda [$6b]	eol_loop        LDA [EVID_CURSORPOS]     ; Get the character under the cursor
.196c0d		c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.196c0f		d0 0b		bne $196c1c	                BNE eol_done        ; No: exit the loop
.196c11		22 fa 6c 19	jsl $196cfa	                JSL EVID_ICSRLEFT        ; Yes: move to the left
.196c15		a6 6e		ldx $6e		                LDX EVID_CURSORX         ; Are we at column 0?
.196c17		d0 f2		bne $196c0b	                BNE eol_loop        ; No: try again
.196c19		82 7a ff	brl $196b96	                BRL done            ; Yes: we're done
.196c1c		a6 6e		ldx $6e		eol_done        LDX EVID_CURSORX         ; Check the column
.196c1e		e8		inx		                INX
.196c1f		e4 63		cpx $63		                CPX EVID_COLS_VISIBLE    ; Is it the right most?
.196c21		d0 03		bne $196c26	                BNE eol_right
.196c23		82 70 ff	brl $196b96	                BRL done            ; Yes: we're done
.196c26		22 c7 6c 19	jsl $196cc7	eol_right       JSL EVID_ICSRRIGHT       ; No: move right one column
.196c2a		82 69 ff	brl $196b96	                BRL done
.196c2d						EVID_SCRSHIFTLL
.196c2d		da		phx		                PHX
.196c2e		5a		phy		                PHY
.196c2f		48		pha		                PHA
.196c30		0b		phd		                PHD
.196c31		08		php		                PHP
.196c32		48		pha		                PHA             ; begin setdp macro
.196c33		08		php		                PHP
.196c34		c2 20		rep #$20	                REP #$20        ; set A long
.196c36		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.196c39		5b		tcd		                TCD
.196c3a		28		plp		                PLP
.196c3b		68		pla		                PLA             ; end setdp macro
.196c3c		c2 30		rep #$30	                REP #$30        ; set A&X long
.196c3e		a5 6b		lda $6b		                LDA EVID_CURSORPOS       ; Get the current cursor position
.196c40		a8		tay		                TAY                 ; Set it as the destination
.196c41		aa		tax		                TAX
.196c42		e8		inx		                INX                 ; And set the next cell as the source
.196c43		18		clc		                CLC                 ; Calculate the length of the block to move
.196c44		a5 63		lda $63		                LDA EVID_COLS_VISIBLE    ; as columns visible - X
.196c46		e5 6e		sbc $6e		                SBC EVID_CURSORX
.196c48		54 ae ae	mvn $ae,$ae	                MVN $AE, $AE        ; And move the block
.196c4b		28		plp		                PLP
.196c4c		2b		pld		                PLD
.196c4d		68		pla		                PLA
.196c4e		7a		ply		                PLY
.196c4f		fa		plx		                PLX
.196c50		6b		rtl		                RTL
.196c51						EVID_SCRSHIFTLR
.196c51		da		phx		                PHX
.196c52		48		pha		                PHA
.196c53		0b		phd		                PHD
.196c54		08		php		                PHP
.196c55		48		pha		                PHA             ; begin setdp macro
.196c56		08		php		                PHP
.196c57		c2 20		rep #$20	                REP #$20        ; set A long
.196c59		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.196c5c		5b		tcd		                TCD
.196c5d		28		plp		                PLP
.196c5e		68		pla		                PLA             ; end setdp macro
.196c5f		c2 30		rep #$30	                REP #$30        ; set A&X long
.196c61		a5 6e		lda $6e		                LDA EVID_CURSORX         ; What column are we on
.196c63		1a		inc a		                INC A
.196c64		c5 63		cmp $63		                CMP EVID_COLS_VISIBLE    ; >= the # visible?
.196c66		b0 1b		bcs $196c83	                BGE done            ; Yes: just skip the whole thing
.196c68		38		sec		                SEC                 ; Calculate the length of the block to move
.196c69		a5 63		lda $63		                LDA EVID_COLS_VISIBLE
.196c6b		e5 6e		sbc $6e		                SBC EVID_CURSORX
.196c6d		1a		inc a		                INC A
.196c6e		18		clc		                CLC
.196c6f		65 6b		adc $6b		                ADC EVID_CURSORPOS       ; Add the current cursor position
.196c71		3a		dec a		                DEC A
.196c72		a8		tay		                TAY                 ; Make it the destination
.196c73		3a		dec a		                DEC A               ; Move to the previous column
.196c74		aa		tax		                TAX                 ; Make it the source
.196c75		38		sec		                SEC                 ; Calculate the length of the block to move
.196c76		a5 63		lda $63		                LDA EVID_COLS_VISIBLE    ; as columns visible - X
.196c78		e5 6e		sbc $6e		                SBC EVID_CURSORX
.196c7a		44 ae ae	mvp $ae,$ae	                MVP $AE, $AE        ; And move the block
.196c7d		e2 20		sep #$20	                SEP #$20        ; set A short
.196c7f		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.196c81		87 6b		sta [$6b]	                STA [EVID_CURSORPOS]
.196c83		28		plp		done            PLP
.196c84		2b		pld		                PLD
.196c85		68		pla		                PLA
.196c86		fa		plx		                PLX
.196c87		6b		rtl		                RTL
.196c88						EVID_IPUTB
.196c88		6b		rtl		                RTL
.196c89						EVID_IPRINTCR
.196c89		da		phx		                PHX
.196c8a		5a		phy		                PHY
.196c8b		8b		phb		                PHB
.196c8c		0b		phd		                PHD
.196c8d		08		php		                PHP
.196c8e		48		pha		                PHA             ; begin setdbr macro
.196c8f		08		php		                PHP
.196c90		e2 20		sep #$20	                SEP #$20        ; set A short
.196c92		a9 00		lda #$00	                LDA #0
.196c94		48		pha		                PHA
.196c95		ab		plb		                PLB
.196c96		28		plp		                PLP
.196c97		68		pla		                PLA             ; end setdbr macro
.196c98		48		pha		                PHA             ; begin setdp macro
.196c99		08		php		                PHP
.196c9a		c2 20		rep #$20	                REP #$20        ; set A long
.196c9c		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.196c9f		5b		tcd		                TCD
.196ca0		28		plp		                PLP
.196ca1		68		pla		                PLA             ; end setdp macro
.196ca2		e2 20		sep #$20	                SEP #$20        ; set A short
.196ca4		c2 10		rep #$10	                REP #$10        ; set X long
.196ca6		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.196ca9		a4 70		ldy $70		                LDY EVID_CURSORY
.196cab		c8		iny		                INY
.196cac		22 6b 6d 19	jsl $196d6b	                JSL EVID_ILOCATE
.196cb0		28		plp		done            PLP
.196cb1		2b		pld		                PLD
.196cb2		ab		plb		                PLB
.196cb3		7a		ply		                PLY
.196cb4		fa		plx		                PLX
.196cb5		6b		rtl		                RTL
.196cb6						EVID_ICSRHOME
.196cb6		da		phx		                PHX
.196cb7		5a		phy		                PHY
.196cb8		08		php		                PHP
.196cb9		a2 00 00	ldx #$0000	                LDX #0
.196cbc		a0 00 00	ldy #$0000	                LDY #0
.196cbf		22 6b 6d 19	jsl $196d6b	                JSL EVID_ILOCATE
.196cc3		28		plp		                PLP
.196cc4		7a		ply		                PLY
.196cc5		fa		plx		                PLX
.196cc6		6b		rtl		                RTL
.196cc7						EVID_ICSRRIGHT
.196cc7		da		phx		                PHX
.196cc8		5a		phy		                PHY
.196cc9		48		pha		                PHA
.196cca		0b		phd		                PHD
.196ccb		08		php		                PHP
.196ccc		c2 20		rep #$20	                REP #$20        ; set A long
.196cce		c2 10		rep #$10	                REP #$10        ; set X long
.196cd0		48		pha		                PHA             ; begin setdp macro
.196cd1		08		php		                PHP
.196cd2		c2 20		rep #$20	                REP #$20        ; set A long
.196cd4		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.196cd7		5b		tcd		                TCD
.196cd8		28		plp		                PLP
.196cd9		68		pla		                PLA             ; end setdp macro
.196cda		a6 6e		ldx $6e		                LDX EVID_CURSORX           ; Get the new column
.196cdc		e8		inx		                INX
.196cdd		a4 70		ldy $70		                LDY EVID_CURSORY           ; Get the current row
.196cdf		e4 63		cpx $63		                CPX EVID_COLS_VISIBLE      ; Are we off screen?
.196ce1		90 0d		bcc $196cf0	                BCC icsrright_nowrap  ; No: just set the position
.196ce3		a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.196ce6		c8		iny		                INY                   ; And move to the next row
.196ce7		c4 67		cpy $67		                CPY EVID_LINES_VISIBLE     ; Are we still off screen?
.196ce9		90 05		bcc $196cf0	                BCC icsrright_nowrap  ; No: just set the position
.196ceb		88		dey		                DEY                   ; Yes: lock to the last row
.196cec		22 b7 6d 19	jsl $196db7	                JSL EVID_ISCROLLUP         ; But scroll the screen up
.196cf0						icsrright_nowrap
.196cf0		22 6b 6d 19	jsl $196d6b	                JSL EVID_ILOCATE           ; Set the cursor position
.196cf4		28		plp		                PLP
.196cf5		2b		pld		                PLD
.196cf6		68		pla		                PLA
.196cf7		7a		ply		                PLY
.196cf8		fa		plx		                PLX
.196cf9		6b		rtl		                RTL
.196cfa						EVID_ICSRLEFT
.196cfa		da		phx		                PHX
.196cfb		5a		phy		                PHY
.196cfc		48		pha		                PHA
.196cfd		0b		phd		                PHD
.196cfe		08		php		                PHP
.196cff		c2 30		rep #$30	                REP #$30        ; set A&X long
.196d01		48		pha		                PHA             ; begin setdp macro
.196d02		08		php		                PHP
.196d03		c2 20		rep #$20	                REP #$20        ; set A long
.196d05		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.196d08		5b		tcd		                TCD
.196d09		28		plp		                PLP
.196d0a		68		pla		                PLA             ; end setdp macro
.196d0b		a5 6e		lda $6e		                LDA EVID_CURSORX
.196d0d		f0 0b		beq $196d1a	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.196d0f		a6 6e		ldx $6e		                LDX EVID_CURSORX
.196d11		ca		dex		                DEX
.196d12		86 6e		stx $6e		                STX EVID_CURSORX
.196d14		a4 70		ldy $70		                LDY EVID_CURSORY
.196d16		22 6b 6d 19	jsl $196d6b	                JSL EVID_ILOCATE
.196d1a						icsrleft_done_already_zero
.196d1a		28		plp		                PLP
.196d1b		2b		pld		                PLD
.196d1c		68		pla		                PLA
.196d1d		7a		ply		                PLY
.196d1e		fa		plx		                PLX
.196d1f		6b		rtl		                RTL
.196d20						EVID_ICSRUP
.196d20		da		phx		                PHX
.196d21		5a		phy		                PHY
.196d22		48		pha		                PHA
.196d23		0b		phd		                PHD
.196d24		08		php		                PHP
.196d25		c2 30		rep #$30	                REP #$30        ; set A&X long
.196d27		48		pha		                PHA             ; begin setdp macro
.196d28		08		php		                PHP
.196d29		c2 20		rep #$20	                REP #$20        ; set A long
.196d2b		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.196d2e		5b		tcd		                TCD
.196d2f		28		plp		                PLP
.196d30		68		pla		                PLA             ; end setdp macro
.196d31		a5 70		lda $70		                LDA EVID_CURSORY
.196d33		f0 0b		beq $196d40	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.196d35		a4 70		ldy $70		                LDY EVID_CURSORY
.196d37		88		dey		                DEY
.196d38		84 70		sty $70		                STY EVID_CURSORY
.196d3a		a6 6e		ldx $6e		                LDX EVID_CURSORX
.196d3c		22 6b 6d 19	jsl $196d6b	                JSL EVID_ILOCATE
.196d40						isrup_done_already_zero
.196d40		28		plp		                PLP
.196d41		2b		pld		                PLD
.196d42		68		pla		                PLA
.196d43		7a		ply		                PLY
.196d44		fa		plx		                PLX
.196d45		6b		rtl		                RTL
.196d46						EVID_ICSRDOWN
.196d46		da		phx		                PHX
.196d47		5a		phy		                PHY
.196d48		0b		phd		                PHD
.196d49		c2 30		rep #$30	                REP #$30        ; set A&X long
.196d4b		48		pha		                PHA             ; begin setdp macro
.196d4c		08		php		                PHP
.196d4d		c2 20		rep #$20	                REP #$20        ; set A long
.196d4f		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.196d52		5b		tcd		                TCD
.196d53		28		plp		                PLP
.196d54		68		pla		                PLA             ; end setdp macro
.196d55		a6 6e		ldx $6e		                LDX EVID_CURSORX                 ; Get the current column
.196d57		a4 70		ldy $70		                LDY EVID_CURSORY                 ; Get the new row
.196d59		c8		iny		                INY
.196d5a		c4 67		cpy $67		                CPY EVID_LINES_VISIBLE           ; Check to see if we're off screen
.196d5c		90 05		bcc $196d63	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.196d5e		88		dey		                DEY                         ; Yes: go back to the last row
.196d5f		22 b7 6d 19	jsl $196db7	                JSL EVID_ISCROLLUP               ; But scroll the screen up
.196d63						icsrdown_noscroll
.196d63		22 6b 6d 19	jsl $196d6b	                JSL EVID_ILOCATE                 ; And set the cursor position
.196d67		2b		pld		                PLD
.196d68		7a		ply		                PLY
.196d69		fa		plx		                PLX
.196d6a		6b		rtl		                RTL
.196d6b						EVID_ILOCATE
.196d6b		48		pha		                PHA
.196d6c		0b		phd		                PHD
.196d6d		08		php		                PHP
.196d6e		48		pha		                PHA             ; begin setdp macro
.196d6f		08		php		                PHP
.196d70		c2 20		rep #$20	                REP #$20        ; set A long
.196d72		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.196d75		5b		tcd		                TCD
.196d76		28		plp		                PLP
.196d77		68		pla		                PLA             ; end setdp macro
.196d78		c2 30		rep #$30	                REP #$30        ; set A&X long
.196d7a						ilocate_scroll
.196d7a		c4 67		cpy $67		                CPY EVID_LINES_VISIBLE
.196d7c		90 07		bcc $196d85	                BCC ilocate_scrolldone
.196d7e		22 b7 6d 19	jsl $196db7	                JSL EVID_ISCROLLUP
.196d82		88		dey		                DEY
.196d83		80 f5		bra $196d7a	                BRA ilocate_scroll
.196d85						ilocate_scrolldone
.196d85		86 6e		stx $6e		                STX EVID_CURSORX
.196d87		84 70		sty $70		                STY EVID_CURSORY
.196d89		a5 60		lda $60		                LDA EVID_SCREENBEGIN
.196d8b						ilocate_row
.196d8b		c0 00 00	cpy #$0000	                CPY #$0
.196d8e		f0 08		beq $196d98	                BEQ ilocate_right
.196d90		18		clc		ilocate_down    CLC
.196d91		65 65		adc $65		                ADC EVID_COLS_PER_LINE
.196d93		88		dey		                DEY
.196d94		f0 02		beq $196d98	                BEQ ilocate_right
.196d96		80 f8		bra $196d90	                BRA ilocate_down
.196d98		18		clc		ilocate_right   CLC
.196d99		65 6e		adc $6e		                ADC EVID_CURSORX             ; move the cursor right X columns
.196d9b		85 6b		sta $6b		                STA EVID_CURSORPOS
.196d9d		a4 70		ldy $70		                LDY EVID_CURSORY
.196d9f		98		tya		                TYA
.196da0		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.196da4		8a		txa		                TXA
.196da5		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.196da9		c2 20		rep #$20	                REP #$20        ; set A long
.196dab		18		clc		                CLC
.196dac		a5 6b		lda $6b		                LDA EVID_CURSORPOS
.196dae		69 00 20	adc #$2000	                ADC #<>(EVID_COLOR_MEM - EVID_TEXT_MEM)
.196db1		85 76		sta $76		                STA EVID_COLORPOS
.196db3		28		plp		ilocate_done    PLP
.196db4		2b		pld		                PLD
.196db5		68		pla		                PLA
.196db6		6b		rtl		                RTL
.196db7						EVID_ISCROLLUP
.196db7		48		pha		                PHA
.196db8		da		phx		                PHX
.196db9		5a		phy		                PHY
.196dba		8b		phb		                PHB
.196dbb		0b		phd		                PHD
.196dbc		08		php		                PHP
.196dbd		48		pha		                PHA             ; begin setdp macro
.196dbe		08		php		                PHP
.196dbf		c2 20		rep #$20	                REP #$20        ; set A long
.196dc1		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.196dc4		5b		tcd		                TCD
.196dc5		28		plp		                PLP
.196dc6		68		pla		                PLA             ; end setdp macro
.196dc7		c2 30		rep #$30	                REP #$30        ; set A&X long
.196dc9		a5 65		lda $65		                LDA EVID_COLS_PER_LINE
.196dcb		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.196dcf		a5 67		lda $67		                LDA EVID_LINES_VISIBLE
.196dd1		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.196dd5		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.196dd9		85 79		sta $79		                STA EVID_TMPPTR1
.196ddb		18		clc		                CLC
.196ddc		a9 00 20	lda #$2000	                LDA #$2000
.196ddf		a8		tay		                TAY
.196de0		65 65		adc $65		                ADC EVID_COLS_PER_LINE
.196de2		aa		tax		                TAX
.196de3		a5 79		lda $79		                LDA EVID_TMPPTR1
.196de5		54 ae ae	mvn $ae,$ae	                MVN $AE,$AE
.196de8		c2 30		rep #$30	                REP #$30        ; set A&X long
.196dea		18		clc		                CLC
.196deb		a9 00 40	lda #$4000	                LDA #$4000
.196dee		a8		tay		                TAY
.196def		65 65		adc $65		                ADC EVID_COLS_PER_LINE
.196df1		aa		tax		                TAX
.196df2		a5 79		lda $79		                LDA EVID_TMPPTR1
.196df4		54 ae ae	mvn $ae,$ae	                MVN $AE,$AE
.196df7		a5 79		lda $79		                LDA EVID_TMPPTR1
.196df9		48		pha		                PHA
.196dfa		18		clc		                CLC
.196dfb		69 00 20	adc #$2000	                ADC #<>EVID_TEXT_MEM
.196dfe		85 79		sta $79		                STA EVID_TMPPTR1
.196e00		a0 00 00	ldy #$0000	                LDY #0
.196e03		a9 20 00	lda #$0020	                LDA #' '
.196e06		97 79		sta [$79],y	clr_text        STA [EVID_TMPPTR1],Y
.196e08		c8		iny		                INY
.196e09		c4 63		cpy $63		                CPY EVID_COLS_VISIBLE
.196e0b		d0 f9		bne $196e06	                BNE clr_text
.196e0d		68		pla		                PLA
.196e0e		18		clc		                CLC
.196e0f		69 00 40	adc #$4000	                ADC #<>EVID_COLOR_MEM
.196e12		85 79		sta $79		                STA EVID_TMPPTR1
.196e14		a0 00 00	ldy #$0000	                LDY #0
.196e17		a5 72		lda $72		                LDA EVID_CURCOLOR
.196e19		97 79		sta [$79],y	clr_color       STA [EVID_TMPPTR1],Y
.196e1b		c8		iny		                INY
.196e1c		c4 63		cpy $63		                CPY EVID_COLS_VISIBLE
.196e1e		d0 f9		bne $196e19	                BNE clr_color
.196e20		28		plp		                PLP
.196e21		2b		pld		                PLD
.196e22		ab		plb		                PLB
.196e23		7a		ply		                PLY
.196e24		fa		plx		                PLX
.196e25		68		pla		                PLA
.196e26		6b		rtl		                RTL
.196e27						EVID_IPRINTH
.196e27		08		php		                PHP
.196e28		48		pha		                PHA
.196e29						iprinth1
.196e29		e2 20		sep #$20	                SEP #$20        ; set A short
.196e2b		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.196e2e		4a		lsr a		                LSR
.196e2f		4a		lsr a		                LSR
.196e30		4a		lsr a		                LSR
.196e31		4a		lsr a		                LSR
.196e32		22 81 6e 19	jsl $196e81	                JSL EVID_iprint_digit
.196e36		bd 00 00	lda $0000,x	                LDA #0,b,x
.196e39		22 81 6e 19	jsl $196e81	                JSL EVID_iprint_digit
.196e3d		ca		dex		                DEX
.196e3e		88		dey		                DEY
.196e3f		d0 e8		bne $196e29	                BNE iprinth1
.196e41		68		pla		                PLA
.196e42		28		plp		                PLP
.196e43		6b		rtl		                RTL
.196e44						EVID_IPRINTAH
.196e44		48		pha		                PHA
.196e45		08		php		                PHP
.196e46		8f 44 02 00	sta $000244	                STA @lCPUA              ; Save A where we can use it multiple times
.196e4a		08		php		                PHP                     ; Get the processor status into A
.196e4b		e2 20		sep #$20	                SEP #$20        ; set A short
.196e4d		c2 10		rep #$10	                REP #$10        ; set X long
.196e4f		68		pla		                PLA
.196e50		29 20		and #$20	                AND #%00100000          ; Is M = 1?
.196e52		c9 20		cmp #$20	                CMP #%00100000
.196e54		f0 14		beq $196e6a	                BEQ eight_bit
.196e56		af 45 02 00	lda $000245	                LDA @lCPUA+1            ; Get nibble [15..12]
.196e5a		4a		lsr a		                LSR A
.196e5b		4a		lsr a		                LSR A
.196e5c		4a		lsr a		                LSR A
.196e5d		4a		lsr a		                LSR A
.196e5e		22 81 6e 19	jsl $196e81	                JSL EVID_iprint_digit   ; And print it
.196e62		af 45 02 00	lda $000245	                LDA @lCPUA+1            ; Get nibble [11..8]
.196e66		22 81 6e 19	jsl $196e81	                JSL EVID_iprint_digit   ; And print it
.196e6a		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA              ; Get nibble [7..4]
.196e6e		4a		lsr a		                LSR A
.196e6f		4a		lsr a		                LSR A
.196e70		4a		lsr a		                LSR A
.196e71		4a		lsr a		                LSR A
.196e72		22 81 6e 19	jsl $196e81	                JSL EVID_iprint_digit   ; And print it
.196e76		af 44 02 00	lda $000244	                LDA @lCPUA              ; Get nibble [3..0]
.196e7a		22 81 6e 19	jsl $196e81	                JSL EVID_iprint_digit   ; And print it
.196e7e		28		plp		                PLP
.196e7f		68		pla		                PLA
.196e80		6b		rtl		                RTL
.196e81						EVID_iprint_digit
.196e81		da		phx		                PHX
.196e82		c2 20		rep #$20	                REP #$20        ; set A long
.196e84		29 0f 00	and #$000f	                AND #$0F
.196e87		aa		tax		                TAX
.196e88		bf 79 88 19	lda $198879,x	                LDA hex_digits,X
.196e8c		22 2e 6b 19	jsl $196b2e	                JSL EVID_IPUTC       ; Print the digit
.196e90		fa		plx		                PLX
.196e91		6b		rtl		                RTL
.196e92						INIT_EVID_VID_MODE
.196e92		e2 20		sep #$20	                SEP #$20        ; set A short
.196e94		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable          ; 0 - 80x60, 1- 100x75
.196e96		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.196e9a		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable           ; Enable the Border
.196e9c		8f 04 1e ae	sta $ae1e04	                STA EVID_BORDER_CTRL_REG
.196ea0		a9 08		lda #$08	                LDA #8                           ; Set the border to the standard 8 pixels
.196ea2		8f 08 1e ae	sta $ae1e08	                STA EVID_BORDER_X_SIZE          ; Let's use maximum space
.196ea6		8f 09 1e ae	sta $ae1e09	                STA EVID_BORDER_Y_SIZE
.196eaa		a9 20		lda #$20	                LDA #$20
.196eac		8f 07 1e ae	sta $ae1e07	                STA EVID_BORDER_COLOR_R        ; R
.196eb0		a9 00		lda #$00	                LDA #$00
.196eb2		8f 06 1e ae	sta $ae1e06	                STA EVID_BORDER_COLOR_G        ; G
.196eb6		a9 20		lda #$20	                LDA #$20
.196eb8		8f 05 1e ae	sta $ae1e05	                STA EVID_BORDER_COLOR_B        ; B
.196ebc		22 8e 6f 19	jsl $196f8e	                JSL INIT_EVID_EVID_LUT
.196ec0		22 77 6f 19	jsl $196f77	                JSL INIT_EVID_EVID_FONTSET
.196ec4		22 b2 6f 19	jsl $196fb2	                JSL INIT_EVID_EVID_CURSOR
.196ec8		c2 30		rep #$30	                REP #$30        ; set A&X long
.196eca		a2 62 00	ldx #$0062	                LDX #(100-2)
.196ecd		86 63		stx $63		                STX EVID_COLS_VISIBLE
.196ecf		a0 49 00	ldy #$0049	                LDY #(75-2)
.196ed2		84 67		sty $67		                STY EVID_LINES_VISIBLE
.196ed4		a2 64 00	ldx #$0064	                LDX #100
.196ed7		86 65		stx $65		                STX EVID_COLS_PER_LINE
.196ed9		a0 4b 00	ldy #$004b	                LDY #75
.196edc		84 69		sty $69		                STY EVID_LINES_MAX
.196ede		a9 70 00	lda #$0070	                LDA #$70                  ; Set the default text color to light gray on dark gray
.196ee1		85 72		sta $72		                STA EVID_CURCOLOR
.196ee3		c2 30		rep #$30	                REP #$30        ; set A&X long
.196ee5		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM      ; store the initial screen buffer location
.196ee8		85 60		sta $60		                STA EVID_SCREENBEGIN
.196eea		85 6b		sta $6b		                STA EVID_CURSORPOS
.196eec		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM   ; Set the initial COLOR cursor position
.196eef		85 76		sta $76		                STA EVID_COLORPOS
.196ef1		e2 20		sep #$20	                SEP #$20        ; set A short
.196ef3		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.196ef5		85 0e		sta $0e		                STA SCREENBEGIN + 2
.196ef7		85 6d		sta $6d		                STA EVID_CURSORPOS+2
.196ef9		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM    ; Set the initial COLOR cursor position
.196efb		85 78		sta $78		                STA EVID_COLORPOS + 2
.196efd		22 d0 6f 19	jsl $196fd0	                JSL INIT_EVID_EVID_CLRSCREEN
.196f01		c2 10		rep #$10	                REP #$10        ; set X long
.196f03		0b		phd		                PHD
.196f04		48		pha		                PHA             ; begin setdbr macro
.196f05		08		php		                PHP
.196f06		e2 20		sep #$20	                SEP #$20        ; set A short
.196f08		a9 19		lda #$19	                LDA #`EVID_DEV_RDY0
.196f0a		48		pha		                PHA
.196f0b		ab		plb		                PLB
.196f0c		28		plp		                PLP
.196f0d		68		pla		                PLA             ; end setdbr macro
.196f0e		a2 2f 6f	ldx #$6f2f	                LDX #<>EVID_DEV_RDY0
.196f11		22 0e 6b 19	jsl $196b0e	                JSL EVID_IPRINT
.196f15		a2 5f 6f	ldx #$6f5f	                LDX #<>EVID_DEV_RDY1
.196f18		22 0e 6b 19	jsl $196b0e	                JSL EVID_IPRINT
.196f1c		2b		pld		                PLD
.196f1d		a2 00 00	ldx #$0000	                LDX #$0000
.196f20						LifeIsFullOfColors:
.196f20		bf 55 6f 19	lda $196f55,x	                LDA @l EVID_DEV_RDY0_CLR, X
.196f24		9f 00 40 ae	sta $ae4000,x	                STA @l EVID_COLOR_MEM, X
.196f28		e8		inx		                INX
.196f29		e0 0a 00	cpx #$000a	                CPX #10
.196f2c		d0 f2		bne $196f20	                BNE LifeIsFullOfColors
.196f2e		6b		rtl		                RTL
>196f2f		0b 0c 0b 0c 0b 0c 0b 0c		EVID_DEV_RDY0  .null $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "C256 Foenix EXP-C200-EVID", $0D
>196f37		0b 0c 20 43 32 35 36 20 46 6f 65 6e 69 78 20 45
>196f47		58 50 2d 43 32 30 30 2d 45 56 49 44 0d 00
>196f55		1d 1d 8d 8d 4d 4d 2d 2d		EVID_DEV_RDY0_CLR .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D
>196f5d		5d 5d
>196f5f		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1  .null "Your Device is Ready..."
>196f67		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
=100						TXTLINESIZE = 100
.196f77						INIT_EVID_EVID_FONTSET
.196f77		e2 20		sep #$20	                SEP #$20        ; set A short
.196f79		c2 10		rep #$10	                REP #$10        ; set X long
.196f7b		a2 00 00	ldx #$0000	                LDX #$0000
.196f7e						initFontsetbranch0
.196f7e		bf 00 00 1f	lda $1f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.196f82		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X ; Vicky FONT RAM Bank
.196f86		e8		inx		                INX
.196f87		e0 00 08	cpx #$0800	                CPX #$0800
.196f8a		d0 f2		bne $196f7e	                BNE initFontsetbranch0
.196f8c		ea		nop		                NOP
.196f8d		6b		rtl		                RTL
.196f8e						INIT_EVID_EVID_LUT
.196f8e		e2 20		sep #$20	                SEP #$20        ; set A short
.196f90		e2 10		sep #$10	                SEP #$10        ; set X short
.196f92		a2 00		ldx #$00					        LDX	#$00
.196f94		bf a8 85 19	lda $1985a8,x	lutinitloop0	LDA @lfg_color_lut,x		; get Local Data c64_character_Color_LUT_4_Txt
.196f98		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	; Write in LUT Memory
.196f9c		e8		inx		                inx
.196f9d		e0 40		cpx #$40	                cpx #$40
.196f9f		d0 f3		bne $196f94	                bne lutinitloop0
.196fa1		a2 00		ldx #$00	                LDX	#$00
.196fa3		bf e8 85 19	lda $1985e8,x	lutinitloop1	LDA @lbg_color_lut,x		; get Local Data
.196fa7		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	; Write in LUT Memory
.196fab		e8		inx		                INX
.196fac		e0 40		cpx #$40	                CPX #$40
.196fae		d0 f3		bne $196fa3	                bne lutinitloop1
.196fb0		ea		nop		                NOP
.196fb1		6b		rtl		                RTL
.196fb2						INIT_EVID_EVID_CURSOR
.196fb2		e2 20		sep #$20	                SEP #$20        ; set A short
.196fb4		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.196fb6		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.196fba		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0)      ;Set Cursor Enable And Flash Rate @1Hz
.196fbc		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG ;
.196fc0		c2 30		rep #$30	                REP #$30        ; set A&X long
.196fc2		a9 00 00	lda #$0000	                LDA #$0000;
.196fc5		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L ;; // Set the X to Position 1
.196fc9		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L ; // Set the Y to Position 6 (Below)
.196fcd		e2 20		sep #$20	                SEP #$20        ; set A short
.196fcf		6b		rtl		                RTL
.196fd0						INIT_EVID_EVID_CLRSCREEN
.196fd0		e2 20		sep #$20	                SEP #$20        ; set A short
.196fd2		c2 10		rep #$10	                REP #$10        ; set X long
.196fd4		a2 00 00	ldx #$0000	                LDX #$0000		; Only Use One Pointer
.196fd7		a9 20		lda #$20	                LDA #$20		; Fill the Entire Screen with Space
.196fd9		9f 00 20 ae	sta $ae2000,x	iclearloop0	    STA EVID_TEXT_MEM, x	;
.196fdd		e8		inx		                inx
.196fde		e0 00 20	cpx #$2000	                cpx #$2000
.196fe1		d0 f6		bne $196fd9	                bne iclearloop0
.196fe3		a2 00 00	ldx #$0000	                LDX	#$0000		; Only Use One Pointer
.196fe6		a9 f0		lda #$f0	                LDA #$F0		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.196fe8		9f 00 40 ae	sta $ae4000,x	iclearloop1	    STA EVID_COLOR_MEM, x	;
.196fec		e8		inx		                inx
.196fed		e0 00 20	cpx #$2000	                cpx #$2000
.196ff0		d0 f6		bne $196fe8	                bne iclearloop1
.196ff2		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/ansi_screens.asm

.0000						S_ANSI_VARS
>0000						SCREENBEGIN         .long ?     ; Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>0003						COLS_VISIBLE        .word ?     ; Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>0005						COLS_PER_LINE       .word ?     ; Columns in memory per screen line. A virtual line can be this long. Default=128
>0007						LINES_VISIBLE       .word ?     ; The number of rows visible on the screen. Default=25
>0009						LINES_MAX           .word ?     ; The number of rows in memory for the screen. Default=64
>000b						CURSORPOS           .long ?     ; The next character written to the screen will be written in this location.
>000e						CURSORX             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0010						CURSORY             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0012						CURCOLOR            .byte ?     ; Color of next character to be printed to the screen.
>0013						COLORPOS            .long ?     ; Address of cursor's position in the color matrix
>0016						COLORBEGIN          .long ?     ; Address of the first byte of the color matrix for this screen
>0019						TMPPTR1             .dword ?    ; Temporary pointer
>001d						STATE               .byte ?     ; State of the escape code parser
>001e						CONTROL             .byte ?     ; Control bit
>001f						ARGC                .byte ?     ; The number of arguments provided by the escape sequence (max 2)
>0020						ARG0                .byte ?     ; First ANSI code argument
>0021						ARG1                .byte ?     ; Second ANSI code argument
=0						ST_INIT = 0             ; Starting state for the ANSI code parser. Most characters just print
=1						ST_ESCAPE = 1           ; ESC has been seen
=2						ST_CSI = 2              ; Full CSI has been seen "ESC ["
=2						ANSI_MAX_ARG = 2        ; We'll limit ourselves to two arguments
=$70						ANSI_DEF_COLOR = $70    ; Default color (dim white on dim black)
=$80						CONTROL_INVERT = $80    ; Control bit: Colors are inverted
=$40						CONTROL_BOLD = $40      ; Control bit: Colors should be intense
.196ff3						ANSI_INIT
.196ff3		da		phx		                    PHX
.196ff4		5a		phy		                    PHY
.196ff5		8b		phb		                    PHB
.196ff6		0b		phd		                    PHD
.196ff7		08		php		                    PHP
.196ff8		c2 30		rep #$30	                REP #$30        ; set A&X long
.196ffa		a0 00 00	ldy #$0000	                    LDY #0
.196ffd		22 a6 70 19	jsl $1970a6	                    JSL INIT_SCREEN_Y               ; Set up the main screen
.197001		e2 20		sep #$20	                SEP #$20        ; set A short
.197003		af 87 e8 af	lda $afe887	                    LDA @l GABE_SYS_STAT            ; Let's check the Presence of an Expansion Card here
.197007		29 10		and #$10	                    AND #GABE_SYS_STAT_EXP          ; When there is a Card the Value is 1
.197009		c9 10		cmp #$10	                    CMP #GABE_SYS_STAT_EXP
.19700b		d0 1c		bne $197029	                    BNE no_evid
.19700d		c2 20		rep #$20	                REP #$20        ; set A long
.19700f		af 12 00 ae	lda $ae0012	                    LDA @l ESID_ID_CARD_ID_Lo       ; Load the Card ID and check for C100 or C200
.197013		c9 c8 00	cmp #$00c8	                    CMP #$00C8                      ; Is it the EVID card?
.197016		d0 11		bne $197029	                    BNE no_evid                     ; No: mark the EVID screen as not present
.197018		e2 20		sep #$20	                SEP #$20        ; set A short
.19701a		a9 01		lda #$01	                    LDA #1                          ; Otherwise: Mark that there is an EVID present
.19701c		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.197020		a0 01 00	ldy #$0001	                    LDY #1
.197023		22 a6 70 19	jsl $1970a6	                    JSL INIT_SCREEN_Y               ; Initialize the EVID screen variables
.197027		80 08		bra $197031	                    BRA done
.197029						no_evid
.197029		e2 20		sep #$20	                SEP #$20        ; set A short
.19702b		a9 00		lda #$00	                    LDA #0                          ; Mark that there is no EVID present
.19702d		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.197031		28		plp		done                PLP
.197032		2b		pld		                    PLD
.197033		ab		plb		                    PLB
.197034		7a		ply		                    PLY
.197035		fa		plx		                    PLX
.197036		6b		rtl		                    RTL
.197037						ANSI_INIT_LUTS
.197037		08		php		                    PHP
.197038		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19703a		a2 00		ldx #$00	                    LDX #0
.19703c		bd 66 70	lda $197066,x	vicky_loop          LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.19703f		9f 40 1f af	sta $af1f40,x	                    STA @l FG_CHAR_LUT_PTR,X        ; Set the corresponding foreground color component on Vicky
.197043		9f 80 1f af	sta $af1f80,x	                    STA @l BG_CHAR_LUT_PTR,X        ; Set the corresponding background color component on Vicky
.197047		e8		inx		                    INX
.197048		e0 40		cpx #$40	                    CPX #4*16
.19704a		d0 f0		bne $19703c	                    BNE vicky_loop
.19704c		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Check to see if EVID is present
.197050		f0 12		beq $197064	                    BEQ done                        ; If not, we're done
.197052		a2 00		ldx #$00	                    LDX #0
.197054		bd 66 70	lda $197066,x	evid_loop           LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.197057		9f 00 1b ae	sta $ae1b00,x	                    STA @l EVID_FG_LUT,X            ; Set the corresponding foreground color component on the EVID card
.19705b		9f 40 1b ae	sta $ae1b40,x	                    STA @l EVID_BG_LUT,X            ; Set the corresponding background color component on the EVID card
.19705f		e8		inx		                    INX
.197060		e0 40		cpx #$40	                    CPX #4*16
.197062		d0 f0		bne $197054	                    BNE evid_loop
.197064		28		plp		done                PLP
.197065		6b		rtl		                    RTL
.197066						ANSI_TEXT_LUT
>197066		00 00 00 00			                    .byte 0, 0, 0, 0
>19706a		00 00 80 00			                    .byte 0, 0, 128, 0
>19706e		00 80 00 00			                    .byte 0, 128, 0, 0
>197072		00 80 80 00			                    .byte 0, 128, 128, 0
>197076		80 00 00 00			                    .byte 128, 0, 0, 0
>19707a		80 00 80 00			                    .byte 128, 0, 128, 0
>19707e		80 80 00 00			                    .byte 128, 128, 0, 0
>197082		c0 c0 c0 00			                    .byte 192, 192, 192, 0
>197086		80 80 80 00			                    .byte 128, 128, 128, 0
>19708a		00 00 ff 00			                    .byte 0, 0, 255, 0
>19708e		00 ff 00 00			                    .byte 0, 255, 0, 0
>197092		00 ff ff 00			                    .byte 0, 255, 255, 0
>197096		ff 00 00 00			                    .byte 255, 0, 0, 0
>19709a		00 7f fc 00			                    .byte 0, 127, 252, 0
>19709e		ff ff 00 00			                    .byte 255, 255, 0, 0
>1970a2		ff ff ff 00			                    .byte 255, 255, 255, 0
.1970a6						INIT_SCREEN_Y
.1970a6		c2 30		rep #$30	                REP #$30        ; set A&X long
.1970a8		c0 00 00	cpy #$0000	                    CPY #0
.1970ab		f0 06		beq $1970b3	                    BEQ setdp_0
.1970ad		a9 60 00	lda #$0060	setdp_1             LDA #<>EVID_SCREENBEGIN         ; Set DP to the EVID variable block
.1970b0		5b		tcd		                    TCD
.1970b1		80 04		bra $1970b7	                    BRA set_addresses
.1970b3		a9 0c 00	lda #$000c	setdp_0             LDA #<>SCREENBEGIN              ; Set DP to the main screen variable block
.1970b6		5b		tcd		                    TCD
.1970b7		98		tya		set_addresses       TYA                             ; Compute offset to screen Y's addresses
.1970b8		0a		asl a		                    ASL A
.1970b9		0a		asl a		                    ASL A
.1970ba		aa		tax		                    TAX
.1970bb		bf f6 70 19	lda $1970f6,x	                    LDA @l text_address,X
.1970bf		85 00		sta $00		                    STA #S_ANSI_VARS.SCREENBEGIN,D  ; Set the address of the text matrix
.1970c1		85 0b		sta $0b		                    STA #S_ANSI_VARS.CURSORPOS,D    ; And the cursor pointer
.1970c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1970c5		bf f8 70 19	lda $1970f8,x	                    LDA @l text_address+2,X
.1970c9		85 02		sta $02		                    STA #S_ANSI_VARS.SCREENBEGIN+2,D
.1970cb		85 0d		sta $0d		                    STA #S_ANSI_VARS.CURSORPOS+2,D
.1970cd		c2 20		rep #$20	                REP #$20        ; set A long
.1970cf		bf fe 70 19	lda $1970fe,x	                    LDA @l color_address,X
.1970d3		85 16		sta $16		                    STA #S_ANSI_VARS.COLORBEGIN,D   ; Set the address of the color matrix
.1970d5		85 13		sta $13		                    STA #S_ANSI_VARS.COLORPOS,D     ; And the color cursor pointer
.1970d7		e2 20		sep #$20	                SEP #$20        ; set A short
.1970d9		bf 00 71 19	lda $197100,x	                    LDA @l color_address+2,X
.1970dd		85 18		sta $18		                    STA #S_ANSI_VARS.COLORBEGIN+2,D
.1970df		85 15		sta $15		                    STA #S_ANSI_VARS.COLORPOS+2,D
.1970e1		c2 20		rep #$20	                REP #$20        ; set A long
.1970e3		64 0e		stz $0e		                    STZ #S_ANSI_VARS.CURSORX,D      ; Set the cursor position to 0, 0
.1970e5		64 10		stz $10		                    STZ #S_ANSI_VARS.CURSORY,D
.1970e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1970e9		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D        ; Set the state of the ANSI parser to S0
.1970eb		64 1e		stz $1e		                    STZ #S_ANSI_VARS.CONTROL,D      ; Set the control bits to 0 (default)
.1970ed		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.1970ef		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D     ; Set the current color to the default
.1970f1		22 37 71 19	jsl $197137	                    JSL ANSI_SETSIZE_Y              ; Set the size variables for the main screen
.1970f5		6b		rtl		                    RTL
>1970f6		00 a0 af 00 00 20 ae 00		text_address        .dword CS_TEXT_MEM_PTR, EVID_TEXT_MEM
>1970fe		00 c0 af 00 00 40 ae 00		color_address       .dword CS_COLOR_MEM_PTR, EVID_COLOR_MEM
.197106						ANSI_SETSIZES
.197106		0b		phd		                    PHD
.197107						                    setasx
.197107		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Save the current output channel
.19710b		48		pha		                    PHA
.19710c		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; Set the sizes for the main screen
.19710e		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.197112		22 f8 71 19	jsl $1971f8	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.197116		a0 00 00	ldy #$0000	                    LDY #CHAN_CONSOLE
.197119		22 37 71 19	jsl $197137	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.19711d		a9 04		lda #$04	                    LDA #CHAN_EVID                  ; Set the sizes for the EVID screen
.19711f		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.197123		22 f8 71 19	jsl $1971f8	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.197127		b0 07		bcs $197130	                    BCS done                        ; Not present, just return
.197129		a0 04 00	ldy #$0004	                    LDY #CHAN_EVID
.19712c		22 37 71 19	jsl $197137	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.197130		68		pla		done                PLA
.197131		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT                 ; Restore the output channel
.197135		2b		pld		                    PLD
.197136		6b		rtl		                    RTL
.197137						ANSI_SETSIZE_Y
.197137		08		php		                    PHP
.197138		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19713a		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.19713c		f0 06		beq $197144	                    BEQ vky_master                      ; Yes: get the resolution from Vicky
.19713e		af 01 1e ae	lda $ae1e01	                    LDA @l EVID_MSTR_CTRL_REG_H         ; No: get the resolution from EVID
.197142		80 04		bra $197148	                    BRA resolution
.197144		af 01 00 af	lda $af0001	vky_master          LDA @l MASTER_CTRL_REG_H
.197148		29 03		and #$03	resolution          AND #$03                            ; Mask off the resolution bits
.19714a		0a		asl a		                    ASL A
.19714b		aa		tax		                    TAX                                 ; Index to the col/line count in X
.19714c		c2 20		rep #$20	                REP #$20        ; set A long
.19714e		bd e8 71	lda $1971e8,x	                    LDA cols_by_res,X                   ; Get the number of columns
.197151		85 05		sta $05		                    STA #S_ANSI_VARS.COLS_PER_LINE,D    ; This is how many columns there are per line in the memory
.197153		85 03		sta $03		                    STA #S_ANSI_VARS.COLS_VISIBLE,D     ; This is how many would be visible with no border
.197155		bd f0 71	lda $1971f0,x	                    LDA lines_by_res,X                  ; Get the number of lines
.197158		85 09		sta $09		                    STA #S_ANSI_VARS.LINES_MAX,D        ; This is the total number of lines in memory
.19715a		85 07		sta $07		                    STA #S_ANSI_VARS.LINES_VISIBLE,D    ; This is how many lines would be visible with no border
.19715c		e2 20		sep #$20	                SEP #$20        ; set A short
.19715e		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.197160		f0 06		beq $197168	                    BEQ vky_border                      ; Yes: get the border from Vicky
.197162		af 04 1e ae	lda $ae1e04	                    LDA @l EVID_BORDER_CTRL_REG         ; No: Check EVID to see if we have a border
.197166		80 04		bra $19716c	                    BRA border
.197168		af 04 00 af	lda $af0004	vky_border          LDA @l BORDER_CTRL_REG              ; Check Vicky to see if we have a border
.19716c		89 01		bit #$01	border              BIT #Border_Ctrl_Enable
.19716e		f0 76		beq $1971e6	                    BEQ done                            ; No border... the sizes are correct now
.197170		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.197172		f0 06		beq $19717a	                    BEQ vky_border_size                 ; Yes: get the border size from Vicky
.197174		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the horizontal border width from EVID
.197178		80 04		bra $19717e	                    BRA border_size
.19717a		af 08 00 af	lda $af0008	vky_border_size     LDA @l BORDER_X_SIZE                ; Get the horizontal border width from Vicky
.19717e		29 3f		and #$3f	border_size         AND #$3F
.197180		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.197182		d0 04		bne $197188	                    BNE frac_width
.197184		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.197185		4a		lsr a		                    LSR A
.197186		80 03		bra $19718b	                    BRA store_width
.197188		4a		lsr a		frac_width          LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.197189		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.19718a		1a		inc a		                    INC A
.19718b		85 19		sta $19		store_width         STA #S_ANSI_VARS.TMPPTR1,D
.19718d		64 1a		stz $1a		                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.19718f		e2 20		sep #$20	                SEP #$20        ; set A short
.197191		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.197193		f0 0c		beq $1971a1	                    BEQ adjust_width                    ; Yes: skip the pixel doubling check
.197195		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check Vucky if we're pixel doubling
.197199		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.19719b		f0 04		beq $1971a1	                    BEQ adjust_width                    ; No... just adjust the width of the screen
.19719d		c2 20		rep #$20	                REP #$20        ; set A long
.19719f		46 19		lsr $19		                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.1971a1						adjust_width
.1971a1		c2 20		rep #$20	                REP #$20        ; set A long
.1971a3		38		sec		                    SEC
.1971a4		a5 05		lda $05		                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.1971a6		e5 19		sbc $19		                    SBC #S_ANSI_VARS.TMPPTR1,D
.1971a8		85 03		sta $03		                    STA #S_ANSI_VARS.COLS_VISIBLE,D
.1971aa		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.1971ac		f0 06		beq $1971b4	                    BEQ vky_border_y_size               ; Yes: get the border Y size from Vicky
.1971ae		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the vertical border width from EVID
.1971b2		80 04		bra $1971b8	                    BRA border_y_size
.1971b4		af b8 71 19	lda $1971b8	vky_border_y_size   LDA @l BORDER_Y_SIZE                ; Get the vertical border width from Vicky
.1971b8		29 3f 00	and #$003f	border_y_size       AND #$3F
.1971bb		89 03 00	bit #$0003	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.1971be		d0 04		bne $1971c4	                    BNE frac_height
.1971c0		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.1971c1		4a		lsr a		                    LSR A
.1971c2		80 03		bra $1971c7	                    BRA store_height
.1971c4		4a		lsr a		frac_height         LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.1971c5		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.1971c6		1a		inc a		                    INC A
.1971c7		85 19		sta $19		store_height        STA #S_ANSI_VARS.TMPPTR1,D
.1971c9		64 1a		stz $1a		                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.1971cb		e2 20		sep #$20	                SEP #$20        ; set A short
.1971cd		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.1971cf		f0 0c		beq $1971dd	                    BEQ adjust_height                   ; Yes: skip the pixel doubling check
.1971d1		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check if we're pixel doubling
.1971d5		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.1971d7		f0 04		beq $1971dd	                    BEQ adjust_height                   ; No... just adjust the height of the screen
.1971d9		c2 20		rep #$20	                REP #$20        ; set A long
.1971db		46 19		lsr $19		                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.1971dd						adjust_height
.1971dd		c2 20		rep #$20	                REP #$20        ; set A long
.1971df		38		sec		                    SEC
.1971e0		a5 09		lda $09		                    LDA #S_ANSI_VARS.LINES_MAX,D
.1971e2		e5 19		sbc $19		                    SBC #S_ANSI_VARS.TMPPTR1,D
.1971e4		85 07		sta $07		                    STA #S_ANSI_VARS.LINES_VISIBLE,D
.1971e6		28		plp		done                PLP
.1971e7		6b		rtl		                    RTL
>1971e8		50 00 64 00 28 00 32 00		cols_by_res         .word 80,100,40,50
>1971f0		3c 00 4b 00 1e 00 25 00		lines_by_res        .word 60,75,30,37
.1971f8						ANSI_SETDEVICE
.1971f8		48		pha		                    PHA
.1971f9		08		php		                    PHP
.1971fa		e2 20		sep #$20	                SEP #$20        ; set A short
.1971fc		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check the current output channel
.197200		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE               ; Is it the console?
.197202		f0 08		beq $19720c	                    BEQ console                     ; Yes: point to the console
.197204		c9 04		cmp #$04	                    CMP #CHAN_EVID                  ; Is it the EVID?
.197206		f0 0b		beq $197213	                    BEQ evid                        ; Check to see if the EVID is present
.197208		28		plp		bad_device          PLP
.197209		68		pla		                    PLA
.19720a		38		sec		                    SEC
.19720b		6b		rtl		                    RTL
.19720c						console
.19720c		c2 20		rep #$20	                REP #$20        ; set A long
.19720e		a9 0c 00	lda #$000c	                    LDA #<>SCREENBEGIN              ; Point to the the main screen's variables
.197211		80 0d		bra $197220	                    BRA set_dp
.197213						evid
.197213		e2 20		sep #$20	                SEP #$20        ; set A short
.197215		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Is the EVID present?
.197219		f0 ed		beq $197208	                    BEQ bad_device                  ; No: return that the device is bad
.19721b		c2 20		rep #$20	                REP #$20        ; set A long
.19721d		a9 60 00	lda #$0060	                    LDA #<>EVID_SCREENBEGIN         ; Yes: point to the EVID's variables
.197220		5b		tcd		set_dp              TCD
.197221		28		plp		                    PLP
.197222		68		pla		                    PLA
.197223		18		clc		                    CLC
.197224		6b		rtl		                    RTL
.197225						ANSI_PUTC
.197225		da		phx		                    PHX
.197226		5a		phy		                    PHY
.197227		0b		phd		                    PHD
.197228		08		php		                    PHP
.197229		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19722b		22 f8 71 19	jsl $1971f8	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.19722f		90 03		bcc $197234	                    BCC get_state               ; If valid, check the current state
.197231		82 8a 00	brl $1972be	                    BRL done                    ; If invalid, just return
.197234		a6 1d		ldx $1d		get_state           LDX #S_ANSI_VARS.STATE,D    ; Get the current state
.197236		f0 0c		beq $197244	                    BEQ do_st_init              ; Dispatch to the correct code for the state
.197238		e0 01		cpx #$01	                    CPX #ST_ESCAPE
.19723a		f0 20		beq $19725c	                    BEQ do_st_escape
.19723c		e0 02		cpx #$02	                    CPX #ST_CSI
.19723e		f0 2c		beq $19726c	                    BEQ do_st_csi
.197240		64 1d		stz $1d		pr_and_reset        STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.197242		80 06		bra $19724a	                    BRA print_raw
.197244		c9 1b		cmp #$1b	do_st_init          CMP #CHAR_ESC               ; Is it ESC?
.197246		f0 08		beq $197250	                    BEQ go_escape               ; Yes, handle the ESC
.197248		90 0c		bcc $197256	                    BLT do_control              ; If less than, handle as a control code
.19724a		22 9f 73 19	jsl $19739f	print_raw           JSL ANSI_PUTRAWC            ; Otherwise: Just print the raw character
.19724e		80 6e		bra $1972be	                    BRA done
.197250		a9 01		lda #$01	go_escape           LDA #ST_ESCAPE
.197252		85 1d		sta $1d		                    STA #S_ANSI_VARS.STATE,D    ; Move to the ESCAPE state
.197254		80 68		bra $1972be	                    BRA done
.197256		22 56 73 19	jsl $197356	do_control          JSL ANSI_PR_CONTROL         ; Hand a single byte control code
.19725a		80 62		bra $1972be	                    BRA done
.19725c		c9 5b		cmp #$5b	do_st_escape        CMP #'['                    ; Have we gotten 'ESC['?
.19725e		d0 e0		bne $197240	                    BNE pr_and_reset            ; No: print this and return to ST_INIT
.197260		64 20		stz $20		                    STZ #S_ANSI_VARS.ARG0,D     ; Clear the arguments
.197262		64 21		stz $21		                    STZ #S_ANSI_VARS.ARG1,D
.197264		64 1f		stz $1f		                    STZ #S_ANSI_VARS.ARGC,D
.197266		a9 02		lda #$02	                    LDA #ST_CSI
.197268		85 1d		sta $1d		                    STA #S_ANSI_VARS.STATE,D    ; Move to the CSI state
.19726a		80 52		bra $1972be	                    BRA done
.19726c		c9 30		cmp #$30	do_st_csi           CMP #'0'                    ; Do we have a digit?
.19726e		90 1d		bcc $19728d	                    BLT csi_not_digit
.197270		c9 3a		cmp #$3a	                    CMP #'9'+1
.197272		b0 19		bcs $19728d	                    BGE csi_not_digit
.197274		38		sec		                    SEC                         ; Have digit... convert to a number
.197275		e9 30		sbc #$30	                    SBC #'0'
.197277		48		pha		                    PHA                         ; Save it
.197278		a6 1f		ldx $1f		                    LDX #S_ANSI_VARS.ARGC,D
.19727a		16 20		asl $20,x	                    ASL #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 2
.19727c		b5 20		lda $20,x	                    LDA #S_ANSI_VARS.ARG0,D,X
.19727e		0a		asl a		                    ASL A                       ; A := arg * 4
.19727f		0a		asl a		                    ASL A                       ; A := arg * 8
.197280		18		clc		                    CLC
.197281		75 20		adc $20,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10
.197283		95 20		sta $20,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := A
.197285		18		clc		                    CLC
.197286		68		pla		                    PLA                         ; Get the digit back
.197287		75 20		adc $20,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10 + digit
.197289		95 20		sta $20,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 10 + digit
.19728b		80 31		bra $1972be	                    BRA done                    ; And we're done with this particular character
.19728d		c9 3b		cmp #$3b	csi_not_digit       CMP #';'                    ; Is it an argument separator?
.19728f		d0 0e		bne $19729f	                    BNE csi_not_sep
.197291		a5 1f		lda $1f		                    LDA #S_ANSI_VARS.ARGC,D     ; Get the argument count
.197293		c9 02		cmp #$02	                    CMP #ANSI_MAX_ARG           ; Are we at the maximum argument count?
.197295		d0 03		bne $19729a	                    BNE csi_next_arg            ; No: move to the next argument
.197297		82 a6 ff	brl $197240	                    BRL pr_and_reset            ; Yes: print and reset state
.19729a		1a		inc a		csi_next_arg        INC A
.19729b		85 1f		sta $1f		                    STA #S_ANSI_VARS.ARGC,D     ; Set the new argument count
.19729d		80 1f		bra $1972be	                    BRA done                    ; And we're done with this character
.19729f		c9 40		cmp #$40	csi_not_sep         CMP #'@'
.1972a1		90 0a		bcc $1972ad	                    BLT csi_not_upper
.1972a3		c9 5b		cmp #$5b	                    CMP #'Z'+1
.1972a5		b0 06		bcs $1972ad	                    BGE csi_not_upper
.1972a7		22 ce 72 19	jsl $1972ce	                    JSL ANSI_ANSI_UPPER         ; Process an ANSI upper case code
.1972ab		80 11		bra $1972be	                    BRA done
.1972ad		c9 61		cmp #$61	csi_not_upper       CMP #'a'
.1972af		90 0a		bcc $1972bb	                    BLT csi_not_lower
.1972b1		c9 7b		cmp #$7b	                    CMP #'z'+1
.1972b3		b0 06		bcs $1972bb	                    BGE csi_not_lower
.1972b5		22 13 73 19	jsl $197313	                    JSL ANSI_ANSI_LOWER         ; Process an ANSI lower case code
.1972b9		80 03		bra $1972be	                    BRA done
.1972bb		82 82 ff	brl $197240	csi_not_lower       BRL pr_and_reset            ; Invalid sequence: print it and reset
.1972be		28		plp		done                PLP
.1972bf		2b		pld		                    PLD
.1972c0		7a		ply		                    PLY
.1972c1		fa		plx		                    PLX
.1972c2		6b		rtl		                    RTL
.1972c3						ANSI_INVALID
.1972c3		08		php		                    PHP
.1972c4		e2 20		sep #$20	                SEP #$20        ; set A short
.1972c6		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.1972c8		22 9f 73 19	jsl $19739f	                    JSL ANSI_PUTRAWC            ; Print the character
.1972cc		28		plp		                    PLP
.1972cd		6b		rtl		                    RTL
.1972ce						ANSI_ANSI_UPPER
.1972ce		08		php		                    PHP
.1972cf		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1972d1		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.1972d3		38		sec		                    SEC
.1972d4		e9 40		sbc #$40	                    SBC #'@'
.1972d6		0a		asl a		                    ASL A
.1972d7		aa		tax		                    TAX
.1972d8		fc dd 72	jsr ($1972dd,x)	                    JSR (ansi_table,X)
.1972db		28		plp		                    PLP
.1972dc		6b		rtl		                    RTL
>1972dd		13 76				ansi_table          .word <>ANSI_ICH        ; '@' -- ICH -- Insert Character
>1972df		ba 73				                    .word <>ANSI_CUU        ; 'A' -- CUU -- Cursor Up
>1972e1		cd 73				                    .word <>ANSI_CUD        ; 'B' -- CUD -- Cursor Down
>1972e3		de 73				                    .word <>ANSI_CUF        ; 'C' -- CUF -- Cursor Forward
>1972e5		ef 73				                    .word <>ANSI_CUB        ; 'D' -- CUB -- Cursor Back
>1972e7		c3 72				                    .word <>ANSI_INVALID    ; 'E' -- CNL -- Cursor Next Line
>1972e9		c3 72				                    .word <>ANSI_INVALID    ; 'F' -- CPL -- Cursor Previous Line
>1972eb		c3 72				                    .word <>ANSI_INVALID    ; 'G' -- CHA -- Cursor Horizontal Absolute
>1972ed		00 74				                    .word <>ANSI_CUP        ; 'H' -- CUP -- Cursor Position
>1972ef		c3 72				                    .word <>ANSI_INVALID    ; 'I'
>1972f1		7f 75				                    .word <>ANSI_ED         ; 'J' -- ED -- Erase In Display
>1972f3		c2 75				                    .word <>ANSI_EL         ; 'K' -- EL -- Erase In Line
>1972f5		c3 72				                    .word <>ANSI_INVALID    ; 'L'
>1972f7		c3 72				                    .word <>ANSI_INVALID    ; 'M'
>1972f9		c3 72				                    .word <>ANSI_INVALID    ; 'N'
>1972fb		c3 72				                    .word <>ANSI_INVALID    ; 'O'
>1972fd		57 76				                    .word <>ANSI_DCH        ; 'P' -- DCH -- Delete Character
>1972ff		c3 72				                    .word <>ANSI_INVALID    ; 'Q'
>197301		c3 72				                    .word <>ANSI_INVALID    ; 'R'
>197303		c3 72				                    .word <>ANSI_INVALID    ; 'S' -- SU -- Scroll Up
>197305		c3 72				                    .word <>ANSI_INVALID    ; 'T' -- SD -- Scroll Down
>197307		c3 72				                    .word <>ANSI_INVALID    ; 'U'
>197309		c3 72				                    .word <>ANSI_INVALID    ; 'V'
>19730b		c3 72				                    .word <>ANSI_INVALID    ; 'W'
>19730d		c3 72				                    .word <>ANSI_INVALID    ; 'X'
>19730f		c3 72				                    .word <>ANSI_INVALID    ; 'Y'
>197311		c3 72				                    .word <>ANSI_INVALID    ; 'Z'
.197313						ANSI_ANSI_LOWER
.197313		08		php		                    PHP
.197314		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197316		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.197318		38		sec		                    SEC
.197319		e9 61		sbc #$61	                    SBC #'a'
.19731b		0a		asl a		                    ASL A
.19731c		aa		tax		                    TAX
.19731d		fc 22 73	jsr ($197322,x)	                    JSR (ansi_table,X)
.197320		28		plp		                    PLP
.197321		6b		rtl		                    RTL
>197322		c3 72				ansi_table          .word <>ANSI_INVALID    ; 'a'
>197324		c3 72				                    .word <>ANSI_INVALID    ; 'b'
>197326		c3 72				                    .word <>ANSI_INVALID    ; 'c'
>197328		c3 72				                    .word <>ANSI_INVALID    ; 'd'
>19732a		c3 72				                    .word <>ANSI_INVALID    ; 'e'
>19732c		c3 72				                    .word <>ANSI_INVALID    ; 'f' -- HVP -- Horizontal Vertical Position
>19732e		c3 72				                    .word <>ANSI_INVALID    ; 'g'
>197330		19 74				                    .word <>ANSI_SET_MODE   ; 'h'
>197332		c3 72				                    .word <>ANSI_INVALID    ; 'i'
>197334		c3 72				                    .word <>ANSI_INVALID    ; 'j'
>197336		c3 72				                    .word <>ANSI_INVALID    ; 'k'
>197338		56 74				                    .word <>ANSI_RESET_MODE ; 'l'
>19733a		93 74				                    .word <>ANSI_SGR        ; 'm' -- SGR -- Select Graphics Rendition
>19733c		c3 72				                    .word <>ANSI_INVALID    ; 'n'
>19733e		c3 72				                    .word <>ANSI_INVALID    ; 'o'
>197340		c3 72				                    .word <>ANSI_INVALID    ; 'p'
>197342		c3 72				                    .word <>ANSI_INVALID    ; 'q'
>197344		c3 72				                    .word <>ANSI_INVALID    ; 'r'
>197346		c3 72				                    .word <>ANSI_INVALID    ; 's'
>197348		c3 72				                    .word <>ANSI_INVALID    ; 't'
>19734a		c3 72				                    .word <>ANSI_INVALID    ; 'u'
>19734c		c3 72				                    .word <>ANSI_INVALID    ; 'v'
>19734e		c3 72				                    .word <>ANSI_INVALID    ; 'w'
>197350		c3 72				                    .word <>ANSI_INVALID    ; 'x'
>197352		c3 72				                    .word <>ANSI_INVALID    ; 'y'
>197354		c3 72				                    .word <>ANSI_INVALID    ; 'z'
.197356						ANSI_PR_CONTROL
.197356		08		php		                    PHP
.197357		e2 20		sep #$20	                SEP #$20        ; set A short
.197359		c2 10		rep #$10	                REP #$10        ; set X long
.19735b		c9 0d		cmp #$0d	                    CMP #CHAR_CR                ; Handle carriage return
.19735d		f0 12		beq $197371	                    BEQ do_cr
.19735f		c9 0a		cmp #$0a	                    CMP #CHAR_LF                ; Handle line feed
.197361		f0 1a		beq $19737d	                    BEQ do_lf
.197363		c9 08		cmp #$08	                    CMP #CHAR_BS                ; Handle back space
.197365		f0 1c		beq $197383	                    BEQ do_bs
.197367		c9 09		cmp #$09	                    CMP #CHAR_TAB               ; Handle TAB
.197369		f0 1e		beq $197389	                    BEQ do_tab
.19736b		22 9f 73 19	jsl $19739f	                    JSL ANSI_PUTRAWC            ; Otherwise, just print it raw and wriggling!
.19736f		80 2c		bra $19739d	                    BRA done
.197371		a2 00 00	ldx #$0000	do_cr               LDX #0                      ; Move to the beginning of the next line
.197374		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.197376		c8		iny		                    INY
.197377		22 26 77 19	jsl $197726	                    JSL ANSI_LOCATE
.19737b		80 20		bra $19739d	                    BRA done
.19737d		22 03 77 19	jsl $197703	do_lf               JSL ANSI_CSRDOWN            ; Move the cursor down a line
.197381		80 1a		bra $19739d	                    BRA done
.197383		22 c7 76 19	jsl $1976c7	do_bs               JSL ANSI_CSRLEFT            ; Move the cursor to the left (TODO: delete to the left?)
.197387		80 14		bra $19739d	                    BRA done
.197389						do_tab
.197389		c2 30		rep #$30	                REP #$30        ; set A&X long
.19738b		a5 0e		lda $0e		                    LDA #S_ANSI_VARS.CURSORX,D  ; Move to the next power 8th column
.19738d		29 f8 ff	and #$fff8	                    AND #$FFF8
.197390		18		clc		                    CLC
.197391		69 08 00	adc #$0008	                    ADC #$0008
.197394		aa		tax		                    TAX
.197395		e2 20		sep #$20	                SEP #$20        ; set A short
.197397		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.197399		22 26 77 19	jsl $197726	                    JSL ANSI_LOCATE
.19739d		28		plp		done                PLP
.19739e		6b		rtl		                    RTL
.19739f						ANSI_PUTRAWC
.19739f		da		phx		                    PHX
.1973a0		5a		phy		                    PHY
.1973a1		0b		phd		                    PHD
.1973a2		08		php		                    PHP
.1973a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1973a5		22 f8 71 19	jsl $1971f8	                    JSL ANSI_SETDEVICE              ; Look at the current output channel and point
.1973a9		b0 0a		bcs $1973b5	                    BCS done                        ; If invalid, just return
.1973ab		87 0b		sta [$0b]	                    STA [#S_ANSI_VARS.CURSORPOS,D]  ; Save the character on the screen
.1973ad		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Set the color based on CURCOLOR
.1973af		87 13		sta [$13]	                    STA [#S_ANSI_VARS.COLORPOS,D]
.1973b1		22 9c 76 19	jsl $19769c	                    JSL ANSI_CSRRIGHT              ; And advance the cursor
.1973b5		28		plp		done                PLP
.1973b6		2b		pld		                    PLD
.1973b7		7a		ply		                    PLY
.1973b8		fa		plx		                    PLX
.1973b9		6b		rtl		                    RTL
.1973ba						ANSI_CUU
.1973ba		08		php		                    PHP
.1973bb		e2 20		sep #$20	                SEP #$20        ; set A short
.1973bd		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.1973bf		1a		inc a		                    INC A
.1973c0		a9 01		lda #$01	default             LDA #1                          ; Otherwise: treat it as 1
.1973c2		48		pha		loop                PHA                             ; Save the count
.1973c3		22 e5 76 19	jsl $1976e5	                    JSL ANSI_CSRUP                  ; Cursor Up
.1973c7		68		pla		                    PLA                             ; Restore the count
.1973c8		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.1973c9		d0 f7		bne $1973c2	                    BNE loop
.1973cb		28		plp		                    PLP
.1973cc		60		rts		                    RTS
.1973cd						ANSI_CUD
.1973cd		08		php		                    PHP
.1973ce		e2 20		sep #$20	                SEP #$20        ; set A short
.1973d0		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.1973d2		1a		inc a		                    INC A
.1973d3		48		pha		loop                PHA                             ; Save the count
.1973d4		22 03 77 19	jsl $197703	                    JSL ANSI_CSRDOWN                ; Cursor Down
.1973d8		68		pla		                    PLA                             ; Restore the count
.1973d9		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.1973da		d0 f7		bne $1973d3	                    BNE loop
.1973dc		28		plp		                    PLP
.1973dd		60		rts		                    RTS
.1973de						ANSI_CUF
.1973de		08		php		                    PHP
.1973df		e2 20		sep #$20	                SEP #$20        ; set A short
.1973e1		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.1973e3		1a		inc a		                    INC A
.1973e4		48		pha		loop                PHA                             ; Save the count
.1973e5		22 9c 76 19	jsl $19769c	                    JSL ANSI_CSRRIGHT               ; Cursor right
.1973e9		68		pla		                    PLA                             ; Restore the count
.1973ea		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.1973eb		d0 f7		bne $1973e4	                    BNE loop
.1973ed		28		plp		                    PLP
.1973ee		60		rts		                    RTS
.1973ef						ANSI_CUB
.1973ef		08		php		                    PHP
.1973f0		e2 20		sep #$20	                SEP #$20        ; set A short
.1973f2		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.1973f4		1a		inc a		                    INC A
.1973f5		48		pha		loop                PHA                             ; Save the count
.1973f6		22 c7 76 19	jsl $1976c7	                    JSL ANSI_CSRLEFT                ; Cursor left
.1973fa		68		pla		                    PLA                             ; Restore the count
.1973fb		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.1973fc		d0 f7		bne $1973f5	                    BNE loop
.1973fe		28		plp		                    PLP
.1973ff		60		rts		                    RTS
.197400						ANSI_CUP
.197400		08		php		                    PHP
.197401		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197403		a6 20		ldx $20		                    LDX #S_ANSI_VARS.ARG0,D         ; Get the first argument
.197405		d0 02		bne $197409	                    BNE get_row
.197407		a2 01		ldx #$01	                    LDX #1                          ; Default to 1
.197409		a4 21		ldy $21		get_row             LDY #S_ANSI_VARS.ARG1,D         ; Get the second argument
.19740b		d0 02		bne $19740f	                    BNE adjust_coords
.19740d		a0 01		ldy #$01	                    LDY #1                          ; Default to 1
.19740f		ca		dex		adjust_coords       DEX                             ; Translate from base 1 to base 0 coordinates
.197410		88		dey		                    DEY
.197411		c2 30		rep #$30	                REP #$30        ; set A&X long
.197413		22 26 77 19	jsl $197726	                    JSL ANSI_LOCATE                 ; Set the cursor position
.197417		28		plp		                    PLP
.197418		60		rts		                    RTS
.197419						ANSI_SET_MODE
.197419		08		php		                    PHP
.19741a		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19741c		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.19741e		c9 19		cmp #$19	                    CMP #25
.197420		d0 24		bne $197446	                    BNE chk_break
.197422		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.197426		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.197428		d0 0c		bne $197436	                    BNE check_evid
.19742a		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.19742e		09 01		ora #$01	                    ORA #Vky_Cursor_Enable
.197430		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.197434		80 1e		bra $197454	                    BRA done
.197436		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.197438		d0 1a		bne $197454	                    BNE done
.19743a		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.19743e		09 01		ora #$01	                    ORA #EVID_Cursor_Enable
.197440		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.197444		80 0e		bra $197454	                    BRA done
.197446		c9 1c		cmp #$1c	chk_break           CMP #28
.197448		d0 0a		bne $197454	                    BNE done
.19744a		22 dc 7b 19	jsl $197bdc	                    JSL KBD_GET_CONTROL
.19744e		09 80		ora #$80	                    ORA #KBD_CTRL_BREAK
.197450		22 ef 7b 19	jsl $197bef	                    JSL KBD_SET_CONTROL
.197454		28		plp		done                PLP
.197455		60		rts		                    RTS
.197456						ANSI_RESET_MODE
.197456		08		php		                    PHP
.197457		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197459		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.19745b		c9 19		cmp #$19	                    CMP #25
.19745d		d0 24		bne $197483	                    BNE chk_break
.19745f		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.197463		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.197465		d0 0c		bne $197473	                    BNE check_evid
.197467		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.19746b		29 fe		and #$fe	                    AND #~Vky_Cursor_Enable
.19746d		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.197471		80 1e		bra $197491	                    BRA done
.197473		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.197475		d0 1a		bne $197491	                    BNE done
.197477		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.19747b		29 fe		and #$fe	                    AND #~EVID_Cursor_Enable
.19747d		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.197481		80 0e		bra $197491	                    BRA done
.197483		c9 1c		cmp #$1c	chk_break           CMP #28
.197485		d0 0a		bne $197491	                    BNE done
.197487		22 dc 7b 19	jsl $197bdc	                    JSL KBD_GET_CONTROL
.19748b		29 7f		and #$7f	                    AND #~KBD_CTRL_BREAK
.19748d		22 ef 7b 19	jsl $197bef	                    JSL KBD_SET_CONTROL
.197491		28		plp		done                PLP
.197492		60		rts		                    RTS
.197493						ANSI_SGR
.197493		08		php		                    PHP
.197494		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197496		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.197498		d0 0d		bne $1974a7	                    BNE chk_1
.19749a		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR             ; 0 ==> Return to the default colors
.19749c		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.19749e		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Switch off inversion
.1974a0		29 3f		and #$3f	                    AND #~(CONTROL_INVERT | CONTROL_BOLD)
.1974a2		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.1974a4		82 d6 00	brl $19757d	                    BRL done
.1974a7		c9 01		cmp #$01	chk_1               CMP #1
.1974a9		d0 0f		bne $1974ba	                    BNE chk_2
.1974ab		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Make the current color bold
.1974ad		09 80		ora #$80	                    ORA #$80
.1974af		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.1974b1		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be bold
.1974b3		09 40		ora #$40	                    ORA #CONTROL_BOLD
.1974b5		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.1974b7		82 c3 00	brl $19757d	                    BRL done
.1974ba		c9 02		cmp #$02	chk_2               CMP #2
.1974bc		f0 04		beq $1974c2	                    BEQ normal_intensity
.1974be		c9 16		cmp #$16	chk_22              CMP #22
.1974c0		d0 0f		bne $1974d1	                    BNE chk_7
.1974c2		a5 12		lda $12		normal_intensity    LDA #S_ANSI_VARS.CURCOLOR,D     ; 2 ==> Set the foreground to normal intensity
.1974c4		29 7f		and #$7f	                    AND #~$80
.1974c6		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.1974c8		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be normal
.1974ca		29 bf		and #$bf	                    AND #~CONTROL_BOLD
.1974cc		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.1974ce		82 ac 00	brl $19757d	                    BRL done
.1974d1		c9 07		cmp #$07	chk_7               CMP #7
.1974d3		d0 2c		bne $197501	                    BNE chk_27
.1974d5		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors already inverted?
.1974d7		89 80		bit #$80	                    BIT #CONTROL_INVERT
.1974d9		f0 03		beq $1974de	                    BEQ invert_on
.1974db		82 9f 00	brl $19757d	                    BRL done                        ; Yes: just finish
.1974de		09 80		ora #$80	invert_on           ORA #CONTROL_INVERT             ; No: Mark that the colors are inverted
.1974e0		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.1974e2		a5 12		lda $12		swap_colors         LDA #S_ANSI_VARS.CURCOLOR,D     ; Exchange the upper and lower nibbles
.1974e4		0a		asl a		                    ASL  A
.1974e5		69 80		adc #$80	                    ADC  #$80
.1974e7		2a		rol a		                    ROL  A
.1974e8		0a		asl a		                    ASL  A
.1974e9		69 80		adc #$80	                    ADC  #$80
.1974eb		2a		rol a		                    ROL  A
.1974ec		29 f7		and #$f7	                    AND #%11110111                  ; Make sure the background is not bolded
.1974ee		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.1974f0		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.1974f2		89 40		bit #$40	                    BIT #CONTROL_BOLD
.1974f4		d0 03		bne $1974f9	                    BNE bold_on
.1974f6		82 84 00	brl $19757d	                    BRL done                        ; No: we're done
.1974f9		a5 12		lda $12		bold_on             LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.1974fb		09 80		ora #$80	                    ORA #$80
.1974fd		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.1974ff		80 7c		bra $19757d	                    BRA done
.197501		c9 1b		cmp #$1b	chk_27              CMP #27
.197503		d0 0c		bne $197511	                    BNE chk_39
.197505		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors inverted?
.197507		89 80		bit #$80	                    BIT #CONTROL_INVERT
.197509		f0 72		beq $19757d	                    BEQ done                        ; No: just finish
.19750b		29 7f		and #$7f	                    AND #~CONTROL_INVERT            ; Yes: Mark that the colors are back to normal
.19750d		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.19750f		80 d1		bra $1974e2	                    BRA swap_colors                 ; And go swap the colors
.197511		c9 27		cmp #$27	chk_39              CMP #39
.197513		d0 10		bne $197525	                    BNE chk_49
.197515		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.197517		29 0f		and #$0f	                    AND #$0F
.197519		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.19751b		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.19751d		29 f0		and #$f0	                    AND #$F0
.19751f		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.197521		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197523		80 58		bra $19757d	                    BRA done
.197525		c9 31		cmp #$31	chk_49              CMP #49
.197527		d0 10		bne $197539	                    BNE chk_foreground
.197529		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.19752b		29 f0		and #$f0	                    AND #$F0
.19752d		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.19752f		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.197531		29 0f		and #$0f	                    AND #$0F
.197533		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.197535		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197537		80 44		bra $19757d	                    BRA done
.197539		c9 1e		cmp #$1e	chk_foreground      CMP #30                         ; If [30..37], set the foreground color
.19753b		90 29		bcc $197566	                    BLT chk_background
.19753d		c9 26		cmp #$26	                    CMP #38
.19753f		b0 25		bcs $197566	                    BGE chk_background
.197541		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.197543		29 0f		and #$0f	                    AND #$0F
.197545		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197547		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D
.197549		38		sec		                    SEC
.19754a		e9 1e		sbc #$1e	                    SBC #30
.19754c		0a		asl a		                    ASL A
.19754d		0a		asl a		                    ASL A
.19754e		0a		asl a		                    ASL A
.19754f		0a		asl a		                    ASL A
.197550		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.197552		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197554		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.197556		89 40		bit #$40	                    BIT #CONTROL_BOLD
.197558		d0 03		bne $19755d	                    BNE bold_fore                   ; No: we're done
.19755a		82 20 00	brl $19757d	                    BRL done
.19755d		a5 12		lda $12		bold_fore           LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.19755f		09 80		ora #$80	                    ORA #$80
.197561		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197563		82 17 00	brl $19757d	                    BRL done
.197566		c9 28		cmp #$28	chk_background      CMP #40                         ; If [40..47], set the background color
.197568		90 13		bcc $19757d	                    BLT done
.19756a		c9 30		cmp #$30	                    CMP #48
.19756c		b0 0f		bcs $19757d	                    BGE done
.19756e		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.197570		29 f0		and #$f0	                    AND #$F0
.197572		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197574		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D
.197576		38		sec		                    SEC
.197577		e9 28		sbc #$28	                    SBC #40
.197579		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.19757b		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.19757d		28		plp		done                PLP
.19757e		60		rts		                    RTS
.19757f						ANSI_ED
.19757f		5a		phy		                    PHY
.197580		08		php		                    PHP
.197581		e2 20		sep #$20	                SEP #$20        ; set A short
.197583		c2 10		rep #$10	                REP #$10        ; set X long
.197585		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.197587		d0 0f		bne $197598	                    BNE not_0                       ; Is the code 0?
.197589						code_0
.197589		a9 20		lda #$20	                    LDA #' '
.19758b		a4 17		ldy $17		                    LDY #CURSORPOS,D                ; Start with the cursor's position
.19758d		97 0c		sta [$0c],y	code_0_loop         STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.19758f		c8		iny		                    INY                             ; Go to the next position
.197590		c0 00 20	cpy #$2000	                    CPY #$2000                      ; Have we reached the end?
.197593		d0 f8		bne $19758d	                    BNE code_0_loop                 ; No: keep going
.197595		82 27 00	brl $1975bf	                    BRL done
.197598		c9 01		cmp #$01	not_0               CMP #1                          ; Is the code 1?
.19759a		d0 0e		bne $1975aa	                    BNE not_1
.19759c						code_1
.19759c		a9 20		lda #$20	                    LDA #' '
.19759e		a4 17		ldy $17		                    LDY #CURSORPOS,D                ; Start with the cursor's position
.1975a0		97 0c		sta [$0c],y	code_1_loop         STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.1975a2		88		dey		                    DEY                             ; Go to the previous position
.1975a3		d0 fb		bne $1975a0	                    BNE code_1_loop
.1975a5		97 0c		sta [$0c],y	                    STA [#SCREENBEGIN,D],Y          ; Clear the first cell
.1975a7		82 15 00	brl $1975bf	                    BRL done
.1975aa		c9 02		cmp #$02	not_1               CMP #2                          ; Is the code 2 or 3?
.1975ac		f0 04		beq $1975b2	                    BEQ code_2_3
.1975ae		c9 03		cmp #$03	                    CMP #3
.1975b0		d0 0d		bne $1975bf	                    BNE done                        ; No: just ignore the sequence
.1975b2						code_2_3
.1975b2		a9 20		lda #$20	                    LDA #' '
.1975b4		a0 00 00	ldy #$0000	                    LDY #0                          ; Start with the cursor's position
.1975b7		97 0c		sta [$0c],y	code_2_3_loop       STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.1975b9		c8		iny		                    INY                             ; Go to the next position
.1975ba		c0 00 20	cpy #$2000	                    CPY #$2000                      ; Have we reached the end?
.1975bd		d0 ce		bne $19758d	                    BNE code_0_loop                 ; No: keep going
.1975bf		28		plp		done                PLP
.1975c0		7a		ply		                    PLY
.1975c1		60		rts		                    RTS
.1975c2						ANSI_EL
.1975c2		da		phx		                    PHX
.1975c3		5a		phy		                    PHY
.1975c4		08		php		                    PHP
.1975c5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1975c7		38		sec		                    SEC
.1975c8		a5 0b		lda $0b		                    LDA #S_ANSI_VARS.CURSORPOS,D        ; Compute the address of the first character of the line
.1975ca		e5 0e		sbc $0e		                    SBC #S_ANSI_VARS.CURSORX,D
.1975cc		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.1975ce		e2 20		sep #$20	                SEP #$20        ; set A short
.1975d0		a5 02		lda $02		                    LDA #S_ANSI_VARS.SCREENBEGIN+2,D    ; Get the bank of the screen
.1975d2		85 1b		sta $1b		                    STA #S_ANSI_VARS.TMPPTR1+2,D        ; And put it in the TMPPTR1
.1975d4		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.1975d6		d0 0e		bne $1975e6	                    BNE not_0                           ; Is the code 0?
.1975d8						code_0
.1975d8		a9 20		lda #$20	                    LDA #' '
.1975da		a4 0e		ldy $0e		                    LDY #S_ANSI_VARS.CURSORX,D          ; Start at the cursor position
.1975dc		97 19		sta [$19],y	code_0_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.1975de		c8		iny		                    INY
.1975df		c4 05		cpy $05		                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.1975e1		d0 f9		bne $1975dc	                    BNE code_0_loop                     ; No: keep looping
.1975e3		82 29 00	brl $19760f	                    BRL done
.1975e6		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.1975e8		d0 11		bne $1975fb	                    BNE not_1
.1975ea						code_1
.1975ea		a9 20		lda #$20	                    LDA #' '
.1975ec		a0 00 00	ldy #$0000	                    LDY #0
.1975ef		97 19		sta [$19],y	code_1_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.1975f1		c8		iny		                    INY
.1975f2		c4 0e		cpy $0e		                    CPY #S_ANSI_VARS.CURSORX,D          ; Have we reached the cursor?
.1975f4		d0 f9		bne $1975ef	                    BNE code_1_loop                     ; No: keep looping
.1975f6		97 19		sta [$19],y	                    STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; And clear under the cursor
.1975f8		82 14 00	brl $19760f	                    BRL done
.1975fb		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.1975fd		f0 04		beq $197603	                    BEQ code_2_3
.1975ff		c9 03		cmp #$03	                    CMP #3
.197601		d0 0c		bne $19760f	                    BNE done                            ; No: just ignore the sequence
.197603						code_2_3
.197603		a9 20		lda #$20	                    LDA #' '
.197605		a0 00 00	ldy #$0000	                    LDY #0
.197608		97 19		sta [$19],y	code_2_3_loop       STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.19760a		c8		iny		                    INY
.19760b		c4 05		cpy $05		                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.19760d		d0 f9		bne $197608	                    BNE code_2_3_loop                   ; No: keep looping
.19760f		28		plp		done                PLP
.197610		7a		ply		                    PLY
.197611		fa		plx		                    PLX
.197612		60		rts		                    RTS
.197613						ANSI_ICH
.197613		5a		phy		                    PHY
.197614		08		php		                    PHP
.197615		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197617		a5 1f		lda $1f		                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.197619		f0 04		beq $19761f	                    BEQ default_1                       ; If 0, default to 1
.19761b		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.19761d		d0 04		bne $197623	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.19761f		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.197621		85 20		sta $20		                    STA #S_ANSI_VARS.ARG0,D
.197623		38		sec		calc_src_dest       SEC
.197624		a5 03		lda $03		                    LDA #S_ANSI_VARS.COLS_VISIBLE,D     ; TMPPTR1 := COLS_VISIBLE - CURSORX (destination index)
.197626		e5 0e		sbc $0e		                    SBC #S_ANSI_VARS.CURSORX,D
.197628		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.19762a		38		sec		                    SEC
.19762b		e5 20		sbc $20		                    SBC #S_ANSI_VARS.ARG0,D             ; TMPPTR1+1 := TMPPTR1 - n (source index)
.19762d		85 1a		sta $1a		                    STA #S_ANSI_VARS.TMPPTR1+1,D
.19762f		a4 1a		ldy $1a		insert_loop         LDY #S_ANSI_VARS.TMPPTR1+1,D        ; text[dest] := text[source]
.197631		b7 0b		lda [$0b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.197633		a4 19		ldy $19		                    LDY #S_ANSI_VARS.TMPPTR1,D
.197635		97 0b		sta [$0b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.197637		a4 1a		ldy $1a		                    LDY #S_ANSI_VARS.TMPPTR1+1,D        ; color[dest] := color[source]
.197639		b7 13		lda [$13],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.19763b		a4 19		ldy $19		                    LDY #S_ANSI_VARS.TMPPTR1,D
.19763d		97 13		sta [$13],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.19763f		c6 19		dec $19		                    DEC #S_ANSI_VARS.TMPPTR1,D          ; Move to the previous position
.197641		c6 1a		dec $1a		                    DEC #S_ANSI_VARS.TMPPTR1+1,D
.197643		10 ea		bpl $19762f	                    BPL insert_loop                     ; Keep looping until we reach the end
.197645		a0 00		ldy #$00	                    LDY #0
.197647		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.197649		97 0b		sta [$0b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.19764b		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.19764d		97 13		sta [$13],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.19764f		c8		iny		                    INY                                 ; Move to the next byte
.197650		c4 20		cpy $20		                    CPY #S_ANSI_VARS.ARG0,D             ; Until we reach the end
.197652		d0 f3		bne $197647	                    BNE fill_loop
.197654		28		plp		                    PLP
.197655		7a		ply		                    PLY
.197656		60		rts		                    RTS
.197657						ANSI_DCH
.197657		5a		phy		                    PHY
.197658		08		php		                    PHP
.197659		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19765b		a5 1f		lda $1f		                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.19765d		f0 04		beq $197663	                    BEQ default_1                       ; If 0, default to 1
.19765f		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.197661		d0 04		bne $197667	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.197663		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.197665		85 20		sta $20		                    STA #S_ANSI_VARS.ARG0,D
.197667		a9 00		lda #$00	calc_src_dest       LDA #0
.197669		85 1a		sta $1a		                    STA #S_ANSI_VARS.TMPPTR1+1,D        ; TMPPTR+1 := 0 (destination)
.19766b		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D
.19766d		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D          ; TMPPTR+1 := n (source)
.19766f		a4 19		ldy $19		del_loop            LDY #S_ANSI_VARS.TMPPTR1,D          ; text[dest] := text[source]
.197671		b7 0b		lda [$0b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.197673		a4 1a		ldy $1a		                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.197675		97 0b		sta [$0b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.197677		a4 19		ldy $19		                    LDY #S_ANSI_VARS.TMPPTR1,D          ; color[dest] := color[source]
.197679		b7 13		lda [$13],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.19767b		a4 1a		ldy $1a		                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.19767d		97 13		sta [$13],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.19767f		e6 19		inc $19		                    INC #S_ANSI_VARS.TMPPTR1,D          ; Move to the next position
.197681		e6 1a		inc $1a		                    INC #S_ANSI_VARS.TMPPTR1+1,D
.197683		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.197685		c5 03		cmp $03		                    CMP #S_ANSI_VARS.COLS_VISIBLE,D
.197687		90 e6		bcc $19766f	                    BLT del_loop                        ; Keep looping until we reach the end
.197689		a4 1a		ldy $1a		                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.19768b		88		dey		                    DEY
.19768c		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.19768e		97 0b		sta [$0b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.197690		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.197692		97 13		sta [$13],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.197694		c8		iny		                    INY                                 ; Move to the next byte
.197695		c4 03		cpy $03		                    CPY #S_ANSI_VARS.COLS_VISIBLE,D     ; Until we reach the end
.197697		90 f3		bcc $19768c	                    BLT fill_loop
.197699		28		plp		                    PLP
.19769a		7a		ply		                    PLY
.19769b		60		rts		                    RTS
.19769c						ANSI_CSRRIGHT
.19769c		da		phx		                    PHX
.19769d		5a		phy		                    PHY
.19769e		0b		phd		                    PHD
.19769f		08		php		                    PHP
.1976a0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1976a2		22 f8 71 19	jsl $1971f8	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.1976a6		b0 1a		bcs $1976c2	                    BCS done                            ; If invalid, just return
.1976a8		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the new column
.1976aa		e8		inx		                    INX
.1976ab		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the current row
.1976ad		e4 03		cpx $03		                    CPX #S_ANSI_VARS.COLS_VISIBLE,D     ; Are we off screen?
.1976af		90 0d		bcc $1976be	                    BCC nowrap                          ; No: just set the position
.1976b1		a2 00 00	ldx #$0000	                    LDX #0                              ; Yes: move to the first column
.1976b4		c8		iny		                    INY                                 ; And move to the next row
.1976b5		c4 07		cpy $07		                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Are we still off screen?
.1976b7		90 05		bcc $1976be	                    BCC nowrap                          ; No: just set the position
.1976b9		88		dey		                    DEY                                 ; Yes: lock to the last row
.1976ba		22 8a 77 19	jsl $19778a	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.1976be		22 26 77 19	jsl $197726	nowrap              JSL ANSI_LOCATE                     ; Set the cursor position
.1976c2		28		plp		done                PLP
.1976c3		2b		pld		                    PLD
.1976c4		7a		ply		                    PLY
.1976c5		fa		plx		                    PLX
.1976c6		6b		rtl		                    RTL
.1976c7						ANSI_CSRLEFT
.1976c7		da		phx		                    PHX
.1976c8		5a		phy		                    PHY
.1976c9		0b		phd		                    PHD
.1976ca		08		php		                    PHP
.1976cb		c2 30		rep #$30	                REP #$30        ; set A&X long
.1976cd		22 f8 71 19	jsl $1971f8	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.1976d1		b0 0d		bcs $1976e0	                    BCS done                    ; If invalid, just return
.1976d3		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D  ; Check that we are not already @ Zero
.1976d5		f0 09		beq $1976e0	                    BEQ done                    ; If so, just ignore this call
.1976d7		ca		dex		                    DEX
.1976d8		86 0e		stx $0e		                    STX #S_ANSI_VARS.CURSORX,D
.1976da		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.1976dc		22 26 77 19	jsl $197726	                    JSL ANSI_LOCATE
.1976e0		28		plp		done                PLP
.1976e1		2b		pld		                    PLD
.1976e2		7a		ply		                    PLY
.1976e3		fa		plx		                    PLX
.1976e4		6b		rtl		                    RTL
.1976e5						ANSI_CSRUP
.1976e5		da		phx		                    PHX
.1976e6		5a		phy		                    PHY
.1976e7		0b		phd		                    PHD
.1976e8		08		php		                    PHP
.1976e9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1976eb		22 f8 71 19	jsl $1971f8	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.1976ef		b0 0d		bcs $1976fe	                    BCS done                    ; If invalid, just return
.1976f1		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D  ; Check if we are not already @ Zero
.1976f3		f0 09		beq $1976fe	                    BEQ done                    ; If we are, just ignore the call
.1976f5		88		dey		                    DEY
.1976f6		84 10		sty $10		                    STY #S_ANSI_VARS.CURSORY,D
.1976f8		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D
.1976fa		22 26 77 19	jsl $197726	                    JSL ANSI_LOCATE
.1976fe		28		plp		done                PLP
.1976ff		2b		pld		                    PLD
.197700		7a		ply		                    PLY
.197701		fa		plx		                    PLX
.197702		6b		rtl		                    RTL
.197703						ANSI_CSRDOWN
.197703		da		phx		                    PHX
.197704		5a		phy		                    PHY
.197705		0b		phd		                    PHD
.197706		08		php		                    PHP
.197707		c2 30		rep #$30	                REP #$30        ; set A&X long
.197709		22 f8 71 19	jsl $1971f8	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.19770d		b0 12		bcs $197721	                    BCS done                            ; If invalid, just return
.19770f		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the current column
.197711		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the new row
.197713		c8		iny		                    INY
.197714		c4 07		cpy $07		                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Check to see if we're off screen
.197716		90 05		bcc $19771d	                    BCC noscroll                        ; No: go ahead and set the position
.197718		88		dey		                    DEY                                 ; Yes: go back to the last row
.197719		22 8a 77 19	jsl $19778a	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.19771d		22 26 77 19	jsl $197726	noscroll            JSL ANSI_LOCATE                     ; And set the cursor position
.197721		28		plp		done                PLP
.197722		2b		pld		                    PLD
.197723		7a		ply		                    PLY
.197724		fa		plx		                    PLX
.197725		6b		rtl		                    RTL
.197726						ANSI_LOCATE
.197726		da		phx		                    PHX
.197727		5a		phy		                    PHY
.197728		0b		phd		                    PHD
.197729		08		php		                    PHP
.19772a		22 f8 71 19	jsl $1971f8	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.19772e		b0 55		bcs $197785	                    BCS done                    ; If invalid, just return
.197730		c2 30		rep #$30	                REP #$30        ; set A&X long
.197732						locate_scroll
.197732		c4 07		cpy $07		                    CPY #S_ANSI_VARS.LINES_VISIBLE,D
.197734		90 07		bcc $19773d	                    BCC locate_scrolldone
.197736		22 8a 77 19	jsl $19778a	                    JSL ANSI_SCROLLUP
.19773a		88		dey		                    DEY
.19773b		80 f5		bra $197732	                    BRA locate_scroll
.19773d						locate_scrolldone
.19773d		86 0e		stx $0e		                    STX #S_ANSI_VARS.CURSORX,D
.19773f		84 10		sty $10		                    STY #S_ANSI_VARS.CURSORY,D
.197741		a5 00		lda $00		                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.197743						locate_row
.197743		c0 00 00	cpy #$0000	                    CPY #$0
.197746		f0 08		beq $197750	                    BEQ locate_right
.197748		18		clc		locate_down         CLC
.197749		65 05		adc $05		                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.19774b		88		dey		                    DEY
.19774c		f0 02		beq $197750	                    BEQ locate_right
.19774e		80 f8		bra $197748	                    BRA locate_down
.197750		18		clc		locate_right        CLC
.197751		65 0e		adc $0e		                    ADC #S_ANSI_VARS.CURSORX,D      ; move the cursor right X columns
.197753		85 0b		sta $0b		                    STA #S_ANSI_VARS.CURSORPOS,D
.197755		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.197757		e2 20		sep #$20	                SEP #$20        ; set A short
.197759		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT
.19775d		c9 04		cmp #$04	                    CMP #CHAN_EVID
.19775f		f0 0e		beq $19776f	                    beq locate_evid
.197761		c2 20		rep #$20	                REP #$20        ; set A long
.197763		98		tya		                    TYA
.197764		8f 16 00 af	sta $af0016	                    STA @l VKY_TXT_CURSOR_Y_REG_L
.197768		8a		txa		                    TXA
.197769		8f 14 00 af	sta $af0014	                    STA @l VKY_TXT_CURSOR_X_REG_L
.19776d		80 0c		bra $19777b	                    BRA update_colorpos
.19776f						locate_evid
.19776f		c2 20		rep #$20	                REP #$20        ; set A long
.197771		98		tya		                    TYA
.197772		8f 16 1e ae	sta $ae1e16	                    STA @l EVID_TXT_CURSOR_Y_REG_L
.197776		8a		txa		                    TXA
.197777		8f 14 1e ae	sta $ae1e14	                    STA @l EVID_TXT_CURSOR_X_REG_L
.19777b						update_colorpos
.19777b		c2 20		rep #$20	                REP #$20        ; set A long
.19777d		18		clc		                    CLC
.19777e		a5 0b		lda $0b		                    LDA #S_ANSI_VARS.CURSORPOS,D
.197780		69 00 20	adc #$2000	                    ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.197783		85 13		sta $13		                    STA #S_ANSI_VARS.COLORPOS,D
.197785		28		plp		done                PLP
.197786		2b		pld		                    PLD
.197787		7a		ply		                    PLY
.197788		fa		plx		                    PLX
.197789		6b		rtl		                    RTL
.19778a						ANSI_SCROLLUP
.19778a		da		phx		                    PHX
.19778b		5a		phy		                    PHY
.19778c		8b		phb		                    PHB
.19778d		0b		phd		                    PHD
.19778e		08		php		                    PHP
.19778f		22 f8 71 19	jsl $1971f8	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.197793		90 03		bcc $197798	                    BCC calc_size
.197795		82 81 00	brl $197819	                    BRL done                    ; If invalid, just return
.197798						calc_size
.197798		c2 30		rep #$30	                REP #$30        ; set A&X long
.19779a		a5 05		lda $05		                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.19779c		8f 00 01 00	sta $000100	                    STA @l UNSIGNED_MULT_A_LO
.1977a0		a5 07		lda $07		                    LDA #S_ANSI_VARS.LINES_VISIBLE,D
.1977a2		8f 02 01 00	sta $000102	                    STA @l UNSIGNED_MULT_B_LO
.1977a6		af 04 01 00	lda $000104	                    LDA @l UNSIGNED_MULT_AL_LO
.1977aa		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.1977ac		18		clc		                    CLC
.1977ad		a5 00		lda $00		                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.1977af		a8		tay		                    TAY
.1977b0		65 05		adc $05		                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.1977b2		aa		tax		                    TAX
.1977b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1977b5		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID
.1977b9		c9 04		cmp #$04	                    CMP #CHAN_EVID
.1977bb		f0 09		beq $1977c6	                    BEQ move_text_1                             ; Yes: do the move on the EVID memory
.1977bd						move_text_0
.1977bd		c2 20		rep #$20	                REP #$20        ; set A long
.1977bf		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.1977c1		54 af af	mvn $af,$af	                    MVN `CS_TEXT_MEM_PTR,`CS_TEXT_MEM_PTR       ; Move the data on the main screen
.1977c4		80 07		bra $1977cd	                    BRA scroll_color
.1977c6						move_text_1
.1977c6		c2 20		rep #$20	                REP #$20        ; set A long
.1977c8		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.1977ca		54 ae ae	mvn $ae,$ae	                    MVN `EVID_TEXT_MEM,`EVID_TEXT_MEM           ; Move the data on the EVID screen
.1977cd						scroll_color
.1977cd		c2 30		rep #$30	                REP #$30        ; set A&X long
.1977cf		18		clc		                    CLC
.1977d0		a5 16		lda $16		                    LDA #S_ANSI_VARS.COLORBEGIN,D
.1977d2		a8		tay		                    TAY
.1977d3		65 05		adc $05		                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.1977d5		aa		tax		                    TAX
.1977d6		e2 20		sep #$20	                SEP #$20        ; set A short
.1977d8		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID?
.1977dc		c9 04		cmp #$04	                    CMP #CHAN_EVID
.1977de		f0 09		beq $1977e9	                    BEQ move_color_1                            ; Yes: scroll the EVID color matrix
.1977e0						move_color_0
.1977e0		c2 20		rep #$20	                REP #$20        ; set A long
.1977e2		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.1977e4		54 af af	mvn $af,$af	                    MVN `CS_COLOR_MEM_PTR,`CS_COLOR_MEM_PTR     ; Move the data on the main screen
.1977e7		80 07		bra $1977f0	                    BRA vicky_lastline
.1977e9						move_color_1
.1977e9		c2 20		rep #$20	                REP #$20        ; set A long
.1977eb		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.1977ed		54 ae ae	mvn $ae,$ae	                    MVN `EVID_COLOR_MEM,`EVID_COLOR_MEM         ; Move the data on the EVID screen
.1977f0						vicky_lastline
.1977f0		c2 20		rep #$20	                REP #$20        ; set A long
.1977f2		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.1977f4		48		pha		                    PHA
.1977f5		18		clc		                    CLC
.1977f6		65 00		adc $00		                    ADC #S_ANSI_VARS.SCREENBEGIN,D
.1977f8		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.1977fa		a0 00 00	ldy #$0000	start_clear         LDY #0
.1977fd		a9 20 00	lda #$0020	                    LDA #' '
.197800		97 19		sta [$19],y	clr_text            STA [#S_ANSI_VARS.TMPPTR1,D],Y
.197802		c8		iny		                    INY
.197803		c4 0f		cpy $0f		                    CPY #COLS_VISIBLE,D
.197805		d0 f9		bne $197800	                    BNE clr_text
.197807		68		pla		vicky_lastcolor     PLA
.197808		18		clc		                    CLC
.197809		65 16		adc $16		                    ADC #S_ANSI_VARS.COLORBEGIN,D
.19780b		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.19780d		a0 00 00	ldy #$0000	start_color         LDY #0
.197810		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.197812		97 19		sta [$19],y	clr_color           STA [#S_ANSI_VARS.TMPPTR1,D],Y
.197814		c8		iny		                    INY
.197815		c4 05		cpy $05		                    CPY #S_ANSI_VARS.COLS_PER_LINE,D
.197817		d0 f9		bne $197812	                    BNE clr_color
.197819		28		plp		done                PLP
.19781a		2b		pld		                    PLD
.19781b		ab		plb		                    PLB
.19781c		7a		ply		                    PLY
.19781d		fa		plx		                    PLX
.19781e		6b		rtl		                    RTL
.19781f						ANSI_CLRSCREEN
.19781f		da		phx		                    PHX
.197820		5a		phy		                    PHY
.197821		0b		phd		                    PHD
.197822		08		php		                    PHP
.197823		22 f8 71 19	jsl $1971f8	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.197827		b0 1e		bcs $197847	                    BCS done                            ; If invalid, just return
.197829		e2 20		sep #$20	                SEP #$20        ; set A short
.19782b		c2 10		rep #$10	                REP #$10        ; set X long
.19782d		a0 00 00	ldy #$0000	                    LDY #0
.197830		a9 20		lda #$20	                    LDA #$20		                    ; Fill the Entire Screen with Space
.197832		97 00		sta [$00],y	iclearloop0	        STA [#S_ANSI_VARS.SCREENBEGIN,D],Y
.197834		c8		iny		                    INY
.197835		c0 00 20	cpy #$2000	                    CPY #$2000
.197838		d0 f8		bne $197832	                    BNE iclearloop0
.19783a		a0 00 00	ldy #$0000	                    LDY	#0
.19783d		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D         ; Fill the current color
.19783f		97 16		sta [$16],y	evid_clearloop1     STA [#S_ANSI_VARS.COLORBEGIN,D],Y
.197841		c8		iny		                    INY
.197842		c0 00 20	cpy #$2000	                    CPY #$2000
.197845		d0 f8		bne $19783f	                    BNE evid_clearloop1
.197847		28		plp		done                PLP
.197848		2b		pld		                    PLD
.197849		7a		ply		                    PLY
.19784a		fa		plx		                    PLX
.19784b		6b		rtl		                    RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/kbd_driver.asm

=16						KBD_INBUF_SIZE = 16         ; Number of scan codes that can be buffered
=0						KBD_STATE_IDLE = 0          ; Keyboard is IDLE
=1						KBD_STATE_E0 = 1            ; Keyboard has sent E0
=2						KBD_STATE_E02A = 2          ; Keybaord has sent E0 2A (leading to Print Screen E02AE037)
=3						KBD_STATE_E02AE0 = 3
=4						KBD_STATE_E1 = 4            ; Keyboard has sent E1 (leading to Pause/Break)
=5						KBD_STATE_E11D = 5
=6						KBD_STATE_E11D45 = 6
=7						KBD_STATE_E11D45E1 = 7
=8						KBD_STATE_E11D45E19D = 8
=9						KBD_STATE_E0B7 = 9          ; Keyboard has sent E0 B7 (leading to break of Print Screen E0 B7 E0 AA)
=10						KBD_STATE_E0B7E0 = 10
=0						KBD_ACTION_IGNORE = 0       ; State machine action: do nothing with the current byte
=1						KBD_ACTION_EMIT_BASE = 1    ; State machine action: translate scancode from base table and emit it
=2						KBD_ACTION_EMIT_E0 = 2      ; State machine action: translate scancode from E0 prefix table and emit it
=$01						KBD_STAT_OBF = $01          ; Keyboard status: Output Buffer is Full
=$02						KBD_STAT_IBF = $02          ; Keyboard status: Input Buffer is Full
=$a7						KBD_CTRL_CMD_DISABLE2 = $A7 ; Keybaord controller command: disable output device #2
=$a9						KBD_CTRL_CMD_ENABLE2 = $A9  ; Keybaord controller command: enable output device #2
=$aa						KBD_CTRL_CMD_SELFTEST = $AA ; Keyboard controller command: start self test
=$ab						KBD_CTRL_CMD_KBDTEST = $AB  ; Keyboard controller command: start keyboard test
=$ad						KBD_CTRL_CMD_DISABLE1 = $AD ; Keybaord controller command: disable output device #1
=$ae						KBD_CTRL_CMD_ENABLE1 = $AE  ; Keybaord controller command: enable output device #1
=$60						KBD_CTRL_CMD_WRITECMD = $60 ; Keyboard controller command: write to the command register
=$ff						KBD_CMD_RESET = $FF         ; Keyboard command: reset the keyboard
=$f4						KBD_CMD_ENABLE = $F4        ; Keyboard command: enable to keyboard
=$ed						KBD_CMD_SET_LED = $ED       ; Keyboard command: set the LEDs
=$55						KBD_RESP_OK = $55           ; Keyboard response: Command was OK
=$fa						KBD_RESP_ACK = $FA          ; Keyboard response: command acknowledged
=$01						KBD_LOCK_SCROLL = $01       ; LED/lock mask for Scroll Lock key
=$02						KBD_LOCK_NUMBER = $02       ; LED/lock mask for Num Lock key
=$04						KBD_LOCK_CAPS = $04         ; LED/lock mask for Caps Lock key
=$01						KBD_MOD_LSHIFT  = %00000001     ; Left shift is pressed
=$02						KBD_MOD_RSHIFT  = %00000010     ; Right shift is pressed
=$04						KBD_MOD_LCTRL   = %00000100     ; Left CTRL is pressed
=$08						KBD_MOD_RCTRL   = %00001000     ; Right CTRL is pressed
=$10						KBD_MOD_LALT    = %00010000     ; Left ALT is pressed
=$20						KBD_MOD_RALT    = %00100000     ; Right ALT is pressed
=$40						KBD_MOD_OS      = %01000000     ; OS key (e.g. Windows Key) is pressed
=$80						KBD_MOD_MENU    = %10000000     ; Menu key is pressed
=$80						KBD_CTRL_BREAK      = %10000000 ; CONTROL Flag to indicate if keyboard should capture BREAK
=$40						KBD_CTRL_MONITOR    = %01000000 ; CONTROL Flag to indicate if keyboard should trap ALT-BREAK to go to the monitor
=$80						KBD_STAT_BREAK  = %10000000     ; STATUS flag, BREAK has been pressed recently
=$01						KBD_STAT_SCAN   = %00000001     ; STATUS flag to indicate if there are scan codes in the queue
=$02						KBD_STAT_CHAR   = %00000010     ; STATUS flag to indicate if there are characters in the queue
=$61						KBD_SC_BREAK = $61              ; Scan code for the PAUSE/BREAK key
=$3a						KBD_SC_CAPSLOCK = $3A           ; Scan code for the CAPS lock key
=$45						KBD_SC_NUMLOCK = $45            ; Scan code for the NUM lock key
=$46						KBD_SC_SCROLL = $46             ; Scan code for the SCROLL lock key
=$2a						KBD_SC_LSHIFT = $2A             ; Scan code for the left SHIFT key
=$1d						KBD_SC_LCTRL = $1D              ; Scan code for the left CTLR key
=$38						KBD_SC_LALT = $38               ; Scan code for the left ALT key
=$36						KBD_SC_RSHIFT = $36             ; Scan code for the right SHIFT key
=$5e						KBD_SC_RCTRL = $5E              ; Scan code for the right CTRL key
=$5c						KBD_SC_RALT = $5C               ; Scan code for the right ALT key
=$38						KBD_SC_PIVOT = $38              ; Scan code we will use as a pivot for checking NUM lock
.0000						S_KBD_CONTROL
>0000						STATE               .byte ?                     ; The state of the keyboard controller state machine
>0001						CONTROL             .byte ?                     ; Control register
>0002						STATUS              .byte ?                     ; Status register
>0003						SC_BUF              .fill KBD_INBUF_SIZE        ; Buffer for keyboard scancodes read
>0013						SC_HEAD             .byte ?                     ; Index of the first scancode cell to write to
>0014						CHAR_BUF            .fill KBD_INBUF_SIZE        ; Character buffer
>0024						CHAR_HEAD           .byte ?                     ; Number of characters in the character buffer
>0025						MODIFIERS           .byte ?                     ; State of the modifier keys
>0026						LOCKS               .byte ?                     ; State of the lock keys: Caps, Num, Scroll
>0027						TBL_UNMOD           .dword ?                    ; Pointer to the scan code translation table for unmodified keys
>002b						TBL_SHIFT           .dword ?                    ; Pointer to the scan code translation table for shifted keys
>002f						TBL_CTRL            .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL
>0033						TBL_LOCK            .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
>0037						TBL_LOCK_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
>003b						TBL_CTRL_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL and SHIFT
.19784c						IINITKEYBOARD
.19784c		da		phx		                    PHX
.19784d		5a		phy		                    PHY
.19784e		0b		phd		                    PHD
.19784f		08		php		                    PHP
.197850		48		pha		                PHA             ; begin setdp macro
.197851		08		php		                PHP
.197852		c2 20		rep #$20	                REP #$20        ; set A long
.197854		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197857		5b		tcd		                TCD
.197858		28		plp		                PLP
.197859		68		pla		                PLA             ; end setdp macro
.19785a		e2 20		sep #$20	                SEP #$20        ; set A short
.19785c		c2 10		rep #$10	                REP #$10        ; set X long
.19785e		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1                        ; Disable the keyboard interrupts while we get things started
.197862		09 01		ora #$01	                    ORA #FNX1_INT00_KBD
.197864		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.197868		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                         ; Set the state machine to the starting IDLE state
.19786a		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.19786c		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D                ; Mark the scancode buffer as empty
.19786e		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D              ; Mark the character buffer as empty
.197870		64 25		stz $0f25	                    STZ #S_KBD_CONTROL.MODIFIERS,D              ; Default to modifiers being off
.197872		64 02		stz $0f02	                    STZ #S_KBD_CONTROL.STATUS,D                 ; Clear the status register
.197874		a9 80		lda #$80	                    LDA #KBD_CTRL_BREAK                         ; Enable BREAK processing
.197876		85 01		sta $0f01	                    STA #S_KBD_CONTROL.CONTROL,D
.197878		c2 20		rep #$20	                REP #$20        ; set A long
.19787a		a9 00 80	lda #$8000	                    LDA #<>SC_US_UNMOD
.19787d		85 27		sta $0f27	                    STA #S_KBD_CONTROL.TBL_UNMOD,D
.19787f		a9 80 80	lda #$8080	                    LDA #<>SC_US_SHFT
.197882		85 2b		sta $0f2b	                    STA #S_KBD_CONTROL.TBL_SHIFT,D
.197884		a9 00 81	lda #$8100	                    LDA #<>SC_US_CTRL
.197887		85 2f		sta $0f2f	                    STA #S_KBD_CONTROL.TBL_CTRL,D
.197889		a9 80 81	lda #$8180	                    LDA #<>SC_US_LOCK
.19788c		85 33		sta $0f33	                    STA #S_KBD_CONTROL.TBL_LOCK,D
.19788e		a9 00 82	lda #$8200	                    LDA #<>SC_US_LOCK_SHFT
.197891		85 37		sta $0f37	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.197893		a9 80 82	lda #$8280	                    LDA #<>SC_US_CTRL_SHFT
.197896		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.197898		e2 20		sep #$20	                SEP #$20        ; set A short
.19789a		a9 19		lda #$19	                    LDA #`SC_US_UNMOD
.19789c		85 29		sta $0f29	                    STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.19789e		a9 19		lda #$19	                    LDA #`SC_US_SHFT
.1978a0		85 2d		sta $0f2d	                    STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.1978a2		a9 19		lda #$19	                    LDA #`SC_US_CTRL
.1978a4		85 31		sta $0f31	                    STA #S_KBD_CONTROL.TBL_CTRL+2,D
.1978a6		a9 19		lda #$19	                    LDA #`SC_US_LOCK
.1978a8		85 35		sta $0f35	                    STA #S_KBD_CONTROL.TBL_LOCK+2,D
.1978aa		a9 19		lda #$19	                    LDA #`SC_US_LOCK_SHFT
.1978ac		85 39		sta $0f39	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.1978ae		a9 19		lda #$19	                    LDA #`SC_US_CTRL_SHFT
.1978b0		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.1978b2		a9 ad		lda #$ad	                    LDA #KBD_CTRL_CMD_DISABLE1  ; Disable the keyboard sending data
.1978b4		22 3d 79 19	jsl $19793d	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.1978b8		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.1978bc		af 03 18 af	lda $af1803	flush_output        LDA @l KBD_DATA_BUF         ; We just throw that away
.1978c0		a9 aa		lda #$aa	                    LDA #KBD_CTRL_CMD_SELFTEST  ; Send the self test command
.1978c2		22 48 79 19	jsl $197948	                    JSL KBD_CTRL_SND_CMD
.1978c6		c9 55		cmp #$55	                    CMP #KBD_RESP_OK            ; Did we get an OK?
.1978c8		f0 05		beq $1978cf	                    BEQ test_AB
.1978ca		a9 02		lda #$02	                    LDA #2                      ; Return error #2
.1978cc		82 5e 00	brl $19792d	                    BRL done
.1978cf		a9 ab		lda #$ab	test_AB             LDA #KBD_CTRL_CMD_KBDTEST   ; Send the keyboard test command
.1978d1		22 48 79 19	jsl $197948	                    JSL KBD_CTRL_SND_CMD
.1978d5		c9 00		cmp #$00	                    CMP #0                      ; Did we get a good response?
.1978d7		f0 05		beq $1978de	                    BEQ write_command
.1978d9		a9 03		lda #$03	                    LDA #3                      ; Return error #3
.1978db		82 4f 00	brl $19792d	                    BRL done
.1978de		a9 60		lda #$60	write_command       LDA #KBD_CTRL_CMD_WRITECMD
.1978e0		a2 43 00	ldx #$0043	                    LDX #%01000011              ; Translate to set 1, no interrupts
.1978e3		22 a2 79 19	jsl $1979a2	                    JSL KBD_CTRL_SND_CMD_P
.1978e7		a9 ae		lda #$ae	enable_dev1         LDA #KBD_CTRL_CMD_ENABLE1   ; Re-enable the keyboard sending data
.1978e9		22 3d 79 19	jsl $19793d	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.1978ed		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.1978f1		a9 ff		lda #$ff	reset_kbd           LDA #KBD_CMD_RESET          ; Send a reset command to the keyboard
.1978f3		a2 ff ff	ldx #$ffff	                    LDX #$FFFF                  ; And wait a while for it to complete the reset
.1978f6		22 59 79 19	jsl $197959	                    JSL KBD_SND_CMD
.1978fa		a0 80 00	ldy #$0080	                    LDY #128                    ; Attemp enabling the keyboard 128 times
.1978fd		a9 f4		lda #$f4	enable_loop         LDA #KBD_CMD_ENABLE         ; Try to enable the keyboard
.1978ff		a2 00 00	ldx #$0000	                    LDX #0
.197902		22 59 79 19	jsl $197959	                    JSL KBD_SND_CMD
.197906		c9 fa		cmp #$fa	                    CMP #KBD_RESP_ACK           ; Did the keyboard acknowledge the command?
.197908		f0 07		beq $197911	                    BEQ set_led                 ; Yes: try to set the LEDs
.19790a		88		dey		                    DEY                         ; No: try again... counting down
.19790b		d0 f0		bne $1978fd	                    BNE enable_loop             ; If we are out of attempts...
.19790d		a9 05		lda #$05	                    LDA #5                      ; Return error #5
.19790f		80 1c		bra $19792d	                    BRA done
.197911		a9 00		lda #$00	set_led             LDA #0                      ; Set the state of the locks
.197913		22 c9 7b 19	jsl $197bc9	                    JSL KBD_SETLOCKS
.197917		af 41 01 00	lda $000141	                    LDA @l INT_PENDING_REG1     ; Read the Pending Register &
.19791b		29 01		and #$01	                    AND #FNX1_INT00_KBD
.19791d		8f 41 01 00	sta $000141	                    STA @l INT_PENDING_REG1     ; Writing it back will clear the Active Bit
.197921		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.197925		29 fe		and #$fe	                    AND #~FNX1_INT00_KBD
.197927		8f 4d 01 00	sta $00014d	                    STA @l INT_MASK_REG1
.19792b		a9 00		lda #$00	return_0            LDA #0                      ; Return status code for success
.19792d		28		plp		done                PLP
.19792e		2b		pld		                    PLD
.19792f		7a		ply		                    PLY
.197930		fa		plx		                    PLX
.197931		6b		rtl		                    RTL
.197932						KBD_WAIT_OUT
.197932		48		pha		                    PHA
.197933		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.197937		89 01		bit #$01	                    BIT #KBD_STAT_OBF       ; Check to see if the output buffer is full
.197939		f0 f8		beq $197933	                    BEQ wait                ; If it isn't, keep waiting
.19793b		68		pla		                    PLA
.19793c		6b		rtl		                    RTL
.19793d						KBD_WAIT_IN
.19793d		48		pha		                    PHA
.19793e		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.197942		89 02		bit #$02	                    BIT #KBD_STAT_IBF       ; Check to see if the input buffer has data
.197944		d0 f8		bne $19793e	                    BNE wait                ; If not, wait for it to have something
.197946		68		pla		                    PLA
.197947		6b		rtl		                    RTL
.197948						KBD_CTRL_SND_CMD
.197948		22 3d 79 19	jsl $19793d	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.19794c		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.197950		22 32 79 19	jsl $197932	                    JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.197954		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.197958		6b		rtl		                    RTL
.197959						KBD_SND_CMD
.197959		22 3d 79 19	jsl $19793d	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.19795d		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.197961		c2 10		rep #$10	                REP #$10        ; set X long
.197963		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.197966		f0 0b		beq $197973	                    BEQ get_response        ; If 0, check for a response
.197968		ca		dex		                    DEX                     ; Count down
.197969		ea		nop		                    NOP                     ; And do a delay
.19796a		ea		nop		                    NOP
.19796b		ea		nop		                    NOP
.19796c		ea		nop		                    NOP
.19796d		ea		nop		                    NOP
.19796e		ea		nop		                    NOP
.19796f		ea		nop		                    NOP
.197970		ea		nop		                    NOP
.197971		80 f0		bra $197963	                    BRA delay
.197973		22 32 79 19	jsl $197932	get_response        JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.197977		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.19797b		6b		rtl		                    RTL
.19797c						KBD_SND_CMD_P
.19797c		22 3d 79 19	jsl $19793d	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.197980		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.197984		8a		txa		                    TXA                     ; Send the parameter to the keyboard
.197985		c2 10		rep #$10	                REP #$10        ; set X long
.197987		a2 e8 03	ldx #$03e8	                    LDX #1000
.19798a		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.19798d		f0 0a		beq $197999	                    BEQ send_data           ; If 0, check for a response
.19798f		ca		dex		                    DEX                     ; Count down
.197990		ea		nop		                    NOP                     ; And do a delay
.197991		ea		nop		                    NOP
.197992		ea		nop		                    NOP
.197993		ea		nop		                    NOP
.197994		ea		nop		                    NOP
.197995		ea		nop		                    NOP
.197996		ea		nop		                    NOP
.197997		80 f1		bra $19798a	                    BRA delay
.197999		22 3d 79 19	jsl $19793d	send_data           JSL KBD_WAIT_IN
.19799d		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.1979a1						get_response
.1979a1		6b		rtl		                    RTL
.1979a2						KBD_CTRL_SND_CMD_P
.1979a2		22 3d 79 19	jsl $19793d	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.1979a6		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.1979aa		8a		txa		                    TXA
.1979ab		22 3d 79 19	jsl $19793d	                    JSL KBD_WAIT_IN         ; Send the parameter to the controller
.1979af		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.1979b3		6b		rtl		                    RTL
.1979b4						KBD_PROCESS_BYTE
.1979b4		8b		phb		                    PHB
.1979b5		0b		phd		                    PHD
.1979b6		08		php		                    PHP
.1979b7		48		pha		                PHA             ; begin setdbr macro
.1979b8		08		php		                PHP
.1979b9		e2 20		sep #$20	                SEP #$20        ; set A short
.1979bb		a9 19		lda #$19	                LDA #`KBD_STATE_MACH
.1979bd		48		pha		                PHA
.1979be		ab		plb		                PLB
.1979bf		28		plp		                PLP
.1979c0		68		pla		                PLA             ; end setdbr macro
.1979c1		48		pha		                PHA             ; begin setdp macro
.1979c2		08		php		                PHP
.1979c3		c2 20		rep #$20	                REP #$20        ; set A long
.1979c5		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1979c8		5b		tcd		                TCD
.1979c9		28		plp		                PLP
.1979ca		68		pla		                PLA             ; end setdp macro
.1979cb		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1979cd		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF                 ; Get the current scancode byte
.1979d1		d0 03		bne $1979d6	                    BNE save_scancode
.1979d3		82 67 00	brl $197a3d	                    BRL done                            ; If it's 0, just ignore it
.1979d6						LOCALS
>0001						l_break             .byte ?                             ; The make/break bit of the scancode
>0002						l_code              .byte ?                             ; The scancode
.1979d6		48		pha		save_scancode       PHA
.1979d7		48		pha		                    PHA
.1979d8		29 80		and #$80	                    AND #$80
.1979da		83 01		sta $01,s	                    STA l_break                         ; Save the make/break bit
.1979dc		a2 00		ldx #$00	                    LDX #0                              ; Start from the beginning
.1979de		bf 00 7f 19	lda $197f00,x	chk_transition      LDA @l KBD_STATE_MACH,X             ; Get the tranition's start state
.1979e2		c9 ff		cmp #$ff	                    CMP #$FF
.1979e4		d0 03		bne $1979e9	                    BNE compare_state
.1979e6		82 54 00	brl $197a3d	                    BRL done                            ; If $FF: we've reached the end... this is an error... just ignore it?
.1979e9		c5 00		cmp $0f00	compare_state       CMP #S_KBD_CONTROL.STATE,D          ; Compare it to the current state
.1979eb		d0 0e		bne $1979fb	                    BNE next_transition                 ; If they don't match, go to the next transition
.1979ed		bf 01 7f 19	lda $197f01,x	                    LDA @l KBD_STATE_MACH+1,X           ; Get the tranition's test byte
.1979f1		f0 0e		beq $197a01	                    BEQ apply                           ; Is it 0? Yes: the default applies
.1979f3		a3 02		lda $02,s	                    LDA l_code                          ; Otherwise: get the scan code back
.1979f5		df 01 7f 19	cmp $197f01,x	                    CMP @l KBD_STATE_MACH+1,X           ; Compare it to the transition's test byte
.1979f9		f0 06		beq $197a01	                    BEQ apply                           ; If equal: this matches, apply the transition
.1979fb		e8		inx		next_transition     INX                                 ; Move to the next transition
.1979fc		e8		inx		                    INX
.1979fd		e8		inx		                    INX
.1979fe		e8		inx		                    INX
.1979ff		80 dd		bra $1979de	                    BRA chk_transition                  ; Check to see if the next transition applies
.197a01		bf 02 7f 19	lda $197f02,x	apply               LDA @l KBD_STATE_MACH+2,X           ; Get the tranition's destination state
.197a05		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D          ; And save it as our new state
.197a07		bf 03 7f 19	lda $197f03,x	                    LDA @l KBD_STATE_MACH+3,X           ; Get the tranition's action
.197a0b		c9 00		cmp #$00	                    CMP #KBD_ACTION_IGNORE              ; Is it IGNORE?
.197a0d		f0 2e		beq $197a3d	                    BEQ done                            ; Yes: we're done for now
.197a0f		c9 01		cmp #$01	                    CMP #KBD_ACTION_EMIT_BASE           ; Is it EMIT_BASE?
.197a11		f0 06		beq $197a19	                    BEQ emit_base                       ; Yes: emit the translation of the base byte
.197a13		c9 02		cmp #$02	                    CMP #KBD_ACTION_EMIT_E0             ; Is it EMIT_E0?
.197a15		f0 0f		beq $197a26	                    BEQ emit_e0                         ; Yes: emit the translation of the E0 prefixed byte
.197a17		80 18		bra $197a31	                    BRA emit_A                          ; Otherwise: just emit the action byte as the new scan code
.197a19		a3 02		lda $02,s	emit_base           LDA l_code
.197a1b		29 7f		and #$7f	                    AND #$7F                            ; Strip off the make/break bit
.197a1d		aa		tax		                    TAX
.197a1e		bf 00 7e 19	lda $197e00,x	                    LDA @l TBL_SET1,X                   ; Get the translation of the base scan code
.197a22		03 01		ora $01,s	                    ORA l_break                         ; Add the make/break bit back
.197a24		80 0b		bra $197a31	                    BRA emit_A                          ; Emit the translation
.197a26		a3 02		lda $02,s	emit_e0             LDA l_code
.197a28		29 7f		and #$7f	                    AND #$7F                            ; Strip off any make/break bit
.197a2a		aa		tax		                    TAX
.197a2b		bf 80 7e 19	lda $197e80,x	                    LDA @l TBL_SET1_E0,X                ; Get the translation of the E0 prefixed scan code
.197a2f		03 01		ora $01,s	                    ORA l_break                         ; Add in the make/break flag
.197a31		c9 00		cmp #$00	emit_A              CMP #0                              ; Is the code NUL?
.197a33		f0 08		beq $197a3d	                    BEQ done                            ; If so, skip enqueuing it
.197a35		22 45 7a 19	jsl $197a45	enqueue             JSL KBD_SC_ENQUEUE                  ; Enqueue the scancode
.197a39		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                 ; Set the state machine to the initial state
.197a3b		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.197a3d						done
.197a3d		e2 20		sep #$20	                SEP #$20        ; set A short
.197a3f		68		pla		                    PLA                                 ; Clean the scan code byte from the stack
.197a40		68		pla		                    PLA
.197a41		28		plp		                    PLP
.197a42		2b		pld		                    PLD
.197a43		ab		plb		                    PLB
.197a44		6b		rtl		                    RTL
.197a45						KBD_SC_ENQUEUE
.197a45		0b		phd		                    PHD
.197a46		08		php		                    PHP
.197a47		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.197a48		48		pha		                PHA             ; begin setdp macro
.197a49		08		php		                PHP
.197a4a		c2 20		rep #$20	                REP #$20        ; set A long
.197a4c		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197a4f		5b		tcd		                TCD
.197a50		28		plp		                PLP
.197a51		68		pla		                PLA             ; end setdp macro
.197a52		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197a54		c9 00		cmp #$00	                    CMP #0                          ; Is the scan code a NUL?
.197a56		f0 2f		beq $197a87	                    BEQ done                        ; Yes: just ignore
.197a58		c9 61		cmp #$61	                    CMP #KBD_SC_BREAK               ; Is it the BREAK key?
.197a5a		d0 10		bne $197a6c	                    BNE chk_locks                   ; No: check the various lock keys
.197a5c		a5 01		lda $0f01	                    LDA #S_KBD_CONTROL.CONTROL,D
.197a5e		89 80		bit #$80	                    BIT #KBD_CTRL_BREAK                 ; Are we processing BREAK?
.197a60		f0 08		beq $197a6a	                    BEQ enqueue_break                   ; No: enqueue it as normal
.197a62		a9 80		lda #$80	                    LDA #KBD_STAT_BREAK                 ; Yes: turn on the BREAK bit
.197a64		05 02		ora $0f02	                    ORA #S_KBD_CONTROL.STATUS,D
.197a66		85 02		sta $0f02	                    STA #S_KBD_CONTROL.STATUS,D
.197a68		80 1d		bra $197a87	                    BRA done                            ; And we're done
.197a6a		a9 61		lda #$61	enqueue_break       LDA #KBD_SC_BREAK
.197a6c		c9 3a		cmp #$3a	chk_locks           CMP #KBD_SC_CAPSLOCK            ; Is it the CAPS lock?
.197a6e		f0 1a		beq $197a8a	                    BEQ toggle_caps                 ; Yes: toggle the CAPS lock bits
.197a70		c9 45		cmp #$45	                    CMP #KBD_SC_NUMLOCK             ; Is it the NUM lock?
.197a72		f0 20		beq $197a94	                    BEQ toggle_num                  ; Yes: toggle the NUM lock bits
.197a74		c9 46		cmp #$46	                    CMP #KBD_SC_SCROLL              ; Is it the SCROLL lock?
.197a76		f0 22		beq $197a9a	                    BEQ toggle_scroll               ; Yes: toggle the SCROLL lock bits
.197a78		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.197a7a		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.197a7c		f0 09		beq $197a87	                    BEQ done                        ; Yes: we're full... ignore the scancode
.197a7e		95 03		sta $0f03,x	                    STA #S_KBD_CONTROL.SC_BUF,D,X   ; No: we have room, write the scan code to the buffer
.197a80		e8		inx		                    INX                             ; Advance to the next location
.197a81		86 13		stx $0f13	                    STX #S_KBD_CONTROL.SC_HEAD,D
.197a83		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Set the KBD_STAT_SCAN bit
.197a85		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.197a87		28		plp		done                PLP
.197a88		2b		pld		                    PLD
.197a89		6b		rtl		                    RTL
.197a8a		a5 26		lda $0f26	toggle_caps         LDA #S_KBD_CONTROL.LOCKS,D
.197a8c		49 04		eor #$04	                    EOR #KBD_LOCK_CAPS              ; Toggle the CAPS lock
.197a8e		22 c9 7b 19	jsl $197bc9	save_locks          JSL KBD_SETLOCKS                ; Set the locks
.197a92		80 f3		bra $197a87	                    BRA done
.197a94		a5 26		lda $0f26	toggle_num          LDA #S_KBD_CONTROL.LOCKS,D
.197a96		49 02		eor #$02	                    EOR #KBD_LOCK_NUMBER            ; Toggle the NUM lock
.197a98		80 f4		bra $197a8e	                    BRA save_locks
.197a9a		a5 26		lda $0f26	toggle_scroll       LDA #S_KBD_CONTROL.LOCKS,D
.197a9c		49 01		eor #$01	                    EOR #KBD_LOCK_SCROLL            ; Toggle the SCROLL lock
.197a9e		80 ee		bra $197a8e	                    BRA save_locks
.197aa0						KBD_CHAR_ENQUEUE
.197aa0		0b		phd		                    PHD
.197aa1		08		php		                    PHP
.197aa2		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.197aa3		48		pha		                PHA             ; begin setdp macro
.197aa4		08		php		                PHP
.197aa5		c2 20		rep #$20	                REP #$20        ; set A long
.197aa7		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197aaa		5b		tcd		                TCD
.197aab		28		plp		                PLP
.197aac		68		pla		                PLA             ; end setdp macro
.197aad		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197aaf		c9 00		cmp #$00	                    CMP #0                          ; Is the character a NUL?
.197ab1		f0 0f		beq $197ac2	                    BEQ done                        ; Yes: just ignore
.197ab3		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D  ; Get the index of the next free spot
.197ab5		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.197ab7		f0 09		beq $197ac2	                    BEQ done                        ; Yes: we're full... ignore the scancode
.197ab9		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X ; No: we have room, write the scan code to the buffer
.197abb		e8		inx		                    INX                             ; Advance to the next location
.197abc		86 24		stx $0f24	                    STX #S_KBD_CONTROL.CHAR_HEAD,D
.197abe		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR              ; Set the KBD_STAT_CHAR bit
.197ac0		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.197ac2		28		plp		done                PLP
.197ac3		2b		pld		                    PLD
.197ac4		6b		rtl		                    RTL
.197ac5						KBD_CHAR_DEQUEUE
.197ac5		da		phx		                    PHX
.197ac6		0b		phd		                    PHD
.197ac7		08		php		                    PHP
.197ac8		48		pha		                PHA             ; begin setdp macro
.197ac9		08		php		                PHP
.197aca		c2 20		rep #$20	                REP #$20        ; set A long
.197acc		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197acf		5b		tcd		                TCD
.197ad0		28		plp		                PLP
.197ad1		68		pla		                PLA             ; end setdp macro
.197ad2		78		sei		                    SEI                                 ; Disable IRQ for the duration of this routine to avoid race conditions
.197ad3		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197ad5		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; Get the index of the next free spot
.197ad7		f0 21		beq $197afa	                    BEQ return_empty                    ; If it's 0, we have no data
.197ad9		a5 14		lda $0f14	                    LDA #S_KBD_CONTROL.CHAR_BUF,D       ; Get the character at the head of the queue
.197adb		48		pha		                    PHA                                 ; Save it
.197adc		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; How many bytes were there?
.197ade		e0 01		cpx #$01	                    CPX #1                              ; Is it one?
.197ae0		d0 08		bne $197aea	                    BNE copy_down                       ; No: we need to copy down the remaining bytes
.197ae2		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D      ; Yes: mark that we have no data in the queue now
.197ae4		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR                  ; Clear the KBD_STAT_CHAR bit
.197ae6		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.197ae8		80 0d		bra $197af7	                    BRA return_head                     ; And return the character we found
.197aea		a2 00		ldx #$00	copy_down           LDX #0                              ; Starting at the beginning of the buffer...
.197aec		b5 15		lda $0f15,x	loop                LDA #S_KBD_CONTROL.CHAR_BUF+1,D,X   ; Get the next byte
.197aee		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X     ; Move it down
.197af0		e8		inx		                    INX                                 ; And move to the next byte
.197af1		e4 24		cpx $0f24	                    CPX #S_KBD_CONTROL.CHAR_HEAD,D      ; Have we reached the end?
.197af3		d0 f7		bne $197aec	                    BNE loop                            ; No: keep copying bytes
.197af5		c6 24		dec $0f24	                    DEC #S_KBD_CONTROL.CHAR_HEAD,D      ; Decrement the index
.197af7		68		pla		return_head         PLA                                 ; Get the character back
.197af8		80 02		bra $197afc	                    BRA done                            ; And return it
.197afa		a9 00		lda #$00	return_empty        LDA #0                              ; Return: 0 for no character
.197afc		28		plp		done                PLP
.197afd		2b		pld		                    PLD
.197afe		fa		plx		                    PLX
.197aff		6b		rtl		                    RTL
.197b00						KBD_GET_SCANCODE
.197b00		da		phx		                    PHX
.197b01		0b		phd		                    PHD
.197b02		08		php		                    PHP
.197b03		48		pha		                PHA             ; begin setdp macro
.197b04		08		php		                PHP
.197b05		c2 20		rep #$20	                REP #$20        ; set A long
.197b07		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197b0a		5b		tcd		                TCD
.197b0b		28		plp		                PLP
.197b0c		68		pla		                PLA             ; end setdp macro
.197b0d		78		sei		                    SEI                             ; Disable IRQ for the duration of this routine to avoid race conditions
.197b0e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197b10		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.197b12		f0 21		beq $197b35	                    BEQ return_empty                ; If it's 0, we have no data
.197b14		a5 03		lda $0f03	                    LDA #S_KBD_CONTROL.SC_BUF,D     ; Get the scan code at the head of the queue
.197b16		48		pha		                    PHA                             ; Save it
.197b17		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; How many bytes were there?
.197b19		e0 01		cpx #$01	                    CPX #1                          ; Is it one?
.197b1b		d0 08		bne $197b25	                    BNE copy_down                   ; No: we need to copy down the remaining bytes
.197b1d		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D    ; Yes: mark that we have no data in the queue now
.197b1f		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Clear the KBD_STAT_SCAN bit
.197b21		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.197b23		80 0d		bra $197b32	                    BRA return_head                 ; And return the scan code we found
.197b25		a2 00		ldx #$00	copy_down           LDX #0                          ; Starting at the beginning of the buffer...
.197b27		b5 04		lda $0f04,x	loop                LDA #S_KBD_CONTROL.SC_BUF+1,D,X ; Get the next byte
.197b29		85 03		sta $0f03	                    STA #S_KBD_CONTROL.SC_BUF,D     ; Move it down
.197b2b		e8		inx		                    INX                             ; And move to the next byte
.197b2c		e4 13		cpx $0f13	                    CPX #S_KBD_CONTROL.SC_HEAD,D    ; Have we reached the end?
.197b2e		d0 f7		bne $197b27	                    BNE loop                        ; No: keep copying bytes
.197b30		c6 13		dec $0f13	                    DEC #S_KBD_CONTROL.SC_HEAD,D    ; Reduce the index to the next free byte
.197b32		68		pla		return_head         PLA                             ; Get the scan code back
.197b33		80 02		bra $197b37	                    BRA done                        ; And return it
.197b35		a9 00		lda #$00	return_empty        LDA #0                          ; Return: 0 for no scan code
.197b37		28		plp		done                PLP
.197b38		2b		pld		                    PLD
.197b39		fa		plx		                    PLX
.197b3a		6b		rtl		                    RTL
.197b3b						KBD_GETMODS
.197b3b		0b		phd		                PHD
.197b3c		08		php		                PHP
.197b3d		48		pha		                PHA             ; begin setdp macro
.197b3e		08		php		                PHP
.197b3f		c2 20		rep #$20	                REP #$20        ; set A long
.197b41		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197b44		5b		tcd		                TCD
.197b45		28		plp		                PLP
.197b46		68		pla		                PLA             ; end setdp macro
.197b47		e2 20		sep #$20	                SEP #$20        ; set A short
.197b49		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.197b4b		28		plp		                PLP
.197b4c		2b		pld		                PLD
.197b4d		6b		rtl		                RTL
.197b4e						KBD_GET_STAT
.197b4e		0b		phd		                PHD
.197b4f		08		php		                PHP
.197b50		48		pha		                PHA             ; begin setdp macro
.197b51		08		php		                PHP
.197b52		c2 20		rep #$20	                REP #$20        ; set A long
.197b54		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197b57		5b		tcd		                TCD
.197b58		28		plp		                PLP
.197b59		68		pla		                PLA             ; end setdp macro
.197b5a		e2 20		sep #$20	                SEP #$20        ; set A short
.197b5c		a5 02		lda $0f02	                LDA #S_KBD_CONTROL.STATUS,D
.197b5e		28		plp		                PLP
.197b5f		2b		pld		                PLD
.197b60		6b		rtl		                RTL
.197b61						KBD_TEST_BREAK
.197b61		0b		phd		                PHD
.197b62		08		php		                PHP
.197b63		48		pha		                PHA             ; begin setdp macro
.197b64		08		php		                PHP
.197b65		c2 20		rep #$20	                REP #$20        ; set A long
.197b67		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197b6a		5b		tcd		                TCD
.197b6b		28		plp		                PLP
.197b6c		68		pla		                PLA             ; end setdp macro
.197b6d		e2 20		sep #$20	                SEP #$20        ; set A short
.197b6f		a9 80		lda #$80	                LDA #KBD_STAT_BREAK             ; Check the BREAK bit in STATUS
.197b71		14 02		trb $0f02	                TRB #S_KBD_CONTROL.STATUS,D     ; ... and clear it
.197b73		d0 04		bne $197b79	                BNE ret_true                    ; If it was set, return TRUE
.197b75		28		plp		ret_false       PLP                             ; Otherwise, return false
.197b76		2b		pld		                PLD
.197b77		18		clc		                CLC
.197b78		6b		rtl		                RTL
.197b79		28		plp		ret_true        PLP
.197b7a		2b		pld		                PLD
.197b7b		38		sec		                SEC
.197b7c		6b		rtl		                RTL
.197b7d						KBD_GETMODS_ANSI
.197b7d		0b		phd		                    PHD
.197b7e		08		php		                    PHP
.197b7f		48		pha		                PHA             ; begin setdp macro
.197b80		08		php		                PHP
.197b81		c2 20		rep #$20	                REP #$20        ; set A long
.197b83		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197b86		5b		tcd		                TCD
.197b87		28		plp		                PLP
.197b88		68		pla		                PLA             ; end setdp macro
.197b89		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197b8b		a9 00		lda #$00	                    LDA #0                      ; Make space for the result code
.197b8d		48		pha		                    PHA
>0001						l_result            .byte ?
.197b8e		a5 25		lda $0f25	                    LDA #S_KBD_CONTROL.MODIFIERS,D
.197b90		89 03		bit #$03	                    BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT
.197b92		f0 06		beq $197b9a	                    BEQ check_alt
.197b94		a3 01		lda $01,s	                    LDA l_result
.197b96		09 02		ora #$02	                    ORA #%00000010
.197b98		83 01		sta $01,s	                    STA l_result
.197b9a		a5 25		lda $0f25	check_alt           LDA #S_KBD_CONTROL.MODIFIERS,D
.197b9c		89 30		bit #$30	                    BIT #KBD_MOD_LALT | KBD_MOD_RALT
.197b9e		f0 06		beq $197ba6	                    BEQ check_ctrl
.197ba0		a3 01		lda $01,s	                    LDA l_result
.197ba2		09 04		ora #$04	                    ORA #%00000100
.197ba4		83 01		sta $01,s	                    STA l_result
.197ba6		a5 25		lda $0f25	check_ctrl          LDA #S_KBD_CONTROL.MODIFIERS,D
.197ba8		89 0c		bit #$0c	                    BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL
.197baa		f0 06		beq $197bb2	                    BEQ return_result
.197bac		a3 01		lda $01,s	                    LDA l_result
.197bae		09 08		ora #$08	                    ORA #%00001000
.197bb0		83 01		sta $01,s	                    STA l_result
.197bb2		68		pla		return_result       PLA
.197bb3		28		plp		                    PLP
.197bb4		2b		pld		                    PLD
.197bb5		6b		rtl		                    RTL
.197bb6						KBD_GETLOCKS
.197bb6		0b		phd		                PHD
.197bb7		08		php		                PHP
.197bb8		48		pha		                PHA             ; begin setdp macro
.197bb9		08		php		                PHP
.197bba		c2 20		rep #$20	                REP #$20        ; set A long
.197bbc		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197bbf		5b		tcd		                TCD
.197bc0		28		plp		                PLP
.197bc1		68		pla		                PLA             ; end setdp macro
.197bc2		e2 20		sep #$20	                SEP #$20        ; set A short
.197bc4		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D
.197bc6		28		plp		                PLP
.197bc7		2b		pld		                PLD
.197bc8		6b		rtl		                RTL
.197bc9						KBD_SETLOCKS
.197bc9		0b		phd		                PHD
.197bca		08		php		                PHP
.197bcb		48		pha		                PHA             ; begin setdp macro
.197bcc		08		php		                PHP
.197bcd		c2 20		rep #$20	                REP #$20        ; set A long
.197bcf		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197bd2		5b		tcd		                TCD
.197bd3		28		plp		                PLP
.197bd4		68		pla		                PLA             ; end setdp macro
.197bd5		e2 20		sep #$20	                SEP #$20        ; set A short
.197bd7		85 26		sta $0f26	                STA #S_KBD_CONTROL.LOCKS,D
.197bd9		28		plp		                PLP
.197bda		2b		pld		                PLD
.197bdb		6b		rtl		                RTL
.197bdc						KBD_GET_CONTROL
.197bdc		0b		phd		                PHD
.197bdd		08		php		                PHP
.197bde		48		pha		                PHA             ; begin setdp macro
.197bdf		08		php		                PHP
.197be0		c2 20		rep #$20	                REP #$20        ; set A long
.197be2		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197be5		5b		tcd		                TCD
.197be6		28		plp		                PLP
.197be7		68		pla		                PLA             ; end setdp macro
.197be8		e2 20		sep #$20	                SEP #$20        ; set A short
.197bea		a5 01		lda $0f01	                LDA #S_KBD_CONTROL.CONTROL,D
.197bec		28		plp		                PLP
.197bed		2b		pld		                PLD
.197bee		6b		rtl		                RTL
.197bef						KBD_SET_CONTROL
.197bef		0b		phd		                PHD
.197bf0		08		php		                PHP
.197bf1		48		pha		                PHA             ; begin setdp macro
.197bf2		08		php		                PHP
.197bf3		c2 20		rep #$20	                REP #$20        ; set A long
.197bf5		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197bf8		5b		tcd		                TCD
.197bf9		28		plp		                PLP
.197bfa		68		pla		                PLA             ; end setdp macro
.197bfb		e2 20		sep #$20	                SEP #$20        ; set A short
.197bfd		85 01		sta $0f01	                STA #S_KBD_CONTROL.CONTROL,D
.197bff		28		plp		                PLP
.197c00		2b		pld		                PLD
.197c01		6b		rtl		                RTL
.197c02						KBD_GETCW
.197c02		22 0e 7c 19	jsl $197c0e	                JSL KBD_GETC
.197c06		c9 00		cmp #$00	                CMP #0
.197c08		f0 01		beq $197c0b	                BEQ wait
.197c0a		6b		rtl		                RTL
.197c0b		cb		wai		wait            WAI
.197c0c		80 f4		bra $197c02	                BRA KBD_GETCW
.197c0e						KBD_GETC
.197c0e		0b		phd		                PHD
.197c0f		08		php		                PHP
.197c10		48		pha		                PHA             ; begin setdp macro
.197c11		08		php		                PHP
.197c12		c2 20		rep #$20	                REP #$20        ; set A long
.197c14		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197c17		5b		tcd		                TCD
.197c18		28		plp		                PLP
.197c19		68		pla		                PLA             ; end setdp macro
.197c1a		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197c1c		22 c5 7a 19	jsl $197ac5	                JSL KBD_CHAR_DEQUEUE        ; Try to fetch a character from the character queue
.197c20		c9 00		cmp #$00	                CMP #0                      ; Did we get anything back?
.197c22		f0 03		beq $197c27	                BEQ get_scancode            ; No: try to get a scan code
.197c24		82 cb 00	brl $197cf2	                BRL done                    ; Yes: return the character we had queued
.197c27		22 00 7b 19	jsl $197b00	get_scancode    JSL KBD_GET_SCANCODE        ; Fetch the next scancode
.197c2b		c9 00		cmp #$00	                CMP #0                      ; Is it NUL?
.197c2d		d0 04		bne $197c33	                BNE chk_make_break
.197c2f		28		plp		                PLP                         ; Yes: return 0... we got nothin
.197c30		38		sec		                SEC
.197c31		2b		pld		                PLD
.197c32		6b		rtl		                RTL
.197c33		89 80		bit #$80	chk_make_break  BIT #$80                    ; Is it a break scan code?
.197c35		d0 08		bne $197c3f	                BNE handle_break            ; Yes: process the break
.197c37		c9 2a		cmp #$2a	handle_make     CMP #KBD_SC_LSHIFT          ; Is it a make LSHIFT?
.197c39		d0 0c		bne $197c47	                BNE not_make_ls
.197c3b		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.197c3d		80 4e		bra $197c8d	                BRA set_modifier
.197c3f		c9 aa		cmp #$aa	handle_break    CMP #KBD_SC_LSHIFT | $80    ; Is it a break LSHIFT?
.197c41		d0 0c		bne $197c4f	                BNE not_break_ls
.197c43		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.197c45		80 50		bra $197c97	                BRA clr_modifier
.197c47		c9 1d		cmp #$1d	not_make_ls     CMP #KBD_SC_LCTRL           ; Is it a make LCTRL?
.197c49		d0 0c		bne $197c57	                BNE not_make_lc
.197c4b		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.197c4d		80 3e		bra $197c8d	                BRA set_modifier
.197c4f		c9 9d		cmp #$9d	not_break_ls    CMP #KBD_SC_LCTRL | $80     ; Is it a break LCTRL?
.197c51		d0 0c		bne $197c5f	                BNE not_break_lc
.197c53		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.197c55		80 40		bra $197c97	                BRA clr_modifier
.197c57		c9 38		cmp #$38	not_make_lc     CMP #KBD_SC_LALT            ; Is it a make LALT?
.197c59		d0 0c		bne $197c67	                BNE not_make_la
.197c5b		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.197c5d		80 2e		bra $197c8d	                BRA set_modifier
.197c5f		c9 b8		cmp #$b8	not_break_lc    CMP #KBD_SC_LALT | $80      ; Is it a break LALT?
.197c61		d0 0c		bne $197c6f	                BNE not_break_la
.197c63		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.197c65		80 30		bra $197c97	                BRA clr_modifier
.197c67		c9 36		cmp #$36	not_make_la     CMP #KBD_SC_RSHIFT          ; Is it a make RSHIFT?
.197c69		d0 0c		bne $197c77	                BNE not_make_rs
.197c6b		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.197c6d		80 1e		bra $197c8d	                BRA set_modifier
.197c6f		c9 b6		cmp #$b6	not_break_la    CMP #KBD_SC_RSHIFT | $80    ; Is it a break RSHIFT?
.197c71		d0 0c		bne $197c7f	                BNE not_break_rs
.197c73		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.197c75		80 20		bra $197c97	                BRA clr_modifier
.197c77		c9 5e		cmp #$5e	not_make_rs     CMP #KBD_SC_RCTRL           ; Is it a make RCTRL?
.197c79		d0 0c		bne $197c87	                BNE not_make_rc
.197c7b		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.197c7d		80 0e		bra $197c8d	                BRA set_modifier
.197c7f		c9 de		cmp #$de	not_break_rs    CMP #KBD_SC_RCTRL | $80     ; Is it a break RCTRL?
.197c81		d0 0e		bne $197c91	                BNE not_break_rc
.197c83		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.197c85		80 10		bra $197c97	                BRA clr_modifier
.197c87		c9 5c		cmp #$5c	not_make_rc     CMP #KBD_SC_RALT            ; Is it a make RALT?
.197c89		d0 12		bne $197c9d	                BNE not_make_ra
.197c8b		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.197c8d		04 25		tsb $0f25	set_modifier    TSB #S_KBD_CONTROL.MODIFIERS,D  ; Set the indicated modifier bit
.197c8f		80 08		bra $197c99	                BRA return_null
.197c91		c9 dc		cmp #$dc	not_break_rc    CMP #KBD_SC_RALT | $80          ; Is it a break RALT?
.197c93		d0 04		bne $197c99	                BNE return_null                 ; No: we don't use any other break scan codes
.197c95		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.197c97		14 25		trb $0f25	clr_modifier    TRB #S_KBD_CONTROL.MODIFIERS,D  ; Clear the indicated modifier bit
.197c99		a9 00		lda #$00	return_null     LDA #0
.197c9b		80 55		bra $197cf2	                BRA done
.197c9d		a8		tay		not_make_ra     TAY                                     ; Use the scan code as an index...
.197c9e		c9 38		cmp #$38	                CMP #KBD_SC_PIVOT
.197ca0		90 0e		bcc $197cb0	                BLT below_38
.197ca2		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D              ; Check the NUM lock
.197ca4		89 02		bit #$02	                BIT #KBD_LOCK_NUMBER
.197ca6		f0 2a		beq $197cd2	                BEQ fetch_unmod                         ; No: translate the keys as unmodified
.197ca8		a5 25		lda $0f25	chk_num_shift   LDA #S_KBD_CONTROL.MODIFIERS,D
.197caa		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Check for a shift key being pressed
.197cac		d0 24		bne $197cd2	                BNE fetch_unmod                         ; If so: translate the keys as modified
.197cae		80 30		bra $197ce0	                BRA fetch_caps                          ; No: translate the key using the lock table
.197cb0		a5 25		lda $0f25	below_38        LDA #S_KBD_CONTROL.MODIFIERS,D
.197cb2		89 0c		bit #$0c	                BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL      ; Is either control key pressed?
.197cb4		f0 0c		beq $197cc2	                BEQ chk_capslock                        ; No: check for capslock
.197cb6		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.197cb8		f0 04		beq $197cbe	                BEQ fetch_control                       ; No: translate just based off of control
.197cba		b7 3b		lda [$0f3b],y	                LDA [#S_KBD_CONTROL.TBL_CTRL_SHIFT,D],Y ; Look up the key modfified by CTRL and SHIFT
.197cbc		80 26		bra $197ce4	                BRA chk_ansi
.197cbe		b7 2f		lda [$0f2f],y	fetch_control   LDA [#S_KBD_CONTROL.TBL_CTRL,D],Y       ; Look up the key modified by CONTROL
.197cc0		80 22		bra $197ce4	                BRA chk_ansi
.197cc2		a5 26		lda $0f26	chk_capslock    LDA #S_KBD_CONTROL.LOCKS,D              ; Check the CAPS lock
.197cc4		89 04		bit #$04	                BIT #KBD_LOCK_CAPS
.197cc6		d0 0e		bne $197cd6	                BNE chk_caps_shift                      ; Yes: check the state of the SHIFT key
.197cc8		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.197cca		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.197ccc		f0 04		beq $197cd2	                BEQ fetch_unmod                         ; No: translate just based off of control
.197cce		b7 2b		lda [$0f2b],y	fetch_shifted   LDA [#S_KBD_CONTROL.TBL_SHIFT,D],Y      ; Look up the key modified by SHIFT
.197cd0		80 12		bra $197ce4	                BRA chk_ansi
.197cd2		b7 27		lda [$0f27],y	fetch_unmod     LDA [#S_KBD_CONTROL.TBL_UNMOD,D],Y      ; Look up the unmodified key
.197cd4		80 0e		bra $197ce4	                BRA chk_ansi
.197cd6		a5 25		lda $0f25	chk_caps_shift  LDA #S_KBD_CONTROL.MODIFIERS,D
.197cd8		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.197cda		f0 04		beq $197ce0	                BEQ fetch_caps                          ; No: translate just based off of control
.197cdc		b7 37		lda [$0f37],y	                LDA [#S_KBD_CONTROL.TBL_LOCK_SHIFT,D],Y ; Look up the key modified by CAPS and SHIFT
.197cde		80 04		bra $197ce4	                BRA chk_ansi
.197ce0		b7 33		lda [$0f33],y	fetch_caps      LDA [#S_KBD_CONTROL.TBL_LOCK,D],Y       ; Look up the key modified by CAPSLOCK
.197ce2		80 00		bra $197ce4	                BRA chk_ansi
.197ce4		c9 80		cmp #$80	chk_ansi        CMP #$80                                ; Check to see if we have an ANSI escape sequence to send
.197ce6		90 0a		bcc $197cf2	                BLT done                                ; If not, just return the character
.197ce8		c9 96		cmp #$96	                CMP #$96
.197cea		b0 06		bcs $197cf2	                BGE done
.197cec		22 2e 7d 19	jsl $197d2e	                JSL KBD_ENQ_ANSI                        ; Expand and enqueue the ANSI sequence
.197cf0		a9 1b		lda #$1b	                LDA #CHAR_ESC                           ; And return the ESC key to start the sequence
.197cf2		28		plp		done            PLP
.197cf3		2b		pld		                PLD
.197cf4		18		clc		                CLC
.197cf5		6b		rtl		                RTL
.197cf6						KBD_ENQUEUE_BCD
.197cf6		08		php		                PHP
.197cf7		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197cf9		48		pha		                PHA                     ; Save the value
.197cfa		4a		lsr a		                LSR A                   ; Get the 10s digit
.197cfb		4a		lsr a		                LSR A
.197cfc		4a		lsr a		                LSR A
.197cfd		4a		lsr a		                LSR A
.197cfe		c9 00		cmp #$00	                CMP #0                  ; If it's 0, move to the 1s digit
.197d00		f0 0b		beq $197d0d	                BEQ enqueue_1
.197d02		c9 0a		cmp #$0a	                CMP #$0A                ; If it's out of range, ignore this whole call
.197d04		b0 13		bcs $197d19	                BGE done_A
.197d06		18		clc		                CLC                     ; Enqueue the tens digit
.197d07		69 30		adc #$30	                ADC #'0'
.197d09		22 a0 7a 19	jsl $197aa0	                JSL KBD_CHAR_ENQUEUE
.197d0d		68		pla		enqueue_1       PLA                     ; Enqueue the ones digit
.197d0e		29 0f		and #$0f	                AND #$0F
.197d10		18		clc		                CLC
.197d11		69 30		adc #$30	                ADC #'0'
.197d13		22 a0 7a 19	jsl $197aa0	                JSL KBD_CHAR_ENQUEUE
.197d17		28		plp		done            PLP
.197d18		6b		rtl		                RTL
.197d19		68		pla		done_A          PLA
.197d1a		80 fb		bra $197d17	                BRA done
.197d1c						KBD_BIN_TO_BCD
.197d1c		da		phx		                PHX
.197d1d		08		php		                PHP
.197d1e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197d20		aa		tax		                TAX
.197d21		a9 99		lda #$99	                LDA #$99                ; Start with -1 in BCD form
.197d23		f8		sed		                SED                     ; Switch to Decimal arithmetic
.197d24		18		clc		loop            CLC
.197d25		69 01		adc #$01	                ADC #1                  ; Add 1 with BCD arithmetic
.197d27		ca		dex		                DEX                     ; Decrement input value in X
.197d28		10 fa		bpl $197d24	                BPL loop                ; loop until input value < 0
.197d2a		d8		cld		                CLD                     ; Switch back to Binary arithmetic
.197d2b		28		plp		                PLP
.197d2c		fa		plx		                PLX
.197d2d		6b		rtl		                RTL
.197d2e						KBD_ENQ_ANSI
.197d2e		08		php		                PHP
.197d2f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197d31		c9 80		cmp #$80	                CMP #$80                        ; check to make sure the code is within range
.197d33		b0 03		bcs $197d38	                BGE chk_high_end
.197d35		82 4a 00	brl $197d82	                BRL done                        ; Out of range, just ignore it
.197d38		c9 96		cmp #$96	chk_high_end    CMP #$96
.197d3a		90 03		bcc $197d3f	                BLT save_value
.197d3c		82 43 00	brl $197d82	                BRL done                        ; Out of range, just ignore it
.197d3f		48		pha		save_value      PHA
.197d40		a9 5b		lda #$5b	                LDA #'['
.197d42		22 a0 7a 19	jsl $197aa0	                JSL KBD_CHAR_ENQUEUE
.197d46		68		pla		                PLA
.197d47		38		sec		                SEC
.197d48		e9 80		sbc #$80	                SBC #$80                ; Convert to an offset
.197d4a		aa		tax		                TAX                     ; And use it as an index to...
.197d4b		bf 84 7d 19	lda $197d84,x	                LDA @l ENCODE_CODE,X    ; Get the number
.197d4f		10 0b		bpl $197d5c	                BPL send_number         ; If MSB is not set, send the number as-is
.197d51		29 7f		and #$7f	                AND #$7F                ; Remove the MSB
.197d53		18		clc		                CLC
.197d54		69 41		adc #$41	                ADC #'A'                ; Convert to 'A' .. 'D'
.197d56		22 a0 7a 19	jsl $197aa0	                JSL KBD_CHAR_ENQUEUE    ; Enqueue the code
.197d5a		80 26		bra $197d82	                BRA done
.197d5c		22 1c 7d 19	jsl $197d1c	send_number     JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.197d60		22 f6 7c 19	jsl $197cf6	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.197d64		22 7d 7b 19	jsl $197b7d	chk_modifier    JSL KBD_GETMODS_ANSI    ; Get the modifiers
.197d68		c9 00		cmp #$00	                CMP #0                  ; Are there any?
.197d6a		f0 10		beq $197d7c	                BEQ close               ; No: close the sequence
.197d6c		48		pha		                PHA
.197d6d		a9 3b		lda #$3b	                LDA #';'                ; Enqueue the separator
.197d6f		22 a0 7a 19	jsl $197aa0	                JSL KBD_CHAR_ENQUEUE
.197d73		68		pla		                PLA
.197d74		22 1c 7d 19	jsl $197d1c	                JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.197d78		22 f6 7c 19	jsl $197cf6	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.197d7c		a9 7e		lda #$7e	close           LDA #'~'                ; Enqueue closing code
.197d7e		22 a0 7a 19	jsl $197aa0	                JSL KBD_CHAR_ENQUEUE
.197d82		28		plp		done            PLP
.197d83		6b		rtl		                RTL
>197d84		01 02 03 04 05 06		ENCODE_CODE     .byte 1, 2, 3, 4, 5, 6      ; Insert, etc...
>197d8a		80 81 82 83			                .byte $80, $81, $82, $83    ; Cursor keys
>197d8e		0b 0c 0d 0e 0f			                .byte 11, 12, 13, 14, 15    ; F1 - F5
>197d93		11 12 13 14 15			                .byte 17, 18, 19, 20, 21    ; F6 - F10
>197d98		17 18				                .byte 23, 24                ; F11 - F12
.197d9a						KBD_SETTABLE
.197d9a		48		pha		                PHA
.197d9b		8b		phb		                PHB
.197d9c		0b		phd		                PHD
.197d9d		08		php		                PHP
.197d9e		48		pha		                PHA             ; begin setdp macro
.197d9f		08		php		                PHP
.197da0		c2 20		rep #$20	                REP #$20        ; set A long
.197da2		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197da5		5b		tcd		                TCD
.197da6		28		plp		                PLP
.197da7		68		pla		                PLA             ; end setdp macro
.197da8		e2 20		sep #$20	                SEP #$20        ; set A short
.197daa		8b		phb		                PHB                 ; Get the data bank into A
.197dab		68		pla		                PLA
.197dac		c2 20		rep #$20	                REP #$20        ; set A long
.197dae		29 ff 00	and #$00ff	                AND #$00FF
.197db1		85 29		sta $0f29	                STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.197db3		85 2d		sta $0f2d	                STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.197db5		85 31		sta $0f31	                STA #S_KBD_CONTROL.TBL_CTRL+2,D
.197db7		85 35		sta $0f35	                STA #S_KBD_CONTROL.TBL_LOCK+2,D
.197db9		85 39		sta $0f39	                STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.197dbb		85 3d		sta $0f3d	                STA #S_KBD_CONTROL.TBL_CTRL_SHIFT+2,D
.197dbd		86 27		stx $0f27	                STX #S_KBD_CONTROL.TBL_UNMOD,D
.197dbf		86 2b		stx $0f2b	                STX #S_KBD_CONTROL.TBL_SHIFT,D
.197dc1		86 2f		stx $0f2f	                STX #S_KBD_CONTROL.TBL_CTRL,D
.197dc3		86 33		stx $0f33	                STX #S_KBD_CONTROL.TBL_LOCK,D
.197dc5		86 37		stx $0f37	                STX #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.197dc7		86 3b		stx $0f3b	                STX #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.197dc9		28		plp		                PLP
.197dca		2b		pld		                PLD
.197dcb		ab		plb		                PLB
.197dcc		68		pla		                PLA
.197dcd		6b		rtl		                RTL
>197dce						.align 256
>197e00		00 01 02 03 04 05 06 07		TBL_SET1        .byte $00, $01, $02, $03, $04, $05, $06, $07    ; $00 - $07
>197e08		08 09 0a 0b 0c 0d 0e 0f		                .byte $08, $09, $0A, $0B, $0C, $0D, $0E, $0F    ; $08 - $0F
>197e10		10 11 12 13 14 15 16 17		                .byte $10, $11, $12, $13, $14, $15, $16, $17    ; $10 - $17
>197e18		18 19 1a 1b 1c 1d 1e 1f		                .byte $18, $19, $1A, $1B, $1C, $1D, $1E, $1F    ; $18 - $1F
>197e20		20 21 22 23 24 25 26 27		                .byte $20, $21, $22, $23, $24, $25, $26, $27    ; $20 - $27
>197e28		28 29 2a 2b 2c 2d 2e 2f		                .byte $28, $29, $2A, $2B, $2C, $2D, $2E, $2F    ; $28 - $2F
>197e30		30 31 32 33 34 35 36 37		                .byte $30, $31, $32, $33, $34, $35, $36, $37    ; $30 - $37
>197e38		38 39 3a 3b 3c 3d 3e 3f		                .byte $38, $39, $3A, $3B, $3C, $3D, $3E, $3F    ; $38 - $3F
>197e40		40 41 42 43 44 45 46 47		                .byte $40, $41, $42, $43, $44, $45, $46, $47    ; $40 - $47
>197e48		48 49 4a 4b 4c 4d 4e 4f		                .byte $48, $49, $4A, $4B, $4C, $4D, $4E, $4F    ; $48 - $4F
>197e50		50 51 52 53 54 55 56 57		                .byte $50, $51, $52, $53, $54, $55, $56, $57    ; $50 - $57
>197e58		58 00 00 00 00 00 00 00		                .byte $58, $00, $00, $00, $00, $00, $00, $00    ; $58 - $5F
>197e60		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>197e68		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>197e70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>197e78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
>197e80		00 00 00 00 00 00 00 00		TBL_SET1_E0     .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $00 - $07
>197e88		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $08 - $0F
>197e90		70 00 00 00 00 00 00 00		                .byte $70, $00, $00, $00, $00, $00, $00, $00    ; $10 - $17
>197e98		00 71 00 00 6d 5e 00 00		                .byte $00, $71, $00, $00, $6D, $5E, $00, $00    ; $18 - $1F
>197ea0		72 00 6e 00 6f 00 00 00		                .byte $72, $00, $6E, $00, $6F, $00, $00, $00    ; $20 - $27
>197ea8		00 00 00 00 00 00 73 00		                .byte $00, $00, $00, $00, $00, $00, $73, $00    ; $28 - $2F
>197eb0		74 00 00 00 00 6c 00 00		                .byte $74, $00, $00, $00, $00, $6C, $00, $00    ; $30 - $37
>197eb8		5c 00 00 00 00 00 00 00		                .byte $5C, $00, $00, $00, $00, $00, $00, $00    ; $38 - $3F
>197ec0		00 00 00 00 00 00 61 63		                .byte $00, $00, $00, $00, $00, $00, $61, $63    ; $40 - $47
>197ec8		68 64 00 69 00 6b 00 66		                .byte $68, $64, $00, $69, $00, $6B, $00, $66    ; $48 - $4F
>197ed0		6a 67 62 65 00 00 00 00		                .byte $6A, $67, $62, $65, $00, $00, $00, $00    ; $50 - $57
>197ed8		00 00 00 00 00 5d 00 00		                .byte $00, $00, $00, $00, $00, $5D, $00, $00    ; $58 - $5F
>197ee0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>197ee8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>197ef0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>197ef8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
.197f00						KBD_STATE_MACH
>197f00		00 e0 01 00			                .byte KBD_STATE_IDLE, $E0, KBD_STATE_E0, 0                          ; IDLE =[E0]=> STATE_E0
>197f04		00 e1 04 00			                .byte KBD_STATE_IDLE, $E1, KBD_STATE_E1, 0                          ; IDLE =[E1]=> STATE_E1
>197f08		00 00 00 01			                .byte KBD_STATE_IDLE, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_BASE       ; IDLE =[default]=> IDLE / emit(TBL_SET1[x])
>197f0c		01 2a 02 00			                .byte KBD_STATE_E0, $2A, KBD_STATE_E02A, 0                          ; STATE_E0 =[2A]=> STATE_E02A
>197f10		01 b7 09 00			                .byte KBD_STATE_E0, $B7, KBD_STATE_E0B7, 0                          ; STATE_E0 =[B7]=> STATE_E0B7
>197f14		01 00 00 02			                .byte KBD_STATE_E0, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_E0           ; STATE_E0 =[default]=> IDLE, emit(TBL_SET1_E0[x])
>197f18		02 e0 03 00			                .byte KBD_STATE_E02A, $E0, KBD_STATE_E02AE0, 0                      ; STATE_E02A =[E0]=> STATE_E02AE0
>197f1c		02 00 00 00			                .byte KBD_STATE_E02A, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E02A =[default]=> IDLE, ignore(x)
>197f20		03 37 00 60			                .byte KBD_STATE_E02AE0, $37, KBD_STATE_IDLE, $60                    ; STATE_E02AE0 =[37]=> IDLE, emit(make{PrintScreen})
>197f24		03 00 00 00			                .byte KBD_STATE_E02AE0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E02AE0 =[default]=> IDLE, ignore(x)
>197f28		09 e0 0a 00			                .byte KBD_STATE_E0B7, $E0, KBD_STATE_E0B7E0, 0                      ; STATE_E0B7 =[E0]=> STATE_E0B7E0
>197f2c		09 00 00 00			                .byte KBD_STATE_E0B7, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E0B7 =[default]=> IDLE, ignore(x)
>197f30		0a aa 00 e0			                .byte KBD_STATE_E0B7E0, $AA, KBD_STATE_IDLE, $E0                    ; STATE_E0B7E0 =[AA]=> IDLE, emit(break{PrintScreen})
>197f34		0a 00 00 00			                .byte KBD_STATE_E0B7E0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E0B7E0 =[default]=> IDLE, ignore(x)
>197f38		04 1d 05 00			                .byte KBD_STATE_E1, $1D, KBD_STATE_E11D, 0                          ; STATE_E1 =[1D]=> STATE_E11D
>197f3c		04 00 00 00			                .byte KBD_STATE_E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE            ; STATE_E1 =[default]=> IDLE, ignore(x)
>197f40		05 45 06 00			                .byte KBD_STATE_E11D, $45, KBD_STATE_E11D45, 0                      ; STATE_E11D =[45]=> STATE_E11D45
>197f44		05 00 00 00			                .byte KBD_STATE_E11D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E11D =[default]=> IDLE, ignore(x)
>197f48		06 e1 07 00			                .byte KBD_STATE_E11D45, $E1, KBD_STATE_E11D45E1, 0                  ; STATE_E11D45 =[E1]=> STATE_E11D45E1
>197f4c		06 00 00 00			                .byte KBD_STATE_E11D45, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E11D45 =[default]=> IDLE, ignore(x)
>197f50		07 9d 08 00			                .byte KBD_STATE_E11D45E1, $9D, KBD_STATE_E11D45E19D, 0              ; STATE_E11D45E1 =[9D]=> STATE_E11D45E19D
>197f54		07 00 00 00			                .byte KBD_STATE_E11D45E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE      ; STATE_E11D45E1 =[default]=> IDLE, ignore(x)
>197f58		08 c5 00 61			                .byte KBD_STATE_E11D45E19D, $C5, KBD_STATE_IDLE, $61                ; STATE_E11D45E19D =[C5]=> IDLE, emit(make{Pause})
>197f5c		08 00 00 00			                .byte KBD_STATE_E11D45E19D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE    ; STATE_E11D45E19D =[default]=> IDLE, ignore(x)
>197f60		ff ff ff ff			                .byte $FF, $FF, $FF, $FF                                            ; End of state machine
>197f64						.align 256
>198000		00 1b 31 32 33 34 35 36		SC_US_UNMOD     .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>198008		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>198010		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>198018		6f 70 5b 5d 0d 00 61 73		                .byte 'o', 'p', '[', ']', $0D, $00, 'a', 's'                        ; $18 - $1F
>198020		64 66 67 68 6a 6b 6c 3b		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';'                        ; $20 - $27
>198028		27 60 00 5c 7a 78 63 76		                .byte $27, '`', $00, '\', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>198030		62 6e 6d 2c 2e 2f 00 2a		                .byte 'b', 'n', 'm', ',', '.', '/', $00, '*'                        ; $30 - $37
>198038		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>198040		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>198048		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>198050		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>198058		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>198060		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>198068		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>198070		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>198078		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>198080		00 1b 21 40 23 24 25 5e		SC_US_SHFT      .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>198088		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>198090		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>198098		4f 50 7b 7d 0a 00 41 53		                .byte 'O', 'P', '{', '}', $0A, $00, 'A', 'S'                        ; $18 - $1F
>1980a0		44 46 47 48 4a 4b 4c 3a		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':'                        ; $20 - $27
>1980a8		22 7e 00 7c 5a 58 43 56		                .byte $22, '~', $00, '|', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>1980b0		42 4e 4d 3c 3e 3f 00 00		                .byte 'B', 'N', 'M', '<', '>', '?', $00, $00                        ; $30 - $37
>1980b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>1980c0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>1980c8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>1980d0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>1980d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>1980e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>1980e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>1980f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>1980f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>198100		00 1b 31 32 33 34 35 1e		SC_US_CTRL      .byte $00, $1B, '1', '2', '3', '4', '5', $1E                        ; $00 - $07
>198108		37 38 39 30 1f 3d 08 09		                .byte '7', '8', '9', '0', $1F, '=', $08, $09                        ; $08 - $0F
>198110		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>198118		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>198120		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>198128		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>198130		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>198138		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>198140		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>198148		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>198150		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>198158		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>198160		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>198168		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>198170		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>198178		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>198180		00 1b 31 32 33 34 35 36		SC_US_LOCK      .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>198188		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>198190		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>198198		4f 50 5b 5d 0d 00 41 53		                .byte 'O', 'P', '[', ']', $0D, $00, 'A', 'S'                        ; $18 - $1F
>1981a0		44 46 47 48 4a 4b 4c 3b		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';'                        ; $20 - $27
>1981a8		27 60 00 5c 5a 58 43 56		                .byte $27, '`', $00, '\', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>1981b0		42 4e 4d 2c 2e 2f 00 00		                .byte 'B', 'N', 'M', ',', '.', '/', $00, $00                        ; $30 - $37
>1981b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>1981c0		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>1981c8		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>1981d0		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>1981d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>1981e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>1981e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>1981f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>1981f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>198200		00 1b 21 40 23 24 25 5e		SC_US_LOCK_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>198208		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>198210		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>198218		6f 70 7b 7d 0a 00 61 73		                .byte 'o', 'p', '{', '}', $0A, $00, 'a', 's'                        ; $18 - $1F
>198220		64 66 67 68 6a 6b 6c 3a		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ':'                        ; $20 - $27
>198228		22 7e 00 7c 7a 78 63 76		                .byte $22, '~', $00, '|', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>198230		62 6e 6d 3c 3e 3f 00 00		                .byte 'b', 'n', 'm', '<', '>', '?', $00, $00                        ; $30 - $37
>198238		00 20 00 00 00 00 00 00		                .byte $00, ' ', $00, $00, $00, $00, $00, $00                        ; $38 - $3F
>198240		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>198248		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>198250		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>198258		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>198260		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>198268		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>198270		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>198278		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>198280		00 1b 21 40 23 24 25 5e		SC_US_CTRL_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>198288		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>198290		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>198298		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>1982a0		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>1982a8		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>1982b0		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>1982b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>1982c0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>1982c8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>1982d0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>1982d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>1982e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>1982e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>1982f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>1982f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/mouse_driver.asm

.198300		48		pha		IINITMOUSE      PHA
.198301		da		phx		                PHX
.198302		0b		phd		                PHD
.198303		08		php		                PHP
.198304		e2 20		sep #$20	                SEP #$20        ; set A short
.198306		c2 10		rep #$10	                REP #$10        ; set X long
.198308		18		clc		                CLC
.198309		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.19830c						DO_CMD_A9_AGAIN
.19830c		20 98 0d	jsr $190d98	                JSR Poll_Inbuf
.19830f		a9 a9		lda #$a9	                LDA #$A9                ; Tests second PS2 Channel
.198311		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF
.198315		20 97 83	jsr $198397	                JSR Poll_Outbuf_Mouse_TimeOut ;
.198318		af 03 18 af	lda $af1803					LDA KBD_OUT_BUF		    ; Clear the Output buffer
.19831c		c9 00		cmp #$00	                CMP #$00
.19831e		d0 ec		bne $19830c	                BNE DO_CMD_A9_AGAIN
.198320		a9 f6		lda #$f6	                LDA #$F6                ;Tell the mouse to use default settings
.198322		20 6b 83	jsr $19836b	                JSR MOUSE_WRITE
.198325		20 80 83	jsr $198380	                JSR MOUSE_READ
.198328		a9 e8		lda #$e8	                LDA #$E8
.19832a		20 6b 83	jsr $19836b	                JSR MOUSE_WRITE
.19832d		20 80 83	jsr $198380	                JSR MOUSE_READ
.198330		a9 00		lda #$00	                LDA #$00
.198332		20 6b 83	jsr $19836b	                JSR MOUSE_WRITE
.198335		20 80 83	jsr $198380	                JSR MOUSE_READ
.198338		a9 f4		lda #$f4	                LDA #$F4                ; Enable the Mouse
.19833a		20 6b 83	jsr $19836b	                JSR MOUSE_WRITE
.19833d		20 80 83	jsr $198380	                JSR MOUSE_READ
.198340		a9 00		lda #$00	                LDA #$00
.198342		8f e0 00 00	sta $0000e0	                STA MOUSE_PTR
.198346		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.19834a		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.19834c		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.198350		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.198354		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.198356		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.19835a		c2 10		rep #$10	                REP #$10        ; set X long
.19835c		a2 b6 86	ldx #$86b6	                LDX #<>Success_ms_init
.19835f		80 03		bra $198364	                BRA InitMsSuccess
.198361		a2 ed 86	ldx #$86ed	initms_loop_out LDX #<>Failed_ms_init
.198364						InitMsSuccess
.198364		c2 20		rep #$20	                REP #$20        ; set A long
.198366		28		plp		                PLP
.198367		2b		pld		                PLD
.198368		fa		plx		                PLX
.198369		68		pla		                PLA
.19836a		6b		rtl		                RTL
.19836b						MOUSE_WRITE
.19836b		e2 20		sep #$20	                SEP #$20        ; set A short
.19836d		48		pha		                PHA
.19836e		20 98 0d	jsr $190d98	                JSR Poll_Inbuf          ; Test bit $01 (if 2, Full)
.198371		a9 d4		lda #$d4	                LDA #$D4
.198373		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF         ; KBD_CMD_BUF		= $AF1064
.198377		20 98 0d	jsr $190d98	                JSR Poll_Inbuf
.19837a		68		pla		                PLA
.19837b		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF        ; KBD_DATA_BUF	= $AF1060
.19837f		60		rts		                RTS
.198380						MOUSE_READ
.198380		e2 20		sep #$20	                SEP #$20        ; set A short
.198382		20 8a 83	jsr $19838a	                JSR Poll_Outbuf_Mouse   ; Test bit $01 (if 1, Full)
.198385		af 03 18 af	lda $af1803	                LDA KBD_INPT_BUF        ; KBD_INPT_BUF	= $AF1060
.198389		60		rts		                RTS
.19838a						Poll_Outbuf_Mouse
.19838a		e2 20		sep #$20	                SEP #$20        ; set A short
.19838c		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.198390		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.198392		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.198394		d0 f4		bne $19838a	                BNE Poll_Outbuf_Mouse
.198396		60		rts		                RTS
.198397						Poll_Outbuf_Mouse_TimeOut
.198397		e2 20		sep #$20	                SEP #$20        ; set A short
.198399		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.19839d		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.19839f		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.1983a1		f0 08		beq $1983ab	                BEQ Poll_OutbufWeAreDone
.1983a3		ca		dex		                DEX
.1983a4		e0 00 00	cpx #$0000	                CPX #$0000
.1983a7		d0 ee		bne $198397	                BNE Poll_Outbuf_Mouse_TimeOut
.1983a9		80 b6		bra $198361	                BRA initms_loop_out
.1983ab						Poll_OutbufWeAreDone:
.1983ab		60		rts		                RTS
.1983ac						MOUSE_INTERRUPT
.1983ac		08		php		                PHP
.1983ad						                setasx
.1983ad		af e0 00 00	lda $0000e0	                LDA @l MOUSE_PTR                ; Get the # of the mouse byte to write
.1983b1		c9 03		cmp #$03	                CMP #3                          ; Check that mouse pointer is in bounds
.1983b3		90 02		bcc $1983b7	                BLT mouse_ptr_ok                ; If it is: fetch the byte
.1983b5		a9 00		lda #$00	                LDA #0                          ; If not, reset it
.1983b7		aa		tax		mouse_ptr_ok    TAX                             ; into X
.1983b8		af 03 18 af	lda $af1803	                LDA @l KBD_INPT_BUF             ; Get the byte from the PS/2 interface
.1983bc		9f 06 07 af	sta $af0706,x	                STA @l MOUSE_PTR_BYTE0, X       ; Store it into the correct Vicky register
.1983c0		e8		inx		                INX                             ; Move to the next byte
.1983c1		e0 03 00	cpx #$0003	                CPX #$03                        ; Have we written 3 bytes?
.1983c4		d0 23		bne $1983e9	                BNE EXIT_FOR_NEXT_VALUE         ; No: return and wait for the next mouse interrupt
.1983c6		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.1983ca		8f e1 00 00	sta $0000e1	                STA @l MOUSE_POS_X_LO
.1983ce		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.1983d2		8f e2 00 00	sta $0000e2	                STA @l MOUSE_POS_X_HI
.1983d6		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.1983da		8f e3 00 00	sta $0000e3	                STA @l MOUSE_POS_Y_LO
.1983de		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.1983e2		8f e4 00 00	sta $0000e4	                STA @l MOUSE_POS_Y_HI
.1983e6		a2 00 00	ldx #$0000	                LDX #$00                        ; Reset our state machine to the beginning
.1983e9						EXIT_FOR_NEXT_VALUE
.1983e9		8a		txa		                TXA                             ; Save our next byte position (state)
.1983ea		8f e0 00 00	sta $0000e0	                STA @l MOUSE_PTR
.1983ee		28		plp		                PLP
.1983ef		6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.1983f0						    KERNEL_DATA
>1983f0		20 20 20 20 0b 0c 0b 0c		    greet_msg   .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " UU    UU" ,$0D
>1983f8		0b 0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>198408		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>198410		0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>19841f		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>198427		0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>198435		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>19843d		0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>19844a		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UUUUUUUU",$0D
>198452		0b 0c 20 55 55 55 55 55 55 55 55 0d
>19845e		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX U -- 1,572,864 Bytes Free", $0D
>198466		45 4e 49 58 20 55 20 2d 2d 20 31 2c 35 37 32 2c
>198476		38 36 34 20 42 79 74 65 73 20 46 72 65 65 0d
>198485		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel Date: March 13th, 2021",$0D
>19848d		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>19849d		6e 65 6c 20 44 61 74 65 3a 20 4d 61 72 63 68 20
>1984ad		31 33 74 68 2c 20 32 30 32 31 0d

;******  Processing file: src\version.asm

>1984b8		76 30 2e 34 2e 30 2d 61		.text "v0.4.0-alpha+68 (2021-05-08)"
>1984c0		6c 70 68 61 2b 36 38 20 28 32 30 32 31 2d 30 35
>1984d0		2d 30 38 29

;******  Return to file: src\kernel.asm

>1984d4		0d 00				                .text $0D,$00
>1984d6		90 90 90 90 90 90 d0 d0		  greet_clr_line1 .text $90, $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>1984de		b0 b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1984ee		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1984fe		f0 f0
>198500		90 90 90 90 90 d0 d0 b0		  greet_clr_line2 .text $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>198508		b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198518		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198528		f0 f0
>19852a		90 90 90 90 d0 d0 b0 b0		  greet_clr_line3 .text $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>198532		a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198542		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198552		f0 f0
>198554		90 90 90 d0 d0 b0 b0 a0		  greet_clr_line4 .text $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>19855c		a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>19856c		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>19857c		f0 f0
>19857e		90 90 d0 d0 b0 b0 a0 a0		  greet_clr_line5 .text $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>198586		e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198596		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1985a6		f0 f0
>1985a8		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>1985ac		00 00 80 ff			                .text $00, $00, $80, $FF
>1985b0		00 80 00 ff			                .text $00, $80, $00, $FF
>1985b4		80 00 00 ff			                .text $80, $00, $00, $FF
>1985b8		00 80 80 ff			                .text $00, $80, $80, $FF
>1985bc		80 80 00 ff			                .text $80, $80, $00, $FF
>1985c0		80 00 80 ff			                .text $80, $00, $80, $FF
>1985c4		80 80 80 ff			                .text $80, $80, $80, $FF
>1985c8		00 45 ff ff			                .text $00, $45, $FF, $FF
>1985cc		13 45 8b ff			                .text $13, $45, $8B, $FF
>1985d0		00 00 20 ff			                .text $00, $00, $20, $FF
>1985d4		00 20 00 ff			                .text $00, $20, $00, $FF
>1985d8		20 00 00 ff			                .text $20, $00, $00, $FF
>1985dc		20 20 20 ff			                .text $20, $20, $20, $FF
>1985e0		40 40 40 ff			                .text $40, $40, $40, $FF
>1985e4		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>1985e8		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>1985ec		00 00 80 ff			                .text $00, $00, $80, $FF
>1985f0		00 80 00 ff			                .text $00, $80, $00, $FF
>1985f4		80 00 00 ff			                .text $80, $00, $00, $FF
>1985f8		00 20 20 ff			                .text $00, $20, $20, $FF
>1985fc		20 20 00 ff			                .text $20, $20, $00, $FF
>198600		20 00 20 ff			                .text $20, $00, $20, $FF
>198604		20 20 20 ff			                .text $20, $20, $20, $FF
>198608		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>19860c		13 45 8b ff			                .text $13, $45, $8B, $FF
>198610		00 00 20 ff			                .text $00, $00, $20, $FF
>198614		00 20 00 ff			                .text $00, $20, $00, $FF
>198618		40 00 00 ff			                .text $40, $00, $00, $FF
>19861c		10 10 10 ff			                .text $10, $10, $10, $FF
>198620		40 40 40 ff			                .text $40, $40, $40, $FF
>198624		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>198628		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>198630		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>198640		00
>198641		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>198649		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>198659		00
>19865a		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>198662		20 45 78 65 63 75 74 65 64 2e 0d 00
>19866e		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>198676		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>198686		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>19868e		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>19869e		64 2e 2e 2e 0d 00
>1986a4		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>1986ac		20 50 72 65 73 65 6e 74 0d 00
>1986b6		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>1986be		65 73 65 6e 74 0d 00
>1986c5		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>1986cd		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>1986dd		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>1986ed		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>1986f5		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>198705		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>198712		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>19871a		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>198726		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>19872e		54 55 52 45 20 46 4f 55 4e 44 2e 00
>19873a		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>198742		45 44 2e 00
>198746		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>19874e		47 20 42 4d 50 20 50 41 52 53 45 52 00
>19875b		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>198763		50 72 65 73 65 6e 74 3a 00
>19876c		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>198774		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>198784		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>198792		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>19879a		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>1987aa		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>1987b7		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>1987bf		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>1987cf		72 64 2e 00
>1987d3		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>1987db		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>1987eb		49 44 45 20 64 72 69 76 65 2e 00
>1987f6		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>1987fe		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>19880e		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>19881c		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>198824		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>198833		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>19883b		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>19884a		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>198852		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>198862		2e 2e 00
>198865		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>19886d		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>198875		52 4f 52 00
>198879		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>198881		38 39 41 42 43 44 45 46 00
>19888a						.align 256
>198900		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198908		37 38 39 30 2d 3d 08 09
>198910		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198918		6f 70 5b 5d 0d 00 61 73
>198920		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198928		27 60 00 5c 7a 78 63 76
>198930		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>198938		00 20 00 81 82 83 84 85
>198940		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>198948		11 00 00 9d 00 1d 00 00
>198950		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>198958		8c 00 00 00 00 00 00 00
>198960		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198968		00 00 00 00 00 00 00 00
>198970		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198978		00 00 00 00 00 00 00 00
>198980		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>198988		26 2a 28 29 5f 2b 08 09
>198990		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>198998		4f 50 7b 7d 0d 00 41 53
>1989a0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>1989a8		22 7e 00 7c 5a 58 43 56
>1989b0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1989b8		00 20 00 00 00 00 00 00
>1989c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1989c8		00 00 00 00 00 00 00 00
>1989d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1989d8		00 00 00 00 00 00 00 00
>1989e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1989e8		00 00 00 00 00 00 00 00
>1989f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1989f8		00 00 00 00 00 00 00 00
>198a00		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198a08		37 38 39 30 2d 3d 08 09
>198a10		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>198a18		0f 10 5b 5d 0d 00 01 13
>198a20		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>198a28		27 00 00 5c 1a 18 03 16
>198a30		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198a38		00 20 00 00 00 00 00 00
>198a40		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198a48		00 00 00 00 00 00 00 00
>198a50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198a58		00 00 00 00 00 00 00 00
>198a60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198a68		00 00 00 00 00 00 00 00
>198a70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198a78		00 00 00 00 00 00 00 00
>198a80		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198a88		37 38 39 30 2d 3d 08 09
>198a90		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198a98		6f 70 5b 5d 0d 00 61 73
>198aa0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198aa8		27 60 00 5c 7a 78 63 76
>198ab0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198ab8		00 20 00 00 00 00 00 00
>198ac0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198ac8		00 00 00 00 00 00 00 00
>198ad0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198ad8		00 00 00 00 00 00 00 00
>198ae0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198ae8		00 00 00 00 00 00 00 00
>198af0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198af8		00 00 00 00 00 00 00 00
>198b00		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198b08		37 38 39 30 2d 3d 08 09
>198b10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198b18		6f 70 5b 5d 0d 00 61 73
>198b20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198b28		27 60 00 5c 7a 78 63 76
>198b30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198b38		00 20 00 00 00 00 00 00
>198b40		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198b48		00 00 00 00 00 00 00 00
>198b50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198b58		00 00 00 00 00 00 00 00
>198b60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198b68		00 00 00 00 00 00 00 00
>198b70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198b78		00 00 00 00 00 00 00 00
>198b80		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>198b88		00 00 00 00 00 00 00 00
>198b90		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>198b98		00 00 00 00 00 00 00 00
>198ba0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>198ba8		00 00 00 00 00 00 00 00
>198bb0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>198bb8		00 00 00 00 00 00 00 00
>198bc0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>198bc8		11 00 00 9d 00 1d 00 05
>198bd0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198bd8		00 00 00 00 00 00 00 00
>198be0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198be8		00 00 00 00 00 00 00 00
>198bf0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198bf8		00 00 00 00 00 00 00 00
>198c00						.align 256
>198c00		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>198c08		34 37 3a 3d 3f 41 44 46
>198c10		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>198c18		57 58 5a 5b 5d 5e 60 61
>198c20		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>198c28		6d 6f 70 71 72 73 75 76
>198c30		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>198c38		80 81 82 83 84 85 86 87
>198c40		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>198c48		8f 90 91 92 93 93 94 95
>198c50		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>198c58		9d 9e 9e 9f a0 a1 a2 a2
>198c60		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>198c68		a9 aa ab ab ac ad ae ae
>198c70		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>198c78		b5 b5 b6 b7 b7 b8 b9 b9
>198c80		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>198c88		bf c0 c0 c1 c2 c2 c3 c4
>198c90		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>198c98		c9 ca ca cb cb cc cd cd
>198ca0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>198ca8		d2 d3 d4 d4 d5 d5 d6 d6
>198cb0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>198cb8		db dc dc dd de de df df
>198cc0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>198cc8		e4 e4 e5 e5 e6 e6 e7 e7
>198cd0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>198cd8		ec ec ed ed ee ee ef ef
>198ce0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>198ce8		f4 f4 f5 f5 f6 f6 f7 f7
>198cf0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>198cf8		fb fc fc fd fd fe fe ff
>198d00						.align 256
>198d00		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>198d08		25 27 2a 2c 2e 30 32 34
>198d10		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>198d18		44 46 47 49 4a 4c 4d 4f
>198d20		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>198d28		5b 5c 5d 5e 60 61 62 63
>198d30		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>198d38		6d 6e 70 71 72 73 74 75
>198d40		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>198d48		7e 7f 80 81 82 83 84 84
>198d50		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>198d58		8d 8e 8e 8f 90 91 92 93
>198d60		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>198d68		9a 9b 9c 9d 9e 9f 9f a0
>198d70		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>198d78		a7 a8 a9 aa aa ab ac ad
>198d80		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>198d88		b3 b4 b5 b6 b6 b7 b8 b8
>198d90		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>198d98		bf bf c0 c1 c2 c2 c3 c4
>198da0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>198da8		ca ca cb cc cc cd ce ce
>198db0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>198db8		d4 d5 d6 d6 d7 d7 d8 d9
>198dc0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>198dc8		de df e0 e0 e1 e1 e2 e3
>198dd0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>198dd8		e8 e9 e9 ea ea eb ec ec
>198de0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>198de8		f1 f2 f3 f3 f4 f4 f5 f5
>198df0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>198df8		fb fb fc fc fd fd fe ff
>198e00						.align 256
>198e00		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>198e08		83 dd ce 39 cd c5 3b 15
>198e10		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>198e18		87 12 31 65 89 27 88 42
>198e20		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>198e28		94 ce 56 ec fe da 58 c9
>198e30		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>198e38		d0 10 2c b2 4b ea 32 61
>198e40		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>198e48		a1 e6 ca 2d b3 ce b0 79
>198e50		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>198e58		5f e3 fb bd 15 2e be f5
>198e60		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>198e68		8d 8f 2c 80 0a 5e 99 36
>198e70		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>198e78		13 52 44 2f e3 ef 44 a2
>198e80		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>198e88		be 23 02 58 0a 52 5e b4
>198e90		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>198e98		d5 cf 3e df c4 9e da bb
>198ea0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>198ea8		77 7d b1 3b 4a 68 35 6e
>198eb0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>198eb8		b5 8f 44 63 55 6f e1 50
>198ec0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>198ec8		57 74 b9 bd 05 14 50 eb
>198ed0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>198ed8		44 bc ec db 22 58 fc be
>198ee0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>198ee8		24 aa 82 11 5c 9f 43 4d
>198ef0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>198ef8		3e 3d 66 7e 0a 1c 6b 74
>198f00						.align 16
>198f00		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>198f08		01 01 01 00 00 00 00 00
>198f10		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>198f18		ff ff ff 01 00 00 00 00
>198f20		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>198f28		01 55 ff ff 01 00 00 00
>198f30		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>198f38		ff ff ff ff 01 00 00 00
>198f40		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>198f48		ff ff 01 ff ff 01 00 00
>198f50		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>198f58		01 ff ff 01 ff 01 00 00
>198f60		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>198f68		ff 01 ff ff ff 01 00 00
>198f70		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>198f78		ff ff ff ff ff 01 01 00
>198f80		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>198f88		ff ff ff ff 01 ff ff 01
>198f90		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>198f98		ff ff ff ff ff ff ff 01
>198fa0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>198fa8		55 55 01 ff ff 55 01 00
>198fb0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>198fb8		01 01 55 ff 55 01 00 00
>198fc0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>198fc8		01 55 55 55 01 00 00 00
>198fd0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>198fd8		01 55 55 01 00 00 00 00
>198fe0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>198fe8		00 01 01 00 00 00 00 00
>198ff0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>198ff8		00 00 00 00 00 00 00 00
>1a0000		5c ba 88 1a 5c c9 6e 1a		        .binary "binaries/basic816_1A0000.bin"
>1a0008		5c 84 26 1a 5c 27 02 1a 5c 58 00 1a 5c b8 00 1a
>1a0018		5c 8d 03 1a 5c cb 01 1a 5c e6 01 1a 5c ed 01 1a
>1a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>1a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>1a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>1a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>1a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>1a0078		0d d0 03 4c b1 00 c9 08 d0 1a e0 00 00 f0 ed da
>1a0088		bf 01 4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0
>1a0098		fa ca 80 0e c9 20 90 d4 9f 00 4c 00 e8 20 18 00
>1a00a8		80 ca a9 08 20 18 00 80 c3 a9 00 20 1c 00 28 60
>1a00b8		22 4c 10 00 60 08 e2 30 48 a9 1b 20 18 00 a9 5b
>1a00c8		20 18 00 68 20 18 00 28 60 08 c2 20 3b 38 e9 04
>1a00d8		00 1b e2 20 a9 00 83 02 83 03 83 04 20 14 00 c9
>1a00e8		00 f0 f9 83 01 a3 02 d0 33 a3 01 c9 08 d0 0a 20
>1a00f8		18 00 a9 50 20 bd 00 80 e3 c9 0d f0 0a c9 1b d0
>1a0108		06 a9 01 83 02 80 d5 20 18 00 a3 01 85 0c c2 20
>1a0118		3b 18 69 04 00 1b e2 20 a5 0c 28 60 c9 01 d0 10
>1a0128		a3 01 c9 5b f0 03 82 ab ff a9 02 83 02 82 ac ff
>1a0138		c9 02 d0 29 a3 01 c9 41 90 0c c9 45 b0 08 a3 01
>1a0148		20 bd 00 82 8e ff c9 30 90 10 c9 3a b0 0c 38 e9
>1a0158		30 83 03 a9 03 83 02 82 82 ff 82 77 ff c9 03 d0
>1a0168		a9 a3 01 c9 30 90 1b c9 3a b0 17 a3 03 0a 85 0c
>1a0178		0a 0a 18 65 0c a3 01 38 e9 30 18 65 0c 83 03 82
>1a0188		5a ff c9 7e f0 03 82 4b ff a3 03 c9 02 f0 07 c9
>1a0198		03 f0 07 82 3e ff a9 40 80 02 a9 50 20 bd 00 82
>1a01a8		32 ff 08 e2 20 af 00 00 af 89 3c f0 08 09 03 8f
>1a01b8		00 00 af 80 0c 09 01 8f 00 00 af a9 00 22 3c 10
>1a01c8		00 28 60 08 e2 20 c9 00 f0 08 af 10 00 af 09 01
>1a01d8		80 06 af 10 00 af 29 fe 8f 10 00 af 28 60 08 22
>1a01e8		84 10 00 28 60 48 da 5a 0b 08 e2 20 c2 10 a2 00
>1a01f8		00 a9 20 9f 00 a0 af af 1e 00 00 9f 00 c0 af e8
>1a0208		e0 00 20 d0 ec 08 c2 20 48 a9 00 00 5b 68 28 a2
>1a0218		00 00 a0 00 00 22 84 10 00 28 2b 7a fa 68 60 da
>1a0228		5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 af
>1a0238		0c 00 00 85 08 e2 20 af 0e 00 00 c2 20 29 ff 00
>1a0248		85 0a af 11 00 00 8f 08 01 00 af 1c 00 00 3a 8f
>1a0258		0a 01 00 18 a5 08 6f 0c 01 00 85 08 a5 0a 69 00
>1a0268		00 85 0a e2 20 af 0f 00 00 85 8f a0 00 00 a2 00
>1a0278		00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0 f4 ca bf 00
>1a0288		4f 00 c9 20 d0 09 a9 00 9f 00 4f 00 ca 10 ef 28
>1a0298		2b 7a fa 60 e2 20 20 e7 02 a9 48 8f 0f 00 00 a9
>1a02a8		34 8f 13 00 00 a9 20 8f 08 00 af 8f 09 00 af a2
>1a02b8		00 00 a9 00 9f 18 f0 1a e8 e0 40 00 d0 f6 a9 80
>1a02c8		8f b4 08 00 e2 20 a9 00 8f 89 0f 00 a9 00 8f 00
>1a02d8		02 af 8f 0c 02 af 8f 18 02 af 8f 24 02 af 60 08
>1a02e8		e2 20 af 0e 08 af 09 08 8f 0e 08 af af 00 08 af
>1a02f8		8f 84 e8 af af 02 08 af 8f 85 e8 af a9 03 8f 86
>1a0308		e8 af af 0e 08 af 29 f7 8f 0e 08 af ea ea ea a9
>1a0318		01 8f 86 e8 af 28 60 08 e2 20 48 48 a9 00 22 3c
>1a0328		10 00 68 22 18 10 00 af 89 0f 00 29 01 d0 f8 68
>1a0338		28 60 08 e2 20 48 48 a9 01 22 3c 10 00 68 22 18
>1a0348		10 00 af 89 0f 00 29 01 d0 f8 68 28 60 08 c2 20
>1a0358		48 e2 20 a9 0d 20 18 00 c2 20 68 28 60 08 22 78
>1a0368		10 00 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>1a0378		e2 20 a5 b6 1a 85 b6 cf 13 00 00 90 05 20 14 00
>1a0388		64 b6 2b 28 60 da 5a 0b 08 08 c2 20 48 a9 00 08
>1a0398		5b 68 28 e2 20 c2 10 8f b5 08 00 af b4 08 00 29
>1a03a8		20 f0 07 af b5 08 00 20 28 00 af b4 08 00 29 80
>1a03b8		f0 07 af b5 08 00 20 1f 03 af b4 08 00 29 40 f0
>1a03c8		14 af b5 08 00 20 3a 03 af b5 08 00 c9 0d d0 05
>1a03d8		a9 0a 20 3a 03 28 2b 7a fa 60 08 e2 20 bd 00 00
>1a03e8		f0 06 20 18 00 e8 80 f5 28 60 08 c2 20 48 48 4a
>1a03f8		4a 4a 4a 4a 4a 4a 4a 20 0c 04 68 29 ff 00 20 0c
>1a0408		04 68 28 60 08 c2 20 48 e2 20 48 4a 4a 4a 4a 20
>1a0418		23 04 68 20 23 04 c2 20 68 28 60 08 c2 30 da 29
>1a0428		0f 00 aa bf 00 d0 1a 20 18 00 fa 28 60 08 c2 30
>1a0438		48 da 5a 8b 0b c2 30 a3 0b 18 69 03 00 aa e2 20
>1a0448		a9 1a 48 ab bd 00 00 f0 06 20 1f 03 e8 80 f5 c2
>1a0458		30 2b ab 7a fa 68 28 60 08 e2 20 c9 5b b0 04 c9
>1a0468		41 b0 0b c9 7b b0 04 c9 61 b0 03 28 18 60 28 38
>1a0478		60 08 e2 20 c9 3a b0 04 c9 30 b0 03 28 18 60 28
>1a0488		38 60 08 e2 20 c9 3a b0 04 c9 30 b0 13 c9 67 b0
>1a0498		04 c9 61 b0 0b c9 47 b0 04 c9 41 b0 03 28 18 60
>1a04a8		28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 12 c9 67
>1a04b8		b0 04 c9 61 b0 0f c9 47 b0 04 c9 41 b0 09 28 60
>1a04c8		38 e9 30 80 f9 29 df 38 e9 37 80 f2 08 e2 20 c9
>1a04d8		7b b0 06 c9 61 90 02 29 df 28 60 08 e2 20 c2 10
>1a04e8		bd 00 00 f0 09 20 d4 04 9d 00 00 e8 80 f2 28 60
>1a04f8		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 48 06
>1a0508		23 26 25 a5 23 85 0c a5 25 85 0e 06 0c 26 0e 06
>1a0518		0c 26 0e 18 a5 23 65 0c 85 23 a5 25 65 0e 85 25
>1a0528		68 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>1a0538		c2 20 a5 23 8f 1a 01 00 a9 0a 00 8f 18 01 00 af
>1a0548		1c 01 00 85 23 64 25 af 1e 01 00 85 29 64 2b e2
>1a0558		20 a9 00 85 27 85 2d 2b 28 60 08 0b 08 c2 20 48
>1a0568		a9 00 08 5b 68 28 c2 20 a5 23 8f 1a 01 00 a9 64
>1a0578		00 8f 18 01 00 af 1c 01 00 85 23 64 25 af 1e 01
>1a0588		00 85 29 64 2b e2 20 a9 00 85 27 85 2d 2b 28 60
>1a0598		08 c2 20 a5 23 d0 08 a5 25 d0 04 28 e2 02 60 28
>1a05a8		c2 02 60 08 c2 30 a9 ff ff 85 23 85 25 e2 20 a9
>1a05b8		00 85 27 28 60 08 c2 30 a9 00 00 85 23 85 25 e2
>1a05c8		20 a9 00 85 27 28 60 08 e2 20 a5 27 c9 00 f0 07
>1a05d8		c9 01 d0 05 20 72 5a 28 60 08 c2 20 48 a9 00 08
>1a05e8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a05f8		20 6c 1d e2 20 dc d4 08 08 e2 20 a5 2d c9 00 f0
>1a0608		37 c9 01 d0 35 c2 20 a5 25 48 a5 23 48 c2 20 a5
>1a0618		29 85 23 a5 2b 85 25 e2 20 a9 01 85 27 20 72 5a
>1a0628		c2 20 a5 23 85 29 a5 25 85 2b e2 20 a9 00 85 2d
>1a0638		c2 20 68 85 23 68 85 25 28 60 08 c2 20 48 a9 00
>1a0648		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a0658		00 20 6c 1d e2 20 dc d4 08 08 e2 20 a5 27 c9 02
>1a0668		d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a0678		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>1a0688		dc d4 08 08 e2 20 a5 27 c9 00 f0 07 c9 01 d0 0b
>1a0698		20 72 5a c2 20 a5 25 d0 21 28 60 08 c2 20 48 a9
>1a06a8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a06b8		ff 00 20 6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00
>1a06c8		08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff
>1a06d8		00 20 6c 1d e2 20 dc d4 08 08 e2 20 a5 27 c9 00
>1a06e8		f0 07 c9 01 d0 11 20 72 5a a5 26 d0 29 a5 25 d0
>1a06f8		25 a5 24 d0 21 28 60 08 c2 20 48 a9 00 08 5b 68
>1a0708		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c
>1a0718		1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>1a0728		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>1a0738		e2 20 dc d4 08 08 e2 20 a5 27 c9 01 f0 26 c9 00
>1a0748		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>1a0758		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>1a0768		08 20 6c 5a 28 60 08 e2 20 a5 2d c9 01 f0 26 c9
>1a0778		00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a0788		04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc
>1a0798		d4 08 20 9f 07 28 60 c2 20 a5 25 48 a5 23 48 c2
>1a07a8		20 a5 29 85 23 a5 2b 85 25 e2 20 a9 00 85 27 20
>1a07b8		6c 5a c2 20 a5 23 85 29 a5 25 85 2b e2 20 a9 01
>1a07c8		85 2d c2 20 68 85 23 68 85 25 60 08 e2 20 a5 27
>1a07d8		c9 00 f0 23 c9 01 f0 2e 08 c2 20 48 a9 00 08 5b
>1a07e8		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>1a07f8		6c 1d e2 20 dc d4 08 a5 2d c9 00 f0 16 c9 01 d0
>1a0808		d7 20 6c 5a 80 0d a5 2d c9 01 f0 07 c9 00 d0 c8
>1a0818		20 9f 07 e2 20 a5 27 28 60 08 e2 20 a5 27 c9 02
>1a0828		d0 25 a5 2d c9 02 f0 24 08 c2 20 48 a9 00 08 5b
>1a0838		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>1a0848		6c 1d e2 20 dc d4 08 20 d3 07 a5 27 28 60 08 0b
>1a0858		08 c2 20 48 a9 00 08 5b 68 28 c2 30 64 23 64 25
>1a0868		e2 20 64 27 a7 00 c9 26 f0 44 e2 20 a7 00 20 79
>1a0878		04 90 76 20 f8 04 38 e9 30 c2 20 29 ff 00 18 65
>1a0888		23 85 23 a5 25 69 00 00 85 25 20 2b 20 80 db 08
>1a0898		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a08a8		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 20 2b
>1a08b8		20 a7 00 c9 48 f0 04 c9 68 d0 d4 20 2b 20 e2 20
>1a08c8		a7 00 20 8a 04 90 22 20 ab 04 c2 20 06 23 26 25
>1a08d8		06 23 26 25 06 23 26 25 06 23 26 25 29 ff 00 18
>1a08e8		65 23 85 23 20 2b 20 80 d5 2b 28 60 08 c2 30 a5
>1a08f8		04 f0 1c 38 a5 04 e5 1a a8 e2 20 b7 1a f0 10 c9
>1a0908		20 f0 06 c9 09 f0 02 28 60 88 c0 ff ff d0 ec a9
>1a0918		00 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>1a0928		a5 1a 85 00 e2 20 a5 1c 85 02 20 4c 20 a7 00 20
>1a0938		79 04 90 0c 20 56 08 c2 20 a5 23 85 d7 20 4c 20
>1a0948		c2 20 a5 00 85 1a e2 20 a5 02 85 1c 20 68 09 e2
>1a0958		20 20 d9 09 c9 00 f0 05 20 87 0b 80 f4 2b 28 60
>1a0968		08 c2 20 a5 1a 85 00 a5 1c 85 02 a2 00 00 e2 20
>1a0978		a0 00 00 e0 00 00 f0 0d b7 00 f0 53 c9 3a f0 04
>1a0988		c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0 10 c9 72 d0
>1a0998		26 b7 00 f0 3a c9 52 f0 04 c9 72 d0 1a c8 b7 00
>1a09a8		f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7 00 f0 20 c9
>1a09b8		4d f0 0a c9 6d f0 06 e8 20 2b 20 80 b3 a7 00 c9
>1a09c8		3a d0 03 20 2b 20 a9 03 85 1e a9 91 20 87 0b 28
>1a09d8		60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a09e8		7f 85 1e c2 10 20 3c 0b a5 1e d0 03 4c 7c 0a c2
>1a09f8		20 a5 1a 85 00 e2 20 a5 1c 85 02 c2 20 64 04 64
>1a0a08		06 e2 30 a0 00 b7 00 f0 da c9 91 f0 d6 c8 c4 1e
>1a0a18		90 f3 c2 10 a7 00 c9 22 d0 05 20 9e 0a 80 28 a5
>1a0a28		1e c9 03 90 19 c2 20 a5 00 c5 1a d0 08 e2 20 a5
>1a0a38		02 c5 1c f0 09 e2 20 a7 04 20 b5 4f b0 09 e2 20
>1a0a48		20 ae 0a c9 00 d0 11 c2 20 a5 00 85 04 e2 20 a5
>1a0a58		02 85 06 20 2b 20 80 a9 c9 81 d0 18 20 f4 08 c9
>1a0a68		00 f0 14 89 80 10 0b 20 28 0c c9 30 f0 04 a9 af
>1a0a78		80 02 a9 81 2b 28 60 08 c2 20 48 a9 00 08 5b 68
>1a0a88		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 6c
>1a0a98		1d e2 20 dc d4 08 08 e2 20 20 2b 20 a7 00 f0 04
>1a0aa8		c9 22 d0 f5 28 60 da 5a 08 0b 08 c2 20 48 a9 00
>1a0ab8		08 5b 68 28 c2 20 a5 04 d0 0a e2 20 a5 04 d0 04
>1a0ac8		a9 00 80 0a e2 20 a7 04 20 b5 4f a9 00 2a 85 28
>1a0ad8		c2 30 a9 7c 0c 85 08 e2 20 a9 1a 85 0a a2 80 00
>1a0ae8		e2 20 a0 01 00 b7 08 f0 31 c5 1e d0 32 c2 30 a0
>1a0af8		02 00 b7 08 85 0c e2 20 a9 1a 85 0e a5 28 f0 07
>1a0b08		a7 0c 20 b5 4f b0 18 e2 10 a0 00 b7 00 20 d4 04
>1a0b18		d7 0c d0 0b c8 c4 1e 90 f2 8a 2b 28 7a fa 60 c2
>1a0b28		30 18 a5 08 69 08 00 85 08 e2 20 a5 0a 69 00 85
>1a0b38		0a e8 80 ac 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>1a0b48		28 c2 30 a9 7c 0c 85 08 a9 1a 00 85 0a 64 0c e2
>1a0b58		20 a0 01 00 b7 08 f0 1d c5 1e b0 06 c5 0c 90 02
>1a0b68		85 0c c2 20 18 a5 08 69 08 00 85 08 a5 0a 69 00
>1a0b78		00 85 0a 80 da e2 20 a5 0c 85 1e ab 2b 28 60 08
>1a0b88		0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 87 00 c2
>1a0b98		20 18 a5 00 69 01 00 85 08 a5 02 69 00 00 85 0a
>1a0ba8		e2 10 a4 1e 88 e2 20 b7 08 87 08 f0 13 c2 20 18
>1a0bb8		a5 08 69 01 00 85 08 a5 0a 69 00 00 85 0a 80 e5
>1a0bc8		2b 28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69 7c 0c
>1a0bd8		aa 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28
>1a0be8		08 e2 20 48 a9 1a 48 ab 68 28 e2 20 c2 10 20 cb
>1a0bf8		0b bd 00 00 c2 20 29 0f 00 2b ab 28 60 08 8b 0b
>1a0c08		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 1a
>1a0c18		48 ab 68 28 c2 30 20 cb 0b bd 04 00 2b ab 28 60
>1a0c28		08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>1a0c38		48 a9 1a 48 ab 68 28 e2 20 c2 10 20 cb 0b bd 00
>1a0c48		00 c2 20 29 f0 00 2b ab 28 60 08 8b 0b 08 c2 20
>1a0c58		48 a9 00 08 5b 68 28 08 e2 20 48 a9 1a 48 ab 68
>1a0c68		28 e2 20 c2 10 20 cb 0b bd 06 00 c2 20 29 ff 00
>1a0c78		2b ab 28 60 03 01 10 d0 f1 26 02 00 03 01 12 d0
>1a0c88		31 27 02 00 02 01 14 d0 68 27 02 00 02 01 16 d0
>1a0c98		9f 27 02 00 02 03 18 d0 a9 27 02 00 00 01 1c d0
>1a0ca8		bc 27 02 00 04 02 1e d0 7a 29 02 00 04 02 21 d0
>1a0cb8		3a 29 02 00 04 02 24 d0 fa 28 02 00 04 01 27 d0
>1a0cc8		3a 28 02 00 04 01 29 d0 ba 28 02 00 04 01 2b d0
>1a0cd8		7a 28 02 00 05 03 2d d0 24 28 01 00 06 03 31 d0
>1a0ce8		f6 27 02 00 07 02 35 d0 0d 28 02 00 ff 01 38 d0
>1a0cf8		00 00 00 00 40 01 3a d0 00 00 00 00 20 03 3c d0
>1a0d08		40 40 00 00 20 05 40 d0 45 44 00 00 20 03 46 d0
>1a0d18		90 43 00 00 20 04 4a d0 30 43 00 00 20 03 4f d0
>1a0d28		27 43 00 00 20 02 53 d0 bf 42 00 00 50 04 56 d0
>1a0d38		00 00 00 00 50 04 5b d0 00 00 00 00 20 05 60 d0
>1a0d48		02 42 00 00 20 06 66 d0 7b 42 00 00 20 03 6d d0
>1a0d58		57 40 00 00 50 02 71 d0 00 00 00 00 50 04 74 d0
>1a0d68		00 00 00 00 20 04 79 d0 4b 41 00 00 20 02 7e d0
>1a0d78		51 40 00 00 20 04 81 d0 54 40 00 00 50 05 86 d0
>1a0d88		00 00 00 00 50 05 8c d0 00 00 00 00 20 04 92 d0
>1a0d98		4e 40 00 00 20 03 97 d0 86 43 00 00 20 04 9b d0
>1a0da8		21 40 00 00 20 04 a0 d0 b1 3f 00 00 20 05 a5 d0
>1a0db8		47 3f 00 00 20 05 ab d0 d4 3e 00 00 20 03 b1 d0
>1a0dc8		d0 3e 00 00 20 04 b5 d0 b1 3d 00 00 20 04 ba d0
>1a0dd8		c3 3e 00 00 20 07 bf d0 c7 3e 00 00 20 03 c7 d0
>1a0de8		04 3d 00 00 20 04 cb d0 6d 3c 00 00 00 01 d0 d0
>1a0df8		ba 29 01 00 30 03 d2 d0 3b 4a 00 00 30 04 d6 d0
>1a0e08		8b 4a 00 00 30 05 db d0 3d 4b 00 00 30 05 e1 d0
>1a0e18		ef 4a 00 00 30 04 e7 d0 7c 4b 00 00 30 03 ec d0
>1a0e28		d1 4b 00 00 30 03 f0 d0 16 4c 00 00 30 03 f4 d0
>1a0e38		9f 4c 00 00 30 03 f8 d0 28 4d 00 00 30 03 fc d0
>1a0e48		8a 4d 00 00 30 04 00 d1 ad 49 00 00 30 03 05 d1
>1a0e58		4c 49 00 00 30 04 09 d1 fe 48 00 00 30 03 0e d1
>1a0e68		a8 48 00 00 30 05 12 d1 df 47 00 00 30 06 18 d1
>1a0e78		fe 46 00 00 30 04 1f d1 49 46 00 00 10 03 24 d1
>1a0e88		f1 4e 00 00 10 03 28 d1 bc 4e 00 00 10 04 2c d1
>1a0e98		a2 6a 00 00 10 04 31 d1 08 4f 00 00 10 03 36 d1
>1a0ea8		c9 67 00 00 20 05 3a d1 74 69 00 00 10 04 40 d1
>1a0eb8		4f 6a 00 00 20 05 45 d1 5b 6b 00 00 20 03 4b d1
>1a0ec8		7a 6c 00 00 10 04 4f d1 e7 6b 00 00 20 06 54 d1
>1a0ed8		f0 6c 00 00 20 04 5b d1 14 6e 00 00 10 07 60 d1
>1a0ee8		b9 4e 00 00 20 03 68 d1 fb 3b 00 00 20 05 6c d1
>1a0ef8		0b 3b 00 00 20 09 72 d1 79 2b 00 00 20 09 7c d1
>1a0f08		06 2b 00 00 20 0a 86 d1 36 2b 00 00 20 07 91 d1
>1a0f18		73 2a 00 00 30 08 99 d1 24 45 00 00 20 07 a2 d1
>1a0f28		08 2a 00 00 30 08 aa d1 8e 45 00 00 20 08 b3 d1
>1a0f38		be 2c 00 00 20 08 bc d1 f2 2b 00 00 20 06 c5 d1
>1a0f48		f8 2d 00 00 20 09 cc d1 00 2f 00 00 20 04 d6 d1
>1a0f58		10 30 00 00 20 04 db d1 81 30 00 00 20 04 e0 d1
>1a0f68		1a 31 00 00 20 06 e5 d1 56 32 00 00 20 08 ec d1
>1a0f78		f4 32 00 00 20 0a f5 d1 42 33 00 00 20 07 00 d2
>1a0f88		79 34 00 00 20 07 08 d2 f7 34 00 00 20 08 10 d2
>1a0f98		69 35 00 00 20 06 19 d2 a6 35 00 00 20 07 20 d2
>1a0fa8		d6 38 00 00 50 06 28 d2 00 00 00 00 50 04 2f d2
>1a0fb8		00 00 00 00 20 06 34 d2 eb 3a 00 00 30 03 3b d2
>1a0fc8		e0 4d 00 00 30 03 3f d2 f3 45 00 00 30 03 43 d2
>1a0fd8		f3 4d 00 00 30 03 47 d2 09 4e 00 00 30 03 4b d2
>1a0fe8		1f 4e 00 00 30 02 4f d2 35 4e 00 00 30 04 52 d2
>1a0ff8		4b 4e 00 00 30 04 57 d2 61 4e 00 00 30 04 5c d2
>1a1008		77 4e 00 00 30 03 61 d2 8d 4e 00 00 30 03 65 d2
>1a1018		a3 4e 00 00 00 00 00 00 00 00 00 00 08 0b 08 c2
>1a1028		20 48 a9 00 08 5b 68 28 c2 30 a9 ff ff 85 ba e2
>1a1038		20 a9 17 85 bc c2 20 64 b7 64 bd e2 20 64 b9 64
>1a1048		bf 2b 28 60 5a 08 e2 20 85 ea c2 10 86 8f c2 20
>1a1058		a5 0e 48 a5 0c 48 a5 12 48 a5 10 48 20 fc 10 b0
>1a1068		03 20 80 10 20 88 12 c2 20 68 85 10 68 85 12 68
>1a1078		85 0c 68 85 0e 28 7a 60 08 0b 08 c2 20 48 a9 00
>1a1088		08 5b 68 28 e2 20 a6 8f ca 86 0c e8 c2 30 38 a5
>1a1098		ba e5 0c 85 c0 e2 20 a5 bc e9 00 85 c2 20 88 12
>1a10a8		e2 20 a5 ea a0 00 00 97 c3 a9 00 a0 01 00 97 c3
>1a10b8		a0 02 00 97 c3 c2 20 a9 00 00 97 c3 c2 20 18 a5
>1a10c8		ba 69 01 00 a0 05 00 97 c3 e2 20 c8 c8 a5 bc 69
>1a10d8		00 97 c3 c2 20 a5 c0 85 b7 e2 20 a5 c2 85 b9 c2
>1a10e8		20 38 a5 c3 e9 01 00 85 ba e2 20 a5 c5 e9 00 85
>1a10f8		bc 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>1a1108		c2 30 c2 20 a5 bd 85 c9 e2 20 a5 bf 85 cb a5 c9
>1a1118		d0 17 e2 20 a5 cb d0 11 c2 20 a9 00 00 85 cf e2
>1a1128		20 a9 00 85 d1 2b 28 18 60 c2 20 a0 05 00 b7 c9
>1a1138		85 cc e2 20 c8 c8 b7 c9 85 ce c2 20 18 a5 c9 65
>1a1148		8f 85 0c e2 20 a5 cb 69 00 85 0e c2 20 18 a5 0c
>1a1158		69 08 00 85 0c e2 20 a5 0e 69 00 85 0e c2 20 a5
>1a1168		0c c5 cc d0 28 e2 20 a5 0e c5 ce d0 20 c2 20 a5
>1a1178		cf d0 5d e2 20 a5 d1 d0 57 c2 20 a0 02 00 b7 c9
>1a1188		85 bd e2 20 c8 c8 b7 c9 85 bf 4c 39 12 c2 20 a5
>1a1198		0c 69 08 00 85 10 e2 20 a5 0e 69 00 85 12 e2 20
>1a11a8		a5 c6 c5 10 b0 3e 90 08 c2 20 a5 c6 c5 10 b0 34
>1a11b8		c2 20 a5 c9 85 cf e2 20 a5 cb 85 d1 c2 20 a0 02
>1a11c8		00 b7 cf 85 c9 e2 20 c8 c8 b7 cf 85 cb 4c 16 11
>1a11d8		c2 20 a0 02 00 b7 c9 97 cf e2 20 c8 c8 b7 c9 97
>1a11e8		cf 4c 39 12 c2 20 a0 05 00 b7 c9 97 0c e2 20 c8
>1a11f8		c8 b7 c9 97 0c c2 20 a0 02 00 b7 c9 97 0c e2 20
>1a1208		c8 c8 b7 c9 97 0c c2 20 a5 cf d0 14 e2 20 a5 cf
>1a1218		d0 0e c2 20 a5 0c 85 bd e2 20 a5 0e 85 bf 80 11
>1a1228		c2 20 a0 02 00 a5 0c 97 cf e2 20 c8 c8 a5 0e 97
>1a1238		cf c2 20 a5 c9 85 c3 e2 20 a5 cb 85 c5 c2 20 a5
>1a1248		c3 85 b7 e2 20 a5 c5 85 b9 c2 20 a0 05 00 a5 0c
>1a1258		97 c3 e2 20 c8 c8 a5 0e 97 c3 c2 20 a0 02 00 a9
>1a1268		00 00 97 c3 e2 20 c8 c8 97 c3 e2 20 a5 ea e2 20
>1a1278		a0 00 00 97 c3 a0 01 00 a9 00 97 c3 2b 28 38 60
>1a1288		08 c2 20 38 a5 c0 e9 08 00 85 c3 e2 20 a5 c2 e9
>1a1298		00 85 c5 28 60 08 e2 20 a5 c5 f0 04 c9 18 b0 12
>1a12a8		c2 20 a5 c3 f0 0c e2 20 a0 01 00 b7 c3 1a 97 c3
>1a12b8		28 60 00 ea 08 e2 20 a5 c5 f0 04 c9 18 b0 17 c2
>1a12c8		20 a5 c3 f0 11 e2 20 a0 01 00 b7 c3 3a 97 c3 d0
>1a12d8		03 20 e0 12 28 60 00 ea 08 c2 20 a5 bd d0 21 e2
>1a12e8		20 a5 bf d0 1b a5 c5 85 bf c2 20 a5 c3 85 bd a9
>1a12f8		00 00 a0 02 00 97 c3 c8 c8 e2 20 97 c3 4c c7 13
>1a1308		e2 20 a5 bf c5 c5 90 28 c2 20 a5 bd c5 c3 90 20
>1a1318		c2 20 a5 bd a0 02 00 97 c3 e2 20 c8 c8 a5 bf 97
>1a1328		c3 c2 20 a5 c3 85 bd e2 20 a5 c5 85 bf 4c c7 13
>1a1338		c2 20 a5 bd 85 08 e2 20 a5 bf 85 0a e2 20 a0 04
>1a1348		00 b7 08 c5 c8 90 32 d0 0b c2 20 a0 02 00 b7 08
>1a1358		c5 c6 90 25 c2 20 a0 02 00 b7 08 97 c3 e2 20 c8
>1a1368		c8 b7 08 97 c3 c2 20 a5 c3 a0 02 00 97 08 e2 20
>1a1378		a5 c5 c8 c8 97 08 4c c7 13 c2 20 a0 02 00 b7 08
>1a1388		d0 08 e2 20 c8 c8 b7 08 f0 19 c2 20 a0 02 00 b7
>1a1398		08 85 0c e2 20 c8 c8 b7 08 85 0a c2 20 a5 0c 85
>1a13a8		08 80 99 c2 20 a5 c3 a0 02 00 97 08 e2 20 c8 c8
>1a13b8		a5 c5 97 08 a9 00 97 c3 c2 20 a0 02 00 97 c3 20
>1a13c8		cc 13 28 60 08 c2 20 a5 bd 85 c3 e2 20 a5 bf 85
>1a13d8		c5 c2 20 a5 c3 d0 09 e2 20 a5 c5 d0 03 4c 6f 14
>1a13e8		c2 20 a0 02 00 b7 c3 85 0c e2 20 c8 c8 b7 c3 85
>1a13f8		0e c2 20 a0 05 00 b7 c3 85 10 e2 20 c8 c8 b7 c3
>1a1408		85 12 c2 20 a5 0c c5 10 d0 08 e2 20 a5 0e c5 12
>1a1418		f0 1f c2 20 a0 02 00 b7 c3 85 0c e2 20 c8 c8 b7
>1a1428		c3 85 0e c2 20 a5 0c 85 c3 e2 20 a5 0e 85 c5 80
>1a1438		a0 c2 20 a0 02 00 b7 c3 85 0c e2 20 c8 c8 b7 c3
>1a1448		85 0e c2 20 a0 02 00 b7 0c 97 c3 e2 20 c8 c8 b7
>1a1458		0c 97 c3 c2 20 a0 05 00 b7 0c 97 c3 e2 20 c8 c8
>1a1468		b7 0c 97 c3 4c e8 13 28 60 08 c2 20 64 16 64 18
>1a1478		28 60 08 c2 30 a5 16 d0 16 a5 18 d0 12 e2 20 64
>1a1488		16 a5 e2 1a 1a 85 17 a5 e3 85 18 64 19 80 07 c2
>1a1498		20 a5 17 1a 85 17 c2 20 a5 bb 3a c5 17 f0 02 b0
>1a14a8		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 03 8f
>1a14b8		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>1a14c8		28 60 c9 00 d0 05 c0 01 00 f0 05 09 30 97 16 c8
>1a14d8		60 08 c2 30 64 0c a5 25 10 1a 18 a5 23 49 ff ff
>1a14e8		69 01 00 85 23 a5 25 49 ff ff 69 00 00 85 25 a9
>1a14f8		ff ff 85 0c 64 10 64 12 64 14 a2 1f 00 f8 06 23
>1a1508		26 25 a5 10 65 10 85 10 a5 12 65 12 85 12 a5 14
>1a1518		65 14 85 14 ca 10 e7 d8 e2 20 20 7a 14 a0 00 00
>1a1528		a5 0c f0 04 a9 2d 80 02 a9 20 97 16 c8 a2 05 00
>1a1538		b5 10 29 f0 4a 4a 4a 4a 20 ca 14 b5 10 29 0f 20
>1a1548		ca 14 ca 10 eb c0 01 00 d0 0c a9 20 87 16 a0 01
>1a1558		00 a9 30 97 16 c8 a9 00 97 16 28 60 00 ea 08 e2
>1a1568		20 c2 10 a0 00 00 bd 00 00 f0 04 e8 c8 80 f7 28
>1a1578		60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2
>1a1588		10 a0 00 00 b7 23 d0 04 b7 29 f0 25 b7 23 d7 29
>1a1598		90 12 d0 03 c8 80 ed c2 20 a9 01 00 85 23 e2 20
>1a15a8		64 25 80 15 c2 20 a9 ff ff 85 23 e2 20 85 25 80
>1a15b8		08 c2 20 64 23 e2 20 64 25 e2 20 a9 00 85 27 2b
>1a15c8		28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a15d8		20 c2 10 08 c2 20 48 e2 20 a5 25 48 ab c2 20 68
>1a15e8		28 a6 23 20 66 15 84 0c 08 c2 20 48 e2 20 a5 2b
>1a15f8		48 ab c2 20 68 28 a6 29 20 66 15 c2 20 98 38 65
>1a1608		0c aa e2 20 a9 02 20 4c 10 c2 20 a5 b7 85 08 e2
>1a1618		20 a5 b9 85 0a a0 00 00 08 c2 20 48 e2 20 a5 25
>1a1628		48 ab c2 20 68 28 a6 23 bd 00 00 f0 06 97 08 e8
>1a1638		c8 80 f5 e2 20 08 c2 20 48 e2 20 a5 2b 48 ab c2
>1a1648		20 68 28 a6 29 bd 00 00 97 08 f0 04 e8 c8 80 f5
>1a1658		c2 20 a5 08 85 23 e2 20 a5 0a 85 25 a9 02 85 27
>1a1668		ab 2b 28 60 da 5a 08 0b 8b 08 c2 20 48 a9 00 08
>1a1678		5b 68 28 c2 20 a5 0a 48 a5 08 48 c2 30 08 c2 20
>1a1688		48 e2 20 a5 25 48 ab c2 20 68 28 a6 23 20 66 15
>1a1698		98 aa e8 e2 20 a9 02 20 4c 10 c2 20 a5 c0 85 08
>1a16a8		a5 c2 85 0a a0 00 00 e2 20 b7 23 97 08 f0 03 c8
>1a16b8		80 f7 c2 20 a5 08 85 23 a5 0a 85 25 c2 20 68 85
>1a16c8		08 68 85 0a ab 2b 28 7a fa 60 08 e2 20 c2 10 a0
>1a16d8		00 00 b7 23 f0 05 c8 80 f9 84 92 c2 30 c4 29 90
>1a16e8		13 f0 11 a5 8f 30 0d f0 0b c4 8f b0 12 a5 29 d0
>1a16f8		0e 4c 50 17 20 7a 14 e2 20 a9 00 87 16 80 39 20
>1a1708		7a 14 c2 30 18 a5 23 65 29 85 23 a5 25 69 00 00
>1a1718		85 25 a0 00 00 e2 20 a7 23 97 16 f0 1b c2 20 18
>1a1728		a5 23 69 01 00 85 23 a5 25 69 00 00 85 25 c8 c4
>1a1738		8f d0 e2 a9 00 00 97 16 c2 20 a5 16 85 23 a5 18
>1a1748		85 25 e2 20 a9 02 85 27 28 60 08 c2 30 20 79 15
>1a1758		a5 23 c9 ff ff d0 05 20 ab 05 80 03 20 bd 05 28
>1a1768		60 08 c2 30 20 79 15 a5 23 c9 01 00 d0 05 20 ab
>1a1778		05 80 03 20 bd 05 28 60 08 c2 30 20 79 15 a5 23
>1a1788		c9 00 00 d0 05 20 ab 05 80 03 20 bd 05 28 60 08
>1a1798		c2 30 20 79 15 a5 23 c9 00 00 f0 05 20 ab 05 80
>1a17a8		03 20 bd 05 28 60 08 c2 30 20 79 15 a5 23 c9 ff
>1a17b8		ff f0 05 20 ab 05 80 03 20 bd 05 28 60 08 c2 30
>1a17c8		20 79 15 a5 23 c9 01 00 f0 05 20 ab 05 80 03 20
>1a17d8		bd 05 28 60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b
>1a17e8		68 28 c2 30 a9 00 00 85 00 85 1a a9 16 00 85 02
>1a17f8		85 1c 22 3c 11 00 b0 20 a0 02 00 b7 1a f0 0f c5
>1a1808		55 90 10 c5 59 f0 02 b0 05 20 3f 18 80 e4 28 2b
>1a1818		7a 68 60 20 08 21 80 da 08 c2 20 48 a9 00 08 5b
>1a1828		68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20
>1a1838		6c 1d e2 20 dc d4 08 08 c2 30 85 23 64 25 20 d9
>1a1848		14 a5 16 1a 85 23 a5 18 85 25 20 c1 44 18 a5 1a
>1a1858		69 04 00 85 00 a5 1c 69 00 00 85 02 e2 20 a9 20
>1a1868		20 18 00 c2 20 20 7e 18 90 fb e2 20 a9 0d 20 18
>1a1878		00 20 08 21 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>1a1888		5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2
>1a1898		10 a7 00 f0 3a 30 05 20 18 00 80 29 c2 20 29 7f
>1a18a8		00 0a 0a 0a 18 69 7c 0c 85 08 a9 1a 00 69 00 00
>1a18b8		85 0a 08 e2 20 48 a9 1a 48 ab 68 28 a0 02 00 b7
>1a18c8		08 aa 20 e2 03 c2 20 20 2b 20 ab 2b 28 18 60 ab
>1a18d8		2b 28 38 60 08 c2 20 a9 ff 6f 85 1f a9 ff 7f 85
>1a18e8		21 a9 ff ff 85 23 85 25 85 29 85 2b e2 20 85 27
>1a18f8		85 2d 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>1a1908		28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a a4 1f
>1a1918		bd 00 00 99 00 00 bd 02 00 99 02 00 e2 20 bd 04
>1a1928		00 99 04 00 c2 20 38 98 e9 05 00 85 1f 7a ab 2b
>1a1938		28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08
>1a1948		e2 20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5 1f 69
>1a1958		05 00 85 1f a8 b9 00 00 9d 00 00 b9 02 00 9d 02
>1a1968		00 e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab 2b 28
>1a1978		60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>1a1988		20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 21 99
>1a1998		00 00 88 84 21 7a ab 2b 28 60 08 0b 8b 08 c2 20
>1a19a8		48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>1a19b8		28 e2 20 c2 10 5a a4 21 c8 84 21 b9 00 00 c2 20
>1a19c8		29 ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20 79 19
>1a19d8		28 60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68 28 e2
>1a19e8		20 a4 21 b9 01 00 c9 01 d0 08 c2 20 e6 21 ab 28
>1a19f8		7a 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a1a08		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>1a1a18		08 48 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08
>1a1a28		e2 20 48 a9 00 48 ab 68 28 e2 20 a4 21 c0 ff 7f
>1a1a38		f0 11 20 db 0b 85 0c b9 01 00 20 db 0b c5 0c f0
>1a1a48		02 90 08 c2 20 ab 2b 28 68 18 60 c2 20 ab 2b 28
>1a1a58		68 38 60 4c 56 08 08 e2 20 a9 00 8f 00 4d 00 a2
>1a1a68		01 00 20 1a 1c 20 8b 06 c2 20 a5 23 9f 00 4d 00
>1a1a78		e2 20 af 00 4d 00 1a 30 3e 8f 00 4d 00 e8 e8 20
>1a1a88		4c 20 e2 20 a7 00 c9 90 f0 09 c9 2c d0 0a 20 2b
>1a1a98		20 80 cf 20 2b 20 28 60 08 c2 20 48 a9 00 08 5b
>1a1aa8		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>1a1ab8		6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>1a1ac8		28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 6c
>1a1ad8		1d e2 20 dc d4 08 08 20 88 52 90 23 e2 20 a5 ea
>1a1ae8		29 80 d0 06 20 89 50 4c 05 1b e2 20 a9 8f 20 38
>1a1af8		21 20 d0 19 20 5e 1a 20 3f 67 20 da 19 28 60 08
>1a1b08		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a1b18		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 08 0b
>1a1b28		08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 20 2b
>1a1b38		20 a0 00 00 b7 00 f0 24 c9 22 f0 03 c8 80 f5 84
>1a1b48		0c e2 20 a9 02 a6 0c e8 20 7a 14 a0 00 00 c4 0c
>1a1b58		f0 29 a7 00 97 16 c8 20 2b 20 80 f2 08 c2 20 48
>1a1b68		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>1a1b78		29 ff 00 20 6c 1d e2 20 dc d4 08 a9 00 97 16 c2
>1a1b88		20 a5 16 85 23 a5 18 85 25 a9 02 00 85 27 20 2b
>1a1b98		20 2b 28 60 08 e2 20 a7 00 c2 20 29 ff 00 20 05
>1a1ba8		0c 85 2f 20 d0 19 08 e2 20 48 a9 00 48 ab 68 28
>1a1bb8		20 c0 1b 20 da 19 28 60 20 2b 20 6c 2f 08 48 08
>1a1bc8		0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20 a2
>1a1bd8		19 89 80 00 f0 37 48 20 05 0c 85 2f 68 20 52 0c
>1a1be8		c9 01 00 f0 08 c2 30 a2 29 08 20 3a 19 c2 30 a2
>1a1bf8		23 08 20 3a 19 08 e2 20 48 a9 00 48 ab 68 28 20
>1a1c08		17 1c a2 23 08 20 fc 18 ab 2b 28 68 60 00 ea 6c
>1a1c18		2f 08 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>1a1c28		48 a9 00 48 ab 68 28 c2 10 da e2 20 a7 00 d0 03
>1a1c38		4c dd 1c 30 33 c9 20 d0 03 4c d7 1c c9 3a b0 04
>1a1c48		c9 30 b0 56 c9 26 f0 52 c9 22 d0 03 4c f0 1c c9
>1a1c58		5b b0 07 c9 41 90 03 4c fc 1c c9 7b b0 07 c9 61
>1a1c68		90 03 4c fc 1c 4c dd 1c c9 8f f0 40 c9 90 f0 41
>1a1c78		20 28 0c c9 30 d0 0c 20 9c 1b a2 23 08 20 fc 18
>1a1c88		4c 32 1c c9 00 d0 4e a7 00 a6 21 e0 ff 7f f0 05
>1a1c98		20 19 1a b0 12 20 79 19 80 35 c2 20 20 aa 58 a2
>1a1ca8		23 08 20 fc 18 80 83 20 c6 1b 80 dd 20 79 19 80
>1a1cb8		1e e2 20 a4 21 c0 ff 7f f0 46 a4 21 b9 01 00 c9
>1a1cc8		01 f0 3d c9 8f f0 05 20 c6 1b 80 ee 20 a2 19 20
>1a1cd8		2b 20 4c 32 1c a6 21 e0 ff 7f b0 24 bd 01 00 c9
>1a1ce8		01 f0 1d 20 c6 1b 80 ed 20 26 1b a2 23 08 20 fc
>1a1cf8		18 4c 32 1c 20 de 1a a2 23 08 20 fc 18 4c 32 1c
>1a1d08		a2 23 08 20 3a 19 fa 28 60 08 0b 8b 08 e2 20 48
>1a1d18		a9 00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68 28
>1a1d28		c2 30 a9 fd 5f 85 33 ab 2b 28 60 08 0b 08 c2 20
>1a1d38		48 a9 00 08 5b 68 28 c2 30 92 33 c6 33 c6 33 2b
>1a1d48		28 60 08 c2 30 29 ff 00 20 33 1d 28 60 08 0b 08
>1a1d58		c2 20 48 a9 00 08 5b 68 28 c2 30 e6 33 e6 33 b2
>1a1d68		33 2b 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68
>1a1d78		28 08 e2 20 48 a9 00 48 ab 68 28 c2 20 85 23 a9
>1a1d88		00 00 85 25 e2 20 a9 00 85 27 85 ea a9 1a 85 e9
>1a1d98		c2 20 a9 c6 1d 85 e7 20 eb 51 c2 20 a5 d7 85 23
>1a1da8		a5 d9 85 25 e2 20 a9 00 85 27 85 ea a9 1a 85 e9
>1a1db8		c2 20 a9 ca 1d 85 e7 20 eb 51 28 2b ab 60 45 52
>1a1dc8		52 00 45 52 4c 00 e2 20 c2 10 20 55 03 af d3 08
>1a1dd8		00 0a c2 20 29 ff 00 a8 08 e2 20 48 a9 1a 48 ab
>1a1de8		68 28 be 20 1e 20 e2 03 c2 20 a5 d7 f0 27 a2 50
>1a1df8		1e 20 e2 03 08 e2 20 48 a9 00 48 ab 68 28 c2 20
>1a1e08		af d7 08 00 8f 23 08 00 a9 00 00 8f 25 08 00 20
>1a1e18		e1 44 20 55 03 4c ce 26 54 1e 57 1e 5d 1e 6a 1e
>1a1e28		78 1e 86 1e 99 1e af 1e bf 1e ce 1e db 1e ec 1e
>1a1e38		fb 1e 08 1f 16 1f 25 1f 36 1f 4f 1f 63 1f 77 1f
>1a1e48		8d 1f a1 1f bc 1f d4 1f 20 61 74 00 4f 4b 00 42
>1a1e58		72 65 61 6b 00 53 79 6e 74 61 78 20 65 72 72 6f
>1a1e68		72 00 4f 75 74 20 6f 66 20 6d 65 6d 6f 72 79 00
>1a1e78		54 79 70 65 20 6d 69 73 6d 61 74 63 68 00 56 61
>1a1e88		72 69 61 62 6c 65 20 6e 6f 74 20 66 6f 75 6e 64
>1a1e98		00 4c 69 6e 65 20 6e 75 6d 62 65 72 20 6e 6f 74
>1a1ea8		20 66 6f 75 6e 64 00 53 74 61 63 6b 20 75 6e 64
>1a1eb8		65 72 66 6c 6f 77 00 53 74 61 63 6b 20 6f 76 65
>1a1ec8		72 66 6c 6f 77 00 4f 75 74 20 6f 66 20 72 61 6e
>1a1ed8		67 65 00 49 6c 6c 65 67 61 6c 20 61 72 67 75 6d
>1a1ee8		65 6e 74 00 46 69 6c 65 20 6e 6f 74 20 66 6f 75
>1a1ef8		6e 64 00 4e 6f 74 20 61 20 6e 75 6d 62 65 72 00
>1a1f08		4d 61 74 68 20 6f 76 65 72 66 6c 6f 77 00 4d 61
>1a1f18		74 68 20 75 6e 64 65 72 66 6c 6f 77 00 44 69 76
>1a1f28		69 73 69 6f 6e 20 62 79 20 7a 65 72 6f 00 55 6e
>1a1f38		61 62 6c 65 20 74 6f 20 72 65 61 64 20 64 69 72
>1a1f48		65 63 74 6f 72 79 00 55 6e 61 62 6c 65 20 74 6f
>1a1f58		20 6c 6f 61 64 20 66 69 6c 65 00 55 6e 61 62 6c
>1a1f68		65 20 74 6f 20 73 61 76 65 20 66 69 6c 65 00 55
>1a1f78		6e 61 62 6c 65 20 74 6f 20 64 65 6c 65 74 65 20
>1a1f88		66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74 20 66
>1a1f98		69 6e 64 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e
>1a1fa8		6f 74 20 75 70 64 61 74 65 20 64 69 72 65 63 74
>1a1fb8		6f 72 79 00 43 6f 75 6c 64 20 6e 6f 74 20 63 6f
>1a1fc8		70 79 20 74 68 65 20 66 69 6c 65 00 41 72 67 75
>1a1fd8		6d 65 6e 74 20 6f 75 74 73 69 64 65 20 64 6f 6d
>1a1fe8		61 69 6e 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>1a1ff8		e2 20 a9 00 85 d2 2b 28 60 0b 08 08 c2 20 48 a9
>1a2008		00 08 5b 68 28 08 c2 20 a9 ce 1d 8f d4 08 00 e2
>1a2018		20 a9 1a 8f d6 08 00 28 20 86 43 20 c7 3e 64 31
>1a2028		28 2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a2038		20 18 a5 00 69 01 00 85 00 e2 20 a5 02 69 00 85
>1a2048		02 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>1a2058		e2 20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02 80 05
>1a2068		20 2b 20 80 ed 2b 28 60 08 e2 20 a7 00 f0 09 c9
>1a2078		3a f0 05 20 2b 20 80 f3 28 60 08 e2 20 64 36 a7
>1a2088		00 f0 19 c5 37 f0 2c c9 9b f0 1e c9 9f f0 1a c9
>1a2098		9e f0 1a c9 a0 f0 16 20 2b 20 80 e3 20 08 21 c2
>1a20a8		20 a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea c6 36 30
>1a20b8		30 80 e4 a5 35 30 06 a5 36 f0 02 80 da 20 2b 20
>1a20c8		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a20d8		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>1a20e8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a20f8		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>1a2108		08 c2 30 a0 00 00 b7 1a 85 0c 18 a5 1a 65 0c 85
>1a2118		1a a5 1c 69 00 00 85 1c a0 02 00 b7 1a 85 d7 18
>1a2128		a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02 28 60
>1a2138		08 e2 20 48 20 4c 20 68 e2 20 c7 00 d0 08 20 2b
>1a2148		20 20 4c 20 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a2158		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>1a2168		e2 20 dc d4 08 08 e2 20 20 4c 20 e2 20 a7 00 f0
>1a2178		10 c9 3a f0 0c c5 37 f0 05 20 2b 20 80 ef 28 38
>1a2188		60 28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0 0d c9
>1a2198		3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a 60 08
>1a21a8		0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20 dc 18 e2
>1a21b8		20 a9 00 85 dc 22 3c 11 00 b0 4b a7 00 c9 3a d0
>1a21c8		03 20 2b 20 20 4c 20 a7 00 d0 03 4c 58 22 20 60
>1a21d8		04 b0 52 a7 00 10 10 20 28 0c 85 0c c9 20 d0 03
>1a21e8		4c 46 22 a5 d2 f0 51 08 c2 20 48 a9 00 08 5b 68
>1a21f8		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 6c
>1a2208		1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>1a2218		e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>1a2228		e2 20 dc d4 08 20 90 43 4c 58 22 08 e2 20 48 a9
>1a2238		00 48 ab 68 28 6c 2f 08 a5 0c c9 10 d0 a9 a7 00
>1a2248		20 05 0c c2 20 85 2f 20 dc 18 20 2b 20 20 33 22
>1a2258		ab 2b 28 60 08 58 20 ec 1f 20 11 1d e2 20 9c 8a
>1a2268		0f c2 20 a5 1a 85 00 a5 1c 85 02 4c 9d 22 08 c2
>1a2278		20 a0 02 00 b7 1a 85 d7 20 71 14 e2 20 a5 dc c9
>1a2288		03 f0 12 c2 20 18 a5 1a 69 04 00 85 00 e2 20 a5
>1a2298		1c 69 00 85 02 c2 20 20 a7 21 e2 20 a5 dc c9 03
>1a22a8		f0 f3 c9 00 d0 31 e2 20 20 4c 20 a7 00 f0 28 c9
>1a22b8		3a f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a22c8		02 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc
>1a22d8		d4 08 20 2b 20 80 be 28 60 08 58 e2 20 a9 80 85
>1a22e8		d2 9c 8a 0f 20 11 1d c2 30 64 31 a0 02 00 b7 1a
>1a22f8		f0 29 20 76 22 e2 20 a5 dc c9 01 f0 1e c9 02 f0
>1a2308		ea c9 03 f0 e6 c2 20 a0 00 00 18 a5 1a 77 1a 85
>1a2318		1a e2 20 a5 1c 69 00 85 1c 80 d0 e2 20 a9 00 85
>1a2328		d2 28 60 08 c2 30 c2 20 a9 00 00 85 08 a9 16 00
>1a2338		85 0a c2 20 a0 02 00 b7 08 f0 31 c5 23 f0 1e b0
>1a2348		2b c2 20 a0 00 00 18 a5 08 77 08 85 0c e2 20 a5
>1a2358		0a 69 00 85 0a c2 20 a5 0c 85 08 80 d7 c2 20 a5
>1a2368		08 85 1a e2 20 a5 0a 85 1c 28 38 60 28 18 60 08
>1a2378		e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 08 e2 20
>1a2388		a5 0e c5 02 f0 26 c2 20 18 a5 0c 69 01 00 85 0c
>1a2398		e2 20 a5 0e 69 00 85 0e c2 20 18 a5 08 69 01 00
>1a23a8		85 08 e2 20 a5 0a 69 00 85 0a 80 c4 28 60 08 e2
>1a23b8		20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 06 a5 0e c5
>1a23c8		02 f0 26 c2 20 38 a5 0c e9 01 00 85 0c e2 20 a5
>1a23d8		0e e9 00 85 0e c2 20 38 a5 08 e9 01 00 85 08 e2
>1a23e8		20 a5 0a e9 00 85 0a 80 c6 28 60 08 a0 00 00 c2
>1a23f8		20 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00 85 0e
>1a2408		c2 20 18 a5 d9 69 04 00 85 00 e2 20 a5 db 69 00
>1a2418		85 02 a0 00 00 c2 20 38 a5 d9 f7 08 85 d9 e2 20
>1a2428		a5 db e9 00 85 db 20 77 23 20 86 43 28 60 08 08
>1a2438		c2 20 48 a9 00 08 5b 68 28 c2 30 a0 02 00 97 d9
>1a2448		18 a5 d9 69 04 00 85 08 e2 20 a5 db 69 00 85 0a
>1a2458		e2 20 a0 00 00 b7 1a 97 08 f0 03 c8 80 f7 c2 20
>1a2468		98 18 69 05 00 85 0c c2 20 a0 00 00 a5 0c 97 d9
>1a2478		c2 20 18 a5 d9 65 0c 85 0c e2 20 a5 db 69 00 85
>1a2488		db c2 20 a5 0c 85 d9 c2 20 a0 00 00 a9 00 00 97
>1a2498		d9 c8 c0 05 00 d0 f8 20 86 43 28 60 0b 08 08 c2
>1a24a8		20 48 a9 00 08 5b 68 28 c2 30 a9 00 00 85 08 a9
>1a24b8		16 00 85 0a a0 02 00 b7 08 f0 1d c5 d7 f0 25 b0
>1a24c8		1d a0 00 00 18 a5 08 77 08 85 0c a5 0a 69 00 00
>1a24d8		85 0a a5 0c 85 08 80 dc a9 00 00 28 2b 60 a9 01
>1a24e8		00 28 2b 60 a9 02 00 28 2b 60 08 c2 30 a9 05 00
>1a24f8		85 10 a0 00 00 e2 20 b7 1a f0 07 c2 20 e6 10 c8
>1a2508		80 f3 c2 20 a5 08 85 00 a5 0a 85 02 18 a5 d9 69
>1a2518		04 00 85 0c a5 db 69 00 00 85 0e 18 a5 d9 65 10
>1a2528		85 d9 a5 db 69 00 00 85 db 18 a5 d9 69 04 00 85
>1a2538		08 a5 db 69 00 00 85 0a 20 b6 23 c2 20 a5 10 a0
>1a2548		00 00 97 00 a5 d7 a0 02 00 97 00 18 a5 00 69 04
>1a2558		00 85 00 a5 02 69 00 00 85 02 a0 00 00 e2 20 b7
>1a2568		1a 97 00 f0 03 c8 80 f7 20 86 43 28 60 08 c2 30
>1a2578		85 d7 20 a4 24 c9 00 00 f0 2c c9 01 00 f0 22 c2
>1a2588		20 a5 08 48 a5 0a 48 20 f3 23 68 85 0a 68 85 08
>1a2598		a5 1a 85 00 a5 1c 85 02 20 4c 20 e2 20 a7 00 f0
>1a25a8		0a 20 f2 24 80 05 a5 d7 20 36 24 28 60 0b 08 08
>1a25b8		c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a2 00 00
>1a25c8		bd 00 4f f0 03 e8 80 f8 86 0c c2 30 8a c9 02 00
>1a25d8		90 12 3a 18 69 00 4f aa 18 65 8f a8 a5 0c 3a 8b
>1a25e8		44 00 00 ab c2 20 a6 55 a0 00 4f a5 8f 8b 54 00
>1a25f8		1a ab e2 20 a5 0c c9 02 90 18 a6 8f a9 22 9d 00
>1a2608		4f e8 bd 00 4f d0 fa a9 22 9d 00 4f a9 00 e8 9d
>1a2618		00 4f 28 2b 60 da 5a 8b 0b 08 08 c2 20 48 a9 00
>1a2628		08 5b 68 28 e2 20 c2 10 ad 00 4f c9 23 f0 0a c9
>1a2638		7c f0 17 28 2b ab 7a fa 60 c2 20 a9 03 00 85 8f
>1a2648		a9 63 26 85 55 20 b5 25 80 e9 c2 20 a9 04 00 85
>1a2658		8f a9 67 26 85 55 20 b5 25 80 d8 44 49 52 00 42
>1a2668		52 55 4e 00 8b 08 20 aa 01 08 e2 20 48 a9 1a 48
>1a2678		ab 68 28 a2 69 d2 20 e2 03 28 ab 60 08 e2 30 a9
>1a2688		01 20 1c 00 20 d1 00 c9 00 f0 f9 c9 0d f0 02 80
>1a2698		f3 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a26a8		30 64 d7 a9 00 4f 85 1a a9 00 00 85 1c 20 1a 09
>1a26b8		c2 20 a5 d7 d0 05 20 5c 22 80 07 20 75 25 28 2b
>1a26c8		38 60 28 2b 18 60 c2 30 a2 ff fe 9a 20 6c 26 20
>1a26d8		08 00 20 0c 00 22 3c 11 00 a9 00 00 20 1c 00 20
>1a26e8		1d 26 20 9b 26 b0 e8 80 e3 08 e2 20 20 21 08 c9
>1a26f8		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>1a2708		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a2718		ff 00 20 6c 1d e2 20 dc d4 08 20 ca 15 80 08 20
>1a2728		da 52 80 03 20 49 55 28 60 08 e2 20 20 d3 07 c9
>1a2738		00 f0 23 c9 01 f0 24 08 c2 20 48 a9 00 08 5b 68
>1a2748		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c
>1a2758		1d e2 20 dc d4 08 20 ec 52 80 03 20 3e 55 28 60
>1a2768		08 e2 20 20 d3 07 c9 00 f0 23 c9 01 f0 24 08 c2
>1a2778		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a2788		c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 20 fe 52
>1a2798		80 03 20 df 55 28 60 20 3d 07 20 6e 07 20 94 55
>1a27a8		60 a5 23 8f 1a 01 00 a5 29 8f 18 01 00 af 1e 01
>1a27b8		00 85 23 60 08 c2 30 48 20 3d 07 a5 2d c9 00 00
>1a27c8		d0 0d a5 2b d0 09 da a6 29 20 b2 62 fa 80 1c 20
>1a27d8		6e 07 c2 20 a5 2b 48 a5 29 48 20 3d 61 c2 20 68
>1a27e8		85 29 68 85 2b 20 df 55 20 1c 63 68 28 60 08 20
>1a27f8		cf 05 20 00 06 c2 20 a5 23 25 29 85 23 a5 25 25
>1a2808		2b 85 25 28 60 08 20 cf 05 20 00 06 c2 20 a5 23
>1a2818		05 29 85 23 a5 25 05 2b 85 25 28 60 08 20 cf 05
>1a2828		c2 20 a5 23 49 ff ff 85 23 a5 25 49 ff ff 85 25
>1a2838		28 60 08 e2 20 20 21 08 c9 00 f0 2c c9 01 f0 2d
>1a2848		c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a2858		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>1a2868		dc d4 08 20 52 17 80 08 20 ff 53 80 03 20 74 5b
>1a2878		28 60 08 e2 20 20 21 08 c9 00 f0 2c c9 01 f0 2d
>1a2888		c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a2898		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>1a28a8		dc d4 08 20 69 17 80 08 20 20 54 80 03 20 89 5b
>1a28b8		28 60 08 e2 20 20 21 08 c9 00 f0 2c c9 01 f0 2d
>1a28c8		c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a28d8		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>1a28e8		dc d4 08 20 80 17 80 08 20 4d 54 80 03 20 9e 5b
>1a28f8		28 60 08 e2 20 20 21 08 c9 00 f0 2c c9 01 f0 2d
>1a2908		c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a2918		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>1a2928		dc d4 08 20 97 17 80 08 20 6b 54 80 03 20 dd 5b
>1a2938		28 60 08 e2 20 20 21 08 c9 00 f0 2c c9 01 f0 2d
>1a2948		c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a2958		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>1a2968		dc d4 08 20 ae 17 80 08 20 89 54 80 03 20 c8 5b
>1a2978		28 60 08 e2 20 20 21 08 c9 00 f0 2c c9 01 f0 2d
>1a2988		c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a2998		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>1a29a8		dc d4 08 20 c5 17 80 08 20 b6 54 80 03 20 b3 5b
>1a29b8		28 60 08 e2 20 a5 27 c9 00 f0 2d c9 01 f0 1f 08
>1a29c8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a29d8		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 e2 20
>1a29e8		a5 26 49 80 85 26 80 16 c2 20 a5 23 49 ff ff 85
>1a29f8		23 a5 25 49 ff ff 85 25 e6 23 d0 02 e6 25 28 60
>1a2a08		08 e2 20 20 1a 1c 20 e1 06 20 2c 05 a5 23 0a 0a
>1a2a18		0a 0a 05 29 48 a9 2c 20 38 21 20 1a 1c 20 e1 06
>1a2a28		20 2c 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 38
>1a2a38		21 20 1a 1c 20 e1 06 20 2c 05 a5 23 0a 0a 0a 0a
>1a2a48		05 29 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 00
>1a2a58		08 af 68 8f 02 08 af 68 8f 04 08 af af 0e 08 af
>1a2a68		29 f7 8f 0e 08 af 20 70 20 28 60 08 e2 20 20 1a
>1a2a78		1c 20 e1 06 20 2c 05 a5 23 0a 0a 0a 0a 05 29 48
>1a2a88		a9 2c 20 38 21 20 1a 1c 20 e1 06 20 2c 05 a5 23
>1a2a98		0a 0a 0a 0a 05 29 48 a9 2c 20 38 21 20 1a 1c 20
>1a2aa8		cf 05 20 62 05 c2 20 a5 23 85 92 a5 29 85 23 20
>1a2ab8		2c 05 e2 20 a5 23 0a 0a 0a 0a 05 29 48 c2 20 a5
>1a2ac8		92 85 23 20 2c 05 e2 20 a5 23 0a 0a 0a 0a 05 29
>1a2ad8		48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 0f 08 af
>1a2ae8		68 8f 0a 08 af 68 8f 09 08 af 68 8f 06 08 af af
>1a2af8		0e 08 af 29 f7 8f 0e 08 af 20 70 20 28 60 08 e2
>1a2b08		20 48 20 1a 1c 20 e1 06 e2 20 a5 23 29 0f 0a 0a
>1a2b18		0a 0a 83 01 a9 2c 20 38 21 20 1a 1c 20 e1 06 a5
>1a2b28		23 29 0f 03 01 8f 1e 00 00 e2 20 68 28 60 08 c2
>1a2b38		20 f4 00 00 e2 20 20 1a 1c 20 e1 06 a5 23 83 01
>1a2b48		a9 2c 20 38 21 20 1a 1c 20 e1 06 a5 23 83 02 a9
>1a2b58		2c 20 38 21 20 1a 1c 20 e1 06 a5 23 8f 0d 00 af
>1a2b68		a3 02 8f 0e 00 af a3 01 8f 0f 00 af c2 20 68 28
>1a2b78		60 08 c2 20 f4 00 00 e2 20 20 1a 1c 20 cf 05 a5
>1a2b88		23 f0 16 a9 01 8f 04 00 af a9 20 8f 08 00 af 8f
>1a2b98		09 00 af 22 2c 11 00 80 0a a9 00 8f 04 00 af 22
>1a2ba8		2c 11 00 a9 2c 85 37 20 6d 21 90 39 20 2b 20 20
>1a2bb8		1a 1c 20 e1 06 a5 23 83 01 a9 2c 20 38 21 20 1a
>1a2bc8		1c 20 e1 06 a5 23 83 02 a9 2c 20 38 21 20 1a 1c
>1a2bd8		20 e1 06 a5 23 8f 05 00 af a3 02 8f 06 00 af a3
>1a2be8		01 8f 07 00 af c2 20 68 28 60 08 c2 20 3b 38 e9
>1a2bf8		05 00 1b e2 20 20 1a 1c 20 e1 06 a5 23 c9 0a 90
>1a2c08		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f
>1a2c18		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>1a2c28		83 01 a9 2c 20 38 21 20 1a 1c 20 e1 06 a5 23 83
>1a2c38		02 a9 2c 20 38 21 20 1a 1c 20 e1 06 a5 23 83 03
>1a2c48		a9 2c 20 38 21 20 1a 1c 20 e1 06 a5 23 83 04 a9
>1a2c58		2c 20 38 21 20 1a 1c 20 e1 06 a5 23 83 05 a9 af
>1a2c68		85 a0 a3 01 0a c2 20 29 ff 00 aa bf aa 2c 1a 85
>1a2c78		9e e2 20 a3 02 c2 20 29 ff 00 0a 0a 18 65 9e 85
>1a2c88		9e e2 20 a0 02 00 a3 03 97 9e a0 01 00 a3 04 97
>1a2c98		9e a0 00 00 a3 05 97 9e c2 20 3b 18 69 05 00 1b
>1a2ca8		28 60 00 20 00 24 00 28 00 2c 00 30 00 34 00 38
>1a2cb8		00 3c 40 1f 80 1f da 5a 08 20 1a 1c 20 cf 05 c2
>1a2cc8		20 a5 23 89 00 01 d0 17 af 00 00 af 89 00 01 f0
>1a2cd8		0e e2 20 a9 00 8f 01 00 af a9 01 8f 01 00 af c2
>1a2ce8		20 a5 23 8f 00 00 af e2 20 a5 24 c2 20 29 03 00
>1a2cf8		0a aa c2 20 bf 45 2d 1a 8f 10 f0 1a bf 4d 2d 1a
>1a2d08		8f 12 f0 1a af 10 f0 1a 8f 08 01 00 af 12 f0 1a
>1a2d18		8f 0a 01 00 af 0c 01 00 8f 14 f0 1a e2 20 af 0e
>1a2d28		01 00 8f 16 f0 1a 22 2c 11 00 c2 20 af 1a 00 00
>1a2d38		aa af 1c 00 00 a8 20 20 00 28 7a fa 60 80 02 20
>1a2d48		03 40 01 90 01 e0 01 58 02 f0 00 2c 01 50 00 64
>1a2d58		00 28 00 32 00 3c 00 4b 00 1e 00 32 00 48 00 5c
>1a2d68		00 20 00 2a 00 34 00 43 00 16 00 34 00 da 08 c2
>1a2d78		30 c9 02 00 b0 1c 0a 0a aa bf 00 f0 1a 85 9e bf
>1a2d88		02 f0 1a 85 a0 c9 f0 00 b0 08 c9 b0 00 90 03 28
>1a2d98		fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>1a2da8		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>1a2db8		08 da 08 c2 30 c9 02 00 b0 17 0a 0a aa bf 08 f0
>1a2dc8		1a 85 9e bf 0a f0 1a 85 a0 c9 40 00 b0 03 28 fa
>1a2dd8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a2de8		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>1a2df8		08 c2 30 3b 38 e9 07 00 1b 20 1a 1c 20 e1 06 c2
>1a2e08		20 a5 23 c9 02 00 b0 59 83 01 e2 20 a9 2c 20 38
>1a2e18		21 20 1a 1c 20 e1 06 a5 23 83 03 a9 2c 20 38 21
>1a2e28		20 1a 1c 20 e1 06 a3 01 0a 0a 0a aa a3 03 d0 05
>1a2e38		a5 23 0a 80 04 a5 23 38 2a 9f 00 01 af c2 20 a9
>1a2e48		2c 00 85 37 20 6d 21 b0 37 c2 20 08 c2 20 a9 00
>1a2e58		00 85 23 a9 b0 00 85 25 e2 20 a9 00 85 27 28 80
>1a2e68		27 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a2e78		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>1a2e88		c2 20 20 2b 20 20 1a 1c c2 20 a3 01 0a 0a aa a5
>1a2e98		23 9f 00 f0 1a 9f 08 f0 1a 83 04 a5 25 9f 02 f0
>1a2ea8		1a 38 e9 b0 00 9f 0a f0 1a 83 06 a3 01 0a 0a 0a
>1a2eb8		aa e2 20 a3 04 9f 01 01 af a3 05 9f 02 01 af a3
>1a2ec8		06 9f 03 01 af a9 00 9f 04 01 af 9f 05 01 af c2
>1a2ed8		30 3b 18 69 07 00 1b 28 60 08 c2 20 48 a9 00 08
>1a2ee8		5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00
>1a2ef8		20 6c 1d e2 20 dc d4 08 08 c2 20 20 1a 1c 20 e1
>1a2f08		06 a5 23 20 b9 2d c2 20 a5 9e 8f 05 04 af af 14
>1a2f18		f0 1a 8f 08 04 af e2 20 a5 a0 8f 07 04 af af 16
>1a2f28		f0 1a 8f 0a 04 af a9 00 8f 01 04 af a9 85 8f 00
>1a2f38		04 af af 01 04 af 30 fa a9 00 8f 00 04 af 28 60
>1a2f48		08 c2 20 a5 5d 8f 08 01 00 af 10 f0 1a 8f 0a 01
>1a2f58		00 18 af 0c 01 00 65 59 85 0c af 0e 01 00 69 00
>1a2f68		00 85 0e 18 a5 0c 65 9e 85 0c a5 0e 65 a0 85 0e
>1a2f78		e2 20 a5 55 87 0c 28 60 c2 20 a9 01 00 85 dd 38
>1a2f88		a5 61 e5 59 85 69 10 0b 49 ff ff 1a 85 69 a9 ff
>1a2f98		ff 85 dd a9 01 00 85 df 38 a5 65 e5 5d 85 6d 10
>1a2fa8		0b 49 ff ff 1a 85 6d a9 ff ff 85 df a5 6d c5 69
>1a2fb8		b0 04 a5 69 80 06 a5 6d 49 ff ff 1a 48 0a 68 6a
>1a2fc8		85 71 20 48 2f a5 59 c5 61 d0 06 a5 5d c5 65 f0
>1a2fd8		36 a5 71 85 75 a5 69 49 ff ff 1a c5 75 10 10 f0
>1a2fe8		0e 38 a5 71 e5 6d 85 71 18 a5 59 65 dd 85 59 a5
>1a2ff8		75 c5 6d 10 cd f0 cb 18 a5 71 65 69 85 71 18 a5
>1a3008		5d 65 df 85 5d 80 bb 60 08 c2 20 3b 38 e9 06 00
>1a3018		1b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>1a3028		00 48 ab 68 28 c2 30 20 1a 1c 20 e1 06 83 01 a9
>1a3038		2c 00 20 38 21 20 1a 1c 20 cf 05 a5 23 83 03 a9
>1a3048		2c 00 20 38 21 20 1a 1c 20 cf 05 a5 23 83 05 a9
>1a3058		2c 00 20 38 21 20 1a 1c 20 e1 06 a5 23 85 55 a3
>1a3068		03 85 59 a3 05 85 5d a3 01 20 75 2d 20 48 2f c2
>1a3078		20 3b 18 69 06 00 1b 28 60 08 c2 20 3b 38 e9 0a
>1a3088		00 1b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>1a3098		a9 00 48 ab 68 28 c2 30 20 1a 1c 20 e1 06 83 01
>1a30a8		a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a5 23 83 03
>1a30b8		a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a5 23 83 05
>1a30c8		a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a5 23 83 07
>1a30d8		a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a5 23 83 09
>1a30e8		a9 2c 00 20 38 21 20 1a 1c 20 e1 06 a5 23 85 55
>1a30f8		a3 03 85 59 a3 05 85 5d a3 07 85 61 a3 09 85 65
>1a3108		a3 01 20 75 2d 20 80 2f c2 20 3b 18 69 0a 00 1b
>1a3118		28 60 08 c2 20 3b 38 e9 0c 00 1b 08 c2 20 48 a9
>1a3128		00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2
>1a3138		30 20 1a 1c 20 e1 06 83 01 a9 2c 00 20 38 21 20
>1a3148		1a 1c 20 cf 05 a5 23 83 03 a9 2c 00 20 38 21 20
>1a3158		1a 1c 20 cf 05 a5 23 83 05 a9 2c 00 20 38 21 20
>1a3168		1a 1c 20 cf 05 a5 23 83 07 a9 2c 00 20 38 21 20
>1a3178		1a 1c 20 cf 05 a5 23 83 09 a9 2c 00 20 38 21 20
>1a3188		1a 1c 20 e1 06 a5 23 83 0b a3 01 20 b9 2d a9 07
>1a3198		00 8f 00 04 af c2 20 a3 05 8f 00 01 00 af 10 f0
>1a31a8		1a 8f 02 01 00 18 af 04 01 00 63 03 85 0c e2 20
>1a31b8		af 06 01 00 69 00 85 0e c2 20 18 a5 9e 65 0c 8f
>1a31c8		05 04 af e2 20 a5 a0 65 0e 8f 07 04 af c2 20 38
>1a31d8		a3 07 e3 03 85 0c 8f 08 04 af 38 af 10 f0 1a 8f
>1a31e8		0e 04 af 38 a3 09 e3 05 8f 0a 04 af e2 20 a3 0b
>1a31f8		8f 01 04 af af 00 04 af 09 80 8f 00 04 af af 01
>1a3208		04 af 30 fa a9 00 8f 00 04 af c2 20 3b 18 69 0c
>1a3218		00 1b 28 60 08 c2 20 c9 40 00 b0 13 0a 0a 0a 18
>1a3228		69 00 0c 85 9e a9 af 00 69 00 00 85 a0 28 60 08
>1a3238		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08
>1a3248		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 08 c2
>1a3258		20 3b 38 e9 03 00 1b c2 30 20 1a 1c 20 e1 06 a5
>1a3268		23 83 01 a9 2c 00 20 38 21 e2 20 20 1a 1c 20 e1
>1a3278		06 a5 23 c9 08 b0 56 83 03 a9 2c 20 38 21 20 1a
>1a3288		1c 20 cf 05 c2 20 38 a5 23 e9 00 00 85 23 a5 25
>1a3298		e9 b0 00 85 25 30 36 c2 20 a3 01 aa 20 1c 32 a5
>1a32a8		23 a0 01 00 97 9e e2 20 a5 25 c8 c8 97 9e bf 18
>1a32b8		f0 1a 29 f1 85 0c a3 03 0a 29 0e 05 0c 87 9e 9f
>1a32c8		18 f0 1a c2 20 3b 18 69 03 00 1b 28 60 08 c2 20
>1a32d8		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>1a32e8		20 29 ff 00 20 6c 1d e2 20 dc d4 08 08 c2 20 3b
>1a32f8		38 e9 04 00 1b c2 30 20 1a 1c 20 e1 06 a5 23 83
>1a3308		01 a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a5 23 83
>1a3318		03 a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a3 01 20
>1a3328		1c 32 a3 03 a0 04 00 97 9e a5 23 a0 06 00 97 9e
>1a3338		c2 20 3b 18 69 04 00 1b 28 60 08 c2 20 3b 38 e9
>1a3348		03 00 1b c2 30 20 1a 1c 20 e1 06 a5 23 83 01 a9
>1a3358		2c 00 20 38 21 e2 20 20 1a 1c 20 cf 05 a5 23 d0
>1a3368		04 83 03 80 04 a9 01 83 03 a9 2c 85 37 20 6d 21
>1a3378		b0 20 c2 30 a3 01 aa 20 1c 32 e2 20 bf 18 f0 1a
>1a3388		29 fe 85 0c a3 03 29 01 05 0c 9f 18 f0 1a 87 9e
>1a3398		80 36 c2 30 20 2b 20 20 1a 1c 20 e1 06 a5 23 c9
>1a33a8		08 00 b0 2e 0a 0a 0a 0a 85 0c a3 01 aa 20 1c 32
>1a33b8		e2 20 a3 03 29 01 05 0c 85 0c bf 18 f0 1a 29 8e
>1a33c8		05 0c 87 9e 9f 18 f0 1a c2 20 3b 18 69 03 00 1b
>1a33d8		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>1a33e8		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>1a33f8		08 08 c2 20 c9 04 00 b0 19 8d 00 01 a9 04 00 8d
>1a3408		02 01 18 ad 04 01 69 80 02 85 9e a9 af 00 85 a0
>1a3418		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>1a3428		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>1a3438		08 08 c2 20 c9 04 00 b0 19 8d 00 01 a9 0c 00 8d
>1a3448		02 01 18 ad 04 01 69 00 02 85 9e a9 af 00 85 a0
>1a3458		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>1a3468		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>1a3478		08 08 c2 20 3b 38 e9 06 00 1b c2 20 20 1a 1c 20
>1a3488		e1 06 a5 23 83 01 a9 2c 00 20 38 21 20 1a 1c 20
>1a3498		e1 06 a5 23 83 03 a9 2c 00 20 38 21 20 1a 1c 20
>1a34a8		e1 06 a5 23 83 05 a9 2c 00 20 38 21 20 1a 1c 20
>1a34b8		cf 05 a3 01 20 f9 33 a5 23 87 9e e2 20 38 a5 25
>1a34c8		e9 b0 a0 02 00 97 9e a3 05 d0 0d e2 20 a3 03 29
>1a34d8		07 a0 03 00 97 9e 80 0d e2 20 a3 03 29 07 09 08
>1a34e8		a0 03 00 97 9e c2 20 3b 18 69 06 00 1b 28 60 08
>1a34f8		c2 20 3b 38 e9 06 00 1b c2 20 20 1a 1c 20 e1 06
>1a3508		a5 23 83 01 a9 2c 00 20 38 21 20 1a 1c 20 cf 05
>1a3518		a5 23 83 03 a9 2c 00 20 38 21 20 1a 1c 20 cf 05
>1a3528		a5 23 83 05 a9 2c 00 20 38 21 20 1a 1c 20 cf 05
>1a3538		a3 01 20 39 34 a5 23 a0 01 00 97 9e e2 20 38 a5
>1a3548		25 e9 b0 c8 c8 97 9e c2 20 a3 03 a0 04 00 97 9e
>1a3558		a3 05 a0 06 00 97 9e c2 20 3b 18 69 06 00 1b 28
>1a3568		60 08 c2 20 f4 00 00 c2 20 20 1a 1c 20 e1 06 a5
>1a3578		23 83 01 a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a3
>1a3588		01 20 39 34 a5 23 d0 06 e2 20 a9 00 80 04 e2 20
>1a3598		a9 01 e2 20 a0 00 00 97 9e c2 20 68 28 60 08 c2
>1a35a8		20 3b 38 e9 04 00 1b c2 20 20 1a 1c 20 e1 06 a5
>1a35b8		23 83 01 a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a5
>1a35c8		23 83 03 a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a3
>1a35d8		01 20 39 34 a5 23 a0 0a 00 97 9e a3 03 a0 08 00
>1a35e8		97 9e c2 20 3b 18 69 04 00 1b 28 60 0b 08 08 c2
>1a35f8		20 48 a9 00 08 5b 68 28 e2 20 a9 00 8f 58 f0 1a
>1a3608		af 5c f0 1a c9 b0 b0 1c 8f 24 04 af af 5b f0 1a
>1a3618		8f 23 04 af af 5a f0 1a 8f 22 04 af a9 10 8f 58
>1a3628		f0 1a 80 17 38 e9 b0 8f 04 04 af af 5b f0 1a 8f
>1a3638		03 04 af af 5a f0 1a 8f 02 04 af af 59 f0 1a d0
>1a3648		3c af 58 f0 1a f0 1b af 5d f0 1a 8f 28 04 af af
>1a3658		5e f0 1a 8f 29 04 af af 5f f0 1a 8f 2a 04 af 82
>1a3668		8b 00 af 5d f0 1a 8f 08 04 af af 5e f0 1a 8f 09
>1a3678		04 af af 5f f0 1a 8f 0a 04 af 82 70 00 af 58 f0
>1a3688		1a 09 01 8f 58 f0 1a 89 10 f0 32 af 60 f0 1a 8f
>1a3698		28 04 af af 61 f0 1a 8f 29 04 af af 62 f0 1a 8f
>1a36a8		2a 04 af af 63 f0 1a 8f 2b 04 af af 64 f0 1a 8f
>1a36b8		2c 04 af af 65 f0 1a 8f 2d 04 af 80 30 af 60 f0
>1a36c8		1a 8f 08 04 af af 61 f0 1a 8f 09 04 af af 62 f0
>1a36d8		1a 8f 0a 04 af af 63 f0 1a 8f 0b 04 af af 64 f0
>1a36e8		1a 8f 0c 04 af af 65 f0 1a 8f 0d 04 af e2 20 af
>1a36f8		69 f0 1a c9 b0 b0 20 8f 27 04 af af 68 f0 1a 8f
>1a3708		26 04 af af 67 f0 1a 8f 25 04 af af 58 f0 1a 09
>1a3718		20 8f 58 f0 1a 80 17 38 e9 b0 8f 07 04 af af 68
>1a3728		f0 1a 8f 06 04 af af 67 f0 1a 8f 05 04 af af 66
>1a3738		f0 1a d0 3e af 58 f0 1a 89 20 f0 1b af 6a f0 1a
>1a3748		8f 28 04 af af 6b f0 1a 8f 29 04 af af 6c f0 1a
>1a3758		8f 2a 04 af 82 8b 00 af 6a f0 1a 8f 08 04 af af
>1a3768		6b f0 1a 8f 09 04 af af 6c f0 1a 8f 0a 04 af 82
>1a3778		70 00 af 58 f0 1a 09 02 8f 58 f0 1a 89 20 f0 32
>1a3788		af 6d f0 1a 8f 28 04 af af 6e f0 1a 8f 29 04 af
>1a3798		af 6f f0 1a 8f 2a 04 af af 70 f0 1a 8f 2b 04 af
>1a37a8		af 71 f0 1a 8f 2e 04 af af 72 f0 1a 8f 2f 04 af
>1a37b8		80 30 af 6d f0 1a 8f 08 04 af af 6e f0 1a 8f 09
>1a37c8		04 af af 6f f0 1a 8f 0a 04 af af 70 f0 1a 8f 0b
>1a37d8		04 af af 71 f0 1a 8f 0e 04 af af 72 f0 1a 8f 0f
>1a37e8		04 af af 58 f0 1a 29 30 f0 43 c9 10 f0 76 c9 20
>1a37f8		d0 03 82 8a 00 af 58 f0 1a 29 03 f0 23 c9 03 f0
>1a3808		23 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f
>1a3818		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>1a3828		a9 01 80 02 a9 03 8f 20 04 af 82 7d 00 af 58 f0
>1a3838		1a 29 03 f0 23 c9 03 f0 23 08 c2 20 48 a9 00 08
>1a3848		5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00
>1a3858		20 6c 1d e2 20 dc d4 08 a9 01 80 02 a9 03 8f 00
>1a3868		04 af 80 34 af 58 f0 1a 29 01 0a 09 11 8f 20 04
>1a3878		af af 58 f0 1a 29 02 09 11 8f 00 04 af 80 19 af
>1a3888		58 f0 1a 29 02 09 21 8f 20 04 af af 58 f0 1a 29
>1a3898		01 0a 09 21 8f 00 04 af af 00 04 af 09 80 8f 00
>1a38a8		04 af af 58 f0 1a 29 30 f0 0f af 20 04 af 09 80
>1a38b8		8f 20 04 af ea ea ea ea ea af 01 04 af 89 80 d0
>1a38c8		f8 a9 00 8f 20 04 af 8f 00 04 af 28 2b 60 0b 08
>1a38d8		e2 20 c2 10 a9 00 a2 00 00 8f 59 f0 1a e8 e0 1a
>1a38e8		00 d0 f6 20 8c 21 c9 e6 f0 23 c9 e7 f0 5e 08 c2
>1a38f8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a3908		c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 20 38 21
>1a3918		20 1a 1c 20 cf 05 c2 20 a5 23 8f 5a f0 1a e2 20
>1a3928		a5 25 8f 5c f0 1a a9 2c 20 38 21 20 1a 1c 20 cf
>1a3938		05 c2 20 a5 23 8f 5d f0 1a e2 20 a5 25 8f 5f f0
>1a3948		1a e2 20 a9 00 8f 59 f0 1a 82 74 00 20 38 21 20
>1a3958		1a 1c 20 cf 05 c2 20 a5 23 8f 5a f0 1a e2 20 a5
>1a3968		25 8f 5c f0 1a a9 2c 20 38 21 20 1a 1c 20 8b 06
>1a3978		c2 20 a5 23 8f 60 f0 1a 8d 00 01 a9 2c 00 20 38
>1a3988		21 20 1a 1c 20 8b 06 c2 20 a5 23 8f 62 f0 1a 8d
>1a3998		02 01 a9 2c 00 20 38 21 20 1a 1c 20 8b 06 c2 20
>1a39a8		a5 23 8f 64 f0 1a c2 20 ad 04 01 8f 5d f0 1a e2
>1a39b8		20 ad 06 01 8f 5f f0 1a e2 20 a9 01 8f 59 f0 1a
>1a39c8		e2 20 a9 9c 20 38 21 20 8c 21 c9 e6 f0 23 c9 e7
>1a39d8		f0 5e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a39e8		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>1a39f8		08 20 38 21 20 1a 1c 20 cf 05 c2 20 a5 23 8f 67
>1a3a08		f0 1a e2 20 a5 25 8f 69 f0 1a a9 2c 20 38 21 20
>1a3a18		1a 1c 20 cf 05 c2 20 a5 23 8f 6a f0 1a e2 20 a5
>1a3a28		25 8f 6c f0 1a e2 20 a9 00 8f 66 f0 1a 82 74 00
>1a3a38		20 38 21 20 1a 1c 20 cf 05 c2 20 a5 23 8f 67 f0
>1a3a48		1a e2 20 a5 25 8f 69 f0 1a a9 2c 20 38 21 20 1a
>1a3a58		1c 20 8b 06 c2 20 a5 23 8f 6d f0 1a 8d 00 01 a9
>1a3a68		2c 00 20 38 21 20 1a 1c 20 8b 06 c2 20 a5 23 8f
>1a3a78		6f f0 1a 8d 02 01 a9 2c 00 20 38 21 20 1a 1c 20
>1a3a88		8b 06 c2 20 a5 23 8f 71 f0 1a c2 20 ad 04 01 8f
>1a3a98		6a f0 1a e2 20 ad 06 01 8f 6c f0 1a e2 20 a9 01
>1a3aa8		8f 66 f0 1a c2 20 af 5d f0 1a cf 6a f0 1a d0 14
>1a3ab8		e2 20 af 5f f0 1a cf 6c f0 1a d0 08 c2 20 20 f4
>1a3ac8		35 28 2b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a3ad8		a9 0a 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>1a3ae8		dc d4 08 08 c2 30 20 1a 1c 20 e1 06 a5 23 48 a9
>1a3af8		2c 00 20 38 21 20 1a 1c 20 e1 06 a4 23 fa 20 20
>1a3b08		00 28 60 08 20 4c 20 e2 20 a7 00 d0 03 4c b3 3b
>1a3b18		c9 3a d0 03 4c b3 3b c9 22 d0 0b 20 26 1b 20 c1
>1a3b28		44 a9 3b 20 38 21 20 60 04 90 44 20 88 52 90 3f
>1a3b38		a9 3f 20 18 00 a9 20 20 18 00 20 10 00 e2 20 a5
>1a3b48		ea c9 02 f0 49 c9 00 d0 03 82 84 00 c9 01 f0 5d
>1a3b58		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a3b68		08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 08
>1a3b78		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a3b88		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 c2 20
>1a3b98		a9 00 4c 85 23 a9 00 00 85 25 e2 20 a9 02 85 27
>1a3ba8		c2 20 20 eb 51 a9 0d 00 20 18 00 28 60 c2 20 a5
>1a3bb8		00 85 40 a5 02 85 42 a9 00 4c 85 00 a9 00 00 85
>1a3bc8		02 20 aa 58 c2 20 a5 40 85 00 a5 42 85 02 80 d0
>1a3bd8		c2 20 a5 00 85 40 a5 02 85 42 a9 00 4c 85 00 a9
>1a3be8		00 00 85 02 20 56 08 c2 20 a5 40 85 00 a5 42 85
>1a3bf8		02 80 ad 08 20 4c 20 e2 20 a7 00 f0 47 c9 3a f0
>1a3c08		43 20 60 04 90 40 20 88 52 90 3b 20 7a 14 20 14
>1a3c18		00 e2 20 a0 00 00 97 16 a9 00 c8 97 16 c2 20 a5
>1a3c28		16 85 23 a5 18 85 25 e2 20 a9 02 85 27 20 eb 51
>1a3c38		20 4c 20 a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20
>1a3c48		2b 20 80 b0 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a3c58		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>1a3c68		e2 20 dc d4 08 08 20 1a 1c 20 cf 05 e2 20 a9 5c
>1a3c78		85 a2 c2 20 a5 23 85 a3 e2 20 a5 25 85 a5 e2 20
>1a3c88		a9 2c 85 37 20 6d 21 90 41 20 2b 20 20 1a 1c 20
>1a3c98		8b 06 c2 20 a5 23 85 55 e2 20 a9 2c 85 37 20 6d
>1a3ca8		21 90 27 20 2b 20 20 1a 1c 20 8b 06 c2 20 a5 23
>1a3cb8		85 59 e2 20 a9 2c 85 37 20 6d 21 90 0d 20 2b 20
>1a3cc8		20 1a 1c 20 8b 06 c2 20 a4 23 a6 59 a5 55 0b 8b
>1a3cd8		08 22 a2 08 00 28 ab 2b 20 70 20 28 60 08 c2 20
>1a3ce8		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a3cf8		20 29 ff 00 20 6c 1d e2 20 dc d4 08 08 e2 20 20
>1a3d08		4c 20 20 88 52 90 64 a9 8f 20 38 21 a9 01 20 79
>1a3d18		19 a2 01 00 a9 00 8f 00 4d 00 20 1a 1c 20 8b 06
>1a3d28		c2 20 a5 23 9f 00 4d 00 e2 20 af 00 4d 00 1a 8f
>1a3d38		00 4d 00 30 55 e8 e8 20 4c 20 a7 00 c9 2c f0 25
>1a3d48		c9 90 d0 27 20 2b 20 20 06 65 c2 20 a5 c0 85 23
>1a3d58		e2 20 a5 c2 85 25 64 26 a5 ea 09 80 85 ea 85 27
>1a3d68		20 eb 51 28 60 20 2b 20 4c 22 3d 08 c2 20 48 a9
>1a3d78		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>1a3d88		ff 00 20 6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00
>1a3d98		08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff
>1a3da8		00 20 6c 1d e2 20 dc d4 08 08 20 4c 20 e2 20 a7
>1a3db8		00 f0 28 c9 3a f0 24 20 60 04 90 21 20 88 52 90
>1a3dc8		1c 20 04 3e 20 eb 51 20 4c 20 a7 00 f0 0d c9 3a
>1a3dd8		f0 09 c9 2c d0 07 20 2b 20 80 cf 28 60 08 c2 20
>1a3de8		48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2
>1a3df8		20 29 ff 00 20 6c 1d e2 20 dc d4 08 08 a5 02 85
>1a3e08		42 a5 00 85 40 a5 1c 85 46 a5 1a 85 44 c2 20 a5
>1a3e18		3a d0 04 a5 38 f0 4e a5 38 85 00 a5 3a 85 02 a5
>1a3e28		3c 85 1a a5 3e 85 1c e2 20 a7 00 f0 53 c9 3a f0
>1a3e38		4f c9 2c d0 03 20 2b 20 20 4c 20 a7 00 c9 22 f0
>1a3e48		4e 20 79 04 b0 4e 08 c2 20 48 a9 00 08 5b 68 28
>1a3e58		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>1a3e68		e2 20 dc d4 08 c2 20 a9 00 00 85 1a a9 16 00 85
>1a3e78		1c 18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02
>1a3e88		e2 20 a9 80 85 35 a9 ab 85 37 20 82 20 80 a9 20
>1a3e98		26 1b 80 03 20 5b 1a c2 20 a5 00 85 38 a5 02 85
>1a3ea8		3a a5 1a 85 3c a5 1c 85 3e a5 44 85 1a a5 46 85
>1a3eb8		1c a5 40 85 00 a5 42 85 02 28 60 20 70 20 60 64
>1a3ec8		38 64 3a 64 3c 64 3e 60 20 24 00 60 20 1a 1c c2
>1a3ed8		20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0 22 20
>1a3ee8		2b 20 20 1a 1c c2 20 a5 26 d0 35 68 85 08 68 85
>1a3ef8		0a c2 20 a5 23 87 08 e2 20 a0 02 00 a5 25 97 08
>1a3f08		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a3f18		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>1a3f28		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>1a3f38		08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 20
>1a3f48		1a 1c c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c
>1a3f58		d0 19 20 2b 20 20 1a 1c c2 20 a5 25 d0 2c 68 85
>1a3f68		08 68 85 0a c2 20 a5 23 87 08 60 08 c2 20 48 a9
>1a3f78		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>1a3f88		ff 00 20 6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00
>1a3f98		08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff
>1a3fa8		00 20 6c 1d e2 20 dc d4 08 20 1a 1c c2 20 a5 25
>1a3fb8		48 a5 23 48 e2 20 a7 00 c9 2c d0 1f 20 2b 20 20
>1a3fc8		1a 1c e2 20 a5 24 d0 32 c2 20 a5 25 d0 2c 68 85
>1a3fd8		08 68 85 0a e2 20 a5 23 87 08 60 08 c2 20 48 a9
>1a3fe8		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>1a3ff8		ff 00 20 6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00
>1a4008		08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff
>1a4018		00 20 6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00 08
>1a4028		5b 68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00
>1a4038		20 6c 1d e2 20 dc d4 08 08 e2 20 a7 00 f0 05 20
>1a4048		2b 20 80 f7 28 60 08 28 60 08 28 60 08 28 60 08
>1a4058		c2 20 a5 1c 20 33 1d a5 1a 20 33 1d a5 02 48 a5
>1a4068		00 48 20 70 20 a5 02 20 33 1d a5 00 20 33 1d 68
>1a4078		85 00 68 85 02 20 4c 20 20 88 52 b0 1f 08 c2 20
>1a4088		48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00 c2
>1a4098		20 29 ff 00 20 6c 1d e2 20 dc d4 08 e2 20 a5 ea
>1a40a8		20 4a 1d a5 e9 20 4a 1d c2 20 a5 e7 20 33 1d 20
>1a40b8		4c 20 e2 20 a7 00 c9 8a d0 6a a5 ea c9 00 f0 04
>1a40c8		c9 01 f0 00 20 2b 20 20 1a 1c 20 eb 51 e2 20 a9
>1a40d8		9c 20 38 21 20 1a 1c c2 20 a5 27 20 33 1d a5 25
>1a40e8		20 33 1d a5 23 20 33 1d e2 20 a9 9d 85 37 20 6d
>1a40f8		21 90 1b 20 2b 20 20 1a 1c e2 20 a5 27 20 33 1d
>1a4108		c2 20 a5 25 20 33 1d a5 23 20 33 1d 80 14 c2 20
>1a4118		a9 00 00 20 33 1d a9 00 00 20 33 1d a9 01 00 20
>1a4128		33 1d 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4138		a9 02 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>1a4148		dc d4 08 08 8b 08 e2 20 48 a9 00 48 ab 68 28 08
>1a4158		c2 20 48 a9 00 08 5b 68 28 c2 30 a4 33 c8 c8 c2
>1a4168		20 b9 0c 00 85 e7 b9 0e 00 e2 20 85 e9 b9 10 00
>1a4178		85 ea c2 20 5a 20 89 50 7a c2 20 b9 00 00 85 29
>1a4188		b9 02 00 85 2b e2 20 b9 04 00 85 2d c2 20 5a 20
>1a4198		f1 26 20 eb 51 7a c2 20 b9 06 00 85 29 b9 08 00
>1a41a8		85 2b e2 20 b9 0a 00 85 2d c2 20 b9 02 00 30 0a
>1a41b8		20 7a 29 20 98 05 f0 28 80 08 20 3a 29 20 98 05
>1a41c8		f0 1e c2 20 b9 12 00 85 00 b9 14 00 85 02 b9 16
>1a41d8		00 85 1a b9 18 00 85 1c e2 20 a9 03 85 dc 80 17
>1a41e8		a2 23 08 20 3a 19 c2 20 18 a5 33 69 1a 00 85 33
>1a41f8		a5 35 69 00 00 85 35 ab 28 60 08 a5 1a 48 a5 1c
>1a4208		48 20 4c 20 20 56 08 a5 23 f0 26 20 2b 23 90 42
>1a4218		e2 20 a9 02 85 dc 20 70 20 c2 20 68 20 33 1d 68
>1a4228		20 33 1d a5 02 20 33 1d a5 00 20 33 1d e6 31 28
>1a4238		60 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a4248		02 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc
>1a4258		d4 08 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4268		a9 06 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>1a4278		dc d4 08 08 c2 30 a5 31 f0 1e 20 55 1d 85 00 20
>1a4288		55 1d 85 02 20 55 1d 85 1a 20 55 1d 85 1c c6 31
>1a4298		e2 20 a9 03 85 dc 28 60 08 c2 20 48 a9 00 08 5b
>1a42a8		68 28 e2 20 a9 07 8f d3 08 00 c2 20 29 ff 00 20
>1a42b8		6c 1d e2 20 dc d4 08 08 20 1a 1c 20 98 05 f0 1c
>1a42c8		e2 20 a9 97 20 38 21 20 56 08 20 98 05 f0 12 20
>1a42d8		2b 23 90 2c e2 20 a9 02 85 dc 80 03 20 70 20 28
>1a42e8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a42f8		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>1a4308		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d3
>1a4318		08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 08
>1a4328		e2 20 a9 01 85 dc 28 60 08 20 4c 20 20 56 08 a5
>1a4338		23 f0 0d 20 2b 23 90 27 e2 20 a9 02 85 dc 28 60
>1a4348		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>1a4358		08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 08
>1a4368		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d3 08
>1a4378		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 20 dc
>1a4388		18 20 24 10 20 88 4f 60 08 a7 00 10 03 20 2b 20
>1a4398		20 88 52 b0 03 4c 07 44 e2 20 20 8c 21 c9 8f d0
>1a43a8		0e a9 8f 20 38 21 a9 00 8f 00 4d 00 20 5e 1a 20
>1a43b8		4c 20 e2 20 a7 00 c9 8a f0 03 4c 07 44 20 2b 20
>1a43c8		a5 ea 48 a5 e9 48 a5 e8 48 a5 e7 48 20 1a 1c 68
>1a43d8		85 e7 68 85 e8 68 85 e9 68 85 ea 29 80 f0 1b 20
>1a43e8		fb 4f 90 3a c2 20 a0 09 00 b7 08 85 c0 e2 20 c8
>1a43f8		c8 b7 08 85 c2 20 e7 66 80 03 20 eb 51 28 60 08
>1a4408		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a4418		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 08 c2
>1a4428		20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00
>1a4438		c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 08 e2 20
>1a4448		20 8c 21 c9 00 f0 6d 20 1a 1c e2 20 a5 27 c9 ff
>1a4458		f0 1b c9 02 d0 05 20 c1 44 80 12 c9 00 d0 05 20
>1a4468		e1 44 80 09 c9 01 d0 4f 20 f4 44 80 00 20 4c 20
>1a4478		a7 00 f0 40 c9 3a f0 3c c9 2c f0 23 c9 3b f0 24
>1a4488		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>1a4498		08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 a9
>1a44a8		09 20 18 00 20 2b 20 20 4c 20 a7 00 f0 09 c9 3a
>1a44b8		f0 05 80 93 20 55 03 28 60 08 8b 08 c2 20 48 a9
>1a44c8		00 08 5b 68 28 e2 20 c2 10 a0 00 00 b7 23 f0 06
>1a44d8		20 18 00 c8 80 f6 ab 28 60 08 c2 20 20 d9 14 a5
>1a44e8		16 85 23 a5 18 85 25 20 c1 44 28 60 08 20 51 5c
>1a44f8		c2 20 a5 16 85 23 a5 18 85 25 20 c1 44 28 60 08
>1a4508		e2 20 85 b5 4a 4a 4a 4a 29 0f 18 69 30 97 16 c8
>1a4518		a5 b5 29 0f 18 69 30 97 16 c8 28 60 e2 20 a9 8f
>1a4528		20 38 21 08 20 1a 1c e2 20 c2 10 af 0e 08 af 09
>1a4538		08 8f 0e 08 af 20 7a 14 a0 00 00 af 06 08 af 20
>1a4548		07 45 a9 2f 97 16 c8 af 09 08 af 20 07 45 a9 2f
>1a4558		97 16 c8 af 0f 08 af 20 07 45 af 0a 08 af 20 07
>1a4568		45 a9 00 97 16 af 0e 08 af 29 f7 8f 0e 08 af c2
>1a4578		20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28
>1a4588		e2 20 20 2b 20 60 e2 20 a9 8f 20 38 21 08 20 1a
>1a4598		1c e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08 af 20
>1a45a8		7a 14 a0 00 00 af 04 08 af 29 7f 20 07 45 a9 3a
>1a45b8		97 16 c8 af 02 08 af 20 07 45 a9 3a 97 16 c8 af
>1a45c8		00 08 af 20 07 45 a9 00 97 16 af 0e 08 af 29 f7
>1a45d8		8f 0e 08 af c2 20 a5 16 85 23 a5 18 85 25 e2 20
>1a45e8		a9 02 85 27 28 e2 20 20 2b 20 60 e2 20 a9 8f 20
>1a45f8		38 21 08 20 1a 1c e2 20 a9 01 85 27 a9 03 8f 00
>1a4608		e2 af a9 01 8f 01 e2 af c2 30 af 84 e8 af 8f 08
>1a4618		e2 af af 84 e8 af 29 ff 7f 8f 0a e2 af a9 ff ff
>1a4628		8f 0c e2 af a9 ff 7f 8f 0e e2 af ea ea ea af 08
>1a4638		e2 af 85 23 af 0a e2 af 85 25 28 e2 20 20 2b 20
>1a4648		60 e2 20 a9 8f 20 38 21 08 c2 30 20 1a 1c 20 61
>1a4658		06 c2 20 a5 25 48 a5 23 48 20 4c 20 e2 20 a7 00
>1a4668		c9 2c f0 03 4c c0 46 20 2b 20 20 1a 1c 20 8b 06
>1a4678		c2 20 a5 23 48 20 4c 20 e2 20 a7 00 c9 2c f0 03
>1a4688		4c c0 46 20 2b 20 20 1a 1c 20 8b 06 c2 20 a5 23
>1a4698		85 8f e2 20 a5 25 85 91 c2 20 68 85 29 a9 00 00
>1a46a8		85 2b 68 85 23 68 85 25 e2 20 a9 02 85 27 20 d2
>1a46b8		16 e2 20 20 2b 20 28 60 08 c2 20 48 a9 00 08 5b
>1a46c8		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>1a46d8		6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>1a46e8		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 6c
>1a46f8		1d e2 20 dc d4 08 e2 20 a9 8f 20 38 21 08 c2 30
>1a4708		20 1a 1c e2 20 a5 27 c9 02 f0 03 4c 82 47 c2 20
>1a4718		a5 25 48 a5 23 48 20 4c 20 e2 20 a7 00 c9 2c f0
>1a4728		03 4c a1 47 20 2b 20 20 1a 1c e2 20 a5 27 c9 00
>1a4738		d0 48 c2 20 a5 23 85 8f c2 20 68 85 23 68 85 25
>1a4748		e2 20 a9 02 85 27 e2 20 a0 00 00 b7 23 f0 03 c8
>1a4758		80 f9 c2 20 98 38 e5 8f 30 09 85 29 a9 00 00 85
>1a4768		2b 80 07 a9 00 00 85 29 85 2b e2 20 a9 00 85 2d
>1a4778		20 d2 16 e2 20 20 2b 20 28 60 08 c2 20 48 a9 00
>1a4788		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a4798		00 20 6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00 08
>1a47a8		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a47b8		20 6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a47c8		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a47d8		6c 1d e2 20 dc d4 08 e2 20 a9 8f 20 38 21 08 c2
>1a47e8		30 20 1a 1c e2 20 a5 27 c9 02 f0 03 4c 4b 48 c2
>1a47f8		20 a5 25 48 a5 23 48 20 4c 20 e2 20 a7 00 c9 2c
>1a4808		f0 03 4c 6a 48 20 2b 20 20 1a 1c e2 20 a5 27 c9
>1a4818		00 d0 30 c2 20 a5 23 85 8f c2 20 a9 00 00 85 29
>1a4828		a9 00 00 85 2b e2 20 a9 00 85 2d c2 20 68 85 23
>1a4838		68 85 25 e2 20 a9 02 85 27 20 d2 16 e2 20 20 2b
>1a4848		20 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a4858		04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc
>1a4868		d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a4878		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>1a4888		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a4898		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>1a48a8		e2 20 a9 8f 20 38 21 20 1a 1c c2 10 e2 20 a5 27
>1a48b8		c9 02 d0 23 c2 20 a5 00 85 40 a5 02 85 42 a5 23
>1a48c8		85 00 a5 25 85 02 20 56 08 a5 40 85 00 a5 42 85
>1a48d8		02 e2 20 20 2b 20 60 08 c2 20 48 a9 00 08 5b 68
>1a48e8		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c
>1a48f8		1d e2 20 dc d4 08 e2 20 a9 8f 20 38 21 08 20 1a
>1a4908		1c c2 10 e2 20 a5 27 c9 00 d0 1a 20 d9 14 c2 20
>1a4918		a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28 e2
>1a4928		20 20 2b 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4938		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2
>1a4948		20 dc d4 08 e2 20 a9 8f 20 38 21 08 20 1a 1c 20
>1a4958		61 06 c2 20 64 0c 64 0e e2 30 a0 00 b7 23 c9 20
>1a4968		f0 04 c9 24 d0 03 c8 80 f3 b7 23 20 8a 04 90 1e
>1a4978		c2 20 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e 06 0c
>1a4988		26 0e e2 20 20 ab 04 05 0c 85 0c c8 80 db c2 20
>1a4998		a5 0c 85 23 a5 0e 85 25 e2 20 a9 00 85 27 28 e2
>1a49a8		20 20 2b 20 60 e2 20 a9 8f 20 38 21 08 20 1a 1c
>1a49b8		20 cf 05 20 7a 14 e2 30 a0 ff a9 00 97 16 88 a5
>1a49c8		23 29 0f aa bf 00 d0 1a 97 16 88 a5 23 29 f0 4a
>1a49d8		4a 4a 4a aa bf 00 d0 1a 97 16 88 a5 24 85 23 a5
>1a49e8		25 85 24 a5 26 85 25 a9 00 85 26 a5 23 d0 d0 a5
>1a49f8		24 d0 cc a5 25 d0 c8 98 38 65 16 85 23 a5 17 85
>1a4a08		24 a5 18 85 25 a5 19 85 26 a9 02 85 27 28 e2 20
>1a4a18		20 2b 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4a28		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>1a4a38		dc d4 08 e2 20 a9 8f 20 38 21 20 1a 1c e2 20 a5
>1a4a48		27 c9 02 d0 1f 8b a5 25 48 ab c2 10 a6 23 20 66
>1a4a58		15 ab 84 23 c2 20 64 25 e2 20 a9 00 85 27 e2 20
>1a4a68		20 2b 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4a78		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>1a4a88		dc d4 08 e2 20 a9 8f 20 38 21 20 1a 1c e2 20 a5
>1a4a98		27 c9 00 d0 33 a5 25 c9 b0 90 1b c9 f0 b0 17 e2
>1a4aa8		20 a7 23 c2 20 af 02 09 af 89 00 80 d0 f7 e2 20
>1a4ab8		af 01 09 af 80 04 e2 20 a7 23 85 23 64 24 64 25
>1a4ac8		64 30 e2 20 20 2b 20 60 08 c2 20 48 a9 00 08 5b
>1a4ad8		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>1a4ae8		6c 1d e2 20 dc d4 08 e2 20 a9 8f 20 38 21 20 1a
>1a4af8		1c e2 20 a5 27 c9 00 d0 1d c2 20 a7 23 85 0c e2
>1a4b08		20 a0 02 00 b7 23 85 25 64 26 c2 20 a5 0c 85 23
>1a4b18		e2 20 20 2b 20 60 08 c2 20 48 a9 00 08 5b 68 28
>1a4b28		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>1a4b38		e2 20 dc d4 08 e2 20 a9 8f 20 38 21 20 1a 1c e2
>1a4b48		20 a5 27 c9 00 d0 0e c2 20 a7 23 85 23 64 25 e2
>1a4b58		20 20 2b 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4b68		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2
>1a4b78		20 dc d4 08 e2 20 a9 8f 20 38 21 20 1a 1c e2 20
>1a4b88		a5 27 c9 00 d0 24 20 7a 14 a5 23 87 16 a9 00 a0
>1a4b98		01 00 97 16 c2 20 a5 16 85 23 a5 18 85 25 e2 20
>1a4ba8		a9 02 85 27 e2 20 20 2b 20 60 08 c2 20 48 a9 00
>1a4bb8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a4bc8		00 20 6c 1d e2 20 dc d4 08 e2 20 a9 8f 20 38 21
>1a4bd8		20 1a 1c e2 20 a5 27 c9 02 d0 14 a7 23 85 23 64
>1a4be8		24 64 25 64 26 a9 00 85 27 e2 20 20 2b 20 60 08
>1a4bf8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a4c08		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 e2 20
>1a4c18		a9 8f 20 38 21 20 1a 1c e2 20 a5 27 c9 00 d0 39
>1a4c28		e2 20 a5 26 d0 52 a5 25 d0 4e a5 24 d0 4a c2 10
>1a4c38		20 7a 14 a4 23 e2 20 a9 00 97 16 88 30 07 a9 20
>1a4c48		97 16 88 10 fb a9 02 85 27 c2 20 a5 16 85 23 a5
>1a4c58		18 85 25 e2 20 20 2b 20 60 08 c2 20 48 a9 00 08
>1a4c68		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a4c78		20 6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a4c88		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a4c98		6c 1d e2 20 dc d4 08 e2 20 a9 8f 20 38 21 20 1a
>1a4ca8		1c e2 20 a5 27 c9 00 d0 39 e2 20 a5 26 d0 52 a5
>1a4cb8		25 d0 4e a5 24 d0 4a c2 10 20 7a 14 a4 23 e2 20
>1a4cc8		a9 00 97 16 88 30 07 a9 09 97 16 88 10 fb a9 02
>1a4cd8		85 27 c2 20 a5 16 85 23 a5 18 85 25 e2 20 20 2b
>1a4ce8		20 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>1a4cf8		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>1a4d08		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a4d18		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>1a4d28		e2 20 a9 8f 20 38 21 20 1a 1c e2 20 a5 27 c9 00
>1a4d38		f0 23 c9 01 f0 3e 08 c2 20 48 a9 00 08 5b 68 28
>1a4d48		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>1a4d58		e2 20 dc d4 08 c2 20 a5 25 10 21 49 ff ff 85 25
>1a4d68		a5 23 49 ff ff 18 69 01 00 85 23 a5 25 69 00 00
>1a4d78		85 25 80 08 e2 20 a5 26 29 7f 85 26 e2 20 20 2b
>1a4d88		20 60 e2 20 a9 8f 20 38 21 20 1a 1c e2 20 a5 27
>1a4d98		c9 00 d0 25 c2 20 a5 25 30 12 d0 04 a5 23 f0 13
>1a4da8		a9 00 00 85 25 a9 01 00 85 23 80 07 a9 ff ff 85
>1a4db8		25 85 23 e2 20 20 2b 20 60 08 c2 20 48 a9 00 08
>1a4dc8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a4dd8		20 6c 1d e2 20 dc d4 08 e2 20 a9 8f 20 38 21 20
>1a4de8		1a 1c 20 cf 05 e2 20 20 2b 20 60 e2 20 a9 8f 20
>1a4df8		38 21 20 1a 1c 20 3d 07 20 b1 60 e2 20 20 2b 20
>1a4e08		60 e2 20 a9 8f 20 38 21 20 1a 1c 20 3d 07 20 e0
>1a4e18		60 e2 20 20 2b 20 60 e2 20 a9 8f 20 38 21 20 1a
>1a4e28		1c 20 3d 07 20 0f 61 e2 20 20 2b 20 60 e2 20 a9
>1a4e38		8f 20 38 21 20 1a 1c 20 3d 07 20 3d 61 e2 20 20
>1a4e48		2b 20 60 e2 20 a9 8f 20 38 21 20 1a 1c 20 3d 07
>1a4e58		20 66 62 e2 20 20 2b 20 60 e2 20 a9 8f 20 38 21
>1a4e68		20 1a 1c 20 3d 07 20 3c 62 e2 20 20 2b 20 60 e2
>1a4e78		20 a9 8f 20 38 21 20 1a 1c 20 3d 07 20 88 62 e2
>1a4e88		20 20 2b 20 60 e2 20 a9 8f 20 38 21 20 1a 1c 20
>1a4e98		3d 07 20 1c 63 e2 20 20 2b 20 60 e2 20 a9 8f 20
>1a4ea8		38 21 20 1a 1c 20 3d 07 20 9e 63 e2 20 20 2b 20
>1a4eb8		60 00 ea 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>1a4ec8		c2 30 c2 20 a9 00 00 85 d9 e2 20 a9 16 85 db c2
>1a4ed8		30 a9 00 00 a0 00 00 97 d9 a0 02 00 97 d9 a0 04
>1a4ee8		00 97 d9 20 01 20 2b 28 60 8b 08 c2 20 a9 00 00
>1a4ef8		85 1a a9 16 00 85 1c 20 01 20 20 e1 22 28 ab 60
>1a4f08		08 c2 20 64 55 a9 ff 7f 85 59 20 55 03 20 8c 21
>1a4f18		29 ff 00 c9 00 00 f0 2c c9 81 00 f0 1a 20 4c 20
>1a4f28		20 56 08 a5 23 85 55 20 8c 21 29 ff 00 c9 00 00
>1a4f38		f0 12 c9 81 00 d0 2a 20 38 21 20 4c 20 20 56 08
>1a4f48		a5 23 85 59 a5 1c 48 a5 1a 48 a5 02 48 a5 00 48
>1a4f58		20 dc 17 68 85 00 68 85 02 68 85 1a 68 85 1c 28
>1a4f68		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a4f78		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>1a4f88		08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 64 e4 64
>1a4f98		e7 e2 20 64 e6 64 e9 64 ea c2 20 38 a5 d9 69 04
>1a4fa8		00 85 e1 e2 20 a5 db 69 00 85 e3 28 60 c9 5f f0
>1a4fb8		1a c9 3a b0 04 c9 30 b0 12 c9 5b b0 04 c9 41 b0
>1a4fc8		0a c9 7b b0 04 c9 61 b0 02 18 60 38 60 08 e2 20
>1a4fd8		c2 10 a0 00 00 b7 0c f0 0a d7 e7 d0 13 c8 c0 08
>1a4fe8		00 d0 f2 b7 e7 20 d4 04 20 b5 4f b0 03 28 38 60
>1a4ff8		28 18 60 08 e2 20 c2 10 a0 00 00 a2 00 00 b7 e7
>1a5008		f0 0b 20 d4 04 9f 00 4e 00 c8 e8 80 f1 a9 00 9f
>1a5018		00 4e 00 c2 20 a9 00 4e 85 e7 e2 20 a9 00 85 e9
>1a5028		c2 20 a5 e4 85 08 d0 06 e2 20 a5 e6 f0 4d e2 20
>1a5038		a5 e6 85 0a a5 ea a0 00 00 d7 08 d0 17 c2 20 18
>1a5048		a5 08 69 01 00 85 0c e2 20 a5 0a 69 00 85 0e 20
>1a5058		d5 4f b0 2a a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2
>1a5068		20 b7 08 85 0e d0 06 c2 20 a5 0c f0 0e c2 20 a5
>1a5078		0c 85 08 e2 20 a5 0e 85 0a 80 b9 28 18 60 28 38
>1a5088		60 08 20 fb 4f b0 1f 08 c2 20 48 a9 00 08 5b 68
>1a5098		28 e2 20 a9 05 8f d3 08 00 c2 20 29 ff 00 20 6c
>1a50a8		1d e2 20 dc d4 08 c2 30 a0 09 00 b7 08 85 23 c8
>1a50b8		c8 b7 08 85 25 e2 20 a0 00 00 b7 08 85 27 28 60
>1a50c8		08 c2 20 18 a5 e1 69 10 00 85 08 e2 20 a5 e3 69
>1a50d8		00 85 0a c5 bc 90 27 c2 20 a5 08 c5 ba 90 1f 08
>1a50e8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08
>1a50f8		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 c2 20
>1a5108		a5 e1 85 c0 e2 20 a5 e3 85 c2 c2 20 a5 08 85 e1
>1a5118		e2 20 a5 0a 85 e3 28 60 08 e2 20 a5 27 c5 ea f0
>1a5128		33 a5 ea c9 00 d0 05 20 cf 05 80 2f c9 01 d0 05
>1a5138		20 3d 07 80 26 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a5148		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2
>1a5158		20 dc d4 08 c9 02 d0 03 20 6c 16 c2 10 20 c8 50
>1a5168		c2 30 18 a5 c0 69 01 00 85 08 e2 20 a5 c2 69 00
>1a5178		85 0a a0 00 00 a9 00 97 08 c8 c0 08 00 d0 f8 a0
>1a5188		00 00 b7 e7 f0 10 20 d4 04 20 b5 4f 90 08 97 08
>1a5198		c8 c0 08 00 d0 ec c2 20 a0 09 00 a5 23 97 c0 a5
>1a51a8		25 c8 c8 97 c0 a5 e4 a0 0d 00 97 c0 c8 c8 e2 20
>1a51b8		a5 e6 97 c0 c2 20 a5 c0 85 e4 e2 20 a5 c2 85 e6
>1a51c8		e2 20 a0 00 00 a5 27 97 c0 c9 02 f0 02 28 60 c2
>1a51d8		20 a5 23 85 c0 e2 20 a5 25 85 c2 20 88 12 20 9d
>1a51e8		12 80 ea 08 c2 30 a5 e4 d0 06 e2 20 a5 e6 f0 05
>1a51f8		20 fb 4f b0 05 20 20 51 80 4e e2 20 a5 27 c5 ea
>1a5208		f0 33 a5 ea c9 00 d0 05 20 cf 05 80 2c c9 01 d0
>1a5218		05 20 3d 07 80 23 08 c2 20 48 a9 00 08 5b 68 28
>1a5228		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>1a5238		e2 20 dc d4 08 c9 02 f0 11 c2 30 a0 09 00 a5 23
>1a5248		97 08 c8 c8 a5 25 97 08 28 60 20 6c 16 a0 09 00
>1a5258		b7 08 85 c0 c8 c8 e2 20 b7 08 85 c2 20 88 12 20
>1a5268		bc 12 e2 20 a5 27 c9 02 f0 02 80 cd c2 20 a5 23
>1a5278		85 c0 e2 20 a5 25 85 c2 20 88 12 20 9d 12 80 b9
>1a5288		08 20 4c 20 e2 20 a7 00 20 60 04 90 42 c2 20 a5
>1a5298		00 85 e7 e2 20 a5 02 85 e9 20 2b 20 a7 00 f0 0d
>1a52a8		c9 24 f0 14 c9 25 f0 09 20 b5 4f b0 ec a9 01 80
>1a52b8		0c 20 2b 20 a9 00 80 05 20 2b 20 a9 02 85 ea 20
>1a52c8		8c 21 c9 8f d0 06 a5 ea 09 80 85 ea 28 38 60 28
>1a52d8		18 60 08 c2 20 18 a5 23 65 29 85 23 a5 25 65 2b
>1a52e8		85 25 28 60 08 c2 20 38 a5 23 e5 29 85 23 a5 25
>1a52f8		e5 2b 85 25 28 60 08 c2 20 3b 38 e9 0a 00 1b c2
>1a5308		30 a9 00 00 83 01 83 03 83 05 83 07 83 09 a5 25
>1a5318		10 18 a9 00 80 83 01 a5 25 49 ff ff 85 25 a5 23
>1a5328		49 ff ff 1a 85 23 d0 02 e6 25 a5 2b 10 1a a3 01
>1a5338		49 00 80 83 01 a5 2b 49 ff ff 85 2b a5 29 49 ff
>1a5348		ff 1a 85 29 d0 02 e6 2b a5 25 f0 04 a5 2b d0 5a
>1a5358		a5 23 8f 00 01 00 a5 29 8f 02 01 00 af 04 01 00
>1a5368		83 03 af 06 01 00 83 05 a5 25 8f 00 01 00 a5 29
>1a5378		8f 02 01 00 18 af 04 01 00 63 05 83 05 af 06 01
>1a5388		00 63 07 83 07 a5 23 8f 00 01 00 a5 2b 8f 02 01
>1a5398		00 18 af 04 01 00 63 05 83 05 af 06 01 00 63 07
>1a53a8		83 07 a3 07 f0 23 a3 09 f0 1f 08 c2 20 48 a9 00
>1a53b8		08 5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff
>1a53c8		00 20 6c 1d e2 20 dc d4 08 c2 30 a3 01 10 16 a3
>1a53d8		05 49 ff ff 83 05 a3 03 49 ff ff 1a 83 03 d0 05
>1a53e8		a3 05 1a 83 05 a3 03 85 23 a3 05 85 25 c2 20 3b
>1a53f8		18 69 0a 00 1b 28 60 08 c2 20 a5 23 c5 29 a5 25
>1a5408		e5 2b 50 03 49 00 80 30 06 64 23 64 25 80 07 a9
>1a5418		ff ff 85 23 85 25 28 60 08 c2 20 a5 23 c5 29 d0
>1a5428		0c a5 25 c5 2b d0 06 64 23 64 25 80 16 a5 29 c5
>1a5438		23 a5 2b e5 25 50 03 49 00 80 10 eb a9 ff ff 85
>1a5448		23 85 25 28 60 08 c2 20 a5 2b c5 25 d0 0f a5 29
>1a5458		c5 23 d0 09 a9 ff ff 85 23 85 25 80 04 64 23 64
>1a5468		25 28 60 08 c2 20 a5 2b c5 25 d0 0c a5 29 c5 23
>1a5478		d0 06 64 23 64 25 80 07 a9 ff ff 85 23 85 25 28
>1a5488		60 08 c2 20 a5 23 c5 29 d0 0f a5 25 c5 2b d0 09
>1a5498		a9 ff ff 85 23 85 25 80 13 a5 29 c5 23 a5 2b e5
>1a54a8		25 50 03 49 00 80 30 e8 64 23 64 25 28 60 08 c2
>1a54b8		20 a5 23 c5 29 d0 0f a5 25 c5 2b d0 09 a9 ff ff
>1a54c8		85 23 85 25 80 13 a5 23 c5 29 a5 25 e5 2b 50 03
>1a54d8		49 00 80 30 e8 64 23 64 25 28 60 08 c2 20 8f 12
>1a54e8		01 00 8a 8f 10 01 00 af 16 01 00 aa af 14 01 00
>1a54f8		28 60 08 e2 20 a9 03 8f 00 e2 af a9 00 8f 01 e2
>1a5508		af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af a9
>1a5518		00 00 8f 0c e2 af a9 00 01 8f 0e e2 af ea ea ea
>1a5528		ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 a9
>1a5538		01 00 85 27 28 60 08 e2 20 a9 40 8f 00 e2 af 80
>1a5548		09 08 e2 20 a9 48 8f 00 e2 af a9 02 8f 01 e2 af
>1a5558		c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af a5 29
>1a5568		8f 0c e2 af a5 2b 8f 0e e2 af ea ea ea e2 20 af
>1a5578		06 e2 af 29 07 d0 10 c2 20 af 08 e2 af 85 23 af
>1a5588		0a e2 af 85 25 28 60 20 2a 56 80 f9 08 e2 20 a9
>1a5598		01 8f 01 e2 af a9 00 8f 00 e2 af c2 20 a5 23 8f
>1a55a8		08 e2 af a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5
>1a55b8		2b 8f 0e e2 af ea ea ea e2 20 af 05 e2 af 29 17
>1a55c8		d0 10 c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25
>1a55d8		28 60 20 2a 56 80 f9 08 e2 20 a9 00 8f 01 e2 af
>1a55e8		a9 00 8f 00 e2 af c2 20 a5 23 8f 08 e2 af a5 25
>1a55f8		8f 0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af
>1a5608		ea ea ea e2 20 af 04 e2 af 29 07 d0 10 c2 20 af
>1a5618		08 e2 af 85 23 af 0a e2 af 85 25 28 60 20 2a 56
>1a5628		80 f9 e2 20 89 01 f0 20 00 08 c2 20 48 a9 00 08
>1a5638		5b 68 28 e2 20 a9 0c 8f d3 08 00 c2 20 29 ff 00
>1a5648		20 6c 1d e2 20 dc d4 08 89 02 f0 1f 08 c2 20 48
>1a5658		a9 00 08 5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20
>1a5668		29 ff 00 20 6c 1d e2 20 dc d4 08 89 04 f0 1f 08
>1a5678		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0e 8f d3 08
>1a5688		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 60 08
>1a5698		e2 20 a9 00 8f 01 e2 af a9 02 8f 00 e2 af c2 20
>1a56a8		a9 00 a0 8f 0c e2 af a9 00 00 8f 0e e2 af a5 23
>1a56b8		8f 08 e2 af a5 25 8f 0a e2 af ea ea ea e2 20 af
>1a56c8		04 e2 af 89 07 f0 01 00 c2 20 af 08 e2 af 85 23
>1a56d8		af 0a e2 af 85 25 28 60 08 e2 20 a9 01 8f 01 e2
>1a56e8		af a9 02 8f 00 e2 af c2 20 a9 00 a0 8f 0c e2 af
>1a56f8		a9 00 00 8f 0e e2 af a5 23 8f 08 e2 af a5 25 8f
>1a5708		0a e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af
>1a5718		85 25 28 60 08 c2 20 a5 23 d0 0a a5 25 29 ff 7f
>1a5728		d0 03 28 38 60 28 18 60 08 e2 20 38 e9 30 20 f8
>1a5738		04 c2 20 29 ff 00 18 65 23 85 23 a5 25 69 00 00
>1a5748		85 25 28 60 08 e2 20 c9 30 90 04 c9 3a 90 1c c9
>1a5758		61 90 04 c9 67 90 0a c9 41 90 04 c9 47 90 07 80
>1a5768		31 38 e9 57 80 08 38 e9 37 80 03 38 e9 30 06 23
>1a5778		26 24 26 25 26 26 06 23 26 24 26 25 26 26 06 23
>1a5788		26 24 26 25 26 26 06 23 26 24 26 25 26 26 05 23
>1a5798		85 23 28 60 08 e2 20 c9 30 f0 06 c9 31 f0 0a 80
>1a57a8		0f c2 20 06 23 26 25 80 07 c2 20 38 26 23 26 25
>1a57b8		28 60 08 e2 30 a5 61 f0 0d aa a5 69 d0 15 a9 00
>1a57c8		8f 01 e2 af 80 15 e2 20 a9 03 8f 01 e2 af ea ea
>1a57d8		ea 80 62 e2 20 a9 01 8f 01 e2 af e2 20 a9 43 8f
>1a57e8		00 e2 af c2 20 a9 00 10 8f 08 e2 af a9 00 00 8f
>1a57f8		0a e2 af c2 20 a9 00 a0 8f 0c e2 af a9 00 00 8f
>1a5808		0e e2 af ea ea ea ca f0 2c af 08 e2 af 8f 0c 08
>1a5818		00 af 0a e2 af 8f 0e 08 00 e2 20 a9 42 8f 00 e2
>1a5828		af c2 20 af 0c 08 00 8f 08 e2 af af 0e 08 00 8f
>1a5838		0a e2 af 80 be c2 20 af 08 e2 af 85 23 af 0a e2
>1a5848		af 85 25 e2 20 a9 01 85 27 28 60 08 c2 20 a5 5d
>1a5858		85 23 a5 5f 85 25 20 6c 5a c2 20 a5 23 85 29 a5
>1a5868		25 85 2b c2 20 a5 59 85 23 a5 5b 85 25 20 94 55
>1a5878		c2 20 a5 55 85 29 a5 57 85 2b 20 49 55 c2 20 a5
>1a5888		23 85 29 a5 25 85 2b 20 ba 57 20 df 55 c2 20 a5
>1a5898		65 f0 07 a5 25 09 00 80 85 25 e2 20 a9 01 85 27
>1a58a8		28 60 5a 08 c2 30 64 23 64 25 64 55 64 57 64 65
>1a58b8		64 59 64 5b a9 01 00 85 5d 64 5f 64 61 64 63 64
>1a58c8		69 e2 20 a0 00 00 b7 00 c9 2b f0 33 c9 2d f0 2b
>1a58d8		c9 26 f0 3a 20 79 04 90 03 82 ac 00 08 c2 20 48
>1a58e8		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>1a58f8		29 ff 00 20 6c 1d e2 20 dc d4 08 a9 01 85 65 c8
>1a5908		b7 00 c9 26 f0 08 20 79 04 90 d1 82 7a 00 c8 b7
>1a5918		00 c9 68 f0 0e c9 48 f0 0a c9 62 f0 4c c9 42 f0
>1a5928		48 80 b9 c8 b7 00 20 8a 04 b0 02 80 af 20 4c 57
>1a5938		c8 b7 00 20 8a 04 b0 f5 e2 20 a5 65 f0 11 c2 20
>1a5948		38 a9 00 00 e5 23 85 23 a9 00 00 e5 25 85 25 e2
>1a5958		20 a9 00 85 27 c2 20 18 98 65 00 85 00 a5 02 69
>1a5968		00 00 85 02 e2 20 28 7a 60 c8 b7 00 c9 30 f0 07
>1a5978		c9 31 f0 03 82 65 ff 20 9c 57 c8 b7 00 c9 30 f0
>1a5988		f6 c9 31 f0 f2 82 b0 ff 20 30 57 c8 b7 00 c9 2e
>1a5998		f0 08 20 79 04 b0 f1 82 9e ff c2 20 20 6c 5a c2
>1a59a8		20 a5 23 85 55 a5 25 85 57 64 23 64 25 e2 20 80
>1a59b8		36 20 30 57 c2 20 a5 5f 8f 00 01 00 a9 0a 00 8f
>1a59c8		02 01 00 af 04 01 00 85 5f a5 5d 8f 00 01 00 a9
>1a59d8		0a 00 8f 02 01 00 af 04 01 00 85 5d af 06 01 00
>1a59e8		18 65 5f 85 5f e2 20 c8 b7 00 c9 65 f0 24 c9 45
>1a59f8		f0 20 20 79 04 b0 ba c2 20 20 6c 5a c2 20 a5 23
>1a5a08		85 59 a5 25 85 5b 64 23 64 25 20 53 58 e2 20 82
>1a5a18		43 ff c2 20 20 6c 5a c2 20 a5 23 85 59 a5 25 85
>1a5a28		5b 64 23 64 25 e2 20 c8 b7 00 c9 2b f0 10 c9 2d
>1a5a38		f0 08 20 79 04 b0 12 82 a2 fe a9 01 85 69 c8 b7
>1a5a48		00 20 79 04 b0 03 82 93 fe 20 30 57 c8 b7 00 20
>1a5a58		79 04 b0 f5 c2 20 a5 23 85 61 a5 25 85 63 20 53
>1a5a68		58 82 f1 fe 08 20 fa 54 28 60 08 c2 20 a9 69 5d
>1a5a78		85 29 a9 1a 00 85 2b e2 20 a9 01 85 2d c2 20 20
>1a5a88		45 5b c9 ff ff d0 0c a9 00 00 8d 23 08 8d 25 08
>1a5a98		82 a1 00 f4 00 00 f4 00 00 f4 00 00 e2 20 ad 26
>1a5aa8		08 29 80 83 01 ad 25 08 2a ad 26 08 2a 83 02 a9
>1a5ab8		00 83 06 ad 25 08 09 80 83 05 ad 24 08 83 04 ad
>1a5ac8		23 08 83 03 a3 02 c9 96 f0 3a 90 1f 08 c2 20 48
>1a5ad8		a9 00 08 5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20
>1a5ae8		29 ff 00 20 6c 1d e2 20 dc d4 08 c2 20 a3 05 4a
>1a5af8		83 05 a3 03 6a 83 03 e2 20 a3 02 1a 83 02 c9 96
>1a5b08		f0 02 80 e7 a3 01 f0 1b c2 20 a3 03 49 ff ff 18
>1a5b18		69 01 00 8d 23 08 a3 05 49 ff ff 69 00 00 8d 25
>1a5b28		08 80 0c c2 20 a3 03 8d 23 08 a3 05 8d 25 08 c2
>1a5b38		20 68 68 68 e2 20 a9 00 8d 27 08 28 60 da 08 c2
>1a5b48		20 a5 25 48 a5 23 48 20 3e 55 20 1c 57 b0 11 a5
>1a5b58		25 89 00 80 d0 05 a9 01 00 80 08 a9 ff ff 80 03
>1a5b68		a9 00 00 fa 86 23 fa 86 25 28 fa 60 08 c2 30 20
>1a5b78		45 5b c9 ff ff d0 05 20 ab 05 80 03 20 bd 05 28
>1a5b88		60 08 c2 30 20 45 5b c9 01 00 d0 05 20 ab 05 80
>1a5b98		03 20 bd 05 28 60 08 c2 30 20 45 5b c9 00 00 d0
>1a5ba8		05 20 ab 05 80 03 20 bd 05 28 60 08 c2 30 20 45
>1a5bb8		5b c9 01 00 f0 05 20 ab 05 80 03 20 bd 05 28 60
>1a5bc8		08 c2 30 20 45 5b c9 ff ff f0 05 20 ab 05 80 03
>1a5bd8		20 bd 05 28 60 08 c2 30 20 45 5b c9 00 00 f0 05
>1a5be8		20 ab 05 80 03 20 bd 05 28 60 08 e2 20 97 23 c8
>1a5bf8		a9 00 97 23 28 60 da 08 e2 20 c9 80 90 0a 48 a9
>1a5c08		2d 20 f2 5b 68 49 ff 1a c2 30 29 ff 00 c9 64 00
>1a5c18		90 0e a2 64 00 20 e3 54 18 69 30 00 20 f2 5b 8a
>1a5c28		a2 0a 00 20 e3 54 18 69 30 00 20 f2 5b 8a 18 69
>1a5c38		30 00 20 f2 5b 28 fa 60 08 e2 20 c2 10 a0 00 00
>1a5c48		b7 23 f0 03 c8 80 f9 28 60 08 e2 20 c2 10 f4 00
>1a5c58		00 f4 00 00 f4 00 00 20 1c 57 90 19 20 7a 14 e2
>1a5c68		20 a0 00 00 a9 20 97 16 c8 a9 30 97 16 c8 a9 00
>1a5c78		97 16 82 ce 00 e2 20 a5 26 10 08 29 7f 85 26 a9
>1a5c88		01 83 01 c2 20 a9 00 00 83 03 c2 20 af 65 5d 1a
>1a5c98		85 29 af 67 5d 1a 85 2b 20 45 5b 89 00 80 d0 12
>1a5ca8		20 e0 56 a3 03 1a 83 03 20 45 5b c9 ff ff f0 12
>1a5cb8		80 ee 20 97 56 a3 03 3a 83 03 20 45 5b c9 ff ff
>1a5cc8		f0 f0 e2 30 a5 25 0a a5 26 2a 83 05 38 a9 96 e3
>1a5cd8		05 aa f0 0f a5 25 09 80 85 25 46 25 66 24 66 23
>1a5ce8		ca d0 f7 c2 10 e2 20 64 26 a9 00 85 27 a3 01 f0
>1a5cf8		11 c2 20 38 a9 00 00 e5 23 85 23 a9 00 00 e5 25
>1a5d08		85 25 20 d9 14 c2 20 a5 16 85 23 a5 18 85 25 20
>1a5d18		40 5c e2 20 c8 a9 00 97 23 88 88 b7 23 c8 97 23
>1a5d28		c0 02 00 d0 f4 a9 2e 97 23 e2 20 18 a3 03 69 05
>1a5d38		83 06 f0 19 20 40 5c a9 45 20 f2 5b a3 06 20 fe
>1a5d48		5b 80 0a c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9
>1a5d58		02 85 27 c2 20 3b 18 69 06 00 1b 28 60 00 50 c3
>1a5d68		47 00 00 80 3f f3 04 b5 3f f3 04 35 3f e2 20 a9
>1a5d78		48 8f 00 e2 af c2 20 bd 00 00 8f 08 e2 af bd 02
>1a5d88		00 8f 0a e2 af 88 e8 e8 e8 e8 e2 20 a9 00 8f 01
>1a5d98		e2 af c2 20 af 23 08 00 8f 0c e2 af af 25 08 00
>1a5da8		8f 0e e2 af ea ea ea af 08 e2 af 48 af 0a e2 af
>1a5db8		8f 0a e2 af 68 8f 08 e2 af e2 20 a9 02 8f 01 e2
>1a5dc8		af c2 20 bd 00 00 8f 0c e2 af bd 02 00 8f 0e e2
>1a5dd8		af ea ea ea 88 f0 14 af 08 e2 af 48 af 0a e2 af
>1a5de8		8f 0a e2 af 68 8f 08 e2 af 80 9b af 08 e2 af 8f
>1a5df8		23 08 00 af 0a e2 af 8f 25 08 00 60 e2 20 a9 00
>1a5e08		8f 00 e2 af a9 00 8f 01 e2 af c2 20 a5 23 8f 08
>1a5e18		e2 af 8f 0c e2 af af 25 08 00 8f 0a e2 af 8f 0e
>1a5e28		e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85
>1a5e38		25 60 e2 20 a9 00 8f 00 e2 af a9 01 8f 01 e2 af
>1a5e48		c2 20 a5 23 8f 0c e2 af af 25 08 00 8f 0e e2 af
>1a5e58		af 8e 64 1a 8f 08 e2 af af 90 64 1a 8f 0a e2 af
>1a5e68		ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 60
>1a5e78		a2 00 00 a5 23 c5 29 a5 25 e5 2b 90 1e a5 23 8f
>1a5e88		08 e2 af a5 25 8f 0a e2 af ea ea ea af 08 e2 af
>1a5e98		85 23 af 0a e2 af 85 25 e8 80 d8 60 e2 20 a5 26
>1a5ea8		10 09 29 7f 85 26 a9 01 48 80 03 a9 00 48 a9 40
>1a5eb8		8f 00 e2 af a9 02 8f 01 e2 af c2 30 af f6 64 1a
>1a5ec8		85 29 8f 0c e2 af af f8 64 1a 85 2b 8f 0e e2 af
>1a5ed8		20 78 5e e2 20 68 c2 20 f0 1e a5 23 8f 08 e2 af
>1a5ee8		a5 25 8f 0a e2 af ea ea ea af 08 e2 af 85 23 af
>1a5ef8		0a e2 af 29 ff 7f 85 25 60 5a a2 00 00 a0 00 00
>1a5f08		a5 23 df fa 64 1a a5 25 ff fc 64 1a 90 2c bf f6
>1a5f18		64 1a 8f 08 e2 af bf f8 64 1a 8f 0a e2 af a5 23
>1a5f28		8f 0c e2 af a5 25 8f 0e e2 af ea ea ea af 08 e2
>1a5f38		af 85 23 af 0a e2 af 85 25 38 98 2a a8 e8 e8 e8
>1a5f48		e8 e0 0c 00 d0 ba 98 aa 7a 60 08 c2 30 48 da 20
>1a5f58		04 5e 8b e2 20 a9 1a 48 ab c2 20 a2 36 64 5a a0
>1a5f68		05 00 20 75 5d 7a a9 01 00 8f 27 08 00 ab fa 68
>1a5f78		28 60 08 c2 30 48 da a5 23 85 29 a5 25 85 2b 20
>1a5f88		04 5e 8b e2 20 a9 1a 48 ab c2 20 a2 4a 64 5a a0
>1a5f98		05 00 20 75 5d 7a ab 20 df 55 fa 68 28 60 08 c2
>1a5fa8		30 48 da a5 23 85 29 a5 25 85 2b 20 04 5e 8b e2
>1a5fb8		20 a9 1a 48 ab c2 20 a2 5e 64 5a a0 05 00 20 75
>1a5fc8		5d 7a ab 20 df 55 fa 68 28 60 08 c2 30 48 da e2
>1a5fd8		20 a9 40 8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5
>1a5fe8		23 8f 08 e2 af a5 25 8f 0a e2 af af 8e 64 1a 8f
>1a5ff8		0c e2 af af 90 64 1a 8f 0e e2 af ea ea ea af 08
>1a6008		e2 af 85 0c af 0a e2 af 85 0e e2 20 a9 48 8f 00
>1a6018		e2 af c2 20 ea ea ea af 08 e2 af 85 10 af 0a e2
>1a6028		af 85 12 e2 20 a9 01 8f 01 e2 af c2 20 a5 0c 8f
>1a6038		08 e2 af a5 0e 8f 0a e2 af a5 10 8f 0c e2 af a5
>1a6048		12 8f 0e e2 af ea ea ea af 08 e2 af 85 23 af 0a
>1a6058		e2 af 85 25 e2 20 a9 08 8f 00 e2 af a9 02 8f 01
>1a6068		e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af
>1a6078		ea ea ea af 08 e2 af 85 29 af 0a e2 af 85 2b 20
>1a6088		04 5e 8b e2 20 a9 1a 48 ab c2 20 a2 72 64 5a a0
>1a6098		08 00 20 75 5d 7a a9 01 00 8f 27 08 00 8f 2d 08
>1a60a8		00 20 df 55 ab fa 68 28 60 08 c2 30 48 da 20 a4
>1a60b8		5e 20 01 5f da 8a 29 01 00 d0 05 20 7a 5f 80 03
>1a60c8		20 52 5f fa 8a 29 04 00 f0 0a e2 20 a5 26 09 80
>1a60d8		85 26 c2 20 fa 68 28 60 08 c2 30 48 da 20 a4 5e
>1a60e8		20 01 5f da 8a 29 01 00 d0 05 20 52 5f 80 03 20
>1a60f8		7a 5f fa 8a 29 02 00 f0 0a e2 20 a5 26 09 80 85
>1a6108		26 c2 20 fa 68 28 60 08 c2 30 48 da 20 a4 5e 20
>1a6118		01 5f 20 a6 5f 8a 29 01 00 f0 03 20 3a 5e 8a e2
>1a6128		20 4a 4a 69 00 29 01 f0 06 a5 26 09 80 85 26 c2
>1a6138		20 fa 68 28 60 08 c2 30 48 da 5a a5 25 10 1f 08
>1a6148		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 17 8f d3 08
>1a6158		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 c2 30
>1a6168		a5 23 cf 8e 64 1a a5 25 cf 90 64 1a b0 04 20 3a
>1a6178		5e 18 a9 00 00 a8 2a 48 e2 20 a9 00 8f 00 e2 af
>1a6188		a9 01 8f 01 e2 af c2 20 af e6 64 1a 85 29 8f 0c
>1a6198		e2 af af e8 64 1a 85 2b 8f 0e e2 af 20 78 5e 8a
>1a61a8		f0 07 0a 0a 0a 0a 0a 0a a8 af ea 64 1a 85 29 8f
>1a61b8		0c e2 af af ec 64 1a 85 2b 8f 0e e2 af 20 78 5e
>1a61c8		8a f0 0b 0a 0a 0a 0a 85 29 18 98 65 29 a8 af ee
>1a61d8		64 1a 85 29 8f 0c e2 af af f0 64 1a 85 2b 8f 0e
>1a61e8		e2 af 20 78 5e 8a f0 09 0a 0a 85 29 18 98 65 29
>1a61f8		a8 af f2 64 1a 85 29 8f 0c e2 af af f4 64 1a 85
>1a6208		2b 8f 0e e2 af 20 78 5e 86 29 18 98 65 29 a8 20
>1a6218		d2 5f a5 23 85 29 a5 25 85 2b 98 85 23 64 25 20
>1a6228		6c 5a 20 49 55 68 d0 07 a5 25 09 00 80 85 25 7a
>1a6238		fa 68 28 60 08 c2 30 48 da a5 23 85 29 a5 25 85
>1a6248		2b 20 04 5e 8b e2 20 a9 1a 48 ab c2 20 a2 96 64
>1a6258		a0 05 00 20 75 5d ab 20 df 55 fa 68 28 60 08 c2
>1a6268		30 48 da 20 3c 62 af fe 64 1a 85 29 af 00 65 1a
>1a6278		85 2b 20 3e 55 a5 25 49 00 80 85 25 fa 68 28 60
>1a6288		08 c2 30 48 da a5 23 85 29 a5 25 85 2b 20 04 5e
>1a6298		8b e2 20 a9 1a 48 ab c2 20 a2 aa 64 a0 05 00 20
>1a62a8		75 5d ab 20 df 55 fa 68 28 60 c2 20 a5 23 85 29
>1a62b8		a5 25 85 2b c2 20 af 8e 64 1a 85 23 af 90 64 1a
>1a62c8		85 25 8a f0 30 4a aa 90 03 20 df 55 c2 20 a5 25
>1a62d8		48 a5 23 48 c2 20 a5 29 85 23 a5 2b 85 25 20 04
>1a62e8		5e c2 20 a5 23 85 29 a5 25 85 2b c2 20 68 85 23
>1a62f8		68 85 25 80 cd 60 08 c2 30 48 da 8b e2 20 a9 1a
>1a6308		48 ab c2 20 a2 be 64 5a a0 0a 00 20 75 5d 7a ab
>1a6318		fa 68 28 60 08 c2 30 48 da 5a a5 23 05 25 d0 10
>1a6328		c2 20 af 8e 64 1a 85 23 af 90 64 1a 85 25 80 61
>1a6338		a5 25 29 00 80 a8 f0 07 a5 25 29 ff 7f 85 25 c2
>1a6348		20 a5 25 48 a5 23 48 20 cf 05 a6 23 20 3d 07 c2
>1a6358		20 a5 23 85 29 a5 25 85 2b c2 20 68 85 23 68 85
>1a6368		25 20 3e 55 20 fe 62 c2 20 a5 25 48 a5 23 48 c2
>1a6378		20 af f2 64 1a 85 23 af f4 64 1a 85 25 20 b2 62
>1a6388		c2 20 68 85 29 68 85 2b 20 df 55 98 f0 03 20 3a
>1a6398		5e 7a fa 68 28 60 08 c2 30 48 a5 25 10 1f 08 c2
>1a63a8		20 48 a9 00 08 5b 68 28 e2 20 a9 17 8f d3 08 00
>1a63b8		c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 c2 30 05
>1a63c8		23 f0 68 c2 20 af 92 64 1a 85 29 af 94 64 1a 85
>1a63d8		2b e2 20 a9 01 85 2d c2 20 c2 20 a5 25 48 a5 23
>1a63e8		48 20 94 55 a5 25 c5 2b d0 09 a5 23 45 29 29 f8
>1a63f8		ff f0 30 20 49 55 c2 20 af 92 64 1a 85 29 af 94
>1a6408		64 1a 85 2b 20 94 55 c2 20 a5 23 85 29 a5 25 85
>1a6418		2b c2 20 68 85 23 68 85 25 c2 20 a5 25 48 a5 23
>1a6428		48 80 be c2 20 68 85 29 68 85 2b 68 28 60 01 0d
>1a6438		d0 37 61 0b b6 ba ab aa 2a 3d 00 00 00 bf 00 00
>1a6448		80 3f 1d ef 38 36 01 0d 50 b9 89 88 08 3c ab aa
>1a6458		2a be 00 00 80 3f a4 27 b3 3c d1 0d 5d 3d 89 88
>1a6468		08 3e ab aa aa 3e 00 00 80 3f 89 88 88 3d d9 89
>1a6478		9d 3d 8c 2e ba 3d 39 8e e3 3d 25 49 12 3e cd cc
>1a6488		4c 3e ab aa aa 3e 00 00 80 3f 00 00 00 40 8e e3
>1a6498		f8 3c 6e db 36 3d 9a 99 99 3d ab aa 2a 3e 00 00
>1a64a8		80 3f 39 8e e3 3d 25 49 12 be cd cc 4c 3e ab aa
>1a64b8		aa be 00 00 80 3f 1d ef 38 36 01 0d d0 37 01 0d
>1a64c8		50 39 61 0b b6 3a 89 88 08 3c ab aa 2a 3d ab aa
>1a64d8		2a 3e 00 00 00 3f 00 00 80 3f 00 00 80 3f c1 2c
>1a64e8		a1 6d 5f 97 07 4b 81 64 5a 42 54 f8 2d 40 db 0f
>1a64f8		c9 40 db 0f 49 40 db 0f c9 3f db 0f 49 3f 08 20
>1a6508		88 12 c2 20 a9 01 00 85 23 a9 00 00 85 25 e2 20
>1a6518		af 00 4d 00 c2 20 29 ff 00 85 8f a8 a2 01 00 c2
>1a6528		20 bf 00 4d 00 85 29 a9 00 00 85 2b 20 68 27 e8
>1a6538		e8 88 d0 eb c2 20 a9 04 00 85 29 a9 00 00 85 2b
>1a6548		20 68 27 e2 20 af 00 4d 00 85 0c a9 00 85 0d c2
>1a6558		20 06 0c 38 a5 23 65 0c 85 23 a5 25 69 00 00 85
>1a6568		25 d0 29 e2 20 a5 ea 09 80 a6 23 20 4c 10 e2 20
>1a6578		af 00 4d 00 87 c0 a0 01 00 a2 00 00 e2 20 bf 01
>1a6588		4d 00 97 c0 e4 8f f0 23 e8 c8 80 f0 08 c2 20 48
>1a6598		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>1a65a8		29 ff 00 20 6c 1d e2 20 dc d4 08 e2 20 38 a5 c0
>1a65b8		67 c0 85 08 a5 c1 69 00 85 09 a5 c2 69 00 85 0a
>1a65c8		64 0b c2 20 a0 05 00 b7 c3 85 0c e2 20 c8 c8 b7
>1a65d8		c3 85 0e 64 0f e2 20 a9 00 87 08 c2 20 18 a5 08
>1a65e8		69 01 00 85 08 a5 0a 69 00 00 85 0a c5 0e d0 e5
>1a65f8		a5 08 c5 0c d0 df 28 60 08 c2 20 64 08 64 0a e2
>1a6608		20 af 00 4d 00 85 8f 64 90 a2 01 00 e2 20 a7 c0
>1a6618		c5 8f f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a6628		a9 0a 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>1a6638		dc d4 08 c9 01 f0 3a a0 01 00 e2 20 bf 00 4d 00
>1a6648		85 23 64 24 64 25 64 26 b7 c0 85 29 64 2a 64 2b
>1a6658		64 2c a5 23 c5 29 b0 68 20 68 27 c2 20 18 a5 08
>1a6668		65 23 85 08 a5 0a 65 25 85 0a e8 e8 c8 c4 8f d0
>1a6678		c9 e2 20 18 bf 00 4d 00 85 90 65 08 85 08 a5 09
>1a6688		69 00 85 09 c2 20 a5 0a 69 00 00 85 0a c2 20 06
>1a6698		08 26 0a 06 08 26 0a e2 20 38 a5 08 65 8f 85 08
>1a66a8		a5 09 69 00 85 09 c2 20 a5 0a 69 00 00 85 0a 18
>1a66b8		a5 08 65 c0 85 08 e2 20 a5 0a 65 c2 85 0a 28 60
>1a66c8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>1a66d8		08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 08
>1a66e8		20 88 12 e2 20 a0 00 00 b7 c3 29 7f c5 27 d0 28
>1a66f8		a5 27 48 c2 20 a5 25 48 a5 23 48 20 00 66 68 85
>1a6708		23 68 85 25 e2 20 68 85 27 c2 20 a5 23 87 08 a0
>1a6718		02 00 a5 25 97 08 28 60 08 c2 20 48 a9 00 08 5b
>1a6728		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>1a6738		6c 1d e2 20 dc d4 08 08 20 88 12 f4 00 00 f4 00
>1a6748		00 e2 20 48 20 00 66 e2 20 68 c2 20 68 68 c2 20
>1a6758		a7 08 85 23 a0 02 00 b7 08 85 25 e2 20 a0 00 00
>1a6768		b7 c3 29 7f 85 27 28 60 da 0b 08 08 c2 20 48 a9
>1a6778		00 08 5b 68 28 c2 30 a5 25 89 f0 ff d0 29 89 0f
>1a6788		00 d0 0c a5 23 89 00 fc d0 05 20 e1 44 80 2e a2
>1a6798		0a 00 46 25 66 23 ca d0 f9 20 e1 44 e2 20 a9 4b
>1a67a8		20 18 00 c2 20 80 16 a2 14 00 46 25 66 23 ca d0
>1a67b8		f9 20 e1 44 e2 20 a9 4d 20 18 00 c2 20 28 2b fa
>1a67c8		60 0b 08 c2 30 a9 00 00 8f b6 08 00 8f b8 08 00
>1a67d8		e2 20 20 8c 21 c9 00 f0 08 20 1a 1c 20 61 06 80
>1a67e8		11 c2 20 a9 00 00 85 23 85 25 e2 20 a9 02 85 27
>1a67f8		c2 20 20 2a 69 22 08 11 00 b0 22 20 db 69 08 c2
>1a6808		20 48 a9 00 08 5b 68 28 e2 20 a9 10 8f d3 08 00
>1a6818		c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 20 55 03
>1a6828		08 c2 20 48 a9 20 03 5b 68 28 e2 20 a0 00 00 b7
>1a6838		18 d0 03 82 a9 00 c9 e5 d0 03 82 96 00 a0 0b 00
>1a6848		b7 18 89 08 f0 03 82 a9 00 89 02 f0 03 82 83 00
>1a6858		29 0f c9 0f d0 03 82 7a 00 a0 00 00 b7 18 20 18
>1a6868		00 c8 c0 08 00 d0 f5 a9 20 20 18 00 a0 08 00 b7
>1a6878		18 20 18 00 c8 c0 0b 00 d0 f5 a9 09 20 18 00 a0
>1a6888		0b 00 b7 18 89 10 d0 1e c2 20 a0 1c 00 b7 18 8f
>1a6898		23 08 00 c8 c8 b7 18 8f 25 08 00 e2 20 a9 00 8f
>1a68a8		27 08 00 20 70 67 a9 09 20 18 00 a0 0b 00 b7 18
>1a68b8		89 08 d0 1c 89 01 f0 05 a9 52 20 18 00 89 04 f0
>1a68c8		05 a9 53 20 18 00 89 10 f0 05 a9 44 20 18 00 ea
>1a68d8		20 55 03 20 6c 03 22 0c 11 00 90 03 82 41 ff 20
>1a68e8		db 69 08 c2 20 48 a9 00 08 5b 68 28 20 70 20 28
>1a68f8		2b 60 08 c2 20 48 a9 20 03 5b 68 28 e2 20 29 0f
>1a6908		c9 0f f0 cf a9 5b 20 18 00 a0 00 00 b7 18 c9 20
>1a6918		f0 09 20 18 00 c8 c0 08 00 d0 f1 a9 5d 20 18 00
>1a6928		80 ae 0b 08 08 c2 20 48 a9 20 03 5b 68 28 c2 30
>1a6938		a9 73 f2 85 20 a9 1a 00 85 22 a0 00 00 e2 20 a9
>1a6948		00 97 20 c8 c0 1e 00 d0 f8 c2 20 a9 73 f0 8f 81
>1a6958		f2 1a a9 1a 00 8f 83 f2 1a af 23 08 00 8f 75 f2
>1a6968		1a af 25 08 00 8f 77 f2 1a 28 2b 60 08 c2 30 20
>1a6978		4c 20 20 1a 1c 20 61 06 20 2a 69 e2 20 a9 2c 85
>1a6988		37 20 6d 21 b0 0f c2 20 a9 ff ff 8f 54 03 00 8f
>1a6998		56 03 00 80 17 20 2b 20 20 1a 1c 20 cf 05 c2 20
>1a69a8		a5 23 8f 54 03 00 a5 25 8f 56 03 00 22 18 11 00
>1a69b8		b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11
>1a69c8		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>1a69d8		08 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a69e8		08 e2 20 48 a9 00 48 ab 68 28 e2 20 af 2e 03 00
>1a69f8		85 23 a9 00 85 24 85 25 85 26 a9 00 85 27 85 ea
>1a6a08		a9 1a 85 e9 c2 20 a9 3e 6a 85 e7 20 eb 51 e2 20
>1a6a18		af 20 03 00 85 23 a9 00 85 24 85 25 85 26 a9 00
>1a6a28		85 27 85 ea a9 1a 85 e9 c2 20 a9 46 6a 85 e7 20
>1a6a38		eb 51 28 2b ab 60 44 4f 53 53 54 41 54 00 42 49
>1a6a48		4f 53 53 54 41 54 00 08 c2 30 20 4c 20 20 1a 1c
>1a6a58		20 61 06 a5 23 8f 60 03 00 a5 25 8f 62 03 00 a9
>1a6a68		ff ff 8f 54 03 00 8f 56 03 00 22 24 11 00 b0 25
>1a6a78		20 6c 1d 20 db 69 08 c2 20 48 a9 00 08 5b 68 28
>1a6a88		e2 20 a9 11 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>1a6a98		e2 20 dc d4 08 20 6c 1d 28 60 08 c2 30 20 4c 20
>1a6aa8		20 1a 1c 20 61 06 20 2a 69 a9 00 00 8f 54 03 00
>1a6ab8		a9 01 00 8f 56 03 00 20 bc 4e 22 18 11 00 b0 22
>1a6ac8		20 db 69 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a6ad8		11 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc
>1a6ae8		d4 08 20 db 69 c2 20 a2 12 00 18 bf 73 f2 1a 69
>1a6af8		00 00 85 92 bf 75 f2 1a 69 01 00 85 94 e2 20 a9
>1a6b08		00 87 92 c2 20 a9 00 00 85 7a a9 01 00 85 7c a2
>1a6b18		00 00 e2 20 a7 7a f0 2a c9 0d f0 12 c9 0a f0 04
>1a6b28		9d 00 4f e8 c2 20 e6 7a d0 e8 e6 7c 80 e4 e2 20
>1a6b38		a9 00 9d 00 4f 20 9b 26 c2 20 e6 7a d0 d1 e6 7c
>1a6b48		80 cd e0 00 00 f0 0a e2 20 a9 00 9d 00 4f 20 9b
>1a6b58		26 28 60 08 c2 30 20 4c 20 20 1a 1c 20 61 06 20
>1a6b68		2a 69 e2 20 a9 2c 20 38 21 c2 20 20 1a 1c 20 cf
>1a6b78		05 a5 23 8f 50 03 00 a5 25 8f 52 03 00 e2 20 a9
>1a6b88		2c c2 20 20 38 21 20 1a 1c 20 cf 05 a5 23 8f 58
>1a6b98		03 00 a5 25 8f 5a 03 00 22 1c 11 00 b0 22 20 db
>1a6ba8		69 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f
>1a6bb8		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>1a6bc8		20 db 69 28 60 da 5a 08 a2 00 00 a0 00 00 e2 20
>1a6bd8		b7 23 9d 00 04 f0 04 e8 c8 80 f5 28 7a fa 60 08
>1a6be8		c2 30 20 4c 20 20 1a 1c 20 61 06 20 2a 69 a9 00
>1a6bf8		00 85 a6 e2 20 a9 01 85 a8 a9 20 85 b4 c2 20 a9
>1a6c08		00 00 85 ab a9 ff ff 85 a9 c2 20 a9 00 00 85 55
>1a6c18		85 57 a9 ff ff 85 59 a9 ff 7f 85 5b 20 dc 17 e2
>1a6c28		20 a9 80 85 b4 c2 20 c6 ab 18 a9 00 00 8f 50 03
>1a6c38		00 65 ab 8f 58 03 00 a9 01 00 8f 52 03 00 69 00
>1a6c48		00 8f 5a 03 00 22 1c 11 00 b0 22 20 db 69 08 c2
>1a6c58		20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f d3 08 00
>1a6c68		c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 20 db 69
>1a6c78		28 60 08 c2 30 20 4c 20 20 1a 1c 20 61 06 20 cd
>1a6c88		6b 22 04 11 00 b0 22 20 db 69 08 c2 20 48 a9 00
>1a6c98		08 5b 68 28 e2 20 a9 13 8f d3 08 00 c2 20 29 ff
>1a6ca8		00 20 6c 1d e2 20 dc d4 08 20 db 69 28 60 da 08
>1a6cb8		e2 20 c9 61 90 08 c9 7b b0 04 29 df 80 13 c9 20
>1a6cc8		90 13 a2 00 00 df e1 6c 1a f0 0a e8 e0 0f 00 d0
>1a6cd8		f4 28 38 fa 6b 28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c
>1a6ce8		3d 3e 3f 5c 5b 5d 7c 22 08 08 c2 20 48 a9 00 08
>1a6cf8		5b 68 28 c2 30 20 1a 1c 20 61 06 20 cd 6b 22 10
>1a6d08		11 00 b0 22 20 db 69 08 c2 20 48 a9 00 08 5b 68
>1a6d18		28 e2 20 a9 14 8f d3 08 00 c2 20 29 ff 00 20 6c
>1a6d28		1d e2 20 dc d4 08 e2 20 a9 2c 20 38 21 c2 20 20
>1a6d38		1a 1c 20 61 06 ad 38 03 85 08 ad 3a 03 85 0a e2
>1a6d48		20 a2 00 00 a9 20 95 7e e8 e0 0b 00 d0 f8 a2 00
>1a6d58		00 a0 00 00 b7 23 f0 76 c9 2e f0 39 22 b6 6c 1a
>1a6d68		b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>1a6d78		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>1a6d88		08 95 7e c8 e8 c0 08 00 d0 ca b7 23 f0 40 c9 2e
>1a6d98		f0 03 c8 80 f5 c8 a2 08 00 b7 23 f0 31 22 b6 6c
>1a6da8		1a b0 22 20 db 69 08 c2 20 48 a9 00 08 5b 68 28
>1a6db8		e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>1a6dc8		e2 20 dc d4 08 95 7e c8 e8 c0 0c 00 d0 cb a2 00
>1a6dd8		00 a0 00 00 b5 7e 97 08 e8 c8 c0 0b 00 d0 f5 22
>1a6de8		14 11 00 b0 22 20 db 69 08 c2 20 48 a9 00 08 5b
>1a6df8		68 28 e2 20 a9 15 8f d3 08 00 c2 20 29 ff 00 20
>1a6e08		6c 1d e2 20 dc d4 08 20 db 69 28 60 08 08 c2 20
>1a6e18		48 a9 00 08 5b 68 28 c2 30 20 1a 1c 20 61 06 a5
>1a6e28		23 8f 64 03 00 a5 25 8f 66 03 00 e2 20 a9 2c 20
>1a6e38		38 21 c2 20 20 1a 1c 20 61 06 a5 23 8f 68 03 00
>1a6e48		a5 25 8f 6a 03 00 22 30 11 00 b0 1f 08 c2 20 48
>1a6e58		a9 00 08 5b 68 28 e2 20 a9 16 8f d3 08 00 c2 20
>1a6e68		29 ff 00 20 6c 1d e2 20 dc d4 08 28 60 5c 35 88
>1a6e78		1a 5c 86 86 1a 5c 36 88 1a 5c b2 77 1a 5c 0f 78
>1a6e88		1a 5c 42 77 1a 5c c8 76 1a 5c 45 7c 1a 5c 33 73
>1a6e98		1a 5c 60 76 1a 5c 1b 76 1a 5c a5 75 1a 5c 44 87
>1a6ea8		1a 5c 41 74 1a 5c 94 72 1a 5c bf 87 1a 5c 6f 73
>1a6eb8		1a 5c 38 88 1a 5c 31 88 1a 5c 5e 75 1a 5c 39 88
>1a6ec8		1a 18 fb c2 20 a9 ff fe 1b 58 5c d6 6e 1a c2 30
>1a6ed8		22 94 72 1a 20 08 00 20 0c 00 8b e2 20 a9 00 48
>1a6ee8		ab a2 00 4f 20 e3 04 ab 22 79 6e 1a 22 81 6e 1a
>1a6ef8		80 e2 08 8b e2 20 a9 1a 48 ab c2 10 a2 0d 6f 20
>1a6f08		e2 03 ab 28 6b 41 20 3c 73 74 61 72 74 3e 20 3c
>1a6f18		61 73 73 65 6d 62 6c 79 3e 0d 20 20 41 73 73 65
>1a6f28		6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d 0d
>1a6f38		43 20 3c 73 74 61 72 74 31 3e 20 3c 73 74 61 72
>1a6f48		74 32 3e 20 5b 6c 65 6e 20 28 31 20 69 66 20 62
>1a6f58		6c 61 6e 6b 29 5d 0d 20 20 43 6f 6d 70 61 72 65
>1a6f68		20 74 6f 20 73 65 63 74 69 6f 6e 73 20 6f 66 20
>1a6f78		6d 65 6d 6f 72 79 0d 0d 44 20 3c 73 74 61 72 74
>1a6f88		3e 20 5b 65 6e 64 5d 0d 20 20 44 69 73 61 73 73
>1a6f98		65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d
>1a6fa8		0d 46 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e
>1a6fb8		20 3c 62 79 74 65 3e 0d 20 20 46 69 6c 6c 20 61
>1a6fc8		20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f 72 79
>1a6fd8		20 77 69 74 68 20 61 20 62 79 74 65 0d 0d 47 20
>1a6fe8		5b 61 64 64 72 65 73 73 5d 0d 20 20 53 74 61 72
>1a6ff8		74 20 65 78 65 63 75 74 69 6f 6e 20 61 74 20 61
>1a7008		20 6c 6f 63 61 74 69 6f 6e 0d 0d 4a 20 5b 61 64
>1a7018		64 72 65 73 73 5d 20 2d 20 4a 75 6d 70 20 74 6f
>1a7028		20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d
>1a7038		65 6d 6f 72 79 0d 20 20 4a 75 6d 70 20 74 6f 20
>1a7048		61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d 65
>1a7058		6d 6f 72 79 0d 0d 48 20 3c 73 74 61 72 74 3e 20
>1a7068		3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20 5b 62 79
>1a7078		74 65 5d 2e 2e 0d 20 20 48 75 6e 74 20 66 6f 72
>1a7088		20 76 61 6c 75 65 73 20 69 6e 20 6d 65 6d 6f 72
>1a7098		79 0d 0d 4c 20 20 20 20 20 4c 4f 41 44 20 20 20
>1a70a8		20 20 20 20 20 20 22 46 69 6c 65 22 20 5b 64 65
>1a70b8		73 74 69 6e 61 74 69 6f 6e 5d 0d 4d 20 3c 73 74
>1a70c8		61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44 75 6d
>1a70d8		70 20 74 68 65 20 76 61 6c 75 65 20 69 6e 20 6d
>1a70e8		65 6d 6f 72 79 0d 0d 52 20 2d 20 44 69 73 70 6c
>1a70f8		61 79 20 74 68 65 20 76 61 6c 75 65 73 20 6f 66
>1a7108		20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>1a7118		3b 20 3c 50 43 3e 20 3c 41 3e 20 3c 58 3e 20 3c
>1a7128		59 3e 20 3c 53 50 3e 20 3c 44 42 52 3e 20 3c 44
>1a7138		50 3e 20 3c 4e 56 4d 58 44 49 5a 43 3e 0d 20 20
>1a7148		43 68 61 6e 67 65 20 74 68 65 20 63 6f 6e 74 65
>1a7158		6e 74 73 20 6f 66 20 74 68 65 20 72 65 67 69 73
>1a7168		74 65 72 73 0d 0d 53 20 20 20 20 20 53 41 56 45
>1a7178		20 20 20 20 20 20 20 20 20 22 46 69 6c 65 22 20
>1a7188		3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 0d 54 20
>1a7198		3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c 64
>1a71a8		65 73 74 69 6e 61 74 69 6f 6e 3e 0d 20 20 54 72
>1a71b8		61 6e 73 66 65 72 20 28 63 6f 70 79 29 20 64 61
>1a71c8		74 61 20 77 69 74 68 69 6e 20 6d 65 6d 6f 72 79
>1a71d8		0d 0d 57 20 3c 62 79 74 65 3e 0d 20 20 53 65 74
>1a71e8		20 74 68 65 20 72 65 67 69 73 74 65 72 20 77 69
>1a71f8		64 74 68 20 66 6c 61 67 73 20 66 6f 72 20 74 68
>1a7208		65 20 64 69 73 61 73 73 65 6d 62 6c 65 72 0d 0d
>1a7218		58 20 2d 20 52 65 74 75 72 6e 20 74 6f 20 42 41
>1a7228		53 49 43 0d 0d 3e 20 3c 73 74 61 72 74 3e 20 3c
>1a7238		62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 2e 0d
>1a7248		20 20 45 64 69 74 20 64 61 74 61 20 69 6e 20 6d
>1a7258		65 6d 6f 72 79 0d 0d 3f 20 2d 20 44 69 73 70 6c
>1a7268		61 79 20 61 20 73 68 6f 72 74 20 68 65 6c 70 20
>1a7278		73 63 72 65 65 6e 0d 0d 00 08 08 c2 20 48 a9 48
>1a7288		08 5b 68 28 e2 20 a5 0d 85 4e 28 6b 20 aa 01 08
>1a7298		e2 20 48 a9 1a 48 ab 68 28 a2 76 88 20 e2 03 e2
>1a72a8		20 a9 3b 20 18 00 a9 20 20 18 00 c2 30 08 e2 20
>1a72b8		48 a9 00 48 ab 68 28 a0 03 00 a2 42 02 20 65 03
>1a72c8		c2 20 a9 20 00 20 18 00 af 44 02 00 20 f2 03 a9
>1a72d8		20 00 20 18 00 af 46 02 00 20 f2 03 a9 20 00 20
>1a72e8		18 00 af 48 02 00 20 f2 03 a9 20 00 20 18 00 af
>1a72f8		4a 02 00 20 f2 03 a9 20 00 20 18 00 af 4e 02 00
>1a7308		20 0c 04 a9 20 00 20 18 00 20 18 00 af 4c 02 00
>1a7318		20 f2 03 a9 20 00 20 18 00 08 e2 20 ad 4f 02 22
>1a7328		8f 85 1a 28 20 55 03 20 55 03 6b 08 0b 08 c2 20
>1a7338		48 a9 48 08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5
>1a7348		0f c5 13 d0 0e c2 20 a5 0d c5 11 d0 06 20 55 03
>1a7358		2b 28 6b c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5
>1a7368		0e 69 00 85 0e 80 d0 08 0b 08 c2 20 48 a9 48 08
>1a7378		5b 68 28 e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5
>1a7388		15 90 3d e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2
>1a7398		20 a5 0d c5 11 d0 03 4c 26 74 c2 20 18 a5 0d 69
>1a73a8		01 00 85 0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5
>1a73b8		15 69 01 00 85 15 e2 20 a5 16 69 00 85 16 80 c3
>1a73c8		c2 20 38 a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85
>1a73d8		1b c2 20 18 a5 19 65 15 85 15 e2 20 a5 1b 65 17
>1a73e8		85 17 e2 20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20
>1a73f8		a5 11 c5 0d d0 02 80 26 c2 20 38 a5 11 e9 01 00
>1a7408		85 11 e2 20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9
>1a7418		01 00 85 15 e2 20 a5 16 e9 00 85 16 80 c4 20 55
>1a7428		03 2b 28 6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9
>1a7438		a0 90 03 28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48
>1a7448		a9 48 08 5b 68 28 e2 20 a9 00 8f b6 08 00 a5 31
>1a7458		c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00 01
>1a7468		85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32
>1a7478		e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69 00 01
>1a7488		85 11 e2 20 a5 34 69 00 85 13 e2 20 a0 00 00 c2
>1a7498		20 a5 32 85 19 e2 20 a5 34 85 1b e2 20 a7 19 22
>1a74a8		2c 74 1a b0 02 a9 3f 99 7e 08 c2 20 18 a5 19 69
>1a74b8		01 00 85 19 e2 20 a5 1b 69 00 85 1b c8 c0 08 00
>1a74c8		90 db a9 00 99 7e 08 a9 3e 20 18 00 a9 20 20 18
>1a74d8		00 e2 20 a5 34 20 0c 04 a9 3a 20 18 00 c2 20 a5
>1a74e8		32 20 f2 03 c2 20 a9 08 00 85 47 e2 20 a9 20 20
>1a74f8		18 00 a7 32 20 0c 04 22 6e 85 1a e2 20 c6 47 d0
>1a7508		ea a9 20 20 18 00 a9 20 20 18 00 08 e2 20 48 a9
>1a7518		00 48 ab 68 28 a2 7e 08 20 e2 03 20 55 03 20 6c
>1a7528		03 a5 34 c5 13 90 0f c2 20 a5 32 c5 11 90 07 20
>1a7538		55 03 2b ab 28 6b 4c 92 74 08 8d 92 08 e2 20 bd
>1a7548		00 00 99 00 00 ad 92 08 f0 0a c8 e8 e8 e8 e8 ce
>1a7558		92 08 80 eb 28 6b 08 0b 8b 08 c2 20 48 a9 48 08
>1a7568		5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 a5
>1a7578		0d 85 32 a5 0f 85 34 e2 20 a5 31 3a 85 47 a2 59
>1a7588		08 a0 7e 08 22 41 75 1a a0 00 00 b9 7e 08 87 32
>1a7598		22 6e 85 1a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b 8b
>1a75a8		08 c2 20 48 a9 48 08 5b 68 28 08 e2 20 48 a9 00
>1a75b8		48 ab 68 28 e2 20 c2 10 a5 31 3a 3a 85 47 a2 5d
>1a75c8		08 a0 7e 08 22 41 75 1a c2 20 a5 0d 85 32 a5 0f
>1a75d8		85 34 c2 20 a5 34 c5 13 d0 06 a5 32 c5 11 f0 2c
>1a75e8		e2 20 a0 00 00 b7 32 d9 7e 08 d0 1a c8 c4 47 d0
>1a75f8		f4 c2 20 a5 32 85 4a a5 34 85 4c 22 18 80 1a e2
>1a7608		20 a9 20 20 18 00 22 6e 85 1a 80 c6 20 55 03 ab
>1a7618		2b 28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5
>1a7628		31 f0 0e c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02
>1a7638		00 af 46 02 00 aa af 48 02 00 a8 af 4a 02 00 1b
>1a7648		af 4c 02 00 5b e2 20 a9 1a 48 a9 76 48 a9 5b 48
>1a7658		4c 92 76 ea 5c 04 00 1a 08 c2 20 48 a9 48 08 5b
>1a7668		68 28 e2 20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02 00
>1a7678		a5 0f 8f 42 02 00 af 46 02 00 aa af 48 02 00 a8
>1a7688		af 4a 02 00 1b af 4c 02 00 5b e2 20 af 4e 02 00
>1a7698		48 ab a9 5c 8f a2 08 00 af 42 02 00 8f a5 08 00
>1a76a8		af 41 02 00 8f a4 08 00 af 40 02 00 8f a3 08 00
>1a76b8		af 4f 02 00 48 c2 20 af 44 02 00 28 5c a2 08 00
>1a76c8		08 0b 8b 08 e2 20 48 a9 1a 48 ab 68 28 08 c2 20
>1a76d8		48 a9 48 08 5b 68 28 c2 10 e2 20 a5 31 c9 02 f0
>1a76e8		0c c9 03 d0 11 c2 20 a5 15 85 47 80 11 c2 20 a9
>1a76f8		01 00 85 47 80 08 a2 3a 88 20 e2 03 80 35 a5 0d
>1a7708		85 4a a5 0f 85 4c a0 00 00 e2 20 a7 4a d7 11 f0
>1a7718		09 22 18 80 1a a9 20 20 18 00 c2 20 18 a5 4a 69
>1a7728		01 00 85 4a a5 4c 69 00 00 85 4c c8 c4 47 d0 d9
>1a7738		20 55 03 20 55 03 ab 2b 28 6b 08 0b 8b 08 e2 20
>1a7748		48 a9 00 48 ab 68 28 08 c2 20 48 a9 48 08 5b 68
>1a7758		28 e2 20 a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e 42
>1a7768		02 c9 01 f0 41 a6 11 8e 44 02 c9 02 f0 38 a6 15
>1a7778		8e 46 02 c9 03 f0 2f a6 19 8e 48 02 c9 04 f0 26
>1a7788		a6 1d 8e 4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e 02
>1a7798		c9 06 f0 12 c2 10 a6 25 8e 4c 02 c9 07 f0 07 e2
>1a77a8		10 a6 29 8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2 20
>1a77b8		48 a9 48 08 5b 68 28 e2 20 c2 10 a2 00 00 bf a7
>1a77c8		88 1a f0 18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a aa
>1a77d8		bf e8 77 1a 8f 2f 08 00 22 0c 78 1a ab 2b 28 6b
>1a77e8		85 6e 8d 6e 91 6e 95 6e 99 6e 9d 6e a1 6e a5 6e
>1a77f8		a9 6e ad 6e 89 6e b1 6e b5 6e b9 6e 81 72 bd 6e
>1a7808		c1 6e fa 6e 6c 2f 08 08 8b 0b 08 c2 20 48 a9 48
>1a7818		08 5b 68 28 e2 20 a5 31 c9 02 b0 03 4c b5 79 c2
>1a7828		20 a5 0d 85 32 a5 0f 85 34 c2 20 22 b7 7b 1a c9
>1a7838		ff ff f0 10 85 54 e2 20 a5 31 c9 03 f0 36 a9 13
>1a7848		85 4f 80 4c 20 55 03 08 e2 20 48 a9 1a 48 ab 68
>1a7858		28 c2 10 a2 ec 79 20 e2 03 4c b5 79 20 55 03 08
>1a7868		e2 20 48 a9 1a 48 ab 68 28 c2 10 a2 fb 79 20 e2
>1a7878		03 4c b5 79 e2 20 22 ed 7b 1a c9 ff f0 de 85 4f
>1a7888		c9 03 f0 62 c9 0b f0 5e c9 13 f0 04 c9 08 f0 00
>1a7898		22 e5 7a 1a b0 03 4c 7e 79 87 32 22 6e 85 1a 08
>1a78a8		e2 20 48 a9 00 48 ab 68 28 c2 20 a5 32 85 56 a5
>1a78b8		34 85 58 e2 20 a5 4f c9 12 f0 6c c9 16 f0 68 c9
>1a78c8		14 f0 7c 29 3f c9 02 d0 03 4c ac 79 c2 20 29 ff
>1a78d8		00 aa e2 20 bf b4 84 1a c9 03 f0 57 c9 02 f0 5f
>1a78e8		c9 01 f0 67 80 71 c2 20 a5 54 c9 2c 81 f0 26 c9
>1a78f8		90 81 f0 2a c9 10 81 f0 1c c9 14 81 f0 17 c9 1c
>1a7908		81 f0 12 c9 04 81 f0 0d c9 18 81 f0 08 c9 00 81
>1a7918		f0 03 4c 98 78 e2 20 a9 12 85 4f 4c 98 78 e2 20
>1a7928		a9 16 85 4f 4c 98 78 22 28 7a 1a 90 60 c9 02 f0
>1a7938		0e 80 18 a0 02 00 b9 98 08 97 56 22 6e 85 1a a0
>1a7948		01 00 b9 98 08 97 56 22 6e 85 1a a0 00 00 b9 98
>1a7958		08 97 56 22 6e 85 1a e2 20 a9 41 20 18 00 a9 20
>1a7968		20 18 00 a6 32 86 4a a6 34 86 4c 22 18 80 1a a9
>1a7978		20 20 18 00 80 37 20 55 03 08 e2 20 48 a9 1a 48
>1a7988		ab 68 28 c2 10 a2 b9 79 20 e2 03 80 20 20 55 03
>1a7998		08 e2 20 48 a9 1a 48 ab 68 28 c2 10 a2 09 7a 20
>1a79a8		e2 03 80 09 a5 4f 29 c0 d0 95 4c 53 79 2b ab 28
>1a79b8		6b 41 64 64 72 65 73 73 69 6e 67 20 6d 6f 64 65
>1a79c8		20 6e 6f 74 20 64 65 66 69 6e 65 64 20 66 6f 72
>1a79d8		20 74 68 61 74 20 69 6e 73 74 72 75 63 74 69 6f
>1a79e8		6e 2e 0d 00 42 61 64 20 6d 6e 65 6d 6f 6e 69 63
>1a79f8		2e 0d 00 42 61 64 20 6f 70 65 72 61 6e 64 2e 0d
>1a7a08		00 52 65 6c 61 74 69 76 65 20 6f 66 66 73 65 74
>1a7a18		20 69 73 20 74 6f 6f 20 6c 61 72 67 65 2e 0d 00
>1a7a28		08 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4f
>1a7a38		c9 12 f0 0a c2 20 18 a5 32 69 02 00 80 08 c2 20
>1a7a48		18 a5 32 69 01 00 85 4a a5 34 69 00 00 85 4c 38
>1a7a58		a5 50 e5 4a 85 50 a5 52 e5 4c 85 52 e2 20 a5 4f
>1a7a68		c9 16 f0 1e a5 50 30 0c a5 51 d0 2a a5 52 d0 26
>1a7a78		a9 01 80 26 a5 51 c9 ff d0 1c a5 52 c9 ff d0 16
>1a7a88		80 18 a5 51 30 06 a5 52 d0 0c 80 0e a5 52 c9 ff
>1a7a98		d0 04 a9 02 80 04 2b 28 18 6b 2b 28 38 6b 08 0b
>1a7aa8		c2 10 da 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a2
>1a7ab8		00 00 df 00 d0 1a f0 08 e8 e0 10 00 f0 1b 80 f2
>1a7ac8		c2 20 06 50 26 52 06 50 26 52 06 50 26 52 06 50
>1a7ad8		26 52 e2 20 8a 05 50 85 50 fa 2b 28 6b 0b 8b 08
>1a7ae8		c2 20 48 a9 48 08 5b 68 28 08 e2 20 48 a9 1a 48
>1a7af8		ab 68 28 e2 20 a5 4f 29 3f 85 4a c2 30 a2 00 00
>1a7b08		a0 00 00 bd b2 81 f0 1b c5 54 d0 0d e2 20 b9 b4
>1a7b18		83 29 3f c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98 38
>1a7b28		ab 2b 6b 18 ab 2b 6b 08 0b 08 c2 20 48 a9 48 08
>1a7b38		5b 68 28 e2 20 c2 10 a0 00 00 64 50 64 52 b7 03
>1a7b48		f0 11 c9 64 f0 19 48 b7 36 85 4a 68 c5 4a d0 0b
>1a7b58		c8 80 eb b7 36 d0 04 2b 28 38 6b 2b 28 18 6b e2
>1a7b68		20 b7 36 c9 3a b0 04 c9 30 b0 14 c9 47 b0 04 c9
>1a7b78		41 b0 0c c9 67 b0 e4 c9 61 b0 02 80 de 29 df 22
>1a7b88		a6 7a 1a 80 cb 0b 08 c2 20 48 a9 48 08 5b 68 28
>1a7b98		a0 00 00 e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8 5a
>1a7ba8		68 18 65 03 85 03 a5 05 69 00 00 85 05 2b 6b 0b
>1a7bb8		08 c2 20 48 a9 48 08 5b 68 28 c2 20 a5 11 85 36
>1a7bc8		a5 13 85 38 a9 40 80 85 03 a9 1a 00 85 05 22 2f
>1a7bd8		7b 1a b0 0d 22 8d 7b 1a a7 03 d0 f2 a9 ff ff 80
>1a7be8		02 a5 03 2b 6b 08 0b 08 c2 20 48 a9 48 08 5b 68
>1a7bf8		28 c2 30 a5 15 85 36 a5 17 85 38 a9 cc 84 85 03
>1a7c08		a9 1a 00 85 05 22 2f 7b 1a b0 22 22 8d 7b 1a c2
>1a7c18		20 18 a5 03 69 01 00 85 03 a5 05 69 00 00 85 05
>1a7c28		e2 20 a7 03 d0 df c2 20 a9 ff ff 80 0d 22 8d 7b
>1a7c38		1a e2 20 a7 03 c2 20 29 ff 00 2b 28 6b 08 8b 0b
>1a7c48		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a9 00 8f b6
>1a7c58		08 00 a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5
>1a7c68		0d 69 00 01 85 11 e2 20 a5 0f 69 00 85 13 c2 20
>1a7c78		a5 0d 85 32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5
>1a7c88		32 69 00 01 85 11 e2 20 a5 34 69 00 85 13 22 b1
>1a7c98		7c 1a e2 20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11
>1a7ca8		90 ec 20 55 03 2b ab 28 6b 08 0b e2 20 a9 41 20
>1a7cb8		18 00 a9 20 20 18 00 08 c2 20 48 a9 7a 08 5b 68
>1a7cc8		28 c2 20 a5 00 85 18 e2 20 a5 02 85 1a 22 18 80
>1a7cd8		1a a9 20 20 18 00 c2 20 18 a5 00 69 01 00 85 18
>1a7ce8		e2 20 a5 02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2
>1a7cf8		d0 0b 48 a7 18 49 ff 2f 96 08 00 80 0b c9 e2 d0
>1a7d08		0c 48 a7 18 0f 96 08 00 8f 96 08 00 68 c2 20 29
>1a7d18		ff 00 0a aa bf b2 81 1a aa 22 92 7f 1a e2 20 a7
>1a7d28		00 aa bf b4 83 1a 22 6e 85 1a 22 3f 7d 1a 20 55
>1a7d38		03 20 6c 03 2b 28 6b 08 e2 20 48 29 3f 0a c2 10
>1a7d48		aa 68 7c 4d 7d 7d 7d 98 7d 9f 7d c4 7d cb 7d e6
>1a7d58		7d 08 7e 19 7e 56 7e 5e 7e 6f 7e 80 7e 87 7e ac
>1a7d68		7e d9 7e 45 7e 2a 7e f7 7d cc 7e d6 7e ea 7e 19
>1a7d78		7f c7 7e 2a 7f a9 28 20 18 00 22 41 7f 1a a9 2c
>1a7d88		20 18 00 a9 58 20 18 00 a9 29 20 18 00 4c 3b 7f
>1a7d98		22 41 7f 1a 4c 3b 7f e2 20 48 a9 23 20 18 00 68
>1a7da8		29 c0 c9 00 f0 0f 4a 4a 2f 96 08 00 d0 07 22 4b
>1a7db8		7f 1a 4c 3b 7f 22 41 7f 1a 4c 3b 7f 22 4b 7f 1a
>1a7dc8		4c 3b 7f a9 28 20 18 00 22 41 7f 1a a9 29 20 18
>1a7dd8		00 a9 2c 20 18 00 a9 59 20 18 00 4c 3b 7f 22 41
>1a7de8		7f 1a a9 2c 20 18 00 a9 58 20 18 00 4c 3b 7f 22
>1a7df8		41 7f 1a a9 2c 20 18 00 a9 59 20 18 00 4c 3b 7f
>1a7e08		22 4b 7f 1a a9 2c 20 18 00 a9 59 20 18 00 4c 3b
>1a7e18		7f 22 4b 7f 1a a9 2c 20 18 00 a9 58 20 18 00 4c
>1a7e28		3b 7f a9 28 20 18 00 22 4b 7f 1a a9 2c 20 18 00
>1a7e38		a9 58 20 18 00 a9 29 20 18 00 4c 3b 7f a9 28 20
>1a7e48		18 00 22 41 7f 1a a9 29 20 18 00 4c 3b 7f a9 41
>1a7e58		20 18 00 4c 3f 7f 22 41 7f 1a a9 2c 20 18 00 a9
>1a7e68		53 20 18 00 4c 3b 7f a9 5b 20 18 00 22 41 7f 1a
>1a7e78		a9 5d 20 18 00 4c 3b 7f 22 59 7f 1a 4c 3f 7f a9
>1a7e88		28 20 18 00 22 41 7f 1a a9 2c 20 18 00 a9 53 20
>1a7e98		18 00 a9 29 20 18 00 a9 2c 20 18 00 a9 59 20 18
>1a7ea8		00 4c 3b 7f a9 5b 20 18 00 22 41 7f 1a a9 5d 20
>1a7eb8		18 00 a9 2c 20 18 00 a9 59 20 18 00 4c 3b 7f a0
>1a7ec8		02 00 80 03 a0 01 00 22 bf 7f 1a 4c 3f 7f 4c 3f
>1a7ed8		7f 22 59 7f 1a a9 2c 20 18 00 a9 58 20 18 00 4c
>1a7ee8		3f 7f a9 23 20 18 00 8b a5 02 48 ab a6 00 e8 a0
>1a7ef8		01 00 22 65 03 1a a9 2c 20 18 00 a9 23 20 18 00
>1a7f08		a6 00 a0 01 00 22 65 03 1a ab 22 6e 85 1a 4c 3b
>1a7f18		7f a9 28 20 18 00 22 4b 7f 1a a9 29 20 18 00 4c
>1a7f28		3b 7f a9 5b 20 18 00 22 4b 7f 1a a9 5d 20 18 00
>1a7f38		4c 3b 7f 22 6e 85 1a 28 6b 08 e2 20 a7 00 20 0c
>1a7f48		04 28 6b 08 c2 30 a7 00 20 f2 03 22 6e 85 1a 28
>1a7f58		6b 08 8b 0b c2 30 5a 08 c2 20 48 a9 7a 08 5b 68
>1a7f68		28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 a0 00 00
>1a7f78		a7 00 99 92 08 22 6e 85 1a c8 c0 03 00 d0 f1 22
>1a7f88		18 80 1a c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10
>1a7f98		08 e2 20 48 a9 1a 48 ab 68 28 bd 00 00 20 18 00
>1a7fa8		e8 bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8 a9
>1a7fb8		20 20 18 00 ab 28 6b 08 0b 08 c2 20 48 a9 7a 08
>1a7fc8		5b 68 28 e2 20 c0 02 00 f0 14 a7 00 85 18 30 06
>1a7fd8		64 19 64 1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00
>1a7fe8		85 18 22 6e 85 1a a7 00 85 19 30 04 64 1a 80 04
>1a7ff8		a9 ff 85 1a c2 20 38 a5 00 65 18 85 18 e2 20 a5
>1a8008		02 65 1a 85 1a 22 18 80 1a 22 6e 85 1a 2b 28 6b
>1a8018		08 0b c2 20 48 08 c2 20 48 a9 48 08 5b 68 28 e2
>1a8028		20 a5 4c 20 0c 04 e2 20 a9 3a 20 18 00 c2 20 a5
>1a8038		4a 20 f2 03 68 2b 28 6b 4f 52 41 00 41 4e 44 00
>1a8048		45 4f 52 00 41 44 43 00 53 54 41 00 4c 44 41 00
>1a8058		43 4d 50 00 53 42 43 00 41 53 4c 00 52 4f 4c 00
>1a8068		4c 53 52 00 52 4f 52 00 53 54 58 00 4c 44 58 00
>1a8078		44 45 43 00 49 4e 43 00 42 49 54 00 4a 4d 50 00
>1a8088		53 54 59 00 4c 44 59 00 43 50 59 00 43 50 58 00
>1a8098		42 52 4b 00 4a 53 52 00 52 54 49 00 52 54 53 00
>1a80a8		50 48 50 00 50 4c 50 00 50 48 41 00 50 4c 41 00
>1a80b8		44 45 59 00 54 41 59 00 49 4e 59 00 49 4e 58 00
>1a80c8		43 4c 43 00 53 45 43 00 43 4c 49 00 53 45 49 00
>1a80d8		54 59 41 00 43 4c 56 00 43 4c 44 00 53 45 44 00
>1a80e8		54 58 41 00 54 58 53 00 54 41 58 00 54 53 58 00
>1a80f8		44 45 58 00 4e 4f 50 00 42 50 4c 00 42 4d 49 00
>1a8108		42 56 43 00 42 56 53 00 42 43 43 00 42 43 53 00
>1a8118		42 4e 45 00 42 45 51 00 54 53 42 00 54 52 42 00
>1a8128		53 54 5a 00 42 52 41 00 50 48 59 00 50 4c 59 00
>1a8138		50 48 58 00 50 4c 58 00 50 48 44 00 50 4c 44 00
>1a8148		50 48 4b 00 52 54 4c 00 50 48 42 00 50 4c 42 00
>1a8158		57 41 49 00 58 42 41 00 54 43 53 00 54 53 43 00
>1a8168		54 43 44 00 54 44 43 00 54 58 59 00 54 59 58 00
>1a8178		53 54 50 00 58 43 45 00 43 4f 50 00 4a 53 4c 00
>1a8188		57 44 4d 00 50 45 52 00 42 52 4c 00 52 45 50 00
>1a8198		53 45 50 00 4d 56 50 00 4d 56 4e 00 50 45 49 00
>1a81a8		50 45 41 00 4a 4d 4c 00 00 00 98 80 40 80 80 81
>1a81b8		40 80 20 81 40 80 60 80 40 80 a8 80 40 80 60 80
>1a81c8		40 81 20 81 40 80 60 80 40 80 00 81 40 80 40 80
>1a81d8		40 80 24 81 40 80 60 80 40 80 c8 80 40 80 7c 80
>1a81e8		60 81 24 81 40 80 60 80 40 80 9c 80 44 80 84 81
>1a81f8		44 80 80 80 44 80 64 80 44 80 ac 80 44 80 64 80
>1a8208		44 81 80 80 44 80 64 80 44 80 04 81 44 80 44 80
>1a8218		44 80 80 80 44 80 64 80 44 80 cc 80 44 80 78 80
>1a8228		64 81 80 80 44 80 64 80 44 80 a0 80 48 80 88 81
>1a8238		48 80 9c 81 48 80 68 80 48 80 b0 80 48 80 68 80
>1a8248		48 81 84 80 48 80 68 80 48 80 08 81 48 80 48 80
>1a8258		48 80 a0 81 48 80 68 80 48 80 d0 80 48 80 30 81
>1a8268		68 81 ac 81 48 80 68 80 48 80 a4 80 4c 80 8c 81
>1a8278		4c 80 28 81 4c 80 6c 80 4c 80 b4 80 4c 80 6c 80
>1a8288		4c 81 84 80 4c 80 6c 80 4c 80 0c 81 4c 80 4c 80
>1a8298		4c 80 28 81 4c 80 6c 80 4c 80 d4 80 4c 80 34 81
>1a82a8		6c 81 84 80 4c 80 6c 80 4c 80 2c 81 50 80 90 81
>1a82b8		50 80 88 80 50 80 70 80 50 80 b8 80 80 80 e8 80
>1a82c8		50 81 88 80 50 80 70 80 50 80 10 81 50 80 50 80
>1a82d8		50 80 88 80 50 80 70 80 50 80 d8 80 50 80 ec 80
>1a82e8		70 81 28 81 50 80 28 81 50 80 8c 80 54 80 74 80
>1a82f8		54 80 8c 80 54 80 74 80 54 80 bc 80 54 80 f0 80
>1a8308		54 81 8c 80 54 80 74 80 54 80 14 81 54 80 54 80
>1a8318		54 80 8c 80 54 80 74 80 54 80 dc 80 54 80 f4 80
>1a8328		74 81 8c 80 54 80 74 80 54 80 90 80 58 80 94 81
>1a8338		58 80 90 80 58 80 78 80 58 80 c0 80 58 80 f8 80
>1a8348		58 81 90 80 58 80 78 80 58 80 18 81 58 80 58 80
>1a8358		58 80 a4 81 58 80 78 80 58 80 e0 80 58 80 38 81
>1a8368		78 81 ac 81 58 80 78 80 58 80 94 80 5c 80 98 81
>1a8378		5c 80 94 80 5c 80 7c 80 5c 80 c4 80 5c 80 fc 80
>1a8388		5c 81 94 80 5c 80 7c 80 5c 80 1c 81 5c 80 5c 80
>1a8398		5c 80 a8 81 5c 80 7c 80 5c 80 e4 80 5c 80 3c 81
>1a83a8		7c 81 9c 80 5c 80 7c 80 5c 80 00 00 13 00 02 09
>1a83b8		01 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c
>1a83c8		01 05 05 0d 13 06 08 13 03 07 07 0e 03 00 0b 09
>1a83d8		01 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c
>1a83e8		05 05 05 0d 13 06 08 13 07 07 07 0e 13 00 13 09
>1a83f8		14 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c
>1a8408		14 05 05 0d 13 06 13 13 0b 07 07 0b 13 00 16 09
>1a8418		01 01 01 0a 13 82 08 13 15 03 03 0b 12 04 0f 0c
>1a8428		05 05 05 0d 13 06 13 13 10 07 07 0e 12 00 16 09
>1a8438		01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c
>1a8448		05 05 11 0d 13 06 13 13 03 07 07 0e 82 00 42 09
>1a8458		01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c
>1a8468		05 05 11 0d 13 06 13 13 07 07 06 0e 42 00 02 09
>1a8478		01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c
>1a8488		01 05 05 0d 13 06 13 13 17 07 07 0e 42 00 02 09
>1a8498		01 01 01 0f 13 82 13 13 03 03 03 0b 12 04 0f 0c
>1a84a8		03 05 05 0d 13 06 13 13 10 07 07 0e 01 01 01 02
>1a84b8		01 01 02 02 00 01 01 03 01 01 03 01 02 01 01 00
>1a84c8		02 02 02 02 41 00 08 64 64 3a 64 64 64 64 2c 58
>1a84d8		00 0e 64 64 3a 64 64 64 64 00 0b 64 64 64 64 2c
>1a84e8		58 00 07 64 64 64 64 2c 59 00 06 64 64 64 64 00
>1a84f8		03 64 64 2c 58 00 05 64 64 2c 59 00 11 64 64 2c
>1a8508		53 00 09 64 64 00 01 23 64 64 64 64 00 c2 23 64
>1a8518		64 2c 23 64 64 00 14 23 64 64 00 02 28 64 64 2c
>1a8528		53 29 2c 59 00 0c 28 64 64 64 64 2c 58 29 00 10
>1a8538		28 64 64 64 64 29 00 10 28 64 64 2c 58 29 00 00
>1a8548		28 64 64 29 2c 59 00 04 28 64 64 29 00 0f 5b 64
>1a8558		64 64 64 5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64
>1a8568		64 5d 00 0a 00 00 08 c2 20 48 18 af 7a 08 00 69
>1a8578		01 00 8f 7a 08 00 e2 20 af 7c 08 00 69 00 8f 7c
>1a8588		08 00 c2 20 68 28 6b 08 c2 10 e2 20 da a2 08 00
>1a8598		0a b0 08 48 a9 30 20 18 00 80 06 48 a9 31 20 18
>1a85a8		00 68 ca d0 eb fa 28 6b 08 c2 20 48 a9 48 08 5b
>1a85b8		68 28 e2 20 a7 32 f0 0a c9 20 d0 06 22 6e 85 1a
>1a85c8		80 f2 6b 08 08 c2 20 48 a9 48 08 5b 68 28 22 6e
>1a85d8		85 1a 22 b0 85 1a c2 30 a5 31 c2 20 29 ff 00 0a
>1a85e8		0a aa a5 32 95 0d a5 34 95 0f e2 20 a7 32 f0 14
>1a85f8		c9 22 f0 06 22 6e 85 1a 80 f2 a9 00 87 32 22 6e
>1a8608		85 1a e6 31 28 6b 08 c2 20 48 a9 48 08 5b 68 28
>1a8618		e2 20 64 4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a
>1a8628		f0 0d 20 8a 04 90 0e 22 a6 7a 1a a9 01 85 4a 22
>1a8638		6e 85 1a 80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00
>1a8648		0a 0a aa a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b
>1a8658		e2 20 64 31 22 b0 85 1a a7 32 f0 21 c9 22 d0 06
>1a8668		22 cb 85 1a 80 0a 22 0e 86 1a a5 31 c9 09 b0 0d
>1a8678		a7 32 f0 09 c9 20 f0 dc 20 8a 04 b0 d7 6b 08 0b
>1a8688		08 c2 20 48 a9 48 08 5b 68 28 c2 10 e2 20 a2 31
>1a8698		00 74 00 ca d0 fb a9 00 85 02 85 34 c2 20 a9 00
>1a86a8		4f 85 00 85 32 e2 20 22 b0 85 1a c9 00 f0 38 c2
>1a86b8		20 a5 32 85 08 e2 20 a5 34 85 0a a2 01 00 22 6e
>1a86c8		85 1a a7 32 d0 06 86 0b 64 31 80 1b c9 20 f0 03
>1a86d8		e8 80 eb 86 0b a9 00 87 32 22 6e 85 1a a7 08 c9
>1a86e8		41 f0 07 22 58 86 1a 2b 28 6b 22 b0 85 1a a7 32
>1a86f8		f0 f5 22 0e 86 1a 22 b0 85 1a a7 32 f0 e9 c2 20
>1a8708		a5 32 85 11 e2 20 a5 34 85 13 22 6e 85 1a a7 32
>1a8718		f0 26 c9 20 d0 f4 a9 00 87 32 e6 31 22 6e 85 1a
>1a8728		22 b0 85 1a a7 32 f0 bf c2 20 a5 32 85 15 e2 20
>1a8738		a5 34 85 17 e6 31 80 af e6 31 80 ab 08 c2 10 e2
>1a8748		20 a5 31 d0 0f a2 3a 88 a9 1a 48 ab 20 e2 03 20
>1a8758		55 03 80 61 c2 20 a5 0d 8f 23 08 00 a5 0f 8f 25
>1a8768		08 00 20 2a 69 e2 20 a5 31 c9 01 d0 0f c2 20 a9
>1a8778		ff ff 8f 54 03 00 8f 56 03 00 80 0e c2 20 a5 11
>1a8788		8f 54 03 00 a5 13 8f 56 03 00 22 18 11 00 b0 25
>1a8798		e2 20 a2 60 88 a9 1a 48 ab 20 e2 03 af 2e 03 00
>1a87a8		20 0c 04 a9 20 20 18 00 af 20 03 00 20 0c 04 20
>1a87b8		55 03 20 55 03 28 6b 8b 08 c2 10 e2 20 a5 31 c9
>1a87c8		03 f0 0f a2 3a 88 a9 1a 48 ab 20 e2 03 20 55 03
>1a87d8		80 54 c2 20 a5 0d 8f 23 08 00 a5 0f 8f 25 08 00
>1a87e8		20 2a 69 a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5
>1a87f8		15 8f 58 03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0
>1a8808		25 e2 20 a2 4a 88 a9 1a 48 ab 20 e2 03 af 2e 03
>1a8818		00 20 0c 04 a9 20 20 18 00 af 20 03 00 20 0c 04
>1a8828		20 55 03 20 55 03 28 ab 6b 5c ce 26 1a 6b 00 00
>1a8838		00 00 42 61 64 20 61 72 67 75 6d 65 6e 74 73 0d
>1a8848		0d 00 55 6e 61 62 6c 65 20 74 6f 20 73 61 76 65
>1a8858		20 66 69 6c 65 3a 20 00 55 6e 61 62 6c 65 20 74
>1a8868		6f 20 6c 6f 61 64 20 66 69 6c 65 3a 20 00 0d 20
>1a8878		20 50 43 20 20 20 20 20 41 20 20 20 20 58 20 20
>1a8888		20 20 59 20 20 20 20 53 50 20 20 20 44 42 52 20
>1a8898		44 50 20 20 20 4e 56 4d 58 44 49 5a 43 0d 00 41
>1a88a8		43 44 46 47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e
>1a88b8		3f 00 18 fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>1a88c8		20 48 a9 00 48 ab 68 28 c2 30 20 f9 88 a9 ff fe
>1a88d8		1b 08 e2 20 48 a9 1a 48 ab 68 28 a2 71 d2 20 e2
>1a88e8		03 08 e2 20 48 a9 00 48 ab 68 28 4c ce 26 4c f6
>1a88f8		88 08 20 9c 02 20 bc 4e 28 60 00 00 00 00 00 00
>1a8908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1134 times (18144 bytes)...
>1acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>1ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>1ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>1ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>1ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>1ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>1ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>1ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>1ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>1ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>1ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>1ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>1ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>1ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>1ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>1ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>1ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>1ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>1ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>1ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>1ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>1ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>1ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>1ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>1ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>1ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>1ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>1ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>1ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>1ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>1ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>1ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>1ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>1ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>1ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>1ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>1ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>1ad248		4f 53 00 54 41 4e 00 4c 4e 00 41 43 4f 53 00 41
>1ad258		53 49 4e 00 41 54 41 4e 00 45 58 50 00 53 51 52
>1ad268		00 0d 52 45 41 44 59 0d 00 43 32 35 36 20 46 6f
>1ad278		65 6e 69 78 20 42 41 53 49 43 38 31 36 20 76 30
>1ad288		2e 32 2e 30 2d 61 6c 70 68 61 2b 32 39 33 0d 00
>1b0000						.align 256
.1b0000						CREDITS_TEXT
>1b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>1b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>1b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>1b004f		20
>1b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>1b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>1b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>1b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>1b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>1b009f		20
>1b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b00ef		20
>1b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b013f		20
>1b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>1b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>1b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>1b0168		6e 79 20 41 6c 6c 61 69 72 65
>1b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>1b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b018a		20 20 20 20 20 20
>1b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>1b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>1b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>1b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b01da		20 20 20 20 20 20
>1b01e0		20				                .text " "
>1b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0229		20 20 20 20 20 20 20
>1b0230		20				                .text " "
>1b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0279		20 20 20 20 20 20 20
>1b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>1b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>1b0298		53 3a
>1b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>1b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>1b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>1b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>1b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>1b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b031d		20 20 20
>1b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>1b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>1b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>1b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>1b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>1b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>1b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>1b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>1b0398		75 73 68
>1b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>1b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>1b03c8		54 68 61 6e 6b 73 3a
>1b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>1b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0407		20 20 20 20 20 20 20 20 20
>1b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>1b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>1b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>1b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>1b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>1b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b045f		20
>1b0460		20				                .text " "
>1b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04a9		20 20 20 20 20 20 20
>1b04b0		20				                .text " "
>1b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04f9		20 20 20 20 20 20 20
>1b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>1b0508		45 53 20 41 55 54 48 4f 52 53 3a
>1b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>1b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b054b		20 20 20 20 20
>1b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>1b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>1b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>1b0578		63 6f 72 65 73 2e 6f 72 67
>1b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>1b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0599		20 20 20 20 20 20 20
>1b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>1b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>1b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>1b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>1b05d8		6d
>1b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>1b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>1b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>1b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>1b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>1b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>1b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>1b063b		20 20 20 20 20
>1b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>1b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>1b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>1b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>1b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b068b		20 20 20 20 20
>1b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>1b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>1b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>1b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>1b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06da		20 20 20 20 20 20
>1b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>1b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>1b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>1b0708		6a 61 64 61 20 47 6f 6d 65 7a
>1b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b072a		20 20 20 20 20 20
>1b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>1b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>1b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>1b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>1b0768		6f 6d
>1b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>1b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>1b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>1b0798		6e 69 78 20 55 29 3a 20 54 42 44
>1b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>1b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07cb		20 20 20 20 20
>1b07d0		20				                .text " "
>1b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0819		20 20 20 20 20 20 20
>1b0820		20				                .text " "
>1b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0869		20 20 20 20 20 20 20
>1b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>1b0878		54 48 41 4e 4b 53 3a
>1b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>1b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b08b7		20 20 20 20 20 20 20 20 20
>1b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>1b08c8		56 61 6e 68 61 72 65 6e
>1b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>1b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0908		20 20 20 20 20 20 20 20
>1b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>1b0918		65 77
>1b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>1b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>1b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>1b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>1b0988		65 66 65 72 65 6e 63 65 73 29
>1b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>1b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b09aa		20 20 20 20 20 20
>1b09b0		20				                .text " "
>1b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b09f9		20 20 20 20 20 20 20
>1b0a00		20				                .text " "
>1b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0a49		20 20 20 20 20 20 20
>1b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0a9f		20
>1b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>1b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>1b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>1b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>1b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>1b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>1b0aec		20 20 20 20
>1b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>1b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>1b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>1b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>1b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>1b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>1b0b3c		20 20 20 20
>1b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>1b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>1b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>1b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>1b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>1b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>1b0b8d		20 20 20
>1b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>1b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>1b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>1b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>1b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>1b0bdd		20 20 20
>1b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>1b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>1b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>1b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>1b0c2d		20 20 20
>1b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0c7f		20
>1b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>1b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c98		53 74 65 66 61 6e 79
>1b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>1b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cc7		20 20 20 20 20 20 20 20 20
>1b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>1b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>1b1768		20 20 20 20 20 20 20 20
>1b1770						.align 256
>1b1800		f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 80 * 60, $F3
>1b1808		f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;		...repeated 298 times (4768 bytes)...
>1b2ab8		f3 f3 f3 f3 f3 f3 f3 f3
.1e0000						BOOT_MENU
.1e0000						SplashScreenMain:
.1e0000		48		pha		                PHA             ; begin setdp macro
.1e0001		08		php		                PHP
.1e0002		c2 20		rep #$20	                REP #$20        ; set A long
.1e0004		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1e0007		5b		tcd		                TCD
.1e0008		28		plp		                PLP
.1e0009		68		pla		                PLA             ; end setdp macro
.1e000a		c2 10		rep #$10	                REP #$10        ; set X long
.1e000c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e000e		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.1e0012		a9 00		lda #$00	                LDA #$00
.1e0014		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0016		85 f1		sta $f1		                STA INTERRUPT_COUNT
.1e0018		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e001a		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.1e001e		29 04		and #$04	                AND #FNX0_INT02_TMR0
.1e0020		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.1e0024		20 ea 00	jsr $1e00ea	                JSR Splash_Get_Machine_ID
.1e0027		20 1d 01	jsr $1e011d	                JSR Splash_Clear_Screen
.1e002a		20 07 01	jsr $1e0107	                JSR Splash_Load_FontSet
.1e002d		22 08 03 1e	jsl $1e0308	                JSL Splashscreen_BitMapSetup
.1e0031		20 1b 06	jsr $1e061b	                JSR Model_Update_Info_Field
.1e0034		20 fc 05	jsr $1e05fc	                JSR Set_Text_Color
.1e0037		a9 00		lda #$00	                LDA #$00
.1e0039		85 a6		sta $a6		                STA LINE_INDEX  ; Point to the first line to be displayed
.1e003b		85 a7		sta $a7		                STA LINE_INDEX + 1
.1e003d		20 a3 08	jsr $1e08a3	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e0040						HAVE_FUN:
.1e0040		22 37 01 1e	jsl $1e0137	                JSL Splash_Moniker_Color_Rolling  ; Go Move The Colors on the Logo
.1e0044		a6 a6		ldx $a6		                LDX LINE_INDEX
.1e0046		e0 17 00	cpx #$0017	                CPX #NumberOfEntry
.1e0049		f0 08		beq $1e0053	                BEQ ByPassCharDisplay           ; If Equal all Lines have been displayed
.1e004b		20 e0 08	jsr $1e08e0	                JSR Line_Display_1_Character    ; Go move the cursor one stop
.1e004e		90 21		bcc $1e0071	                BCC Still_Displaying_Char
.1e0050		20 a3 08	jsr $1e08a3	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e0053						ByPassCharDisplay:
.1e0053		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0055		22 48 10 00	jsl $001048	                JSL GETCH               ; Try to get a character
.1e0059		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.1e005b		f0 14		beq $1e0071	                BEQ Still_Displaying_Char            ; No: keep waiting until timeout
.1e005d		c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.1e005f		f0 1f		beq $1e0080	                BEQ return              ; Yes: return it
.1e0061		c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.1e0063		f0 1b		beq $1e0080	                BEQ return              ; Yes: return it
.1e0065		c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.1e0067		f0 17		beq $1e0080	                BEQ return              ; Yes: return it
.1e0069		c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.1e006b		f0 13		beq $1e0080	                BEQ return              ; Yes: return it
.1e006d		c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.1e006f		f0 0d		beq $1e007e	                BEQ exitshere
.1e0071						Still_Displaying_Char:
.1e0071						WaitForNextSOF:
.1e0071		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0
.1e0075		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e0077		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.1e0079		d0 f6		bne $1e0071	                BNE WaitForNextSOF;
.1e007b		4c 40 00	jmp $1e0040	                JMP HAVE_FUN
.1e007e						exitshere:
.1e007e						timeout
.1e007e		a9 00		lda #$00	                LDA #0                  ; Return 0 for a timeout / SPACE
.1e0080						return
.1e0080		8f 08 00 00	sta $000008	                STA @l KRNL_BOOT_MENU_K          ; Store ther Keyboard Value
.1e0084		a9 00		lda #$00	                LDA #$00
.1e0086		8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L         ; Disable Everything
.1e008a		22 3c 05 1e	jsl $1e053c	                JSL SS_VDMA_CLEAR_MEMORY_640_480 ; Clear the Bitmap Screen
.1e008e		20 a3 00	jsr $1e00a3	                JSR VickyII_Registers_Clear      ; Reset All Vicky Registers
.1e0091		22 c0 10 00	jsl $0010c0	                JSL INITFONTSET ; Reload the Official FONT set
.1e0095		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR ; Reset the Cursor to its origin
.1e0099		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.1e009d		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE  ; Init VICKY TextMode now contains Hi-Res Dipswitch read and Automatic Text Size Parameter adjust
.1e00a1		ea		nop		                NOP
.1e00a2		6b		rtl		                RTL
.1e00a3						VickyII_Registers_Clear:
.1e00a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00a5		c2 10		rep #$10	                REP #$10        ; set X long
.1e00a7		a2 00 00	ldx #$0000	                LDX #$0000
.1e00aa		a9 00		lda #$00	                LDA #$00
.1e00ac						ClearSpriteRegisters:
.1e00ac		9f 00 0c af	sta $af0c00,x	                STA @l SP00_CONTROL_REG, X
.1e00b0		e8		inx		                INX
.1e00b1		e0 00 02	cpx #$0200	                CPX #$0200
.1e00b4		d0 f6		bne $1e00ac	                BNE ClearSpriteRegisters
.1e00b6		a2 00 00	ldx #$0000	                LDX #$0000
.1e00b9		a9 00		lda #$00	                LDA #$00
.1e00bb						ClearTiles0Registers:
.1e00bb		9f 00 02 af	sta $af0200,x	                STA @l TL0_CONTROL_REG, X
.1e00bf		e8		inx		                INX
.1e00c0		e0 30 00	cpx #$0030	                CPX #$0030
.1e00c3		d0 f6		bne $1e00bb	                BNE ClearTiles0Registers
.1e00c5		ea		nop		                NOP
.1e00c6		a2 00 00	ldx #$0000	                LDX #$0000
.1e00c9		a9 00		lda #$00	                LDA #$00
.1e00cb						ClearTiles1Registers:
.1e00cb		9f 80 02 af	sta $af0280,x	                STA @l TILESET0_ADDY_L, X
.1e00cf		e8		inx		                INX
.1e00d0		e0 20 00	cpx #$0020	                CPX #$0020
.1e00d3		d0 f6		bne $1e00cb	                BNE ClearTiles1Registers
.1e00d5		ea		nop		                NOP
.1e00d6		a2 00 00	ldx #$0000	                LDX #$0000
.1e00d9		a9 00		lda #$00	                LDA #$00
.1e00db						ClearBitmapRegisters:
.1e00db		9f 00 01 af	sta $af0100,x	                STA @l BM0_CONTROL_REG, X
.1e00df		9f 08 01 af	sta $af0108,x	                STA @l BM1_CONTROL_REG, X
.1e00e3		e8		inx		                INX
.1e00e4		e0 10 00	cpx #$0010	                CPX #$0010
.1e00e7		d0 f2		bne $1e00db	                BNE ClearBitmapRegisters
.1e00e9		60		rts		                RTS
.1e00ea						Splash_Get_Machine_ID
.1e00ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00ec		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e00f0		29 03		and #$03	                AND #$03        ; Isolate the first 2 bits to know if it is a U or FMX
.1e00f2		85 b0		sta $b0		                STA MODEL
.1e00f4		c9 00		cmp #$00	                CMP #$00
.1e00f6		f0 0e		beq $1e0106	                BEQ DONE
.1e00f8		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e00fc		29 04		and #$04	                AND #GABE_SYS_STAT_MID2 ; High 4Meg, Low - 2Megs
.1e00fe		c9 04		cmp #$04	                CMP #GABE_SYS_STAT_MID2
.1e0100		f0 04		beq $1e0106	                BEQ DONE
.1e0102		a9 02		lda #$02	                LDA #$02
.1e0104		85 b0		sta $b0		                STA MODEL       ; In this Scheme 00 - FMX, 01 - U+, 02 - U
.1e0106						DONE:
.1e0106		60		rts		                RTS
.1e0107						Splash_Load_FontSet
.1e0107		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0109		c2 10		rep #$10	                REP #$10        ; set X long
.1e010b		a2 00 00	ldx #$0000	                LDX #$0000
.1e010e						DONE_LOADING_FONT:
.1e010e		bf 00 08 1f	lda $1f0800,x	                LDA @l FONT_4_SPLASH, X
.1e0112		9f 00 80 af	sta $af8000,x	                STA @l FONT_MEMORY_BANK0, X
.1e0116		e8		inx		                INX
.1e0117		e0 00 08	cpx #$0800	                CPX #2048
.1e011a		d0 f2		bne $1e010e	                BNE DONE_LOADING_FONT
.1e011c		60		rts		                RTS
.1e011d						Splash_Clear_Screen
.1e011d		e2 20		sep #$20	                SEP #$20        ; set A short
.1e011f		c2 10		rep #$10	                REP #$10        ; set X long
.1e0121		a2 00 00	ldx #$0000	                LDX #$0000
.1e0124						Branch_Clear:
.1e0124		a9 20		lda #$20	                LDA #$20
.1e0126		9f 00 a0 af	sta $afa000,x	                STA @l CS_TEXT_MEM_PTR,X
.1e012a		a9 f0		lda #$f0	                LDA #$F0
.1e012c		9f 00 c0 af	sta $afc000,x	                STA @l CS_COLOR_MEM_PTR,X
.1e0130		e8		inx		                INX
.1e0131		e0 00 20	cpx #$2000	                CPX #$2000
.1e0134		d0 ee		bne $1e0124	                BNE Branch_Clear
.1e0136		60		rts		                RTS
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
.1e0137						Splash_Moniker_Color_Rolling
.1e0137		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0139		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.1e013d		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e013f		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.1e0143		a5 f0		lda $f0		                LDA INTERRUPT_STATE
.1e0145		c9 00		cmp #$00	                CMP #IRQ_SOF_ST0
.1e0147		f0 0c		beq $1e0155	                BEQ SERVE_STATE0
.1e0149		c9 01		cmp #$01	                CMP #IRQ_SOF_ST1
.1e014b		f0 1a		beq $1e0167	                BEQ SERVE_STATE1
.1e014d		c9 02		cmp #$02	                CMP #IRQ_SOF_ST2
.1e014f		d0 03		bne $1e0154	                BNE NOT_SERVE_STATE2
.1e0151		82 39 01	brl $1e028d	                BRL SERVE_STATE2
.1e0154						NOT_SERVE_STATE2
.1e0154		6b		rtl		                RTL
.1e0155						SERVE_STATE0
.1e0155		a5 f1		lda $f1		                LDA INTERRUPT_COUNT
.1e0157		c9 04		cmp #$04	                CMP #$04
.1e0159		f0 03		beq $1e015e	                BEQ SERVE_NEXT_STATE
.1e015b		e6 f1		inc $f1		                INC INTERRUPT_COUNT
.1e015d		6b		rtl		                RTL
.1e015e						SERVE_NEXT_STATE
.1e015e		a9 00		lda #$00	                LDA #$00
.1e0160		85 f1		sta $f1		                STA INTERRUPT_COUNT
.1e0162		a9 01		lda #$01	                LDA #IRQ_SOF_ST1
.1e0164		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0166		6b		rtl		                RTL
.1e0167						SERVE_STATE1
.1e0167		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e0169		a9 00 00	lda #$0000	                LDA #$0000
.1e016c		a2 00 00	ldx #$0000	                LDX #$0000
.1e016f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1e0171		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0173		bf c0 02 1e	lda $1e02c0,x	                LDA @lCOLOR_POINTER+0, X
.1e0177		aa		tax		                TAX
.1e0178		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e017c		8f e0 3f af	sta $af3fe0	                STA @lGRPH_LUT7_PTR+992
.1e0180		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0184		8f e1 3f af	sta $af3fe1	                STA @lGRPH_LUT7_PTR+993
.1e0188		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e018c		8f e2 3f af	sta $af3fe2	                STA @lGRPH_LUT7_PTR+994
.1e0190		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0192		bf c1 02 1e	lda $1e02c1,x	                LDA @lCOLOR_POINTER+1, X
.1e0196		aa		tax		                TAX
.1e0197		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e019b		8f e4 3f af	sta $af3fe4	                STA @lGRPH_LUT7_PTR+996
.1e019f		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01a3		8f e5 3f af	sta $af3fe5	                STA @lGRPH_LUT7_PTR+997
.1e01a7		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01ab		8f e6 3f af	sta $af3fe6	                STA @lGRPH_LUT7_PTR+998
.1e01af		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01b1		bf c2 02 1e	lda $1e02c2,x	                LDA @lCOLOR_POINTER+2, X
.1e01b5		aa		tax		                TAX
.1e01b6		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01ba		8f e8 3f af	sta $af3fe8	                STA @lGRPH_LUT7_PTR+1000
.1e01be		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01c2		8f e9 3f af	sta $af3fe9	                STA @lGRPH_LUT7_PTR+1001
.1e01c6		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01ca		8f ea 3f af	sta $af3fea	                STA @lGRPH_LUT7_PTR+1002
.1e01ce		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01d0		bf c3 02 1e	lda $1e02c3,x	                LDA @lCOLOR_POINTER+3, X
.1e01d4		aa		tax		                TAX
.1e01d5		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01d9		8f ec 3f af	sta $af3fec	                STA @lGRPH_LUT7_PTR+1004
.1e01dd		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01e1		8f ed 3f af	sta $af3fed	                STA @lGRPH_LUT7_PTR+1005
.1e01e5		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01e9		8f ee 3f af	sta $af3fee	                STA @lGRPH_LUT7_PTR+1006
.1e01ed		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01ef		bf c4 02 1e	lda $1e02c4,x	                LDA @lCOLOR_POINTER+4, X
.1e01f3		aa		tax		                TAX
.1e01f4		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01f8		8f f0 3f af	sta $af3ff0	                STA @lGRPH_LUT7_PTR+1008
.1e01fc		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0200		8f f1 3f af	sta $af3ff1	                STA @lGRPH_LUT7_PTR+1009
.1e0204		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e0208		8f f2 3f af	sta $af3ff2	                STA @lGRPH_LUT7_PTR+1010
.1e020c		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e020e		bf c5 02 1e	lda $1e02c5,x	                LDA @lCOLOR_POINTER+5, X
.1e0212		aa		tax		                TAX
.1e0213		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e0217		8f f4 3f af	sta $af3ff4	                STA @lGRPH_LUT7_PTR+1012
.1e021b		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e021f		8f f5 3f af	sta $af3ff5	                STA @lGRPH_LUT7_PTR+1013
.1e0223		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e0227		8f f6 3f af	sta $af3ff6	                STA @lGRPH_LUT7_PTR+1014
.1e022b		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e022d		bf c6 02 1e	lda $1e02c6,x	                LDA @lCOLOR_POINTER+6, X
.1e0231		aa		tax		                TAX
.1e0232		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e0236		8f f8 3f af	sta $af3ff8	                STA @lGRPH_LUT7_PTR+1016
.1e023a		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e023e		8f f9 3f af	sta $af3ff9	                STA @lGRPH_LUT7_PTR+1017
.1e0242		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e0246		8f fa 3f af	sta $af3ffa	                STA @lGRPH_LUT7_PTR+1018
.1e024a		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e024c		bf c7 02 1e	lda $1e02c7,x	                LDA @lCOLOR_POINTER+7, X
.1e0250		aa		tax		                TAX
.1e0251		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e0255		8f fc 3f af	sta $af3ffc	                STA @lGRPH_LUT7_PTR+1020
.1e0259		8f 50 1f af	sta $af1f50	                STA @lFG_CHAR_LUT_PTR + $10           ;
.1e025d		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0261		8f fd 3f af	sta $af3ffd	                STA @lGRPH_LUT7_PTR+1021
.1e0265		8f 51 1f af	sta $af1f51	                STA @lFG_CHAR_LUT_PTR + $11            ;
.1e0269		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e026d		8f fe 3f af	sta $af3ffe	                STA @lGRPH_LUT7_PTR+1022
.1e0271		8f 52 1f af	sta $af1f52	                STA @lFG_CHAR_LUT_PTR + $12            ;
.1e0275						HERE
.1e0275		18		clc		                CLC
.1e0276		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.1e0278		69 09		adc #$09	                ADC #$09
.1e027a		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e027c		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.1e027e		c9 48		cmp #$48	                CMP #$48
.1e0280		d0 04		bne $1e0286	                BNE EXIT_COLOR_CHANGE
.1e0282		a9 00		lda #$00	                LDA #$00
.1e0284		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e0286						EXIT_COLOR_CHANGE
.1e0286		c2 10		rep #$10	                REP #$10        ; set X long
.1e0288		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e028a		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e028c		6b		rtl		                RTL
.1e028d						SERVE_STATE2
.1e028d		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e028f		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0291		6b		rtl		                RTL
>1e0292						.align 16
>1e02a0		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>1e02a4		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>1e02a8		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>1e02ac		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>1e02b0		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>1e02b4		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>1e02b8		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>1e02bc		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>1e02c0		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>1e02c8		00
>1e02c9		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>1e02d1		00
>1e02d2		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>1e02da		00
>1e02db		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>1e02e3		00
>1e02e4		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>1e02ec		00
>1e02ed		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>1e02f5		00
>1e02f6		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>1e02fe		00
>1e02ff		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>1e0307		00

;******  Processing file: src\SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480
.1e0308						Splashscreen_BitMapSetup
.1e0308		e2 20		sep #$20	                SEP #$20        ; set A short
.1e030a		c2 10		rep #$10	                REP #$10        ; set X long
.1e030c		a9 0f		lda #$0f	        LDA #( Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay );
.1e030e		8f 00 00 af	sta $af0000	        STA @l MASTER_CTRL_REG_L
.1e0312		a9 00		lda #$00	        LDA #$00
.1e0314		8f 01 00 af	sta $af0001	        STA @l MASTER_CTRL_REG_H
.1e0318		a9 00		lda #$00	        LDA #$00
.1e031a		8f 00 01 af	sta $af0100	        STA @l BM0_CONTROL_REG
.1e031e		a9 0f		lda #$0f	        LDA #( BM_Enable | BM_LUT7)
.1e0320		8f 08 01 af	sta $af0108	        STA @l BM1_CONTROL_REG
.1e0324		a9 00		lda #$00	        LDA #$00
.1e0326		8f 09 01 af	sta $af0109	        STA @l BM1_START_ADDY_L
.1e032a		a9 00		lda #$00	        LDA #$00
.1e032c		8f 0a 01 af	sta $af010a	        STA @l BM1_START_ADDY_M
.1e0330		8f 0b 01 af	sta $af010b	        STA @l BM1_START_ADDY_H
.1e0334		a9 01		lda #$01	        LDA #$01
.1e0336		8f 04 00 af	sta $af0004	        STA BORDER_CTRL_REG
.1e033a		a9 08		lda #$08	        LDA #$08
.1e033c		8f 08 00 af	sta $af0008	        STA BORDER_X_SIZE
.1e0340		8f 09 00 af	sta $af0009	        STA BORDER_Y_SIZE
.1e0344		a9 80		lda #$80	        LDA #$80
.1e0346		8f 06 00 af	sta $af0006	        STA BORDER_COLOR_G
.1e034a		a9 00		lda #$00	        LDA #$00
.1e034c		8f 05 00 af	sta $af0005	        STA BORDER_COLOR_B
.1e0350		8f 07 00 af	sta $af0007	        STA BORDER_COLOR_R
.1e0354		a9 a0		lda #$a0	        LDA #$A0
.1e0356		8f 12 00 af	sta $af0012	        STA @l VKY_TXT_CURSOR_CHAR_REG
.1e035a		a9 10		lda #$10	        LDA #$10
.1e035c		8f 0e 00 af	sta $af000e	        STA @l BACKGROUND_COLOR_G
.1e0360		a9 10		lda #$10	        LDA #$10
.1e0362		8f 0f 00 af	sta $af000f	        STA @l BACKGROUND_COLOR_R
.1e0366		8f 0d 00 af	sta $af000d	        STA @l BACKGROUND_COLOR_B
.1e036a		e2 20		sep #$20	                SEP #$20        ; set A short
.1e036c		c2 10		rep #$10	                REP #$10        ; set X long
.1e036e		a2 00 00	ldx #$0000	        LDX #$0000
.1e0371						SS_LUT_BRANCH:
.1e0371		bf 00 0e 1e	lda $1e0e00,x	        LDA @l SS_MONIKER_LUT, X
.1e0375		ea		nop		        NOP
.1e0376		9f 00 3c af	sta $af3c00,x	        STA @l GRPH_LUT7_PTR, X
.1e037a		e8		inx		        INX
.1e037b		e0 00 04	cpx #$0400	        CPX #1024
.1e037e		d0 f1		bne $1e0371	        BNE SS_LUT_BRANCH
.1e0380		a9 00		lda #$00	        LDA #$00
.1e0382		8f 04 3c af	sta $af3c04	        STA @l GRPH_LUT7_PTR + 4
.1e0386		8f 05 3c af	sta $af3c05	        STA @l GRPH_LUT7_PTR + 5
.1e038a		8f 06 3c af	sta $af3c06	        STA @l GRPH_LUT7_PTR + 6
.1e038e		22 3c 05 1e	jsl $1e053c	        JSL SS_VDMA_CLEAR_MEMORY_640_480;
.1e0392		c2 20		rep #$20	                REP #$20        ; set A long
.1e0394		a9 00 12	lda #$1200	        LDA #<>SS_MONIKER      ; Set up the Source
.1e0397		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e039b		a9 00 50	lda #$5000	        LDA #<>( C256Moniker_SizeX * C256Moniker_SizeY )
.1e039e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e03a2		a9 00 00	lda #$0000	        LDA #$0000
.1e03a5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e03a9		a9 a0 78	lda #$78a0	        LDA #<>( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)    ; Set up the Source
.1e03ac		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e03b0		a9 40 01	lda #$0140	        LDA #C256Moniker_SizeX
.1e03b3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e03b7		a9 40 00	lda #$0040	        LDA #C256Moniker_SizeY
.1e03ba		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e03be		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e03c1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e03c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03c7		a9 1e		lda #$1e	        LDA #`SS_MONIKER
.1e03c9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e03cd		a9 00		lda #$00	        LDA #`( C256Moniker_SizeX * C256Moniker_SizeY )
.1e03cf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e03d3		a9 00		lda #$00	        LDA #$00
.1e03d5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e03d9		a9 00		lda #$00	        LDA #`( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)
.1e03db		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e03df		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e03e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03e5		af b0 00 00	lda $0000b0	        LDA @lMODEL
.1e03e9		29 03		and #$03	        AND #$03
.1e03eb		c9 00		cmp #$00	        CMP #$00
.1e03ed		f0 0b		beq $1e03fa	        BEQ DMA_FMX_Moniker
.1e03ef		c9 01		cmp #$01	        CMP #$01
.1e03f1		f0 5b		beq $1e044e	        BEQ DMA_UPlus_Moniker
.1e03f3		c9 02		cmp #$02	        CMP #$02
.1e03f5		d0 03		bne $1e03fa	        BNE BAD_MODEL_NUMBER
.1e03f7		82 a8 00	brl $1e04a2	        BRL DMA_U_Moniker
.1e03fa						 BAD_MODEL_NUMBER:
.1e03fa						DMA_FMX_Moniker:
.1e03fa		c2 20		rep #$20	                REP #$20        ; set A long
.1e03fc		a9 00 62	lda #$6200	        LDA #<>SS_FMX_TXT      ; Set up the Source
.1e03ff		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e0403		a9 00 32	lda #$3200	        LDA #<>( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e0406		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e040a		a9 00 00	lda #$0000	        LDA #$0000
.1e040d		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0411		a9 f0 13	lda #$13f0	        LDA #<>( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)    ; Set up the Source
.1e0414		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0418		a9 a0 00	lda #$00a0	        LDA #FMXMoniker_SizeX
.1e041b		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e041f		a9 50 00	lda #$0050	        LDA #FMXMoniker_SizeY
.1e0422		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e0426		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e0429		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e042d		e2 20		sep #$20	                SEP #$20        ; set A short
.1e042f		a9 1e		lda #$1e	        LDA #`SS_FMX_TXT
.1e0431		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0435		a9 00		lda #$00	        LDA #`( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e0437		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e043b		a9 00		lda #$00	        LDA #$00
.1e043d		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0441		a9 01		lda #$01	        LDA #`( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)
.1e0443		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e0447		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e044b		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e044e						DMA_UPlus_Moniker:
.1e044e		c2 20		rep #$20	                REP #$20        ; set A long
.1e0450		a9 00 94	lda #$9400	        LDA #<>SS_UPlus_TXT      ; Set up the Source
.1e0453		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e0457		a9 00 18	lda #$1800	        LDA #<>( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e045a		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e045e		a9 00 00	lda #$0000	        LDA #$0000
.1e0461		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0465		a9 10 14	lda #$1410	        LDA #<>( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)    ; Set up the Source
.1e0468		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e046c		a9 60 00	lda #$0060	        LDA #UPlusMoniker_SizeX
.1e046f		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e0473		a9 40 00	lda #$0040	        LDA #UPlusMoniker_SizeY
.1e0476		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e047a		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e047d		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e0481		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0483		a9 1e		lda #$1e	        LDA #`SS_UPlus_TXT
.1e0485		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0489		a9 00		lda #$00	        LDA #`( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e048b		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e048f		a9 00		lda #$00	        LDA #$00
.1e0491		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0495		a9 01		lda #$01	        LDA #`( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)
.1e0497		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e049b		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e049f		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e04a2						DMA_U_Moniker:
.1e04a2		c2 20		rep #$20	                REP #$20        ; set A long
.1e04a4		a9 00 ac	lda #$ac00	        LDA #<>SS_U_TXT      ; Set up the Source
.1e04a7		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e04ab		a9 00 10	lda #$1000	        LDA #<>( UMoniker_SizeX *UMoniker_SizeY )
.1e04ae		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e04b2		a9 00 00	lda #$0000	        LDA #$0000
.1e04b5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e04b9		a9 20 14	lda #$1420	        LDA #<>( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)    ; Set up the Source
.1e04bc		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e04c0		a9 40 00	lda #$0040	        LDA #UMoniker_SizeX
.1e04c3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e04c7		a9 40 00	lda #$0040	        LDA #UMoniker_SizeY
.1e04ca		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e04ce		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e04d1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e04d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04d7		a9 1e		lda #$1e	        LDA #`SS_U_TXT
.1e04d9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e04dd		a9 00		lda #$00	        LDA #`( UMoniker_SizeX * UMoniker_SizeY )
.1e04df		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e04e3		a9 00		lda #$00	        LDA #$00
.1e04e5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e04e9		a9 01		lda #$01	        LDA #`( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)
.1e04eb		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e04ef		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e04f3		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e04f6						Done_DMA_Model_Moniker
.1e04f6		6b		rtl		        RTL
.1e04f7						SS_VDMA_SETUP_2_TRANSFER_IMAGE
.1e04f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04f9		a9 11		lda #$11	        LDA #( SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src )
.1e04fb		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e04ff		a9 13		lda #$13	        LDA #( VDMA_CTRL_Enable |  VDMA_CTRL_SysRAM_Src | VDMA_CTRL_1D_2D )
.1e0501		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0505		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0507		af 00 04 af	lda $af0400	        LDA @l VDMA_CONTROL_REG
.1e050b		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e050d		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0511		af 20 04 af	lda $af0420	        LDA @l SDMA_CTRL_REG0
.1e0515		09 80		ora #$80	        ORA #SDMA_CTRL0_Start_TRF
.1e0517		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e051b		ea		nop		        NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e051c		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e051d		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e051e		ea		nop		        NOP
.1e051f		ea		nop		        NOP
.1e0520		ea		nop		        NOP
.1e0521		ea		nop		        NOP
.1e0522		ea		nop		        NOP
.1e0523		ea		nop		        NOP
.1e0524		ea		nop		        NOP
.1e0525		a9 00		lda #$00	        LDA #$00
.1e0527		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e052b						NOTFINISHED:
.1e052b		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e052f		29 80		and #$80	        AND #$80
.1e0531		c9 80		cmp #$80	        CMP #$80
.1e0533		f0 f6		beq $1e052b	        BEQ NOTFINISHED
.1e0535		a9 00		lda #$00	        LDA #$00
.1e0537		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e053b		6b		rtl		        RTL
.1e053c						SS_VDMA_CLEAR_MEMORY_640_480
.1e053c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e053e		a9 05		lda #$05	        LDA #( VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill )
.1e0540		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0544		a9 00		lda #$00	        LDA #$00
.1e0546		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e054a		c2 20		rep #$20	                REP #$20        ; set A long
.1e054c		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e054f		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0553		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0555		a9 00		lda #$00	        LDA #$00
.1e0557		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e055b		c2 20		rep #$20	                REP #$20        ; set A long
.1e055d		a9 00 b0	lda #$b000	        LDA #<>(640*480)
.1e0560		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e0564		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0566		a9 04		lda #$04	        LDA #`(640*480)
.1e0568		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e056c		a9 00		lda #$00	        LDA #$00
.1e056e		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0572		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e0576		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e0578		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e057c		ea		nop		         NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e057d		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e057e		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e057f		ea		nop		        NOP
.1e0580		ea		nop		        NOP
.1e0581		ea		nop		        NOP
.1e0582		ea		nop		        NOP
.1e0583		ea		nop		        NOP
.1e0584						SS_VDMA_CLR_LOOPA:
.1e0584		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e0588		29 80		and #$80	        AND #$80
.1e058a		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e058c		f0 f6		beq $1e0584	        BEQ SS_VDMA_CLR_LOOPA
.1e058e		ea		nop		        NOP
.1e058f		a9 00		lda #$00	        LDA #$00
.1e0591		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0595		6b		rtl		        RTL
.1e0596						SS_VDMA_TRANSFER_VRAM_2_VRAM
.1e0596		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0598		a9 01		lda #$01	        LDA #( VDMA_CTRL_Enable )
.1e059a		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e059e		a9 00		lda #$00	        LDA #$00
.1e05a0		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e05a4		c2 20		rep #$20	                REP #$20        ; set A long
.1e05a6		a9 00 96	lda #$9600	        LDA #$9600      ; Set up the Source
.1e05a9		8f 02 04 af	sta $af0402	        STA @l VDMA_SRC_ADDY_L
.1e05ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05af		a9 00		lda #$00	        LDA #$00
.1e05b1		8f 04 04 af	sta $af0404	        STA @l VDMA_SRC_ADDY_H
.1e05b5		c2 20		rep #$20	                REP #$20        ; set A long
.1e05b7		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e05ba		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e05be		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05c0		a9 00		lda #$00	        LDA #$00
.1e05c2		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e05c6		c2 20		rep #$20	                REP #$20        ; set A long
.1e05c8		a9 00 14	lda #$1400	        LDA #<>(320*16)
.1e05cb		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e05cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05d1		a9 00		lda #$00	        LDA #`(320*16)
.1e05d3		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e05d7		a9 00		lda #$00	        LDA #$00
.1e05d9		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e05dd		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e05e1		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e05e3		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e05e7		ea		nop		        NOP
.1e05e8		ea		nop		        NOP
.1e05e9		ea		nop		        NOP
.1e05ea						SS_VDMA_CLR_LOOPB:
.1e05ea		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e05ee		29 80		and #$80	        AND #$80
.1e05f0		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e05f2		f0 f6		beq $1e05ea	        BEQ SS_VDMA_CLR_LOOPB
.1e05f4		ea		nop		        NOP
.1e05f5		a9 00		lda #$00	        LDA #$00
.1e05f7		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e05fb		6b		rtl		        RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/Splashscreen_Text_Display.asm

=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
.1e05fc						Set_Text_Color:
.1e05fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e05fe		a9 00 00	lda #$0000	            LDA #00
.1e0601		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e0603		a9 30 00	lda #$0030	            LDA #48
.1e0606		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e0608		20 fc 08	jsr $1e08fc	            JSR Line_Display_Compute_Pointer
.1e060b		a0 00 00	ldy #$0000	            LDY #$0000
.1e060e		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0610		a9 40		lda #$40	            LDA #$40
.1e0612						SetColorBranch:
.1e0612		97 a8		sta [$a8],y	            STA [COLOR_DST_PTR_L],Y
.1e0614		c8		iny		            INY
.1e0615		c0 50 00	cpy #$0050	            CPY #80
.1e0618		d0 f8		bne $1e0612	            BNE SetColorBranch
.1e061a		60		rts		            RTS
.1e061b						Model_Update_Info_Field:
.1e061b		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e061d		a9 00 00	lda #$0000	            LDA #$0000
.1e0620		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0622		a5 b0		lda $b0		            LDA MODEL
.1e0624		0a		asl a		            ASL
.1e0625		0a		asl a		            ASL
.1e0626		aa		tax		            TAX
.1e0627		c2 20		rep #$20	                REP #$20        ; set A long
.1e0629		bf af 0c 1e	lda $1e0caf,x	            LDA MODEL_TABLE, X
.1e062d		85 a0		sta $a0		            STA MOD_SELECT_L
.1e062f		bf b1 0c 1e	lda $1e0cb1,x	            LDA MODEL_TABLE + 2, X
.1e0633		85 a2		sta $a2		            STA MOD_SELECT_H
.1e0635		a0 00 00	ldy #$0000	            LDY #$0000
.1e0638		84 a6		sty $a6		            STY LINE_INDEX
.1e063a						Next_Change_Here:
.1e063a		c2 20		rep #$20	                REP #$20        ; set A long
.1e063c		a4 a6		ldy $a6		            LDY LINE_INDEX
.1e063e		bb		tyx		            TYX
.1e063f		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e0641		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e0643		bf ff 0c 1e	lda $1e0cff,x	            LDA LINE_MOD, X
.1e0647		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0649		c8		iny		            INY
.1e064a		c8		iny		            INY
.1e064b		bb		tyx		            TYX
.1e064c		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e064e		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e0650		bf ff 0c 1e	lda $1e0cff,x	            LDA LINE_MOD, X
.1e0654		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0656		c8		iny		            INY
.1e0657		c8		iny		            INY
.1e0658		84 a6		sty $a6		            STY LINE_INDEX
.1e065a		c0 10 00	cpy #$0010	            CPY #16
.1e065d		f0 10		beq $1e066f	            BEQ LetsMoveOn
.1e065f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0661		a0 00 00	ldy #$0000	            LDY #$0000
.1e0664						nextchar:
.1e0664		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e0666		c9 00		cmp #$00	            CMP #$00
.1e0668		f0 d0		beq $1e063a	            BEQ Next_Change_Here
.1e066a		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e066c		c8		iny		            INY
.1e066d		80 f5		bra $1e0664	            BRA nextchar
.1e066f						LetsMoveOn:
.1e066f		af 0b 0d 1e	lda $1e0d0b	            LDA LINE_MOD + 12
.1e0673		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0675		a0 00 00	ldy #$0000	            LDY #$0000
.1e0678		e2 20		sep #$20	                SEP #$20        ; set A short
.1e067a		af 05 e8 af	lda $afe805	            LDA @lREVOFPCB_C
.1e067e		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0680		c8		iny		            INY
.1e0681		af 06 e8 af	lda $afe806	            LDA @lREVOFPCB_4
.1e0685		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0687		c8		iny		            INY
.1e0688		af 07 e8 af	lda $afe807	            LDA @lREVOFPCB_A
.1e068c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e068e		18		clc		            CLC
.1e068f		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR   ; it is in BCD
.1e0693		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0696		8f da 0a 1e	sta $1e0ada	            STA @lLINE8 + 56    ; FAT VICKY in U/U+ Model
.1e069a		8f 13 0b 1e	sta $1e0b13	            STA @lLINE9 + 47    ; GABE in FMX
.1e069e		8f 59 0b 1e	sta $1e0b59	            STA @lLINE10 + 51   ; VICKY II in FMX
.1e06a2		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR
.1e06a6		29 0f		and #$0f	            AND #$0F
.1e06a8		69 30		adc #$30	            ADC #$30
.1e06aa		8f db 0a 1e	sta $1e0adb	            STA @lLINE8 + 57    ; FAT VICKY in U/U+ Model
.1e06ae		8f 14 0b 1e	sta $1e0b14	            STA @lLINE9 + 48    ; GABE in FMX
.1e06b2		8f 5a 0b 1e	sta $1e0b5a	            STA @lLINE10 + 52   ; VICKY II in FMX
.1e06b6		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR   ; it is in BCD
.1e06ba		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e06bd		8f dd 0a 1e	sta $1e0add	            STA @lLINE8 + 59    ; FAT VICKY in U/U+ Model
.1e06c1		8f 16 0b 1e	sta $1e0b16	            STA @lLINE9 + 50    ; GABE in FMX
.1e06c5		8f 5c 0b 1e	sta $1e0b5c	            STA @lLINE10 + 54   ; VICKY II in FMX
.1e06c9		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR
.1e06cd		29 0f		and #$0f	            AND #$0F
.1e06cf		69 30		adc #$30	            ADC #$30
.1e06d1		8f de 0a 1e	sta $1e0ade	            STA @lLINE8 + 60    ; FAT VICKY in U/U+ Model
.1e06d5		8f 17 0b 1e	sta $1e0b17	            STA @lLINE9 + 51    ; GABE in FMX
.1e06d9		8f 5d 0b 1e	sta $1e0b5d	            STA @lLINE10 + 55   ; VICKY II in FMX
.1e06dd		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR   ; it is in BCD
.1e06e1		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e06e4		8f e0 0a 1e	sta $1e0ae0	            STA @lLINE8 + 62    ; FAT VICKY in U/U+ Model
.1e06e8		8f 19 0b 1e	sta $1e0b19	            STA @lLINE9 + 53    ; GABE in FMX
.1e06ec		8f 5f 0b 1e	sta $1e0b5f	            STA @lLINE10 + 57   ; VICKY II in FMX
.1e06f0		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR
.1e06f4		29 0f		and #$0f	            AND #$0F
.1e06f6		69 30		adc #$30	            ADC #$30
.1e06f8		8f e1 0a 1e	sta $1e0ae1	            STA @lLINE8 + 63    ; FAT VICKY in U/U+ Model
.1e06fc		8f 1a 0b 1e	sta $1e0b1a	            STA @lLINE9 + 54    ; GABE in FMX
.1e0700		8f 60 0b 1e	sta $1e0b60	            STA @lLINE10 + 58   ; VICKY II in FMX
.1e0704		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e0708		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e070b		8f d0 0a 1e	sta $1e0ad0	            STA @lLINE8 + 46    ; U/U+
.1e070f		8f 09 0b 1e	sta $1e0b09	            STA @lLINE9 + 37    ; When FMX, this is the Info for GABE
.1e0713		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e0717		29 0f		and #$0f	            AND #$0F
.1e0719		69 30		adc #$30	            ADC #$30
.1e071b		8f d1 0a 1e	sta $1e0ad1	            STA @lLINE8 + 47
.1e071f		8f 0a 0b 1e	sta $1e0b0a	            STA @lLINE9 + 38    ; When FMX, this is the Info for GABE
.1e0723		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e0727		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e072a		8f 4f 0b 1e	sta $1e0b4f	            STA @lLINE10 + 41    ; When FMX, this is the Info for GABE
.1e072e		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e0732		29 0f		and #$0f	            AND #$0F
.1e0734		69 30		adc #$30	            ADC #$30
.1e0736		8f 50 0b 1e	sta $1e0b50	            STA @lLINE10 + 42    ; When FMX, this is the Info for GABE
.1e073a		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e073e		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0741		8f d2 0a 1e	sta $1e0ad2	            STA @lLINE8 + 48
.1e0745		8f 0b 0b 1e	sta $1e0b0b	            STA @lLINE9 + 39    ; When FMX, this is the Info for GABE
.1e0749		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e074d		29 0f		and #$0f	            AND #$0F
.1e074f		69 30		adc #$30	            ADC #$30
.1e0751		8f d3 0a 1e	sta $1e0ad3	            STA @lLINE8 + 49
.1e0755		8f 0c 0b 1e	sta $1e0b0c	            STA @lLINE9 + 40    ; When FMX, this is the Info for GABE
.1e0759		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e075d		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0760		8f 51 0b 1e	sta $1e0b51	            STA @lLINE10 + 43    ; When FMX, this is the Info for GABE
.1e0764		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e0768		29 0f		and #$0f	            AND #$0F
.1e076a		69 30		adc #$30	            ADC #$30
.1e076c		8f 52 0b 1e	sta $1e0b52	            STA @lLINE10 + 44    ; When FMX, this is the Info for GABE
.1e0770		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e0774		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0777		8f c4 0a 1e	sta $1e0ac4	            STA @lLINE8 + 34
.1e077b		8f fd 0a 1e	sta $1e0afd	            STA @lLINE9 + 25    ; When FMX, this is the Info for GABE
.1e077f		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e0783		29 0f		and #$0f	            AND #$0F
.1e0785		69 30		adc #$30	            ADC #$30
.1e0787		8f c5 0a 1e	sta $1e0ac5	            STA @lLINE8 + 35
.1e078b		8f fe 0a 1e	sta $1e0afe	            STA @lLINE9 + 26    ; When FMX, this is the Info for GABE
.1e078f		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e0793		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0796		8f 44 0b 1e	sta $1e0b44	            STA @lLINE10 + 30    ; When FMX, this is the Info for GABE
.1e079a		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e079e		29 0f		and #$0f	            AND #$0F
.1e07a0		69 30		adc #$30	            ADC #$30
.1e07a2		8f 45 0b 1e	sta $1e0b45	            STA @lLINE10 + 31    ; When FMX, this is the Info for GABE
.1e07a6		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e07aa		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e07ad		8f c6 0a 1e	sta $1e0ac6	            STA @lLINE8 + 36
.1e07b1		8f ff 0a 1e	sta $1e0aff	            STA @lLINE9 + 27    ; When FMX, this is the Info for GABE
.1e07b5		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e07b9		29 0f		and #$0f	            AND #$0F
.1e07bb		69 30		adc #$30	            ADC #$30
.1e07bd		8f c7 0a 1e	sta $1e0ac7	            STA @lLINE8 + 37
.1e07c1		8f 00 0b 1e	sta $1e0b00	            STA @lLINE9 + 28    ; When FMX, this is the Info for GABE
.1e07c5		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e07c9		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e07cc		8f 46 0b 1e	sta $1e0b46	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e07d0		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e07d4		29 0f		and #$0f	            AND #$0F
.1e07d6		69 30		adc #$30	            ADC #$30
.1e07d8		8f 46 0b 1e	sta $1e0b46	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e07dc		20 4f 08	jsr $1e084f	            JSR GODETECTHIRES ; Dip-Switch and Change Text
.1e07df		20 70 08	jsr $1e0870	            JSR GODETECTHDD   ; Dip-Switch and Change Text
.1e07e2		20 71 08	jsr $1e0871	            JSR GODETECTEXP   ; Go Check if there is a Card Change Text
.1e07e5		a5 b0		lda $b0		            LDA MODEL
.1e07e7		29 03		and #$03	            AND #$03
.1e07e9		c9 00		cmp #$00	            CMP #$00
.1e07eb		f0 12		beq $1e07ff	            BEQ Erase_FATVicky_Line;
.1e07ed		c9 01		cmp #$01	            CMP #$01
.1e07ef		f0 29		beq $1e081a	            BEQ Erase_2Lines;
.1e07f1		c9 02		cmp #$02	            CMP #$02
.1e07f3		f0 25		beq $1e081a	            BEQ Erase_2Lines;
.1e07f5		60		rts		            RTS
.1e07f6						HighNibblerBCD:
.1e07f6		29 f0		and #$f0	            AND #$F0
.1e07f8		4a		lsr a		            LSR A
.1e07f9		4a		lsr a		            LSR A
.1e07fa		4a		lsr a		            LSR A
.1e07fb		4a		lsr a		            LSR A
.1e07fc		69 30		adc #$30	            ADC #$30
.1e07fe		60		rts		            RTS
.1e07ff						Erase_FATVicky_Line:
.1e07ff		c2 20		rep #$20	                REP #$20        ; set A long
.1e0801		a9 a2 0a	lda #$0aa2	            LDA #<>LINE8
.1e0804		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0806		a9 1e 00	lda #$001e	            LDA #`LINE8
.1e0809		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e080b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e080d		a0 00 00	ldy #$0000	            LDY #$0000
.1e0810		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e0812		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0814		c8		iny		            INY
.1e0815		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e0817		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0819		60		rts		            RTS
.1e081a						Erase_2Lines
.1e081a		c2 20		rep #$20	                REP #$20        ; set A long
.1e081c		a9 e4 0a	lda #$0ae4	            LDA #<>LINE9
.1e081f		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0821		a9 1e 00	lda #$001e	            LDA #`LINE9
.1e0824		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0826		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0828		a0 00 00	ldy #$0000	            LDY #$0000
.1e082b		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e082d		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e082f		c8		iny		            INY
.1e0830		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e0832		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0834		c2 20		rep #$20	                REP #$20        ; set A long
.1e0836		a9 26 0b	lda #$0b26	            LDA #<>LINE10
.1e0839		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e083b		a9 1e 00	lda #$001e	            LDA #`LINE10
.1e083e		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0840		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0842		a0 00 00	ldy #$0000	            LDY #$0000
.1e0845		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e0847		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0849		c8		iny		            INY
.1e084a		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e084c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e084e		60		rts		            RTS
.1e084f						GODETECTHIRES
.1e084f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0851		af 02 00 af	lda $af0002	            LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.1e0855		29 10		and #$10	            AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.1e0857		c9 10		cmp #$10	            CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.1e0859		f0 14		beq $1e086f	            BEQ WeAreDone
.1e085b		c2 10		rep #$10	                REP #$10        ; set X long
.1e085d		a2 00 00	ldx #$0000	            LDX #$0000
.1e0860						ChangeNextChar
.1e0860		bf 5f 0d 1e	lda $1e0d5f,x	            LDA @l ON_TEXT, X
.1e0864		c9 00		cmp #$00	            CMP #$00
.1e0866		f0 07		beq $1e086f	            BEQ WeAreDone
.1e0868		9f 53 0c 1e	sta $1e0c53,x	            STA @l LINE17 +13, X
.1e086c		e8		inx		            INX
.1e086d		d0 f1		bne $1e0860	            BNE ChangeNextChar
.1e086f						WeAreDone
.1e086f						NoExpansionCardPresent
.1e086f		60		rts		            RTS
.1e0870						GODETECTHDD
.1e0870		60		rts		            RTS
.1e0871						GODETECTEXP
.1e0871		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0873		af 87 e8 af	lda $afe887	            LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.1e0877		29 10		and #$10	            AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.1e0879		c9 10		cmp #$10	            CMP #GABE_SYS_STAT_EXP
.1e087b		d0 25		bne $1e08a2	            BNE NoExpansionCardPresent
.1e087d		c2 10		rep #$10	                REP #$10        ; set X long
.1e087f		a2 00 00	ldx #$0000	            LDX #$0000
.1e0882						ChangeNextChar
.1e0882		bf 63 0d 1e	lda $1e0d63,x	            LDA @l YES_TEXT, X
.1e0886		c9 00		cmp #$00	            CMP #$00
.1e0888		f0 07		beq $1e0891	            BEQ WeAreDone
.1e088a		9f 85 0c 1e	sta $1e0c85,x	            STA @l LINE19 +26, X
.1e088e		e8		inx		            INX
.1e088f		d0 f1		bne $1e0882	            BNE ChangeNextChar
.1e0891						WeAreDone
.1e0891		a2 00 00	ldx #$0000	            LDX #$0000
.1e0894						AddCardName
.1e0894		bf 00 00 ae	lda $ae0000,x	            LDA @l EVID_ID_NAME_ASCII, X
.1e0898		9f 89 0c 1e	sta $1e0c89,x	            STA @l LINE20, X
.1e089c		e8		inx		            INX
.1e089d		e0 10 00	cpx #$0010	            CPX #$10
.1e08a0		d0 f2		bne $1e0894	            BNE AddCardName
.1e08a2						NoExpansionCardPresent
.1e08a2		60		rts		            RTS
.1e08a3						Line_Setup_Before_Display
.1e08a3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08a5		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08a7		c9 17 00	cmp #$0017	            CMP #NumberOfEntry
.1e08aa		f0 33		beq $1e08df	            BEQ DONE
.1e08ac		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08ae		0a		asl a		            ASL A
.1e08af		0a		asl a		            ASL A
.1e08b0		aa		tax		            TAX
.1e08b1		bf 24 09 1e	lda $1e0924,x	            LDA TEXT_TABLE, X
.1e08b5		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e08b7		bf 26 09 1e	lda $1e0926,x	            LDA TEXT_TABLE + 2, X
.1e08bb		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e08bd		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08bf		0a		asl a		            ASL A
.1e08c0		aa		tax		            TAX
.1e08c1		bf 80 09 1e	lda $1e0980,x	            LDA TEXT_POSX, X
.1e08c5		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e08c7		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e08cb		bf ae 09 1e	lda $1e09ae,x	            LDA TEXT_POSY, X
.1e08cf		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e08d1		8f 16 00 af	sta $af0016	            STA @l VKY_TXT_CURSOR_Y_REG_L
.1e08d5		20 fc 08	jsr $1e08fc	            JSR Line_Display_Compute_Pointer
.1e08d8		a9 00 00	lda #$0000	            LDA #$0000
.1e08db		85 a0		sta $a0		            STA TEXT_INDEX
.1e08dd		e6 a6		inc $a6		            INC LINE_INDEX
.1e08df						DONE:
.1e08df		60		rts		            RTS
.1e08e0						Line_Display_1_Character
.1e08e0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08e2		e6 a2		inc $a2		            INC TEXT_CURSOR_X       ; Always put the Cursor In Front of the "To be displayed Char"
.1e08e4		a5 a2		lda $a2		            LDA TEXT_CURSOR_X
.1e08e6		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e08ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1e08ec		38		sec		            SEC
.1e08ed		a4 a0		ldy $a0		            LDY TEXT_INDEX
.1e08ef		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e08f1		c9 00		cmp #$00	            CMP #$00
.1e08f3		f0 06		beq $1e08fb	            BEQ WE_ARE_DONE;
.1e08f5		18		clc		            CLC
.1e08f6		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e08f8		c8		iny		            INY
.1e08f9		84 a0		sty $a0		            STY TEXT_INDEX
.1e08fb						WE_ARE_DONE:
.1e08fb		60		rts		            RTS
.1e08fc						Line_Display_Compute_Pointer
.1e08fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08fe		a5 a4		lda $a4		            LDA TEXT_CURSOR_Y
.1e0900		8f 00 01 00	sta $000100	            STA @lUNSIGNED_MULT_A_LO
.1e0904		a9 50 00	lda #$0050	            LDA #80
.1e0907		8f 02 01 00	sta $000102	            STA @lUNSIGNED_MULT_B_LO
.1e090b		18		clc		            CLC
.1e090c		af 04 01 00	lda $000104	            LDA @lUNSIGNED_MULT_AL_LO
.1e0910		65 a2		adc $a2		            ADC TEXT_CURSOR_X
.1e0912		69 00 a0	adc #$a000	            ADC #$A000
.1e0915		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0917		69 00 20	adc #$2000	            ADC #$2000
.1e091a		85 a8		sta $a8		            STA COLOR_DST_PTR_L
.1e091c		a9 af 00	lda #$00af	            LDA #$00AF
.1e091f		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0921		85 aa		sta $aa		            STA COLOR_DST_PTR_H
.1e0923		60		rts		            RTS
>1e0924		dc 09 1e 00 fd 09 1e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>1e092c		13 0a 1e 00 21 0a 1e 00 39 0a 1e 00 5c 0a 1e 00
>1e093c		80 0a 1e 00 95 0a 1e 00
>1e0944		a2 0a 1e 00 e4 0a 1e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>1e094c		26 0b 1e 00 68 0b 1e 00 72 0b 1e 00 9b 0b 1e 00
>1e095c		d2 0b 1e 00 f5 0b 1e 00
>1e0964		07 0c 1e 00 46 0c 1e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>1e096c		58 0c 1e 00 6b 0c 1e 00 89 0c 1e 00 9a 0c 1e 00
>1e097c		ad 0c 1e 00
>1e0980		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>1e0988		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>1e0998		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>1e09a8		2d 00 1e 00 48 00
>1e09ae		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>1e09b6		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>1e09c6		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>1e09d6		35 00 39 00 39 00
=6						leftAlign = 6
>1e09dc		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>1e09e4		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>1e09f4		20 20 20 20 20 20 20 20 00
>1e09fd		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>1e0a05		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>1e0a13		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>1e0a1b		4e 46 4f 3a 20 00
>1e0a21		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>1e0a29		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>1e0a39		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>1e0a41		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>1e0a51		20 20 20 20 20 20 20 20 20 20 00
>1e0a5c		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>1e0a64		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>1e0a74		20 20 20 20 20 20 20 20 20 20 20 00
>1e0a80		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>1e0a88		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>1e0a95		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>1e0a9d		53 29 3a 20 00
>1e0aa2		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>1e0aaa		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>1e0aba		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>1e0aca		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>1e0ada		30 30 2f 30 30 2f 30 30 20 00
>1e0ae4		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533 - GABE - REV:0000 SUBREV:0000 DATE:00/00/00          ", $00
>1e0aec		35 33 33 20 2d 20 47 41 42 45 20 2d 20 52 45 56
>1e0afc		3a 30 30 30 30 20 53 55 42 52 45 56 3a 30 30 30
>1e0b0c		30 20 44 41 54 45 3a 30 30 2f 30 30 2f 30 30 20
>1e0b1c		20 20 20 20 20 20 20 20 20 00
>1e0b26		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551 - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00      ", $00
>1e0b2e		35 35 31 20 2d 20 56 49 43 4b 59 20 49 49 20 2d
>1e0b3e		20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45 56
>1e0b4e		3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30 30
>1e0b5e		2f 30 30 20 20 20 20 20 20 00
>1e0b68		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>1e0b70		20 00
>1e0b72		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>1e0b7a		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>1e0b8a		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>1e0b9a		00
>1e0b9b		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>1e0ba3		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>1e0bb3		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>1e0bc3		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>1e0bd2		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>1e0bda		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>1e0bea		4c 20 54 52 45 4d 42 4c 41 59 00
>1e0bf5		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>1e0bfd		20 4d 45 4e 55 2d 2d 2d 2d 00
>1e0c07		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>1e0c0f		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>1e0c1f		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>1e0c2f		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>1e0c3f		46 41 55 4c 54 20 00
>1e0c46		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>1e0c4e		4f 44 45 3a 20 4f 46 46 20 00
>1e0c58		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>1e0c60		41 4c 4c 45 44 3a 20 2d 2d 20 00
>1e0c6b		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>1e0c73		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>1e0c83		3a 20 4e 4f 20 00
>1e0c89		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1e0c91		00 00 00 00 00 00 00 00 00
>1e0c9a		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>1e0ca2		46 4f 45 4e 49 58 2e 43 4f 4d 00
>1e0cad		20 00				LINE22 .text " ", $00
>1e0caf		bf 0c 1e 00 cf 0c 1e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>1e0cb7		df 0c 1e 00 ef 0c 1e 00
>1e0cbf		0f 0d 1e 00 4f 0d 1e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>1e0cc7		4f 0d 1e 00 00 00 00 00
>1e0ccf		1f 0d 1e 00 4f 0d 1e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>1e0cd7		3f 0d 1e 00 00 00 00 00
>1e0cdf		2f 0d 1e 00 3f 0d 1e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>1e0ce7		3f 0d 1e 00 00 00 00 00
>1e0cef		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>1e0cf7		00 00 00 00 00 00 00 00
>1e0cff		ec 09 1e 00 4b 0a 1e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>1e0d07		6f 0a 1e 00 8e 0a 1e 00
>1e0d0f		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>1e0d17		4e 49 58 20 46 4d 58 00
>1e0d1f		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>1e0d27		4e 49 58 20 55 2b 20 00
>1e0d2f		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>1e0d37		4e 49 58 20 55 20 20 00
>1e0d3f		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>1e0d47		32 20 42 59 54 45 53 00
>1e0d4f		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>1e0d57		34 20 42 59 54 45 53 00
>1e0d5f		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>1e0d63		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src\kernel.asm

>1e0d67						.align 256
.1e0e00						SS_MONIKER_LUT
>1e0e00		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>1e0e08		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>1e0e18		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>1e0e28		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>1e0e38		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>1e0e48		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>1e0e58		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>1e0e68		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>1e0e78		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>1e0e88		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>1e0e98		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>1e0ea8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>1e0eb8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>1e0ec8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>1e0ed8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>1e0ee8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>1e0ef8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>1e0f08		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>1e0f18		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>1e0f28		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>1e0f38		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>1e0f48		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>1e0f58		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>1e0f68		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>1e0f78		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>1e0f88		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>1e0f98		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>1e0fa8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>1e0fb8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>1e0fc8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>1e0fd8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>1e0fe8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>1e0ff8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>1e1008		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>1e1018		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>1e1028		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>1e1038		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>1e1048		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>1e1058		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>1e1068		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>1e1078		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>1e1088		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>1e1098		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>1e10a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>1e10b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>1e10c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>1e10d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>1e10e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>1e10f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>1e1108		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>1e1118		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>1e1128		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>1e1138		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>1e1148		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>1e1158		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>1e1168		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>1e1178		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>1e1188		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>1e1198		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>1e11a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>1e11b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>1e11c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>1e11d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>1e11e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>1e11f8		ff ff ff 00 e5 80 80 00
.1e1200						SS_MONIKER
>1e1200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>1e1208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>1e1808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e1818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e1828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e1958		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e1968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1a98		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>1e1aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1bd8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1d08		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1d18		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>1e1d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1e48		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1e58		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1f88		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e1f98		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e20c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e20d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e20e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2128		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>1e2138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2208		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>1e2218		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e2228		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2268		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e2278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2348		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e2358		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e23a8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e23b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2488		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2498		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e24a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e24e8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e24f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e25c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e25d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e25e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2628		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>1e2638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2668		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>1e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e2708		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2718		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2738		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2768		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>1e2778		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e2788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2798		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>1e27a8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e27b8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e27c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e27d8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>1e27e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e2848		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2868		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e28a8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>1e28b8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>1e28c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e28d8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>1e28e8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>1e28f8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2918		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>1e2928		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e2938		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e2948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2958		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>1e2968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2978		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>1e2988		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>1e29b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>1e29e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>1e29f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1e2a08		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>1e2a18		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>1e2a28		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>1e2a38		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e2a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2a58		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>1e2a68		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>1e2a78		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>1e2a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2a98		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>1e2aa8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>1e2ac8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>1e2ad8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>1e2ae8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>1e2af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b18		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2b28		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>1e2b38		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e2b48		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2b58		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e2b68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2b78		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2b98		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ba8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>1e2bb8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>1e2bc8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>1e2bd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2be8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>1e2bf8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2c08		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c18		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>1e2c28		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>1e2c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c58		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2c68		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c78		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2c88		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2c98		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>1e2ca8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e2cb8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2cc8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>1e2cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ce8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>1e2cf8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e2d08		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>1e2d18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2d28		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>1e2d38		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2d48		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2d58		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>1e2d68		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>1e2d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2d98		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2da8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2db8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2dc8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e2dd8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e2de8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e2df8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2e08		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e28		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>1e2e38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e48		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e68		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2e78		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>1e2e88		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2e98		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2ea8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>1e2eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1e2ed8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ee8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2ef8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e2f08		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f18		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>1e2f28		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f38		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2f48		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>1e2f88		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f98		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2fa8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2fb8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>1e2fc8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2fd8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2fe8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>1e2ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3008		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>1e3018		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3028		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e3038		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e3048		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3058		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>1e3068		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>1e3078		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3088		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e3098		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e30a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>1e30b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>1e30c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e30d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>1e30e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>1e30f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e3108		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>1e3118		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>1e3128		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>1e3138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3148		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e3158		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e3168		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3178		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3198		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e31a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e31b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e31c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e31d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>1e31e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>1e31f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>1e3208		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e3218		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>1e3228		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3238		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3248		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3258		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>1e3268		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3288		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3298		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e32a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e32b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>1e32d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e32e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3308		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>1e3318		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>1e3328		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3338		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>1e3348		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3358		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e3368		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3378		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3388		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>1e3398		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>1e33a8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e33b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e33c8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e33d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e33e8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>1e33f8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3408		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>1e3418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3428		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3448		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>1e3458		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>1e3468		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>1e3478		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>1e3488		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3498		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e34a8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e34b8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e34c8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e34d8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>1e34e8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e34f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3508		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3518		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>1e3528		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>1e3538		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3548		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e3558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e3568		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3588		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e3598		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e35a8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e35b8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e35c8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e35d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e35e8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e35f8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>1e3608		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e3618		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>1e3628		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3648		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3658		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>1e3668		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>1e3678		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3688		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>1e3698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e36a8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e36b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e36c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e36d8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e36e8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e36f8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3708		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3728		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3738		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e3748		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3758		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3768		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e3778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3788		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3798		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>1e37a8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>1e37b8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e37c8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e37d8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e37e8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>1e37f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3808		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e3818		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e3828		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3838		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3848		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3858		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e3868		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3878		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3888		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3898		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e38a8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e38b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e38c8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e38d8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>1e38e8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>1e38f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3908		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3918		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3928		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>1e3938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3948		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3958		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>1e3968		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>1e3978		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3988		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3998		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e39a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e39b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>1e39c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e39d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e39e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>1e39f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a08		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3a18		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e3a28		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3a38		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>1e3a48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a58		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>1e3a68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a78		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a88		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3a98		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>1e3aa8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3ab8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3ac8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3ad8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>1e3ae8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3af8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3b08		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e3b18		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3b28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e3b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e3b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b68		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3b78		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>1e3b88		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3b98		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>1e3ba8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3bb8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3bc8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>1e3bd8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>1e3be8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3bf8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3c08		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3c18		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3c28		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e3c38		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>1e3c48		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3c58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3c68		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e3c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3c88		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>1e3c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ca8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e3cb8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3cc8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cd8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3ce8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cf8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3d08		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>1e3d18		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>1e3d28		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d38		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3d48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3d58		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>1e3d68		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3d78		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>1e3d88		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d98		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3da8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3dc8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>1e3dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3de8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3df8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3e08		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>1e3e18		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3e28		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e38		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e3e48		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e58		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>1e3e68		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3e78		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3e88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e98		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e3ea8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3eb8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3ec8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3ed8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3ee8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f08		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f28		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3f38		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e3f48		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>1e3f58		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>1e3f68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f78		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e3f88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f98		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>1e3fa8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3fd8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>1e3fe8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>1e3ff8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e4008		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e4018		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e4028		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4048		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4068		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e4078		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4088		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e4098		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e40a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>1e40b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>1e40c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e40d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e40e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e40f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>1e4108		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>1e4118		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4128		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>1e4138		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4148		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4158		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4188		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>1e41b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>1e41e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4208		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4218		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4228		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4238		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>1e4248		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1e4258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4268		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>1e4278		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>1e4288		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4298		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e42a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e42d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1e42f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4308		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e4318		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4328		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e4338		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4348		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e4358		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4368		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4378		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>1e4388		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e43a8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e43b8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e43c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e43d8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e43e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e43f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4408		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4428		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4448		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e4458		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e4478		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4488		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1e4498		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e44a8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e44b8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e44c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e44d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e44e8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e44f8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e4508		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1e4518		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4528		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4548		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4558		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4568		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1e4578		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>1e4588		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>1e4598		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e45a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e45b8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e45c8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e45d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e45e8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e45f8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e4608		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4618		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4628		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4638		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>1e4648		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4658		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4668		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4688		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4698		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>1e46a8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e46b8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>1e46c8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e46d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e46e8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e46f8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4708		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e4718		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4728		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>1e4738		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>1e4748		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1e4758		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>1e4768		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4778		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4788		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>1e4798		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e47a8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e47b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e47c8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e47d8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>1e47e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e47f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1e4808		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4818		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4828		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4848		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4868		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>1e4878		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>1e4888		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>1e4898		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>1e48a8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e48b8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>1e48c8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e48d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1e48e8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e48f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4908		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4918		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4928		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4938		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4948		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4958		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4968		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>1e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4988		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e49a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>1e49b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>1e49c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>1e49d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>1e49e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e49f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4a08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>1e4a18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>1e4a28		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4a48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4a58		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>1e4a88		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a98		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4aa8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ac8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4ae8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4af8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1e4b08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b28		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4b38		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4b48		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4b58		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>1e4b68		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4b88		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4b98		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ba8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>1e4bd8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4be8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4c08		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4c28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c38		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>1e4c48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c68		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4c88		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e4c98		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4ca8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4cc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>1e4cd8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ce8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4cf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4d18		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d48		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d68		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d78		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>1e4d88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d98		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>1e4da8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4db8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4dc8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4dd8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4de8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>1e4df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4e08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>1e4e18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>1e4e28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e38		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>1e4e58		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>1e4e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4e88		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ea8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4eb8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ec8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ed8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4ee8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ef8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e4f08		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4f18		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4f28		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4f38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f58		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>1e4f68		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f78		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>1e4f98		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>1e4fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fc8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e4fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fe8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4ff8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5018		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>1e5028		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5038		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>1e5048		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e5058		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5068		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e5078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5088		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5098		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>1e50a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>1e50b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e50c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>1e50d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e50e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>1e50f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5108		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5128		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5138		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5148		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>1e5158		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>1e5168		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>1e5178		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>1e5188		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>1e5198		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e51a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e51d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>1e51e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>1e51f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5208		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5218		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>1e5228		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e5238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5248		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5268		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>1e5278		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5288		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>1e5298		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>1e52a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e52b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>1e52c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>1e52d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e52e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e52f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5308		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5318		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>1e5328		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>1e5338		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>1e5348		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5358		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>1e5368		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5388		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>1e5398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53a8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e53b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e53c8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e53d8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>1e53e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53f8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>1e5408		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>1e5418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e5428		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5448		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5458		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5468		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e5478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>1e54a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54c8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>1e54d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e5508		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5518		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>1e5528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5538		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e5548		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>1e5558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e5568		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5588		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>1e5598		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55a8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e5608		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>1e5618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5658		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>1e5668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5678		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e5688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56a8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56c8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>1e56d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>1e5748		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5798		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e57a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e57c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57e8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e5888		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>1e5898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e58d8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>1e58e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5928		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e59c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e59d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5a18		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>1e5a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>1e5b08		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>1e5c48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>1e61f8		00 00 00 00 00 00 00 00
.1e6200						SS_FMX_TXT
>1e6200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>1e6208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>1e64b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e64c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6558		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e65f8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6698		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e66a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e66f8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e6708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6738		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e6748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e6798		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e67a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e67d8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e67e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6838		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6878		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e6888		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e68c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e68d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e68e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6918		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>1e6928		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6968		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>1e6978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e69b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e69c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6a08		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>1e6a18		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a48		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a58		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6a68		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6aa8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>1e6ab8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ae8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6af8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6b08		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b28		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b48		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>1e6b58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b88		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b98		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>1e6ba8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6bc8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6be8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>1e6bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e6c28		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>1e6c38		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>1e6c48		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>1e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>1e6c68		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>1e6c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c88		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>1e6c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6cb8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>1e6cc8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>1e6cd8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>1e6ce8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e6d08		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>1e6d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d28		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>1e6d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d58		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>1e6d68		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6d78		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6d88		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6d98		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>1e6da8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>1e6db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6dc8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>1e6dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6de8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e6df8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e08		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e18		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6e28		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6e38		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>1e6e48		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>1e6e58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e68		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e88		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>1e6e98		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ea8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6eb8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>1e6ec8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6ed8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e6ee8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6ef8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6f08		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6f28		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>1e6f38		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f48		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f58		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>1e6f68		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6f78		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e6f88		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6f98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e6fa8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>1e6fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6fc8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>1e6fd8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6fe8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ff8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>1e7008		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e7018		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7028		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e7038		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e7048		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>1e7058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7068		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>1e7078		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7088		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7098		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>1e70a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e70b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>1e70c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e70d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>1e70e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>1e70f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7108		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>1e7118		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7128		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>1e7138		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>1e7148		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7158		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>1e7168		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e7178		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>1e7188		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>1e7198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e71a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>1e71b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e71c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>1e71d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e71e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e71f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>1e7208		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7218		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e7228		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7248		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7258		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e7268		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>1e7278		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7288		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7298		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e72a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>1e72b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e72c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e72d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7308		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e7318		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7328		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7338		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7348		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7358		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7368		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e7378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7388		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7398		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e73a8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e73b8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73c8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e73d8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e73e8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73f8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e7408		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>1e7418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7438		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7448		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7458		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7468		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>1e7478		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7488		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7498		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e74a8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e74b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e74e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74f8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7508		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>1e7518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7528		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7548		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e7558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7578		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>1e7588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7598		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e75a8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>1e75b8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75c8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e75d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75e8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e75f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7618		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e7628		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7638		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7648		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>1e7658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7668		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7678		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7688		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76b8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e76c8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>1e76d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e76e8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e76f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7708		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e7718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7758		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7768		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7778		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e7788		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7798		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e77a8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e77b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e77c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e77f8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7808		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7818		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7828		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7838		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7848		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7858		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7888		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>1e7898		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e78b8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e78c8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e78e8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e78f8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7928		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>1e7938		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7948		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>1e7958		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7968		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7978		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7988		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7998		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e79a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e79d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e79e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e79f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7a08		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a18		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7a28		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e7a38		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e7a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7a68		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a78		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a88		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>1e7a98		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7aa8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7ab8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7ac8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>1e7ad8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7af8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7b08		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b18		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b28		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7b38		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7b48		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7b58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7b68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e7b78		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ba8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>1e7bb8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>1e7bc8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7bd8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7be8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7bf8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7c08		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e7c18		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c48		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e7c58		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7c78		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c88		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>1e7c98		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7ca8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e7cb8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e7cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ce8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>1e7cf8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7d18		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d28		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>1e7d38		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e7d58		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d88		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>1e7d98		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7db8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7dc8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>1e7dd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7de8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7df8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e28		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>1e7e38		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7e58		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e68		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>1e7e78		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e88		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7e98		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ec8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7ed8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7ef8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7f08		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>1e7f18		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7f28		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7f38		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f68		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7f78		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7f88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7f98		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7fb8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7fd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8008		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8018		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e8038		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e8048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8058		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>1e8068		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e8078		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e8088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e80a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e80b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>1e8108		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>1e8118		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e8128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8148		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8158		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8168		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8178		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8188		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8198		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e81a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>1e81b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e81c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e81f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8208		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8218		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8228		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8238		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e8248		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8258		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8288		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8298		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e82e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e82f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e8308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8328		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8338		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8348		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8358		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8368		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8378		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>1e8388		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e8398		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e83a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83c8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e83d8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e83e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e83f8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>1e8408		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8418		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e8428		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e8438		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e8448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8478		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8488		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8498		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e84a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e84b8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e84c8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e84d8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e84e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e84f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8508		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e8518		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8528		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8538		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8548		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8558		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e8568		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8578		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e8588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85a8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e85b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85c8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e85d8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85e8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e85f8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>1e8608		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8618		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>1e8628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8648		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8658		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8668		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>1e8678		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8688		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e8698		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>1e86a8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e86b8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e86c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86e8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e86f8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8708		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>1e8718		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8728		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8738		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>1e8748		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8758		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8788		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8798		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87a8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87c8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e87d8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>1e87e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87f8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>1e8808		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8828		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8848		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e8858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8868		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8878		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>1e8888		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8898		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>1e88a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88c8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>1e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e88f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8908		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8918		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>1e8928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8938		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>1e8948		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8968		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>1e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e89a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e89b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>1e89e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a08		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>1e8a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8a48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a78		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>1e8a88		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8aa8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>1e8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8ae8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>1e8af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b18		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>1e8b28		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b48		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>1e8b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8b88		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e8b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bb8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>1e8bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8be8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>1e8bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8c28		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>1e8c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c58		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>1e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c88		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>1e8c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8cc8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8cf8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>1e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d28		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>1e8d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8d68		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d98		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1e8da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8dc8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8e08		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e8e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e38		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>1e8e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8ea8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>1e8eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ed8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e8ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8f48		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>1e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f78		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>1e8f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8fe8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>1e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e9028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e9088		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>1e9098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e90c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9128		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e9138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e91c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e91d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e9268		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>1e93f8		00 00 00 00 00 00 00 00
.1e9400						SS_UPlus_TXT
>1e9400		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>1e9408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>1e94f8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9558		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e95b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e95c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9618		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9668		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>1e9678		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e96c8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>1e96d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9728		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>1e9738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9788		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>1e9798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e97e8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>1e97f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9848		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>1e9858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e98a8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>1e98b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e98e8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>1e98f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9908		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e9948		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>1e9958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9968		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e99a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>1e99b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e99d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>1e99e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a08		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>1e9a18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a28		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e9a38		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a68		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9a78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9a88		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9a98		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>1e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ac8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9ad8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9ae8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9af8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>1e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9b48		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9b58		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e9b68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b88		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9ba8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9bb8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e9bc8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9be8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e9bf8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c08		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c18		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c28		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c48		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1e9c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c68		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c78		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ca8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9cb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9cc8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9cd8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e9ce8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d08		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9d18		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9d28		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9d38		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e9d48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d68		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9d78		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9d88		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e9d98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9da8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9dc8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9dd8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9de8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e9df8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e28		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e38		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e9e48		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e9e58		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>1e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e88		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e98		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e9ea8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9eb8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>1e9ec8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>1e9ed8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ee8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9ef8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f08		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9f18		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e9f28		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>1e9f38		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9f48		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9f58		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e9f78		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e9f88		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>1e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fa8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e9fc8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fd8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e9fe8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea008		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1ea018		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1ea028		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>1ea038		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea048		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>1ea058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea068		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea078		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1ea088		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>1ea098		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea0a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>1ea0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea0c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea0d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1ea0e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>1ea0f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea108		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1ea118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea128		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea138		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1ea148		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea158		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea168		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea188		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea198		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1ea1a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>1ea1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea1e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea1f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea208		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea218		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea228		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>1ea238		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea248		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea258		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea268		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea278		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>1ea288		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea298		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea2a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea2b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea2c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea2d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>1ea2e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea308		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea318		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1ea328		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>1ea338		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1ea348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea368		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea378		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea388		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>1ea398		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea3a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea3b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1ea3c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1ea3d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea3e8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea3f8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea418		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea428		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>1ea438		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea458		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea478		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea488		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1ea498		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea4a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea4b8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea4c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea4d8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea4e8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>1ea4f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1ea508		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea518		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea538		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea548		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>1ea558		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1ea568		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea578		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea598		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea5a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1ea5b8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1ea5c8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1ea5d8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea608		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea618		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1ea628		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea638		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea658		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea668		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea678		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1ea688		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea698		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea6c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea6d8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>1ea6e8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>1ea6f8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea718		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea728		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea738		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>1ea748		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea758		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea778		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea788		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea798		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1ea7a8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea7b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea7e8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea7f8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1ea808		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea858		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea868		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1ea878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1ea8a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea8b8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8c8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>1ea8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea918		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea928		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea968		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>1ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea988		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea9c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>1ea9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea9e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaa28		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>1eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>1eabf8		00 00 00 00 00 00 00 00
.1eac00						SS_U_TXT
>1eac00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>1eac08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>1eacb8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eacc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eacf8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ead38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1ead78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eada8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>1eadb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eade8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>1eadf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae28		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>1eae38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae68		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>1eae78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaea8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>1eaeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaee8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>1eaef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaf28		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>1eaf38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf48		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>1eaf58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf68		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eaf78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf88		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>1eaf98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafa8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eafb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafc8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>1eafd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafe8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eaff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb008		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>1eb018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb028		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eb038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb048		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb068		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb088		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb0a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb0c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb0e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb108		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb128		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb148		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1eb158		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb168		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>1eb198		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb1a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb1c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb1d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb1e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb208		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb218		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb228		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb248		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb258		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb268		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1eb278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb288		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb298		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb2a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1eb2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb2c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb2d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1eb2e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1eb2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb308		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb318		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1eb328		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb348		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb358		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb368		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb388		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb398		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb3a8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb3c8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb3d8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb3e8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb408		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1eb418		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb428		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb448		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb458		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1eb468		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb488		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb498		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1eb4a8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb4c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb4d8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1eb4e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb508		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb518		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1eb528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb538		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb548		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb558		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb578		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb588		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb598		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb5c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb5d8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb608		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1eb618		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1eb628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb638		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb648		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1eb658		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb678		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1eb688		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>1eb698		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb6c8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1eb6d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb6e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb708		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>1eb718		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb738		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb748		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>1eb758		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1eb768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb778		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb788		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>1eb798		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1eb7a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb7c8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>1eb7d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1eb7e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb808		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb818		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1eb828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb838		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb848		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb858		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1eb868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb878		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb888		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb898		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>1eb8a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8b8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb8c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb8d8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1eb8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8f8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb918		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb938		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb948		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb958		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb978		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb988		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb998		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1eb9c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb9d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1eba08		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1eba18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eba48		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>1eba58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eba88		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>1eba98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ebac8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1ebad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1ebbf8		00 00 00 00 00 00 00 00
.1f0000						FONT_4_BANK0
>1f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>1f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>1f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>1f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>1f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>1f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>1f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>1f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>1f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>1f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>1f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>1f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>1f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>1f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>1f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>1f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>1f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>1f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>1f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>1f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>1f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>1f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>1f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>1f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>1f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>1f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>1f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>1f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>1f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>1f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>1f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>1f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>1f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>1f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>1f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>1f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>1f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>1f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>1f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>1f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>1f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>1f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>1f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>1f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>1f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>1f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>1f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>1f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>1f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>1f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>1f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>1f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>1f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>1f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>1f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>1f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>1f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>1f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>1f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>1f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>1f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>1f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>1f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>1f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>1f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>1f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>1f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>1f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>1f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>1f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>1f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>1f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>1f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>1f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>1f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>1f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>1f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>1f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>1f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>1f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>1f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>1f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>1f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>1f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>1f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>1f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>1f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>1f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>1f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>1f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>1f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>1f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>1f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>1f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>1f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>1f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>1f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>1f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>1f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>1f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>1f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>1f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>1f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>1f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>1f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>1f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>1f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>1f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>1f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>1f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>1f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>1f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>1f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>1f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>1f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>1f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>1f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>1f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>1f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>1f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>1f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>1f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>1f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>1f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>1f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>1f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>1f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>1f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>1f07f8		00 00 00 00 00 00 00 00
.1f0800						FONT_4_SPLASH
>1f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>1f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>1f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>1f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>1f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>1f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>1f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>1f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>1f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>1f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>1f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>1f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>1f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>1f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>1f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>1f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>1f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>1f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>1f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>1f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>1f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>1f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>1f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>1f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>1f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>1f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>1f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>1f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>1f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>1f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>1f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>1f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>1f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>1f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>1f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>1f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>1f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>1f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>1f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>1f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>1f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>1f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>1f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>1f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>1f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>1f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>1f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>1f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>1f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>1f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>1f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>1f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>1f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>1f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>1f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>1f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>1f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>1f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>1f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>1f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>1f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>1f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>1f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>1f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>1f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>1f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>1f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>1f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>1f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>1f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>1f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>1f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>1f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>1f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>1f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>1f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>1f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>1f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>1f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>1f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>1f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>1f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>1f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>1f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>1f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>1f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>1f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>1f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>1f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>1f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>1f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>1f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>1f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>1f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>1f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>1f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>1f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>1f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>1f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>1f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>1f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>1f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>1f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>1f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>1f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>1f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>1f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>1f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>1f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>1f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>1f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>1f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>1f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>1f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>1f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>1f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>1f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>1f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>1f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>1f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>1f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>1f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>1f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>1f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>1f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>1f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>1f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>1f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>1f0ff8		0f 0f 0f 0f f0 f0 f0 00
>1fffff		ff				                .byte $FF               ; Last byte of flash data

;******  End of listing
