;Kernel_INC.asm
;Kernel ROM jump table

BOOT             = %ADDR% ; Cold boot routine
RESTORE          = %ADDR% ; Warm boot routine
BREAK            = %ADDR% ; End program and return to command prompt
READY            = %ADDR% ; Print prompt and wait for keyboard input
SCINIT           = %ADDR% ;
IOINIT           = %ADDR% ;
PUTC             = %ADDR% ; Print a character to the currently selected channel
PUTS             = %ADDR% ; Print a string to the currently selected channel
PUTB             = %ADDR% ; Output a byte to the currently selected channel
PUTBLOCK         = %ADDR% ; Ouput a binary block to the currently selected channel
GETSCANCODE      = %ADDR% ; Get the next scancode from the keyboard (A = scancode, 0 if none available)
GETLOCKS         = %ADDR% ; Get the state of the lock keys on the keyboard (A[2] = CAPS, A[1] = NUM, A[0] = SCROLL)
OPEN             = %ADDR% ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
CLOSE            = %ADDR% ; Close a channel
SETIN            = %ADDR% ; Set the current input channel
SETOUT           = %ADDR% ; Set the current output channel
GETB             = %ADDR% ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
GETBLOCK         = %ADDR% ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
GETCH            = %ADDR% ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
GETCHW           = %ADDR% ; Get a character from the input channel. Waits until data received. A=0 and Carry=1 if no data is wating
GETCHE           = %ADDR% ; Get a character from the input channel and echo to the screen. Wait if data is not ready.
GETS             = %ADDR% ; Get a string from the input channel. NULL terminates
GETLINE          = %ADDR% ; Get a line of text from input channel. CR or NULL terminates.
GETFIELD         = %ADDR% ; Get a field from the input channel. Value in A, CR, or NULL terminates
TRIM             = %ADDR% ; Removes spaces at beginning and end of string.
PRINTC           = %ADDR% ; Print character to screen. Handles terminal commands
PRINTS           = %ADDR% ; Print string to screen. Handles terminal commands
PRINTCR          = %ADDR% ; Print Carriage Return
PRINTF           = %ADDR% ; Print a float value
PRINTI           = %ADDR% ; Prints integer value in TEMP
PRINTH           = %ADDR% ; Print Hex value in DP variable
PRINTAI          = %ADDR% ; Prints integer value in A
PRINTAH          = %ADDR% ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
LOCATE           = %ADDR% ;
PUSHKEY          = %ADDR% ;
PUSHKEYS         = %ADDR% ;
CSRRIGHT         = %ADDR% ;
CSRLEFT          = %ADDR% ;
CSRUP            = %ADDR% ;
CSRDOWN          = %ADDR% ;
CSRHOME          = %ADDR% ;
SCROLLUP         = %ADDR% ; Scroll the screen up one line. Creates an empty line at the bottom.
SCRGETWORD       = %ADDR% ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
CLRSCREEN        = %ADDR% ; Clear the screen
INITCHLUT        = %ADDR% ; Init character look-up table
INITSUPERIO      = %ADDR% ; Init Super-IO chip
INITKEYBOARD     = %ADDR% ; Init keyboard
INITRTC          = %ADDR% ; Init Real-Time Clock
INITCURSOR       = %ADDR% ; Init the Cursors registers
INITFONTSET      = %ADDR% ; Init the Internal FONT Memory
INITGAMMATABLE   = %ADDR% ; Init the RGB GAMMA Look Up Table
INITALLLUT       = %ADDR% ; Init the Graphic Engine (Bitmap/Tile/Sprites) LUT
INITVKYTXTMODE   = %ADDR% ; Init the Text Mode @ Reset Time
INITVKYGRPMODE   = %ADDR% ; Init the Basic Registers for the Graphic Mode
SETSIZES         = %ADDR% ; Set the text screen size variables based on the border and screen resolution.
F_OPEN           = %ADDR% ; open a file for reading/writing/creating
F_CREATE         = %ADDR% ; create a new file
F_CLOSE          = %ADDR% ; close a file (make sure last cluster is written)
F_WRITE          = %ADDR% ; write the current cluster to the file
F_READ           = %ADDR% ; read the next cluster from the file
F_DELETE         = %ADDR% ; delete a file / directory
F_RENAME         = %ADDR% ; rename a file
F_DIROPEN        = %ADDR% ; open a directory and seek the first directory entry
F_DIRNEXT        = %ADDR% ; seek to the next directory of an open directory
F_DIRREAD        = %ADDR% ; Read the directory entry for the specified file
F_DIRWRITE       = %ADDR% ; Write any changes in the current directory cluster back to the drive
F_LOAD           = %ADDR% ; load a binary file into memory, supports multiple file formats
F_SAVE           = %ADDR% ; Save memory to a binary file
CMDBLOCK         = %ADDR% ; Send a command to a block device
F_RUN            = %ADDR% ; Load and run an executable binary file
F_MOUNT          = %ADDR% ; Mount the designated block device
F_COPY           = %ADDR% ; Copy a file
F_ALLOCFD        = %ADDR% ; Allocate a file descriptor
F_FREEFD         = %ADDR% ; Free a file descriptor
TESTBREAK        = %ADDR% ; Check if BREAK was pressed recently by the user (C is set if true, clear if false)
SETTABLE         = %ADDR% ; Set the keyboard scan code -> character translation tables (B:X points to the new tables)
READVRAM         = %ADDR% ; Read a byte from video RAM at B:X
SETHANDLER       = %ADDR% ; Set the handler for the interrupt # in A to the FAR routine at Y:X
DELAY            = %ADDR% ; Wait at least Y:X ticks of the system clock.
IP_INIT          = %ADDR% ; Init network stack; B:Y->ip, mask, default_route.  buffer_ptr below is 24 of 32 bits.
UDP_SEND         = %ADDR% ; Send a UDP packet:  0:X->local_port, remote_ip, remote_port, buffer_ptr, size, copied
UDP_RECV         = %ADDR% ; Recv a UDP packet:  0:X->local_port, remote_ip, remote_port, buffer_ptr, size, copied
;
; Interrupt Vector Table
;

VEC_INT00_SOF       = %ADDR% ; IRQ 0, 0 --- Start Of Frame interrupt 
VEC_INT01_SOL       = %ADDR% ; IRQ 0, 1 --- Start Of Line interrupt
VEC_INT02_TMR0      = %ADDR% ; IRQ 0, 2 --- Timer 0 interrupt
VEC_INT03_TMR1      = %ADDR% ; IRQ 0, 3 --- Timer 1 interrupt
VEC_INT04_TMR2      = %ADDR% ; IRQ 0, 4 --- Timer 2 interrupt
VEC_INT05_RTC       = %ADDR% ; IRQ 0, 5 --- Real Time Clock interrupt
VEC_INT06_FDC       = %ADDR% ; IRQ 0, 6 --- Floppy Drive Controller interrupt
VEC_INT07_MOUSE     = %ADDR% ; IRQ 0, 7 --- Mouse interrupt

VEC_INT10_KBD       = %ADDR% ; IRQ 1, 0 --- Keyboard interrupt
VEC_INT11_COL0      = %ADDR% ; IRQ 1, 1 --- VICKY_II (INT2) Sprite Collision 
VEC_INT12_COL1      = %ADDR% ; IRQ 1, 2 --- VICKY_II (INT3) Bitmap Collision
VEC_INT13_COM2      = %ADDR% ; IRQ 1, 3 --- Serial port #2 interrupt
VEC_INT14_COM1      = %ADDR% ; IRQ 1, 4 --- Serial port #1 interrupt
VEC_INT15_MIDI      = %ADDR% ; IRQ 1, 5 --- MIDI controller interrupt
VEC_INT16_LPT       = %ADDR% ; IRQ 1, 6 --- Parallel port interrupt
VEC_INT17_SDC       = %ADDR% ; IRQ 1, 7 --- SD Card Controller interrupt (CH376S???)

VEC_INT20_OPL       = %ADDR% ; IRQ 2, 0 --- OPL3
VEC_INT21_GABE0     = %ADDR% ; IRQ 2, 1 --- GABE (INT0) - TBD
VEC_INT22_GABE1     = %ADDR% ; IRQ 2, 2 --- GABE (INT1) - TBD
VEC_INT23_VDMA      = %ADDR% ; IRQ 2, 3 --- VICKY_II (INT4) - VDMA Interrupt
VEC_INT24_COL2      = %ADDR% ; IRQ 2, 4 --- VICKY_II (INT5) Tile Collision
VEC_INT25_GABE2     = %ADDR% ; IRQ 2, 5 --- GABE (INT2) - TBD
VEC_INT26_EXT       = %ADDR% ; IRQ 2, 6 --- External Expansion
VEC_INT17_SDINS     = %ADDR% ; IRQ 2, 7 --- SDCARD Insertion

VEC_INT30_OPN2      = %ADDR% ; IRQ 3, 0 --- OPN2
VEC_INT31_OPM       = %ADDR% ; IRQ 3, 1 --- OPM
VEC_INT32_IDE       = %ADDR% ; IRQ 3, 2 --- HDD IDE Interrupt
