
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 -D TARGET_SYS=2 --long-address --flat --intel-hex -o kernel_U.hex --list kernel_U_hex.lst --labels=kernel_U_hex.lbl src\kernel.asm
; Fri Apr 30 13:15:54 2021

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=2						TARGET=2
=2						TARGET_SYS=2

;******  Processing input file: src\kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$180000					  START_OF_FLASH := $180000                   ; The Foenix U Flash starts at $180000
=$190400					  START_OF_KERNEL := $190400                  ; The kernel itself starts at $190400
=$1a0000					  START_OF_BASIC := $1A0000                   ; The BASIC flash code starts at $1A0000
=$1b0000					  START_OF_CREDITS := $1B0000                 ; The credits screen starts at $1B0000
=$1e0000					  START_OF_SPLASH := $1E0000                  ; SplashScreen Code and Data $3E0000
=$1f0000					  START_OF_FONT := $1F0000                    ; The font starts at $3F0000

;******  Processing file: src\Includes/macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1b						CHAR_ESC = $1B      ; ESC
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81						CHAR_F1 = $81       ; Function keys
=$82						CHAR_F2 = $82
=$83						CHAR_F3 = $83
=$84						CHAR_F4 = $84
=$85						CHAR_F5 = $85
=$86						CHAR_F6 = $86
=$87						CHAR_F7 = $87
=$88						CHAR_F8 = $88
=$89						CHAR_F9 = $89
=$8a						CHAR_F10 = $8A
=$8b						CHAR_F11 = $8B
=$8c						CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					COLORBEGIN       = $000022 ;3 Byte, address of the color screen
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000063					EVID_COLS_VISIBLE     = $000063 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000065					EVID_COLS_PER_LINE    = $000065 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000067					EVID_LINES_VISIBLE    = $000067 ;2 Bytes The number of rows visible on the screen. Default=25
=$000069					EVID_LINES_MAX        = $000069 ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006b					EVID_CURSORPOS        = $00006B ;3 Bytes The next character written to the screen will be written in this location.
=$00006e					EVID_CURSORX          = $00006E ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000070					EVID_CURSORY          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURCOLOR         = $000072 ;1 Byte Color of next character to be printed to the screen.
=$000073					EVID_COLORBEGIN       = $000073 ;
=$000076					EVID_COLORPOS         = $000076 ;3 Byte address of cursor's position in the color matrix
=$000079					EVID_TMPPTR1          = $000079 ; 4 byte temporary pointer
=$00007d					EVID_PRESENT          = $00007D ;1 Byte: is the EVID present?
=$0000e0					MOUSE_PTR        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$0000f0					INTERRUPT_STATE  = $0000F0      ; 1 byte: current state of the boot menu color cycler
=$0000f1					INTERRUPT_COUNT  = $0000F1      ; 1 byte: counter for the boot menu color cycler
=$0000f2					IRQ_COLOR_CHOICE = $0000F2      ; 1 byte: index of the color to cycle in the boot menu
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000370					DOS_BLOCK_SIZE   = $000370      ; 4 bytes - the size of a block to load (in bytes)
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00					    ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00					    HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10					    HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20					    HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30					    HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40					    HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60					    HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80					    Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0					    VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0					    JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4					    VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6					    VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8					    VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea					    VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec					    VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee					    VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0					    RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4					    VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6					    VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8					    VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa					    VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc					    VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe					    VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000					    VECTORS_END      = $010000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_data.asm

>180000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>180003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>180005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>180007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>180009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>18000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>18000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>180013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>180014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>180016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_code.asm

.ff00		18		clc		RHRESET         CLC
.ff01		fb		xce		                XCE
.ff02		5c 00 10 00	jmp $001000	                JML BOOT
.ff10						RHCOP
.ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12		8b		phb		                PHB
.ff13		0b		phd		                PHD
.ff14		48		pha		                PHA
.ff15		da		phx		                PHX
.ff16		5a		phy		                PHY
.ff17		5c 08 10 00	jmp $001008	                JML BREAK
.ff20						RHBRK
.ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22		8b		phb		                PHB
.ff23		0b		phd		                PHD
.ff24		48		pha		                PHA
.ff25		da		phx		                PHX
.ff26		5a		phy		                PHY
.ff27		5c 08 10 00	jmp $001008	                JML BREAK
.ff30						RHABORT
.ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32		8b		phb		                PHB
.ff33		0b		phd		                PHD
.ff34		48		pha		                PHA
.ff35		da		phx		                PHX
.ff36		5a		phy		                PHY
.ff37		5c 08 10 00	jmp $001008	                JML BREAK
.ff40						 RHNMI
.ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42		8b		phb		                PHB
.ff43		0b		phd		                PHD
.ff44		48		pha		                PHA
.ff45		da		phx		                PHX
.ff46		5a		phy		                PHY
.ff47		22 d5 18 18	jsl $1818d5	                JSL NMI_HANDLER
.ff4b		7a		ply		                PLY
.ff4c		fa		plx		                PLX
.ff4d		68		pla		                PLA
.ff4e		2b		pld		                PLD
.ff4f		ab		plb		                PLB
.ff50		40		rti		                RTI
.ff60						RHIRQ
.ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62		8b		phb		                PHB
.ff63		0b		phd		                PHD
.ff64		48		pha		                PHA
.ff65		da		phx		                PHX
.ff66		5a		phy		                PHY
.ff67		22 14 17 18	jsl $181714	                JSL IRQ_HANDLER
.ff6b		7a		ply		                PLY
.ff6c		fa		plx		                PLX
.ff6d		68		pla		                PLA
.ff6e		2b		pld		                PLD
.ff6f		ab		plb		                PLB
.ff70		40		rti		                RTI
.ffe0		5c 04 00 1a	jmp $1a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec		00 00				                .word $0000    ; FFEC
>ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0		5c dd 06 19	jmp $1906dd	RRETURN         JML IRETURN
>fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/fdc_inc.asm

=$af13f0					SIO_FDC  = $AF13F0
=$af13f0					SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1					SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2					SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3					SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4					SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4					SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5					SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7					SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7					SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/basic_inc.asm

=$1a0000					    BASIC = $1A0000
=1703940					    MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.181000	1000	5c 00 04 19	jmp $190400	BOOT            JML IBOOT
.181004	1004	5c e8 05 19	jmp $1905e8	RESTORE         JML IRESTORE
.181008	1008	5c 7c 06 19	jmp $19067c	BREAK           JML IBREAK
.18100c	100c	5c c3 06 19	jmp $1906c3	READY           JML IREADY
.181010	1010	5c f2 14 19	jmp $1914f2	SCINIT          JML ISCINIT
.181014	1014	5c f3 14 19	jmp $1914f3	IOINIT          JML IIOINIT
.181018	1018	5c 7f 07 19	jmp $19077f	PUTC            JML IPUTC
.18101c	101c	5c 68 07 19	jmp $190768	PUTS            JML IPUTS
.181020	1020	5c 02 09 19	jmp $190902	PUTB            JML IPUTB
.181024	1024	5c d7 3f 19	jmp $193fd7	PUTBLOCK        JML IPUTBLOCK
.181028	1028	5c f4 14 19	jmp $1914f4	SETLFS          JML ISETLFS
.18102c	102c	5c f5 14 19	jmp $1914f5	SETNAM          JML ISETNAM
.181030	1030	5c f6 14 19	jmp $1914f6	OPEN            JML IOPEN
.181034	1034	5c f7 14 19	jmp $1914f7	CLOSE           JML ICLOSE
.181038	1038	5c de 06 19	jmp $1906de	SETIN           JML ISETIN
.18103c	103c	5c e7 06 19	jmp $1906e7	SETOUT          JML ISETOUT
.181040	1040	5c f8 14 19	jmp $1914f8	GETB            JML IGETB
.181044	1044	5c 74 3f 19	jmp $193f74	GETBLOCK        JML IGETBLOCK
.181048	1048	5c 2c 07 19	jmp $19072c	GETCH           JML IGETCH
.18104c	104c	5c f9 06 19	jmp $1906f9	GETCHW          JML IGETCHW
.181050	1050	5c f0 06 19	jmp $1906f0	GETCHE          JML IGETCHE
.181054	1054	5c f9 14 19	jmp $1914f9	GETS            JML IGETS
.181058	1058	5c fa 14 19	jmp $1914fa	GETLINE         JML IGETLINE
.18105c	105c	5c fb 14 19	jmp $1914fb	GETFIELD        JML IGETFIELD
.181060	1060	5c fc 14 19	jmp $1914fc	TRIM            JML ITRIM
.181064	1064	5c fd 14 19	jmp $1914fd	PRINTC          JML IPRINTC
.181068	1068	5c fe 14 19	jmp $1914fe	PRINTS          JML IPRINTS
.18106c	106c	5c 03 09 19	jmp $190903	PRINTCR         JML IPRINTCR
.181070	1070	5c ff 14 19	jmp $1914ff	PRINTF          JML IPRINTF
.181074	1074	5c 00 15 19	jmp $191500	PRINTI          JML IPRINTI
.181078	1078	5c c3 0a 19	jmp $190ac3	PRINTH          JML IPRINTH
.18107c	107c	5c 01 15 19	jmp $191501	PRINTAI         JML IPRINTAI
.181080	1080	5c e0 0a 19	jmp $190ae0	PRINTAH         JML IPRINTAH
.181084	1084	5c 07 0a 19	jmp $190a07	LOCATE          JML ILOCATE
.181088	1088	5c 02 15 19	jmp $191502	PUSHKEY         JML IPUSHKEY
.18108c	108c	5c 03 15 19	jmp $191503	PUSHKEYS        JML IPUSHKEYS
.181090	1090	5c 63 09 19	jmp $190963	CSRRIGHT        JML ICSRRIGHT
.181094	1094	5c 96 09 19	jmp $190996	CSRLEFT         JML ICSRLEFT
.181098	1098	5c bc 09 19	jmp $1909bc	CSRUP           JML ICSRUP
.18109c	109c	5c e2 09 19	jmp $1909e2	CSRDOWN         JML ICSRDOWN
.1810a0	10a0	5c 52 09 19	jmp $190952	CSRHOME         JML ICSRHOME
.1810a4	10a4	5c 53 0a 19	jmp $190a53	SCROLLUP        JML ISCROLLUP
.1810a8	10a8	5c 2e 0b 19	jmp $190b2e	CLRSCREEN       JML ICLRSCREEN
.1810ac	10ac	5c f9 0b 19	jmp $190bf9	INITCHLUT	    JML IINITCHLUT
.1810b0	10b0	5c cf 0e 19	jmp $190ecf	INITSUPERIO	    JML IINITSUPERIO
.1810b4	10b4	5c ce 0f 19	jmp $190fce	INITKEYBOARD    JML IINITKEYBOARD
.1810b8	10b8	5c 83 10 19	jmp $191083	INITMOUSE       JML IINITMOUSE
.1810bc	10bc	5c b0 0e 19	jmp $190eb0	INITCURSOR      JML IINITCURSOR
.1810c0	10c0	5c 78 0e 19	jmp $190e78	INITFONTSET     JML IINITFONTSET
.1810c4	10c4	5c 28 0c 19	jmp $190c28	INITGAMMATABLE  JML IINITGAMMATABLE
.1810c8	10c8	5c 48 0c 19	jmp $190c48	INITALLLUT      JML IINITALLLUT
.1810cc	10cc	5c 0e 0d 19	jmp $190d0e	INITVKYTXTMODE  JML IINITVKYTXTMODE
.1810d0	10d0	5c 3f 0e 19	jmp $190e3f	INITVKYGRPMODE  JML IINITVKYGRPMODE
.1810d4	10d4	5c 77 0e 19	jmp $190e77	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810d8	10d8	5c 77 0e 19	jmp $190e77	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810dc	10dc	5c 40 11 19	jmp $191140	INITCODEC       JML IINITCODEC
.1810e0	10e0	5c cf 11 19	jmp $1911cf	RESETCODEC      JML IRESETCODEC
.1810e4	10e4	5c 3d 12 19	jmp $19123d	BMP_PARSER      JML IBMP_PARSER
.1810e8	10e8	5c f2 11 19	jmp $1911f2	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.1810ec	10ec	5c 80 35 19	jmp $193580	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.1810f0	10f0	5c 5a 52 19	jmp $19525a	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.1810f4	10f4	5c ed 52 19	jmp $1952ed	F_CREATE        JML IF_CREATE       ; create a new file
.1810f8	10f8	5c 27 53 19	jmp $195327	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.1810fc	10fc	5c c0 53 19	jmp $1953c0	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.181100	1100	5c 5b 53 19	jmp $19535b	F_READ          JML IF_READ         ; read the next cluster from the file
.181104	1104	5c 6a 54 19	jmp $19546a	F_DELETE        JML IF_DELETE       ; delete a file / directory
.181108	1108	5c 2c 54 19	jmp $19542c	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.18110c	110c	5c 66 54 19	jmp $195466	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.181110	1110	5c 03 55 19	jmp $195503	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.181114	1114	5c 2a 55 19	jmp $19552a	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.181118	1118	5c 2e 55 19	jmp $19552e	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.18111c	111c	5c 89 58 19	jmp $195889	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.181120	1120	5c 4a 3f 19	jmp $193f4a	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.181124	1124	5c 22 59 19	jmp $195922	F_RUN           JML IF_RUN          ; Load an run a binary file
.181128	1128	5c 75 43 19	jmp $194375	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.18112c	112c	5c 8c 0d 19	jmp $190d8c	SETSIZES        JML ISETSIZES
.181130	1130	5c 71 5a 19	jmp $195a71	F_COPY          JML IF_COPY         ; Copy a file
.181134	1134	5c bb 59 19	jmp $1959bb	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.181138	1138	5c 0f 5a 19	jmp $195a0f	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.181700	1700	5c ec 69 19	jmp $1969ec	VEC_INT00_SOF   JML FDC_TIME_HANDLE ; IRQ 0, 0 --- Start Of Frame interrupt
.181704	1704	5c 06 15 19	jmp $191506	VEC_INT01_SOL   JML IRQHANDLESTUB   ; IRQ 0, 1 --- Start Of Line interrupt
.181708	1708	5c 06 15 19	jmp $191506	VEC_INT02_TMR0  JML IRQHANDLESTUB   ; IRQ 0, 2 --- Timer 0 interrupt
.18170c	170c	5c 06 15 19	jmp $191506	VEC_INT03_TMR1  JML IRQHANDLESTUB   ; IRQ 0, 3 --- Timer 1 interrupt
.181710	1710	5c 06 15 19	jmp $191506	VEC_INT04_TMR2  JML IRQHANDLESTUB   ; IRQ 0, 4 --- Timer 2 interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.181714						IRQ_HANDLER
.181714		e2 20		sep #$20	                SEP #$20        ; set A short
.181716		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.18171a		c9 00		cmp #$00	                CMP #$00
.18171c		f0 7d		beq $18179b	                BEQ CHECK_PENDING_REG1
.18171e		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.181722		29 01		and #$01	                AND #FNX0_INT00_SOF
.181724		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.181726		d0 09		bne $181731	                BNE SERVICE_NEXT_IRQ1
.181728		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.18172c		20 09 18	jsr $181809	                JSR SOF_INTERRUPT
.18172f		e2 20		sep #$20	                SEP #$20        ; set A short
.181731						SERVICE_NEXT_IRQ1
.181731		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.181735		29 02		and #$02	                AND #FNX0_INT01_SOL
.181737		c9 02		cmp #$02	                CMP #FNX0_INT01_SOL
.181739		d0 07		bne $181742	                BNE SERVICE_NEXT_IRQ2
.18173b		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.18173f		20 1a 18	jsr $18181a	                JSR SOL_INTERRUPT
.181742						SERVICE_NEXT_IRQ2
.181742		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.181746		29 04		and #$04	                AND #FNX0_INT02_TMR0
.181748		c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.18174a		d0 07		bne $181753	                BNE SERVICE_NEXT_IRQ3
.18174c		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.181750		20 2b 18	jsr $18182b	                JSR TIMER0_INTERRUPT
.181753						SERVICE_NEXT_IRQ3
.181753		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.181757		29 08		and #$08	                AND #FNX0_INT03_TMR1
.181759		c9 08		cmp #$08	                CMP #FNX0_INT03_TMR1
.18175b		d0 07		bne $181764	                BNE SERVICE_NEXT_IRQ4
.18175d		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.181761		20 3c 18	jsr $18183c	                JSR TIMER1_INTERRUPT
.181764						SERVICE_NEXT_IRQ4
.181764		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.181768		29 10		and #$10	                AND #FNX0_INT04_TMR2
.18176a		c9 10		cmp #$10	                CMP #FNX0_INT04_TMR2
.18176c		d0 09		bne $181777	                BNE SERVICE_NEXT_IRQ6
.18176e		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.181772		20 4d 18	jsr $18184d	                JSR TIMER2_INTERRUPT
.181775		e2 20		sep #$20	                SEP #$20        ; set A short
.181777						SERVICE_NEXT_IRQ6
.181777		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.18177b		29 40		and #$40	                AND #FNX0_INT06_FDC
.18177d		c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.18177f		d0 09		bne $18178a	                BNE SERVICE_NEXT_IRQ7
.181781		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.181785		20 9e 18	jsr $18189e	                JSR FDC_INTERRUPT
.181788		e2 20		sep #$20	                SEP #$20        ; set A short
.18178a						SERVICE_NEXT_IRQ7
.18178a		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.18178e		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.181790		c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.181792		d0 07		bne $18179b	                BNE CHECK_PENDING_REG1
.181794		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.181798		20 5e 18	jsr $18185e	                JSR MOUSE_INTERRUPT
.18179b						CHECK_PENDING_REG1
.18179b		e2 20		sep #$20	                SEP #$20        ; set A short
.18179d		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1817a1		c9 00		cmp #$00	                CMP #$00
.1817a3		f0 61		beq $181806	                BEQ EXIT_IRQ_HANDLE
.1817a5						SERVICE_NEXT_IRQ8
.1817a5		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1817a9		29 01		and #$01	                AND #FNX1_INT00_KBD
.1817ab		c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.1817ad		d0 0d		bne $1817bc	                BNE SERVICE_NEXT_IRQ11
.1817af		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1817b3		8b		phb		                PHB
.1817b4		0b		phd		                PHD
.1817b5		20 d6 18	jsr $1818d6	                JSR KEYBOARD_INTERRUPT
.1817b8		2b		pld		                PLD
.1817b9		ab		plb		                PLB
.1817ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1817bc						SERVICE_NEXT_IRQ11
.1817bc		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1817c0		29 08		and #$08	                AND #FNX1_INT03_COM2
.1817c2		c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.1817c4		d0 09		bne $1817cf	                BNE SERVICE_NEXT_IRQ12
.1817c6		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1817ca		20 a9 18	jsr $1818a9	                JSR COM2_INTERRUPT
.1817cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1817cf						SERVICE_NEXT_IRQ12
.1817cf		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1817d3		29 10		and #$10	                AND #FNX1_INT04_COM1
.1817d5		c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.1817d7		d0 09		bne $1817e2	                BNE SERVICE_NEXT_IRQ13
.1817d9		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1817dd		20 b4 18	jsr $1818b4	                JSR COM1_INTERRUPT
.1817e0		e2 20		sep #$20	                SEP #$20        ; set A short
.1817e2						SERVICE_NEXT_IRQ13
.1817e2		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1817e6		29 20		and #$20	                AND #FNX1_INT05_MPU401
.1817e8		c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.1817ea		d0 09		bne $1817f5	                BNE SERVICE_NEXT_IRQ14
.1817ec		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1817f0		20 bf 18	jsr $1818bf	                JSR MPU401_INTERRUPT
.1817f3		e2 20		sep #$20	                SEP #$20        ; set A short
.1817f5						SERVICE_NEXT_IRQ14
.1817f5		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1817f9		29 40		and #$40	                AND #FNX1_INT06_LPT
.1817fb		c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.1817fd		d0 07		bne $181806	                BNE EXIT_IRQ_HANDLE
.1817ff		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.181803		20 ca 18	jsr $1818ca	                JSR LPT1_INTERRUPT
.181806						EXIT_IRQ_HANDLE
.181806		c2 30		rep #$30	                REP #$30        ; set A&X long
.181808		6b		rtl		                RTL
.181809						SOF_INTERRUPT
.181809		e2 20		sep #$20	                SEP #$20        ; set A short
.18180b		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.18180f		29 01		and #$01	                AND #FNX0_INT00_SOF
.181811		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.181815		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF
.181819		60		rts		                RTS
.18181a						SOL_INTERRUPT
.18181a		e2 20		sep #$20	                SEP #$20        ; set A short
.18181c		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.181820		29 02		and #$02	                AND #FNX0_INT01_SOL
.181822		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.181826		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL
.18182a		60		rts		                RTS
.18182b						TIMER0_INTERRUPT
.18182b		e2 20		sep #$20	                SEP #$20        ; set A short
.18182d		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.181831		09 80		ora #$80	                ORA #TIMER0TRIGGER
.181833		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.181837		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0
.18183b		60		rts		                RTS
.18183c						TIMER1_INTERRUPT
.18183c		e2 20		sep #$20	                SEP #$20        ; set A short
.18183e		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.181842		09 40		ora #$40	                ORA #TIMER1TRIGGER
.181844		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.181848		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1
.18184c		60		rts		                RTS
.18184d						TIMER2_INTERRUPT
.18184d		e2 20		sep #$20	                SEP #$20        ; set A short
.18184f		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.181853		09 20		ora #$20	                ORA #TIMER2TRIGGER
.181855		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.181859		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2
.18185d		60		rts		                RTS
.18185e						MOUSE_INTERRUPT
.18185e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.181860		af e0 00 00	lda $0000e0	                LDA @l MOUSE_PTR
.181864		aa		tax		                TAX
.181865		af 03 18 af	lda $af1803	                LDA @l KBD_INPT_BUF
.181869		9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.18186d		e8		inx		                INX
.18186e		e0 03		cpx #$03	                CPX #$03
.181870		d0 24		bne $181896	                BNE EXIT_FOR_NEXT_VALUE
.181872		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.181876		8f e1 00 00	sta $0000e1	                STA @l MOUSE_POS_X_LO
.18187a		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.18187e		8f e2 00 00	sta $0000e2	                STA @l MOUSE_POS_X_HI
.181882		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.181886		8f e3 00 00	sta $0000e3	                STA @l MOUSE_POS_Y_LO
.18188a		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.18188e		8f e4 00 00	sta $0000e4	                STA @l MOUSE_POS_Y_HI
.181892		e2 20		sep #$20	                SEP #$20        ; set A short
.181894		a2 00		ldx #$00	                LDX #$00
.181896						EXIT_FOR_NEXT_VALUE
.181896		8a		txa		                TXA
.181897		8f e0 00 00	sta $0000e0	                STA @l MOUSE_PTR
.18189b		c2 10		rep #$10	                REP #$10        ; set X long
.18189d		60		rts		                RTS
.18189e						FDC_INTERRUPT
.18189e		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.1818a2		29 40		and #$40	                AND #FNX0_INT06_FDC
.1818a4		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.1818a8		60		rts		                RTS
.1818a9						COM2_INTERRUPT
.1818a9		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1818ad		29 08		and #$08	                AND #FNX1_INT03_COM2
.1818af		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1818b3		60		rts		                RTS
.1818b4						COM1_INTERRUPT
.1818b4		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1818b8		29 10		and #$10	                AND #FNX1_INT04_COM1
.1818ba		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1818be		60		rts		                RTS
.1818bf						MPU401_INTERRUPT
.1818bf		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1818c3		29 20		and #$20	                AND #FNX1_INT05_MPU401
.1818c5		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1818c9		60		rts		                RTS
.1818ca						LPT1_INTERRUPT
.1818ca		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1818ce		29 40		and #$40	                AND #FNX1_INT06_LPT
.1818d0		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1818d4		60		rts		                RTS
.1818d5						NMI_HANDLER
.1818d5		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.1818d6						KEYBOARD_INTERRUPT
.1818d6		48		pha		                PHA             ; begin setdp macro
.1818d7		08		php		                PHP
.1818d8		c2 20		rep #$20	                REP #$20        ; set A long
.1818da		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.1818dd		5b		tcd		                TCD
.1818de		28		plp		                PLP
.1818df		68		pla		                PLA             ; end setdp macro
.1818e0		a2 00 00	ldx #$0000	                ldx #$0000
.1818e3		e2 10		sep #$10	                SEP #$10        ; set X short
.1818e5		e2 20		sep #$20	                SEP #$20        ; set A short
.1818e7		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1818eb		29 01		and #$01	                AND #FNX1_INT00_KBD
.1818ed		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1818f1						IRQ_HANDLER_FETCH
.1818f1		af 03 18 af	lda $af1803	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.1818f5		85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.1818f7		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.1818f9		29 80		and #$80	                AND #$80
.1818fb		c9 80		cmp #$80	                CMP #$80
.1818fd		d0 10		bne $18190f	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.1818ff		a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.181901		29 7f		and #$7f	                AND #$7F
.181903		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.181905		a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.181907		aa		tax		                TAX
.181908		bf 80 84 19	lda $198480,x	                LDA @lScanCode_Prefix_Set1, x
.18190c		4c b2 19	jmp $1819b2	                JMP KB_WR_2_SCREEN      ; And save it
.18190f		a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.181911		c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.181913		d0 03		bne $181918	                BNE NOT_KB_SET_LSHIFT
.181915		82 ad 00	brl $1819c5	                BRL KB_SET_SHIFT
.181918						NOT_KB_SET_LSHIFT
.181918		c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.18191a		d0 03		bne $18191f	                BNE NOT_KB_CLR_LSHIFT
.18191c		82 af 00	brl $1819ce	                BRL KB_CLR_SHIFT
.18191f						NOT_KB_CLR_LSHIFT
.18191f		c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.181921		d0 03		bne $181926	                BNE NOT_KB_SET_RSHIFT
.181923		82 9f 00	brl $1819c5	                BRL KB_SET_SHIFT
.181926						NOT_KB_SET_RSHIFT
.181926		c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.181928		d0 03		bne $18192d	                BNE NOT_KB_CLR_RSHIFT
.18192a		82 a1 00	brl $1819ce	                BRL KB_CLR_SHIFT
.18192d						NOT_KB_CLR_RSHIFT
.18192d		c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.18192f		d0 03		bne $181934	                BNE NOT_KB_SET_CTRL
.181931		82 a3 00	brl $1819d7	                BRL KB_SET_CTRL
.181934						NOT_KB_SET_CTRL
.181934		c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.181936		d0 03		bne $18193b	                BNE NOT_KB_CLR_CTRL
.181938		82 a5 00	brl $1819e0	                BRL KB_CLR_CTRL
.18193b						NOT_KB_CLR_CTRL
.18193b		c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.18193d		d0 03		bne $181942	                BNE NOT_KB_SET_ALT
.18193f		82 a7 00	brl $1819e9	                BRL KB_SET_ALT
.181942						NOT_KB_SET_ALT
.181942		c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.181944		d0 03		bne $181949	                BNE NOT_KB_CLR_ALT
.181946		82 a9 00	brl $1819f2	                BRL KB_CLR_ALT
.181949		c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.18194b		d0 03		bne $181950	                BNE NOT_PREFIXED
.18194d		82 ab 00	brl $1819fb	                BRL KB_SET_PREFIX
.181950		c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.181952		d0 03		bne $181957	                BNE NOT_KB_SET_NUM
.181954		82 b6 00	brl $181a0d	                BRL KB_TOG_NUMLOCK
.181957		c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.181959		d0 03		bne $18195e	                BNE NOT_KB_SET_SCR
.18195b		82 a6 00	brl $181a04	                BRL KB_TOG_SCRLOCK
.18195e		c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.181960		d0 03		bne $181965	                BNE NOT_KB_CAPSLOCK
.181962		82 bc 00	brl $181a21	                BRL KB_TOG_CAPLOCK
.181965		c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.181967		d0 09		bne $181972	                BNE KB_UNPRESSED
.181969		a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.18196b		8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.18196f		82 b5 00	brl $181a27	                BRL KB_CHECK_B_DONE
.181972		29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.181974		c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.181976		d0 03		bne $18197b	                BNE KB_NORM_SC
.181978		82 ac 00	brl $181a27	                BRL KB_CHECK_B_DONE
.18197b		a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.18197d		aa		tax		                TAX
.18197e		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.181980		29 10		and #$10	                AND #$10
.181982		c9 10		cmp #$10	                CMP #$10
.181984		f0 17		beq $18199d	                BEQ SHIFT_KEY_ON
.181986		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.181988		29 20		and #$20	                AND #$20
.18198a		c9 20		cmp #$20	                CMP #$20
.18198c		f0 16		beq $1819a4	                BEQ CTRL_KEY_ON
.18198e		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.181990		29 40		and #$40	                AND #$40
.181992		c9 40		cmp #$40	                CMP #$40
.181994		f0 15		beq $1819ab	                BEQ ALT_KEY_ON
.181996		bf 00 82 19	lda $198200,x	                LDA @lScanCode_Press_Set1, x
.18199a		82 15 00	brl $1819b2	                BRL KB_WR_2_SCREEN
.18199d		bf 80 82 19	lda $198280,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.1819a1		82 0e 00	brl $1819b2	                BRL KB_WR_2_SCREEN
.1819a4		bf 00 83 19	lda $198300,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.1819a8		82 07 00	brl $1819b2	                BRL KB_WR_2_SCREEN
.1819ab		bf 80 83 19	lda $198380,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.1819af		82 00 00	brl $1819b2	                BRL KB_WR_2_SCREEN
.1819b2		c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.1819b4		d0 03		bne $1819b9	                BNE savechar
.1819b6		4c 37 1a	jmp $181a37	                JMP programmerKey       ; Yes: trigger the programmer key
.1819b9		48		pha		savechar        PHA
.1819ba		c2 10		rep #$10	                REP #$10        ; set X long
.1819bc		20 43 1a	jsr $181a43	                JSR SAVEKEY
.1819bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1819c1		68		pla		                PLA
.1819c2		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.1819c5		a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.1819c7		09 10		ora #$10	                ORA #$10
.1819c9		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.1819cb		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.1819ce		a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.1819d0		29 ef		and #$ef	                AND #$EF
.1819d2		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.1819d4		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.1819d7		a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.1819d9		09 20		ora #$20	                ORA #$20
.1819db		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.1819dd		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.1819e0		a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.1819e2		29 df		and #$df	                AND #$DF
.1819e4		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.1819e6		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.1819e9		a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.1819eb		09 40		ora #$40	                ORA #$40
.1819ed		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.1819ef		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.1819f2		a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.1819f4		29 bf		and #$bf	                AND #$BF
.1819f6		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.1819f8		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.1819fb		a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.1819fd		09 80		ora #$80	                ORA #$80
.1819ff		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.181a01		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.181a04		a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.181a06		49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.181a08		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.181a0a		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.181a0d		a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.181a0f		29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.181a11		c9 60		cmp #$60	                CMP #$60
.181a13		d0 03		bne $181a18	                BNE KB_TOG_NUMLOC2
.181a15		82 63 ff	brl $18197b	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.181a18		a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.181a1a		49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.181a1c		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.181a1e		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.181a21		a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.181a23		49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.181a25		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.181a27						KB_CHECK_B_DONE
.181a27		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.181a2b		29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.181a2d		c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.181a2f		d0 03		bne $181a34	                BNE SET_LED
.181a31		4c f1 18	jmp $1818f1	                JMP IRQ_HANDLER_FETCH
.181a34						SET_LED
.181a34						KB_DONE
.181a34		c2 30		rep #$30	                REP #$30        ; set A&X long
.181a36		60		rts		                RTS
.181a37						programmerKey
.181a37		c2 30		rep #$30	                REP #$30        ; set A&X long
.181a39		68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.181a3a		2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.181a3b		ab		plb		                PLB
.181a3c		7a		ply		                PLY
.181a3d		fa		plx		                PLX
.181a3e		68		pla		                PLA
.181a3f		5c 08 10 00	jmp $001008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.181a43						SAVEKEY
.181a43		e2 20		sep #$20	                SEP #$20        ; set A short
.181a45		48		pha		                PHA                     ; Save the character
.181a46		a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.181a48		29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.181a4a		f0 0d		beq $181a59	                BEQ no_caps             ; No... just use the character as-is
.181a4c		68		pla		                PLA                     ; Get the character back
.181a4d		c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.181a4f		90 09		bcc $181a5a	                BLT check_break         ; Yes: just use as-is
.181a51		c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.181a53		b0 05		bcs $181a5a	                BGE check_break         ; Yes: just us as-is
.181a55		29 df		and #$df	                AND #%11011111          ; Conver to upper case
.181a57		80 01		bra $181a5a	                BRA check_break
.181a59		68		pla		no_caps         PLA                     ; Restore the character
.181a5a		c9 00		cmp #$00	check_break     CMP #0
.181a5c		f0 18		beq $181a76	                BEQ done
.181a5e		c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.181a60		f0 15		beq $181a77	                BEQ flag_break          ; Yes: flag a break
.181a62		a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.181a64		e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.181a67		b0 0d		bcs $181a76	                BCS done                ; Stop storing - An error should ensue here...
.181a69		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.181a6d		e8		inx		                INX
.181a6e		86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.181a70		a9 00		lda #$00	                LDA #$00
.181a72		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.181a76		60		rts		done            RTS
.181a77						flag_break
.181a77		e2 20		sep #$20	                SEP #$20        ; set A short
.181a79		a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.181a7b		85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.181a7d		60		rts		                RTS
.181a7e						KBD_GETCW
.181a7e		da		phx		                PHX
.181a7f		0b		phd		                PHD
.181a80		08		php		                PHP
.181a81		48		pha		                PHA             ; begin setdp macro
.181a82		08		php		                PHP
.181a83		c2 20		rep #$20	                REP #$20        ; set A long
.181a85		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.181a88		5b		tcd		                TCD
.181a89		28		plp		                PLP
.181a8a		68		pla		                PLA             ; end setdp macro
.181a8b		e2 20		sep #$20	                SEP #$20        ; set A short
.181a8d		c2 10		rep #$10	                REP #$10        ; set X long
.181a8f		58		cli		                CLI                     ; Make sure interrupts can happen
.181a90		af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.181a94		29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.181a96		c9 60		cmp #$60	                CMP #KB_CREDITS
.181a98		d0 0a		bne $181aa4	                BNE check_buffer        ; No: check the key buffer
.181a9a		a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.181a9c		8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.181aa0		22 ac 14 19	jsl $1914ac	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.181aa4		a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.181aa6		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.181aa8		90 02		bcc $181aac	                BCC read_buff           ; Yes: a key is present, read it
.181aaa		80 e4		bra $181a90	                BRA get_wait            ; Otherwise, keep waiting
.181aac		78		sei		read_buff       SEI                     ; Don't interrupt me!
.181aad		b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.181aaf		e8		inx		                INX                     ; And move to the next key
.181ab0		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.181ab2		f0 07		beq $181abb	                BEQ reset_indexes       ; Yes: return to 0 position
.181ab4		86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.181ab6		58		cli		                CLI
.181ab7		28		plp		done            PLP                     ; Restore status and interrupts
.181ab8		2b		pld		                PLD
.181ab9		fa		plx		                PLX
.181aba		6b		rtl		                RTL
.181abb		64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.181abd		64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.181abf		80 f6		bra $181ab7	                BRA done
.181ac1						KBD_GETC
.181ac1		da		phx		                PHX
.181ac2		0b		phd		                PHD
.181ac3		08		php		                PHP
.181ac4		48		pha		                PHA             ; begin setdp macro
.181ac5		08		php		                PHP
.181ac6		c2 20		rep #$20	                REP #$20        ; set A long
.181ac8		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.181acb		5b		tcd		                TCD
.181acc		28		plp		                PLP
.181acd		68		pla		                PLA             ; end setdp macro
.181ace		e2 20		sep #$20	                SEP #$20        ; set A short
.181ad0		c2 10		rep #$10	                REP #$10        ; set X long
.181ad2		58		cli		                CLI                     ; Make sure interrupts can happen
.181ad3		a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.181ad5		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.181ad7		90 05		bcc $181ade	                BCC read_buff           ; Yes: a key is present, read it
.181ad9		a9 00		lda #$00	                LDA #0                  ; If no key, return zero and set carry bit
.181adb		38		sec		                SEC
.181adc		80 0b		bra $181ae9	                BRA done
.181ade		78		sei		read_buff       SEI                     ; Don't interrupt me!
.181adf		b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.181ae1		e8		inx		                INX                     ; And move to the next key
.181ae2		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.181ae4		f0 07		beq $181aed	                BEQ reset_indexes       ; Yes: return to 0 position
.181ae6		86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.181ae8		58		cli		                CLI
.181ae9		28		plp		done            PLP                     ; Restore status and interrupts
.181aea		2b		pld		                PLD
.181aeb		fa		plx		                PLX
.181aec		6b		rtl		                RTL
.181aed		64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.181aef		64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.181af1		80 f6		bra $181ae9	                BRA done

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/super_io_def.asm

=$af1100					PME_STS_REG     = $AF1100
=$af1102					PME_EN_REG		  = $AF1102
=$af1104					PME_STS1_REG		= $AF1104
=$af1105					PME_STS2_REG		= $AF1105
=$af1106					PME_STS3_REG		= $AF1106
=$af1107					PME_STS4_REG		= $AF1107
=$af1108					PME_STS5_REG		= $AF1108
=$af110a					PME_EN1_REG     = $AF110A
=$af110b					PME_EN2_REG     = $AF110B
=$af110c					PME_EN3_REG     = $AF110C
=$af110d					PME_EN4_REG     = $AF110D
=$af110e					PME_EN5_REG     = $AF110E
=$af1110					SMI_STS1_REG		= $AF1110
=$af1111					SMI_STS2_REG		= $AF1111
=$af1112					SMI_STS3_REG		= $AF1112
=$af1113					SMI_STS4_REG		= $AF1113
=$af1114					SMI_STS5_REG		= $AF1114
=$af1116					SMI_EN1_REG     = $AF1116
=$af1117					SMI_EN2_REG     = $AF1117
=$af1118					SMI_EN3_REG     = $AF1118
=$af1119					SMI_EN4_REG     = $AF1119
=$af111a					SMI_EN5_REG     = $AF111A
=$af111c					MSC_ST_REG      = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		= $AF1123
=$af1124					GP11_REG    		= $AF1124
=$af1125					GP12_REG    		= $AF1125
=$af1126					GP13_REG    		= $AF1126
=$af1127					GP14_REG    		= $AF1127
=$af1128					GP15_REG    		= $AF1128
=$af1129					GP16_REG    		= $AF1129
=$af112a					GP17_REG    		= $AF112A
=$af112b					GP20_REG    		= $AF112B
=$af112c					GP21_REG    		= $AF112C
=$af112d					GP22_REG		= $AF112D
=$af112f					GP24_REG		= $AF112F
=$af1130					GP25_REG		= $AF1130
=$af1131					GP26_REG		= $AF1131
=$af1132					GP27_REG		= $AF1132
=$af1133					GP30_REG		= $AF1133
=$af1134					GP31_REG		= $AF1134
=$af1135					GP32_REG		= $AF1135
=$af1136					GP33_REG		= $AF1136
=$af1137					GP34_REG		= $AF1137
=$af1138					GP35_REG		= $AF1138
=$af1139					GP36_REG		= $AF1139
=$af113a					GP37_REG		= $AF113A
=$af113b					GP40_REG		= $AF113B
=$af113c					GP41_REG		= $AF113C
=$af113d					GP42_REG		= $AF113D
=$af113e					GP43_REG		= $AF113E
=$af113f					GP50_REG		= $AF113F
=$af1140					GP51_REG		= $AF1140
=$af1141					GP52_REG		= $AF1141
=$af1142					GP53_REG		= $AF1142
=$af1143					GP54_REG		= $AF1143
=$af1144					GP55_REG		= $AF1144
=$af1145					GP56_REG		= $AF1145
=$af1146					GP57_REG		= $AF1146
=$af1147					GP60_REG		= $AF1147
=$af1148					GP61_REG		= $AF1148
=$af114b					GP1_REG			= $AF114B
=$af114c					GP2_REG			= $AF114C
=$af114d					GP3_REG			= $AF114D
=$af114e					GP4_REG			= $AF114E
=$af114f					GP5_REG			= $AF114F
=$af1150					GP6_REG			= $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG            = $AF1157
=$af1158					FAN_CTRL_REG  	    = $AF1158
=$af1159					FAN1_TACH_REG       = $AF1159
=$af115a					FAN2_TACH_REG       = $AF115A
=$af115b					FAN1_PRELOAD_REG    = $AF115B
=$af115c					FAN2_PRELOAD_REG    = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/keyboard_def.asm

=$af1807					    STATUS_PORT 	= $AF1807
=$af1807					    KBD_CMD_BUF		= $AF1807
=$af1803					    KBD_OUT_BUF 	= $AF1803
=$af1803					    KBD_INPT_BUF	= $AF1803
=$af1803					    KBD_DATA_BUF	= $AF1803
=$af180a					    PORT_A		    = $AF180A   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$af180b					    PORT_B			= $AF180B   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=4						CHAN_EVID     = 4           ; ID for the second video port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src\kernel.asm

.190400						IBOOT
.190400		18		clc		                CLC               ; clear the carry flag
.190401		fb		xce		                XCE               ; move carry to emulation flag.
.190402		78		sei		                SEI               ; Disable interrupts
.190403		c2 30		rep #$30	                REP #$30        ; set A&X long
.190405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.190408		1b		tcs		                TAS
.190409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.19040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.19040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.190412		54 00 18	mvn $18,$00	                MVN $18,$00       ; Or during soft loading of the kernel from the debug port
.190415		48		pha		                PHA             ; begin setdp macro
.190416		08		php		                PHP
.190417		c2 20		rep #$20	                REP #$20        ; set A long
.190419		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19041c		5b		tcd		                TCD
.19041d		28		plp		                PLP
.19041e		68		pla		                PLA             ; end setdp macro
.19041f		e2 20		sep #$20	                SEP #$20        ; set A short
.190421		a2 00 00	ldx #$0000	                LDX #$0000
.190424		a9 00		lda #$00	                LDA #$00
.190426						CLEAR_MEM_LOOP
.190426		95 00		sta $00,x	                STA $0000, X
.190428		e8		inx		                INX
.190429		e0 00 01	cpx #$0100	                CPX #$0100
.19042c		d0 f8		bne $190426	                BNE CLEAR_MEM_LOOP
.19042e		ea		nop		                NOP
.19042f		a9 ff		lda #$ff	                LDA #$FF
.190431		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.190435		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.190439		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.19043d		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.190441		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.190445		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190449		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.19044d		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.190451		22 25 11 19	jsl $191125	                JSL INITRTC               ; Initialize the RTC
.190455		e2 20		sep #$20	                SEP #$20        ; set A short
.190457		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.19045b		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.19045d		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.19045f		d0 1e		bne $19047f	                BNE SkipInitExpC100C200
.190461		c2 20		rep #$20	                REP #$20        ; set A long
.190463		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.190467		c9 64 00	cmp #$0064	                CMP #$0064
.19046a		f0 0f		beq $19047b	                BEQ InitC100ESID
.19046c		c9 c8 00	cmp #$00c8	                CMP #$00C8
.19046f		d0 0e		bne $19047f	                BNE SkipInitExpC100C200
.190471		22 fe 6d 19	jsl $196dfe	                JSL SIMPLE_INIT_ETHERNET_CTRL
.190475		22 09 72 19	jsl $197209	                JSL INIT_EVID_VID_MODE
.190479		80 04		bra $19047f	                BRA SkipInitExpC100C200
.19047b						InitC100ESID:
.19047b		22 fe 6d 19	jsl $196dfe	                JSL SIMPLE_INIT_ETHERNET_CTRL
.19047f						SkipInitExpC100C200:
.19047f		c2 30		rep #$30	                REP #$30        ; set A&X long
.190481		a2 48 00	ldx #$0048	                LDX #72                   ; Set these by default, but they will be changed later by Init Vicky Text Mode
.190484		86 0f		stx $0f		                STX COLS_VISIBLE
.190486		a0 34 00	ldy #$0034	                LDY #52
.190489		84 13		sty $13		                STY LINES_VISIBLE
.19048b		a2 80 00	ldx #$0080	                LDX #128
.19048e		86 11		stx $11		                STX COLS_PER_LINE
.190490		a0 40 00	ldy #$0040	                LDY #64
.190493		84 15		sty $15		                STY LINES_MAX
.190495		a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.190498		85 0c		sta $0c		                STA SCREENBEGIN
.19049a		85 17		sta $17		                STA CURSORPOS
.19049c		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.19049f		85 1f		sta $1f		                STA COLORPOS
.1904a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1904a3		a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.1904a5		85 0e		sta $0e		                STA SCREENBEGIN+2
.1904a7		85 19		sta $19		                STA CURSORPOS+2
.1904a9		a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.1904ab		85 21		sta $21		                STA COLORPOS+2
.1904ad		a9 00		lda #$00	                LDA #$00
.1904af		8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.1904b2		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.1904b4		8f 00 f1 af	sta $aff100	                STA $AFF100
.1904b8		a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.1904ba		8f 00 f1 af	sta $aff100	                STA $AFF100
.1904be		a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.1904c0		8f 00 f1 af	sta $aff100	                STA $AFF100
.1904c4		a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.1904c6		8f 00 f1 af	sta $aff100	                STA $AFF100
.1904ca		a9 ed		lda #$ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.1904cc		85 1e		sta $1e		                STA CURCOLOR
.1904ce		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.1904d2		29 01		and #$01	                AND #$01
.1904d4		c9 01		cmp #$01	                CMP #$01
.1904d6		d0 14		bne $1904ec	                BNE Alreadyin640480Mode
.1904d8		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904dc		29 fc		and #$fc	                AND #$FC
.1904de		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904e2		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904e6		09 01		ora #$01	                ORA #$01
.1904e8		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904ec						Alreadyin640480Mode
.1904ec		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904f0		29 fc		and #$fc	                AND #$FC
.1904f2		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.1904f6		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.1904fa		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.1904fe		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.190502		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT
.190506		22 91 0e 19	jsl $190e91	                JSL INITMOUSEPOINTER
.19050a		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.19050e		a9 00		lda #$00	                LDA #0
.190510		22 38 10 00	jsl $001038	                JSL SETIN
.190514		22 3c 10 00	jsl $00103c	                JSL SETOUT
.190518		c2 20		rep #$20	                REP #$20        ; set A long
.19051a		48		pha		                PHA             ; begin setdp macro
.19051b		08		php		                PHP
.19051c		c2 20		rep #$20	                REP #$20        ; set A long
.19051e		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190521		5b		tcd		                TCD
.190522		28		plp		                PLP
.190523		68		pla		                PLA             ; end setdp macro
.190524		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD ;
.190528		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE;  // I Seperated them
.19052c		e2 20		sep #$20	                SEP #$20        ; set A short
.19052e		c2 10		rep #$10	                REP #$10        ; set X long
.190530		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.190532		8f 00 f1 af	sta $aff100	                STA $AFF100
.190536		a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.190538		8f 00 f1 af	sta $aff100	                STA $AFF100
.19053c		a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.19053e		8f 00 f1 af	sta $aff100	                STA $AFF100
.190542		a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.190544		8f 00 f1 af	sta $aff100	                STA $AFF100
.190548		a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.19054a		8f 00 f1 af	sta $aff100	                STA $AFF100
.19054e		a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.190550		8f 00 f1 af	sta $aff100	                STA $AFF100
.190554		a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.190556		8f 00 f1 af	sta $aff100	                STA $AFF100
.19055a		a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.19055d		22 3a 14 19	jsl $19143a	                JSL ILOOP_MS
.190561		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.190563		8f 00 f1 af	sta $aff100	                STA $AFF100
.190567		58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.190568		e2 20		sep #$20	                SEP #$20        ; set A short
.19056a		c2 10		rep #$10	                REP #$10        ; set X long
.19056c		48		pha		                PHA             ; begin setdbr macro
.19056d		08		php		                PHP
.19056e		e2 20		sep #$20	                SEP #$20        ; set A short
.190570		a9 19		lda #$19	                LDA #`greet_msg
.190572		48		pha		                PHA
.190573		ab		plb		                PLB
.190574		28		plp		                PLP
.190575		68		pla		                PLA             ; end setdbr macro
.190576		a2 00 00	ldx #$0000	                LDX #0
.190579		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.19057d		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.190581		e8		inx		                INX
.190582		e0 00 10	cpx #$1000	                CPX #$1000
.190585		d0 f2		bne $190579	                BNE jmpcopy
.190587						retry_boot
.190587		22 a3 42 19	jsl $1942a3	                JSL DOS_INIT          ; Initialize the "disc operating system"
.19058b		22 00 00 1e	jsl $1e0000	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.19058f		22 2e 0b 19	jsl $190b2e	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.190593		c2 30		rep #$30	                REP #$30        ; set A&X long
.190595		a2 00 00	ldx #$0000	                LDX #0
.190598		a0 00 00	ldy #$0000	                LDY #0
.19059b		22 07 0a 19	jsl $190a07	                JSL ILOCATE
.19059f						greet
.19059f		48		pha		                PHA             ; begin setdbr macro
.1905a0		08		php		                PHP
.1905a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1905a3		a9 19		lda #$19	                LDA #`greet_msg
.1905a5		48		pha		                PHA
.1905a6		ab		plb		                PLB
.1905a7		28		plp		                PLP
.1905a8		68		pla		                PLA             ; end setdbr macro
.1905a9		a2 05 7d	ldx #$7d05	                LDX #<>greet_msg
.1905ac		22 5f 07 19	jsl $19075f	                JSL IPRINT       ; print the first line
.1905b0		22 79 0b 19	jsl $190b79	                JSL ICOLORFLAG  ; This is to set the Color Memory for the TExt Logo
.1905b4		c2 30		rep #$30	                REP #$30        ; set A&X long
.1905b6		a9 ff fe	lda #$feff	                LDA #STACK_END    ; We are the root, let's make sure from now on, that we start clean
.1905b9		1b		tcs		                TAS
.1905ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1905bc		c2 10		rep #$10	                REP #$10        ; set X long
.1905be		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.1905c2		c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.1905c4		f0 10		beq $1905d6	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.1905c6		c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.1905c8		f0 1e		beq $1905e8	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.1905ca		c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.1905cc		f0 62		beq $190630	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.1905ce		c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.1905d0		f0 1d		beq $1905ef	                BEQ BOOTSDC           ; Yes: boot via the SDC
.1905d2		c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.1905d4		f0 39		beq $19060f	                BEQ BOOTIDE           ; Yes: boot via the IDE
.1905d6		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.1905da		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.1905dc		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.1905de		f0 2f		beq $19060f	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.1905e0		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.1905e2		f0 0b		beq $1905ef	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.1905e4		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.1905e6		f0 48		beq $190630	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.1905e8						IRESTORE
.1905e8		5c 00 00 1a	jmp $1a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.1905ec		ea		nop		CREDIT_LOCK     NOP
.1905ed		80 fd		bra $1905ec	                BRA CREDIT_LOCK
.1905ef		a2 4a 81	ldx #$814a	BOOTSDC         LDX #<>sdc_boot
.1905f2		22 5f 07 19	jsl $19075f	                JSL IPRINT
.1905f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1905f8		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.1905fa		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905fe		22 75 43 19	jsl $194375	                JSL DOS_MOUNT         ; Mount the SDC
.190602		90 06		bcc $19060a	                BCC sdc_error         ; Print an error message if couldn't get anything
.190604		22 30 45 19	jsl $194530	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.190608		80 de		bra $1905e8	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.19060a		a2 ce 80	ldx #$80ce	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.19060d		80 40		bra $19064f	                BRA PR_BOOT_ERROR
.19060f		a2 61 81	ldx #$8161	BOOTIDE         LDX #<>ide_boot
.190612		22 5f 07 19	jsl $19075f	                JSL IPRINT
.190616		e2 20		sep #$20	                SEP #$20        ; set A short
.190618		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.19061a		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.19061e		22 75 43 19	jsl $194375	                JSL DOS_MOUNT         ; Mount the IDE drive
.190622		90 07		bcc $19062b	                BCC hdc_error         ; Print an error message if couldn't get anything
.190624		22 30 45 19	jsl $194530	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.190628		82 bd ff	brl $1905e8	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.19062b		a2 ea 80	ldx #$80ea	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.19062e		80 1f		bra $19064f	                BRA PR_BOOT_ERROR
.190630		a2 33 81	ldx #$8133	BOOTFLOPPY      LDX #<>fdc_boot
.190633		22 5f 07 19	jsl $19075f	                JSL IPRINT
.190637		e2 20		sep #$20	                SEP #$20        ; set A short
.190639		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.19063b		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.19063f		22 85 67 19	jsl $196785	                JSL FDC_MOUNT         ; Mount the floppy drive
.190643		90 07		bcc $19064c	                BCC fdc_error         ; Print an error message if couldn't get anything
.190645		22 30 45 19	jsl $194530	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.190649		82 9c ff	brl $1905e8	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.19064c		a2 0d 81	ldx #$810d	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.19064f		22 5f 07 19	jsl $19075f	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.190653		a2 a9 80	ldx #$80a9	                LDX #<>boot_retry     ; Print the boot retry prompt
.190656		22 5f 07 19	jsl $19075f	                JSL IPRINT
.19065a		22 f9 06 19	jsl $1906f9	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.19065e		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.190660		d0 03		bne $190665	                BNE chk_r_lc
.190662		82 22 ff	brl $190587	                BRL retry_boot        ; Yes: retry the boot sequence
.190665		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.190667		d0 03		bne $19066c	                BNE chk_b_lc
.190669		82 1b ff	brl $190587	                BRL retry_boot
.19066c		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.19066e		d0 03		bne $190673	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.190670		82 75 ff	brl $1905e8	                BRL BOOTBASIC
.190673						chk_b_lc_not:
.190673		c9 42		cmp #$42	                CMP #'B'
.190675		d0 03		bne $19067a	                BNE chk_b_lc_not0
.190677		82 6e ff	brl $1905e8	                BRL BOOTBASIC
.19067a						chk_b_lc_not0:
.19067a		80 de		bra $19065a	                BRA boot_wait_key     ; No: keep waiting
.19067c						IBREAK
.19067c		48		pha		                PHA             ; begin setdp macro
.19067d		08		php		                PHP
.19067e		c2 20		rep #$20	                REP #$20        ; set A long
.190680		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190683		5b		tcd		                TCD
.190684		28		plp		                PLP
.190685		68		pla		                PLA             ; end setdp macro
.190686		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.190687		8f 48 02 00	sta $000248	                STA CPUY
.19068b		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.19068c		8f 46 02 00	sta $000246	                STA CPUX
.190690		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.190691		8f 44 02 00	sta $000244	                STA CPUA
.190695		68		pla		                PLA
.190696		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.19069a		e2 20		sep #$20	                SEP #$20        ; set A short
.19069c		68		pla		                PLA             ; Pull Data Bank (8 bits)
.19069d		8f 4e 02 00	sta $00024e	                STA CPUDBR
.1906a1		68		pla		                PLA             ; Pull Flags (8 bits)
.1906a2		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.1906a6		c2 20		rep #$20	                REP #$20        ; set A long
.1906a8		68		pla		                PLA             ; Pull Program Counter (16 bits)
.1906a9		8f 40 02 00	sta $000240	                STA CPUPC
.1906ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1906af		68		pla		                PLA             ; Pull Program Bank (8 bits)
.1906b0		8f 42 02 00	sta $000242	                STA CPUPBR
.1906b4		c2 20		rep #$20	                REP #$20        ; set A long
.1906b6		3b		tsc		                TSA             ; Get the stack
.1906b7		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.1906bb		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.1906be		1b		tcs		                TAS
.1906bf		5c 04 00 1a	jmp $1a0004	                JML MONITOR
.1906c3						IREADY
.1906c3		48		pha		                PHA             ; begin setdbr macro
.1906c4		08		php		                PHP
.1906c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1906c7		a9 19		lda #$19	                LDA #`ready_msg
.1906c9		48		pha		                PHA
.1906ca		ab		plb		                PLB
.1906cb		28		plp		                PLP
.1906cc		68		pla		                PLA             ; end setdbr macro
.1906cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1906cf		a2 7c 81	ldx #$817c	                LDX #<>ready_msg
.1906d2		22 5f 07 19	jsl $19075f	                JSL IPRINT
.1906d6						IREADYWAIT
.1906d6		22 f0 06 19	jsl $1906f0	                JSL IGETCHE
.1906da		80 fa		bra $1906d6	                BRA IREADYWAIT
.1906dc		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.1906dd		db		stp		IRETURN         STP
.1906de		08		php		ISETIN          PHP
.1906df		e2 20		sep #$20	                SEP #$20        ; set A short
.1906e1		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.1906e5		28		plp		                PLP
.1906e6		6b		rtl		                RTL
.1906e7		08		php		ISETOUT         PHP
.1906e8		e2 20		sep #$20	                SEP #$20        ; set A short
.1906ea		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.1906ee		28		plp		                PLP
.1906ef		6b		rtl		                RTL
.1906f0		22 f9 06 19	jsl $1906f9	IGETCHE         JSL IGETCHW
.1906f4		22 7f 07 19	jsl $19077f	                JSL IPUTC
.1906f8		6b		rtl		                RTL
.1906f9						IGETCHW
.1906f9		da		phx		                PHX
.1906fa		5a		phy		                PHY
.1906fb		8b		phb		                PHB
.1906fc		0b		phd		                PHD
.1906fd		08		php		                PHP
.1906fe		e2 20		sep #$20	                SEP #$20        ; set A short
.190700		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.190704		f0 1b		beq $190721	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.190706		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.190708		f0 0d		beq $190717	                BEQ getc_uart       ; Yes: handle reading from the UART
.19070a		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.19070c		f0 09		beq $190717	                BEQ getc_uart       ; Yes: handle reading from the UART
.19070e		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.190710		28		plp		                PLP
.190711		38		sec		                SEC                 ; And return carry set
.190712		2b		pld		                PLD
.190713		ab		plb		                PLB
.190714		7a		ply		                PLY
.190715		fa		plx		                PLX
.190716		6b		rtl		                RTL
.190717		22 89 5b 19	jsl $195b89	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.19071b		22 3d 5c 19	jsl $195c3d	                JSL UART_GETC       ; Get the charater from the COM port
.19071f		80 04		bra $190725	                BRA done
.190721		22 7e 1a 18	jsl $181a7e	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.190725		28		plp		done            PLP
.190726		18		clc		                CLC                 ; Return carry clear for valid data
.190727		2b		pld		                PLD
.190728		ab		plb		                PLB
.190729		7a		ply		                PLY
.19072a		fa		plx		                PLX
.19072b		6b		rtl		                RTL
.19072c						IGETCH
.19072c		da		phx		                PHX
.19072d		5a		phy		                PHY
.19072e		8b		phb		                PHB
.19072f		0b		phd		                PHD
.190730		08		php		                PHP
.190731		e2 20		sep #$20	                SEP #$20        ; set A short
.190733		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.190737		f0 1b		beq $190754	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.190739		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.19073b		f0 0d		beq $19074a	                BEQ getc_uart       ; Yes: handle reading from the UART
.19073d		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.19073f		f0 09		beq $19074a	                BEQ getc_uart       ; Yes: handle reading from the UART
.190741		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.190743		28		plp		                PLP
.190744		38		sec		                SEC                 ; And return carry set
.190745		2b		pld		                PLD
.190746		ab		plb		                PLB
.190747		7a		ply		                PLY
.190748		fa		plx		                PLX
.190749		6b		rtl		                RTL
.19074a		22 89 5b 19	jsl $195b89	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.19074e		22 3d 5c 19	jsl $195c3d	                JSL UART_GETC       ; Get the charater from the COM port
.190752		80 04		bra $190758	                BRA done
.190754		22 c1 1a 18	jsl $181ac1	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.190758		28		plp		done            PLP
.190759		18		clc		                CLC                 ; Return carry clear for valid data
.19075a		2b		pld		                PLD
.19075b		ab		plb		                PLB
.19075c		7a		ply		                PLY
.19075d		fa		plx		                PLX
.19075e		6b		rtl		                RTL
.19075f		22 68 07 19	jsl $190768	IPRINT          JSL IPUTS
.190763		22 03 09 19	jsl $190903	                JSL IPRINTCR
.190767		6b		rtl		                RTL
.190768		48		pha		IPUTS           PHA
.190769		08		php		                PHP
.19076a		e2 20		sep #$20	                SEP #$20        ; set A short
.19076c		c2 10		rep #$10	                REP #$10        ; set X long
.19076e		bd 00 00	lda $190000,x	iputs1          LDA $0,b,x      ; read from the string
.190771		f0 08		beq $19077b	                BEQ iputs_done
.190773		22 7f 07 19	jsl $19077f	iputs2          JSL IPUTC
.190777		e8		inx		iputs3          INX
.190778		4c 6e 07	jmp $19076e	                JMP iputs1
.19077b		e8		inx		iputs_done      INX
.19077c		28		plp		                PLP
.19077d		68		pla		                PLA
.19077e		6b		rtl		                RTL
.19077f						IPUTC
.19077f		da		phx		                PHX
.190780		5a		phy		                PHY
.190781		0b		phd		                PHD
.190782		8b		phb		                PHB
.190783		08		php		                PHP                 ; stash the flags (we'll be changing M)
.190784		48		pha		                PHA             ; begin setdp macro
.190785		08		php		                PHP
.190786		c2 20		rep #$20	                REP #$20        ; set A long
.190788		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19078b		5b		tcd		                TCD
.19078c		28		plp		                PLP
.19078d		68		pla		                PLA             ; end setdp macro
.19078e		48		pha		                PHA             ; begin setdbr macro
.19078f		08		php		                PHP
.190790		e2 20		sep #$20	                SEP #$20        ; set A short
.190792		a9 00		lda #$00	                LDA #0
.190794		48		pha		                PHA
.190795		ab		plb		                PLB
.190796		28		plp		                PLP
.190797		68		pla		                PLA             ; end setdbr macro
.190798		e2 20		sep #$20	                SEP #$20        ; set A short
.19079a		c2 10		rep #$10	                REP #$10        ; set X long
.19079c		48		pha		                PHA                 ; Save the character to print
.19079d		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.1907a1		f0 21		beq $1907c4	                BEQ putc_screen     ; If it's 0: print to the screen
.1907a3		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1907a5		f0 0b		beq $1907b2	                BEQ putc_uart       ; Yes: handle printing to the UART
.1907a7		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1907a9		f0 07		beq $1907b2	                BEQ putc_uart       ; Yes: handle printing to the UART
.1907ab		c9 04		cmp #$04	                CMP #CHAN_EVID      ; Check to see if it's the second video port
.1907ad		f0 0e		beq $1907bd	                BEQ putc_evid       ; Yes: handle printing to the second video port
.1907af		68		pla		                PLA                 ; Otherwise, just exit
.1907b0		80 5e		bra $190810	                BRA done
.1907b2		22 89 5b 19	jsl $195b89	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.1907b6		68		pla		                PLA                 ; Recover the character to send
.1907b7		22 5e 5c 19	jsl $195c5e	                JSL UART_PUTC       ; Send the character
.1907bb		80 53		bra $190810	                BRA done
.1907bd		68		pla		putc_evid       PLA                 ; Recover the character to send
.1907be		22 a5 6e 19	jsl $196ea5	                JSL EVID_IPUTC      ; Call the EVID routines
.1907c2		80 4c		bra $190810	                BRA done
.1907c4		68		pla		putc_screen     PLA                 ; Get the character to print
.1907c5		c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.1907c7		f0 69		beq $190832	                BEQ go_down
.1907c9		c9 20		cmp #$20	                CMP #$20
.1907cb		90 19		bcc $1907e6	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.1907cd		c9 7f		cmp #$7f	                CMP #$7F
.1907cf		f0 45		beq $190816	                BEQ do_del
.1907d1		b0 02		bcs $1907d5	                BCS check_A0        ; [$20..$7E]: print it
.1907d3		80 31		bra $190806	                BRA printc
.1907d5		c9 a0		cmp #$a0	check_A0        CMP #$A0
.1907d7		90 02		bcc $1907db	                BCC check_ctrl1
.1907d9		80 2b		bra $190806	                BRA printc          ; [$A0..$FF]: print it
.1907db		c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.1907dd		f0 53		beq $190832	                BEQ go_down         ; ... move the cursor down one row
.1907df		c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.1907e1		f0 61		beq $190844	                BEQ go_left         ; ... move the cursor left one column
.1907e3		4c 10 08	jmp $190810	                JMP done
.1907e6		c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.1907e8		f0 69		beq $190853	                BEQ do_TAB          ; ... move to the next TAB stop
.1907ea		c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.1907ec		f0 34		beq $190822	                BEQ backspace       ; ... move the cursor back and replace with a space
.1907ee		c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.1907f0		f0 3a		beq $19082c	                BEQ do_cr           ; ... move cursor down and to the first column
.1907f2		c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.1907f4		f0 42		beq $190838	                BEQ go_up           ; ... move the cursor up one row
.1907f6		c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.1907f8		f0 44		beq $19083e	                BEQ go_right        ; ... move the cursor right one column
.1907fa		c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.1907fc		f0 1e		beq $19081c	                BEQ do_ins          ; ... insert a space
.1907fe		c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.190800		f0 48		beq $19084a	                BEQ go_sol          ; ... move the cursor to the start of the line
.190802		c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.190804		f0 74		beq $19087a	                BEQ go_eol          ; ... move the cursor to the end of the line
.190806		87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.190808		a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.19080a		87 1f		sta [$1f]	                STA [COLORPOS]
.19080c		22 63 09 19	jsl $190963	                JSL ICSRRIGHT       ; And advance the cursor
.190810		28		plp		done            PLP
.190811		ab		plb		                PLB
.190812		2b		pld		                PLD
.190813		7a		ply		                PLY
.190814		fa		plx		                PLX
.190815		6b		rtl		                RTL
.190816		22 a7 08 19	jsl $1908a7	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.19081a		80 f4		bra $190810	                BRA done
.19081c		22 cb 08 19	jsl $1908cb	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.190820		80 ee		bra $190810	                BRA done
.190822		22 96 09 19	jsl $190996	backspace       JSL ICSRLEFT
.190826		22 a7 08 19	jsl $1908a7	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.19082a		80 e4		bra $190810	                BRA done
.19082c		22 03 09 19	jsl $190903	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.190830		80 de		bra $190810	                BRA done
.190832		22 e2 09 19	jsl $1909e2	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.190836		80 d8		bra $190810	                BRA done
.190838		22 bc 09 19	jsl $1909bc	go_up           JSL ICSRUP          ; Move the cursor up one line
.19083c		80 d2		bra $190810	                BRA done
.19083e		22 63 09 19	jsl $190963	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.190842		80 cc		bra $190810	                BRA done
.190844		22 96 09 19	jsl $190996	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.190848		80 c6		bra $190810	                BRA done
.19084a						go_sol
.19084a		c2 20		rep #$20	                REP #$20        ; set A long
.19084c		a2 00 00	ldx #$0000	                LDX #0
.19084f		a4 1c		ldy $1c		                LDY CURSORY
.190851		80 21		bra $190874	                BRA do_locate
.190853						do_TAB
.190853		c2 20		rep #$20	                REP #$20        ; set A long
.190855		a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.190857		29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.19085a		18		clc		                CLC
.19085b		69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.19085e		aa		tax		                TAX
.19085f		a4 1c		ldy $1c		                LDY CURSORY
.190861		e2 20		sep #$20	                SEP #$20        ; set A short
.190863		e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.190865		90 04		bcc $19086b	                BCC check_row       ; Yes: check the row
.190867		a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.19086a		c8		iny		                INY                 ; ... and the next row
.19086b		c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.19086d		90 05		bcc $190874	                BCC do_locate       ; Yes: reposition the cursor
.19086f		22 53 0a 19	jsl $190a53	                JSL ISCROLLUP       ; No: scroll the screen
.190873		88		dey		                DEY                 ; And set the row to the last one
.190874		22 07 0a 19	jsl $190a07	do_locate       JSL ILOCATE         ; Set the cursor position
.190878		80 96		bra $190810	                BRA done
.19087a		a6 0f		ldx $0f		go_eol          LDX COLS_VISIBLE    ; Move the cursor to the right most column
.19087c		ca		dex		                DEX
.19087d		a4 1c		ldy $1c		                LDY CURSORY
.19087f		22 07 0a 19	jsl $190a07	                JSL ILOCATE
.190883		e2 20		sep #$20	                SEP #$20        ; set A short
.190885		a7 17		lda [$17]	eol_loop        LDA [CURSORPOS]     ; Get the character under the cursor
.190887		c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.190889		d0 0b		bne $190896	                BNE eol_done        ; No: exit the loop
.19088b		22 96 09 19	jsl $190996	                JSL ICSRLEFT        ; Yes: move to the left
.19088f		a6 1a		ldx $1a		                LDX CURSORX         ; Are we at column 0?
.190891		d0 f2		bne $190885	                BNE eol_loop        ; No: try again
.190893		82 7a ff	brl $190810	                BRL done            ; Yes: we're done
.190896		a6 1a		ldx $1a		eol_done        LDX CURSORX         ; Check the column
.190898		e8		inx		                INX
.190899		e4 0f		cpx $0f		                CPX COLS_VISIBLE    ; Is it the right most?
.19089b		d0 03		bne $1908a0	                BNE eol_right
.19089d		82 70 ff	brl $190810	                BRL done            ; Yes: we're done
.1908a0		22 63 09 19	jsl $190963	eol_right       JSL ICSRRIGHT       ; No: move right one column
.1908a4		82 69 ff	brl $190810	                BRL done
.1908a7		da		phx		SCRSHIFTLL      PHX
.1908a8		5a		phy		                PHY
.1908a9		48		pha		                PHA
.1908aa		0b		phd		                PHD
.1908ab		08		php		                PHP
.1908ac		48		pha		                PHA             ; begin setdp macro
.1908ad		08		php		                PHP
.1908ae		c2 20		rep #$20	                REP #$20        ; set A long
.1908b0		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1908b3		5b		tcd		                TCD
.1908b4		28		plp		                PLP
.1908b5		68		pla		                PLA             ; end setdp macro
.1908b6		c2 30		rep #$30	                REP #$30        ; set A&X long
.1908b8		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.1908ba		a8		tay		                TAY                 ; Set it as the destination
.1908bb		aa		tax		                TAX
.1908bc		e8		inx		                INX                 ; And set the next cell as the source
.1908bd		18		clc		                CLC                 ; Calculate the length of the block to move
.1908be		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.1908c0		e5 1a		sbc $1a		                SBC CURSORX
.1908c2		54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.1908c5		28		plp		                PLP
.1908c6		2b		pld		                PLD
.1908c7		68		pla		                PLA
.1908c8		7a		ply		                PLY
.1908c9		fa		plx		                PLX
.1908ca		6b		rtl		                RTL
.1908cb		da		phx		SCRSHIFTLR      PHX
.1908cc		48		pha		                PHA
.1908cd		0b		phd		                PHD
.1908ce		08		php		                PHP
.1908cf		48		pha		                PHA             ; begin setdp macro
.1908d0		08		php		                PHP
.1908d1		c2 20		rep #$20	                REP #$20        ; set A long
.1908d3		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1908d6		5b		tcd		                TCD
.1908d7		28		plp		                PLP
.1908d8		68		pla		                PLA             ; end setdp macro
.1908d9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1908db		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.1908dd		1a		inc a		                INC A
.1908de		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.1908e0		b0 1b		bcs $1908fd	                BGE done            ; Yes: just skip the whole thing
.1908e2		38		sec		                SEC                 ; Calculate the length of the block to move
.1908e3		a5 0f		lda $0f		                LDA COLS_VISIBLE
.1908e5		e5 1a		sbc $1a		                SBC CURSORX
.1908e7		1a		inc a		                INC A
.1908e8		18		clc		                CLC
.1908e9		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.1908eb		3a		dec a		                DEC A
.1908ec		a8		tay		                TAY                 ; Make it the destination
.1908ed		3a		dec a		                DEC A               ; Move to the previous column
.1908ee		aa		tax		                TAX                 ; Make it the source
.1908ef		38		sec		                SEC                 ; Calculate the length of the block to move
.1908f0		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.1908f2		e5 1a		sbc $1a		                SBC CURSORX
.1908f4		44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.1908f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1908f9		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.1908fb		87 17		sta [$17]	                STA [CURSORPOS]
.1908fd		28		plp		done            PLP
.1908fe		2b		pld		                PLD
.1908ff		68		pla		                PLA
.190900		fa		plx		                PLX
.190901		6b		rtl		                RTL
.190902						IPUTB
.190902		6b		rtl		                RTL
.190903						IPRINTCR
.190903		da		phx		                PHX
.190904		5a		phy		                PHY
.190905		8b		phb		                PHB
.190906		0b		phd		                PHD
.190907		08		php		                PHP
.190908		48		pha		                PHA             ; begin setdbr macro
.190909		08		php		                PHP
.19090a		e2 20		sep #$20	                SEP #$20        ; set A short
.19090c		a9 00		lda #$00	                LDA #0
.19090e		48		pha		                PHA
.19090f		ab		plb		                PLB
.190910		28		plp		                PLP
.190911		68		pla		                PLA             ; end setdbr macro
.190912		48		pha		                PHA             ; begin setdp macro
.190913		08		php		                PHP
.190914		c2 20		rep #$20	                REP #$20        ; set A long
.190916		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190919		5b		tcd		                TCD
.19091a		28		plp		                PLP
.19091b		68		pla		                PLA             ; end setdp macro
.19091c		e2 20		sep #$20	                SEP #$20        ; set A short
.19091e		c2 10		rep #$10	                REP #$10        ; set X long
.190920		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.190924		f0 1c		beq $190942	                BEQ scr_printcr
.190926		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.190928		f0 06		beq $190930	                BEQ uart_printcr    ; Yes: handle printing to the UART
.19092a		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.19092c		f0 02		beq $190930	                BEQ uart_printcr    ; Yes: handle printing to the UART
.19092e		80 1c		bra $19094c	                BRA done
.190930		22 89 5b 19	jsl $195b89	uart_printcr    JSL UART_SELECT
.190934		a9 0d		lda #$0d	                LDA #CHAR_CR
.190936		22 7f 07 19	jsl $19077f	                JSL IPUTC
.19093a		a9 0a		lda #$0a	                LDA #CHAR_LF
.19093c		22 7f 07 19	jsl $19077f	                JSL IPUTC
.190940		80 0a		bra $19094c	                BRA done
.190942		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.190945		a4 1c		ldy $1c		                LDY CURSORY
.190947		c8		iny		                INY
.190948		22 07 0a 19	jsl $190a07	                JSL ILOCATE
.19094c		28		plp		done            PLP
.19094d		2b		pld		                PLD
.19094e		ab		plb		                PLB
.19094f		7a		ply		                PLY
.190950		fa		plx		                PLX
.190951		6b		rtl		                RTL
.190952		da		phx		ICSRHOME        PHX
.190953		5a		phy		                PHY
.190954		08		php		                PHP
.190955		a2 00 00	ldx #$0000	                LDX #0
.190958		a0 00 00	ldy #$0000	                LDY #0
.19095b		22 07 0a 19	jsl $190a07	                JSL ILOCATE
.19095f		28		plp		                PLP
.190960		7a		ply		                PLY
.190961		fa		plx		                PLX
.190962		6b		rtl		                RTL
.190963		da		phx		ICSRRIGHT       PHX
.190964		5a		phy		                PHY
.190965		48		pha		                PHA
.190966		0b		phd		                PHD
.190967		08		php		                PHP
.190968		c2 20		rep #$20	                REP #$20        ; set A long
.19096a		c2 10		rep #$10	                REP #$10        ; set X long
.19096c		48		pha		                PHA             ; begin setdp macro
.19096d		08		php		                PHP
.19096e		c2 20		rep #$20	                REP #$20        ; set A long
.190970		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.190973		5b		tcd		                TCD
.190974		28		plp		                PLP
.190975		68		pla		                PLA             ; end setdp macro
.190976		a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.190978		e8		inx		                INX
.190979		a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.19097b		e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.19097d		90 0d		bcc $19098c	                BCC icsrright_nowrap  ; No: just set the position
.19097f		a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.190982		c8		iny		                INY                   ; And move to the next row
.190983		c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.190985		90 05		bcc $19098c	                BCC icsrright_nowrap  ; No: just set the position
.190987		88		dey		                DEY                   ; Yes: lock to the last row
.190988		22 53 0a 19	jsl $190a53	                JSL ISCROLLUP         ; But scroll the screen up
.19098c						icsrright_nowrap
.19098c		22 07 0a 19	jsl $190a07	                JSL ILOCATE           ; Set the cursor position
.190990		28		plp		                PLP
.190991		2b		pld		                PLD
.190992		68		pla		                PLA
.190993		7a		ply		                PLY
.190994		fa		plx		                PLX
.190995		6b		rtl		                RTL
.190996						ICSRLEFT
.190996		da		phx		                PHX
.190997		5a		phy		                PHY
.190998		48		pha		                PHA
.190999		0b		phd		                PHD
.19099a		08		php		                PHP
.19099b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19099d		48		pha		                PHA             ; begin setdp macro
.19099e		08		php		                PHP
.19099f		c2 20		rep #$20	                REP #$20        ; set A long
.1909a1		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.1909a4		5b		tcd		                TCD
.1909a5		28		plp		                PLP
.1909a6		68		pla		                PLA             ; end setdp macro
.1909a7		a5 1a		lda $1a		                LDA CURSORX
.1909a9		f0 0b		beq $1909b6	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.1909ab		a6 1a		ldx $1a		                LDX CURSORX
.1909ad		ca		dex		                DEX
.1909ae		86 1a		stx $1a		                STX CURSORX
.1909b0		a4 1c		ldy $1c		                LDY CURSORY
.1909b2		22 07 0a 19	jsl $190a07	                JSL ILOCATE
.1909b6						icsrleft_done_already_zero
.1909b6		28		plp		                PLP
.1909b7		2b		pld		                PLD
.1909b8		68		pla		                PLA
.1909b9		7a		ply		                PLY
.1909ba		fa		plx		                PLX
.1909bb		6b		rtl		                RTL
.1909bc						ICSRUP
.1909bc		da		phx		                PHX
.1909bd		5a		phy		                PHY
.1909be		48		pha		                PHA
.1909bf		0b		phd		                PHD
.1909c0		08		php		                PHP
.1909c1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1909c3		48		pha		                PHA             ; begin setdp macro
.1909c4		08		php		                PHP
.1909c5		c2 20		rep #$20	                REP #$20        ; set A long
.1909c7		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.1909ca		5b		tcd		                TCD
.1909cb		28		plp		                PLP
.1909cc		68		pla		                PLA             ; end setdp macro
.1909cd		a5 1c		lda $1c		                LDA CURSORY
.1909cf		f0 0b		beq $1909dc	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.1909d1		a4 1c		ldy $1c		                LDY CURSORY
.1909d3		88		dey		                DEY
.1909d4		84 1c		sty $1c		                STY CURSORY
.1909d6		a6 1a		ldx $1a		                LDX CURSORX
.1909d8		22 07 0a 19	jsl $190a07	                JSL ILOCATE
.1909dc						isrup_done_already_zero
.1909dc		28		plp		                PLP
.1909dd		2b		pld		                PLD
.1909de		68		pla		                PLA
.1909df		7a		ply		                PLY
.1909e0		fa		plx		                PLX
.1909e1		6b		rtl		                RTL
.1909e2		da		phx		ICSRDOWN        PHX
.1909e3		5a		phy		                PHY
.1909e4		0b		phd		                PHD
.1909e5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1909e7		48		pha		                PHA             ; begin setdp macro
.1909e8		08		php		                PHP
.1909e9		c2 20		rep #$20	                REP #$20        ; set A long
.1909eb		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.1909ee		5b		tcd		                TCD
.1909ef		28		plp		                PLP
.1909f0		68		pla		                PLA             ; end setdp macro
.1909f1		a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.1909f3		a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.1909f5		c8		iny		                INY
.1909f6		c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.1909f8		90 05		bcc $1909ff	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.1909fa		88		dey		                DEY                         ; Yes: go back to the last row
.1909fb		22 53 0a 19	jsl $190a53	                JSL ISCROLLUP               ; But scroll the screen up
.1909ff						icsrdown_noscroll
.1909ff		22 07 0a 19	jsl $190a07	                JSL ILOCATE                 ; And set the cursor position
.190a03		2b		pld		                PLD
.190a04		7a		ply		                PLY
.190a05		fa		plx		                PLX
.190a06		6b		rtl		                RTL
.190a07		48		pha		ILOCATE         PHA
.190a08		0b		phd		                PHD
.190a09		08		php		                PHP
.190a0a		48		pha		                PHA             ; begin setdp macro
.190a0b		08		php		                PHP
.190a0c		c2 20		rep #$20	                REP #$20        ; set A long
.190a0e		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190a11		5b		tcd		                TCD
.190a12		28		plp		                PLP
.190a13		68		pla		                PLA             ; end setdp macro
.190a14		c2 30		rep #$30	                REP #$30        ; set A&X long
.190a16						ilocate_scroll
.190a16		c4 13		cpy $13		                CPY LINES_VISIBLE
.190a18		90 07		bcc $190a21	                BCC ilocate_scrolldone
.190a1a		22 53 0a 19	jsl $190a53	                JSL ISCROLLUP
.190a1e		88		dey		                DEY
.190a1f		80 f5		bra $190a16	                BRA ilocate_scroll
.190a21						ilocate_scrolldone
.190a21		86 1a		stx $1a		                STX CURSORX
.190a23		84 1c		sty $1c		                STY CURSORY
.190a25		a5 0c		lda $0c		                LDA SCREENBEGIN
.190a27						ilocate_row
.190a27		c0 00 00	cpy #$0000	                CPY #$0
.190a2a		f0 08		beq $190a34	                BEQ ilocate_right
.190a2c		18		clc		ilocate_down    CLC
.190a2d		65 11		adc $11		                ADC COLS_PER_LINE
.190a2f		88		dey		                DEY
.190a30		f0 02		beq $190a34	                BEQ ilocate_right
.190a32		80 f8		bra $190a2c	                BRA ilocate_down
.190a34		18		clc		ilocate_right   CLC
.190a35		65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.190a37		85 17		sta $17		                STA CURSORPOS
.190a39		a4 1c		ldy $1c		                LDY CURSORY
.190a3b		98		tya		                TYA
.190a3c		8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.190a40		8a		txa		                TXA
.190a41		8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.190a45		c2 20		rep #$20	                REP #$20        ; set A long
.190a47		18		clc		                CLC
.190a48		a5 17		lda $17		                LDA CURSORPOS
.190a4a		69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.190a4d		85 1f		sta $1f		                STA COLORPOS
.190a4f		28		plp		ilocate_done    PLP
.190a50		2b		pld		                PLD
.190a51		68		pla		                PLA
.190a52		6b		rtl		                RTL
.190a53						ISCROLLUP
.190a53		48		pha		                PHA
.190a54		da		phx		                PHX
.190a55		5a		phy		                PHY
.190a56		8b		phb		                PHB
.190a57		0b		phd		                PHD
.190a58		08		php		                PHP
.190a59		48		pha		                PHA             ; begin setdp macro
.190a5a		08		php		                PHP
.190a5b		c2 20		rep #$20	                REP #$20        ; set A long
.190a5d		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190a60		5b		tcd		                TCD
.190a61		28		plp		                PLP
.190a62		68		pla		                PLA             ; end setdp macro
.190a63		c2 30		rep #$30	                REP #$30        ; set A&X long
.190a65		a5 11		lda $11		                LDA COLS_PER_LINE
.190a67		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.190a6b		a5 13		lda $13		                LDA LINES_VISIBLE
.190a6d		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.190a71		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.190a75		85 00		sta $00		                STA TMPPTR1
.190a77		18		clc		                CLC
.190a78		a9 00 a0	lda #$a000	                LDA #$A000
.190a7b		a8		tay		                TAY
.190a7c		65 11		adc $11		                ADC COLS_PER_LINE
.190a7e		aa		tax		                TAX
.190a7f		a5 00		lda $00		                LDA TMPPTR1
.190a81		54 af af	mvn $af,$af	                MVN $AF,$AF
.190a84		c2 30		rep #$30	                REP #$30        ; set A&X long
.190a86		18		clc		                CLC
.190a87		a9 00 c0	lda #$c000	                LDA #$C000
.190a8a		a8		tay		                TAY
.190a8b		65 11		adc $11		                ADC COLS_PER_LINE
.190a8d		aa		tax		                TAX
.190a8e		a5 00		lda $00		                LDA TMPPTR1
.190a90		54 af af	mvn $af,$af	                MVN $AF,$AF
.190a93		a5 00		lda $00		                LDA TMPPTR1
.190a95		48		pha		                PHA
.190a96		18		clc		                CLC
.190a97		69 00 a0	adc #$a000	                ADC #<>CS_TEXT_MEM_PTR
.190a9a		85 00		sta $00		                STA TMPPTR1
.190a9c		a0 00 00	ldy #$0000	                LDY #0
.190a9f		a9 20 00	lda #$0020	                LDA #' '
.190aa2		97 00		sta [$00],y	clr_text        STA [TMPPTR1],Y
.190aa4		c8		iny		                INY
.190aa5		c4 0f		cpy $0f		                CPY COLS_VISIBLE
.190aa7		d0 f9		bne $190aa2	                BNE clr_text
.190aa9		68		pla		                PLA
.190aaa		18		clc		                CLC
.190aab		69 00 c0	adc #$c000	                ADC #<>CS_COLOR_MEM_PTR
.190aae		85 00		sta $00		                STA TMPPTR1
.190ab0		a0 00 00	ldy #$0000	                LDY #0
.190ab3		a5 1e		lda $1e		                LDA CURCOLOR
.190ab5		97 00		sta [$00],y	clr_color       STA [TMPPTR1],Y
.190ab7		c8		iny		                INY
.190ab8		c4 0f		cpy $0f		                CPY COLS_VISIBLE
.190aba		d0 f9		bne $190ab5	                BNE clr_color
.190abc		28		plp		                PLP
.190abd		2b		pld		                PLD
.190abe		ab		plb		                PLB
.190abf		7a		ply		                PLY
.190ac0		fa		plx		                PLX
.190ac1		68		pla		                PLA
.190ac2		6b		rtl		                RTL
.190ac3		08		php		IPRINTH         PHP
.190ac4		48		pha		                PHA
.190ac5						iprinth1
.190ac5		e2 20		sep #$20	                SEP #$20        ; set A short
.190ac7		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.190aca		4a		lsr a		                LSR
.190acb		4a		lsr a		                LSR
.190acc		4a		lsr a		                LSR
.190acd		4a		lsr a		                LSR
.190ace		22 1d 0b 19	jsl $190b1d	                JSL iprint_digit
.190ad2		bd 00 00	lda $0000,x	                LDA #0,b,x
.190ad5		22 1d 0b 19	jsl $190b1d	                JSL iprint_digit
.190ad9		ca		dex		                DEX
.190ada		88		dey		                DEY
.190adb		d0 e8		bne $190ac5	                BNE iprinth1
.190add		68		pla		                PLA
.190ade		28		plp		                PLP
.190adf		6b		rtl		                RTL
.190ae0						IPRINTAH
.190ae0		48		pha		                PHA
.190ae1		08		php		                PHP
.190ae2		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.190ae6		08		php		                PHP                   ; Get the processor status into A
.190ae7		e2 20		sep #$20	                SEP #$20        ; set A short
.190ae9		c2 10		rep #$10	                REP #$10        ; set X long
.190aeb		68		pla		                PLA
.190aec		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.190aee		c9 20		cmp #$20	                CMP #%00100000
.190af0		f0 14		beq $190b06	                BEQ eight_bit
.190af2		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.190af6		4a		lsr a		                LSR A
.190af7		4a		lsr a		                LSR A
.190af8		4a		lsr a		                LSR A
.190af9		4a		lsr a		                LSR A
.190afa		22 1d 0b 19	jsl $190b1d	                JSL iprint_digit      ; And print it
.190afe		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.190b02		22 1d 0b 19	jsl $190b1d	                JSL iprint_digit      ; And print it
.190b06		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.190b0a		4a		lsr a		                LSR A
.190b0b		4a		lsr a		                LSR A
.190b0c		4a		lsr a		                LSR A
.190b0d		4a		lsr a		                LSR A
.190b0e		22 1d 0b 19	jsl $190b1d	                JSL iprint_digit      ; And print it
.190b12		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.190b16		22 1d 0b 19	jsl $190b1d	                JSL iprint_digit      ; And print it
.190b1a		28		plp		                PLP
.190b1b		68		pla		                PLA
.190b1c		6b		rtl		                RTL
.190b1d		da		phx		iprint_digit    PHX
.190b1e		c2 20		rep #$20	                REP #$20        ; set A long
.190b20		29 0f 00	and #$000f	                AND #$0F
.190b23		aa		tax		                TAX
.190b24		bf 90 81 19	lda $198190,x	                LDA hex_digits,X
.190b28		22 7f 07 19	jsl $19077f	                JSL IPUTC       ; Print the digit
.190b2c		fa		plx		                PLX
.190b2d		6b		rtl		                RTL
.190b2e		48		pha		ICLRSCREEN	    PHA
.190b2f		da		phx		                PHX
.190b30		08		php		                PHP
.190b31		e2 20		sep #$20	                SEP #$20        ; set A short
.190b33		c2 10		rep #$10	                REP #$10        ; set X long
.190b35		a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.190b38		a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.190b3a		9f 00 a0 af	sta $afa000,x	iclearloop0	STA CS_TEXT_MEM_PTR, x	;
.190b3e		e8		inx		                inx
.190b3f		e0 00 20	cpx #$2000	                cpx #$2000
.190b42		d0 f6		bne $190b3a	                bne iclearloop0
.190b44		a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.190b47		af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.190b4b		9f 00 c0 af	sta $afc000,x	iclearloop1     STA CS_COLOR_MEM_PTR, x	;
.190b4f		e8		inx		                inx
.190b50		e0 00 20	cpx #$2000	                cpx #$2000
.190b53		d0 f6		bne $190b4b	                bne iclearloop1
.190b55		28		plp		                PLP
.190b56		fa		plx		                PLX
.190b57		68		pla		                PLA
.190b58		6b		rtl		                RTL
.190b59						COPYBYTES42
.190b59		08		php		                PHP
.190b5a		0b		phd		                PHD
.190b5b		48		pha		                PHA             ; begin setdp macro
.190b5c		08		php		                PHP
.190b5d		c2 20		rep #$20	                REP #$20        ; set A long
.190b5f		a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.190b62		5b		tcd		                TCD
.190b63		28		plp		                PLP
.190b64		68		pla		                PLA             ; end setdp macro
.190b65		e2 20		sep #$20	                SEP #$20        ; set A short
.190b67		c2 10		rep #$10	                REP #$10        ; set X long
.190b69		a0 00 00	ldy #$0000	                LDY #0
.190b6c		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.190b6e		97 04		sta [$04],y	                STA [TMPPTR2],Y
.190b70		c8		iny		                INY
.190b71		c0 2a 00	cpy #$002a	                CPY #42
.190b74		d0 f6		bne $190b6c	                BNE copy_loop
.190b76		2b		pld		                PLD
.190b77		28		plp		                PLP
.190b78		60		rts		                RTS
.190b79						ICOLORFLAG
.190b79		48		pha		                PHA
.190b7a		da		phx		                PHX
.190b7b		5a		phy		                PHY
.190b7c		08		php		                PHP
.190b7d		8b		phb		                PHB
.190b7e		0b		phd		                PHD
.190b7f		48		pha		                PHA             ; begin setdp macro
.190b80		08		php		                PHP
.190b81		c2 20		rep #$20	                REP #$20        ; set A long
.190b83		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190b86		5b		tcd		                TCD
.190b87		28		plp		                PLP
.190b88		68		pla		                PLA             ; end setdp macro
.190b89		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b8b		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.190b8e		85 04		sta $04		                STA TMPPTR2
.190b90		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.190b93		85 06		sta $06		                STA TMPPTR2+2
.190b95		a9 ed 7d	lda #$7ded	                LDA #<>greet_clr_line1
.190b98		85 00		sta $00		                STA TMPPTR1
.190b9a		a9 19 00	lda #$0019	                LDA #`greet_clr_line1
.190b9d		85 02		sta $02		                STA TMPPTR1+2
.190b9f		20 59 0b	jsr $190b59	                JSR COPYBYTES42
.190ba2		18		clc		                CLC
.190ba3		a5 04		lda $04		                LDA TMPPTR2
.190ba5		65 11		adc $11		                ADC COLS_PER_LINE
.190ba7		85 04		sta $04		                STA TMPPTR2
.190ba9		a9 17 7e	lda #$7e17	                LDA #<>greet_clr_line2
.190bac		85 00		sta $00		                STA TMPPTR1
.190bae		a9 19 00	lda #$0019	                LDA #`greet_clr_line2
.190bb1		85 02		sta $02		                STA TMPPTR1+2
.190bb3		20 59 0b	jsr $190b59	                JSR COPYBYTES42
.190bb6		18		clc		                CLC
.190bb7		a5 04		lda $04		                LDA TMPPTR2
.190bb9		65 11		adc $11		                ADC COLS_PER_LINE
.190bbb		85 04		sta $04		                STA TMPPTR2
.190bbd		a9 41 7e	lda #$7e41	                LDA #<>greet_clr_line3
.190bc0		85 00		sta $00		                STA TMPPTR1
.190bc2		a9 19 00	lda #$0019	                LDA #`greet_clr_line3
.190bc5		85 02		sta $02		                STA TMPPTR1+2
.190bc7		20 59 0b	jsr $190b59	                JSR COPYBYTES42
.190bca		18		clc		                CLC
.190bcb		a5 04		lda $04		                LDA TMPPTR2
.190bcd		65 11		adc $11		                ADC COLS_PER_LINE
.190bcf		85 04		sta $04		                STA TMPPTR2
.190bd1		a9 6b 7e	lda #$7e6b	                LDA #<>greet_clr_line4
.190bd4		85 00		sta $00		                STA TMPPTR1
.190bd6		a9 19 00	lda #$0019	                LDA #`greet_clr_line4
.190bd9		85 02		sta $02		                STA TMPPTR1+2
.190bdb		20 59 0b	jsr $190b59	                JSR COPYBYTES42
.190bde		18		clc		                CLC
.190bdf		a5 04		lda $04		                LDA TMPPTR2
.190be1		65 11		adc $11		                ADC COLS_PER_LINE
.190be3		85 04		sta $04		                STA TMPPTR2
.190be5		a9 95 7e	lda #$7e95	                LDA #<>greet_clr_line5
.190be8		85 00		sta $00		                STA TMPPTR1
.190bea		a9 19 00	lda #$0019	                LDA #`greet_clr_line5
.190bed		85 02		sta $02		                STA TMPPTR1+2
.190bef		20 59 0b	jsr $190b59	                JSR COPYBYTES42
.190bf2		2b		pld		                PLD
.190bf3		ab		plb		                PLB
.190bf4		28		plp		                PLP
.190bf5		7a		ply		                PLY
.190bf6		fa		plx		                PLX
.190bf7		68		pla		                PLA
.190bf8		6b		rtl		                RTL
.190bf9		0b		phd		IINITCHLUT		  PHD
.190bfa		08		php		                PHP
.190bfb		48		pha		                PHA
.190bfc		da		phx		                PHX
.190bfd		e2 20		sep #$20	                SEP #$20        ; set A short
.190bff		e2 10		sep #$10	                SEP #$10        ; set X short
.190c01		a2 00		ldx #$00					        LDX	#$00
.190c03		bf bf 7e 19	lda $197ebf,x	lutinitloop0	LDA @lfg_color_lut,x		; get Local Data
.190c07		9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.190c0b		e8		inx		                inx
.190c0c		e0 40		cpx #$40	                cpx #$40
.190c0e		d0 f3		bne $190c03	                bne lutinitloop0
.190c10		a2 00		ldx #$00	                LDX	#$00
.190c12		bf ff 7e 19	lda $197eff,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.190c16		9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.190c1a		e8		inx		                INX
.190c1b		e0 40		cpx #$40	                CPX #$40
.190c1d		d0 f3		bne $190c12	                bne lutinitloop1
.190c1f		c2 20		rep #$20	                REP #$20        ; set A long
.190c21		c2 10		rep #$10	                REP #$10        ; set X long
.190c23		fa		plx		                PLX
.190c24		68		pla		                PLA
.190c25		28		plp		                PLP
.190c26		2b		pld		                PLD
.190c27		6b		rtl		                RTL
.190c28						IINITGAMMATABLE
.190c28		e2 20		sep #$20	                SEP #$20        ; set A short
.190c2a		c2 10		rep #$10	                REP #$10        ; set X long
.190c2c		a2 00 00	ldx #$0000	                ldx #$0000
.190c2f		bf 00 86 19	lda $198600,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.190c33		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.190c37		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.190c3b		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.190c3f		e8		inx		                inx
.190c40		e0 00 01	cpx #$0100	                cpx #$0100
.190c43		d0 ea		bne $190c2f	                bne initgammaloop
.190c45		c2 30		rep #$30	                REP #$30        ; set A&X long
.190c47		6b		rtl		                RTL
.190c48		48		pha		IINITALLLUT     PHA
.190c49		da		phx		                PHX
.190c4a		a2 00 00	ldx #$0000	                LDX #$0000
.190c4d		e2 20		sep #$20	                SEP #$20        ; set A short
.190c4f		a9 00		lda #$00	                LDA #$00
.190c51		85 0a		sta $0a		                STA $0A     ; Temp Location
.190c53						iinit_lut_loop
.190c53		86 02		stx $02		                STX $02
.190c55		a6 0a		ldx $0a		                LDX $0A
.190c57		bf 00 85 19	lda $198500,x	                LDA GAMMA_2_2_Tbl, x
.190c5b		49 55		eor #$55	                EOR  #$55
.190c5d		a6 02		ldx $02		                LDX $02
.190c5f		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190c63		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190c67		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190c6b		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190c6f		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190c73		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190c77		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190c7b		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190c7f		e8		inx		                inx
.190c80		86 02		stx $02		                STX $02
.190c82		a6 0a		ldx $0a		                LDX $0A
.190c84		bf 00 87 19	lda $198700,x	                LDA RANDOM_LUT_Tbl, x
.190c88		a6 02		ldx $02		                LDX $02
.190c8a		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190c8e		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190c92		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190c96		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190c9a		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190c9e		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190ca2		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190ca6		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190caa		e8		inx		                inx
.190cab		86 02		stx $02		                STX $02
.190cad		a6 0a		ldx $0a		                LDX $0A
.190caf		bf 00 86 19	lda $198600,x	                LDA GAMMA_1_8_Tbl, x
.190cb3		49 aa		eor #$aa	                EOR  #$AA
.190cb5		a6 02		ldx $02		                LDX $02
.190cb7		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190cbb		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190cbf		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190cc3		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190cc7		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190ccb		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190ccf		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190cd3		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190cd7		e8		inx		                inx
.190cd8		a9 ff		lda #$ff	                LDA #$FF
.190cda		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190cde		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190ce2		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190ce6		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190cea		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190cee		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190cf2		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190cf6		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190cfa		e6 0a		inc $0a		                inc $0A
.190cfc		e8		inx		                inx
.190cfd		e0 00 04	cpx #$0400	                cpx #$0400
.190d00		f0 03		beq $190d05	                beq iinit_lut_exit
.190d02		82 4e ff	brl $190c53	                brl iinit_lut_loop
.190d05						iinit_lut_exit
.190d05		c2 30		rep #$30	                REP #$30        ; set A&X long
.190d07		fa		plx		                PLX
.190d08		68		pla		                PLA
.190d09		6b		rtl		                RTL
.190d0a						INITVKYTXTMODE_BYPASS_DPSW
.190d0a		48		pha		                PHA
.190d0b		08		php		                PHP
.190d0c		80 24		bra $190d32	                BRA WeNeed640480Here
.190d0e						IINITVKYTXTMODE
.190d0e		48		pha		                PHA
.190d0f		08		php		                PHP
.190d10		e2 20		sep #$20	                SEP #$20        ; set A short
.190d12		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.190d16		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.190d18		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.190d1a		f0 16		beq $190d32	                BEQ WeNeed640480Here
.190d1c		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190d20		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.190d22		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.190d24		f0 33		beq $190d59	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.190d26		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.190d2a		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.190d2c		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190d30		80 27		bra $190d59	                BRA INITVICKYMODEHIRES
.190d32						WeNeed640480Here:
.190d32		e2 20		sep #$20	                SEP #$20        ; set A short
.190d34		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190d38		29 01		and #$01	                AND #$01
.190d3a		c9 01		cmp #$01	                CMP #$01
.190d3c		d0 15		bne $190d53	                BNE INITVICKYMODE
.190d3e		a9 00		lda #$00	                LDA #$00
.190d40		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190d44		ea		nop		                NOP
.190d45		ea		nop		                NOP
.190d46		ea		nop		                NOP
.190d47		ea		nop		                NOP
.190d48		ea		nop		                NOP
.190d49		a9 01		lda #$01	                LDA #$01
.190d4b		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190d4f		ea		nop		                NOP
.190d50		ea		nop		                NOP
.190d51		ea		nop		                NOP
.190d52		ea		nop		                NOP
.190d53						INITVICKYMODE
.190d53		a9 00		lda #$00	                LDA #$00
.190d55		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.190d59						INITVICKYMODEHIRES
.190d59		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.190d5b		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.190d5f		e2 20		sep #$20	                SEP #$20        ; set A short
.190d61		a9 00		lda #$00	                LDA #$00
.190d63		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.190d67		a9 54		lda #$54	                LDA #$54
.190d69		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.190d6d		a9 54		lda #$54	                LDA #$54
.190d6f		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.190d73		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.190d75		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.190d79		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.190d7b		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.190d7f		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.190d83		c2 30		rep #$30	                REP #$30        ; set A&X long
.190d85		22 8c 0d 19	jsl $190d8c	                JSL ISETSIZES                     ; Calculate the size of the text screen
.190d89		28		plp		                PLP
.190d8a		68		pla		                PLA
.190d8b		6b		rtl		                RTL
.190d8c						ISETSIZES
.190d8c		48		pha		                PHA
.190d8d		da		phx		                PHX
.190d8e		5a		phy		                PHY
.190d8f		8b		phb		                PHB
.190d90		0b		phd		                PHD
.190d91		08		php		                PHP
.190d92		48		pha		                PHA             ; begin setdp macro
.190d93		08		php		                PHP
.190d94		c2 20		rep #$20	                REP #$20        ; set A long
.190d96		a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.190d99		5b		tcd		                TCD
.190d9a		28		plp		                PLP
.190d9b		68		pla		                PLA             ; end setdp macro
.190d9c		48		pha		                PHA             ; begin setdbr macro
.190d9d		08		php		                PHP
.190d9e		e2 20		sep #$20	                SEP #$20        ; set A short
.190da0		a9 00		lda #$00	                LDA #0
.190da2		48		pha		                PHA
.190da3		ab		plb		                PLB
.190da4		28		plp		                PLP
.190da5		68		pla		                PLA             ; end setdbr macro
.190da6		e2 30		sep #$30	                SEP #$30        ; set A&X short
.190da8		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190dac		29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.190dae		0a		asl a		                ASL A
.190daf		aa		tax		                TAX                         ; Index to the col/line count in X
.190db0		c2 20		rep #$20	                REP #$20        ; set A long
.190db2		bf 2f 0e 19	lda $190e2f,x	                LDA cols_by_res,X           ; Get the number of columns
.190db6		85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.190db8		85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.190dba		bf 37 0e 19	lda $190e37,x	                LDA lines_by_res,X          ; Get the number of lines
.190dbe		85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.190dc0		85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.190dc2		e2 20		sep #$20	                SEP #$20        ; set A short
.190dc4		af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.190dc8		89 01		bit #$01	                BIT #Border_Ctrl_Enable
.190dca		f0 5c		beq $190e28	                BEQ done                    ; No border... the sizes are correct now
.190dcc		af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.190dd0		29 3f		and #$3f	                AND #$3F
.190dd2		89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.190dd4		d0 04		bne $190dda	                BNE frac_width
.190dd6		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.190dd7		4a		lsr a		                LSR A
.190dd8		80 03		bra $190ddd	                BRA store_width
.190dda		4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.190ddb		4a		lsr a		                LSR A                       ; because a column is partially hidden
.190ddc		1a		inc a		                INC A
.190ddd		85 00		sta $00		store_width     STA TMPPTR1
.190ddf		64 01		stz $01		                STZ TMPPTR1+1
.190de1		e2 20		sep #$20	                SEP #$20        ; set A short
.190de3		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.190de7		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.190de9		f0 04		beq $190def	                BEQ adjust_width            ; No... just adjust the width of the screen
.190deb		c2 20		rep #$20	                REP #$20        ; set A long
.190ded		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.190def						adjust_width
.190def		c2 20		rep #$20	                REP #$20        ; set A long
.190df1		38		sec		                SEC
.190df2		a5 11		lda $11		                LDA COLS_PER_LINE
.190df4		e5 00		sbc $00		                SBC TMPPTR1
.190df6		85 0f		sta $0f		                STA COLS_VISIBLE
.190df8		af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.190dfc		29 3f 00	and #$003f	                AND #$3F
.190dff		89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.190e02		d0 04		bne $190e08	                BNE frac_height
.190e04		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.190e05		4a		lsr a		                LSR A
.190e06		80 03		bra $190e0b	                BRA store_height
.190e08		4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.190e09		4a		lsr a		                LSR A                       ; because a column is partially hidden
.190e0a		1a		inc a		                INC A
.190e0b		85 00		sta $00		store_height    STA TMPPTR1
.190e0d		64 01		stz $01		                STZ TMPPTR1+1
.190e0f		e2 20		sep #$20	                SEP #$20        ; set A short
.190e11		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.190e15		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.190e17		f0 04		beq $190e1d	                BEQ adjust_height           ; No... just adjust the height of the screen
.190e19		c2 20		rep #$20	                REP #$20        ; set A long
.190e1b		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.190e1d						adjust_height
.190e1d		c2 20		rep #$20	                REP #$20        ; set A long
.190e1f		38		sec		                SEC
.190e20		a5 15		lda $15		                LDA LINES_MAX
.190e22		e5 00		sbc $00		                SBC TMPPTR1
.190e24		85 13		sta $13		                STA LINES_VISIBLE
.190e26		c2 30		rep #$30	                REP #$30        ; set A&X long
.190e28		28		plp		done            PLP
.190e29		2b		pld		                PLD
.190e2a		ab		plb		                PLB
.190e2b		7a		ply		                PLY
.190e2c		fa		plx		                PLX
.190e2d		68		pla		                PLA
.190e2e		6b		rtl		                RTL
>190e2f		50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>190e37		3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.190e3f						IINITVKYGRPMODE
.190e3f		48		pha		                PHA
.190e40		e2 20		sep #$20	                SEP #$20        ; set A short
.190e42		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190e44		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.190e48		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190e4a		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.190e4e		a9 c0		lda #$c0	                LDA #$C0
.190e50		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.190e54		a9 00		lda #$00	                LDA #$00
.190e56		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.190e5a		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190e5c		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.190e60		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190e62		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.190e66		a9 c0		lda #$c0	                LDA #$C0
.190e68		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.190e6c		a9 00		lda #$00	                LDA #$00
.190e6e		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.190e72		c2 30		rep #$30	                REP #$30        ; set A&X long
.190e74		68		pla		                PLA
.190e75		6b		rtl		                RTL
.190e76						IINITTILEMODE
.190e76		6b		rtl		                RTL
.190e77		6b		rtl		INOP            RTL
.190e78						IINITFONTSET
.190e78		48		pha		                PHA
.190e79		da		phx		                PHX
.190e7a		5a		phy		                PHY
.190e7b		8b		phb		                PHB
.190e7c		08		php		                PHP
.190e7d		c2 30		rep #$30	                REP #$30        ; set A&X long
.190e7f		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.190e82		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.190e85		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.190e88		54 af 1f	mvn $1f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.190e8b		28		plp		                PLP
.190e8c		ab		plb		                PLB
.190e8d		7a		ply		                PLY
.190e8e		fa		plx		                PLX
.190e8f		68		pla		                PLA
.190e90		6b		rtl		                RTL
.190e91						INITMOUSEPOINTER
.190e91		e2 20		sep #$20	                SEP #$20        ; set A short
.190e93		c2 10		rep #$10	                REP #$10        ; set X long
.190e95		a2 00 00	ldx #$0000	                LDX #$0000
.190e98						FILL_MOUSE_MARKER
.190e98		bf 00 88 19	lda $198800,x	                LDA @lMOUSE_POINTER_PTR,X
.190e9c		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.190ea0		e8		inx		                INX
.190ea1		e0 00 01	cpx #$0100	                CPX #$0100
.190ea4		d0 f2		bne $190e98	                BNE FILL_MOUSE_MARKER
.190ea6		ea		nop		                nop
.190ea7		a9 01		lda #$01	                LDA #$01
.190ea9		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.190ead		c2 30		rep #$30	                REP #$30        ; set A&X long
.190eaf		6b		rtl		                RTL
.190eb0						IINITCURSOR
.190eb0		e2 20		sep #$20	                SEP #$20        ; set A short
.190eb2		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.190eb4		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.190eb8		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.190eba		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.190ebe		c2 30		rep #$30	                REP #$30        ; set A&X long
.190ec0		a9 00 00	lda #$0000	                LDA #$0000;
.190ec3		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.190ec7		a9 06 00	lda #$0006	                LDA #$0006;
.190eca		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.190ece		6b		rtl		                RTL
.190ecf		0b		phd		IINITSUPERIO	  PHD
.190ed0		08		php		                PHP
.190ed1		48		pha		                PHA
.190ed2		e2 20		sep #$20	                SEP #$20        ; set A short
.190ed4		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190ed6		8f 23 11 af	sta $af1123	                STA GP10_REG
.190eda		af 23 11 af	lda $af1123	                LDA GP10_REG
.190ede		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190ee0		8f 24 11 af	sta $af1124	                STA GP11_REG
.190ee4		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190ee6		8f 25 11 af	sta $af1125	                STA GP12_REG
.190eea		a9 01		lda #$01	        	LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190eec		8f 26 11 af	sta $af1126	        	STA GP13_REG
.190ef0		a9 05		lda #$05	        	LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.190ef2		8f 27 11 af	sta $af1127	        	STA GP14_REG
.190ef6		a9 05		lda #$05	        	LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.190ef8		8f 28 11 af	sta $af1128	        	STA GP15_REG
.190efc		a9 05		lda #$05	        	LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.190efe		8f 29 11 af	sta $af1129	        	STA GP16_REG
.190f02		a9 05		lda #$05	        	LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.190f04		8f 2a 11 af	sta $af112a	        	STA GP17_REG
.190f08		a9 00		lda #$00	        	LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.190f0a		8f 2b 11 af	sta $af112b	        	STA GP20_REG
.190f0e		a9 01		lda #$01			LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190f10		8f 2f 11 af	sta $af112f			STA GP24_REG
.190f14		a9 05		lda #$05			LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.190f16		8f 30 11 af	sta $af1130			STA GP25_REG
.190f1a		a9 84		lda #$84			LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.190f1c		8f 31 11 af	sta $af1131			STA GP26_REG
.190f20		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.190f22		8f 33 11 af	sta $af1133			STA GP30_REG
.190f26		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.190f28		8f 34 11 af	sta $af1134			STA GP31_REG
.190f2c		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.190f2e		8f 35 11 af	sta $af1135			STA GP32_REG
.190f32		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.190f34		8f 36 11 af	sta $af1136			STA GP33_REG
.190f38		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.190f3a		8f 37 11 af	sta $af1137			STA GP34_REG
.190f3e		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.190f40		8f 38 11 af	sta $af1138			STA GP35_REG
.190f44		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.190f46		8f 39 11 af	sta $af1139			STA GP36_REG
.190f4a		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.190f4c		8f 3a 11 af	sta $af113a			STA GP37_REG
.190f50		a9 01		lda #$01			LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190f52		8f 3d 11 af	sta $af113d			STA GP42_REG
.190f56		a9 01		lda #$01			LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.190f58		8f 3e 11 af	sta $af113e			STA GP43_REG
.190f5c		a9 05		lda #$05			LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.190f5e		8f 3f 11 af	sta $af113f			STA GP50_REG
.190f62		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.190f64		8f 40 11 af	sta $af1140	                STA GP51_REG
.190f68		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.190f6a		8f 41 11 af	sta $af1141	                STA GP52_REG
.190f6e		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.190f70		8f 42 11 af	sta $af1142	                STA GP53_REG
.190f74		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.190f76		8f 43 11 af	sta $af1143	                STA GP54_REG
.190f7a		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.190f7c		8f 44 11 af	sta $af1144	                STA GP55_REG
.190f80		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.190f82		8f 45 11 af	sta $af1145	                STA GP56_REG
.190f86		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.190f88		8f 46 11 af	sta $af1146	                STA GP57_REG
.190f8c		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.190f8e		8f 47 11 af	sta $af1147	                STA GP60_REG
.190f92		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.190f94		8f 48 11 af	sta $af1148	                STA GP61_REG
.190f98		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.190f9a		8f 4b 11 af	sta $af114b	                STA GP1_REG
.190f9e		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.190fa0		8f 4c 11 af	sta $af114c	                STA GP2_REG
.190fa4		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.190fa6		8f 4d 11 af	sta $af114d	                STA GP3_REG
.190faa		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.190fac		8f 4e 11 af	sta $af114e	                STA GP4_REG
.190fb0		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.190fb2		8f 4f 11 af	sta $af114f	                STA GP5_REG
.190fb6		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.190fb8		8f 50 11 af	sta $af1150	                STA GP6_REG
.190fbc		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.190fbe		8f 5d 11 af	sta $af115d	                STA LED1_REG
.190fc2		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.190fc4		8f 5e 11 af	sta $af115e	                STA LED2_REG
.190fc8		c2 20		rep #$20	                REP #$20        ; set A long
.190fca		68		pla		                PLA
.190fcb		28		plp			        PLP
.190fcc		2b		pld				PLD
.190fcd		6b		rtl		                RTL
.190fce		0b		phd		IINITKEYBOARD	PHD
.190fcf		08		php				PHP
.190fd0		48		pha				PHA
.190fd1		da		phx				PHX
.190fd2		e2 20		sep #$20	                SEP #$20        ; set A short
.190fd4		c2 10		rep #$10	                REP #$10        ; set X long
.190fd6		18		clc		                CLC
.190fd7		20 6d 10	jsr $19106d	                JSR Poll_Inbuf ;
.190fda		a9 aa		lda #$aa			LDA #$AA			;Send self test command
.190fdc		8f 07 18 af	sta $af1807			STA KBD_CMD_BUF
.190fe0		20 78 10	jsr $191078	                JSR Poll_Outbuf ;
.190fe3		af 03 18 af	lda $af1803	                LDA KBD_OUT_BUF		;Check self test result
.190fe7		c9 55		cmp #$55	                CMP #$55
.190fe9		f0 03		beq $190fee	                BEQ	passAAtest
.190feb		82 72 00	brl $191060	                BRL initkb_loop_out
.190fee						passAAtest
.190fee		a9 ab		lda #$ab			LDA #$AB			;Send test Interface command
.190ff0		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF
.190ff4		20 78 10	jsr $191078	                JSR Poll_Outbuf ;
.190ff7		af 03 18 af	lda $af1803			LDA KBD_OUT_BUF		;Display Interface test results
.190ffb		c9 00		cmp #$00			CMP #$00			;Should be 00
.190ffd		f0 03		beq $191002			BEQ	passABtest
.190fff		82 5e 00	brl $191060	                BRL initkb_loop_out
.191002						passABtest
.191002		a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.191004		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF
.191008		20 6d 10	jsr $19106d	                JSR Poll_Inbuf ;
.19100b		a9 43		lda #$43	                LDA #%01000011      ; Enable Interrupt - Translation from CODE 2 to CODE 1 Scan code is enable
.19100d		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF
.191011		20 6d 10	jsr $19106d	                JSR Poll_Inbuf ;
.191014		a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.191016		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF
.19101a		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.19101d		ca		dex		DLY_LOOP1       DEX
.19101e		ea		nop		                NOP
.19101f		ea		nop		                NOP
.191020		ea		nop		                NOP
.191021		ea		nop		                NOP
.191022		ea		nop		                NOP
.191023		ea		nop		                NOP
.191024		ea		nop		                NOP
.191025		ea		nop		                NOP
.191026		e0 00 00	cpx #$0000	                CPX #$0000
.191029		d0 f2		bne $19101d	                BNE DLY_LOOP1
.19102b		20 78 10	jsr $191078	                JSR Poll_Outbuf ;
.19102e		af 03 18 af	lda $af1803	                LDA KBD_OUT_BUF   ; Read Output Buffer
.191032						DO_CMD_F4_AGAIN
.191032		20 6d 10	jsr $19106d	                JSR Poll_Inbuf ;
.191035		a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.191037		8f 03 18 af	sta $af1803					        STA KBD_DATA_BUF
.19103b		20 78 10	jsr $191078	                JSR Poll_Outbuf ;
.19103e		af 03 18 af	lda $af1803					        LDA KBD_OUT_BUF		; Clear the Output buffer
.191042		c9 fa		cmp #$fa	                CMP #$FA
.191044		d0 ec		bne $191032	                BNE DO_CMD_F4_AGAIN
.191046		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.19104a		29 01		and #$01	                AND #FNX1_INT00_KBD
.19104c		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.191050		af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.191054		29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.191056		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.19105a		a2 bb 7f	ldx #$7fbb	                LDX #<>Success_kb_init
.19105d		38		sec		                SEC
.19105e		b0 00		bcs $191060	                BCS InitKbSuccess
.191060						initkb_loop_out
.191060		22 5f 07 19	jsl $19075f	InitKbSuccess   JSL IPRINT       ; print Message
.191064		c2 20		rep #$20	                REP #$20        ; set A long
.191066		c2 10		rep #$10	                REP #$10        ; set X long
.191068		fa		plx		                PLX
.191069		68		pla		                PLA
.19106a		28		plp						        PLP
.19106b		2b		pld						        PLD
.19106c		6b		rtl		                RTL
.19106d						Poll_Inbuf
.19106d		af 07 18 af	lda $af1807	                LDA STATUS_PORT		; Load Status Byte
.191071		29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.191073		c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.191075		f0 f6		beq $19106d					        BEQ Poll_Inbuf
.191077		60		rts		                RTS
.191078						Poll_Outbuf
.191078		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.19107c		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.19107e		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.191080		d0 f6		bne $191078	                BNE Poll_Outbuf
.191082		60		rts		                RTS
.191083		0b		phd		IINITMOUSE      PHD
.191084		08		php						        PHP
.191085		48		pha						        PHA
.191086		da		phx						        PHX
.191087		e2 20		sep #$20	                SEP #$20        ; set A short
.191089		c2 10		rep #$10	                REP #$10        ; set X long
.19108b		18		clc		                CLC
.19108c		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.19108f						DO_CMD_A9_AGAIN
.19108f		20 6d 10	jsr $19106d	                JSR Poll_Inbuf
.191092		a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.191094		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF
.191098		20 12 11	jsr $191112	                JSR Poll_Outbuf_Mouse_TimeOut ;
.19109b		af 03 18 af	lda $af1803					        LDA KBD_OUT_BUF		; Clear the Output buffer
.19109f		c9 00		cmp #$00	                CMP #$00
.1910a1		d0 ec		bne $19108f	                BNE DO_CMD_A9_AGAIN
.1910a3		a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.1910a5		20 ec 10	jsr $1910ec	                JSR MOUSE_WRITE
.1910a8		20 ff 10	jsr $1910ff	                JSR MOUSE_READ ;***
.1910ab		a9 e8		lda #$e8	                LDA #$E8
.1910ad		20 ec 10	jsr $1910ec	                JSR MOUSE_WRITE
.1910b0		20 ff 10	jsr $1910ff	                JSR MOUSE_READ ;***
.1910b3		a9 00		lda #$00	                LDA #$00
.1910b5		20 ec 10	jsr $1910ec	                JSR MOUSE_WRITE
.1910b8		20 ff 10	jsr $1910ff	                JSR MOUSE_READ ;***
.1910bb		a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.1910bd		20 ec 10	jsr $1910ec	                JSR MOUSE_WRITE
.1910c0		20 ff 10	jsr $1910ff	                JSR MOUSE_READ ;***
.1910c3		a9 00		lda #$00	                LDA #$00
.1910c5		85 e0		sta $e0		                STA MOUSE_PTR
.1910c7		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.1910cb		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.1910cd		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.1910d1		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.1910d5		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.1910d7		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.1910db		c2 10		rep #$10	                REP #$10        ; set X long
.1910dd		a2 cd 7f	ldx #$7fcd	                LDX #<>Success_ms_init
.1910e0		80 03		bra $1910e5	                BRA InitMsSuccess
.1910e2		a2 04 80	ldx #$8004	initms_loop_out LDX #<>Failed_ms_init
.1910e5						InitMsSuccess
.1910e5		c2 20		rep #$20	                REP #$20        ; set A long
.1910e7		fa		plx		                PLX
.1910e8		68		pla		                PLA
.1910e9		28		plp				PLP
.1910ea		2b		pld				PLD
.1910eb		6b		rtl		                RTL
.1910ec						MOUSE_WRITE
.1910ec		48		pha		                PHA
.1910ed		20 6d 10	jsr $19106d	                JSR Poll_Inbuf    ; Test bit $01 (if 2, Full)
.1910f0		a9 d4		lda #$d4	                LDA #$D4
.1910f2		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF   ; KBD_CMD_BUF		= $AF1064
.1910f6		20 6d 10	jsr $19106d	                JSR Poll_Inbuf
.1910f9		68		pla		                PLA
.1910fa		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF  ; KBD_DATA_BUF	= $AF1060
.1910fe		60		rts		                RTS
.1910ff						MOUSE_READ
.1910ff		20 07 11	jsr $191107	                JSR Poll_Outbuf_Mouse   ; Test bit $01 (if 1, Full)
.191102		af 03 18 af	lda $af1803	                LDA KBD_INPT_BUF  ; KBD_INPT_BUF	= $AF1060
.191106		60		rts		                RTS
.191107						Poll_Outbuf_Mouse
.191107		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.19110b		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.19110d		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.19110f		d0 f6		bne $191107	                BNE Poll_Outbuf_Mouse
.191111		60		rts		                RTS
.191112						Poll_Outbuf_Mouse_TimeOut
.191112		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.191116		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.191118		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.19111a		f0 08		beq $191124	                BEQ Poll_OutbufWeAreDone
.19111c		ca		dex		                DEX
.19111d		e0 00 00	cpx #$0000	                CPX #$0000
.191120		d0 f0		bne $191112	                BNE Poll_Outbuf_Mouse_TimeOut
.191122		80 be		bra $1910e2	                BRA initms_loop_out
.191124						Poll_OutbufWeAreDone:
.191124		60		rts		                RTS
.191125		48		pha		INITRTC         PHA
.191126		08		php		                PHP
.191127		e2 20		sep #$20	                SEP #$20        ; set A short
.191129		a9 00		lda #$00	                LDA #0
.19112b		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.19112f		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.191133		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.191137		09 04		ora #$04	                ORA #%00000100
.191139		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.19113d		28		plp		                PLP
.19113e		68		pla		                PLA
.19113f		6b		rtl		                RTL
.191140		48		pha		IINITCODEC      PHA
.191141		08		php		                PHP
.191142		c2 20		rep #$20	                REP #$20        ; set A long
.191144		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.191147		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.19114b		a9 01 00	lda #$0001	                LDA #$0001
.19114e		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.191152		20 e3 11	jsr $1911e3	                JSR CODEC_TRF_FINISHED
.191155		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.191158		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.19115c		a9 01 00	lda #$0001	                LDA #$0001
.19115f		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.191163		20 e3 11	jsr $1911e3	                JSR CODEC_TRF_FINISHED
.191166		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.191169		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.19116d		a9 01 00	lda #$0001	                LDA #$0001
.191170		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.191174		20 e3 11	jsr $1911e3	                JSR CODEC_TRF_FINISHED
.191177		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.19117a		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.19117e		a9 01 00	lda #$0001	                LDA #$0001
.191181		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.191185		20 e3 11	jsr $1911e3	                JSR CODEC_TRF_FINISHED
.191188		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.19118b		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.19118f		a9 01 00	lda #$0001	                LDA #$0001
.191192		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.191196		20 e3 11	jsr $1911e3	                JSR CODEC_TRF_FINISHED
.191199		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.19119c		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.1911a0		a9 01 00	lda #$0001	                LDA #$0001
.1911a3		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.1911a7		20 e3 11	jsr $1911e3	                JSR CODEC_TRF_FINISHED
.1911aa		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.1911ad		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.1911b1		a9 01 00	lda #$0001	                LDA #$0001
.1911b4		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.1911b8		20 e3 11	jsr $1911e3	                JSR CODEC_TRF_FINISHED
.1911bb		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.1911be		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.1911c2		a9 01 00	lda #$0001	                LDA #$0001
.1911c5		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.1911c9		20 e3 11	jsr $1911e3	                JSR CODEC_TRF_FINISHED
.1911cc		28		plp		                PLP
.1911cd		68		pla		                PLA
.1911ce		6b		rtl		                RTL
.1911cf						IRESETCODEC
.1911cf		c2 20		rep #$20	                REP #$20        ; set A long
.1911d1		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.1911d4		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.1911d8		a9 01 00	lda #$0001	                LDA #$0001
.1911db		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.1911df		20 e3 11	jsr $1911e3	                JSR CODEC_TRF_FINISHED
.1911e2		6b		rtl		                RTL
.1911e3						CODEC_TRF_FINISHED
.1911e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1911e5		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.1911e9		29 01		and #$01	                AND #$01
.1911eb		c9 01		cmp #$01	                CMP #$01
.1911ed		f0 f6		beq $1911e5	                BEQ CODEC_LOOP
.1911ef		c2 20		rep #$20	                REP #$20        ; set A long
.1911f1		60		rts		                RTS
.1911f2						IBM_FILL_SCREEN
.1911f2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1911f4		a9 00 00	lda #$0000	                LDA #$0000
.1911f7		a2 00 00	ldx #$0000	                LDX #$0000
.1911fa						BM_FILL_SCREEN_LOOPY
.1911fa		a0 00 00	ldy #$0000	                LDY #$0000
.1911fd		e2 20		sep #$20	                SEP #$20        ; set A short
.1911ff						BM_FILL_SCREEN_LOOPX
.1911ff		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.191201		c8		iny		                INY
.191202		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.191204		d0 f9		bne $1911ff	                BNE BM_FILL_SCREEN_LOOPX
.191206		20 11 12	jsr $191211	                JSR BM_FILL_COMPUTE_Y_DST
.191209		e8		inx		                INX
.19120a		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.19120c		d0 ec		bne $1911fa	                BNE BM_FILL_SCREEN_LOOPY
.19120e		c2 30		rep #$30	                REP #$30        ; set A&X long
.191210		6b		rtl		                RTL
.191211						BM_FILL_COMPUTE_Y_DST
.191211		c2 20		rep #$20	                REP #$20        ; set A long
.191213		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.191215		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.191219		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.19121b		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.19121f		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.191222		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.191226		a9 00 00	lda #$0000	                LDA #$0000
.191229		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.19122d		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.191231		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.191233		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.191237		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.191239		a9 00 00	lda #$0000	                LDA #$0000
.19123c		60		rts		                RTS
.19123d						IBMP_PARSER
.19123d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19123f		a0 00 00	ldy #$0000	                LDY #$0000
.191242		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.191244		c9 42 4d	cmp #$4d42	                CMP #$4D42
.191247		f0 03		beq $19124c	                BEQ IBMP_PARSER_CONT
.191249		82 04 01	brl $191350	                BRL BMP_PARSER_END_WITH_ERROR
.19124c						IBMP_PARSER_CONT
.19124c		a0 02 00	ldy #$0002	                LDY #$0002
.19124f		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.191251		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.191255		a0 04 00	ldy #$0004	                LDY #$0004
.191258		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.19125a		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.19125e		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.191261		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.191265		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.191269		18		clc		                CLC
.19126a		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.19126e		85 50		sta $50		                STA BMP_FILE_SIZE
.191270		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.191274		85 52		sta $52		                STA BMP_FILE_SIZE+2
.191276		a0 12 00	ldy #$0012	                LDY #$0012
.191279		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.19127b		85 40		sta $40		                STA BMP_X_SIZE
.19127d		a0 16 00	ldy #$0016	                LDY #$0016
.191280		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.191282		85 42		sta $42		                STA BMP_Y_SIZE
.191284		a0 2e 00	ldy #$002e	                LDY #$002E
.191287		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.191289		0a		asl a		                ASL A; Multiply by 2
.19128a		0a		asl a		                ASL A; Multiply by 2
.19128b		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.19128d		e0 00 00	cpx #$0000	                CPX #$0000
.191290		d0 05		bne $191297	                BNE BMP_LUT1_PICK
.191292		20 58 13	jsr $191358	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.191295		80 08		bra $19129f	                BRA DONE_TRANSFER_LUT;
.191297						  BMP_LUT1_PICK
.191297		e0 01 00	cpx #$0001	                CPX #$0001
.19129a		d0 03		bne $19129f	                BNE BMP_LUT2_PICK
.19129c		20 88 13	jsr $191388	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.19129f						  BMP_LUT2_PICK
.19129f						  DONE_TRANSFER_LUT
.19129f		a5 56		lda $56		                LDA BMP_POSITION_Y
.1912a1		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.1912a5		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.1912a7		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.1912ab		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.1912af		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.1912b3		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.1912b7		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.1912bb		a5 54		lda $54		                LDA BMP_POSITION_X
.1912bd		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.1912c1		a9 00 00	lda #$0000	                LDA #$0000
.1912c4		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.1912c8		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.1912cc		85 f0		sta $f0		                STA USER_TEMP
.1912ce		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.1912d2		85 f2		sta $f2		                STA USER_TEMP+2
.1912d4		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.1912d6		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.1912da		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.1912dc		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.1912e0		a5 f0		lda $f0		                LDA USER_TEMP
.1912e2		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.1912e6		a5 f2		lda $f2		                LDA USER_TEMP+2
.1912e8		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.1912ec		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.1912f0		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.1912f2		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.1912f6		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.1912f8		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.1912fa		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.1912fe		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.191300		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.191304		a5 50		lda $50		                LDA BMP_FILE_SIZE
.191306		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.19130a		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.19130c		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.191310		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.191314		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.191316		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.19131a		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.19131c		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.19131e		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.191322		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.191324		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.191328		18		clc		                CLC
.191329		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.19132b		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.19132e		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.191331		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.191335		a9 ff ff	lda #$ffff	                LDA #$FFFF
.191338		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.19133c		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.191340		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.191342		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.191346		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.191348		20 b8 13	jsr $1913b8	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.19134b		a2 51 80	ldx #$8051	                LDX #<>bmp_parser_msg0
.19134e		80 03		bra $191353	                BRA BMP_PARSER_END_NO_ERROR
.191350						BMP_PARSER_END_WITH_ERROR
.191350		a2 3d 80	ldx #$803d	                LDX #<>bmp_parser_err0
.191353						BMP_PARSER_END_NO_ERROR
.191353		22 5f 07 19	jsl $19075f	                JSL IPRINT       ; print the first line
.191357		6b		rtl		                RTL
.191358						BMP_PARSER_UPDATE_LUT0
.191358		38		sec		                SEC
.191359		a0 7a 00	ldy #$007a	                LDY #$007A
.19135c		a2 00 00	ldx #$0000	                LDX #$0000
.19135f		e2 20		sep #$20	                SEP #$20        ; set A short
.191361						BMP_PARSER_UPDATE_LOOP
.191361		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.191363		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.191367		c8		iny		                INY
.191368		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.19136a		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.19136e		c8		iny		                INY
.19136f		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.191371		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.191375		c8		iny		                INY
.191376		a9 80		lda #$80	                LDA #$80
.191378		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.19137c		c8		iny		                INY ; For the Alpha Value, nobody cares
.19137d		e8		inx		                INX
.19137e		e8		inx		                INX
.19137f		e8		inx		                INX
.191380		e8		inx		                INX
.191381		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.191383		d0 dc		bne $191361	                BNE BMP_PARSER_UPDATE_LOOP
.191385		c2 20		rep #$20	                REP #$20        ; set A long
.191387		60		rts		                RTS
.191388						BMP_PARSER_UPDATE_LUT1
.191388		38		sec		                SEC
.191389		a0 36 00	ldy #$0036	                LDY #$0036
.19138c		a2 00 00	ldx #$0000	                LDX #$0000
.19138f		e2 20		sep #$20	                SEP #$20        ; set A short
.191391						PALETTE_LUT1_LOOP
.191391		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.191393		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.191397		c8		iny		                INY
.191398		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.19139a		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.19139e		c8		iny		                INY
.19139f		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.1913a1		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.1913a5		c8		iny		                INY
.1913a6		a9 80		lda #$80	                LDA #$80
.1913a8		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.1913ac		c8		iny		                INY ; For the Alpha Value, nobody cares
.1913ad		e8		inx		                INX
.1913ae		e8		inx		                INX
.1913af		e8		inx		                INX
.1913b0		e8		inx		                INX
.1913b1		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.1913b3		d0 dc		bne $191391	                BNE PALETTE_LUT1_LOOP
.1913b5		c2 20		rep #$20	                REP #$20        ; set A long
.1913b7		60		rts		                RTS
.1913b8						BMP_PARSER_DMA_SHIT_OUT
.1913b8		a2 00 00	ldx #$0000	                LDX #$0000
.1913bb						BMP_PARSER_LOOPY
.1913bb		a0 00 00	ldy #$0000	                LDY #$0000
.1913be		e2 20		sep #$20	                SEP #$20        ; set A short
.1913c0						BMP_PARSER_LOOPX
.1913c0		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.1913c2		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.1913c4		c8		iny		                INY
.1913c5		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.1913c7		d0 f7		bne $1913c0	                BNE BMP_PARSER_LOOPX
.1913c9		20 d5 13	jsr $1913d5	                JSR BMP_PARSER_COMPUTE_Y_SRC
.1913cc		20 f0 13	jsr $1913f0	                JSR BMP_PARSER_COMPUTE_Y_DST
.1913cf		e8		inx		                INX
.1913d0		e4 42		cpx $42		                CPX BMP_Y_SIZE
.1913d2		d0 e7		bne $1913bb	                BNE BMP_PARSER_LOOPY
.1913d4		60		rts		                RTS
.1913d5						BMP_PARSER_COMPUTE_Y_SRC
.1913d5		c2 20		rep #$20	                REP #$20        ; set A long
.1913d7		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.1913d9		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.1913dd		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.1913df		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.1913e3		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.1913e7		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.1913e9		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.1913ed		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.1913ef		60		rts		                RTS
.1913f0						BMP_PARSER_COMPUTE_Y_DST
.1913f0		c2 20		rep #$20	                REP #$20        ; set A long
.1913f2		18		clc		                CLC
.1913f3		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.1913f5		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.1913f7		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.1913f9		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.1913fb		69 00 00	adc #$0000	                ADC #$0000
.1913fe		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.191400		60		rts		                RTS
.191401		ea		nop		ILOOP           NOP
.191402		ea		nop		                NOP
.191403		ea		nop		                NOP
.191404		ea		nop		                NOP
.191405		ea		nop		                NOP
.191406		ea		nop		                NOP
.191407		ea		nop		                NOP
.191408		ea		nop		                NOP
.191409		ea		nop		                NOP
.19140a		ea		nop		                NOP
.19140b		6b		rtl		                RTL
.19140c		22 01 14 19	jsl $191401	ILOOP_1         JSL ILOOP
.191410		22 01 14 19	jsl $191401	                JSL ILOOP
.191414		22 01 14 19	jsl $191401	                JSL ILOOP
.191418		22 01 14 19	jsl $191401	                JSL ILOOP
.19141c		22 01 14 19	jsl $191401	                JSL ILOOP
.191420		22 01 14 19	jsl $191401	                JSL ILOOP
.191424		22 01 14 19	jsl $191401	                JSL ILOOP
.191428		22 01 14 19	jsl $191401	                JSL ILOOP
.19142c		22 01 14 19	jsl $191401	                JSL ILOOP
.191430		22 01 14 19	jsl $191401	                JSL ILOOP
.191434		6b		rtl		                RTL
.191435		22 0c 14 19	jsl $19140c	ILOOP_1MS       JSL ILOOP_1
.191439		6b		rtl		                RTL
.19143a		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.19143d		f0 07		beq $191446	                BEQ LOOP_MS_END
.19143f		22 35 14 19	jsl $191435	                JSL ILOOP_1MS
.191443		ca		dex		                DEX
.191444		80 f4		bra $19143a	                BRA ILOOP_MS
.191446		6b		rtl		LOOP_MS_END     RTL
.191447						IDELAY
.191447		8b		phb		                PHB
.191448		08		php		                PHP
.191449		48		pha		                PHA             ; begin setdbr macro
.19144a		08		php		                PHP
.19144b		e2 20		sep #$20	                SEP #$20        ; set A short
.19144d		a9 00		lda #$00	                LDA #0
.19144f		48		pha		                PHA
.191450		ab		plb		                PLB
.191451		28		plp		                PLP
.191452		68		pla		                PLA             ; end setdbr macro
.191453		e2 20		sep #$20	                SEP #$20        ; set A short
.191455		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.191457		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.19145b		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.19145f		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.191461		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.191465		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.191467		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.19146a		a9 00		lda #$00	                LDA #0
.19146c		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.191470		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.191474		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.191478		c2 30		rep #$30	                REP #$30        ; set A&X long
.19147a		8a		txa		                TXA
.19147b		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.19147f		98		tya		                TYA
.191480		e2 20		sep #$20	                SEP #$20        ; set A short
.191482		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.191486		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.191488		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.19148c		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.19148e		cb		wai		loop            WAI                         ; Wait for an interrupt
.19148f		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.191492		f0 fa		beq $19148e	                BEQ loop                    ; Keep checking until it's set
.191494		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.191496		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.19149a		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.19149c		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.19149f		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.1914a3		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.1914a5		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.1914a9		28		plp		                PLP
.1914aa		ab		plb		                PLB
.1914ab		6b		rtl		                RTL
.1914ac						SHOW_CREDITS
.1914ac		48		pha		                PHA
.1914ad		da		phx		                PHX
.1914ae		5a		phy		                PHY
.1914af		08		php		                PHP
.1914b0		e2 20		sep #$20	                SEP #$20        ; set A short
.1914b2		c2 10		rep #$10	                REP #$10        ; set X long
.1914b4		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.1914b8		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.1914ba		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.1914be		a2 00 00	ldx #$0000	                LDX #0
.1914c1		bf 00 00 1b	lda $1b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.1914c5		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.1914c9		bf 00 18 1b	lda $1b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.1914cd		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.1914d1		e8		inx		                INX
.1914d2		e0 00 20	cpx #$2000	                CPX #128 * 64
.1914d5		d0 ea		bne $1914c1	                BNE credit_loop
.1914d7		22 f9 06 19	jsl $1906f9	                JSL IGETCHW                     ; Wait for a keypress
.1914db		22 2e 0b 19	jsl $190b2e	                JSL ICLRSCREEN                  ; Then clear the screen and return
.1914df		22 52 09 19	jsl $190952	                JSL ICSRHOME                    ; Move cursor to the home position
.1914e3		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.1914e7		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.1914e9		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.1914ed		28		plp		                PLP
.1914ee		7a		ply		                PLY
.1914ef		fa		plx		                PLX
.1914f0		68		pla		                PLA
.1914f1		6b		rtl		                RTL
.1914f2		00		brk #		ISCINIT         BRK ;
.1914f3		00		brk #		IIOINIT         BRK ;
.1914f4		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.1914f5		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.1914f6		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.1914f7		00		brk #		ICLOSE          BRK ; Close a channel
.1914f8		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.1914f9		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.1914fa		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.1914fb		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.1914fc		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.1914fd		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.1914fe		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.1914ff		00		brk #		IPRINTF         BRK ; Print a float value
.191500		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.191501		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.191502		00		brk #		IPUSHKEY        BRK ;
.191503		00		brk #		IPUSHKEYS       BRK ;
.191504		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.191505		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.191506		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>191507		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>19150f		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>19151f		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>191527		12
>191528		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>191530		15
>191531		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>191537		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>19153c		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Instruments.asm

>191542		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>19154a		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>191558		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>191560		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>19156e		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>191576		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>191584		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>19158c		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>19159a		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>1915a2		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>1915b0		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>1915b8		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>1915c6		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>1915ce		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>1915dc		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>1915e4		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>1915f2		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>1915fa		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>191608		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>191610		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>19161e		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>191626		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>191634		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>19163c		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>19164a		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>191652		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>191660		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>191668		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>191676		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>19167e		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>19168c		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>191694		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>1916a2		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>1916aa		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>1916b8		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>1916c0		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>1916ce		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>1916d6		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>1916e4		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>1916ec		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>1916fa		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>191702		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>191710		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>191718		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>191726		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>19172e		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>19173c		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>191744		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>191752		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>19175a		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>191768		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>191770		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>19177e		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>191786		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>191794		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>19179c		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>1917aa		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>1917b2		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>1917c0		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>1917c8		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>1917d6		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>1917de		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>1917ec		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>1917f4		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>191802		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>19180a		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>191818		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>191820		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>19182e		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>191836		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>191844		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>19184c		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>19185a		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>191862		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>191870		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>191878		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>191886		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>19188e		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>19189c		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>1918a4		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>1918b2		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>1918ba		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>1918c8		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>1918d0		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>1918de		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>1918e6		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>1918f4		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>1918fc		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>19190a		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>191912		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>191920		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>191928		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>191936		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>19193e		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>19194c		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>191954		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>191962		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>19196a		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>191978		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>191980		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>19198e		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>191996		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>1919a4		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>1919ac		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>1919ba		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>1919c2		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>1919d0		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>1919d8		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>1919e6		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>1919ee		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>1919fc		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>191a04		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>191a12		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>191a1a		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>191a28		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>191a30		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>191a3e		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>191a46		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>191a54		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>191a5c		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>191a6a		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>191a72		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>191a80		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>191a88		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>191a96		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>191a9e		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>191aac		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>191ab4		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>191ac2		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>191aca		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>191ad8		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>191ae0		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>191aee		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>191af6		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>191b04		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>191b0c		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>191b1a		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>191b22		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>191b30		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>191b38		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>191b46		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>191b4e		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>191b5c		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>191b64		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>191b72		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>191b7a		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>191b88		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>191b90		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>191b9e		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>191ba6		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>191bb4		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>191bbc		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>191bca		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>191bd2		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>191be0		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>191be8		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>191bf6		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>191bfe		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>191c0c		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>191c14		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>191c22		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>191c2a		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>191c38		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>191c40		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>191c4e		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>191c56		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>191c64		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>191c6c		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>191c7a		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>191c82		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>191c90		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>191c98		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>191ca6		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>191cae		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>191cbc		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>191cc4		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>191cd2		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>191cda		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>191ce8		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>191cf0		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>191cfe		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>191d06		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>191d14		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>191d1c		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>191d2a		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>191d32		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>191d40		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>191d48		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>191d56		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>191d5e		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>191d6c		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>191d74		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>191d82		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>191d8a		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>191d98		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>191da0		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>191dae		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>191db6		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>191dc4		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>191dcc		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>191dda		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>191de2		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>191df0		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>191df8		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>191e06		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>191e0e		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>191e1c		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>191e24		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>191e32		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>191e3a		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>191e48		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>191e50		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>191e5e		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>191e66		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>191e74		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>191e7c		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>191e8a		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>191e92		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>191ea0		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>191ea8		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>191eb6		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>191ebe		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>191ecc		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>191ed4		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>191ee2		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>191eea		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>191ef8		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>191f00		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>191f0e		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>191f16		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>191f24		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>191f2c		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>191f3a		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>191f42		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>191f50		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>191f58		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>191f66		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>191f6e		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>191f7c		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>191f84		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>191f92		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>191f9a		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>191fa8		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>191fb0		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>191fbe		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>191fc6		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>191fd4		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>191fdc		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>191fea		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>191ff2		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>192000		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>192008		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>192016		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>19201e		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>19202c		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>192034		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>192042		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>19204a		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>192058		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>192060		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>19206e		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>192076		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>192084		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>19208c		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>19209a		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>1920a2		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>1920b0		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>1920b8		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>1920c6		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>1920ce		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>1920dc		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>1920e4		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>1920f2		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>1920fa		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>192108		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>192110		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>19211e		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>192126		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>192134		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>19213c		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>19214a		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>192152		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>192160		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>192168		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>192176		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>19217e		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>19218c		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>192194		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>1921a2		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>1921aa		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Drums.asm

>1921b8		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>1921c0		00 87 fa 00
>1921c4		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>1921cc		00 88 98 03
>1921d0		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>1921d8		00 88 98 03
>1921dc		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>1921e4		00 f9 69 00
>1921e8		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>1921f0		80 e8 4a 00
>1921f4		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>1921fc		00 f6 9a 00
>192200		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>192208		1b f2 34 00
>19220c		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>192214		00 f7 8a 00
>192218		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>192220		00 f6 47 00
>192224		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>19222c		00 f9 69 00
>192230		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>192238		00 f7 a9 00
>19223c		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>192244		00 87 fa 00
>192248		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>192250		00 f7 a9 00
>192254		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>19225c		00 f5 f5 00
>192260		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>192268		06 b8 d8 03
>19226c		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>192274		00 f5 f5 00
>192278		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>192280		06 b8 d8 03
>192284		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>19228c		00 f5 f5 00
>192290		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>192298		10 74 f8 03
>19229c		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>1922a4		00 f5 f5 00
>1922a8		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>1922b0		00 f5 f5 00
>1922b4		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>1922bc		05 c5 d4 03
>1922c0		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>1922c8		00 f5 f5 00
>1922cc		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>1922d4		04 f9 44 03
>1922d8		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>1922e0		05 c5 d4 03
>1922e4		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>1922ec		04 f9 44 03
>1922f0		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>1922f8		03 87 f7 03
>1922fc		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>192304		05 c5 d4 03
>192308		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>192310		00 f6 28 00
>192314		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>19231c		05 c5 d4 03
>192320		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>192328		00 f5 f7 01
>19232c		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>192334		04 f9 44 03
>192338		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>192340		00 99 f9 00
>192344		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>19234c		00 a8 f7 00
>192350		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>192358		00 99 f9 00
>19235c		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>192364		00 a6 f6 00
>192368		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>192370		00 a6 f6 00
>192374		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>19237c		00 f6 36 02
>192380		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>192388		00 f6 36 02
>19238c		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>192394		00 96 e8 01
>192398		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>1923a0		00 96 e8 01
>1923a4		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>1923ac		02 79 77 03
>1923b0		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>1923b8		02 79 77 03
>1923bc		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>1923c4		00 a5 2b 02
>1923c8		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>1923d0		00 93 3b 02
>1923d4		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>1923dc		01 89 3b 03
>1923e0		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>1923e8		0a 53 2b 02
>1923ec		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>1923f4		00 f6 89 00
>1923f8		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>192400		00 f6 9a 00
>192404		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>19240c		00 f6 9a 00
>192410		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>192418		00 87 4b 01
>19241c		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>192424		00 78 67 01
>192428		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>192430		02 f8 fc 00
>192434		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>19243c		40 f5 f5 00
>192440		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>192448		02 79 77 03
>19244c		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>192454		40 f5 f5 00
>192458		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>192460		40 f5 f5 00
>192464		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>19246c		00 f9 69 00
>192470		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>192478		00 f9 69 00
>19247c		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>192484		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>192488		b8 21 19 00 c4 21 19 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>192490		d0 21 19 00 dc 21 19 00
>192498		e8 21 19 00 f4 21 19 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>1924a0		00 22 19 00 0c 22 19 00
>1924a8		18 22 19 00 24 22 19 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>1924b0		30 22 19 00 3c 22 19 00
>1924b8		48 22 19 00 54 22 19 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>1924c0		60 22 19 00 6c 22 19 00
>1924c8		78 22 19 00 84 22 19 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>1924d0		90 22 19 00 9c 22 19 00
>1924d8		a8 22 19 00 b4 22 19 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>1924e0		c0 22 19 00 cc 22 19 00
>1924e8		d8 22 19 00 e4 22 19 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>1924f0		f0 22 19 00 fc 22 19 00
>1924f8		08 23 19 00 14 23 19 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>192500		20 23 19 00 2c 23 19 00
>192508		38 23 19 00 44 23 19 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>192510		50 23 19 00 5c 23 19 00
>192518		68 23 19 00 74 23 19 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>192520		80 23 19 00 8c 23 19 00
>192528		98 23 19 00 a4 23 19 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>192530		b0 23 19 00 bc 23 19 00
>192538		c8 23 19 00 d4 23 19 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>192540		e0 23 19 00 ec 23 19 00
>192548		f8 23 19 00 04 24 19 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>192550		10 24 19 00 1c 24 19 00
>192558		28 24 19 00 34 24 19 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>192560		40 24 19 00 4c 24 19 00
>192568		58 24 19 00 64 24 19 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>192570		70 24 19 00 7c 24 19 00

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments.asm

>192578		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>192580		00 b1 f5 01
>192584		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>19258c		03 f1 f5 00
>192590		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>192598		03 c1 f5 00
>19259c		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>1925a4		00 92 f5 01
>1925a8		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>1925b0		00 f1 f9 00
>1925b4		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>1925bc		00 f1 f5 00
>1925c0		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>1925c8		02 81 f6 01
>1925cc		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>1925d4		00 c2 b9 01
>1925d8		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>1925e0		05 b2 35 00
>1925e4		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>1925ec		1b f2 34 00
>1925f0		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>1925f8		01 f5 74 00
>1925fc		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>192604		00 61 e3 00
>192608		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>192610		00 a4 64 00
>192614		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>19261c		07 b5 f5 00
>192620		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>192628		00 f3 74 00
>19262c		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>192634		00 c3 94 01
>192638		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>192640		00 f4 0d 01
>192644		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>19264c		00 f5 0b 01
>192650		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>192658		00 bf 07 00
>19265c		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>192664		00 6d 08 01
>192668		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>192670		00 51 17 01
>192674		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>19267c		00 51 17 01
>192680		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>192688		00 53 08 01
>19268c		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>192694		00 53 06 01
>192698		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>1926a0		00 d2 f8 00
>1926a4		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>1926ac		00 e2 c7 01
>1926b0		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>1926b8		00 f1 9c 00
>1926bc		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>1926c4		02 f2 c9 01
>1926c8		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>1926d0		03 95 fb 00
>1926d4		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>1926dc		04 a1 59 00
>1926e0		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>1926e8		03 91 fc 03
>1926ec		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>1926f4		02 b4 ec 00
>1926f8		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>192700		00 93 f7 00
>192704		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>19270c		04 c1 58 00
>192710		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>192718		02 c3 6a 00
>19271c		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>192724		00 62 87 00
>192728		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>192730		00 f3 97 00
>192734		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>19273c		00 b3 97 00
>192740		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>192748		04 f3 cc 00
>19274c		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>192754		00 93 aa 00
>192758		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>192760		00 78 08 01
>192764		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>19276c		00 78 08 01
>192770		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>192778		00 54 27 01
>19277c		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>192784		00 61 56 00
>192788		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>192790		00 75 16 01
>192794		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>19279c		00 f5 f6 01
>1927a0		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>1927a8		80 f3 e3 00
>1927ac		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>1927b4		00 b5 f5 00
>1927b8		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>1927c0		80 71 16 00
>1927c4		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>1927cc		00 30 55 01
>1927d0		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>1927d8		00 62 36 01
>1927dc		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>1927e4		02 51 07 00
>1927e8		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>1927f0		00 62 39 00
>1927f4		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>1927fc		00 66 27 00
>192800		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>192808		00 73 46 00
>19280c		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>192814		00 74 76 01
>192818		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>192820		81 92 38 00
>192824		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>19282c		02 71 19 00
>192830		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>192838		01 81 09 00
>19283c		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>192844		00 83 4b 02
>192848		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>192850		05 71 59 00
>192854		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>19285c		03 82 39 00
>192860		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>192868		82 84 17 00
>19286c		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>192874		02 72 16 00
>192878		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>192880		00 7b 0a 00
>192884		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>19288c		00 85 0c 01
>192890		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>192898		00 7b 0a 01
>19289c		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>1928a4		00 79 18 01
>1928a8		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>1928b0		01 73 08 00
>1928b4		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>1928bc		04 77 0a 00
>1928c0		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>1928c8		00 51 19 00
>1928cc		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>1928d4		01 74 09 00
>1928d8		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>1928e0		01 63 28 00
>1928e4		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>1928ec		00 65 0a 00
>1928f0		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>1928f8		00 67 29 00
>1928fc		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>192904		00 67 09 00
>192908		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>192910		01 6a 28 00
>192914		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>19291c		00 55 27 00
>192920		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>192928		00 6f 08 00
>19292c		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>192934		00 7a 07 00
>192938		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>192940		06 a2 0d 00
>192944		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>19294c		00 a3 5f 00
>192950		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>192958		00 42 27 00
>19295c		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>192964		05 b2 49 00
>192968		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>192970		00 b2 79 01
>192974		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>19297c		00 7a 1a 00
>192980		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>192988		00 82 28 01
>19298c		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>192994		02 c3 5f 00
>192998		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>1929a0		86 c4 95 01
>1929a4		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>1929ac		00 44 15 00
>1929b0		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>1929b8		00 d1 06 00
>1929bc		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>1929c4		00 82 37 00
>1929c8		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>1929d0		00 41 35 00
>1929d4		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>1929dc		02 32 f5 01
>1929e0		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>1929e8		00 61 26 00
>1929ec		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>1929f4		84 3f 05 01
>1929f8		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>192a00		01 d1 f6 00
>192a04		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>192a0c		00 41 05 01
>192a10		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>192a18		05 f3 e4 00
>192a1c		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>192a24		00 92 f5 01
>192a28		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>192a30		04 f2 e4 01
>192a34		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>192a3c		00 45 25 00
>192a40		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>192a48		01 a3 36 00
>192a4c		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>192a54		01 98 05 01
>192a58		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>192a60		02 a3 f6 01
>192a64		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>192a6c		00 f6 f8 00
>192a70		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>192a78		00 f3 f5 00
>192a7c		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>192a84		00 94 e5 01
>192a88		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>192a90		00 84 44 00
>192a94		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>192a9c		03 83 18 01
>192aa0		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>192aa8		01 78 08 01
>192aac		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>192ab4		03 8e 08 01
>192ab8		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>192ac0		09 f2 46 00
>192ac4		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>192acc		00 96 e8 01
>192ad0		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>192ad8		00 f6 f6 01
>192adc		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>192ae4		00 f6 9a 00
>192ae8		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>192af0		00 c6 45 00
>192af4		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>192afc		00 f4 b4 00
>192b00		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>192b08		00 d5 25 00
>192b0c		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>192b14		0e 21 2d 00
>192b18		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>192b20		00 55 87 02
>192b24		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>192b2c		08 98 87 01
>192b30		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>192b38		04 17 04 03
>192b3c		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>192b44		05 77 f9 02
>192b48		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>192b50		02 f4 08 00
>192b54		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>192b5c		00 36 05 01
>192b60		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>192b68		05 32 55 03
>192b6c		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>192b74		00 f3 df 00
>192b78		78 25 19 00 84 25 19 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>192b80		90 25 19 00 9c 25 19 00 a8 25 19 00 b4 25 19 00
>192b90		c0 25 19 00 cc 25 19 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>192b98		d8 25 19 00 e4 25 19 00 f0 25 19 00 fc 25 19 00
>192ba8		08 26 19 00 14 26 19 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>192bb0		20 26 19 00 2c 26 19 00 38 26 19 00 44 26 19 00
>192bc0		50 26 19 00 5c 26 19 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>192bc8		68 26 19 00 74 26 19 00 80 26 19 00 8c 26 19 00
>192bd8		98 26 19 00 a4 26 19 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>192be0		b0 26 19 00 bc 26 19 00 c8 26 19 00 d4 26 19 00
>192bf0		e0 26 19 00 ec 26 19 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>192bf8		f8 26 19 00 04 27 19 00 10 27 19 00 1c 27 19 00
>192c08		28 27 19 00 34 27 19 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>192c10		40 27 19 00 4c 27 19 00 58 27 19 00 64 27 19 00
>192c20		70 27 19 00 7c 27 19 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>192c28		88 27 19 00 94 27 19 00 a0 27 19 00 ac 27 19 00
>192c38		b8 27 19 00 c4 27 19 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>192c40		d0 27 19 00 dc 27 19 00 e8 27 19 00 f4 27 19 00
>192c50		00 28 19 00 0c 28 19 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>192c58		18 28 19 00 24 28 19 00 30 28 19 00 3c 28 19 00
>192c68		48 28 19 00 54 28 19 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>192c70		60 28 19 00 6c 28 19 00 78 28 19 00 84 28 19 00
>192c80		90 28 19 00 9c 28 19 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>192c88		a8 28 19 00 b4 28 19 00 c0 28 19 00 cc 28 19 00
>192c98		d8 28 19 00 e4 28 19 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>192ca0		f0 28 19 00 fc 28 19 00 08 29 19 00 14 29 19 00
>192cb0		20 29 19 00 2c 29 19 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>192cb8		38 29 19 00 44 29 19 00 50 29 19 00 5c 29 19 00
>192cc8		68 29 19 00 74 29 19 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>192cd0		80 29 19 00 8c 29 19 00 98 29 19 00 a4 29 19 00
>192ce0		b0 29 19 00 bc 29 19 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>192ce8		c8 29 19 00 d4 29 19 00 e0 29 19 00 ec 29 19 00
>192cf8		f8 29 19 00 04 2a 19 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>192d00		10 2a 19 00 1c 2a 19 00 28 2a 19 00 34 2a 19 00
>192d10		40 2a 19 00 4c 2a 19 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>192d18		58 2a 19 00 64 2a 19 00 70 2a 19 00 7c 2a 19 00
>192d28		88 2a 19 00 94 2a 19 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>192d30		a0 2a 19 00 ac 2a 19 00 b8 2a 19 00 c4 2a 19 00
>192d40		d0 2a 19 00 dc 2a 19 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>192d48		e8 2a 19 00 f4 2a 19 00 00 2b 19 00 0c 2b 19 00
>192d58		18 2b 19 00 24 2b 19 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>192d60		30 2b 19 00 3c 2b 19 00 48 2b 19 00 54 2b 19 00
>192d70		60 2b 19 00 6c 2b 19 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments_Win31.asm

>192d78		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>192d80		0d f2 f7 00
>192d84		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>192d8c		07 f2 f7 00
>192d90		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>192d98		07 f2 f6 00
>192d9c		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>192da4		07 f2 f7 00
>192da8		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>192db0		07 f2 f7 00
>192db4		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>192dbc		07 f2 f7 00
>192dc0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192dc8		00 00 00 00
>192dcc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192dd4		00 00 00 00
>192dd8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192de0		00 00 00 00
>192de4		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>192dec		87 f2 f1 00
>192df0		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>192df8		07 f4 f4 00
>192dfc		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>192e04		07 f2 f6 00
>192e08		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>192e10		07 e7 f7 00
>192e14		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>192e1c		07 f6 f6 00
>192e20		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>192e28		87 a3 f3 00
>192e2c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e34		00 00 00 00
>192e38		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e40		00 00 00 00
>192e44		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e4c		00 00 00 00
>192e50		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>192e58		07 8a 08 00
>192e5c		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>192e64		07 55 14 00
>192e68		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>192e70		87 55 04 00
>192e74		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>192e7c		07 46 1a 00
>192e80		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>192e88		07 61 07 00
>192e8c		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>192e94		90 61 07 00
>192e98		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ea0		00 00 00 00
>192ea4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192eac		00 00 00 00
>192eb0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192eb8		00 00 00 00
>192ebc		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>192ec4		87 f3 f8 00
>192ec8		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>192ed0		07 f6 3a 00
>192ed4		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>192edc		0c 84 19 00
>192ee0		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>192ee8		07 94 19 00
>192eec		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>192ef4		87 d1 f8 00
>192ef8		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>192f00		07 c3 a6 00
>192f04		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f0c		00 00 00 00
>192f10		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f18		00 00 00 00
>192f1c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f24		00 00 00 00
>192f28		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>192f30		47 f2 df 00
>192f34		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>192f3c		0f a1 df 00
>192f40		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>192f48		07 f1 78 00
>192f4c		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>192f54		07 f1 18 00
>192f58		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>192f60		07 56 26 00
>192f64		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>192f6c		07 66 06 00
>192f70		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f78		00 00 00 00
>192f7c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f84		00 00 00 00
>192f88		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f90		00 00 00 00
>192f94		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>192f9c		87 85 35 00
>192fa0		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>192fa8		87 f3 f4 00
>192fac		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>192fb4		07 f2 c3 00
>192fb8		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>192fc0		08 72 08 00
>192fc4		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>192fcc		07 3f 07 01
>192fd0		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>192fd8		07 4f 05 00
>192fdc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192fe4		00 00 00 00
>192fe8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ff0		00 00 00 00
>192ff4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ffc		00 00 00 00
>193000		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>193008		07 7a 05 00
>19300c		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>193014		07 a5 45 00
>193018		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>193020		08 8f 09 00
>193024		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>19302c		0c 8f 09 00
>193030		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>193038		07 82 37 00
>19303c		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>193044		07 62 2c 01
>193048		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193050		00 00 00 00
>193054		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>19305c		00 00 00 00
>193060		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193068		00 00 00 00
>19306c		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>193074		07 a6 1c 00
>193078		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>193080		07 72 0b 00
>193084		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>19308c		07 72 09 00
>193090		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>193098		07 82 09 00
>19309c		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>1930a4		07 72 0f 00
>1930a8		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>1930b0		07 8f 0a 00
>1930b4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1930bc		00 00 00 00
>1930c0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1930c8		00 00 00 00
>1930cc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1930d4		00 00 00 00
>1930d8		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>1930e0		07 65 1a 00
>1930e4		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>1930ec		07 65 1a 00
>1930f0		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>1930f8		07 75 0a 00
>1930fc		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>193104		07 65 1a 00
>193108		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>193110		07 65 26 00
>193114		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>19311c		07 55 36 00
>193120		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193128		00 00 00 00
>19312c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193134		00 00 00 00
>193138		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193140		00 00 00 00
>193144		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>19314c		07 ff 0f 01
>193150		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>193158		87 64 18 00
>19315c		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>193164		07 96 0a 00
>193168		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>193170		07 91 2a 00
>193174		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>19317c		47 6f 07 00
>193180		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>193188		07 8f 06 02
>19318c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193194		00 00 00 00
>193198		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1931a0		00 00 00 00
>1931a4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1931ac		00 00 00 00
>1931b0		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>1931b8		07 55 16 00
>1931bc		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>1931c4		07 6a 03 00
>1931c8		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>1931d0		07 42 35 00
>1931d4		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>1931dc		07 31 47 01
>1931e0		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>1931e8		0a 42 25 00
>1931ec		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>1931f4		07 cf 07 00
>1931f8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193200		00 00 00 00
>193204		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>19320c		00 00 00 00
>193210		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193218		00 00 00 00
>19321c		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>193224		8a f2 26 00
>193228		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>193230		07 f2 f5 00
>193234		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>19323c		87 11 13 00
>193240		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>193248		87 1d 03 00
>19324c		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>193254		07 81 23 00
>193258		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>193260		0a f2 f6 01
>193264		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>19326c		00 00 00 00
>193270		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193278		00 00 00 00
>19327c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193284		00 00 00 00
>193288		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>193290		07 c2 05 00
>193294		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>19329c		07 6f 0c 01
>1932a0		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>1932a8		07 56 16 00
>1932ac		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>1932b4		88 8f 0b 00
>1932b8		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>1932c0		87 c3 e5 00
>1932c4		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>1932cc		07 f8 16 00
>1932d0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1932d8		00 00 00 00
>1932dc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1932e4		00 00 00 00
>1932e8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1932f0		00 00 00 00
>1932f4		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>1932fc		0a f3 03 00
>193300		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>193308		07 f3 02 00
>19330c		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>193314		07 1f ff 03
>193318		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>193320		8f 56 84 02
>193324		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>19332c		0c 34 04 03
>193330		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>193338		07 1f 02 03
>19333c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193344		00 00 00 00
>193348		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193350		00 00 00 00
>193354		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>19335c		00 00 00 00
>193360		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>193368		07 12 16 01
>19336c		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>193374		07 f6 c9 02
>193378		78 2d 19 00 84 2d 19 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>193380		90 2d 19 00 9c 2d 19 00 a8 2d 19 00 b4 2d 19 00
>193390		c0 2d 19 00 cc 2d 19 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>193398		d8 2d 19 00 e4 2d 19 00 f0 2d 19 00 fc 2d 19 00
>1933a8		08 2e 19 00 14 2e 19 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>1933b0		20 2e 19 00 2c 2e 19 00 38 2e 19 00 44 2e 19 00
>1933c0		50 2e 19 00 5c 2e 19 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>1933c8		68 2e 19 00 74 2e 19 00 80 2e 19 00 8c 2e 19 00
>1933d8		98 2e 19 00 a4 2e 19 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>1933e0		b0 2e 19 00 bc 2e 19 00 c8 2e 19 00 d4 2e 19 00
>1933f0		e0 2e 19 00 ec 2e 19 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>1933f8		f8 2e 19 00 04 2f 19 00 10 2f 19 00 1c 2f 19 00
>193408		28 2f 19 00 34 2f 19 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>193410		40 2f 19 00 4c 2f 19 00 58 2f 19 00 64 2f 19 00
>193420		70 2f 19 00 7c 2f 19 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>193428		88 2f 19 00 94 2f 19 00 a0 2f 19 00 ac 2f 19 00
>193438		b8 2f 19 00 c4 2f 19 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>193440		d0 2f 19 00 dc 2f 19 00 e8 2f 19 00 f4 2f 19 00
>193450		00 30 19 00 0c 30 19 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>193458		18 30 19 00 24 30 19 00 30 30 19 00 3c 30 19 00
>193468		48 30 19 00 54 30 19 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>193470		60 30 19 00 6c 30 19 00 78 30 19 00 84 30 19 00
>193480		90 30 19 00 9c 30 19 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>193488		a8 30 19 00 b4 30 19 00 c0 30 19 00 cc 30 19 00
>193498		d8 30 19 00 e4 30 19 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>1934a0		f0 30 19 00 fc 30 19 00 08 31 19 00 14 31 19 00
>1934b0		20 31 19 00 2c 31 19 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>1934b8		38 31 19 00 44 31 19 00 50 31 19 00 5c 31 19 00
>1934c8		68 31 19 00 74 31 19 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>1934d0		80 31 19 00 8c 31 19 00 98 31 19 00 a4 31 19 00
>1934e0		b0 31 19 00 bc 31 19 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>1934e8		c8 31 19 00 d4 31 19 00 e0 31 19 00 ec 31 19 00
>1934f8		f8 31 19 00 04 32 19 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>193500		10 32 19 00 1c 32 19 00 28 32 19 00 34 32 19 00
>193510		40 32 19 00 4c 32 19 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>193518		58 32 19 00 64 32 19 00 70 32 19 00 7c 32 19 00
>193528		88 32 19 00 94 32 19 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>193530		a0 32 19 00 ac 32 19 00 b8 32 19 00 c4 32 19 00
>193540		d0 32 19 00 dc 32 19 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>193548		e8 32 19 00 f4 32 19 00 00 33 19 00 0c 33 19 00
>193558		18 33 19 00 24 33 19 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>193560		30 33 19 00 3c 33 19 00 48 33 19 00 54 33 19 00
>193570		60 33 19 00 6c 33 19 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm

>193578		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.193580						IOPL2_TONE_TEST
.193580		e2 20		sep #$20	                SEP #$20        ; set A short
.193582		c2 10		rep #$10	                REP #$10        ; set X long
.193584		a2 00 00	ldx #$0000	                LDX #0
.193587						OPL2_TONE_TESTING_L1
.193587		bf 78 35 19	lda $193578,x	                LDA NOTE_INTRO, X
.19358b		29 0f		and #$0f	                AND #$F
.19358d		85 30		sta $30		                STA OPL2_NOTE ; start at C
.19358f		bf 78 35 19	lda $193578,x	                LDA NOTE_INTRO, X
.193593		29 70		and #$70	                AND #$70
.193595		4a		lsr a		                LSR A
.193596		4a		lsr a		                LSR A
.193597		4a		lsr a		                LSR A
.193598		4a		lsr a		                LSR A
.193599		85 31		sta $31		                STA OPL2_OCTAVE
.19359b		8a		txa		                TXA
.19359c		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.19359e		85 27		sta $27		                STA OPL2_CHANNEL
.1935a0		22 70 37 19	jsl $193770	                JSL OPL2_PLAYNOTE
.1935a4		a0 00 00	ldy #$0000	                LDY #$0000
.1935a7						OPL2_TONE_TESTING_L2
.1935a7		ea		nop		                NOP
.1935a8		ea		nop		                NOP
.1935a9		ea		nop		                NOP
.1935aa		ea		nop		                NOP
.1935ab		c8		iny		                INY
.1935ac		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.1935af		d0 f6		bne $1935a7	                BNE OPL2_TONE_TESTING_L2
.1935b1		e8		inx		                INX
.1935b2		e0 08 00	cpx #$0008	                CPX #8
.1935b5		d0 d0		bne $193587	                BNE OPL2_TONE_TESTING_L1
.1935b7		6b		rtl		                RTL
.1935b8						OPL2_INIT
.1935b8		c2 20		rep #$20	                REP #$20        ; set A long
.1935ba		a9 00 00	lda #$0000	                LDA #$0000
.1935bd		85 28		sta $28		                STA OPL2_REG_REGION
.1935bf		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1935c1		85 30		sta $30		                STA OPL2_NOTE
.1935c3		85 32		sta $32		                STA OPL2_PARAMETER0
.1935c5		85 34		sta $34		                STA OPL2_PARAMETER2
.1935c7		a9 42 15	lda #$1542	                LDA #<>INSTRUMENT_ACCORDN
.1935ca		85 50		sta $50		                STA RAD_ADDR
.1935cc		a9 19 00	lda #$0019	                LDA #<`INSTRUMENT_ACCORDN
.1935cf		85 52		sta $52		                STA RAD_ADDR + 2
.1935d1		e2 20		sep #$20	                SEP #$20        ; set A short
.1935d3		6b		rtl		                RTL
.1935d4						OPL2_Reset
.1935d4		6b		rtl		                RTL
.1935d5						OPL2_Get_FrequencyBlock
.1935d5		6b		rtl		                RTL
.1935d6						OPL2_GET_REGISTER
.1935d6		48		pha		                PHA             ; begin setdp macro
.1935d7		08		php		                PHP
.1935d8		c2 20		rep #$20	                REP #$20        ; set A long
.1935da		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935dd		5b		tcd		                TCD
.1935de		28		plp		                PLP
.1935df		68		pla		                PLA             ; end setdp macro
.1935e0		c2 20		rep #$20	                REP #$20        ; set A long
.1935e2		18		clc		              CLC
.1935e3		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1935e6		65 32		adc $32		              ADC OPL2_PARAMETER0
.1935e8		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1935ea		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1935ed		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1935ef		e2 20		sep #$20	                SEP #$20        ; set A short
.1935f1		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1935f3		6b		rtl		              RTL
.1935f4						OPL2_GET_WAVEFORM_SELECT
.1935f4		48		pha		                PHA             ; begin setdp macro
.1935f5		08		php		                PHP
.1935f6		c2 20		rep #$20	                REP #$20        ; set A long
.1935f8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935fb		5b		tcd		                TCD
.1935fc		28		plp		                PLP
.1935fd		68		pla		                PLA             ; end setdp macro
.1935fe		c2 20		rep #$20	                REP #$20        ; set A long
.193600		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193603		69 01 00	adc #$0001	              ADC #$0001
.193606		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193608		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19360b		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19360d		e2 20		sep #$20	                SEP #$20        ; set A short
.19360f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193611		29 20		and #$20	              AND #$20
.193613		6b		rtl		              RTL
.193614						OPL2_GET_SCALINGLEVEL
.193614		48		pha		                PHA             ; begin setdp macro
.193615		08		php		                PHP
.193616		c2 20		rep #$20	                REP #$20        ; set A long
.193618		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19361b		5b		tcd		                TCD
.19361c		28		plp		                PLP
.19361d		68		pla		                PLA             ; end setdp macro
.19361e		c2 20		rep #$20	                REP #$20        ; set A long
.193620		a9 40 00	lda #$0040	              LDA #$0040  ;
.193623		85 28		sta $28		              STA OPL2_REG_REGION
.193625		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.193628		e2 20		sep #$20	                SEP #$20        ; set A short
.19362a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19362c		29 c0		and #$c0	              AND #$C0
.19362e		4a		lsr a		              LSR A
.19362f		4a		lsr a		              LSR A
.193630		4a		lsr a		              LSR A
.193631		4a		lsr a		              LSR A
.193632		4a		lsr a		              LSR A
.193633		4a		lsr a		              LSR A
.193634		6b		rtl		              RTL
.193635						OPL2_GET_BLOCK
.193635		48		pha		                PHA             ; begin setdp macro
.193636		08		php		                PHP
.193637		c2 20		rep #$20	                REP #$20        ; set A long
.193639		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19363c		5b		tcd		                TCD
.19363d		28		plp		                PLP
.19363e		68		pla		                PLA             ; end setdp macro
.19363f		e2 20		sep #$20	                SEP #$20        ; set A short
.193641		18		clc		              CLC
.193642		a5 27		lda $27		              LDA OPL2_CHANNEL
.193644		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193646		69 b0		adc #$b0	              ADC #$B0
.193648		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.19364a		a9 00		lda #$00	              LDA #$00
.19364c		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.19364e		c2 30		rep #$30	                REP #$30        ; set A&X long
.193650		18		clc		              CLC
.193651		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193654		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193656		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193658		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19365b		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19365d		e2 20		sep #$20	                SEP #$20        ; set A short
.19365f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193661		29 1c		and #$1c	              AND #$1C
.193663		4a		lsr a		              LSR A
.193664		4a		lsr a		              LSR A
.193665		6b		rtl		              RTL
.193666						OPL2_GET_KEYON
.193666		48		pha		                PHA             ; begin setdp macro
.193667		08		php		                PHP
.193668		c2 20		rep #$20	                REP #$20        ; set A long
.19366a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19366d		5b		tcd		                TCD
.19366e		28		plp		                PLP
.19366f		68		pla		                PLA             ; end setdp macro
.193670		e2 20		sep #$20	                SEP #$20        ; set A short
.193672		18		clc		              CLC
.193673		a5 27		lda $27		              LDA OPL2_CHANNEL
.193675		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193677		69 b0		adc #$b0	              ADC #$B0
.193679		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.19367b		a9 00		lda #$00	              LDA #$00
.19367d		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.19367f		c2 30		rep #$30	                REP #$30        ; set A&X long
.193681		18		clc		              CLC
.193682		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193685		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193687		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193689		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19368c		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19368e		e2 20		sep #$20	                SEP #$20        ; set A short
.193690		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193692		29 20		and #$20	              AND #$20
.193694		6b		rtl		              RTL
.193695						OPL2_GET_FEEDBACK
.193695		48		pha		                PHA             ; begin setdp macro
.193696		08		php		                PHP
.193697		c2 20		rep #$20	                REP #$20        ; set A long
.193699		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19369c		5b		tcd		                TCD
.19369d		28		plp		                PLP
.19369e		68		pla		                PLA             ; end setdp macro
.19369f		e2 20		sep #$20	                SEP #$20        ; set A short
.1936a1		18		clc		              CLC
.1936a2		a5 27		lda $27		              LDA OPL2_CHANNEL
.1936a4		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.1936a6		69 c0		adc #$c0	              ADC #$C0
.1936a8		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.1936aa		a9 00		lda #$00	              LDA #$00
.1936ac		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.1936ae		c2 30		rep #$30	                REP #$30        ; set A&X long
.1936b0		18		clc		              CLC
.1936b1		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1936b4		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.1936b6		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1936b8		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1936bb		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1936bd		e2 20		sep #$20	                SEP #$20        ; set A short
.1936bf		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1936c1		29 e0		and #$e0	              AND #$E0
.1936c3		4a		lsr a		              LSR
.1936c4		6b		rtl		              RTL
.1936c5						OPL2_GET_SYNTHMODE
.1936c5		48		pha		                PHA             ; begin setdp macro
.1936c6		08		php		                PHP
.1936c7		c2 20		rep #$20	                REP #$20        ; set A long
.1936c9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936cc		5b		tcd		                TCD
.1936cd		28		plp		                PLP
.1936ce		68		pla		                PLA             ; end setdp macro
.1936cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1936d1		18		clc		              CLC
.1936d2		a5 27		lda $27		              LDA OPL2_CHANNEL
.1936d4		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.1936d6		69 c0		adc #$c0	              ADC #$C0
.1936d8		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.1936da		a9 00		lda #$00	              LDA #$00
.1936dc		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.1936de		c2 30		rep #$30	                REP #$30        ; set A&X long
.1936e0		18		clc		              CLC
.1936e1		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1936e4		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.1936e6		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1936e8		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1936eb		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1936ed		e2 20		sep #$20	                SEP #$20        ; set A short
.1936ef		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1936f1		29 01		and #$01	              AND #$01
.1936f3		6b		rtl		              RTL
.1936f4						OPL2_GET_DEEPTREMOLO
.1936f4		48		pha		                PHA             ; begin setdp macro
.1936f5		08		php		                PHP
.1936f6		c2 20		rep #$20	                REP #$20        ; set A long
.1936f8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936fb		5b		tcd		                TCD
.1936fc		28		plp		                PLP
.1936fd		68		pla		                PLA             ; end setdp macro
.1936fe		c2 20		rep #$20	                REP #$20        ; set A long
.193700		a9 bd 00	lda #$00bd	              LDA #$00BD;
.193703		85 28		sta $28		              STA OPL2_REG_REGION
.193705		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.193708		e2 20		sep #$20	                SEP #$20        ; set A short
.19370a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19370c		29 80		and #$80	              AND #$80
.19370e		6b		rtl		              RTL
.19370f						OPL2_GET_DEEPVIBRATO
.19370f		48		pha		                PHA             ; begin setdp macro
.193710		08		php		                PHP
.193711		c2 20		rep #$20	                REP #$20        ; set A long
.193713		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193716		5b		tcd		                TCD
.193717		28		plp		                PLP
.193718		68		pla		                PLA             ; end setdp macro
.193719		c2 20		rep #$20	                REP #$20        ; set A long
.19371b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19371e		69 bd 00	adc #$00bd	              ADC #$00BD
.193721		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193723		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193726		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193728		e2 20		sep #$20	                SEP #$20        ; set A short
.19372a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19372c		29 40		and #$40	              AND #$40
.19372e		6b		rtl		              RTL
.19372f						OPL2_GET_PERCUSSION
.19372f		48		pha		                PHA             ; begin setdp macro
.193730		08		php		                PHP
.193731		c2 20		rep #$20	                REP #$20        ; set A long
.193733		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193736		5b		tcd		                TCD
.193737		28		plp		                PLP
.193738		68		pla		                PLA             ; end setdp macro
.193739		c2 20		rep #$20	                REP #$20        ; set A long
.19373b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19373e		69 bd 00	adc #$00bd	              ADC #$00BD
.193741		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193743		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193746		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193748		e2 20		sep #$20	                SEP #$20        ; set A short
.19374a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19374c		29 20		and #$20	              AND #$20
.19374e		6b		rtl		              RTL
.19374f						OPL2_GET_DRUMS
.19374f		48		pha		                PHA             ; begin setdp macro
.193750		08		php		                PHP
.193751		c2 20		rep #$20	                REP #$20        ; set A long
.193753		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193756		5b		tcd		                TCD
.193757		28		plp		                PLP
.193758		68		pla		                PLA             ; end setdp macro
.193759		c2 20		rep #$20	                REP #$20        ; set A long
.19375b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19375e		69 bd 00	adc #$00bd	              ADC #$00BD
.193761		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193763		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193766		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193768		e2 20		sep #$20	                SEP #$20        ; set A short
.19376a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19376c		29 1f		and #$1f	              AND #$1F
.19376e		6b		rtl		              RTL
.19376f						OPL2_Get_WaveForm
.19376f		6b		rtl		                RTL
.193770						OPL2_PLAYNOTE
.193770		48		pha		                PHA             ; begin setdp macro
.193771		08		php		                PHP
.193772		c2 20		rep #$20	                REP #$20        ; set A long
.193774		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193777		5b		tcd		                TCD
.193778		28		plp		                PLP
.193779		68		pla		                PLA             ; end setdp macro
.19377a		e2 20		sep #$20	                SEP #$20        ; set A short
.19377c		da		phx		                PHX
.19377d		a9 00		lda #$00	                LDA #$00
.19377f		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.193781		20 58 3d	jsr $193d58	                JSR OPL2_SET_KEYON
.193784		20 1d 3d	jsr $193d1d	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.193787		e2 10		sep #$10	                SEP #$10        ; set X short
.193789		a5 30		lda $30		                LDA OPL2_NOTE
.19378b		3a		dec a		                DEC A
.19378c		0a		asl a		                ASL A
.19378d		aa		tax		                TAX
.19378e		bf 07 15 19	lda $191507,x	                LDA @lnoteFNumbers,X
.193792		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.193794		e8		inx		                INX
.193795		bf 07 15 19	lda $191507,x	                LDA @lnoteFNumbers,X
.193799		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.19379b		22 9b 3c 19	jsl $193c9b	                JSL OPL2_SET_FNUMBER
.19379f		a9 01		lda #$01	                LDA #$01
.1937a1		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.1937a3		20 58 3d	jsr $193d58	                JSR OPL2_SET_KEYON
.1937a6		c2 10		rep #$10	                REP #$10        ; set X long
.1937a8		fa		plx		                PLX
.1937a9		6b		rtl		                RTL
.1937aa						OPL2_PLAYDRUM
.1937aa		6b		rtl		                RTL
.1937ab						OPL2_SET_INSTRUMENT
.1937ab		48		pha		                PHA             ; begin setdp macro
.1937ac		08		php		                PHP
.1937ad		c2 20		rep #$20	                REP #$20        ; set A long
.1937af		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937b2		5b		tcd		                TCD
.1937b3		28		plp		                PLP
.1937b4		68		pla		                PLA             ; end setdp macro
.1937b5		38		sec		              SEC ; Set the WaveFormSelect to True
.1937b6		22 99 39 19	jsl $193999	              JSL OPL2_SET_WAVEFORMSELECT;
.1937ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1937bc		c2 10		rep #$10	                REP #$10        ; set X long
.1937be		a0 00 00	ldy #$0000	              LDY #$0000
.1937c1		a2 00 00	ldx #$0000	              LDX #$0000
.1937c4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.1937c6		85 35		sta $35		              STA OPL2_PARAMETER3
.1937c8		c8		iny		              INY
.1937c9		c9 06		cmp #$06	              CMP #$06
.1937cb		d0 03		bne $1937d0	              BNE PERCUSSION_NEXT07
.1937cd		82 70 01	brl $193940	              BRL Percussion_6
.1937d0						PERCUSSION_NEXT07
.1937d0		c9 07		cmp #$07	              CMP #$07
.1937d2		d0 03		bne $1937d7	              BNE PERCUSSION_NEXT08
.1937d4		82 44 01	brl $19391b	              BRL Percussion_7
.1937d7						PERCUSSION_NEXT08
.1937d7		c9 08		cmp #$08	              CMP #$08
.1937d9		d0 03		bne $1937de	              BNE PERCUSSION_NEXT09
.1937db		82 18 01	brl $1938f6	              BRL Percussion_8
.1937de						PERCUSSION_NEXT09
.1937de		c9 09		cmp #$09	              CMP #$09
.1937e0		d0 03		bne $1937e5	              BNE PERCUSSION_NEXT0A
.1937e2		82 ec 00	brl $1938d1	              BRL Percussion_9
.1937e5						PERCUSSION_NEXT0A
.1937e5		c9 0a		cmp #$0a	              CMP #$0A
.1937e7		d0 03		bne $1937ec	              BNE Percussion_Default
.1937e9		82 c0 00	brl $1938ac	              BRL Percussion_A
.1937ec						Percussion_Default
.1937ec		a9 00		lda #$00	              LDA #$00
.1937ee		85 26		sta $26		              STA OPL2_OPERATOR
.1937f0		c2 20		rep #$20	                REP #$20        ; set A long
.1937f2		a9 20 00	lda #$0020	              LDA #$0020;
.1937f5		85 28		sta $28		              STA OPL2_REG_REGION
.1937f7		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.1937fa		e2 20		sep #$20	                SEP #$20        ; set A short
.1937fc		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1937fe		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193800		c8		iny		              INY
.193801		c2 20		rep #$20	                REP #$20        ; set A long
.193803		a9 40 00	lda #$0040	              LDA #$0040;
.193806		85 28		sta $28		              STA OPL2_REG_REGION
.193808		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.19380b		e2 20		sep #$20	                SEP #$20        ; set A short
.19380d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.19380f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193811		c8		iny		              INY
.193812		c2 20		rep #$20	                REP #$20        ; set A long
.193814		a9 60 00	lda #$0060	              LDA #$0060;
.193817		85 28		sta $28		              STA OPL2_REG_REGION
.193819		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.19381c		e2 20		sep #$20	                SEP #$20        ; set A short
.19381e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193820		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193822		c8		iny		              INY
.193823		c2 20		rep #$20	                REP #$20        ; set A long
.193825		a9 80 00	lda #$0080	              LDA #$0080;
.193828		85 28		sta $28		              STA OPL2_REG_REGION
.19382a		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.19382d		e2 20		sep #$20	                SEP #$20        ; set A short
.19382f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193831		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193833		c8		iny		              INY
.193834		c2 20		rep #$20	                REP #$20        ; set A long
.193836		a9 e0 00	lda #$00e0	              LDA #$00E0;
.193839		85 28		sta $28		              STA OPL2_REG_REGION
.19383b		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.19383e		e2 20		sep #$20	                SEP #$20        ; set A short
.193840		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193842		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193844		c8		iny		              INY
.193845		e2 10		sep #$10	                SEP #$10        ; set X short
.193847		a5 27		lda $27		              LDA OPL2_CHANNEL
.193849		29 0f		and #$0f	              AND #$0F
.19384b		aa		tax		              TAX
.19384c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.19384e		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.193852		c8		iny		              INY
.193853		a9 01		lda #$01	              LDA #$01
.193855		85 26		sta $26		              STA OPL2_OPERATOR
.193857		c2 20		rep #$20	                REP #$20        ; set A long
.193859		a9 20 00	lda #$0020	              LDA #$0020;
.19385c		85 28		sta $28		              STA OPL2_REG_REGION
.19385e		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.193861		e2 20		sep #$20	                SEP #$20        ; set A short
.193863		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.193865		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193867		c8		iny		              INY
.193868		c2 20		rep #$20	                REP #$20        ; set A long
.19386a		a9 40 00	lda #$0040	              LDA #$0040;
.19386d		85 28		sta $28		              STA OPL2_REG_REGION
.19386f		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.193872		e2 20		sep #$20	                SEP #$20        ; set A short
.193874		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.193876		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193878		c8		iny		              INY
.193879		c2 20		rep #$20	                REP #$20        ; set A long
.19387b		a9 60 00	lda #$0060	              LDA #$0060;
.19387e		85 28		sta $28		              STA OPL2_REG_REGION
.193880		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.193883		e2 20		sep #$20	                SEP #$20        ; set A short
.193885		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.193887		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193889		c8		iny		              INY
.19388a		c2 20		rep #$20	                REP #$20        ; set A long
.19388c		a9 80 00	lda #$0080	              LDA #$0080;
.19388f		85 28		sta $28		              STA OPL2_REG_REGION
.193891		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.193894		e2 20		sep #$20	                SEP #$20        ; set A short
.193896		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.193898		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19389a		c8		iny		              INY
.19389b		c2 20		rep #$20	                REP #$20        ; set A long
.19389d		a9 e0 00	lda #$00e0	              LDA #$00E0;
.1938a0		85 28		sta $28		              STA OPL2_REG_REGION
.1938a2		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.1938a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1938a7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.1938a9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1938ab		6b		rtl		                RTL
.1938ac						Percussion_A
.1938ac		e2 20		sep #$20	                SEP #$20        ; set A short
.1938ae		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1938b0		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.1938b4		c8		iny		              INY
.1938b5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1938b7		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.1938bb		c8		iny		              INY
.1938bc		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1938be		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.1938c2		c8		iny		              INY
.1938c3		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1938c5		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.1938c9		c8		iny		              INY
.1938ca		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1938cc		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.1938d0		6b		rtl		                RTL
.1938d1						Percussion_9
.1938d1		e2 20		sep #$20	                SEP #$20        ; set A short
.1938d3		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1938d5		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.1938d9		c8		iny		              INY
.1938da		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1938dc		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.1938e0		c8		iny		              INY
.1938e1		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1938e3		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.1938e7		c8		iny		              INY
.1938e8		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1938ea		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.1938ee		c8		iny		              INY
.1938ef		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1938f1		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.1938f5		6b		rtl		              RTL
.1938f6						Percussion_8
.1938f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1938f8		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1938fa		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.1938fe		c8		iny		              INY
.1938ff		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.193901		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.193905		c8		iny		              INY
.193906		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193908		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.19390c		c8		iny		              INY
.19390d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.19390f		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.193913		c8		iny		              INY
.193914		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193916		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.19391a		6b		rtl		              RTL
.19391b						Percussion_7
.19391b		e2 20		sep #$20	                SEP #$20        ; set A short
.19391d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.19391f		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.193923		c8		iny		              INY
.193924		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.193926		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.19392a		c8		iny		              INY
.19392b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.19392d		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.193931		c8		iny		              INY
.193932		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193934		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.193938		c8		iny		              INY
.193939		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.19393b		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.19393f		6b		rtl		              RTL
.193940						Percussion_6
.193940		e2 20		sep #$20	                SEP #$20        ; set A short
.193942		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193944		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.193948		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.19394c		c8		iny		              INY
.19394d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.19394f		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.193953		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.193957		c8		iny		              INY
.193958		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.19395a		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.19395e		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.193962		c8		iny		              INY
.193963		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193965		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.193969		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.19396d		c8		iny		              INY
.19396e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193970		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.193974		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.193978		6b		rtl		              RTL
.193979						OPL2_SET_REGISTER
.193979		48		pha		                PHA             ; begin setdp macro
.19397a		08		php		                PHP
.19397b		c2 20		rep #$20	                REP #$20        ; set A long
.19397d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193980		5b		tcd		                TCD
.193981		28		plp		                PLP
.193982		68		pla		                PLA             ; end setdp macro
.193983		c2 20		rep #$20	                REP #$20        ; set A long
.193985		18		clc		              CLC
.193986		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193989		65 32		adc $32		              ADC OPL2_PARAMETER0
.19398b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19398d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193990		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193992		e2 20		sep #$20	                SEP #$20        ; set A short
.193994		a5 33		lda $33		              LDA OPL2_PARAMETER1
.193996		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193998		6b		rtl		              RTL
.193999						OPL2_SET_WAVEFORMSELECT
.193999		48		pha		                PHA             ; begin setdp macro
.19399a		08		php		                PHP
.19399b		c2 20		rep #$20	                REP #$20        ; set A long
.19399d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939a0		5b		tcd		                TCD
.1939a1		28		plp		                PLP
.1939a2		68		pla		                PLA             ; end setdp macro
.1939a3		c2 20		rep #$20	                REP #$20        ; set A long
.1939a5		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.1939a8		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1939aa		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1939ad		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1939af		e2 20		sep #$20	                SEP #$20        ; set A short
.1939b1		b0 07		bcs $1939ba	              BCS OPL2_Set_WaveFormSelect_set
.1939b3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939b5		29 df		and #$df	              AND #$DF
.1939b7		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939b9		6b		rtl		              RTL
.1939ba						OPL2_Set_WaveFormSelect_set
.1939ba		48		pha		                PHA             ; begin setdp macro
.1939bb		08		php		                PHP
.1939bc		c2 20		rep #$20	                REP #$20        ; set A long
.1939be		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939c1		5b		tcd		                TCD
.1939c2		28		plp		                PLP
.1939c3		68		pla		                PLA             ; end setdp macro
.1939c4		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939c6		09 20 00	ora #$0020	              ORA #$20
.1939c9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939cb		6b		rtl		                RTL
.1939cc						OPL2_SET_TREMOLO
.1939cc		48		pha		                PHA             ; begin setdp macro
.1939cd		08		php		                PHP
.1939ce		c2 20		rep #$20	                REP #$20        ; set A long
.1939d0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939d3		5b		tcd		                TCD
.1939d4		28		plp		                PLP
.1939d5		68		pla		                PLA             ; end setdp macro
.1939d6		08		php		                PHP ; Push the Carry
.1939d7		c2 20		rep #$20	                REP #$20        ; set A long
.1939d9		18		clc		                CLC
.1939da		a9 20 00	lda #$0020	                LDA #$0020 ;
.1939dd		85 28		sta $28		                STA OPL2_REG_REGION
.1939df		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.1939e2		28		plp		                PLP ; Pull the Carry out
.1939e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1939e5		b0 08		bcs $1939ef	                BCS OPL2_Set_Tremolo_Set;
.1939e7		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1939e9		29 7f		and #$7f	                AND #$7F
.1939eb		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1939ed		80 06		bra $1939f5	                BRA OPL2_Set_Tremolo_Exit
.1939ef						OPL2_Set_Tremolo_Set
.1939ef		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1939f1		09 80		ora #$80	                ORA #$80
.1939f3		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1939f5						OPL2_Set_Tremolo_Exit
.1939f5		6b		rtl		                RTL
.1939f6						OPL2_GET_TREMOLO
.1939f6		48		pha		                PHA             ; begin setdp macro
.1939f7		08		php		                PHP
.1939f8		c2 20		rep #$20	                REP #$20        ; set A long
.1939fa		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939fd		5b		tcd		                TCD
.1939fe		28		plp		                PLP
.1939ff		68		pla		                PLA             ; end setdp macro
.193a00		c2 20		rep #$20	                REP #$20        ; set A long
.193a02		a9 20 00	lda #$0020	                LDA #$0020;
.193a05		85 28		sta $28		                STA OPL2_REG_REGION
.193a07		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.193a0a		e2 20		sep #$20	                SEP #$20        ; set A short
.193a0c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a0e		29 80		and #$80	                AND #$80
.193a10		6b		rtl		                RTL
.193a11						OPL2_SET_VIBRATO
.193a11		48		pha		                PHA             ; begin setdp macro
.193a12		08		php		                PHP
.193a13		c2 20		rep #$20	                REP #$20        ; set A long
.193a15		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a18		5b		tcd		                TCD
.193a19		28		plp		                PLP
.193a1a		68		pla		                PLA             ; end setdp macro
.193a1b		08		php		                PHP ; Push the Carry
.193a1c		c2 20		rep #$20	                REP #$20        ; set A long
.193a1e		18		clc		                CLC
.193a1f		a9 20 00	lda #$0020	                LDA #$0020;
.193a22		85 28		sta $28		                STA OPL2_REG_REGION
.193a24		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.193a27		28		plp		                PLP ; Pull the Carry out
.193a28		e2 20		sep #$20	                SEP #$20        ; set A short
.193a2a		b0 08		bcs $193a34	                BCS OPL2_Set_Vibrato_Set;
.193a2c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a2e		29 bf		and #$bf	                AND #$BF
.193a30		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a32		80 06		bra $193a3a	                BRA OPL2_Set_Vibrato_Exit
.193a34						OPL2_Set_Vibrato_Set
.193a34		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a36		09 40		ora #$40	                ORA #$40
.193a38		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a3a						OPL2_Set_Vibrato_Exit
.193a3a		6b		rtl		                RTL
.193a3b						OPL2_GET_VIBRATO
.193a3b		48		pha		                PHA             ; begin setdp macro
.193a3c		08		php		                PHP
.193a3d		c2 20		rep #$20	                REP #$20        ; set A long
.193a3f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a42		5b		tcd		                TCD
.193a43		28		plp		                PLP
.193a44		68		pla		                PLA             ; end setdp macro
.193a45		c2 20		rep #$20	                REP #$20        ; set A long
.193a47		a9 20 00	lda #$0020	                LDA #$0020;
.193a4a		85 28		sta $28		                STA OPL2_REG_REGION
.193a4c		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.193a4f		e2 20		sep #$20	                SEP #$20        ; set A short
.193a51		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a53		29 40		and #$40	                AND #$40
.193a55		6b		rtl		                RTL
.193a56						OPL2_SET_MAINTAINSUSTAIN
.193a56		48		pha		                PHA             ; begin setdp macro
.193a57		08		php		                PHP
.193a58		c2 20		rep #$20	                REP #$20        ; set A long
.193a5a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a5d		5b		tcd		                TCD
.193a5e		28		plp		                PLP
.193a5f		68		pla		                PLA             ; end setdp macro
.193a60		08		php		              PHP ; Push the Carry
.193a61		c2 20		rep #$20	                REP #$20        ; set A long
.193a63		18		clc		              CLC
.193a64		a9 20 00	lda #$0020	              LDA #$0020;
.193a67		85 28		sta $28		              STA OPL2_REG_REGION
.193a69		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.193a6c		28		plp		              PLP ; Pull the Carry out
.193a6d		e2 20		sep #$20	                SEP #$20        ; set A short
.193a6f		b0 08		bcs $193a79	              BCS OPL2_Set_MaintainSustain_Set;
.193a71		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193a73		29 df		and #$df	              AND #$DF
.193a75		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193a77		80 06		bra $193a7f	              BRA OPL2_Set_MaintainSustain_Exit
.193a79						OPL2_Set_MaintainSustain_Set
.193a79		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193a7b		09 20		ora #$20	              ORA #$20
.193a7d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193a7f						OPL2_Set_MaintainSustain_Exit
.193a7f		6b		rtl		                RTL
.193a80						OPL2_GET_MAINTAINSUSTAIN
.193a80		48		pha		                PHA             ; begin setdp macro
.193a81		08		php		                PHP
.193a82		c2 20		rep #$20	                REP #$20        ; set A long
.193a84		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a87		5b		tcd		                TCD
.193a88		28		plp		                PLP
.193a89		68		pla		                PLA             ; end setdp macro
.193a8a		c2 20		rep #$20	                REP #$20        ; set A long
.193a8c		a9 20 00	lda #$0020	              LDA #$0020;
.193a8f		85 28		sta $28		              STA OPL2_REG_REGION
.193a91		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.193a94		e2 20		sep #$20	                SEP #$20        ; set A short
.193a96		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193a98		29 20		and #$20	              AND #$20
.193a9a		6b		rtl		                RTL
.193a9b						OPL2_SET_ENVELOPESCALING
.193a9b		48		pha		                PHA             ; begin setdp macro
.193a9c		08		php		                PHP
.193a9d		c2 20		rep #$20	                REP #$20        ; set A long
.193a9f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193aa2		5b		tcd		                TCD
.193aa3		28		plp		                PLP
.193aa4		68		pla		                PLA             ; end setdp macro
.193aa5		08		php		              PHP ; Push the Carry
.193aa6		c2 20		rep #$20	                REP #$20        ; set A long
.193aa8		18		clc		              CLC
.193aa9		a9 20 00	lda #$0020	              LDA #$0020;
.193aac		85 28		sta $28		              STA OPL2_REG_REGION
.193aae		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.193ab1		28		plp		              PLP ; Pull the Carry out
.193ab2		e2 20		sep #$20	                SEP #$20        ; set A short
.193ab4		b0 08		bcs $193abe	              BCS OPL2_Set_EnvelopeScaling_Set;
.193ab6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193ab8		29 ef		and #$ef	              AND #$EF
.193aba		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193abc		80 06		bra $193ac4	              BRA OPL2_Set_EnvelopeScaling_Exit
.193abe						OPL2_Set_EnvelopeScaling_Set
.193abe		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193ac0		09 10		ora #$10	              ORA #$10
.193ac2		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193ac4						OPL2_Set_EnvelopeScaling_Exit
.193ac4		6b		rtl		                RTL
.193ac5						OPL2_GET_ENVELOPESCALING
.193ac5		48		pha		                PHA             ; begin setdp macro
.193ac6		08		php		                PHP
.193ac7		c2 20		rep #$20	                REP #$20        ; set A long
.193ac9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193acc		5b		tcd		                TCD
.193acd		28		plp		                PLP
.193ace		68		pla		                PLA             ; end setdp macro
.193acf		c2 20		rep #$20	                REP #$20        ; set A long
.193ad1		a9 20 00	lda #$0020	              LDA #$0020;
.193ad4		85 28		sta $28		              STA OPL2_REG_REGION
.193ad6		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.193ad9		e2 20		sep #$20	                SEP #$20        ; set A short
.193adb		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193add		29 10		and #$10	              AND #$10
.193adf		6b		rtl		                RTL
.193ae0						OPL2_GET_MODFREQMULTIPLE
.193ae0		48		pha		                PHA             ; begin setdp macro
.193ae1		08		php		                PHP
.193ae2		c2 20		rep #$20	                REP #$20        ; set A long
.193ae4		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193ae7		5b		tcd		                TCD
.193ae8		28		plp		                PLP
.193ae9		68		pla		                PLA             ; end setdp macro
.193aea		c2 20		rep #$20	                REP #$20        ; set A long
.193aec		a9 20 00	lda #$0020	              LDA #$0020;
.193aef		85 28		sta $28		              STA OPL2_REG_REGION
.193af1		20 d7 3e	jsr $193ed7	              JSR OPL2_GET_REG_OFFSET
.193af4		e2 20		sep #$20	                SEP #$20        ; set A short
.193af6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193af8		29 0f		and #$0f	              AND #$0F
.193afa		6b		rtl		              RTL
.193afb						OPL2_SET_MODFREQMULTIPLE
.193afb		48		pha		                PHA             ; begin setdp macro
.193afc		08		php		                PHP
.193afd		c2 20		rep #$20	                REP #$20        ; set A long
.193aff		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193b02		5b		tcd		                TCD
.193b03		28		plp		                PLP
.193b04		68		pla		                PLA             ; end setdp macro
.193b05		c2 20		rep #$20	                REP #$20        ; set A long
.193b07		a9 20 00	lda #$0020	                LDA #$0020;
.193b0a		85 28		sta $28		                STA OPL2_REG_REGION
.193b0c		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.193b0f		e2 20		sep #$20	                SEP #$20        ; set A short
.193b11		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193b13		29 0f		and #$0f	                AND #$0F
.193b15		85 32		sta $32		                STA OPL2_PARAMETER0
.193b17		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193b19		29 f0		and #$f0	                AND #$F0
.193b1b		05 32		ora $32		                ORA OPL2_PARAMETER0
.193b1d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193b1f		6b		rtl		                RTL
.193b20						OPL2_SET_SCALINGLEVEL
.193b20		48		pha		                PHA             ; begin setdp macro
.193b21		08		php		                PHP
.193b22		c2 20		rep #$20	                REP #$20        ; set A long
.193b24		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193b27		5b		tcd		                TCD
.193b28		28		plp		                PLP
.193b29		68		pla		                PLA             ; end setdp macro
.193b2a		c2 20		rep #$20	                REP #$20        ; set A long
.193b2c		a9 40 00	lda #$0040	                LDA #$0040;
.193b2f		85 28		sta $28		                STA OPL2_REG_REGION
.193b31		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.193b34		e2 20		sep #$20	                SEP #$20        ; set A short
.193b36		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193b38		29 03		and #$03	                AND #$03
.193b3a		0a		asl a		                ASL
.193b3b		0a		asl a		                ASL
.193b3c		0a		asl a		                ASL
.193b3d		0a		asl a		                ASL
.193b3e		0a		asl a		                ASL
.193b3f		0a		asl a		                ASL
.193b40		85 32		sta $32		                STA OPL2_PARAMETER0
.193b42		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193b44		29 3f		and #$3f	                AND #$3F
.193b46		05 32		ora $32		                ORA OPL2_PARAMETER0
.193b48		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193b4a		6b		rtl		                RTL
.193b4b						OPL2_SET_VOLUME
.193b4b		48		pha		                PHA             ; begin setdp macro
.193b4c		08		php		                PHP
.193b4d		c2 20		rep #$20	                REP #$20        ; set A long
.193b4f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193b52		5b		tcd		                TCD
.193b53		28		plp		                PLP
.193b54		68		pla		                PLA             ; end setdp macro
.193b55		c2 20		rep #$20	                REP #$20        ; set A long
.193b57		a9 40 00	lda #$0040	                LDA #$0040  ;
.193b5a		85 28		sta $28		                STA OPL2_REG_REGION
.193b5c		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.193b5f		e2 20		sep #$20	                SEP #$20        ; set A short
.193b61		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.193b63		29 3f		and #$3f	                AND #$3F
.193b65		85 32		sta $32		                STA OPL2_PARAMETER0
.193b67		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193b69		29 c0		and #$c0	                AND #$C0
.193b6b		05 32		ora $32		                ORA OPL2_PARAMETER0
.193b6d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193b6f		6b		rtl		                RTL
.193b70						OPL2_GET_VOLUME
.193b70		48		pha		                PHA             ; begin setdp macro
.193b71		08		php		                PHP
.193b72		c2 20		rep #$20	                REP #$20        ; set A long
.193b74		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193b77		5b		tcd		                TCD
.193b78		28		plp		                PLP
.193b79		68		pla		                PLA             ; end setdp macro
.193b7a		c2 20		rep #$20	                REP #$20        ; set A long
.193b7c		a9 40 00	lda #$0040	                LDA #$0040  ;
.193b7f		85 28		sta $28		                STA OPL2_REG_REGION
.193b81		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.193b84		e2 20		sep #$20	                SEP #$20        ; set A short
.193b86		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193b88		29 3f		and #$3f	                AND #$3F
.193b8a		6b		rtl		                RTL
.193b8b						OPL2_SET_ATTACK
.193b8b		48		pha		                PHA             ; begin setdp macro
.193b8c		08		php		                PHP
.193b8d		c2 20		rep #$20	                REP #$20        ; set A long
.193b8f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193b92		5b		tcd		                TCD
.193b93		28		plp		                PLP
.193b94		68		pla		                PLA             ; end setdp macro
.193b95		c2 20		rep #$20	                REP #$20        ; set A long
.193b97		a9 60 00	lda #$0060	                LDA #$0060  ;
.193b9a		85 28		sta $28		                STA OPL2_REG_REGION
.193b9c		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.193b9f		e2 20		sep #$20	                SEP #$20        ; set A short
.193ba1		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193ba3		29 0f		and #$0f	                AND #$0F
.193ba5		0a		asl a		                ASL
.193ba6		0a		asl a		                ASL
.193ba7		0a		asl a		                ASL
.193ba8		0a		asl a		                ASL
.193ba9		85 32		sta $32		                STA OPL2_PARAMETER0
.193bab		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193bad		29 0f		and #$0f	                AND #$0F
.193baf		05 32		ora $32		                ORA OPL2_PARAMETER0
.193bb1		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193bb3		6b		rtl		                RTL
.193bb4						OPL2_GET_ATTACK
.193bb4		48		pha		                PHA             ; begin setdp macro
.193bb5		08		php		                PHP
.193bb6		c2 20		rep #$20	                REP #$20        ; set A long
.193bb8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193bbb		5b		tcd		                TCD
.193bbc		28		plp		                PLP
.193bbd		68		pla		                PLA             ; end setdp macro
.193bbe		c2 20		rep #$20	                REP #$20        ; set A long
.193bc0		a9 60 00	lda #$0060	                LDA #$0060
.193bc3		85 28		sta $28		                STA OPL2_REG_REGION
.193bc5		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.193bc8		e2 20		sep #$20	                SEP #$20        ; set A short
.193bca		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193bcc		29 f0		and #$f0	                AND #$F0
.193bce		4a		lsr a		                LSR
.193bcf		4a		lsr a		                LSR
.193bd0		4a		lsr a		                LSR
.193bd1		4a		lsr a		                LSR
.193bd2		6b		rtl		                RTL
.193bd3						OPL2_SET_DECAY
.193bd3		48		pha		                PHA             ; begin setdp macro
.193bd4		08		php		                PHP
.193bd5		c2 20		rep #$20	                REP #$20        ; set A long
.193bd7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193bda		5b		tcd		                TCD
.193bdb		28		plp		                PLP
.193bdc		68		pla		                PLA             ; end setdp macro
.193bdd		c2 20		rep #$20	                REP #$20        ; set A long
.193bdf		a9 60 00	lda #$0060	                LDA #$0060;
.193be2		85 28		sta $28		                STA OPL2_REG_REGION
.193be4		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.193be7		e2 20		sep #$20	                SEP #$20        ; set A short
.193be9		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193beb		29 0f		and #$0f	                AND #$0F
.193bed		85 32		sta $32		                STA OPL2_PARAMETER0
.193bef		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193bf1		29 f0		and #$f0	                AND #$F0
.193bf3		05 32		ora $32		                ORA OPL2_PARAMETER0
.193bf5		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193bf7		6b		rtl		                RTL
.193bf8						OPL2_GET_DECAY
.193bf8		48		pha		                PHA             ; begin setdp macro
.193bf9		08		php		                PHP
.193bfa		c2 20		rep #$20	                REP #$20        ; set A long
.193bfc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193bff		5b		tcd		                TCD
.193c00		28		plp		                PLP
.193c01		68		pla		                PLA             ; end setdp macro
.193c02		c2 20		rep #$20	                REP #$20        ; set A long
.193c04		a9 60 00	lda #$0060	                LDA #$0060
.193c07		85 28		sta $28		                STA OPL2_REG_REGION
.193c09		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.193c0c		e2 20		sep #$20	                SEP #$20        ; set A short
.193c0e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193c10		29 0f		and #$0f	                AND #$0F
.193c12		6b		rtl		                RTL
.193c13						OPL2_SET_SUSTAIN
.193c13		48		pha		                PHA             ; begin setdp macro
.193c14		08		php		                PHP
.193c15		c2 20		rep #$20	                REP #$20        ; set A long
.193c17		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193c1a		5b		tcd		                TCD
.193c1b		28		plp		                PLP
.193c1c		68		pla		                PLA             ; end setdp macro
.193c1d		c2 20		rep #$20	                REP #$20        ; set A long
.193c1f		a9 80 00	lda #$0080	                LDA #$0080;
.193c22		85 28		sta $28		                STA OPL2_REG_REGION
.193c24		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.193c27		e2 20		sep #$20	                SEP #$20        ; set A short
.193c29		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193c2b		29 0f		and #$0f	                AND #$0F
.193c2d		0a		asl a		                ASL
.193c2e		0a		asl a		                ASL
.193c2f		0a		asl a		                ASL
.193c30		0a		asl a		                ASL
.193c31		85 32		sta $32		                STA OPL2_PARAMETER0
.193c33		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193c35		29 0f		and #$0f	                AND #$0F
.193c37		05 32		ora $32		                ORA OPL2_PARAMETER0
.193c39		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193c3b		6b		rtl		                RTL
.193c3c						OPL2_GET_SUSTAIN
.193c3c		48		pha		                PHA             ; begin setdp macro
.193c3d		08		php		                PHP
.193c3e		c2 20		rep #$20	                REP #$20        ; set A long
.193c40		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193c43		5b		tcd		                TCD
.193c44		28		plp		                PLP
.193c45		68		pla		                PLA             ; end setdp macro
.193c46		c2 20		rep #$20	                REP #$20        ; set A long
.193c48		a9 80 00	lda #$0080	                LDA #$0080
.193c4b		85 28		sta $28		                STA OPL2_REG_REGION
.193c4d		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.193c50		e2 20		sep #$20	                SEP #$20        ; set A short
.193c52		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193c54		29 f0		and #$f0	                AND #$F0
.193c56		4a		lsr a		                LSR
.193c57		4a		lsr a		                LSR
.193c58		4a		lsr a		                LSR
.193c59		4a		lsr a		                LSR
.193c5a		6b		rtl		                RTL
.193c5b						OPL2_SET_RELEASE
.193c5b		48		pha		                PHA             ; begin setdp macro
.193c5c		08		php		                PHP
.193c5d		c2 20		rep #$20	                REP #$20        ; set A long
.193c5f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193c62		5b		tcd		                TCD
.193c63		28		plp		                PLP
.193c64		68		pla		                PLA             ; end setdp macro
.193c65		c2 20		rep #$20	                REP #$20        ; set A long
.193c67		a9 80 00	lda #$0080	                LDA #$0080;
.193c6a		85 28		sta $28		                STA OPL2_REG_REGION
.193c6c		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.193c6f		e2 20		sep #$20	                SEP #$20        ; set A short
.193c71		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193c73		29 0f		and #$0f	                AND #$0F
.193c75		85 32		sta $32		                STA OPL2_PARAMETER0
.193c77		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193c79		29 f0		and #$f0	                AND #$F0
.193c7b		05 32		ora $32		                ORA OPL2_PARAMETER0
.193c7d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193c7f		6b		rtl		                RTL
.193c80						OPL2_GET_RELEASE
.193c80		48		pha		                PHA             ; begin setdp macro
.193c81		08		php		                PHP
.193c82		c2 20		rep #$20	                REP #$20        ; set A long
.193c84		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193c87		5b		tcd		                TCD
.193c88		28		plp		                PLP
.193c89		68		pla		                PLA             ; end setdp macro
.193c8a		c2 20		rep #$20	                REP #$20        ; set A long
.193c8c		a9 80 00	lda #$0080	                LDA #$0080
.193c8f		85 28		sta $28		                STA OPL2_REG_REGION
.193c91		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.193c94		e2 20		sep #$20	                SEP #$20        ; set A short
.193c96		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193c98		29 0f		and #$0f	                AND #$0F
.193c9a		6b		rtl		                RTL
.193c9b						OPL2_SET_FNUMBER
.193c9b		48		pha		                PHA             ; begin setdp macro
.193c9c		08		php		                PHP
.193c9d		c2 20		rep #$20	                REP #$20        ; set A long
.193c9f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193ca2		5b		tcd		                TCD
.193ca3		28		plp		                PLP
.193ca4		68		pla		                PLA             ; end setdp macro
.193ca5		e2 20		sep #$20	                SEP #$20        ; set A short
.193ca7		18		clc		                CLC
.193ca8		a5 27		lda $27		                LDA OPL2_CHANNEL
.193caa		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193cac		69 a0		adc #$a0	                ADC #$A0
.193cae		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193cb0		a9 00		lda #$00	                LDA #$00
.193cb2		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193cb4		c2 30		rep #$30	                REP #$30        ; set A&X long
.193cb6		18		clc		                CLC
.193cb7		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193cba		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193cbc		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193cbe		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193cc1		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193cc3		e2 20		sep #$20	                SEP #$20        ; set A short
.193cc5		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.193cc7		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.193cc9		18		clc		                CLC
.193cca		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.193ccc		69 10		adc #$10	                ADC #$10
.193cce		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193cd0		a5 33		lda $33		                LDA OPL2_PARAMETER1
.193cd2		29 03		and #$03	                AND #$03
.193cd4		85 33		sta $33		                STA OPL2_PARAMETER1
.193cd6		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193cd8		29 fc		and #$fc	                AND #$FC
.193cda		05 33		ora $33		                ORA OPL2_PARAMETER1
.193cdc		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193cde		6b		rtl		                RTL
.193cdf						OPL2_GET_FNUMBER
.193cdf		48		pha		                PHA             ; begin setdp macro
.193ce0		08		php		                PHP
.193ce1		c2 20		rep #$20	                REP #$20        ; set A long
.193ce3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193ce6		5b		tcd		                TCD
.193ce7		28		plp		                PLP
.193ce8		68		pla		                PLA             ; end setdp macro
.193ce9		e2 20		sep #$20	                SEP #$20        ; set A short
.193ceb		18		clc		                CLC
.193cec		a5 27		lda $27		                LDA OPL2_CHANNEL
.193cee		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193cf0		69 a0		adc #$a0	                ADC #$A0
.193cf2		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193cf4		a9 00		lda #$00	                LDA #$00
.193cf6		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193cf8		c2 30		rep #$30	                REP #$30        ; set A&X long
.193cfa		18		clc		                CLC
.193cfb		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193cfe		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193d00		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193d02		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193d05		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193d07		e2 20		sep #$20	                SEP #$20        ; set A short
.193d09		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193d0b		85 32		sta $32		                STA OPL2_PARAMETER0
.193d0d		18		clc		                CLC
.193d0e		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.193d10		69 10		adc #$10	                ADC #$10
.193d12		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193d14		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193d16		29 03		and #$03	                AND #$03
.193d18		85 33		sta $33		                STA OPL2_PARAMETER1
.193d1a		6b		rtl		                RTL
.193d1b						OPL2_Set_Frequency
.193d1b		6b		rtl		                RTL
.193d1c						OPL2_Get_Frequency
.193d1c		6b		rtl		                RTL
.193d1d						OPL2_SET_BLOCK
.193d1d		48		pha		                PHA             ; begin setdp macro
.193d1e		08		php		                PHP
.193d1f		c2 20		rep #$20	                REP #$20        ; set A long
.193d21		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193d24		5b		tcd		                TCD
.193d25		28		plp		                PLP
.193d26		68		pla		                PLA             ; end setdp macro
.193d27		e2 20		sep #$20	                SEP #$20        ; set A short
.193d29		18		clc		                CLC
.193d2a		a5 27		lda $27		                LDA OPL2_CHANNEL
.193d2c		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193d2e		69 b0		adc #$b0	                ADC #$B0
.193d30		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193d32		a9 00		lda #$00	                LDA #$00
.193d34		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193d36		c2 30		rep #$30	                REP #$30        ; set A&X long
.193d38		18		clc		                CLC
.193d39		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193d3c		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193d3e		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193d40		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193d43		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193d45		e2 20		sep #$20	                SEP #$20        ; set A short
.193d47		a5 31		lda $31		                LDA OPL2_OCTAVE
.193d49		29 07		and #$07	                AND #$07
.193d4b		0a		asl a		                ASL
.193d4c		0a		asl a		                ASL
.193d4d		85 31		sta $31		                STA OPL2_OCTAVE
.193d4f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193d51		29 e3		and #$e3	                AND #$E3
.193d53		05 31		ora $31		                ORA OPL2_OCTAVE
.193d55		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193d57		60		rts		                RTS
.193d58						OPL2_SET_KEYON
.193d58		48		pha		                PHA             ; begin setdp macro
.193d59		08		php		                PHP
.193d5a		c2 20		rep #$20	                REP #$20        ; set A long
.193d5c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193d5f		5b		tcd		                TCD
.193d60		28		plp		                PLP
.193d61		68		pla		                PLA             ; end setdp macro
.193d62		e2 20		sep #$20	                SEP #$20        ; set A short
.193d64		18		clc		                CLC
.193d65		a5 27		lda $27		                LDA OPL2_CHANNEL
.193d67		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193d69		69 b0		adc #$b0	                ADC #$B0
.193d6b		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193d6d		a9 00		lda #$00	                LDA #$00
.193d6f		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193d71		c2 30		rep #$30	                REP #$30        ; set A&X long
.193d73		18		clc		                CLC
.193d74		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193d77		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193d79		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193d7b		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193d7e		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193d80		e2 20		sep #$20	                SEP #$20        ; set A short
.193d82		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193d84		29 01		and #$01	                AND #$01
.193d86		f0 02		beq $193d8a	                BEQ SET_KEYON_OFF
.193d88		a9 20		lda #$20	                LDA #$20
.193d8a						    SET_KEYON_OFF
.193d8a		85 32		sta $32		                STA OPL2_PARAMETER0
.193d8c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193d8e		29 df		and #$df	                AND #$DF
.193d90		05 32		ora $32		                ORA OPL2_PARAMETER0
.193d92		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193d94		60		rts		                RTS
.193d95						OPL2_SET_FEEDBACK
.193d95		48		pha		                PHA             ; begin setdp macro
.193d96		08		php		                PHP
.193d97		c2 20		rep #$20	                REP #$20        ; set A long
.193d99		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193d9c		5b		tcd		                TCD
.193d9d		28		plp		                PLP
.193d9e		68		pla		                PLA             ; end setdp macro
.193d9f		e2 20		sep #$20	                SEP #$20        ; set A short
.193da1		18		clc		              CLC
.193da2		a5 27		lda $27		              LDA OPL2_CHANNEL
.193da4		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193da6		69 c0		adc #$c0	              ADC #$C0
.193da8		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193daa		a9 00		lda #$00	              LDA #$00
.193dac		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193dae		c2 30		rep #$30	                REP #$30        ; set A&X long
.193db0		18		clc		              CLC
.193db1		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193db4		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193db6		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193db8		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193dbb		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193dbd		e2 20		sep #$20	                SEP #$20        ; set A short
.193dbf		a5 32		lda $32		              LDA OPL2_PARAMETER0
.193dc1		29 07		and #$07	              AND #$07
.193dc3		0a		asl a		              ASL
.193dc4		85 32		sta $32		              STA OPL2_PARAMETER0
.193dc6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193dc8		29 01		and #$01	              AND #$01
.193dca		05 32		ora $32		              ORA OPL2_PARAMETER0
.193dcc		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193dce		6b		rtl		                RTL
.193dcf						OPL2_SET_SYNTHMODE
.193dcf		48		pha		                PHA             ; begin setdp macro
.193dd0		08		php		                PHP
.193dd1		c2 20		rep #$20	                REP #$20        ; set A long
.193dd3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193dd6		5b		tcd		                TCD
.193dd7		28		plp		                PLP
.193dd8		68		pla		                PLA             ; end setdp macro
.193dd9		08		php		              PHP ; Push the Carry
.193dda		e2 20		sep #$20	                SEP #$20        ; set A short
.193ddc		18		clc		              CLC
.193ddd		a5 27		lda $27		              LDA OPL2_CHANNEL
.193ddf		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193de1		69 c0		adc #$c0	              ADC #$C0
.193de3		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193de5		a9 00		lda #$00	              LDA #$00
.193de7		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193de9		c2 30		rep #$30	                REP #$30        ; set A&X long
.193deb		18		clc		              CLC
.193dec		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193def		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193df1		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193df3		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193df6		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193df8		28		plp		              PLP ; Pull the Carry out
.193df9		e2 20		sep #$20	                SEP #$20        ; set A short
.193dfb		b0 08		bcs $193e05	              BCS OPL2_Set_Synthmode_Set;
.193dfd		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193dff		29 fe		and #$fe	              AND #$FE
.193e01		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193e03		80 06		bra $193e0b	              BRA OPL2_Set_Synthmode_Exit
.193e05						OPL2_Set_Synthmode_Set
.193e05		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193e07		09 01		ora #$01	              ORA #$01
.193e09		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193e0b						OPL2_Set_Synthmode_Exit
.193e0b		6b		rtl		                RTL
.193e0c						OPL2_SET_DEEPTREMOLO
.193e0c		48		pha		                PHA             ; begin setdp macro
.193e0d		08		php		                PHP
.193e0e		c2 20		rep #$20	                REP #$20        ; set A long
.193e10		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193e13		5b		tcd		                TCD
.193e14		28		plp		                PLP
.193e15		68		pla		                PLA             ; end setdp macro
.193e16		c2 20		rep #$20	                REP #$20        ; set A long
.193e18		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.193e1b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193e1d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193e20		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193e22		e2 20		sep #$20	                SEP #$20        ; set A short
.193e24		b0 08		bcs $193e2e	              BCS OPL2_Set_DeepTremolo_Set;
.193e26		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193e28		29 7f		and #$7f	              AND #$7F
.193e2a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193e2c		80 06		bra $193e34	              BRA OPL2_Set_DeepTremolo_Exit
.193e2e						OPL2_Set_DeepTremolo_Set
.193e2e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193e30		09 80		ora #$80	              ORA #$80
.193e32		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193e34						OPL2_Set_DeepTremolo_Exit
.193e34		6b		rtl		                RTL
.193e35						OPL2_SET_DEEPVIBRATO
.193e35		48		pha		                PHA             ; begin setdp macro
.193e36		08		php		                PHP
.193e37		c2 20		rep #$20	                REP #$20        ; set A long
.193e39		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193e3c		5b		tcd		                TCD
.193e3d		28		plp		                PLP
.193e3e		68		pla		                PLA             ; end setdp macro
.193e3f		c2 20		rep #$20	                REP #$20        ; set A long
.193e41		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.193e44		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193e46		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193e49		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193e4b		e2 20		sep #$20	                SEP #$20        ; set A short
.193e4d		b0 08		bcs $193e57	              BCS OPL2_Set_DeepVibrato_Set;
.193e4f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193e51		29 bf		and #$bf	              AND #$BF
.193e53		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193e55		80 06		bra $193e5d	              BRA OPL2_Set_DeepVibrato_Exit
.193e57						OPL2_Set_DeepVibrato_Set
.193e57		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193e59		09 40		ora #$40	              ORA #$40
.193e5b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193e5d						OPL2_Set_DeepVibrato_Exit
.193e5d		6b		rtl		                RTL
.193e5e						OPL2_SET_PERCUSSION
.193e5e		48		pha		                PHA             ; begin setdp macro
.193e5f		08		php		                PHP
.193e60		c2 20		rep #$20	                REP #$20        ; set A long
.193e62		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193e65		5b		tcd		                TCD
.193e66		28		plp		                PLP
.193e67		68		pla		                PLA             ; end setdp macro
.193e68		c2 20		rep #$20	                REP #$20        ; set A long
.193e6a		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.193e6d		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193e6f		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193e72		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193e74		e2 20		sep #$20	                SEP #$20        ; set A short
.193e76		b0 08		bcs $193e80	                BCS OPL2_Set_Percussion_Set;
.193e78		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193e7a		29 df		and #$df	                AND #$DF
.193e7c		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193e7e		80 06		bra $193e86	                BRA OPL2_Set_Percussion_Exit
.193e80						OPL2_Set_Percussion_Set
.193e80		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193e82		09 20		ora #$20	                ORA #$20
.193e84		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193e86						OPL2_Set_Percussion_Exit
.193e86		6b		rtl		                RTL
.193e87						OPL2_SET_DRUMS
.193e87		48		pha		                PHA             ; begin setdp macro
.193e88		08		php		                PHP
.193e89		c2 20		rep #$20	                REP #$20        ; set A long
.193e8b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193e8e		5b		tcd		                TCD
.193e8f		28		plp		                PLP
.193e90		68		pla		                PLA             ; end setdp macro
.193e91		c2 20		rep #$20	                REP #$20        ; set A long
.193e93		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.193e96		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193e98		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193e9b		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193e9d		e2 20		sep #$20	                SEP #$20        ; set A short
.193e9f		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193ea1		29 1f		and #$1f	                AND #$1F
.193ea3		85 32		sta $32		                STA OPL2_PARAMETER0
.193ea5		49 ff		eor #$ff	                EOR #$FF
.193ea7		85 33		sta $33		                STA OPL2_PARAMETER1
.193ea9		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193eab		25 33		and $33		                AND OPL2_PARAMETER1
.193ead		05 32		ora $32		                ORA OPL2_PARAMETER0
.193eaf		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193eb1		6b		rtl		                RTL
.193eb2						OPL2_SET_WAVEFORM
.193eb2		48		pha		                PHA             ; begin setdp macro
.193eb3		08		php		                PHP
.193eb4		c2 20		rep #$20	                REP #$20        ; set A long
.193eb6		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193eb9		5b		tcd		                TCD
.193eba		28		plp		                PLP
.193ebb		68		pla		                PLA             ; end setdp macro
.193ebc		c2 20		rep #$20	                REP #$20        ; set A long
.193ebe		a9 e0 00	lda #$00e0	                LDA #$00E0;
.193ec1		85 28		sta $28		                STA OPL2_REG_REGION
.193ec3		20 d7 3e	jsr $193ed7	                JSR OPL2_GET_REG_OFFSET
.193ec6		e2 20		sep #$20	                SEP #$20        ; set A short
.193ec8		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193eca		29 03		and #$03	                AND #$03
.193ecc		85 32		sta $32		                STA OPL2_PARAMETER0
.193ece		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193ed0		29 fc		and #$fc	                AND #$FC
.193ed2		05 32		ora $32		                ORA OPL2_PARAMETER0
.193ed4		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193ed6		6b		rtl		                RTL
.193ed7						OPL2_GET_REG_OFFSET
.193ed7		e2 30		sep #$30	                SEP #$30        ; set A&X short
.193ed9		a5 27		lda $27		                LDA OPL2_CHANNEL
.193edb		29 0f		and #$0f	                AND #$0F
.193edd		aa		tax		                TAX
.193ede		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.193ee0		d0 06		bne $193ee8	                BNE OPL2_Get_Register_Offset_l0
.193ee2		bf 1f 15 19	lda $19151f,x	                LDA @lregisterOffsets_operator0, X
.193ee6		80 04		bra $193eec	                BRA OPL2_Get_Register_Offset_exit
.193ee8						OPL2_Get_Register_Offset_l0
.193ee8		bf 28 15 19	lda $191528,x	                LDA @lregisterOffsets_operator1, X
.193eec						OPL2_Get_Register_Offset_exit
.193eec		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193eee		a9 00		lda #$00	                LDA #$00
.193ef0		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193ef2		c2 30		rep #$30	                REP #$30        ; set A&X long
.193ef4		18		clc		                CLC
.193ef5		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193ef8		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193efa		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.193efc		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193efe		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193f01		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193f03		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/sdcard_controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.193f04						ITRACE
.193f04		08		php		                PHP
.193f05		c2 30		rep #$30	                REP #$30        ; set A&X long
.193f07		8b		phb		                PHB                 ; Print the text
.193f08		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.193f0a		aa		tax		                TAX                 ; ... into X
.193f0b		e2 20		sep #$20	                SEP #$20        ; set A short
.193f0d		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.193f0f		48		pha		                PHA
.193f10		ab		plb		                PLB                 ; ... into B
.193f11		22 68 07 19	jsl $190768	                JSL IPUTS           ; Print the string
.193f15		c2 20		rep #$20	                REP #$20        ; set A long
.193f17		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.193f19		83 08		sta $08,s	                STA #8,S
.193f1b		a3 02		lda $02,s	                LDA #2,S
.193f1d		83 06		sta $06,s	                STA #6,S
.193f1f		ab		plb		                PLB
.193f20		68		pla		                PLA                 ; Clean up the stack
.193f21		68		pla		                PLA
.193f22		28		plp		                PLP
.193f23		6b		rtl		                RTL
.193f24						ISETTIMEOUT
.193f24		8b		phb		                PHB
.193f25		0b		phd		                PHD
.193f26		08		php		                PHP
.193f27		48		pha		                PHA             ; begin setdbr macro
.193f28		08		php		                PHP
.193f29		e2 20		sep #$20	                SEP #$20        ; set A short
.193f2b		a9 00		lda #$00	                LDA #0
.193f2d		48		pha		                PHA
.193f2e		ab		plb		                PLB
.193f2f		28		plp		                PLP
.193f30		68		pla		                PLA             ; end setdbr macro
.193f31		48		pha		                PHA             ; begin setdp macro
.193f32		08		php		                PHP
.193f33		c2 20		rep #$20	                REP #$20        ; set A long
.193f35		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193f38		5b		tcd		                TCD
.193f39		28		plp		                PLP
.193f3a		68		pla		                PLA             ; end setdp macro
.193f3b		78		sei		                SEI                             ; We don't want to be interrupted
.193f3c		e2 20		sep #$20	                SEP #$20        ; set A short
.193f3e		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.193f40		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.193f42		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.193f44		85 0c		sta $032c	                STA @b BIOS_FLAGS
.193f46		28		plp		done            PLP
.193f47		2b		pld		                PLD
.193f48		ab		plb		                PLB
.193f49		6b		rtl		                RTL
.193f4a						ICMDBLOCK
.193f4a		0b		phd		                PHD
.193f4b		08		php		                PHP
.193f4c		48		pha		                PHA             ; begin setdp macro
.193f4d		08		php		                PHP
.193f4e		c2 20		rep #$20	                REP #$20        ; set A long
.193f50		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193f53		5b		tcd		                TCD
.193f54		28		plp		                PLP
.193f55		68		pla		                PLA             ; end setdp macro
.193f56		e2 20		sep #$20	                SEP #$20        ; set A short
.193f58		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.193f5a		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.193f5c		d0 06		bne $193f64	                BNE ret_success             ; No: just return
.193f5e		22 af 68 19	jsl $1968af	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.193f62		90 0c		bcc $193f70	                BCC pass_failure
.193f64						ret_success
.193f64		e2 20		sep #$20	                SEP #$20        ; set A short
.193f66		64 00		stz $0320	                STZ BIOS_STATUS
.193f68		28		plp		                PLP
.193f69		2b		pld		                PLD
.193f6a		38		sec		                SEC
.193f6b		6b		rtl		                RTL
.193f6c						ret_failure
.193f6c		e2 20		sep #$20	                SEP #$20        ; set A short
.193f6e		85 00		sta $0320	                STA BIOS_STATUS
.193f70		28		plp		pass_failure    PLP
.193f71		2b		pld		                PLD
.193f72		18		clc		                CLC
.193f73		6b		rtl		                RTL
.193f74						IGETBLOCK
.193f74		5a		phy		                PHY
.193f75		0b		phd		                PHD
.193f76		8b		phb		                PHB
.193f77		08		php		                PHP
.193f78		48		pha		                PHA             ; begin setdbr macro
.193f79		08		php		                PHP
.193f7a		e2 20		sep #$20	                SEP #$20        ; set A short
.193f7c		a9 00		lda #$00	                LDA #0
.193f7e		48		pha		                PHA
.193f7f		ab		plb		                PLB
.193f80		28		plp		                PLP
.193f81		68		pla		                PLA             ; end setdbr macro
.193f82		48		pha		                PHA             ; begin setdp macro
.193f83		08		php		                PHP
.193f84		c2 20		rep #$20	                REP #$20        ; set A long
.193f86		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193f89		5b		tcd		                TCD
.193f8a		28		plp		                PLP
.193f8b		68		pla		                PLA             ; end setdp macro
.193f8c		e2 20		sep #$20	                SEP #$20        ; set A short
.193f8e		a0 00 00	ldy #$0000	                LDY #0
.193f91		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.193f93		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.193f95		c8		iny		                INY
.193f96		c0 00 02	cpy #$0200	                CPY #512
.193f99		d0 f8		bne $193f93	                BNE clr_loop
.193f9b		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.193f9d		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.193f9f		f0 14		beq $193fb5	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.193fa1		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.193fa3		f0 18		beq $193fbd	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.193fa5		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193fa7		f0 1c		beq $193fc5	                BEQ hd_getblock
.193fa9		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.193fab						ret_failure
.193fab		e2 20		sep #$20	                SEP #$20        ; set A short
.193fad		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.193faf		28		plp		                PLP
.193fb0		ab		plb		                PLB
.193fb1		2b		pld		                PLD
.193fb2		7a		ply		                PLY
.193fb3		38		sec		                SEC                                 ; Return failure
.193fb4		6b		rtl		                RTL
.193fb5		22 bb 5d 19	jsl $195dbb	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.193fb9		b0 12		bcs $193fcd	                BCS ret_success
.193fbb		80 ee		bra $193fab	                BRA ret_failure
.193fbd		22 b4 66 19	jsl $1966b4	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.193fc1		b0 0a		bcs $193fcd	                BCS ret_success
.193fc3		80 e6		bra $193fab	                BRA ret_failure
.193fc5		22 c8 6c 19	jsl $196cc8	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.193fc9		b0 02		bcs $193fcd	                BCS ret_success
.193fcb		80 de		bra $193fab	                BRA ret_failure
.193fcd						ret_success
.193fcd		e2 20		sep #$20	                SEP #$20        ; set A short
.193fcf		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.193fd1		28		plp		                PLP
.193fd2		ab		plb		                PLB
.193fd3		2b		pld		                PLD
.193fd4		7a		ply		                PLY
.193fd5		38		sec		                SEC                                 ; Return success
.193fd6		6b		rtl		                RTL
.193fd7						IPUTBLOCK
.193fd7		0b		phd		                PHD
.193fd8		8b		phb		                PHB
.193fd9		08		php		                PHP
.193fda		48		pha		                PHA             ; begin setdbr macro
.193fdb		08		php		                PHP
.193fdc		e2 20		sep #$20	                SEP #$20        ; set A short
.193fde		a9 00		lda #$00	                LDA #0
.193fe0		48		pha		                PHA
.193fe1		ab		plb		                PLB
.193fe2		28		plp		                PLP
.193fe3		68		pla		                PLA             ; end setdbr macro
.193fe4		48		pha		                PHA             ; begin setdp macro
.193fe5		08		php		                PHP
.193fe6		c2 20		rep #$20	                REP #$20        ; set A long
.193fe8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193feb		5b		tcd		                TCD
.193fec		28		plp		                PLP
.193fed		68		pla		                PLA             ; end setdp macro
.193fee		e2 20		sep #$20	                SEP #$20        ; set A short
.193ff0		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.193ff2		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.193ff4		f0 13		beq $194009	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.193ff6		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.193ff8		f0 17		beq $194011	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.193ffa		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193ffc		f0 1b		beq $194019	                BEQ hd_putblock
.193ffe		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.194000						ret_failure
.194000		e2 20		sep #$20	                SEP #$20        ; set A short
.194002		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.194004		28		plp		                PLP
.194005		ab		plb		                PLB
.194006		2b		pld		                PLD
.194007		18		clc		                CLC                                 ; Return failure
.194008		6b		rtl		                RTL
.194009		22 62 5e 19	jsl $195e62	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.19400d		90 f1		bcc $194000	                BCC ret_failure
.19400f		80 10		bra $194021	                BRA ret_success
.194011		22 19 67 19	jsl $196719	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.194015		90 e9		bcc $194000	                BCC ret_failure
.194017		80 08		bra $194021	                BRA ret_success
.194019		22 53 6d 19	jsl $196d53	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.19401d		90 e1		bcc $194000	                BCC ret_failure
.19401f		80 00		bra $194021	                BRA ret_success
.194021						ret_success
.194021		e2 20		sep #$20	                SEP #$20        ; set A short
.194023		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.194025		28		plp		                PLP
.194026		ab		plb		                PLB
.194027		2b		pld		                PLD
.194028		38		sec		                SEC                                 ; Return success
.194029		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.19402a						DOS_DIROPEN
.19402a		da		phx		                PHX
.19402b		5a		phy		                PHY
.19402c		0b		phd		                PHD
.19402d		8b		phb		                PHB
.19402e		08		php		                PHP
.19402f		48		pha		                PHA             ; begin setdbr macro
.194030		08		php		                PHP
.194031		e2 20		sep #$20	                SEP #$20        ; set A short
.194033		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194035		48		pha		                PHA
.194036		ab		plb		                PLB
.194037		28		plp		                PLP
.194038		68		pla		                PLA             ; end setdbr macro
.194039		48		pha		                PHA             ; begin setdp macro
.19403a		08		php		                PHP
.19403b		c2 20		rep #$20	                REP #$20        ; set A long
.19403d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194040		5b		tcd		                TCD
.194041		28		plp		                PLP
.194042		68		pla		                PLA             ; end setdp macro
.194043		ad 20 a0	lda $18a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.194046		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.194049		ad 22 a0	lda $18a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.19404c		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.19404f		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.194052		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194054		85 18		sta $0338	                STA DOS_DIR_PTR
.194056		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.194059		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.19405b		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.19405d		e2 20		sep #$20	                SEP #$20        ; set A short
.19405f		ad 01 a0	lda $18a001	                LDA FILE_SYSTEM             ; Check the file system
.194062		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.194064		d0 24		bne $19408a	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.194066						fetch_fat12
.194066		e2 20		sep #$20	                SEP #$20        ; set A short
.194068		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.19406a		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.19406d		c2 20		rep #$20	                REP #$20        ; set A long
.19406f		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.194071		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194073		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.194075		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194077		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.19407a		85 02		sta $0322	                STA BIOS_LBA
.19407c		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.19407f		85 04		sta $0324	                STA BIOS_LBA+2
.194081		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.194085		b0 1f		bcs $1940a6	                BCS do_success              ; If sucessful, set the directory cursor
.194087		82 84 18	brl $19590e	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.19408a						fetch_fat32
.19408a		e2 20		sep #$20	                SEP #$20        ; set A short
.19408c		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.19408e		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.194091		c2 20		rep #$20	                REP #$20        ; set A long
.194093		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.194096		85 10		sta $0330	                STA DOS_CLUS_ID
.194098		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.19409b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19409d		22 0d 46 19	jsl $19460d	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.1940a1		b0 03		bcs $1940a6	                BCS do_success              ; If successful: set the directory cursor
.1940a3		82 68 18	brl $19590e	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.1940a6		82 6c 18	brl $195915	do_success      BRL IF_SUCCESS
.1940a9						DOS_DIRFIRST
.1940a9		0b		phd		                PHD
.1940aa		08		php		                PHP
.1940ab		48		pha		                PHA             ; begin setdp macro
.1940ac		08		php		                PHP
.1940ad		c2 20		rep #$20	                REP #$20        ; set A long
.1940af		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1940b2		5b		tcd		                TCD
.1940b3		28		plp		                PLP
.1940b4		68		pla		                PLA             ; end setdp macro
.1940b5		c2 20		rep #$20	                REP #$20        ; set A long
.1940b7		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.1940ba		85 18		sta $0338	                STA DOS_DIR_PTR
.1940bc		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.1940bf		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.1940c1		28		plp		                PLP
.1940c2		2b		pld		                PLD
.1940c3		6b		rtl		                RTL
.1940c4						DOS_DIRNEXT
.1940c4		da		phx		                PHX
.1940c5		5a		phy		                PHY
.1940c6		0b		phd		                PHD
.1940c7		8b		phb		                PHB
.1940c8		08		php		                PHP
.1940c9		48		pha		                PHA             ; begin setdbr macro
.1940ca		08		php		                PHP
.1940cb		e2 20		sep #$20	                SEP #$20        ; set A short
.1940cd		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1940cf		48		pha		                PHA
.1940d0		ab		plb		                PLB
.1940d1		28		plp		                PLP
.1940d2		68		pla		                PLA             ; end setdbr macro
.1940d3		48		pha		                PHA             ; begin setdp macro
.1940d4		08		php		                PHP
.1940d5		c2 20		rep #$20	                REP #$20        ; set A long
.1940d7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1940da		5b		tcd		                TCD
.1940db		28		plp		                PLP
.1940dc		68		pla		                PLA             ; end setdp macro
.1940dd		c2 20		rep #$20	                REP #$20        ; set A long
.1940df		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.1940e0		a5 18		lda $0338	                LDA DOS_DIR_PTR
.1940e2		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.1940e5		85 18		sta $0338	                STA DOS_DIR_PTR
.1940e7		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.1940e9		69 00 00	adc #$0000	                ADC #0
.1940ec		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.1940ee		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.1940ef		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.1940f2		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.1940f4		85 28		sta $0348	                STA DOS_TEMP
.1940f6		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER_END
.1940f9		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.1940fb		85 2a		sta $034a	                STA DOS_TEMP+2
.1940fd		30 0c		bmi $19410b	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.1940ff		f0 03		beq $194104	                BEQ check_lower
.194101		82 11 18	brl $195915	                BRL IF_SUCCESS
.194104		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.194106		f0 03		beq $19410b	                BEQ get_next_block
.194108		82 0a 18	brl $195915	                BRL IF_SUCCESS
.19410b						get_next_block
.19410b		e2 20		sep #$20	                SEP #$20        ; set A short
.19410d		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.194110		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.194112		f0 38		beq $19414c	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.194114						next_sector
.194114		c2 20		rep #$20	                REP #$20        ; set A long
.194116		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.194119		1a		inc a		                INC A
.19411a		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.19411d		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.194120		d0 07		bne $194129	                BNE read_sector
.194122		e2 20		sep #$20	                SEP #$20        ; set A short
.194124		a9 00		lda #$00	                LDA #0
.194126		82 e1 17	brl $19590a	                BRL IF_FAILURE
.194129						read_sector
.194129		c2 20		rep #$20	                REP #$20        ; set A long
.19412b		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.19412e		85 02		sta $0322	                STA BIOS_LBA
.194130		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.194133		85 04		sta $0324	                STA BIOS_LBA+2
.194135		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.194138		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19413a		85 18		sta $0338	                STA DOS_DIR_PTR
.19413c		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.19413f		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194141		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.194143		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.194147		b0 39		bcs $194182	                BCS do_success              ; If successful: set the directory cursor
.194149		82 c2 17	brl $19590e	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.19414c						next_cluster
.19414c		c2 20		rep #$20	                REP #$20        ; set A long
.19414e		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.194151		85 10		sta $0330	                STA DOS_CLUS_ID
.194153		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.194156		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194158		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.19415b		85 1c		sta $033c	                STA DOS_BUFF_PTR
.19415d		85 18		sta $0338	                STA DOS_DIR_PTR
.19415f		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.194162		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194164		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.194166		22 21 4a 19	jsl $194a21	                JSL NEXTCLUSTER             ; Try to find the next cluster
.19416a		b0 03		bcs $19416f	                BCS set_next
.19416c		82 9f 17	brl $19590e	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.19416f		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.194171		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.194174		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194176		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.194179		22 0d 46 19	jsl $19460d	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.19417d		b0 03		bcs $194182	                BCS do_success              ; If successful: set the directory cursor
.19417f		82 8c 17	brl $19590e	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.194182		82 90 17	brl $195915	do_success      BRL IF_SUCCESS
.194185						DOS_DIRFINDFREE
.194185		da		phx		                PHX
.194186		5a		phy		                PHY
.194187		0b		phd		                PHD
.194188		8b		phb		                PHB
.194189		08		php		                PHP
.19418a		48		pha		                PHA             ; begin setdbr macro
.19418b		08		php		                PHP
.19418c		e2 20		sep #$20	                SEP #$20        ; set A short
.19418e		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194190		48		pha		                PHA
.194191		ab		plb		                PLB
.194192		28		plp		                PLP
.194193		68		pla		                PLA             ; end setdbr macro
.194194		48		pha		                PHA             ; begin setdp macro
.194195		08		php		                PHP
.194196		c2 20		rep #$20	                REP #$20        ; set A long
.194198		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19419b		5b		tcd		                TCD
.19419c		28		plp		                PLP
.19419d		68		pla		                PLA             ; end setdp macro
.19419e		22 2c 54 19	jsl $19542c	                JSL IF_DIROPEN
.1941a2		b0 06		bcs $1941aa	                BCS start_walk
.1941a4		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.1941a7		82 28 00	brl $1941d2	                BRL ret_failure
.1941aa		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.1941ad						chk_entry
.1941ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1941af		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.1941b1		f0 1c		beq $1941cf	                BEQ ret_success             ; If 0: we have a blank... return it
.1941b3		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.1941b5		f0 18		beq $1941cf	                BEQ ret_success             ; Yes: return it
.1941b7		22 66 54 19	jsl $195466	                JSL IF_DIRNEXT              ; Go to the next directory entry
.1941bb		b0 ed		bcs $1941aa	                BCS start_walk              ; If we got one, start walking it
.1941bd		22 d5 41 19	jsl $1941d5	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.1941c1		90 0f		bcc $1941d2	                BCC ret_failure             ; If that didn't work, return the failure
.1941c3		c2 20		rep #$20	                REP #$20        ; set A long
.1941c5		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.1941c8		85 18		sta $0338	                STA DOS_DIR_PTR
.1941ca		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.1941cd		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.1941cf		82 43 17	brl $195915	ret_success     BRL IF_SUCCESS
.1941d2		82 35 17	brl $19590a	ret_failure     BRL IF_FAILURE
.1941d5						DOS_DIRAPPEND
.1941d5		da		phx		                PHX
.1941d6		8b		phb		                PHB
.1941d7		0b		phd		                PHD
.1941d8		08		php		                PHP
.1941d9		48		pha		                PHA             ; begin setdbr macro
.1941da		08		php		                PHP
.1941db		e2 20		sep #$20	                SEP #$20        ; set A short
.1941dd		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1941df		48		pha		                PHA
.1941e0		ab		plb		                PLB
.1941e1		28		plp		                PLP
.1941e2		68		pla		                PLA             ; end setdbr macro
.1941e3		48		pha		                PHA             ; begin setdp macro
.1941e4		08		php		                PHP
.1941e5		c2 20		rep #$20	                REP #$20        ; set A long
.1941e7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1941ea		5b		tcd		                TCD
.1941eb		28		plp		                PLP
.1941ec		68		pla		                PLA             ; end setdp macro
.1941ed		e2 20		sep #$20	                SEP #$20        ; set A short
.1941ef		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE
.1941f2		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.1941f4		f0 09		beq $1941ff	                BEQ clr_sector                  ; Yes: clear out the directory data
.1941f6						ret_failure
.1941f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1941f8		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.1941fa		85 0e		sta $032e	                STA DOS_STATUS
.1941fc		82 3e 00	brl $19423d	                BRL pass_failure
.1941ff						clr_sector
.1941ff		c2 20		rep #$20	                REP #$20        ; set A long
.194201		a9 00 00	lda #$0000	                LDA #0
.194204		a2 00 00	ldx #$0000	                LDX #0
.194207		9d 00 a1	sta $18a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.19420a		e8		inx		                INX
.19420b		e8		inx		                INX
.19420c		e0 00 02	cpx #$0200	                CPX #512
.19420f		d0 f6		bne $194207	                BNE clr_loop
.194211		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.194214		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194216		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.194219		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.19421b		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.19421e		85 10		sta $0330	                STA DOS_CLUS_ID
.194220		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.194223		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194225		22 42 4e 19	jsl $194e42	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.194229		90 12		bcc $19423d	                BCC pass_failure                ; If there was an error, pass it up the chain
.19422b		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.19422e		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.194231		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.194234		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.194237		28		plp		ret_success     PLP
.194238		2b		pld		                PLD
.194239		ab		plb		                PLB
.19423a		fa		plx		                PLX
.19423b		38		sec		                SEC
.19423c		6b		rtl		                RTL
.19423d		28		plp		pass_failure    PLP
.19423e		2b		pld		                PLD
.19423f		ab		plb		                PLB
.194240		fa		plx		                PLX
.194241		18		clc		                CLC
.194242		6b		rtl		                RTL
.194243						DOS_DIRWRITE
.194243		da		phx		                PHX
.194244		5a		phy		                PHY
.194245		0b		phd		                PHD
.194246		8b		phb		                PHB
.194247		08		php		                PHP
.194248		48		pha		                PHA             ; begin setdbr macro
.194249		08		php		                PHP
.19424a		e2 20		sep #$20	                SEP #$20        ; set A short
.19424c		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19424e		48		pha		                PHA
.19424f		ab		plb		                PLB
.194250		28		plp		                PLP
.194251		68		pla		                PLA             ; end setdbr macro
.194252		48		pha		                PHA             ; begin setdp macro
.194253		08		php		                PHP
.194254		c2 20		rep #$20	                REP #$20        ; set A long
.194256		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194259		5b		tcd		                TCD
.19425a		28		plp		                PLP
.19425b		68		pla		                PLA             ; end setdp macro
.19425c		e2 20		sep #$20	                SEP #$20        ; set A short
.19425e		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.194261		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.194263		f0 1f		beq $194284	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.194265						write_sector
.194265		c2 20		rep #$20	                REP #$20        ; set A long
.194267		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.19426a		85 02		sta $0322	                STA BIOS_LBA
.19426c		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.19426f		85 04		sta $0324	                STA BIOS_LBA+2
.194271		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.194274		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194276		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.194279		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19427b		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.19427f		b0 1f		bcs $1942a0	                BCS ret_success
.194281		82 86 16	brl $19590a	ret_failure     BRL IF_FAILURE
.194284						write_cluster
.194284		c2 20		rep #$20	                REP #$20        ; set A long
.194286		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.194289		85 10		sta $0330	                STA DOS_CLUS_ID
.19428b		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.19428e		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194290		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.194293		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194295		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.194298		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.19429a		22 4a 46 19	jsl $19464a	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.19429e		90 e1		bcc $194281	                BCC ret_failure
.1942a0		82 72 16	brl $195915	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=24						DOS_ERR_EOF = 24                        ; At end of file
=25						DOS_ERR_PGZSIG = 25                     ; File does not have the PGZ signature
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\Includes/sdos_fat_vars_user_inc.asm

=$18a000					    DOS_HIGH_VARIABLES      = $18A000
=$18a000					    DEVICE                  = $18A000       ; 1 byte - The number of the block device
=$18a001					    FILE_SYSTEM             = $18A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$18a002					    PARTITION               = $18A002       ; 1 byte - The number of the partitions on the device
=$18a003					    SECTORS_PER_CLUSTER     = $18A003       ; 1 byte - The number of sectors in a cluster
=$18a004					    FIRSTSECTOR             = $18A004       ; 4 bytes - The LBA of the first sector on the volume
=$18a008					    SECTORCOUNT             = $18A008       ; 4 bytes - The number of sectors in the volume
=$18a00c					    NUM_RSRV_SEC            = $18A00C       ; 2 bytes - The number of hidden or reserved sectors
=$18a00e					    CLUSTER_SIZE            = $18A00E       ; 2 bytes - The size of a cluster in bytes
=$18a010					    SEC_PER_FAT             = $18A010       ; 4 bytes - The number of sectors per FAT
=$18a014					    FAT_BEGIN_LBA           = $18A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$18a018					    FAT2_BEGIN_LBA          = $18A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$18a01c					    CLUSTER_BEGIN_LBA       = $18A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$18a020					    ROOT_DIR_FIRST_CLUSTER  = $18A020       ; 4 bytes - The number of the first cluster in the root directory
=$18a024					    ROOT_DIR_MAX_ENTRY      = $18A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$18a026					    VOLUME_ID               = $18A026       ; 4 bytes - The ID of the volume
=$18a02a					    DOS_CURR_CLUS           = $18A02A       ; 4 bytes - The current cluster (for delete)
=$18a02e					    DOS_NEXT_CLUS           = $18A02E       ; 4 bytes - The next cluster in a file (for delete)
=$18a032					    DOS_DIR_BLOCK_ID        = $18A032       ; 4 bytes - The ID of the current directory block
=$18a036					    DOS_NEW_CLUSTER         = $18A036       ; 4 bytes - Space to store a newly written cluster ID
=$18a03a					    DOS_SHORT_NAME          = $18A03A       ; 11 bytes - The short name for a desired file
=$18a045					    DOS_DIR_TYPE            = $18A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$18a046					    DOS_CURR_DIR_ID         = $18A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$18a04a					    DOS_DEV_NAMES           = $18A04A       ; 4 byte - pointer to the linked list of device names
=$18a04e					    FDC_MOTOR_TIMER         = $18A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$18a050					    DOS_MOUNT_DEV           = $18A050       ; 1 byte - the device code of the currently mounted device
=$18a100					    DOS_DIR_CLUSTER         = $18A100       ; 512 bytes - A buffer for directory entries
=$18a300					    DOS_DIR_CLUSTER_END     = $18A300       ; The byte just past the end of the directory cluster buffer
=$18a300					    DOS_SECTOR              = $18A300       ; 512 bytes - A buffer for block device read/write
=$18a500					    DOS_SECTOR_END          = $18A500       ; The byte just past the end of the cluster buffer
=$18a500					    DOS_FAT_SECTORS         = $18A500       ; 1024 bytes - two sectors worth of the FAT
=$18a900					    DOS_FAT_SECTORS_END     = $18A900       ; The byte just past the end of the FAT buffers
=$18a900					    DOS_BOOT_SECTOR         = $18A900       ; A sector for holding the boot sector
=$18ab00					    DOS_BOOT_SECTOR_END     = $18AB00
=$18ab00					    DOS_SPARE_SECTOR        = $18AB00       ; A spare 512 byte buffer for loading sectors
=$18ad00					    DOS_SPARE_SECTOR_END    = $18AD00
=$18ad00					    DOS_SPARE_FD            = $18AD00       ; A spare file descriptor buffer
=1617184					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=1617184					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=1617440					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$18b000					    DOS_FILE_BUFFS          = $18B000
=1622016					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.1942a3						DOS_INIT
.1942a3		8b		phb		                PHB
.1942a4		0b		phd		                PHD
.1942a5		08		php		                PHP
.1942a6		48		pha		                PHA             ; begin setdbr macro
.1942a7		08		php		                PHP
.1942a8		e2 20		sep #$20	                SEP #$20        ; set A short
.1942aa		a9 00		lda #$00	                LDA #0
.1942ac		48		pha		                PHA
.1942ad		ab		plb		                PLB
.1942ae		28		plp		                PLP
.1942af		68		pla		                PLA             ; end setdbr macro
.1942b0		48		pha		                PHA             ; begin setdp macro
.1942b1		08		php		                PHP
.1942b2		c2 20		rep #$20	                REP #$20        ; set A long
.1942b4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1942b7		5b		tcd		                TCD
.1942b8		28		plp		                PLP
.1942b9		68		pla		                PLA             ; end setdp macro
.1942ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1942bc		c2 10		rep #$10	                REP #$10        ; set X long
.1942be		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.1942c1		a9 00		lda #$00	                LDA #0
.1942c3		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.1942c6		e8		inx		                INX
.1942c7		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.1942ca		d0 f7		bne $1942c3	                BNE b0_clr_loop
.1942cc		48		pha		                PHA             ; begin setdbr macro
.1942cd		08		php		                PHP
.1942ce		e2 20		sep #$20	                SEP #$20        ; set A short
.1942d0		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1942d2		48		pha		                PHA
.1942d3		ab		plb		                PLB
.1942d4		28		plp		                PLP
.1942d5		68		pla		                PLA             ; end setdbr macro
.1942d6		48		pha		                PHA             ; begin setdp macro
.1942d7		08		php		                PHP
.1942d8		c2 20		rep #$20	                REP #$20        ; set A long
.1942da		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1942dd		5b		tcd		                TCD
.1942de		28		plp		                PLP
.1942df		68		pla		                PLA             ; end setdp macro
.1942e0		e2 20		sep #$20	                SEP #$20        ; set A short
.1942e2		c2 10		rep #$10	                REP #$10        ; set X long
.1942e4		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.1942e7		a9 00		lda #$00	                LDA #0
.1942e9		9d 00 a0	sta $18a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.1942ec		e8		inx		                INX
.1942ed		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.1942f0		d0 f7		bne $1942e9	                BNE b38_clr_loop
.1942f2		c2 20		rep #$20	                REP #$20        ; set A long
.1942f4		a9 a2 46	lda #$46a2	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.1942f7		8f 4a a0 18	sta $18a04a	                STA @l DOS_DEV_NAMES
.1942fb		a9 19 00	lda #$0019	                LDA #`DOS_HD_DESC
.1942fe		8f 4c a0 18	sta $18a04c	                STA @l DOS_DEV_NAMES+2
.194302		e2 20		sep #$20	                SEP #$20        ; set A short
.194304		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.194306		85 01		sta $0321	                STA BIOS_DEV
.194308		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.19430a		8f 50 a0 18	sta $18a050	                STA @l DOS_MOUNT_DEV
.19430e		a9 00		lda #$00	                LDA #0
.194310		a2 00 00	ldx #$0000	                LDX #0
.194313		9d 20 ad	sta $18ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.194316		e8		inx		                INX
.194317		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.19431a		d0 f7		bne $194313	                BNE fd_zero_loop
.19431c		a9 00		lda #$00	                LDA #0
.19431e		a2 00 00	ldx #$0000	                LDX #0
.194321		9d 00 b0	sta $18b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.194324		e8		inx		                INX
.194325		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.194328		d0 f7		bne $194321	                BNE sect_zero_loop
.19432a		c2 20		rep #$20	                REP #$20        ; set A long
.19432c		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.19432f		85 20		sta $0340	                STA @b DOS_FD_PTR
.194331		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.194334		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.194336		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.194339		85 28		sta $0348	                STA @b DOS_TEMP
.19433b		a9 18 00	lda #$0018	                LDA #`DOS_FILE_BUFFS
.19433e		85 2a		sta $034a	                STA @b DOS_TEMP+2
.194340		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.194343		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.194346		a5 28		lda $0348	                LDA @b DOS_TEMP
.194348		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19434a		c8		iny		                INY
.19434b		c8		iny		                INY
.19434c		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.19434e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194350		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.194351		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.194353		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.194356		85 20		sta $0340	                STA @b DOS_FD_PTR
.194358		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.19435a		69 00 00	adc #$0000	                ADC #0
.19435d		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.19435f		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.194360		a5 28		lda $0348	                LDA @b DOS_TEMP
.194362		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.194365		85 28		sta $0348	                STA @b DOS_TEMP
.194367		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.194369		69 00 00	adc #$0000	                ADC #0
.19436c		85 2a		sta $034a	                STA @b DOS_TEMP+2
.19436e		ca		dex		                DEX                     ; Count down the descriptors...
.19436f		d0 d2		bne $194343	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.194371		28		plp		                PLP
.194372		2b		pld		                PLD
.194373		ab		plb		                PLB
.194374		6b		rtl		                RTL
.194375						DOS_MOUNT
.194375		8b		phb		                PHB
.194376		0b		phd		                PHD
.194377		08		php		                PHP
.194378		48		pha		                PHA             ; begin setdbr macro
.194379		08		php		                PHP
.19437a		e2 20		sep #$20	                SEP #$20        ; set A short
.19437c		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19437e		48		pha		                PHA
.19437f		ab		plb		                PLB
.194380		28		plp		                PLP
.194381		68		pla		                PLA             ; end setdbr macro
.194382		48		pha		                PHA             ; begin setdp macro
.194383		08		php		                PHP
.194384		c2 20		rep #$20	                REP #$20        ; set A long
.194386		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194389		5b		tcd		                TCD
.19438a		28		plp		                PLP
.19438b		68		pla		                PLA             ; end setdp macro
.19438c		e2 20		sep #$20	                SEP #$20        ; set A short
.19438e		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.194390		8f 50 a0 18	sta $18a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.194394		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.194396		f0 1f		beq $1943b7	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.194398		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.19439a		f0 26		beq $1943c2	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.19439c		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.19439e		f0 0b		beq $1943ab	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.1943a0		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.1943a2		85 0e		sta $032e	                STA DOS_STATUS
.1943a4		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.1943a6		85 00		sta $0320	                STA BIOS_STATUS
.1943a8		82 7c 01	brl $194527	                BRL ret_failure
.1943ab		22 85 67 19	jsl $196785	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.1943af		b0 03		bcs $1943b4	                BCS fdc_success
.1943b1		82 73 01	brl $194527	                BRL ret_failure
.1943b4		82 67 01	brl $19451e	fdc_success     BRL ret_success
.1943b7		22 6d 5d 19	jsl $195d6d	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.1943bb		b0 10		bcs $1943cd	                BCS get_mbr             ; Continue if success
.1943bd		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.1943bf		82 65 01	brl $194527	                BRL ret_failure
.1943c2		22 cd 6b 19	jsl $196bcd	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.1943c6		b0 05		bcs $1943cd	                BCS get_mbr             ; Continue if success
.1943c8		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.1943ca		82 5a 01	brl $194527	                BRL ret_failure
.1943cd						get_mbr
.1943cd		c2 30		rep #$30	                REP #$30        ; set A&X long
.1943cf		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.1943d1		64 04		stz $0324	                STZ BIOS_LBA+2
.1943d3		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.1943d6		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1943d8		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.1943db		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1943dd		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.1943e1		b0 07		bcs $1943ea	                BCS chk_signature       ; If success, check the signature bytes
.1943e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1943e5		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.1943e7		82 3d 01	brl $194527	                BRL ret_failure
.1943ea						chk_signature
.1943ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1943ec		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.1943ef		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.1943f1		d0 07		bne $1943fa	                BNE not_mbr             ; No: signal we could find the MBR
.1943f3		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.1943f6		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.1943f8		f0 05		beq $1943ff	                BEQ chk_part_type       ; Yes: we have an MBR
.1943fa		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.1943fc		82 28 01	brl $194527	                BRL ret_failure
.1943ff		ad c2 a4	lda $18a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.194402		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.194404		f0 05		beq $19440b	                BEQ get_LBA             ; Is FAT32 with LBA?
.194406		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.194408		82 1c 01	brl $194527	                BRL ret_failure
.19440b		8d 01 a0	sta $18a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.19440e		c2 20		rep #$20	                REP #$20        ; set A long
.194410		ad c6 a4	lda $18a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.194413		8d 04 a0	sta $18a004	                STA FIRSTSECTOR
.194416		ad c8 a4	lda $18a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.194419		8d 06 a0	sta $18a006	                STA FIRSTSECTOR+2
.19441c		ad cb a4	lda $18a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.19441f		8d 08 a0	sta $18a008	                STA SECTORCOUNT
.194422		ad cd a4	lda $18a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.194425		8d 0a a0	sta $18a00a	                STA SECTORCOUNT+2
.194428		e2 20		sep #$20	                SEP #$20        ; set A short
.19442a		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.19442c		8d 00 a0	sta $18a000	                STA DEVICE
.19442f		a9 00		lda #$00	                LDA #0
.194431		8d 02 a0	sta $18a002	                STA PARTITION           ; For the moment, we only support the first partition
.194434		c2 20		rep #$20	                REP #$20        ; set A long
.194436		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.194439		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19443b		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.19443e		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194440		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.194443		85 02		sta $0322	                STA BIOS_LBA
.194445		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.194448		85 04		sta $0324	                STA BIOS_LBA+2
.19444a		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.19444e		b0 1c		bcs $19446c	                BCS get_first_sec       ; Got it? Start parsing it
.194450		e2 20		sep #$20	                SEP #$20        ; set A short
.194452		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.194454		82 d0 00	brl $194527	                BRL ret_failure
.194457						chk_bpb_sig
.194457		e2 20		sep #$20	                SEP #$20        ; set A short
.194459		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.19445c		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.19445e		d0 07		bne $194467	                BNE not_bpb             ; No: signal we could find the volume ID
.194460		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.194463		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.194465		f0 05		beq $19446c	                BEQ get_first_sec       ; Yes: we have an volume ID
.194467		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.194469		82 bb 00	brl $194527	                BRL ret_failure
.19446c						get_first_sec
.19446c		c2 20		rep #$20	                REP #$20        ; set A long
.19446e		ad 2c a3	lda $18a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.194471		8d 20 a0	sta $18a020	                STA ROOT_DIR_FIRST_CLUSTER
.194474		ad 2e a3	lda $18a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.194477		8d 22 a0	sta $18a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.19447a		ad 0e a3	lda $18a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.19447d		8d 0c a0	sta $18a00c	                STA NUM_RSRV_SEC
.194480		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.194481		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.194484		6d 0c a0	adc $18a00c	                ADC NUM_RSRV_SEC
.194487		8d 14 a0	sta $18a014	                STA FAT_BEGIN_LBA
.19448a		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.19448d		69 00 00	adc #$0000	                ADC #0
.194490		8d 16 a0	sta $18a016	                STA FAT_BEGIN_LBA+2
.194493		e2 20		sep #$20	                SEP #$20        ; set A short
.194495		a2 00 00	ldx #$0000	                LDX #0
.194498		bf 24 a3 18	lda $18a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.19449c		9f 10 a0 18	sta $18a010,x	                STA @l SEC_PER_FAT,X
.1944a0		e8		inx		                INX
.1944a1		e0 04 00	cpx #$0004	                CPX #4
.1944a4		d0 f2		bne $194498	                BNE cpy_secperfat
.1944a6		ad 10 a0	lda $18a010	                LDA SEC_PER_FAT
.1944a9		0a		asl a		                ASL A
.1944aa		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.1944ad		ad 11 a0	lda $18a011	                LDA SEC_PER_FAT+1
.1944b0		2a		rol a		                ROL A
.1944b1		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.1944b4		ad 12 a0	lda $18a012	                LDA SEC_PER_FAT+2
.1944b7		2a		rol a		                ROL A
.1944b8		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.1944bb		ad 13 a0	lda $18a013	                LDA SEC_PER_FAT+3
.1944be		2a		rol a		                ROL A
.1944bf		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.1944c2		18		clc		                CLC
.1944c3		ad 1c a0	lda $18a01c	                LDA CLUSTER_BEGIN_LBA
.1944c6		6d 14 a0	adc $18a014	                ADC FAT_BEGIN_LBA
.1944c9		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.1944cc		ad 1d a0	lda $18a01d	                LDA CLUSTER_BEGIN_LBA+1
.1944cf		6d 15 a0	adc $18a015	                ADC FAT_BEGIN_LBA+1
.1944d2		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.1944d5		ad 1e a0	lda $18a01e	                LDA CLUSTER_BEGIN_LBA+2
.1944d8		6d 16 a0	adc $18a016	                ADC FAT_BEGIN_LBA+2
.1944db		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.1944de		ad 1f a0	lda $18a01f	                LDA CLUSTER_BEGIN_LBA+3
.1944e1		6d 17 a0	adc $18a017	                ADC FAT_BEGIN_LBA+3
.1944e4		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.1944e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1944e9		ad 0d a3	lda $18a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.1944ec		8d 03 a0	sta $18a003	                STA SECTORS_PER_CLUSTER
.1944ef		18		clc		                CLC
.1944f0		ad 14 a0	lda $18a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.1944f3		6d 10 a0	adc $18a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.1944f6		8d 18 a0	sta $18a018	                STA FAT2_BEGIN_LBA
.1944f9		ad 15 a0	lda $18a015	                LDA FAT_BEGIN_LBA+1
.1944fc		6d 11 a0	adc $18a011	                ADC SEC_PER_FAT+1
.1944ff		8d 19 a0	sta $18a019	                STA FAT2_BEGIN_LBA+1
.194502		ad 16 a0	lda $18a016	                LDA FAT_BEGIN_LBA+2
.194505		6d 12 a0	adc $18a012	                ADC SEC_PER_FAT+2
.194508		8d 1a a0	sta $18a01a	                STA FAT2_BEGIN_LBA+2
.19450b		ad 17 a0	lda $18a017	                LDA FAT_BEGIN_LBA+3
.19450e		6d 13 a0	adc $18a013	                ADC SEC_PER_FAT+3
.194511		8d 1b a0	sta $18a01b	                STA FAT2_BEGIN_LBA+3
.194514		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.194516		8d 0e a0	sta $18a00e	                STA CLUSTER_SIZE
.194519		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.19451b		8d 0f a0	sta $18a00f	                STA CLUSTER_SIZE+1
.19451e						ret_success
.19451e		e2 20		sep #$20	                SEP #$20        ; set A short
.194520		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.194522		28		plp		                PLP
.194523		2b		pld		                PLD
.194524		ab		plb		                PLB
.194525		38		sec		                SEC
.194526		6b		rtl		                RTL
.194527						ret_failure
.194527		e2 20		sep #$20	                SEP #$20        ; set A short
.194529		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.19452b		28		plp		                PLP
.19452c		2b		pld		                PLD
.19452d		ab		plb		                PLB
.19452e		18		clc		                CLC
.19452f		6b		rtl		                RTL
.194530						DOS_TESTBOOT
.194530		8b		phb		                PHB
.194531		0b		phd		                PHD
.194532		da		phx		                PHX
.194533		08		php		                PHP
.194534		48		pha		                PHA             ; begin setdbr macro
.194535		08		php		                PHP
.194536		e2 20		sep #$20	                SEP #$20        ; set A short
.194538		a9 00		lda #$00	                LDA #0
.19453a		48		pha		                PHA
.19453b		ab		plb		                PLB
.19453c		28		plp		                PLP
.19453d		68		pla		                PLA             ; end setdbr macro
.19453e		48		pha		                PHA             ; begin setdp macro
.19453f		08		php		                PHP
.194540		c2 20		rep #$20	                REP #$20        ; set A long
.194542		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194545		5b		tcd		                TCD
.194546		28		plp		                PLP
.194547		68		pla		                PLA             ; end setdp macro
.194548		c2 10		rep #$10	                REP #$10        ; set X long
.19454a						chk_dev
.19454a		e2 20		sep #$20	                SEP #$20        ; set A short
.19454c		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.19454e		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.194550		f0 24		beq $194576	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.194552		c2 30		rep #$30	                REP #$30        ; set A&X long
.194554		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.194557		85 02		sta $0322	                STA @b BIOS_LBA
.194559		85 04		sta $0324	                STA @b BIOS_LBA+2
.19455b		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.19455e		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.194560		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.194563		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.194565		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.194569		b0 03		bcs $19456e	                BCS chk_mbr_brl
.19456b		82 47 00	brl $1945b5	                BRL done                    ; If failed... just return
.19456e						chk_mbr_brl
.19456e		e2 20		sep #$20	                SEP #$20        ; set A short
.194570		af 00 a3 18	lda $18a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.194574		80 04		bra $19457a	                BRA chk_brl
.194576		af 3e a3 18	lda $18a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.19457a		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.19457c		f0 06		beq $194584	                BEQ chk_magic               ; Yes: check for the magic text
.19457e		c9 82		cmp #$82	                CMP #$82
.194580		f0 02		beq $194584	                BEQ chk_magic
.194582		80 31		bra $1945b5	                BRA done                    ; No: just return
.194584		a2 00 00	ldx #$0000	chk_magic       LDX #0
.194587		bf 03 a3 18	lda $18a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.19458b		df ba 45 19	cmp $1945ba,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.19458f		d0 24		bne $1945b5	                BNE done                    ; If it's not equal, just return
.194591		e8		inx		                INX                         ; Otherwise, check the next one
.194592		e0 08 00	cpx #$0008	                CPX #8
.194595		d0 f0		bne $194587	                BNE magic_loop              ; Until we've checked all 8 bytes
.194597		c2 30		rep #$30	                REP #$30        ; set A&X long
.194599		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.19459c		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.19459f		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.1945a2		44 18 18	mvp $18,$18	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.1945a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1945a7		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.1945a9		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.1945ab		f0 04		beq $1945b1	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.1945ad		5c 00 a9 18	jmp $18a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.1945b1		5c 3e a9 18	jmp $18a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.1945b5		28		plp		done            PLP
.1945b6		2b		pld		                PLD
.1945b7		ab		plb		                PLB
.1945b8		fa		plx		                PLX
.1945b9		6b		rtl		                RTL
>1945ba		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.1945c2						DOS_CALC_LBA
.1945c2		8b		phb		                PHB
.1945c3		0b		phd		                PHD
.1945c4		08		php		                PHP
.1945c5		48		pha		                PHA             ; begin setdbr macro
.1945c6		08		php		                PHP
.1945c7		e2 20		sep #$20	                SEP #$20        ; set A short
.1945c9		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1945cb		48		pha		                PHA
.1945cc		ab		plb		                PLB
.1945cd		28		plp		                PLP
.1945ce		68		pla		                PLA             ; end setdbr macro
.1945cf		48		pha		                PHA             ; begin setdp macro
.1945d0		08		php		                PHP
.1945d1		c2 20		rep #$20	                REP #$20        ; set A long
.1945d3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1945d6		5b		tcd		                TCD
.1945d7		28		plp		                PLP
.1945d8		68		pla		                PLA             ; end setdp macro
.1945d9		c2 20		rep #$20	                REP #$20        ; set A long
.1945db		38		sec		                SEC
.1945dc		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.1945de		e9 02 00	sbc #$0002	                SBC #2
.1945e1		85 28		sta $0348	                STA DOS_TEMP
.1945e3		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1945e5		e9 00 00	sbc #$0000	                SBC #0
.1945e8		85 2a		sta $034a	                STA DOS_TEMP+2
.1945ea		e2 10		sep #$10	                SEP #$10        ; set X short
.1945ec		ae 03 a0	ldx $18a003	                LDX SECTORS_PER_CLUSTER
.1945ef		e0 01		cpx #$01	mult_loop       CPX #1
.1945f1		f0 07		beq $1945fa	                BEQ add_offset
.1945f3		06 28		asl $0348	                ASL DOS_TEMP
.1945f5		26 28		rol $0348	                ROL DOS_TEMP
.1945f7		ca		dex		                DEX
.1945f8		80 f5		bra $1945ef	                BRA mult_loop
.1945fa		18		clc		add_offset      CLC
.1945fb		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.1945fd		6d 1c a0	adc $18a01c	                ADC CLUSTER_BEGIN_LBA
.194600		85 02		sta $0322	                STA BIOS_LBA
.194602		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194604		6d 1e a0	adc $18a01e	                ADC CLUSTER_BEGIN_LBA+2
.194607		85 04		sta $0324	                STA BIOS_LBA+2
.194609		28		plp		                PLP
.19460a		2b		pld		                PLD
.19460b		ab		plb		                PLB
.19460c		6b		rtl		                RTL
.19460d						DOS_GETCLUSTER
.19460d		8b		phb		                PHB
.19460e		0b		phd		                PHD
.19460f		08		php		                PHP
.194610		48		pha		                PHA             ; begin setdbr macro
.194611		08		php		                PHP
.194612		e2 20		sep #$20	                SEP #$20        ; set A short
.194614		a9 00		lda #$00	                LDA #0
.194616		48		pha		                PHA
.194617		ab		plb		                PLB
.194618		28		plp		                PLP
.194619		68		pla		                PLA             ; end setdbr macro
.19461a		48		pha		                PHA             ; begin setdp macro
.19461b		08		php		                PHP
.19461c		c2 20		rep #$20	                REP #$20        ; set A long
.19461e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194621		5b		tcd		                TCD
.194622		28		plp		                PLP
.194623		68		pla		                PLA             ; end setdp macro
.194624		c2 20		rep #$20	                REP #$20        ; set A long
.194626		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.194628		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19462a		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.19462c		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19462e		22 c2 45 19	jsl $1945c2	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.194632		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.194636		90 09		bcc $194641	                BCC ret_failure
.194638						ret_success
.194638		e2 20		sep #$20	                SEP #$20        ; set A short
.19463a		64 0e		stz $032e	                STZ DOS_STATUS
.19463c		28		plp		                PLP
.19463d		2b		pld		                PLD
.19463e		ab		plb		                PLB
.19463f		38		sec		                SEC
.194640		6b		rtl		                RTL
.194641						ret_failure
.194641		e2 20		sep #$20	                SEP #$20        ; set A short
.194643		85 0e		sta $032e	                STA DOS_STATUS
.194645		28		plp		                PLP
.194646		2b		pld		                PLD
.194647		ab		plb		                PLB
.194648		18		clc		                CLC
.194649		6b		rtl		                RTL
.19464a						DOS_PUTCLUSTER
.19464a		8b		phb		                PHB
.19464b		0b		phd		                PHD
.19464c		08		php		                PHP
.19464d		48		pha		                PHA             ; begin setdbr macro
.19464e		08		php		                PHP
.19464f		e2 20		sep #$20	                SEP #$20        ; set A short
.194651		a9 00		lda #$00	                LDA #0
.194653		48		pha		                PHA
.194654		ab		plb		                PLB
.194655		28		plp		                PLP
.194656		68		pla		                PLA             ; end setdbr macro
.194657		48		pha		                PHA             ; begin setdp macro
.194658		08		php		                PHP
.194659		c2 20		rep #$20	                REP #$20        ; set A long
.19465b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19465e		5b		tcd		                TCD
.19465f		28		plp		                PLP
.194660		68		pla		                PLA             ; end setdp macro
.194661		c2 20		rep #$20	                REP #$20        ; set A long
.194663		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.194665		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194667		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.194669		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19466b		22 c2 45 19	jsl $1945c2	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.19466f		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.194673		90 09		bcc $19467e	                BCC ret_failure
.194675						ret_success
.194675		e2 20		sep #$20	                SEP #$20        ; set A short
.194677		64 0e		stz $032e	                STZ DOS_STATUS
.194679		28		plp		                PLP
.19467a		2b		pld		                PLD
.19467b		ab		plb		                PLB
.19467c		38		sec		                SEC
.19467d		6b		rtl		                RTL
.19467e						ret_failure
.19467e		e2 20		sep #$20	                SEP #$20        ; set A short
.194680		85 0e		sta $032e	                STA DOS_STATUS
.194682		28		plp		                PLP
.194683		2b		pld		                PLD
.194684		ab		plb		                PLB
.194685		18		clc		                CLC
.194686		6b		rtl		                RTL
>194687		40 46 00			DOS_FDC_NAME    .null "@F"
.19468a						DOS_FDC_DESC
>19468a		87 46 19 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>19468e		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>19468f		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>194693		40 53 00			DOS_SDC_NAME    .null "@S"
.194696						DOS_SDC_DESC
>194696		93 46 19 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>19469a		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>19469b		8a 46 19 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>19469f		40 48 00			DOS_HDC_NAME    .null "@H"
.1946a2						DOS_HD_DESC
>1946a2		9f 46 19 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>1946a6		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>1946a7		96 46 19 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.1946ab						DOS_PARSE_DEV
.1946ab		8b		phb		                PHB
.1946ac		0b		phd		                PHD
.1946ad		08		php		                PHP
.1946ae		48		pha		                PHA             ; begin setdbr macro
.1946af		08		php		                PHP
.1946b0		e2 20		sep #$20	                SEP #$20        ; set A short
.1946b2		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1946b4		48		pha		                PHA
.1946b5		ab		plb		                PLB
.1946b6		28		plp		                PLP
.1946b7		68		pla		                PLA             ; end setdbr macro
.1946b8		48		pha		                PHA             ; begin setdp macro
.1946b9		08		php		                PHP
.1946ba		c2 20		rep #$20	                REP #$20        ; set A long
.1946bc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1946bf		5b		tcd		                TCD
.1946c0		28		plp		                PLP
.1946c1		68		pla		                PLA             ; end setdp macro
.1946c2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1946c4		af 4a a0 18	lda $18a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.1946c8		85 28		sta $0348	                STA DOS_TEMP
.1946ca		af 4c a0 18	lda $18a04c	                LDA @l DOS_DEV_NAMES+2
.1946ce		85 2a		sta $034a	                STA DOS_TEMP+2
.1946d0		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.1946d3		85 48		sta $0368	                STA DOS_STR2_PTR
.1946d5		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.1946d8		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.1946da		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.1946dd		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.1946df		85 44		sta $0364	                STA DOS_STR1_PTR
.1946e1		c8		iny		                INY
.1946e2		c8		iny		                INY
.1946e3		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.1946e5		85 46		sta $0366	                STA DOS_STR1_PTR+2
.1946e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1946e9		a0 00 00	ldy #$0000	                LDY #0
.1946ec		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.1946ee		f0 24		beq $194714	                BEQ found                   ; If it's NULL, we found a match
.1946f0		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.1946f2		d0 03		bne $1946f7	                BNE next_device             ; If no match, try to load the next device
.1946f4		c8		iny		                INY                         ; Go to the next character
.1946f5		80 f5		bra $1946ec	                BRA cmp_loop
.1946f7						next_device
.1946f7		c2 20		rep #$20	                REP #$20        ; set A long
.1946f9		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.1946fc		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.1946fe		48		pha		                PHA
.1946ff		c8		iny		                INY
.194700		c8		iny		                INY
.194701		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194703		85 2a		sta $034a	                STA DOS_TEMP+2
.194705		68		pla		                PLA
.194706		85 28		sta $0348	                STA DOS_TEMP
.194708		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.19470a		d0 ce		bne $1946da	                BNE dev_loop                ; No: check this device
.19470c		a5 2a		lda $034a	                LDA DOS_TEMP+2
.19470e		d0 ca		bne $1946da	                BNE dev_loop
.194710		28		plp		done            PLP                         ; Otherwise, return having not found a match
.194711		2b		pld		                PLD
.194712		ab		plb		                PLB
.194713		6b		rtl		                RTL
.194714		22 25 47 19	jsl $194725	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.194718		e2 20		sep #$20	                SEP #$20        ; set A short
.19471a		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.19471d		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.19471f		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.194723		80 eb		bra $194710	                BRA done
.194725						DOS_ADJUSTPATH
.194725		da		phx		                PHX
.194726		5a		phy		                PHY
.194727		8b		phb		                PHB
.194728		0b		phd		                PHD
.194729		08		php		                PHP
.19472a		48		pha		                PHA             ; begin setdbr macro
.19472b		08		php		                PHP
.19472c		e2 20		sep #$20	                SEP #$20        ; set A short
.19472e		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194730		48		pha		                PHA
.194731		ab		plb		                PLB
.194732		28		plp		                PLP
.194733		68		pla		                PLA             ; end setdbr macro
.194734		48		pha		                PHA             ; begin setdp macro
.194735		08		php		                PHP
.194736		c2 20		rep #$20	                REP #$20        ; set A long
.194738		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19473b		5b		tcd		                TCD
.19473c		28		plp		                PLP
.19473d		68		pla		                PLA             ; end setdp macro
.19473e		c2 30		rep #$30	                REP #$30        ; set A&X long
.194740		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.194742		98		tya		                TYA                             ; Compute the address of the first source byte
.194743		18		clc		                CLC
.194744		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.194747		aa		tax		                TAX
.194748		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.19474b		a8		tay		                TAY
.19474c		38		sec		                SEC                             ; Compute the number of bytes to copy
.19474d		a9 00 01	lda #$0100	                LDA #256
.194750		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.194752		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.194755		28		plp		                PLP
.194756		2b		pld		                PLD
.194757		ab		plb		                PLB
.194758		7a		ply		                PLY
.194759		fa		plx		                PLX
.19475a		6b		rtl		                RTL
.19475b						DOS_PARSE_PATH
.19475b		8b		phb		                PHB
.19475c		0b		phd		                PHD
.19475d		08		php		                PHP
.19475e		48		pha		                PHA             ; begin setdbr macro
.19475f		08		php		                PHP
.194760		e2 20		sep #$20	                SEP #$20        ; set A short
.194762		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194764		48		pha		                PHA
.194765		ab		plb		                PLB
.194766		28		plp		                PLP
.194767		68		pla		                PLA             ; end setdbr macro
.194768		48		pha		                PHA             ; begin setdp macro
.194769		08		php		                PHP
.19476a		c2 20		rep #$20	                REP #$20        ; set A long
.19476c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19476f		5b		tcd		                TCD
.194770		28		plp		                PLP
.194771		68		pla		                PLA             ; end setdp macro
.194772		c2 10		rep #$10	                REP #$10        ; set X long
.194774		e2 20		sep #$20	                SEP #$20        ; set A short
.194776		a2 00 00	ldx #$0000	                LDX #0
.194779		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.19477b		f0 1b		beq $194798	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.19477d		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.19477f		b0 05		bcs $194786	                BGE check_case          ; No: check the case
.194781		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.194783		82 64 00	brl $1947ea	                BRL ret_failure
.194786		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.194788		90 08		bcc $194792	                BLT next_char
.19478a		c9 7b		cmp #$7b	                CMP #'z'+1
.19478c		b0 04		bcs $194792	                BGE next_char
.19478e		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.194790		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.194792		e8		inx		next_char       INX                     ; Move to the next character
.194793		e0 00 01	cpx #$0100	                CPX #$100
.194796		d0 e1		bne $194779	                BNE upcase_loop
.194798		22 ab 46 19	jsl $1946ab	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.19479c		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.19479e		c9 3a		cmp #$3a	                CMP #':'
.1947a0		d0 07		bne $1947a9	                BNE clr_name            ; If not colon, treat it as a file name
.1947a2		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.1947a5		22 25 47 19	jsl $194725	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.1947a9		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.1947ac		a9 20		lda #$20	                LDA #' '
.1947ae		99 3a a0	sta $18a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.1947b1		c8		iny		                INY
.1947b2		c0 0b 00	cpy #$000b	                CPY #11
.1947b5		d0 f7		bne $1947ae	                BNE clr_loop
.1947b7		a2 00 00	ldx #$0000	                LDX #0
.1947ba		a0 00 00	ldy #$0000	                LDY #0
.1947bd		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.1947bf		f0 20		beq $1947e1	                BEQ ret_success         ; If NULL: we've finished parsing the path
.1947c1		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.1947c3		f0 0a		beq $1947cf	                BEQ cpy_ext             ; And move to the extension
.1947c5		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.1947c8		e8		inx		                INX
.1947c9		c8		iny		                INY                     ; Move to the next character
.1947ca		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.1947cd		d0 ee		bne $1947bd	                BNE cpy_name_loop       ; No: process this one
.1947cf		e8		inx		cpy_ext         INX                     ; Skip the dot
.1947d0		a0 08 00	ldy #$0008	                LDY #8
.1947d3		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.1947d5		f0 0a		beq $1947e1	                BEQ ret_success         ; If it's NULL, we've finished
.1947d7		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.1947da		e8		inx		                INX
.1947db		c8		iny		                INY                     ; Move to the next character
.1947dc		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.1947df		d0 f2		bne $1947d3	                BNE cpy_ext_loop        ; No: process this one
.1947e1						ret_success
.1947e1		e2 20		sep #$20	                SEP #$20        ; set A short
.1947e3		64 0e		stz $032e	                STZ DOS_STATUS
.1947e5		28		plp		                PLP
.1947e6		2b		pld		                PLD
.1947e7		ab		plb		                PLB
.1947e8		38		sec		                SEC
.1947e9		6b		rtl		                RTL
.1947ea						ret_failure
.1947ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1947ec		85 0e		sta $032e	                STA DOS_STATUS
.1947ee		28		plp		                PLP
.1947ef		2b		pld		                PLD
.1947f0		ab		plb		                PLB
.1947f1		18		clc		                CLC
.1947f2		6b		rtl		                RTL
.1947f3						DOS_FINDFILE
.1947f3		8b		phb		                PHB
.1947f4		0b		phd		                PHD
.1947f5		08		php		                PHP
.1947f6		48		pha		                PHA             ; begin setdbr macro
.1947f7		08		php		                PHP
.1947f8		e2 20		sep #$20	                SEP #$20        ; set A short
.1947fa		a9 00		lda #$00	                LDA #0
.1947fc		48		pha		                PHA
.1947fd		ab		plb		                PLB
.1947fe		28		plp		                PLP
.1947ff		68		pla		                PLA             ; end setdbr macro
.194800		48		pha		                PHA             ; begin setdp macro
.194801		08		php		                PHP
.194802		c2 20		rep #$20	                REP #$20        ; set A long
.194804		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194807		5b		tcd		                TCD
.194808		28		plp		                PLP
.194809		68		pla		                PLA             ; end setdp macro
.19480a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19480c		22 5b 47 19	jsl $19475b	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.194810		b0 05		bcs $194817	                BCS mount                       ; If success: try to open the directory
.194812		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.194813		2b		pld		                PLD
.194814		ab		plb		                PLB
.194815		18		clc		                CLC
.194816		6b		rtl		                RTL
.194817		22 75 43 19	jsl $194375	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.19481b		b0 07		bcs $194824	                BCS get_directory
.19481d		e2 20		sep #$20	                SEP #$20        ; set A short
.19481f		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.194821		82 56 00	brl $19487a	                BRL ret_failure
.194824						get_directory
.194824		c2 20		rep #$20	                REP #$20        ; set A long
.194826		22 2a 40 19	jsl $19402a	                JSL DOS_DIROPEN                 ; Get the directory
.19482a		b0 07		bcs $194833	                BCS scan_entries                ; If success: start scanning the directory entries
.19482c		e2 20		sep #$20	                SEP #$20        ; set A short
.19482e		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.194830		82 47 00	brl $19487a	                BRL ret_failure
.194833		22 a9 40 19	jsl $1940a9	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.194837						scan_loop
.194837		e2 20		sep #$20	                SEP #$20        ; set A short
.194839		a0 00 00	ldy #$0000	                LDY #0
.19483c		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.19483e		d0 05		bne $194845	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.194840		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.194842		82 35 00	brl $19487a	                BRL ret_failure
.194845		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.194847		f0 26		beq $19486f	                BEQ next_entry                  ; Go to the next entry
.194849		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.19484c		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.19484e		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.194850		d0 1d		bne $19486f	                BNE next_entry                  ; Yes: skip it!
.194852		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.194854		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.194856		f0 17		beq $19486f	                BEQ next_entry                  ; Yes: skip it!
.194858		a2 00 00	ldx #$0000	                LDX #0
.19485b		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.19485e		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.194860		df 3a a0 18	cmp $18a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.194864		d0 09		bne $19486f	                BNE next_entry                  ; If not equal: try the next entry
.194866		c8		iny		                INY                             ; Advance to the next character
.194867		e8		inx		                INX
.194868		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.19486b		f0 16		beq $194883	                BEQ match                       ; Yes: we have a match!
.19486d		80 ef		bra $19485e	                BRA scan_cmp_loop               ; No: keep checking
.19486f		22 c4 40 19	jsl $1940c4	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.194873		90 05		bcc $19487a	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.194875		82 bf ff	brl $194837	                BRL scan_loop                   ; If found: keep scanning
.194878		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.19487a						ret_failure
.19487a		e2 20		sep #$20	                SEP #$20        ; set A short
.19487c		85 0e		sta $032e	                STA DOS_STATUS
.19487e		28		plp		                PLP
.19487f		2b		pld		                PLD
.194880		ab		plb		                PLB
.194881		18		clc		                CLC
.194882		6b		rtl		                RTL
.194883						match
.194883		c2 20		rep #$20	                REP #$20        ; set A long
.194885		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.194888		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.19488a		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.19488c		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.19488f		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194891		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194893						ret_success
.194893		e2 20		sep #$20	                SEP #$20        ; set A short
.194895		64 0e		stz $032e	                STZ DOS_STATUS
.194897		28		plp		                PLP
.194898		2b		pld		                PLD
.194899		ab		plb		                PLB
.19489a		38		sec		                SEC
.19489b		6b		rtl		                RTL
.19489c						DOS_READFILE
.19489c		8b		phb		                PHB
.19489d		0b		phd		                PHD
.19489e		08		php		                PHP
.19489f		48		pha		                PHA             ; begin setdbr macro
.1948a0		08		php		                PHP
.1948a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1948a3		a9 00		lda #$00	                LDA #0
.1948a5		48		pha		                PHA
.1948a6		ab		plb		                PLB
.1948a7		28		plp		                PLP
.1948a8		68		pla		                PLA             ; end setdbr macro
.1948a9		48		pha		                PHA             ; begin setdp macro
.1948aa		08		php		                PHP
.1948ab		c2 20		rep #$20	                REP #$20        ; set A long
.1948ad		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1948b0		5b		tcd		                TCD
.1948b1		28		plp		                PLP
.1948b2		68		pla		                PLA             ; end setdp macro
.1948b3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1948b5		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.1948b7		48		pha		                PHA
.1948b8		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.1948ba		48		pha		                PHA
.1948bb		22 f3 47 19	jsl $1947f3	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.1948bf		68		pla		                PLA
.1948c0		85 1c		sta $033c	                STA DOS_BUFF_PTR
.1948c2		68		pla		                PLA
.1948c3		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.1948c5		90 0f		bcc $1948d6	                BCC pass_failure                    ; If found: try to load the cluster
.1948c7		22 0d 46 19	jsl $19460d	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.1948cb		90 09		bcc $1948d6	                BCC pass_failure                    ; If there's an error... pass it up the chain
.1948cd						ret_success
.1948cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1948cf		64 0e		stz $032e	                STZ DOS_STATUS
.1948d1		28		plp		                PLP
.1948d2		2b		pld		                PLD
.1948d3		ab		plb		                PLB
.1948d4		38		sec		                SEC
.1948d5		6b		rtl		                RTL
.1948d6		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.1948d7		2b		pld		                PLD
.1948d8		ab		plb		                PLB
.1948d9		18		clc		                CLC
.1948da		6b		rtl		                RTL
.1948db						ENTRYFORCLUS12
.1948db		8b		phb		                PHB
.1948dc		0b		phd		                PHD
.1948dd		08		php		                PHP
.1948de		48		pha		                PHA             ; begin setdbr macro
.1948df		08		php		                PHP
.1948e0		e2 20		sep #$20	                SEP #$20        ; set A short
.1948e2		a9 00		lda #$00	                LDA #0
.1948e4		48		pha		                PHA
.1948e5		ab		plb		                PLB
.1948e6		28		plp		                PLP
.1948e7		68		pla		                PLA             ; end setdbr macro
.1948e8		48		pha		                PHA             ; begin setdp macro
.1948e9		08		php		                PHP
.1948ea		c2 20		rep #$20	                REP #$20        ; set A long
.1948ec		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1948ef		5b		tcd		                TCD
.1948f0		28		plp		                PLP
.1948f1		68		pla		                PLA             ; end setdp macro
.1948f2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1948f4		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.1948f6		0a		asl a		                ASL A
.1948f7		85 28		sta $0348	                STA DOS_TEMP
.1948f9		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1948fb		2a		rol a		                ROL A
.1948fc		85 2a		sta $034a	                STA DOS_TEMP+2
.1948fe		18		clc		                CLC
.1948ff		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194901		65 28		adc $0348	                ADC DOS_TEMP
.194903		85 28		sta $0348	                STA DOS_TEMP
.194905		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194907		65 2a		adc $034a	                ADC DOS_TEMP+2
.194909		85 2a		sta $034a	                STA DOS_TEMP+2
.19490b		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.19490d		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.19490f		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.194911		29 ff 03	and #$03ff	                AND #$003FF
.194914		aa		tax		                TAX
.194915		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194917		66 28		ror $0348	                ROR DOS_TEMP
.194919		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.19491b		66 28		ror $0348	                ROR DOS_TEMP
.19491d		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.19491f		66 28		ror $0348	                ROR DOS_TEMP
.194921		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194923		66 28		ror $0348	                ROR DOS_TEMP
.194925		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194927		66 28		ror $0348	                ROR DOS_TEMP
.194929		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.19492b		66 28		ror $0348	                ROR DOS_TEMP
.19492d		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.19492f		66 28		ror $0348	                ROR DOS_TEMP
.194931		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194933		66 28		ror $0348	                ROR DOS_TEMP
.194935		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194937		66 28		ror $0348	                ROR DOS_TEMP
.194939		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.19493a		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA
.19493e		65 28		adc $0348	                ADC DOS_TEMP
.194940		85 24		sta $0344	                STA DOS_FAT_LBA
.194942		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.194946		65 2a		adc $034a	                ADC DOS_TEMP+2
.194948		85 26		sta $0346	                STA DOS_FAT_LBA+2
.19494a		28		plp		                PLP
.19494b		2b		pld		                PLD
.19494c		ab		plb		                PLB
.19494d		6b		rtl		                RTL
.19494e						FATFORCLUSTER12
.19494e		8b		phb		                PHB
.19494f		0b		phd		                PHD
.194950		08		php		                PHP
.194951		48		pha		                PHA             ; begin setdbr macro
.194952		08		php		                PHP
.194953		e2 20		sep #$20	                SEP #$20        ; set A short
.194955		a9 00		lda #$00	                LDA #0
.194957		48		pha		                PHA
.194958		ab		plb		                PLB
.194959		28		plp		                PLP
.19495a		68		pla		                PLA             ; end setdbr macro
.19495b		48		pha		                PHA             ; begin setdp macro
.19495c		08		php		                PHP
.19495d		c2 20		rep #$20	                REP #$20        ; set A long
.19495f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194962		5b		tcd		                TCD
.194963		28		plp		                PLP
.194964		68		pla		                PLA             ; end setdp macro
.194965		c2 30		rep #$30	                REP #$30        ; set A&X long
.194967		a2 00 00	ldx #$0000	                LDX #0
.19496a		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.19496d		8f 00 a5 18	sta $18a500	clr_loop        STA DOS_FAT_SECTORS
.194971		e8		inx		                INX
.194972		e8		inx		                INX
.194973		e0 00 04	cpx #$0400	                CPX #1024
.194976		d0 f5		bne $19496d	                BNE clr_loop
.194978		22 db 48 19	jsl $1948db	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.19497c		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.19497e		85 02		sta $0322	                STA BIOS_LBA
.194980		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194982		85 04		sta $0324	                STA BIOS_LBA+2
.194984		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.194987		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194989		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.19498c		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19498e		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.194992		90 17		bcc $1949ab	                BCC error
.194994		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.194996		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.194999		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19499b		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.19499e		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1949a0		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.1949a4		90 05		bcc $1949ab	                BCC error
.1949a6		28		plp		                PLP
.1949a7		2b		pld		                PLD
.1949a8		ab		plb		                PLB
.1949a9		38		sec		                SEC
.1949aa		6b		rtl		                RTL
.1949ab						error
.1949ab		e2 20		sep #$20	                SEP #$20        ; set A short
.1949ad		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.1949af		85 0e		sta $032e	                STA DOS_STATUS
.1949b1		28		plp		                PLP
.1949b2		2b		pld		                PLD
.1949b3		ab		plb		                PLB
.1949b4		18		clc		                CLC
.1949b5		6b		rtl		                RTL
.1949b6						FATFORCLUSTER32
.1949b6		8b		phb		                PHB
.1949b7		0b		phd		                PHD
.1949b8		48		pha		                PHA             ; begin setdbr macro
.1949b9		08		php		                PHP
.1949ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1949bc		a9 00		lda #$00	                LDA #0
.1949be		48		pha		                PHA
.1949bf		ab		plb		                PLB
.1949c0		28		plp		                PLP
.1949c1		68		pla		                PLA             ; end setdbr macro
.1949c2		48		pha		                PHA             ; begin setdp macro
.1949c3		08		php		                PHP
.1949c4		c2 20		rep #$20	                REP #$20        ; set A long
.1949c6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1949c9		5b		tcd		                TCD
.1949ca		28		plp		                PLP
.1949cb		68		pla		                PLA             ; end setdp macro
.1949cc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1949ce		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1949d0		85 24		sta $0344	                STA DOS_FAT_LBA
.1949d2		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1949d4		85 26		sta $0346	                STA DOS_FAT_LBA+2
.1949d6		a2 07 00	ldx #$0007	                LDX #7
.1949d9		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.1949db		66 24		ror $0344	                ROR DOS_FAT_LBA
.1949dd		ca		dex		                DEX
.1949de		d0 f9		bne $1949d9	                BNE div_loop
.1949e0		18		clc		                CLC
.1949e1		a5 24		lda $0344	                LDA DOS_FAT_LBA
.1949e3		6f 14 a0 18	adc $18a014	                ADC FAT_BEGIN_LBA
.1949e7		85 24		sta $0344	                STA DOS_FAT_LBA
.1949e9		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.1949eb		6f 16 a0 18	adc $18a016	                ADC FAT_BEGIN_LBA+2
.1949ef		85 26		sta $0346	                STA DOS_FAT_LBA+2
.1949f1		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.1949f3		85 02		sta $0322	                STA BIOS_LBA
.1949f5		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.1949f7		85 04		sta $0324	                STA BIOS_LBA+2
.1949f9		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.1949fc		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1949fe		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.194a01		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194a03		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.194a07		b0 06		bcs $194a0f	                BCS find_entry
.194a09		e2 20		sep #$20	                SEP #$20        ; set A short
.194a0b		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194a0d		80 0e		bra $194a1d	                BRA ret_failure
.194a0f						find_entry
.194a0f		c2 20		rep #$20	                REP #$20        ; set A long
.194a11		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194a13		0a		asl a		                ASL A
.194a14		0a		asl a		                ASL A                           ; * 4
.194a15		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.194a18		aa		tax		                TAX                             ; X should be the offset within the sector
.194a19		2b		pld		ret_success     PLD
.194a1a		ab		plb		                PLB
.194a1b		38		sec		                SEC                             ; return success
.194a1c		6b		rtl		                RTL
.194a1d		2b		pld		ret_failure     PLD
.194a1e		ab		plb		                PLB
.194a1f		18		clc		                CLC                             ; Return failure
.194a20		6b		rtl		                RTL
.194a21						NEXTCLUSTER
.194a21		08		php		                PHP
.194a22		e2 20		sep #$20	                SEP #$20        ; set A short
.194a24		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194a28		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194a2a		d0 08		bne $194a34	                BNE fat32                       ; No: assume it's FAT32
.194a2c		22 42 4a 19	jsl $194a42	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.194a30		90 0d		bcc $194a3f	                BCC pass_failure                ; If there was an error, pass it up the chain
.194a32		80 06		bra $194a3a	                BRA ret_success
.194a34		22 aa 4a 19	jsl $194aaa	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.194a38		90 05		bcc $194a3f	                BCC pass_failure                ; If there was an error, pass it up the chain
.194a3a		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.194a3c		28		plp		                PLP
.194a3d		38		sec		                SEC
.194a3e		6b		rtl		                RTL
.194a3f		28		plp		pass_failure    PLP
.194a40		18		clc		                CLC
.194a41		6b		rtl		                RTL
.194a42						NEXTCLUSTER12
.194a42		8b		phb		                    PHB
.194a43		0b		phd		                    PHD
.194a44		08		php		                    PHP
.194a45		48		pha		                PHA             ; begin setdbr macro
.194a46		08		php		                PHP
.194a47		e2 20		sep #$20	                SEP #$20        ; set A short
.194a49		a9 00		lda #$00	                LDA #0
.194a4b		48		pha		                PHA
.194a4c		ab		plb		                PLB
.194a4d		28		plp		                PLP
.194a4e		68		pla		                PLA             ; end setdbr macro
.194a4f		48		pha		                PHA             ; begin setdp macro
.194a50		08		php		                PHP
.194a51		c2 20		rep #$20	                REP #$20        ; set A long
.194a53		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194a56		5b		tcd		                TCD
.194a57		28		plp		                PLP
.194a58		68		pla		                PLA             ; end setdp macro
.194a59		c2 30		rep #$30	                REP #$30        ; set A&X long
.194a5b		22 4e 49 19	jsl $19494e	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.194a5f		b0 03		bcs $194a64	                    BCS chk_clus_id
.194a61		82 41 00	brl $194aa5	                    BRL pass_failure
.194a64		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.194a66		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.194a69		d0 0d		bne $194a78	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.194a6b						is_even
.194a6b		c2 20		rep #$20	                REP #$20        ; set A long
.194a6d		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.194a71		29 ff 0f	and #$0fff	                    AND #$0FFF
.194a74		85 28		sta $0348	                    STA DOS_TEMP
.194a76		80 0c		bra $194a84	                    BRA check_id
.194a78						is_odd
.194a78		c2 20		rep #$20	                REP #$20        ; set A long
.194a7a		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.194a7e		4a		lsr a		                    LSR A
.194a7f		4a		lsr a		                    LSR A
.194a80		4a		lsr a		                    LSR A
.194a81		4a		lsr a		                    LSR A
.194a82		85 28		sta $0348	                    STA DOS_TEMP
.194a84						check_id
.194a84		c2 20		rep #$20	                REP #$20        ; set A long
.194a86		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.194a88		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.194a8b		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.194a8e		f0 0f		beq $194a9f	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.194a90		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.194a92		85 10		sta $0330	                    STA DOS_CLUS_ID
.194a94		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.194a96						ret_success
.194a96		e2 20		sep #$20	                SEP #$20        ; set A short
.194a98		64 0e		stz $032e	                    STZ DOS_STATUS
.194a9a		28		plp		                    PLP
.194a9b		2b		pld		                    PLD
.194a9c		ab		plb		                    PLB
.194a9d		38		sec		                    SEC
.194a9e		6b		rtl		                    RTL
.194a9f						no_more
.194a9f		e2 20		sep #$20	                SEP #$20        ; set A short
.194aa1		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.194aa3		85 0e		sta $032e	                    STA DOS_STATUS
.194aa5		28		plp		pass_failure        PLP
.194aa6		2b		pld		                    PLD
.194aa7		ab		plb		                    PLB
.194aa8		18		clc		                    CLC
.194aa9		6b		rtl		                    RTL
.194aaa						NEXTCLUSTER32
.194aaa		8b		phb		                PHB
.194aab		0b		phd		                PHD
.194aac		08		php		                PHP
.194aad		48		pha		                PHA             ; begin setdbr macro
.194aae		08		php		                PHP
.194aaf		e2 20		sep #$20	                SEP #$20        ; set A short
.194ab1		a9 00		lda #$00	                LDA #0
.194ab3		48		pha		                PHA
.194ab4		ab		plb		                PLB
.194ab5		28		plp		                PLP
.194ab6		68		pla		                PLA             ; end setdbr macro
.194ab7		48		pha		                PHA             ; begin setdp macro
.194ab8		08		php		                PHP
.194ab9		c2 20		rep #$20	                REP #$20        ; set A long
.194abb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194abe		5b		tcd		                TCD
.194abf		28		plp		                PLP
.194ac0		68		pla		                PLA             ; end setdp macro
.194ac1		c2 30		rep #$30	                REP #$30        ; set A&X long
.194ac3		22 b6 49 19	jsl $1949b6	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.194ac7		90 53		bcc $194b1c	                BCC ret_failure                 ; If it did not work, return the error
.194ac9		e2 20		sep #$20	                SEP #$20        ; set A short
.194acb		bf 00 a5 18	lda $18a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.194acf		85 28		sta $0348	                STA DOS_TEMP
.194ad1		bf 01 a5 18	lda $18a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.194ad5		85 29		sta $0349	                STA DOS_TEMP+1
.194ad7		bf 02 a5 18	lda $18a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.194adb		85 2a		sta $034a	                STA DOS_TEMP+2
.194add		bf 03 a5 18	lda $18a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.194ae1		85 2b		sta $034b	                STA DOS_TEMP+3
.194ae3		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.194ae5		c9 ff		cmp #$ff	                CMP #$FF
.194ae7		d0 18		bne $194b01	                BNE found_next
.194ae9		a5 29		lda $0349	                LDA DOS_TEMP+1
.194aeb		c9 ff		cmp #$ff	                CMP #$FF
.194aed		d0 12		bne $194b01	                BNE found_next
.194aef		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194af1		c9 ff		cmp #$ff	                CMP #$FF
.194af3		d0 0c		bne $194b01	                BNE found_next
.194af5		a5 2b		lda $034b	                LDA DOS_TEMP+3
.194af7		c9 0f		cmp #$0f	                CMP #$0F
.194af9		d0 06		bne $194b01	                BNE found_next                  ; No: return this cluster as the next
.194afb		e2 20		sep #$20	                SEP #$20        ; set A short
.194afd		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.194aff		80 1b		bra $194b1c	                BRA ret_failure
.194b01						found_next
.194b01		e2 20		sep #$20	                SEP #$20        ; set A short
.194b03		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.194b05		85 10		sta $0330	                STA DOS_CLUS_ID
.194b07		a5 29		lda $0349	                LDA DOS_TEMP+1
.194b09		85 11		sta $0331	                STA DOS_CLUS_ID+1
.194b0b		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194b0d		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194b0f		a5 2b		lda $034b	                LDA DOS_TEMP+3
.194b11		85 13		sta $0333	                STA DOS_CLUS_ID+3
.194b13						ret_success
.194b13		e2 20		sep #$20	                SEP #$20        ; set A short
.194b15		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.194b17		28		plp		                PLP
.194b18		2b		pld		                PLD
.194b19		ab		plb		                PLB
.194b1a		38		sec		                SEC
.194b1b		6b		rtl		                RTL
.194b1c						ret_failure
.194b1c		e2 20		sep #$20	                SEP #$20        ; set A short
.194b1e		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.194b20		28		plp		                PLP
.194b21		2b		pld		                PLD
.194b22		ab		plb		                PLB
.194b23		18		clc		                CLC
.194b24		6b		rtl		                RTL
.194b25						DOS_READNEXT
.194b25		08		php		                PHP
.194b26		c2 30		rep #$30	                REP #$30        ; set A&X long
.194b28		22 21 4a 19	jsl $194a21	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.194b2c		90 09		bcc $194b37	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.194b2e		22 0d 46 19	jsl $19460d	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.194b32		90 03		bcc $194b37	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.194b34		28		plp		ret_success     PLP
.194b35		38		sec		                SEC
.194b36		6b		rtl		                RTL
.194b37		28		plp		pass_failure    PLP
.194b38		18		clc		                CLC
.194b39		6b		rtl		                RTL
.194b3a						DOS_FREECLUS
.194b3a		08		php		                PHP
.194b3b		48		pha		                PHA             ; begin setdp macro
.194b3c		08		php		                PHP
.194b3d		c2 20		rep #$20	                REP #$20        ; set A long
.194b3f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194b42		5b		tcd		                TCD
.194b43		28		plp		                PLP
.194b44		68		pla		                PLA             ; end setdp macro
.194b45		e2 20		sep #$20	                SEP #$20        ; set A short
.194b47		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194b4b		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194b4d		d0 08		bne $194b57	                BNE fat32                       ; No: assume it's FAT32
.194b4f		22 cb 4b 19	jsl $194bcb	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.194b53		90 0d		bcc $194b62	                BCC pass_failure                ; If there was an error, pass it up the chain
.194b55		80 06		bra $194b5d	                BRA ret_success
.194b57		22 a3 4c 19	jsl $194ca3	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.194b5b		90 05		bcc $194b62	                BCC pass_failure                ; If there was an error, pass it up the chain
.194b5d		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.194b5f		28		plp		                PLP
.194b60		38		sec		                SEC
.194b61		6b		rtl		                RTL
.194b62		28		plp		pass_failure    PLP
.194b63		18		clc		                CLC
.194b64		6b		rtl		                RTL
.194b65						FDC_READ2FAT12
.194b65		8b		phb		                    PHB
.194b66		0b		phd		                    PHD
.194b67		08		php		                    PHP
.194b68		48		pha		                PHA             ; begin setdbr macro
.194b69		08		php		                PHP
.194b6a		e2 20		sep #$20	                SEP #$20        ; set A short
.194b6c		a9 00		lda #$00	                LDA #0
.194b6e		48		pha		                PHA
.194b6f		ab		plb		                PLB
.194b70		28		plp		                PLP
.194b71		68		pla		                PLA             ; end setdbr macro
.194b72		48		pha		                PHA             ; begin setdp macro
.194b73		08		php		                PHP
.194b74		c2 20		rep #$20	                REP #$20        ; set A long
.194b76		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194b79		5b		tcd		                TCD
.194b7a		28		plp		                PLP
.194b7b		68		pla		                PLA             ; end setdp macro
.194b7c		c2 30		rep #$30	                REP #$30        ; set A&X long
.194b7e		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.194b81		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.194b83		a9 18 00	lda #$0018	                    LDA #`DOS_FAT_SECTORS
.194b86		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.194b88		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.194b8a		85 02		sta $0322	                    STA BIOS_LBA
.194b8c		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.194b8e		85 04		sta $0324	                    STA BIOS_LBA+2
.194b90		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.194b94		b0 07		bcs $194b9d	                    BCS inc_sect2                   ; If success: start getting the second sector
.194b96		e2 20		sep #$20	                SEP #$20        ; set A short
.194b98		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.194b9a		82 1c 00	brl $194bb9	                    BRL ret_failure
.194b9d						inc_sect2
.194b9d		c2 20		rep #$20	                REP #$20        ; set A long
.194b9f		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.194ba1		d0 02		bne $194ba5	                    BNE inc_buff_ptr
.194ba3		e6 04		inc $0324	                    INC BIOS_LBA+2
.194ba5		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194ba8		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.194baa		a9 18 00	lda #$0018	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194bad		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.194baf		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.194bb3		b0 0d		bcs $194bc2	                    BCS ret_success                 ; If success, return success
.194bb5		e2 20		sep #$20	                SEP #$20        ; set A short
.194bb7		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.194bb9						ret_failure
.194bb9		e2 20		sep #$20	                SEP #$20        ; set A short
.194bbb		85 00		sta $0320	                    STA BIOS_STATUS
.194bbd		28		plp		                    PLP
.194bbe		2b		pld		                    PLD
.194bbf		ab		plb		                    PLB
.194bc0		18		clc		                    CLC
.194bc1		6b		rtl		                    RTL
.194bc2						ret_success
.194bc2		e2 20		sep #$20	                SEP #$20        ; set A short
.194bc4		64 00		stz $0320	                    STZ BIOS_STATUS
.194bc6		28		plp		                    PLP
.194bc7		2b		pld		                    PLD
.194bc8		ab		plb		                    PLB
.194bc9		38		sec		                    SEC
.194bca		6b		rtl		                    RTL
.194bcb						DOS_FREECLUS12
.194bcb		da		phx		                PHX
.194bcc		8b		phb		                PHB
.194bcd		0b		phd		                PHD
.194bce		08		php		                PHP
.194bcf		48		pha		                PHA             ; begin setdbr macro
.194bd0		08		php		                PHP
.194bd1		e2 20		sep #$20	                SEP #$20        ; set A short
.194bd3		a9 00		lda #$00	                LDA #0
.194bd5		48		pha		                PHA
.194bd6		ab		plb		                PLB
.194bd7		28		plp		                PLP
.194bd8		68		pla		                PLA             ; end setdbr macro
.194bd9		48		pha		                PHA             ; begin setdp macro
.194bda		08		php		                PHP
.194bdb		c2 20		rep #$20	                REP #$20        ; set A long
.194bdd		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194be0		5b		tcd		                TCD
.194be1		28		plp		                PLP
.194be2		68		pla		                PLA             ; end setdp macro
.194be3		c2 30		rep #$30	                REP #$30        ; set A&X long
.194be5		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.194be8		85 10		sta $0330	                STA DOS_CLUS_ID
.194bea		a9 00 00	lda #$0000	                LDA #0
.194bed		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194bef		22 db 48 19	jsl $1948db	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.194bf3		22 65 4b 19	jsl $194b65	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.194bf7		b0 07		bcs $194c00	                BCS start_of_fat                ; If success, move X to the start of the FAT
.194bf9		e2 20		sep #$20	                SEP #$20        ; set A short
.194bfb		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194bfd		82 99 00	brl $194c99	                BRL ret_failure
.194c00						start_of_fat
.194c00		c2 30		rep #$30	                REP #$30        ; set A&X long
.194c02		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.194c04		89 01 00	bit #$0001	                BIT #1
.194c07		d0 09		bne $194c12	                BNE is_odd
.194c09		bf 00 a5 18	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.194c0d		29 ff 0f	and #$0fff	                AND #$0FFF
.194c10		80 08		bra $194c1a	                BRA chk_available
.194c12		bf 00 a5 18	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.194c16		4a		lsr a		                LSR A
.194c17		4a		lsr a		                LSR A
.194c18		4a		lsr a		                LSR A
.194c19		4a		lsr a		                LSR A
.194c1a						chk_available
.194c1a		85 28		sta $0348	                STA DOS_TEMP
.194c1c		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.194c1f		f0 03		beq $194c24	                BEQ chk_found
.194c21		82 39 00	brl $194c5d	                BRL next_cluster                ; No: advance to the next cluster
.194c24		8a		txa		chk_found       TXA
.194c25		85 2a		sta $034a	                STA DOS_TEMP+2
.194c27		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.194c29		89 01 00	bit #$0001	                BIT #1
.194c2c		d0 0d		bne $194c3b	                BNE is_odd2
.194c2e						is_even2
.194c2e		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.194c32		09 ff 0f	ora #$0fff	                ORA #$0FFF
.194c35		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194c39		80 0b		bra $194c46	                BRA write_fat
.194c3b						is_odd2
.194c3b		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.194c3f		09 f0 ff	ora #$fff0	                ORA #$FFF0
.194c42		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194c46		22 6d 4d 19	jsl $194d6d	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.194c4a		b0 07		bcs $194c53	                BCS ret_success                 ; If success: return success
.194c4c		e2 20		sep #$20	                SEP #$20        ; set A short
.194c4e		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.194c50		82 46 00	brl $194c99	                BRL ret_failure
.194c53						ret_success
.194c53		e2 20		sep #$20	                SEP #$20        ; set A short
.194c55		64 0e		stz $032e	                STZ DOS_STATUS
.194c57		28		plp		                PLP
.194c58		2b		pld		                PLD
.194c59		ab		plb		                PLB
.194c5a		fa		plx		                PLX
.194c5b		38		sec		                SEC
.194c5c		6b		rtl		                RTL
.194c5d						next_cluster
.194c5d		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.194c5f		d0 02		bne $194c63	                BNE calc_entry
.194c61		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.194c63		22 db 48 19	jsl $1948db	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.194c67		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.194c6a		f0 03		beq $194c6f	                BEQ chk_end_of_fat
.194c6c		82 93 ff	brl $194c02	                BRL chk_cluster                 ; No: go back and check it too
.194c6f						chk_end_of_fat
.194c6f		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.194c71		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.194c75		d0 0f		bne $194c86	                BNE next_2
.194c77		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194c79		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.194c7d		d0 07		bne $194c86	                BNE next_2                      ; No: get the next to sectors
.194c7f		e2 20		sep #$20	                SEP #$20        ; set A short
.194c81		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.194c83		82 13 00	brl $194c99	                BRL ret_failure
.194c86						next_2
.194c86		22 65 4b 19	jsl $194b65	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.194c8a		90 06		bcc $194c92	                BCC fat_fail                    ; If failed: return error
.194c8c		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.194c8f		82 70 ff	brl $194c02	                BRL chk_cluster                 ; And start checking from there
.194c92						fat_fail
.194c92		e2 20		sep #$20	                SEP #$20        ; set A short
.194c94		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194c96		82 00 00	brl $194c99	                BRL ret_failure
.194c99						ret_failure
.194c99		e2 20		sep #$20	                SEP #$20        ; set A short
.194c9b		85 0e		sta $032e	                STA DOS_STATUS
.194c9d		28		plp		                PLP
.194c9e		2b		pld		                PLD
.194c9f		ab		plb		                PLB
.194ca0		fa		plx		                PLX
.194ca1		18		clc		                CLC
.194ca2		6b		rtl		                RTL
.194ca3						DOS_FREECLUS32
.194ca3		8b		phb		                PHB
.194ca4		0b		phd		                PHD
.194ca5		08		php		                PHP
.194ca6		48		pha		                PHA             ; begin setdbr macro
.194ca7		08		php		                PHP
.194ca8		e2 20		sep #$20	                SEP #$20        ; set A short
.194caa		a9 00		lda #$00	                LDA #0
.194cac		48		pha		                PHA
.194cad		ab		plb		                PLB
.194cae		28		plp		                PLP
.194caf		68		pla		                PLA             ; end setdbr macro
.194cb0		48		pha		                PHA             ; begin setdp macro
.194cb1		08		php		                PHP
.194cb2		c2 20		rep #$20	                REP #$20        ; set A long
.194cb4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194cb7		5b		tcd		                TCD
.194cb8		28		plp		                PLP
.194cb9		68		pla		                PLA             ; end setdp macro
.194cba		c2 30		rep #$30	                REP #$30        ; set A&X long
.194cbc		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.194cbf		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194cc1		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.194cc4		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194cc6		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.194cca		85 02		sta $0322	                STA BIOS_LBA
.194ccc		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.194cd0		85 04		sta $0324	                STA BIOS_LBA+2
.194cd2		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.194cd6		b0 07		bcs $194cdf	                BCS initial_entry               ; If OK: set the initial entry to check
.194cd8		e2 20		sep #$20	                SEP #$20        ; set A short
.194cda		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.194cdc		82 6b 00	brl $194d4a	                BRL ret_failure
.194cdf						initial_entry
.194cdf		c2 20		rep #$20	                REP #$20        ; set A long
.194ce1		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.194ce4		85 10		sta $0330	                STA DOS_CLUS_ID
.194ce6		a9 00 00	lda #$0000	                LDA #0
.194ce9		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194ceb		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.194cee		bf 00 a3 18	lda $18a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.194cf2		d0 06		bne $194cfa	                BNE next_entry                  ; No: move to the next entry
.194cf4		bf 02 a3 18	lda $18a302,x	                LDA DOS_SECTOR+2,X
.194cf8		f0 36		beq $194d30	                BEQ found_free                  ; Yes: go to allocate and return it
.194cfa		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.194cfc		d0 02		bne $194d00	                BNE inc_ptr
.194cfe		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.194d00		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.194d01		e8		inx		                INX
.194d02		e8		inx		                INX
.194d03		e8		inx		                INX
.194d04		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.194d07		90 e5		bcc $194cee	                BLT chk_entry                   ; No: check this entry
.194d09		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.194d0b		d0 18		bne $194d25	                BNE get_block
.194d0d		e6 04		inc $0324	                INC BIOS_LBA+2
.194d0f		a5 04		lda $0324	                LDA BIOS_LBA+2
.194d11		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.194d15		90 0e		bcc $194d25	                BLT get_block
.194d17		a5 02		lda $0322	                LDA BIOS_LBA
.194d19		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA
.194d1d		90 06		bcc $194d25	                BLT get_block
.194d1f		e2 20		sep #$20	                SEP #$20        ; set A short
.194d21		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.194d23		80 25		bra $194d4a	                BRA ret_failure
.194d25		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.194d29		90 1b		bcc $194d46	                BCC ret_fat_error               ; If error: throw a FAT error
.194d2b		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.194d2e		80 be		bra $194cee	                BRA chk_entry                   ; Check this entry
.194d30						found_free
.194d30		c2 20		rep #$20	                REP #$20        ; set A long
.194d32		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.194d35		9f 00 a3 18	sta $18a300,x	                STA DOS_SECTOR,X
.194d39		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.194d3c		9f 02 a3 18	sta $18a302,x	                STA DOS_SECTOR+2,X
.194d40		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.194d44		b0 0d		bcs $194d53	                BCS ret_success                 ; If OK: return success
.194d46						ret_fat_error
.194d46		e2 20		sep #$20	                SEP #$20        ; set A short
.194d48		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.194d4a						ret_failure
.194d4a		e2 20		sep #$20	                SEP #$20        ; set A short
.194d4c		85 0e		sta $032e	                STA DOS_STATUS
.194d4e		28		plp		                PLP
.194d4f		2b		pld		                PLD
.194d50		ab		plb		                PLB
.194d51		18		clc		                CLC
.194d52		6b		rtl		                RTL
.194d53						ret_success
.194d53		e2 20		sep #$20	                SEP #$20        ; set A short
.194d55		64 0e		stz $032e	                STZ DOS_STATUS
.194d57		28		plp		                PLP
.194d58		2b		pld		                PLD
.194d59		ab		plb		                PLB
.194d5a		38		sec		                SEC
.194d5b		6b		rtl		                RTL
.194d5c						DELCLUSTER
.194d5c		e2 20		sep #$20	                SEP #$20        ; set A short
.194d5e		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194d62		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194d64		d0 04		bne $194d6a	                BNE fat32                       ; No: assume it's FAT32
.194d66		5c b4 4d 19	jmp $194db4	fat12           JML DELCLUSTER12
.194d6a		4c 02 4e	jmp $194e02	fat32           JMP DELCLUSTER32
.194d6d						WRITEFAT12
.194d6d		8b		phb		                PHB
.194d6e		0b		phd		                PHD
.194d6f		48		pha		                PHA             ; begin setdbr macro
.194d70		08		php		                PHP
.194d71		e2 20		sep #$20	                SEP #$20        ; set A short
.194d73		a9 00		lda #$00	                LDA #0
.194d75		48		pha		                PHA
.194d76		ab		plb		                PLB
.194d77		28		plp		                PLP
.194d78		68		pla		                PLA             ; end setdbr macro
.194d79		48		pha		                PHA             ; begin setdp macro
.194d7a		08		php		                PHP
.194d7b		c2 20		rep #$20	                REP #$20        ; set A long
.194d7d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194d80		5b		tcd		                TCD
.194d81		28		plp		                PLP
.194d82		68		pla		                PLA             ; end setdp macro
.194d83		c2 30		rep #$30	                REP #$30        ; set A&X long
.194d85		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.194d88		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194d8a		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.194d8d		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194d8f		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.194d91		85 02		sta $0322	                STA BIOS_LBA
.194d93		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194d95		85 04		sta $0324	                STA BIOS_LBA+2
.194d97		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.194d9b		90 14		bcc $194db1	                BCC done
.194d9d		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194da0		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194da2		a9 18 00	lda #$0018	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194da5		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194da7		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.194da9		d0 02		bne $194dad	                BNE put_second
.194dab		e6 04		inc $0324	                INC BIOS_LBA+2
.194dad		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.194db1		2b		pld		done            PLD
.194db2		ab		plb		                PLB
.194db3		6b		rtl		                RTL
.194db4						DELCLUSTER12
.194db4		8b		phb		                PHB
.194db5		0b		phd		                PHD
.194db6		08		php		                PHP
.194db7		48		pha		                PHA             ; begin setdbr macro
.194db8		08		php		                PHP
.194db9		e2 20		sep #$20	                SEP #$20        ; set A short
.194dbb		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194dbd		48		pha		                PHA
.194dbe		ab		plb		                PLB
.194dbf		28		plp		                PLP
.194dc0		68		pla		                PLA             ; end setdbr macro
.194dc1		48		pha		                PHA             ; begin setdp macro
.194dc2		08		php		                PHP
.194dc3		c2 20		rep #$20	                REP #$20        ; set A long
.194dc5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194dc8		5b		tcd		                TCD
.194dc9		28		plp		                PLP
.194dca		68		pla		                PLA             ; end setdp macro
.194dcb		c2 30		rep #$30	                REP #$30        ; set A&X long
.194dcd		22 4e 49 19	jsl $19494e	                JSL FATFORCLUSTER12
.194dd1		8a		txa		                TXA                             ; Check to see if the index is odd or even
.194dd2		89 01 00	bit #$0001	                BIT #1
.194dd5		d0 08		bne $194ddf	                BNE is_odd
.194dd7		bd 00 a5	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.194dda		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.194ddd		80 06		bra $194de5	                BRA save_update
.194ddf		bd 00 a5	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.194de2		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.194de5		9d 00 a5	sta $18a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.194de8		22 6d 4d 19	jsl $194d6d	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.194dec		b0 0b		bcs $194df9	                BCS ret_success
.194dee						ret_failure
.194dee		e2 20		sep #$20	                SEP #$20        ; set A short
.194df0		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194df2		85 0e		sta $032e	                STA DOS_STATUS
.194df4		28		plp		                PLP
.194df5		2b		pld		                PLD
.194df6		ab		plb		                PLB
.194df7		18		clc		                CLC
.194df8		6b		rtl		                RTL
.194df9						ret_success
.194df9		e2 20		sep #$20	                SEP #$20        ; set A short
.194dfb		64 0e		stz $032e	                STZ DOS_STATUS
.194dfd		28		plp		                PLP
.194dfe		2b		pld		                PLD
.194dff		ab		plb		                PLB
.194e00		38		sec		                SEC
.194e01		6b		rtl		                RTL
.194e02						DELCLUSTER32
.194e02		8b		phb		                PHB
.194e03		0b		phd		                PHD
.194e04		08		php		                PHP
.194e05		c2 30		rep #$30	                REP #$30        ; set A&X long
.194e07		48		pha		                PHA             ; begin setdbr macro
.194e08		08		php		                PHP
.194e09		e2 20		sep #$20	                SEP #$20        ; set A short
.194e0b		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194e0d		48		pha		                PHA
.194e0e		ab		plb		                PLB
.194e0f		28		plp		                PLP
.194e10		68		pla		                PLA             ; end setdbr macro
.194e11		48		pha		                PHA             ; begin setdp macro
.194e12		08		php		                PHP
.194e13		c2 20		rep #$20	                REP #$20        ; set A long
.194e15		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194e18		5b		tcd		                TCD
.194e19		28		plp		                PLP
.194e1a		68		pla		                PLA             ; end setdp macro
.194e1b		22 b6 49 19	jsl $1949b6	                JSL FATFORCLUSTER32
.194e1f		a9 00 00	lda #$0000	                LDA #0
.194e22		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.194e25		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.194e28		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.194e2c		b0 0b		bcs $194e39	                BCS ret_success
.194e2e						ret_failure
.194e2e		e2 20		sep #$20	                SEP #$20        ; set A short
.194e30		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194e32		85 0e		sta $032e	                STA DOS_STATUS
.194e34		28		plp		                PLP
.194e35		2b		pld		                PLD
.194e36		ab		plb		                PLB
.194e37		18		clc		                CLC
.194e38		6b		rtl		                RTL
.194e39						ret_success
.194e39		e2 20		sep #$20	                SEP #$20        ; set A short
.194e3b		64 0e		stz $032e	                STZ DOS_STATUS
.194e3d		28		plp		                PLP
.194e3e		2b		pld		                PLD
.194e3f		ab		plb		                PLB
.194e40		38		sec		                SEC
.194e41		6b		rtl		                RTL
.194e42						DOS_APPENDCLUS
.194e42		8b		phb		                PHB
.194e43		0b		phd		                PHD
.194e44		08		php		                PHP
.194e45		48		pha		                PHA             ; begin setdbr macro
.194e46		08		php		                PHP
.194e47		e2 20		sep #$20	                SEP #$20        ; set A short
.194e49		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194e4b		48		pha		                PHA
.194e4c		ab		plb		                PLB
.194e4d		28		plp		                PLP
.194e4e		68		pla		                PLA             ; end setdbr macro
.194e4f		48		pha		                PHA             ; begin setdp macro
.194e50		08		php		                PHP
.194e51		c2 20		rep #$20	                REP #$20        ; set A long
.194e53		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194e56		5b		tcd		                TCD
.194e57		28		plp		                PLP
.194e58		68		pla		                PLA             ; end setdp macro
.194e59		c2 30		rep #$30	                REP #$30        ; set A&X long
.194e5b		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.194e5d		48		pha		                PHA
.194e5e		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194e60		48		pha		                PHA
.194e61		22 3a 4b 19	jsl $194b3a	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.194e65		b0 09		bcs $194e70	                BCS save_cluster                ; If we got a cluster, write the data to it
.194e67		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.194e68		85 10		sta $0330	                STA DOS_CLUS_ID
.194e6a		68		pla		                PLA
.194e6b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194e6d		82 7d 00	brl $194eed	                BRL pass_failure                ; Pass the failure back up the chain
.194e70		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.194e72		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194e75		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194e77		8d 38 a0	sta $18a038	                STA DOS_NEW_CLUSTER+2
.194e7a		22 4a 46 19	jsl $19464a	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.194e7e		90 e7		bcc $194e67	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.194e80		68		pla		                PLA                             ; Restore the cluster of the file
.194e81		85 10		sta $0330	                STA DOS_CLUS_ID
.194e83		68		pla		                PLA
.194e84		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194e86		22 21 4a 19	jsl $194a21	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.194e8a		b0 fa		bcs $194e86	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.194e8c		e2 20		sep #$20	                SEP #$20        ; set A short
.194e8e		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194e92		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194e94		d0 3d		bne $194ed3	                BNE fat32                       ; No: assume it's FAT32
.194e96						fat12
.194e96		c2 20		rep #$20	                REP #$20        ; set A long
.194e98		22 db 48 19	jsl $1948db	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.194e9c		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.194e9e		89 01 00	bit #$0001	                BIT #1
.194ea1		d0 11		bne $194eb4	                BNE is_odd
.194ea3		ad 36 a0	lda $18a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.194ea6		29 ff 0f	and #$0fff	                AND #$0FFF
.194ea9		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194eac		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.194eaf		29 00 f0	and #$f000	                AND #$F000
.194eb2		80 10		bra $194ec4	                BRA update_fat12
.194eb4		ad 36 a0	lda $18a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.194eb7		0a		asl a		                ASL A
.194eb8		0a		asl a		                ASL A
.194eb9		0a		asl a		                ASL A
.194eba		0a		asl a		                ASL A
.194ebb		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194ebe		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.194ec1		29 0f 00	and #$000f	                AND #$000F
.194ec4		0d 36 a0	ora $18a036	update_fat12    ORA DOS_NEW_CLUSTER
.194ec7		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194eca		22 6d 4d 19	jsl $194d6d	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.194ece		b0 22		bcs $194ef2	                BCS ret_success
.194ed0		82 1a 00	brl $194eed	                BRL pass_failure
.194ed3						fat32
.194ed3		c2 20		rep #$20	                REP #$20        ; set A long
.194ed5		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.194ed8		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194edb		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.194ede		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.194ee1		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.194ee5		b0 0b		bcs $194ef2	                BCS ret_success
.194ee7		e2 20		sep #$20	                SEP #$20        ; set A short
.194ee9		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.194eeb		85 0e		sta $032e	                STA DOS_STATUS
.194eed		28		plp		pass_failure    PLP
.194eee		2b		pld		                PLD
.194eef		ab		plb		                PLB
.194ef0		18		clc		                CLC
.194ef1		6b		rtl		                RTL
.194ef2						ret_success
.194ef2		e2 20		sep #$20	                SEP #$20        ; set A short
.194ef4		64 0e		stz $032e	                STZ DOS_STATUS
.194ef6		28		plp		                PLP
.194ef7		2b		pld		                PLD
.194ef8		ab		plb		                PLB
.194ef9		38		sec		                SEC
.194efa		6b		rtl		                RTL
.194efb						BCD2BIN
.194efb		8b		phb		                PHB
.194efc		0b		phd		                PHD
.194efd		08		php		                PHP
.194efe		48		pha		                PHA             ; begin setdbr macro
.194eff		08		php		                PHP
.194f00		e2 20		sep #$20	                SEP #$20        ; set A short
.194f02		a9 00		lda #$00	                LDA #0
.194f04		48		pha		                PHA
.194f05		ab		plb		                PLB
.194f06		28		plp		                PLP
.194f07		68		pla		                PLA             ; end setdbr macro
.194f08		48		pha		                PHA             ; begin setdp macro
.194f09		08		php		                PHP
.194f0a		c2 20		rep #$20	                REP #$20        ; set A long
.194f0c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194f0f		5b		tcd		                TCD
.194f10		28		plp		                PLP
.194f11		68		pla		                PLA             ; end setdp macro
.194f12		c2 30		rep #$30	                REP #$30        ; set A&X long
.194f14		85 28		sta $0348	                STA DOS_TEMP
.194f16		29 0f 00	and #$000f	                AND #$000F
.194f19		85 2a		sta $034a	                STA DOS_TEMP+2
.194f1b		a5 28		lda $0348	                LDA DOS_TEMP
.194f1d		4a		lsr a		                LSR A
.194f1e		4a		lsr a		                LSR A
.194f1f		4a		lsr a		                LSR A
.194f20		4a		lsr a		                LSR A
.194f21		85 28		sta $0348	                STA DOS_TEMP
.194f23		29 0f 00	and #$000f	                AND #$000F
.194f26		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194f2a		a9 0a 00	lda #$000a	                LDA #10
.194f2d		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194f31		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194f35		18		clc		                CLC
.194f36		65 2a		adc $034a	                ADC DOS_TEMP+2
.194f38		85 2a		sta $034a	                STA DOS_TEMP+2
.194f3a		a5 28		lda $0348	                LDA DOS_TEMP
.194f3c		4a		lsr a		                LSR A
.194f3d		4a		lsr a		                LSR A
.194f3e		4a		lsr a		                LSR A
.194f3f		4a		lsr a		                LSR A
.194f40		85 28		sta $0348	                STA DOS_TEMP
.194f42		29 0f 00	and #$000f	                AND #$000F
.194f45		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194f49		a9 64 00	lda #$0064	                LDA #100
.194f4c		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194f50		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194f54		18		clc		                CLC
.194f55		65 2a		adc $034a	                ADC DOS_TEMP+2
.194f57		85 2a		sta $034a	                STA DOS_TEMP+2
.194f59		a5 28		lda $0348	                LDA DOS_TEMP
.194f5b		4a		lsr a		                LSR A
.194f5c		4a		lsr a		                LSR A
.194f5d		4a		lsr a		                LSR A
.194f5e		4a		lsr a		                LSR A
.194f5f		29 0f 00	and #$000f	                AND #$000F
.194f62		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194f66		a9 e8 03	lda #$03e8	                LDA #1000
.194f69		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194f6d		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194f71		18		clc		                CLC
.194f72		65 2a		adc $034a	                ADC DOS_TEMP+2
.194f74		28		plp		                PLP
.194f75		2b		pld		                PLD
.194f76		ab		plb		                PLB
.194f77		6b		rtl		                RTL
.194f78						DOS_RTCCREATE
.194f78		8b		phb		                PHB
.194f79		0b		phd		                PHD
.194f7a		08		php		                PHP
.194f7b		48		pha		                PHA             ; begin setdbr macro
.194f7c		08		php		                PHP
.194f7d		e2 20		sep #$20	                SEP #$20        ; set A short
.194f7f		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194f81		48		pha		                PHA
.194f82		ab		plb		                PLB
.194f83		28		plp		                PLP
.194f84		68		pla		                PLA             ; end setdbr macro
.194f85		48		pha		                PHA             ; begin setdp macro
.194f86		08		php		                PHP
.194f87		c2 20		rep #$20	                REP #$20        ; set A long
.194f89		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194f8c		5b		tcd		                TCD
.194f8d		28		plp		                PLP
.194f8e		68		pla		                PLA             ; end setdp macro
.194f8f		c2 10		rep #$10	                REP #$10        ; set X long
.194f91		e2 20		sep #$20	                SEP #$20        ; set A short
.194f93		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.194f97		09 08		ora #$08	                ORA #%00001000
.194f99		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.194f9d		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.194fa1		85 29		sta $0349	                STA DOS_TEMP+1
.194fa3		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.194fa7		85 28		sta $0348	                STA DOS_TEMP
.194fa9		c2 20		rep #$20	                REP #$20        ; set A long
.194fab		a5 28		lda $0348	                LDA DOS_TEMP
.194fad		22 fb 4e 19	jsl $194efb	                JSL BCD2BIN                 ; Convert it to binary
.194fb1		85 28		sta $0348	                STA DOS_TEMP
.194fb3		38		sec		                SEC                         ; Year is relative to 1980
.194fb4		e9 bc 07	sbc #$07bc	                SBC #1980
.194fb7		c2 20		rep #$20	                REP #$20        ; set A long
.194fb9		0a		asl a		                ASL A
.194fba		0a		asl a		                ASL A
.194fbb		0a		asl a		                ASL A
.194fbc		0a		asl a		                ASL A
.194fbd		0a		asl a		                ASL A
.194fbe		0a		asl a		                ASL A
.194fbf		0a		asl a		                ASL A
.194fc0		0a		asl a		                ASL A
.194fc1		0a		asl a		                ASL A
.194fc2		29 00 fe	and #$fe00	                AND #$FE00
.194fc5		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194fc8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194fca		e2 20		sep #$20	                SEP #$20        ; set A short
.194fcc		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.194fd0		c2 20		rep #$20	                REP #$20        ; set A long
.194fd2		29 ff 00	and #$00ff	                AND #$00FF
.194fd5		22 fb 4e 19	jsl $194efb	                JSL BCD2BIN                 ; Convert it to binary
.194fd9		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.194fdc		0a		asl a		                ASL A
.194fdd		0a		asl a		                ASL A
.194fde		0a		asl a		                ASL A
.194fdf		0a		asl a		                ASL A
.194fe0		0a		asl a		                ASL A
.194fe1		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.194fe4		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194fe7		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194fe9		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194feb		e2 20		sep #$20	                SEP #$20        ; set A short
.194fed		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.194ff1		c2 20		rep #$20	                REP #$20        ; set A long
.194ff3		29 ff 00	and #$00ff	                AND #$00FF
.194ff6		22 fb 4e 19	jsl $194efb	                JSL BCD2BIN                 ; Convert it to binary
.194ffa		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.194ffd		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.195000		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.195002		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195004		e2 20		sep #$20	                SEP #$20        ; set A short
.195006		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.19500a		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.19500c		c2 20		rep #$20	                REP #$20        ; set A long
.19500e		29 ff 00	and #$00ff	                AND #$00FF
.195011		22 fb 4e 19	jsl $194efb	                JSL BCD2BIN                 ; Convert it to binary
.195015		c2 20		rep #$20	                REP #$20        ; set A long
.195017		0a		asl a		                ASL A
.195018		0a		asl a		                ASL A
.195019		0a		asl a		                ASL A
.19501a		0a		asl a		                ASL A
.19501b		0a		asl a		                ASL A
.19501c		0a		asl a		                ASL A
.19501d		0a		asl a		                ASL A
.19501e		0a		asl a		                ASL A
.19501f		0a		asl a		                ASL A
.195020		0a		asl a		                ASL A
.195021		0a		asl a		                ASL A
.195022		29 00 f8	and #$f800	                AND #$F800
.195025		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.195028		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19502a		e2 20		sep #$20	                SEP #$20        ; set A short
.19502c		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.195030		c2 20		rep #$20	                REP #$20        ; set A long
.195032		29 ff 00	and #$00ff	                AND #$00FF
.195035		22 fb 4e 19	jsl $194efb	                JSL BCD2BIN                 ; Convert it to binary
.195039		c2 20		rep #$20	                REP #$20        ; set A long
.19503b		0a		asl a		                ASL A
.19503c		0a		asl a		                ASL A
.19503d		0a		asl a		                ASL A
.19503e		0a		asl a		                ASL A
.19503f		0a		asl a		                ASL A
.195040		29 e0 07	and #$07e0	                AND #$07E0
.195043		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.195046		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.195048		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19504a		e2 20		sep #$20	                SEP #$20        ; set A short
.19504c		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.195050		c2 20		rep #$20	                REP #$20        ; set A long
.195052		29 ff 00	and #$00ff	                AND #$00FF
.195055		22 fb 4e 19	jsl $194efb	                JSL BCD2BIN                 ; Convert it to binary
.195059		c2 20		rep #$20	                REP #$20        ; set A long
.19505b		29 1f 00	and #$001f	                AND #$001F
.19505e		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.195061		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.195063		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195065		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.195069		29 f7 00	and #$00f7	                AND #%11110111
.19506c		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.195070		28		plp		                PLP
.195071		2b		pld		                PLD
.195072		ab		plb		                PLB
.195073		6b		rtl		                RTL
.195074						DOS_CREATE
.195074		8b		phb		                PHB
.195075		0b		phd		                PHD
.195076		08		php		                PHP
.195077		48		pha		                PHA             ; begin setdbr macro
.195078		08		php		                PHP
.195079		e2 20		sep #$20	                SEP #$20        ; set A short
.19507b		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19507d		48		pha		                PHA
.19507e		ab		plb		                PLB
.19507f		28		plp		                PLP
.195080		68		pla		                PLA             ; end setdbr macro
.195081		48		pha		                PHA             ; begin setdp macro
.195082		08		php		                PHP
.195083		c2 20		rep #$20	                REP #$20        ; set A long
.195085		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195088		5b		tcd		                TCD
.195089		28		plp		                PLP
.19508a		68		pla		                PLA             ; end setdp macro
.19508b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19508d		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.195090		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195092		85 28		sta $0348	                STA DOS_TEMP
.195094		c8		iny		                INY
.195095		c8		iny		                INY
.195096		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195098		85 2a		sta $034a	                STA DOS_TEMP+2
.19509a		e2 20		sep #$20	                SEP #$20        ; set A short
.19509c		a0 00 00	ldy #$0000	                LDY #0
.19509f		a2 00 00	ldx #$0000	                LDX #0
.1950a2		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.1950a4		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.1950a6		f0 04		beq $1950ac	                BEQ find_file                   ; If it's NULL, we're done
.1950a8		e8		inx		                INX
.1950a9		c8		iny		                INY
.1950aa		80 f6		bra $1950a2	                BRA path_loop
.1950ac		22 5b 47 19	jsl $19475b	find_file       JSL DOS_PARSE_PATH
.1950b0		22 f3 47 19	jsl $1947f3	                JSL DOS_FINDFILE
.1950b4		90 07		bcc $1950bd	                BCC set_device
.1950b6		e2 20		sep #$20	                SEP #$20        ; set A short
.1950b8		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.1950ba		82 d2 00	brl $19518f	                BRL ret_failure
.1950bd						set_device
.1950bd		e2 20		sep #$20	                SEP #$20        ; set A short
.1950bf		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.1950c2		a5 01		lda $0321	                LDA BIOS_DEV
.1950c4		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1950c6						validate_name
.1950c6		22 3a 4b 19	jsl $194b3a	                JSL DOS_FREECLUS
.1950ca		b0 03		bcs $1950cf	                BCS save_data
.1950cc		82 c4 00	brl $195193	                BRL pass_failure
.1950cf						save_data
.1950cf		c2 20		rep #$20	                REP #$20        ; set A long
.1950d1		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.1950d4		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.1950d6		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1950d8		c8		iny		                INY
.1950d9		c8		iny		                INY
.1950da		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1950dc		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1950de		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.1950e1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950e3		85 1c		sta $033c	                STA DOS_BUFF_PTR
.1950e5		c8		iny		                INY
.1950e6		c8		iny		                INY
.1950e7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950e9		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.1950eb		22 4a 46 19	jsl $19464a	                JSL DOS_PUTCLUSTER
.1950ef		b0 00		bcs $1950f1	                BCS find_dir
.1950f1						find_dir
.1950f1		c2 20		rep #$20	                REP #$20        ; set A long
.1950f3		22 85 41 19	jsl $194185	                JSL DOS_DIRFINDFREE
.1950f7		b0 1a		bcs $195113	                BCS set_entry
.1950f9		c2 20		rep #$20	                REP #$20        ; set A long
.1950fb		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.1950fe		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.195100		85 10		sta $0330	                STA DOS_CLUS_ID
.195102		c8		iny		                INY
.195103		c8		iny		                INY
.195104		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195106		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195108		22 02 4e 19	jsl $194e02	                JSL DELCLUSTER32                ; Delete the cluster
.19510c		e2 20		sep #$20	                SEP #$20        ; set A short
.19510e		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.195110		82 7c 00	brl $19518f	                BRL ret_failure
.195113						set_entry
.195113		e2 20		sep #$20	                SEP #$20        ; set A short
.195115		a0 00 00	ldy #$0000	                LDY #0
.195118		a9 00		lda #$00	                LDA #0                          ; NULL
.19511a		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.19511c		c8		iny		                INY
.19511d		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.195120		d0 f8		bne $19511a	                BNE copy_dir_loop
.195122		a0 00 00	ldy #$0000	                LDY #0
.195125		b9 3a a0	lda $18a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.195128		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.19512a		c8		iny		                INY
.19512b		c0 0b 00	cpy #$000b	                CPY #11
.19512e		d0 f5		bne $195125	                BNE name_loop
.195130		c2 20		rep #$20	                REP #$20        ; set A long
.195132		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.195135		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195137		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.19513a		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.19513c		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.19513f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195141		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.195144		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.195146		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.195149		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19514b		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.19514e		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.195150		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.195153		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195155		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.195158		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.19515a		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.19515d		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.195160		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195162		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.195165		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195167		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.19516a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19516c		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.19516f		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.195171		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.195174		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.195176		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.195179		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19517b		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.19517e		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.195180		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.195183		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.195185		c2 20		rep #$20	                REP #$20        ; set A long
.195187		22 43 42 19	jsl $194243	                JSL DOS_DIRWRITE
.19518b		b0 0b		bcs $195198	                BCS ret_success
.19518d		80 04		bra $195193	                BRA pass_failure
.19518f						ret_failure
.19518f		e2 20		sep #$20	                SEP #$20        ; set A short
.195191		85 0e		sta $032e	                STA DOS_STATUS
.195193		28		plp		pass_failure    PLP
.195194		2b		pld		                PLD
.195195		ab		plb		                PLB
.195196		18		clc		                CLC
.195197		6b		rtl		                RTL
.195198						ret_success
.195198		e2 20		sep #$20	                SEP #$20        ; set A short
.19519a		64 0e		stz $032e	                STZ DOS_STATUS
.19519c		28		plp		                PLP
.19519d		2b		pld		                PLD
.19519e		ab		plb		                PLB
.19519f		38		sec		                SEC
.1951a0		6b		rtl		                RTL
.1951a1						DOS_COPYPATH
.1951a1		da		phx		                PHX
.1951a2		5a		phy		                PHY
.1951a3		8b		phb		                PHB
.1951a4		0b		phd		                PHD
.1951a5		08		php		                PHP
.1951a6		48		pha		                PHA             ; begin setdbr macro
.1951a7		08		php		                PHP
.1951a8		e2 20		sep #$20	                SEP #$20        ; set A short
.1951aa		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1951ac		48		pha		                PHA
.1951ad		ab		plb		                PLB
.1951ae		28		plp		                PLP
.1951af		68		pla		                PLA             ; end setdbr macro
.1951b0		48		pha		                PHA             ; begin setdp macro
.1951b1		08		php		                PHP
.1951b2		c2 20		rep #$20	                REP #$20        ; set A long
.1951b4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1951b7		5b		tcd		                TCD
.1951b8		28		plp		                PLP
.1951b9		68		pla		                PLA             ; end setdp macro
.1951ba		c2 30		rep #$30	                REP #$30        ; set A&X long
.1951bc		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.1951bf		a2 00 00	ldx #$0000	                LDX #0
.1951c2		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.1951c4		e8		inx		                INX
.1951c5		e8		inx		                INX
.1951c6		e0 00 01	cpx #$0100	                CPX #256
.1951c9		d0 f7		bne $1951c2	                BNE clr_loop
.1951cb		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.1951cd		d0 04		bne $1951d3	                BNE get_path            ; No: attempt to fetch the path
.1951cf		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.1951d1		f0 27		beq $1951fa	                BEQ done                ; Yes: return an empty buffer
.1951d3		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.1951d6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1951d8		85 28		sta $0348	                STA DOS_TEMP
.1951da		c8		iny		                INY
.1951db		c8		iny		                INY
.1951dc		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1951de		85 2a		sta $034a	                STA DOS_TEMP+2
.1951e0		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.1951e2		d0 04		bne $1951e8	                BNE start_copy          ; No: start copying it
.1951e4		a5 2a		lda $034a	                LDA DOS_TEMP+2
.1951e6		f0 12		beq $1951fa	                BEQ done                ; Yes: return an empty buffer
.1951e8						start_copy
.1951e8		e2 20		sep #$20	                SEP #$20        ; set A short
.1951ea		a2 00 00	ldx #$0000	                LDX #0
.1951ed		a0 00 00	ldy #$0000	                LDY #0
.1951f0		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.1951f2		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.1951f4		f0 04		beq $1951fa	                BEQ done
.1951f6		e8		inx		                INX
.1951f7		c8		iny		                INY
.1951f8		d0 f6		bne $1951f0	                BNE loop
.1951fa		28		plp		done            PLP
.1951fb		2b		pld		                PLD
.1951fc		ab		plb		                PLB
.1951fd		7a		ply		                PLY
.1951fe		fa		plx		                PLX
.1951ff		6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.195200						DOS_TEST
.195200		8b		phb		                PHB
.195201		0b		phd		                PHD
.195202		08		php		                PHP
.195203		48		pha		                PHA             ; begin setdbr macro
.195204		08		php		                PHP
.195205		e2 20		sep #$20	                SEP #$20        ; set A short
.195207		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195209		48		pha		                PHA
.19520a		ab		plb		                PLB
.19520b		28		plp		                PLP
.19520c		68		pla		                PLA             ; end setdbr macro
.19520d		48		pha		                PHA             ; begin setdp macro
.19520e		08		php		                PHP
.19520f		c2 20		rep #$20	                REP #$20        ; set A long
.195211		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195214		5b		tcd		                TCD
.195215		28		plp		                PLP
.195216		68		pla		                PLA             ; end setdp macro
.195217		c2 30		rep #$30	                REP #$30        ; set A&X long
.195219		a9 3f 52	lda #$523f	                LDA #<>src_file
.19521c		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.195220		a9 19 00	lda #$0019	                LDA #`src_file
.195223		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.195227		a9 4c 52	lda #$524c	                LDA #<>dst_file
.19522a		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.19522e		a9 19 00	lda #$0019	                LDA #`dst_file
.195231		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.195235		22 71 5a 19	jsl $195a71	                JSL IF_COPY
.195239		b0 00		bcs $19523b	                BCS done
.19523b		28		plp		done            PLP
.19523c		2b		pld		                PLD
.19523d		ab		plb		                PLB
.19523e		6b		rtl		                RTL
>19523f		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>195247		2e 62 61 73 00
>19524c		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>195254		32 2e 62 61 73 00
.19525a						IF_OPEN
.19525a		da		phx		                PHX
.19525b		5a		phy		                PHY
.19525c		0b		phd		                PHD
.19525d		8b		phb		                PHB
.19525e		08		php		                PHP
.19525f		48		pha		                PHA             ; begin setdbr macro
.195260		08		php		                PHP
.195261		e2 20		sep #$20	                SEP #$20        ; set A short
.195263		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195265		48		pha		                PHA
.195266		ab		plb		                PLB
.195267		28		plp		                PLP
.195268		68		pla		                PLA             ; end setdbr macro
.195269		48		pha		                PHA             ; begin setdp macro
.19526a		08		php		                PHP
.19526b		c2 20		rep #$20	                REP #$20        ; set A long
.19526d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195270		5b		tcd		                TCD
.195271		28		plp		                PLP
.195272		68		pla		                PLA             ; end setdp macro
.195273		e2 20		sep #$20	                SEP #$20        ; set A short
.195275		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.195278		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19527a		89 20		bit #$20	                BIT #FD_STAT_OPEN
.19527c		f0 05		beq $195283	                BEQ ok_to_open
.19527e		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.195280		82 87 06	brl $19590a	                BRL IF_FAILURE
.195283		22 a1 51 19	jsl $1951a1	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.195287		22 f3 47 19	jsl $1947f3	                JSL DOS_FINDFILE                ; Attempt to find the file
.19528b		b0 03		bcs $195290	                BCS is_found                    ; If OK: we found the file
.19528d		82 7e 06	brl $19590e	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.195290						is_found
.195290		e2 20		sep #$20	                SEP #$20        ; set A short
.195292		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.195295		a5 01		lda $0321	                LDA BIOS_DEV
.195297		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195299		c2 20		rep #$20	                REP #$20        ; set A long
.19529b		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.19529e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1952a0		85 1c		sta $033c	                STA DOS_BUFF_PTR
.1952a2		c8		iny		                INY
.1952a3		c8		iny		                INY
.1952a4		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1952a6		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.1952a8		22 0d 46 19	jsl $19460d	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.1952ac		b0 03		bcs $1952b1	                BCS read_cluster
.1952ae		82 5d 06	brl $19590e	                BRL IF_PASSFAILURE
.1952b1		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.1952b4		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1952b6		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1952b8		c8		iny		                INY
.1952b9		c8		iny		                INY
.1952ba		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1952bc		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1952be		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.1952c1		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1952c3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1952c5		c8		iny		                INY
.1952c6		c8		iny		                INY
.1952c7		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1952c9		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1952cb		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.1952ce		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.1952d0		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.1952d3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1952d5		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.1952d8		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.1952da		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.1952dd		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1952df		e2 20		sep #$20	                SEP #$20        ; set A short
.1952e1		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.1952e4		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.1952e6		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.1952e8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1952ea		82 28 06	brl $195915	                BRL IF_SUCCESS
.1952ed						IF_CREATE
.1952ed		da		phx		                PHX
.1952ee		5a		phy		                PHY
.1952ef		0b		phd		                PHD
.1952f0		8b		phb		                PHB
.1952f1		08		php		                PHP
.1952f2		48		pha		                PHA             ; begin setdbr macro
.1952f3		08		php		                PHP
.1952f4		e2 20		sep #$20	                SEP #$20        ; set A short
.1952f6		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1952f8		48		pha		                PHA
.1952f9		ab		plb		                PLB
.1952fa		28		plp		                PLP
.1952fb		68		pla		                PLA             ; end setdbr macro
.1952fc		48		pha		                PHA             ; begin setdp macro
.1952fd		08		php		                PHP
.1952fe		c2 20		rep #$20	                REP #$20        ; set A long
.195300		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195303		5b		tcd		                TCD
.195304		28		plp		                PLP
.195305		68		pla		                PLA             ; end setdp macro
.195306		22 74 50 19	jsl $195074	                JSL DOS_CREATE                  ; Attempt to create the file
.19530a		90 18		bcc $195324	                BCC pass_failure                ; If it fails: pass the failure up the chain
.19530c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19530e		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.195311		a9 00 00	lda #$0000	                LDA #0
.195314		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195316		c8		iny		                INY
.195317		c8		iny		                INY
.195318		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19531a		e2 20		sep #$20	                SEP #$20        ; set A short
.19531c		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.19531f		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.195321		82 f1 05	brl $195915	                BRL IF_SUCCESS
.195324		82 e3 05	brl $19590a	pass_failure    BRL IF_FAILURE
.195327						IF_CLOSE
.195327		da		phx		                PHX
.195328		5a		phy		                PHY
.195329		0b		phd		                PHD
.19532a		8b		phb		                PHB
.19532b		08		php		                PHP
.19532c		48		pha		                PHA             ; begin setdbr macro
.19532d		08		php		                PHP
.19532e		e2 20		sep #$20	                SEP #$20        ; set A short
.195330		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195332		48		pha		                PHA
.195333		ab		plb		                PLB
.195334		28		plp		                PLP
.195335		68		pla		                PLA             ; end setdbr macro
.195336		48		pha		                PHA             ; begin setdp macro
.195337		08		php		                PHP
.195338		c2 20		rep #$20	                REP #$20        ; set A long
.19533a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19533d		5b		tcd		                TCD
.19533e		28		plp		                PLP
.19533f		68		pla		                PLA             ; end setdp macro
.195340		e2 20		sep #$20	                SEP #$20        ; set A short
.195342		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.195345		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195347		89 02		bit #$02	                BIT #FD_STAT_WRITE
.195349		f0 09		beq $195354	                BEQ set_flag                    ; No, just mark it closed
.19534b		22 c0 53 19	jsl $1953c0	                JSL IF_WRITE                    ; Attempt to write the cluster
.19534f		b0 03		bcs $195354	                BCS set_flag
.195351		82 ba 05	brl $19590e	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.195354		22 0f 5a 19	jsl $195a0f	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.195358		82 ba 05	brl $195915	                BRL IF_SUCCESS
.19535b						IF_READ
.19535b		da		phx		                PHX
.19535c		5a		phy		                PHY
.19535d		0b		phd		                PHD
.19535e		8b		phb		                PHB
.19535f		08		php		                PHP
.195360		48		pha		                PHA             ; begin setdbr macro
.195361		08		php		                PHP
.195362		e2 20		sep #$20	                SEP #$20        ; set A short
.195364		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195366		48		pha		                PHA
.195367		ab		plb		                PLB
.195368		28		plp		                PLP
.195369		68		pla		                PLA             ; end setdbr macro
.19536a		48		pha		                PHA             ; begin setdp macro
.19536b		08		php		                PHP
.19536c		c2 20		rep #$20	                REP #$20        ; set A long
.19536e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195371		5b		tcd		                TCD
.195372		28		plp		                PLP
.195373		68		pla		                PLA             ; end setdp macro
.195374		c2 10		rep #$10	                REP #$10        ; set X long
.195376		e2 20		sep #$20	                SEP #$20        ; set A short
.195378						get_dev
.195378		e2 20		sep #$20	                SEP #$20        ; set A short
.19537a		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.19537d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19537f		85 01		sta $0321	                STA BIOS_DEV
.195381		22 75 43 19	jsl $194375	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.195385		c2 20		rep #$20	                REP #$20        ; set A long
.195387		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.19538a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19538c		85 10		sta $0330	                STA DOS_CLUS_ID
.19538e		c8		iny		                INY
.19538f		c8		iny		                INY
.195390		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195392		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195394		22 21 4a 19	jsl $194a21	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.195398		90 13		bcc $1953ad	                BCC pass_failure                ; If not OK: pass the failure up the chain
.19539a		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.19539d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19539f		85 1c		sta $033c	                STA DOS_BUFF_PTR
.1953a1		c8		iny		                INY
.1953a2		c8		iny		                INY
.1953a3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953a5		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.1953a7		22 0d 46 19	jsl $19460d	                JSL DOS_GETCLUSTER              ; Get the cluster
.1953ab		b0 03		bcs $1953b0	                BCS ret_success                 ; If ok: return success
.1953ad						pass_failure
.1953ad		82 5e 05	brl $19590e	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.1953b0		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.1953b3		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1953b5		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1953b7		c8		iny		                INY
.1953b8		c8		iny		                INY
.1953b9		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1953bb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1953bd		82 55 05	brl $195915	                BRL IF_SUCCESS
.1953c0						IF_WRITE
.1953c0		da		phx		                PHX
.1953c1		5a		phy		                PHY
.1953c2		0b		phd		                PHD
.1953c3		8b		phb		                PHB
.1953c4		08		php		                PHP
.1953c5		48		pha		                PHA             ; begin setdbr macro
.1953c6		08		php		                PHP
.1953c7		e2 20		sep #$20	                SEP #$20        ; set A short
.1953c9		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1953cb		48		pha		                PHA
.1953cc		ab		plb		                PLB
.1953cd		28		plp		                PLP
.1953ce		68		pla		                PLA             ; end setdbr macro
.1953cf		48		pha		                PHA             ; begin setdp macro
.1953d0		08		php		                PHP
.1953d1		c2 20		rep #$20	                REP #$20        ; set A long
.1953d3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1953d6		5b		tcd		                TCD
.1953d7		28		plp		                PLP
.1953d8		68		pla		                PLA             ; end setdp macro
.1953d9		c2 10		rep #$10	                REP #$10        ; set X long
.1953db		e2 20		sep #$20	                SEP #$20        ; set A short
.1953dd		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.1953e0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953e2		85 01		sta $0321	                STA BIOS_DEV
.1953e4		22 75 43 19	jsl $194375	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.1953e8		c2 20		rep #$20	                REP #$20        ; set A long
.1953ea		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.1953ed		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953ef		85 1c		sta $033c	                STA DOS_BUFF_PTR
.1953f1		c8		iny		                INY
.1953f2		c8		iny		                INY
.1953f3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953f5		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.1953f7		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.1953fa		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953fc		85 10		sta $0330	                STA DOS_CLUS_ID
.1953fe		c8		iny		                INY
.1953ff		c8		iny		                INY
.195400		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195402		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195404		d0 1a		bne $195420	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.195406		a5 10		lda $0330	                LDA DOS_CLUS_ID
.195408		d0 16		bne $195420	                BNE rewrite_cluster
.19540a		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.19540d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19540f		85 10		sta $0330	                STA DOS_CLUS_ID
.195411		c8		iny		                INY
.195412		c8		iny		                INY
.195413		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195415		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195417		22 42 4e 19	jsl $194e42	                JSL DOS_APPENDCLUS              ; Append the cluster
.19541b		b0 0c		bcs $195429	                BCS ret_success                 ; If OK: return success
.19541d		82 ee 04	brl $19590e	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.195420		22 4a 46 19	jsl $19464a	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.195424		b0 03		bcs $195429	                BCS ret_success                 ; If ok: return success
.195426		82 e5 04	brl $19590e	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.195429		82 e9 04	brl $195915	ret_success     BRL IF_SUCCESS
.19542c						IF_DIROPEN
.19542c		da		phx		                PHX
.19542d		5a		phy		                PHY
.19542e		0b		phd		                PHD
.19542f		8b		phb		                PHB
.195430		08		php		                PHP
.195431		48		pha		                PHA             ; begin setdbr macro
.195432		08		php		                PHP
.195433		e2 20		sep #$20	                SEP #$20        ; set A short
.195435		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195437		48		pha		                PHA
.195438		ab		plb		                PLB
.195439		28		plp		                PLP
.19543a		68		pla		                PLA             ; end setdbr macro
.19543b		48		pha		                PHA             ; begin setdp macro
.19543c		08		php		                PHP
.19543d		c2 20		rep #$20	                REP #$20        ; set A long
.19543f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195442		5b		tcd		                TCD
.195443		28		plp		                PLP
.195444		68		pla		                PLA             ; end setdp macro
.195445		c2 30		rep #$30	                REP #$30        ; set A&X long
.195447		22 a1 51 19	jsl $1951a1	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.19544b		22 5b 47 19	jsl $19475b	                JSL DOS_PARSE_PATH          ; Parse the path
.19544f		22 75 43 19	jsl $194375	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.195453		b0 03		bcs $195458	                BCS get_root_dir            ; If successful: get the root directory
.195455		82 b6 04	brl $19590e	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.195458						get_root_dir
.195458		c2 30		rep #$30	                REP #$30        ; set A&X long
.19545a		22 2a 40 19	jsl $19402a	                JSL DOS_DIROPEN
.19545e		b0 03		bcs $195463	                BCS success
.195460		82 ab 04	brl $19590e	                BRL IF_PASSFAILURE
.195463		82 af 04	brl $195915	success         BRL IF_SUCCESS
.195466						IF_DIRNEXT
.195466		5c c4 40 19	jmp $1940c4	                JML DOS_DIRNEXT
.19546a						IF_DELETE
.19546a		da		phx		                PHX
.19546b		5a		phy		                PHY
.19546c		0b		phd		                PHD
.19546d		8b		phb		                PHB
.19546e		08		php		                PHP
.19546f		48		pha		                PHA             ; begin setdbr macro
.195470		08		php		                PHP
.195471		e2 20		sep #$20	                SEP #$20        ; set A short
.195473		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195475		48		pha		                PHA
.195476		ab		plb		                PLB
.195477		28		plp		                PLP
.195478		68		pla		                PLA             ; end setdbr macro
.195479		48		pha		                PHA             ; begin setdp macro
.19547a		08		php		                PHP
.19547b		c2 20		rep #$20	                REP #$20        ; set A long
.19547d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195480		5b		tcd		                TCD
.195481		28		plp		                PLP
.195482		68		pla		                PLA             ; end setdp macro
.195483		c2 30		rep #$30	                REP #$30        ; set A&X long
.195485		22 f3 47 19	jsl $1947f3	                JSL DOS_FINDFILE
.195489		b0 03		bcs $19548e	                BCS get_first_clus
.19548b		82 80 04	brl $19590e	                BRL IF_PASSFAILURE
.19548e						get_first_clus
.19548e		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.195491		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.195493		85 10		sta $0330	                STA DOS_CLUS_ID
.195495		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.195498		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.19549a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19549c		a5 10		lda $0330	                LDA DOS_CLUS_ID
.19549e		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.1954a1		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1954a3		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.1954a6		22 21 4a 19	jsl $194a21	del_loop        JSL NEXTCLUSTER
.1954aa		90 2f		bcc $1954db	                BCC del_one
.1954ac		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1954ae		8d 2e a0	sta $18a02e	                STA DOS_NEXT_CLUS
.1954b1		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1954b3		8d 30 a0	sta $18a030	                STA DOS_NEXT_CLUS+2
.1954b6		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.1954b9		85 10		sta $0330	                STA DOS_CLUS_ID
.1954bb		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.1954be		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1954c0		22 02 4e 19	jsl $194e02	                JSL DELCLUSTER32
.1954c4		b0 03		bcs $1954c9	                BCS go_next
.1954c6		82 45 04	brl $19590e	                BRL IF_PASSFAILURE
.1954c9						go_next
.1954c9		ad 2e a0	lda $18a02e	                LDA DOS_NEXT_CLUS
.1954cc		85 10		sta $0330	                STA DOS_CLUS_ID
.1954ce		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.1954d1		ad 30 a0	lda $18a030	                LDA DOS_NEXT_CLUS+2
.1954d4		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1954d6		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.1954d9		80 cb		bra $1954a6	                BRA del_loop
.1954db						del_one
.1954db		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.1954de		85 10		sta $0330	                STA DOS_CLUS_ID
.1954e0		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.1954e3		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1954e5		22 5c 4d 19	jsl $194d5c	                JSL DELCLUSTER
.1954e9		b0 03		bcs $1954ee	                BCS free_dir_entry
.1954eb		82 20 04	brl $19590e	                BRL IF_PASSFAILURE
.1954ee						free_dir_entry
.1954ee		e2 20		sep #$20	                SEP #$20        ; set A short
.1954f0		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.1954f3		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.1954f5		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.1954f7		22 43 42 19	jsl $194243	                JSL DOS_DIRWRITE                ; Write the directory entry back
.1954fb		b0 03		bcs $195500	                BCS ret_success
.1954fd		82 0e 04	brl $19590e	                BRL IF_PASSFAILURE
.195500		82 12 04	brl $195915	ret_success     BRL IF_SUCCESS
.195503						IF_DIRREAD
.195503		da		phx		                PHX
.195504		5a		phy		                PHY
.195505		0b		phd		                PHD
.195506		8b		phb		                PHB
.195507		08		php		                PHP
.195508		48		pha		                PHA             ; begin setdbr macro
.195509		08		php		                PHP
.19550a		e2 20		sep #$20	                SEP #$20        ; set A short
.19550c		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19550e		48		pha		                PHA
.19550f		ab		plb		                PLB
.195510		28		plp		                PLP
.195511		68		pla		                PLA             ; end setdbr macro
.195512		48		pha		                PHA             ; begin setdp macro
.195513		08		php		                PHP
.195514		c2 20		rep #$20	                REP #$20        ; set A long
.195516		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195519		5b		tcd		                TCD
.19551a		28		plp		                PLP
.19551b		68		pla		                PLA             ; end setdp macro
.19551c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19551e		22 f3 47 19	jsl $1947f3	                JSL DOS_FINDFILE
.195522		b0 03		bcs $195527	                BCS success
.195524		82 e3 03	brl $19590a	                BRL IF_FAILURE
.195527		82 eb 03	brl $195915	success         BRL IF_SUCCESS
.19552a						IF_DIRWRITE
.19552a		5c 43 42 19	jmp $194243	                JML DOS_DIRWRITE
.19552e						IF_LOAD
.19552e		da		phx		                PHX
.19552f		5a		phy		                PHY
.195530		0b		phd		                PHD
.195531		8b		phb		                PHB
.195532		08		php		                PHP
.195533		48		pha		                PHA             ; begin setdbr macro
.195534		08		php		                PHP
.195535		e2 20		sep #$20	                SEP #$20        ; set A short
.195537		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195539		48		pha		                PHA
.19553a		ab		plb		                PLB
.19553b		28		plp		                PLP
.19553c		68		pla		                PLA             ; end setdbr macro
.19553d		48		pha		                PHA             ; begin setdp macro
.19553e		08		php		                PHP
.19553f		c2 20		rep #$20	                REP #$20        ; set A long
.195541		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195544		5b		tcd		                TCD
.195545		28		plp		                PLP
.195546		68		pla		                PLA             ; end setdp macro
.195547		c2 30		rep #$30	                REP #$30        ; set A&X long
.195549		22 5a 52 19	jsl $19525a	                JSL IF_OPEN
.19554d		b0 03		bcs $195552	                BCS setup                   ; If success: start setting things up
.19554f		82 bc 03	brl $19590e	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.195552						setup
.195552		c2 20		rep #$20	                REP #$20        ; set A long
.195554		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.195557		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195559		85 2c		sta $034c	                STA DOS_FILE_SIZE
.19555b		c8		iny		                INY
.19555c		c8		iny		                INY
.19555d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19555f		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.195561		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.195564		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195566		85 30		sta $0350	                STA DOS_SRC_PTR
.195568		c8		iny		                INY
.195569		c8		iny		                INY
.19556a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19556c		85 32		sta $0352	                STA DOS_SRC_PTR+2
.19556e		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.195570		c9 40 00	cmp #$0040	                CMP #$0040
.195573		b0 04		bcs $195579	                BGE load_by_type            ; No: try to load it by type
.195575		5c bf 57 19	jmp $1957bf	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.195579		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.19557c		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.19557f						type_loop
.19557f		e2 20		sep #$20	                SEP #$20        ; set A short
.195581		bf c5 55 19	lda $1955c5,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.195585		f0 37		beq $1955be	                BEQ no_match                ; If NULL... we didn't get a match
.195587		d9 3a a0	cmp $18a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.19558a		d0 28		bne $1955b4	                BNE next_entry              ; If they don't match, try the next entry
.19558c		bf c6 55 19	lda $1955c6,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.195590		d9 3b a0	cmp $18a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.195593		d0 1f		bne $1955b4	                BNE next_entry              ; If they don't match, try the next entry
.195595		bf c7 55 19	lda $1955c7,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.195599		d9 3c a0	cmp $18a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.19559c		d0 16		bne $1955b4	                BNE next_entry              ; If they don't match, try the next entry
.19559e		c2 20		rep #$20	                REP #$20        ; set A long
.1955a0		bf c8 55 19	lda $1955c8,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.1955a4		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.1955a6		e2 20		sep #$20	                SEP #$20        ; set A short
.1955a8		bf ca 55 19	lda $1955ca,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.1955ac		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.1955ae		a2 00 00	ldx #$0000	                LDX #0
.1955b1		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.1955b4						next_entry
.1955b4		c2 30		rep #$30	                REP #$30        ; set A&X long
.1955b6		8a		txa		                TXA
.1955b7		18		clc		                CLC
.1955b8		69 06 00	adc #$0006	                ADC #6
.1955bb		aa		tax		                TAX
.1955bc		80 c1		bra $19557f	                BRA type_loop               ; And check it against the file
.1955be						no_match
.1955be		e2 20		sep #$20	                SEP #$20        ; set A short
.1955c0		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.1955c2		82 45 03	brl $19590a	                BRL IF_FAILURE
>1955c5		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>1955c8		d2 55				                .word <>IF_LOADPGX
>1955ca		19				                .byte `IF_LOADPGX
>1955cb		50 47 5a			                .text "PGZ"                 ; "PGZ" --> IF_LOADPGZ
>1955ce		5a 56				                .word <>IF_LOADPGZ
>1955d0		19				                .byte `IF_LOADPGZ
>1955d1		00				                .byte 0
.1955d2						IF_LOADPGX
.1955d2		c2 10		rep #$10	                REP #$10        ; set X long
.1955d4		e2 20		sep #$20	                SEP #$20        ; set A short
.1955d6		a0 00 00	ldy #$0000	                LDY #0
.1955d9		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.1955db		c9 50		cmp #$50	                CMP #'P'
.1955dd		d0 15		bne $1955f4	                BNE fail_sig                        ; If not found, fail
.1955df		c8		iny		                INY
.1955e0		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1955e2		c9 47		cmp #$47	                CMP #'G'
.1955e4		d0 0e		bne $1955f4	                BNE fail_sig
.1955e6		c8		iny		                INY
.1955e7		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1955e9		c9 58		cmp #$58	                CMP #'X'
.1955eb		d0 07		bne $1955f4	                BNE fail_sig
.1955ed		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.1955ee		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1955f0		c9 01		cmp #$01	                CMP #$01
.1955f2		f0 17		beq $19560b	                BEQ get_dest                        ; All passes: go to get the destination address
.1955f4		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.1955f6		22 0a 59 19	jsl $19590a	                JSL IF_FAILURE
.1955fa						adjust_size
.1955fa		c2 20		rep #$20	                REP #$20        ; set A long
.1955fc		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.1955fd		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.1955ff		e9 08 00	sbc #$0008	                SBC #8
.195602		85 2c		sta $034c	                STA DOS_FILE_SIZE
.195604		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.195606		e9 00 00	sbc #$0000	                SBC #0
.195609		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.19560b						get_dest
.19560b		c2 20		rep #$20	                REP #$20        ; set A long
.19560d		c8		iny		                INY
.19560e		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.195610		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.195612		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.195614		c8		iny		                INY
.195615		c8		iny		                INY
.195616		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.195618		85 36		sta $0356	                STA DOS_DST_PTR+2
.19561a		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.19561c		c8		iny		                INY                                 ; Point to the first data byte
.19561d		c8		iny		                INY
.19561e						copy_loop
.19561e		e2 20		sep #$20	                SEP #$20        ; set A short
.195620		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.195622		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.195624		c2 20		rep #$20	                REP #$20        ; set A long
.195626		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.195628		d0 02		bne $19562c	                BNE dec_file_size
.19562a		e6 36		inc $0356	                INC DOS_DST_PTR+2
.19562c		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.19562d		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.19562f		e9 01 00	sbc #$0001	                SBC #1
.195632		85 2c		sta $034c	                STA DOS_FILE_SIZE
.195634		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.195636		e9 00 00	sbc #$0000	                SBC #0
.195639		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.19563b		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.19563d		d0 04		bne $195643	                BNE next_byte
.19563f		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.195641		f0 14		beq $195657	                BEQ done                            ; Yes: we're done
.195643		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.195644		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.195647		d0 d5		bne $19561e	                BNE copy_loop                       ; No: keep copying
.195649		22 25 4b 19	jsl $194b25	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.19564d		b0 03		bcs $195652	                BCS next_cluster
.19564f		82 bc 02	brl $19590e	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.195652		a0 00 00	ldy #$0000	next_cluster    LDY #0
.195655		80 c7		bra $19561e	                BRA copy_loop                       ; Go back to copying
.195657		82 bb 02	brl $195915	done            BRL IF_SUCCESS
.19565a						IF_LOADPGZ
.19565a		48		pha		                PHA             ; begin setdbr macro
.19565b		08		php		                PHP
.19565c		e2 20		sep #$20	                SEP #$20        ; set A short
.19565e		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195660		48		pha		                PHA
.195661		ab		plb		                PLB
.195662		28		plp		                PLP
.195663		68		pla		                PLA             ; end setdbr macro
.195664		48		pha		                PHA             ; begin setdp macro
.195665		08		php		                PHP
.195666		c2 20		rep #$20	                REP #$20        ; set A long
.195668		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19566b		5b		tcd		                TCD
.19566c		28		plp		                PLP
.19566d		68		pla		                PLA             ; end setdp macro
.19566e		c2 30		rep #$30	                REP #$30        ; set A&X long
.195670		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE                  ; Get the file size
.195673		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195675		85 2c		sta $034c	                STA DOS_FILE_SIZE                   ; And save it to DOS_FILE_SIZE
.195677		c8		iny		                INY
.195678		c8		iny		                INY
.195679		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19567b		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.19567d		e2 20		sep #$20	                SEP #$20        ; set A short
.19567f		a0 00 00	ldy #$0000	                LDY #0                              ; Starting at the beginning of the file
.195682		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "Z" signature
.195684		c9 5a		cmp #$5a	                CMP #'Z'
.195686		f0 06		beq $19568e	                BEQ start_block                     ; If found, get the starting address
.195688		a9 19		lda #$19	fail_sig        LDA #DOS_ERR_PGZSIG                 ; Fail with a PGZSIG error code
.19568a		22 0a 59 19	jsl $19590a	                JSL IF_FAILURE
.19568e		c8		iny		start_block     INY
.19568f						get_addr
.19568f		e2 20		sep #$20	                SEP #$20        ; set A short
.195691		22 14 57 19	jsl $195714	                JSL IF_FILE_EOF                     ; Check if EOF
.195695		90 03		bcc $19569a	                BCC get_addr_lo
.195697		82 7b 02	brl $195915	done            BRL IF_SUCCESS                      ; If so: we're done
.19569a		22 52 57 19	jsl $195752	get_addr_lo     JSL IF_READ_NEXT                    ; Get the next byte
.19569e		90 47		bcc $1956e7	                BCC ret_failure                     ; Got an error: pass it on
.1956a0		85 34		sta $0354	                STA DOS_DST_PTR                     ; Save it as the low byte of the destination address
.1956a2		22 52 57 19	jsl $195752	                JSL IF_READ_NEXT                    ; Get the next byte
.1956a6		90 3f		bcc $1956e7	                BCC ret_failure                     ; Got an error: pass it on
.1956a8		85 35		sta $0355	                STA DOS_DST_PTR+1                   ; Save it as the middle byte of the destination address
.1956aa		22 52 57 19	jsl $195752	                JSL IF_READ_NEXT                    ; Get the next byte
.1956ae		90 37		bcc $1956e7	                BCC ret_failure                     ; Got an error: pass it on
.1956b0		85 36		sta $0356	                STA DOS_DST_PTR+2                   ; Save it as the high byte of the destination address
.1956b2		22 52 57 19	jsl $195752	                JSL IF_READ_NEXT                    ; Get the next byte
.1956b6		90 2f		bcc $1956e7	                BCC ret_failure                     ; Got an error: pass it on
.1956b8		85 50		sta $0370	                STA DOS_BLOCK_SIZE                  ; Save it as the low byte of the block size
.1956ba		22 52 57 19	jsl $195752	                JSL IF_READ_NEXT                    ; Get the next byte
.1956be		90 27		bcc $1956e7	                BCC ret_failure                     ; Got an error: pass it on
.1956c0		85 51		sta $0371	                STA DOS_BLOCK_SIZE+1                ; Save it as the middle byte of the block size
.1956c2		22 52 57 19	jsl $195752	                JSL IF_READ_NEXT                    ; Get the next byte
.1956c6		90 1f		bcc $1956e7	                BCC ret_failure                     ; Got an error: pass it on
.1956c8		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2                ; Save it as the high byte of the block size
.1956ca		64 53		stz $0373	                STZ DOS_BLOCK_SIZE+3                ; And MSB is 0
.1956cc		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; If DOS_BLOCK_SIZE <> 0, we have data to load
.1956ce		d0 1a		bne $1956ea	                BNE read_data
.1956d0		a5 51		lda $0371	                LDA DOS_BLOCK_SIZE+1
.1956d2		d0 16		bne $1956ea	                BNE read_data
.1956d4		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.1956d6		d0 12		bne $1956ea	                BNE read_data
.1956d8		a5 34		lda $0354	                LDA DOS_DST_PTR                     ; If DOS_BLOCK_SIZE = 0, we have the run address
.1956da		85 3c		sta $035c	                STA DOS_RUN_PTR
.1956dc		a5 35		lda $0355	                LDA DOS_DST_PTR+1
.1956de		85 3d		sta $035d	                STA DOS_RUN_PTR+1
.1956e0		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.1956e2		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.1956e4		82 2e 02	brl $195915	                BRL IF_SUCCESS                      ; And finish
.1956e7		82 20 02	brl $19590a	ret_failure     BRL IF_FAILURE                      ; If there was an error, pass it up to the caller
.1956ea						read_data
.1956ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1956ec		22 52 57 19	jsl $195752	                JSL IF_READ_NEXT                    ; Get the next byte
.1956f0		90 f5		bcc $1956e7	                BCC ret_failure
.1956f2		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Save it to the destination address
.1956f4		c2 20		rep #$20	                REP #$20        ; set A long
.1956f6		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Increment the destination pointer
.1956f8		d0 02		bne $1956fc	                BNE dec_block_size
.1956fa		e6 36		inc $0356	                INC DOS_DST_PTR+2
.1956fc		38		sec		dec_block_size  SEC
.1956fd		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE
.1956ff		e9 01 00	sbc #$0001	                SBC #1
.195702		85 50		sta $0370	                STA DOS_BLOCK_SIZE
.195704		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.195706		e9 00 00	sbc #$0000	                SBC #0
.195709		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2
.19570b		d0 dd		bne $1956ea	                BNE read_data
.19570d		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; Is block size = 0?
.19570f		d0 d9		bne $1956ea	                BNE read_data                       ; No: keep reading data
.195711		82 7b ff	brl $19568f	                BRL get_addr                        ; Yes: check for another block
.195714						IF_FILE_EOF
.195714		48		pha		                PHA
.195715		5a		phy		                PHY
.195716		8b		phb		                PHB
.195717		0b		phd		                PHD
.195718		08		php		                PHP
.195719		48		pha		                PHA             ; begin setdbr macro
.19571a		08		php		                PHP
.19571b		e2 20		sep #$20	                SEP #$20        ; set A short
.19571d		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19571f		48		pha		                PHA
.195720		ab		plb		                PLB
.195721		28		plp		                PLP
.195722		68		pla		                PLA             ; end setdbr macro
.195723		48		pha		                PHA             ; begin setdp macro
.195724		08		php		                PHP
.195725		c2 20		rep #$20	                REP #$20        ; set A long
.195727		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19572a		5b		tcd		                TCD
.19572b		28		plp		                PLP
.19572c		68		pla		                PLA             ; end setdp macro
.19572d		e2 20		sep #$20	                SEP #$20        ; set A short
.19572f		c2 10		rep #$10	                REP #$10        ; set X long
.195731		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.195734		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y                  ; Restore the index
.195736		89 80		bit #$80	                BIT #FD_STAT_EOF                    ; Check if the file is EOF
.195738		f0 07		beq $195741	                BEQ chk_file_size                   ; If not: check the file size
.19573a		28		plp		ret_true        PLP                                 ; Return true
.19573b		2b		pld		                PLD
.19573c		ab		plb		                PLB
.19573d		7a		ply		                PLY
.19573e		68		pla		                PLA
.19573f		38		sec		                SEC
.195740		6b		rtl		                RTL
.195741						chk_file_size
.195741		c2 20		rep #$20	                REP #$20        ; set A long
.195743		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; if DOS_FILE_SIZE = 0
.195745		d0 04		bne $19574b	                BNE ret_false
.195747		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.195749		f0 ef		beq $19573a	                BEQ ret_true
.19574b		28		plp		ret_false       PLP                                 ; Return false
.19574c		2b		pld		                PLD
.19574d		ab		plb		                PLB
.19574e		7a		ply		                PLY
.19574f		68		pla		                PLA
.195750		18		clc		                CLC
.195751		6b		rtl		                RTL
.195752						IF_READ_NEXT
.195752		8b		phb		                PHB
.195753		0b		phd		                PHD
.195754		08		php		                PHP
.195755		48		pha		                PHA             ; begin setdbr macro
.195756		08		php		                PHP
.195757		e2 20		sep #$20	                SEP #$20        ; set A short
.195759		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19575b		48		pha		                PHA
.19575c		ab		plb		                PLB
.19575d		28		plp		                PLP
.19575e		68		pla		                PLA             ; end setdbr macro
.19575f		48		pha		                PHA             ; begin setdp macro
.195760		08		php		                PHP
.195761		c2 20		rep #$20	                REP #$20        ; set A long
.195763		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195766		5b		tcd		                TCD
.195767		28		plp		                PLP
.195768		68		pla		                PLA             ; end setdp macro
.195769		e2 20		sep #$20	                SEP #$20        ; set A short
.19576b		c2 10		rep #$10	                REP #$10        ; set X long
.19576d		22 14 57 19	jsl $195714	                JSL IF_FILE_EOF                     ; Check if the file is EOF
.195771		90 06		bcc $195779	                BCC get_byte                        ; If not: get the next byte
.195773		a9 18		lda #$18	                LDA #DOS_ERR_EOF                    ; If so: return an EOF error
.195775		85 0e		sta $032e	                STA DOS_STATUS
.195777		80 3f		bra $1957b8	                BRA ret_failure
.195779		b7 30		lda [$0350],y	get_byte        LDA [DOS_SRC_PTR],Y                 ; Read the byte...
.19577b		48		pha		                PHA                                 ; And save it for the moment
.19577c		c2 20		rep #$20	                REP #$20        ; set A long
.19577e		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Decrement the file size...
.195780		d0 02		bne $195784	                BNE dec_low
.195782		c6 2e		dec $034e	                DEC DOS_FILE_SIZE+2
.195784		c6 2c		dec $034c	dec_low         DEC DOS_FILE_SIZE
.195786		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.195788		d0 04		bne $19578e	                BNE next_byte
.19578a		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.19578c		f0 1b		beq $1957a9	                BEQ ret_eof                         ; Yes: mark the file as EOF
.19578e						next_byte
.19578e		e2 20		sep #$20	                SEP #$20        ; set A short
.195790		c8		iny		                INY                                 ; Move to the next byte
.195791		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE                ; Have we reached the end of the sector?
.195794		90 0b		bcc $1957a1	                BLT ret_success                     ; No: just return the byte
.195796		22 25 4b 19	jsl $194b25	                JSL DOS_READNEXT                    ; Yes: read the next sector
.19579a		b0 02		bcs $19579e	                BCS reset_index
.19579c		80 1a		bra $1957b8	                BRA ret_failure                     ; If failure: pass the error up the chain
.19579e		a0 00 00	ldy #$0000	reset_index     LDY #0                              ; Reset the index
.1957a1						ret_success
.1957a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1957a3		68		pla		                PLA                                 ; Return the byte retrieved
.1957a4		28		plp		                PLP
.1957a5		2b		pld		                PLD
.1957a6		ab		plb		                PLB
.1957a7		38		sec		                SEC
.1957a8		6b		rtl		                RTL
.1957a9						ret_eof
.1957a9		e2 20		sep #$20	                SEP #$20        ; set A short
.1957ab		5a		phy		                PHY                                 ; Save the index
.1957ac		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.1957af		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1957b1		09 80		ora #$80	                ORA #FD_STAT_EOF                    ; Mark it EOF
.1957b3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y                  ; And update the status
.1957b5		7a		ply		                PLY                                 ; Restore the index
.1957b6		80 e9		bra $1957a1	                BRA ret_success
.1957b8						ret_failure
.1957b8		e2 20		sep #$20	                SEP #$20        ; set A short
.1957ba		28		plp		                PLP
.1957bb		2b		pld		                PLD
.1957bc		ab		plb		                PLB
.1957bd		18		clc		                CLC
.1957be		6b		rtl		                RTL
.1957bf						IF_LOADRAW
.1957bf		c2 30		rep #$30	                REP #$30        ; set A&X long
.1957c1		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.1957c4						copy_loop
.1957c4		e2 20		sep #$20	                SEP #$20        ; set A short
.1957c6		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.1957c8		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1957ca		c2 20		rep #$20	                REP #$20        ; set A long
.1957cc		38		sec		                SEC                         ; Count down the number of bytes left
.1957cd		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.1957cf		e9 01 00	sbc #$0001	                SBC #1
.1957d2		85 2c		sta $034c	                STA DOS_FILE_SIZE
.1957d4		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1957d6		e9 00 00	sbc #$0000	                SBC #0
.1957d9		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.1957db		d0 04		bne $1957e1	                BNE continue
.1957dd		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.1957df		f0 1b		beq $1957fc	                BEQ close_file              ; If not: we're done
.1957e1		c8		iny		continue        INY
.1957e2		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.1957e5		d0 dd		bne $1957c4	                BNE copy_loop               ; No: keep processing the bytes
.1957e7		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.1957e8		a5 34		lda $0354	                LDA DOS_DST_PTR
.1957ea		6d 0e a0	adc $18a00e	                ADC CLUSTER_SIZE
.1957ed		85 34		sta $0354	                STA DOS_DST_PTR
.1957ef		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.1957f1		69 00 00	adc #$0000	                ADC #0
.1957f4		85 36		sta $0356	                STA DOS_DST_PTR+2
.1957f6		22 5b 53 19	jsl $19535b	                JSL IF_READ                 ; Yes: load the next cluster
.1957fa		b0 c5		bcs $1957c1	                BCS copy_cluster            ; And start copying it
.1957fc						close_file
.1957fc		82 16 01	brl $195915	ret_success     BRL IF_SUCCESS
.1957ff						IF_NULLBUFFER
.1957ff		5a		phy		                PHY
.195800		8b		phb		                PHB
.195801		0b		phd		                PHD
.195802		08		php		                PHP
.195803		48		pha		                PHA             ; begin setdbr macro
.195804		08		php		                PHP
.195805		e2 20		sep #$20	                SEP #$20        ; set A short
.195807		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195809		48		pha		                PHA
.19580a		ab		plb		                PLB
.19580b		28		plp		                PLP
.19580c		68		pla		                PLA             ; end setdbr macro
.19580d		48		pha		                PHA             ; begin setdp macro
.19580e		08		php		                PHP
.19580f		c2 20		rep #$20	                REP #$20        ; set A long
.195811		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195814		5b		tcd		                TCD
.195815		28		plp		                PLP
.195816		68		pla		                PLA             ; end setdp macro
.195817		c2 30		rep #$30	                REP #$30        ; set A&X long
.195819		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.19581c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19581e		85 28		sta $0348	                STA DOS_TEMP
.195820		c8		iny		                INY
.195821		c8		iny		                INY
.195822		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195824		85 2a		sta $034a	                STA DOS_TEMP+2
.195826		a0 00 00	ldy #$0000	                LDY #0
.195829		a9 00 00	lda #$0000	                LDA #0
.19582c		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.19582e		c8		iny		                INY
.19582f		c8		iny		                INY
.195830		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.195833		d0 f7		bne $19582c	                BNE loop
.195835		28		plp		                PLP
.195836		2b		pld		                PLD
.195837		ab		plb		                PLB
.195838		7a		ply		                PLY
.195839		6b		rtl		                RTL
.19583a						IF_COPY2BUFF
.19583a		5a		phy		                PHY
.19583b		8b		phb		                PHB
.19583c		0b		phd		                PHD
.19583d		08		php		                PHP
.19583e		48		pha		                PHA             ; begin setdbr macro
.19583f		08		php		                PHP
.195840		e2 20		sep #$20	                SEP #$20        ; set A short
.195842		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195844		48		pha		                PHA
.195845		ab		plb		                PLB
.195846		28		plp		                PLP
.195847		68		pla		                PLA             ; end setdbr macro
.195848		48		pha		                PHA             ; begin setdp macro
.195849		08		php		                PHP
.19584a		c2 20		rep #$20	                REP #$20        ; set A long
.19584c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19584f		5b		tcd		                TCD
.195850		28		plp		                PLP
.195851		68		pla		                PLA             ; end setdp macro
.195852		c2 30		rep #$30	                REP #$30        ; set A&X long
.195854		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.195857		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195859		85 28		sta $0348	                STA DOS_TEMP
.19585b		c8		iny		                INY
.19585c		c8		iny		                INY
.19585d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19585f		85 2a		sta $034a	                STA DOS_TEMP+2
.195861		a0 00 00	ldy #$0000	                LDY #0
.195864						copy_loop
.195864		e2 20		sep #$20	                SEP #$20        ; set A short
.195866		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.195868		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.19586a		c2 20		rep #$20	                REP #$20        ; set A long
.19586c		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.19586e		d0 02		bne $195872	                BNE adv_dest
.195870		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.195872		c8		iny		adv_dest        INY                         ; Count it
.195873		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.195876		f0 0c		beq $195884	                BEQ done                    ; Yes: we're done
.195878		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.19587a		c5 38		cmp $0358	                CMP DOS_END_PTR
.19587c		d0 e6		bne $195864	                BNE copy_loop               ; No: keep copying
.19587e		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.195880		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.195882		d0 e0		bne $195864	                BNE copy_loop
.195884		28		plp		done            PLP
.195885		2b		pld		                PLD
.195886		ab		plb		                PLB
.195887		7a		ply		                PLY
.195888		6b		rtl		                RTL
.195889						IF_SAVE
.195889		da		phx		                PHX
.19588a		5a		phy		                PHY
.19588b		0b		phd		                PHD
.19588c		8b		phb		                PHB
.19588d		08		php		                PHP
.19588e		48		pha		                PHA             ; begin setdbr macro
.19588f		08		php		                PHP
.195890		e2 20		sep #$20	                SEP #$20        ; set A short
.195892		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195894		48		pha		                PHA
.195895		ab		plb		                PLB
.195896		28		plp		                PLP
.195897		68		pla		                PLA             ; end setdbr macro
.195898		48		pha		                PHA             ; begin setdp macro
.195899		08		php		                PHP
.19589a		c2 20		rep #$20	                REP #$20        ; set A long
.19589c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19589f		5b		tcd		                TCD
.1958a0		28		plp		                PLP
.1958a1		68		pla		                PLA             ; end setdp macro
.1958a2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1958a4		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.1958a7		38		sec		                SEC
.1958a8		a5 38		lda $0358	                LDA DOS_END_PTR
.1958aa		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.1958ac		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1958ae		c8		iny		                INY
.1958af		c8		iny		                INY
.1958b0		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.1958b2		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.1958b4		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1958b6		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.1958b9		18		clc		                CLC
.1958ba		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1958bc		69 01 00	adc #$0001	                ADC #1
.1958bf		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1958c1		90 09		bcc $1958cc	                BCC first_block
.1958c3		c8		iny		                INY
.1958c4		c8		iny		                INY
.1958c5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1958c7		69 00 00	adc #$0000	                ADC #0
.1958ca		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1958cc		22 ff 57 19	jsl $1957ff	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.1958d0		22 3a 58 19	jsl $19583a	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.1958d4		22 ed 52 19	jsl $1952ed	                JSL IF_CREATE           ; Create file.
.1958d8		b0 03		bcs $1958dd	                BCS check_for_end
.1958da		82 31 00	brl $19590e	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.1958dd		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.1958df		c5 38		cmp $0358	                CMP DOS_END_PTR
.1958e1		d0 06		bne $1958e9	                BNE next_block
.1958e3		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.1958e5		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.1958e7		f0 1d		beq $195906	                BEQ done                ; Yes: we're done
.1958e9		22 ff 57 19	jsl $1957ff	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.1958ed		22 3a 58 19	jsl $19583a	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.1958f1		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.1958f4		a9 00 00	lda #$0000	                LDA #0
.1958f7		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1958f9		c8		iny		                INY
.1958fa		c8		iny		                INY
.1958fb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1958fd		22 c0 53 19	jsl $1953c0	                JSL IF_WRITE            ; Append to the file
.195901		b0 da		bcs $1958dd	                BCS check_for_end       ; And try again
.195903		82 08 00	brl $19590e	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.195906		5c 15 59 19	jmp $195915	done            JML IF_SUCCESS
.19590a						IF_FAILURE
.19590a		e2 20		sep #$20	                SEP #$20        ; set A short
.19590c		85 0e		sta $032e	                STA DOS_STATUS
.19590e		28		plp		IF_PASSFAILURE  PLP
.19590f		18		clc		                CLC
.195910		ab		plb		                PLB
.195911		2b		pld		                PLD
.195912		7a		ply		                PLY
.195913		fa		plx		                PLX
.195914		6b		rtl		                RTL
.195915						IF_SUCCESS
.195915		e2 20		sep #$20	                SEP #$20        ; set A short
.195917		64 00		stz $0320	                STZ BIOS_STATUS
.195919		64 0e		stz $032e	                STZ DOS_STATUS
.19591b		28		plp		                PLP
.19591c		38		sec		                SEC
.19591d		ab		plb		                PLB
.19591e		2b		pld		                PLD
.19591f		7a		ply		                PLY
.195920		fa		plx		                PLX
.195921		6b		rtl		                RTL
.195922						IF_RUN
.195922		da		phx		                PHX
.195923		5a		phy		                PHY
.195924		0b		phd		                PHD
.195925		8b		phb		                PHB
.195926		08		php		                PHP
.195927		48		pha		                PHA             ; begin setdbr macro
.195928		08		php		                PHP
.195929		e2 20		sep #$20	                SEP #$20        ; set A short
.19592b		a9 00		lda #$00	                LDA #0
.19592d		48		pha		                PHA
.19592e		ab		plb		                PLB
.19592f		28		plp		                PLP
.195930		68		pla		                PLA             ; end setdbr macro
.195931		48		pha		                PHA             ; begin setdp macro
.195932		08		php		                PHP
.195933		c2 20		rep #$20	                REP #$20        ; set A long
.195935		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195938		5b		tcd		                TCD
.195939		28		plp		                PLP
.19593a		68		pla		                PLA             ; end setdp macro
.19593b		e2 20		sep #$20	                SEP #$20        ; set A short
.19593d		c2 10		rep #$10	                REP #$10        ; set X long
.19593f		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.195941		a2 00 00	ldx #$0000	                LDX #0
.195944		9f 00 ad 18	sta $18ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.195948		e8		inx		                INX
.195949		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.19594c		d0 f6		bne $195944	                BNE clr_fd_loop
.19594e		c2 20		rep #$20	                REP #$20        ; set A long
.195950		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.195953		8f 0e ad 18	sta $18ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.195957		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_SECTOR
.19595a		8f 10 ad 18	sta $18ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.19595e		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.195960		8f 02 ad 18	sta $18ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.195964		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.195966		8f 04 ad 18	sta $18ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.19596a		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.19596d		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.19596f		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.195971		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.195974		85 20		sta $0340	                STA DOS_FD_PTR
.195976		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_FD
.195979		85 22		sta $0342	                STA DOS_FD_PTR+2
.19597b		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.19597e		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.195982		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.195986		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.19598a		b0 03		bcs $19598f	                BCS chk_execute
.19598c		82 7f ff	brl $19590e	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.19598f						chk_execute
.19598f		c2 20		rep #$20	                REP #$20        ; set A long
.195991		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.195993		d0 0b		bne $1959a0	                BNE try_execute                         ; If so: call it
.195995		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.195997		d0 07		bne $1959a0	                BNE try_execute
.195999		e2 20		sep #$20	                SEP #$20        ; set A short
.19599b		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.19599d		82 6a ff	brl $19590a	                BRL IF_FAILURE
.1959a0						try_execute
.1959a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1959a2		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.1959a4		48		pha		                PHA
.1959a5		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.1959a7		48		pha		                PHA
.1959a8		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.1959aa		48		pha		                PHA
.1959ab		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.1959ad		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.1959af		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.1959b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1959b5		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.1959b6		68		pla		                PLA
.1959b7		68		pla		                PLA
.1959b8		82 5a ff	brl $195915	                BRL IF_SUCCESS                          ; Return success
.1959bb						IF_ALLOCFD
.1959bb		da		phx		                PHX
.1959bc		5a		phy		                PHY
.1959bd		0b		phd		                PHD
.1959be		8b		phb		                PHB
.1959bf		08		php		                PHP
.1959c0		48		pha		                PHA             ; begin setdbr macro
.1959c1		08		php		                PHP
.1959c2		e2 20		sep #$20	                SEP #$20        ; set A short
.1959c4		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1959c6		48		pha		                PHA
.1959c7		ab		plb		                PLB
.1959c8		28		plp		                PLP
.1959c9		68		pla		                PLA             ; end setdbr macro
.1959ca		48		pha		                PHA             ; begin setdp macro
.1959cb		08		php		                PHP
.1959cc		c2 20		rep #$20	                REP #$20        ; set A long
.1959ce		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1959d1		5b		tcd		                TCD
.1959d2		28		plp		                PLP
.1959d3		68		pla		                PLA             ; end setdp macro
.1959d4		c2 10		rep #$10	                REP #$10        ; set X long
.1959d6		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.1959d9						chk_fd
.1959d9		e2 20		sep #$20	                SEP #$20        ; set A short
.1959db		bd 20 ad	lda $18ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.1959de		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.1959e0		f0 14		beq $1959f6	                BEQ found                           ; No: flag and return the found descriptor
.1959e2						next_fd
.1959e2		c2 20		rep #$20	                REP #$20        ; set A long
.1959e4		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.1959e5		18		clc		                CLC
.1959e6		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.1959e9		aa		tax		                TAX
.1959ea		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.1959ed		90 ea		bcc $1959d9	                BLT chk_fd                          ; No: check this new file descriptor
.1959ef		e2 20		sep #$20	                SEP #$20        ; set A short
.1959f1		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.1959f3		82 14 ff	brl $19590a	                BRL IF_FAILURE
.1959f6		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.1959f8		9d 20 ad	sta $18ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.1959fb		c2 20		rep #$20	                REP #$20        ; set A long
.1959fd		8a		txa		                TXA
.1959fe		18		clc		                CLC
.1959ff		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.195a02		85 20		sta $0340	                STA @b DOS_FD_PTR
.195a04		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.195a07		69 00 00	adc #$0000	                ADC #0
.195a0a		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195a0c		82 06 ff	brl $195915	                BRL IF_SUCCESS                      ; Return this file descriptor
.195a0f						IF_FREEFD
.195a0f		da		phx		                PHX
.195a10		5a		phy		                PHY
.195a11		0b		phd		                PHD
.195a12		8b		phb		                PHB
.195a13		08		php		                PHP
.195a14		48		pha		                PHA             ; begin setdbr macro
.195a15		08		php		                PHP
.195a16		e2 20		sep #$20	                SEP #$20        ; set A short
.195a18		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195a1a		48		pha		                PHA
.195a1b		ab		plb		                PLB
.195a1c		28		plp		                PLP
.195a1d		68		pla		                PLA             ; end setdbr macro
.195a1e		48		pha		                PHA             ; begin setdp macro
.195a1f		08		php		                PHP
.195a20		c2 20		rep #$20	                REP #$20        ; set A long
.195a22		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195a25		5b		tcd		                TCD
.195a26		28		plp		                PLP
.195a27		68		pla		                PLA             ; end setdp macro
.195a28		e2 20		sep #$20	                SEP #$20        ; set A short
.195a2a		c2 10		rep #$10	                REP #$10        ; set X long
.195a2c		a9 00		lda #$00	                LDA #0
.195a2e		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.195a30		82 e2 fe	brl $195915	                BRL IF_SUCCESS
.195a33						DOS_SRC2DST
.195a33		da		phx		                PHX
.195a34		5a		phy		                PHY
.195a35		0b		phd		                PHD
.195a36		8b		phb		                PHB
.195a37		08		php		                PHP
.195a38		48		pha		                PHA             ; begin setdp macro
.195a39		08		php		                PHP
.195a3a		c2 20		rep #$20	                REP #$20        ; set A long
.195a3c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195a3f		5b		tcd		                TCD
.195a40		28		plp		                PLP
.195a41		68		pla		                PLA             ; end setdp macro
.195a42		c2 30		rep #$30	                REP #$30        ; set A&X long
.195a44		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.195a47		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195a49		aa		tax		                TAX                                     ; X := source buffer address
.195a4a		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.195a4c		a8		tay		                TAY                                     ; Y := destination buffer address
.195a4d		e2 20		sep #$20	                SEP #$20        ; set A short
.195a4f		a9 18		lda #$18	                LDA #`DOS_FILE_BUFFS
.195a51		48		pha		                PHA
.195a52		ab		plb		                PLB
.195a53		c2 20		rep #$20	                REP #$20        ; set A long
.195a55		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.195a58		f0 11		beq $195a6b	loop            BEQ done
.195a5a		48		pha		                PHA
.195a5b		e2 20		sep #$20	                SEP #$20        ; set A short
.195a5d		bd 00 00	lda $180000,x	                LDA #0,B,X
.195a60		99 00 00	sta $180000,y	                STA #0,B,Y
.195a63		c2 20		rep #$20	                REP #$20        ; set A long
.195a65		68		pla		                PLA
.195a66		3a		dec a		                DEC A
.195a67		e8		inx		                INX
.195a68		c8		iny		                INY
.195a69		80 ed		bra $195a58	                BRA loop
.195a6b		28		plp		done            PLP
.195a6c		ab		plb		                PLB
.195a6d		2b		pld		                PLD
.195a6e		7a		ply		                PLY
.195a6f		fa		plx		                PLX
.195a70		6b		rtl		                RTL
.195a71						IF_COPY
.195a71		da		phx		                PHX
.195a72		5a		phy		                PHY
.195a73		0b		phd		                PHD
.195a74		8b		phb		                PHB
.195a75		08		php		                PHP
.195a76		48		pha		                PHA             ; begin setdbr macro
.195a77		08		php		                PHP
.195a78		e2 20		sep #$20	                SEP #$20        ; set A short
.195a7a		a9 00		lda #$00	                LDA #0
.195a7c		48		pha		                PHA
.195a7d		ab		plb		                PLB
.195a7e		28		plp		                PLP
.195a7f		68		pla		                PLA             ; end setdbr macro
.195a80		48		pha		                PHA             ; begin setdp macro
.195a81		08		php		                PHP
.195a82		c2 20		rep #$20	                REP #$20        ; set A long
.195a84		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195a87		5b		tcd		                TCD
.195a88		28		plp		                PLP
.195a89		68		pla		                PLA             ; end setdp macro
.195a8a		22 bb 59 19	jsl $1959bb	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.195a8e		b0 03		bcs $195a93	                BCS set_src_path
.195a90		82 7b fe	brl $19590e	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.195a93						set_src_path
.195a93		c2 30		rep #$30	                REP #$30        ; set A&X long
.195a95		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.195a98		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.195a9a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195a9c		c8		iny		                INY
.195a9d		c8		iny		                INY
.195a9e		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.195aa0		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195aa2						alloc_dest
.195aa2		c2 30		rep #$30	                REP #$30        ; set A&X long
.195aa4		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.195aa6		85 30		sta $0350	                STA @b DOS_SRC_PTR
.195aa8		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.195aaa		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.195aac		22 bb 59 19	jsl $1959bb	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.195ab0		b0 0f		bcs $195ac1	                BCS set_paths                   ; If everything is ok... start setting the paths
.195ab2		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195ab4		85 20		sta $0340	                STA @b DOS_FD_PTR
.195ab6		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195ab8		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195aba		22 0f 5a 19	jsl $195a0f	                JSL IF_FREEFD                   ; And free it
.195abe		82 4d fe	brl $19590e	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.195ac1						set_paths
.195ac1		c2 30		rep #$30	                REP #$30        ; set A&X long
.195ac3		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.195ac5		85 34		sta $0354	                STA @b DOS_DST_PTR
.195ac7		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.195ac9		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.195acb		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.195ace		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.195ad0		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195ad2		c8		iny		                INY
.195ad3		c8		iny		                INY
.195ad4		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.195ad6		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195ad8		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195ada		85 20		sta $0340	                STA @b DOS_FD_PTR
.195adc		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195ade		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195ae0		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.195ae4		b0 10		bcs $195af6	                BCS src_open                    ; If success, work with the openned file
.195ae6		00		brk #		                BRK
.195ae7		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195ae9		85 20		sta $0340	                STA @b DOS_FD_PTR
.195aeb		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195aed		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195aef		22 0f 5a 19	jsl $195a0f	                JSL IF_FREEFD                   ; And free it
.195af3		82 bc ff	brl $195ab2	                BRL err_free_src_fd             ; Free the source file descriptor
.195af6		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.195af9		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195afb		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195afd		c8		iny		                INY
.195afe		c8		iny		                INY
.195aff		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195b01		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195b03		22 33 5a 19	jsl $195a33	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.195b07		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195b09		85 20		sta $0340	                STA @b DOS_FD_PTR
.195b0b		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195b0d		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195b0f		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.195b13		b0 0f		bcs $195b24	                BCS read_next                   ; If sucessful, try to get the next cluster
.195b15		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195b17		85 20		sta $0340	                STA @b DOS_FD_PTR
.195b19		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195b1b		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195b1d		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.195b21		82 c3 ff	brl $195ae7	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.195b24						read_next
.195b24		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195b26		85 20		sta $0340	                STA @b DOS_FD_PTR
.195b28		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195b2a		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195b2c		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.195b30		b0 19		bcs $195b4b	                BCS copy2dest                   ; If successful, copy the sector
.195b32		e2 20		sep #$20	                SEP #$20        ; set A short
.195b34		a5 0e		lda $032e	                LDA @b DOS_STATUS
.195b36		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.195b38		f0 32		beq $195b6c	                BEQ file_copied                 ; Yes: we're done copying
.195b3a						err_dest_close
.195b3a		c2 20		rep #$20	                REP #$20        ; set A long
.195b3c		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195b3e		85 20		sta $0340	                STA @b DOS_FD_PTR
.195b40		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195b42		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195b44		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.195b48		82 ca ff	brl $195b15	                BRL err_src_close               ; Close the source and throw an error
.195b4b						copy2dest
.195b4b		22 33 5a 19	jsl $195a33	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.195b4f		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.195b52		a9 00 00	lda #$0000	                LDA #0
.195b55		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195b57		c8		iny		                INY
.195b58		c8		iny		                INY
.195b59		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195b5b		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195b5d		85 20		sta $0340	                STA @b DOS_FD_PTR
.195b5f		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195b61		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195b63		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.195b67		90 d1		bcc $195b3a	                BCC err_dest_close              ; If error: close all files and throw the error
.195b69		82 b8 ff	brl $195b24	                BRL read_next                   ; Otherwise: repeat the loop
.195b6c						file_copied
.195b6c		c2 20		rep #$20	                REP #$20        ; set A long
.195b6e		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195b70		85 20		sta $0340	                STA @b DOS_FD_PTR
.195b72		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195b74		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195b76		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.195b7a		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195b7c		85 20		sta $0340	                STA @b DOS_FD_PTR
.195b7e		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195b80		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195b82		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.195b86		82 8c fd	brl $195915	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af18f8					    UART1_BASE = $AF18F8        ; Base address for UART 1 (COM1) in the C256 Foenix U (only 1 Serial port)
=$af18f8					    UART2_BASE = $AF18F8
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.195b89						UART_SELECT
.195b89		08		php		            PHP
.195b8a		c2 20		rep #$20	                REP #$20        ; set A long
.195b8c		c9 02 00	cmp #$0002	            CMP #2
.195b8f		f0 07		beq $195b98	            BEQ is_COM2
.195b91		c2 20		rep #$20	                REP #$20        ; set A long
.195b93		a9 f8 18	lda #$18f8	            LDA #<>UART1_BASE
.195b96		80 05		bra $195b9d	            BRA setaddr
.195b98						is_COM2
.195b98		c2 20		rep #$20	                REP #$20        ; set A long
.195b9a		a9 f8 18	lda #$18f8	            LDA #<>UART2_BASE
.195b9d		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.195ba1		e2 20		sep #$20	                SEP #$20        ; set A short
.195ba3		a9 af		lda #$af	            LDA #`UART1_BASE
.195ba5		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.195ba9		28		plp		            PLP
.195baa		6b		rtl		            RTL
.195bab						UART_SETBPS
.195bab		08		php		            PHP
.195bac		0b		phd		            PHD
.195bad		48		pha		                PHA             ; begin setdp macro
.195bae		08		php		                PHP
.195baf		c2 20		rep #$20	                REP #$20        ; set A long
.195bb1		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195bb4		5b		tcd		                TCD
.195bb5		28		plp		                PLP
.195bb6		68		pla		                PLA             ; end setdp macro
.195bb7		c2 30		rep #$30	                REP #$30        ; set A&X long
.195bb9		48		pha		            PHA
.195bba		e2 20		sep #$20	                SEP #$20        ; set A short
.195bbc		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.195bbf		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.195bc1		09 80		ora #$80	            ORA #LCR_DLB
.195bc3		97 00		sta [$0700],y	            STA [CURRUART],Y
.195bc5		c2 20		rep #$20	                REP #$20        ; set A long
.195bc7		68		pla		            PLA
.195bc8		a0 00 00	ldy #$0000	            LDY #UART_DLL
.195bcb		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.195bcd		e2 20		sep #$20	                SEP #$20        ; set A short
.195bcf		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.195bd2		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.195bd4		49 80		eor #$80	            EOR #LCR_DLB
.195bd6		97 00		sta [$0700],y	            STA [CURRUART],Y
.195bd8		2b		pld		            PLD
.195bd9		28		plp		            PLP
.195bda		6b		rtl		            RTL
.195bdb						UART_SETLCR
.195bdb		08		php		            PHP
.195bdc		0b		phd		            PHD
.195bdd		48		pha		                PHA             ; begin setdp macro
.195bde		08		php		                PHP
.195bdf		c2 20		rep #$20	                REP #$20        ; set A long
.195be1		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195be4		5b		tcd		                TCD
.195be5		28		plp		                PLP
.195be6		68		pla		                PLA             ; end setdp macro
.195be7		e2 20		sep #$20	                SEP #$20        ; set A short
.195be9		c2 10		rep #$10	                REP #$10        ; set X long
.195beb		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.195bed		a0 03 00	ldy #$0003	            LDY #UART_LCR
.195bf0		97 00		sta [$0700],y	            STA [CURRUART],Y
.195bf2		2b		pld		            PLD
.195bf3		28		plp		            PLP
.195bf4		6b		rtl		            RTL
.195bf5						UART_INIT
.195bf5		08		php		            PHP
.195bf6		0b		phd		            PHD
.195bf7		c2 30		rep #$30	                REP #$30        ; set A&X long
.195bf9		48		pha		                PHA             ; begin setdp macro
.195bfa		08		php		                PHP
.195bfb		c2 20		rep #$20	                REP #$20        ; set A long
.195bfd		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195c00		5b		tcd		                TCD
.195c01		28		plp		                PLP
.195c02		68		pla		                PLA             ; end setdp macro
.195c03		a9 01 00	lda #$0001	            LDA #UART_115200
.195c06		22 ab 5b 19	jsl $195bab	            JSL UART_SETBPS
.195c0a		e2 20		sep #$20	                SEP #$20        ; set A short
.195c0c		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.195c0e		22 db 5b 19	jsl $195bdb	            JSL UART_SETLCR
.195c12		a9 e1		lda #$e1	            LDA #%11100001
.195c14		a0 02 00	ldy #$0002	            LDY #UART_FCR
.195c17		97 00		sta [$0700],y	            STA [CURRUART],Y
.195c19		2b		pld		            PLD
.195c1a		28		plp		            PLP
.195c1b		6b		rtl		            RTL
.195c1c						UART_HASBYT
.195c1c		08		php		            PHP
.195c1d		0b		phd		            PHD
.195c1e		c2 30		rep #$30	                REP #$30        ; set A&X long
.195c20		48		pha		                PHA             ; begin setdp macro
.195c21		08		php		                PHP
.195c22		c2 20		rep #$20	                REP #$20        ; set A long
.195c24		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195c27		5b		tcd		                TCD
.195c28		28		plp		                PLP
.195c29		68		pla		                PLA             ; end setdp macro
.195c2a		e2 20		sep #$20	                SEP #$20        ; set A short
.195c2c		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.195c2f		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.195c31		29 01		and #$01	            AND #LSR_DATA_AVAIL
.195c33		d0 04		bne $195c39	            BNE ret_true            ; If flag is set, return true
.195c35		2b		pld		ret_false   PLD                     ; Return false
.195c36		28		plp		            PLP
.195c37		18		clc		            CLC
.195c38		6b		rtl		            RTL
.195c39		2b		pld		ret_true    PLD                     ; Return true
.195c3a		28		plp		            PLP
.195c3b		38		sec		            SEC
.195c3c		6b		rtl		            RTL
.195c3d						UART_GETC
.195c3d		08		php		            PHP
.195c3e		0b		phd		            PHD
.195c3f		c2 30		rep #$30	                REP #$30        ; set A&X long
.195c41		48		pha		                PHA             ; begin setdp macro
.195c42		08		php		                PHP
.195c43		c2 20		rep #$20	                REP #$20        ; set A long
.195c45		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195c48		5b		tcd		                TCD
.195c49		28		plp		                PLP
.195c4a		68		pla		                PLA             ; end setdp macro
.195c4b		e2 20		sep #$20	                SEP #$20        ; set A short
.195c4d		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.195c50		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.195c52		29 01		and #$01	            AND #LSR_DATA_AVAIL
.195c54		f0 fa		beq $195c50	            BEQ wait_getc           ; If the flag is clear, wait
.195c56		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.195c59		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.195c5b		2b		pld		            PLD
.195c5c		28		plp		            PLP
.195c5d		6b		rtl		            RTL
.195c5e						UART_PUTC
.195c5e		08		php		            PHP
.195c5f		0b		phd		            PHD
.195c60		c2 30		rep #$30	                REP #$30        ; set A&X long
.195c62		48		pha		                PHA             ; begin setdp macro
.195c63		08		php		                PHP
.195c64		c2 20		rep #$20	                REP #$20        ; set A long
.195c66		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195c69		5b		tcd		                TCD
.195c6a		28		plp		                PLP
.195c6b		68		pla		                PLA             ; end setdp macro
.195c6c		e2 20		sep #$20	                SEP #$20        ; set A short
.195c6e		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.195c6f		a0 05 00	ldy #$0005	            LDY #UART_LSR
.195c72		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.195c74		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.195c76		f0 fa		beq $195c72	            BEQ wait_putc
.195c78		68		pla		            PLA
.195c79		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.195c7c		97 00		sta [$0700],y	            STA [CURRUART],Y
.195c7e		2b		pld		            PLD
.195c7f		28		plp		            PLP
.195c80		6b		rtl		            RTL
.195c81						UART_PUTS
.195c81		08		php		            PHP
.195c82		e2 20		sep #$20	                SEP #$20        ; set A short
.195c84		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.195c87		f0 07		beq $195c90	            BEQ done
.195c89		22 5e 5c 19	jsl $195c5e	            JSL UART_PUTC
.195c8d		e8		inx		            INX
.195c8e		80 f4		bra $195c84	            BRA put_loop
.195c90		28		plp		done        PLP
.195c91		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.195c92						JOYSTICK_SET_NES_MODE
.195c92		e2 20		sep #$20	                SEP #$20        ; set A short
.195c94		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195c98		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.195c9a		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195c9e		6b		rtl		          RTL
.195c9f						JOYSTICK_SET_SNES_MODE
.195c9f		e2 20		sep #$20	                SEP #$20        ; set A short
.195ca1		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195ca5		29 fb		and #$fb	          AND #~NES_SNES_JOY
.195ca7		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.195ca9		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195cad		6b		rtl		          RTL
.195cae						JOYSTICK_ENABLE_NES_SNES_PORT0
.195cae		e2 20		sep #$20	                SEP #$20        ; set A short
.195cb0		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195cb4		29 fe		and #$fe	          AND #~NES_SNES_EN0
.195cb6		09 01		ora #$01	          ORA #NES_SNES_EN0
.195cb8		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195cbc		6b		rtl		          RTL
.195cbd						JOYSTICK_ENABLE_NES_SNES_PORT1
.195cbd		e2 20		sep #$20	                SEP #$20        ; set A short
.195cbf		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195cc3		29 fd		and #$fd	          AND #~NES_SNES_EN1
.195cc5		09 02		ora #$02	          ORA #NES_SNES_EN1
.195cc7		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195ccb		6b		rtl		          RTL
.195ccc						JOYSTICK_DISABLE_NES_SNES_PORT0
.195ccc		e2 20		sep #$20	                SEP #$20        ; set A short
.195cce		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195cd2		29 fe		and #$fe	          AND #~NES_SNES_EN0
.195cd4		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195cd8		6b		rtl		          RTL
.195cd9						JOYSTICK_DISABLE_NES_SNES_PORT1
.195cd9		e2 20		sep #$20	                SEP #$20        ; set A short
.195cdb		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195cdf		29 fd		and #$fd	          AND #~NES_SNES_EN1
.195ce1		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195ce5		6b		rtl		          RTL
.195ce6						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.195ce6		e2 20		sep #$20	                SEP #$20        ; set A short
.195ce8		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195cec		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.195cee		c9 00		cmp #$00	          CMP #$00
.195cf0		f0 14		beq $195d06	          BEQ END_OF_JOYSTICK_POLL
.195cf2		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195cf6		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.195cf8		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195cfc						JOYSTICK_POLLING_ISNOTOVER
.195cfc		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.195d00		29 40		and #$40	          AND #NES_SNES_DONE
.195d02		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.195d04		d0 f6		bne $195cfc	          BNE JOYSTICK_POLLING_ISNOTOVER
.195d06						END_OF_JOYSTICK_POLL
.195d06		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/sdc_library.asm

.195d07						SDC_TEST
.195d07		8b		phb		                PHB
.195d08		0b		phd		                PHD
.195d09		08		php		                PHP
.195d0a		48		pha		                PHA             ; begin setdbr macro
.195d0b		08		php		                PHP
.195d0c		e2 20		sep #$20	                SEP #$20        ; set A short
.195d0e		a9 00		lda #$00	                LDA #0
.195d10		48		pha		                PHA
.195d11		ab		plb		                PLB
.195d12		28		plp		                PLP
.195d13		68		pla		                PLA             ; end setdbr macro
.195d14		48		pha		                PHA             ; begin setdp macro
.195d15		08		php		                PHP
.195d16		c2 20		rep #$20	                REP #$20        ; set A long
.195d18		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195d1b		5b		tcd		                TCD
.195d1c		28		plp		                PLP
.195d1d		68		pla		                PLA             ; end setdp macro
.195d1e		e2 20		sep #$20	                SEP #$20        ; set A short
.195d20		a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.195d22		8d 1e 00	sta $001e	                STA @w CURCOLOR
.195d25		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.195d29		22 a0 10 00	jsl $0010a0	                JSL CSRHOME
.195d2d		22 6d 5d 19	jsl $195d6d	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.195d31		b0 03		bcs $195d36	                BCS init_ok
.195d33		82 15 00	brl $195d4b	                BRL done
.195d36		a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.195d38		85 01		sta $0321	                STA BIOS_DEV
.195d3a		22 75 43 19	jsl $194375	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.195d3e		b0 03		bcs $195d43	                BCS mount_ok
.195d40		82 08 00	brl $195d4b	                BRL done
.195d43		22 2c 54 19	jsl $19542c	mount_ok        JSL IF_DIROPEN
.195d47		b0 02		bcs $195d4b	                BCS all_ok
.195d49		80 00		bra $195d4b	                BRA done
.195d4b						all_ok
.195d4b		22 6c 10 00	jsl $00106c	done            JSL PRINTCR
.195d4f		28		plp		                PLP
.195d50		2b		pld		                PLD
.195d51		ab		plb		                PLB
.195d52		6b		rtl		                RTL
.195d53						SDC_WAITBUSY
.195d53		08		php		                PHP
.195d54		e2 20		sep #$20	                SEP #$20        ; set A short
.195d56		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.195d5a		29 01		and #$01	                AND #SDC_TRANS_BUSY
.195d5c		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.195d5e		f0 f6		beq $195d56	                BEQ wait_xact
.195d60		28		plp		                PLP
.195d61		6b		rtl		                RTL
.195d62						SDC_RESET
.195d62		08		php		                PHP
.195d63		e2 20		sep #$20	                SEP #$20        ; set A short
.195d65		a9 01		lda #$01	                LDA #1
.195d67		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.195d6b		28		plp		                PLP
.195d6c		6b		rtl		                RTL
.195d6d						SDC_INIT
.195d6d		0b		phd		                PHD
.195d6e		8b		phb		                PHB
.195d6f		08		php		                PHP
.195d70		48		pha		                PHA             ; begin setdbr macro
.195d71		08		php		                PHP
.195d72		e2 20		sep #$20	                SEP #$20        ; set A short
.195d74		a9 00		lda #$00	                LDA #0
.195d76		48		pha		                PHA
.195d77		ab		plb		                PLB
.195d78		28		plp		                PLP
.195d79		68		pla		                PLA             ; end setdbr macro
.195d7a		48		pha		                PHA             ; begin setdp macro
.195d7b		08		php		                PHP
.195d7c		c2 20		rep #$20	                REP #$20        ; set A long
.195d7e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195d81		5b		tcd		                TCD
.195d82		28		plp		                PLP
.195d83		68		pla		                PLA             ; end setdp macro
.195d84		e2 20		sep #$20	                SEP #$20        ; set A short
.195d86		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.195d8a		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.195d8c		f0 04		beq $195d92	                BEQ start_trans                     ; Yes: start the transaction
.195d8e		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.195d90		80 22		bra $195db4	                BRA set_error
.195d92		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.195d94		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.195d98		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195d9a		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195d9e		22 53 5d 19	jsl $195d53	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.195da2		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195da6		d0 07		bne $195daf	                BNE ret_error                       ; Is there one? Process the error
.195da8		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.195daa		28		plp		                PLP
.195dab		ab		plb		                PLB
.195dac		2b		pld		                PLD
.195dad		38		sec		                SEC
.195dae		6b		rtl		                RTL
.195daf		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.195db2		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.195db4		85 00		sta $0320	set_error       STA BIOS_STATUS
.195db6		28		plp		                PLP
.195db7		ab		plb		                PLB
.195db8		2b		pld		                PLD
.195db9		18		clc		                CLC
.195dba		6b		rtl		                RTL
.195dbb						SDC_GETBLOCK
.195dbb		0b		phd		                PHD
.195dbc		8b		phb		                PHB
.195dbd		08		php		                PHP
.195dbe		48		pha		                PHA             ; begin setdbr macro
.195dbf		08		php		                PHP
.195dc0		e2 20		sep #$20	                SEP #$20        ; set A short
.195dc2		a9 00		lda #$00	                LDA #0
.195dc4		48		pha		                PHA
.195dc5		ab		plb		                PLB
.195dc6		28		plp		                PLP
.195dc7		68		pla		                PLA             ; end setdbr macro
.195dc8		48		pha		                PHA             ; begin setdp macro
.195dc9		08		php		                PHP
.195dca		c2 20		rep #$20	                REP #$20        ; set A long
.195dcc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195dcf		5b		tcd		                TCD
.195dd0		28		plp		                PLP
.195dd1		68		pla		                PLA             ; end setdp macro
.195dd2		e2 20		sep #$20	                SEP #$20        ; set A short
.195dd4		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.195dd8		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.195dda		f0 04		beq $195de0	                BEQ led_on                          ; Yes: turn on the LED
.195ddc		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.195dde		80 71		bra $195e51	                BRA ret_error
.195de0		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.195de4		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.195de6		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195dea		a9 00		lda #$00	                LDA #0
.195dec		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.195df0		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.195df2		0a		asl a		                ASL A
.195df3		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.195df7		a5 03		lda $0323	                LDA BIOS_LBA+1
.195df9		2a		rol a		                ROL A
.195dfa		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.195dfe		a5 04		lda $0324	                LDA BIOS_LBA+2
.195e00		2a		rol a		                ROL A
.195e01		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.195e05		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.195e07		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.195e0b		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195e0d		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195e11		22 53 5d 19	jsl $195d53	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.195e15		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195e19		d0 36		bne $195e51	                BNE ret_error                       ; Is there one? Process the error
.195e1b		e2 20		sep #$20	                SEP #$20        ; set A short
.195e1d		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.195e21		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.195e23		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.195e27		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.195e29		c2 10		rep #$10	                REP #$10        ; set X long
.195e2b		a0 00 00	ldy #$0000	                LDY #0
.195e2e		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.195e32		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.195e34		c8		iny		                INY                                 ; Advance to the next byte
.195e35		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.195e38		d0 f4		bne $195e2e	                BNE loop_rd                         ; No: keep reading
.195e3a		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195e3e		d0 11		bne $195e51	                BNE ret_error                       ; Is there one? Process the error
.195e40		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.195e42		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195e46		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195e48		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195e4c		28		plp		                PLP
.195e4d		ab		plb		                PLB
.195e4e		2b		pld		                PLD
.195e4f		38		sec		                SEC
.195e50		6b		rtl		                RTL
.195e51		85 00		sta $0320	ret_error       STA BIOS_STATUS
.195e53		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195e57		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195e59		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195e5d		28		plp		                PLP
.195e5e		ab		plb		                PLB
.195e5f		2b		pld		                PLD
.195e60		18		clc		                CLC
.195e61		6b		rtl		                RTL
.195e62						SDC_PUTBLOCK
.195e62		0b		phd		                PHD
.195e63		8b		phb		                PHB
.195e64		08		php		                PHP
.195e65		48		pha		                PHA             ; begin setdbr macro
.195e66		08		php		                PHP
.195e67		e2 20		sep #$20	                SEP #$20        ; set A short
.195e69		a9 00		lda #$00	                LDA #0
.195e6b		48		pha		                PHA
.195e6c		ab		plb		                PLB
.195e6d		28		plp		                PLP
.195e6e		68		pla		                PLA             ; end setdbr macro
.195e6f		48		pha		                PHA             ; begin setdp macro
.195e70		08		php		                PHP
.195e71		c2 20		rep #$20	                REP #$20        ; set A long
.195e73		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195e76		5b		tcd		                TCD
.195e77		28		plp		                PLP
.195e78		68		pla		                PLA             ; end setdp macro
.195e79		e2 20		sep #$20	                SEP #$20        ; set A short
.195e7b		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.195e7f		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.195e81		f0 04		beq $195e87	                BEQ check_wp                        ; Yes: check for write protect
.195e83		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.195e85		80 65		bra $195eec	                BRA ret_error
.195e87		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.195e89		f0 04		beq $195e8f	                BEQ led_on                          ; Yes: start the transaction
.195e8b		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.195e8d		80 5d		bra $195eec	                BRA ret_error
.195e8f		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.195e93		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.195e95		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195e99		c2 10		rep #$10	                REP #$10        ; set X long
.195e9b		a0 00 00	ldy #$0000	                LDY #0
.195e9e		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.195ea0		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.195ea4		c8		iny		                INY                                 ; Advance to the next byte
.195ea5		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.195ea8		d0 f4		bne $195e9e	                BNE loop_wr                         ; No: keep writing
.195eaa		a9 00		lda #$00	                LDA #0
.195eac		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.195eb0		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.195eb2		0a		asl a		                ASL A
.195eb3		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.195eb7		a5 03		lda $0323	                LDA BIOS_LBA+1
.195eb9		2a		rol a		                ROL A
.195eba		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.195ebe		a5 04		lda $0324	                LDA BIOS_LBA+2
.195ec0		2a		rol a		                ROL A
.195ec1		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.195ec5		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.195ec7		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.195ecb		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195ecd		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195ed1		22 53 5d 19	jsl $195d53	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.195ed5		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195ed9		d0 11		bne $195eec	                BNE ret_error                       ; Is there one? Process the error
.195edb		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.195edd		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195ee1		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195ee3		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195ee7		28		plp		                PLP
.195ee8		ab		plb		                PLB
.195ee9		2b		pld		                PLD
.195eea		38		sec		                SEC
.195eeb		6b		rtl		                RTL
.195eec		85 00		sta $0320	ret_error       STA BIOS_STATUS
.195eee		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195ef2		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195ef4		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195ef8		28		plp		                PLP
.195ef9		ab		plb		                PLB
.195efa		2b		pld		                PLD
.195efb		18		clc		                CLC
.195efc		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.195efd						FDC_TEST
.195efd		8b		phb		                    PHB
.195efe		0b		phd		                    PHD
.195eff		08		php		                    PHP
.195f00		48		pha		                PHA             ; begin setdbr macro
.195f01		08		php		                PHP
.195f02		e2 20		sep #$20	                SEP #$20        ; set A short
.195f04		a9 00		lda #$00	                LDA #0
.195f06		48		pha		                PHA
.195f07		ab		plb		                PLB
.195f08		28		plp		                PLP
.195f09		68		pla		                PLA             ; end setdbr macro
.195f0a		48		pha		                PHA             ; begin setdp macro
.195f0b		08		php		                PHP
.195f0c		c2 20		rep #$20	                REP #$20        ; set A long
.195f0e		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195f11		5b		tcd		                TCD
.195f12		28		plp		                PLP
.195f13		68		pla		                PLA             ; end setdp macro
.195f14		e2 20		sep #$20	                SEP #$20        ; set A short
.195f16		a9 f0		lda #$f0	                    LDA #$F0
.195f18		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.195f1b		22 2e 0b 19	jsl $190b2e	                    JSL ICLRSCREEN
.195f1f		22 52 09 19	jsl $190952	                    JSL ICSRHOME
.195f23		c2 30		rep #$30	                REP #$30        ; set A&X long
.195f25		22 f3 61 19	jsl $1961f3	                    JSL FDC_Init
.195f29		b0 03		bcs $195f2e	                    BCS init_ok
.195f2b		82 20 00	brl $195f4e	                    BRL motor_off
.195f2e		22 f2 68 19	jsl $1968f2	init_ok             JSL FDC_CHK_MEDIA
.195f32		90 03		bcc $195f37	                    BCC no_media
.195f34		82 03 00	brl $195f3a	                    BRL is_ok1
.195f37						no_media
.195f37		82 14 00	brl $195f4e	                    BRL motor_off
.195f3a		22 85 67 19	jsl $196785	is_ok1              JSL FDC_MOUNT
.195f3e		90 03		bcc $195f43	                    BCC mount_err
.195f40		82 03 00	brl $195f46	                    BRL is_ok2
.195f43						mount_err
.195f43		82 08 00	brl $195f4e	                    BRL motor_off
.195f46		22 5a 5f 19	jsl $195f5a	is_ok2              JSL FDC_TEST_PUTBLOCK
.195f4a		b0 02		bcs $195f4e	                    BCS all_ok
.195f4c		80 00		bra $195f4e	                    BRA motor_off
.195f4e						all_ok
.195f4e		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.195f52		22 a3 62 19	jsl $1962a3	                    JSL FDC_Motor_Off
.195f56		28		plp		                    PLP
.195f57		2b		pld		                    PLD
.195f58		ab		plb		                    PLB
.195f59		6b		rtl		                    RTL
.195f5a						FDC_TEST_PUTBLOCK
.195f5a		e2 20		sep #$20	                SEP #$20        ; set A short
.195f5c		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.195f5e		a2 00 00	ldx #$0000	                    LDX #0
.195f61		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.195f65		1a		inc a		                    INC A
.195f66		e8		inx		                    INX
.195f67		e0 00 02	cpx #$0200	                    CPX #512
.195f6a		d0 f5		bne $195f61	                    BNE init_loop
.195f6c		c2 20		rep #$20	                REP #$20        ; set A long
.195f6e		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.195f71		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.195f75		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.195f78		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.195f7c		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.195f7f		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.195f83		a9 00 00	lda #$0000	                    LDA #0
.195f86		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.195f8a		22 19 67 19	jsl $196719	                    JSL FDC_PUTBLOCK                ; Try to write the data
.195f8e		6b		rtl		                    RTL
>195f8f		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>195f97		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>195fa7		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.195fab						FDC_Check_RQM
.195fab		0b		phd		                    PHD
.195fac		08		php		                    PHP
.195fad		48		pha		                PHA             ; begin setdp macro
.195fae		08		php		                PHP
.195faf		c2 20		rep #$20	                REP #$20        ; set A long
.195fb1		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195fb4		5b		tcd		                TCD
.195fb5		28		plp		                PLP
.195fb6		68		pla		                PLA             ; end setdp macro
.195fb7		e2 20		sep #$20	                SEP #$20        ; set A short
.195fb9		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195fbb		22 24 3f 19	jsl $193f24	                    JSL ISETTIMEOUT
.195fbf		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195fc1		30 12		bmi $195fd5	                    BMI time_out            ; If so: signal a time out
.195fc3		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195fc7		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.195fc9		f0 f4		beq $195fbf	                    BEQ loop
.195fcb		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195fcd		22 24 3f 19	jsl $193f24	                    JSL ISETTIMEOUT
.195fd1		28		plp		                    PLP
.195fd2		2b		pld		                    PLD
.195fd3		38		sec		                    SEC
.195fd4		60		rts		                    RTS
.195fd5		28		plp		time_out            PLP
.195fd6		2b		pld		                    PLD
.195fd7		18		clc		                    CLC
.195fd8		60		rts		                    RTS
.195fd9						FDC_Check_DRV0_BSY
.195fd9		0b		phd		                    PHD
.195fda		08		php		                    PHP
.195fdb		48		pha		                PHA             ; begin setdp macro
.195fdc		08		php		                PHP
.195fdd		c2 20		rep #$20	                REP #$20        ; set A long
.195fdf		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195fe2		5b		tcd		                TCD
.195fe3		28		plp		                PLP
.195fe4		68		pla		                PLA             ; end setdp macro
.195fe5		e2 20		sep #$20	                SEP #$20        ; set A short
.195fe7		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195fe9		22 24 3f 19	jsl $193f24	                    JSL ISETTIMEOUT
.195fed		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195fef		30 12		bmi $196003	                    BMI time_out            ; If so: signal a time out
.195ff1		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195ff5		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.195ff7		d0 f4		bne $195fed	                    BNE loop
.195ff9		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195ffb		22 24 3f 19	jsl $193f24	                    JSL ISETTIMEOUT
.195fff		28		plp		                    PLP
.196000		2b		pld		                    PLD
.196001		38		sec		                    SEC
.196002		60		rts		                    RTS
.196003		28		plp		time_out            PLP
.196004		2b		pld		                    PLD
.196005		18		clc		                    CLC
.196006		60		rts		                    RTS
.196007						FDC_Check_CMD_BSY
.196007		0b		phd		                    PHD
.196008		08		php		                    PHP
.196009		48		pha		                PHA             ; begin setdp macro
.19600a		08		php		                PHP
.19600b		c2 20		rep #$20	                REP #$20        ; set A long
.19600d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196010		5b		tcd		                TCD
.196011		28		plp		                PLP
.196012		68		pla		                PLA             ; end setdp macro
.196013		e2 20		sep #$20	                SEP #$20        ; set A short
.196015		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.196017		22 24 3f 19	jsl $193f24	                    JSL ISETTIMEOUT
.19601b		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.19601d		30 12		bmi $196031	                    BMI time_out            ; If so: signal a time out
.19601f		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.196023		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.196025		d0 f4		bne $19601b	                    BNE loop
.196027		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.196029		22 24 3f 19	jsl $193f24	                    JSL ISETTIMEOUT
.19602d		28		plp		                    PLP
.19602e		2b		pld		                    PLD
.19602f		38		sec		                    SEC
.196030		60		rts		                    RTS
.196031		28		plp		time_out            PLP
.196032		2b		pld		                    PLD
.196033		18		clc		                    CLC
.196034		60		rts		                    RTS
.196035						FDC_Can_Read_Data
.196035		0b		phd		                    PHD
.196036		08		php		                    PHP
.196037		48		pha		                PHA             ; begin setdp macro
.196038		08		php		                PHP
.196039		c2 20		rep #$20	                REP #$20        ; set A long
.19603b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19603e		5b		tcd		                TCD
.19603f		28		plp		                PLP
.196040		68		pla		                PLA             ; end setdp macro
.196041		e2 20		sep #$20	                SEP #$20        ; set A short
.196043		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.196045		22 24 3f 19	jsl $193f24	                    JSL ISETTIMEOUT
.196049		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.19604b		30 14		bmi $196061	                    BMI time_out            ; If so: signal a time out
.19604d		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.196051		29 40		and #$40	                    AND #FDC_MSR_DIO
.196053		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.196055		d0 f2		bne $196049	                    BNE loop
.196057		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.196059		22 24 3f 19	jsl $193f24	                    JSL ISETTIMEOUT
.19605d		28		plp		                    PLP
.19605e		2b		pld		                    PLD
.19605f		38		sec		                    SEC
.196060		60		rts		                    RTS
.196061		28		plp		time_out            PLP
.196062		2b		pld		                    PLD
.196063		18		clc		                    CLC
.196064		60		rts		                    RTS
.196065						FDC_CAN_WRITE
.196065		0b		phd		                    PHD
.196066		08		php		                    PHP
.196067		48		pha		                PHA             ; begin setdp macro
.196068		08		php		                PHP
.196069		c2 20		rep #$20	                REP #$20        ; set A long
.19606b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19606e		5b		tcd		                TCD
.19606f		28		plp		                PLP
.196070		68		pla		                PLA             ; end setdp macro
.196071		e2 20		sep #$20	                SEP #$20        ; set A short
.196073		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.196075		22 24 3f 19	jsl $193f24	                    JSL ISETTIMEOUT
.196079		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.19607b		30 14		bmi $196091	                    BMI time_out            ; If so: signal a time out
.19607d		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.196081		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.196083		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.196085		d0 f2		bne $196079	                    BNE loop
.196087		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.196089		22 24 3f 19	jsl $193f24	                    JSL ISETTIMEOUT
.19608d		28		plp		                    PLP
.19608e		2b		pld		                    PLD
.19608f		38		sec		                    SEC
.196090		60		rts		                    RTS
.196091		28		plp		time_out            PLP
.196092		2b		pld		                    PLD
.196093		18		clc		                    CLC
.196094		60		rts		                    RTS
.196095						FDC_DELAY_10MS
.196095		da		phx		                    PHX
.196096		08		php		                    PHP
.196097		c2 10		rep #$10	                REP #$10        ; set X long
.196099		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.19609c		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.19609d		ca		dex		                    DEX
.19609e		e0 00 00	cpx #$0000	                    CPX #0
.1960a1		d0 f9		bne $19609c	                    BNE loop
.1960a3		28		plp		                    PLP
.1960a4		fa		plx		                    PLX
.1960a5		6b		rtl		                    RTL
.1960a6						FDC_COMMAND
.1960a6		da		phx		                    PHX
.1960a7		8b		phb		                    PHB
.1960a8		0b		phd		                    PHD
.1960a9		08		php		                    PHP
.1960aa		48		pha		                PHA             ; begin setdbr macro
.1960ab		08		php		                PHP
.1960ac		e2 20		sep #$20	                SEP #$20        ; set A short
.1960ae		a9 00		lda #$00	                LDA #0
.1960b0		48		pha		                PHA
.1960b1		ab		plb		                PLB
.1960b2		28		plp		                PLP
.1960b3		68		pla		                PLA             ; end setdbr macro
.1960b4		48		pha		                PHA             ; begin setdp macro
.1960b5		08		php		                PHP
.1960b6		c2 20		rep #$20	                REP #$20        ; set A long
.1960b8		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1960bb		5b		tcd		                TCD
.1960bc		28		plp		                PLP
.1960bd		68		pla		                PLA             ; end setdp macro
.1960be		22 95 60 19	jsl $196095	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.1960c2		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1960c4		a2 00		ldx #$00	                    LDX #0
.1960c6		a9 00		lda #$00	                    LDA #0
.1960c8		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.1960cb		e8		inx		                    INX
.1960cc		e0 10		cpx #$10	                    CPX #16
.1960ce		d0 f8		bne $1960c8	                    BNE clr_results
.1960d0		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.1960d4		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.1960d6		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.1960d8		f0 04		beq $1960de	                    BEQ start_send                          ; If so, start sending
.1960da		22 f3 61 19	jsl $1961f3	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.1960de						start_send
.1960de		e2 10		sep #$10	                SEP #$10        ; set X short
.1960e0		a2 00		ldx #$00	                    LDX #0
.1960e2		20 ab 5f	jsr $195fab	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.1960e5		b0 03		bcs $1960ea	                    BCS send_param
.1960e7		82 5e 00	brl $196148	                    BRL time_out                            ; If there was a timeout, flag the time out
.1960ea		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.1960ed		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.1960f1		22 95 60 19	jsl $196095	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.1960f5		e8		inx		                    INX                                     ; Advance to the next byte
.1960f6		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.1960f9		d0 e7		bne $1960e2	                    BNE send_loop                           ; Keep sending until we've sent them all
.1960fb		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.1960fe		d0 03		bne $196103	                    BNE chk_data_dir
.196100		82 80 00	brl $196183	                    BRL result_phase                        ; If 0: we just want a result
.196103		10 3c		bpl $196141	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.196105						wr_data
.196105		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.196107		30 03		bmi $19610c	                    BMI wr_chk_rqm
.196109		82 3c 00	brl $196148	                    BRL time_out                            ; If not, raise an error
.19610c		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.196110		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.196112		f0 f1		beq $196105	                    BEQ wr_data_rdy
.196114		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.196116		d0 03		bne $19611b	                    BNE wr_data_phase                       ; If so: transfer the data
.196118		82 68 00	brl $196183	                    BRL result_phase                          ; If not: it's an error
.19611b						wr_data_phase
.19611b		c2 10		rep #$10	                REP #$10        ; set X long
.19611d		a0 00 00	ldy #$0000	                    LDY #0
.196120		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.196122		30 03		bmi $196127	                    BMI wr_chk_nondma
.196124		82 21 00	brl $196148	                    BRL time_out                            ; If not, raise an error
.196127		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.19612b		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.19612d		f0 54		beq $196183	                    BEQ result_phase                        ; If not: break out to result phase
.19612f		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.196131		f0 ed		beq $196120	                    BEQ wr_data_loop                        ; No: keep waiting
.196133		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.196135		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.196139		c8		iny		                    INY                                     ; Move to the next position
.19613a		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.19613d		d0 e1		bne $196120	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.19613f		80 42		bra $196183	                    BRA result_phase                        ; ready for the result phase
.196141		20 35 60	jsr $196035	rd_data             JSR FDC_Can_Read_Data
.196144		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.196146		30 07		bmi $19614f	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.196148						time_out
.196148		e2 20		sep #$20	                SEP #$20        ; set A short
.19614a		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.19614c		82 9c 00	brl $1961eb	                    BRL pass_error
.19614f		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.196153		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.196155		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.196157		d0 eb		bne $196144	                    BNE rd_data_rdy
.196159		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.19615d		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.19615f		d0 03		bne $196164	                    BNE rd_data_phase                       ; If so: transfer the data
.196161		82 83 00	brl $1961e7	                    BRL error                               ; If not: it's an error
.196164						rd_data_phase
.196164		c2 10		rep #$10	                REP #$10        ; set X long
.196166		a0 00 00	ldy #$0000	                    LDY #0
.196169		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.19616b		10 db		bpl $196148	                    BPL time_out                            ; If not: throw a timeout error
.19616d		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.196171		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.196173		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.196175		d0 f2		bne $196169	                    BNE rd_data_loop
.196177		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.19617b		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.19617d		c8		iny		                    INY                                     ; Move to the next position
.19617e		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.196181		d0 e6		bne $196169	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.196183		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.196186		f0 34		beq $1961bc	                    BEQ chk_busy                            ; Then we're done
.196188		e2 10		sep #$10	                SEP #$10        ; set X short
.19618a		a2 00		ldx #$00	                    LDX #0
.19618c		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.19618e		22 24 3f 19	jsl $193f24	                    JSL ISETTIMEOUT
.196192		20 35 60	jsr $196035	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.196195		90 b1		bcc $196148	                    BCC time_out                            ; If there was a time out, raise an error
.196197		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.19619b		20 35 60	jsr $196035	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.19619e		90 a8		bcc $196148	                    BCC time_out                            ; If there was a time out, raise an error
.1961a0		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.1961a4		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.1961a7		20 ab 5f	jsr $195fab	                    JSR FDC_Check_RQM
.1961aa		90 9c		bcc $196148	                    BCC time_out                            ; If there was a time out, flag the error
.1961ac		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.1961b0		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.1961b2		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.1961b4		d0 06		bne $1961bc	                    BNE chk_busy
.1961b6		e8		inx		                    INX                                     ; Move to the next result positions
.1961b7		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.1961ba		d0 e4		bne $1961a0	                    BNE read_result                         ; And keep looping until we've read all
.1961bc						chk_busy
.1961bc		c2 10		rep #$10	                REP #$10        ; set X long
.1961be		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.1961c1		22 3a 14 19	jsl $19143a	                    JSL ILOOP_MS
.1961c5		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.1961c9		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.1961cb		f0 12		beq $1961df	                    BEQ done                                ; If not set: we're done
.1961cd		20 35 60	jsr $196035	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.1961d0		b0 03		bcs $1961d5	                    BCS get_result_byte
.1961d2		82 73 ff	brl $196148	                    BRL time_out                            ; If there was a time out, flag the error
.1961d5		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.1961d9		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.1961dc		e8		inx		                    INX
.1961dd		80 dd		bra $1961bc	                    BRA chk_busy                            ; And keep checking
.1961df						done
.1961df		64 20		stz $0320	                    STZ BIOS_STATUS
.1961e1		28		plp		                    PLP
.1961e2		2b		pld		                    PLD
.1961e3		ab		plb		                    PLB
.1961e4		fa		plx		                    PLX
.1961e5		38		sec		                    SEC
.1961e6		6b		rtl		                    RTL
.1961e7						error
.1961e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1961e9		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.1961eb		85 20		sta $0320	pass_error          STA BIOS_STATUS
.1961ed		28		plp		                    PLP
.1961ee		2b		pld		                    PLD
.1961ef		ab		plb		                    PLB
.1961f0		fa		plx		                    PLX
.1961f1		18		clc		                    CLC
.1961f2		6b		rtl		                    RTL
.1961f3						FDC_Init
.1961f3		08		php		                    PHP
.1961f4		c2 10		rep #$10	                REP #$10        ; set X long
.1961f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1961f8		a9 00		lda #$00	                    LDA #0
.1961fa		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.1961fe		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.196201		a0 00 00	ldy #$0000	                    LDY #0
.196204		22 47 14 19	jsl $191447	                    JSL IDELAY
.196208		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.19620a		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.19620e		ea		nop		                    NOP
.19620f		ea		nop		                    NOP
.196210		ea		nop		                    NOP
.196211		ea		nop		                    NOP
.196212		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.196214		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.196218		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.19621a		8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.19621e		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.196221		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.196224		22 47 14 19	jsl $191447	                    JSL IDELAY
.196228		22 03 63 19	jsl $196303	                    JSL FDC_Sense_Int_Status
.19622c		90 25		bcc $196253	                    BCC pass_failure
.19622e		22 03 63 19	jsl $196303	                    JSL FDC_Sense_Int_Status
.196232		90 1f		bcc $196253	                    BCC pass_failure
.196234		22 03 63 19	jsl $196303	                    JSL FDC_Sense_Int_Status
.196238		90 19		bcc $196253	                    BCC pass_failure
.19623a		22 03 63 19	jsl $196303	                    JSL FDC_Sense_Int_Status
.19623e		90 13		bcc $196253	                    BCC pass_failure
.196240		22 c5 63 19	jsl $1963c5	                    JSL FDC_Configure_Command
.196244		90 0d		bcc $196253	                    BCC pass_failure
.196246		22 6c 63 19	jsl $19636c	                    JSL FDC_Specify_Command
.19624a		90 07		bcc $196253	                    BCC pass_failure
.19624c		22 6f 62 19	jsl $19626f	                    JSL FDC_Motor_On
.196250		28		plp		                    PLP
.196251		38		sec		                    SEC
.196252		6b		rtl		                    RTL
.196253		28		plp		pass_failure        PLP
.196254		18		clc		                    CLC
.196255		6b		rtl		                    RTL
.196256						FDC_MOTOR_NEEDED
.196256		08		php		                    PHP
.196257		c2 20		rep #$20	                REP #$20        ; set A long
.196259		78		sei		                    SEI                         ; Turn off interrupts
.19625a		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.19625d		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.196261		e2 20		sep #$20	                SEP #$20        ; set A short
.196263		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.196267		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.196269		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.19626d		28		plp		                    PLP
.19626e		6b		rtl		                    RTL
.19626f						FDC_Motor_On
.19626f		08		php		                    PHP
.196270		22 56 62 19	jsl $196256	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.196274		e2 20		sep #$20	                SEP #$20        ; set A short
.196276		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.19627a		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.19627c		d0 1f		bne $19629d	                    BNE done                    ; If so: skip
.19627e		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.196280		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.196284		20 ab 5f	jsr $195fab	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.196287		90 17		bcc $1962a0	                    BCC time_out
.196289		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.19628c		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.19628f		22 47 14 19	jsl $191447	                    JSL IDELAY
.196293		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.196297		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.196299		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.19629d		28		plp		done                PLP
.19629e		38		sec		                    SEC
.19629f		6b		rtl		                    RTL
.1962a0		28		plp		time_out            PLP                         ; Return a timeout error
.1962a1		18		clc		                    CLC
.1962a2		6b		rtl		                    RTL
.1962a3						FDC_Motor_Off
.1962a3		08		php		                    PHP
.1962a4		e2 20		sep #$20	                SEP #$20        ; set A short
.1962a6		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.1962a8		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.1962ac		c2 20		rep #$20	                REP #$20        ; set A long
.1962ae		78		sei		                    SEI                         ; Turn off interrupts
.1962af		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.1962b2		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.1962b6		e2 20		sep #$20	                SEP #$20        ; set A short
.1962b8		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.1962bc		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.1962be		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.1962c2		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.1962c6		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.1962c8		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.1962cc		28		plp		                    PLP
.1962cd		6b		rtl		                    RTL
.1962ce						FDC_Recalibrate_Command
.1962ce		0b		phd		                    PHD
.1962cf		08		php		                    PHP
.1962d0		48		pha		                PHA             ; begin setdp macro
.1962d1		08		php		                PHP
.1962d2		c2 20		rep #$20	                REP #$20        ; set A long
.1962d4		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1962d7		5b		tcd		                TCD
.1962d8		28		plp		                PLP
.1962d9		68		pla		                PLA             ; end setdp macro
.1962da		22 56 62 19	jsl $196256	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.1962de		e2 20		sep #$20	                SEP #$20        ; set A short
.1962e0		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.1962e2		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.1962e5		a5 00		lda $0300	                    LDA FDC_DRIVE
.1962e7		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.1962ea		a9 02		lda #$02	                    LDA #2
.1962ec		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.1962ef		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.1962f2		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.1962f5		22 a6 60 19	jsl $1960a6	                    JSL FDC_COMMAND             ; Issue the command
.1962f9		90 04		bcc $1962ff	                    BCC pass_failure            ; If failure, pass the failure up
.1962fb		28		plp		                    PLP
.1962fc		2b		pld		                    PLD
.1962fd		38		sec		                    SEC
.1962fe		6b		rtl		                    RTL
.1962ff		28		plp		pass_failure        PLP
.196300		2b		pld		                    PLD
.196301		18		clc		                    CLC
.196302		6b		rtl		                    RTL
.196303						FDC_Sense_Int_Status
.196303		8b		phb		                    PHB
.196304		0b		phd		                    PHD
.196305		08		php		                    PHP
.196306		48		pha		                PHA             ; begin setdbr macro
.196307		08		php		                PHP
.196308		e2 20		sep #$20	                SEP #$20        ; set A short
.19630a		a9 00		lda #$00	                LDA #0
.19630c		48		pha		                PHA
.19630d		ab		plb		                PLB
.19630e		28		plp		                PLP
.19630f		68		pla		                PLA             ; end setdbr macro
.196310		48		pha		                PHA             ; begin setdp macro
.196311		08		php		                PHP
.196312		c2 20		rep #$20	                REP #$20        ; set A long
.196314		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196317		5b		tcd		                TCD
.196318		28		plp		                PLP
.196319		68		pla		                PLA             ; end setdp macro
.19631a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19631c		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.19631f		22 3a 14 19	jsl $19143a	                    JSL ILOOP_MS
.196323		e2 20		sep #$20	                SEP #$20        ; set A short
.196325		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.196327		a9 ff		lda #$ff	                    LDA #$FF
.196329		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.19632b		20 07 60	jsr $196007	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.19632e		90 30		bcc $196360	                    BCC time_out                        ; If there was a time out, raise an error
.196330		20 ab 5f	jsr $195fab	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.196333		90 2b		bcc $196360	                    BCC time_out                        ; If there was a time out, raise an error
.196335		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.196337		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.19633b		20 35 60	jsr $196035	                    JSR FDC_Can_Read_Data
.19633e		90 20		bcc $196360	                    BCC time_out                        ; If there was a time out, raise an error
.196340		20 ab 5f	jsr $195fab	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.196343		90 1b		bcc $196360	                    BCC time_out                        ; If there was a time out, raise an error
.196345		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.196349		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.19634b		20 ab 5f	jsr $195fab	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.19634e		90 10		bcc $196360	                    BCC time_out                        ; If there was a time out, raise an error
.196350		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.196354		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.196356		e2 20		sep #$20	                SEP #$20        ; set A short
.196358		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.19635b		28		plp		                    PLP
.19635c		2b		pld		                    PLD
.19635d		ab		plb		                    PLB
.19635e		38		sec		                    SEC
.19635f		6b		rtl		                    RTL
.196360						time_out
.196360		e2 20		sep #$20	                SEP #$20        ; set A short
.196362		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.196364		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.196367		28		plp		                    PLP
.196368		2b		pld		                    PLD
.196369		ab		plb		                    PLB
.19636a		18		clc		                    CLC
.19636b		6b		rtl		                    RTL
.19636c						FDC_Specify_Command
.19636c		8b		phb		                    PHB
.19636d		0b		phd		                    PHD
.19636e		08		php		                    PHP
.19636f		48		pha		                PHA             ; begin setdbr macro
.196370		08		php		                PHP
.196371		e2 20		sep #$20	                SEP #$20        ; set A short
.196373		a9 00		lda #$00	                LDA #0
.196375		48		pha		                PHA
.196376		ab		plb		                PLB
.196377		28		plp		                PLP
.196378		68		pla		                PLA             ; end setdbr macro
.196379		48		pha		                PHA             ; begin setdp macro
.19637a		08		php		                PHP
.19637b		c2 20		rep #$20	                REP #$20        ; set A long
.19637d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196380		5b		tcd		                TCD
.196381		28		plp		                PLP
.196382		68		pla		                PLA             ; end setdp macro
.196383		c2 30		rep #$30	                REP #$30        ; set A&X long
.196385		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.196388		22 3a 14 19	jsl $19143a	                    JSL ILOOP_MS
.19638c		e2 20		sep #$20	                SEP #$20        ; set A short
.19638e		20 07 60	jsr $196007	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.196391		90 26		bcc $1963b9	                    BCC time_out            ; If there was a time out, raise an error
.196393		20 ab 5f	jsr $195fab	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.196396		90 21		bcc $1963b9	                    BCC time_out            ; If there was a time out, raise an error
.196398		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.19639a		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.19639e		20 ab 5f	jsr $195fab	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.1963a1		90 16		bcc $1963b9	                    BCC time_out            ; If there was a time out, raise an error
.1963a3		a9 cf		lda #$cf	                    LDA #$CF
.1963a5		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.1963a9		20 ab 5f	jsr $195fab	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.1963ac		90 0b		bcc $1963b9	                    BCC time_out            ; If there was a time out, raise an error
.1963ae		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.1963b0		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.1963b4		28		plp		                    PLP
.1963b5		2b		pld		                    PLD
.1963b6		ab		plb		                    PLB
.1963b7		38		sec		                    SEC
.1963b8		6b		rtl		                    RTL
.1963b9						time_out
.1963b9		e2 20		sep #$20	                SEP #$20        ; set A short
.1963bb		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.1963bd		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.1963c0		28		plp		                    PLP
.1963c1		2b		pld		                    PLD
.1963c2		ab		plb		                    PLB
.1963c3		18		clc		                    CLC
.1963c4		6b		rtl		                    RTL
.1963c5						FDC_Configure_Command
.1963c5		8b		phb		                    PHB
.1963c6		0b		phd		                    PHD
.1963c7		08		php		                    PHP
.1963c8		48		pha		                PHA             ; begin setdbr macro
.1963c9		08		php		                PHP
.1963ca		e2 20		sep #$20	                SEP #$20        ; set A short
.1963cc		a9 00		lda #$00	                LDA #0
.1963ce		48		pha		                PHA
.1963cf		ab		plb		                PLB
.1963d0		28		plp		                PLP
.1963d1		68		pla		                PLA             ; end setdbr macro
.1963d2		48		pha		                PHA             ; begin setdp macro
.1963d3		08		php		                PHP
.1963d4		c2 20		rep #$20	                REP #$20        ; set A long
.1963d6		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1963d9		5b		tcd		                TCD
.1963da		28		plp		                PLP
.1963db		68		pla		                PLA             ; end setdp macro
.1963dc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1963de		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.1963e1		22 3a 14 19	jsl $19143a	                    JSL ILOOP_MS
.1963e5		e2 20		sep #$20	                SEP #$20        ; set A short
.1963e7		20 07 60	jsr $196007	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.1963ea		90 36		bcc $196422	                    BCC time_out            ; If there was a time out, raise an error
.1963ec		20 ab 5f	jsr $195fab	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.1963ef		90 31		bcc $196422	                    BCC time_out            ; If there was a time out, raise an error
.1963f1		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.1963f3		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.1963f7		20 ab 5f	jsr $195fab	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.1963fa		90 26		bcc $196422	                    BCC time_out            ; If there was a time out, raise an error
.1963fc		a9 00		lda #$00	                    LDA #$00
.1963fe		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.196402		20 ab 5f	jsr $195fab	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.196405		90 1b		bcc $196422	                    BCC time_out            ; If there was a time out, raise an error
.196407		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.196409		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.19640d		20 ab 5f	jsr $195fab	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.196410		90 10		bcc $196422	                    BCC time_out            ; If there was a time out, raise an error
.196412		a9 00		lda #$00	                    LDA #$00
.196414		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.196418		20 07 60	jsr $196007	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.19641b		90 05		bcc $196422	                    BCC time_out            ; If there was a time out, raise an error
.19641d		28		plp		                    PLP
.19641e		2b		pld		                    PLD
.19641f		ab		plb		                    PLB
.196420		38		sec		                    SEC
.196421		6b		rtl		                    RTL
.196422						time_out
.196422		e2 20		sep #$20	                SEP #$20        ; set A short
.196424		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.196426		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.196429		28		plp		                    PLP
.19642a		2b		pld		                    PLD
.19642b		ab		plb		                    PLB
.19642c		18		clc		                    CLC
.19642d		6b		rtl		                    RTL
.19642e						FDC_Read_ID_Command
.19642e		8b		phb		                    PHB
.19642f		0b		phd		                    PHD
.196430		08		php		                    PHP
.196431		48		pha		                PHA             ; begin setdbr macro
.196432		08		php		                PHP
.196433		e2 20		sep #$20	                SEP #$20        ; set A short
.196435		a9 00		lda #$00	                LDA #0
.196437		48		pha		                PHA
.196438		ab		plb		                PLB
.196439		28		plp		                PLP
.19643a		68		pla		                PLA             ; end setdbr macro
.19643b		48		pha		                PHA             ; begin setdp macro
.19643c		08		php		                PHP
.19643d		c2 20		rep #$20	                REP #$20        ; set A long
.19643f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196442		5b		tcd		                TCD
.196443		28		plp		                PLP
.196444		68		pla		                PLA             ; end setdp macro
.196445		e2 20		sep #$20	                SEP #$20        ; set A short
.196447		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.196449		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.19644c		a9 01		lda #$01	                    LDA #1
.19644e		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.196451		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.196454		a9 07		lda #$07	                    LDA #7
.196456		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.196459		22 a6 60 19	jsl $1960a6	                    JSL FDC_COMMAND                     ; Issue the command
.19645d		90 27		bcc $196486	                    BCC pass_failure
.19645f		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.196462		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.196464		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.196467		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.196469		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.19646c		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.19646e		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.196471		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.196473		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.196476		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.196478		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.19647b		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.19647d		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.196480		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.196482		28		plp		                    PLP
.196483		2b		pld		                    PLD
.196484		ab		plb		                    PLB
.196485		6b		rtl		                    RTL
.196486		28		plp		pass_failure        PLP
.196487		2b		pld		                    PLD
.196488		ab		plb		                    PLB
.196489		18		clc		                    CLC
.19648a		6b		rtl		                    RTL
.19648b						FDC_DumpReg_Command
.19648b		0b		phd		                    PHD
.19648c		08		php		                    PHP
.19648d		e2 20		sep #$20	                SEP #$20        ; set A short
.19648f		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.196491		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.196494		a9 01		lda #$01	                    LDA #1
.196496		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.196499		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.19649c		a9 0a		lda #$0a	                    LDA #10
.19649e		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.1964a1		22 a6 60 19	jsl $1960a6	                    JSL FDC_COMMAND                     ; Issue the command
.1964a5		90 03		bcc $1964aa	                    BCC pass_failure
.1964a7		28		plp		                    PLP
.1964a8		2b		pld		                    PLD
.1964a9		6b		rtl		                    RTL
.1964aa		28		plp		pass_failure        PLP
.1964ab		2b		pld		                    PLD
.1964ac		18		clc		                    CLC
.1964ad		6b		rtl		                    RTL
.1964ae						FDC_Seek_Track
.1964ae		8b		phb		                    PHB
.1964af		0b		phd		                    PHD
.1964b0		08		php		                    PHP
.1964b1		48		pha		                PHA             ; begin setdbr macro
.1964b2		08		php		                PHP
.1964b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1964b5		a9 00		lda #$00	                LDA #0
.1964b7		48		pha		                PHA
.1964b8		ab		plb		                PLB
.1964b9		28		plp		                PLP
.1964ba		68		pla		                PLA             ; end setdbr macro
.1964bb		48		pha		                PHA             ; begin setdp macro
.1964bc		08		php		                PHP
.1964bd		c2 20		rep #$20	                REP #$20        ; set A long
.1964bf		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1964c2		5b		tcd		                TCD
.1964c3		28		plp		                PLP
.1964c4		68		pla		                PLA             ; end setdp macro
.1964c5		22 56 62 19	jsl $196256	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.1964c9		e2 20		sep #$20	                SEP #$20        ; set A short
.1964cb		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.1964cd		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.1964d0		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.1964d2		29 01		and #$01	                    AND #$01
.1964d4		0a		asl a		                    ASL A
.1964d5		0a		asl a		                    ASL A
.1964d6		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.1964d8		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.1964db		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.1964dd		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.1964e0		a9 03		lda #$03	                    LDA #3
.1964e2		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.1964e5		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.1964e8		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.1964eb		22 a6 60 19	jsl $1960a6	                    JSL FDC_COMMAND                     ; Issue the command
.1964ef		90 05		bcc $1964f6	                    BCC pass_failure
.1964f1		28		plp		                    PLP
.1964f2		2b		pld		                    PLD
.1964f3		ab		plb		                    PLB
.1964f4		38		sec		                    SEC
.1964f5		6b		rtl		                    RTL
.1964f6		28		plp		pass_failure        PLP
.1964f7		2b		pld		                    PLD
.1964f8		ab		plb		                    PLB
.1964f9		18		clc		                    CLC
.1964fa		6b		rtl		                    RTL
.1964fb						FDC_Read_Sector
.1964fb		8b		phb		                    PHB
.1964fc		0b		phd		                    PHD
.1964fd		08		php		                    PHP
.1964fe		48		pha		                PHA             ; begin setdbr macro
.1964ff		08		php		                PHP
.196500		e2 20		sep #$20	                SEP #$20        ; set A short
.196502		a9 00		lda #$00	                LDA #0
.196504		48		pha		                PHA
.196505		ab		plb		                PLB
.196506		28		plp		                PLP
.196507		68		pla		                PLA             ; end setdbr macro
.196508		48		pha		                PHA             ; begin setdp macro
.196509		08		php		                PHP
.19650a		c2 20		rep #$20	                REP #$20        ; set A long
.19650c		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19650f		5b		tcd		                TCD
.196510		28		plp		                PLP
.196511		68		pla		                PLA             ; end setdp macro
.196512		22 56 62 19	jsl $196256	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.196516		e2 20		sep #$20	                SEP #$20        ; set A short
.196518		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.19651a		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.19651c		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.19651f		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.196521		29 01		and #$01	                    AND #$01
.196523		0a		asl a		                    ASL A
.196524		0a		asl a		                    ASL A
.196525		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.196527		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.19652a		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.19652c		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.19652f		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.196531		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.196534		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.196536		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.196539		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.19653b		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.19653e		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.196540		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.196543		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.196545		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.196548		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.19654a		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.19654d		a9 09		lda #$09	                    LDA #9
.19654f		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.196552		a9 01		lda #$01	                    LDA #1
.196554		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.196557		a9 07		lda #$07	                    LDA #7
.196559		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.19655c		22 a6 60 19	jsl $1960a6	command             JSL FDC_COMMAND                     ; Issue the command
.196560		08		php		                    PHP
.196561		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.196564		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.196566		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.196569		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.19656b		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.19656e		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.196570		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.196573		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.196575		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.196578		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.19657a		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.19657d		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.19657f		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.196582		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.196584		28		plp		                    PLP
.196585		90 04		bcc $19658b	                    BCC pass_failure
.196587		28		plp		done                PLP
.196588		2b		pld		                    PLD
.196589		ab		plb		                    PLB
.19658a		6b		rtl		                    RTL
.19658b		28		plp		pass_failure        PLP
.19658c		2b		pld		                    PLD
.19658d		ab		plb		                    PLB
.19658e		18		clc		                    CLC
.19658f		6b		rtl		                    RTL
.196590						FDC_Write_Sector
.196590		8b		phb		                    PHB
.196591		0b		phd		                    PHD
.196592		08		php		                    PHP
.196593		48		pha		                PHA             ; begin setdbr macro
.196594		08		php		                PHP
.196595		e2 20		sep #$20	                SEP #$20        ; set A short
.196597		a9 00		lda #$00	                LDA #0
.196599		48		pha		                PHA
.19659a		ab		plb		                PLB
.19659b		28		plp		                PLP
.19659c		68		pla		                PLA             ; end setdbr macro
.19659d		48		pha		                PHA             ; begin setdp macro
.19659e		08		php		                PHP
.19659f		c2 20		rep #$20	                REP #$20        ; set A long
.1965a1		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1965a4		5b		tcd		                TCD
.1965a5		28		plp		                PLP
.1965a6		68		pla		                PLA             ; end setdp macro
.1965a7		e2 20		sep #$20	                SEP #$20        ; set A short
.1965a9		22 56 62 19	jsl $196256	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.1965ad		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.1965af		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.1965b1		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.1965b4		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.1965b6		29 01		and #$01	                    AND #$01
.1965b8		0a		asl a		                    ASL A
.1965b9		0a		asl a		                    ASL A
.1965ba		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.1965bc		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.1965bf		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.1965c1		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.1965c4		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.1965c6		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.1965c9		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.1965cb		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.1965ce		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.1965d0		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.1965d3		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.1965d5		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.1965d8		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.1965da		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.1965dd		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.1965df		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.1965e2		a9 09		lda #$09	                    LDA #9
.1965e4		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.1965e7		a9 ff		lda #$ff	                    LDA #$FF
.1965e9		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.1965ec		a9 07		lda #$07	                    LDA #7
.1965ee		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.1965f1		22 a6 60 19	jsl $1960a6	command             JSL FDC_COMMAND                     ; Issue the command
.1965f5		08		php		                    PHP
.1965f6		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.1965f9		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.1965fb		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.1965fe		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.196600		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.196603		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.196605		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.196608		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.19660a		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.19660d		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.19660f		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.196612		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.196614		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.196617		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.196619		28		plp		check_status        PLP
.19661a		90 04		bcc $196620	                    BCC pass_failure
.19661c		28		plp		done                PLP
.19661d		2b		pld		                    PLD
.19661e		ab		plb		                    PLB
.19661f		6b		rtl		                    RTL
.196620		28		plp		pass_failure        PLP
.196621		2b		pld		                    PLD
.196622		ab		plb		                    PLB
.196623		18		clc		                    CLC
.196624		6b		rtl		                    RTL
.196625						DIVIDE32
.196625		da		phx		                    PHX
.196626		5a		phy		                    PHY
.196627		0b		phd		                    PHD
.196628		08		php		                    PHP
.196629		48		pha		                PHA             ; begin setdp macro
.19662a		08		php		                PHP
.19662b		c2 20		rep #$20	                REP #$20        ; set A long
.19662d		a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.196630		5b		tcd		                TCD
.196631		28		plp		                PLP
.196632		68		pla		                PLA             ; end setdp macro
.196633		c2 30		rep #$30	                REP #$30        ; set A&X long
.196635		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.196637		64 0a		stz $0316	                    STZ REMAINDER+2
.196639		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.19663c		06 00		asl $030c	loop                ASL DIVIDEND
.19663e		26 02		rol $030e	                    ROL DIVIDEND+2
.196640		26 08		rol $0314	                    ROL REMAINDER
.196642		26 0a		rol $0316	                    ROL REMAINDER+2
.196644		a5 08		lda $0314	                    LDA REMAINDER
.196646		38		sec		                    SEC
.196647		e5 04		sbc $0310	                    SBC DIVISOR
.196649		a8		tay		                    TAY
.19664a		a5 0a		lda $0316	                    LDA REMAINDER+2
.19664c		e5 06		sbc $0312	                    SBC DIVISOR+2
.19664e		90 06		bcc $196656	                    BCC skip
.196650		85 0a		sta $0316	                    STA REMAINDER+2
.196652		84 08		sty $0314	                    STY REMAINDER
.196654		e6 00		inc $030c	                    INC DIVIDEND
.196656		ca		dex		skip                DEX
.196657		d0 e3		bne $19663c	                    BNE loop
.196659		28		plp		                    PLP
.19665a		2b		pld		                    PLD
.19665b		7a		ply		                    PLY
.19665c		fa		plx		                    PLX
.19665d		60		rts		                    RTS
.19665e						LBA2CHS
.19665e		8b		phb		                    PHB
.19665f		0b		phd		                    PHD
.196660		08		php		                    PHP
.196661		48		pha		                PHA             ; begin setdbr macro
.196662		08		php		                PHP
.196663		e2 20		sep #$20	                SEP #$20        ; set A short
.196665		a9 00		lda #$00	                LDA #0
.196667		48		pha		                PHA
.196668		ab		plb		                PLB
.196669		28		plp		                PLP
.19666a		68		pla		                PLA             ; end setdbr macro
.19666b		48		pha		                PHA             ; begin setdp macro
.19666c		08		php		                PHP
.19666d		c2 20		rep #$20	                REP #$20        ; set A long
.19666f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196672		5b		tcd		                TCD
.196673		28		plp		                PLP
.196674		68		pla		                PLA             ; end setdp macro
.196675		c2 30		rep #$30	                REP #$30        ; set A&X long
.196677		a5 22		lda $0322	                    LDA BIOS_LBA
.196679		85 0c		sta $030c	                    STA DIVIDEND
.19667b		a5 24		lda $0324	                    LDA BIOS_LBA+2
.19667d		85 0e		sta $030e	                    STA DIVIDEND+2
.19667f		a9 24 00	lda #$0024	                    LDA #36
.196682		85 10		sta $0310	                    STA DIVISOR
.196684		64 12		stz $0312	                    STZ DIVISOR+2
.196686		20 25 66	jsr $196625	                    JSR DIVIDE32
.196689		e2 20		sep #$20	                SEP #$20        ; set A short
.19668b		a5 0c		lda $030c	                    LDA DIVIDEND
.19668d		85 02		sta $0302	                    STA FDC_CYLINDER
.19668f		c2 20		rep #$20	                REP #$20        ; set A long
.196691		a5 14		lda $0314	                    LDA REMAINDER
.196693		85 0c		sta $030c	                    STA DIVIDEND
.196695		a5 16		lda $0316	                    LDA REMAINDER+2
.196697		85 0e		sta $030e	                    STA DIVIDEND+2
.196699		a9 12 00	lda #$0012	                    LDA #18
.19669c		85 10		sta $0310	                    STA DIVISOR
.19669e		64 12		stz $0312	                    STZ DIVISOR+2
.1966a0		20 25 66	jsr $196625	                    JSR DIVIDE32
.1966a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1966a5		a5 0c		lda $030c	                    LDA DIVIDEND
.1966a7		29 01		and #$01	                    AND #$01
.1966a9		85 01		sta $0301	                    STA FDC_HEAD
.1966ab		a5 14		lda $0314	                    LDA REMAINDER
.1966ad		1a		inc a		                    INC A
.1966ae		85 03		sta $0303	                    STA FDC_SECTOR
.1966b0		28		plp		                    PLP
.1966b1		2b		pld		                    PLD
.1966b2		ab		plb		                    PLB
.1966b3		6b		rtl		                    RTL
.1966b4						FDC_GETBLOCK
.1966b4		8b		phb		                    PHB
.1966b5		0b		phd		                    PHD
.1966b6		08		php		                    PHP
.1966b7		48		pha		                PHA             ; begin setdbr macro
.1966b8		08		php		                PHP
.1966b9		e2 20		sep #$20	                SEP #$20        ; set A short
.1966bb		a9 00		lda #$00	                LDA #0
.1966bd		48		pha		                PHA
.1966be		ab		plb		                PLB
.1966bf		28		plp		                PLP
.1966c0		68		pla		                PLA             ; end setdbr macro
.1966c1		48		pha		                PHA             ; begin setdp macro
.1966c2		08		php		                PHP
.1966c3		c2 20		rep #$20	                REP #$20        ; set A long
.1966c5		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1966c8		5b		tcd		                TCD
.1966c9		28		plp		                PLP
.1966ca		68		pla		                PLA             ; end setdp macro
.1966cb		e2 20		sep #$20	                SEP #$20        ; set A short
.1966cd		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.1966cf		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.1966d2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1966d4		22 5e 66 19	jsl $19665e	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.1966d8		e2 20		sep #$20	                SEP #$20        ; set A short
.1966da		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.1966dc		f0 29		beq $196707	                    BEQ read_failure
.1966de						try_read
.1966de		c2 20		rep #$20	                REP #$20        ; set A long
.1966e0		22 fb 64 19	jsl $1964fb	                    JSL FDC_Read_Sector         ; Read the sector
.1966e4		90 14		bcc $1966fa	                    BCC retry
.1966e6		e2 20		sep #$20	                SEP #$20        ; set A short
.1966e8		a5 06		lda $0306	                    LDA FDC_ST0
.1966ea		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.1966ec		d0 19		bne $196707	                    BNE read_failure
.1966ee						ret_success
.1966ee		e2 20		sep #$20	                SEP #$20        ; set A short
.1966f0		a9 00		lda #$00	                    LDA #0
.1966f2		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.1966f5		28		plp		                    PLP
.1966f6		2b		pld		                    PLD
.1966f7		ab		plb		                    PLB
.1966f8		38		sec		                    SEC
.1966f9		6b		rtl		                    RTL
.1966fa						retry
.1966fa		e2 20		sep #$20	                SEP #$20        ; set A short
.1966fc		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.1966ff		30 13		bmi $196714	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.196701		22 f3 61 19	jsl $1961f3	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.196705		80 d7		bra $1966de	                    BRA try_read                ; And try the read again
.196707						read_failure
.196707		e2 20		sep #$20	                SEP #$20        ; set A short
.196709		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.19670b		80 04		bra $196711	                    BRA ret_failure
.19670d						seek_failure
.19670d		e2 20		sep #$20	                SEP #$20        ; set A short
.19670f		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.196711		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.196714		28		plp		pass_failure        PLP
.196715		2b		pld		                    PLD
.196716		ab		plb		                    PLB
.196717		18		clc		                    CLC
.196718		6b		rtl		                    RTL
.196719						FDC_PUTBLOCK
.196719		8b		phb		                    PHB
.19671a		0b		phd		                    PHD
.19671b		08		php		                    PHP
.19671c		48		pha		                PHA             ; begin setdbr macro
.19671d		08		php		                PHP
.19671e		e2 20		sep #$20	                SEP #$20        ; set A short
.196720		a9 00		lda #$00	                LDA #0
.196722		48		pha		                PHA
.196723		ab		plb		                PLB
.196724		28		plp		                PLP
.196725		68		pla		                PLA             ; end setdbr macro
.196726		48		pha		                PHA             ; begin setdp macro
.196727		08		php		                PHP
.196728		c2 20		rep #$20	                REP #$20        ; set A long
.19672a		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19672d		5b		tcd		                TCD
.19672e		28		plp		                PLP
.19672f		68		pla		                PLA             ; end setdp macro
.196730		e2 20		sep #$20	                SEP #$20        ; set A short
.196732		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.196734		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.196737		c2 30		rep #$30	                REP #$30        ; set A&X long
.196739		22 5e 66 19	jsl $19665e	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.19673d		22 90 65 19	jsl $196590	retry               JSL FDC_Write_Sector        ; Write the sector
.196741		b0 03		bcs $196746	                    BCS chk_st0
.196743		82 28 00	brl $19676e	                    BRL attempt_retry
.196746						chk_st0
.196746		e2 20		sep #$20	                SEP #$20        ; set A short
.196748		a5 06		lda $0306	                    LDA FDC_ST0
.19674a		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.19674c		d0 0c		bne $19675a	                    BNE write_failure
.19674e						ret_success
.19674e		e2 20		sep #$20	                SEP #$20        ; set A short
.196750		a9 00		lda #$00	                    LDA #0
.196752		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.196755		28		plp		                    PLP
.196756		2b		pld		                    PLD
.196757		ab		plb		                    PLB
.196758		38		sec		                    SEC
.196759		6b		rtl		                    RTL
.19675a						write_failure
.19675a		e2 20		sep #$20	                SEP #$20        ; set A short
.19675c		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.19675e		89 02		bit #$02	                    BIT #FDC_ST1_NW
.196760		f0 04		beq $196766	                    BEQ generic_err
.196762		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.196764		80 17		bra $19677d	                    BRA ret_failure
.196766		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.196768		d0 e4		bne $19674e	                    BNE ret_success
.19676a		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.19676c		d0 e0		bne $19674e	                    BNE ret_success
.19676e						attempt_retry
.19676e		e2 20		sep #$20	                SEP #$20        ; set A short
.196770		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.196773		d0 c8		bne $19673d	                    BNE retry                           ; And retry unless we have none left
.196775		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.196777		80 04		bra $19677d	                    BRA ret_failure
.196779						seek_failure
.196779		e2 20		sep #$20	                SEP #$20        ; set A short
.19677b		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.19677d						ret_failure
.19677d		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.196780		28		plp		pass_failure        PLP
.196781		2b		pld		                    PLD
.196782		ab		plb		                    PLB
.196783		18		clc		                    CLC
.196784		6b		rtl		                    RTL
.196785						FDC_MOUNT
.196785		8b		phb		                    PHB
.196786		0b		phd		                    PHD
.196787		08		php		                    PHP
.196788		48		pha		                PHA             ; begin setdbr macro
.196789		08		php		                PHP
.19678a		e2 20		sep #$20	                SEP #$20        ; set A short
.19678c		a9 00		lda #$00	                LDA #0
.19678e		48		pha		                PHA
.19678f		ab		plb		                PLB
.196790		28		plp		                PLP
.196791		68		pla		                PLA             ; end setdbr macro
.196792		48		pha		                PHA             ; begin setdp macro
.196793		08		php		                PHP
.196794		c2 20		rep #$20	                REP #$20        ; set A long
.196796		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196799		5b		tcd		                TCD
.19679a		28		plp		                PLP
.19679b		68		pla		                PLA             ; end setdp macro
.19679c		22 f3 61 19	jsl $1961f3	                    JSL FDC_INIT
.1967a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1967a2		c2 10		rep #$10	                REP #$10        ; set X long
.1967a4		a9 00		lda #$00	                    LDA #0
.1967a6		a2 00 00	ldx #$0000	                    LDX #0
.1967a9		9f 00 a3 18	sta $18a300,x	zero_loop           STA DOS_SECTOR,X
.1967ad		e8		inx		                    INX
.1967ae		e0 00 02	cpx #$0200	                    CPX #512
.1967b1		d0 f6		bne $1967a9	                    BNE zero_loop
.1967b3		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.1967b5		85 00		sta $0300	                    STA FDC_DRIVE
.1967b7		22 6f 62 19	jsl $19626f	                    JSL FDC_Motor_On                        ; Turn the motor on
.1967bb		c2 30		rep #$30	                REP #$30        ; set A&X long
.1967bd		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.1967c0		85 22		sta $0322	                    STA BIOS_LBA
.1967c2		85 24		sta $0324	                    STA BIOS_LBA+2
.1967c4		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.1967c7		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.1967c9		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.1967cc		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.1967ce		22 b4 66 19	jsl $1966b4	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.1967d2		b0 03		bcs $1967d7	                    BCS parse_boot                          ; If ok: start parsing the boot record
.1967d4		82 d3 00	brl $1968aa	                    BRL pass_failure                        ; Pass the error up the chain
.1967d7						parse_boot
.1967d7		e2 20		sep #$20	                SEP #$20        ; set A short
.1967d9		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.1967db		8f 01 a0 18	sta $18a001	                    STA @l FILE_SYSTEM
.1967df		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.1967e1		8f 02 a0 18	sta $18a002	                    STA @l PARTITION
.1967e5		e2 20		sep #$20	                SEP #$20        ; set A short
.1967e7		af 0d a3 18	lda $18a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.1967eb		8f 03 a0 18	sta $18a003	                    STA @l SECTORS_PER_CLUSTER
.1967ef		c2 20		rep #$20	                REP #$20        ; set A long
.1967f1		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.1967f4		8f 04 a0 18	sta $18a004	                    STA @l FIRSTSECTOR
.1967f8		8f 06 a0 18	sta $18a006	                    STA @l FIRSTSECTOR+2
.1967fc		af 16 a3 18	lda $18a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.196800		8f 10 a0 18	sta $18a010	                    STA @l SEC_PER_FAT
.196804		a9 00 00	lda #$0000	                    LDA #0
.196807		8f 12 a0 18	sta $18a012	                    STA @l SEC_PER_FAT+2
.19680b		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.19680e		8f 14 a0 18	sta $18a014	                    STA @l FAT_BEGIN_LBA
.196812		18		clc		                    CLC
.196813		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.196817		8f 18 a0 18	sta $18a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.19681b		a9 00 00	lda #$0000	                    LDA #0
.19681e		8f 16 a0 18	sta $18a016	                    STA @l FAT_BEGIN_LBA+2
.196822		8f 1a a0 18	sta $18a01a	                    STA @L FAT2_BEGIN_LBA+2
.196826		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.196827		af 18 a0 18	lda $18a018	                    LDA @l FAT2_BEGIN_LBA
.19682b		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.19682f		8f 20 a0 18	sta $18a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.196833		a9 00 00	lda #$0000	                    LDA #0
.196836		8f 22 a0 18	sta $18a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.19683a		af 11 a3 18	lda $18a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.19683e		8f 24 a0 18	sta $18a024	                    STA @l ROOT_DIR_MAX_ENTRY
.196842		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.196843		4a		lsr a		                    LSR A
.196844		4a		lsr a		                    LSR A
.196845		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.196846		18		clc		                    CLC
.196847		6f 20 a0 18	adc $18a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.19684b		8f 1c a0 18	sta $18a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.19684f		a9 00 00	lda #$0000	                    LDA #0
.196852		8f 1e a0 18	sta $18a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.196856		af 13 a3 18	lda $18a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.19685a		8f 08 a0 18	sta $18a008	                    STA @l SECTORCOUNT
.19685e		a9 00 00	lda #$0000	                    LDA #0
.196861		8f 0a a0 18	sta $18a00a	                    STA @l SECTORCOUNT+2
.196865		af 0e a3 18	lda $18a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.196869		8f 0c a0 18	sta $18a00c	                    STA @l NUM_RSRV_SEC
.19686d		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.196870		8f 0e a0 18	sta $18a00e	                    STA @l CLUSTER_SIZE
.196874		e2 20		sep #$20	                SEP #$20        ; set A short
.196876		af 26 a3 18	lda $18a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.19687a		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.19687c		80 14		bra $196892	                    BRA no_volume_id                        ; No: there is no volume ID
.19687e						is_extended
.19687e		c2 20		rep #$20	                REP #$20        ; set A long
.196880		af 27 a3 18	lda $18a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.196884		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.196888		af 29 a3 18	lda $18a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.19688c		8f 28 a0 18	sta $18a028	                    STA @l VOLUME_ID+2
.196890		80 0d		bra $19689f	                    BRA ret_success
.196892						no_volume_id
.196892		c2 20		rep #$20	                REP #$20        ; set A long
.196894		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.196897		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.19689b		8f 28 a0 18	sta $18a028	                    STA @L VOLUME_ID+2
.19689f						ret_success
.19689f		e2 20		sep #$20	                SEP #$20        ; set A short
.1968a1		a9 00		lda #$00	                    LDA #0
.1968a3		85 20		sta $0320	                    STA BIOS_STATUS
.1968a5		28		plp		                    PLP
.1968a6		2b		pld		                    PLD
.1968a7		ab		plb		                    PLB
.1968a8		38		sec		                    SEC
.1968a9		6b		rtl		                    RTL
.1968aa		28		plp		pass_failure        PLP
.1968ab		2b		pld		                    PLD
.1968ac		ab		plb		                    PLB
.1968ad		18		clc		                    CLC
.1968ae		6b		rtl		                    RTL
.1968af						FDC_CMDBLOCK
.1968af		8b		phb		                    PHB
.1968b0		0b		phd		                    PHD
.1968b1		08		php		                    PHP
.1968b2		48		pha		                PHA             ; begin setdbr macro
.1968b3		08		php		                PHP
.1968b4		e2 20		sep #$20	                SEP #$20        ; set A short
.1968b6		a9 00		lda #$00	                LDA #0
.1968b8		48		pha		                PHA
.1968b9		ab		plb		                PLB
.1968ba		28		plp		                PLP
.1968bb		68		pla		                PLA             ; end setdbr macro
.1968bc		48		pha		                PHA             ; begin setdp macro
.1968bd		08		php		                PHP
.1968be		c2 20		rep #$20	                REP #$20        ; set A long
.1968c0		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1968c3		5b		tcd		                TCD
.1968c4		28		plp		                PLP
.1968c5		68		pla		                PLA             ; end setdp macro
.1968c6		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1968c8		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.1968ca		f0 0f		beq $1968db	                    BEQ motor_on
.1968cc		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.1968ce		f0 11		beq $1968e1	                    BEQ motor_off
.1968d0		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.1968d2		f0 13		beq $1968e7	                    BEQ recalibrate
.1968d4		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.1968d6		28		plp		                    PLP
.1968d7		2b		pld		                    PLD
.1968d8		ab		plb		                    PLB
.1968d9		38		sec		                    SEC
.1968da		6b		rtl		                    RTL
.1968db		22 6f 62 19	jsl $19626f	motor_on            JSL FDC_Motor_On
.1968df		80 f3		bra $1968d4	                    BRA ret_success
.1968e1		22 a3 62 19	jsl $1962a3	motor_off           JSL FDC_Motor_Off
.1968e5		80 ed		bra $1968d4	                    BRA ret_success
.1968e7		22 ce 62 19	jsl $1962ce	recalibrate         JSL FDC_Recalibrate_Command
.1968eb		b0 e7		bcs $1968d4	                    BCS ret_success
.1968ed		28		plp		pass_failure        PLP
.1968ee		2b		pld		                    PLD
.1968ef		ab		plb		                    PLB
.1968f0		18		clc		                    CLC
.1968f1		6b		rtl		                    RTL
.1968f2						FDC_CHK_MEDIA
.1968f2		0b		phd		                    PHD
.1968f3		08		php		                    PHP
.1968f4		48		pha		                PHA             ; begin setdp macro
.1968f5		08		php		                PHP
.1968f6		c2 20		rep #$20	                REP #$20        ; set A long
.1968f8		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1968fb		5b		tcd		                TCD
.1968fc		28		plp		                PLP
.1968fd		68		pla		                PLA             ; end setdp macro
.1968fe		22 6f 62 19	jsl $19626f	                    JSL FDC_Motor_On                ; Turn on the motor
.196902		e2 20		sep #$20	                SEP #$20        ; set A short
.196904		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.196908		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.19690a		f0 42		beq $19694e	                    BEQ ret_true                    ; If not: assume the disk is present
.19690c		a9 00		lda #$00	                    LDA #0
.19690e		85 00		sta $0300	                    STA FDC_DRIVE
.196910		a9 00		lda #$00	                    LDA #0
.196912		85 01		sta $0301	                    STA FDC_HEAD
.196914		a9 50		lda #$50	                    LDA #80
.196916		85 02		sta $0302	                    STA FDC_CYLINDER
.196918		22 ae 64 19	jsl $1964ae	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.19691c		90 34		bcc $196952	                    BCC ret_false                   ; If fail: return false
.19691e		c2 10		rep #$10	                REP #$10        ; set X long
.196920		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.196923		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.196926		22 47 14 19	jsl $191447	                    JSL IDELAY
.19692a		22 03 63 19	jsl $196303	                    JSL FDC_Sense_Int_Status
.19692e		a5 06		lda $0306	                    LDA FDC_ST0
.196930		29 d0		and #$d0	                    AND #%11010000
.196932		d0 1e		bne $196952	                    BNE ret_false
.196934		22 ce 62 19	jsl $1962ce	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.196938		90 18		bcc $196952	                    BCC ret_false                   ; If fail: return false
.19693a		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.19693d		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.196940		22 47 14 19	jsl $191447	                    JSL IDELAY
.196944		22 03 63 19	jsl $196303	                    JSL FDC_Sense_Int_Status
.196948		a5 06		lda $0306	                    LDA FDC_ST0
.19694a		29 d0		and #$d0	                    AND #%11010000
.19694c		d0 04		bne $196952	                    BNE ret_false
.19694e						ret_true
.19694e		28		plp		                    PLP
.19694f		2b		pld		                    PLD
.196950		38		sec		                    SEC
.196951		6b		rtl		                    RTL
.196952						ret_false
.196952		28		plp		                    PLP
.196953		2b		pld		                    PLD
.196954		18		clc		                    CLC
.196955		6b		rtl		                    RTL
.196956						FDC_WRITEVBR
.196956		8b		phb		                    PHB
.196957		0b		phd		                    PHD
.196958		08		php		                    PHP
.196959		48		pha		                PHA             ; begin setdbr macro
.19695a		08		php		                PHP
.19695b		e2 20		sep #$20	                SEP #$20        ; set A short
.19695d		a9 00		lda #$00	                LDA #0
.19695f		48		pha		                PHA
.196960		ab		plb		                PLB
.196961		28		plp		                PLP
.196962		68		pla		                PLA             ; end setdbr macro
.196963		48		pha		                PHA             ; begin setdp macro
.196964		08		php		                PHP
.196965		c2 20		rep #$20	                REP #$20        ; set A long
.196967		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19696a		5b		tcd		                TCD
.19696b		28		plp		                PLP
.19696c		68		pla		                PLA             ; end setdp macro
.19696d		22 85 67 19	jsl $196785	                    JSL FDC_MOUNT               ; Mount the floppy disk
.196971		c2 30		rep #$30	                REP #$30        ; set A&X long
.196973		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.196976		a2 00 00	ldx #$0000	                    LDX #0
.196979		9f 00 a3 18	sta $18a300,x	clr_loop            STA DOS_SECTOR,X
.19697d		e8		inx		                    INX
.19697e		e8		inx		                    INX
.19697f		e0 00 02	cpx #$0200	                    CPX #512
.196982		d0 f5		bne $196979	                    BNE clr_loop
.196984		e2 20		sep #$20	                SEP #$20        ; set A short
.196986		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.196989		bf 3e 6a 19	lda $196a3e,x	copy_loop           LDA FDC_VBR_BEGIN,X
.19698d		9f 00 a3 18	sta $18a300,x	                    STA DOS_SECTOR,X
.196991		e8		inx		                    INX
.196992		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.196995		d0 f2		bne $196989	                    BNE copy_loop
.196997		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.19699a		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.19699d		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.19699f		9f 00 a3 18	sta $18a300,x	                    STA DOS_SECTOR,X
.1969a3		f0 07		beq $1969ac	                    BEQ path_copy_done
.1969a5		e8		inx		                    INX
.1969a6		c8		iny		                    INY
.1969a7		c0 80 00	cpy #$0080	                    CPY #128
.1969aa		d0 f1		bne $19699d	                    BNE path_copy_loop
.1969ac						path_copy_done
.1969ac		c2 20		rep #$20	                REP #$20        ; set A long
.1969ae		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.1969b1		8f fe a4 18	sta $18a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.1969b5		c2 20		rep #$20	                REP #$20        ; set A long
.1969b7		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.1969ba		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.1969bc		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.1969bf		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.1969c1		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.1969c4		85 02		sta $0322	                    STA BIOS_LBA
.1969c6		85 04		sta $0324	                    STA BIOS_LBA+2
.1969c8		e2 20		sep #$20	                SEP #$20        ; set A short
.1969ca		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.1969cc		85 01		sta $0321	                    STA BIOS_DEV
.1969ce		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.1969d2		b0 09		bcs $1969dd	                    BCS ret_success
.1969d4		22 a3 62 19	jsl $1962a3	                    JSL FDC_Motor_Off
.1969d8		28		plp		                    PLP                         ; Return the failure
.1969d9		2b		pld		                    PLD
.1969da		ab		plb		                    PLB
.1969db		18		clc		                    CLC
.1969dc		6b		rtl		                    RTL
.1969dd		22 a3 62 19	jsl $1962a3	ret_success         JSL FDC_Motor_Off
.1969e1		e2 20		sep #$20	                SEP #$20        ; set A short
.1969e3		a9 00		lda #$00	                    LDA #0
.1969e5		85 00		sta $0320	                    STA BIOS_STATUS
.1969e7		28		plp		                    PLP
.1969e8		2b		pld		                    PLD
.1969e9		ab		plb		                    PLB
.1969ea		38		sec		                    SEC
.1969eb		6b		rtl		                    RTL
.1969ec						FDC_TIME_HANDLE
.1969ec		08		php		                    PHP
.1969ed		e2 20		sep #$20	                SEP #$20        ; set A short
.1969ef		af 4e a0 18	lda $18a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.1969f3		d0 06		bne $1969fb	                    BNE dec_motor                   ; If not zero: decrement the timer
.1969f5		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.1969f9		f0 28		beq $196a23	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.1969fb		af 4e a0 18	lda $18a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.1969ff		3a		dec a		                    DEC A
.196a00		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.196a04		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.196a06		d0 0b		bne $196a13	                    BNE chk_motor_end               ; No: check to see if we're a the end
.196a08		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.196a0c		3a		dec a		                    DEC A
.196a0d		8f 4f a0 18	sta $18a04f	                    STA @l FDC_MOTOR_TIMER+1
.196a11		80 10		bra $196a23	                    BRA sof_timeout                 ; And move on to the next timer
.196a13		af 4e a0 18	lda $18a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.196a17		d0 0a		bne $196a23	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.196a19		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1
.196a1d		d0 04		bne $196a23	                    BNE sof_timeout
.196a1f		22 a3 62 19	jsl $1962a3	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.196a23						sof_timeout
.196a23		e2 20		sep #$20	                SEP #$20        ; set A short
.196a25		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.196a29		f0 11		beq $196a3c	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.196a2b		3a		dec a		                    DEC A                           ; Count down one tick
.196a2c		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.196a30		d0 0a		bne $196a3c	                    BNE sof_int_done                ; If not 0, we're done
.196a32		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.196a36		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.196a38		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.196a3c		28		plp		sof_int_done        PLP
.196a3d		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.196a3e						FDC_VBR_BEGIN
>196a3e		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>196a41		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>196a49		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>196a4b		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>196a4c		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>196a4e		02				num_fat             .byte 2                 ; Number of FATs
>196a4f		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>196a51		40 0b				total_sectors       .word 2880              ; Total sectors
>196a53		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>196a54		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>196a56		12 00				sec_per_track       .word 18                ; Sectors per track
>196a58		02 00				num_head            .word 2                 ; Number of heads
>196a5a		00 00 00 00			ignore2             .dword 0
>196a5e		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>196a62		00 00				ignore3             .word 0
>196a64		29				boot_signature      .byte $29
>196a65		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>196a69		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>196a71		20 20 20
>196a74		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.196a7c		80 40		bra $196abe	                    BRA vbr_start
>196a7e						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.196abe						vbr_start
.196abe		c2 20		rep #$20	                REP #$20        ; set A long
.196ac0		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.196ac3		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.196ac7		a9 18 00	lda #$0018	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.196aca		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.196ace		22 24 11 00	jsl $001124	                    JSL F_RUN               ; And try to execute the binary file
.196ad2		b0 0c		bcs $196ae0	                    BCS lock                ; If it returned success... lock up... I guess?
.196ad4						error
.196ad4		e2 20		sep #$20	                SEP #$20        ; set A short
.196ad6		4b		phk		                    PHK                     ; Otherwise, print an error message
.196ad7		ab		plb		                    PLB
.196ad8		62 08 00	per $196ae3	                    PER message
.196adb		fa		plx		                    PLX
.196adc		22 1c 10 00	jsl $00101c	                    JSL PUTS
.196ae0		ea		nop		lock                NOP                     ; And lock up
.196ae1		80 fd		bra $196ae0	                    BRA lock
>196ae3		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>196aeb		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>196afb		65 20 62 69 6e 61 72 79 2e 0d 00
.196b06						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.196b06						IDE_TEST
.196b06		08		php		                PHP
.196b07		c2 20		rep #$20	                REP #$20        ; set A long
.196b09		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.196b0c		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.196b10		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.196b13		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.196b17		22 3a 6c 19	jsl $196c3a	                JSL IDE_IDENTIFY
.196b1b		b0 03		bcs $196b20	                BCS id_ok
.196b1d		82 ab 00	brl $196bcb	                BRL done
.196b20						id_ok
.196b20		c2 10		rep #$10	                REP #$10        ; set X long
.196b22		e2 20		sep #$20	                SEP #$20        ; set A short
.196b24		a0 28 00	ldy #$0028	                LDY #40
.196b27		a2 36 00	ldx #$0036	                LDX #27*2
.196b2a		bf 01 a3 18	lda $18a301,x	pr_model        LDA DOS_SECTOR+1,X
.196b2e		22 18 10 00	jsl $001018	                JSL PUTC
.196b32		bf 00 a3 18	lda $18a300,x	                LDA DOS_SECTOR,X
.196b36		22 18 10 00	jsl $001018	                JSL PUTC
.196b3a		e8		inx		                INX
.196b3b		e8		inx		                INX
.196b3c		88		dey		                DEY
.196b3d		88		dey		                DEY
.196b3e		d0 ea		bne $196b2a	                BNE pr_model
.196b40		c2 10		rep #$10	                REP #$10        ; set X long
.196b42		e2 20		sep #$20	                SEP #$20        ; set A short
.196b44		a0 14 00	ldy #$0014	                LDY #20
.196b47		a2 14 00	ldx #$0014	                LDX #10*2
.196b4a		bf 01 a3 18	lda $18a301,x	pr_serial       LDA DOS_SECTOR+1,X
.196b4e		22 18 10 00	jsl $001018	                JSL PUTC
.196b52		bf 00 a3 18	lda $18a300,x	                LDA DOS_SECTOR,X
.196b56		22 18 10 00	jsl $001018	                JSL PUTC
.196b5a		e8		inx		                INX
.196b5b		e8		inx		                INX
.196b5c		88		dey		                DEY
.196b5d		88		dey		                DEY
.196b5e		d0 ea		bne $196b4a	                BNE pr_serial
.196b60		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196b64		c2 30		rep #$30	                REP #$30        ; set A&X long
.196b66		a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.196b69		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.196b6d		a9 00 00	lda #$0000	                LDA #0
.196b70		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.196b74		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.196b77		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.196b7b		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.196b7e		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.196b82		a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.196b85		a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.196b88		9f 00 a3 18	sta $18a300,x	init_loop       STA DOS_SECTOR,X
.196b8c		e8		inx		                INX
.196b8d		e8		inx		                INX
.196b8e		e0 00 02	cpx #$0200	                CPX #512
.196b91		d0 f5		bne $196b88	                BNE init_loop
.196b93		22 53 6d 19	jsl $196d53	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.196b97		b0 06		bcs $196b9f	                BCS read_sect1
.196b99		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196b9d		80 2c		bra $196bcb	                BRA done
.196b9f		a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.196ba2		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.196ba6		a9 00 00	lda #$0000	                LDA #0
.196ba9		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.196bad		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.196bb0		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.196bb4		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.196bb7		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.196bbb		22 c8 6c 19	jsl $196cc8	                JSL IDE_GETBLOCK        ; Attempt to read the block
.196bbf		b0 06		bcs $196bc7	                BCS all_ok
.196bc1		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196bc5		80 04		bra $196bcb	                BRA done
.196bc7						all_ok
.196bc7		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196bcb		28		plp		done            PLP
.196bcc		6b		rtl		                RTL
.196bcd						IDE_INIT
.196bcd		e2 20		sep #$20	                SEP #$20        ; set A short
.196bcf		a9 00		lda #$00	              LDA #$00
.196bd1		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.196bd5		20 f6 6b	jsr $196bf6	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.196bd8		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.196bda		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.196bde		a9 01		lda #$01	              LDA #$01
.196be0		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.196be4		a9 00		lda #$00	              LDA #$00
.196be6		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.196bea		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.196bee		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.196bf2		20 14 6c	jsr $196c14	              JSR IDE_DRV_READY_NOTBUSY
.196bf5		6b		rtl		              RTL
.196bf6						IDE_DRIVE_BSY
.196bf6		08		php		                PHP
.196bf7		e2 20		sep #$20	                SEP #$20        ; set A short
.196bf9		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.196bfd		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.196bff		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.196c01		f0 f6		beq $196bf9	                BEQ loop
.196c03		28		plp		                PLP
.196c04		60		rts		                RTS
.196c05						IDE_DRIVE_READY
.196c05		08		php		                PHP
.196c06		e2 20		sep #$20	                SEP #$20        ; set A short
.196c08		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.196c0c		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.196c0e		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.196c10		d0 f6		bne $196c08	                BNE loop
.196c12		28		plp		                PLP
.196c13		60		rts		                RTS
.196c14						IDE_DRV_READY_NOTBUSY
.196c14		08		php		                PHP
.196c15		e2 20		sep #$20	                SEP #$20        ; set A short
.196c17		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.196c1b		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.196c1d		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.196c1f		d0 f6		bne $196c17	                BNE loop                            ; No: keep waiting
.196c21		28		plp		ret_success     PLP                                 ; Return success
.196c22		38		sec		                SEC
.196c23		60		rts		                RTS
.196c24		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.196c28		28		plp		                PLP                                 ; Return failure
.196c29		18		clc		                CLC
.196c2a		60		rts		                RTS
.196c2b						IDE_NOT_DRQ
.196c2b		08		php		                PHP
.196c2c		e2 20		sep #$20	                SEP #$20        ; set A short
.196c2e		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.196c32		29 08		and #$08	                AND #IDE_STAT_DRQ
.196c34		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.196c36		d0 f6		bne $196c2e	                BNE loop                ; No: keep waiting
.196c38		28		plp		                PLP
.196c39		60		rts		                RTS
.196c3a						IDE_IDENTIFY
.196c3a		5a		phy		                PHY
.196c3b		8b		phb		                PHB
.196c3c		0b		phd		                PHD
.196c3d		08		php		                PHP
.196c3e		48		pha		                PHA             ; begin setdbr macro
.196c3f		08		php		                PHP
.196c40		e2 20		sep #$20	                SEP #$20        ; set A short
.196c42		a9 00		lda #$00	                LDA #0
.196c44		48		pha		                PHA
.196c45		ab		plb		                PLB
.196c46		28		plp		                PLP
.196c47		68		pla		                PLA             ; end setdbr macro
.196c48		48		pha		                PHA             ; begin setdp macro
.196c49		08		php		                PHP
.196c4a		c2 20		rep #$20	                REP #$20        ; set A long
.196c4c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.196c4f		5b		tcd		                TCD
.196c50		28		plp		                PLP
.196c51		68		pla		                PLA             ; end setdp macro
.196c52		e2 20		sep #$20	                SEP #$20        ; set A short
.196c54		20 14 6c	jsr $196c14	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.196c57		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.196c59		29 07		and #$07	                AND #$07
.196c5b		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.196c5d		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.196c61		20 14 6c	jsr $196c14	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.196c64		e2 20		sep #$20	                SEP #$20        ; set A short
.196c66		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.196c68		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.196c6c		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196c70		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196c74		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.196c78		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.196c7a		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.196c7e		f0 29		beq $196ca9	                BEQ no_media                    ; If 0: there is no drive
.196c80		20 f6 6b	jsr $196bf6	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.196c83		20 14 6c	jsr $196c14	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196c86		90 2d		bcc $196cb5	                BCC ret_failure                 ; If an error occurred, return it
.196c88		c2 30		rep #$30	                REP #$30        ; set A&X long
.196c8a		a0 00 00	ldy #$0000	                LDY #0
.196c8d		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.196c91		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.196c93		c8		iny		                INY                             ; Move to the next position
.196c94		c8		iny		                INY
.196c95		c0 00 02	cpy #$0200	                CPY #512
.196c98		d0 f3		bne $196c8d	                BNE read_loop
.196c9a						ret_success
.196c9a		e2 20		sep #$20	                SEP #$20        ; set A short
.196c9c		a9 00		lda #$00	                LDA #0
.196c9e		85 00		sta $0320	                STA BIOS_STATUS
.196ca0		8d 06 03	sta $0306	                STA @w FDC_ST0
.196ca3		28		plp		                PLP                             ; Return success
.196ca4		2b		pld		                PLD
.196ca5		ab		plb		                PLB
.196ca6		7a		ply		                PLY
.196ca7		38		sec		                SEC
.196ca8		6b		rtl		                RTL
.196ca9						no_media
.196ca9		e2 20		sep #$20	                SEP #$20        ; set A short
.196cab		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.196cad		80 0a		bra $196cb9	                BRA pass_failure
.196caf						not_ata
.196caf		e2 20		sep #$20	                SEP #$20        ; set A short
.196cb1		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.196cb3		80 04		bra $196cb9	                BRA pass_failure
.196cb5						ret_failure
.196cb5		e2 20		sep #$20	                SEP #$20        ; set A short
.196cb7		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.196cb9		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.196cbb		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196cbf		8d 06 03	sta $0306	                STA @w FDC_ST0
.196cc2		28		plp		                PLP
.196cc3		2b		pld		                PLD
.196cc4		ab		plb		                PLB
.196cc5		7a		ply		                PLY
.196cc6		18		clc		                CLC
.196cc7		6b		rtl		                RTL
.196cc8						IDE_GETBLOCK
.196cc8		5a		phy		                PHY
.196cc9		8b		phb		                PHB
.196cca		0b		phd		                PHD
.196ccb		08		php		                PHP
.196ccc		48		pha		                PHA             ; begin setdbr macro
.196ccd		08		php		                PHP
.196cce		e2 20		sep #$20	                SEP #$20        ; set A short
.196cd0		a9 00		lda #$00	                LDA #0
.196cd2		48		pha		                PHA
.196cd3		ab		plb		                PLB
.196cd4		28		plp		                PLP
.196cd5		68		pla		                PLA             ; end setdbr macro
.196cd6		48		pha		                PHA             ; begin setdp macro
.196cd7		08		php		                PHP
.196cd8		c2 20		rep #$20	                REP #$20        ; set A long
.196cda		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.196cdd		5b		tcd		                TCD
.196cde		28		plp		                PLP
.196cdf		68		pla		                PLA             ; end setdp macro
.196ce0		e2 20		sep #$20	                SEP #$20        ; set A short
.196ce2		20 14 6c	jsr $196c14	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.196ce5		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.196ce7		29 07		and #$07	                AND #$07
.196ce9		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.196ceb		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.196cef		20 14 6c	jsr $196c14	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.196cf2		e2 20		sep #$20	                SEP #$20        ; set A short
.196cf4		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.196cf6		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.196cfa		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.196cfc		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196d00		a5 03		lda $0323	                LDA BIOS_LBA+1
.196d02		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196d06		a5 04		lda $0324	                LDA BIOS_LBA+2
.196d08		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.196d0c		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.196d0e		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.196d12		ea		nop		                NOP                             ; Wait about 500ns
.196d13		ea		nop		                NOP
.196d14		ea		nop		                NOP
.196d15		ea		nop		                NOP
.196d16		20 14 6c	jsr $196c14	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196d19		90 25		bcc $196d40	                BCC ret_failure                 ; If an error occurred, return it
.196d1b		a0 00 00	ldy #$0000	                LDY #0
.196d1e		c2 20		rep #$20	                REP #$20        ; set A long
.196d20		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.196d24		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.196d26		c8		iny		                INY                             ; Move to the next position
.196d27		c8		iny		                INY
.196d28		c0 00 02	cpy #$0200	                CPY #512
.196d2b		d0 f3		bne $196d20	                BNE read_loop
.196d2d		ea		nop		                NOP                             ; Wait about 500ns
.196d2e		ea		nop		                NOP
.196d2f		ea		nop		                NOP
.196d30		ea		nop		                NOP
.196d31						ret_success
.196d31		e2 20		sep #$20	                SEP #$20        ; set A short
.196d33		a9 00		lda #$00	                LDA #0
.196d35		85 00		sta $0320	                STA BIOS_STATUS
.196d37		8d 06 03	sta $0306	                STA @w FDC_ST0
.196d3a		28		plp		                PLP                             ; Return success
.196d3b		2b		pld		                PLD
.196d3c		ab		plb		                PLB
.196d3d		7a		ply		                PLY
.196d3e		38		sec		                SEC
.196d3f		6b		rtl		                RTL
.196d40						ret_failure
.196d40		e2 20		sep #$20	                SEP #$20        ; set A short
.196d42		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196d46		8d 06 03	sta $0306	                STA @w FDC_ST0
.196d49		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.196d4b		85 00		sta $0320	                STA BIOS_STATUS
.196d4d		28		plp		                PLP
.196d4e		2b		pld		                PLD
.196d4f		ab		plb		                PLB
.196d50		7a		ply		                PLY
.196d51		18		clc		                CLC
.196d52		6b		rtl		                RTL
.196d53						IDE_PUTBLOCK
.196d53		5a		phy		                PHY
.196d54		8b		phb		                PHB
.196d55		0b		phd		                PHD
.196d56		08		php		                PHP
.196d57		48		pha		                PHA             ; begin setdbr macro
.196d58		08		php		                PHP
.196d59		e2 20		sep #$20	                SEP #$20        ; set A short
.196d5b		a9 00		lda #$00	                LDA #0
.196d5d		48		pha		                PHA
.196d5e		ab		plb		                PLB
.196d5f		28		plp		                PLP
.196d60		68		pla		                PLA             ; end setdbr macro
.196d61		48		pha		                PHA             ; begin setdp macro
.196d62		08		php		                PHP
.196d63		c2 20		rep #$20	                REP #$20        ; set A long
.196d65		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.196d68		5b		tcd		                TCD
.196d69		28		plp		                PLP
.196d6a		68		pla		                PLA             ; end setdp macro
.196d6b		e2 20		sep #$20	                SEP #$20        ; set A short
.196d6d		20 14 6c	jsr $196c14	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.196d70		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.196d72		29 07		and #$07	                AND #$07
.196d74		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.196d76		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.196d7a		20 14 6c	jsr $196c14	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.196d7d		e2 20		sep #$20	                SEP #$20        ; set A short
.196d7f		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.196d81		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.196d85		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.196d87		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196d8b		a5 03		lda $0323	                LDA BIOS_LBA+1
.196d8d		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196d91		a5 04		lda $0324	                LDA BIOS_LBA+2
.196d93		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.196d97		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.196d99		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.196d9d		ea		nop		                NOP                             ; Wait about 500ns
.196d9e		ea		nop		                NOP
.196d9f		ea		nop		                NOP
.196da0		ea		nop		                NOP
.196da1		20 14 6c	jsr $196c14	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196da4		90 37		bcc $196ddd	                BCC ret_failure                 ; If an error occurred, return it
.196da6		c2 30		rep #$30	                REP #$30        ; set A&X long
.196da8		a0 00 00	ldy #$0000	                LDY #0
.196dab		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.196dad		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.196db1		c8		iny		                INY                             ; Move to the next position
.196db2		c8		iny		                INY
.196db3		c0 00 02	cpy #$0200	                CPY #512
.196db6		d0 f3		bne $196dab	                BNE read_loop
.196db8		ea		nop		                NOP                             ; Wait about 500ns
.196db9		ea		nop		                NOP
.196dba		ea		nop		                NOP
.196dbb		ea		nop		                NOP
.196dbc		20 14 6c	jsr $196c14	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196dbf		90 1c		bcc $196ddd	                BCC ret_failure                 ; If an error occurred, return it
.196dc1		ea		nop		                NOP                             ; Wait about 500ns
.196dc2		ea		nop		                NOP
.196dc3		ea		nop		                NOP
.196dc4		ea		nop		                NOP
.196dc5		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.196dc9		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.196dcc		d0 0f		bne $196ddd	                BNE ret_failure                 ; If error: return failure
.196dce						ret_success
.196dce		e2 20		sep #$20	                SEP #$20        ; set A short
.196dd0		a9 00		lda #$00	                LDA #0
.196dd2		85 00		sta $0320	                STA BIOS_STATUS
.196dd4		8d 06 03	sta $0306	                STA @w FDC_ST0
.196dd7		28		plp		                PLP                             ; Return success
.196dd8		2b		pld		                PLD
.196dd9		ab		plb		                PLB
.196dda		7a		ply		                PLY
.196ddb		38		sec		                SEC
.196ddc		6b		rtl		                RTL
.196ddd		ea		nop		ret_failure     NOP                             ; Wait about 500ns
.196dde		ea		nop		                NOP
.196ddf		ea		nop		                NOP
.196de0		ea		nop		                NOP
.196de1		e2 20		sep #$20	                SEP #$20        ; set A short
.196de3		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196de7		80 08		bra $196df1	                BRA save_error
.196de9		ea		nop		                NOP
.196dea		ea		nop		                NOP
.196deb		ea		nop		                NOP
.196dec		ea		nop		                NOP
.196ded		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196df1		8d 06 03	sta $0306	save_error      STA @w FDC_ST0
.196df4		a9 83		lda #$83	                LDA #BIOS_ERR_WRITE
.196df6		85 00		sta $0320	                STA BIOS_STATUS
.196df8		28		plp		                PLP
.196df9		2b		pld		                PLD
.196dfa		ab		plb		                PLB
.196dfb		7a		ply		                PLY
.196dfc		18		clc		                CLC
.196dfd		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/Ethernet_Init_library.asm

.196dfe						SIMPLE_INIT_ETHERNET_CTRL
.196dfe						WaitforittobeReady:
.196dfe		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.196e02		29 01 00	and #$0001	                AND #$0001
.196e05		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.196e08		d0 f4		bne $196dfe	                BNE WaitforittobeReady
.196e0a		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.196e0e		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.196e12		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.196e16		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.196e1a		a9 00 00	lda #$0000	                LDA #$0000
.196e1d		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.196e21		a9 00 70	lda #$7000	                LDA #$7000
.196e24		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.196e28		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.196e2b		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.196e2f		a9 0b 00	lda #$000b	                LDA #$000B
.196e32		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.196e36		a9 00 00	lda #$0000	                LDA #$0000
.196e39		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.196e3d		20 71 6e	jsr $196e71	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.196e40		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.196e43		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.196e47		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.196e4a		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.196e4e		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.196e51		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.196e55		20 71 6e	jsr $196e71	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.196e58		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.196e5b		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.196e5f		a9 0c 00	lda #$000c	                LDA #$000C
.196e62		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.196e66		a9 04 00	lda #$0004	                LDA #$0004
.196e69		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.196e6d		20 71 6e	jsr $196e71	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.196e70		6b		rtl		                RTL
.196e71						MAC_ACCESS_WAIT_FOR_COMPLETION
.196e71		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.196e74		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.196e78						WaitForCompletion:
.196e78		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.196e7c		29 00 80	and #$8000	                AND #$8000
.196e7f		c9 00 80	cmp #$8000	                CMP #$8000
.196e82		f0 f4		beq $196e78	                BEQ WaitForCompletion
.196e84		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/EXP-C200_EVID_Library.asm

=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.196e85						EVID_IPRINT
.196e85		22 8e 6e 19	jsl $196e8e	                JSL EVID_IPUTS
.196e89		22 00 70 19	jsl $197000	                JSL EVID_IPRINTCR
.196e8d		6b		rtl		                RTL
.196e8e						EVID_IPUTS
.196e8e		48		pha		                PHA
.196e8f		08		php		                PHP
.196e90		e2 20		sep #$20	                SEP #$20        ; set A short
.196e92		c2 10		rep #$10	                REP #$10        ; set X long
.196e94		bd 00 00	lda $0000,x	iputs1          LDA $0,b,x      ; read from the string
.196e97		f0 08		beq $196ea1	                BEQ iputs_done
.196e99		22 a5 6e 19	jsl $196ea5	iputs2          JSL EVID_IPUTC
.196e9d		e8		inx		iputs3          INX
.196e9e		4c 94 6e	jmp $196e94	                JMP iputs1
.196ea1		e8		inx		iputs_done      INX
.196ea2		28		plp		                PLP
.196ea3		68		pla		                PLA
.196ea4		6b		rtl		                RTL
.196ea5						EVID_IPUTC
.196ea5		da		phx		                PHX
.196ea6		5a		phy		                PHY
.196ea7		0b		phd		                PHD
.196ea8		8b		phb		                PHB
.196ea9		08		php		                PHP                 ; stash the flags (we'll be changing M)
.196eaa		48		pha		                PHA             ; begin setdp macro
.196eab		08		php		                PHP
.196eac		c2 20		rep #$20	                REP #$20        ; set A long
.196eae		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.196eb1		5b		tcd		                TCD
.196eb2		28		plp		                PLP
.196eb3		68		pla		                PLA             ; end setdp macro
.196eb4		48		pha		                PHA             ; begin setdbr macro
.196eb5		08		php		                PHP
.196eb6		e2 20		sep #$20	                SEP #$20        ; set A short
.196eb8		a9 00		lda #$00	                LDA #0
.196eba		48		pha		                PHA
.196ebb		ab		plb		                PLB
.196ebc		28		plp		                PLP
.196ebd		68		pla		                PLA             ; end setdbr macro
.196ebe		e2 20		sep #$20	                SEP #$20        ; set A short
.196ec0		c2 10		rep #$10	                REP #$10        ; set X long
.196ec2		c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.196ec4		f0 69		beq $196f2f	                BEQ go_down
.196ec6		c9 20		cmp #$20	                CMP #$20
.196ec8		90 19		bcc $196ee3	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.196eca		c9 7f		cmp #$7f	                CMP #$7F
.196ecc		f0 45		beq $196f13	                BEQ do_del
.196ece		b0 02		bcs $196ed2	                BCS check_A0        ; [$20..$7E]: print it
.196ed0		80 31		bra $196f03	                BRA printc
.196ed2		c9 a0		cmp #$a0	check_A0        CMP #$A0
.196ed4		90 02		bcc $196ed8	                BCC check_ctrl1
.196ed6		80 2b		bra $196f03	                BRA printc          ; [$A0..$FF]: print it
.196ed8		c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.196eda		f0 53		beq $196f2f	                BEQ go_down         ; ... move the cursor down one row
.196edc		c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.196ede		f0 61		beq $196f41	                BEQ go_left         ; ... move the cursor left one column
.196ee0		4c 0d 6f	jmp $196f0d	                JMP done
.196ee3		c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.196ee5		f0 69		beq $196f50	                BEQ do_TAB          ; ... move to the next TAB stop
.196ee7		c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.196ee9		f0 34		beq $196f1f	                BEQ backspace       ; ... move the cursor back and replace with a space
.196eeb		c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.196eed		f0 3a		beq $196f29	                BEQ do_cr           ; ... move cursor down and to the first column
.196eef		c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.196ef1		f0 42		beq $196f35	                BEQ go_up           ; ... move the cursor up one row
.196ef3		c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.196ef5		f0 44		beq $196f3b	                BEQ go_right        ; ... move the cursor right one column
.196ef7		c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.196ef9		f0 1e		beq $196f19	                BEQ do_ins          ; ... insert a space
.196efb		c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.196efd		f0 48		beq $196f47	                BEQ go_sol          ; ... move the cursor to the start of the line
.196eff		c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.196f01		f0 74		beq $196f77	                BEQ go_eol          ; ... move the cursor to the end of the line
.196f03		87 6b		sta [$6b]	printc          STA [EVID_CURSORPOS]     ; Save the character on the screen
.196f05		a5 72		lda $72		                LDA EVID_CURCOLOR        ; Set the color based on CURCOLOR
.196f07		87 76		sta [$76]	                STA [EVID_COLORPOS]
.196f09		22 3e 70 19	jsl $19703e	                JSL EVID_ICSRRIGHT       ; And advance the cursor
.196f0d		28		plp		done            PLP
.196f0e		ab		plb		                PLB
.196f0f		2b		pld		                PLD
.196f10		7a		ply		                PLY
.196f11		fa		plx		                PLX
.196f12		6b		rtl		                RTL
.196f13		22 a4 6f 19	jsl $196fa4	do_del          JSL EVID_SCRSHIFTLL      ; Shift the current line left one space into the cursor
.196f17		80 f4		bra $196f0d	                BRA done
.196f19		22 c8 6f 19	jsl $196fc8	do_ins          JSL EVID_SCRSHIFTLR      ; Shift the current line right one space from the cursor
.196f1d		80 ee		bra $196f0d	                BRA done
.196f1f		22 71 70 19	jsl $197071	backspace       JSL EVID_ICSRLEFT
.196f23		22 a4 6f 19	jsl $196fa4	                JSL EVID_SCRSHIFTLL      ; Shift the current line left one space into the cursor
.196f27		80 e4		bra $196f0d	                BRA done
.196f29		22 00 70 19	jsl $197000	do_cr           JSL EVID_IPRINTCR        ; Move the cursor to the beginning of the next line
.196f2d		80 de		bra $196f0d	                BRA done
.196f2f		22 bd 70 19	jsl $1970bd	go_down         JSL EVID_ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.196f33		80 d8		bra $196f0d	                BRA done
.196f35		22 97 70 19	jsl $197097	go_up           JSL EVID_ICSRUP          ; Move the cursor up one line
.196f39		80 d2		bra $196f0d	                BRA done
.196f3b		22 3e 70 19	jsl $19703e	go_right        JSL EVID_ICSRRIGHT       ; Move the cursor right one column
.196f3f		80 cc		bra $196f0d	                BRA done
.196f41		22 71 70 19	jsl $197071	go_left         JSL EVID_ICSRLEFT        ; Move the cursor left one column
.196f45		80 c6		bra $196f0d	                BRA done
.196f47						go_sol
.196f47		c2 20		rep #$20	                REP #$20        ; set A long
.196f49		a2 00 00	ldx #$0000	                LDX #0
.196f4c		a4 70		ldy $70		                LDY EVID_CURSORY
.196f4e		80 21		bra $196f71	                BRA do_locate
.196f50						do_TAB
.196f50		c2 20		rep #$20	                REP #$20        ; set A long
.196f52		a5 6e		lda $6e		                LDA EVID_CURSORX         ; Get the current column
.196f54		29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.196f57		18		clc		                CLC
.196f58		69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.196f5b		aa		tax		                TAX
.196f5c		a4 70		ldy $70		                LDY EVID_CURSORY
.196f5e		e2 20		sep #$20	                SEP #$20        ; set A short
.196f60		e4 63		cpx $63		set_xy          CPX EVID_COLS_VISIBLE    ; Check if we're still on screen horizontally
.196f62		90 04		bcc $196f68	                BCC check_row       ; Yes: check the row
.196f64		a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.196f67		c8		iny		                INY                 ; ... and the next row
.196f68		c4 67		cpy $67		check_row       CPY EVID_LINES_VISIBLE   ; Check if we're still on the screen vertically
.196f6a		90 05		bcc $196f71	                BCC do_locate       ; Yes: reposition the cursor
.196f6c		22 2e 71 19	jsl $19712e	                JSL EVID_ISCROLLUP       ; No: scroll the screen
.196f70		88		dey		                DEY                 ; And set the row to the last one
.196f71		22 e2 70 19	jsl $1970e2	do_locate       JSL EVID_ILOCATE         ; Set the cursor position
.196f75		80 96		bra $196f0d	                BRA done
.196f77		a6 63		ldx $63		go_eol          LDX EVID_COLS_VISIBLE    ; Move the cursor to the right most column
.196f79		ca		dex		                DEX
.196f7a		a4 70		ldy $70		                LDY EVID_CURSORY
.196f7c		22 e2 70 19	jsl $1970e2	                JSL EVID_ILOCATE
.196f80		e2 20		sep #$20	                SEP #$20        ; set A short
.196f82		a7 6b		lda [$6b]	eol_loop        LDA [EVID_CURSORPOS]     ; Get the character under the cursor
.196f84		c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.196f86		d0 0b		bne $196f93	                BNE eol_done        ; No: exit the loop
.196f88		22 71 70 19	jsl $197071	                JSL EVID_ICSRLEFT        ; Yes: move to the left
.196f8c		a6 6e		ldx $6e		                LDX EVID_CURSORX         ; Are we at column 0?
.196f8e		d0 f2		bne $196f82	                BNE eol_loop        ; No: try again
.196f90		82 7a ff	brl $196f0d	                BRL done            ; Yes: we're done
.196f93		a6 6e		ldx $6e		eol_done        LDX EVID_CURSORX         ; Check the column
.196f95		e8		inx		                INX
.196f96		e4 63		cpx $63		                CPX EVID_COLS_VISIBLE    ; Is it the right most?
.196f98		d0 03		bne $196f9d	                BNE eol_right
.196f9a		82 70 ff	brl $196f0d	                BRL done            ; Yes: we're done
.196f9d		22 3e 70 19	jsl $19703e	eol_right       JSL EVID_ICSRRIGHT       ; No: move right one column
.196fa1		82 69 ff	brl $196f0d	                BRL done
.196fa4						EVID_SCRSHIFTLL
.196fa4		da		phx		                PHX
.196fa5		5a		phy		                PHY
.196fa6		48		pha		                PHA
.196fa7		0b		phd		                PHD
.196fa8		08		php		                PHP
.196fa9		48		pha		                PHA             ; begin setdp macro
.196faa		08		php		                PHP
.196fab		c2 20		rep #$20	                REP #$20        ; set A long
.196fad		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.196fb0		5b		tcd		                TCD
.196fb1		28		plp		                PLP
.196fb2		68		pla		                PLA             ; end setdp macro
.196fb3		c2 30		rep #$30	                REP #$30        ; set A&X long
.196fb5		a5 6b		lda $6b		                LDA EVID_CURSORPOS       ; Get the current cursor position
.196fb7		a8		tay		                TAY                 ; Set it as the destination
.196fb8		aa		tax		                TAX
.196fb9		e8		inx		                INX                 ; And set the next cell as the source
.196fba		18		clc		                CLC                 ; Calculate the length of the block to move
.196fbb		a5 63		lda $63		                LDA EVID_COLS_VISIBLE    ; as columns visible - X
.196fbd		e5 6e		sbc $6e		                SBC EVID_CURSORX
.196fbf		54 ae ae	mvn $ae,$ae	                MVN $AE, $AE        ; And move the block
.196fc2		28		plp		                PLP
.196fc3		2b		pld		                PLD
.196fc4		68		pla		                PLA
.196fc5		7a		ply		                PLY
.196fc6		fa		plx		                PLX
.196fc7		6b		rtl		                RTL
.196fc8						EVID_SCRSHIFTLR
.196fc8		da		phx		                PHX
.196fc9		48		pha		                PHA
.196fca		0b		phd		                PHD
.196fcb		08		php		                PHP
.196fcc		48		pha		                PHA             ; begin setdp macro
.196fcd		08		php		                PHP
.196fce		c2 20		rep #$20	                REP #$20        ; set A long
.196fd0		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.196fd3		5b		tcd		                TCD
.196fd4		28		plp		                PLP
.196fd5		68		pla		                PLA             ; end setdp macro
.196fd6		c2 30		rep #$30	                REP #$30        ; set A&X long
.196fd8		a5 6e		lda $6e		                LDA EVID_CURSORX         ; What column are we on
.196fda		1a		inc a		                INC A
.196fdb		c5 63		cmp $63		                CMP EVID_COLS_VISIBLE    ; >= the # visible?
.196fdd		b0 1b		bcs $196ffa	                BGE done            ; Yes: just skip the whole thing
.196fdf		38		sec		                SEC                 ; Calculate the length of the block to move
.196fe0		a5 63		lda $63		                LDA EVID_COLS_VISIBLE
.196fe2		e5 6e		sbc $6e		                SBC EVID_CURSORX
.196fe4		1a		inc a		                INC A
.196fe5		18		clc		                CLC
.196fe6		65 6b		adc $6b		                ADC EVID_CURSORPOS       ; Add the current cursor position
.196fe8		3a		dec a		                DEC A
.196fe9		a8		tay		                TAY                 ; Make it the destination
.196fea		3a		dec a		                DEC A               ; Move to the previous column
.196feb		aa		tax		                TAX                 ; Make it the source
.196fec		38		sec		                SEC                 ; Calculate the length of the block to move
.196fed		a5 63		lda $63		                LDA EVID_COLS_VISIBLE    ; as columns visible - X
.196fef		e5 6e		sbc $6e		                SBC EVID_CURSORX
.196ff1		44 ae ae	mvp $ae,$ae	                MVP $AE, $AE        ; And move the block
.196ff4		e2 20		sep #$20	                SEP #$20        ; set A short
.196ff6		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.196ff8		87 6b		sta [$6b]	                STA [EVID_CURSORPOS]
.196ffa		28		plp		done            PLP
.196ffb		2b		pld		                PLD
.196ffc		68		pla		                PLA
.196ffd		fa		plx		                PLX
.196ffe		6b		rtl		                RTL
.196fff						EVID_IPUTB
.196fff		6b		rtl		                RTL
.197000						EVID_IPRINTCR
.197000		da		phx		                PHX
.197001		5a		phy		                PHY
.197002		8b		phb		                PHB
.197003		0b		phd		                PHD
.197004		08		php		                PHP
.197005		48		pha		                PHA             ; begin setdbr macro
.197006		08		php		                PHP
.197007		e2 20		sep #$20	                SEP #$20        ; set A short
.197009		a9 00		lda #$00	                LDA #0
.19700b		48		pha		                PHA
.19700c		ab		plb		                PLB
.19700d		28		plp		                PLP
.19700e		68		pla		                PLA             ; end setdbr macro
.19700f		48		pha		                PHA             ; begin setdp macro
.197010		08		php		                PHP
.197011		c2 20		rep #$20	                REP #$20        ; set A long
.197013		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.197016		5b		tcd		                TCD
.197017		28		plp		                PLP
.197018		68		pla		                PLA             ; end setdp macro
.197019		e2 20		sep #$20	                SEP #$20        ; set A short
.19701b		c2 10		rep #$10	                REP #$10        ; set X long
.19701d		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.197020		a4 70		ldy $70		                LDY EVID_CURSORY
.197022		c8		iny		                INY
.197023		22 e2 70 19	jsl $1970e2	                JSL EVID_ILOCATE
.197027		28		plp		done            PLP
.197028		2b		pld		                PLD
.197029		ab		plb		                PLB
.19702a		7a		ply		                PLY
.19702b		fa		plx		                PLX
.19702c		6b		rtl		                RTL
.19702d						EVID_ICSRHOME
.19702d		da		phx		                PHX
.19702e		5a		phy		                PHY
.19702f		08		php		                PHP
.197030		a2 00 00	ldx #$0000	                LDX #0
.197033		a0 00 00	ldy #$0000	                LDY #0
.197036		22 e2 70 19	jsl $1970e2	                JSL EVID_ILOCATE
.19703a		28		plp		                PLP
.19703b		7a		ply		                PLY
.19703c		fa		plx		                PLX
.19703d		6b		rtl		                RTL
.19703e						EVID_ICSRRIGHT
.19703e		da		phx		                PHX
.19703f		5a		phy		                PHY
.197040		48		pha		                PHA
.197041		0b		phd		                PHD
.197042		08		php		                PHP
.197043		c2 20		rep #$20	                REP #$20        ; set A long
.197045		c2 10		rep #$10	                REP #$10        ; set X long
.197047		48		pha		                PHA             ; begin setdp macro
.197048		08		php		                PHP
.197049		c2 20		rep #$20	                REP #$20        ; set A long
.19704b		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.19704e		5b		tcd		                TCD
.19704f		28		plp		                PLP
.197050		68		pla		                PLA             ; end setdp macro
.197051		a6 6e		ldx $6e		                LDX EVID_CURSORX           ; Get the new column
.197053		e8		inx		                INX
.197054		a4 70		ldy $70		                LDY EVID_CURSORY           ; Get the current row
.197056		e4 63		cpx $63		                CPX EVID_COLS_VISIBLE      ; Are we off screen?
.197058		90 0d		bcc $197067	                BCC icsrright_nowrap  ; No: just set the position
.19705a		a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.19705d		c8		iny		                INY                   ; And move to the next row
.19705e		c4 67		cpy $67		                CPY EVID_LINES_VISIBLE     ; Are we still off screen?
.197060		90 05		bcc $197067	                BCC icsrright_nowrap  ; No: just set the position
.197062		88		dey		                DEY                   ; Yes: lock to the last row
.197063		22 2e 71 19	jsl $19712e	                JSL EVID_ISCROLLUP         ; But scroll the screen up
.197067						icsrright_nowrap
.197067		22 e2 70 19	jsl $1970e2	                JSL EVID_ILOCATE           ; Set the cursor position
.19706b		28		plp		                PLP
.19706c		2b		pld		                PLD
.19706d		68		pla		                PLA
.19706e		7a		ply		                PLY
.19706f		fa		plx		                PLX
.197070		6b		rtl		                RTL
.197071						EVID_ICSRLEFT
.197071		da		phx		                PHX
.197072		5a		phy		                PHY
.197073		48		pha		                PHA
.197074		0b		phd		                PHD
.197075		08		php		                PHP
.197076		c2 30		rep #$30	                REP #$30        ; set A&X long
.197078		48		pha		                PHA             ; begin setdp macro
.197079		08		php		                PHP
.19707a		c2 20		rep #$20	                REP #$20        ; set A long
.19707c		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.19707f		5b		tcd		                TCD
.197080		28		plp		                PLP
.197081		68		pla		                PLA             ; end setdp macro
.197082		a5 6e		lda $6e		                LDA EVID_CURSORX
.197084		f0 0b		beq $197091	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.197086		a6 6e		ldx $6e		                LDX EVID_CURSORX
.197088		ca		dex		                DEX
.197089		86 6e		stx $6e		                STX EVID_CURSORX
.19708b		a4 70		ldy $70		                LDY EVID_CURSORY
.19708d		22 e2 70 19	jsl $1970e2	                JSL EVID_ILOCATE
.197091						icsrleft_done_already_zero
.197091		28		plp		                PLP
.197092		2b		pld		                PLD
.197093		68		pla		                PLA
.197094		7a		ply		                PLY
.197095		fa		plx		                PLX
.197096		6b		rtl		                RTL
.197097						EVID_ICSRUP
.197097		da		phx		                PHX
.197098		5a		phy		                PHY
.197099		48		pha		                PHA
.19709a		0b		phd		                PHD
.19709b		08		php		                PHP
.19709c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19709e		48		pha		                PHA             ; begin setdp macro
.19709f		08		php		                PHP
.1970a0		c2 20		rep #$20	                REP #$20        ; set A long
.1970a2		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.1970a5		5b		tcd		                TCD
.1970a6		28		plp		                PLP
.1970a7		68		pla		                PLA             ; end setdp macro
.1970a8		a5 70		lda $70		                LDA EVID_CURSORY
.1970aa		f0 0b		beq $1970b7	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.1970ac		a4 70		ldy $70		                LDY EVID_CURSORY
.1970ae		88		dey		                DEY
.1970af		84 70		sty $70		                STY EVID_CURSORY
.1970b1		a6 6e		ldx $6e		                LDX EVID_CURSORX
.1970b3		22 e2 70 19	jsl $1970e2	                JSL EVID_ILOCATE
.1970b7						isrup_done_already_zero
.1970b7		28		plp		                PLP
.1970b8		2b		pld		                PLD
.1970b9		68		pla		                PLA
.1970ba		7a		ply		                PLY
.1970bb		fa		plx		                PLX
.1970bc		6b		rtl		                RTL
.1970bd						EVID_ICSRDOWN
.1970bd		da		phx		                PHX
.1970be		5a		phy		                PHY
.1970bf		0b		phd		                PHD
.1970c0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1970c2		48		pha		                PHA             ; begin setdp macro
.1970c3		08		php		                PHP
.1970c4		c2 20		rep #$20	                REP #$20        ; set A long
.1970c6		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.1970c9		5b		tcd		                TCD
.1970ca		28		plp		                PLP
.1970cb		68		pla		                PLA             ; end setdp macro
.1970cc		a6 6e		ldx $6e		                LDX EVID_CURSORX                 ; Get the current column
.1970ce		a4 70		ldy $70		                LDY EVID_CURSORY                 ; Get the new row
.1970d0		c8		iny		                INY
.1970d1		c4 67		cpy $67		                CPY EVID_LINES_VISIBLE           ; Check to see if we're off screen
.1970d3		90 05		bcc $1970da	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.1970d5		88		dey		                DEY                         ; Yes: go back to the last row
.1970d6		22 2e 71 19	jsl $19712e	                JSL EVID_ISCROLLUP               ; But scroll the screen up
.1970da						icsrdown_noscroll
.1970da		22 e2 70 19	jsl $1970e2	                JSL EVID_ILOCATE                 ; And set the cursor position
.1970de		2b		pld		                PLD
.1970df		7a		ply		                PLY
.1970e0		fa		plx		                PLX
.1970e1		6b		rtl		                RTL
.1970e2						EVID_ILOCATE
.1970e2		48		pha		                PHA
.1970e3		0b		phd		                PHD
.1970e4		08		php		                PHP
.1970e5		48		pha		                PHA             ; begin setdp macro
.1970e6		08		php		                PHP
.1970e7		c2 20		rep #$20	                REP #$20        ; set A long
.1970e9		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1970ec		5b		tcd		                TCD
.1970ed		28		plp		                PLP
.1970ee		68		pla		                PLA             ; end setdp macro
.1970ef		c2 30		rep #$30	                REP #$30        ; set A&X long
.1970f1						ilocate_scroll
.1970f1		c4 67		cpy $67		                CPY EVID_LINES_VISIBLE
.1970f3		90 07		bcc $1970fc	                BCC ilocate_scrolldone
.1970f5		22 2e 71 19	jsl $19712e	                JSL EVID_ISCROLLUP
.1970f9		88		dey		                DEY
.1970fa		80 f5		bra $1970f1	                BRA ilocate_scroll
.1970fc						ilocate_scrolldone
.1970fc		86 6e		stx $6e		                STX EVID_CURSORX
.1970fe		84 70		sty $70		                STY EVID_CURSORY
.197100		a5 60		lda $60		                LDA EVID_SCREENBEGIN
.197102						ilocate_row
.197102		c0 00 00	cpy #$0000	                CPY #$0
.197105		f0 08		beq $19710f	                BEQ ilocate_right
.197107		18		clc		ilocate_down    CLC
.197108		65 65		adc $65		                ADC EVID_COLS_PER_LINE
.19710a		88		dey		                DEY
.19710b		f0 02		beq $19710f	                BEQ ilocate_right
.19710d		80 f8		bra $197107	                BRA ilocate_down
.19710f		18		clc		ilocate_right   CLC
.197110		65 6e		adc $6e		                ADC EVID_CURSORX             ; move the cursor right X columns
.197112		85 6b		sta $6b		                STA EVID_CURSORPOS
.197114		a4 70		ldy $70		                LDY EVID_CURSORY
.197116		98		tya		                TYA
.197117		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.19711b		8a		txa		                TXA
.19711c		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.197120		c2 20		rep #$20	                REP #$20        ; set A long
.197122		18		clc		                CLC
.197123		a5 6b		lda $6b		                LDA EVID_CURSORPOS
.197125		69 00 20	adc #$2000	                ADC #<>(EVID_COLOR_MEM - EVID_TEXT_MEM)
.197128		85 76		sta $76		                STA EVID_COLORPOS
.19712a		28		plp		ilocate_done    PLP
.19712b		2b		pld		                PLD
.19712c		68		pla		                PLA
.19712d		6b		rtl		                RTL
.19712e						EVID_ISCROLLUP
.19712e		48		pha		                PHA
.19712f		da		phx		                PHX
.197130		5a		phy		                PHY
.197131		8b		phb		                PHB
.197132		0b		phd		                PHD
.197133		08		php		                PHP
.197134		48		pha		                PHA             ; begin setdp macro
.197135		08		php		                PHP
.197136		c2 20		rep #$20	                REP #$20        ; set A long
.197138		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19713b		5b		tcd		                TCD
.19713c		28		plp		                PLP
.19713d		68		pla		                PLA             ; end setdp macro
.19713e		c2 30		rep #$30	                REP #$30        ; set A&X long
.197140		a5 65		lda $65		                LDA EVID_COLS_PER_LINE
.197142		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.197146		a5 67		lda $67		                LDA EVID_LINES_VISIBLE
.197148		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.19714c		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.197150		85 79		sta $79		                STA EVID_TMPPTR1
.197152		18		clc		                CLC
.197153		a9 00 20	lda #$2000	                LDA #$2000
.197156		a8		tay		                TAY
.197157		65 65		adc $65		                ADC EVID_COLS_PER_LINE
.197159		aa		tax		                TAX
.19715a		a5 79		lda $79		                LDA EVID_TMPPTR1
.19715c		54 ae ae	mvn $ae,$ae	                MVN $AE,$AE
.19715f		c2 30		rep #$30	                REP #$30        ; set A&X long
.197161		18		clc		                CLC
.197162		a9 00 40	lda #$4000	                LDA #$4000
.197165		a8		tay		                TAY
.197166		65 65		adc $65		                ADC EVID_COLS_PER_LINE
.197168		aa		tax		                TAX
.197169		a5 79		lda $79		                LDA EVID_TMPPTR1
.19716b		54 ae ae	mvn $ae,$ae	                MVN $AE,$AE
.19716e		a5 79		lda $79		                LDA EVID_TMPPTR1
.197170		48		pha		                PHA
.197171		18		clc		                CLC
.197172		69 00 20	adc #$2000	                ADC #<>EVID_TEXT_MEM
.197175		85 79		sta $79		                STA EVID_TMPPTR1
.197177		a0 00 00	ldy #$0000	                LDY #0
.19717a		a9 20 00	lda #$0020	                LDA #' '
.19717d		97 79		sta [$79],y	clr_text        STA [EVID_TMPPTR1],Y
.19717f		c8		iny		                INY
.197180		c4 63		cpy $63		                CPY EVID_COLS_VISIBLE
.197182		d0 f9		bne $19717d	                BNE clr_text
.197184		68		pla		                PLA
.197185		18		clc		                CLC
.197186		69 00 40	adc #$4000	                ADC #<>EVID_COLOR_MEM
.197189		85 79		sta $79		                STA EVID_TMPPTR1
.19718b		a0 00 00	ldy #$0000	                LDY #0
.19718e		a5 72		lda $72		                LDA EVID_CURCOLOR
.197190		97 79		sta [$79],y	clr_color       STA [EVID_TMPPTR1],Y
.197192		c8		iny		                INY
.197193		c4 63		cpy $63		                CPY EVID_COLS_VISIBLE
.197195		d0 f9		bne $197190	                BNE clr_color
.197197		28		plp		                PLP
.197198		2b		pld		                PLD
.197199		ab		plb		                PLB
.19719a		7a		ply		                PLY
.19719b		fa		plx		                PLX
.19719c		68		pla		                PLA
.19719d		6b		rtl		                RTL
.19719e						EVID_IPRINTH
.19719e		08		php		                PHP
.19719f		48		pha		                PHA
.1971a0						iprinth1
.1971a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1971a2		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.1971a5		4a		lsr a		                LSR
.1971a6		4a		lsr a		                LSR
.1971a7		4a		lsr a		                LSR
.1971a8		4a		lsr a		                LSR
.1971a9		22 f8 71 19	jsl $1971f8	                JSL EVID_iprint_digit
.1971ad		bd 00 00	lda $0000,x	                LDA #0,b,x
.1971b0		22 f8 71 19	jsl $1971f8	                JSL EVID_iprint_digit
.1971b4		ca		dex		                DEX
.1971b5		88		dey		                DEY
.1971b6		d0 e8		bne $1971a0	                BNE iprinth1
.1971b8		68		pla		                PLA
.1971b9		28		plp		                PLP
.1971ba		6b		rtl		                RTL
.1971bb						EVID_IPRINTAH
.1971bb		48		pha		                PHA
.1971bc		08		php		                PHP
.1971bd		8f 44 02 00	sta $000244	                STA @lCPUA              ; Save A where we can use it multiple times
.1971c1		08		php		                PHP                     ; Get the processor status into A
.1971c2		e2 20		sep #$20	                SEP #$20        ; set A short
.1971c4		c2 10		rep #$10	                REP #$10        ; set X long
.1971c6		68		pla		                PLA
.1971c7		29 20		and #$20	                AND #%00100000          ; Is M = 1?
.1971c9		c9 20		cmp #$20	                CMP #%00100000
.1971cb		f0 14		beq $1971e1	                BEQ eight_bit
.1971cd		af 45 02 00	lda $000245	                LDA @lCPUA+1            ; Get nibble [15..12]
.1971d1		4a		lsr a		                LSR A
.1971d2		4a		lsr a		                LSR A
.1971d3		4a		lsr a		                LSR A
.1971d4		4a		lsr a		                LSR A
.1971d5		22 f8 71 19	jsl $1971f8	                JSL EVID_iprint_digit   ; And print it
.1971d9		af 45 02 00	lda $000245	                LDA @lCPUA+1            ; Get nibble [11..8]
.1971dd		22 f8 71 19	jsl $1971f8	                JSL EVID_iprint_digit   ; And print it
.1971e1		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA              ; Get nibble [7..4]
.1971e5		4a		lsr a		                LSR A
.1971e6		4a		lsr a		                LSR A
.1971e7		4a		lsr a		                LSR A
.1971e8		4a		lsr a		                LSR A
.1971e9		22 f8 71 19	jsl $1971f8	                JSL EVID_iprint_digit   ; And print it
.1971ed		af 44 02 00	lda $000244	                LDA @lCPUA              ; Get nibble [3..0]
.1971f1		22 f8 71 19	jsl $1971f8	                JSL EVID_iprint_digit   ; And print it
.1971f5		28		plp		                PLP
.1971f6		68		pla		                PLA
.1971f7		6b		rtl		                RTL
.1971f8						EVID_iprint_digit
.1971f8		da		phx		                PHX
.1971f9		c2 20		rep #$20	                REP #$20        ; set A long
.1971fb		29 0f 00	and #$000f	                AND #$0F
.1971fe		aa		tax		                TAX
.1971ff		bf 90 81 19	lda $198190,x	                LDA hex_digits,X
.197203		22 a5 6e 19	jsl $196ea5	                JSL EVID_IPUTC       ; Print the digit
.197207		fa		plx		                PLX
.197208		6b		rtl		                RTL
.197209						INIT_EVID_VID_MODE
.197209		e2 20		sep #$20	                SEP #$20        ; set A short
.19720b		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable          ; 0 - 80x60, 1- 100x75
.19720d		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.197211		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable           ; Enable the Border
.197213		8f 04 1e ae	sta $ae1e04	                STA EVID_BORDER_CTRL_REG
.197217		a9 08		lda #$08	                LDA #8                           ; Set the border to the standard 8 pixels
.197219		8f 08 1e ae	sta $ae1e08	                STA EVID_BORDER_X_SIZE          ; Let's use maximum space
.19721d		8f 09 1e ae	sta $ae1e09	                STA EVID_BORDER_Y_SIZE
.197221		a9 20		lda #$20	                LDA #$20
.197223		8f 07 1e ae	sta $ae1e07	                STA EVID_BORDER_COLOR_R        ; R
.197227		a9 00		lda #$00	                LDA #$00
.197229		8f 06 1e ae	sta $ae1e06	                STA EVID_BORDER_COLOR_G        ; G
.19722d		a9 20		lda #$20	                LDA #$20
.19722f		8f 05 1e ae	sta $ae1e05	                STA EVID_BORDER_COLOR_B        ; B
.197233		22 05 73 19	jsl $197305	                JSL INIT_EVID_EVID_LUT
.197237		22 ee 72 19	jsl $1972ee	                JSL INIT_EVID_EVID_FONTSET
.19723b		22 29 73 19	jsl $197329	                JSL INIT_EVID_EVID_CURSOR
.19723f		c2 30		rep #$30	                REP #$30        ; set A&X long
.197241		a2 62 00	ldx #$0062	                LDX #(100-2)
.197244		86 63		stx $63		                STX EVID_COLS_VISIBLE
.197246		a0 49 00	ldy #$0049	                LDY #(75-2)
.197249		84 67		sty $67		                STY EVID_LINES_VISIBLE
.19724b		a2 64 00	ldx #$0064	                LDX #100
.19724e		86 65		stx $65		                STX EVID_COLS_PER_LINE
.197250		a0 4b 00	ldy #$004b	                LDY #75
.197253		84 69		sty $69		                STY EVID_LINES_MAX
.197255		a9 f0 00	lda #$00f0	                LDA #$F0                  ; Set the default text color to light gray on dark gray
.197258		85 72		sta $72		                STA EVID_CURCOLOR
.19725a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19725c		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM      ; store the initial screen buffer location
.19725f		85 60		sta $60		                STA EVID_SCREENBEGIN
.197261		85 6b		sta $6b		                STA EVID_CURSORPOS
.197263		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM   ; Set the initial COLOR cursor position
.197266		85 76		sta $76		                STA EVID_COLORPOS
.197268		e2 20		sep #$20	                SEP #$20        ; set A short
.19726a		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.19726c		85 0e		sta $0e		                STA SCREENBEGIN + 2
.19726e		85 6d		sta $6d		                STA EVID_CURSORPOS+2
.197270		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM    ; Set the initial COLOR cursor position
.197272		85 78		sta $78		                STA EVID_COLORPOS + 2
.197274		22 47 73 19	jsl $197347	                JSL INIT_EVID_EVID_CLRSCREEN
.197278		c2 10		rep #$10	                REP #$10        ; set X long
.19727a		0b		phd		                PHD
.19727b		48		pha		                PHA             ; begin setdbr macro
.19727c		08		php		                PHP
.19727d		e2 20		sep #$20	                SEP #$20        ; set A short
.19727f		a9 19		lda #$19	                LDA #`EVID_DEV_RDY0
.197281		48		pha		                PHA
.197282		ab		plb		                PLB
.197283		28		plp		                PLP
.197284		68		pla		                PLA             ; end setdbr macro
.197285		a2 a6 72	ldx #$72a6	                LDX #<>EVID_DEV_RDY0
.197288		22 85 6e 19	jsl $196e85	                JSL EVID_IPRINT
.19728c		a2 d6 72	ldx #$72d6	                LDX #<>EVID_DEV_RDY1
.19728f		22 85 6e 19	jsl $196e85	                JSL EVID_IPRINT
.197293		2b		pld		                PLD
.197294		a2 00 00	ldx #$0000	                LDX #$0000
.197297						LifeIsFullOfColors:
.197297		bf cc 72 19	lda $1972cc,x	                LDA @l EVID_DEV_RDY0_CLR, X
.19729b		9f 00 40 ae	sta $ae4000,x	                STA @l EVID_COLOR_MEM, X
.19729f		e8		inx		                INX
.1972a0		e0 0a 00	cpx #$000a	                CPX #10
.1972a3		d0 f2		bne $197297	                BNE LifeIsFullOfColors
.1972a5		6b		rtl		                RTL
>1972a6		0b 0c 0b 0c 0b 0c 0b 0c		EVID_DEV_RDY0  .null $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "C256 Foenix EXP-C200-EVID", $0D
>1972ae		0b 0c 20 43 32 35 36 20 46 6f 65 6e 69 78 20 45
>1972be		58 50 2d 43 32 30 30 2d 45 56 49 44 0d 00
>1972cc		1d 1d 8d 8d 4d 4d 2d 2d		EVID_DEV_RDY0_CLR .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D
>1972d4		5d 5d
>1972d6		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1  .null "Your Device is Ready..."
>1972de		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
=100						TXTLINESIZE = 100
.1972ee						INIT_EVID_EVID_FONTSET
.1972ee		e2 20		sep #$20	                SEP #$20        ; set A short
.1972f0		c2 10		rep #$10	                REP #$10        ; set X long
.1972f2		a2 00 00	ldx #$0000	                LDX #$0000
.1972f5						initFontsetbranch0
.1972f5		bf 00 00 1f	lda $1f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.1972f9		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X ; Vicky FONT RAM Bank
.1972fd		e8		inx		                INX
.1972fe		e0 00 08	cpx #$0800	                CPX #$0800
.197301		d0 f2		bne $1972f5	                BNE initFontsetbranch0
.197303		ea		nop		                NOP
.197304		6b		rtl		                RTL
.197305						INIT_EVID_EVID_LUT
.197305		e2 20		sep #$20	                SEP #$20        ; set A short
.197307		e2 10		sep #$10	                SEP #$10        ; set X short
.197309		a2 00		ldx #$00					        LDX	#$00
.19730b		bf bf 7e 19	lda $197ebf,x	lutinitloop0	LDA @lfg_color_lut,x		; get Local Data c64_character_Color_LUT_4_Txt
.19730f		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	; Write in LUT Memory
.197313		e8		inx		                inx
.197314		e0 40		cpx #$40	                cpx #$40
.197316		d0 f3		bne $19730b	                bne lutinitloop0
.197318		a2 00		ldx #$00	                LDX	#$00
.19731a		bf ff 7e 19	lda $197eff,x	lutinitloop1	LDA @lbg_color_lut,x		; get Local Data
.19731e		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	; Write in LUT Memory
.197322		e8		inx		                INX
.197323		e0 40		cpx #$40	                CPX #$40
.197325		d0 f3		bne $19731a	                bne lutinitloop1
.197327		ea		nop		                NOP
.197328		6b		rtl		                RTL
.197329						INIT_EVID_EVID_CURSOR
.197329		e2 20		sep #$20	                SEP #$20        ; set A short
.19732b		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.19732d		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.197331		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0)      ;Set Cursor Enable And Flash Rate @1Hz
.197333		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG ;
.197337		c2 30		rep #$30	                REP #$30        ; set A&X long
.197339		a9 00 00	lda #$0000	                LDA #$0000;
.19733c		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L ;; // Set the X to Position 1
.197340		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L ; // Set the Y to Position 6 (Below)
.197344		e2 20		sep #$20	                SEP #$20        ; set A short
.197346		6b		rtl		                RTL
.197347						INIT_EVID_EVID_CLRSCREEN
.197347		e2 20		sep #$20	                SEP #$20        ; set A short
.197349		c2 10		rep #$10	                REP #$10        ; set X long
.19734b		a2 00 00	ldx #$0000	                LDX #$0000		; Only Use One Pointer
.19734e		a9 20		lda #$20	                LDA #$20		; Fill the Entire Screen with Space
.197350		9f 00 20 ae	sta $ae2000,x	iclearloop0	    STA EVID_TEXT_MEM, x	;
.197354		e8		inx		                inx
.197355		e0 00 20	cpx #$2000	                cpx #$2000
.197358		d0 f6		bne $197350	                bne iclearloop0
.19735a		a2 00 00	ldx #$0000	                LDX	#$0000		; Only Use One Pointer
.19735d		a9 f0		lda #$f0	                LDA #$F0		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.19735f		9f 00 40 ae	sta $ae4000,x	iclearloop1	    STA EVID_COLOR_MEM, x	;
.197363		e8		inx		                inx
.197364		e0 00 20	cpx #$2000	                cpx #$2000
.197367		d0 f6		bne $19735f	                bne iclearloop1
.197369		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\ansi_screens.asm

.0000						S_ANSI_VARS
>0000						SCREENBEGIN         .long ?     ; Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>0003						COLS_VISIBLE        .word ?     ; Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>0005						COLS_PER_LINE       .word ?     ; Columns in memory per screen line. A virtual line can be this long. Default=128
>0007						LINES_VISIBLE       .word ?     ; The number of rows visible on the screen. Default=25
>0009						LINES_MAX           .word ?     ; The number of rows in memory for the screen. Default=64
>000b						CURSORPOS           .long ?     ; The next character written to the screen will be written in this location.
>000e						CURSORX             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0010						CURSORY             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0012						CURCOLOR            .byte ?     ; Color of next character to be printed to the screen.
>0013						COLORPOS            .long ?     ; Address of cursor's position in the color matrix
>0016						COLORBEGIN          .long ?     ; Address of the first byte of the color matrix for this screen
>0019						TMPPTR1             .dword ?    ; Temporary pointer
>001d						STATE               .byte ?     ; State of the escape code parser
>001e						CONTROL             .byte ?     ; Control bit
>001f						ARGC                .byte ?     ; The number of arguments provided by the escape sequence (max 2)
>0020						ARG0                .byte ?     ; First ANSI code argument
>0021						ARG1                .byte ?     ; Second ANSI code argument
=0						ST_INIT = 0             ; Starting state for the ANSI code parser. Most characters just print
=1						ST_ESCAPE = 1           ; ESC has been seen
=2						ST_CSI = 2              ; Full CSI has been seen "ESC ["
=2						ANSI_MAX_ARG = 2        ; We'll limit ourselves to two arguments
=$70						ANSI_DEF_COLOR = $70    ; Default color (dim white on dim black)
=$80						CONTROL_INVERT = $80    ; Control bit: Colors are inverted
=$40						CONTROL_BOLD = $40      ; Control bit: Colors should be intense
.19736a						ANSI_TEST
.19736a		8b		phb		                    PHB
.19736b		0b		phd		                    PHD
.19736c		08		php		                    PHP
.19736d		48		pha		                PHA             ; begin setdbr macro
.19736e		08		php		                PHP
.19736f		e2 20		sep #$20	                SEP #$20        ; set A short
.197371		a9 19		lda #$19	                LDA #`ANSI_TEST
.197373		48		pha		                PHA
.197374		ab		plb		                PLB
.197375		28		plp		                PLP
.197376		68		pla		                PLA             ; end setdbr macro
.197377		20 35 76	jsr $197635	                    JSR INIT_SCREENS
.19737a		e2 20		sep #$20	                SEP #$20        ; set A short
.19737c		c2 10		rep #$10	                REP #$10        ; set X long
.19737e		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; Switch to the main screen
.197380		22 3c 10 00	jsl $00103c	                    JSL SETOUT
.197384		20 d9 7c	jsr $197cd9	                    JSR ANSI_CLR                    ; And clear it
.197387		a2 00 00	ldx #$0000	                    LDX #0
.19738a		e2 20		sep #$20	                SEP #$20        ; set A short
.19738c		bd bd 73	lda $1973bd,x	loop0               LDA @w test_message0,X          ; Print the message for the main screen
.19738f		f0 1f		beq $1973b0	                    BEQ done
.197391		20 2f 78	jsr $19782f	                    JSR ANSI_PUTC
.197394		e8		inx		                    INX
.197395		80 f5		bra $19738c	                    BRA loop0
.197397						send1
.197397		e2 20		sep #$20	                SEP #$20        ; set A short
.197399		a9 04		lda #$04	                    LDA #CHAN_EVID                  ; Switch to the EVID screen
.19739b		22 3c 10 00	jsl $00103c	                    JSL SETOUT
.19739f		20 d9 7c	jsr $197cd9	                    JSR ANSI_CLR                    ; And clear it
.1973a2		a2 00 00	ldx #$0000	                    LDX #0
.1973a5		bd bd 73	lda $1973bd,x	loop1               LDA @w test_message0,X          ; Print the message for the EVID screen
.1973a8		f0 06		beq $1973b0	                    BEQ done
.1973aa		20 2f 78	jsr $19782f	                    JSR ANSI_PUTC
.1973ad		e8		inx		                    INX
.1973ae		80 f5		bra $1973a5	                    BRA loop1
.1973b0						done
.1973b0		e2 20		sep #$20	                SEP #$20        ; set A short
.1973b2		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; And switch back to the main screen
.1973b4		22 3c 10 00	jsl $00103c	                    JSL SETOUT
.1973b8		00		brk #		                    BRK
.1973b9		28		plp		                    PLP
.1973ba		2b		pld		                    PLD
.1973bb		ab		plb		                    PLB
.1973bc		6b		rtl		                    RTL
>1973bd		1b 5b 30 6d 1b 5b 48 30		test_message0       .text CHAR_ESC,"[0m",CHAR_ESC,"[H0",CHAR_ESC,"[8C1",CHAR_ESC,"[8C2",CHAR_ESC,"[8C3"
>1973c5		1b 5b 38 43 31 1b 5b 38 43 32 1b 5b 38 43 33
>1973d4		1b 5b 31 3b 32 48 30 31		                    .text CHAR_ESC,"[1;2H0123456789012345678901234567890"
>1973dc		32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37
>1973ec		38 39 30 31 32 33 34 35 36 37 38 39 30
>1973f9		1b 5b 31 3b 33 48 1b 5b		                    .text CHAR_ESC,"[1;3H",CHAR_ESC,"[30mBLACK"
>197401		33 30 6d 42 4c 41 43 4b
>197409		1b 5b 31 3b 34 48 1b 5b		                    .text CHAR_ESC,"[1;4H",CHAR_ESC,"[31mRED"
>197411		33 31 6d 52 45 44
>197417		1b 5b 31 3b 35 48 1b 5b		                    .text CHAR_ESC,"[1;5H",CHAR_ESC,"[32mGREEN"
>19741f		33 32 6d 47 52 45 45 4e
>197427		1b 5b 31 3b 36 48 1b 5b		                    .text CHAR_ESC,"[1;6H",CHAR_ESC,"[33mYELLOW"
>19742f		33 33 6d 59 45 4c 4c 4f 57
>197438		1b 5b 31 3b 37 48 1b 5b		                    .text CHAR_ESC,"[1;7H",CHAR_ESC,"[34mBLUE"
>197440		33 34 6d 42 4c 55 45
>197447		1b 5b 31 3b 38 48 1b 5b		                    .text CHAR_ESC,"[1;8H",CHAR_ESC,"[35mMAGENTA"
>19744f		33 35 6d 4d 41 47 45 4e 54 41
>197459		1b 5b 31 3b 39 48 1b 5b		                    .text CHAR_ESC,"[1;9H",CHAR_ESC,"[36mCYAN"
>197461		33 36 6d 43 59 41 4e
>197468		1b 5b 31 3b 31 30 48 1b		                    .text CHAR_ESC,"[1;10H",CHAR_ESC,"[37mWHITE"
>197470		5b 33 37 6d 57 48 49 54 45
>197479		1b 5b 32 30 3b 33 48 1b		                    .text CHAR_ESC,"[20;3H",CHAR_ESC,"[40mBLACK"
>197481		5b 34 30 6d 42 4c 41 43 4b
>19748a		1b 5b 32 30 3b 34 48 1b		                    .text CHAR_ESC,"[20;4H",CHAR_ESC,"[41mRED"
>197492		5b 34 31 6d 52 45 44
>197499		1b 5b 32 30 3b 35 48 1b		                    .text CHAR_ESC,"[20;5H",CHAR_ESC,"[42mGREEN"
>1974a1		5b 34 32 6d 47 52 45 45 4e
>1974aa		1b 5b 32 30 3b 36 48 1b		                    .text CHAR_ESC,"[20;6H",CHAR_ESC,"[43mYELLOW"
>1974b2		5b 34 33 6d 59 45 4c 4c 4f 57
>1974bc		1b 5b 32 30 3b 37 48 1b		                    .text CHAR_ESC,"[20;7H",CHAR_ESC,"[44mBLUE"
>1974c4		5b 34 34 6d 42 4c 55 45
>1974cc		1b 5b 32 30 3b 38 48 1b		                    .text CHAR_ESC,"[20;8H",CHAR_ESC,"[45mMAGENTA"
>1974d4		5b 34 35 6d 4d 41 47 45 4e 54 41
>1974df		1b 5b 32 30 3b 39 48 1b		                    .text CHAR_ESC,"[20;9H",CHAR_ESC,"[46mCYAN"
>1974e7		5b 34 36 6d 43 59 41 4e
>1974ef		1b 5b 32 30 3b 31 30 48		                    .text CHAR_ESC,"[20;10H",CHAR_ESC,"[47m",CHAR_ESC,"[30mWHITE",CHAR_ESC,"[49m"
>1974f7		1b 5b 34 37 6d 1b 5b 33 30 6d 57 48 49 54 45 1b
>197507		5b 34 39 6d
>19750b		1b 5b 31 6d			                    .text CHAR_ESC,"[1m"
>19750f		1b 5b 31 30 3b 33 48 1b		                    .text CHAR_ESC,"[10;3H",CHAR_ESC,"[30mBLACK"
>197517		5b 33 30 6d 42 4c 41 43 4b
>197520		1b 5b 31 30 3b 34 48 1b		                    .text CHAR_ESC,"[10;4H",CHAR_ESC,"[31mRED"
>197528		5b 33 31 6d 52 45 44
>19752f		1b 5b 31 30 3b 35 48 1b		                    .text CHAR_ESC,"[10;5H",CHAR_ESC,"[32mGREEN"
>197537		5b 33 32 6d 47 52 45 45 4e
>197540		1b 5b 31 30 3b 36 48 1b		                    .text CHAR_ESC,"[10;6H",CHAR_ESC,"[33mYELLOW"
>197548		5b 33 33 6d 59 45 4c 4c 4f 57
>197552		1b 5b 31 30 3b 37 48 1b		                    .text CHAR_ESC,"[10;7H",CHAR_ESC,"[34mBLUE"
>19755a		5b 33 34 6d 42 4c 55 45
>197562		1b 5b 31 30 3b 38 48 1b		                    .text CHAR_ESC,"[10;8H",CHAR_ESC,"[35mMAGENTA"
>19756a		5b 33 35 6d 4d 41 47 45 4e 54 41
>197575		1b 5b 31 30 3b 39 48 1b		                    .text CHAR_ESC,"[10;9H",CHAR_ESC,"[36mCYAN"
>19757d		5b 33 36 6d 43 59 41 4e
>197585		1b 5b 31 30 3b 31 30 48		                    .text CHAR_ESC,"[10;10H",CHAR_ESC,"[37mWHITE",CHAR_ESC,"[0m"
>19758d		1b 5b 33 37 6d 57 48 49 54 45 1b 5b 30 6d
>19759b		1b 5b 31 3b 31 35 48 30		                    .text CHAR_ESC,"[1;15H012345678901234567890123456789"       ; Erase from cursor to end of line
>1975a3		31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36
>1975b3		37 38 39 30 31 32 33 34 35 36 37 38 39
>1975c0		1b 5b 31 30 3b 31 35 48		                    .text CHAR_ESC,"[10;15H",CHAR_ESC,"[K"
>1975c8		1b 5b 4b
>1975cb		1b 5b 31 3b 31 36 48 30		                    .text CHAR_ESC,"[1;16H012345678901234567890123456789"       ; Erase from cursor to beginning of line
>1975d3		31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36
>1975e3		37 38 39 30 31 32 33 34 35 36 37 38 39
>1975f0		1b 5b 31 30 3b 31 36 48		                    .text CHAR_ESC,"[10;16H",CHAR_ESC,"[1K"
>1975f8		1b 5b 31 4b
>1975fc		1b 5b 31 3b 31 37 48 30		                    .text CHAR_ESC,"[1;17H012345678901234567890123456789"       ; Erase entire line
>197604		31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36
>197614		37 38 39 30 31 32 33 34 35 36 37 38 39
>197621		1b 5b 31 30 3b 31 37 48		                    .text CHAR_ESC,"[10;17H",CHAR_ESC,"[2K"
>197629		1b 5b 32 4b
>19762d		1b 5b 31 3b 32 30 48		                    .text CHAR_ESC,"[1;20H"
>197634		00				                    .byte 0
.197635						INIT_SCREENS
.197635		da		phx		                    PHX
.197636		5a		phy		                    PHY
.197637		8b		phb		                    PHB
.197638		0b		phd		                    PHD
.197639		08		php		                    PHP
.19763a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19763c		a0 00 00	ldy #$0000	                    LDY #0
.19763f		20 e9 76	jsr $1976e9	                    JSR INIT_SCREEN_Y               ; Set up the main screen
.197642		e2 20		sep #$20	                SEP #$20        ; set A short
.197644		af 87 e8 af	lda $afe887	                    LDA @l GABE_SYS_STAT            ; Let's check the Presence of an Expansion Card here
.197648		29 10		and #$10	                    AND #GABE_SYS_STAT_EXP          ; When there is a Card the Value is 1
.19764a		c9 10		cmp #$10	                    CMP #GABE_SYS_STAT_EXP
.19764c		d0 1b		bne $197669	                    BNE no_evid
.19764e		c2 20		rep #$20	                REP #$20        ; set A long
.197650		af 12 00 ae	lda $ae0012	                    LDA @l ESID_ID_CARD_ID_Lo       ; Load the Card ID and check for C100 or C200
.197654		c9 c8 00	cmp #$00c8	                    CMP #$00C8                      ; Is it the EVID card?
.197657		d0 10		bne $197669	                    BNE no_evid                     ; No: mark the EVID screen as not present
.197659		e2 20		sep #$20	                SEP #$20        ; set A short
.19765b		a9 01		lda #$01	                    LDA #1                          ; Otherwise: Mark that there is an EVID present
.19765d		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.197661		a0 01 00	ldy #$0001	                    LDY #1
.197664		20 e9 76	jsr $1976e9	                    JSR INIT_SCREEN_Y               ; Initialize the EVID screen variables
.197667		80 08		bra $197671	                    BRA set_luts
.197669						no_evid
.197669		e2 20		sep #$20	                SEP #$20        ; set A short
.19766b		a9 00		lda #$00	                    LDA #0                          ; Mark that there is no EVID present
.19766d		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.197671		20 7a 76	jsr $19767a	set_luts            JSR ANSI_INIT_LUTS              ; Initialize the color look up tables
.197674		28		plp		done                PLP
.197675		2b		pld		                    PLD
.197676		ab		plb		                    PLB
.197677		7a		ply		                    PLY
.197678		fa		plx		                    PLX
.197679		60		rts		                    RTS
.19767a						ANSI_INIT_LUTS
.19767a		08		php		                    PHP
.19767b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19767d		a2 00		ldx #$00	                    LDX #0
.19767f		bd a9 76	lda $1976a9,x	vicky_loop          LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.197682		9f 40 1f af	sta $af1f40,x	                    STA @l FG_CHAR_LUT_PTR,X        ; Set the corresponding foreground color component on Vicky
.197686		9f 80 1f af	sta $af1f80,x	                    STA @l BG_CHAR_LUT_PTR,X        ; Set the corresponding background color component on Vicky
.19768a		e8		inx		                    INX
.19768b		e0 40		cpx #$40	                    CPX #4*16
.19768d		d0 f0		bne $19767f	                    BNE vicky_loop
.19768f		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Check to see if EVID is present
.197693		f0 12		beq $1976a7	                    BEQ done                        ; If not, we're done
.197695		a2 00		ldx #$00	                    LDX #0
.197697		bd a9 76	lda $1976a9,x	evid_loop           LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.19769a		9f 00 1b ae	sta $ae1b00,x	                    STA @l EVID_FG_LUT,X            ; Set the corresponding foreground color component on the EVID card
.19769e		9f 40 1b ae	sta $ae1b40,x	                    STA @l EVID_BG_LUT,X            ; Set the corresponding background color component on the EVID card
.1976a2		e8		inx		                    INX
.1976a3		e0 40		cpx #$40	                    CPX #4*16
.1976a5		d0 f0		bne $197697	                    BNE evid_loop
.1976a7		28		plp		done                PLP
.1976a8		60		rts		                    RTS
.1976a9						ANSI_TEXT_LUT
>1976a9		00 00 00 00			                    .byte 0, 0, 0, 0
>1976ad		00 00 80 00			                    .byte 0, 0, 128, 0
>1976b1		00 80 00 00			                    .byte 0, 128, 0, 0
>1976b5		00 80 80 00			                    .byte 0, 128, 128, 0
>1976b9		80 00 00 00			                    .byte 128, 0, 0, 0
>1976bd		80 00 80 00			                    .byte 128, 0, 128, 0
>1976c1		80 80 00 00			                    .byte 128, 128, 0, 0
>1976c5		c0 c0 c0 00			                    .byte 192, 192, 192, 0
>1976c9		80 80 80 00			                    .byte 128, 128, 128, 0
>1976cd		00 00 ff 00			                    .byte 0, 0, 255, 0
>1976d1		00 ff 00 00			                    .byte 0, 255, 0, 0
>1976d5		00 ff ff 00			                    .byte 0, 255, 255, 0
>1976d9		ff 00 00 00			                    .byte 255, 0, 0, 0
>1976dd		ff 00 ff 00			                    .byte 255, 0, 255, 0
>1976e1		ff ff 00 00			                    .byte 255, 255, 0, 0
>1976e5		ff ff ff 00			                    .byte 255, 255, 255, 0
.1976e9						INIT_SCREEN_Y
.1976e9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1976eb		c0 00 00	cpy #$0000	                    CPY #0
.1976ee		f0 06		beq $1976f6	                    BEQ setdp_0
.1976f0		a9 60 00	lda #$0060	setdp_1             LDA #<>EVID_SCREENBEGIN         ; Set DP to the EVID variable block
.1976f3		5b		tcd		                    TCD
.1976f4		80 04		bra $1976fa	                    BRA set_addresses
.1976f6		a9 0c 00	lda #$000c	setdp_0             LDA #<>SCREENBEGIN              ; Set DP to the main screen variable block
.1976f9		5b		tcd		                    TCD
.1976fa		98		tya		set_addresses       TYA                             ; Compute offset to screen Y's addresses
.1976fb		0a		asl a		                    ASL A
.1976fc		0a		asl a		                    ASL A
.1976fd		aa		tax		                    TAX
.1976fe		bf 38 77 19	lda $197738,x	                    LDA @l text_address,X
.197702		85 00		sta $00		                    STA #S_ANSI_VARS.SCREENBEGIN,D  ; Set the address of the text matrix
.197704		85 0b		sta $0b		                    STA #S_ANSI_VARS.CURSORPOS,D    ; And the cursor pointer
.197706		e2 20		sep #$20	                SEP #$20        ; set A short
.197708		bf 3a 77 19	lda $19773a,x	                    LDA @l text_address+2,X
.19770c		85 02		sta $02		                    STA #S_ANSI_VARS.SCREENBEGIN+2,D
.19770e		85 0d		sta $0d		                    STA #S_ANSI_VARS.CURSORPOS+2,D
.197710		c2 20		rep #$20	                REP #$20        ; set A long
.197712		bf 40 77 19	lda $197740,x	                    LDA @l color_address,X
.197716		85 16		sta $16		                    STA #S_ANSI_VARS.COLORBEGIN,D   ; Set the address of the color matrix
.197718		85 13		sta $13		                    STA #S_ANSI_VARS.COLORPOS,D     ; And the color cursor pointer
.19771a		e2 20		sep #$20	                SEP #$20        ; set A short
.19771c		bf 42 77 19	lda $197742,x	                    LDA @l color_address+2,X
.197720		85 18		sta $18		                    STA #S_ANSI_VARS.COLORBEGIN+2,D
.197722		85 15		sta $15		                    STA #S_ANSI_VARS.COLORPOS+2,D
.197724		c2 20		rep #$20	                REP #$20        ; set A long
.197726		64 0e		stz $0e		                    STZ #S_ANSI_VARS.CURSORX,D      ; Set the cursor position to 0, 0
.197728		64 10		stz $10		                    STZ #S_ANSI_VARS.CURSORY,D
.19772a		e2 20		sep #$20	                SEP #$20        ; set A short
.19772c		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D        ; Set the state of the ANSI parser to S0
.19772e		64 1e		stz $1e		                    STZ #S_ANSI_VARS.CONTROL,D      ; Set the control bits to 0 (default)
.197730		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.197732		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D     ; Set the current color to the default
.197734		20 48 77	jsr $197748	                    JSR ANSI_SETSIZE_Y              ; Set the size variables for the main screen
.197737		60		rts		                    RTS
>197738		00 a0 af 00 00 20 ae 00		text_address        .dword CS_TEXT_MEM_PTR, EVID_TEXT_MEM
>197740		00 c0 af 00 00 40 ae 00		color_address       .dword CS_COLOR_MEM_PTR, EVID_COLOR_MEM
.197748						ANSI_SETSIZE_Y
.197748		08		php		                    PHP
.197749		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19774b		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.19774d		f0 06		beq $197755	                    BEQ vky_master                      ; Yes: get the resolution from Vicky
.19774f		af 01 1e ae	lda $ae1e01	                    LDA @l EVID_MSTR_CTRL_REG_H         ; No: get the resolution from EVID
.197753		80 04		bra $197759	                    BRA resolution
.197755		af 01 00 af	lda $af0001	vky_master          LDA @l MASTER_CTRL_REG_H
.197759		29 03		and #$03	resolution          AND #$03                            ; Mask off the resolution bits
.19775b		0a		asl a		                    ASL A
.19775c		aa		tax		                    TAX                                 ; Index to the col/line count in X
.19775d		c2 20		rep #$20	                REP #$20        ; set A long
.19775f		bd f9 77	lda $1977f9,x	                    LDA cols_by_res,X                   ; Get the number of columns
.197762		85 05		sta $05		                    STA #S_ANSI_VARS.COLS_PER_LINE,D    ; This is how many columns there are per line in the memory
.197764		85 03		sta $03		                    STA #S_ANSI_VARS.COLS_VISIBLE,D     ; This is how many would be visible with no border
.197766		bd 01 78	lda $197801,x	                    LDA lines_by_res,X                  ; Get the number of lines
.197769		85 09		sta $09		                    STA #S_ANSI_VARS.LINES_MAX,D        ; This is the total number of lines in memory
.19776b		85 07		sta $07		                    STA #S_ANSI_VARS.LINES_VISIBLE,D    ; This is how many lines would be visible with no border
.19776d		e2 20		sep #$20	                SEP #$20        ; set A short
.19776f		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.197771		f0 06		beq $197779	                    BEQ vky_border                      ; Yes: get the border from Vicky
.197773		af 04 1e ae	lda $ae1e04	                    LDA @l EVID_BORDER_CTRL_REG         ; No: Check EVID to see if we have a border
.197777		80 04		bra $19777d	                    BRA border
.197779		af 04 00 af	lda $af0004	vky_border          LDA @l BORDER_CTRL_REG              ; Check Vicky to see if we have a border
.19777d		89 01		bit #$01	border              BIT #Border_Ctrl_Enable
.19777f		f0 76		beq $1977f7	                    BEQ done                            ; No border... the sizes are correct now
.197781		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.197783		f0 06		beq $19778b	                    BEQ vky_border_size                 ; Yes: get the border size from Vicky
.197785		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the horizontal border width from EVID
.197789		80 04		bra $19778f	                    BRA border_size
.19778b		af 08 00 af	lda $af0008	vky_border_size     LDA @l BORDER_X_SIZE                ; Get the horizontal border width from Vicky
.19778f		29 3f		and #$3f	border_size         AND #$3F
.197791		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.197793		d0 04		bne $197799	                    BNE frac_width
.197795		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.197796		4a		lsr a		                    LSR A
.197797		80 03		bra $19779c	                    BRA store_width
.197799		4a		lsr a		frac_width          LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.19779a		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.19779b		1a		inc a		                    INC A
.19779c		85 19		sta $19		store_width         STA #S_ANSI_VARS.TMPPTR1,D
.19779e		64 1a		stz $1a		                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.1977a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1977a2		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.1977a4		f0 0c		beq $1977b2	                    BEQ adjust_width                    ; Yes: skip the pixel doubling check
.1977a6		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check Vucky if we're pixel doubling
.1977aa		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.1977ac		f0 04		beq $1977b2	                    BEQ adjust_width                    ; No... just adjust the width of the screen
.1977ae		c2 20		rep #$20	                REP #$20        ; set A long
.1977b0		46 19		lsr $19		                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.1977b2						adjust_width
.1977b2		c2 20		rep #$20	                REP #$20        ; set A long
.1977b4		38		sec		                    SEC
.1977b5		a5 05		lda $05		                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.1977b7		e5 19		sbc $19		                    SBC #S_ANSI_VARS.TMPPTR1,D
.1977b9		85 03		sta $03		                    STA #S_ANSI_VARS.COLS_VISIBLE,D
.1977bb		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.1977bd		f0 06		beq $1977c5	                    BEQ vky_border_y_size               ; Yes: get the border Y size from Vicky
.1977bf		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the vertical border width from EVID
.1977c3		80 04		bra $1977c9	                    BRA border_y_size
.1977c5		af c9 77 19	lda $1977c9	vky_border_y_size   LDA @l BORDER_Y_SIZE                ; Get the vertical border width from Vicky
.1977c9		29 3f 00	and #$003f	border_y_size       AND #$3F
.1977cc		89 03 00	bit #$0003	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.1977cf		d0 04		bne $1977d5	                    BNE frac_height
.1977d1		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.1977d2		4a		lsr a		                    LSR A
.1977d3		80 03		bra $1977d8	                    BRA store_height
.1977d5		4a		lsr a		frac_height         LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.1977d6		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.1977d7		1a		inc a		                    INC A
.1977d8		85 19		sta $19		store_height        STA #S_ANSI_VARS.TMPPTR1,D
.1977da		64 1a		stz $1a		                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.1977dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1977de		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.1977e0		f0 0c		beq $1977ee	                    BEQ adjust_height                   ; Yes: skip the pixel doubling check
.1977e2		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check if we're pixel doubling
.1977e6		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.1977e8		f0 04		beq $1977ee	                    BEQ adjust_height                   ; No... just adjust the height of the screen
.1977ea		c2 20		rep #$20	                REP #$20        ; set A long
.1977ec		46 19		lsr $19		                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.1977ee						adjust_height
.1977ee		c2 20		rep #$20	                REP #$20        ; set A long
.1977f0		38		sec		                    SEC
.1977f1		a5 09		lda $09		                    LDA #S_ANSI_VARS.LINES_MAX,D
.1977f3		e5 19		sbc $19		                    SBC #S_ANSI_VARS.TMPPTR1,D
.1977f5		85 07		sta $07		                    STA #S_ANSI_VARS.LINES_VISIBLE,D
.1977f7		28		plp		done                PLP
.1977f8		60		rts		                    RTS
>1977f9		50 00 64 00 28 00 32 00		cols_by_res         .word 80,100,40,50
>197801		3c 00 4b 00 1e 00 25 00		lines_by_res        .word 60,75,30,37
.197809						ANSI_SETDEVICE
.197809		48		pha		                    PHA
.19780a		08		php		                    PHP
.19780b		e2 20		sep #$20	                SEP #$20        ; set A short
.19780d		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check the current output channel
.197811		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE               ; Is it the console?
.197813		f0 08		beq $19781d	                    BEQ console                     ; Yes: point to the console
.197815		c9 04		cmp #$04	                    CMP #CHAN_EVID                  ; Is it the EVID?
.197817		f0 0b		beq $197824	                    BEQ evid                        ; Check to see if the EVID is present
.197819		28		plp		bad_device          PLP
.19781a		68		pla		                    PLA
.19781b		38		sec		                    SEC
.19781c		60		rts		                    RTS
.19781d						console
.19781d		c2 20		rep #$20	                REP #$20        ; set A long
.19781f		a9 0c 00	lda #$000c	                    LDA #<>SCREENBEGIN              ; Point to the the main screen's variables
.197822		80 06		bra $19782a	                    BRA set_dp
.197824		ea		nop		evid                NOP
.197825		c2 20		rep #$20	                REP #$20        ; set A long
.197827		a9 60 00	lda #$0060	                    LDA #<>EVID_SCREENBEGIN         ; Yes: point to the EVID's variables
.19782a		5b		tcd		set_dp              TCD
.19782b		28		plp		                    PLP
.19782c		68		pla		                    PLA
.19782d		18		clc		                    CLC
.19782e		60		rts		                    RTS
.19782f						ANSI_PUTC
.19782f		da		phx		                    PHX
.197830		5a		phy		                    PHY
.197831		0b		phd		                    PHD
.197832		08		php		                    PHP
.197833		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197835		20 09 78	jsr $197809	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.197838		90 03		bcc $19783d	                    BCC get_state               ; If valid, check the current state
.19783a		82 86 00	brl $1978c3	                    BRL done                    ; If invalid, just return
.19783d		a6 1d		ldx $1d		get_state           LDX #S_ANSI_VARS.STATE,D    ; Get the current state
.19783f		f0 0c		beq $19784d	                    BEQ do_st_init              ; Dispatch to the correct code for the state
.197841		e0 01		cpx #$01	                    CPX #ST_ESCAPE
.197843		f0 1e		beq $197863	                    BEQ do_st_escape
.197845		e0 02		cpx #$02	                    CPX #ST_CSI
.197847		f0 2a		beq $197873	                    BEQ do_st_csi
.197849		64 1d		stz $1d		pr_and_reset        STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.19784b		80 06		bra $197853	                    BRA print_raw
.19784d		c9 1b		cmp #$1b	do_st_init          CMP #CHAR_ESC               ; Is it ESC?
.19784f		f0 07		beq $197858	                    BEQ go_escape               ; Yes, handle the ESC
.197851		90 0b		bcc $19785e	                    BLT do_control              ; If less than, handle as a control code
.197853		20 9b 79	jsr $19799b	print_raw           JSR ANSI_PUTRAWC            ; Otherwise: Just print the raw character
.197856		80 6b		bra $1978c3	                    BRA done
.197858		a9 01		lda #$01	go_escape           LDA #ST_ESCAPE
.19785a		85 1d		sta $1d		                    STA #S_ANSI_VARS.STATE,D    ; Move to the ESCAPE state
.19785c		80 65		bra $1978c3	                    BRA done
.19785e		20 5a 79	jsr $19795a	do_control          JSR ANSI_PR_CONTROL         ; Hand a single byte control code
.197861		80 60		bra $1978c3	                    BRA done
.197863		c9 5b		cmp #$5b	do_st_escape        CMP #'['                    ; Have we gotten 'ESC['?
.197865		d0 e2		bne $197849	                    BNE pr_and_reset            ; No: print this and return to ST_INIT
.197867		64 20		stz $20		                    STZ #S_ANSI_VARS.ARG0,D     ; Clear the arguments
.197869		64 21		stz $21		                    STZ #S_ANSI_VARS.ARG1,D
.19786b		64 1f		stz $1f		                    STZ #S_ANSI_VARS.ARGC,D
.19786d		a9 02		lda #$02	                    LDA #ST_CSI
.19786f		85 1d		sta $1d		                    STA #S_ANSI_VARS.STATE,D    ; Move to the CSI state
.197871		80 50		bra $1978c3	                    BRA done
.197873		c9 30		cmp #$30	do_st_csi           CMP #'0'                    ; Do we have a digit?
.197875		90 1d		bcc $197894	                    BLT csi_not_digit
.197877		c9 3a		cmp #$3a	                    CMP #'9'+1
.197879		b0 19		bcs $197894	                    BGE csi_not_digit
.19787b		38		sec		                    SEC                         ; Have digit... convert to a number
.19787c		e9 30		sbc #$30	                    SBC #'0'
.19787e		48		pha		                    PHA                         ; Save it
.19787f		a6 1f		ldx $1f		                    LDX #S_ANSI_VARS.ARGC,D
.197881		16 20		asl $20,x	                    ASL #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 2
.197883		b5 20		lda $20,x	                    LDA #S_ANSI_VARS.ARG0,D,X
.197885		0a		asl a		                    ASL A                       ; A := arg * 4
.197886		0a		asl a		                    ASL A                       ; A := arg * 8
.197887		18		clc		                    CLC
.197888		75 20		adc $20,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10
.19788a		95 20		sta $20,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := A
.19788c		18		clc		                    CLC
.19788d		68		pla		                    PLA                         ; Get the digit back
.19788e		75 20		adc $20,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10 + digit
.197890		95 20		sta $20,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 10 + digit
.197892		80 2f		bra $1978c3	                    BRA done                    ; And we're done with this particular character
.197894		c9 3b		cmp #$3b	csi_not_digit       CMP #';'                    ; Is it an argument separator?
.197896		d0 0e		bne $1978a6	                    BNE csi_not_sep
.197898		a5 1f		lda $1f		                    LDA #S_ANSI_VARS.ARGC,D     ; Get the argument count
.19789a		c9 02		cmp #$02	                    CMP #ANSI_MAX_ARG           ; Are we at the maximum argument count?
.19789c		d0 03		bne $1978a1	                    BNE csi_next_arg            ; No: move to the next argument
.19789e		82 a8 ff	brl $197849	                    BRL pr_and_reset            ; Yes: print and reset state
.1978a1		1a		inc a		csi_next_arg        INC A
.1978a2		85 1f		sta $1f		                    STA #S_ANSI_VARS.ARGC,D     ; Set the new argument count
.1978a4		80 1d		bra $1978c3	                    BRA done                    ; And we're done with this character
.1978a6		c9 41		cmp #$41	csi_not_sep         CMP #'A'
.1978a8		90 09		bcc $1978b3	                    BLT csi_not_upper
.1978aa		c9 5b		cmp #$5b	                    CMP #'Z'+1
.1978ac		b0 05		bcs $1978b3	                    BGE csi_not_upper
.1978ae		20 d2 78	jsr $1978d2	                    JSR ANSI_ANSI_UPPER         ; Process an ANSI upper case code
.1978b1		80 10		bra $1978c3	                    BRA done
.1978b3		c9 61		cmp #$61	csi_not_upper       CMP #'a'
.1978b5		90 09		bcc $1978c0	                    BLT csi_not_lower
.1978b7		c9 7b		cmp #$7b	                    CMP #'z'+1
.1978b9		b0 05		bcs $1978c0	                    BGE csi_not_lower
.1978bb		20 17 79	jsr $197917	                    JSR ANSI_ANSI_LOWER         ; Process an ANSI lower case code
.1978be		80 03		bra $1978c3	                    BRA done
.1978c0		82 86 ff	brl $197849	csi_not_lower       BRL pr_and_reset            ; Invalid sequence: print it and reset
.1978c3		28		plp		done                PLP
.1978c4		2b		pld		                    PLD
.1978c5		7a		ply		                    PLY
.1978c6		fa		plx		                    PLX
.1978c7		60		rts		                    RTS
.1978c8						ANSI_INVALID
.1978c8		08		php		                    PHP
.1978c9		e2 20		sep #$20	                SEP #$20        ; set A short
.1978cb		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.1978cd		20 9b 79	jsr $19799b	                    JSR ANSI_PUTRAWC            ; Print the character
.1978d0		28		plp		                    PLP
.1978d1		60		rts		                    RTS
.1978d2						ANSI_ANSI_UPPER
.1978d2		08		php		                    PHP
.1978d3		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1978d5		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.1978d7		38		sec		                    SEC
.1978d8		e9 40		sbc #$40	                    SBC #'@'
.1978da		0a		asl a		                    ASL A
.1978db		aa		tax		                    TAX
.1978dc		fc e1 78	jsr ($1978e1,x)	                    JSR (ansi_table,X)
.1978df		28		plp		                    PLP
.1978e0		60		rts		                    RTS
>1978e1		c8 78				ansi_table          .word <>ANSI_INVALID    ; '@' -- ICH -- Insert Character
>1978e3		b4 79				                    .word <>ANSI_CUU        ; 'A' -- CUU -- Cursor Up
>1978e5		c6 79				                    .word <>ANSI_CUD        ; 'B' -- CUD -- Cursor Down
>1978e7		d6 79				                    .word <>ANSI_CUF        ; 'C' -- CUF -- Cursor Forward
>1978e9		e6 79				                    .word <>ANSI_CUB        ; 'D' -- CUB -- Cursor Back
>1978eb		c8 78				                    .word <>ANSI_INVALID    ; 'E' -- CNL -- Cursor Next Line
>1978ed		c8 78				                    .word <>ANSI_INVALID    ; 'F' -- CPL -- Cursor Previous Line
>1978ef		c8 78				                    .word <>ANSI_INVALID    ; 'G' -- CHA -- Cursor Horizontal Absolute
>1978f1		f6 79				                    .word <>ANSI_CUP        ; 'H' -- CUP -- Cursor Position
>1978f3		c8 78				                    .word <>ANSI_INVALID    ; 'I'
>1978f5		fa 7a				                    .word <>ANSI_ED         ; 'J' -- ED -- Erase In Display
>1978f7		3d 7b				                    .word <>ANSI_EL         ; 'K' -- EL -- Erase In Line
>1978f9		c8 78				                    .word <>ANSI_INVALID    ; 'L'
>1978fb		c8 78				                    .word <>ANSI_INVALID    ; 'M'
>1978fd		c8 78				                    .word <>ANSI_INVALID    ; 'N'
>1978ff		c8 78				                    .word <>ANSI_INVALID    ; 'O'
>197901		c8 78				                    .word <>ANSI_INVALID    ; 'P' -- DCH -- Delete Character
>197903		c8 78				                    .word <>ANSI_INVALID    ; 'Q'
>197905		c8 78				                    .word <>ANSI_INVALID    ; 'R'
>197907		c8 78				                    .word <>ANSI_INVALID    ; 'S' -- SU -- Scroll Up
>197909		c8 78				                    .word <>ANSI_INVALID    ; 'T' -- SD -- Scroll Down
>19790b		c8 78				                    .word <>ANSI_INVALID    ; 'U'
>19790d		c8 78				                    .word <>ANSI_INVALID    ; 'V'
>19790f		c8 78				                    .word <>ANSI_INVALID    ; 'W'
>197911		c8 78				                    .word <>ANSI_INVALID    ; 'X'
>197913		c8 78				                    .word <>ANSI_INVALID    ; 'Y'
>197915		c8 78				                    .word <>ANSI_INVALID    ; 'Z'
.197917						ANSI_ANSI_LOWER
.197917		08		php		                    PHP
.197918		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19791a		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.19791c		38		sec		                    SEC
.19791d		e9 61		sbc #$61	                    SBC #'a'
.19791f		0a		asl a		                    ASL A
.197920		aa		tax		                    TAX
.197921		fc 26 79	jsr ($197926,x)	                    JSR (ansi_table,X)
.197924		28		plp		                    PLP
.197925		60		rts		                    RTS
>197926		c8 78				ansi_table          .word <>ANSI_INVALID    ; 'a'
>197928		c8 78				                    .word <>ANSI_INVALID    ; 'b'
>19792a		c8 78				                    .word <>ANSI_INVALID    ; 'c'
>19792c		c8 78				                    .word <>ANSI_INVALID    ; 'd'
>19792e		c8 78				                    .word <>ANSI_INVALID    ; 'e'
>197930		c8 78				                    .word <>ANSI_INVALID    ; 'f' -- HVP -- Horizontal Vertical Position
>197932		c8 78				                    .word <>ANSI_INVALID    ; 'g'
>197934		c8 78				                    .word <>ANSI_INVALID    ; 'h'
>197936		c8 78				                    .word <>ANSI_INVALID    ; 'i'
>197938		c8 78				                    .word <>ANSI_INVALID    ; 'j'
>19793a		c8 78				                    .word <>ANSI_INVALID    ; 'k'
>19793c		c8 78				                    .word <>ANSI_INVALID    ; 'l'
>19793e		0e 7a				                    .word <>ANSI_SGR        ; 'm' -- SGR -- Select Graphics Rendition
>197940		c8 78				                    .word <>ANSI_INVALID    ; 'n'
>197942		c8 78				                    .word <>ANSI_INVALID    ; 'o'
>197944		c8 78				                    .word <>ANSI_INVALID    ; 'p'
>197946		c8 78				                    .word <>ANSI_INVALID    ; 'q'
>197948		c8 78				                    .word <>ANSI_INVALID    ; 'r'
>19794a		c8 78				                    .word <>ANSI_INVALID    ; 's'
>19794c		c8 78				                    .word <>ANSI_INVALID    ; 't'
>19794e		c8 78				                    .word <>ANSI_INVALID    ; 'u'
>197950		c8 78				                    .word <>ANSI_INVALID    ; 'v'
>197952		c8 78				                    .word <>ANSI_INVALID    ; 'w'
>197954		c8 78				                    .word <>ANSI_INVALID    ; 'x'
>197956		c8 78				                    .word <>ANSI_INVALID    ; 'y'
>197958		c8 78				                    .word <>ANSI_INVALID    ; 'z'
.19795a						ANSI_PR_CONTROL
.19795a		08		php		                    PHP
.19795b		e2 20		sep #$20	                SEP #$20        ; set A short
.19795d		c2 10		rep #$10	                REP #$10        ; set X long
.19795f		c9 0d		cmp #$0d	                    CMP #CHAR_CR                ; Handle carriage return
.197961		f0 0e		beq $197971	                    BEQ do_cr
.197963		c9 0a		cmp #$0a	                    CMP #CHAR_LF                ; Handle line feed
.197965		f0 15		beq $19797c	                    BEQ do_lf
.197967		c9 08		cmp #$08	                    CMP #CHAR_BS                ; Handle back space
.197969		f0 16		beq $197981	                    BEQ do_bs
.19796b		c9 09		cmp #$09	                    CMP #CHAR_TAB               ; Handle TAB
.19796d		f0 17		beq $197986	                    BEQ do_tab
.19796f		80 28		bra $197999	                    BRA done
.197971		a2 00 00	ldx #$0000	do_cr               LDX #0                      ; Move to the beginning of the next line
.197974		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.197976		c8		iny		                    INY
.197977		20 0e 7c	jsr $197c0e	                    JSR ANSI_LOCATE
.19797a		80 1d		bra $197999	                    BRA done
.19797c		20 ee 7b	jsr $197bee	do_lf               JSR ANSI_CSRDOWN            ; Move the cursor down a line
.19797f		80 18		bra $197999	                    BRA done
.197981		20 b6 7b	jsr $197bb6	do_bs               JSR ANSI_CSRLEFT            ; Move the cursor to the left (TODO: delete to the left?)
.197984		80 13		bra $197999	                    BRA done
.197986						do_tab
.197986		c2 20		rep #$20	                REP #$20        ; set A long
.197988		a5 0e		lda $0e		                    LDA #S_ANSI_VARS.CURSORX,D  ; Move to the next power 8th column
.19798a		29 f7 ff	and #$fff7	                    AND #$FFF7
.19798d		18		clc		                    CLC
.19798e		69 08 00	adc #$0008	                    ADC #$0008
.197991		aa		tax		                    TAX
.197992		e2 20		sep #$20	                SEP #$20        ; set A short
.197994		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.197996		20 0e 7c	jsr $197c0e	                    JSR ANSI_LOCATE
.197999		28		plp		done                PLP
.19799a		60		rts		                    RTS
.19799b						ANSI_PUTRAWC
.19799b		da		phx		                    PHX
.19799c		5a		phy		                    PHY
.19799d		0b		phd		                    PHD
.19799e		08		php		                    PHP
.19799f		e2 20		sep #$20	                SEP #$20        ; set A short
.1979a1		20 09 78	jsr $197809	                    JSR ANSI_SETDEVICE              ; Look at the current output channel and point
.1979a4		b0 09		bcs $1979af	                    BCS done                        ; If invalid, just return
.1979a6		87 0b		sta [$0b]	                    STA [#S_ANSI_VARS.CURSORPOS,D]  ; Save the character on the screen
.1979a8		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Set the color based on CURCOLOR
.1979aa		87 13		sta [$13]	                    STA [#S_ANSI_VARS.COLORPOS,D]
.1979ac		20 8e 7b	jsr $197b8e	                    JSR ANSI_CSRRIGHT              ; And advance the cursor
.1979af		28		plp		done                PLP
.1979b0		2b		pld		                    PLD
.1979b1		7a		ply		                    PLY
.1979b2		fa		plx		                    PLX
.1979b3		60		rts		                    RTS
.1979b4						ANSI_CUU
.1979b4		08		php		                    PHP
.1979b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1979b7		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.1979b9		1a		inc a		                    INC A
.1979ba		a9 01		lda #$01	default             LDA #1                          ; Otherwise: treat it as 1
.1979bc		48		pha		loop                PHA                             ; Save the count
.1979bd		20 d2 7b	jsr $197bd2	                    JSR ANSI_CSRUP                  ; Cursor Up
.1979c0		68		pla		                    PLA                             ; Restore the count
.1979c1		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.1979c2		d0 f8		bne $1979bc	                    BNE loop
.1979c4		28		plp		                    PLP
.1979c5		60		rts		                    RTS
.1979c6						ANSI_CUD
.1979c6		08		php		                    PHP
.1979c7		e2 20		sep #$20	                SEP #$20        ; set A short
.1979c9		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.1979cb		1a		inc a		                    INC A
.1979cc		48		pha		loop                PHA                             ; Save the count
.1979cd		20 ee 7b	jsr $197bee	                    JSR ANSI_CSRDOWN                ; Cursor Down
.1979d0		68		pla		                    PLA                             ; Restore the count
.1979d1		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.1979d2		d0 f8		bne $1979cc	                    BNE loop
.1979d4		28		plp		                    PLP
.1979d5		60		rts		                    RTS
.1979d6						ANSI_CUF
.1979d6		08		php		                    PHP
.1979d7		e2 20		sep #$20	                SEP #$20        ; set A short
.1979d9		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.1979db		1a		inc a		                    INC A
.1979dc		48		pha		loop                PHA                             ; Save the count
.1979dd		20 8e 7b	jsr $197b8e	                    JSR ANSI_CSRRIGHT               ; Cursor right
.1979e0		68		pla		                    PLA                             ; Restore the count
.1979e1		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.1979e2		d0 f8		bne $1979dc	                    BNE loop
.1979e4		28		plp		                    PLP
.1979e5		60		rts		                    RTS
.1979e6						ANSI_CUB
.1979e6		08		php		                    PHP
.1979e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1979e9		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.1979eb		1a		inc a		                    INC A
.1979ec		48		pha		loop                PHA                             ; Save the count
.1979ed		20 b6 7b	jsr $197bb6	                    JSR ANSI_CSRLEFT                ; Cursor left
.1979f0		68		pla		                    PLA                             ; Restore the count
.1979f1		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.1979f2		d0 f8		bne $1979ec	                    BNE loop
.1979f4		28		plp		                    PLP
.1979f5		60		rts		                    RTS
.1979f6						ANSI_CUP
.1979f6		08		php		                    PHP
.1979f7		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1979f9		a6 20		ldx $20		                    LDX #S_ANSI_VARS.ARG0,D         ; Get the first argument
.1979fb		d0 02		bne $1979ff	                    BNE get_row
.1979fd		a2 01		ldx #$01	                    LDX #1                          ; Default to 1
.1979ff		a4 21		ldy $21		get_row             LDY #S_ANSI_VARS.ARG1,D         ; Get the second argument
.197a01		d0 02		bne $197a05	                    BNE adjust_coords
.197a03		a0 01		ldy #$01	                    LDY #1                          ; Default to 1
.197a05		ca		dex		adjust_coords       DEX                             ; Translate from base 1 to base 0 coordinates
.197a06		88		dey		                    DEY
.197a07		c2 30		rep #$30	                REP #$30        ; set A&X long
.197a09		20 0e 7c	jsr $197c0e	                    JSR ANSI_LOCATE                 ; Set the cursor position
.197a0c		28		plp		                    PLP
.197a0d		60		rts		                    RTS
.197a0e						ANSI_SGR
.197a0e		08		php		                    PHP
.197a0f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197a11		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.197a13		d0 0d		bne $197a22	                    BNE chk_1
.197a15		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR             ; 0 ==> Return to the default colors
.197a17		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197a19		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Switch off inversion
.197a1b		29 3f		and #$3f	                    AND #~(CONTROL_INVERT | CONTROL_BOLD)
.197a1d		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.197a1f		82 d6 00	brl $197af8	                    BRL done
.197a22		c9 01		cmp #$01	chk_1               CMP #1
.197a24		d0 0f		bne $197a35	                    BNE chk_2
.197a26		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Make the current color bold
.197a28		09 80		ora #$80	                    ORA #$80
.197a2a		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197a2c		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be bold
.197a2e		09 40		ora #$40	                    ORA #CONTROL_BOLD
.197a30		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.197a32		82 c3 00	brl $197af8	                    BRL done
.197a35		c9 02		cmp #$02	chk_2               CMP #2
.197a37		f0 04		beq $197a3d	                    BEQ normal_intensity
.197a39		c9 16		cmp #$16	chk_22              CMP #22
.197a3b		d0 0f		bne $197a4c	                    BNE chk_7
.197a3d		a5 12		lda $12		normal_intensity    LDA #S_ANSI_VARS.CURCOLOR,D     ; 2 ==> Set the foreground to normal intensity
.197a3f		29 7f		and #$7f	                    AND #~$80
.197a41		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197a43		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be normal
.197a45		29 bf		and #$bf	                    AND #~CONTROL_BOLD
.197a47		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.197a49		82 ac 00	brl $197af8	                    BRL done
.197a4c		c9 07		cmp #$07	chk_7               CMP #7
.197a4e		d0 2c		bne $197a7c	                    BNE chk_27
.197a50		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors already inverted?
.197a52		89 80		bit #$80	                    BIT #CONTROL_INVERT
.197a54		f0 03		beq $197a59	                    BEQ invert_on
.197a56		82 9f 00	brl $197af8	                    BRL done                        ; Yes: just finish
.197a59		09 80		ora #$80	invert_on           ORA #CONTROL_INVERT             ; No: Mark that the colors are inverted
.197a5b		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.197a5d		a5 12		lda $12		swap_colors         LDA #S_ANSI_VARS.CURCOLOR,D     ; Exchange the upper and lower nibbles
.197a5f		0a		asl a		                    ASL  A
.197a60		69 80		adc #$80	                    ADC  #$80
.197a62		2a		rol a		                    ROL  A
.197a63		0a		asl a		                    ASL  A
.197a64		69 80		adc #$80	                    ADC  #$80
.197a66		2a		rol a		                    ROL  A
.197a67		29 f7		and #$f7	                    AND #%11110111                  ; Make sure the background is not bolded
.197a69		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197a6b		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.197a6d		89 40		bit #$40	                    BIT #CONTROL_BOLD
.197a6f		d0 03		bne $197a74	                    BNE bold_on
.197a71		82 84 00	brl $197af8	                    BRL done                        ; No: we're done
.197a74		a5 12		lda $12		bold_on             LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.197a76		09 80		ora #$80	                    ORA #$80
.197a78		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197a7a		80 7c		bra $197af8	                    BRA done
.197a7c		c9 1b		cmp #$1b	chk_27              CMP #27
.197a7e		d0 0c		bne $197a8c	                    BNE chk_39
.197a80		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors inverted?
.197a82		89 80		bit #$80	                    BIT #CONTROL_INVERT
.197a84		f0 72		beq $197af8	                    BEQ done                        ; No: just finish
.197a86		29 7f		and #$7f	                    AND #~CONTROL_INVERT            ; Yes: Mark that the colors are back to normal
.197a88		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.197a8a		80 d1		bra $197a5d	                    BRA swap_colors                 ; And go swap the colors
.197a8c		c9 27		cmp #$27	chk_39              CMP #39
.197a8e		d0 10		bne $197aa0	                    BNE chk_49
.197a90		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.197a92		29 0f		and #$0f	                    AND #$0F
.197a94		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197a96		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.197a98		29 f0		and #$f0	                    AND #$F0
.197a9a		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.197a9c		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197a9e		80 58		bra $197af8	                    BRA done
.197aa0		c9 31		cmp #$31	chk_49              CMP #49
.197aa2		d0 10		bne $197ab4	                    BNE chk_foreground
.197aa4		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.197aa6		29 f0		and #$f0	                    AND #$F0
.197aa8		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197aaa		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.197aac		29 0f		and #$0f	                    AND #$0F
.197aae		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.197ab0		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197ab2		80 44		bra $197af8	                    BRA done
.197ab4		c9 1e		cmp #$1e	chk_foreground      CMP #30                         ; If [30..37], set the foreground color
.197ab6		90 29		bcc $197ae1	                    BLT chk_background
.197ab8		c9 26		cmp #$26	                    CMP #38
.197aba		b0 25		bcs $197ae1	                    BGE chk_background
.197abc		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.197abe		29 0f		and #$0f	                    AND #$0F
.197ac0		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197ac2		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D
.197ac4		38		sec		                    SEC
.197ac5		e9 1e		sbc #$1e	                    SBC #30
.197ac7		0a		asl a		                    ASL A
.197ac8		0a		asl a		                    ASL A
.197ac9		0a		asl a		                    ASL A
.197aca		0a		asl a		                    ASL A
.197acb		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.197acd		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197acf		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.197ad1		89 40		bit #$40	                    BIT #CONTROL_BOLD
.197ad3		d0 03		bne $197ad8	                    BNE bold_fore                   ; No: we're done
.197ad5		82 20 00	brl $197af8	                    BRL done
.197ad8		a5 12		lda $12		bold_fore           LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.197ada		09 80		ora #$80	                    ORA #$80
.197adc		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197ade		82 17 00	brl $197af8	                    BRL done
.197ae1		c9 28		cmp #$28	chk_background      CMP #40                         ; If [40..47], set the background color
.197ae3		90 13		bcc $197af8	                    BLT done
.197ae5		c9 30		cmp #$30	                    CMP #48
.197ae7		b0 0f		bcs $197af8	                    BGE done
.197ae9		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.197aeb		29 f0		and #$f0	                    AND #$F0
.197aed		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197aef		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D
.197af1		38		sec		                    SEC
.197af2		e9 28		sbc #$28	                    SBC #40
.197af4		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.197af6		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.197af8		28		plp		done                PLP
.197af9		60		rts		                    RTS
.197afa						ANSI_ED
.197afa		5a		phy		                    PHY
.197afb		08		php		                    PHP
.197afc		e2 20		sep #$20	                SEP #$20        ; set A short
.197afe		c2 10		rep #$10	                REP #$10        ; set X long
.197b00		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.197b02		d0 0f		bne $197b13	                    BNE not_0                       ; Is the code 0?
.197b04						code_0
.197b04		a9 20		lda #$20	                    LDA #' '
.197b06		a4 17		ldy $17		                    LDY #CURSORPOS,D                ; Start with the cursor's position
.197b08		97 0c		sta [$0c],y	code_0_loop         STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.197b0a		c8		iny		                    INY                             ; Go to the next position
.197b0b		c0 00 20	cpy #$2000	                    CPY #$2000                      ; Have we reached the end?
.197b0e		d0 f8		bne $197b08	                    BNE code_0_loop                 ; No: keep going
.197b10		82 27 00	brl $197b3a	                    BRL done
.197b13		c9 01		cmp #$01	not_0               CMP #1                          ; Is the code 1?
.197b15		d0 0e		bne $197b25	                    BNE not_1
.197b17						code_1
.197b17		a9 20		lda #$20	                    LDA #' '
.197b19		a4 17		ldy $17		                    LDY #CURSORPOS,D                ; Start with the cursor's position
.197b1b		97 0c		sta [$0c],y	code_1_loop         STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.197b1d		88		dey		                    DEY                             ; Go to the previous position
.197b1e		d0 fb		bne $197b1b	                    BNE code_1_loop
.197b20		97 0c		sta [$0c],y	                    STA [#SCREENBEGIN,D],Y          ; Clear the first cell
.197b22		82 15 00	brl $197b3a	                    BRL done
.197b25		c9 02		cmp #$02	not_1               CMP #2                          ; Is the code 2 or 3?
.197b27		f0 04		beq $197b2d	                    BEQ code_2_3
.197b29		c9 03		cmp #$03	                    CMP #3
.197b2b		d0 0d		bne $197b3a	                    BNE done                        ; No: just ignore the sequence
.197b2d						code_2_3
.197b2d		a9 20		lda #$20	                    LDA #' '
.197b2f		a0 00 00	ldy #$0000	                    LDY #0                          ; Start with the cursor's position
.197b32		97 0c		sta [$0c],y	code_2_3_loop       STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.197b34		c8		iny		                    INY                             ; Go to the next position
.197b35		c0 00 20	cpy #$2000	                    CPY #$2000                      ; Have we reached the end?
.197b38		d0 ce		bne $197b08	                    BNE code_0_loop                 ; No: keep going
.197b3a		28		plp		done                PLP
.197b3b		7a		ply		                    PLY
.197b3c		60		rts		                    RTS
.197b3d						ANSI_EL
.197b3d		da		phx		                    PHX
.197b3e		5a		phy		                    PHY
.197b3f		08		php		                    PHP
.197b40		c2 30		rep #$30	                REP #$30        ; set A&X long
.197b42		38		sec		                    SEC
.197b43		a5 0b		lda $0b		                    LDA #S_ANSI_VARS.CURSORPOS,D        ; Compute the address of the first character of the line
.197b45		e5 0e		sbc $0e		                    SBC #S_ANSI_VARS.CURSORX,D
.197b47		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.197b49		e2 20		sep #$20	                SEP #$20        ; set A short
.197b4b		a5 02		lda $02		                    LDA #S_ANSI_VARS.SCREENBEGIN+2,D    ; Get the bank of the screen
.197b4d		85 1b		sta $1b		                    STA #S_ANSI_VARS.TMPPTR1+2,D        ; And put it in the TMPPTR1
.197b4f		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.197b51		d0 0e		bne $197b61	                    BNE not_0                           ; Is the code 0?
.197b53						code_0
.197b53		a9 20		lda #$20	                    LDA #' '
.197b55		a4 0e		ldy $0e		                    LDY #S_ANSI_VARS.CURSORX,D          ; Start at the cursor position
.197b57		97 19		sta [$19],y	code_0_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.197b59		c8		iny		                    INY
.197b5a		c4 05		cpy $05		                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.197b5c		d0 f9		bne $197b57	                    BNE code_0_loop                     ; No: keep looping
.197b5e		82 29 00	brl $197b8a	                    BRL done
.197b61		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.197b63		d0 11		bne $197b76	                    BNE not_1
.197b65						code_1
.197b65		a9 20		lda #$20	                    LDA #' '
.197b67		a0 00 00	ldy #$0000	                    LDY #0
.197b6a		97 19		sta [$19],y	code_1_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.197b6c		c8		iny		                    INY
.197b6d		c4 0e		cpy $0e		                    CPY #S_ANSI_VARS.CURSORX,D          ; Have we reached the cursor?
.197b6f		d0 f9		bne $197b6a	                    BNE code_1_loop                     ; No: keep looping
.197b71		97 19		sta [$19],y	                    STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; And clear under the cursor
.197b73		82 14 00	brl $197b8a	                    BRL done
.197b76		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.197b78		f0 04		beq $197b7e	                    BEQ code_2_3
.197b7a		c9 03		cmp #$03	                    CMP #3
.197b7c		d0 0c		bne $197b8a	                    BNE done                            ; No: just ignore the sequence
.197b7e						code_2_3
.197b7e		a9 20		lda #$20	                    LDA #' '
.197b80		a0 00 00	ldy #$0000	                    LDY #0
.197b83		97 19		sta [$19],y	code_2_3_loop       STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.197b85		c8		iny		                    INY
.197b86		c4 05		cpy $05		                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.197b88		d0 f9		bne $197b83	                    BNE code_2_3_loop                   ; No: keep looping
.197b8a		28		plp		done                PLP
.197b8b		7a		ply		                    PLY
.197b8c		fa		plx		                    PLX
.197b8d		60		rts		                    RTS
.197b8e						ANSI_CSRRIGHT
.197b8e		da		phx		                    PHX
.197b8f		5a		phy		                    PHY
.197b90		0b		phd		                    PHD
.197b91		08		php		                    PHP
.197b92		c2 30		rep #$30	                REP #$30        ; set A&X long
.197b94		20 09 78	jsr $197809	                    JSR ANSI_SETDEVICE                  ; Look at the current output channel and point
.197b97		b0 18		bcs $197bb1	                    BCS done                            ; If invalid, just return
.197b99		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the new column
.197b9b		e8		inx		                    INX
.197b9c		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the current row
.197b9e		e4 03		cpx $03		                    CPX #S_ANSI_VARS.COLS_VISIBLE,D     ; Are we off screen?
.197ba0		90 0c		bcc $197bae	                    BCC nowrap                          ; No: just set the position
.197ba2		a2 00 00	ldx #$0000	                    LDX #0                              ; Yes: move to the first column
.197ba5		c8		iny		                    INY                                 ; And move to the next row
.197ba6		c4 07		cpy $07		                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Are we still off screen?
.197ba8		90 04		bcc $197bae	                    BCC nowrap                          ; No: just set the position
.197baa		88		dey		                    DEY                                 ; Yes: lock to the last row
.197bab		20 70 7c	jsr $197c70	                    JSR ANSI_SCROLLUP                   ; But scroll the screen up
.197bae		20 0e 7c	jsr $197c0e	nowrap              JSR ANSI_LOCATE                     ; Set the cursor position
.197bb1		28		plp		done                PLP
.197bb2		2b		pld		                    PLD
.197bb3		7a		ply		                    PLY
.197bb4		fa		plx		                    PLX
.197bb5		60		rts		                    RTS
.197bb6						ANSI_CSRLEFT
.197bb6		da		phx		                    PHX
.197bb7		5a		phy		                    PHY
.197bb8		0b		phd		                    PHD
.197bb9		08		php		                    PHP
.197bba		c2 30		rep #$30	                REP #$30        ; set A&X long
.197bbc		20 09 78	jsr $197809	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.197bbf		b0 0c		bcs $197bcd	                    BCS done                    ; If invalid, just return
.197bc1		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D  ; Check that we are not already @ Zero
.197bc3		f0 08		beq $197bcd	                    BEQ done                    ; If so, just ignore this call
.197bc5		ca		dex		                    DEX
.197bc6		86 0e		stx $0e		                    STX #S_ANSI_VARS.CURSORX,D
.197bc8		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.197bca		20 0e 7c	jsr $197c0e	                    JSR ANSI_LOCATE
.197bcd		28		plp		done                PLP
.197bce		2b		pld		                    PLD
.197bcf		7a		ply		                    PLY
.197bd0		fa		plx		                    PLX
.197bd1		60		rts		                    RTS
.197bd2						ANSI_CSRUP
.197bd2		da		phx		                    PHX
.197bd3		5a		phy		                    PHY
.197bd4		0b		phd		                    PHD
.197bd5		08		php		                    PHP
.197bd6		c2 30		rep #$30	                REP #$30        ; set A&X long
.197bd8		20 09 78	jsr $197809	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.197bdb		b0 0c		bcs $197be9	                    BCS done                    ; If invalid, just return
.197bdd		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D  ; Check if we are not already @ Zero
.197bdf		f0 08		beq $197be9	                    BEQ done                    ; If we are, just ignore the call
.197be1		88		dey		                    DEY
.197be2		84 10		sty $10		                    STY #S_ANSI_VARS.CURSORY,D
.197be4		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D
.197be6		20 0e 7c	jsr $197c0e	                    JSR ANSI_LOCATE
.197be9		28		plp		done                PLP
.197bea		2b		pld		                    PLD
.197beb		7a		ply		                    PLY
.197bec		fa		plx		                    PLX
.197bed		60		rts		                    RTS
.197bee						ANSI_CSRDOWN
.197bee		da		phx		                    PHX
.197bef		5a		phy		                    PHY
.197bf0		0b		phd		                    PHD
.197bf1		08		php		                    PHP
.197bf2		c2 30		rep #$30	                REP #$30        ; set A&X long
.197bf4		20 09 78	jsr $197809	                    JSR ANSI_SETDEVICE                  ; Look at the current output channel and point
.197bf7		b0 10		bcs $197c09	                    BCS done                            ; If invalid, just return
.197bf9		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the current column
.197bfb		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the new row
.197bfd		c8		iny		                    INY
.197bfe		c4 07		cpy $07		                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Check to see if we're off screen
.197c00		90 04		bcc $197c06	                    BCC noscroll                        ; No: go ahead and set the position
.197c02		88		dey		                    DEY                                 ; Yes: go back to the last row
.197c03		20 70 7c	jsr $197c70	                    JSR ANSI_SCROLLUP                   ; But scroll the screen up
.197c06		20 0e 7c	jsr $197c0e	noscroll            JSR ANSI_LOCATE                     ; And set the cursor position
.197c09		28		plp		done                PLP
.197c0a		2b		pld		                    PLD
.197c0b		7a		ply		                    PLY
.197c0c		fa		plx		                    PLX
.197c0d		60		rts		                    RTS
.197c0e						ANSI_LOCATE
.197c0e		da		phx		                    PHX
.197c0f		5a		phy		                    PHY
.197c10		0b		phd		                    PHD
.197c11		08		php		                    PHP
.197c12		20 09 78	jsr $197809	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.197c15		b0 54		bcs $197c6b	                    BCS done                    ; If invalid, just return
.197c17		c2 30		rep #$30	                REP #$30        ; set A&X long
.197c19						locate_scroll
.197c19		c4 07		cpy $07		                    CPY #S_ANSI_VARS.LINES_VISIBLE,D
.197c1b		90 06		bcc $197c23	                    BCC locate_scrolldone
.197c1d		20 70 7c	jsr $197c70	                    JSR ANSI_SCROLLUP
.197c20		88		dey		                    DEY
.197c21		80 f6		bra $197c19	                    BRA locate_scroll
.197c23						locate_scrolldone
.197c23		86 0e		stx $0e		                    STX #S_ANSI_VARS.CURSORX,D
.197c25		84 10		sty $10		                    STY #S_ANSI_VARS.CURSORY,D
.197c27		a5 00		lda $00		                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.197c29						locate_row
.197c29		c0 00 00	cpy #$0000	                    CPY #$0
.197c2c		f0 08		beq $197c36	                    BEQ locate_right
.197c2e		18		clc		locate_down         CLC
.197c2f		65 05		adc $05		                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.197c31		88		dey		                    DEY
.197c32		f0 02		beq $197c36	                    BEQ locate_right
.197c34		80 f8		bra $197c2e	                    BRA locate_down
.197c36		18		clc		locate_right        CLC
.197c37		65 0e		adc $0e		                    ADC #S_ANSI_VARS.CURSORX,D      ; move the cursor right X columns
.197c39		85 0b		sta $0b		                    STA #S_ANSI_VARS.CURSORPOS,D
.197c3b		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.197c3d		e2 20		sep #$20	                SEP #$20        ; set A short
.197c3f		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT
.197c43		c9 04		cmp #$04	                    CMP #CHAN_EVID
.197c45		f0 0e		beq $197c55	                    beq locate_evid
.197c47		c2 20		rep #$20	                REP #$20        ; set A long
.197c49		98		tya		                    TYA
.197c4a		8f 16 00 af	sta $af0016	                    STA @l VKY_TXT_CURSOR_Y_REG_L
.197c4e		8a		txa		                    TXA
.197c4f		8f 14 00 af	sta $af0014	                    STA @l VKY_TXT_CURSOR_X_REG_L
.197c53		80 0c		bra $197c61	                    BRA update_colorpos
.197c55						locate_evid
.197c55		c2 20		rep #$20	                REP #$20        ; set A long
.197c57		98		tya		                    TYA
.197c58		8f 16 1e ae	sta $ae1e16	                    STA @l EVID_TXT_CURSOR_Y_REG_L
.197c5c		8a		txa		                    TXA
.197c5d		8f 14 1e ae	sta $ae1e14	                    STA @l EVID_TXT_CURSOR_X_REG_L
.197c61						update_colorpos
.197c61		c2 20		rep #$20	                REP #$20        ; set A long
.197c63		18		clc		                    CLC
.197c64		a5 0b		lda $0b		                    LDA #S_ANSI_VARS.CURSORPOS,D
.197c66		69 00 20	adc #$2000	                    ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.197c69		85 13		sta $13		                    STA #S_ANSI_VARS.COLORPOS,D
.197c6b		28		plp		done                PLP
.197c6c		2b		pld		                    PLD
.197c6d		7a		ply		                    PLY
.197c6e		fa		plx		                    PLX
.197c6f		60		rts		                    RTS
.197c70						ANSI_SCROLLUP
.197c70		da		phx		                    PHX
.197c71		5a		phy		                    PHY
.197c72		8b		phb		                    PHB
.197c73		0b		phd		                    PHD
.197c74		08		php		                    PHP
.197c75		20 09 78	jsr $197809	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.197c78		b0 59		bcs $197cd3	                    BCS done                    ; If invalid, just return
.197c7a		c2 30		rep #$30	                REP #$30        ; set A&X long
.197c7c		a5 05		lda $05		                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.197c7e		8f 00 01 00	sta $000100	                    STA @l UNSIGNED_MULT_A_LO
.197c82		a5 07		lda $07		                    LDA #S_ANSI_VARS.LINES_VISIBLE,D
.197c84		8f 02 01 00	sta $000102	                    STA @l UNSIGNED_MULT_B_LO
.197c88		af 04 01 00	lda $000104	                    LDA @l UNSIGNED_MULT_AL_LO
.197c8c		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.197c8e		18		clc		                    CLC
.197c8f		a9 00 20	lda #$2000	                    LDA #$2000
.197c92		a8		tay		                    TAY
.197c93		65 05		adc $05		                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.197c95		aa		tax		                    TAX
.197c96		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.197c98		54 ae ae	mvn $ae,$ae	                    MVN $AE,$AE
.197c9b		c2 30		rep #$30	                REP #$30        ; set A&X long
.197c9d		18		clc		                    CLC
.197c9e		a9 00 40	lda #$4000	                    LDA #$4000
.197ca1		a8		tay		                    TAY
.197ca2		65 05		adc $05		                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.197ca4		aa		tax		                    TAX
.197ca5		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.197ca7		54 ae ae	mvn $ae,$ae	                    MVN $AE,$AE
.197caa						vicky_lastline
.197caa		c2 20		rep #$20	                REP #$20        ; set A long
.197cac		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.197cae		48		pha		                    PHA
.197caf		18		clc		                    CLC
.197cb0		65 00		adc $00		                    ADC #S_ANSI_VARS.SCREENBEGIN,D
.197cb2		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.197cb4		a0 00 00	ldy #$0000	start_clear         LDY #0
.197cb7		a9 20 00	lda #$0020	                    LDA #' '
.197cba		97 19		sta [$19],y	clr_text            STA [#S_ANSI_VARS.TMPPTR1,D],Y
.197cbc		c8		iny		                    INY
.197cbd		c4 0f		cpy $0f		                    CPY #COLS_VISIBLE,D
.197cbf		d0 f9		bne $197cba	                    BNE clr_text
.197cc1		68		pla		vicky_lastcolor     PLA
.197cc2		18		clc		                    CLC
.197cc3		65 16		adc $16		                    ADC #S_ANSI_VARS.COLORBEGIN,D
.197cc5		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.197cc7		a0 00 00	ldy #$0000	start_color         LDY #0
.197cca		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.197ccc		97 19		sta [$19],y	clr_color           STA [#S_ANSI_VARS.TMPPTR1,D],Y
.197cce		c8		iny		                    INY
.197ccf		c4 03		cpy $03		                    CPY #S_ANSI_VARS.COLS_VISIBLE,D
.197cd1		d0 f9		bne $197ccc	                    BNE clr_color
.197cd3		28		plp		done                PLP
.197cd4		2b		pld		                    PLD
.197cd5		ab		plb		                    PLB
.197cd6		7a		ply		                    PLY
.197cd7		fa		plx		                    PLX
.197cd8		60		rts		                    RTS
.197cd9						ANSI_CLR
.197cd9		da		phx		                    PHX
.197cda		5a		phy		                    PHY
.197cdb		0b		phd		                    PHD
.197cdc		08		php		                    PHP
.197cdd		20 09 78	jsr $197809	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.197ce0		b0 1e		bcs $197d00	                    BCS done                    ; If invalid, just return
.197ce2		e2 20		sep #$20	                SEP #$20        ; set A short
.197ce4		c2 10		rep #$10	                REP #$10        ; set X long
.197ce6		a0 00 00	ldy #$0000	                    LDY #0
.197ce9		a9 20		lda #$20	                    LDA #$20		            ; Fill the Entire Screen with Space
.197ceb		97 00		sta [$00],y	iclearloop0	        STA [#S_ANSI_VARS.SCREENBEGIN,D],Y
.197ced		c8		iny		                    INY
.197cee		c0 00 20	cpy #$2000	                    CPY #$2000
.197cf1		d0 f8		bne $197ceb	                    BNE iclearloop0
.197cf3		a0 00 00	ldy #$0000	                    LDY	#0
.197cf6		a5 1e		lda $1e		                    LDA #CURCOLOR,D             ; Fill the current color
.197cf8		97 16		sta [$16],y	evid_clearloop1     STA [#S_ANSI_VARS.COLORBEGIN,D],Y
.197cfa		c8		iny		                    INY
.197cfb		c0 00 20	cpy #$2000	                    CPY #$2000
.197cfe		d0 f8		bne $197cf8	                    BNE evid_clearloop1
.197d00		28		plp		done                PLP
.197d01		2b		pld		                    PLD
.197d02		7a		ply		                    PLY
.197d03		fa		plx		                    PLX
.197d04		60		rts		                    RTS

;******  Return to file: src\kernel.asm

.197d05						    KERNEL_DATA
>197d05		20 20 20 20 0b 0c 0b 0c		    greet_msg   .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " UU    UU" ,$0D
>197d0d		0b 0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>197d1d		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>197d25		0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>197d34		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>197d3c		0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>197d4a		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>197d52		0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>197d5f		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UUUUUUUU",$0D
>197d67		0b 0c 20 55 55 55 55 55 55 55 55 0d
>197d73		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX U -- 1,572,864 Bytes Free", $0D
>197d7b		45 4e 49 58 20 55 20 2d 2d 20 31 2c 35 37 32 2c
>197d8b		38 36 34 20 42 79 74 65 73 20 46 72 65 65 0d
>197d9a		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel Date: March 13th, 2021",$0D
>197da2		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>197db2		6e 65 6c 20 44 61 74 65 3a 20 4d 61 72 63 68 20
>197dc2		31 33 74 68 2c 20 32 30 32 31 0d

;******  Processing file: src\version.asm

>197dcd		76 30 2e 33 2e 30 2d 61		.text "v0.3.0-alpha+1636 (2021-04-30)"
>197dd5		6c 70 68 61 2b 31 36 33 36 20 28 32 30 32 31 2d
>197de5		30 34 2d 33 30 29

;******  Return to file: src\kernel.asm

>197deb		0d 00				                .text $0D,$00
>197ded		1d 1d 1d 1d 1d 1d 8d 8d		  greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>197df5		4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>197e05		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>197e15		fd fd
>197e17		1d 1d 1d 1d 1d 8d 8d 4d		  greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>197e1f		4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>197e2f		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>197e3f		fd fd
>197e41		1d 1d 1d 1d 8d 8d 4d 4d		  greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>197e49		2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>197e59		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>197e69		fd fd
>197e6b		1d 1d 1d 8d 8d 4d 4d 2d		  greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>197e73		2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>197e83		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>197e93		fd fd
>197e95		1d 1d 8d 8d 4d 4d 2d 2d		  greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>197e9d		5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>197ead		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>197ebd		fd fd
>197ebf		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>197ec3		00 00 80 ff			                .text $00, $00, $80, $FF
>197ec7		00 80 00 ff			                .text $00, $80, $00, $FF
>197ecb		80 00 00 ff			                .text $80, $00, $00, $FF
>197ecf		00 80 80 ff			                .text $00, $80, $80, $FF
>197ed3		80 80 00 ff			                .text $80, $80, $00, $FF
>197ed7		80 00 80 ff			                .text $80, $00, $80, $FF
>197edb		80 80 80 ff			                .text $80, $80, $80, $FF
>197edf		00 45 ff ff			                .text $00, $45, $FF, $FF
>197ee3		13 45 8b ff			                .text $13, $45, $8B, $FF
>197ee7		00 00 20 ff			                .text $00, $00, $20, $FF
>197eeb		00 20 00 ff			                .text $00, $20, $00, $FF
>197eef		20 00 00 ff			                .text $20, $00, $00, $FF
>197ef3		20 20 20 ff			                .text $20, $20, $20, $FF
>197ef7		40 40 40 ff			                .text $40, $40, $40, $FF
>197efb		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>197eff		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>197f03		00 00 80 ff			                .text $00, $00, $80, $FF
>197f07		00 80 00 ff			                .text $00, $80, $00, $FF
>197f0b		80 00 00 ff			                .text $80, $00, $00, $FF
>197f0f		00 20 20 ff			                .text $00, $20, $20, $FF
>197f13		20 20 00 ff			                .text $20, $20, $00, $FF
>197f17		20 00 20 ff			                .text $20, $00, $20, $FF
>197f1b		20 20 20 ff			                .text $20, $20, $20, $FF
>197f1f		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>197f23		13 45 8b ff			                .text $13, $45, $8B, $FF
>197f27		00 00 20 ff			                .text $00, $00, $20, $FF
>197f2b		00 20 00 ff			                .text $00, $20, $00, $FF
>197f2f		40 00 00 ff			                .text $40, $00, $00, $FF
>197f33		10 10 10 ff			                .text $10, $10, $10, $FF
>197f37		40 40 40 ff			                .text $40, $40, $40, $FF
>197f3b		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>197f3f		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>197f47		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>197f57		00
>197f58		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>197f60		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>197f70		00
>197f71		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>197f79		20 45 78 65 63 75 74 65 64 2e 0d 00
>197f85		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>197f8d		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>197f9d		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>197fa5		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>197fb5		64 2e 2e 2e 0d 00
>197fbb		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>197fc3		20 50 72 65 73 65 6e 74 0d 00
>197fcd		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>197fd5		65 73 65 6e 74 0d 00
>197fdc		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>197fe4		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>197ff4		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>198004		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>19800c		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>19801c		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>198029		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>198031		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>19803d		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>198045		54 55 52 45 20 46 4f 55 4e 44 2e 00
>198051		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>198059		45 44 2e 00
>19805d		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>198065		47 20 42 4d 50 20 50 41 52 53 45 52 00
>198072		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>19807a		50 72 65 73 65 6e 74 3a 00
>198083		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>19808b		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>19809b		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>1980a9		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>1980b1		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>1980c1		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>1980ce		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>1980d6		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>1980e6		72 64 2e 00
>1980ea		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>1980f2		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>198102		49 44 45 20 64 72 69 76 65 2e 00
>19810d		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>198115		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>198125		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>198133		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>19813b		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>19814a		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>198152		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>198161		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>198169		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>198179		2e 2e 00
>19817c		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>198184		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>19818c		52 4f 52 00
>198190		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>198198		38 39 41 42 43 44 45 46 00
>1981a1						.align 256
>198200		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198208		37 38 39 30 2d 3d 08 09
>198210		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198218		6f 70 5b 5d 0d 00 61 73
>198220		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198228		27 60 00 5c 7a 78 63 76
>198230		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>198238		00 20 00 81 82 83 84 85
>198240		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>198248		11 00 00 9d 00 1d 00 00
>198250		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>198258		8c 00 00 00 00 00 00 00
>198260		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198268		00 00 00 00 00 00 00 00
>198270		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198278		00 00 00 00 00 00 00 00
>198280		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>198288		26 2a 28 29 5f 2b 08 09
>198290		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>198298		4f 50 7b 7d 0d 00 41 53
>1982a0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>1982a8		22 7e 00 7c 5a 58 43 56
>1982b0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1982b8		00 20 00 00 00 00 00 00
>1982c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1982c8		00 00 00 00 00 00 00 00
>1982d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1982d8		00 00 00 00 00 00 00 00
>1982e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1982e8		00 00 00 00 00 00 00 00
>1982f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1982f8		00 00 00 00 00 00 00 00
>198300		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198308		37 38 39 30 2d 3d 08 09
>198310		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>198318		0f 10 5b 5d 0d 00 01 13
>198320		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>198328		27 00 00 5c 1a 18 03 16
>198330		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198338		00 20 00 00 00 00 00 00
>198340		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198348		00 00 00 00 00 00 00 00
>198350		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198358		00 00 00 00 00 00 00 00
>198360		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198368		00 00 00 00 00 00 00 00
>198370		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198378		00 00 00 00 00 00 00 00
>198380		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198388		37 38 39 30 2d 3d 08 09
>198390		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198398		6f 70 5b 5d 0d 00 61 73
>1983a0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>1983a8		27 60 00 5c 7a 78 63 76
>1983b0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1983b8		00 20 00 00 00 00 00 00
>1983c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1983c8		00 00 00 00 00 00 00 00
>1983d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1983d8		00 00 00 00 00 00 00 00
>1983e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1983e8		00 00 00 00 00 00 00 00
>1983f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1983f8		00 00 00 00 00 00 00 00
>198400		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198408		37 38 39 30 2d 3d 08 09
>198410		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198418		6f 70 5b 5d 0d 00 61 73
>198420		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198428		27 60 00 5c 7a 78 63 76
>198430		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198438		00 20 00 00 00 00 00 00
>198440		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198448		00 00 00 00 00 00 00 00
>198450		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198458		00 00 00 00 00 00 00 00
>198460		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198468		00 00 00 00 00 00 00 00
>198470		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198478		00 00 00 00 00 00 00 00
>198480		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>198488		00 00 00 00 00 00 00 00
>198490		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>198498		00 00 00 00 00 00 00 00
>1984a0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>1984a8		00 00 00 00 00 00 00 00
>1984b0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>1984b8		00 00 00 00 00 00 00 00
>1984c0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>1984c8		11 00 00 9d 00 1d 00 05
>1984d0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1984d8		00 00 00 00 00 00 00 00
>1984e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1984e8		00 00 00 00 00 00 00 00
>1984f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1984f8		00 00 00 00 00 00 00 00
>198500						.align 256
>198500		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>198508		34 37 3a 3d 3f 41 44 46
>198510		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>198518		57 58 5a 5b 5d 5e 60 61
>198520		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>198528		6d 6f 70 71 72 73 75 76
>198530		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>198538		80 81 82 83 84 85 86 87
>198540		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>198548		8f 90 91 92 93 93 94 95
>198550		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>198558		9d 9e 9e 9f a0 a1 a2 a2
>198560		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>198568		a9 aa ab ab ac ad ae ae
>198570		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>198578		b5 b5 b6 b7 b7 b8 b9 b9
>198580		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>198588		bf c0 c0 c1 c2 c2 c3 c4
>198590		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>198598		c9 ca ca cb cb cc cd cd
>1985a0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>1985a8		d2 d3 d4 d4 d5 d5 d6 d6
>1985b0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>1985b8		db dc dc dd de de df df
>1985c0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>1985c8		e4 e4 e5 e5 e6 e6 e7 e7
>1985d0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>1985d8		ec ec ed ed ee ee ef ef
>1985e0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>1985e8		f4 f4 f5 f5 f6 f6 f7 f7
>1985f0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>1985f8		fb fc fc fd fd fe fe ff
>198600						.align 256
>198600		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>198608		25 27 2a 2c 2e 30 32 34
>198610		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>198618		44 46 47 49 4a 4c 4d 4f
>198620		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>198628		5b 5c 5d 5e 60 61 62 63
>198630		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>198638		6d 6e 70 71 72 73 74 75
>198640		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>198648		7e 7f 80 81 82 83 84 84
>198650		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>198658		8d 8e 8e 8f 90 91 92 93
>198660		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>198668		9a 9b 9c 9d 9e 9f 9f a0
>198670		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>198678		a7 a8 a9 aa aa ab ac ad
>198680		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>198688		b3 b4 b5 b6 b6 b7 b8 b8
>198690		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>198698		bf bf c0 c1 c2 c2 c3 c4
>1986a0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>1986a8		ca ca cb cc cc cd ce ce
>1986b0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>1986b8		d4 d5 d6 d6 d7 d7 d8 d9
>1986c0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>1986c8		de df e0 e0 e1 e1 e2 e3
>1986d0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>1986d8		e8 e9 e9 ea ea eb ec ec
>1986e0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>1986e8		f1 f2 f3 f3 f4 f4 f5 f5
>1986f0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>1986f8		fb fb fc fc fd fd fe ff
>198700						.align 256
>198700		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>198708		83 dd ce 39 cd c5 3b 15
>198710		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>198718		87 12 31 65 89 27 88 42
>198720		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>198728		94 ce 56 ec fe da 58 c9
>198730		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>198738		d0 10 2c b2 4b ea 32 61
>198740		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>198748		a1 e6 ca 2d b3 ce b0 79
>198750		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>198758		5f e3 fb bd 15 2e be f5
>198760		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>198768		8d 8f 2c 80 0a 5e 99 36
>198770		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>198778		13 52 44 2f e3 ef 44 a2
>198780		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>198788		be 23 02 58 0a 52 5e b4
>198790		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>198798		d5 cf 3e df c4 9e da bb
>1987a0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>1987a8		77 7d b1 3b 4a 68 35 6e
>1987b0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>1987b8		b5 8f 44 63 55 6f e1 50
>1987c0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>1987c8		57 74 b9 bd 05 14 50 eb
>1987d0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>1987d8		44 bc ec db 22 58 fc be
>1987e0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>1987e8		24 aa 82 11 5c 9f 43 4d
>1987f0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>1987f8		3e 3d 66 7e 0a 1c 6b 74
>198800						.align 16
>198800		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>198808		01 01 01 00 00 00 00 00
>198810		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>198818		ff ff ff 01 00 00 00 00
>198820		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>198828		01 55 ff ff 01 00 00 00
>198830		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>198838		ff ff ff ff 01 00 00 00
>198840		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>198848		ff ff 01 ff ff 01 00 00
>198850		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>198858		01 ff ff 01 ff 01 00 00
>198860		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>198868		ff 01 ff ff ff 01 00 00
>198870		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>198878		ff ff ff ff ff 01 01 00
>198880		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>198888		ff ff ff ff 01 ff ff 01
>198890		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>198898		ff ff ff ff ff ff ff 01
>1988a0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>1988a8		55 55 01 ff ff 55 01 00
>1988b0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>1988b8		01 01 55 ff 55 01 00 00
>1988c0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>1988c8		01 55 55 55 01 00 00 00
>1988d0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>1988d8		01 55 55 01 00 00 00 00
>1988e0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>1988e8		00 01 01 00 00 00 00 00
>1988f0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1988f8		00 00 00 00 00 00 00 00
>1a0000		5c bf 87 1a 5c ce 6d 1a		        .binary "binaries/basic816_1A0000.bin"
>1a0008		5c b6 25 1a 5c 5b 01 1a 5c 58 00 1a 5c d6 00 1a
>1a0018		5c c1 02 1a 5c ff 00 1a 5c 1a 01 1a 5c 21 01 1a
>1a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>1a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>1a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>1a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>1a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>1a0078		0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>1a0088		80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>1a0098		db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>1a00a8		4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>1a00b8		80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>1a00c8		a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>1a00d8		10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 af
>1a00e8		00 00 af 89 3c f0 08 09 03 8f 00 00 af 80 06 09
>1a00f8		01 8f 00 00 af 28 60 08 e2 20 c9 00 f0 08 af 10
>1a0108		00 af 09 01 80 06 af 10 00 af 29 fe 8f 10 00 af
>1a0118		28 60 08 22 84 10 00 28 60 48 da 5a 0b 08 e2 20
>1a0128		c2 10 a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f
>1a0138		00 c0 af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00
>1a0148		5b 68 28 a2 00 00 a0 00 00 22 84 10 00 28 2b 7a
>1a0158		fa 68 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>1a0168		28 c2 30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2
>1a0178		20 29 ff 00 85 0a af 11 00 00 8f 08 01 00 af 1c
>1a0188		00 00 3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08
>1a0198		a5 0a 69 00 00 85 0a e2 20 af 0f 00 00 85 8f a0
>1a01a8		00 00 a2 00 00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0
>1a01b8		f4 ca bf 00 4f 00 c9 20 d0 09 a9 00 9f 00 4f 00
>1a01c8		ca 10 ef 28 2b 7a fa 60 e2 20 20 1b 02 a9 48 8f
>1a01d8		0f 00 00 a9 34 8f 13 00 00 a9 20 8f 08 00 af 8f
>1a01e8		09 00 af a2 00 00 a9 00 9f 18 f0 1a e8 e0 40 00
>1a01f8		d0 f6 a9 80 8f b4 08 00 e2 20 a9 00 8f 89 0f 00
>1a0208		a9 00 8f 00 02 af 8f 0c 02 af 8f 18 02 af 8f 24
>1a0218		02 af 60 08 e2 20 af 0e 08 af 09 08 8f 0e 08 af
>1a0228		af 00 08 af 8f 84 e8 af af 02 08 af 8f 85 e8 af
>1a0238		a9 03 8f 86 e8 af af 0e 08 af 29 f7 8f 0e 08 af
>1a0248		ea ea ea a9 01 8f 86 e8 af 28 60 08 e2 20 48 48
>1a0258		a9 00 22 3c 10 00 68 22 18 10 00 af 89 0f 00 29
>1a0268		01 d0 f8 68 28 60 08 e2 20 48 48 a9 01 22 3c 10
>1a0278		00 68 22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28
>1a0288		60 08 c2 20 48 e2 20 a9 0d 20 18 00 c2 20 68 28
>1a0298		60 08 22 78 10 00 28 60 08 0b 08 c2 20 48 a9 00
>1a02a8		08 5b 68 28 e2 20 a5 b6 1a 85 b6 cf 13 00 00 90
>1a02b8		05 20 14 00 64 b6 2b 28 60 da 5a 0b 08 08 c2 20
>1a02c8		48 a9 00 08 5b 68 28 e2 20 c2 10 8f b5 08 00 af
>1a02d8		b4 08 00 29 20 f0 07 af b5 08 00 20 28 00 af b4
>1a02e8		08 00 29 80 f0 07 af b5 08 00 20 53 02 af b4 08
>1a02f8		00 29 40 f0 14 af b5 08 00 20 6e 02 af b5 08 00
>1a0308		c9 0d d0 05 a9 0a 20 6e 02 28 2b 7a fa 60 08 e2
>1a0318		20 bd 00 00 f0 06 20 18 00 e8 80 f5 28 60 08 c2
>1a0328		20 48 48 4a 4a 4a 4a 4a 4a 4a 4a 20 40 03 68 29
>1a0338		ff 00 20 40 03 68 28 60 08 c2 20 48 e2 20 48 4a
>1a0348		4a 4a 4a 20 57 03 68 20 57 03 c2 20 68 28 60 08
>1a0358		c2 30 da 29 0f 00 aa bf 00 d0 1a 20 18 00 fa 28
>1a0368		60 08 c2 30 48 da 5a 8b 0b c2 30 a3 0b 18 69 03
>1a0378		00 aa e2 20 a9 1a 48 ab bd 00 00 f0 06 20 53 02
>1a0388		e8 80 f5 c2 30 2b ab 7a fa 68 28 60 08 e2 20 c9
>1a0398		5b b0 04 c9 41 b0 0b c9 7b b0 04 c9 61 b0 03 28
>1a03a8		18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 03
>1a03b8		28 18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0
>1a03c8		13 c9 67 b0 04 c9 61 b0 0b c9 47 b0 04 c9 41 b0
>1a03d8		03 28 18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30
>1a03e8		b0 12 c9 67 b0 04 c9 61 b0 0f c9 47 b0 04 c9 41
>1a03f8		b0 09 28 60 38 e9 30 80 f9 29 df 38 e9 37 80 f2
>1a0408		08 e2 20 c9 7b b0 06 c9 61 90 02 29 df 28 60 08
>1a0418		e2 20 c2 10 bd 00 00 f0 09 20 08 04 9d 00 00 e8
>1a0428		80 f2 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>1a0438		c2 20 48 06 23 26 25 a5 23 85 0c a5 25 85 0e 06
>1a0448		0c 26 0e 06 0c 26 0e 18 a5 23 65 0c 85 23 a5 25
>1a0458		65 0e 85 25 68 2b 28 60 08 0b 08 c2 20 48 a9 00
>1a0468		08 5b 68 28 c2 20 a5 23 8f 1a 01 00 a9 0a 00 8f
>1a0478		18 01 00 af 1c 01 00 85 23 64 25 af 1e 01 00 85
>1a0488		29 64 2b e2 20 a9 00 85 27 85 2d 2b 28 60 08 0b
>1a0498		08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 23 8f 1a
>1a04a8		01 00 a9 64 00 8f 18 01 00 af 1c 01 00 85 23 64
>1a04b8		25 af 1e 01 00 85 29 64 2b e2 20 a9 00 85 27 85
>1a04c8		2d 2b 28 60 08 c2 20 a5 23 d0 08 a5 25 d0 04 28
>1a04d8		e2 02 60 28 c2 02 60 08 c2 30 a9 ff ff 85 23 85
>1a04e8		25 e2 20 a9 00 85 27 28 60 08 c2 30 a9 00 00 85
>1a04f8		23 85 25 e2 20 a9 00 85 27 28 60 08 e2 20 a5 27
>1a0508		c9 00 f0 07 c9 01 d0 05 20 77 59 28 60 08 c2 20
>1a0518		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a0528		20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 e2 20 a5
>1a0538		2d c9 00 f0 37 c9 01 d0 35 c2 20 a5 25 48 a5 23
>1a0548		48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20 a9 01 85
>1a0558		27 20 77 59 c2 20 a5 23 85 29 a5 25 85 2b e2 20
>1a0568		a9 00 85 2d c2 20 68 85 23 68 85 25 28 60 08 c2
>1a0578		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a0588		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 e2 20
>1a0598		a5 27 c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b
>1a05a8		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>1a05b8		9f 1c e2 20 dc d4 08 08 e2 20 a5 27 c9 00 f0 07
>1a05c8		c9 01 d0 0b 20 77 59 c2 20 a5 25 d0 21 28 60 08
>1a05d8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a05e8		00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 c2
>1a05f8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a0608		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 e2 20
>1a0618		a5 27 c9 00 f0 07 c9 01 d0 11 20 77 59 a5 26 d0
>1a0628		29 a5 25 d0 25 a5 24 d0 21 28 60 08 c2 20 48 a9
>1a0638		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a0648		ff 00 20 9f 1c e2 20 dc d4 08 08 c2 20 48 a9 00
>1a0658		08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff
>1a0668		00 20 9f 1c e2 20 dc d4 08 08 e2 20 a5 27 c9 01
>1a0678		f0 26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a0688		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>1a0698		e2 20 dc d4 08 20 71 59 28 60 08 e2 20 a5 2d c9
>1a06a8		01 f0 26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68
>1a06b8		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 9f
>1a06c8		1c e2 20 dc d4 08 20 d3 06 28 60 c2 20 a5 25 48
>1a06d8		a5 23 48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20 a9
>1a06e8		00 85 27 20 71 59 c2 20 a5 23 85 29 a5 25 85 2b
>1a06f8		e2 20 a9 01 85 2d c2 20 68 85 23 68 85 25 60 08
>1a0708		e2 20 a5 27 c9 00 f0 23 c9 01 f0 2e 08 c2 20 48
>1a0718		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>1a0728		29 ff 00 20 9f 1c e2 20 dc d4 08 a5 2d c9 00 f0
>1a0738		16 c9 01 d0 d7 20 71 59 80 0d a5 2d c9 01 f0 07
>1a0748		c9 00 d0 c8 20 d3 06 e2 20 a5 27 28 60 08 e2 20
>1a0758		a5 27 c9 02 d0 25 a5 2d c9 02 f0 24 08 c2 20 48
>1a0768		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>1a0778		29 ff 00 20 9f 1c e2 20 dc d4 08 20 07 07 a5 27
>1a0788		28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>1a0798		64 23 64 25 e2 20 64 27 a7 00 c9 26 f0 44 e2 20
>1a07a8		a7 00 20 ad 03 90 76 20 2c 04 38 e9 30 c2 20 29
>1a07b8		ff 00 18 65 23 85 23 a5 25 69 00 00 85 25 20 5e
>1a07c8		1f 80 db 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a07d8		02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc
>1a07e8		d4 08 20 5e 1f a7 00 c9 48 f0 04 c9 68 d0 d4 20
>1a07f8		5e 1f e2 20 a7 00 20 be 03 90 22 20 df 03 c2 20
>1a0808		06 23 26 25 06 23 26 25 06 23 26 25 06 23 26 25
>1a0818		29 ff 00 18 65 23 85 23 20 5e 1f 80 d5 2b 28 60
>1a0828		08 c2 30 a5 04 f0 1c 38 a5 04 e5 1a a8 e2 20 b7
>1a0838		1a f0 10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0 ff
>1a0848		ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9 00 08 5b
>1a0858		68 28 c2 30 a5 1a 85 00 e2 20 a5 1c 85 02 20 7f
>1a0868		1f a7 00 20 ad 03 90 0c 20 8a 07 c2 20 a5 23 85
>1a0878		d7 20 7f 1f c2 20 a5 00 85 1a e2 20 a5 02 85 1c
>1a0888		20 9c 08 e2 20 20 0d 09 c9 00 f0 05 20 bb 0a 80
>1a0898		f4 2b 28 60 08 c2 20 a5 1a 85 00 a5 1c 85 02 a2
>1a08a8		00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0 53
>1a08b8		c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0
>1a08c8		10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72 d0
>1a08d8		1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7
>1a08e8		00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20 5e 1f 80
>1a08f8		b3 a7 00 c9 3a d0 03 20 5e 1f a9 03 85 1e a9 91
>1a0908		20 bb 0a 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>1a0918		28 e2 20 a9 7f 85 1e c2 10 20 70 0a a5 1e d0 03
>1a0928		4c b0 09 c2 20 a5 1a 85 00 e2 20 a5 1c 85 02 c2
>1a0938		20 64 04 64 06 e2 30 a0 00 b7 00 f0 da c9 91 f0
>1a0948		d6 c8 c4 1e 90 f3 c2 10 a7 00 c9 22 d0 05 20 d2
>1a0958		09 80 28 a5 1e c9 03 90 19 c2 20 a5 00 c5 1a d0
>1a0968		08 e2 20 a5 02 c5 1c f0 09 e2 20 a7 04 20 ba 4e
>1a0978		b0 09 e2 20 20 e2 09 c9 00 d0 11 c2 20 a5 00 85
>1a0988		04 e2 20 a5 02 85 06 20 5e 1f 80 a9 c9 81 d0 18
>1a0998		20 28 08 c9 00 f0 14 89 80 10 0b 20 5c 0b c9 30
>1a09a8		f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2 20 48 a9
>1a09b8		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>1a09c8		ff 00 20 9f 1c e2 20 dc d4 08 08 e2 20 20 5e 1f
>1a09d8		a7 00 f0 04 c9 22 d0 f5 28 60 da 5a 08 0b 08 c2
>1a09e8		20 48 a9 00 08 5b 68 28 c2 20 a5 04 d0 0a e2 20
>1a09f8		a5 04 d0 04 a9 00 80 0a e2 20 a7 04 20 ba 4e a9
>1a0a08		00 2a 85 28 c2 30 a9 b0 0b 85 08 e2 20 a9 1a 85
>1a0a18		0a a2 80 00 e2 20 a0 01 00 b7 08 f0 31 c5 1e d0
>1a0a28		32 c2 30 a0 02 00 b7 08 85 0c e2 20 a9 1a 85 0e
>1a0a38		a5 28 f0 07 a7 0c 20 ba 4e b0 18 e2 10 a0 00 b7
>1a0a48		00 20 08 04 d7 0c d0 0b c8 c4 1e 90 f2 8a 2b 28
>1a0a58		7a fa 60 c2 30 18 a5 08 69 08 00 85 08 e2 20 a5
>1a0a68		0a 69 00 85 0a e8 80 ac 08 0b 8b 08 c2 20 48 a9
>1a0a78		00 08 5b 68 28 c2 30 a9 b0 0b 85 08 a9 1a 00 85
>1a0a88		0a 64 0c e2 20 a0 01 00 b7 08 f0 1d c5 1e b0 06
>1a0a98		c5 0c 90 02 85 0c c2 20 18 a5 08 69 08 00 85 08
>1a0aa8		a5 0a 69 00 00 85 0a 80 da e2 20 a5 0c 85 1e ab
>1a0ab8		2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a0ac8		20 87 00 c2 20 18 a5 00 69 01 00 85 08 a5 02 69
>1a0ad8		00 00 85 0a e2 10 a4 1e 88 e2 20 b7 08 87 08 f0
>1a0ae8		13 c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00
>1a0af8		85 0a 80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a 0a
>1a0b08		18 69 b0 0b aa 28 60 08 8b 0b 08 c2 20 48 a9 00
>1a0b18		08 5b 68 28 08 e2 20 48 a9 1a 48 ab 68 28 e2 20
>1a0b28		c2 10 20 ff 0a bd 00 00 c2 20 29 0f 00 2b ab 28
>1a0b38		60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>1a0b48		20 48 a9 1a 48 ab 68 28 c2 30 20 ff 0a bd 04 00
>1a0b58		2b ab 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68
>1a0b68		28 08 e2 20 48 a9 1a 48 ab 68 28 e2 20 c2 10 20
>1a0b78		ff 0a bd 00 00 c2 20 29 f0 00 2b ab 28 60 08 8b
>1a0b88		0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>1a0b98		1a 48 ab 68 28 e2 20 c2 10 20 ff 0a bd 06 00 c2
>1a0ba8		20 29 ff 00 2b ab 28 60 03 01 10 d0 1d 26 02 00
>1a0bb8		03 01 12 d0 5d 26 02 00 02 01 14 d0 94 26 02 00
>1a0bc8		02 01 16 d0 cb 26 02 00 02 03 18 d0 d5 26 02 00
>1a0bd8		00 01 1c d0 e8 26 02 00 04 02 1e d0 a6 28 02 00
>1a0be8		04 02 21 d0 66 28 02 00 04 02 24 d0 26 28 02 00
>1a0bf8		04 01 27 d0 66 27 02 00 04 01 29 d0 e6 27 02 00
>1a0c08		04 01 2b d0 a6 27 02 00 05 03 2d d0 50 27 01 00
>1a0c18		06 03 31 d0 22 27 02 00 07 02 35 d0 39 27 02 00
>1a0c28		ff 01 38 d0 00 00 00 00 40 01 3a d0 00 00 00 00
>1a0c38		20 03 3c d0 66 3f 00 00 20 05 40 d0 6b 43 00 00
>1a0c48		20 03 46 d0 b6 42 00 00 20 04 4a d0 56 42 00 00
>1a0c58		20 03 4f d0 4d 42 00 00 20 02 53 d0 e5 41 00 00
>1a0c68		50 04 56 d0 00 00 00 00 50 04 5b d0 00 00 00 00
>1a0c78		20 05 60 d0 28 41 00 00 20 06 66 d0 a1 41 00 00
>1a0c88		20 03 6d d0 7d 3f 00 00 50 02 71 d0 00 00 00 00
>1a0c98		50 04 74 d0 00 00 00 00 20 04 79 d0 71 40 00 00
>1a0ca8		20 02 7e d0 77 3f 00 00 20 04 81 d0 7a 3f 00 00
>1a0cb8		50 05 86 d0 00 00 00 00 50 05 8c d0 00 00 00 00
>1a0cc8		20 04 92 d0 74 3f 00 00 20 03 97 d0 ac 42 00 00
>1a0cd8		20 04 9b d0 47 3f 00 00 20 04 a0 d0 d7 3e 00 00
>1a0ce8		20 05 a5 d0 6d 3e 00 00 20 05 ab d0 fa 3d 00 00
>1a0cf8		20 03 b1 d0 f6 3d 00 00 20 04 b5 d0 d7 3c 00 00
>1a0d08		20 04 ba d0 e9 3d 00 00 20 07 bf d0 ed 3d 00 00
>1a0d18		20 03 c7 d0 2a 3c 00 00 20 04 cb d0 93 3b 00 00
>1a0d28		00 01 d0 d0 e6 28 01 00 30 03 d2 d0 61 49 00 00
>1a0d38		30 04 d6 d0 b1 49 00 00 30 05 db d0 42 4a 00 00
>1a0d48		30 05 e1 d0 f4 49 00 00 30 04 e7 d0 81 4a 00 00
>1a0d58		30 03 ec d0 d6 4a 00 00 30 03 f0 d0 1b 4b 00 00
>1a0d68		30 03 f4 d0 a4 4b 00 00 30 03 f8 d0 2d 4c 00 00
>1a0d78		30 03 fc d0 8f 4c 00 00 30 04 00 d1 d3 48 00 00
>1a0d88		30 03 05 d1 72 48 00 00 30 04 09 d1 24 48 00 00
>1a0d98		30 03 0e d1 ce 47 00 00 30 05 12 d1 05 47 00 00
>1a0da8		30 06 18 d1 24 46 00 00 30 04 1f d1 6f 45 00 00
>1a0db8		10 03 24 d1 f6 4d 00 00 10 03 28 d1 c1 4d 00 00
>1a0dc8		10 04 2c d1 a7 69 00 00 10 04 31 d1 0d 4e 00 00
>1a0dd8		10 03 36 d1 ce 66 00 00 20 05 3a d1 79 68 00 00
>1a0de8		10 04 40 d1 54 69 00 00 20 05 45 d1 60 6a 00 00
>1a0df8		20 03 4b d1 7f 6b 00 00 10 04 4f d1 ec 6a 00 00
>1a0e08		20 06 54 d1 f5 6b 00 00 20 04 5b d1 19 6d 00 00
>1a0e18		10 07 60 d1 be 4d 00 00 20 03 68 d1 21 3b 00 00
>1a0e28		20 05 6c d1 31 3a 00 00 20 09 72 d1 a5 2a 00 00
>1a0e38		20 09 7c d1 32 2a 00 00 20 0a 86 d1 62 2a 00 00
>1a0e48		20 07 91 d1 9f 29 00 00 30 08 99 d1 4a 44 00 00
>1a0e58		20 07 a2 d1 34 29 00 00 30 08 aa d1 b4 44 00 00
>1a0e68		20 08 b3 d1 ea 2b 00 00 20 08 bc d1 1e 2b 00 00
>1a0e78		20 06 c5 d1 24 2d 00 00 20 09 cc d1 2c 2e 00 00
>1a0e88		20 04 d6 d1 3c 2f 00 00 20 04 db d1 ad 2f 00 00
>1a0e98		20 04 e0 d1 46 30 00 00 20 06 e5 d1 82 31 00 00
>1a0ea8		20 08 ec d1 1e 32 00 00 20 0a f5 d1 6a 32 00 00
>1a0eb8		20 07 00 d2 9f 33 00 00 20 07 08 d2 1d 34 00 00
>1a0ec8		20 08 10 d2 8f 34 00 00 20 06 19 d2 cc 34 00 00
>1a0ed8		20 07 20 d2 fc 37 00 00 50 06 28 d2 00 00 00 00
>1a0ee8		50 04 2f d2 00 00 00 00 20 06 34 d2 11 3a 00 00
>1a0ef8		30 03 3b d2 e5 4c 00 00 30 03 3f d2 19 45 00 00
>1a0f08		30 03 43 d2 f8 4c 00 00 30 03 47 d2 0e 4d 00 00
>1a0f18		30 03 4b d2 24 4d 00 00 30 02 4f d2 3a 4d 00 00
>1a0f28		30 04 52 d2 50 4d 00 00 30 04 57 d2 66 4d 00 00
>1a0f38		30 04 5c d2 7c 4d 00 00 30 03 61 d2 92 4d 00 00
>1a0f48		30 03 65 d2 a8 4d 00 00 00 00 00 00 00 00 00 00
>1a0f58		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 ff
>1a0f68		ff 85 ba e2 20 a9 17 85 bc c2 20 64 b7 64 bd e2
>1a0f78		20 64 b9 64 bf 2b 28 60 5a 08 e2 20 85 ea c2 10
>1a0f88		86 8f c2 20 a5 0e 48 a5 0c 48 a5 12 48 a5 10 48
>1a0f98		20 30 10 b0 03 20 b4 0f 20 bc 11 c2 20 68 85 10
>1a0fa8		68 85 12 68 85 0c 68 85 0e 28 7a 60 08 0b 08 c2
>1a0fb8		20 48 a9 00 08 5b 68 28 e2 20 a6 8f ca 86 0c e8
>1a0fc8		c2 30 38 a5 ba e5 0c 85 c0 e2 20 a5 bc e9 00 85
>1a0fd8		c2 20 bc 11 e2 20 a5 ea a0 00 00 97 c3 a9 00 a0
>1a0fe8		01 00 97 c3 a0 02 00 97 c3 c2 20 a9 00 00 97 c3
>1a0ff8		c2 20 18 a5 ba 69 01 00 a0 05 00 97 c3 e2 20 c8
>1a1008		c8 a5 bc 69 00 97 c3 c2 20 a5 c0 85 b7 e2 20 a5
>1a1018		c2 85 b9 c2 20 38 a5 c3 e9 01 00 85 ba e2 20 a5
>1a1028		c5 e9 00 85 bc 2b 28 60 08 0b 08 c2 20 48 a9 00
>1a1038		08 5b 68 28 c2 30 c2 20 a5 bd 85 c9 e2 20 a5 bf
>1a1048		85 cb a5 c9 d0 17 e2 20 a5 cb d0 11 c2 20 a9 00
>1a1058		00 85 cf e2 20 a9 00 85 d1 2b 28 18 60 c2 20 a0
>1a1068		05 00 b7 c9 85 cc e2 20 c8 c8 b7 c9 85 ce c2 20
>1a1078		18 a5 c9 65 8f 85 0c e2 20 a5 cb 69 00 85 0e c2
>1a1088		20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e 69 00 85
>1a1098		0e c2 20 a5 0c c5 cc d0 28 e2 20 a5 0e c5 ce d0
>1a10a8		20 c2 20 a5 cf d0 5d e2 20 a5 d1 d0 57 c2 20 a0
>1a10b8		02 00 b7 c9 85 bd e2 20 c8 c8 b7 c9 85 bf 4c 6d
>1a10c8		11 c2 20 a5 0c 69 08 00 85 10 e2 20 a5 0e 69 00
>1a10d8		85 12 e2 20 a5 c6 c5 10 b0 3e 90 08 c2 20 a5 c6
>1a10e8		c5 10 b0 34 c2 20 a5 c9 85 cf e2 20 a5 cb 85 d1
>1a10f8		c2 20 a0 02 00 b7 cf 85 c9 e2 20 c8 c8 b7 cf 85
>1a1108		cb 4c 4a 10 c2 20 a0 02 00 b7 c9 97 cf e2 20 c8
>1a1118		c8 b7 c9 97 cf 4c 6d 11 c2 20 a0 05 00 b7 c9 97
>1a1128		0c e2 20 c8 c8 b7 c9 97 0c c2 20 a0 02 00 b7 c9
>1a1138		97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a5 cf d0 14
>1a1148		e2 20 a5 cf d0 0e c2 20 a5 0c 85 bd e2 20 a5 0e
>1a1158		85 bf 80 11 c2 20 a0 02 00 a5 0c 97 cf e2 20 c8
>1a1168		c8 a5 0e 97 cf c2 20 a5 c9 85 c3 e2 20 a5 cb 85
>1a1178		c5 c2 20 a5 c3 85 b7 e2 20 a5 c5 85 b9 c2 20 a0
>1a1188		05 00 a5 0c 97 c3 e2 20 c8 c8 a5 0e 97 c3 c2 20
>1a1198		a0 02 00 a9 00 00 97 c3 e2 20 c8 c8 97 c3 e2 20
>1a11a8		a5 ea e2 20 a0 00 00 97 c3 a0 01 00 a9 00 97 c3
>1a11b8		2b 28 38 60 08 c2 20 38 a5 c0 e9 08 00 85 c3 e2
>1a11c8		20 a5 c2 e9 00 85 c5 28 60 08 e2 20 a5 c5 f0 04
>1a11d8		c9 18 b0 12 c2 20 a5 c3 f0 0c e2 20 a0 01 00 b7
>1a11e8		c3 1a 97 c3 28 60 00 ea 08 e2 20 a5 c5 f0 04 c9
>1a11f8		18 b0 17 c2 20 a5 c3 f0 11 e2 20 a0 01 00 b7 c3
>1a1208		3a 97 c3 d0 03 20 14 12 28 60 00 ea 08 c2 20 a5
>1a1218		bd d0 21 e2 20 a5 bf d0 1b a5 c5 85 bf c2 20 a5
>1a1228		c3 85 bd a9 00 00 a0 02 00 97 c3 c8 c8 e2 20 97
>1a1238		c3 4c fb 12 e2 20 a5 bf c5 c5 90 28 c2 20 a5 bd
>1a1248		c5 c3 90 20 c2 20 a5 bd a0 02 00 97 c3 e2 20 c8
>1a1258		c8 a5 bf 97 c3 c2 20 a5 c3 85 bd e2 20 a5 c5 85
>1a1268		bf 4c fb 12 c2 20 a5 bd 85 08 e2 20 a5 bf 85 0a
>1a1278		e2 20 a0 04 00 b7 08 c5 c8 90 32 d0 0b c2 20 a0
>1a1288		02 00 b7 08 c5 c6 90 25 c2 20 a0 02 00 b7 08 97
>1a1298		c3 e2 20 c8 c8 b7 08 97 c3 c2 20 a5 c3 a0 02 00
>1a12a8		97 08 e2 20 a5 c5 c8 c8 97 08 4c fb 12 c2 20 a0
>1a12b8		02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0 19 c2 20
>1a12c8		a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08 85 0a c2
>1a12d8		20 a5 0c 85 08 80 99 c2 20 a5 c3 a0 02 00 97 08
>1a12e8		e2 20 c8 c8 a5 c5 97 08 a9 00 97 c3 c2 20 a0 02
>1a12f8		00 97 c3 20 00 13 28 60 08 c2 20 a5 bd 85 c3 e2
>1a1308		20 a5 bf 85 c5 c2 20 a5 c3 d0 09 e2 20 a5 c5 d0
>1a1318		03 4c a3 13 c2 20 a0 02 00 b7 c3 85 0c e2 20 c8
>1a1328		c8 b7 c3 85 0e c2 20 a0 05 00 b7 c3 85 10 e2 20
>1a1338		c8 c8 b7 c3 85 12 c2 20 a5 0c c5 10 d0 08 e2 20
>1a1348		a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c3 85 0c e2
>1a1358		20 c8 c8 b7 c3 85 0e c2 20 a5 0c 85 c3 e2 20 a5
>1a1368		0e 85 c5 80 a0 c2 20 a0 02 00 b7 c3 85 0c e2 20
>1a1378		c8 c8 b7 c3 85 0e c2 20 a0 02 00 b7 0c 97 c3 e2
>1a1388		20 c8 c8 b7 0c 97 c3 c2 20 a0 05 00 b7 0c 97 c3
>1a1398		e2 20 c8 c8 b7 0c 97 c3 4c 1c 13 28 60 08 c2 20
>1a13a8		64 16 64 18 28 60 08 c2 30 a5 16 d0 16 a5 18 d0
>1a13b8		12 e2 20 64 16 a5 e2 1a 1a 85 17 a5 e3 85 18 64
>1a13c8		19 80 07 c2 20 a5 17 1a 85 17 c2 20 a5 bb 3a c5
>1a13d8		17 f0 02 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a13e8		20 a9 03 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>1a13f8		20 dc d4 08 28 60 c9 00 d0 05 c0 01 00 f0 05 09
>1a1408		30 97 16 c8 60 08 c2 30 64 0c a5 25 10 1a 18 a5
>1a1418		23 49 ff ff 69 01 00 85 23 a5 25 49 ff ff 69 00
>1a1428		00 85 25 a9 ff ff 85 0c 64 10 64 12 64 14 a2 1f
>1a1438		00 f8 06 23 26 25 a5 10 65 10 85 10 a5 12 65 12
>1a1448		85 12 a5 14 65 14 85 14 ca 10 e7 d8 e2 20 20 ae
>1a1458		13 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9 20 97 16
>1a1468		c8 a2 05 00 b5 10 29 f0 4a 4a 4a 4a 20 fe 13 b5
>1a1478		10 29 0f 20 fe 13 ca 10 eb c0 01 00 d0 0c a9 20
>1a1488		87 16 a0 01 00 a9 30 97 16 c8 a9 00 97 16 28 60
>1a1498		00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00 f0 04 e8
>1a14a8		c8 80 f7 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>1a14b8		28 e2 20 c2 10 a0 00 00 b7 23 d0 04 b7 29 f0 25
>1a14c8		b7 23 d7 29 90 12 d0 03 c8 80 ed c2 20 a9 01 00
>1a14d8		85 23 e2 20 64 25 80 15 c2 20 a9 ff ff 85 23 e2
>1a14e8		20 85 25 80 08 c2 20 64 23 e2 20 64 25 e2 20 a9
>1a14f8		00 85 27 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>1a1508		5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20 a5 25 48
>1a1518		ab c2 20 68 28 a6 23 20 9a 14 84 0c 08 c2 20 48
>1a1528		e2 20 a5 2b 48 ab c2 20 68 28 a6 29 20 9a 14 c2
>1a1538		20 98 38 65 0c aa e2 20 a9 02 20 80 0f c2 20 a5
>1a1548		b7 85 08 e2 20 a5 b9 85 0a a0 00 00 08 c2 20 48
>1a1558		e2 20 a5 25 48 ab c2 20 68 28 a6 23 bd 00 00 f0
>1a1568		06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48 e2 20 a5
>1a1578		2b 48 ab c2 20 68 28 a6 29 bd 00 00 97 08 f0 04
>1a1588		e8 c8 80 f5 c2 20 a5 08 85 23 e2 20 a5 0a 85 25
>1a1598		a9 02 85 27 ab 2b 28 60 da 5a 08 0b 8b 08 c2 20
>1a15a8		48 a9 00 08 5b 68 28 c2 20 a5 0a 48 a5 08 48 c2
>1a15b8		30 08 c2 20 48 e2 20 a5 25 48 ab c2 20 68 28 a6
>1a15c8		23 20 9a 14 98 aa e8 e2 20 a9 02 20 80 0f c2 20
>1a15d8		a5 c0 85 08 a5 c2 85 0a a0 00 00 e2 20 b7 23 97
>1a15e8		08 f0 03 c8 80 f7 c2 20 a5 08 85 23 a5 0a 85 25
>1a15f8		c2 20 68 85 08 68 85 0a ab 2b 28 7a fa 60 08 e2
>1a1608		20 c2 10 a0 00 00 b7 23 f0 05 c8 80 f9 84 92 c2
>1a1618		30 c4 29 90 13 f0 11 a5 8f 30 0d f0 0b c4 8f b0
>1a1628		12 a5 29 d0 0e 4c 84 16 20 ae 13 e2 20 a9 00 87
>1a1638		16 80 39 20 ae 13 c2 30 18 a5 23 65 29 85 23 a5
>1a1648		25 69 00 00 85 25 a0 00 00 e2 20 a7 23 97 16 f0
>1a1658		1b c2 20 18 a5 23 69 01 00 85 23 a5 25 69 00 00
>1a1668		85 25 c8 c4 8f d0 e2 a9 00 00 97 16 c2 20 a5 16
>1a1678		85 23 a5 18 85 25 e2 20 a9 02 85 27 28 60 08 c2
>1a1688		30 20 ad 14 a5 23 c9 ff ff d0 05 20 df 04 80 03
>1a1698		20 f1 04 28 60 08 c2 30 20 ad 14 a5 23 c9 01 00
>1a16a8		d0 05 20 df 04 80 03 20 f1 04 28 60 08 c2 30 20
>1a16b8		ad 14 a5 23 c9 00 00 d0 05 20 df 04 80 03 20 f1
>1a16c8		04 28 60 08 c2 30 20 ad 14 a5 23 c9 00 00 f0 05
>1a16d8		20 df 04 80 03 20 f1 04 28 60 08 c2 30 20 ad 14
>1a16e8		a5 23 c9 ff ff f0 05 20 df 04 80 03 20 f1 04 28
>1a16f8		60 08 c2 30 20 ad 14 a5 23 c9 01 00 f0 05 20 df
>1a1708		04 80 03 20 f1 04 28 60 48 5a 0b 08 08 c2 20 48
>1a1718		a9 00 08 5b 68 28 c2 30 a9 00 00 85 00 85 1a a9
>1a1728		16 00 85 02 85 1c ad 8a 0f 30 20 a0 02 00 b7 1a
>1a1738		f0 0f c5 55 90 10 c5 59 f0 02 b0 05 20 72 17 80
>1a1748		e5 28 2b 7a 68 60 20 3b 20 80 db 08 c2 20 48 a9
>1a1758		00 08 5b 68 28 e2 20 a9 01 8f d3 08 00 c2 20 29
>1a1768		ff 00 20 9f 1c e2 20 dc d4 08 08 c2 30 85 23 64
>1a1778		25 20 0d 14 a5 16 1a 85 23 a5 18 85 25 20 e7 43
>1a1788		18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02 e2
>1a1798		20 a9 20 20 18 00 c2 20 20 b1 17 90 fb e2 20 a9
>1a17a8		0d 20 18 00 20 3b 20 28 60 08 0b 8b 08 c2 20 48
>1a17b8		a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>1a17c8		e2 20 c2 10 a7 00 f0 3a 30 05 20 18 00 80 29 c2
>1a17d8		20 29 7f 00 0a 0a 0a 18 69 b0 0b 85 08 a9 1a 00
>1a17e8		69 00 00 85 0a 08 e2 20 48 a9 1a 48 ab 68 28 a0
>1a17f8		02 00 b7 08 aa 20 16 03 c2 20 20 5e 1f ab 2b 28
>1a1808		18 60 ab 2b 28 38 60 08 c2 20 a9 ff 6f 85 1f a9
>1a1818		ff 7f 85 21 a9 ff ff 85 23 85 25 85 29 85 2b e2
>1a1828		20 85 27 85 2d 28 60 08 0b 8b 08 c2 20 48 a9 00
>1a1838		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>1a1848		5a a4 1f bd 00 00 99 00 00 bd 02 00 99 02 00 e2
>1a1858		20 bd 04 00 99 04 00 c2 20 38 98 e9 05 00 85 1f
>1a1868		7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>1a1878		68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a 18
>1a1888		a5 1f 69 05 00 85 1f a8 b9 00 00 9d 00 00 b9 02
>1a1898		00 9d 02 00 e2 20 b9 04 00 9d 04 00 bd 00 00 7a
>1a18a8		ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>1a18b8		28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a
>1a18c8		a4 21 99 00 00 88 84 21 7a ab 2b 28 60 08 0b 8b
>1a18d8		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>1a18e8		48 ab 68 28 e2 20 c2 10 5a a4 21 c8 84 21 b9 00
>1a18f8		00 c2 20 29 ff 00 7a ab 2b 28 60 08 e2 20 a9 01
>1a1908		20 ac 18 28 60 5a 08 8b 08 e2 20 48 a9 00 48 ab
>1a1918		68 28 e2 20 a4 21 b9 01 00 c9 01 d0 08 c2 20 e6
>1a1928		21 ab 28 7a 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a1938		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>1a1948		20 dc d4 08 48 08 0b 8b 08 c2 20 48 a9 00 08 5b
>1a1958		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 a4 21
>1a1968		c0 ff 7f f0 11 20 0f 0b 85 0c b9 01 00 20 0f 0b
>1a1978		c5 0c f0 02 90 08 c2 20 ab 2b 28 68 18 60 c2 20
>1a1988		ab 2b 28 68 38 60 4c 8a 07 08 e2 20 a9 00 8f 00
>1a1998		4d 00 a2 01 00 20 4d 1b 20 bf 05 c2 20 a5 23 9f
>1a19a8		00 4d 00 e2 20 af 00 4d 00 1a 30 3e 8f 00 4d 00
>1a19b8		e8 e8 20 7f 1f e2 20 a7 00 c9 90 f0 09 c9 2c d0
>1a19c8		0a 20 5e 1f 80 cf 20 5e 1f 28 60 08 c2 20 48 a9
>1a19d8		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>1a19e8		ff 00 20 9f 1c e2 20 dc d4 08 08 c2 20 48 a9 00
>1a19f8		08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff
>1a1a08		00 20 9f 1c e2 20 dc d4 08 08 20 8d 51 90 23 e2
>1a1a18		20 a5 ea 29 80 d0 06 20 8e 4f 4c 38 1a e2 20 a9
>1a1a28		8f 20 6b 20 20 03 19 20 91 19 20 44 66 20 0d 19
>1a1a38		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a1a48		8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4
>1a1a58		08 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2
>1a1a68		10 20 5e 1f a0 00 00 b7 00 f0 24 c9 22 f0 03 c8
>1a1a78		80 f5 84 0c e2 20 a9 02 a6 0c e8 20 ae 13 a0 00
>1a1a88		00 c4 0c f0 29 a7 00 97 16 c8 20 5e 1f 80 f2 08
>1a1a98		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a1aa8		00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 a9 00
>1a1ab8		97 16 c2 20 a5 16 85 23 a5 18 85 25 a9 02 00 85
>1a1ac8		27 20 5e 1f 2b 28 60 08 e2 20 a7 00 c2 20 29 ff
>1a1ad8		00 20 39 0b 85 2f 20 03 19 08 e2 20 48 a9 00 48
>1a1ae8		ab 68 28 20 f3 1a 20 0d 19 28 60 20 5e 1f 6c 2f
>1a1af8		08 48 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a1b08		30 20 d5 18 89 80 00 f0 37 48 20 39 0b 85 2f 68
>1a1b18		20 86 0b c9 01 00 f0 08 c2 30 a2 29 08 20 6d 18
>1a1b28		c2 30 a2 23 08 20 6d 18 08 e2 20 48 a9 00 48 ab
>1a1b38		68 28 20 4a 1b a2 23 08 20 2f 18 ab 2b 28 68 60
>1a1b48		00 ea 6c 2f 08 08 08 c2 20 48 a9 00 08 5b 68 28
>1a1b58		08 e2 20 48 a9 00 48 ab 68 28 c2 10 da e2 20 a7
>1a1b68		00 d0 03 4c 10 1c 30 33 c9 20 d0 03 4c 0a 1c c9
>1a1b78		3a b0 04 c9 30 b0 56 c9 26 f0 52 c9 22 d0 03 4c
>1a1b88		23 1c c9 5b b0 07 c9 41 90 03 4c 2f 1c c9 7b b0
>1a1b98		07 c9 61 90 03 4c 2f 1c 4c 10 1c c9 8f f0 40 c9
>1a1ba8		90 f0 41 20 5c 0b c9 30 d0 0c 20 cf 1a a2 23 08
>1a1bb8		20 2f 18 4c 65 1b c9 00 d0 4e a7 00 a6 21 e0 ff
>1a1bc8		7f f0 05 20 4c 19 b0 12 20 ac 18 80 35 c2 20 20
>1a1bd8		af 57 a2 23 08 20 2f 18 80 83 20 f9 1a 80 dd 20
>1a1be8		ac 18 80 1e e2 20 a4 21 c0 ff 7f f0 46 a4 21 b9
>1a1bf8		01 00 c9 01 f0 3d c9 8f f0 05 20 f9 1a 80 ee 20
>1a1c08		d5 18 20 5e 1f 4c 65 1b a6 21 e0 ff 7f b0 24 bd
>1a1c18		01 00 c9 01 f0 1d 20 f9 1a 80 ed 20 59 1a a2 23
>1a1c28		08 20 2f 18 4c 65 1b 20 11 1a a2 23 08 20 2f 18
>1a1c38		4c 65 1b a2 23 08 20 6d 18 fa 28 60 08 0b 8b 08
>1a1c48		e2 20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08
>1a1c58		5b 68 28 c2 30 a9 fd 5f 85 33 ab 2b 28 60 08 0b
>1a1c68		08 c2 20 48 a9 00 08 5b 68 28 c2 30 92 33 c6 33
>1a1c78		c6 33 2b 28 60 08 c2 30 29 ff 00 20 66 1c 28 60
>1a1c88		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 e6 33
>1a1c98		e6 33 b2 33 2b 28 60 8b 0b 08 08 c2 20 48 a9 00
>1a1ca8		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 20
>1a1cb8		85 23 a9 00 00 85 25 e2 20 a9 00 85 27 85 ea a9
>1a1cc8		1a 85 e9 c2 20 a9 f9 1c 85 e7 20 f0 50 c2 20 a5
>1a1cd8		d7 85 23 a5 d9 85 25 e2 20 a9 00 85 27 85 ea a9
>1a1ce8		1a 85 e9 c2 20 a9 fd 1c 85 e7 20 f0 50 28 2b ab
>1a1cf8		60 45 52 52 00 45 52 4c 00 e2 20 c2 10 20 89 02
>1a1d08		af d3 08 00 0a c2 20 29 ff 00 a8 08 e2 20 48 a9
>1a1d18		1a 48 ab 68 28 be 53 1d 20 16 03 c2 20 a5 d7 f0
>1a1d28		27 a2 83 1d 20 16 03 08 e2 20 48 a9 00 48 ab 68
>1a1d38		28 c2 20 af d7 08 00 8f 23 08 00 a9 00 00 8f 25
>1a1d48		08 00 20 07 44 20 89 02 4c fe 25 87 1d 8a 1d 90
>1a1d58		1d 9d 1d ab 1d b9 1d cc 1d e2 1d f2 1d 01 1e 0e
>1a1d68		1e 1f 1e 2e 1e 3b 1e 49 1e 58 1e 69 1e 82 1e 96
>1a1d78		1e aa 1e c0 1e d4 1e ef 1e 07 1f 20 61 74 00 4f
>1a1d88		4b 00 42 72 65 61 6b 00 53 79 6e 74 61 78 20 65
>1a1d98		72 72 6f 72 00 4f 75 74 20 6f 66 20 6d 65 6d 6f
>1a1da8		72 79 00 54 79 70 65 20 6d 69 73 6d 61 74 63 68
>1a1db8		00 56 61 72 69 61 62 6c 65 20 6e 6f 74 20 66 6f
>1a1dc8		75 6e 64 00 4c 69 6e 65 20 6e 75 6d 62 65 72 20
>1a1dd8		6e 6f 74 20 66 6f 75 6e 64 00 53 74 61 63 6b 20
>1a1de8		75 6e 64 65 72 66 6c 6f 77 00 53 74 61 63 6b 20
>1a1df8		6f 76 65 72 66 6c 6f 77 00 4f 75 74 20 6f 66 20
>1a1e08		72 61 6e 67 65 00 49 6c 6c 65 67 61 6c 20 61 72
>1a1e18		67 75 6d 65 6e 74 00 46 69 6c 65 20 6e 6f 74 20
>1a1e28		66 6f 75 6e 64 00 4e 6f 74 20 61 20 6e 75 6d 62
>1a1e38		65 72 00 4d 61 74 68 20 6f 76 65 72 66 6c 6f 77
>1a1e48		00 4d 61 74 68 20 75 6e 64 65 72 66 6c 6f 77 00
>1a1e58		44 69 76 69 73 69 6f 6e 20 62 79 20 7a 65 72 6f
>1a1e68		00 55 6e 61 62 6c 65 20 74 6f 20 72 65 61 64 20
>1a1e78		64 69 72 65 63 74 6f 72 79 00 55 6e 61 62 6c 65
>1a1e88		20 74 6f 20 6c 6f 61 64 20 66 69 6c 65 00 55 6e
>1a1e98		61 62 6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c
>1a1ea8		65 00 55 6e 61 62 6c 65 20 74 6f 20 64 65 6c 65
>1a1eb8		74 65 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f
>1a1ec8		74 20 66 69 6e 64 20 66 69 6c 65 00 43 6f 75 6c
>1a1ed8		64 20 6e 6f 74 20 75 70 64 61 74 65 20 64 69 72
>1a1ee8		65 63 74 6f 72 79 00 43 6f 75 6c 64 20 6e 6f 74
>1a1ef8		20 63 6f 70 79 20 74 68 65 20 66 69 6c 65 00 41
>1a1f08		72 67 75 6d 65 6e 74 20 6f 75 74 73 69 64 65 20
>1a1f18		64 6f 6d 61 69 6e 00 08 0b 08 c2 20 48 a9 00 08
>1a1f28		5b 68 28 e2 20 a9 00 85 d2 2b 28 60 0b 08 08 c2
>1a1f38		20 48 a9 00 08 5b 68 28 08 c2 20 a9 01 1d 8f d4
>1a1f48		08 00 e2 20 a9 1a 8f d6 08 00 28 20 ac 42 20 ed
>1a1f58		3d 64 31 28 2b 60 08 0b 08 c2 20 48 a9 00 08 5b
>1a1f68		68 28 c2 20 18 a5 00 69 01 00 85 00 e2 20 a5 02
>1a1f78		69 00 85 02 2b 28 60 08 0b 08 c2 20 48 a9 00 08
>1a1f88		5b 68 28 e2 20 a7 00 f0 0f c9 20 f0 06 c9 09 f0
>1a1f98		02 80 05 20 5e 1f 80 ed 2b 28 60 08 e2 20 a7 00
>1a1fa8		f0 09 c9 3a f0 05 20 5e 1f 80 f3 28 60 08 e2 20
>1a1fb8		64 36 a7 00 f0 19 c5 37 f0 2c c9 9b f0 1e c9 9f
>1a1fc8		f0 1a c9 9e f0 1a c9 a0 f0 16 20 5e 1f 80 e3 20
>1a1fd8		3b 20 c2 20 a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea
>1a1fe8		c6 36 30 30 80 e4 a5 35 30 06 a5 36 f0 02 80 da
>1a1ff8		20 5e 1f 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a2008		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>1a2018		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a2028		a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20
>1a2038		dc d4 08 08 c2 30 a0 00 00 b7 1a 85 0c 18 a5 1a
>1a2048		65 0c 85 1a a5 1c 69 00 00 85 1c a0 02 00 b7 1a
>1a2058		85 d7 18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85
>1a2068		02 28 60 08 e2 20 48 20 7f 1f 68 e2 20 c7 00 d0
>1a2078		08 20 5e 1f 20 7f 1f 28 60 08 c2 20 48 a9 00 08
>1a2088		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a2098		20 9f 1c e2 20 dc d4 08 08 e2 20 20 7f 1f e2 20
>1a20a8		a7 00 f0 10 c9 3a f0 0c c5 37 f0 05 20 5e 1f 80
>1a20b8		ef 28 38 60 28 18 60 5a 08 e2 20 a0 00 00 b7 00
>1a20c8		f0 0d c9 3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28
>1a20d8		7a 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20
>1a20e8		0f 18 e2 20 a9 00 85 dc ad 8a 0f 30 4b a7 00 c9
>1a20f8		3a d0 03 20 5e 1f 20 7f 1f a7 00 d0 03 4c 8a 21
>1a2108		20 94 03 b0 52 a7 00 10 10 20 5c 0b 85 0c c9 20
>1a2118		d0 03 4c 78 21 a5 d2 f0 51 08 c2 20 48 a9 00 08
>1a2128		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a2138		20 9f 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a2148		68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20
>1a2158		9f 1c e2 20 dc d4 08 20 b6 42 4c 8a 21 08 e2 20
>1a2168		48 a9 00 48 ab 68 28 6c 2f 08 a5 0c c9 10 d0 a9
>1a2178		a7 00 20 39 0b c2 20 85 2f 20 0f 18 20 5e 1f 20
>1a2188		65 21 ab 2b 28 60 08 58 20 1f 1f 20 44 1c e2 20
>1a2198		9c 8a 0f c2 20 a5 1a 85 00 a5 1c 85 02 4c cf 21
>1a21a8		08 c2 20 a0 02 00 b7 1a 85 d7 20 a5 13 e2 20 a5
>1a21b8		dc c9 03 f0 12 c2 20 18 a5 1a 69 04 00 85 00 e2
>1a21c8		20 a5 1c 69 00 85 02 c2 20 20 da 20 e2 20 a5 dc
>1a21d8		c9 03 f0 f3 c9 00 d0 31 e2 20 20 7f 1f a7 00 f0
>1a21e8		28 c9 3a f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a21f8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>1a2208		20 dc d4 08 20 5e 1f 80 be 28 60 08 58 e2 20 a9
>1a2218		80 85 d2 9c 8a 0f 20 44 1c c2 30 64 31 a0 02 00
>1a2228		b7 1a f0 29 20 a8 21 e2 20 a5 dc c9 01 f0 1e c9
>1a2238		02 f0 ea c9 03 f0 e6 c2 20 a0 00 00 18 a5 1a 77
>1a2248		1a 85 1a e2 20 a5 1c 69 00 85 1c 80 d0 e2 20 a9
>1a2258		00 85 d2 28 60 08 c2 30 c2 20 a9 00 00 85 08 a9
>1a2268		16 00 85 0a c2 20 a0 02 00 b7 08 f0 31 c5 23 f0
>1a2278		1e b0 2b c2 20 a0 00 00 18 a5 08 77 08 85 0c e2
>1a2288		20 a5 0a 69 00 85 0a c2 20 a5 0c 85 08 80 d7 c2
>1a2298		20 a5 08 85 1a e2 20 a5 0a 85 1c 28 38 60 28 18
>1a22a8		60 08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 08
>1a22b8		e2 20 a5 0e c5 02 f0 26 c2 20 18 a5 0c 69 01 00
>1a22c8		85 0c e2 20 a5 0e 69 00 85 0e c2 20 18 a5 08 69
>1a22d8		01 00 85 08 e2 20 a5 0a 69 00 85 0a 80 c4 28 60
>1a22e8		08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 06 a5
>1a22f8		0e c5 02 f0 26 c2 20 38 a5 0c e9 01 00 85 0c e2
>1a2308		20 a5 0e e9 00 85 0e c2 20 38 a5 08 e9 01 00 85
>1a2318		08 e2 20 a5 0a e9 00 85 0a 80 c6 28 60 08 a0 00
>1a2328		00 c2 20 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00
>1a2338		85 0e c2 20 18 a5 d9 69 04 00 85 00 e2 20 a5 db
>1a2348		69 00 85 02 a0 00 00 c2 20 38 a5 d9 f7 08 85 d9
>1a2358		e2 20 a5 db e9 00 85 db 20 a9 22 20 ac 42 28 60
>1a2368		08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a0 02 00
>1a2378		97 d9 18 a5 d9 69 04 00 85 08 e2 20 a5 db 69 00
>1a2388		85 0a e2 20 a0 00 00 b7 1a 97 08 f0 03 c8 80 f7
>1a2398		c2 20 98 18 69 05 00 85 0c c2 20 a0 00 00 a5 0c
>1a23a8		97 d9 c2 20 18 a5 d9 65 0c 85 0c e2 20 a5 db 69
>1a23b8		00 85 db c2 20 a5 0c 85 d9 c2 20 a0 00 00 a9 00
>1a23c8		00 97 d9 c8 c0 05 00 d0 f8 20 ac 42 28 60 0b 08
>1a23d8		08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 00 00 85
>1a23e8		08 a9 16 00 85 0a a0 02 00 b7 08 f0 1d c5 d7 f0
>1a23f8		25 b0 1d a0 00 00 18 a5 08 77 08 85 0c a5 0a 69
>1a2408		00 00 85 0a a5 0c 85 08 80 dc a9 00 00 28 2b 60
>1a2418		a9 01 00 28 2b 60 a9 02 00 28 2b 60 08 c2 30 a9
>1a2428		05 00 85 10 a0 00 00 e2 20 b7 1a f0 07 c2 20 e6
>1a2438		10 c8 80 f3 c2 20 a5 08 85 00 a5 0a 85 02 18 a5
>1a2448		d9 69 04 00 85 0c a5 db 69 00 00 85 0e 18 a5 d9
>1a2458		65 10 85 d9 a5 db 69 00 00 85 db 18 a5 d9 69 04
>1a2468		00 85 08 a5 db 69 00 00 85 0a 20 e8 22 c2 20 a5
>1a2478		10 a0 00 00 97 00 a5 d7 a0 02 00 97 00 18 a5 00
>1a2488		69 04 00 85 00 a5 02 69 00 00 85 02 a0 00 00 e2
>1a2498		20 b7 1a 97 00 f0 03 c8 80 f7 20 ac 42 28 60 08
>1a24a8		c2 30 85 d7 20 d6 23 c9 00 00 f0 2c c9 01 00 f0
>1a24b8		22 c2 20 a5 08 48 a5 0a 48 20 25 23 68 85 0a 68
>1a24c8		85 08 a5 1a 85 00 a5 1c 85 02 20 7f 1f e2 20 a7
>1a24d8		00 f0 0a 20 24 24 80 05 a5 d7 20 68 23 28 60 0b
>1a24e8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a2
>1a24f8		00 00 bd 00 4f f0 03 e8 80 f8 86 0c c2 30 8a c9
>1a2508		02 00 90 12 3a 18 69 00 4f aa 18 65 8f a8 a5 0c
>1a2518		3a 8b 44 00 00 ab c2 20 a6 55 a0 00 4f a5 8f 8b
>1a2528		54 00 1a ab e2 20 a5 0c c9 02 90 18 a6 8f a9 22
>1a2538		9d 00 4f e8 bd 00 4f d0 fa a9 22 9d 00 4f a9 00
>1a2548		e8 9d 00 4f 28 2b 60 da 5a 8b 0b 08 08 c2 20 48
>1a2558		a9 00 08 5b 68 28 e2 20 c2 10 ad 00 4f c9 23 f0
>1a2568		0a c9 7c f0 17 28 2b ab 7a fa 60 c2 20 a9 03 00
>1a2578		85 8f a9 95 25 85 55 20 e7 24 80 e9 c2 20 a9 04
>1a2588		00 85 8f a9 99 25 85 55 20 e7 24 80 d8 44 49 52
>1a2598		00 42 52 55 4e 00 8b 08 20 e4 00 08 e2 20 48 a9
>1a25a8		1a 48 ab 68 28 a2 69 d2 20 16 03 28 ab 60 08 e2
>1a25b8		30 a9 01 20 1c 00 20 db 00 f0 06 c9 0d f0 02 80
>1a25c8		f5 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a25d8		30 64 d7 a9 00 4f 85 1a a9 00 00 85 1c 20 4e 08
>1a25e8		c2 20 a5 d7 d0 05 20 8e 21 80 07 20 a7 24 28 2b
>1a25f8		38 60 28 2b 18 60 c2 30 a2 ff fe 9a 20 9e 25 20
>1a2608		08 00 20 0c 00 a9 00 00 20 1c 00 20 4f 25 20 cb
>1a2618		25 b0 ec 80 e7 08 e2 20 20 55 07 c9 00 f0 2c c9
>1a2628		01 f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68
>1a2638		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 9f
>1a2648		1c e2 20 dc d4 08 20 fe 14 80 08 20 df 51 80 03
>1a2658		20 4e 54 28 60 08 e2 20 20 07 07 c9 00 f0 23 c9
>1a2668		01 f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2678		04 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc
>1a2688		d4 08 20 f1 51 80 03 20 43 54 28 60 08 e2 20 20
>1a2698		07 07 c9 00 f0 23 c9 01 f0 24 08 c2 20 48 a9 00
>1a26a8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a26b8		00 20 9f 1c e2 20 dc d4 08 20 03 52 80 03 20 e4
>1a26c8		54 28 60 20 71 06 20 a2 06 20 99 54 60 a5 23 8f
>1a26d8		1a 01 00 a5 29 8f 18 01 00 af 1e 01 00 85 23 60
>1a26e8		08 c2 30 48 20 71 06 a5 2d c9 00 00 d0 0d a5 2b
>1a26f8		d0 09 da a6 29 20 b7 61 fa 80 1c 20 a2 06 c2 20
>1a2708		a5 2b 48 a5 29 48 20 42 60 c2 20 68 85 29 68 85
>1a2718		2b 20 e4 54 20 21 62 68 28 60 08 20 03 05 20 34
>1a2728		05 c2 20 a5 23 25 29 85 23 a5 25 25 2b 85 25 28
>1a2738		60 08 20 03 05 20 34 05 c2 20 a5 23 05 29 85 23
>1a2748		a5 25 05 2b 85 25 28 60 08 20 03 05 c2 20 a5 23
>1a2758		49 ff ff 85 23 a5 25 49 ff ff 85 25 28 60 08 e2
>1a2768		20 20 55 07 c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f
>1a2778		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a2788		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 20
>1a2798		86 16 80 08 20 04 53 80 03 20 79 5a 28 60 08 e2
>1a27a8		20 20 55 07 c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f
>1a27b8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a27c8		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 20
>1a27d8		9d 16 80 08 20 25 53 80 03 20 8e 5a 28 60 08 e2
>1a27e8		20 20 55 07 c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f
>1a27f8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a2808		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 20
>1a2818		b4 16 80 08 20 52 53 80 03 20 a3 5a 28 60 08 e2
>1a2828		20 20 55 07 c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f
>1a2838		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a2848		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 20
>1a2858		cb 16 80 08 20 70 53 80 03 20 e2 5a 28 60 08 e2
>1a2868		20 20 55 07 c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f
>1a2878		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a2888		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 20
>1a2898		e2 16 80 08 20 8e 53 80 03 20 cd 5a 28 60 08 e2
>1a28a8		20 20 55 07 c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f
>1a28b8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a28c8		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 20
>1a28d8		f9 16 80 08 20 bb 53 80 03 20 b8 5a 28 60 08 e2
>1a28e8		20 a5 27 c9 00 f0 2d c9 01 f0 1f 08 c2 20 48 a9
>1a28f8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a2908		ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a5 26 49 80
>1a2918		85 26 80 16 c2 20 a5 23 49 ff ff 85 23 a5 25 49
>1a2928		ff ff 85 25 e6 23 d0 02 e6 25 28 60 08 e2 20 20
>1a2938		4d 1b 20 15 06 20 60 04 a5 23 0a 0a 0a 0a 05 29
>1a2948		48 a9 2c 20 6b 20 20 4d 1b 20 15 06 20 60 04 a5
>1a2958		23 0a 0a 0a 0a 05 29 48 a9 2c 20 6b 20 20 4d 1b
>1a2968		20 15 06 20 60 04 a5 23 0a 0a 0a 0a 05 29 48 af
>1a2978		0e 08 af 09 0c 8f 0e 08 af 68 8f 00 08 af 68 8f
>1a2988		02 08 af 68 8f 04 08 af af 0e 08 af 29 f7 8f 0e
>1a2998		08 af 20 a3 1f 28 60 08 e2 20 20 4d 1b 20 15 06
>1a29a8		20 60 04 a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 6b
>1a29b8		20 20 4d 1b 20 15 06 20 60 04 a5 23 0a 0a 0a 0a
>1a29c8		05 29 48 a9 2c 20 6b 20 20 4d 1b 20 03 05 20 96
>1a29d8		04 c2 20 a5 23 85 92 a5 29 85 23 20 60 04 e2 20
>1a29e8		a5 23 0a 0a 0a 0a 05 29 48 c2 20 a5 92 85 23 20
>1a29f8		60 04 e2 20 a5 23 0a 0a 0a 0a 05 29 48 af 0e 08
>1a2a08		af 09 0c 8f 0e 08 af 68 8f 0f 08 af 68 8f 0a 08
>1a2a18		af 68 8f 09 08 af 68 8f 06 08 af af 0e 08 af 29
>1a2a28		f7 8f 0e 08 af 20 a3 1f 28 60 08 e2 20 48 20 4d
>1a2a38		1b 20 15 06 e2 20 a5 23 29 0f 0a 0a 0a 0a 83 01
>1a2a48		a9 2c 20 6b 20 20 4d 1b 20 15 06 a5 23 29 0f 03
>1a2a58		01 8f 1e 00 00 e2 20 68 28 60 08 c2 20 f4 00 00
>1a2a68		e2 20 20 4d 1b 20 15 06 a5 23 83 01 a9 2c 20 6b
>1a2a78		20 20 4d 1b 20 15 06 a5 23 83 02 a9 2c 20 6b 20
>1a2a88		20 4d 1b 20 15 06 a5 23 8f 0d 00 af a3 02 8f 0e
>1a2a98		00 af a3 01 8f 0f 00 af c2 20 68 28 60 08 c2 20
>1a2aa8		f4 00 00 e2 20 20 4d 1b 20 03 05 a5 23 f0 16 a9
>1a2ab8		01 8f 04 00 af a9 20 8f 08 00 af 8f 09 00 af 22
>1a2ac8		2c 11 00 80 0a a9 00 8f 04 00 af 22 2c 11 00 a9
>1a2ad8		2c 85 37 20 a0 20 90 39 20 5e 1f 20 4d 1b 20 15
>1a2ae8		06 a5 23 83 01 a9 2c 20 6b 20 20 4d 1b 20 15 06
>1a2af8		a5 23 83 02 a9 2c 20 6b 20 20 4d 1b 20 15 06 a5
>1a2b08		23 8f 05 00 af a3 02 8f 06 00 af a3 01 8f 07 00
>1a2b18		af c2 20 68 28 60 08 c2 20 3b 38 e9 05 00 1b e2
>1a2b28		20 20 4d 1b 20 15 06 a5 23 c9 0a 90 1f 08 c2 20
>1a2b38		48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2
>1a2b48		20 29 ff 00 20 9f 1c e2 20 dc d4 08 83 01 a9 2c
>1a2b58		20 6b 20 20 4d 1b 20 15 06 a5 23 83 02 a9 2c 20
>1a2b68		6b 20 20 4d 1b 20 15 06 a5 23 83 03 a9 2c 20 6b
>1a2b78		20 20 4d 1b 20 15 06 a5 23 83 04 a9 2c 20 6b 20
>1a2b88		20 4d 1b 20 15 06 a5 23 83 05 a9 af 85 a0 a3 01
>1a2b98		0a c2 20 29 ff 00 aa bf d6 2b 1a 85 9e e2 20 a3
>1a2ba8		02 c2 20 29 ff 00 0a 0a 18 65 9e 85 9e e2 20 a0
>1a2bb8		02 00 a3 03 97 9e a0 01 00 a3 04 97 9e a0 00 00
>1a2bc8		a3 05 97 9e c2 20 3b 18 69 05 00 1b 28 60 00 20
>1a2bd8		00 24 00 28 00 2c 00 30 00 34 00 38 00 3c 40 1f
>1a2be8		80 1f da 5a 08 20 4d 1b 20 03 05 c2 20 a5 23 89
>1a2bf8		00 01 d0 17 af 00 00 af 89 00 01 f0 0e e2 20 a9
>1a2c08		00 8f 01 00 af a9 01 8f 01 00 af c2 20 a5 23 8f
>1a2c18		00 00 af e2 20 a5 24 c2 20 29 03 00 0a aa c2 20
>1a2c28		bf 71 2c 1a 8f 10 f0 1a bf 79 2c 1a 8f 12 f0 1a
>1a2c38		af 10 f0 1a 8f 08 01 00 af 12 f0 1a 8f 0a 01 00
>1a2c48		af 0c 01 00 8f 14 f0 1a e2 20 af 0e 01 00 8f 16
>1a2c58		f0 1a 22 2c 11 00 c2 20 af 1a 00 00 aa af 1c 00
>1a2c68		00 a8 20 20 00 28 7a fa 60 80 02 20 03 40 01 90
>1a2c78		01 e0 01 58 02 f0 00 2c 01 50 00 64 00 28 00 32
>1a2c88		00 3c 00 4b 00 1e 00 32 00 48 00 5c 00 20 00 2a
>1a2c98		00 34 00 43 00 16 00 34 00 da 08 c2 30 c9 02 00
>1a2ca8		b0 1c 0a 0a aa bf 00 f0 1a 85 9e bf 02 f0 1a 85
>1a2cb8		a0 c9 f0 00 b0 08 c9 b0 00 90 03 28 fa 60 08 c2
>1a2cc8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a2cd8		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 da 08 c2
>1a2ce8		30 c9 02 00 b0 17 0a 0a aa bf 08 f0 1a 85 9e bf
>1a2cf8		0a f0 1a 85 a0 c9 40 00 b0 03 28 fa 60 08 c2 20
>1a2d08		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>1a2d18		20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 c2 30 3b
>1a2d28		38 e9 07 00 1b 20 4d 1b 20 15 06 c2 20 a5 23 c9
>1a2d38		02 00 b0 59 83 01 e2 20 a9 2c 20 6b 20 20 4d 1b
>1a2d48		20 15 06 a5 23 83 03 a9 2c 20 6b 20 20 4d 1b 20
>1a2d58		15 06 a3 01 0a 0a 0a aa a3 03 d0 05 a5 23 0a 80
>1a2d68		04 a5 23 38 2a 9f 00 01 af c2 20 a9 2c 00 85 37
>1a2d78		20 a0 20 b0 37 c2 20 08 c2 20 a9 00 00 85 23 a9
>1a2d88		b0 00 85 25 e2 20 a9 00 85 27 28 80 27 08 c2 20
>1a2d98		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>1a2da8		20 29 ff 00 20 9f 1c e2 20 dc d4 08 c2 20 20 5e
>1a2db8		1f 20 4d 1b c2 20 a3 01 0a 0a aa a5 23 9f 00 f0
>1a2dc8		1a 9f 08 f0 1a 83 04 a5 25 9f 02 f0 1a 38 e9 b0
>1a2dd8		00 9f 0a f0 1a 83 06 a3 01 0a 0a 0a aa e2 20 a3
>1a2de8		04 9f 01 01 af a3 05 9f 02 01 af a3 06 9f 03 01
>1a2df8		af a9 00 9f 04 01 af 9f 05 01 af c2 30 3b 18 69
>1a2e08		07 00 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a2e18		20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>1a2e28		20 dc d4 08 08 c2 20 20 4d 1b 20 15 06 a5 23 20
>1a2e38		e5 2c c2 20 a5 9e 8f 05 04 af af 14 f0 1a 8f 08
>1a2e48		04 af e2 20 a5 a0 8f 07 04 af af 16 f0 1a 8f 0a
>1a2e58		04 af a9 00 8f 01 04 af a9 85 8f 00 04 af af 01
>1a2e68		04 af 30 fa a9 00 8f 00 04 af 28 60 08 c2 20 a5
>1a2e78		5d 8f 08 01 00 af 10 f0 1a 8f 0a 01 00 18 af 0c
>1a2e88		01 00 65 59 85 0c af 0e 01 00 69 00 00 85 0e 18
>1a2e98		a5 0c 65 9e 85 0c a5 0e 65 a0 85 0e e2 20 a5 55
>1a2ea8		87 0c 28 60 c2 20 a9 01 00 85 dd 38 a5 61 e5 59
>1a2eb8		85 69 10 0b 49 ff ff 1a 85 69 a9 ff ff 85 dd a9
>1a2ec8		01 00 85 df 38 a5 65 e5 5d 85 6d 10 0b 49 ff ff
>1a2ed8		1a 85 6d a9 ff ff 85 df a5 6d c5 69 b0 04 a5 69
>1a2ee8		80 06 a5 6d 49 ff ff 1a 48 0a 68 6a 85 71 20 74
>1a2ef8		2e a5 59 c5 61 d0 06 a5 5d c5 65 f0 36 a5 71 85
>1a2f08		75 a5 69 49 ff ff 1a c5 75 10 10 f0 0e 38 a5 71
>1a2f18		e5 6d 85 71 18 a5 59 65 dd 85 59 a5 75 c5 6d 10
>1a2f28		cd f0 cb 18 a5 71 65 69 85 71 18 a5 5d 65 df 85
>1a2f38		5d 80 bb 60 08 c2 20 3b 38 e9 06 00 1b 08 c2 20
>1a2f48		48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>1a2f58		28 c2 30 20 4d 1b 20 15 06 83 01 a9 2c 00 20 6b
>1a2f68		20 20 4d 1b 20 03 05 a5 23 83 03 a9 2c 00 20 6b
>1a2f78		20 20 4d 1b 20 03 05 a5 23 83 05 a9 2c 00 20 6b
>1a2f88		20 20 4d 1b 20 15 06 a5 23 85 55 a3 03 85 59 a3
>1a2f98		05 85 5d a3 01 20 a1 2c 20 74 2e c2 20 3b 18 69
>1a2fa8		06 00 1b 28 60 08 c2 20 3b 38 e9 0a 00 1b 08 c2
>1a2fb8		20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>1a2fc8		68 28 c2 30 20 4d 1b 20 15 06 83 01 a9 2c 00 20
>1a2fd8		6b 20 20 4d 1b 20 03 05 a5 23 83 03 a9 2c 00 20
>1a2fe8		6b 20 20 4d 1b 20 03 05 a5 23 83 05 a9 2c 00 20
>1a2ff8		6b 20 20 4d 1b 20 03 05 a5 23 83 07 a9 2c 00 20
>1a3008		6b 20 20 4d 1b 20 03 05 a5 23 83 09 a9 2c 00 20
>1a3018		6b 20 20 4d 1b 20 15 06 a5 23 85 55 a3 03 85 59
>1a3028		a3 05 85 5d a3 07 85 61 a3 09 85 65 a3 01 20 a1
>1a3038		2c 20 ac 2e c2 20 3b 18 69 0a 00 1b 28 60 08 c2
>1a3048		20 3b 38 e9 0c 00 1b 08 c2 20 48 a9 00 08 5b 68
>1a3058		28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 4d 1b
>1a3068		20 15 06 83 01 a9 2c 00 20 6b 20 20 4d 1b 20 03
>1a3078		05 a5 23 83 03 a9 2c 00 20 6b 20 20 4d 1b 20 03
>1a3088		05 a5 23 83 05 a9 2c 00 20 6b 20 20 4d 1b 20 03
>1a3098		05 a5 23 83 07 a9 2c 00 20 6b 20 20 4d 1b 20 03
>1a30a8		05 a5 23 83 09 a9 2c 00 20 6b 20 20 4d 1b 20 15
>1a30b8		06 a5 23 83 0b a3 01 20 e5 2c a9 07 00 8f 00 04
>1a30c8		af c2 20 a3 05 8f 00 01 00 af 10 f0 1a 8f 02 01
>1a30d8		00 18 af 04 01 00 63 03 85 0c e2 20 af 06 01 00
>1a30e8		69 00 85 0e c2 20 18 a5 9e 65 0c 8f 05 04 af e2
>1a30f8		20 a5 a0 65 0e 8f 07 04 af c2 20 38 a3 07 e3 03
>1a3108		85 0c 8f 08 04 af 38 af 10 f0 1a 8f 0e 04 af 38
>1a3118		a3 09 e3 05 8f 0a 04 af e2 20 a3 0b 8f 01 04 af
>1a3128		af 00 04 af 09 80 8f 00 04 af af 01 04 af 30 fa
>1a3138		a9 00 8f 00 04 af c2 20 3b 18 69 0c 00 1b 28 60
>1a3148		08 c2 20 c9 40 00 b0 13 0a 0a 0a 18 69 00 0c 85
>1a3158		9e a9 af 00 69 00 00 85 a0 28 60 08 c2 20 48 a9
>1a3168		00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29
>1a3178		ff 00 20 9f 1c e2 20 dc d4 08 08 c2 20 3b 38 e9
>1a3188		03 00 1b c2 30 20 4d 1b 20 15 06 83 01 a9 2c 00
>1a3198		20 6b 20 e2 20 20 4d 1b 20 15 06 a5 23 c9 08 b0
>1a31a8		56 83 03 a9 2c 20 6b 20 20 4d 1b 20 03 05 c2 20
>1a31b8		38 a5 23 e9 00 00 85 23 a5 25 e9 b0 00 85 25 30
>1a31c8		36 c2 20 a3 01 aa 20 48 31 a5 23 a0 01 00 97 9e
>1a31d8		e2 20 a5 25 c8 c8 97 9e bf 18 f0 1a 29 f1 85 0c
>1a31e8		a3 03 0a 29 0e 05 0c 87 9e 9f 18 f0 1a c2 20 3b
>1a31f8		18 69 03 00 1b 28 60 08 c2 20 48 a9 00 08 5b 68
>1a3208		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 9f
>1a3218		1c e2 20 dc d4 08 08 c2 20 3b 38 e9 04 00 1b c2
>1a3228		30 20 4d 1b 20 15 06 83 01 a9 2c 00 20 6b 20 20
>1a3238		4d 1b 20 03 05 a5 23 83 03 a9 2c 00 20 6b 20 20
>1a3248		4d 1b 20 03 05 a3 01 20 48 31 a3 03 a0 04 00 97
>1a3258		9e a5 23 a0 06 00 97 9e c2 20 3b 18 69 04 00 1b
>1a3268		28 60 08 c2 20 3b 38 e9 03 00 1b c2 30 20 4d 1b
>1a3278		20 15 06 83 01 a9 2c 00 20 6b 20 e2 20 20 4d 1b
>1a3288		20 03 05 a5 23 d0 04 83 03 80 04 a9 01 83 03 a9
>1a3298		2c 85 37 20 a0 20 b0 20 c2 30 a3 01 aa 20 48 31
>1a32a8		e2 20 bf 18 f0 1a 29 fe 85 0c a3 03 29 01 05 0c
>1a32b8		9f 18 f0 1a 87 9e 80 36 c2 30 20 5e 1f 20 4d 1b
>1a32c8		20 15 06 a5 23 c9 08 00 b0 2e 0a 0a 0a 0a 85 0c
>1a32d8		a3 01 aa 20 48 31 e2 20 a3 03 29 01 05 0c 85 0c
>1a32e8		bf 18 f0 1a 29 8e 05 0c 87 9e 9f 18 f0 1a c2 20
>1a32f8		3b 18 69 03 00 1b 28 60 08 c2 20 48 a9 00 08 5b
>1a3308		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a3318		9f 1c e2 20 dc d4 08 08 c2 20 c9 04 00 b0 19 8d
>1a3328		00 01 a9 04 00 8d 02 01 18 ad 04 01 69 80 02 85
>1a3338		9e a9 af 00 85 a0 28 60 08 c2 20 48 a9 00 08 5b
>1a3348		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a3358		9f 1c e2 20 dc d4 08 08 c2 20 c9 04 00 b0 19 8d
>1a3368		00 01 a9 0c 00 8d 02 01 18 ad 04 01 69 00 02 85
>1a3378		9e a9 af 00 85 a0 28 60 08 c2 20 48 a9 00 08 5b
>1a3388		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a3398		9f 1c e2 20 dc d4 08 08 c2 20 3b 38 e9 06 00 1b
>1a33a8		c2 20 20 4d 1b 20 15 06 a5 23 83 01 a9 2c 00 20
>1a33b8		6b 20 20 4d 1b 20 15 06 a5 23 83 03 a9 2c 00 20
>1a33c8		6b 20 20 4d 1b 20 15 06 a5 23 83 05 a9 2c 00 20
>1a33d8		6b 20 20 4d 1b 20 03 05 a3 01 20 1f 33 a5 23 87
>1a33e8		9e e2 20 38 a5 25 e9 b0 a0 02 00 97 9e a3 05 d0
>1a33f8		0d e2 20 a3 03 29 07 a0 03 00 97 9e 80 0d e2 20
>1a3408		a3 03 29 07 09 08 a0 03 00 97 9e c2 20 3b 18 69
>1a3418		06 00 1b 28 60 08 c2 20 3b 38 e9 06 00 1b c2 20
>1a3428		20 4d 1b 20 15 06 a5 23 83 01 a9 2c 00 20 6b 20
>1a3438		20 4d 1b 20 03 05 a5 23 83 03 a9 2c 00 20 6b 20
>1a3448		20 4d 1b 20 03 05 a5 23 83 05 a9 2c 00 20 6b 20
>1a3458		20 4d 1b 20 03 05 a3 01 20 5f 33 a5 23 a0 01 00
>1a3468		97 9e e2 20 38 a5 25 e9 b0 c8 c8 97 9e c2 20 a3
>1a3478		03 a0 04 00 97 9e a3 05 a0 06 00 97 9e c2 20 3b
>1a3488		18 69 06 00 1b 28 60 08 c2 20 f4 00 00 c2 20 20
>1a3498		4d 1b 20 15 06 a5 23 83 01 a9 2c 00 20 6b 20 20
>1a34a8		4d 1b 20 03 05 a3 01 20 5f 33 a5 23 d0 06 e2 20
>1a34b8		a9 00 80 04 e2 20 a9 01 e2 20 a0 00 00 97 9e c2
>1a34c8		20 68 28 60 08 c2 20 3b 38 e9 04 00 1b c2 20 20
>1a34d8		4d 1b 20 15 06 a5 23 83 01 a9 2c 00 20 6b 20 20
>1a34e8		4d 1b 20 03 05 a5 23 83 03 a9 2c 00 20 6b 20 20
>1a34f8		4d 1b 20 03 05 a3 01 20 5f 33 a5 23 a0 0a 00 97
>1a3508		9e a3 03 a0 08 00 97 9e c2 20 3b 18 69 04 00 1b
>1a3518		28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a3528		a9 00 8f 58 f0 1a af 5c f0 1a c9 b0 b0 1c 8f 24
>1a3538		04 af af 5b f0 1a 8f 23 04 af af 5a f0 1a 8f 22
>1a3548		04 af a9 10 8f 58 f0 1a 80 17 38 e9 b0 8f 04 04
>1a3558		af af 5b f0 1a 8f 03 04 af af 5a f0 1a 8f 02 04
>1a3568		af af 59 f0 1a d0 3c af 58 f0 1a f0 1b af 5d f0
>1a3578		1a 8f 28 04 af af 5e f0 1a 8f 29 04 af af 5f f0
>1a3588		1a 8f 2a 04 af 82 8b 00 af 5d f0 1a 8f 08 04 af
>1a3598		af 5e f0 1a 8f 09 04 af af 5f f0 1a 8f 0a 04 af
>1a35a8		82 70 00 af 58 f0 1a 09 01 8f 58 f0 1a 89 10 f0
>1a35b8		32 af 60 f0 1a 8f 28 04 af af 61 f0 1a 8f 29 04
>1a35c8		af af 62 f0 1a 8f 2a 04 af af 63 f0 1a 8f 2b 04
>1a35d8		af af 64 f0 1a 8f 2c 04 af af 65 f0 1a 8f 2d 04
>1a35e8		af 80 30 af 60 f0 1a 8f 08 04 af af 61 f0 1a 8f
>1a35f8		09 04 af af 62 f0 1a 8f 0a 04 af af 63 f0 1a 8f
>1a3608		0b 04 af af 64 f0 1a 8f 0c 04 af af 65 f0 1a 8f
>1a3618		0d 04 af e2 20 af 69 f0 1a c9 b0 b0 20 8f 27 04
>1a3628		af af 68 f0 1a 8f 26 04 af af 67 f0 1a 8f 25 04
>1a3638		af af 58 f0 1a 09 20 8f 58 f0 1a 80 17 38 e9 b0
>1a3648		8f 07 04 af af 68 f0 1a 8f 06 04 af af 67 f0 1a
>1a3658		8f 05 04 af af 66 f0 1a d0 3e af 58 f0 1a 89 20
>1a3668		f0 1b af 6a f0 1a 8f 28 04 af af 6b f0 1a 8f 29
>1a3678		04 af af 6c f0 1a 8f 2a 04 af 82 8b 00 af 6a f0
>1a3688		1a 8f 08 04 af af 6b f0 1a 8f 09 04 af af 6c f0
>1a3698		1a 8f 0a 04 af 82 70 00 af 58 f0 1a 09 02 8f 58
>1a36a8		f0 1a 89 20 f0 32 af 6d f0 1a 8f 28 04 af af 6e
>1a36b8		f0 1a 8f 29 04 af af 6f f0 1a 8f 2a 04 af af 70
>1a36c8		f0 1a 8f 2b 04 af af 71 f0 1a 8f 2e 04 af af 72
>1a36d8		f0 1a 8f 2f 04 af 80 30 af 6d f0 1a 8f 08 04 af
>1a36e8		af 6e f0 1a 8f 09 04 af af 6f f0 1a 8f 0a 04 af
>1a36f8		af 70 f0 1a 8f 0b 04 af af 71 f0 1a 8f 0e 04 af
>1a3708		af 72 f0 1a 8f 0f 04 af af 58 f0 1a 29 30 f0 43
>1a3718		c9 10 f0 76 c9 20 d0 03 82 8a 00 af 58 f0 1a 29
>1a3728		03 f0 23 c9 03 f0 23 08 c2 20 48 a9 00 08 5b 68
>1a3738		28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 9f
>1a3748		1c e2 20 dc d4 08 a9 01 80 02 a9 03 8f 20 04 af
>1a3758		82 7d 00 af 58 f0 1a 29 03 f0 23 c9 03 f0 23 08
>1a3768		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08
>1a3778		00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 a9 01
>1a3788		80 02 a9 03 8f 00 04 af 80 34 af 58 f0 1a 29 01
>1a3798		0a 09 11 8f 20 04 af af 58 f0 1a 29 02 09 11 8f
>1a37a8		00 04 af 80 19 af 58 f0 1a 29 02 09 21 8f 20 04
>1a37b8		af af 58 f0 1a 29 01 0a 09 21 8f 00 04 af af 00
>1a37c8		04 af 09 80 8f 00 04 af af 58 f0 1a 29 30 f0 0f
>1a37d8		af 20 04 af 09 80 8f 20 04 af ea ea ea ea ea af
>1a37e8		01 04 af 89 80 d0 f8 a9 00 8f 20 04 af 8f 00 04
>1a37f8		af 28 2b 60 0b 08 e2 20 c2 10 a9 00 a2 00 00 8f
>1a3808		59 f0 1a e8 e0 1a 00 d0 f6 20 bf 20 c9 e6 f0 23
>1a3818		c9 e7 f0 5e 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a3828		a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20
>1a3838		dc d4 08 20 6b 20 20 4d 1b 20 03 05 c2 20 a5 23
>1a3848		8f 5a f0 1a e2 20 a5 25 8f 5c f0 1a a9 2c 20 6b
>1a3858		20 20 4d 1b 20 03 05 c2 20 a5 23 8f 5d f0 1a e2
>1a3868		20 a5 25 8f 5f f0 1a e2 20 a9 00 8f 59 f0 1a 82
>1a3878		74 00 20 6b 20 20 4d 1b 20 03 05 c2 20 a5 23 8f
>1a3888		5a f0 1a e2 20 a5 25 8f 5c f0 1a a9 2c 20 6b 20
>1a3898		20 4d 1b 20 bf 05 c2 20 a5 23 8f 60 f0 1a 8d 00
>1a38a8		01 a9 2c 00 20 6b 20 20 4d 1b 20 bf 05 c2 20 a5
>1a38b8		23 8f 62 f0 1a 8d 02 01 a9 2c 00 20 6b 20 20 4d
>1a38c8		1b 20 bf 05 c2 20 a5 23 8f 64 f0 1a c2 20 ad 04
>1a38d8		01 8f 5d f0 1a e2 20 ad 06 01 8f 5f f0 1a e2 20
>1a38e8		a9 01 8f 59 f0 1a e2 20 a9 9c 20 6b 20 20 bf 20
>1a38f8		c9 e6 f0 23 c9 e7 f0 5e 08 c2 20 48 a9 00 08 5b
>1a3908		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>1a3918		9f 1c e2 20 dc d4 08 20 6b 20 20 4d 1b 20 03 05
>1a3928		c2 20 a5 23 8f 67 f0 1a e2 20 a5 25 8f 69 f0 1a
>1a3938		a9 2c 20 6b 20 20 4d 1b 20 03 05 c2 20 a5 23 8f
>1a3948		6a f0 1a e2 20 a5 25 8f 6c f0 1a e2 20 a9 00 8f
>1a3958		66 f0 1a 82 74 00 20 6b 20 20 4d 1b 20 03 05 c2
>1a3968		20 a5 23 8f 67 f0 1a e2 20 a5 25 8f 69 f0 1a a9
>1a3978		2c 20 6b 20 20 4d 1b 20 bf 05 c2 20 a5 23 8f 6d
>1a3988		f0 1a 8d 00 01 a9 2c 00 20 6b 20 20 4d 1b 20 bf
>1a3998		05 c2 20 a5 23 8f 6f f0 1a 8d 02 01 a9 2c 00 20
>1a39a8		6b 20 20 4d 1b 20 bf 05 c2 20 a5 23 8f 71 f0 1a
>1a39b8		c2 20 ad 04 01 8f 6a f0 1a e2 20 ad 06 01 8f 6c
>1a39c8		f0 1a e2 20 a9 01 8f 66 f0 1a c2 20 af 5d f0 1a
>1a39d8		cf 6a f0 1a d0 14 e2 20 af 5f f0 1a cf 6c f0 1a
>1a39e8		d0 08 c2 20 20 1a 35 28 2b 60 08 c2 20 48 a9 00
>1a39f8		08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff
>1a3a08		00 20 9f 1c e2 20 dc d4 08 08 c2 30 20 4d 1b 20
>1a3a18		15 06 a5 23 48 a9 2c 00 20 6b 20 20 4d 1b 20 15
>1a3a28		06 a4 23 fa 20 20 00 28 60 08 20 7f 1f e2 20 a7
>1a3a38		00 d0 03 4c d9 3a c9 3a d0 03 4c d9 3a c9 22 d0
>1a3a48		0b 20 59 1a 20 e7 43 a9 3b 20 6b 20 20 94 03 90
>1a3a58		44 20 8d 51 90 3f a9 3f 20 18 00 a9 20 20 18 00
>1a3a68		20 10 00 e2 20 a5 ea c9 02 f0 49 c9 00 d0 03 82
>1a3a78		84 00 c9 01 f0 5d 08 c2 20 48 a9 00 08 5b 68 28
>1a3a88		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>1a3a98		e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a3aa8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>1a3ab8		20 dc d4 08 c2 20 a9 00 4c 85 23 a9 00 00 85 25
>1a3ac8		e2 20 a9 02 85 27 c2 20 20 f0 50 a9 0d 00 20 18
>1a3ad8		00 28 60 c2 20 a5 00 85 40 a5 02 85 42 a9 00 4c
>1a3ae8		85 00 a9 00 00 85 02 20 af 57 c2 20 a5 40 85 00
>1a3af8		a5 42 85 02 80 d0 c2 20 a5 00 85 40 a5 02 85 42
>1a3b08		a9 00 4c 85 00 a9 00 00 85 02 20 8a 07 c2 20 a5
>1a3b18		40 85 00 a5 42 85 02 80 ad 08 20 7f 1f e2 20 a7
>1a3b28		00 f0 47 c9 3a f0 43 20 94 03 90 40 20 8d 51 90
>1a3b38		3b 20 ae 13 20 14 00 e2 20 a0 00 00 97 16 a9 00
>1a3b48		c8 97 16 c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9
>1a3b58		02 85 27 20 f0 50 20 7f 1f a7 00 f0 0d c9 3a f0
>1a3b68		09 c9 2c d0 07 20 5e 1f 80 b0 28 60 08 c2 20 48
>1a3b78		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>1a3b88		29 ff 00 20 9f 1c e2 20 dc d4 08 08 20 4d 1b 20
>1a3b98		03 05 e2 20 a9 5c 85 a2 c2 20 a5 23 85 a3 e2 20
>1a3ba8		a5 25 85 a5 e2 20 a9 2c 85 37 20 a0 20 90 41 20
>1a3bb8		5e 1f 20 4d 1b 20 bf 05 c2 20 a5 23 85 55 e2 20
>1a3bc8		a9 2c 85 37 20 a0 20 90 27 20 5e 1f 20 4d 1b 20
>1a3bd8		bf 05 c2 20 a5 23 85 59 e2 20 a9 2c 85 37 20 a0
>1a3be8		20 90 0d 20 5e 1f 20 4d 1b 20 bf 05 c2 20 a4 23
>1a3bf8		a6 59 a5 55 0b 8b 08 22 a2 08 00 28 ab 2b 20 a3
>1a3c08		1f 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a3c18		04 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc
>1a3c28		d4 08 08 e2 20 20 7f 1f 20 8d 51 90 64 a9 8f 20
>1a3c38		6b 20 a9 01 20 ac 18 a2 01 00 a9 00 8f 00 4d 00
>1a3c48		20 4d 1b 20 bf 05 c2 20 a5 23 9f 00 4d 00 e2 20
>1a3c58		af 00 4d 00 1a 8f 00 4d 00 30 55 e8 e8 20 7f 1f
>1a3c68		a7 00 c9 2c f0 25 c9 90 d0 27 20 5e 1f 20 0b 64
>1a3c78		c2 20 a5 c0 85 23 e2 20 a5 c2 85 25 64 26 a5 ea
>1a3c88		09 80 85 ea 85 27 20 f0 50 28 60 20 5e 1f 4c 48
>1a3c98		3c 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a3ca8		d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08
>1a3cb8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>1a3cc8		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08
>1a3cd8		20 7f 1f e2 20 a7 00 f0 28 c9 3a f0 24 20 94 03
>1a3ce8		90 21 20 8d 51 90 1c 20 2a 3d 20 f0 50 20 7f 1f
>1a3cf8		a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20 5e 1f 80
>1a3d08		cf 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a3d18		02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc
>1a3d28		d4 08 08 a5 02 85 42 a5 00 85 40 a5 1c 85 46 a5
>1a3d38		1a 85 44 c2 20 a5 3a d0 04 a5 38 f0 4e a5 38 85
>1a3d48		00 a5 3a 85 02 a5 3c 85 1a a5 3e 85 1c e2 20 a7
>1a3d58		00 f0 53 c9 3a f0 4f c9 2c d0 03 20 5e 1f 20 7f
>1a3d68		1f a7 00 c9 22 f0 4e 20 ad 03 b0 4e 08 c2 20 48
>1a3d78		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>1a3d88		29 ff 00 20 9f 1c e2 20 dc d4 08 c2 20 a9 00 00
>1a3d98		85 1a a9 16 00 85 1c 18 a5 1a 69 04 00 85 00 a5
>1a3da8		1c 69 00 00 85 02 e2 20 a9 80 85 35 a9 ab 85 37
>1a3db8		20 b5 1f 80 a9 20 59 1a 80 03 20 8e 19 c2 20 a5
>1a3dc8		00 85 38 a5 02 85 3a a5 1a 85 3c a5 1c 85 3e a5
>1a3dd8		44 85 1a a5 46 85 1c a5 40 85 00 a5 42 85 02 28
>1a3de8		60 20 a3 1f 60 64 38 64 3a 64 3c 64 3e 60 20 24
>1a3df8		00 60 20 4d 1b c2 20 a5 25 48 a5 23 48 e2 20 a7
>1a3e08		00 c9 2c d0 22 20 5e 1f 20 4d 1b c2 20 a5 26 d0
>1a3e18		35 68 85 08 68 85 0a c2 20 a5 23 87 08 e2 20 a0
>1a3e28		02 00 a5 25 97 08 60 08 c2 20 48 a9 00 08 5b 68
>1a3e38		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f
>1a3e48		1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>1a3e58		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>1a3e68		e2 20 dc d4 08 20 4d 1b c2 20 a5 25 48 a5 23 48
>1a3e78		e2 20 a7 00 c9 2c d0 19 20 5e 1f 20 4d 1b c2 20
>1a3e88		a5 25 d0 2c 68 85 08 68 85 0a c2 20 a5 23 87 08
>1a3e98		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a3ea8		d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08
>1a3eb8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>1a3ec8		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 20
>1a3ed8		4d 1b c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c
>1a3ee8		d0 1f 20 5e 1f 20 4d 1b e2 20 a5 24 d0 32 c2 20
>1a3ef8		a5 25 d0 2c 68 85 08 68 85 0a e2 20 a5 23 87 08
>1a3f08		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a3f18		d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08
>1a3f28		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>1a3f38		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08
>1a3f48		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f d3 08
>1a3f58		00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 e2
>1a3f68		20 a7 00 f0 05 20 5e 1f 80 f7 28 60 08 28 60 08
>1a3f78		28 60 08 28 60 08 c2 20 a5 1c 20 66 1c a5 1a 20
>1a3f88		66 1c a5 02 48 a5 00 48 20 a3 1f a5 02 20 66 1c
>1a3f98		a5 00 20 66 1c 68 85 00 68 85 02 20 7f 1f 20 8d
>1a3fa8		51 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a3fb8		05 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc
>1a3fc8		d4 08 e2 20 a5 ea 20 7d 1c a5 e9 20 7d 1c c2 20
>1a3fd8		a5 e7 20 66 1c 20 7f 1f e2 20 a7 00 c9 8a d0 6a
>1a3fe8		a5 ea c9 00 f0 04 c9 01 f0 00 20 5e 1f 20 4d 1b
>1a3ff8		20 f0 50 e2 20 a9 9c 20 6b 20 20 4d 1b c2 20 a5
>1a4008		27 20 66 1c a5 25 20 66 1c a5 23 20 66 1c e2 20
>1a4018		a9 9d 85 37 20 a0 20 90 1b 20 5e 1f 20 4d 1b e2
>1a4028		20 a5 27 20 66 1c c2 20 a5 25 20 66 1c a5 23 20
>1a4038		66 1c 80 14 c2 20 a9 00 00 20 66 1c a9 00 00 20
>1a4048		66 1c a9 01 00 20 66 1c 28 60 08 c2 20 48 a9 00
>1a4058		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>1a4068		00 20 9f 1c e2 20 dc d4 08 08 8b 08 e2 20 48 a9
>1a4078		00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a4088		30 a4 33 c8 c8 c2 20 b9 0c 00 85 e7 b9 0e 00 e2
>1a4098		20 85 e9 b9 10 00 85 ea c2 20 5a 20 8e 4f 7a c2
>1a40a8		20 b9 00 00 85 29 b9 02 00 85 2b e2 20 b9 04 00
>1a40b8		85 2d c2 20 5a 20 1d 26 20 f0 50 7a c2 20 b9 06
>1a40c8		00 85 29 b9 08 00 85 2b e2 20 b9 0a 00 85 2d c2
>1a40d8		20 b9 02 00 30 0a 20 a6 28 20 cc 04 f0 28 80 08
>1a40e8		20 66 28 20 cc 04 f0 1e c2 20 b9 12 00 85 00 b9
>1a40f8		14 00 85 02 b9 16 00 85 1a b9 18 00 85 1c e2 20
>1a4108		a9 03 85 dc 80 17 a2 23 08 20 6d 18 c2 20 18 a5
>1a4118		33 69 1a 00 85 33 a5 35 69 00 00 85 35 ab 28 60
>1a4128		08 a5 1a 48 a5 1c 48 20 7f 1f 20 8a 07 a5 23 f0
>1a4138		26 20 5d 22 90 42 e2 20 a9 02 85 dc 20 a3 1f c2
>1a4148		20 68 20 66 1c 68 20 66 1c a5 02 20 66 1c a5 00
>1a4158		20 66 1c e6 31 28 60 68 68 08 c2 20 48 a9 00 08
>1a4168		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a4178		20 9f 1c e2 20 dc d4 08 68 68 08 c2 20 48 a9 00
>1a4188		08 5b 68 28 e2 20 a9 06 8f d3 08 00 c2 20 29 ff
>1a4198		00 20 9f 1c e2 20 dc d4 08 08 c2 30 a5 31 f0 1e
>1a41a8		20 88 1c 85 00 20 88 1c 85 02 20 88 1c 85 1a 20
>1a41b8		88 1c 85 1c c6 31 e2 20 a9 03 85 dc 28 60 08 c2
>1a41c8		20 48 a9 00 08 5b 68 28 e2 20 a9 07 8f d3 08 00
>1a41d8		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 20 4d
>1a41e8		1b 20 cc 04 f0 1c e2 20 a9 97 20 6b 20 20 8a 07
>1a41f8		20 cc 04 f0 12 20 5d 22 90 2c e2 20 a9 02 85 dc
>1a4208		80 03 20 a3 1f 28 60 08 c2 20 48 a9 00 08 5b 68
>1a4218		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f
>1a4228		1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>1a4238		e2 20 a9 06 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>1a4248		e2 20 dc d4 08 08 e2 20 a9 01 85 dc 28 60 08 20
>1a4258		7f 1f 20 8a 07 a5 23 f0 0d 20 5d 22 90 27 e2 20
>1a4268		a9 02 85 dc 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a4278		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>1a4288		e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4298		20 a9 06 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>1a42a8		20 dc d4 08 20 0f 18 20 58 0f 20 8d 4e 60 08 a7
>1a42b8		00 10 03 20 5e 1f 20 8d 51 b0 03 4c 2d 43 e2 20
>1a42c8		20 bf 20 c9 8f d0 0e a9 8f 20 6b 20 a9 00 8f 00
>1a42d8		4d 00 20 91 19 20 7f 1f e2 20 a7 00 c9 8a f0 03
>1a42e8		4c 2d 43 20 5e 1f a5 ea 48 a5 e9 48 a5 e8 48 a5
>1a42f8		e7 48 20 4d 1b 68 85 e7 68 85 e8 68 85 e9 68 85
>1a4308		ea 29 80 f0 1b 20 00 4f 90 3a c2 20 a0 09 00 b7
>1a4318		08 85 c0 e2 20 c8 c8 b7 08 85 c2 20 ec 65 80 03
>1a4328		20 f0 50 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4338		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>1a4348		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4358		a9 05 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20
>1a4368		dc d4 08 08 e2 20 20 bf 20 c9 00 f0 6d 20 4d 1b
>1a4378		e2 20 a5 27 c9 ff f0 1b c9 02 d0 05 20 e7 43 80
>1a4388		12 c9 00 d0 05 20 07 44 80 09 c9 01 d0 4f 20 1a
>1a4398		44 80 00 20 7f 1f a7 00 f0 40 c9 3a f0 3c c9 2c
>1a43a8		f0 23 c9 3b f0 24 08 c2 20 48 a9 00 08 5b 68 28
>1a43b8		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>1a43c8		e2 20 dc d4 08 a9 09 20 18 00 20 5e 1f 20 7f 1f
>1a43d8		a7 00 f0 09 c9 3a f0 05 80 93 20 89 02 28 60 08
>1a43e8		8b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a0
>1a43f8		00 00 b7 23 f0 06 20 18 00 c8 80 f6 ab 28 60 08
>1a4408		c2 20 20 0d 14 a5 16 85 23 a5 18 85 25 20 e7 43
>1a4418		28 60 08 20 56 5b c2 20 a5 16 85 23 a5 18 85 25
>1a4428		20 e7 43 28 60 08 e2 20 85 b5 4a 4a 4a 4a 29 0f
>1a4438		18 69 30 97 16 c8 a5 b5 29 0f 18 69 30 97 16 c8
>1a4448		28 60 e2 20 a9 8f 20 6b 20 08 20 4d 1b e2 20 c2
>1a4458		10 af 0e 08 af 09 08 8f 0e 08 af 20 ae 13 a0 00
>1a4468		00 af 06 08 af 20 2d 44 a9 2f 97 16 c8 af 09 08
>1a4478		af 20 2d 44 a9 2f 97 16 c8 af 0f 08 af 20 2d 44
>1a4488		af 0a 08 af 20 2d 44 a9 00 97 16 af 0e 08 af 29
>1a4498		f7 8f 0e 08 af c2 20 a5 16 85 23 a5 18 85 25 e2
>1a44a8		20 a9 02 85 27 28 e2 20 20 5e 1f 60 e2 20 a9 8f
>1a44b8		20 6b 20 08 20 4d 1b e2 20 c2 10 af 0e 08 af 09
>1a44c8		08 8f 0e 08 af 20 ae 13 a0 00 00 af 04 08 af 29
>1a44d8		7f 20 2d 44 a9 3a 97 16 c8 af 02 08 af 20 2d 44
>1a44e8		a9 3a 97 16 c8 af 00 08 af 20 2d 44 a9 00 97 16
>1a44f8		af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5 16 85 23
>1a4508		a5 18 85 25 e2 20 a9 02 85 27 28 e2 20 20 5e 1f
>1a4518		60 e2 20 a9 8f 20 6b 20 08 20 4d 1b e2 20 a9 01
>1a4528		85 27 a9 03 8f 00 e2 af a9 01 8f 01 e2 af c2 30
>1a4538		af 84 e8 af 8f 08 e2 af af 84 e8 af 29 ff 7f 8f
>1a4548		0a e2 af a9 ff ff 8f 0c e2 af a9 ff 7f 8f 0e e2
>1a4558		af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25
>1a4568		28 e2 20 20 5e 1f 60 e2 20 a9 8f 20 6b 20 08 c2
>1a4578		30 20 4d 1b 20 95 05 c2 20 a5 25 48 a5 23 48 20
>1a4588		7f 1f e2 20 a7 00 c9 2c f0 03 4c e6 45 20 5e 1f
>1a4598		20 4d 1b 20 bf 05 c2 20 a5 23 48 20 7f 1f e2 20
>1a45a8		a7 00 c9 2c f0 03 4c e6 45 20 5e 1f 20 4d 1b 20
>1a45b8		bf 05 c2 20 a5 23 85 8f e2 20 a5 25 85 91 c2 20
>1a45c8		68 85 29 a9 00 00 85 2b 68 85 23 68 85 25 e2 20
>1a45d8		a9 02 85 27 20 06 16 e2 20 20 5e 1f 28 60 08 c2
>1a45e8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a45f8		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 c2 20
>1a4608		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>1a4618		20 29 ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f
>1a4628		20 6b 20 08 c2 30 20 4d 1b e2 20 a5 27 c9 02 f0
>1a4638		03 4c a8 46 c2 20 a5 25 48 a5 23 48 20 7f 1f e2
>1a4648		20 a7 00 c9 2c f0 03 4c c7 46 20 5e 1f 20 4d 1b
>1a4658		e2 20 a5 27 c9 00 d0 48 c2 20 a5 23 85 8f c2 20
>1a4668		68 85 23 68 85 25 e2 20 a9 02 85 27 e2 20 a0 00
>1a4678		00 b7 23 f0 03 c8 80 f9 c2 20 98 38 e5 8f 30 09
>1a4688		85 29 a9 00 00 85 2b 80 07 a9 00 00 85 29 85 2b
>1a4698		e2 20 a9 00 85 2d 20 06 16 e2 20 20 5e 1f 28 60
>1a46a8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a46b8		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08
>1a46c8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a46d8		00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 c2
>1a46e8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a46f8		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9
>1a4708		8f 20 6b 20 08 c2 30 20 4d 1b e2 20 a5 27 c9 02
>1a4718		f0 03 4c 71 47 c2 20 a5 25 48 a5 23 48 20 7f 1f
>1a4728		e2 20 a7 00 c9 2c f0 03 4c 90 47 20 5e 1f 20 4d
>1a4738		1b e2 20 a5 27 c9 00 d0 30 c2 20 a5 23 85 8f c2
>1a4748		20 a9 00 00 85 29 a9 00 00 85 2b e2 20 a9 00 85
>1a4758		2d c2 20 68 85 23 68 85 25 e2 20 a9 02 85 27 20
>1a4768		06 16 e2 20 20 5e 1f 28 60 08 c2 20 48 a9 00 08
>1a4778		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a4788		20 9f 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a4798		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>1a47a8		9f 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>1a47b8		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 9f
>1a47c8		1c e2 20 dc d4 08 e2 20 a9 8f 20 6b 20 20 4d 1b
>1a47d8		c2 10 e2 20 a5 27 c9 02 d0 23 c2 20 a5 00 85 40
>1a47e8		a5 02 85 42 a5 23 85 00 a5 25 85 02 20 8a 07 a5
>1a47f8		40 85 00 a5 42 85 02 e2 20 20 5e 1f 60 08 c2 20
>1a4808		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a4818		20 29 ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f
>1a4828		20 6b 20 08 20 4d 1b c2 10 e2 20 a5 27 c9 00 d0
>1a4838		1a 20 0d 14 c2 20 a5 16 85 23 a5 18 85 25 e2 20
>1a4848		a9 02 85 27 28 e2 20 20 5e 1f 60 08 c2 20 48 a9
>1a4858		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a4868		ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f 20 6b
>1a4878		20 08 20 4d 1b 20 95 05 c2 20 64 0c 64 0e e2 30
>1a4888		a0 00 b7 23 c9 20 f0 04 c9 24 d0 03 c8 80 f3 b7
>1a4898		23 20 be 03 90 1e c2 20 06 0c 26 0e 06 0c 26 0e
>1a48a8		06 0c 26 0e 06 0c 26 0e e2 20 20 df 03 05 0c 85
>1a48b8		0c c8 80 db c2 20 a5 0c 85 23 a5 0e 85 25 e2 20
>1a48c8		a9 00 85 27 28 e2 20 20 5e 1f 60 e2 20 a9 8f 20
>1a48d8		6b 20 08 20 4d 1b 20 03 05 20 ae 13 e2 30 a0 ff
>1a48e8		a9 00 97 16 88 a5 23 29 0f aa bf 00 d0 1a 97 16
>1a48f8		88 a5 23 29 f0 4a 4a 4a 4a aa bf 00 d0 1a 97 16
>1a4908		88 a5 24 85 23 a5 25 85 24 a5 26 85 25 a9 00 85
>1a4918		26 a5 23 d0 d0 a5 24 d0 cc a5 25 d0 c8 98 38 65
>1a4928		16 85 23 a5 17 85 24 a5 18 85 25 a5 19 85 26 a9
>1a4938		02 85 27 28 e2 20 20 5e 1f 60 08 c2 20 48 a9 00
>1a4948		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a4958		00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f 20 6b 20
>1a4968		20 4d 1b e2 20 a5 27 c9 02 d0 1f 8b a5 25 48 ab
>1a4978		c2 10 a6 23 20 9a 14 ab 84 23 c2 20 64 25 e2 20
>1a4988		a9 00 85 27 e2 20 20 5e 1f 60 08 c2 20 48 a9 00
>1a4998		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a49a8		00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f 20 6b 20
>1a49b8		20 4d 1b e2 20 a5 27 c9 00 d0 12 e2 20 a7 23 85
>1a49c8		23 64 24 64 25 64 30 e2 20 20 5e 1f 60 08 c2 20
>1a49d8		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a49e8		20 29 ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f
>1a49f8		20 6b 20 20 4d 1b e2 20 a5 27 c9 00 d0 1d c2 20
>1a4a08		a7 23 85 0c e2 20 a0 02 00 b7 23 85 25 64 26 c2
>1a4a18		20 a5 0c 85 23 e2 20 20 5e 1f 60 08 c2 20 48 a9
>1a4a28		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a4a38		ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f 20 6b
>1a4a48		20 20 4d 1b e2 20 a5 27 c9 00 d0 0e c2 20 a7 23
>1a4a58		85 23 64 25 e2 20 20 5e 1f 60 08 c2 20 48 a9 00
>1a4a68		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a4a78		00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f 20 6b 20
>1a4a88		20 4d 1b e2 20 a5 27 c9 00 d0 24 20 ae 13 a5 23
>1a4a98		87 16 a9 00 a0 01 00 97 16 c2 20 a5 16 85 23 a5
>1a4aa8		18 85 25 e2 20 a9 02 85 27 e2 20 20 5e 1f 60 08
>1a4ab8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a4ac8		00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 e2 20
>1a4ad8		a9 8f 20 6b 20 20 4d 1b e2 20 a5 27 c9 02 d0 14
>1a4ae8		a7 23 85 23 64 24 64 25 64 26 a9 00 85 27 e2 20
>1a4af8		20 5e 1f 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4b08		a9 04 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20
>1a4b18		dc d4 08 e2 20 a9 8f 20 6b 20 20 4d 1b e2 20 a5
>1a4b28		27 c9 00 d0 39 e2 20 a5 26 d0 52 a5 25 d0 4e a5
>1a4b38		24 d0 4a c2 10 20 ae 13 a4 23 e2 20 a9 00 97 16
>1a4b48		88 30 07 a9 20 97 16 88 10 fb a9 02 85 27 c2 20
>1a4b58		a5 16 85 23 a5 18 85 25 e2 20 20 5e 1f 60 08 c2
>1a4b68		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a4b78		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 c2 20
>1a4b88		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>1a4b98		20 29 ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f
>1a4ba8		20 6b 20 20 4d 1b e2 20 a5 27 c9 00 d0 39 e2 20
>1a4bb8		a5 26 d0 52 a5 25 d0 4e a5 24 d0 4a c2 10 20 ae
>1a4bc8		13 a4 23 e2 20 a9 00 97 16 88 30 07 a9 09 97 16
>1a4bd8		88 10 fb a9 02 85 27 c2 20 a5 16 85 23 a5 18 85
>1a4be8		25 e2 20 20 5e 1f 60 08 c2 20 48 a9 00 08 5b 68
>1a4bf8		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 9f
>1a4c08		1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>1a4c18		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>1a4c28		e2 20 dc d4 08 e2 20 a9 8f 20 6b 20 20 4d 1b e2
>1a4c38		20 a5 27 c9 00 f0 23 c9 01 f0 3e 08 c2 20 48 a9
>1a4c48		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a4c58		ff 00 20 9f 1c e2 20 dc d4 08 c2 20 a5 25 10 21
>1a4c68		49 ff ff 85 25 a5 23 49 ff ff 18 69 01 00 85 23
>1a4c78		a5 25 69 00 00 85 25 80 08 e2 20 a5 26 29 7f 85
>1a4c88		26 e2 20 20 5e 1f 60 e2 20 a9 8f 20 6b 20 20 4d
>1a4c98		1b e2 20 a5 27 c9 00 d0 25 c2 20 a5 25 30 12 d0
>1a4ca8		04 a5 23 f0 13 a9 00 00 85 25 a9 01 00 85 23 80
>1a4cb8		07 a9 ff ff 85 25 85 23 e2 20 20 5e 1f 60 08 c2
>1a4cc8		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a4cd8		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9
>1a4ce8		8f 20 6b 20 20 4d 1b 20 03 05 e2 20 20 5e 1f 60
>1a4cf8		e2 20 a9 8f 20 6b 20 20 4d 1b 20 71 06 20 b6 5f
>1a4d08		e2 20 20 5e 1f 60 e2 20 a9 8f 20 6b 20 20 4d 1b
>1a4d18		20 71 06 20 e5 5f e2 20 20 5e 1f 60 e2 20 a9 8f
>1a4d28		20 6b 20 20 4d 1b 20 71 06 20 14 60 e2 20 20 5e
>1a4d38		1f 60 e2 20 a9 8f 20 6b 20 20 4d 1b 20 71 06 20
>1a4d48		42 60 e2 20 20 5e 1f 60 e2 20 a9 8f 20 6b 20 20
>1a4d58		4d 1b 20 71 06 20 6b 61 e2 20 20 5e 1f 60 e2 20
>1a4d68		a9 8f 20 6b 20 20 4d 1b 20 71 06 20 41 61 e2 20
>1a4d78		20 5e 1f 60 e2 20 a9 8f 20 6b 20 20 4d 1b 20 71
>1a4d88		06 20 8d 61 e2 20 20 5e 1f 60 e2 20 a9 8f 20 6b
>1a4d98		20 20 4d 1b 20 71 06 20 21 62 e2 20 20 5e 1f 60
>1a4da8		e2 20 a9 8f 20 6b 20 20 4d 1b 20 71 06 20 a3 62
>1a4db8		e2 20 20 5e 1f 60 00 ea 60 08 0b 08 c2 20 48 a9
>1a4dc8		00 08 5b 68 28 c2 30 c2 20 a9 00 00 85 d9 e2 20
>1a4dd8		a9 16 85 db c2 30 a9 00 00 a0 00 00 97 d9 a0 02
>1a4de8		00 97 d9 a0 04 00 97 d9 20 34 1f 2b 28 60 8b 08
>1a4df8		c2 20 a9 00 00 85 1a a9 16 00 85 1c 20 34 1f 20
>1a4e08		13 22 28 ab 60 08 c2 20 64 55 a9 ff 7f 85 59 20
>1a4e18		89 02 20 bf 20 29 ff 00 c9 00 00 f0 2c c9 81 00
>1a4e28		f0 1a 20 7f 1f 20 8a 07 a5 23 85 55 20 bf 20 29
>1a4e38		ff 00 c9 00 00 f0 12 c9 81 00 d0 2a 20 6b 20 20
>1a4e48		7f 1f 20 8a 07 a5 23 85 59 a5 1c 48 a5 1a 48 a5
>1a4e58		02 48 a5 00 48 20 10 17 68 85 00 68 85 02 68 85
>1a4e68		1a 68 85 1c 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a4e78		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>1a4e88		e2 20 dc d4 08 08 08 c2 20 48 a9 00 08 5b 68 28
>1a4e98		c2 20 64 e4 64 e7 e2 20 64 e6 64 e9 64 ea c2 20
>1a4ea8		38 a5 d9 69 04 00 85 e1 e2 20 a5 db 69 00 85 e3
>1a4eb8		28 60 c9 5f f0 1a c9 3a b0 04 c9 30 b0 12 c9 5b
>1a4ec8		b0 04 c9 41 b0 0a c9 7b b0 04 c9 61 b0 02 18 60
>1a4ed8		38 60 08 e2 20 c2 10 a0 00 00 b7 0c f0 0a d7 e7
>1a4ee8		d0 13 c8 c0 08 00 d0 f2 b7 e7 20 08 04 20 ba 4e
>1a4ef8		b0 03 28 38 60 28 18 60 08 e2 20 c2 10 a0 00 00
>1a4f08		a2 00 00 b7 e7 f0 0b 20 08 04 9f 00 4e 00 c8 e8
>1a4f18		80 f1 a9 00 9f 00 4e 00 c2 20 a9 00 4e 85 e7 e2
>1a4f28		20 a9 00 85 e9 c2 20 a5 e4 85 08 d0 06 e2 20 a5
>1a4f38		e6 f0 4d e2 20 a5 e6 85 0a a5 ea a0 00 00 d7 08
>1a4f48		d0 17 c2 20 18 a5 08 69 01 00 85 0c e2 20 a5 0a
>1a4f58		69 00 85 0e 20 da 4e b0 2a a0 0d 00 c2 20 b7 08
>1a4f68		85 0c c8 c8 e2 20 b7 08 85 0e d0 06 c2 20 a5 0c
>1a4f78		f0 0e c2 20 a5 0c 85 08 e2 20 a5 0e 85 0a 80 b9
>1a4f88		28 18 60 28 38 60 08 20 00 4f b0 1f 08 c2 20 48
>1a4f98		a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00 c2 20
>1a4fa8		29 ff 00 20 9f 1c e2 20 dc d4 08 c2 30 a0 09 00
>1a4fb8		b7 08 85 23 c8 c8 b7 08 85 25 e2 20 a0 00 00 b7
>1a4fc8		08 85 27 28 60 08 c2 20 18 a5 e1 69 10 00 85 08
>1a4fd8		e2 20 a5 e3 69 00 85 0a c5 bc 90 27 c2 20 a5 08
>1a4fe8		c5 ba 90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4ff8		a9 09 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20
>1a5008		dc d4 08 c2 20 a5 e1 85 c0 e2 20 a5 e3 85 c2 c2
>1a5018		20 a5 08 85 e1 e2 20 a5 0a 85 e3 28 60 08 e2 20
>1a5028		a5 27 c5 ea f0 33 a5 ea c9 00 d0 05 20 03 05 80
>1a5038		2f c9 01 d0 05 20 71 06 80 26 08 c2 20 48 a9 00
>1a5048		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a5058		00 20 9f 1c e2 20 dc d4 08 c9 02 d0 03 20 a0 15
>1a5068		c2 10 20 cd 4f c2 30 18 a5 c0 69 01 00 85 08 e2
>1a5078		20 a5 c2 69 00 85 0a a0 00 00 a9 00 97 08 c8 c0
>1a5088		08 00 d0 f8 a0 00 00 b7 e7 f0 10 20 08 04 20 ba
>1a5098		4e 90 08 97 08 c8 c0 08 00 d0 ec c2 20 a0 09 00
>1a50a8		a5 23 97 c0 a5 25 c8 c8 97 c0 a5 e4 a0 0d 00 97
>1a50b8		c0 c8 c8 e2 20 a5 e6 97 c0 c2 20 a5 c0 85 e4 e2
>1a50c8		20 a5 c2 85 e6 e2 20 a0 00 00 a5 27 97 c0 c9 02
>1a50d8		f0 02 28 60 c2 20 a5 23 85 c0 e2 20 a5 25 85 c2
>1a50e8		20 bc 11 20 d1 11 80 ea 08 c2 30 a5 e4 d0 06 e2
>1a50f8		20 a5 e6 f0 05 20 00 4f b0 05 20 25 50 80 4e e2
>1a5108		20 a5 27 c5 ea f0 33 a5 ea c9 00 d0 05 20 03 05
>1a5118		80 2c c9 01 d0 05 20 71 06 80 23 08 c2 20 48 a9
>1a5128		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a5138		ff 00 20 9f 1c e2 20 dc d4 08 c9 02 f0 11 c2 30
>1a5148		a0 09 00 a5 23 97 08 c8 c8 a5 25 97 08 28 60 20
>1a5158		a0 15 a0 09 00 b7 08 85 c0 c8 c8 e2 20 b7 08 85
>1a5168		c2 20 bc 11 20 f0 11 e2 20 a5 27 c9 02 f0 02 80
>1a5178		cd c2 20 a5 23 85 c0 e2 20 a5 25 85 c2 20 bc 11
>1a5188		20 d1 11 80 b9 08 20 7f 1f e2 20 a7 00 20 94 03
>1a5198		90 42 c2 20 a5 00 85 e7 e2 20 a5 02 85 e9 20 5e
>1a51a8		1f a7 00 f0 0d c9 24 f0 14 c9 25 f0 09 20 ba 4e
>1a51b8		b0 ec a9 01 80 0c 20 5e 1f a9 00 80 05 20 5e 1f
>1a51c8		a9 02 85 ea 20 bf 20 c9 8f d0 06 a5 ea 09 80 85
>1a51d8		ea 28 38 60 28 18 60 08 c2 20 18 a5 23 65 29 85
>1a51e8		23 a5 25 65 2b 85 25 28 60 08 c2 20 38 a5 23 e5
>1a51f8		29 85 23 a5 25 e5 2b 85 25 28 60 08 c2 20 3b 38
>1a5208		e9 0a 00 1b c2 30 a9 00 00 83 01 83 03 83 05 83
>1a5218		07 83 09 a5 25 10 18 a9 00 80 83 01 a5 25 49 ff
>1a5228		ff 85 25 a5 23 49 ff ff 1a 85 23 d0 02 e6 25 a5
>1a5238		2b 10 1a a3 01 49 00 80 83 01 a5 2b 49 ff ff 85
>1a5248		2b a5 29 49 ff ff 1a 85 29 d0 02 e6 2b a5 25 f0
>1a5258		04 a5 2b d0 5a a5 23 8f 00 01 00 a5 29 8f 02 01
>1a5268		00 af 04 01 00 83 03 af 06 01 00 83 05 a5 25 8f
>1a5278		00 01 00 a5 29 8f 02 01 00 18 af 04 01 00 63 05
>1a5288		83 05 af 06 01 00 63 07 83 07 a5 23 8f 00 01 00
>1a5298		a5 2b 8f 02 01 00 18 af 04 01 00 63 05 83 05 af
>1a52a8		06 01 00 63 07 83 07 a3 07 f0 23 a3 09 f0 1f 08
>1a52b8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0d 8f d3 08
>1a52c8		00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 c2 30
>1a52d8		a3 01 10 16 a3 05 49 ff ff 83 05 a3 03 49 ff ff
>1a52e8		1a 83 03 d0 05 a3 05 1a 83 05 a3 03 85 23 a3 05
>1a52f8		85 25 c2 20 3b 18 69 0a 00 1b 28 60 08 c2 20 a5
>1a5308		23 c5 29 a5 25 e5 2b 50 03 49 00 80 30 06 64 23
>1a5318		64 25 80 07 a9 ff ff 85 23 85 25 28 60 08 c2 20
>1a5328		a5 23 c5 29 d0 0c a5 25 c5 2b d0 06 64 23 64 25
>1a5338		80 16 a5 29 c5 23 a5 2b e5 25 50 03 49 00 80 10
>1a5348		eb a9 ff ff 85 23 85 25 28 60 08 c2 20 a5 2b c5
>1a5358		25 d0 0f a5 29 c5 23 d0 09 a9 ff ff 85 23 85 25
>1a5368		80 04 64 23 64 25 28 60 08 c2 20 a5 2b c5 25 d0
>1a5378		0c a5 29 c5 23 d0 06 64 23 64 25 80 07 a9 ff ff
>1a5388		85 23 85 25 28 60 08 c2 20 a5 23 c5 29 d0 0f a5
>1a5398		25 c5 2b d0 09 a9 ff ff 85 23 85 25 80 13 a5 29
>1a53a8		c5 23 a5 2b e5 25 50 03 49 00 80 30 e8 64 23 64
>1a53b8		25 28 60 08 c2 20 a5 23 c5 29 d0 0f a5 25 c5 2b
>1a53c8		d0 09 a9 ff ff 85 23 85 25 80 13 a5 23 c5 29 a5
>1a53d8		25 e5 2b 50 03 49 00 80 30 e8 64 23 64 25 28 60
>1a53e8		08 c2 20 8f 12 01 00 8a 8f 10 01 00 af 16 01 00
>1a53f8		aa af 14 01 00 28 60 08 e2 20 a9 03 8f 00 e2 af
>1a5408		a9 00 8f 01 e2 af c2 20 a5 23 8f 08 e2 af a5 25
>1a5418		8f 0a e2 af a9 00 00 8f 0c e2 af a9 00 01 8f 0e
>1a5428		e2 af ea ea ea ea ea ea af 08 e2 af 85 23 af 0a
>1a5438		e2 af 85 25 a9 01 00 85 27 28 60 08 e2 20 a9 40
>1a5448		8f 00 e2 af 80 09 08 e2 20 a9 48 8f 00 e2 af a9
>1a5458		02 8f 01 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f
>1a5468		0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af ea
>1a5478		ea ea e2 20 af 06 e2 af 29 07 d0 10 c2 20 af 08
>1a5488		e2 af 85 23 af 0a e2 af 85 25 28 60 20 2f 55 80
>1a5498		f9 08 e2 20 a9 01 8f 01 e2 af a9 00 8f 00 e2 af
>1a54a8		c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af a5 29
>1a54b8		8f 0c e2 af a5 2b 8f 0e e2 af ea ea ea e2 20 af
>1a54c8		05 e2 af 29 17 d0 10 c2 20 af 08 e2 af 85 23 af
>1a54d8		0a e2 af 85 25 28 60 20 2f 55 80 f9 08 e2 20 a9
>1a54e8		00 8f 01 e2 af a9 00 8f 00 e2 af c2 20 a5 23 8f
>1a54f8		08 e2 af a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5
>1a5508		2b 8f 0e e2 af ea ea ea e2 20 af 04 e2 af 29 07
>1a5518		d0 10 c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25
>1a5528		28 60 20 2f 55 80 f9 e2 20 89 01 f0 20 00 08 c2
>1a5538		20 48 a9 00 08 5b 68 28 e2 20 a9 0c 8f d3 08 00
>1a5548		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 89 02 f0
>1a5558		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0d 8f
>1a5568		d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08
>1a5578		89 04 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a5588		a9 0e 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20
>1a5598		dc d4 08 60 08 e2 20 a9 00 8f 01 e2 af a9 02 8f
>1a55a8		00 e2 af c2 20 a9 00 a0 8f 0c e2 af a9 00 00 8f
>1a55b8		0e e2 af a5 23 8f 08 e2 af a5 25 8f 0a e2 af ea
>1a55c8		ea ea e2 20 af 04 e2 af 89 07 f0 01 00 c2 20 af
>1a55d8		08 e2 af 85 23 af 0a e2 af 85 25 28 60 08 e2 20
>1a55e8		a9 01 8f 01 e2 af a9 02 8f 00 e2 af c2 20 a9 00
>1a55f8		a0 8f 0c e2 af a9 00 00 8f 0e e2 af a5 23 8f 08
>1a5608		e2 af a5 25 8f 0a e2 af ea ea ea af 08 e2 af 85
>1a5618		23 af 0a e2 af 85 25 28 60 08 c2 20 a5 23 d0 0a
>1a5628		a5 25 29 ff 7f d0 03 28 38 60 28 18 60 08 e2 20
>1a5638		38 e9 30 20 2c 04 c2 20 29 ff 00 18 65 23 85 23
>1a5648		a5 25 69 00 00 85 25 28 60 08 e2 20 c9 30 90 04
>1a5658		c9 3a 90 1c c9 61 90 04 c9 67 90 0a c9 41 90 04
>1a5668		c9 47 90 07 80 31 38 e9 57 80 08 38 e9 37 80 03
>1a5678		38 e9 30 06 23 26 24 26 25 26 26 06 23 26 24 26
>1a5688		25 26 26 06 23 26 24 26 25 26 26 06 23 26 24 26
>1a5698		25 26 26 05 23 85 23 28 60 08 e2 20 c9 30 f0 06
>1a56a8		c9 31 f0 0a 80 0f c2 20 06 23 26 25 80 07 c2 20
>1a56b8		38 26 23 26 25 28 60 08 e2 30 a5 61 f0 0d aa a5
>1a56c8		69 d0 15 a9 00 8f 01 e2 af 80 15 e2 20 a9 03 8f
>1a56d8		01 e2 af ea ea ea 80 62 e2 20 a9 01 8f 01 e2 af
>1a56e8		e2 20 a9 43 8f 00 e2 af c2 20 a9 00 10 8f 08 e2
>1a56f8		af a9 00 00 8f 0a e2 af c2 20 a9 00 a0 8f 0c e2
>1a5708		af a9 00 00 8f 0e e2 af ea ea ea ca f0 2c af 08
>1a5718		e2 af 8f 0c 08 00 af 0a e2 af 8f 0e 08 00 e2 20
>1a5728		a9 42 8f 00 e2 af c2 20 af 0c 08 00 8f 08 e2 af
>1a5738		af 0e 08 00 8f 0a e2 af 80 be c2 20 af 08 e2 af
>1a5748		85 23 af 0a e2 af 85 25 e2 20 a9 01 85 27 28 60
>1a5758		08 c2 20 a5 5d 85 23 a5 5f 85 25 20 71 59 c2 20
>1a5768		a5 23 85 29 a5 25 85 2b c2 20 a5 59 85 23 a5 5b
>1a5778		85 25 20 99 54 c2 20 a5 55 85 29 a5 57 85 2b 20
>1a5788		4e 54 c2 20 a5 23 85 29 a5 25 85 2b 20 bf 56 20
>1a5798		e4 54 c2 20 a5 65 f0 07 a5 25 09 00 80 85 25 e2
>1a57a8		20 a9 01 85 27 28 60 5a 08 c2 30 64 23 64 25 64
>1a57b8		55 64 57 64 65 64 59 64 5b a9 01 00 85 5d 64 5f
>1a57c8		64 61 64 63 64 69 e2 20 a0 00 00 b7 00 c9 2b f0
>1a57d8		33 c9 2d f0 2b c9 26 f0 3a 20 ad 03 90 03 82 ac
>1a57e8		00 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a57f8		d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08
>1a5808		a9 01 85 65 c8 b7 00 c9 26 f0 08 20 ad 03 90 d1
>1a5818		82 7a 00 c8 b7 00 c9 68 f0 0e c9 48 f0 0a c9 62
>1a5828		f0 4c c9 42 f0 48 80 b9 c8 b7 00 20 be 03 b0 02
>1a5838		80 af 20 51 56 c8 b7 00 20 be 03 b0 f5 e2 20 a5
>1a5848		65 f0 11 c2 20 38 a9 00 00 e5 23 85 23 a9 00 00
>1a5858		e5 25 85 25 e2 20 a9 00 85 27 c2 20 18 98 65 00
>1a5868		85 00 a5 02 69 00 00 85 02 e2 20 28 7a 60 c8 b7
>1a5878		00 c9 30 f0 07 c9 31 f0 03 82 65 ff 20 a1 56 c8
>1a5888		b7 00 c9 30 f0 f6 c9 31 f0 f2 82 b0 ff 20 35 56
>1a5898		c8 b7 00 c9 2e f0 08 20 ad 03 b0 f1 82 9e ff c2
>1a58a8		20 20 71 59 c2 20 a5 23 85 55 a5 25 85 57 64 23
>1a58b8		64 25 e2 20 80 36 20 35 56 c2 20 a5 5f 8f 00 01
>1a58c8		00 a9 0a 00 8f 02 01 00 af 04 01 00 85 5f a5 5d
>1a58d8		8f 00 01 00 a9 0a 00 8f 02 01 00 af 04 01 00 85
>1a58e8		5d af 06 01 00 18 65 5f 85 5f e2 20 c8 b7 00 c9
>1a58f8		65 f0 24 c9 45 f0 20 20 ad 03 b0 ba c2 20 20 71
>1a5908		59 c2 20 a5 23 85 59 a5 25 85 5b 64 23 64 25 20
>1a5918		58 57 e2 20 82 43 ff c2 20 20 71 59 c2 20 a5 23
>1a5928		85 59 a5 25 85 5b 64 23 64 25 e2 20 c8 b7 00 c9
>1a5938		2b f0 10 c9 2d f0 08 20 ad 03 b0 12 82 a2 fe a9
>1a5948		01 85 69 c8 b7 00 20 ad 03 b0 03 82 93 fe 20 35
>1a5958		56 c8 b7 00 20 ad 03 b0 f5 c2 20 a5 23 85 61 a5
>1a5968		25 85 63 20 58 57 82 f1 fe 08 20 ff 53 28 60 08
>1a5978		c2 20 a9 6e 5c 85 29 a9 1a 00 85 2b e2 20 a9 01
>1a5988		85 2d c2 20 20 4a 5a c9 ff ff d0 0c a9 00 00 8d
>1a5998		23 08 8d 25 08 82 a1 00 f4 00 00 f4 00 00 f4 00
>1a59a8		00 e2 20 ad 26 08 29 80 83 01 ad 25 08 2a ad 26
>1a59b8		08 2a 83 02 a9 00 83 06 ad 25 08 09 80 83 05 ad
>1a59c8		24 08 83 04 ad 23 08 83 03 a3 02 c9 96 f0 3a 90
>1a59d8		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0d 8f
>1a59e8		d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08
>1a59f8		c2 20 a3 05 4a 83 05 a3 03 6a 83 03 e2 20 a3 02
>1a5a08		1a 83 02 c9 96 f0 02 80 e7 a3 01 f0 1b c2 20 a3
>1a5a18		03 49 ff ff 18 69 01 00 8d 23 08 a3 05 49 ff ff
>1a5a28		69 00 00 8d 25 08 80 0c c2 20 a3 03 8d 23 08 a3
>1a5a38		05 8d 25 08 c2 20 68 68 68 e2 20 a9 00 8d 27 08
>1a5a48		28 60 da 08 c2 20 a5 25 48 a5 23 48 20 43 54 20
>1a5a58		21 56 b0 11 a5 25 89 00 80 d0 05 a9 01 00 80 08
>1a5a68		a9 ff ff 80 03 a9 00 00 fa 86 23 fa 86 25 28 fa
>1a5a78		60 08 c2 30 20 4a 5a c9 ff ff d0 05 20 df 04 80
>1a5a88		03 20 f1 04 28 60 08 c2 30 20 4a 5a c9 01 00 d0
>1a5a98		05 20 df 04 80 03 20 f1 04 28 60 08 c2 30 20 4a
>1a5aa8		5a c9 00 00 d0 05 20 df 04 80 03 20 f1 04 28 60
>1a5ab8		08 c2 30 20 4a 5a c9 01 00 f0 05 20 df 04 80 03
>1a5ac8		20 f1 04 28 60 08 c2 30 20 4a 5a c9 ff ff f0 05
>1a5ad8		20 df 04 80 03 20 f1 04 28 60 08 c2 30 20 4a 5a
>1a5ae8		c9 00 00 f0 05 20 df 04 80 03 20 f1 04 28 60 08
>1a5af8		e2 20 97 23 c8 a9 00 97 23 28 60 da 08 e2 20 c9
>1a5b08		80 90 0a 48 a9 2d 20 f7 5a 68 49 ff 1a c2 30 29
>1a5b18		ff 00 c9 64 00 90 0e a2 64 00 20 e8 53 18 69 30
>1a5b28		00 20 f7 5a 8a a2 0a 00 20 e8 53 18 69 30 00 20
>1a5b38		f7 5a 8a 18 69 30 00 20 f7 5a 28 fa 60 08 e2 20
>1a5b48		c2 10 a0 00 00 b7 23 f0 03 c8 80 f9 28 60 08 e2
>1a5b58		20 c2 10 f4 00 00 f4 00 00 f4 00 00 20 21 56 90
>1a5b68		19 20 ae 13 e2 20 a0 00 00 a9 20 97 16 c8 a9 30
>1a5b78		97 16 c8 a9 00 97 16 82 ce 00 e2 20 a5 26 10 08
>1a5b88		29 7f 85 26 a9 01 83 01 c2 20 a9 00 00 83 03 c2
>1a5b98		20 af 6a 5c 1a 85 29 af 6c 5c 1a 85 2b 20 4a 5a
>1a5ba8		89 00 80 d0 12 20 e5 55 a3 03 1a 83 03 20 4a 5a
>1a5bb8		c9 ff ff f0 12 80 ee 20 9c 55 a3 03 3a 83 03 20
>1a5bc8		4a 5a c9 ff ff f0 f0 e2 30 a5 25 0a a5 26 2a 83
>1a5bd8		05 38 a9 96 e3 05 aa f0 0f a5 25 09 80 85 25 46
>1a5be8		25 66 24 66 23 ca d0 f7 c2 10 e2 20 64 26 a9 00
>1a5bf8		85 27 a3 01 f0 11 c2 20 38 a9 00 00 e5 23 85 23
>1a5c08		a9 00 00 e5 25 85 25 20 0d 14 c2 20 a5 16 85 23
>1a5c18		a5 18 85 25 20 45 5b e2 20 c8 a9 00 97 23 88 88
>1a5c28		b7 23 c8 97 23 c0 02 00 d0 f4 a9 2e 97 23 e2 20
>1a5c38		18 a3 03 69 05 83 06 f0 19 20 45 5b a9 45 20 f7
>1a5c48		5a a3 06 20 03 5b 80 0a c2 20 a5 16 85 23 a5 18
>1a5c58		85 25 e2 20 a9 02 85 27 c2 20 3b 18 69 06 00 1b
>1a5c68		28 60 00 50 c3 47 00 00 80 3f f3 04 b5 3f f3 04
>1a5c78		35 3f e2 20 a9 48 8f 00 e2 af c2 20 bd 00 00 8f
>1a5c88		08 e2 af bd 02 00 8f 0a e2 af 88 e8 e8 e8 e8 e2
>1a5c98		20 a9 00 8f 01 e2 af c2 20 af 23 08 00 8f 0c e2
>1a5ca8		af af 25 08 00 8f 0e e2 af ea ea ea af 08 e2 af
>1a5cb8		48 af 0a e2 af 8f 0a e2 af 68 8f 08 e2 af e2 20
>1a5cc8		a9 02 8f 01 e2 af c2 20 bd 00 00 8f 0c e2 af bd
>1a5cd8		02 00 8f 0e e2 af ea ea ea 88 f0 14 af 08 e2 af
>1a5ce8		48 af 0a e2 af 8f 0a e2 af 68 8f 08 e2 af 80 9b
>1a5cf8		af 08 e2 af 8f 23 08 00 af 0a e2 af 8f 25 08 00
>1a5d08		60 e2 20 a9 00 8f 00 e2 af a9 00 8f 01 e2 af c2
>1a5d18		20 a5 23 8f 08 e2 af 8f 0c e2 af af 25 08 00 8f
>1a5d28		0a e2 af 8f 0e e2 af ea ea ea af 08 e2 af 85 23
>1a5d38		af 0a e2 af 85 25 60 e2 20 a9 00 8f 00 e2 af a9
>1a5d48		01 8f 01 e2 af c2 20 a5 23 8f 0c e2 af af 25 08
>1a5d58		00 8f 0e e2 af af 93 63 1a 8f 08 e2 af af 95 63
>1a5d68		1a 8f 0a e2 af ea ea ea af 08 e2 af 85 23 af 0a
>1a5d78		e2 af 85 25 60 a2 00 00 a5 23 c5 29 a5 25 e5 2b
>1a5d88		90 1e a5 23 8f 08 e2 af a5 25 8f 0a e2 af ea ea
>1a5d98		ea af 08 e2 af 85 23 af 0a e2 af 85 25 e8 80 d8
>1a5da8		60 e2 20 a5 26 10 09 29 7f 85 26 a9 01 48 80 03
>1a5db8		a9 00 48 a9 40 8f 00 e2 af a9 02 8f 01 e2 af c2
>1a5dc8		30 af fb 63 1a 85 29 8f 0c e2 af af fd 63 1a 85
>1a5dd8		2b 8f 0e e2 af 20 7d 5d e2 20 68 c2 20 f0 1e a5
>1a5de8		23 8f 08 e2 af a5 25 8f 0a e2 af ea ea ea af 08
>1a5df8		e2 af 85 23 af 0a e2 af 29 ff 7f 85 25 60 5a a2
>1a5e08		00 00 a0 00 00 a5 23 df ff 63 1a a5 25 ff 01 64
>1a5e18		1a 90 2c bf fb 63 1a 8f 08 e2 af bf fd 63 1a 8f
>1a5e28		0a e2 af a5 23 8f 0c e2 af a5 25 8f 0e e2 af ea
>1a5e38		ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 38 98
>1a5e48		2a a8 e8 e8 e8 e8 e0 0c 00 d0 ba 98 aa 7a 60 08
>1a5e58		c2 30 48 da 20 09 5d 8b e2 20 a9 1a 48 ab c2 20
>1a5e68		a2 3b 63 5a a0 05 00 20 7a 5c 7a a9 01 00 8f 27
>1a5e78		08 00 ab fa 68 28 60 08 c2 30 48 da a5 23 85 29
>1a5e88		a5 25 85 2b 20 09 5d 8b e2 20 a9 1a 48 ab c2 20
>1a5e98		a2 4f 63 5a a0 05 00 20 7a 5c 7a ab 20 e4 54 fa
>1a5ea8		68 28 60 08 c2 30 48 da a5 23 85 29 a5 25 85 2b
>1a5eb8		20 09 5d 8b e2 20 a9 1a 48 ab c2 20 a2 63 63 5a
>1a5ec8		a0 05 00 20 7a 5c 7a ab 20 e4 54 fa 68 28 60 08
>1a5ed8		c2 30 48 da e2 20 a9 40 8f 00 e2 af a9 02 8f 01
>1a5ee8		e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af
>1a5ef8		af 93 63 1a 8f 0c e2 af af 95 63 1a 8f 0e e2 af
>1a5f08		ea ea ea af 08 e2 af 85 0c af 0a e2 af 85 0e e2
>1a5f18		20 a9 48 8f 00 e2 af c2 20 ea ea ea af 08 e2 af
>1a5f28		85 10 af 0a e2 af 85 12 e2 20 a9 01 8f 01 e2 af
>1a5f38		c2 20 a5 0c 8f 08 e2 af a5 0e 8f 0a e2 af a5 10
>1a5f48		8f 0c e2 af a5 12 8f 0e e2 af ea ea ea af 08 e2
>1a5f58		af 85 23 af 0a e2 af 85 25 e2 20 a9 08 8f 00 e2
>1a5f68		af a9 02 8f 01 e2 af c2 20 a5 23 8f 08 e2 af a5
>1a5f78		25 8f 0a e2 af ea ea ea af 08 e2 af 85 29 af 0a
>1a5f88		e2 af 85 2b 20 09 5d 8b e2 20 a9 1a 48 ab c2 20
>1a5f98		a2 77 63 5a a0 08 00 20 7a 5c 7a a9 01 00 8f 27
>1a5fa8		08 00 8f 2d 08 00 20 e4 54 ab fa 68 28 60 08 c2
>1a5fb8		30 48 da 20 a9 5d 20 06 5e da 8a 29 01 00 d0 05
>1a5fc8		20 7f 5e 80 03 20 57 5e fa 8a 29 04 00 f0 0a e2
>1a5fd8		20 a5 26 09 80 85 26 c2 20 fa 68 28 60 08 c2 30
>1a5fe8		48 da 20 a9 5d 20 06 5e da 8a 29 01 00 d0 05 20
>1a5ff8		57 5e 80 03 20 7f 5e fa 8a 29 02 00 f0 0a e2 20
>1a6008		a5 26 09 80 85 26 c2 20 fa 68 28 60 08 c2 30 48
>1a6018		da 20 a9 5d 20 06 5e 20 ab 5e 8a 29 01 00 f0 03
>1a6028		20 3f 5d 8a e2 20 4a 4a 69 00 29 01 f0 06 a5 26
>1a6038		09 80 85 26 c2 20 fa 68 28 60 08 c2 30 48 da 5a
>1a6048		a5 25 10 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a6058		a9 17 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20
>1a6068		dc d4 08 c2 30 a5 23 cf 93 63 1a a5 25 cf 95 63
>1a6078		1a b0 04 20 3f 5d 18 a9 00 00 a8 2a 48 e2 20 a9
>1a6088		00 8f 00 e2 af a9 01 8f 01 e2 af c2 20 af eb 63
>1a6098		1a 85 29 8f 0c e2 af af ed 63 1a 85 2b 8f 0e e2
>1a60a8		af 20 7d 5d 8a f0 07 0a 0a 0a 0a 0a 0a a8 af ef
>1a60b8		63 1a 85 29 8f 0c e2 af af f1 63 1a 85 2b 8f 0e
>1a60c8		e2 af 20 7d 5d 8a f0 0b 0a 0a 0a 0a 85 29 18 98
>1a60d8		65 29 a8 af f3 63 1a 85 29 8f 0c e2 af af f5 63
>1a60e8		1a 85 2b 8f 0e e2 af 20 7d 5d 8a f0 09 0a 0a 85
>1a60f8		29 18 98 65 29 a8 af f7 63 1a 85 29 8f 0c e2 af
>1a6108		af f9 63 1a 85 2b 8f 0e e2 af 20 7d 5d 86 29 18
>1a6118		98 65 29 a8 20 d7 5e a5 23 85 29 a5 25 85 2b 98
>1a6128		85 23 64 25 20 71 59 20 4e 54 68 d0 07 a5 25 09
>1a6138		00 80 85 25 7a fa 68 28 60 08 c2 30 48 da a5 23
>1a6148		85 29 a5 25 85 2b 20 09 5d 8b e2 20 a9 1a 48 ab
>1a6158		c2 20 a2 9b 63 a0 05 00 20 7a 5c ab 20 e4 54 fa
>1a6168		68 28 60 08 c2 30 48 da 20 41 61 af 03 64 1a 85
>1a6178		29 af 05 64 1a 85 2b 20 43 54 a5 25 49 00 80 85
>1a6188		25 fa 68 28 60 08 c2 30 48 da a5 23 85 29 a5 25
>1a6198		85 2b 20 09 5d 8b e2 20 a9 1a 48 ab c2 20 a2 af
>1a61a8		63 a0 05 00 20 7a 5c ab 20 e4 54 fa 68 28 60 c2
>1a61b8		20 a5 23 85 29 a5 25 85 2b c2 20 af 93 63 1a 85
>1a61c8		23 af 95 63 1a 85 25 8a f0 30 4a aa 90 03 20 e4
>1a61d8		54 c2 20 a5 25 48 a5 23 48 c2 20 a5 29 85 23 a5
>1a61e8		2b 85 25 20 09 5d c2 20 a5 23 85 29 a5 25 85 2b
>1a61f8		c2 20 68 85 23 68 85 25 80 cd 60 08 c2 30 48 da
>1a6208		8b e2 20 a9 1a 48 ab c2 20 a2 c3 63 5a a0 0a 00
>1a6218		20 7a 5c 7a ab fa 68 28 60 08 c2 30 48 da 5a a5
>1a6228		23 05 25 d0 10 c2 20 af 93 63 1a 85 23 af 95 63
>1a6238		1a 85 25 80 61 a5 25 29 00 80 a8 f0 07 a5 25 29
>1a6248		ff 7f 85 25 c2 20 a5 25 48 a5 23 48 20 03 05 a6
>1a6258		23 20 71 06 c2 20 a5 23 85 29 a5 25 85 2b c2 20
>1a6268		68 85 23 68 85 25 20 43 54 20 03 62 c2 20 a5 25
>1a6278		48 a5 23 48 c2 20 af f7 63 1a 85 23 af f9 63 1a
>1a6288		85 25 20 b7 61 c2 20 68 85 29 68 85 2b 20 e4 54
>1a6298		98 f0 03 20 3f 5d 7a fa 68 28 60 08 c2 30 48 a5
>1a62a8		25 10 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a62b8		17 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc
>1a62c8		d4 08 c2 30 05 23 f0 68 c2 20 af 97 63 1a 85 29
>1a62d8		af 99 63 1a 85 2b e2 20 a9 01 85 2d c2 20 c2 20
>1a62e8		a5 25 48 a5 23 48 20 99 54 a5 25 c5 2b d0 09 a5
>1a62f8		23 45 29 29 f8 ff f0 30 20 4e 54 c2 20 af 97 63
>1a6308		1a 85 29 af 99 63 1a 85 2b 20 99 54 c2 20 a5 23
>1a6318		85 29 a5 25 85 2b c2 20 68 85 23 68 85 25 c2 20
>1a6328		a5 25 48 a5 23 48 80 be c2 20 68 85 29 68 85 2b
>1a6338		68 28 60 01 0d d0 37 61 0b b6 ba ab aa 2a 3d 00
>1a6348		00 00 bf 00 00 80 3f 1d ef 38 36 01 0d 50 b9 89
>1a6358		88 08 3c ab aa 2a be 00 00 80 3f a4 27 b3 3c d1
>1a6368		0d 5d 3d 89 88 08 3e ab aa aa 3e 00 00 80 3f 89
>1a6378		88 88 3d d9 89 9d 3d 8c 2e ba 3d 39 8e e3 3d 25
>1a6388		49 12 3e cd cc 4c 3e ab aa aa 3e 00 00 80 3f 00
>1a6398		00 00 40 8e e3 f8 3c 6e db 36 3d 9a 99 99 3d ab
>1a63a8		aa 2a 3e 00 00 80 3f 39 8e e3 3d 25 49 12 be cd
>1a63b8		cc 4c 3e ab aa aa be 00 00 80 3f 1d ef 38 36 01
>1a63c8		0d d0 37 01 0d 50 39 61 0b b6 3a 89 88 08 3c ab
>1a63d8		aa 2a 3d ab aa 2a 3e 00 00 00 3f 00 00 80 3f 00
>1a63e8		00 80 3f c1 2c a1 6d 5f 97 07 4b 81 64 5a 42 54
>1a63f8		f8 2d 40 db 0f c9 40 db 0f 49 40 db 0f c9 3f db
>1a6408		0f 49 3f 08 20 bc 11 c2 20 a9 01 00 85 23 a9 00
>1a6418		00 85 25 e2 20 af 00 4d 00 c2 20 29 ff 00 85 8f
>1a6428		a8 a2 01 00 c2 20 bf 00 4d 00 85 29 a9 00 00 85
>1a6438		2b 20 94 26 e8 e8 88 d0 eb c2 20 a9 04 00 85 29
>1a6448		a9 00 00 85 2b 20 94 26 e2 20 af 00 4d 00 85 0c
>1a6458		a9 00 85 0d c2 20 06 0c 38 a5 23 65 0c 85 23 a5
>1a6468		25 69 00 00 85 25 d0 29 e2 20 a5 ea 09 80 a6 23
>1a6478		20 80 0f e2 20 af 00 4d 00 87 c0 a0 01 00 a2 00
>1a6488		00 e2 20 bf 01 4d 00 97 c0 e4 8f f0 23 e8 c8 80
>1a6498		f0 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a64a8		d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08
>1a64b8		e2 20 38 a5 c0 67 c0 85 08 a5 c1 69 00 85 09 a5
>1a64c8		c2 69 00 85 0a 64 0b c2 20 a0 05 00 b7 c3 85 0c
>1a64d8		e2 20 c8 c8 b7 c3 85 0e 64 0f e2 20 a9 00 87 08
>1a64e8		c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85
>1a64f8		0a c5 0e d0 e5 a5 08 c5 0c d0 df 28 60 08 c2 20
>1a6508		64 08 64 0a e2 20 af 00 4d 00 85 8f 64 90 a2 01
>1a6518		00 e2 20 a7 c0 c5 8f f0 1f 08 c2 20 48 a9 00 08
>1a6528		5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00
>1a6538		20 9f 1c e2 20 dc d4 08 c9 01 f0 3a a0 01 00 e2
>1a6548		20 bf 00 4d 00 85 23 64 24 64 25 64 26 b7 c0 85
>1a6558		29 64 2a 64 2b 64 2c a5 23 c5 29 b0 68 20 94 26
>1a6568		c2 20 18 a5 08 65 23 85 08 a5 0a 65 25 85 0a e8
>1a6578		e8 c8 c4 8f d0 c9 e2 20 18 bf 00 4d 00 85 90 65
>1a6588		08 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69 00 00
>1a6598		85 0a c2 20 06 08 26 0a 06 08 26 0a e2 20 38 a5
>1a65a8		08 65 8f 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69
>1a65b8		00 00 85 0a 18 a5 08 65 c0 85 08 e2 20 a5 0a 65
>1a65c8		c2 85 0a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a65d8		20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>1a65e8		20 dc d4 08 08 20 bc 11 e2 20 a0 00 00 b7 c3 29
>1a65f8		7f c5 27 d0 28 a5 27 48 c2 20 a5 25 48 a5 23 48
>1a6608		20 05 65 68 85 23 68 85 25 e2 20 68 85 27 c2 20
>1a6618		a5 23 87 08 a0 02 00 a5 25 97 08 28 60 08 c2 20
>1a6628		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a6638		20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 20 bc 11
>1a6648		f4 00 00 f4 00 00 e2 20 48 20 05 65 e2 20 68 c2
>1a6658		20 68 68 c2 20 a7 08 85 23 a0 02 00 b7 08 85 25
>1a6668		e2 20 a0 00 00 b7 c3 29 7f 85 27 28 60 da 0b 08
>1a6678		08 c2 20 48 a9 00 08 5b 68 28 c2 30 a5 25 89 f0
>1a6688		ff d0 29 89 0f 00 d0 0c a5 23 89 00 fc d0 05 20
>1a6698		07 44 80 2e a2 0a 00 46 25 66 23 ca d0 f9 20 07
>1a66a8		44 e2 20 a9 4b 20 18 00 c2 20 80 16 a2 14 00 46
>1a66b8		25 66 23 ca d0 f9 20 07 44 e2 20 a9 4d 20 18 00
>1a66c8		c2 20 28 2b fa 60 0b 08 c2 30 a9 00 00 8f b6 08
>1a66d8		00 8f b8 08 00 e2 20 20 bf 20 c9 00 f0 08 20 4d
>1a66e8		1b 20 95 05 80 11 c2 20 a9 00 00 85 23 85 25 e2
>1a66f8		20 a9 02 85 27 c2 20 20 2f 68 22 08 11 00 b0 22
>1a6708		20 e0 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a6718		10 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc
>1a6728		d4 08 20 89 02 08 c2 20 48 a9 20 03 5b 68 28 e2
>1a6738		20 a0 00 00 b7 18 d0 03 82 a9 00 c9 e5 d0 03 82
>1a6748		96 00 a0 0b 00 b7 18 89 08 f0 03 82 a9 00 89 02
>1a6758		f0 03 82 83 00 29 0f c9 0f d0 03 82 7a 00 a0 00
>1a6768		00 b7 18 20 18 00 c8 c0 08 00 d0 f5 a9 20 20 18
>1a6778		00 a0 08 00 b7 18 20 18 00 c8 c0 0b 00 d0 f5 a9
>1a6788		09 20 18 00 a0 0b 00 b7 18 89 10 d0 1e c2 20 a0
>1a6798		1c 00 b7 18 8f 23 08 00 c8 c8 b7 18 8f 25 08 00
>1a67a8		e2 20 a9 00 8f 27 08 00 20 75 66 a9 09 20 18 00
>1a67b8		a0 0b 00 b7 18 89 08 d0 1c 89 01 f0 05 a9 52 20
>1a67c8		18 00 89 04 f0 05 a9 53 20 18 00 89 10 f0 05 a9
>1a67d8		44 20 18 00 ea 20 89 02 20 a0 02 22 0c 11 00 90
>1a67e8		03 82 41 ff 20 e0 68 08 c2 20 48 a9 00 08 5b 68
>1a67f8		28 20 a3 1f 28 2b 60 08 c2 20 48 a9 20 03 5b 68
>1a6808		28 e2 20 29 0f c9 0f f0 cf a9 5b 20 18 00 a0 00
>1a6818		00 b7 18 c9 20 f0 09 20 18 00 c8 c0 08 00 d0 f1
>1a6828		a9 5d 20 18 00 80 ae 0b 08 08 c2 20 48 a9 20 03
>1a6838		5b 68 28 c2 30 a9 73 f2 85 20 a9 1a 00 85 22 a0
>1a6848		00 00 e2 20 a9 00 97 20 c8 c0 1e 00 d0 f8 c2 20
>1a6858		a9 73 f0 8f 81 f2 1a a9 1a 00 8f 83 f2 1a af 23
>1a6868		08 00 8f 75 f2 1a af 25 08 00 8f 77 f2 1a 28 2b
>1a6878		60 08 c2 30 20 7f 1f 20 4d 1b 20 95 05 20 2f 68
>1a6888		e2 20 a9 2c 85 37 20 a0 20 b0 0f c2 20 a9 ff ff
>1a6898		8f 54 03 00 8f 56 03 00 80 17 20 5e 1f 20 4d 1b
>1a68a8		20 03 05 c2 20 a5 23 8f 54 03 00 a5 25 8f 56 03
>1a68b8		00 22 18 11 00 b0 1f 08 c2 20 48 a9 00 08 5b 68
>1a68c8		28 e2 20 a9 11 8f d3 08 00 c2 20 29 ff 00 20 9f
>1a68d8		1c e2 20 dc d4 08 28 60 8b 0b 08 08 c2 20 48 a9
>1a68e8		00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2
>1a68f8		20 af 2e 03 00 85 23 a9 00 85 24 85 25 85 26 a9
>1a6908		00 85 27 85 ea a9 1a 85 e9 c2 20 a9 43 69 85 e7
>1a6918		20 f0 50 e2 20 af 20 03 00 85 23 a9 00 85 24 85
>1a6928		25 85 26 a9 00 85 27 85 ea a9 1a 85 e9 c2 20 a9
>1a6938		4b 69 85 e7 20 f0 50 28 2b ab 60 44 4f 53 53 54
>1a6948		41 54 00 42 49 4f 53 53 54 41 54 00 08 c2 30 20
>1a6958		7f 1f 20 4d 1b 20 95 05 a5 23 8f 60 03 00 a5 25
>1a6968		8f 62 03 00 a9 ff ff 8f 54 03 00 8f 56 03 00 22
>1a6978		24 11 00 b0 25 20 9f 1c 20 e0 68 08 c2 20 48 a9
>1a6988		00 08 5b 68 28 e2 20 a9 11 8f d3 08 00 c2 20 29
>1a6998		ff 00 20 9f 1c e2 20 dc d4 08 20 9f 1c 28 60 08
>1a69a8		c2 30 20 7f 1f 20 4d 1b 20 95 05 20 2f 68 a9 00
>1a69b8		00 8f 54 03 00 a9 01 00 8f 56 03 00 20 c1 4d 22
>1a69c8		18 11 00 b0 22 20 e0 68 08 c2 20 48 a9 00 08 5b
>1a69d8		68 28 e2 20 a9 11 8f d3 08 00 c2 20 29 ff 00 20
>1a69e8		9f 1c e2 20 dc d4 08 20 e0 68 c2 20 a2 12 00 18
>1a69f8		bf 73 f2 1a 69 00 00 85 92 bf 75 f2 1a 69 01 00
>1a6a08		85 94 e2 20 a9 00 87 92 c2 20 a9 00 00 85 7a a9
>1a6a18		01 00 85 7c a2 00 00 e2 20 a7 7a f0 2a c9 0d f0
>1a6a28		12 c9 0a f0 04 9d 00 4f e8 c2 20 e6 7a d0 e8 e6
>1a6a38		7c 80 e4 e2 20 a9 00 9d 00 4f 20 cb 25 c2 20 e6
>1a6a48		7a d0 d1 e6 7c 80 cd e0 00 00 f0 0a e2 20 a9 00
>1a6a58		9d 00 4f 20 cb 25 28 60 08 c2 30 20 7f 1f 20 4d
>1a6a68		1b 20 95 05 20 2f 68 e2 20 a9 2c 20 6b 20 c2 20
>1a6a78		20 4d 1b 20 03 05 a5 23 8f 50 03 00 a5 25 8f 52
>1a6a88		03 00 e2 20 a9 2c c2 20 20 6b 20 20 4d 1b 20 03
>1a6a98		05 a5 23 8f 58 03 00 a5 25 8f 5a 03 00 22 1c 11
>1a6aa8		00 b0 22 20 e0 68 08 c2 20 48 a9 00 08 5b 68 28
>1a6ab8		e2 20 a9 12 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>1a6ac8		e2 20 dc d4 08 20 e0 68 28 60 da 5a 08 a2 00 00
>1a6ad8		a0 00 00 e2 20 b7 23 9d 00 04 f0 04 e8 c8 80 f5
>1a6ae8		28 7a fa 60 08 c2 30 20 7f 1f 20 4d 1b 20 95 05
>1a6af8		20 2f 68 a9 00 00 85 a6 e2 20 a9 01 85 a8 a9 20
>1a6b08		85 b4 c2 20 a9 00 00 85 ab a9 ff ff 85 a9 c2 20
>1a6b18		a9 00 00 85 55 85 57 a9 ff ff 85 59 a9 ff 7f 85
>1a6b28		5b 20 10 17 e2 20 a9 80 85 b4 c2 20 c6 ab 18 a9
>1a6b38		00 00 8f 50 03 00 65 ab 8f 58 03 00 a9 01 00 8f
>1a6b48		52 03 00 69 00 00 8f 5a 03 00 22 1c 11 00 b0 22
>1a6b58		20 e0 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a6b68		12 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc
>1a6b78		d4 08 20 e0 68 28 60 08 c2 30 20 7f 1f 20 4d 1b
>1a6b88		20 95 05 20 d2 6a 22 04 11 00 b0 22 20 e0 68 08
>1a6b98		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 13 8f d3 08
>1a6ba8		00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 20 e0
>1a6bb8		68 28 60 da 08 e2 20 c9 61 90 08 c9 7b b0 04 29
>1a6bc8		df 80 13 c9 20 90 13 a2 00 00 df e6 6b 1a f0 0a
>1a6bd8		e8 e0 0f 00 d0 f4 28 38 fa 6b 28 18 fa 6b 2a 2b
>1a6be8		2c 2f 3a 3b 3c 3d 3e 3f 5c 5b 5d 7c 22 08 08 c2
>1a6bf8		20 48 a9 00 08 5b 68 28 c2 30 20 4d 1b 20 95 05
>1a6c08		20 d2 6a 22 10 11 00 b0 22 20 e0 68 08 c2 20 48
>1a6c18		a9 00 08 5b 68 28 e2 20 a9 14 8f d3 08 00 c2 20
>1a6c28		29 ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9 2c 20
>1a6c38		6b 20 c2 20 20 4d 1b 20 95 05 ad 38 03 85 08 ad
>1a6c48		3a 03 85 0a e2 20 a2 00 00 a9 20 95 7e e8 e0 0b
>1a6c58		00 d0 f8 a2 00 00 a0 00 00 b7 23 f0 76 c9 2e f0
>1a6c68		39 22 bb 6b 1a b0 1f 08 c2 20 48 a9 00 08 5b 68
>1a6c78		28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 9f
>1a6c88		1c e2 20 dc d4 08 95 7e c8 e8 c0 08 00 d0 ca b7
>1a6c98		23 f0 40 c9 2e f0 03 c8 80 f5 c8 a2 08 00 b7 23
>1a6ca8		f0 31 22 bb 6b 1a b0 22 20 e0 68 08 c2 20 48 a9
>1a6cb8		00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29
>1a6cc8		ff 00 20 9f 1c e2 20 dc d4 08 95 7e c8 e8 c0 0c
>1a6cd8		00 d0 cb a2 00 00 a0 00 00 b5 7e 97 08 e8 c8 c0
>1a6ce8		0b 00 d0 f5 22 14 11 00 b0 22 20 e0 68 08 c2 20
>1a6cf8		48 a9 00 08 5b 68 28 e2 20 a9 15 8f d3 08 00 c2
>1a6d08		20 29 ff 00 20 9f 1c e2 20 dc d4 08 20 e0 68 28
>1a6d18		60 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20 4d
>1a6d28		1b 20 95 05 a5 23 8f 64 03 00 a5 25 8f 66 03 00
>1a6d38		e2 20 a9 2c 20 6b 20 c2 20 20 4d 1b 20 95 05 a5
>1a6d48		23 8f 68 03 00 a5 25 8f 6a 03 00 22 30 11 00 b0
>1a6d58		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 16 8f
>1a6d68		d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08
>1a6d78		28 60 5c 3a 87 1a 5c 8b 85 1a 5c 3b 87 1a 5c b7
>1a6d88		76 1a 5c 14 77 1a 5c 47 76 1a 5c cd 75 1a 5c 4a
>1a6d98		7b 1a 5c 38 72 1a 5c 65 75 1a 5c 20 75 1a 5c aa
>1a6da8		74 1a 5c 49 86 1a 5c 46 73 1a 5c 99 71 1a 5c c4
>1a6db8		86 1a 5c 74 72 1a 5c 3d 87 1a 5c 36 87 1a 5c 63
>1a6dc8		74 1a 5c 3e 87 1a 18 fb c2 20 a9 ff fe 1b 58 5c
>1a6dd8		db 6d 1a c2 30 22 99 71 1a 20 08 00 20 0c 00 8b
>1a6de8		e2 20 a9 00 48 ab a2 00 4f 20 17 04 ab 22 7e 6d
>1a6df8		1a 22 86 6d 1a 80 e2 08 8b e2 20 a9 1a 48 ab c2
>1a6e08		10 a2 12 6e 20 16 03 ab 28 6b 41 20 3c 73 74 61
>1a6e18		72 74 3e 20 3c 61 73 73 65 6d 62 6c 79 3e 0d 20
>1a6e28		20 41 73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67
>1a6e38		72 61 6d 0d 0d 43 20 3c 73 74 61 72 74 31 3e 20
>1a6e48		3c 73 74 61 72 74 32 3e 20 5b 6c 65 6e 20 28 31
>1a6e58		20 69 66 20 62 6c 61 6e 6b 29 5d 0d 20 20 43 6f
>1a6e68		6d 70 61 72 65 20 74 6f 20 73 65 63 74 69 6f 6e
>1a6e78		73 20 6f 66 20 6d 65 6d 6f 72 79 0d 0d 44 20 3c
>1a6e88		73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44
>1a6e98		69 73 61 73 73 65 6d 62 6c 65 20 61 20 70 72 6f
>1a6ea8		67 72 61 6d 0d 0d 46 20 3c 73 74 61 72 74 3e 20
>1a6eb8		3c 65 6e 64 3e 20 3c 62 79 74 65 3e 0d 20 20 46
>1a6ec8		69 6c 6c 20 61 20 62 6c 6f 63 6b 20 6f 66 20 6d
>1a6ed8		65 6d 6f 72 79 20 77 69 74 68 20 61 20 62 79 74
>1a6ee8		65 0d 0d 47 20 5b 61 64 64 72 65 73 73 5d 0d 20
>1a6ef8		20 53 74 61 72 74 20 65 78 65 63 75 74 69 6f 6e
>1a6f08		20 61 74 20 61 20 6c 6f 63 61 74 69 6f 6e 0d 0d
>1a6f18		4a 20 5b 61 64 64 72 65 73 73 5d 20 2d 20 4a 75
>1a6f28		6d 70 20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e
>1a6f38		20 69 6e 20 6d 65 6d 6f 72 79 0d 20 20 4a 75 6d
>1a6f48		70 20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20
>1a6f58		69 6e 20 6d 65 6d 6f 72 79 0d 0d 48 20 3c 73 74
>1a6f68		61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65
>1a6f78		3e 20 5b 62 79 74 65 5d 2e 2e 0d 20 20 48 75 6e
>1a6f88		74 20 66 6f 72 20 76 61 6c 75 65 73 20 69 6e 20
>1a6f98		6d 65 6d 6f 72 79 0d 0d 4c 20 20 20 20 20 4c 4f
>1a6fa8		41 44 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>1a6fb8		22 20 5b 64 65 73 74 69 6e 61 74 69 6f 6e 5d 0d
>1a6fc8		4d 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d
>1a6fd8		20 20 44 75 6d 70 20 74 68 65 20 76 61 6c 75 65
>1a6fe8		20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 52 20 2d 20
>1a6ff8		44 69 73 70 6c 61 79 20 74 68 65 20 76 61 6c 75
>1a7008		65 73 20 6f 66 20 74 68 65 20 72 65 67 69 73 74
>1a7018		65 72 73 0d 0d 3b 20 3c 50 43 3e 20 3c 41 3e 20
>1a7028		3c 58 3e 20 3c 59 3e 20 3c 53 50 3e 20 3c 44 42
>1a7038		52 3e 20 3c 44 50 3e 20 3c 4e 56 4d 58 44 49 5a
>1a7048		43 3e 0d 20 20 43 68 61 6e 67 65 20 74 68 65 20
>1a7058		63 6f 6e 74 65 6e 74 73 20 6f 66 20 74 68 65 20
>1a7068		72 65 67 69 73 74 65 72 73 0d 0d 53 20 20 20 20
>1a7078		20 53 41 56 45 20 20 20 20 20 20 20 20 20 22 46
>1a7088		69 6c 65 22 20 3c 73 74 61 72 74 3e 20 3c 65 6e
>1a7098		64 3e 0d 54 20 3c 73 74 61 72 74 3e 20 3c 65 6e
>1a70a8		64 3e 20 3c 64 65 73 74 69 6e 61 74 69 6f 6e 3e
>1a70b8		0d 20 20 54 72 61 6e 73 66 65 72 20 28 63 6f 70
>1a70c8		79 29 20 64 61 74 61 20 77 69 74 68 69 6e 20 6d
>1a70d8		65 6d 6f 72 79 0d 0d 57 20 3c 62 79 74 65 3e 0d
>1a70e8		20 20 53 65 74 20 74 68 65 20 72 65 67 69 73 74
>1a70f8		65 72 20 77 69 64 74 68 20 66 6c 61 67 73 20 66
>1a7108		6f 72 20 74 68 65 20 64 69 73 61 73 73 65 6d 62
>1a7118		6c 65 72 0d 0d 58 20 2d 20 52 65 74 75 72 6e 20
>1a7128		74 6f 20 42 41 53 49 43 0d 0d 3e 20 3c 73 74 61
>1a7138		72 74 3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65
>1a7148		5d 2e 2e 2e 0d 20 20 45 64 69 74 20 64 61 74 61
>1a7158		20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 3f 20 2d 20
>1a7168		44 69 73 70 6c 61 79 20 61 20 73 68 6f 72 74 20
>1a7178		68 65 6c 70 20 73 63 72 65 65 6e 0d 0d 00 08 08
>1a7188		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 0d 85 4e 28
>1a7198		6b 20 e4 00 08 e2 20 48 a9 1a 48 ab 68 28 a2 7b
>1a71a8		87 20 16 03 e2 20 a9 3b 20 18 00 a9 20 20 18 00
>1a71b8		c2 30 08 e2 20 48 a9 00 48 ab 68 28 a0 03 00 a2
>1a71c8		42 02 20 99 02 c2 20 a9 20 00 20 18 00 af 44 02
>1a71d8		00 20 26 03 a9 20 00 20 18 00 af 46 02 00 20 26
>1a71e8		03 a9 20 00 20 18 00 af 48 02 00 20 26 03 a9 20
>1a71f8		00 20 18 00 af 4a 02 00 20 26 03 a9 20 00 20 18
>1a7208		00 af 4e 02 00 20 40 03 a9 20 00 20 18 00 20 18
>1a7218		00 af 4c 02 00 20 26 03 a9 20 00 20 18 00 08 e2
>1a7228		20 ad 4f 02 22 94 84 1a 28 20 89 02 20 89 02 6b
>1a7238		08 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 15
>1a7248		87 0d e2 20 a5 0f c5 13 d0 0e c2 20 a5 0d c5 11
>1a7258		d0 06 20 89 02 2b 28 6b c2 20 18 a5 0d 69 01 00
>1a7268		85 0d e2 20 a5 0e 69 00 85 0e 80 d0 08 0b 08 c2
>1a7278		20 48 a9 48 08 5b 68 28 e2 20 a5 0f c5 17 90 45
>1a7288		c2 20 a5 0d c5 15 90 3d e2 20 a7 0d 87 15 a5 0f
>1a7298		c5 13 d0 0b c2 20 a5 0d c5 11 d0 03 4c 2b 73 c2
>1a72a8		20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69 00 85
>1a72b8		0e c2 20 18 a5 15 69 01 00 85 15 e2 20 a5 16 69
>1a72c8		00 85 16 80 c3 c2 20 38 a5 11 e5 0d 85 19 e2 20
>1a72d8		a5 13 e5 0f 85 1b c2 20 18 a5 19 65 15 85 15 e2
>1a72e8		20 a5 1b 65 17 85 17 e2 20 a7 11 87 15 a5 13 c5
>1a72f8		0f d0 0a c2 20 a5 11 c5 0d d0 02 80 26 c2 20 38
>1a7308		a5 11 e9 01 00 85 11 e2 20 a5 12 e9 00 85 12 c2
>1a7318		20 38 a5 15 e9 01 00 85 15 e2 20 a5 16 e9 00 85
>1a7328		16 80 c4 20 89 02 2b 28 6b 08 e2 20 c9 21 90 0b
>1a7338		c9 7f 90 04 c9 a0 90 03 28 38 6b 28 18 6b 08 8b
>1a7348		0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a9 00 8f
>1a7358		b6 08 00 a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18
>1a7368		a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00 85 13 c2
>1a7378		20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12 c2 20 18
>1a7388		a5 32 69 00 01 85 11 e2 20 a5 34 69 00 85 13 e2
>1a7398		20 a0 00 00 c2 20 a5 32 85 19 e2 20 a5 34 85 1b
>1a73a8		e2 20 a7 19 22 31 73 1a b0 02 a9 3f 99 7e 08 c2
>1a73b8		20 18 a5 19 69 01 00 85 19 e2 20 a5 1b 69 00 85
>1a73c8		1b c8 c0 08 00 90 db a9 00 99 7e 08 a9 3e 20 18
>1a73d8		00 a9 20 20 18 00 e2 20 a5 34 20 40 03 a9 3a 20
>1a73e8		18 00 c2 20 a5 32 20 26 03 c2 20 a9 08 00 85 47
>1a73f8		e2 20 a9 20 20 18 00 a7 32 20 40 03 22 73 84 1a
>1a7408		e2 20 c6 47 d0 ea a9 20 20 18 00 a9 20 20 18 00
>1a7418		08 e2 20 48 a9 00 48 ab 68 28 a2 7e 08 20 16 03
>1a7428		20 89 02 20 a0 02 a5 34 c5 13 90 0f c2 20 a5 32
>1a7438		c5 11 90 07 20 89 02 2b ab 28 6b 4c 97 73 08 8d
>1a7448		92 08 e2 20 bd 00 00 99 00 00 ad 92 08 f0 0a c8
>1a7458		e8 e8 e8 e8 ce 92 08 80 eb 28 6b 08 0b 8b 08 c2
>1a7468		20 48 a9 48 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>1a7478		68 28 c2 30 a5 0d 85 32 a5 0f 85 34 e2 20 a5 31
>1a7488		3a 85 47 a2 59 08 a0 7e 08 22 46 74 1a a0 00 00
>1a7498		b9 7e 08 87 32 22 73 84 1a c8 c4 47 d0 f2 ab 2b
>1a74a8		28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b 68 28 08
>1a74b8		e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 a5 31 3a
>1a74c8		3a 85 47 a2 5d 08 a0 7e 08 22 46 74 1a c2 20 a5
>1a74d8		0d 85 32 a5 0f 85 34 c2 20 a5 34 c5 13 d0 06 a5
>1a74e8		32 c5 11 f0 2c e2 20 a0 00 00 b7 32 d9 7e 08 d0
>1a74f8		1a c8 c4 47 d0 f4 c2 20 a5 32 85 4a a5 34 85 4c
>1a7508		22 1d 7f 1a e2 20 a9 20 20 18 00 22 73 84 1a 80
>1a7518		c6 20 89 02 ab 2b 28 6b 08 c2 20 48 a9 48 08 5b
>1a7528		68 28 e2 20 a5 31 f0 0e c2 30 a5 0d 8f 40 02 00
>1a7538		a5 0f 8f 42 02 00 af 46 02 00 aa af 48 02 00 a8
>1a7548		af 4a 02 00 1b af 4c 02 00 5b e2 20 a9 1a 48 a9
>1a7558		75 48 a9 60 48 4c 97 75 ea 5c 04 00 1a 08 c2 20
>1a7568		48 a9 48 08 5b 68 28 e2 20 a5 31 f0 c9 c2 30 a5
>1a7578		0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46 02 00 aa
>1a7588		af 48 02 00 a8 af 4a 02 00 1b af 4c 02 00 5b e2
>1a7598		20 af 4e 02 00 48 ab a9 5c 8f a2 08 00 af 42 02
>1a75a8		00 8f a5 08 00 af 41 02 00 8f a4 08 00 af 40 02
>1a75b8		00 8f a3 08 00 af 4f 02 00 48 c2 20 af 44 02 00
>1a75c8		28 5c a2 08 00 08 0b 8b 08 e2 20 48 a9 1a 48 ab
>1a75d8		68 28 08 c2 20 48 a9 48 08 5b 68 28 c2 10 e2 20
>1a75e8		a5 31 c9 02 f0 0c c9 03 d0 11 c2 20 a5 15 85 47
>1a75f8		80 11 c2 20 a9 01 00 85 47 80 08 a2 3f 87 20 16
>1a7608		03 80 35 a5 0d 85 4a a5 0f 85 4c a0 00 00 e2 20
>1a7618		a7 4a d7 11 f0 09 22 1d 7f 1a a9 20 20 18 00 c2
>1a7628		20 18 a5 4a 69 01 00 85 4a a5 4c 69 00 00 85 4c
>1a7638		c8 c4 47 d0 d9 20 89 02 20 89 02 ab 2b 28 6b 08
>1a7648		0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2 20 48
>1a7658		a9 48 08 5b 68 28 e2 20 a5 31 f0 4f a6 0d 8e 40
>1a7668		02 a6 0f 8e 42 02 c9 01 f0 41 a6 11 8e 44 02 c9
>1a7678		02 f0 38 a6 15 8e 46 02 c9 03 f0 2f a6 19 8e 48
>1a7688		02 c9 04 f0 26 a6 1d 8e 4a 02 c9 05 f0 1d e2 10
>1a7698		a6 21 8e 4e 02 c9 06 f0 12 c2 10 a6 25 8e 4c 02
>1a76a8		c9 07 f0 07 e2 10 a6 29 8e 4f 02 ab 2b 28 6b 08
>1a76b8		0b 8b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 c2 10
>1a76c8		a2 00 00 bf ac 87 1a f0 18 c7 08 f0 03 e8 80 f3
>1a76d8		c2 20 8a 0a aa bf ed 76 1a 8f 2f 08 00 22 11 77
>1a76e8		1a ab 2b 28 6b 8a 6d 92 6d 96 6d 9a 6d 9e 6d a2
>1a76f8		6d a6 6d aa 6d ae 6d b2 6d 8e 6d b6 6d ba 6d be
>1a7708		6d 86 71 c2 6d c6 6d ff 6d 6c 2f 08 08 8b 0b 08
>1a7718		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 c9 02 b0
>1a7728		03 4c ba 78 c2 20 a5 0d 85 32 a5 0f 85 34 c2 20
>1a7738		22 bc 7a 1a c9 ff ff f0 10 85 54 e2 20 a5 31 c9
>1a7748		03 f0 36 a9 13 85 4f 80 4c 20 89 02 08 e2 20 48
>1a7758		a9 1a 48 ab 68 28 c2 10 a2 f1 78 20 16 03 4c ba
>1a7768		78 20 89 02 08 e2 20 48 a9 1a 48 ab 68 28 c2 10
>1a7778		a2 00 79 20 16 03 4c ba 78 e2 20 22 f2 7a 1a c9
>1a7788		ff f0 de 85 4f c9 03 f0 62 c9 0b f0 5e c9 13 f0
>1a7798		04 c9 08 f0 00 22 ea 79 1a b0 03 4c 83 78 87 32
>1a77a8		22 73 84 1a 08 e2 20 48 a9 00 48 ab 68 28 c2 20
>1a77b8		a5 32 85 56 a5 34 85 58 e2 20 a5 4f c9 12 f0 6c
>1a77c8		c9 16 f0 68 c9 14 f0 7c 29 3f c9 02 d0 03 4c b1
>1a77d8		78 c2 20 29 ff 00 aa e2 20 bf b9 83 1a c9 03 f0
>1a77e8		57 c9 02 f0 5f c9 01 f0 67 80 71 c2 20 a5 54 c9
>1a77f8		31 80 f0 26 c9 95 80 f0 2a c9 15 80 f0 1c c9 19
>1a7808		80 f0 17 c9 21 80 f0 12 c9 09 80 f0 0d c9 1d 80
>1a7818		f0 08 c9 05 80 f0 03 4c 9d 77 e2 20 a9 12 85 4f
>1a7828		4c 9d 77 e2 20 a9 16 85 4f 4c 9d 77 22 2d 79 1a
>1a7838		90 60 c9 02 f0 0e 80 18 a0 02 00 b9 98 08 97 56
>1a7848		22 73 84 1a a0 01 00 b9 98 08 97 56 22 73 84 1a
>1a7858		a0 00 00 b9 98 08 97 56 22 73 84 1a e2 20 a9 41
>1a7868		20 18 00 a9 20 20 18 00 a6 32 86 4a a6 34 86 4c
>1a7878		22 1d 7f 1a a9 20 20 18 00 80 37 20 89 02 08 e2
>1a7888		20 48 a9 1a 48 ab 68 28 c2 10 a2 be 78 20 16 03
>1a7898		80 20 20 89 02 08 e2 20 48 a9 1a 48 ab 68 28 c2
>1a78a8		10 a2 0e 79 20 16 03 80 09 a5 4f 29 c0 d0 95 4c
>1a78b8		58 78 2b ab 28 6b 41 64 64 72 65 73 73 69 6e 67
>1a78c8		20 6d 6f 64 65 20 6e 6f 74 20 64 65 66 69 6e 65
>1a78d8		64 20 66 6f 72 20 74 68 61 74 20 69 6e 73 74 72
>1a78e8		75 63 74 69 6f 6e 2e 0d 00 42 61 64 20 6d 6e 65
>1a78f8		6d 6f 6e 69 63 2e 0d 00 42 61 64 20 6f 70 65 72
>1a7908		61 6e 64 2e 0d 00 52 65 6c 61 74 69 76 65 20 6f
>1a7918		66 66 73 65 74 20 69 73 20 74 6f 6f 20 6c 61 72
>1a7928		67 65 2e 0d 00 08 0b 08 c2 20 48 a9 48 08 5b 68
>1a7938		28 e2 20 a5 4f c9 12 f0 0a c2 20 18 a5 32 69 02
>1a7948		00 80 08 c2 20 18 a5 32 69 01 00 85 4a a5 34 69
>1a7958		00 00 85 4c 38 a5 50 e5 4a 85 50 a5 52 e5 4c 85
>1a7968		52 e2 20 a5 4f c9 16 f0 1e a5 50 30 0c a5 51 d0
>1a7978		2a a5 52 d0 26 a9 01 80 26 a5 51 c9 ff d0 1c a5
>1a7988		52 c9 ff d0 16 80 18 a5 51 30 06 a5 52 d0 0c 80
>1a7998		0e a5 52 c9 ff d0 04 a9 02 80 04 2b 28 18 6b 2b
>1a79a8		28 38 6b 08 0b c2 10 da 08 c2 20 48 a9 48 08 5b
>1a79b8		68 28 e2 20 a2 00 00 df 00 d0 1a f0 08 e8 e0 10
>1a79c8		00 f0 1b 80 f2 c2 20 06 50 26 52 06 50 26 52 06
>1a79d8		50 26 52 06 50 26 52 e2 20 8a 05 50 85 50 fa 2b
>1a79e8		28 6b 0b 8b 08 c2 20 48 a9 48 08 5b 68 28 08 e2
>1a79f8		20 48 a9 1a 48 ab 68 28 e2 20 a5 4f 29 3f 85 4a
>1a7a08		c2 30 a2 00 00 a0 00 00 bd b7 80 f0 1b c5 54 d0
>1a7a18		0d e2 20 b9 b9 82 29 3f c5 4a f0 07 c2 20 e8 e8
>1a7a28		c8 80 e5 98 38 ab 2b 6b 18 ab 2b 6b 08 0b 08 c2
>1a7a38		20 48 a9 48 08 5b 68 28 e2 20 c2 10 a0 00 00 64
>1a7a48		50 64 52 b7 03 f0 11 c9 64 f0 19 48 b7 36 85 4a
>1a7a58		68 c5 4a d0 0b c8 80 eb b7 36 d0 04 2b 28 38 6b
>1a7a68		2b 28 18 6b e2 20 b7 36 c9 3a b0 04 c9 30 b0 14
>1a7a78		c9 47 b0 04 c9 41 b0 0c c9 67 b0 e4 c9 61 b0 02
>1a7a88		80 de 29 df 22 ab 79 1a 80 cb 0b 08 c2 20 48 a9
>1a7a98		48 08 5b 68 28 a0 00 00 e2 20 b7 03 f0 03 c8 80
>1a7aa8		f9 c2 20 c8 5a 68 18 65 03 85 03 a5 05 69 00 00
>1a7ab8		85 05 2b 6b 0b 08 c2 20 48 a9 48 08 5b 68 28 c2
>1a7ac8		20 a5 11 85 36 a5 13 85 38 a9 45 7f 85 03 a9 1a
>1a7ad8		00 85 05 22 34 7a 1a b0 0d 22 92 7a 1a a7 03 d0
>1a7ae8		f2 a9 ff ff 80 02 a5 03 2b 6b 08 0b 08 c2 20 48
>1a7af8		a9 48 08 5b 68 28 c2 30 a5 15 85 36 a5 17 85 38
>1a7b08		a9 d1 83 85 03 a9 1a 00 85 05 22 34 7a 1a b0 22
>1a7b18		22 92 7a 1a c2 20 18 a5 03 69 01 00 85 03 a5 05
>1a7b28		69 00 00 85 05 e2 20 a7 03 d0 df c2 20 a9 ff ff
>1a7b38		80 0d 22 92 7a 1a e2 20 a7 03 c2 20 29 ff 00 2b
>1a7b48		28 6b 08 8b 0b 08 c2 20 48 a9 48 08 5b 68 28 e2
>1a7b58		20 a9 00 8f b6 08 00 a5 31 c9 02 b0 16 c9 01 90
>1a7b68		20 c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f 69
>1a7b78		00 85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34 80
>1a7b88		12 c2 20 18 a5 32 69 00 01 85 11 e2 20 a5 34 69
>1a7b98		00 85 13 22 b6 7b 1a e2 20 a5 34 c5 13 90 f4 c2
>1a7ba8		20 a5 32 c5 11 90 ec 20 89 02 2b ab 28 6b 08 0b
>1a7bb8		e2 20 a9 41 20 18 00 a9 20 20 18 00 08 c2 20 48
>1a7bc8		a9 7a 08 5b 68 28 c2 20 a5 00 85 18 e2 20 a5 02
>1a7bd8		85 1a 22 1d 7f 1a a9 20 20 18 00 c2 20 18 a5 00
>1a7be8		69 01 00 85 18 e2 20 a5 02 69 00 85 1a e2 20 c2
>1a7bf8		10 a7 00 c9 c2 d0 0b 48 a7 18 49 ff 2f 96 08 00
>1a7c08		80 0b c9 e2 d0 0c 48 a7 18 0f 96 08 00 8f 96 08
>1a7c18		00 68 c2 20 29 ff 00 0a aa bf b7 80 1a aa 22 97
>1a7c28		7e 1a e2 20 a7 00 aa bf b9 82 1a 22 73 84 1a 22
>1a7c38		44 7c 1a 20 89 02 20 a0 02 2b 28 6b 08 e2 20 48
>1a7c48		29 3f 0a c2 10 aa 68 7c 52 7c 82 7c 9d 7c a4 7c
>1a7c58		c9 7c d0 7c eb 7c 0d 7d 1e 7d 5b 7d 63 7d 74 7d
>1a7c68		85 7d 8c 7d b1 7d de 7d 4a 7d 2f 7d fc 7c d1 7d
>1a7c78		db 7d ef 7d 1e 7e cc 7d 2f 7e a9 28 20 18 00 22
>1a7c88		46 7e 1a a9 2c 20 18 00 a9 58 20 18 00 a9 29 20
>1a7c98		18 00 4c 40 7e 22 46 7e 1a 4c 40 7e e2 20 48 a9
>1a7ca8		23 20 18 00 68 29 c0 c9 00 f0 0f 4a 4a 2f 96 08
>1a7cb8		00 d0 07 22 50 7e 1a 4c 40 7e 22 46 7e 1a 4c 40
>1a7cc8		7e 22 50 7e 1a 4c 40 7e a9 28 20 18 00 22 46 7e
>1a7cd8		1a a9 29 20 18 00 a9 2c 20 18 00 a9 59 20 18 00
>1a7ce8		4c 40 7e 22 46 7e 1a a9 2c 20 18 00 a9 58 20 18
>1a7cf8		00 4c 40 7e 22 46 7e 1a a9 2c 20 18 00 a9 59 20
>1a7d08		18 00 4c 40 7e 22 50 7e 1a a9 2c 20 18 00 a9 59
>1a7d18		20 18 00 4c 40 7e 22 50 7e 1a a9 2c 20 18 00 a9
>1a7d28		58 20 18 00 4c 40 7e a9 28 20 18 00 22 50 7e 1a
>1a7d38		a9 2c 20 18 00 a9 58 20 18 00 a9 29 20 18 00 4c
>1a7d48		40 7e a9 28 20 18 00 22 46 7e 1a a9 29 20 18 00
>1a7d58		4c 40 7e a9 41 20 18 00 4c 44 7e 22 46 7e 1a a9
>1a7d68		2c 20 18 00 a9 53 20 18 00 4c 40 7e a9 5b 20 18
>1a7d78		00 22 46 7e 1a a9 5d 20 18 00 4c 40 7e 22 5e 7e
>1a7d88		1a 4c 44 7e a9 28 20 18 00 22 46 7e 1a a9 2c 20
>1a7d98		18 00 a9 53 20 18 00 a9 29 20 18 00 a9 2c 20 18
>1a7da8		00 a9 59 20 18 00 4c 40 7e a9 5b 20 18 00 22 46
>1a7db8		7e 1a a9 5d 20 18 00 a9 2c 20 18 00 a9 59 20 18
>1a7dc8		00 4c 40 7e a0 02 00 80 03 a0 01 00 22 c4 7e 1a
>1a7dd8		4c 44 7e 4c 44 7e 22 5e 7e 1a a9 2c 20 18 00 a9
>1a7de8		58 20 18 00 4c 44 7e a9 23 20 18 00 8b a5 02 48
>1a7df8		ab a6 00 e8 a0 01 00 22 99 02 1a a9 2c 20 18 00
>1a7e08		a9 23 20 18 00 a6 00 a0 01 00 22 99 02 1a ab 22
>1a7e18		73 84 1a 4c 40 7e a9 28 20 18 00 22 50 7e 1a a9
>1a7e28		29 20 18 00 4c 40 7e a9 5b 20 18 00 22 50 7e 1a
>1a7e38		a9 5d 20 18 00 4c 40 7e 22 73 84 1a 28 6b 08 e2
>1a7e48		20 a7 00 20 40 03 28 6b 08 c2 30 a7 00 20 26 03
>1a7e58		22 73 84 1a 28 6b 08 8b 0b c2 30 5a 08 c2 20 48
>1a7e68		a9 7a 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>1a7e78		e2 20 a0 00 00 a7 00 99 92 08 22 73 84 1a c8 c0
>1a7e88		03 00 d0 f1 22 1d 7f 1a c2 30 7a 2b ab 28 6b 08
>1a7e98		8b e2 20 c2 10 08 e2 20 48 a9 1a 48 ab 68 28 bd
>1a7ea8		00 00 20 18 00 e8 bd 00 00 20 18 00 e8 bd 00 00
>1a7eb8		20 18 00 e8 a9 20 20 18 00 ab 28 6b 08 0b 08 c2
>1a7ec8		20 48 a9 7a 08 5b 68 28 e2 20 c0 02 00 f0 14 a7
>1a7ed8		00 85 18 30 06 64 19 64 1a 80 1e a9 ff 85 19 85
>1a7ee8		1a 80 16 a7 00 85 18 22 73 84 1a a7 00 85 19 30
>1a7ef8		04 64 1a 80 04 a9 ff 85 1a c2 20 38 a5 00 65 18
>1a7f08		85 18 e2 20 a5 02 65 1a 85 1a 22 1d 7f 1a 22 73
>1a7f18		84 1a 2b 28 6b 08 0b c2 20 48 08 c2 20 48 a9 48
>1a7f28		08 5b 68 28 e2 20 a5 4c 20 40 03 e2 20 a9 3a 20
>1a7f38		18 00 c2 20 a5 4a 20 26 03 68 2b 28 6b 4f 52 41
>1a7f48		00 41 4e 44 00 45 4f 52 00 41 44 43 00 53 54 41
>1a7f58		00 4c 44 41 00 43 4d 50 00 53 42 43 00 41 53 4c
>1a7f68		00 52 4f 4c 00 4c 53 52 00 52 4f 52 00 53 54 58
>1a7f78		00 4c 44 58 00 44 45 43 00 49 4e 43 00 42 49 54
>1a7f88		00 4a 4d 50 00 53 54 59 00 4c 44 59 00 43 50 59
>1a7f98		00 43 50 58 00 42 52 4b 00 4a 53 52 00 52 54 49
>1a7fa8		00 52 54 53 00 50 48 50 00 50 4c 50 00 50 48 41
>1a7fb8		00 50 4c 41 00 44 45 59 00 54 41 59 00 49 4e 59
>1a7fc8		00 49 4e 58 00 43 4c 43 00 53 45 43 00 43 4c 49
>1a7fd8		00 53 45 49 00 54 59 41 00 43 4c 56 00 43 4c 44
>1a7fe8		00 53 45 44 00 54 58 41 00 54 58 53 00 54 41 58
>1a7ff8		00 54 53 58 00 44 45 58 00 4e 4f 50 00 42 50 4c
>1a8008		00 42 4d 49 00 42 56 43 00 42 56 53 00 42 43 43
>1a8018		00 42 43 53 00 42 4e 45 00 42 45 51 00 54 53 42
>1a8028		00 54 52 42 00 53 54 5a 00 42 52 41 00 50 48 59
>1a8038		00 50 4c 59 00 50 48 58 00 50 4c 58 00 50 48 44
>1a8048		00 50 4c 44 00 50 48 4b 00 52 54 4c 00 50 48 42
>1a8058		00 50 4c 42 00 57 41 49 00 58 42 41 00 54 43 53
>1a8068		00 54 53 43 00 54 43 44 00 54 44 43 00 54 58 59
>1a8078		00 54 59 58 00 53 54 50 00 58 43 45 00 43 4f 50
>1a8088		00 4a 53 4c 00 57 44 4d 00 50 45 52 00 42 52 4c
>1a8098		00 52 45 50 00 53 45 50 00 4d 56 50 00 4d 56 4e
>1a80a8		00 50 45 49 00 50 45 41 00 4a 4d 4c 00 00 00 9d
>1a80b8		7f 45 7f 85 80 45 7f 25 80 45 7f 65 7f 45 7f ad
>1a80c8		7f 45 7f 65 7f 45 80 25 80 45 7f 65 7f 45 7f 05
>1a80d8		80 45 7f 45 7f 45 7f 29 80 45 7f 65 7f 45 7f cd
>1a80e8		7f 45 7f 81 7f 65 80 29 80 45 7f 65 7f 45 7f a1
>1a80f8		7f 49 7f 89 80 49 7f 85 7f 49 7f 69 7f 49 7f b1
>1a8108		7f 49 7f 69 7f 49 80 85 7f 49 7f 69 7f 49 7f 09
>1a8118		80 49 7f 49 7f 49 7f 85 7f 49 7f 69 7f 49 7f d1
>1a8128		7f 49 7f 7d 7f 69 80 85 7f 49 7f 69 7f 49 7f a5
>1a8138		7f 4d 7f 8d 80 4d 7f a1 80 4d 7f 6d 7f 4d 7f b5
>1a8148		7f 4d 7f 6d 7f 4d 80 89 7f 4d 7f 6d 7f 4d 7f 0d
>1a8158		80 4d 7f 4d 7f 4d 7f a5 80 4d 7f 6d 7f 4d 7f d5
>1a8168		7f 4d 7f 35 80 6d 80 b1 80 4d 7f 6d 7f 4d 7f a9
>1a8178		7f 51 7f 91 80 51 7f 2d 80 51 7f 71 7f 51 7f b9
>1a8188		7f 51 7f 71 7f 51 80 89 7f 51 7f 71 7f 51 7f 11
>1a8198		80 51 7f 51 7f 51 7f 2d 80 51 7f 71 7f 51 7f d9
>1a81a8		7f 51 7f 39 80 71 80 89 7f 51 7f 71 7f 51 7f 31
>1a81b8		80 55 7f 95 80 55 7f 8d 7f 55 7f 75 7f 55 7f bd
>1a81c8		7f 85 7f ed 7f 55 80 8d 7f 55 7f 75 7f 55 7f 15
>1a81d8		80 55 7f 55 7f 55 7f 8d 7f 55 7f 75 7f 55 7f dd
>1a81e8		7f 55 7f f1 7f 75 80 2d 80 55 7f 2d 80 55 7f 91
>1a81f8		7f 59 7f 79 7f 59 7f 91 7f 59 7f 79 7f 59 7f c1
>1a8208		7f 59 7f f5 7f 59 80 91 7f 59 7f 79 7f 59 7f 19
>1a8218		80 59 7f 59 7f 59 7f 91 7f 59 7f 79 7f 59 7f e1
>1a8228		7f 59 7f f9 7f 79 80 91 7f 59 7f 79 7f 59 7f 95
>1a8238		7f 5d 7f 99 80 5d 7f 95 7f 5d 7f 7d 7f 5d 7f c5
>1a8248		7f 5d 7f fd 7f 5d 80 95 7f 5d 7f 7d 7f 5d 7f 1d
>1a8258		80 5d 7f 5d 7f 5d 7f a9 80 5d 7f 7d 7f 5d 7f e5
>1a8268		7f 5d 7f 3d 80 7d 80 b1 80 5d 7f 7d 7f 5d 7f 99
>1a8278		7f 61 7f 9d 80 61 7f 99 7f 61 7f 81 7f 61 7f c9
>1a8288		7f 61 7f 01 80 61 80 99 7f 61 7f 81 7f 61 7f 21
>1a8298		80 61 7f 61 7f 61 7f ad 80 61 7f 81 7f 61 7f e9
>1a82a8		7f 61 7f 41 80 81 80 a1 7f 61 7f 81 7f 61 7f 00
>1a82b8		00 13 00 02 09 01 01 01 0a 13 82 08 13 03 03 03
>1a82c8		0b 12 04 0f 0c 01 05 05 0d 13 06 08 13 03 07 07
>1a82d8		0e 03 00 0b 09 01 01 01 0a 13 82 08 13 03 03 03
>1a82e8		0b 12 04 0f 0c 05 05 05 0d 13 06 08 13 07 07 07
>1a82f8		0e 13 00 13 09 14 01 01 0a 13 82 08 13 03 03 03
>1a8308		0b 12 04 0f 0c 14 05 05 0d 13 06 13 13 0b 07 07
>1a8318		0b 13 00 16 09 01 01 01 0a 13 82 08 13 15 03 03
>1a8328		0b 12 04 0f 0c 05 05 05 0d 13 06 13 13 10 07 07
>1a8338		0e 12 00 16 09 01 01 01 0a 13 82 13 13 03 03 03
>1a8348		0b 12 04 0f 0c 05 05 11 0d 13 06 13 13 03 07 07
>1a8358		0e 82 00 42 09 01 01 01 0a 13 82 13 13 03 03 03
>1a8368		0b 12 04 0f 0c 05 05 11 0d 13 06 13 13 07 07 06
>1a8378		0e 42 00 02 09 01 01 01 0a 13 82 13 13 03 03 03
>1a8388		0b 12 04 0f 0c 01 05 05 0d 13 06 13 13 17 07 07
>1a8398		0e 42 00 02 09 01 01 01 0f 13 82 13 13 03 03 03
>1a83a8		0b 12 04 0f 0c 03 05 05 0d 13 06 13 13 10 07 07
>1a83b8		0e 01 01 01 02 01 01 02 02 00 01 01 03 01 01 03
>1a83c8		01 02 01 01 00 02 02 02 02 41 00 08 64 64 3a 64
>1a83d8		64 64 64 2c 58 00 0e 64 64 3a 64 64 64 64 00 0b
>1a83e8		64 64 64 64 2c 58 00 07 64 64 64 64 2c 59 00 06
>1a83f8		64 64 64 64 00 03 64 64 2c 58 00 05 64 64 2c 59
>1a8408		00 11 64 64 2c 53 00 09 64 64 00 01 23 64 64 64
>1a8418		64 00 c2 23 64 64 2c 23 64 64 00 14 23 64 64 00
>1a8428		02 28 64 64 2c 53 29 2c 59 00 0c 28 64 64 64 64
>1a8438		2c 58 29 00 10 28 64 64 64 64 29 00 10 28 64 64
>1a8448		2c 58 29 00 00 28 64 64 29 2c 59 00 04 28 64 64
>1a8458		29 00 0f 5b 64 64 64 64 5d 00 17 5b 64 64 5d 2c
>1a8468		59 00 0d 5b 64 64 5d 00 0a 00 00 08 c2 20 48 18
>1a8478		af 7a 08 00 69 01 00 8f 7a 08 00 e2 20 af 7c 08
>1a8488		00 69 00 8f 7c 08 00 c2 20 68 28 6b 08 c2 10 e2
>1a8498		20 da a2 08 00 0a b0 08 48 a9 30 20 18 00 80 06
>1a84a8		48 a9 31 20 18 00 68 ca d0 eb fa 28 6b 08 c2 20
>1a84b8		48 a9 48 08 5b 68 28 e2 20 a7 32 f0 0a c9 20 d0
>1a84c8		06 22 73 84 1a 80 f2 6b 08 08 c2 20 48 a9 48 08
>1a84d8		5b 68 28 22 73 84 1a 22 b5 84 1a c2 30 a5 31 c2
>1a84e8		20 29 ff 00 0a 0a aa a5 32 95 0d a5 34 95 0f e2
>1a84f8		20 a7 32 f0 14 c9 22 f0 06 22 73 84 1a 80 f2 a9
>1a8508		00 87 32 22 73 84 1a e6 31 28 6b 08 c2 20 48 a9
>1a8518		48 08 5b 68 28 e2 20 64 4a c2 20 64 50 64 52 e2
>1a8528		20 a7 32 c9 3a f0 0d 20 be 03 90 0e 22 ab 79 1a
>1a8538		a9 01 85 4a 22 73 84 1a 80 e5 a5 4a f0 16 a5 31
>1a8548		c2 20 29 ff 00 0a 0a aa a5 50 95 0d a5 52 95 0f
>1a8558		e2 20 e6 31 6b e2 20 64 31 22 b5 84 1a a7 32 f0
>1a8568		21 c9 22 d0 06 22 d0 84 1a 80 0a 22 13 85 1a a5
>1a8578		31 c9 09 b0 0d a7 32 f0 09 c9 20 f0 dc 20 be 03
>1a8588		b0 d7 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28 c2
>1a8598		10 e2 20 a2 31 00 74 00 ca d0 fb a9 00 85 02 85
>1a85a8		34 c2 20 a9 00 4f 85 00 85 32 e2 20 22 b5 84 1a
>1a85b8		c9 00 f0 38 c2 20 a5 32 85 08 e2 20 a5 34 85 0a
>1a85c8		a2 01 00 22 73 84 1a a7 32 d0 06 86 0b 64 31 80
>1a85d8		1b c9 20 f0 03 e8 80 eb 86 0b a9 00 87 32 22 73
>1a85e8		84 1a a7 08 c9 41 f0 07 22 5d 85 1a 2b 28 6b 22
>1a85f8		b5 84 1a a7 32 f0 f5 22 13 85 1a 22 b5 84 1a a7
>1a8608		32 f0 e9 c2 20 a5 32 85 11 e2 20 a5 34 85 13 22
>1a8618		73 84 1a a7 32 f0 26 c9 20 d0 f4 a9 00 87 32 e6
>1a8628		31 22 73 84 1a 22 b5 84 1a a7 32 f0 bf c2 20 a5
>1a8638		32 85 15 e2 20 a5 34 85 17 e6 31 80 af e6 31 80
>1a8648		ab 08 c2 10 e2 20 a5 31 d0 0f a2 3f 87 a9 1a 48
>1a8658		ab 20 16 03 20 89 02 80 61 c2 20 a5 0d 8f 23 08
>1a8668		00 a5 0f 8f 25 08 00 20 2f 68 e2 20 a5 31 c9 01
>1a8678		d0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56 03 00 80
>1a8688		0e c2 20 a5 11 8f 54 03 00 a5 13 8f 56 03 00 22
>1a8698		18 11 00 b0 25 e2 20 a2 65 87 a9 1a 48 ab 20 16
>1a86a8		03 af 2e 03 00 20 40 03 a9 20 20 18 00 af 20 03
>1a86b8		00 20 40 03 20 89 02 20 89 02 28 6b 8b 08 c2 10
>1a86c8		e2 20 a5 31 c9 03 f0 0f a2 3f 87 a9 1a 48 ab 20
>1a86d8		16 03 20 89 02 80 54 c2 20 a5 0d 8f 23 08 00 a5
>1a86e8		0f 8f 25 08 00 20 2f 68 a5 11 8f 50 03 00 a5 13
>1a86f8		8f 52 03 00 a5 15 8f 58 03 00 a5 17 8f 5a 03 00
>1a8708		22 1c 11 00 b0 25 e2 20 a2 4f 87 a9 1a 48 ab 20
>1a8718		16 03 af 2e 03 00 20 40 03 a9 20 20 18 00 af 20
>1a8728		03 00 20 40 03 20 89 02 20 89 02 28 ab 6b 5c fe
>1a8738		25 1a 6b 00 00 00 00 42 61 64 20 61 72 67 75 6d
>1a8748		65 6e 74 73 0d 0d 00 55 6e 61 62 6c 65 20 74 6f
>1a8758		20 73 61 76 65 20 66 69 6c 65 3a 20 00 55 6e 61
>1a8768		62 6c 65 20 74 6f 20 6c 6f 61 64 20 66 69 6c 65
>1a8778		3a 20 00 0d 20 20 50 43 20 20 20 20 20 41 20 20
>1a8788		20 20 58 20 20 20 20 59 20 20 20 20 53 50 20 20
>1a8798		20 44 42 52 20 44 50 20 20 20 4e 56 4d 58 44 49
>1a87a8		5a 43 0d 00 41 43 44 46 47 4a 48 4c 4d 52 3b 53
>1a87b8		54 56 57 58 3e 3f 00 18 fb 08 c2 20 48 a9 00 08
>1a87c8		5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20
>1a87d8		fe 87 a9 ff fe 1b 08 e2 20 48 a9 1a 48 ab 68 28
>1a87e8		a2 71 d2 20 16 03 08 e2 20 48 a9 00 48 ab 68 28
>1a87f8		4c fe 25 4c fb 87 08 20 d0 01 20 c1 4d 28 60 00
>1a8808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1150 times (18400 bytes)...
>1acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>1ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>1ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>1ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>1ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>1ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>1ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>1ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>1ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>1ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>1ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>1ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>1ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>1ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>1ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>1ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>1ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>1ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>1ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>1ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>1ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>1ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>1ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>1ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>1ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>1ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>1ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>1ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>1ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>1ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>1ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>1ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>1ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>1ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>1ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>1ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>1ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>1ad248		4f 53 00 54 41 4e 00 4c 4e 00 41 43 4f 53 00 41
>1ad258		53 49 4e 00 41 54 41 4e 00 45 58 50 00 53 51 52
>1ad268		00 0d 52 45 41 44 59 0d 00 43 32 35 36 20 46 6f
>1ad278		65 6e 69 78 20 42 41 53 49 43 38 31 36 20 76 30
>1ad288		2e 32 2e 30 2d 61 6c 70 68 61 2b 32 35 34 0d 00
>1b0000						.align 256
.1b0000						CREDITS_TEXT
>1b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>1b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>1b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>1b004f		20
>1b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>1b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>1b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>1b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>1b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>1b009f		20
>1b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b00ef		20
>1b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b013f		20
>1b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>1b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>1b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>1b0168		6e 79 20 41 6c 6c 61 69 72 65
>1b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>1b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b018a		20 20 20 20 20 20
>1b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>1b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>1b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>1b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b01da		20 20 20 20 20 20
>1b01e0		20				                .text " "
>1b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0229		20 20 20 20 20 20 20
>1b0230		20				                .text " "
>1b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0279		20 20 20 20 20 20 20
>1b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>1b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>1b0298		53 3a
>1b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>1b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>1b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>1b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>1b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>1b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b031d		20 20 20
>1b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>1b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>1b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>1b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>1b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>1b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>1b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>1b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>1b0398		75 73 68
>1b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>1b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>1b03c8		54 68 61 6e 6b 73 3a
>1b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>1b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0407		20 20 20 20 20 20 20 20 20
>1b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>1b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>1b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>1b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>1b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>1b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b045f		20
>1b0460		20				                .text " "
>1b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04a9		20 20 20 20 20 20 20
>1b04b0		20				                .text " "
>1b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04f9		20 20 20 20 20 20 20
>1b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>1b0508		45 53 20 41 55 54 48 4f 52 53 3a
>1b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>1b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b054b		20 20 20 20 20
>1b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>1b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>1b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>1b0578		63 6f 72 65 73 2e 6f 72 67
>1b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>1b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0599		20 20 20 20 20 20 20
>1b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>1b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>1b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>1b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>1b05d8		6d
>1b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>1b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>1b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>1b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>1b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>1b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>1b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>1b063b		20 20 20 20 20
>1b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>1b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>1b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>1b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>1b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b068b		20 20 20 20 20
>1b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>1b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>1b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>1b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>1b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06da		20 20 20 20 20 20
>1b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>1b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>1b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>1b0708		6a 61 64 61 20 47 6f 6d 65 7a
>1b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b072a		20 20 20 20 20 20
>1b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>1b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>1b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>1b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>1b0768		6f 6d
>1b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>1b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>1b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>1b0798		6e 69 78 20 55 29 3a 20 54 42 44
>1b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>1b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07cb		20 20 20 20 20
>1b07d0		20				                .text " "
>1b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0819		20 20 20 20 20 20 20
>1b0820		20				                .text " "
>1b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0869		20 20 20 20 20 20 20
>1b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>1b0878		54 48 41 4e 4b 53 3a
>1b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>1b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b08b7		20 20 20 20 20 20 20 20 20
>1b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>1b08c8		56 61 6e 68 61 72 65 6e
>1b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>1b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0908		20 20 20 20 20 20 20 20
>1b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>1b0918		65 77
>1b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>1b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>1b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>1b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>1b0988		65 66 65 72 65 6e 63 65 73 29
>1b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>1b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b09aa		20 20 20 20 20 20
>1b09b0		20				                .text " "
>1b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b09f9		20 20 20 20 20 20 20
>1b0a00		20				                .text " "
>1b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0a49		20 20 20 20 20 20 20
>1b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0a9f		20
>1b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>1b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>1b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>1b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>1b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>1b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>1b0aec		20 20 20 20
>1b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>1b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>1b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>1b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>1b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>1b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>1b0b3c		20 20 20 20
>1b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>1b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>1b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>1b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>1b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>1b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>1b0b8d		20 20 20
>1b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>1b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>1b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>1b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>1b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>1b0bdd		20 20 20
>1b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>1b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>1b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>1b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>1b0c2d		20 20 20
>1b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0c7f		20
>1b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>1b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c98		53 74 65 66 61 6e 79
>1b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>1b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cc7		20 20 20 20 20 20 20 20 20
>1b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>1b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>1b1768		20 20 20 20 20 20 20 20
>1b1770						.align 256
>1b1800		f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 80 * 60, $F3
>1b1808		f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;		...repeated 298 times (4768 bytes)...
>1b2ab8		f3 f3 f3 f3 f3 f3 f3 f3
.1e0000						BOOT_MENU
.1e0000						SplashScreenMain:
.1e0000		48		pha		                PHA             ; begin setdp macro
.1e0001		08		php		                PHP
.1e0002		c2 20		rep #$20	                REP #$20        ; set A long
.1e0004		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1e0007		5b		tcd		                TCD
.1e0008		28		plp		                PLP
.1e0009		68		pla		                PLA             ; end setdp macro
.1e000a		c2 10		rep #$10	                REP #$10        ; set X long
.1e000c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e000e		a9 00		lda #$00	                LDA #$00
.1e0010		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0012		85 f1		sta $f1		                STA INTERRUPT_COUNT
.1e0014		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e0016		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.1e001a		29 04		and #$04	                AND #FNX0_INT02_TMR0
.1e001c		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.1e0020		20 e6 00	jsr $1e00e6	                JSR Splash_Get_Machine_ID
.1e0023		20 19 01	jsr $1e0119	                JSR Splash_Clear_Screen
.1e0026		20 03 01	jsr $1e0103	                JSR Splash_Load_FontSet
.1e0029		22 f8 02 1e	jsl $1e02f8	                JSL Splashscreen_BitMapSetup
.1e002d		20 0b 06	jsr $1e060b	                JSR Model_Update_Info_Field
.1e0030		20 ec 05	jsr $1e05ec	                JSR Set_Text_Color
.1e0033		a9 00		lda #$00	                LDA #$00
.1e0035		85 a6		sta $a6		                STA LINE_INDEX  ; Point to the first line to be displayed
.1e0037		85 a7		sta $a7		                STA LINE_INDEX + 1
.1e0039		20 93 08	jsr $1e0893	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e003c						HAVE_FUN:
.1e003c		22 33 01 1e	jsl $1e0133	                JSL Splash_Moniker_Color_Rolling  ; Go Move The Colors on the Logo
.1e0040		a6 a6		ldx $a6		                LDX LINE_INDEX
.1e0042		e0 17 00	cpx #$0017	                CPX #NumberOfEntry
.1e0045		f0 08		beq $1e004f	                BEQ ByPassCharDisplay           ; If Equal all Lines have been displayed
.1e0047		20 d0 08	jsr $1e08d0	                JSR Line_Display_1_Character    ; Go move the cursor one stop
.1e004a		90 21		bcc $1e006d	                BCC Still_Displaying_Char
.1e004c		20 93 08	jsr $1e0893	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e004f						ByPassCharDisplay:
.1e004f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0051		22 48 10 00	jsl $001048	                JSL GETCH               ; Try to get a character
.1e0055		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.1e0057		f0 14		beq $1e006d	                BEQ Still_Displaying_Char            ; No: keep waiting until timeout
.1e0059		c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.1e005b		f0 1f		beq $1e007c	                BEQ return              ; Yes: return it
.1e005d		c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.1e005f		f0 1b		beq $1e007c	                BEQ return              ; Yes: return it
.1e0061		c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.1e0063		f0 17		beq $1e007c	                BEQ return              ; Yes: return it
.1e0065		c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.1e0067		f0 13		beq $1e007c	                BEQ return              ; Yes: return it
.1e0069		c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.1e006b		f0 0d		beq $1e007a	                BEQ exitshere
.1e006d						Still_Displaying_Char:
.1e006d						WaitForNextSOF:
.1e006d		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0
.1e0071		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e0073		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.1e0075		d0 f6		bne $1e006d	                BNE WaitForNextSOF;
.1e0077		4c 3c 00	jmp $1e003c	                JMP HAVE_FUN
.1e007a						exitshere:
.1e007a						timeout
.1e007a		a9 00		lda #$00	                LDA #0                  ; Return 0 for a timeout / SPACE
.1e007c						return
.1e007c		8f 08 00 00	sta $000008	                STA @l KRNL_BOOT_MENU_K          ; Store ther Keyboard Value
.1e0080		a9 00		lda #$00	                LDA #$00
.1e0082		8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L         ; Disable Everything
.1e0086		22 2c 05 1e	jsl $1e052c	                JSL SS_VDMA_CLEAR_MEMORY_640_480 ; Clear the Bitmap Screen
.1e008a		20 9f 00	jsr $1e009f	                JSR VickyII_Registers_Clear      ; Reset All Vicky Registers
.1e008d		22 c0 10 00	jsl $0010c0	                JSL INITFONTSET ; Reload the Official FONT set
.1e0091		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR ; Reset the Cursor to its origin
.1e0095		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.1e0099		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE  ; Init VICKY TextMode now contains Hi-Res Dipswitch read and Automatic Text Size Parameter adjust
.1e009d		ea		nop		                NOP
.1e009e		6b		rtl		                RTL
.1e009f						VickyII_Registers_Clear:
.1e009f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00a1		c2 10		rep #$10	                REP #$10        ; set X long
.1e00a3		a2 00 00	ldx #$0000	                LDX #$0000
.1e00a6		a9 00		lda #$00	                LDA #$00
.1e00a8						ClearSpriteRegisters:
.1e00a8		9f 00 0c af	sta $af0c00,x	                STA @l SP00_CONTROL_REG, X
.1e00ac		e8		inx		                INX
.1e00ad		e0 00 02	cpx #$0200	                CPX #$0200
.1e00b0		d0 f6		bne $1e00a8	                BNE ClearSpriteRegisters
.1e00b2		a2 00 00	ldx #$0000	                LDX #$0000
.1e00b5		a9 00		lda #$00	                LDA #$00
.1e00b7						ClearTiles0Registers:
.1e00b7		9f 00 02 af	sta $af0200,x	                STA @l TL0_CONTROL_REG, X
.1e00bb		e8		inx		                INX
.1e00bc		e0 30 00	cpx #$0030	                CPX #$0030
.1e00bf		d0 f6		bne $1e00b7	                BNE ClearTiles0Registers
.1e00c1		ea		nop		                NOP
.1e00c2		a2 00 00	ldx #$0000	                LDX #$0000
.1e00c5		a9 00		lda #$00	                LDA #$00
.1e00c7						ClearTiles1Registers:
.1e00c7		9f 80 02 af	sta $af0280,x	                STA @l TILESET0_ADDY_L, X
.1e00cb		e8		inx		                INX
.1e00cc		e0 20 00	cpx #$0020	                CPX #$0020
.1e00cf		d0 f6		bne $1e00c7	                BNE ClearTiles1Registers
.1e00d1		ea		nop		                NOP
.1e00d2		a2 00 00	ldx #$0000	                LDX #$0000
.1e00d5		a9 00		lda #$00	                LDA #$00
.1e00d7						ClearBitmapRegisters:
.1e00d7		9f 00 01 af	sta $af0100,x	                STA @l BM0_CONTROL_REG, X
.1e00db		9f 08 01 af	sta $af0108,x	                STA @l BM1_CONTROL_REG, X
.1e00df		e8		inx		                INX
.1e00e0		e0 10 00	cpx #$0010	                CPX #$0010
.1e00e3		d0 f2		bne $1e00d7	                BNE ClearBitmapRegisters
.1e00e5		60		rts		                RTS
.1e00e6						Splash_Get_Machine_ID
.1e00e6		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00e8		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e00ec		29 03		and #$03	                AND #$03        ; Isolate the first 2 bits to know if it is a U or FMX
.1e00ee		85 b0		sta $b0		                STA MODEL
.1e00f0		c9 00		cmp #$00	                CMP #$00
.1e00f2		f0 0e		beq $1e0102	                BEQ DONE
.1e00f4		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e00f8		29 04		and #$04	                AND #GABE_SYS_STAT_MID2 ; High 4Meg, Low - 2Megs
.1e00fa		c9 04		cmp #$04	                CMP #GABE_SYS_STAT_MID2
.1e00fc		f0 04		beq $1e0102	                BEQ DONE
.1e00fe		a9 02		lda #$02	                LDA #$02
.1e0100		85 b0		sta $b0		                STA MODEL       ; In this Scheme 00 - FMX, 01 - U+, 02 - U
.1e0102						DONE:
.1e0102		60		rts		                RTS
.1e0103						Splash_Load_FontSet
.1e0103		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0105		c2 10		rep #$10	                REP #$10        ; set X long
.1e0107		a2 00 00	ldx #$0000	                LDX #$0000
.1e010a						DONE_LOADING_FONT:
.1e010a		bf 00 08 1f	lda $1f0800,x	                LDA @l FONT_4_SPLASH, X
.1e010e		9f 00 80 af	sta $af8000,x	                STA @l FONT_MEMORY_BANK0, X
.1e0112		e8		inx		                INX
.1e0113		e0 00 08	cpx #$0800	                CPX #2048
.1e0116		d0 f2		bne $1e010a	                BNE DONE_LOADING_FONT
.1e0118		60		rts		                RTS
.1e0119						Splash_Clear_Screen
.1e0119		e2 20		sep #$20	                SEP #$20        ; set A short
.1e011b		c2 10		rep #$10	                REP #$10        ; set X long
.1e011d		a2 00 00	ldx #$0000	                LDX #$0000
.1e0120						Branch_Clear:
.1e0120		a9 20		lda #$20	                LDA #$20
.1e0122		9f 00 a0 af	sta $afa000,x	                STA @l CS_TEXT_MEM_PTR,X
.1e0126		a9 f0		lda #$f0	                LDA #$F0
.1e0128		9f 00 c0 af	sta $afc000,x	                STA @l CS_COLOR_MEM_PTR,X
.1e012c		e8		inx		                INX
.1e012d		e0 00 20	cpx #$2000	                CPX #$2000
.1e0130		d0 ee		bne $1e0120	                BNE Branch_Clear
.1e0132		60		rts		                RTS
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
.1e0133						Splash_Moniker_Color_Rolling
.1e0133		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0135		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.1e0139		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e013b		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.1e013f		a5 f0		lda $f0		                LDA INTERRUPT_STATE
.1e0141		c9 00		cmp #$00	                CMP #IRQ_SOF_ST0
.1e0143		f0 0c		beq $1e0151	                BEQ SERVE_STATE0
.1e0145		c9 01		cmp #$01	                CMP #IRQ_SOF_ST1
.1e0147		f0 1a		beq $1e0163	                BEQ SERVE_STATE1
.1e0149		c9 02		cmp #$02	                CMP #IRQ_SOF_ST2
.1e014b		d0 03		bne $1e0150	                BNE NOT_SERVE_STATE2
.1e014d		82 39 01	brl $1e0289	                BRL SERVE_STATE2
.1e0150						NOT_SERVE_STATE2
.1e0150		6b		rtl		                RTL
.1e0151						SERVE_STATE0
.1e0151		a5 f1		lda $f1		                LDA INTERRUPT_COUNT
.1e0153		c9 04		cmp #$04	                CMP #$04
.1e0155		f0 03		beq $1e015a	                BEQ SERVE_NEXT_STATE
.1e0157		e6 f1		inc $f1		                INC INTERRUPT_COUNT
.1e0159		6b		rtl		                RTL
.1e015a						SERVE_NEXT_STATE
.1e015a		a9 00		lda #$00	                LDA #$00
.1e015c		85 f1		sta $f1		                STA INTERRUPT_COUNT
.1e015e		a9 01		lda #$01	                LDA #IRQ_SOF_ST1
.1e0160		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0162		6b		rtl		                RTL
.1e0163						SERVE_STATE1
.1e0163		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e0165		a9 00 00	lda #$0000	                LDA #$0000
.1e0168		a2 00 00	ldx #$0000	                LDX #$0000
.1e016b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1e016d		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e016f		bf b0 02 1e	lda $1e02b0,x	                LDA @lCOLOR_POINTER+0, X
.1e0173		aa		tax		                TAX
.1e0174		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e0178		8f e0 3f af	sta $af3fe0	                STA @lGRPH_LUT7_PTR+992
.1e017c		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e0180		8f e1 3f af	sta $af3fe1	                STA @lGRPH_LUT7_PTR+993
.1e0184		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e0188		8f e2 3f af	sta $af3fe2	                STA @lGRPH_LUT7_PTR+994
.1e018c		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e018e		bf b1 02 1e	lda $1e02b1,x	                LDA @lCOLOR_POINTER+1, X
.1e0192		aa		tax		                TAX
.1e0193		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e0197		8f e4 3f af	sta $af3fe4	                STA @lGRPH_LUT7_PTR+996
.1e019b		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e019f		8f e5 3f af	sta $af3fe5	                STA @lGRPH_LUT7_PTR+997
.1e01a3		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e01a7		8f e6 3f af	sta $af3fe6	                STA @lGRPH_LUT7_PTR+998
.1e01ab		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01ad		bf b2 02 1e	lda $1e02b2,x	                LDA @lCOLOR_POINTER+2, X
.1e01b1		aa		tax		                TAX
.1e01b2		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e01b6		8f e8 3f af	sta $af3fe8	                STA @lGRPH_LUT7_PTR+1000
.1e01ba		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e01be		8f e9 3f af	sta $af3fe9	                STA @lGRPH_LUT7_PTR+1001
.1e01c2		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e01c6		8f ea 3f af	sta $af3fea	                STA @lGRPH_LUT7_PTR+1002
.1e01ca		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01cc		bf b3 02 1e	lda $1e02b3,x	                LDA @lCOLOR_POINTER+3, X
.1e01d0		aa		tax		                TAX
.1e01d1		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e01d5		8f ec 3f af	sta $af3fec	                STA @lGRPH_LUT7_PTR+1004
.1e01d9		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e01dd		8f ed 3f af	sta $af3fed	                STA @lGRPH_LUT7_PTR+1005
.1e01e1		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e01e5		8f ee 3f af	sta $af3fee	                STA @lGRPH_LUT7_PTR+1006
.1e01e9		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01eb		bf b4 02 1e	lda $1e02b4,x	                LDA @lCOLOR_POINTER+4, X
.1e01ef		aa		tax		                TAX
.1e01f0		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e01f4		8f f0 3f af	sta $af3ff0	                STA @lGRPH_LUT7_PTR+1008
.1e01f8		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e01fc		8f f1 3f af	sta $af3ff1	                STA @lGRPH_LUT7_PTR+1009
.1e0200		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e0204		8f f2 3f af	sta $af3ff2	                STA @lGRPH_LUT7_PTR+1010
.1e0208		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e020a		bf b5 02 1e	lda $1e02b5,x	                LDA @lCOLOR_POINTER+5, X
.1e020e		aa		tax		                TAX
.1e020f		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e0213		8f f4 3f af	sta $af3ff4	                STA @lGRPH_LUT7_PTR+1012
.1e0217		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e021b		8f f5 3f af	sta $af3ff5	                STA @lGRPH_LUT7_PTR+1013
.1e021f		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e0223		8f f6 3f af	sta $af3ff6	                STA @lGRPH_LUT7_PTR+1014
.1e0227		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0229		bf b6 02 1e	lda $1e02b6,x	                LDA @lCOLOR_POINTER+6, X
.1e022d		aa		tax		                TAX
.1e022e		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e0232		8f f8 3f af	sta $af3ff8	                STA @lGRPH_LUT7_PTR+1016
.1e0236		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e023a		8f f9 3f af	sta $af3ff9	                STA @lGRPH_LUT7_PTR+1017
.1e023e		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e0242		8f fa 3f af	sta $af3ffa	                STA @lGRPH_LUT7_PTR+1018
.1e0246		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0248		bf b7 02 1e	lda $1e02b7,x	                LDA @lCOLOR_POINTER+7, X
.1e024c		aa		tax		                TAX
.1e024d		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e0251		8f fc 3f af	sta $af3ffc	                STA @lGRPH_LUT7_PTR+1020
.1e0255		8f 50 1f af	sta $af1f50	                STA @lFG_CHAR_LUT_PTR + $10           ;
.1e0259		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e025d		8f fd 3f af	sta $af3ffd	                STA @lGRPH_LUT7_PTR+1021
.1e0261		8f 51 1f af	sta $af1f51	                STA @lFG_CHAR_LUT_PTR + $11            ;
.1e0265		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e0269		8f fe 3f af	sta $af3ffe	                STA @lGRPH_LUT7_PTR+1022
.1e026d		8f 52 1f af	sta $af1f52	                STA @lFG_CHAR_LUT_PTR + $12            ;
.1e0271						HERE
.1e0271		18		clc		                CLC
.1e0272		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.1e0274		69 09		adc #$09	                ADC #$09
.1e0276		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e0278		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.1e027a		c9 48		cmp #$48	                CMP #$48
.1e027c		d0 04		bne $1e0282	                BNE EXIT_COLOR_CHANGE
.1e027e		a9 00		lda #$00	                LDA #$00
.1e0280		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e0282						EXIT_COLOR_CHANGE
.1e0282		c2 10		rep #$10	                REP #$10        ; set X long
.1e0284		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e0286		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0288		6b		rtl		                RTL
.1e0289						SERVE_STATE2
.1e0289		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e028b		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e028d		6b		rtl		                RTL
>1e028e						.align 16
>1e0290		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>1e0294		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>1e0298		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>1e029c		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>1e02a0		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>1e02a4		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>1e02a8		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>1e02ac		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>1e02b0		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>1e02b8		00
>1e02b9		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>1e02c1		00
>1e02c2		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>1e02ca		00
>1e02cb		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>1e02d3		00
>1e02d4		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>1e02dc		00
>1e02dd		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>1e02e5		00
>1e02e6		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>1e02ee		00
>1e02ef		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>1e02f7		00

;******  Processing file: src\SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480
.1e02f8						Splashscreen_BitMapSetup
.1e02f8		e2 20		sep #$20	                SEP #$20        ; set A short
.1e02fa		c2 10		rep #$10	                REP #$10        ; set X long
.1e02fc		a9 0f		lda #$0f	        LDA #( Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay );
.1e02fe		8f 00 00 af	sta $af0000	        STA @l MASTER_CTRL_REG_L
.1e0302		a9 00		lda #$00	        LDA #$00
.1e0304		8f 01 00 af	sta $af0001	        STA @l MASTER_CTRL_REG_H
.1e0308		a9 00		lda #$00	        LDA #$00
.1e030a		8f 00 01 af	sta $af0100	        STA @l BM0_CONTROL_REG
.1e030e		a9 0f		lda #$0f	        LDA #( BM_Enable | BM_LUT7)
.1e0310		8f 08 01 af	sta $af0108	        STA @l BM1_CONTROL_REG
.1e0314		a9 00		lda #$00	        LDA #$00
.1e0316		8f 09 01 af	sta $af0109	        STA @l BM1_START_ADDY_L
.1e031a		a9 00		lda #$00	        LDA #$00
.1e031c		8f 0a 01 af	sta $af010a	        STA @l BM1_START_ADDY_M
.1e0320		8f 0b 01 af	sta $af010b	        STA @l BM1_START_ADDY_H
.1e0324		a9 01		lda #$01	        LDA #$01
.1e0326		8f 04 00 af	sta $af0004	        STA BORDER_CTRL_REG
.1e032a		a9 08		lda #$08	        LDA #$08
.1e032c		8f 08 00 af	sta $af0008	        STA BORDER_X_SIZE
.1e0330		8f 09 00 af	sta $af0009	        STA BORDER_Y_SIZE
.1e0334		a9 80		lda #$80	        LDA #$80
.1e0336		8f 06 00 af	sta $af0006	        STA BORDER_COLOR_G
.1e033a		a9 00		lda #$00	        LDA #$00
.1e033c		8f 05 00 af	sta $af0005	        STA BORDER_COLOR_B
.1e0340		8f 07 00 af	sta $af0007	        STA BORDER_COLOR_R
.1e0344		a9 a0		lda #$a0	        LDA #$A0
.1e0346		8f 12 00 af	sta $af0012	        STA @l VKY_TXT_CURSOR_CHAR_REG
.1e034a		a9 10		lda #$10	        LDA #$10
.1e034c		8f 0e 00 af	sta $af000e	        STA @l BACKGROUND_COLOR_G
.1e0350		a9 10		lda #$10	        LDA #$10
.1e0352		8f 0f 00 af	sta $af000f	        STA @l BACKGROUND_COLOR_R
.1e0356		8f 0d 00 af	sta $af000d	        STA @l BACKGROUND_COLOR_B
.1e035a		e2 20		sep #$20	                SEP #$20        ; set A short
.1e035c		c2 10		rep #$10	                REP #$10        ; set X long
.1e035e		a2 00 00	ldx #$0000	        LDX #$0000
.1e0361						SS_LUT_BRANCH:
.1e0361		bf 00 0e 1e	lda $1e0e00,x	        LDA @l SS_MONIKER_LUT, X
.1e0365		ea		nop		        NOP
.1e0366		9f 00 3c af	sta $af3c00,x	        STA @l GRPH_LUT7_PTR, X
.1e036a		e8		inx		        INX
.1e036b		e0 00 04	cpx #$0400	        CPX #1024
.1e036e		d0 f1		bne $1e0361	        BNE SS_LUT_BRANCH
.1e0370		a9 00		lda #$00	        LDA #$00
.1e0372		8f 04 3c af	sta $af3c04	        STA @l GRPH_LUT7_PTR + 4
.1e0376		8f 05 3c af	sta $af3c05	        STA @l GRPH_LUT7_PTR + 5
.1e037a		8f 06 3c af	sta $af3c06	        STA @l GRPH_LUT7_PTR + 6
.1e037e		22 2c 05 1e	jsl $1e052c	        JSL SS_VDMA_CLEAR_MEMORY_640_480;
.1e0382		c2 20		rep #$20	                REP #$20        ; set A long
.1e0384		a9 00 12	lda #$1200	        LDA #<>SS_MONIKER      ; Set up the Source
.1e0387		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e038b		a9 00 50	lda #$5000	        LDA #<>( C256Moniker_SizeX * C256Moniker_SizeY )
.1e038e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e0392		a9 00 00	lda #$0000	        LDA #$0000
.1e0395		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0399		a9 a0 78	lda #$78a0	        LDA #<>( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)    ; Set up the Source
.1e039c		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e03a0		a9 40 01	lda #$0140	        LDA #C256Moniker_SizeX
.1e03a3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e03a7		a9 40 00	lda #$0040	        LDA #C256Moniker_SizeY
.1e03aa		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e03ae		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e03b1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e03b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03b7		a9 1e		lda #$1e	        LDA #`SS_MONIKER
.1e03b9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e03bd		a9 00		lda #$00	        LDA #`( C256Moniker_SizeX * C256Moniker_SizeY )
.1e03bf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e03c3		a9 00		lda #$00	        LDA #$00
.1e03c5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e03c9		a9 00		lda #$00	        LDA #`( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)
.1e03cb		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e03cf		22 e7 04 1e	jsl $1e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e03d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03d5		af b0 00 00	lda $0000b0	        LDA @lMODEL
.1e03d9		29 03		and #$03	        AND #$03
.1e03db		c9 00		cmp #$00	        CMP #$00
.1e03dd		f0 0b		beq $1e03ea	        BEQ DMA_FMX_Moniker
.1e03df		c9 01		cmp #$01	        CMP #$01
.1e03e1		f0 5b		beq $1e043e	        BEQ DMA_UPlus_Moniker
.1e03e3		c9 02		cmp #$02	        CMP #$02
.1e03e5		d0 03		bne $1e03ea	        BNE BAD_MODEL_NUMBER
.1e03e7		82 a8 00	brl $1e0492	        BRL DMA_U_Moniker
.1e03ea						 BAD_MODEL_NUMBER:
.1e03ea						DMA_FMX_Moniker:
.1e03ea		c2 20		rep #$20	                REP #$20        ; set A long
.1e03ec		a9 00 62	lda #$6200	        LDA #<>SS_FMX_TXT      ; Set up the Source
.1e03ef		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e03f3		a9 00 32	lda #$3200	        LDA #<>( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e03f6		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e03fa		a9 00 00	lda #$0000	        LDA #$0000
.1e03fd		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0401		a9 f0 13	lda #$13f0	        LDA #<>( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)    ; Set up the Source
.1e0404		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0408		a9 a0 00	lda #$00a0	        LDA #FMXMoniker_SizeX
.1e040b		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e040f		a9 50 00	lda #$0050	        LDA #FMXMoniker_SizeY
.1e0412		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e0416		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e0419		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e041d		e2 20		sep #$20	                SEP #$20        ; set A short
.1e041f		a9 1e		lda #$1e	        LDA #`SS_FMX_TXT
.1e0421		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0425		a9 00		lda #$00	        LDA #`( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e0427		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e042b		a9 00		lda #$00	        LDA #$00
.1e042d		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0431		a9 01		lda #$01	        LDA #`( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)
.1e0433		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e0437		22 e7 04 1e	jsl $1e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e043b		4c e6 04	jmp $1e04e6	        JMP Done_DMA_Model_Moniker
.1e043e						DMA_UPlus_Moniker:
.1e043e		c2 20		rep #$20	                REP #$20        ; set A long
.1e0440		a9 00 94	lda #$9400	        LDA #<>SS_UPlus_TXT      ; Set up the Source
.1e0443		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e0447		a9 00 18	lda #$1800	        LDA #<>( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e044a		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e044e		a9 00 00	lda #$0000	        LDA #$0000
.1e0451		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0455		a9 10 14	lda #$1410	        LDA #<>( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)    ; Set up the Source
.1e0458		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e045c		a9 60 00	lda #$0060	        LDA #UPlusMoniker_SizeX
.1e045f		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e0463		a9 40 00	lda #$0040	        LDA #UPlusMoniker_SizeY
.1e0466		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e046a		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e046d		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e0471		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0473		a9 1e		lda #$1e	        LDA #`SS_UPlus_TXT
.1e0475		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0479		a9 00		lda #$00	        LDA #`( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e047b		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e047f		a9 00		lda #$00	        LDA #$00
.1e0481		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0485		a9 01		lda #$01	        LDA #`( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)
.1e0487		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e048b		22 e7 04 1e	jsl $1e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e048f		4c e6 04	jmp $1e04e6	        JMP Done_DMA_Model_Moniker
.1e0492						DMA_U_Moniker:
.1e0492		c2 20		rep #$20	                REP #$20        ; set A long
.1e0494		a9 00 ac	lda #$ac00	        LDA #<>SS_U_TXT      ; Set up the Source
.1e0497		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e049b		a9 00 10	lda #$1000	        LDA #<>( UMoniker_SizeX *UMoniker_SizeY )
.1e049e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e04a2		a9 00 00	lda #$0000	        LDA #$0000
.1e04a5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e04a9		a9 20 14	lda #$1420	        LDA #<>( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)    ; Set up the Source
.1e04ac		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e04b0		a9 40 00	lda #$0040	        LDA #UMoniker_SizeX
.1e04b3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e04b7		a9 40 00	lda #$0040	        LDA #UMoniker_SizeY
.1e04ba		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e04be		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e04c1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e04c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04c7		a9 1e		lda #$1e	        LDA #`SS_U_TXT
.1e04c9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e04cd		a9 00		lda #$00	        LDA #`( UMoniker_SizeX * UMoniker_SizeY )
.1e04cf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e04d3		a9 00		lda #$00	        LDA #$00
.1e04d5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e04d9		a9 01		lda #$01	        LDA #`( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)
.1e04db		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e04df		22 e7 04 1e	jsl $1e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e04e3		4c e6 04	jmp $1e04e6	        JMP Done_DMA_Model_Moniker
.1e04e6						Done_DMA_Model_Moniker
.1e04e6		6b		rtl		        RTL
.1e04e7						SS_VDMA_SETUP_2_TRANSFER_IMAGE
.1e04e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04e9		a9 11		lda #$11	        LDA #( SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src )
.1e04eb		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e04ef		a9 13		lda #$13	        LDA #( VDMA_CTRL_Enable |  VDMA_CTRL_SysRAM_Src | VDMA_CTRL_1D_2D )
.1e04f1		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e04f5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04f7		af 00 04 af	lda $af0400	        LDA @l VDMA_CONTROL_REG
.1e04fb		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e04fd		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0501		af 20 04 af	lda $af0420	        LDA @l SDMA_CTRL_REG0
.1e0505		09 80		ora #$80	        ORA #SDMA_CTRL0_Start_TRF
.1e0507		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e050b		ea		nop		        NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e050c		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e050d		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e050e		ea		nop		        NOP
.1e050f		ea		nop		        NOP
.1e0510		ea		nop		        NOP
.1e0511		ea		nop		        NOP
.1e0512		ea		nop		        NOP
.1e0513		ea		nop		        NOP
.1e0514		ea		nop		        NOP
.1e0515		a9 00		lda #$00	        LDA #$00
.1e0517		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e051b						NOTFINISHED:
.1e051b		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e051f		29 80		and #$80	        AND #$80
.1e0521		c9 80		cmp #$80	        CMP #$80
.1e0523		f0 f6		beq $1e051b	        BEQ NOTFINISHED
.1e0525		a9 00		lda #$00	        LDA #$00
.1e0527		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e052b		6b		rtl		        RTL
.1e052c						SS_VDMA_CLEAR_MEMORY_640_480
.1e052c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e052e		a9 05		lda #$05	        LDA #( VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill )
.1e0530		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0534		a9 00		lda #$00	        LDA #$00
.1e0536		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e053a		c2 20		rep #$20	                REP #$20        ; set A long
.1e053c		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e053f		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0543		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0545		a9 00		lda #$00	        LDA #$00
.1e0547		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e054b		c2 20		rep #$20	                REP #$20        ; set A long
.1e054d		a9 00 b0	lda #$b000	        LDA #<>(640*480)
.1e0550		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e0554		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0556		a9 04		lda #$04	        LDA #`(640*480)
.1e0558		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e055c		a9 00		lda #$00	        LDA #$00
.1e055e		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0562		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e0566		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e0568		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e056c		ea		nop		         NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e056d		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e056e		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e056f		ea		nop		        NOP
.1e0570		ea		nop		        NOP
.1e0571		ea		nop		        NOP
.1e0572		ea		nop		        NOP
.1e0573		ea		nop		        NOP
.1e0574						SS_VDMA_CLR_LOOPA:
.1e0574		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e0578		29 80		and #$80	        AND #$80
.1e057a		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e057c		f0 f6		beq $1e0574	        BEQ SS_VDMA_CLR_LOOPA
.1e057e		ea		nop		        NOP
.1e057f		a9 00		lda #$00	        LDA #$00
.1e0581		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0585		6b		rtl		        RTL
.1e0586						SS_VDMA_TRANSFER_VRAM_2_VRAM
.1e0586		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0588		a9 01		lda #$01	        LDA #( VDMA_CTRL_Enable )
.1e058a		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e058e		a9 00		lda #$00	        LDA #$00
.1e0590		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e0594		c2 20		rep #$20	                REP #$20        ; set A long
.1e0596		a9 00 96	lda #$9600	        LDA #$9600      ; Set up the Source
.1e0599		8f 02 04 af	sta $af0402	        STA @l VDMA_SRC_ADDY_L
.1e059d		e2 20		sep #$20	                SEP #$20        ; set A short
.1e059f		a9 00		lda #$00	        LDA #$00
.1e05a1		8f 04 04 af	sta $af0404	        STA @l VDMA_SRC_ADDY_H
.1e05a5		c2 20		rep #$20	                REP #$20        ; set A long
.1e05a7		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e05aa		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e05ae		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05b0		a9 00		lda #$00	        LDA #$00
.1e05b2		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e05b6		c2 20		rep #$20	                REP #$20        ; set A long
.1e05b8		a9 00 14	lda #$1400	        LDA #<>(320*16)
.1e05bb		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e05bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05c1		a9 00		lda #$00	        LDA #`(320*16)
.1e05c3		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e05c7		a9 00		lda #$00	        LDA #$00
.1e05c9		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e05cd		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e05d1		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e05d3		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e05d7		ea		nop		        NOP
.1e05d8		ea		nop		        NOP
.1e05d9		ea		nop		        NOP
.1e05da						SS_VDMA_CLR_LOOPB:
.1e05da		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e05de		29 80		and #$80	        AND #$80
.1e05e0		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e05e2		f0 f6		beq $1e05da	        BEQ SS_VDMA_CLR_LOOPB
.1e05e4		ea		nop		        NOP
.1e05e5		a9 00		lda #$00	        LDA #$00
.1e05e7		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e05eb		6b		rtl		        RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/Splashscreen_Text_Display.asm

=$000098					TEXT_SRC_PTR_L      = $000098
=$00009a					TEXT_SRC_PTR_H      = $00009A
=$00009c					TEXT_DST_PTR_L      = $00009C
=$00009e					TEXT_DST_PTR_H      = $00009E
=$0000a0					TEXT_INDEX          = $0000A0
=$0000a0					MOD_SELECT_L        = $0000A0
=$0000a2					MOD_SELECT_H        = $0000A2
=$0000a2					TEXT_CURSOR_X       = $0000A2
=$0000a4					TEXT_CURSOR_Y       = $0000A4
=$0000a6					LINE_INDEX          = $0000A6
=$0000a8					COLOR_DST_PTR_L     = $0000A8
=$0000aa					COLOR_DST_PTR_H     = $0000AA
=$0000b0					MODEL               = $0000B0
=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
.1e05ec						Set_Text_Color:
.1e05ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e05ee		a9 00 00	lda #$0000	            LDA #00
.1e05f1		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e05f3		a9 30 00	lda #$0030	            LDA #48
.1e05f6		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e05f8		20 ec 08	jsr $1e08ec	            JSR Line_Display_Compute_Pointer
.1e05fb		a0 00 00	ldy #$0000	            LDY #$0000
.1e05fe		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0600		a9 40		lda #$40	            LDA #$40
.1e0602						SetColorBranch:
.1e0602		97 a8		sta [$a8],y	            STA [COLOR_DST_PTR_L],Y
.1e0604		c8		iny		            INY
.1e0605		c0 50 00	cpy #$0050	            CPY #80
.1e0608		d0 f8		bne $1e0602	            BNE SetColorBranch
.1e060a		60		rts		            RTS
.1e060b						Model_Update_Info_Field:
.1e060b		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e060d		a9 00 00	lda #$0000	            LDA #$0000
.1e0610		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0612		a5 b0		lda $b0		            LDA MODEL
.1e0614		0a		asl a		            ASL
.1e0615		0a		asl a		            ASL
.1e0616		aa		tax		            TAX
.1e0617		c2 20		rep #$20	                REP #$20        ; set A long
.1e0619		bf 9f 0c 1e	lda $1e0c9f,x	            LDA MODEL_TABLE, X
.1e061d		85 a0		sta $a0		            STA MOD_SELECT_L
.1e061f		bf a1 0c 1e	lda $1e0ca1,x	            LDA MODEL_TABLE + 2, X
.1e0623		85 a2		sta $a2		            STA MOD_SELECT_H
.1e0625		a0 00 00	ldy #$0000	            LDY #$0000
.1e0628		84 a6		sty $a6		            STY LINE_INDEX
.1e062a						Next_Change_Here:
.1e062a		c2 20		rep #$20	                REP #$20        ; set A long
.1e062c		a4 a6		ldy $a6		            LDY LINE_INDEX
.1e062e		bb		tyx		            TYX
.1e062f		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e0631		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e0633		bf ef 0c 1e	lda $1e0cef,x	            LDA LINE_MOD, X
.1e0637		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0639		c8		iny		            INY
.1e063a		c8		iny		            INY
.1e063b		bb		tyx		            TYX
.1e063c		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e063e		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e0640		bf ef 0c 1e	lda $1e0cef,x	            LDA LINE_MOD, X
.1e0644		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0646		c8		iny		            INY
.1e0647		c8		iny		            INY
.1e0648		84 a6		sty $a6		            STY LINE_INDEX
.1e064a		c0 10 00	cpy #$0010	            CPY #16
.1e064d		f0 10		beq $1e065f	            BEQ LetsMoveOn
.1e064f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0651		a0 00 00	ldy #$0000	            LDY #$0000
.1e0654						nextchar:
.1e0654		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e0656		c9 00		cmp #$00	            CMP #$00
.1e0658		f0 d0		beq $1e062a	            BEQ Next_Change_Here
.1e065a		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e065c		c8		iny		            INY
.1e065d		80 f5		bra $1e0654	            BRA nextchar
.1e065f						LetsMoveOn:
.1e065f		af fb 0c 1e	lda $1e0cfb	            LDA LINE_MOD + 12
.1e0663		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0665		a0 00 00	ldy #$0000	            LDY #$0000
.1e0668		e2 20		sep #$20	                SEP #$20        ; set A short
.1e066a		af 05 e8 af	lda $afe805	            LDA @lREVOFPCB_C
.1e066e		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0670		c8		iny		            INY
.1e0671		af 06 e8 af	lda $afe806	            LDA @lREVOFPCB_4
.1e0675		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0677		c8		iny		            INY
.1e0678		af 07 e8 af	lda $afe807	            LDA @lREVOFPCB_A
.1e067c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e067e		18		clc		            CLC
.1e067f		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR   ; it is in BCD
.1e0683		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e0686		8f ca 0a 1e	sta $1e0aca	            STA @lLINE8 + 56    ; FAT VICKY in U/U+ Model
.1e068a		8f 03 0b 1e	sta $1e0b03	            STA @lLINE9 + 47    ; GABE in FMX
.1e068e		8f 49 0b 1e	sta $1e0b49	            STA @lLINE10 + 51   ; VICKY II in FMX
.1e0692		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR
.1e0696		29 0f		and #$0f	            AND #$0F
.1e0698		69 30		adc #$30	            ADC #$30
.1e069a		8f cb 0a 1e	sta $1e0acb	            STA @lLINE8 + 57    ; FAT VICKY in U/U+ Model
.1e069e		8f 04 0b 1e	sta $1e0b04	            STA @lLINE9 + 48    ; GABE in FMX
.1e06a2		8f 4a 0b 1e	sta $1e0b4a	            STA @lLINE10 + 52   ; VICKY II in FMX
.1e06a6		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR   ; it is in BCD
.1e06aa		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e06ad		8f cd 0a 1e	sta $1e0acd	            STA @lLINE8 + 59    ; FAT VICKY in U/U+ Model
.1e06b1		8f 06 0b 1e	sta $1e0b06	            STA @lLINE9 + 50    ; GABE in FMX
.1e06b5		8f 4c 0b 1e	sta $1e0b4c	            STA @lLINE10 + 54   ; VICKY II in FMX
.1e06b9		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR
.1e06bd		29 0f		and #$0f	            AND #$0F
.1e06bf		69 30		adc #$30	            ADC #$30
.1e06c1		8f ce 0a 1e	sta $1e0ace	            STA @lLINE8 + 60    ; FAT VICKY in U/U+ Model
.1e06c5		8f 07 0b 1e	sta $1e0b07	            STA @lLINE9 + 51    ; GABE in FMX
.1e06c9		8f 4d 0b 1e	sta $1e0b4d	            STA @lLINE10 + 55   ; VICKY II in FMX
.1e06cd		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR   ; it is in BCD
.1e06d1		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e06d4		8f d0 0a 1e	sta $1e0ad0	            STA @lLINE8 + 62    ; FAT VICKY in U/U+ Model
.1e06d8		8f 09 0b 1e	sta $1e0b09	            STA @lLINE9 + 53    ; GABE in FMX
.1e06dc		8f 4f 0b 1e	sta $1e0b4f	            STA @lLINE10 + 57   ; VICKY II in FMX
.1e06e0		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR
.1e06e4		29 0f		and #$0f	            AND #$0F
.1e06e6		69 30		adc #$30	            ADC #$30
.1e06e8		8f d1 0a 1e	sta $1e0ad1	            STA @lLINE8 + 63    ; FAT VICKY in U/U+ Model
.1e06ec		8f 0a 0b 1e	sta $1e0b0a	            STA @lLINE9 + 54    ; GABE in FMX
.1e06f0		8f 50 0b 1e	sta $1e0b50	            STA @lLINE10 + 58   ; VICKY II in FMX
.1e06f4		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e06f8		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e06fb		8f c0 0a 1e	sta $1e0ac0	            STA @lLINE8 + 46    ; U/U+
.1e06ff		8f f9 0a 1e	sta $1e0af9	            STA @lLINE9 + 37    ; When FMX, this is the Info for GABE
.1e0703		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e0707		29 0f		and #$0f	            AND #$0F
.1e0709		69 30		adc #$30	            ADC #$30
.1e070b		8f c1 0a 1e	sta $1e0ac1	            STA @lLINE8 + 47
.1e070f		8f fa 0a 1e	sta $1e0afa	            STA @lLINE9 + 38    ; When FMX, this is the Info for GABE
.1e0713		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e0717		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e071a		8f 3f 0b 1e	sta $1e0b3f	            STA @lLINE10 + 41    ; When FMX, this is the Info for GABE
.1e071e		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e0722		29 0f		and #$0f	            AND #$0F
.1e0724		69 30		adc #$30	            ADC #$30
.1e0726		8f 40 0b 1e	sta $1e0b40	            STA @lLINE10 + 42    ; When FMX, this is the Info for GABE
.1e072a		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e072e		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e0731		8f c2 0a 1e	sta $1e0ac2	            STA @lLINE8 + 48
.1e0735		8f fb 0a 1e	sta $1e0afb	            STA @lLINE9 + 39    ; When FMX, this is the Info for GABE
.1e0739		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e073d		29 0f		and #$0f	            AND #$0F
.1e073f		69 30		adc #$30	            ADC #$30
.1e0741		8f c3 0a 1e	sta $1e0ac3	            STA @lLINE8 + 49
.1e0745		8f fc 0a 1e	sta $1e0afc	            STA @lLINE9 + 40    ; When FMX, this is the Info for GABE
.1e0749		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e074d		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e0750		8f 41 0b 1e	sta $1e0b41	            STA @lLINE10 + 43    ; When FMX, this is the Info for GABE
.1e0754		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e0758		29 0f		and #$0f	            AND #$0F
.1e075a		69 30		adc #$30	            ADC #$30
.1e075c		8f 42 0b 1e	sta $1e0b42	            STA @lLINE10 + 44    ; When FMX, this is the Info for GABE
.1e0760		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e0764		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e0767		8f b4 0a 1e	sta $1e0ab4	            STA @lLINE8 + 34
.1e076b		8f ed 0a 1e	sta $1e0aed	            STA @lLINE9 + 25    ; When FMX, this is the Info for GABE
.1e076f		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e0773		29 0f		and #$0f	            AND #$0F
.1e0775		69 30		adc #$30	            ADC #$30
.1e0777		8f b5 0a 1e	sta $1e0ab5	            STA @lLINE8 + 35
.1e077b		8f ee 0a 1e	sta $1e0aee	            STA @lLINE9 + 26    ; When FMX, this is the Info for GABE
.1e077f		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e0783		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e0786		8f 34 0b 1e	sta $1e0b34	            STA @lLINE10 + 30    ; When FMX, this is the Info for GABE
.1e078a		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e078e		29 0f		and #$0f	            AND #$0F
.1e0790		69 30		adc #$30	            ADC #$30
.1e0792		8f 35 0b 1e	sta $1e0b35	            STA @lLINE10 + 31    ; When FMX, this is the Info for GABE
.1e0796		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e079a		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e079d		8f b6 0a 1e	sta $1e0ab6	            STA @lLINE8 + 36
.1e07a1		8f ef 0a 1e	sta $1e0aef	            STA @lLINE9 + 27    ; When FMX, this is the Info for GABE
.1e07a5		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e07a9		29 0f		and #$0f	            AND #$0F
.1e07ab		69 30		adc #$30	            ADC #$30
.1e07ad		8f b7 0a 1e	sta $1e0ab7	            STA @lLINE8 + 37
.1e07b1		8f f0 0a 1e	sta $1e0af0	            STA @lLINE9 + 28    ; When FMX, this is the Info for GABE
.1e07b5		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e07b9		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e07bc		8f 36 0b 1e	sta $1e0b36	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e07c0		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e07c4		29 0f		and #$0f	            AND #$0F
.1e07c6		69 30		adc #$30	            ADC #$30
.1e07c8		8f 36 0b 1e	sta $1e0b36	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e07cc		20 3f 08	jsr $1e083f	            JSR GODETECTHIRES ; Dip-Switch and Change Text
.1e07cf		20 60 08	jsr $1e0860	            JSR GODETECTHDD   ; Dip-Switch and Change Text
.1e07d2		20 61 08	jsr $1e0861	            JSR GODETECTEXP   ; Go Check if there is a Card Change Text
.1e07d5		a5 b0		lda $b0		            LDA MODEL
.1e07d7		29 03		and #$03	            AND #$03
.1e07d9		c9 00		cmp #$00	            CMP #$00
.1e07db		f0 12		beq $1e07ef	            BEQ Erase_FATVicky_Line;
.1e07dd		c9 01		cmp #$01	            CMP #$01
.1e07df		f0 29		beq $1e080a	            BEQ Erase_2Lines;
.1e07e1		c9 02		cmp #$02	            CMP #$02
.1e07e3		f0 25		beq $1e080a	            BEQ Erase_2Lines;
.1e07e5		60		rts		            RTS
.1e07e6						HighNibblerBCD:
.1e07e6		29 f0		and #$f0	            AND #$F0
.1e07e8		4a		lsr a		            LSR A
.1e07e9		4a		lsr a		            LSR A
.1e07ea		4a		lsr a		            LSR A
.1e07eb		4a		lsr a		            LSR A
.1e07ec		69 30		adc #$30	            ADC #$30
.1e07ee		60		rts		            RTS
.1e07ef						Erase_FATVicky_Line:
.1e07ef		c2 20		rep #$20	                REP #$20        ; set A long
.1e07f1		a9 92 0a	lda #$0a92	            LDA #<>LINE8
.1e07f4		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e07f6		a9 1e 00	lda #$001e	            LDA #`LINE8
.1e07f9		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e07fb		e2 20		sep #$20	                SEP #$20        ; set A short
.1e07fd		a0 00 00	ldy #$0000	            LDY #$0000
.1e0800		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e0802		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0804		c8		iny		            INY
.1e0805		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e0807		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0809		60		rts		            RTS
.1e080a						Erase_2Lines
.1e080a		c2 20		rep #$20	                REP #$20        ; set A long
.1e080c		a9 d4 0a	lda #$0ad4	            LDA #<>LINE9
.1e080f		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0811		a9 1e 00	lda #$001e	            LDA #`LINE9
.1e0814		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0816		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0818		a0 00 00	ldy #$0000	            LDY #$0000
.1e081b		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e081d		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e081f		c8		iny		            INY
.1e0820		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e0822		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0824		c2 20		rep #$20	                REP #$20        ; set A long
.1e0826		a9 16 0b	lda #$0b16	            LDA #<>LINE10
.1e0829		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e082b		a9 1e 00	lda #$001e	            LDA #`LINE10
.1e082e		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0830		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0832		a0 00 00	ldy #$0000	            LDY #$0000
.1e0835		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e0837		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0839		c8		iny		            INY
.1e083a		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e083c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e083e		60		rts		            RTS
.1e083f						GODETECTHIRES
.1e083f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0841		af 02 00 af	lda $af0002	            LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.1e0845		29 10		and #$10	            AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.1e0847		c9 10		cmp #$10	            CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.1e0849		f0 14		beq $1e085f	            BEQ WeAreDone
.1e084b		c2 10		rep #$10	                REP #$10        ; set X long
.1e084d		a2 00 00	ldx #$0000	            LDX #$0000
.1e0850						ChangeNextChar
.1e0850		bf 4f 0d 1e	lda $1e0d4f,x	            LDA @l ON_TEXT, X
.1e0854		c9 00		cmp #$00	            CMP #$00
.1e0856		f0 07		beq $1e085f	            BEQ WeAreDone
.1e0858		9f 43 0c 1e	sta $1e0c43,x	            STA @l LINE17 +13, X
.1e085c		e8		inx		            INX
.1e085d		d0 f1		bne $1e0850	            BNE ChangeNextChar
.1e085f						WeAreDone
.1e085f						NoExpansionCardPresent
.1e085f		60		rts		            RTS
.1e0860						GODETECTHDD
.1e0860		60		rts		            RTS
.1e0861						GODETECTEXP
.1e0861		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0863		af 87 e8 af	lda $afe887	            LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.1e0867		29 10		and #$10	            AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.1e0869		c9 10		cmp #$10	            CMP #GABE_SYS_STAT_EXP
.1e086b		d0 25		bne $1e0892	            BNE NoExpansionCardPresent
.1e086d		c2 10		rep #$10	                REP #$10        ; set X long
.1e086f		a2 00 00	ldx #$0000	            LDX #$0000
.1e0872						ChangeNextChar
.1e0872		bf 53 0d 1e	lda $1e0d53,x	            LDA @l YES_TEXT, X
.1e0876		c9 00		cmp #$00	            CMP #$00
.1e0878		f0 07		beq $1e0881	            BEQ WeAreDone
.1e087a		9f 75 0c 1e	sta $1e0c75,x	            STA @l LINE19 +26, X
.1e087e		e8		inx		            INX
.1e087f		d0 f1		bne $1e0872	            BNE ChangeNextChar
.1e0881						WeAreDone
.1e0881		a2 00 00	ldx #$0000	            LDX #$0000
.1e0884						AddCardName
.1e0884		bf 00 00 ae	lda $ae0000,x	            LDA @l EVID_ID_NAME_ASCII, X
.1e0888		9f 79 0c 1e	sta $1e0c79,x	            STA @l LINE20, X
.1e088c		e8		inx		            INX
.1e088d		e0 10 00	cpx #$0010	            CPX #$10
.1e0890		d0 f2		bne $1e0884	            BNE AddCardName
.1e0892						NoExpansionCardPresent
.1e0892		60		rts		            RTS
.1e0893						Line_Setup_Before_Display
.1e0893		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e0895		a5 a6		lda $a6		            LDA LINE_INDEX
.1e0897		c9 17 00	cmp #$0017	            CMP #NumberOfEntry
.1e089a		f0 33		beq $1e08cf	            BEQ DONE
.1e089c		a5 a6		lda $a6		            LDA LINE_INDEX
.1e089e		0a		asl a		            ASL A
.1e089f		0a		asl a		            ASL A
.1e08a0		aa		tax		            TAX
.1e08a1		bf 14 09 1e	lda $1e0914,x	            LDA TEXT_TABLE, X
.1e08a5		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e08a7		bf 16 09 1e	lda $1e0916,x	            LDA TEXT_TABLE + 2, X
.1e08ab		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e08ad		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08af		0a		asl a		            ASL A
.1e08b0		aa		tax		            TAX
.1e08b1		bf 70 09 1e	lda $1e0970,x	            LDA TEXT_POSX, X
.1e08b5		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e08b7		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e08bb		bf 9e 09 1e	lda $1e099e,x	            LDA TEXT_POSY, X
.1e08bf		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e08c1		8f 16 00 af	sta $af0016	            STA @l VKY_TXT_CURSOR_Y_REG_L
.1e08c5		20 ec 08	jsr $1e08ec	            JSR Line_Display_Compute_Pointer
.1e08c8		a9 00 00	lda #$0000	            LDA #$0000
.1e08cb		85 a0		sta $a0		            STA TEXT_INDEX
.1e08cd		e6 a6		inc $a6		            INC LINE_INDEX
.1e08cf						DONE:
.1e08cf		60		rts		            RTS
.1e08d0						Line_Display_1_Character
.1e08d0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08d2		e6 a2		inc $a2		            INC TEXT_CURSOR_X       ; Always put the Cursor In Front of the "To be displayed Char"
.1e08d4		a5 a2		lda $a2		            LDA TEXT_CURSOR_X
.1e08d6		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e08da		e2 20		sep #$20	                SEP #$20        ; set A short
.1e08dc		38		sec		            SEC
.1e08dd		a4 a0		ldy $a0		            LDY TEXT_INDEX
.1e08df		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e08e1		c9 00		cmp #$00	            CMP #$00
.1e08e3		f0 06		beq $1e08eb	            BEQ WE_ARE_DONE;
.1e08e5		18		clc		            CLC
.1e08e6		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e08e8		c8		iny		            INY
.1e08e9		84 a0		sty $a0		            STY TEXT_INDEX
.1e08eb						WE_ARE_DONE:
.1e08eb		60		rts		            RTS
.1e08ec						Line_Display_Compute_Pointer
.1e08ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08ee		a5 a4		lda $a4		            LDA TEXT_CURSOR_Y
.1e08f0		8f 00 01 00	sta $000100	            STA @lUNSIGNED_MULT_A_LO
.1e08f4		a9 50 00	lda #$0050	            LDA #80
.1e08f7		8f 02 01 00	sta $000102	            STA @lUNSIGNED_MULT_B_LO
.1e08fb		18		clc		            CLC
.1e08fc		af 04 01 00	lda $000104	            LDA @lUNSIGNED_MULT_AL_LO
.1e0900		65 a2		adc $a2		            ADC TEXT_CURSOR_X
.1e0902		69 00 a0	adc #$a000	            ADC #$A000
.1e0905		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0907		69 00 20	adc #$2000	            ADC #$2000
.1e090a		85 a8		sta $a8		            STA COLOR_DST_PTR_L
.1e090c		a9 af 00	lda #$00af	            LDA #$00AF
.1e090f		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0911		85 aa		sta $aa		            STA COLOR_DST_PTR_H
.1e0913		60		rts		            RTS
>1e0914		cc 09 1e 00 ed 09 1e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>1e091c		03 0a 1e 00 11 0a 1e 00 29 0a 1e 00 4c 0a 1e 00
>1e092c		70 0a 1e 00 85 0a 1e 00
>1e0934		92 0a 1e 00 d4 0a 1e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>1e093c		16 0b 1e 00 58 0b 1e 00 62 0b 1e 00 8b 0b 1e 00
>1e094c		c2 0b 1e 00 e5 0b 1e 00
>1e0954		f7 0b 1e 00 36 0c 1e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>1e095c		48 0c 1e 00 5b 0c 1e 00 79 0c 1e 00 8a 0c 1e 00
>1e096c		9d 0c 1e 00
>1e0970		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>1e0978		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>1e0988		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>1e0998		2d 00 1e 00 48 00
>1e099e		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>1e09a6		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>1e09b6		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>1e09c6		35 00 39 00 39 00
=6						leftAlign = 6
>1e09cc		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>1e09d4		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>1e09e4		20 20 20 20 20 20 20 20 00
>1e09ed		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>1e09f5		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>1e0a03		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>1e0a0b		4e 46 4f 3a 20 00
>1e0a11		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>1e0a19		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>1e0a29		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>1e0a31		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>1e0a41		20 20 20 20 20 20 20 20 20 20 00
>1e0a4c		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>1e0a54		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>1e0a64		20 20 20 20 20 20 20 20 20 20 20 00
>1e0a70		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>1e0a78		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>1e0a85		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>1e0a8d		53 29 3a 20 00
>1e0a92		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>1e0a9a		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>1e0aaa		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>1e0aba		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>1e0aca		30 30 2f 30 30 2f 30 30 20 00
>1e0ad4		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533 - GABE - REV:0000 SUBREV:0000 DATE:00/00/00          ", $00
>1e0adc		35 33 33 20 2d 20 47 41 42 45 20 2d 20 52 45 56
>1e0aec		3a 30 30 30 30 20 53 55 42 52 45 56 3a 30 30 30
>1e0afc		30 20 44 41 54 45 3a 30 30 2f 30 30 2f 30 30 20
>1e0b0c		20 20 20 20 20 20 20 20 20 00
>1e0b16		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551 - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00      ", $00
>1e0b1e		35 35 31 20 2d 20 56 49 43 4b 59 20 49 49 20 2d
>1e0b2e		20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45 56
>1e0b3e		3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30 30
>1e0b4e		2f 30 30 20 20 20 20 20 20 00
>1e0b58		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>1e0b60		20 00
>1e0b62		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>1e0b6a		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>1e0b7a		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>1e0b8a		00
>1e0b8b		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>1e0b93		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>1e0ba3		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>1e0bb3		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>1e0bc2		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>1e0bca		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>1e0bda		4c 20 54 52 45 4d 42 4c 41 59 00
>1e0be5		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>1e0bed		20 4d 45 4e 55 2d 2d 2d 2d 00
>1e0bf7		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>1e0bff		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>1e0c0f		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>1e0c1f		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>1e0c2f		46 41 55 4c 54 20 00
>1e0c36		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>1e0c3e		4f 44 45 3a 20 4f 46 46 20 00
>1e0c48		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>1e0c50		41 4c 4c 45 44 3a 20 2d 2d 20 00
>1e0c5b		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>1e0c63		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>1e0c73		3a 20 4e 4f 20 00
>1e0c79		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1e0c81		00 00 00 00 00 00 00 00 00
>1e0c8a		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>1e0c92		46 4f 45 4e 49 58 2e 43 4f 4d 00
>1e0c9d		20 00				LINE22 .text " ", $00
>1e0c9f		af 0c 1e 00 bf 0c 1e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>1e0ca7		cf 0c 1e 00 df 0c 1e 00
>1e0caf		ff 0c 1e 00 3f 0d 1e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>1e0cb7		3f 0d 1e 00 00 00 00 00
>1e0cbf		0f 0d 1e 00 3f 0d 1e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>1e0cc7		2f 0d 1e 00 00 00 00 00
>1e0ccf		1f 0d 1e 00 2f 0d 1e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>1e0cd7		2f 0d 1e 00 00 00 00 00
>1e0cdf		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>1e0ce7		00 00 00 00 00 00 00 00
>1e0cef		dc 09 1e 00 3b 0a 1e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>1e0cf7		5f 0a 1e 00 7e 0a 1e 00
>1e0cff		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>1e0d07		4e 49 58 20 46 4d 58 00
>1e0d0f		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>1e0d17		4e 49 58 20 55 2b 20 00
>1e0d1f		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>1e0d27		4e 49 58 20 55 20 20 00
>1e0d2f		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>1e0d37		32 20 42 59 54 45 53 00
>1e0d3f		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>1e0d47		34 20 42 59 54 45 53 00
>1e0d4f		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>1e0d53		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src\kernel.asm

>1e0d57						.align 256
.1e0e00						SS_MONIKER_LUT
>1e0e00		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>1e0e08		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>1e0e18		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>1e0e28		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>1e0e38		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>1e0e48		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>1e0e58		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>1e0e68		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>1e0e78		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>1e0e88		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>1e0e98		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>1e0ea8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>1e0eb8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>1e0ec8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>1e0ed8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>1e0ee8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>1e0ef8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>1e0f08		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>1e0f18		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>1e0f28		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>1e0f38		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>1e0f48		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>1e0f58		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>1e0f68		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>1e0f78		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>1e0f88		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>1e0f98		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>1e0fa8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>1e0fb8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>1e0fc8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>1e0fd8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>1e0fe8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>1e0ff8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>1e1008		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>1e1018		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>1e1028		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>1e1038		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>1e1048		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>1e1058		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>1e1068		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>1e1078		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>1e1088		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>1e1098		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>1e10a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>1e10b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>1e10c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>1e10d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>1e10e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>1e10f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>1e1108		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>1e1118		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>1e1128		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>1e1138		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>1e1148		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>1e1158		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>1e1168		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>1e1178		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>1e1188		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>1e1198		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>1e11a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>1e11b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>1e11c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>1e11d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>1e11e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>1e11f8		ff ff ff 00 e5 80 80 00
.1e1200						SS_MONIKER
>1e1200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>1e1208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>1e1808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e1818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e1828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e1958		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e1968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1a98		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>1e1aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1bd8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1d08		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1d18		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>1e1d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1e48		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1e58		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1f88		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e1f98		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e20c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e20d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e20e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2128		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>1e2138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2208		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>1e2218		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e2228		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2268		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e2278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2348		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e2358		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e23a8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e23b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2488		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2498		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e24a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e24e8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e24f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e25c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e25d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e25e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2628		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>1e2638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2668		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>1e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e2708		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2718		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2738		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2768		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>1e2778		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e2788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2798		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>1e27a8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e27b8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e27c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e27d8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>1e27e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e2848		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2868		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e28a8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>1e28b8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>1e28c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e28d8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>1e28e8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>1e28f8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2918		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>1e2928		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e2938		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e2948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2958		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>1e2968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2978		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>1e2988		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>1e29b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>1e29e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>1e29f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1e2a08		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>1e2a18		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>1e2a28		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>1e2a38		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e2a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2a58		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>1e2a68		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>1e2a78		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>1e2a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2a98		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>1e2aa8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>1e2ac8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>1e2ad8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>1e2ae8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>1e2af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b18		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2b28		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>1e2b38		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e2b48		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2b58		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e2b68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2b78		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2b98		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ba8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>1e2bb8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>1e2bc8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>1e2bd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2be8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>1e2bf8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2c08		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c18		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>1e2c28		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>1e2c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c58		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2c68		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c78		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2c88		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2c98		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>1e2ca8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e2cb8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2cc8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>1e2cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ce8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>1e2cf8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e2d08		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>1e2d18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2d28		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>1e2d38		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2d48		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2d58		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>1e2d68		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>1e2d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2d98		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2da8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2db8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2dc8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e2dd8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e2de8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e2df8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2e08		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e28		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>1e2e38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e48		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e68		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2e78		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>1e2e88		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2e98		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2ea8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>1e2eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1e2ed8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ee8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2ef8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e2f08		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f18		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>1e2f28		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f38		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2f48		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>1e2f88		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f98		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2fa8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2fb8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>1e2fc8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2fd8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2fe8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>1e2ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3008		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>1e3018		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3028		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e3038		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e3048		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3058		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>1e3068		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>1e3078		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3088		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e3098		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e30a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>1e30b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>1e30c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e30d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>1e30e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>1e30f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e3108		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>1e3118		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>1e3128		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>1e3138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3148		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e3158		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e3168		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3178		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3198		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e31a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e31b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e31c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e31d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>1e31e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>1e31f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>1e3208		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e3218		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>1e3228		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3238		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3248		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3258		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>1e3268		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3288		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3298		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e32a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e32b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>1e32d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e32e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3308		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>1e3318		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>1e3328		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3338		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>1e3348		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3358		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e3368		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3378		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3388		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>1e3398		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>1e33a8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e33b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e33c8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e33d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e33e8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>1e33f8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3408		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>1e3418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3428		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3448		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>1e3458		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>1e3468		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>1e3478		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>1e3488		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3498		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e34a8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e34b8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e34c8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e34d8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>1e34e8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e34f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3508		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3518		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>1e3528		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>1e3538		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3548		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e3558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e3568		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3588		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e3598		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e35a8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e35b8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e35c8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e35d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e35e8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e35f8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>1e3608		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e3618		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>1e3628		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3648		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3658		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>1e3668		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>1e3678		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3688		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>1e3698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e36a8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e36b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e36c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e36d8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e36e8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e36f8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3708		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3728		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3738		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e3748		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3758		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3768		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e3778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3788		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3798		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>1e37a8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>1e37b8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e37c8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e37d8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e37e8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>1e37f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3808		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e3818		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e3828		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3838		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3848		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3858		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e3868		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3878		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3888		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3898		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e38a8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e38b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e38c8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e38d8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>1e38e8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>1e38f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3908		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3918		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3928		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>1e3938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3948		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3958		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>1e3968		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>1e3978		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3988		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3998		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e39a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e39b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>1e39c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e39d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e39e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>1e39f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a08		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3a18		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e3a28		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3a38		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>1e3a48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a58		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>1e3a68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a78		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a88		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3a98		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>1e3aa8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3ab8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3ac8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3ad8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>1e3ae8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3af8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3b08		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e3b18		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3b28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e3b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e3b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b68		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3b78		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>1e3b88		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3b98		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>1e3ba8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3bb8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3bc8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>1e3bd8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>1e3be8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3bf8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3c08		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3c18		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3c28		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e3c38		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>1e3c48		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3c58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3c68		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e3c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3c88		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>1e3c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ca8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e3cb8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3cc8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cd8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3ce8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cf8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3d08		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>1e3d18		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>1e3d28		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d38		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3d48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3d58		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>1e3d68		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3d78		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>1e3d88		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d98		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3da8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3dc8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>1e3dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3de8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3df8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3e08		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>1e3e18		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3e28		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e38		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e3e48		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e58		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>1e3e68		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3e78		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3e88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e98		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e3ea8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3eb8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3ec8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3ed8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3ee8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f08		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f28		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3f38		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e3f48		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>1e3f58		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>1e3f68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f78		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e3f88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f98		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>1e3fa8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3fd8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>1e3fe8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>1e3ff8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e4008		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e4018		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e4028		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4048		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4068		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e4078		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4088		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e4098		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e40a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>1e40b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>1e40c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e40d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e40e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e40f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>1e4108		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>1e4118		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4128		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>1e4138		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4148		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4158		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4188		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>1e41b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>1e41e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4208		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4218		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4228		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4238		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>1e4248		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1e4258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4268		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>1e4278		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>1e4288		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4298		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e42a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e42d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1e42f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4308		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e4318		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4328		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e4338		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4348		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e4358		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4368		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4378		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>1e4388		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e43a8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e43b8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e43c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e43d8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e43e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e43f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4408		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4428		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4448		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e4458		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e4478		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4488		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1e4498		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e44a8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e44b8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e44c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e44d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e44e8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e44f8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e4508		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1e4518		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4528		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4548		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4558		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4568		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1e4578		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>1e4588		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>1e4598		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e45a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e45b8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e45c8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e45d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e45e8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e45f8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e4608		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4618		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4628		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4638		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>1e4648		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4658		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4668		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4688		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4698		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>1e46a8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e46b8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>1e46c8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e46d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e46e8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e46f8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4708		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e4718		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4728		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>1e4738		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>1e4748		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1e4758		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>1e4768		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4778		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4788		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>1e4798		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e47a8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e47b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e47c8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e47d8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>1e47e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e47f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1e4808		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4818		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4828		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4848		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4868		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>1e4878		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>1e4888		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>1e4898		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>1e48a8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e48b8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>1e48c8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e48d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1e48e8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e48f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4908		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4918		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4928		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4938		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4948		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4958		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4968		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>1e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4988		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e49a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>1e49b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>1e49c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>1e49d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>1e49e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e49f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4a08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>1e4a18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>1e4a28		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4a48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4a58		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>1e4a88		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a98		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4aa8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ac8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4ae8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4af8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1e4b08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b28		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4b38		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4b48		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4b58		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>1e4b68		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4b88		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4b98		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ba8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>1e4bd8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4be8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4c08		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4c28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c38		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>1e4c48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c68		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4c88		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e4c98		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4ca8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4cc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>1e4cd8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ce8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4cf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4d18		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d48		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d68		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d78		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>1e4d88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d98		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>1e4da8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4db8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4dc8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4dd8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4de8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>1e4df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4e08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>1e4e18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>1e4e28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e38		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>1e4e58		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>1e4e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4e88		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ea8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4eb8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ec8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ed8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4ee8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ef8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e4f08		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4f18		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4f28		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4f38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f58		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>1e4f68		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f78		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>1e4f98		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>1e4fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fc8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e4fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fe8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4ff8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5018		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>1e5028		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5038		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>1e5048		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e5058		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5068		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e5078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5088		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5098		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>1e50a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>1e50b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e50c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>1e50d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e50e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>1e50f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5108		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5128		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5138		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5148		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>1e5158		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>1e5168		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>1e5178		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>1e5188		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>1e5198		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e51a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e51d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>1e51e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>1e51f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5208		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5218		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>1e5228		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e5238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5248		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5268		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>1e5278		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5288		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>1e5298		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>1e52a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e52b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>1e52c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>1e52d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e52e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e52f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5308		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5318		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>1e5328		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>1e5338		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>1e5348		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5358		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>1e5368		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5388		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>1e5398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53a8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e53b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e53c8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e53d8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>1e53e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53f8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>1e5408		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>1e5418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e5428		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5448		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5458		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5468		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e5478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>1e54a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54c8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>1e54d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e5508		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5518		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>1e5528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5538		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e5548		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>1e5558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e5568		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5588		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>1e5598		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55a8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e5608		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>1e5618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5658		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>1e5668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5678		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e5688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56a8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56c8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>1e56d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>1e5748		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5798		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e57a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e57c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57e8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e5888		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>1e5898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e58d8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>1e58e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5928		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e59c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e59d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5a18		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>1e5a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>1e5b08		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>1e5c48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>1e61f8		00 00 00 00 00 00 00 00
.1e6200						SS_FMX_TXT
>1e6200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>1e6208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>1e64b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e64c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6558		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e65f8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6698		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e66a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e66f8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e6708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6738		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e6748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e6798		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e67a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e67d8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e67e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6838		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6878		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e6888		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e68c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e68d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e68e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6918		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>1e6928		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6968		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>1e6978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e69b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e69c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6a08		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>1e6a18		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a48		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a58		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6a68		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6aa8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>1e6ab8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ae8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6af8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6b08		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b28		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b48		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>1e6b58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b88		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b98		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>1e6ba8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6bc8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6be8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>1e6bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e6c28		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>1e6c38		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>1e6c48		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>1e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>1e6c68		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>1e6c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c88		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>1e6c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6cb8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>1e6cc8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>1e6cd8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>1e6ce8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e6d08		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>1e6d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d28		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>1e6d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d58		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>1e6d68		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6d78		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6d88		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6d98		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>1e6da8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>1e6db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6dc8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>1e6dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6de8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e6df8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e08		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e18		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6e28		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6e38		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>1e6e48		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>1e6e58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e68		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e88		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>1e6e98		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ea8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6eb8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>1e6ec8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6ed8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e6ee8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6ef8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6f08		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6f28		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>1e6f38		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f48		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f58		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>1e6f68		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6f78		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e6f88		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6f98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e6fa8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>1e6fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6fc8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>1e6fd8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6fe8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ff8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>1e7008		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e7018		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7028		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e7038		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e7048		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>1e7058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7068		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>1e7078		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7088		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7098		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>1e70a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e70b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>1e70c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e70d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>1e70e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>1e70f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7108		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>1e7118		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7128		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>1e7138		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>1e7148		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7158		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>1e7168		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e7178		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>1e7188		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>1e7198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e71a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>1e71b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e71c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>1e71d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e71e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e71f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>1e7208		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7218		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e7228		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7248		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7258		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e7268		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>1e7278		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7288		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7298		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e72a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>1e72b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e72c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e72d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7308		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e7318		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7328		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7338		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7348		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7358		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7368		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e7378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7388		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7398		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e73a8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e73b8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73c8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e73d8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e73e8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73f8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e7408		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>1e7418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7438		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7448		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7458		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7468		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>1e7478		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7488		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7498		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e74a8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e74b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e74e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74f8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7508		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>1e7518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7528		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7548		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e7558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7578		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>1e7588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7598		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e75a8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>1e75b8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75c8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e75d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75e8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e75f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7618		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e7628		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7638		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7648		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>1e7658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7668		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7678		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7688		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76b8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e76c8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>1e76d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e76e8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e76f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7708		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e7718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7758		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7768		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7778		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e7788		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7798		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e77a8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e77b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e77c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e77f8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7808		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7818		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7828		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7838		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7848		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7858		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7888		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>1e7898		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e78b8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e78c8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e78e8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e78f8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7928		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>1e7938		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7948		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>1e7958		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7968		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7978		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7988		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7998		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e79a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e79d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e79e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e79f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7a08		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a18		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7a28		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e7a38		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e7a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7a68		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a78		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a88		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>1e7a98		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7aa8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7ab8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7ac8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>1e7ad8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7af8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7b08		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b18		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b28		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7b38		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7b48		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7b58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7b68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e7b78		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ba8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>1e7bb8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>1e7bc8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7bd8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7be8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7bf8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7c08		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e7c18		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c48		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e7c58		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7c78		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c88		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>1e7c98		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7ca8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e7cb8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e7cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ce8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>1e7cf8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7d18		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d28		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>1e7d38		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e7d58		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d88		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>1e7d98		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7db8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7dc8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>1e7dd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7de8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7df8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e28		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>1e7e38		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7e58		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e68		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>1e7e78		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e88		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7e98		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ec8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7ed8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7ef8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7f08		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>1e7f18		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7f28		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7f38		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f68		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7f78		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7f88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7f98		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7fb8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7fd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8008		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8018		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e8038		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e8048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8058		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>1e8068		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e8078		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e8088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e80a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e80b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>1e8108		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>1e8118		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e8128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8148		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8158		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8168		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8178		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8188		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8198		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e81a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>1e81b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e81c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e81f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8208		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8218		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8228		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8238		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e8248		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8258		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8288		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8298		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e82e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e82f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e8308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8328		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8338		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8348		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8358		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8368		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8378		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>1e8388		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e8398		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e83a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83c8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e83d8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e83e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e83f8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>1e8408		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8418		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e8428		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e8438		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e8448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8478		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8488		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8498		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e84a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e84b8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e84c8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e84d8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e84e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e84f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8508		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e8518		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8528		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8538		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8548		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8558		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e8568		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8578		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e8588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85a8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e85b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85c8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e85d8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85e8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e85f8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>1e8608		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8618		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>1e8628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8648		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8658		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8668		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>1e8678		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8688		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e8698		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>1e86a8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e86b8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e86c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86e8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e86f8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8708		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>1e8718		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8728		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8738		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>1e8748		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8758		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8788		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8798		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87a8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87c8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e87d8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>1e87e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87f8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>1e8808		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8828		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8848		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e8858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8868		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8878		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>1e8888		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8898		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>1e88a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88c8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>1e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e88f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8908		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8918		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>1e8928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8938		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>1e8948		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8968		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>1e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e89a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e89b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>1e89e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a08		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>1e8a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8a48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a78		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>1e8a88		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8aa8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>1e8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8ae8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>1e8af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b18		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>1e8b28		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b48		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>1e8b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8b88		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e8b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bb8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>1e8bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8be8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>1e8bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8c28		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>1e8c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c58		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>1e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c88		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>1e8c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8cc8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8cf8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>1e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d28		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>1e8d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8d68		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d98		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1e8da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8dc8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8e08		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e8e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e38		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>1e8e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8ea8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>1e8eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ed8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e8ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8f48		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>1e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f78		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>1e8f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8fe8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>1e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e9028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e9088		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>1e9098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e90c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9128		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e9138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e91c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e91d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e9268		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>1e93f8		00 00 00 00 00 00 00 00
.1e9400						SS_UPlus_TXT
>1e9400		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>1e9408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>1e94f8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9558		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e95b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e95c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9618		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9668		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>1e9678		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e96c8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>1e96d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9728		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>1e9738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9788		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>1e9798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e97e8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>1e97f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9848		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>1e9858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e98a8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>1e98b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e98e8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>1e98f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9908		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e9948		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>1e9958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9968		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e99a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>1e99b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e99d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>1e99e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a08		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>1e9a18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a28		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e9a38		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a68		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9a78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9a88		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9a98		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>1e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ac8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9ad8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9ae8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9af8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>1e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9b48		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9b58		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e9b68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b88		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9ba8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9bb8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e9bc8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9be8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e9bf8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c08		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c18		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c28		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c48		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1e9c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c68		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c78		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ca8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9cb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9cc8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9cd8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e9ce8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d08		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9d18		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9d28		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9d38		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e9d48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d68		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9d78		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9d88		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e9d98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9da8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9dc8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9dd8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9de8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e9df8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e28		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e38		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e9e48		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e9e58		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>1e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e88		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e98		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e9ea8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9eb8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>1e9ec8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>1e9ed8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ee8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9ef8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f08		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9f18		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e9f28		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>1e9f38		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9f48		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9f58		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e9f78		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e9f88		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>1e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fa8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e9fc8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fd8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e9fe8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea008		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1ea018		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1ea028		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>1ea038		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea048		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>1ea058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea068		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea078		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1ea088		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>1ea098		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea0a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>1ea0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea0c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea0d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1ea0e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>1ea0f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea108		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1ea118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea128		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea138		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1ea148		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea158		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea168		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea188		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea198		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1ea1a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>1ea1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea1e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea1f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea208		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea218		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea228		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>1ea238		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea248		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea258		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea268		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea278		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>1ea288		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea298		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea2a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea2b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea2c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea2d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>1ea2e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea308		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea318		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1ea328		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>1ea338		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1ea348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea368		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea378		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea388		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>1ea398		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea3a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea3b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1ea3c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1ea3d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea3e8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea3f8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea418		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea428		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>1ea438		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea458		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea478		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea488		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1ea498		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea4a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea4b8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea4c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea4d8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea4e8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>1ea4f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1ea508		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea518		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea538		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea548		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>1ea558		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1ea568		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea578		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea598		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea5a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1ea5b8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1ea5c8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1ea5d8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea608		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea618		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1ea628		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea638		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea658		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea668		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea678		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1ea688		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea698		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea6c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea6d8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>1ea6e8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>1ea6f8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea718		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea728		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea738		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>1ea748		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea758		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea778		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea788		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea798		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1ea7a8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea7b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea7e8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea7f8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1ea808		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea858		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea868		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1ea878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1ea8a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea8b8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8c8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>1ea8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea918		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea928		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea968		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>1ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea988		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea9c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>1ea9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea9e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaa28		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>1eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>1eabf8		00 00 00 00 00 00 00 00
.1eac00						SS_U_TXT
>1eac00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>1eac08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>1eacb8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eacc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eacf8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ead38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1ead78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eada8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>1eadb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eade8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>1eadf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae28		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>1eae38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae68		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>1eae78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaea8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>1eaeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaee8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>1eaef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaf28		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>1eaf38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf48		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>1eaf58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf68		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eaf78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf88		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>1eaf98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafa8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eafb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafc8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>1eafd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafe8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eaff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb008		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>1eb018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb028		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eb038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb048		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb068		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb088		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb0a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb0c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb0e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb108		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb128		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb148		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1eb158		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb168		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>1eb198		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb1a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb1c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb1d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb1e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb208		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb218		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb228		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb248		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb258		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb268		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1eb278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb288		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb298		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb2a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1eb2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb2c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb2d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1eb2e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1eb2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb308		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb318		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1eb328		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb348		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb358		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb368		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb388		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb398		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb3a8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb3c8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb3d8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb3e8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb408		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1eb418		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb428		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb448		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb458		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1eb468		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb488		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb498		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1eb4a8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb4c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb4d8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1eb4e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb508		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb518		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1eb528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb538		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb548		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb558		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb578		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb588		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb598		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb5c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb5d8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb608		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1eb618		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1eb628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb638		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb648		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1eb658		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb678		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1eb688		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>1eb698		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb6c8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1eb6d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb6e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb708		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>1eb718		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb738		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb748		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>1eb758		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1eb768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb778		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb788		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>1eb798		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1eb7a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb7c8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>1eb7d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1eb7e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb808		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb818		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1eb828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb838		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb848		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb858		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1eb868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb878		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb888		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb898		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>1eb8a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8b8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb8c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb8d8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1eb8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8f8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb918		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb938		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb948		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb958		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb978		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb988		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb998		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1eb9c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb9d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1eba08		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1eba18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eba48		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>1eba58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eba88		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>1eba98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ebac8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1ebad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1ebbf8		00 00 00 00 00 00 00 00
.1f0000						FONT_4_BANK0
>1f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>1f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>1f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>1f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>1f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>1f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>1f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>1f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>1f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>1f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>1f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>1f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>1f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>1f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>1f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>1f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>1f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>1f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>1f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>1f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>1f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>1f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>1f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>1f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>1f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>1f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>1f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>1f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>1f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>1f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>1f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>1f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>1f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>1f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>1f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>1f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>1f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>1f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>1f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>1f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>1f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>1f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>1f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>1f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>1f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>1f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>1f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>1f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>1f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>1f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>1f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>1f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>1f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>1f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>1f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>1f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>1f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>1f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>1f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>1f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>1f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>1f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>1f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>1f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>1f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>1f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>1f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>1f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>1f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>1f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>1f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>1f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>1f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>1f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>1f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>1f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>1f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>1f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>1f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>1f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>1f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>1f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>1f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>1f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>1f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>1f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>1f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>1f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>1f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>1f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>1f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>1f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>1f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>1f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>1f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>1f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>1f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>1f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>1f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>1f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>1f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>1f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>1f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>1f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>1f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>1f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>1f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>1f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>1f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>1f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>1f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>1f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>1f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>1f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>1f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>1f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>1f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>1f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>1f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>1f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>1f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>1f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>1f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>1f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>1f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>1f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>1f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>1f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>1f07f8		00 00 00 00 00 00 00 00
.1f0800						FONT_4_SPLASH
>1f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>1f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>1f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>1f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>1f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>1f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>1f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>1f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>1f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>1f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>1f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>1f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>1f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>1f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>1f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>1f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>1f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>1f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>1f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>1f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>1f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>1f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>1f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>1f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>1f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>1f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>1f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>1f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>1f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>1f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>1f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>1f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>1f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>1f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>1f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>1f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>1f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>1f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>1f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>1f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>1f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>1f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>1f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>1f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>1f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>1f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>1f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>1f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>1f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>1f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>1f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>1f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>1f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>1f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>1f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>1f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>1f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>1f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>1f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>1f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>1f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>1f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>1f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>1f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>1f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>1f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>1f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>1f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>1f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>1f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>1f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>1f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>1f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>1f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>1f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>1f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>1f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>1f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>1f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>1f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>1f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>1f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>1f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>1f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>1f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>1f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>1f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>1f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>1f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>1f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>1f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>1f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>1f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>1f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>1f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>1f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>1f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>1f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>1f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>1f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>1f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>1f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>1f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>1f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>1f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>1f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>1f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>1f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>1f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>1f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>1f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>1f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>1f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>1f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>1f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>1f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>1f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>1f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>1f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>1f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>1f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>1f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>1f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>1f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>1f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>1f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>1f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>1f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>1f0ff8		0f 0f 0f 0f f0 f0 f0 00
>1fffff		ff				                .byte $FF               ; Last byte of flash data

;******  End of listing
