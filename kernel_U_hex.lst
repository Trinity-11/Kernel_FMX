
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 -D TARGET_SYS=2 --long-address --flat --intel-hex -o kernel_U.hex --list kernel_U_hex.lst --labels=kernel_U_hex.lbl src\kernel.asm
; Mon May 17 14:29:47 2021

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=2						TARGET=2
=2						TARGET_SYS=2

;******  Processing input file: src\kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$180000					  START_OF_FLASH := $180000                   ; The Foenix U Flash starts at $180000
=$190400					  START_OF_KERNEL := $190400                  ; The kernel itself starts at $190400
=$1a0000					  START_OF_BASIC := $1A0000                   ; The BASIC flash code starts at $1A0000
=$1b0000					  START_OF_CREDITS := $1B0000                 ; The credits screen starts at $1B0000
=$1e0000					  START_OF_SPLASH := $1E0000                  ; SplashScreen Code and Data $3E0000
=$1f0000					  START_OF_FONT := $1F0000                    ; The font starts at $3F0000

;******  Processing file: src\Includes/macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1b						CHAR_ESC = $1B      ; ESC
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81						CHAR_F1 = $81       ; Function keys
=$82						CHAR_F2 = $82
=$83						CHAR_F3 = $83
=$84						CHAR_F4 = $84
=$85						CHAR_F5 = $85
=$86						CHAR_F6 = $86
=$87						CHAR_F7 = $87
=$88						CHAR_F8 = $88
=$89						CHAR_F9 = $89
=$8a						CHAR_F10 = $8A
=$8b						CHAR_F11 = $8B
=$8c						CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					COLORBEGIN       = $000022 ;3 Byte, address of the color screen
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000063					EVID_COLS_VISIBLE     = $000063 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000065					EVID_COLS_PER_LINE    = $000065 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000067					EVID_LINES_VISIBLE    = $000067 ;2 Bytes The number of rows visible on the screen. Default=25
=$000069					EVID_LINES_MAX        = $000069 ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006b					EVID_CURSORPOS        = $00006B ;3 Bytes The next character written to the screen will be written in this location.
=$00006e					EVID_CURSORX          = $00006E ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000070					EVID_CURSORY          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURCOLOR         = $000072 ;1 Byte Color of next character to be printed to the screen.
=$000073					EVID_COLORBEGIN       = $000073 ;
=$000076					EVID_COLORPOS         = $000076 ;3 Byte address of cursor's position in the color matrix
=$000079					EVID_TMPPTR1          = $000079 ; 4 byte temporary pointer
=$00007d					EVID_PRESENT          = $00007D ;1 Byte: is the EVID present?
=$000098					TEXT_SRC_PTR_L   = $000098
=$00009a					TEXT_SRC_PTR_H   = $00009A
=$00009c					TEXT_DST_PTR_L   = $00009C
=$00009e					TEXT_DST_PTR_H   = $00009E
=$0000a0					TEXT_INDEX       = $0000A0
=$0000a0					MOD_SELECT_L     = $0000A0
=$0000a2					MOD_SELECT_H     = $0000A2
=$0000a2					TEXT_CURSOR_X    = $0000A2
=$0000a4					TEXT_CURSOR_Y    = $0000A4
=$0000a6					LINE_INDEX       = $0000A6
=$0000a8					COLOR_DST_PTR_L  = $0000A8
=$0000aa					COLOR_DST_PTR_H  = $0000AA
=$0000b0					MODEL            = $0000B0
=$0000e0					MOUSE_IDX        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000e6					MOUSE_BUTTONS    = $0000E6
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$0000f0					INTERRUPT_STATE  = $0000F0      ; 1 byte: current state of the boot menu color cycler
=$0000f1					INTERRUPT_COUNT  = $0000F1      ; 1 byte: counter for the boot menu color cycler
=$0000f2					IRQ_COLOR_CHOICE = $0000F2      ; 1 byte: index of the color to cycle in the boot menu
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000370					DOS_BLOCK_SIZE   = $000370      ; 4 bytes - the size of a block to load (in bytes)
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KBD_VARS = $000F00
=$000f00					KBD_STATE           = $000F00   ; 1 byte - The state of the keyboard controller state machine
=$000f01					KBD_SC_BUF          = $000F01   ; 16 bytes - Buffer for keyboard scancodes read
=$000f11					KBD_SC_HEAD         = $000F11   ; 1 byte - Index of the first scancode cell to write to
=$000f12					KBD_CHAR_BUF        = $000F12   ; 16 bytes - Character buffer
=$000f22					KBD_CHAR_HEAD       = $000F22   ; 1 byte - Number of characters in the character buffer
=$000f23					KBD_MODIFIERS       = $000F23   ; 1 byte - State of the modifier keys
=$000f24					KBD_LOCKS           = $000F24   ; 1 byte - State of the lock keys: Caps, Num, Scroll
=$000f25					KBD_TBL_UNMOD       = $000F25   ; 4 bytes - Pointer to the scan code translation table for unmodified keys
=$000f29					KBD_TBL_SHIFT       = $000F29   ; 4 bytes - Pointer to the scan code translation table for shifted keys
=$000f2d					KBD_TBL_CTRL        = $000F2D   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL
=$000f31					KBD_TBL_LOCK        = $000F31   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
=$000f35					KBD_TBL_LOCK_SHIFT  = $000F35   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
=$000f39					KBD_TBL_CTRL_SHIFT  = $000F39   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL and SHIFT
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00					    ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00					    HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10					    HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20					    HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30					    HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40					    HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60					    HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80					    Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0					    VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0					    JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4					    VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6					    VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8					    VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea					    VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec					    VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee					    VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0					    RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4					    VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6					    VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8					    VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa					    VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc					    VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe					    VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000					    VECTORS_END      = $010000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_data.asm

>180000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>180003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>180005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>180007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>180009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>18000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>18000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>180013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>180014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>180016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_code.asm

.ff00		18		clc		RHRESET         CLC
.ff01		fb		xce		                XCE
.ff02		5c 00 10 00	jmp $001000	                JML BOOT
.ff10						RHCOP
.ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12		8b		phb		                PHB
.ff13		0b		phd		                PHD
.ff14		48		pha		                PHA
.ff15		da		phx		                PHX
.ff16		5a		phy		                PHY
.ff17		5c 08 10 00	jmp $001008	                JML BREAK
.ff20						RHBRK
.ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22		8b		phb		                PHB
.ff23		0b		phd		                PHD
.ff24		48		pha		                PHA
.ff25		da		phx		                PHX
.ff26		5a		phy		                PHY
.ff27		5c 08 10 00	jmp $001008	                JML BREAK
.ff30						RHABORT
.ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32		8b		phb		                PHB
.ff33		0b		phd		                PHD
.ff34		48		pha		                PHA
.ff35		da		phx		                PHX
.ff36		5a		phy		                PHY
.ff37		5c 08 10 00	jmp $001008	                JML BREAK
.ff40						 RHNMI
.ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42		8b		phb		                PHB
.ff43		0b		phd		                PHD
.ff44		48		pha		                PHA
.ff45		da		phx		                PHX
.ff46		5a		phy		                PHY
.ff47		22 96 19 18	jsl $181996	                JSL NMI_HANDLER
.ff4b		7a		ply		                PLY
.ff4c		fa		plx		                PLX
.ff4d		68		pla		                PLA
.ff4e		2b		pld		                PLD
.ff4f		ab		plb		                PLB
.ff50		40		rti		                RTI
.ff60						RHIRQ
.ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62		8b		phb		                PHB
.ff63		0b		phd		                PHD
.ff64		48		pha		                PHA
.ff65		da		phx		                PHX
.ff66		5a		phy		                PHY
.ff67		22 c0 17 18	jsl $1817c0	                JSL IRQ_HANDLER
.ff6b		7a		ply		                PLY
.ff6c		fa		plx		                PLX
.ff6d		68		pla		                PLA
.ff6e		2b		pld		                PLD
.ff6f		ab		plb		                PLB
.ff70		40		rti		                RTI
.ffe0		5c 04 00 1a	jmp $1a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec		00 00				                .word $0000    ; FFEC
>ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0		5c 7f 06 19	jmp $19067f	RRETURN         JML IRETURN
>fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/fdc_inc.asm

=$af13f0					SIO_FDC  = $AF13F0
=$af13f0					SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1					SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2					SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3					SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4					SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4					SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5					SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7					SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7					SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/basic_inc.asm

=$1a0000					    BASIC = $1A0000
=1703940					    MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.181000	1000	5c 00 04 19	jmp $190400	BOOT            JML IBOOT
.181004	1004	5c 8a 05 19	jmp $19058a	RESTORE         JML IRESTORE
.181008	1008	5c 1e 06 19	jmp $19061e	BREAK           JML IBREAK
.18100c	100c	5c 65 06 19	jmp $190665	READY           JML IREADY
.181010	1010	5c 85 10 19	jmp $191085	SCINIT          JML ISCINIT
.181014	1014	5c 86 10 19	jmp $191086	IOINIT          JML IIOINIT
.181018	1018	5c 21 07 19	jmp $190721	PUTC            JML IPUTC
.18101c	101c	5c 0a 07 19	jmp $19070a	PUTS            JML IPUTS
.181020	1020	5c c5 07 19	jmp $1907c5	PUTB            JML IPUTB
.181024	1024	5c 6a 3b 19	jmp $193b6a	PUTBLOCK        JML IPUTBLOCK
.181028	1028	5c 07 77 19	jmp $197707	GETSCANCODE     JML KBD_GET_SCANCODE    ; Get the next 8-bit scan code from the keyboard: A = 0 if no scancode present, contains the scancode otherwise
.18102c	102c	5c bd 77 19	jmp $1977bd	GETLOCKS        JML KBD_GETLOCKS        ; Get the state of the lock keys on the keyboard
.181030	1030	5c 89 10 19	jmp $191089	OPEN            JML IOPEN
.181034	1034	5c 8a 10 19	jmp $19108a	CLOSE           JML ICLOSE
.181038	1038	5c 80 06 19	jmp $190680	SETIN           JML ISETIN
.18103c	103c	5c 89 06 19	jmp $190689	SETOUT          JML ISETOUT
.181040	1040	5c 8b 10 19	jmp $19108b	GETB            JML IGETB
.181044	1044	5c 07 3b 19	jmp $193b07	GETBLOCK        JML IGETBLOCK
.181048	1048	5c ce 06 19	jmp $1906ce	GETCH           JML IGETCH
.18104c	104c	5c 9b 06 19	jmp $19069b	GETCHW          JML IGETCHW
.181050	1050	5c 92 06 19	jmp $190692	GETCHE          JML IGETCHE
.181054	1054	5c 8c 10 19	jmp $19108c	GETS            JML IGETS
.181058	1058	5c 8d 10 19	jmp $19108d	GETLINE         JML IGETLINE
.18105c	105c	5c 8e 10 19	jmp $19108e	GETFIELD        JML IGETFIELD
.181060	1060	5c 8f 10 19	jmp $19108f	TRIM            JML ITRIM
.181064	1064	5c 90 10 19	jmp $191090	PRINTC          JML IPRINTC
.181068	1068	5c 91 10 19	jmp $191091	PRINTS          JML IPRINTS
.18106c	106c	5c c6 07 19	jmp $1907c6	PRINTCR         JML IPRINTCR
.181070	1070	5c 92 10 19	jmp $191092	PRINTF          JML IPRINTF
.181074	1074	5c 93 10 19	jmp $191093	PRINTI          JML IPRINTI
.181078	1078	5c 7a 08 19	jmp $19087a	PRINTH          JML IPRINTH
.18107c	107c	5c 94 10 19	jmp $191094	PRINTAI         JML IPRINTAI
.181080	1080	5c 97 08 19	jmp $190897	PRINTAH         JML IPRINTAH
.181084	1084	5c 5e 08 19	jmp $19085e	LOCATE          JML ILOCATE
.181088	1088	5c 95 10 19	jmp $191095	PUSHKEY         JML IPUSHKEY
.18108c	108c	5c 96 10 19	jmp $191096	PUSHKEYS        JML IPUSHKEYS
.181090	1090	5c 26 08 19	jmp $190826	CSRRIGHT        JML ICSRRIGHT
.181094	1094	5c 35 08 19	jmp $190835	CSRLEFT         JML ICSRLEFT
.181098	1098	5c 44 08 19	jmp $190844	CSRUP           JML ICSRUP
.18109c	109c	5c 53 08 19	jmp $190853	CSRDOWN         JML ICSRDOWN
.1810a0	10a0	5c 15 08 19	jmp $190815	CSRHOME         JML ICSRHOME
.1810a4	10a4	5c 69 08 19	jmp $190869	SCROLLUP        JML ISCROLLUP
.1810a8	10a8	5c e5 08 19	jmp $1908e5	CLRSCREEN       JML ICLRSCREEN
.1810ac	10ac	5c 90 09 19	jmp $190990	INITCHLUT	    JML IINITCHLUT
.1810b0	10b0	5c b9 0b 19	jmp $190bb9	INITSUPERIO	    JML IINITSUPERIO
.1810b4	10b4	5c 52 74 19	jmp $197452	INITKEYBOARD    JML IINITKEYBOARD
.1810b8	10b8	5c 00 7f 19	jmp $197f00	INITMOUSE       JML IINITMOUSE
.1810bc	10bc	5c 9a 0b 19	jmp $190b9a	INITCURSOR      JML IINITCURSOR
.1810c0	10c0	5c 62 0b 19	jmp $190b62	INITFONTSET     JML IINITFONTSET
.1810c4	10c4	5c 9d 09 19	jmp $19099d	INITGAMMATABLE  JML IINITGAMMATABLE
.1810c8	10c8	5c bd 09 19	jmp $1909bd	INITALLLUT      JML IINITALLLUT
.1810cc	10cc	5c 83 0a 19	jmp $190a83	INITVKYTXTMODE  JML IINITVKYTXTMODE
.1810d0	10d0	5c 06 0b 19	jmp $190b06	INITVKYGRPMODE  JML IINITVKYGRPMODE
.1810d4	10d4	5c 61 0b 19	jmp $190b61	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810d8	10d8	5c 61 0b 19	jmp $190b61	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810dc	10dc	5c d3 0c 19	jmp $190cd3	INITCODEC       JML IINITCODEC
.1810e0	10e0	5c 62 0d 19	jmp $190d62	RESETCODEC      JML IRESETCODEC
.1810e4	10e4	5c d0 0d 19	jmp $190dd0	BMP_PARSER      JML IBMP_PARSER
.1810e8	10e8	5c 85 0d 19	jmp $190d85	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.1810ec	10ec	5c 13 31 19	jmp $193113	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.1810f0	10f0	5c ed 4d 19	jmp $194ded	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.1810f4	10f4	5c 80 4e 19	jmp $194e80	F_CREATE        JML IF_CREATE       ; create a new file
.1810f8	10f8	5c ba 4e 19	jmp $194eba	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.1810fc	10fc	5c 53 4f 19	jmp $194f53	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.181100	1100	5c ee 4e 19	jmp $194eee	F_READ          JML IF_READ         ; read the next cluster from the file
.181104	1104	5c fd 4f 19	jmp $194ffd	F_DELETE        JML IF_DELETE       ; delete a file / directory
.181108	1108	5c bf 4f 19	jmp $194fbf	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.18110c	110c	5c f9 4f 19	jmp $194ff9	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.181110	1110	5c 96 50 19	jmp $195096	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.181114	1114	5c bd 50 19	jmp $1950bd	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.181118	1118	5c c1 50 19	jmp $1950c1	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.18111c	111c	5c 1c 54 19	jmp $19541c	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.181120	1120	5c dd 3a 19	jmp $193add	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.181124	1124	5c b5 54 19	jmp $1954b5	F_RUN           JML IF_RUN          ; Load an run a binary file
.181128	1128	5c 08 3f 19	jmp $193f08	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.18112c	112c	5c 01 0b 19	jmp $190b01	SETSIZES        JML ISETSIZES
.181130	1130	5c 04 56 19	jmp $195604	F_COPY          JML IF_COPY         ; Copy a file
.181134	1134	5c 4e 55 19	jmp $19554e	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.181138	1138	5c a2 55 19	jmp $1955a2	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.18113c	113c	5c 68 77 19	jmp $197768	TESTBREAK       JML KBD_TEST_BREAK  ; Check if BREAK was pressed recently by the user (C is set if true, clear if false)
.181140	1140	5c a1 79 19	jmp $1979a1	SETTABLE        JML KBD_SETTABLE    ; Set the keyboard scan code -> character translation tables (B:X points to the new tables)
.181144	1144	5c 3e 0b 19	jmp $190b3e	READVRAM        JML IREADVRAM       ; Read a byte from video RAM at B:X
=$001700					VEC_INT_START = *                           ; Label for the start of the IRQ vectors
.181700	1700	5c 7f 65 19	jmp $19657f	VEC_INT00_SOF   JML FDC_TIME_HANDLE         ; IRQ 0, 0 --- Start Of Frame interrupt
.181704	1704	5c 99 10 19	jmp $191099	VEC_INT01_SOL   JML IRQHANDLESTUB           ; IRQ 0, 1 --- Start Of Line interrupt
.181708	1708	5c 99 10 19	jmp $191099	VEC_INT02_TMR0  JML IRQHANDLESTUB           ; IRQ 0, 2 --- Timer 0 interrupt
.18170c	170c	5c 99 10 19	jmp $191099	VEC_INT03_TMR1  JML IRQHANDLESTUB           ; IRQ 0, 3 --- Timer 1 interrupt
.181710	1710	5c 99 10 19	jmp $191099	VEC_INT04_TMR2  JML IRQHANDLESTUB           ; IRQ 0, 4 --- Timer 2 interrupt
.181714	1714	5c 99 10 19	jmp $191099	VEC_INT05_RTC   JML IRQHANDLESTUB           ; IRQ 0, 5 --- Real Time Clock interrupt
.181718	1718	5c 99 10 19	jmp $191099	VEC_INT06_FDC   JML IRQHANDLESTUB           ; IRQ 0, 6 --- Floppy Drive Controller interrupt
.18171c	171c	5c 28 80 19	jmp $198028	VEC_INT07_MOUSE JML MOUSE_INTERRUPT         ; IRQ 0, 7 --- Mouse interrupt
.181720	1720	5c b5 75 19	jmp $1975b5	VEC_INT10_KBD   JML KBD_PROCESS_BYTE        ; IRQ 1, 0 --- Keyboard interrupt
.181724	1724	5c 99 10 19	jmp $191099	VEC_INT11_COL0  JML IRQHANDLESTUB           ; IRQ 1, 1 --- VICKY_II (INT2) Sprite Collision
.181728	1728	5c 99 10 19	jmp $191099	VEC_INT12_COL1  JML IRQHANDLESTUB           ; IRQ 1, 2 --- VICKY_II (INT3) Bitmap Collision
.18172c	172c	5c 99 10 19	jmp $191099	VEC_INT13_COM2  JML IRQHANDLESTUB           ; IRQ 1, 3 --- Serial port #2 interrupt
.181730	1730	5c 99 10 19	jmp $191099	VEC_INT14_COM1  JML IRQHANDLESTUB           ; IRQ 1, 4 --- Serial port #1 interrupt
.181734	1734	5c 99 10 19	jmp $191099	VEC_INT15_MIDI  JML IRQHANDLESTUB           ; IRQ 1, 5 --- MIDI controller interrupt
.181738	1738	5c 99 10 19	jmp $191099	VEC_INT16_LPT   JML IRQHANDLESTUB           ; IRQ 1, 6 --- Parallel port interrupt
.18173c	173c	5c 99 10 19	jmp $191099	VEC_INT17_SDC   JML IRQHANDLESTUB           ; IRQ 1, 7 --- SD Card Controller interrupt (CH376S???)
.181740	1740	5c 99 10 19	jmp $191099	VEC_INT20_OPL   JML IRQHANDLESTUB           ; IRQ 2, 0 --- OPL3
.181744	1744	5c 99 10 19	jmp $191099	VEC_INT21_GABE0 JML IRQHANDLESTUB           ; IRQ 2, 1 --- GABE (INT0) - TBD
.181748	1748	5c 99 10 19	jmp $191099	VEC_INT22_GABE1 JML IRQHANDLESTUB           ; IRQ 2, 2 --- GABE (INT1) - TBD
.18174c	174c	5c 99 10 19	jmp $191099	VEC_INT23_VDMA  JML IRQHANDLESTUB           ; IRQ 2, 3 --- VICKY_II (INT4) - VDMA Interrupt
.181750	1750	5c 99 10 19	jmp $191099	VEC_INT24_COL2  JML IRQHANDLESTUB           ; IRQ 2, 4 --- VICKY_II (INT5) Tile Collision
.181754	1754	5c 99 10 19	jmp $191099	VEC_INT25_GABE2 JML IRQHANDLESTUB           ; IRQ 2, 5 --- GABE (INT2) - TBD
.181758	1758	5c 99 10 19	jmp $191099	VEC_INT26_EXT   JML IRQHANDLESTUB           ; IRQ 2, 6 --- External Expansion
.18175c	175c	5c 99 10 19	jmp $191099	VEC_INT17_SDINS JML IRQHANDLESTUB           ; IRQ 2, 7 --- SDCARD Insertion
.181760	1760	5c 99 10 19	jmp $191099	VEC_INT30_OPN2  JML IRQHANDLESTUB           ; IRQ 3, 0 --- OPN2
.181764	1764	5c 99 10 19	jmp $191099	VEC_INT31_OPM   JML IRQHANDLESTUB           ; IRQ 3, 1 --- OPM
.181768	1768	5c 99 10 19	jmp $191099	VEC_INT32_IDE   JML IRQHANDLESTUB           ; IRQ 3, 2 --- HDD IDE Interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.18176c						ISETHANDLER
.18176c		8b		phb		                PHB
.18176d		08		php		                PHP
.18176e		48		pha		                PHA             ; begin setdbr macro
.18176f		08		php		                PHP
.181770		e2 20		sep #$20	                SEP #$20        ; set A short
.181772		a9 00		lda #$00	                LDA #0
.181774		48		pha		                PHA
.181775		ab		plb		                PLB
.181776		28		plp		                PLP
.181777		68		pla		                PLA             ; end setdbr macro
.181778		e2 20		sep #$20	                SEP #$20        ; set A short
.18177a		c2 10		rep #$10	                REP #$10        ; set X long
.18177c		48		pha		                PHA                     ; Save the interrupt number
.18177d		5a		phy		                PHY                     ; Save the handler's bank
.18177e		da		phx		                PHX                     ; Save the handler's address
.18177f		f4 00 00	pea #$0000	                PEA #0                  ; Make room for the offset to the vector
.181782						LOCALS
>0001						l_vector        .word ?                 ; Address of vector in bank 0
>0003						l_handler       .dword ?                ; The address of the handler (only 24 bits, really)
>0007						l_number        .byte ?                 ; The interrupt number
.181782		29 30		and #$30	                AND #$30                ; Isolate the block #
.181784		0a		asl a		                ASL A                   ; Multiply by 2 to get the offset to the first vector of the block
.181785		83 01		sta $01,s	                STA l_vector
.181787		a3 07		lda $07,s	                LDA l_number            ; Get the number bank
.181789		29 07		and #$07	                AND #$07                ; Isolate the interrupt number
.18178b		0a		asl a		                ASL A                   ; Multiply by four to get the first byte of that interrupt's vector
.18178c		0a		asl a		                ASL A
.18178d		03 01		ora $01,s	                ORA l_vector            ; Add it to the offset to the block
.18178f		83 01		sta $01,s	                STA l_vector            ; Store back to the vector address
.181791		18		clc		                CLC                     ; Add the address of the start of the interrupt vector table
.181792		a9 00		lda #$00	                LDA #<VEC_INT_START
.181794		63 01		adc $01,s	                ADC l_vector
.181796		83 01		sta $01,s	                STA l_vector
.181798		a9 17		lda #$17	                LDA #>VEC_INT_START
.18179a		63 02		adc $02,s	                ADC l_vector+1
.18179c		83 02		sta $02,s	                STA l_vector+1
.18179e		78		sei		                SEI                     ; Disable the interrupts while we update the vector
.18179f		a0 00 00	ldy #$0000	                LDY #0
.1817a2		a9 5c		lda #$5c	                LDA #$5C                ; Opcode for JML
.1817a4		93 01		sta ($01,s),y	                STA (l_vector),Y        ; Make sure the first byte is a JML instruction
.1817a6		c8		iny		                INY                     ; Move to the low byte of the vector address
.1817a7		a3 03		lda $03,s	                LDA l_handler
.1817a9		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817ab		c8		iny		                INY                     ; Move to the high byte of the vector address
.1817ac		a3 04		lda $04,s	                LDA l_handler+1
.1817ae		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817b0		c8		iny		                INY                     ; Move to the bank of the vector address
.1817b1		a3 05		lda $05,s	                LDA l_handler+2
.1817b3		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817b5		c2 20		rep #$20	                REP #$20        ; set A long
.1817b7		18		clc		                CLC                     ; Clean up the locals off the stack
.1817b8		3b		tsc		                TSC
.1817b9		69 07 00	adc #$0007	                ADC #SIZE(LOCALS)
.1817bc		1b		tcs		                TCS
.1817bd		28		plp		                PLP
.1817be		ab		plb		                PLB
.1817bf		6b		rtl		                RTL
.1817c0						IRQ_HANDLER
.1817c0		08		php		                PHP
.1817c1		e2 20		sep #$20	                SEP #$20        ; set A short
.1817c3		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0     ; Get the block 0 pending interrupts
.1817c7		d0 03		bne $1817cc	                BNE process_reg0
.1817c9		82 80 00	brl $18184c	                BRL CHECK_PENDING_REG1      ; If nothing: skip to block 1
.1817cc						process_reg0
.1817cc		89 01		bit #$01	                BIT #FNX0_INT00_SOF           ; Check to see if the bit is set
.1817ce		f0 0c		beq $1817dc	                BEQ continue            ; If not: skip the rest of this macro
.1817d0		29 01		and #$01	                AND #FNX0_INT00_SOF           ; Mask out all other pending interrupts
.1817d2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817d6		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF            ; And call its handler
.1817da		e2 20		sep #$20	                SEP #$20        ; set A short
.1817dc						continue
.1817dc		89 02		bit #$02	                BIT #FNX0_INT01_SOL           ; Check to see if the bit is set
.1817de		f0 0c		beq $1817ec	                BEQ continue            ; If not: skip the rest of this macro
.1817e0		29 02		and #$02	                AND #FNX0_INT01_SOL           ; Mask out all other pending interrupts
.1817e2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817e6		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL            ; And call its handler
.1817ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1817ec						continue
.1817ec		89 04		bit #$04	                BIT #FNX0_INT02_TMR0           ; Check to see if the bit is set
.1817ee		f0 0c		beq $1817fc	                BEQ continue            ; If not: skip the rest of this macro
.1817f0		29 04		and #$04	                AND #FNX0_INT02_TMR0           ; Mask out all other pending interrupts
.1817f2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817f6		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0            ; And call its handler
.1817fa		e2 20		sep #$20	                SEP #$20        ; set A short
.1817fc						continue
.1817fc		89 08		bit #$08	                BIT #FNX0_INT03_TMR1           ; Check to see if the bit is set
.1817fe		f0 0c		beq $18180c	                BEQ continue            ; If not: skip the rest of this macro
.181800		29 08		and #$08	                AND #FNX0_INT03_TMR1           ; Mask out all other pending interrupts
.181802		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181806		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1            ; And call its handler
.18180a		e2 20		sep #$20	                SEP #$20        ; set A short
.18180c						continue
.18180c		89 10		bit #$10	                BIT #FNX0_INT04_TMR2           ; Check to see if the bit is set
.18180e		f0 0c		beq $18181c	                BEQ continue            ; If not: skip the rest of this macro
.181810		29 10		and #$10	                AND #FNX0_INT04_TMR2           ; Mask out all other pending interrupts
.181812		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181816		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2            ; And call its handler
.18181a		e2 20		sep #$20	                SEP #$20        ; set A short
.18181c						continue
.18181c		89 20		bit #$20	                BIT #FNX0_INT05_RTC           ; Check to see if the bit is set
.18181e		f0 0c		beq $18182c	                BEQ continue            ; If not: skip the rest of this macro
.181820		29 20		and #$20	                AND #FNX0_INT05_RTC           ; Mask out all other pending interrupts
.181822		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181826		22 14 17 00	jsl $001714	                JSL VEC_INT05_RTC            ; And call its handler
.18182a		e2 20		sep #$20	                SEP #$20        ; set A short
.18182c						continue
.18182c		89 40		bit #$40	                BIT #FNX0_INT06_FDC           ; Check to see if the bit is set
.18182e		f0 0c		beq $18183c	                BEQ continue            ; If not: skip the rest of this macro
.181830		29 40		and #$40	                AND #FNX0_INT06_FDC           ; Mask out all other pending interrupts
.181832		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181836		22 18 17 00	jsl $001718	                JSL VEC_INT06_FDC            ; And call its handler
.18183a		e2 20		sep #$20	                SEP #$20        ; set A short
.18183c						continue
.18183c		89 80		bit #$80	                BIT #FNX0_INT07_MOUSE           ; Check to see if the bit is set
.18183e		f0 0c		beq $18184c	                BEQ continue            ; If not: skip the rest of this macro
.181840		29 80		and #$80	                AND #FNX0_INT07_MOUSE           ; Mask out all other pending interrupts
.181842		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181846		22 1c 17 00	jsl $00171c	                JSL VEC_INT07_MOUSE            ; And call its handler
.18184a		e2 20		sep #$20	                SEP #$20        ; set A short
.18184c						continue
.18184c						CHECK_PENDING_REG1
.18184c		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1
.181850		d0 03		bne $181855	                BNE process_reg1
.181852		82 80 00	brl $1818d5	                BRL CHECK_PENDING_REG2
.181855						process_reg1
.181855		89 01		bit #$01	                BIT #FNX1_INT00_KBD           ; Check to see if the bit is set
.181857		f0 0c		beq $181865	                BEQ continue            ; If not: skip the rest of this macro
.181859		29 01		and #$01	                AND #FNX1_INT00_KBD           ; Mask out all other pending interrupts
.18185b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18185f		22 20 17 00	jsl $001720	                JSL VEC_INT10_KBD            ; And call its handler
.181863		e2 20		sep #$20	                SEP #$20        ; set A short
.181865						continue
.181865		89 02		bit #$02	                BIT #FNX1_INT01_COL0           ; Check to see if the bit is set
.181867		f0 0c		beq $181875	                BEQ continue            ; If not: skip the rest of this macro
.181869		29 02		and #$02	                AND #FNX1_INT01_COL0           ; Mask out all other pending interrupts
.18186b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18186f		22 24 17 00	jsl $001724	                JSL VEC_INT11_COL0            ; And call its handler
.181873		e2 20		sep #$20	                SEP #$20        ; set A short
.181875						continue
.181875		89 04		bit #$04	                BIT #FNX1_INT02_COL1           ; Check to see if the bit is set
.181877		f0 0c		beq $181885	                BEQ continue            ; If not: skip the rest of this macro
.181879		29 04		and #$04	                AND #FNX1_INT02_COL1           ; Mask out all other pending interrupts
.18187b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18187f		22 28 17 00	jsl $001728	                JSL VEC_INT12_COL1            ; And call its handler
.181883		e2 20		sep #$20	                SEP #$20        ; set A short
.181885						continue
.181885		89 08		bit #$08	                BIT #FNX1_INT03_COM2           ; Check to see if the bit is set
.181887		f0 0c		beq $181895	                BEQ continue            ; If not: skip the rest of this macro
.181889		29 08		and #$08	                AND #FNX1_INT03_COM2           ; Mask out all other pending interrupts
.18188b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18188f		22 2c 17 00	jsl $00172c	                JSL VEC_INT13_COM2            ; And call its handler
.181893		e2 20		sep #$20	                SEP #$20        ; set A short
.181895						continue
.181895		89 10		bit #$10	                BIT #FNX1_INT04_COM1           ; Check to see if the bit is set
.181897		f0 0c		beq $1818a5	                BEQ continue            ; If not: skip the rest of this macro
.181899		29 10		and #$10	                AND #FNX1_INT04_COM1           ; Mask out all other pending interrupts
.18189b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18189f		22 30 17 00	jsl $001730	                JSL VEC_INT14_COM1            ; And call its handler
.1818a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818a5						continue
.1818a5		89 20		bit #$20	                BIT #FNX1_INT05_MPU401           ; Check to see if the bit is set
.1818a7		f0 0c		beq $1818b5	                BEQ continue            ; If not: skip the rest of this macro
.1818a9		29 20		and #$20	                AND #FNX1_INT05_MPU401           ; Mask out all other pending interrupts
.1818ab		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818af		22 34 17 00	jsl $001734	                JSL VEC_INT15_MIDI            ; And call its handler
.1818b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818b5						continue
.1818b5		89 40		bit #$40	                BIT #FNX1_INT06_LPT           ; Check to see if the bit is set
.1818b7		f0 0c		beq $1818c5	                BEQ continue            ; If not: skip the rest of this macro
.1818b9		29 40		and #$40	                AND #FNX1_INT06_LPT           ; Mask out all other pending interrupts
.1818bb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818bf		22 38 17 00	jsl $001738	                JSL VEC_INT16_LPT            ; And call its handler
.1818c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818c5						continue
.1818c5		89 80		bit #$80	                BIT #FNX1_INT07_SDCARD           ; Check to see if the bit is set
.1818c7		f0 0c		beq $1818d5	                BEQ continue            ; If not: skip the rest of this macro
.1818c9		29 80		and #$80	                AND #FNX1_INT07_SDCARD           ; Mask out all other pending interrupts
.1818cb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818cf		22 3c 17 00	jsl $00173c	                JSL VEC_INT17_SDC            ; And call its handler
.1818d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818d5						continue
.1818d5						CHECK_PENDING_REG2
.1818d5		af 42 01 00	lda $000142	                LDA @l INT_PENDING_REG2
.1818d9		d0 03		bne $1818de	                BNE process_reg2
.1818db		82 80 00	brl $18195e	                BRL CHECK_PENDING_REG3
.1818de						process_reg2
.1818de		89 01		bit #$01	                BIT #FNX2_INT00_OPL3           ; Check to see if the bit is set
.1818e0		f0 0c		beq $1818ee	                BEQ continue            ; If not: skip the rest of this macro
.1818e2		29 01		and #$01	                AND #FNX2_INT00_OPL3           ; Mask out all other pending interrupts
.1818e4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818e8		22 40 17 00	jsl $001740	                JSL VEC_INT20_OPL            ; And call its handler
.1818ec		e2 20		sep #$20	                SEP #$20        ; set A short
.1818ee						continue
.1818ee		89 02		bit #$02	                BIT #FNX2_INT01_GABE_INT0           ; Check to see if the bit is set
.1818f0		f0 0c		beq $1818fe	                BEQ continue            ; If not: skip the rest of this macro
.1818f2		29 02		and #$02	                AND #FNX2_INT01_GABE_INT0           ; Mask out all other pending interrupts
.1818f4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818f8		22 44 17 00	jsl $001744	                JSL VEC_INT21_GABE0            ; And call its handler
.1818fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1818fe						continue
.1818fe		89 04		bit #$04	                BIT #FNX2_INT02_GABE_INT1           ; Check to see if the bit is set
.181900		f0 0c		beq $18190e	                BEQ continue            ; If not: skip the rest of this macro
.181902		29 04		and #$04	                AND #FNX2_INT02_GABE_INT1           ; Mask out all other pending interrupts
.181904		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181908		22 48 17 00	jsl $001748	                JSL VEC_INT22_GABE1            ; And call its handler
.18190c		e2 20		sep #$20	                SEP #$20        ; set A short
.18190e						continue
.18190e		89 08		bit #$08	                BIT #FNX2_INT03_VDMA           ; Check to see if the bit is set
.181910		f0 0c		beq $18191e	                BEQ continue            ; If not: skip the rest of this macro
.181912		29 08		and #$08	                AND #FNX2_INT03_VDMA           ; Mask out all other pending interrupts
.181914		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181918		22 4c 17 00	jsl $00174c	                JSL VEC_INT23_VDMA            ; And call its handler
.18191c		e2 20		sep #$20	                SEP #$20        ; set A short
.18191e						continue
.18191e		89 10		bit #$10	                BIT #FNX2_INT04_COL2           ; Check to see if the bit is set
.181920		f0 0c		beq $18192e	                BEQ continue            ; If not: skip the rest of this macro
.181922		29 10		and #$10	                AND #FNX2_INT04_COL2           ; Mask out all other pending interrupts
.181924		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181928		22 50 17 00	jsl $001750	                JSL VEC_INT24_COL2            ; And call its handler
.18192c		e2 20		sep #$20	                SEP #$20        ; set A short
.18192e						continue
.18192e		89 20		bit #$20	                BIT #FNX2_INT05_GABE_INT2           ; Check to see if the bit is set
.181930		f0 0c		beq $18193e	                BEQ continue            ; If not: skip the rest of this macro
.181932		29 20		and #$20	                AND #FNX2_INT05_GABE_INT2           ; Mask out all other pending interrupts
.181934		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181938		22 54 17 00	jsl $001754	                JSL VEC_INT25_GABE2            ; And call its handler
.18193c		e2 20		sep #$20	                SEP #$20        ; set A short
.18193e						continue
.18193e		89 40		bit #$40	                BIT #FNX2_INT06_EXT           ; Check to see if the bit is set
.181940		f0 0c		beq $18194e	                BEQ continue            ; If not: skip the rest of this macro
.181942		29 40		and #$40	                AND #FNX2_INT06_EXT           ; Mask out all other pending interrupts
.181944		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181948		22 58 17 00	jsl $001758	                JSL VEC_INT26_EXT            ; And call its handler
.18194c		e2 20		sep #$20	                SEP #$20        ; set A short
.18194e						continue
.18194e		89 80		bit #$80	                BIT #FNX2_INT07_SDCARD_INS           ; Check to see if the bit is set
.181950		f0 0c		beq $18195e	                BEQ continue            ; If not: skip the rest of this macro
.181952		29 80		and #$80	                AND #FNX2_INT07_SDCARD_INS           ; Mask out all other pending interrupts
.181954		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181958		22 5c 17 00	jsl $00175c	                JSL VEC_INT17_SDINS            ; And call its handler
.18195c		e2 20		sep #$20	                SEP #$20        ; set A short
.18195e						continue
.18195e						CHECK_PENDING_REG3
.18195e		af 43 01 00	lda $000143	                LDA @l INT_PENDING_REG3
.181962		f0 30		beq $181994	                BEQ EXIT_IRQ_HANDLE
.181964		89 01		bit #$01	                BIT #FNX3_INT00_OPN2           ; Check to see if the bit is set
.181966		f0 0c		beq $181974	                BEQ continue            ; If not: skip the rest of this macro
.181968		29 01		and #$01	                AND #FNX3_INT00_OPN2           ; Mask out all other pending interrupts
.18196a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18196e		22 60 17 00	jsl $001760	                JSL VEC_INT30_OPN2            ; And call its handler
.181972		e2 20		sep #$20	                SEP #$20        ; set A short
.181974						continue
.181974		89 02		bit #$02	                BIT #FNX3_INT01_OPM           ; Check to see if the bit is set
.181976		f0 0c		beq $181984	                BEQ continue            ; If not: skip the rest of this macro
.181978		29 02		and #$02	                AND #FNX3_INT01_OPM           ; Mask out all other pending interrupts
.18197a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18197e		22 64 17 00	jsl $001764	                JSL VEC_INT31_OPM            ; And call its handler
.181982		e2 20		sep #$20	                SEP #$20        ; set A short
.181984						continue
.181984		89 04		bit #$04	                BIT #FNX3_INT02_IDE           ; Check to see if the bit is set
.181986		f0 0c		beq $181994	                BEQ continue            ; If not: skip the rest of this macro
.181988		29 04		and #$04	                AND #FNX3_INT02_IDE           ; Mask out all other pending interrupts
.18198a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18198e		22 68 17 00	jsl $001768	                JSL VEC_INT32_IDE            ; And call its handler
.181992		e2 20		sep #$20	                SEP #$20        ; set A short
.181994						continue
.181994						EXIT_IRQ_HANDLE
.181994		28		plp		                PLP
.181995		6b		rtl		                RTL
.181996		6b		rtl		NMI_HANDLER     RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/super_io_def.asm

=$af1100					PME_STS_REG     = $AF1100
=$af1102					PME_EN_REG		  = $AF1102
=$af1104					PME_STS1_REG		= $AF1104
=$af1105					PME_STS2_REG		= $AF1105
=$af1106					PME_STS3_REG		= $AF1106
=$af1107					PME_STS4_REG		= $AF1107
=$af1108					PME_STS5_REG		= $AF1108
=$af110a					PME_EN1_REG     = $AF110A
=$af110b					PME_EN2_REG     = $AF110B
=$af110c					PME_EN3_REG     = $AF110C
=$af110d					PME_EN4_REG     = $AF110D
=$af110e					PME_EN5_REG     = $AF110E
=$af1110					SMI_STS1_REG		= $AF1110
=$af1111					SMI_STS2_REG		= $AF1111
=$af1112					SMI_STS3_REG		= $AF1112
=$af1113					SMI_STS4_REG		= $AF1113
=$af1114					SMI_STS5_REG		= $AF1114
=$af1116					SMI_EN1_REG     = $AF1116
=$af1117					SMI_EN2_REG     = $AF1117
=$af1118					SMI_EN3_REG     = $AF1118
=$af1119					SMI_EN4_REG     = $AF1119
=$af111a					SMI_EN5_REG     = $AF111A
=$af111c					MSC_ST_REG      = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		= $AF1123
=$af1124					GP11_REG    		= $AF1124
=$af1125					GP12_REG    		= $AF1125
=$af1126					GP13_REG    		= $AF1126
=$af1127					GP14_REG    		= $AF1127
=$af1128					GP15_REG    		= $AF1128
=$af1129					GP16_REG    		= $AF1129
=$af112a					GP17_REG    		= $AF112A
=$af112b					GP20_REG    		= $AF112B
=$af112c					GP21_REG    		= $AF112C
=$af112d					GP22_REG		= $AF112D
=$af112f					GP24_REG		= $AF112F
=$af1130					GP25_REG		= $AF1130
=$af1131					GP26_REG		= $AF1131
=$af1132					GP27_REG		= $AF1132
=$af1133					GP30_REG		= $AF1133
=$af1134					GP31_REG		= $AF1134
=$af1135					GP32_REG		= $AF1135
=$af1136					GP33_REG		= $AF1136
=$af1137					GP34_REG		= $AF1137
=$af1138					GP35_REG		= $AF1138
=$af1139					GP36_REG		= $AF1139
=$af113a					GP37_REG		= $AF113A
=$af113b					GP40_REG		= $AF113B
=$af113c					GP41_REG		= $AF113C
=$af113d					GP42_REG		= $AF113D
=$af113e					GP43_REG		= $AF113E
=$af113f					GP50_REG		= $AF113F
=$af1140					GP51_REG		= $AF1140
=$af1141					GP52_REG		= $AF1141
=$af1142					GP53_REG		= $AF1142
=$af1143					GP54_REG		= $AF1143
=$af1144					GP55_REG		= $AF1144
=$af1145					GP56_REG		= $AF1145
=$af1146					GP57_REG		= $AF1146
=$af1147					GP60_REG		= $AF1147
=$af1148					GP61_REG		= $AF1148
=$af114b					GP1_REG			= $AF114B
=$af114c					GP2_REG			= $AF114C
=$af114d					GP3_REG			= $AF114D
=$af114e					GP4_REG			= $AF114E
=$af114f					GP5_REG			= $AF114F
=$af1150					GP6_REG			= $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG            = $AF1157
=$af1158					FAN_CTRL_REG  	    = $AF1158
=$af1159					FAN1_TACH_REG       = $AF1159
=$af115a					FAN2_TACH_REG       = $AF115A
=$af115b					FAN1_PRELOAD_REG    = $AF115B
=$af115c					FAN2_PRELOAD_REG    = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/keyboard_def.asm

=$af1807					    STATUS_PORT 	= $AF1807
=$af1807					    KBD_STATUS      = $AF1807
=$af1807					    KBD_CMD_BUF		= $AF1807
=$af1803					    KBD_OUT_BUF 	= $AF1803
=$af1803					    KBD_INPT_BUF	= $AF1803
=$af1803					    KBD_DATA_BUF	= $AF1803
=$af180a					    PORT_A		    = $AF180A   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$af180b					    PORT_B			= $AF180B   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=4						CHAN_EVID     = 4           ; ID for the second video port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src\kernel.asm

.190400						IBOOT
.190400		18		clc		                CLC               ; clear the carry flag
.190401		fb		xce		                XCE               ; move carry to emulation flag.
.190402		78		sei		                SEI               ; Disable interrupts
.190403		c2 30		rep #$30	                REP #$30        ; set A&X long
.190405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.190408		1b		tcs		                TAS
.190409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.19040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.19040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.190412		54 00 18	mvn $18,$00	                MVN $18,$00       ; Or during soft loading of the kernel from the debug port
.190415		48		pha		                PHA             ; begin setdp macro
.190416		08		php		                PHP
.190417		c2 20		rep #$20	                REP #$20        ; set A long
.190419		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19041c		5b		tcd		                TCD
.19041d		28		plp		                PLP
.19041e		68		pla		                PLA             ; end setdp macro
.19041f		e2 20		sep #$20	                SEP #$20        ; set A short
.190421		a2 00 00	ldx #$0000	                LDX #$0000
.190424		a9 00		lda #$00	                LDA #$00
.190426						CLEAR_MEM_LOOP
.190426		95 00		sta $00,x	                STA $0000, X
.190428		e8		inx		                INX
.190429		e0 00 01	cpx #$0100	                CPX #$0100
.19042c		d0 f8		bne $190426	                BNE CLEAR_MEM_LOOP
.19042e		ea		nop		                NOP
.19042f		a9 ff		lda #$ff	                LDA #$FF
.190431		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.190435		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.190439		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.19043d		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.190441		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.190445		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190449		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.19044d		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.190451		22 b8 0c 19	jsl $190cb8	                JSL INITRTC               ; Initialize the RTC
.190455		e2 20		sep #$20	                SEP #$20        ; set A short
.190457		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.19045b		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.19045d		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.19045f		d0 1e		bne $19047f	                BNE SkipInitExpC100C200
.190461		c2 20		rep #$20	                REP #$20        ; set A long
.190463		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.190467		c9 64 00	cmp #$0064	                CMP #$0064
.19046a		f0 0f		beq $19047b	                BEQ InitC100ESID
.19046c		c9 c8 00	cmp #$00c8	                CMP #$00C8
.19046f		d0 0e		bne $19047f	                BNE SkipInitExpC100C200
.190471		22 91 69 19	jsl $196991	                JSL SIMPLE_INIT_ETHERNET_CTRL
.190475		22 18 6a 19	jsl $196a18	                JSL INIT_EVID_VID_MODE
.190479		80 04		bra $19047f	                BRA SkipInitExpC100C200
.19047b						InitC100ESID:
.19047b		22 91 69 19	jsl $196991	                JSL SIMPLE_INIT_ETHERNET_CTRL
.19047f						SkipInitExpC100C200:
.19047f		e2 20		sep #$20	                SEP #$20        ; set A short
.190481		c2 10		rep #$10	                REP #$10        ; set X long
.190483		a9 9f		lda #$9f	                LDA #$9F              ; Channel 1 - Full Atteniation
.190485		8f 00 f1 af	sta $aff100	                STA $AFF100
.190489		a9 bf		lda #$bf	                LDA #$BF              ; Channel 2 - Full Atteniation
.19048b		8f 00 f1 af	sta $aff100	                STA $AFF100
.19048f		a9 df		lda #$df	                LDA #$DF              ; Channel 3 - No Atteniation
.190491		8f 00 f1 af	sta $aff100	                STA $AFF100
.190495		a9 ff		lda #$ff	                LDA #$FF              ; Channel 4 - No Atteniation
.190497		8f 00 f1 af	sta $aff100	                STA $AFF100
.19049b		a9 70		lda #$70	                LDA #$70                  ; Set the default text color to dim white on black
.19049d		85 1e		sta $1e		                STA CURCOLOR
.19049f		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.1904a3		29 01		and #$01	                AND #$01
.1904a5		c9 01		cmp #$01	                CMP #$01
.1904a7		d0 14		bne $1904bd	                BNE Alreadyin640480Mode
.1904a9		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904ad		29 fc		and #$fc	                AND #$FC
.1904af		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904b3		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904b7		09 01		ora #$01	                ORA #$01
.1904b9		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904bd						Alreadyin640480Mode
.1904bd		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904c1		29 fc		and #$fc	                AND #$FC
.1904c3		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.1904c7		a9 00		lda #$00	                LDA #0
.1904c9		22 38 10 00	jsl $001038	                JSL SETIN
.1904cd		22 3c 10 00	jsl $00103c	                JSL SETOUT
.1904d1		22 ab 6b 19	jsl $196bab	                JSL ANSI_INIT
.1904d5		22 2c 11 00	jsl $00112c	                JSL SETSIZES
.1904d9		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.1904dd		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.1904e1		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.1904e5		22 7b 0b 19	jsl $190b7b	                JSL INITMOUSEPOINTER
.1904e9		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.1904ed		c2 20		rep #$20	                REP #$20        ; set A long
.1904ef		48		pha		                PHA             ; begin setdp macro
.1904f0		08		php		                PHP
.1904f1		c2 20		rep #$20	                REP #$20        ; set A long
.1904f3		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1904f6		5b		tcd		                TCD
.1904f7		28		plp		                PLP
.1904f8		68		pla		                PLA             ; end setdp macro
.1904f9		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD        ; Initialize the keyboard
.1904fd		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE           ; Initialize the mouse
.190501		58		cli		                CLI
.190502		a9 00 00	lda #$0000	                LDA #0
.190505		8d e0 00	sta $00e0	                STA @w MOUSE_IDX
.190508		e2 20		sep #$20	                SEP #$20        ; set A short
.19050a		c2 10		rep #$10	                REP #$10        ; set X long
.19050c		48		pha		                PHA             ; begin setdbr macro
.19050d		08		php		                PHP
.19050e		e2 20		sep #$20	                SEP #$20        ; set A short
.190510		a9 19		lda #$19	                LDA #`greet_msg
.190512		48		pha		                PHA
.190513		ab		plb		                PLB
.190514		28		plp		                PLP
.190515		68		pla		                PLA             ; end setdbr macro
.190516		a2 00 00	ldx #$0000	                LDX #0
.190519		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.19051d		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.190521		e8		inx		                INX
.190522		e0 00 10	cpx #$1000	                CPX #$1000
.190525		d0 f2		bne $190519	                BNE jmpcopy
.190527						retry_boot
.190527		22 36 3e 19	jsl $193e36	                JSL DOS_INIT            ; Initialize the "disc operating system"
.19052b		22 73 80 19	jsl $198073	                JSL BOOT_SOUND          ; Play the boot sound
.19052f		22 00 00 1e	jsl $1e0000	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.190533		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN           ; Clear Screen and Set a standard color in Color Memory
.190537		22 a0 10 00	jsl $0010a0	                JSL CSRHOME             ; Move to the home position
.19053b						greet
.19053b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19053d		48		pha		                PHA             ; begin setdbr macro
.19053e		08		php		                PHP
.19053f		e2 20		sep #$20	                SEP #$20        ; set A short
.190541		a9 19		lda #$19	                LDA #`greet_msg
.190543		48		pha		                PHA
.190544		ab		plb		                PLB
.190545		28		plp		                PLP
.190546		68		pla		                PLA             ; end setdbr macro
.190547		a2 2a 81	ldx #$812a	                LDX #<>greet_msg
.19054a		22 01 07 19	jsl $190701	                JSL IPRINT              ; print the first line
.19054e		22 10 09 19	jsl $190910	                JSL ICOLORFLAG          ; This is to set the color memory for the text logo
.190552		22 f8 6a 19	jsl $196af8	                JSL EVID_GREET          ; Print the EVID greeting, if the EVID card is installed
.190556		c2 30		rep #$30	                REP #$30        ; set A&X long
.190558		a9 ff fe	lda #$feff	                LDA #STACK_END          ; We are the root, let's make sure from now on, that we start clean
.19055b		1b		tcs		                TAS
.19055c		e2 20		sep #$20	                SEP #$20        ; set A short
.19055e		c2 10		rep #$10	                REP #$10        ; set X long
.190560		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.190564		c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.190566		f0 10		beq $190578	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.190568		c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.19056a		f0 1e		beq $19058a	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.19056c		c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.19056e		f0 62		beq $1905d2	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.190570		c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.190572		f0 1d		beq $190591	                BEQ BOOTSDC           ; Yes: boot via the SDC
.190574		c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.190576		f0 39		beq $1905b1	                BEQ BOOTIDE           ; Yes: boot via the IDE
.190578		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.19057c		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.19057e		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.190580		f0 2f		beq $1905b1	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.190582		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.190584		f0 0b		beq $190591	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.190586		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.190588		f0 48		beq $1905d2	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.19058a						IRESTORE
.19058a		5c 00 00 1a	jmp $1a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.19058e		ea		nop		CREDIT_LOCK     NOP
.19058f		80 fd		bra $19058e	                BRA CREDIT_LOCK
.190591		a2 59 85	ldx #$8559	BOOTSDC         LDX #<>sdc_boot
.190594		22 01 07 19	jsl $190701	                JSL IPRINT
.190598		e2 20		sep #$20	                SEP #$20        ; set A short
.19059a		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.19059c		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905a0		22 08 3f 19	jsl $193f08	                JSL DOS_MOUNT         ; Mount the SDC
.1905a4		90 06		bcc $1905ac	                BCC sdc_error         ; Print an error message if couldn't get anything
.1905a6		22 c3 40 19	jsl $1940c3	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.1905aa		80 de		bra $19058a	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.1905ac		a2 dd 84	ldx #$84dd	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.1905af		80 40		bra $1905f1	                BRA PR_BOOT_ERROR
.1905b1		a2 70 85	ldx #$8570	BOOTIDE         LDX #<>ide_boot
.1905b4		22 01 07 19	jsl $190701	                JSL IPRINT
.1905b8		e2 20		sep #$20	                SEP #$20        ; set A short
.1905ba		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.1905bc		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905c0		22 08 3f 19	jsl $193f08	                JSL DOS_MOUNT         ; Mount the IDE drive
.1905c4		90 07		bcc $1905cd	                BCC hdc_error         ; Print an error message if couldn't get anything
.1905c6		22 c3 40 19	jsl $1940c3	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.1905ca		82 bd ff	brl $19058a	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.1905cd		a2 f9 84	ldx #$84f9	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.1905d0		80 1f		bra $1905f1	                BRA PR_BOOT_ERROR
.1905d2		a2 42 85	ldx #$8542	BOOTFLOPPY      LDX #<>fdc_boot
.1905d5		22 01 07 19	jsl $190701	                JSL IPRINT
.1905d9		e2 20		sep #$20	                SEP #$20        ; set A short
.1905db		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.1905dd		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905e1		22 18 63 19	jsl $196318	                JSL FDC_MOUNT         ; Mount the floppy drive
.1905e5		90 07		bcc $1905ee	                BCC fdc_error         ; Print an error message if couldn't get anything
.1905e7		22 c3 40 19	jsl $1940c3	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.1905eb		82 9c ff	brl $19058a	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.1905ee		a2 1c 85	ldx #$851c	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.1905f1		22 01 07 19	jsl $190701	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.1905f5		a2 b8 84	ldx #$84b8	                LDX #<>boot_retry     ; Print the boot retry prompt
.1905f8		22 01 07 19	jsl $190701	                JSL IPRINT
.1905fc		22 9b 06 19	jsl $19069b	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.190600		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.190602		d0 03		bne $190607	                BNE chk_r_lc
.190604		82 20 ff	brl $190527	                BRL retry_boot        ; Yes: retry the boot sequence
.190607		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.190609		d0 03		bne $19060e	                BNE chk_b_lc
.19060b		82 19 ff	brl $190527	                BRL retry_boot
.19060e		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.190610		d0 03		bne $190615	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.190612		82 75 ff	brl $19058a	                BRL BOOTBASIC
.190615						chk_b_lc_not:
.190615		c9 42		cmp #$42	                CMP #'B'
.190617		d0 03		bne $19061c	                BNE chk_b_lc_not0
.190619		82 6e ff	brl $19058a	                BRL BOOTBASIC
.19061c						chk_b_lc_not0:
.19061c		80 de		bra $1905fc	                BRA boot_wait_key     ; No: keep waiting
.19061e						IBREAK
.19061e		48		pha		                PHA             ; begin setdp macro
.19061f		08		php		                PHP
.190620		c2 20		rep #$20	                REP #$20        ; set A long
.190622		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190625		5b		tcd		                TCD
.190626		28		plp		                PLP
.190627		68		pla		                PLA             ; end setdp macro
.190628		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.190629		8f 48 02 00	sta $000248	                STA CPUY
.19062d		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.19062e		8f 46 02 00	sta $000246	                STA CPUX
.190632		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.190633		8f 44 02 00	sta $000244	                STA CPUA
.190637		68		pla		                PLA
.190638		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.19063c		e2 20		sep #$20	                SEP #$20        ; set A short
.19063e		68		pla		                PLA             ; Pull Data Bank (8 bits)
.19063f		8f 4e 02 00	sta $00024e	                STA CPUDBR
.190643		68		pla		                PLA             ; Pull Flags (8 bits)
.190644		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.190648		c2 20		rep #$20	                REP #$20        ; set A long
.19064a		68		pla		                PLA             ; Pull Program Counter (16 bits)
.19064b		8f 40 02 00	sta $000240	                STA CPUPC
.19064f		e2 20		sep #$20	                SEP #$20        ; set A short
.190651		68		pla		                PLA             ; Pull Program Bank (8 bits)
.190652		8f 42 02 00	sta $000242	                STA CPUPBR
.190656		c2 20		rep #$20	                REP #$20        ; set A long
.190658		3b		tsc		                TSA             ; Get the stack
.190659		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.19065d		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.190660		1b		tcs		                TAS
.190661		5c 04 00 1a	jmp $1a0004	                JML MONITOR
.190665						IREADY
.190665		48		pha		                PHA             ; begin setdbr macro
.190666		08		php		                PHP
.190667		e2 20		sep #$20	                SEP #$20        ; set A short
.190669		a9 19		lda #$19	                LDA #`ready_msg
.19066b		48		pha		                PHA
.19066c		ab		plb		                PLB
.19066d		28		plp		                PLP
.19066e		68		pla		                PLA             ; end setdbr macro
.19066f		e2 20		sep #$20	                SEP #$20        ; set A short
.190671		a2 8b 85	ldx #$858b	                LDX #<>ready_msg
.190674		22 01 07 19	jsl $190701	                JSL IPRINT
.190678						IREADYWAIT
.190678		22 92 06 19	jsl $190692	                JSL IGETCHE
.19067c		80 fa		bra $190678	                BRA IREADYWAIT
.19067e		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.19067f		db		stp		IRETURN         STP
.190680		08		php		ISETIN          PHP
.190681		e2 20		sep #$20	                SEP #$20        ; set A short
.190683		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.190687		28		plp		                PLP
.190688		6b		rtl		                RTL
.190689		08		php		ISETOUT         PHP
.19068a		e2 20		sep #$20	                SEP #$20        ; set A short
.19068c		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.190690		28		plp		                PLP
.190691		6b		rtl		                RTL
.190692		22 4c 10 00	jsl $00104c	IGETCHE         JSL GETCHW
.190696		22 18 10 00	jsl $001018	                JSL PUTC
.19069a		6b		rtl		                RTL
.19069b						IGETCHW
.19069b		da		phx		                PHX
.19069c		5a		phy		                PHY
.19069d		8b		phb		                PHB
.19069e		0b		phd		                PHD
.19069f		08		php		                PHP
.1906a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1906a2		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.1906a6		f0 1b		beq $1906c3	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.1906a8		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1906aa		f0 0d		beq $1906b9	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906ac		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1906ae		f0 09		beq $1906b9	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906b0		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.1906b2		28		plp		                PLP
.1906b3		38		sec		                SEC                 ; And return carry set
.1906b4		2b		pld		                PLD
.1906b5		ab		plb		                PLB
.1906b6		7a		ply		                PLY
.1906b7		fa		plx		                PLX
.1906b8		6b		rtl		                RTL
.1906b9		22 1c 57 19	jsl $19571c	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.1906bd		22 d0 57 19	jsl $1957d0	                JSL UART_GETC       ; Get the charater from the COM port
.1906c1		80 04		bra $1906c7	                BRA done
.1906c3		22 09 78 19	jsl $197809	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.1906c7		28		plp		done            PLP
.1906c8		18		clc		                CLC                 ; Return carry clear for valid data
.1906c9		2b		pld		                PLD
.1906ca		ab		plb		                PLB
.1906cb		7a		ply		                PLY
.1906cc		fa		plx		                PLX
.1906cd		6b		rtl		                RTL
.1906ce						IGETCH
.1906ce		da		phx		                PHX
.1906cf		5a		phy		                PHY
.1906d0		8b		phb		                PHB
.1906d1		0b		phd		                PHD
.1906d2		08		php		                PHP
.1906d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1906d5		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.1906d9		f0 1b		beq $1906f6	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.1906db		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1906dd		f0 0d		beq $1906ec	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906df		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1906e1		f0 09		beq $1906ec	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906e3		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.1906e5		28		plp		                PLP
.1906e6		38		sec		                SEC                 ; And return carry set
.1906e7		2b		pld		                PLD
.1906e8		ab		plb		                PLB
.1906e9		7a		ply		                PLY
.1906ea		fa		plx		                PLX
.1906eb		6b		rtl		                RTL
.1906ec		22 1c 57 19	jsl $19571c	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.1906f0		22 d0 57 19	jsl $1957d0	                JSL UART_GETC       ; Get the charater from the COM port
.1906f4		80 04		bra $1906fa	                BRA done
.1906f6		22 15 78 19	jsl $197815	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.1906fa		28		plp		done            PLP
.1906fb		18		clc		                CLC                 ; Return carry clear for valid data
.1906fc		2b		pld		                PLD
.1906fd		ab		plb		                PLB
.1906fe		7a		ply		                PLY
.1906ff		fa		plx		                PLX
.190700		6b		rtl		                RTL
.190701		22 1c 10 00	jsl $00101c	IPRINT          JSL PUTS
.190705		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.190709		6b		rtl		                RTL
.19070a		48		pha		IPUTS           PHA
.19070b		08		php		                PHP
.19070c		e2 20		sep #$20	                SEP #$20        ; set A short
.19070e		c2 10		rep #$10	                REP #$10        ; set X long
.190710		bd 00 00	lda $190000,x	iputs1          LDA $0,b,x      ; read from the string
.190713		f0 08		beq $19071d	                BEQ iputs_done
.190715		22 18 10 00	jsl $001018	iputs2          JSL PUTC
.190719		e8		inx		iputs3          INX
.19071a		4c 10 07	jmp $190710	                JMP iputs1
.19071d		e8		inx		iputs_done      INX
.19071e		28		plp		                PLP
.19071f		68		pla		                PLA
.190720		6b		rtl		                RTL
.190721						IPUTC
.190721		da		phx		                PHX
.190722		5a		phy		                PHY
.190723		0b		phd		                PHD
.190724		8b		phb		                PHB
.190725		08		php		                PHP                 ; stash the flags (we'll be changing M)
.190726		48		pha		                PHA             ; begin setdp macro
.190727		08		php		                PHP
.190728		c2 20		rep #$20	                REP #$20        ; set A long
.19072a		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19072d		5b		tcd		                TCD
.19072e		28		plp		                PLP
.19072f		68		pla		                PLA             ; end setdp macro
.190730		48		pha		                PHA             ; begin setdbr macro
.190731		08		php		                PHP
.190732		e2 20		sep #$20	                SEP #$20        ; set A short
.190734		a9 00		lda #$00	                LDA #0
.190736		48		pha		                PHA
.190737		ab		plb		                PLB
.190738		28		plp		                PLP
.190739		68		pla		                PLA             ; end setdbr macro
.19073a		e2 20		sep #$20	                SEP #$20        ; set A short
.19073c		c2 10		rep #$10	                REP #$10        ; set X long
.19073e		48		pha		                PHA                 ; Save the character to print
.19073f		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.190743		f0 1a		beq $19075f	                BEQ putc_ansi       ; If it's 0: print to the screen
.190745		c9 04		cmp #$04	                CMP #CHAN_EVID      ; Check to see if it's the second video port
.190747		f0 16		beq $19075f	                BEQ putc_ansi       ; Yes: handle printing to the second video port
.190749		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.19074b		f0 07		beq $190754	                BEQ putc_uart       ; Yes: handle printing to the UART
.19074d		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.19074f		f0 03		beq $190754	                BEQ putc_uart       ; Yes: handle printing to the UART
.190751		68		pla		                PLA                 ; Otherwise, just exit
.190752		80 10		bra $190764	                BRA done
.190754		22 1c 57 19	jsl $19571c	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.190758		68		pla		                PLA                 ; Recover the character to send
.190759		22 f1 57 19	jsl $1957f1	                JSL UART_PUTC       ; Send the character
.19075d		80 05		bra $190764	                BRA done
.19075f		68		pla		putc_ansi       PLA                 ; Recover the character to send
.190760		22 ea 6d 19	jsl $196dea	                JSL ANSI_PUTC       ; Print to the current selected ANSI screen
.190764		28		plp		done            PLP
.190765		ab		plb		                PLB
.190766		2b		pld		                PLD
.190767		7a		ply		                PLY
.190768		fa		plx		                PLX
.190769		6b		rtl		                RTL
.19076a		da		phx		SCRSHIFTLL      PHX
.19076b		5a		phy		                PHY
.19076c		48		pha		                PHA
.19076d		0b		phd		                PHD
.19076e		08		php		                PHP
.19076f		48		pha		                PHA             ; begin setdp macro
.190770		08		php		                PHP
.190771		c2 20		rep #$20	                REP #$20        ; set A long
.190773		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190776		5b		tcd		                TCD
.190777		28		plp		                PLP
.190778		68		pla		                PLA             ; end setdp macro
.190779		c2 30		rep #$30	                REP #$30        ; set A&X long
.19077b		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.19077d		a8		tay		                TAY                 ; Set it as the destination
.19077e		aa		tax		                TAX
.19077f		e8		inx		                INX                 ; And set the next cell as the source
.190780		18		clc		                CLC                 ; Calculate the length of the block to move
.190781		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.190783		e5 1a		sbc $1a		                SBC CURSORX
.190785		54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.190788		28		plp		                PLP
.190789		2b		pld		                PLD
.19078a		68		pla		                PLA
.19078b		7a		ply		                PLY
.19078c		fa		plx		                PLX
.19078d		6b		rtl		                RTL
.19078e		da		phx		SCRSHIFTLR      PHX
.19078f		48		pha		                PHA
.190790		0b		phd		                PHD
.190791		08		php		                PHP
.190792		48		pha		                PHA             ; begin setdp macro
.190793		08		php		                PHP
.190794		c2 20		rep #$20	                REP #$20        ; set A long
.190796		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190799		5b		tcd		                TCD
.19079a		28		plp		                PLP
.19079b		68		pla		                PLA             ; end setdp macro
.19079c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19079e		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.1907a0		1a		inc a		                INC A
.1907a1		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.1907a3		b0 1b		bcs $1907c0	                BGE done            ; Yes: just skip the whole thing
.1907a5		38		sec		                SEC                 ; Calculate the length of the block to move
.1907a6		a5 0f		lda $0f		                LDA COLS_VISIBLE
.1907a8		e5 1a		sbc $1a		                SBC CURSORX
.1907aa		1a		inc a		                INC A
.1907ab		18		clc		                CLC
.1907ac		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.1907ae		3a		dec a		                DEC A
.1907af		a8		tay		                TAY                 ; Make it the destination
.1907b0		3a		dec a		                DEC A               ; Move to the previous column
.1907b1		aa		tax		                TAX                 ; Make it the source
.1907b2		38		sec		                SEC                 ; Calculate the length of the block to move
.1907b3		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.1907b5		e5 1a		sbc $1a		                SBC CURSORX
.1907b7		44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.1907ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1907bc		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.1907be		87 17		sta [$17]	                STA [CURSORPOS]
.1907c0		28		plp		done            PLP
.1907c1		2b		pld		                PLD
.1907c2		68		pla		                PLA
.1907c3		fa		plx		                PLX
.1907c4		6b		rtl		                RTL
.1907c5						IPUTB
.1907c5		6b		rtl		                RTL
.1907c6						IPRINTCR
.1907c6		da		phx		                PHX
.1907c7		5a		phy		                PHY
.1907c8		8b		phb		                PHB
.1907c9		0b		phd		                PHD
.1907ca		08		php		                PHP
.1907cb		48		pha		                PHA             ; begin setdbr macro
.1907cc		08		php		                PHP
.1907cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1907cf		a9 00		lda #$00	                LDA #0
.1907d1		48		pha		                PHA
.1907d2		ab		plb		                PLB
.1907d3		28		plp		                PLP
.1907d4		68		pla		                PLA             ; end setdbr macro
.1907d5		48		pha		                PHA             ; begin setdp macro
.1907d6		08		php		                PHP
.1907d7		c2 20		rep #$20	                REP #$20        ; set A long
.1907d9		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1907dc		5b		tcd		                TCD
.1907dd		28		plp		                PLP
.1907de		68		pla		                PLA             ; end setdp macro
.1907df		e2 20		sep #$20	                SEP #$20        ; set A short
.1907e1		c2 10		rep #$10	                REP #$10        ; set X long
.1907e3		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.1907e7		f0 1c		beq $190805	                BEQ scr_printcr
.1907e9		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1907eb		f0 06		beq $1907f3	                BEQ uart_printcr    ; Yes: handle printing to the UART
.1907ed		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1907ef		f0 02		beq $1907f3	                BEQ uart_printcr    ; Yes: handle printing to the UART
.1907f1		80 1c		bra $19080f	                BRA done
.1907f3		22 1c 57 19	jsl $19571c	uart_printcr    JSL UART_SELECT
.1907f7		a9 0d		lda #$0d	                LDA #CHAR_CR
.1907f9		22 18 10 00	jsl $001018	                JSL PUTC
.1907fd		a9 0a		lda #$0a	                LDA #CHAR_LF
.1907ff		22 18 10 00	jsl $001018	                JSL PUTC
.190803		80 0a		bra $19080f	                BRA done
.190805		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.190808		a4 1c		ldy $1c		                LDY CURSORY
.19080a		c8		iny		                INY
.19080b		22 84 10 00	jsl $001084	                JSL LOCATE
.19080f		28		plp		done            PLP
.190810		2b		pld		                PLD
.190811		ab		plb		                PLB
.190812		7a		ply		                PLY
.190813		fa		plx		                PLX
.190814		6b		rtl		                RTL
.190815		da		phx		ICSRHOME        PHX
.190816		5a		phy		                PHY
.190817		08		php		                PHP
.190818		a2 00 00	ldx #$0000	                LDX #0
.19081b		a0 00 00	ldy #$0000	                LDY #0
.19081e		22 84 10 00	jsl $001084	                JSL LOCATE
.190822		28		plp		                PLP
.190823		7a		ply		                PLY
.190824		fa		plx		                PLX
.190825		6b		rtl		                RTL
.190826		da		phx		ICSRRIGHT       PHX
.190827		5a		phy		                PHY
.190828		48		pha		                PHA
.190829		0b		phd		                PHD
.19082a		08		php		                PHP
.19082b		22 a2 72 19	jsl $1972a2	                JSL ANSI_CSRRIGHT
.19082f		28		plp		                PLP
.190830		2b		pld		                PLD
.190831		68		pla		                PLA
.190832		7a		ply		                PLY
.190833		fa		plx		                PLX
.190834		6b		rtl		                RTL
.190835						ICSRLEFT
.190835		da		phx		                PHX
.190836		5a		phy		                PHY
.190837		48		pha		                PHA
.190838		0b		phd		                PHD
.190839		08		php		                PHP
.19083a		22 cd 72 19	jsl $1972cd	                JSL ANSI_CSRLEFT
.19083e		28		plp		                PLP
.19083f		2b		pld		                PLD
.190840		68		pla		                PLA
.190841		7a		ply		                PLY
.190842		fa		plx		                PLX
.190843		6b		rtl		                RTL
.190844						ICSRUP
.190844		da		phx		                PHX
.190845		5a		phy		                PHY
.190846		48		pha		                PHA
.190847		0b		phd		                PHD
.190848		08		php		                PHP
.190849		22 eb 72 19	jsl $1972eb	                JSL ANSI_CSRUP
.19084d		28		plp		                PLP
.19084e		2b		pld		                PLD
.19084f		68		pla		                PLA
.190850		7a		ply		                PLY
.190851		fa		plx		                PLX
.190852		6b		rtl		                RTL
.190853		da		phx		ICSRDOWN        PHX
.190854		5a		phy		                PHY
.190855		0b		phd		                PHD
.190856		22 09 73 19	jsl $197309	                JSL ANSI_CSRDOWN
.19085a		2b		pld		                PLD
.19085b		7a		ply		                PLY
.19085c		fa		plx		                PLX
.19085d		6b		rtl		                RTL
.19085e		48		pha		ILOCATE         PHA
.19085f		0b		phd		                PHD
.190860		08		php		                PHP
.190861		22 2c 73 19	jsl $19732c	                JSL ANSI_LOCATE
.190865		28		plp		ilocate_done    PLP
.190866		2b		pld		                PLD
.190867		68		pla		                PLA
.190868		6b		rtl		                RTL
.190869						ISCROLLUP
.190869		48		pha		                PHA
.19086a		da		phx		                PHX
.19086b		5a		phy		                PHY
.19086c		8b		phb		                PHB
.19086d		0b		phd		                PHD
.19086e		08		php		                PHP
.19086f		22 90 73 19	jsl $197390	                JSL ANSI_SCROLLUP
.190873		28		plp		                PLP
.190874		2b		pld		                PLD
.190875		ab		plb		                PLB
.190876		7a		ply		                PLY
.190877		fa		plx		                PLX
.190878		68		pla		                PLA
.190879		6b		rtl		                RTL
.19087a		08		php		IPRINTH         PHP
.19087b		48		pha		                PHA
.19087c						iprinth1
.19087c		e2 20		sep #$20	                SEP #$20        ; set A short
.19087e		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.190881		4a		lsr a		                LSR
.190882		4a		lsr a		                LSR
.190883		4a		lsr a		                LSR
.190884		4a		lsr a		                LSR
.190885		22 d4 08 19	jsl $1908d4	                JSL iprint_digit
.190889		bd 00 00	lda $0000,x	                LDA #0,b,x
.19088c		22 d4 08 19	jsl $1908d4	                JSL iprint_digit
.190890		ca		dex		                DEX
.190891		88		dey		                DEY
.190892		d0 e8		bne $19087c	                BNE iprinth1
.190894		68		pla		                PLA
.190895		28		plp		                PLP
.190896		6b		rtl		                RTL
.190897						IPRINTAH
.190897		48		pha		                PHA
.190898		08		php		                PHP
.190899		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.19089d		08		php		                PHP                   ; Get the processor status into A
.19089e		e2 20		sep #$20	                SEP #$20        ; set A short
.1908a0		c2 10		rep #$10	                REP #$10        ; set X long
.1908a2		68		pla		                PLA
.1908a3		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.1908a5		c9 20		cmp #$20	                CMP #%00100000
.1908a7		f0 14		beq $1908bd	                BEQ eight_bit
.1908a9		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.1908ad		4a		lsr a		                LSR A
.1908ae		4a		lsr a		                LSR A
.1908af		4a		lsr a		                LSR A
.1908b0		4a		lsr a		                LSR A
.1908b1		22 d4 08 19	jsl $1908d4	                JSL iprint_digit      ; And print it
.1908b5		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.1908b9		22 d4 08 19	jsl $1908d4	                JSL iprint_digit      ; And print it
.1908bd		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.1908c1		4a		lsr a		                LSR A
.1908c2		4a		lsr a		                LSR A
.1908c3		4a		lsr a		                LSR A
.1908c4		4a		lsr a		                LSR A
.1908c5		22 d4 08 19	jsl $1908d4	                JSL iprint_digit      ; And print it
.1908c9		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.1908cd		22 d4 08 19	jsl $1908d4	                JSL iprint_digit      ; And print it
.1908d1		28		plp		                PLP
.1908d2		68		pla		                PLA
.1908d3		6b		rtl		                RTL
.1908d4		da		phx		iprint_digit    PHX
.1908d5		c2 20		rep #$20	                REP #$20        ; set A long
.1908d7		29 0f 00	and #$000f	                AND #$0F
.1908da		aa		tax		                TAX
.1908db		bf 9f 85 19	lda $19859f,x	                LDA hex_digits,X
.1908df		22 21 07 19	jsl $190721	                JSL IPUTC       ; Print the digit
.1908e3		fa		plx		                PLX
.1908e4		6b		rtl		                RTL
.1908e5		48		pha		ICLRSCREEN	    PHA
.1908e6		da		phx		                PHX
.1908e7		08		php		                PHP
.1908e8		22 25 74 19	jsl $197425	                JSL ANSI_CLRSCREEN
.1908ec		28		plp		                PLP
.1908ed		fa		plx		                PLX
.1908ee		68		pla		                PLA
.1908ef		6b		rtl		                RTL
.1908f0						COPYBYTES42
.1908f0		08		php		                PHP
.1908f1		0b		phd		                PHD
.1908f2		48		pha		                PHA             ; begin setdp macro
.1908f3		08		php		                PHP
.1908f4		c2 20		rep #$20	                REP #$20        ; set A long
.1908f6		a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.1908f9		5b		tcd		                TCD
.1908fa		28		plp		                PLP
.1908fb		68		pla		                PLA             ; end setdp macro
.1908fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1908fe		c2 10		rep #$10	                REP #$10        ; set X long
.190900		a0 00 00	ldy #$0000	                LDY #0
.190903		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.190905		97 04		sta [$04],y	                STA [TMPPTR2],Y
.190907		c8		iny		                INY
.190908		c0 2a 00	cpy #$002a	                CPY #42
.19090b		d0 f6		bne $190903	                BNE copy_loop
.19090d		2b		pld		                PLD
.19090e		28		plp		                PLP
.19090f		60		rts		                RTS
.190910						ICOLORFLAG
.190910		48		pha		                PHA
.190911		da		phx		                PHX
.190912		5a		phy		                PHY
.190913		08		php		                PHP
.190914		8b		phb		                PHB
.190915		0b		phd		                PHD
.190916		48		pha		                PHA             ; begin setdp macro
.190917		08		php		                PHP
.190918		c2 20		rep #$20	                REP #$20        ; set A long
.19091a		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19091d		5b		tcd		                TCD
.19091e		28		plp		                PLP
.19091f		68		pla		                PLA             ; end setdp macro
.190920		c2 30		rep #$30	                REP #$30        ; set A&X long
.190922		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.190925		85 04		sta $04		                STA TMPPTR2
.190927		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.19092a		85 06		sta $06		                STA TMPPTR2+2
.19092c		a9 fc 81	lda #$81fc	                LDA #<>greet_clr_line1
.19092f		85 00		sta $00		                STA TMPPTR1
.190931		a9 19 00	lda #$0019	                LDA #`greet_clr_line1
.190934		85 02		sta $02		                STA TMPPTR1+2
.190936		20 f0 08	jsr $1908f0	                JSR COPYBYTES42
.190939		18		clc		                CLC
.19093a		a5 04		lda $04		                LDA TMPPTR2
.19093c		65 11		adc $11		                ADC COLS_PER_LINE
.19093e		85 04		sta $04		                STA TMPPTR2
.190940		a9 26 82	lda #$8226	                LDA #<>greet_clr_line2
.190943		85 00		sta $00		                STA TMPPTR1
.190945		a9 19 00	lda #$0019	                LDA #`greet_clr_line2
.190948		85 02		sta $02		                STA TMPPTR1+2
.19094a		20 f0 08	jsr $1908f0	                JSR COPYBYTES42
.19094d		18		clc		                CLC
.19094e		a5 04		lda $04		                LDA TMPPTR2
.190950		65 11		adc $11		                ADC COLS_PER_LINE
.190952		85 04		sta $04		                STA TMPPTR2
.190954		a9 50 82	lda #$8250	                LDA #<>greet_clr_line3
.190957		85 00		sta $00		                STA TMPPTR1
.190959		a9 19 00	lda #$0019	                LDA #`greet_clr_line3
.19095c		85 02		sta $02		                STA TMPPTR1+2
.19095e		20 f0 08	jsr $1908f0	                JSR COPYBYTES42
.190961		18		clc		                CLC
.190962		a5 04		lda $04		                LDA TMPPTR2
.190964		65 11		adc $11		                ADC COLS_PER_LINE
.190966		85 04		sta $04		                STA TMPPTR2
.190968		a9 7a 82	lda #$827a	                LDA #<>greet_clr_line4
.19096b		85 00		sta $00		                STA TMPPTR1
.19096d		a9 19 00	lda #$0019	                LDA #`greet_clr_line4
.190970		85 02		sta $02		                STA TMPPTR1+2
.190972		20 f0 08	jsr $1908f0	                JSR COPYBYTES42
.190975		18		clc		                CLC
.190976		a5 04		lda $04		                LDA TMPPTR2
.190978		65 11		adc $11		                ADC COLS_PER_LINE
.19097a		85 04		sta $04		                STA TMPPTR2
.19097c		a9 a4 82	lda #$82a4	                LDA #<>greet_clr_line5
.19097f		85 00		sta $00		                STA TMPPTR1
.190981		a9 19 00	lda #$0019	                LDA #`greet_clr_line5
.190984		85 02		sta $02		                STA TMPPTR1+2
.190986		20 f0 08	jsr $1908f0	                JSR COPYBYTES42
.190989		2b		pld		                PLD
.19098a		ab		plb		                PLB
.19098b		28		plp		                PLP
.19098c		7a		ply		                PLY
.19098d		fa		plx		                PLX
.19098e		68		pla		                PLA
.19098f		6b		rtl		                RTL
.190990		0b		phd		IINITCHLUT		  PHD
.190991		08		php		                PHP
.190992		48		pha		                PHA
.190993		da		phx		                PHX
.190994		22 f0 6b 19	jsl $196bf0	                JSL ANSI_INIT_LUTS
.190998		fa		plx		                PLX
.190999		68		pla		                PLA
.19099a		28		plp		                PLP
.19099b		2b		pld		                PLD
.19099c		6b		rtl		                RTL
.19099d						IINITGAMMATABLE
.19099d		e2 20		sep #$20	                SEP #$20        ; set A short
.19099f		c2 10		rep #$10	                REP #$10        ; set X long
.1909a1		a2 00 00	ldx #$0000	                ldx #$0000
.1909a4		bf 00 8a 19	lda $198a00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.1909a8		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.1909ac		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.1909b0		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.1909b4		e8		inx		                inx
.1909b5		e0 00 01	cpx #$0100	                cpx #$0100
.1909b8		d0 ea		bne $1909a4	                bne initgammaloop
.1909ba		c2 30		rep #$30	                REP #$30        ; set A&X long
.1909bc		6b		rtl		                RTL
.1909bd		48		pha		IINITALLLUT     PHA
.1909be		da		phx		                PHX
.1909bf		a2 00 00	ldx #$0000	                LDX #$0000
.1909c2		e2 20		sep #$20	                SEP #$20        ; set A short
.1909c4		a9 00		lda #$00	                LDA #$00
.1909c6		85 0a		sta $0a		                STA $0A     ; Temp Location
.1909c8						iinit_lut_loop
.1909c8		86 02		stx $02		                STX $02
.1909ca		a6 0a		ldx $0a		                LDX $0A
.1909cc		bf 00 89 19	lda $198900,x	                LDA GAMMA_2_2_Tbl, x
.1909d0		49 55		eor #$55	                EOR  #$55
.1909d2		a6 02		ldx $02		                LDX $02
.1909d4		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.1909d8		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.1909dc		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.1909e0		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.1909e4		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.1909e8		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.1909ec		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.1909f0		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.1909f4		e8		inx		                inx
.1909f5		86 02		stx $02		                STX $02
.1909f7		a6 0a		ldx $0a		                LDX $0A
.1909f9		bf 00 8b 19	lda $198b00,x	                LDA RANDOM_LUT_Tbl, x
.1909fd		a6 02		ldx $02		                LDX $02
.1909ff		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a03		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a07		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a0b		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a0f		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a13		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a17		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a1b		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a1f		e8		inx		                inx
.190a20		86 02		stx $02		                STX $02
.190a22		a6 0a		ldx $0a		                LDX $0A
.190a24		bf 00 8a 19	lda $198a00,x	                LDA GAMMA_1_8_Tbl, x
.190a28		49 aa		eor #$aa	                EOR  #$AA
.190a2a		a6 02		ldx $02		                LDX $02
.190a2c		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a30		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a34		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a38		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a3c		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a40		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a44		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a48		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a4c		e8		inx		                inx
.190a4d		a9 ff		lda #$ff	                LDA #$FF
.190a4f		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a53		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a57		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a5b		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a5f		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a63		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a67		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a6b		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a6f		e6 0a		inc $0a		                inc $0A
.190a71		e8		inx		                inx
.190a72		e0 00 04	cpx #$0400	                cpx #$0400
.190a75		f0 03		beq $190a7a	                beq iinit_lut_exit
.190a77		82 4e ff	brl $1909c8	                brl iinit_lut_loop
.190a7a						iinit_lut_exit
.190a7a		c2 30		rep #$30	                REP #$30        ; set A&X long
.190a7c		fa		plx		                PLX
.190a7d		68		pla		                PLA
.190a7e		6b		rtl		                RTL
.190a7f						INITVKYTXTMODE_BYPASS_DPSW
.190a7f		48		pha		                PHA
.190a80		08		php		                PHP
.190a81		80 24		bra $190aa7	                BRA WeNeed640480Here
.190a83						IINITVKYTXTMODE
.190a83		48		pha		                PHA
.190a84		08		php		                PHP
.190a85		e2 20		sep #$20	                SEP #$20        ; set A short
.190a87		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.190a8b		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.190a8d		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.190a8f		f0 16		beq $190aa7	                BEQ WeNeed640480Here
.190a91		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190a95		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.190a97		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.190a99		f0 33		beq $190ace	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.190a9b		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.190a9f		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.190aa1		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190aa5		80 27		bra $190ace	                BRA INITVICKYMODEHIRES
.190aa7						WeNeed640480Here:
.190aa7		e2 20		sep #$20	                SEP #$20        ; set A short
.190aa9		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190aad		29 01		and #$01	                AND #$01
.190aaf		c9 01		cmp #$01	                CMP #$01
.190ab1		d0 15		bne $190ac8	                BNE INITVICKYMODE
.190ab3		a9 00		lda #$00	                LDA #$00
.190ab5		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190ab9		ea		nop		                NOP
.190aba		ea		nop		                NOP
.190abb		ea		nop		                NOP
.190abc		ea		nop		                NOP
.190abd		ea		nop		                NOP
.190abe		a9 01		lda #$01	                LDA #$01
.190ac0		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190ac4		ea		nop		                NOP
.190ac5		ea		nop		                NOP
.190ac6		ea		nop		                NOP
.190ac7		ea		nop		                NOP
.190ac8						INITVICKYMODE
.190ac8		a9 00		lda #$00	                LDA #$00
.190aca		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.190ace						INITVICKYMODEHIRES
.190ace		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.190ad0		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.190ad4		e2 20		sep #$20	                SEP #$20        ; set A short
.190ad6		a9 00		lda #$00	                LDA #$00
.190ad8		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.190adc		a9 54		lda #$54	                LDA #$54
.190ade		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.190ae2		a9 54		lda #$54	                LDA #$54
.190ae4		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.190ae8		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.190aea		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.190aee		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.190af0		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.190af4		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.190af8		c2 30		rep #$30	                REP #$30        ; set A&X long
.190afa		22 2c 11 00	jsl $00112c	                JSL SETSIZES                      ; Calculate the size of the text screen
.190afe		28		plp		                PLP
.190aff		68		pla		                PLA
.190b00		6b		rtl		                RTL
.190b01						ISETSIZES
.190b01		22 c1 6c 19	jsl $196cc1	                JSL ANSI_SETSIZES
.190b05		6b		rtl		                RTL
.190b06						IINITVKYGRPMODE
.190b06		48		pha		                PHA
.190b07		e2 20		sep #$20	                SEP #$20        ; set A short
.190b09		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190b0b		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.190b0f		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190b11		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.190b15		a9 c0		lda #$c0	                LDA #$C0
.190b17		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.190b1b		a9 00		lda #$00	                LDA #$00
.190b1d		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.190b21		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190b23		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.190b27		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190b29		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.190b2d		a9 c0		lda #$c0	                LDA #$C0
.190b2f		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.190b33		a9 00		lda #$00	                LDA #$00
.190b35		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.190b39		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b3b		68		pla		                PLA
.190b3c		6b		rtl		                RTL
.190b3d						IINITTILEMODE
.190b3d		6b		rtl		                RTL
.190b3e						IREADVRAM
.190b3e		08		php		                PHP
.190b3f		e2 20		sep #$20	                SEP #$20        ; set A short
.190b41		bd 00 00	lda $000000,x	                LDA #0,B,X                      ; Request the byte
.190b44		c2 20		rep #$20	                REP #$20        ; set A long
.190b46		a2 64 00	ldx #$0064	                LDX #100
.190b49		af 02 09 af	lda $af0902	wait_loop       LDA @l VMEM2CPU_Fifo_Count_LO   ; Wait for the FIFO to have data
.190b4d		89 00 80	bit #$8000	                BIT #$8000
.190b50		f0 06		beq $190b58	                BEQ read_byte                   ; If it has data, go read the byte
.190b52		ca		dex		                DEX                             ; Otherwise, decrement timeout counter
.190b53		d0 f4		bne $190b49	                BNE wait_loop                   ; Keep waiting so long as it's not 0
.190b55		28		plp		ret_failure     PLP                             ; Return failure
.190b56		18		clc		                CLC
.190b57		6b		rtl		                RTL
.190b58						read_byte
.190b58		e2 20		sep #$20	                SEP #$20        ; set A short
.190b5a		af 01 09 af	lda $af0901	                LDA @l VMEM2CPU_Data_Port       ; Get the byte from Vicky
.190b5e		28		plp		ret_success     PLP                             ; Return success
.190b5f		18		clc		                CLC
.190b60		6b		rtl		                RTL
.190b61		6b		rtl		INOP            RTL
.190b62						IINITFONTSET
.190b62		48		pha		                PHA
.190b63		da		phx		                PHX
.190b64		5a		phy		                PHY
.190b65		8b		phb		                PHB
.190b66		08		php		                PHP
.190b67		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b69		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.190b6c		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.190b6f		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.190b72		54 af 1f	mvn $1f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.190b75		28		plp		                PLP
.190b76		ab		plb		                PLB
.190b77		7a		ply		                PLY
.190b78		fa		plx		                PLX
.190b79		68		pla		                PLA
.190b7a		6b		rtl		                RTL
.190b7b						INITMOUSEPOINTER
.190b7b		e2 20		sep #$20	                SEP #$20        ; set A short
.190b7d		c2 10		rep #$10	                REP #$10        ; set X long
.190b7f		a2 00 00	ldx #$0000	                LDX #$0000
.190b82						FILL_MOUSE_MARKER
.190b82		bf 00 8c 19	lda $198c00,x	                LDA @lMOUSE_POINTER_PTR,X
.190b86		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.190b8a		e8		inx		                INX
.190b8b		e0 00 01	cpx #$0100	                CPX #$0100
.190b8e		d0 f2		bne $190b82	                BNE FILL_MOUSE_MARKER
.190b90		ea		nop		                nop
.190b91		a9 01		lda #$01	                LDA #$01
.190b93		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.190b97		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b99		6b		rtl		                RTL
.190b9a						IINITCURSOR
.190b9a		e2 20		sep #$20	                SEP #$20        ; set A short
.190b9c		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.190b9e		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.190ba2		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.190ba4		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.190ba8		c2 30		rep #$30	                REP #$30        ; set A&X long
.190baa		a9 00 00	lda #$0000	                LDA #$0000;
.190bad		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.190bb1		a9 06 00	lda #$0006	                LDA #$0006;
.190bb4		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.190bb8		6b		rtl		                RTL
.190bb9		0b		phd		IINITSUPERIO	  PHD
.190bba		08		php		                PHP
.190bbb		48		pha		                PHA
.190bbc		e2 20		sep #$20	                SEP #$20        ; set A short
.190bbe		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bc0		8f 23 11 af	sta $af1123	                STA GP10_REG
.190bc4		af 23 11 af	lda $af1123	                LDA GP10_REG
.190bc8		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bca		8f 24 11 af	sta $af1124	                STA GP11_REG
.190bce		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bd0		8f 25 11 af	sta $af1125	                STA GP12_REG
.190bd4		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bd6		8f 26 11 af	sta $af1126	                STA GP13_REG
.190bda		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.190bdc		8f 27 11 af	sta $af1127	                STA GP14_REG
.190be0		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.190be2		8f 28 11 af	sta $af1128	                STA GP15_REG
.190be6		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.190be8		8f 29 11 af	sta $af1129	                STA GP16_REG
.190bec		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.190bee		8f 2a 11 af	sta $af112a	                STA GP17_REG
.190bf2		a9 00		lda #$00	                LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.190bf4		8f 2b 11 af	sta $af112b	                STA GP20_REG
.190bf8		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bfa		8f 2f 11 af	sta $af112f	                STA GP24_REG
.190bfe		a9 05		lda #$05	                LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.190c00		8f 30 11 af	sta $af1130	                STA GP25_REG
.190c04		a9 84		lda #$84	                LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.190c06		8f 31 11 af	sta $af1131	                STA GP26_REG
.190c0a		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.190c0c		8f 33 11 af	sta $af1133	                STA GP30_REG
.190c10		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.190c12		8f 34 11 af	sta $af1134	                STA GP31_REG
.190c16		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.190c18		8f 35 11 af	sta $af1135	                STA GP32_REG
.190c1c		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.190c1e		8f 36 11 af	sta $af1136	                STA GP33_REG
.190c22		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.190c24		8f 37 11 af	sta $af1137	                STA GP34_REG
.190c28		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.190c2a		8f 38 11 af	sta $af1138	                STA GP35_REG
.190c2e		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.190c30		8f 39 11 af	sta $af1139	                STA GP36_REG
.190c34		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.190c36		8f 3a 11 af	sta $af113a	                STA GP37_REG
.190c3a		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190c3c		8f 3d 11 af	sta $af113d	                STA GP42_REG
.190c40		a9 01		lda #$01	                LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.190c42		8f 3e 11 af	sta $af113e	                STA GP43_REG
.190c46		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.190c48		8f 3f 11 af	sta $af113f	                STA GP50_REG
.190c4c		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.190c4e		8f 40 11 af	sta $af1140	                STA GP51_REG
.190c52		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.190c54		8f 41 11 af	sta $af1141	                STA GP52_REG
.190c58		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.190c5a		8f 42 11 af	sta $af1142	                STA GP53_REG
.190c5e		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.190c60		8f 43 11 af	sta $af1143	                STA GP54_REG
.190c64		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.190c66		8f 44 11 af	sta $af1144	                STA GP55_REG
.190c6a		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.190c6c		8f 45 11 af	sta $af1145	                STA GP56_REG
.190c70		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.190c72		8f 46 11 af	sta $af1146	                STA GP57_REG
.190c76		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.190c78		8f 47 11 af	sta $af1147	                STA GP60_REG
.190c7c		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.190c7e		8f 48 11 af	sta $af1148	                STA GP61_REG
.190c82		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.190c84		8f 4b 11 af	sta $af114b	                STA GP1_REG
.190c88		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.190c8a		8f 4c 11 af	sta $af114c	                STA GP2_REG
.190c8e		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.190c90		8f 4d 11 af	sta $af114d	                STA GP3_REG
.190c94		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.190c96		8f 4e 11 af	sta $af114e	                STA GP4_REG
.190c9a		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.190c9c		8f 4f 11 af	sta $af114f	                STA GP5_REG
.190ca0		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.190ca2		8f 50 11 af	sta $af1150	                STA GP6_REG
.190ca6		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.190ca8		8f 5d 11 af	sta $af115d	                STA LED1_REG
.190cac		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.190cae		8f 5e 11 af	sta $af115e	                STA LED2_REG
.190cb2		c2 20		rep #$20	                REP #$20        ; set A long
.190cb4		68		pla		                PLA
.190cb5		28		plp			              PLP
.190cb6		2b		pld				            PLD
.190cb7		6b		rtl		                RTL
.190cb8		48		pha		INITRTC         PHA
.190cb9		08		php		                PHP
.190cba		e2 20		sep #$20	                SEP #$20        ; set A short
.190cbc		a9 00		lda #$00	                LDA #0
.190cbe		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.190cc2		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.190cc6		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.190cca		09 04		ora #$04	                ORA #%00000100
.190ccc		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.190cd0		28		plp		                PLP
.190cd1		68		pla		                PLA
.190cd2		6b		rtl		                RTL
.190cd3		48		pha		IINITCODEC      PHA
.190cd4		08		php		                PHP
.190cd5		c2 20		rep #$20	                REP #$20        ; set A long
.190cd7		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.190cda		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190cde		a9 01 00	lda #$0001	                LDA #$0001
.190ce1		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190ce5		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190ce8		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.190ceb		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190cef		a9 01 00	lda #$0001	                LDA #$0001
.190cf2		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190cf6		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190cf9		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.190cfc		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d00		a9 01 00	lda #$0001	                LDA #$0001
.190d03		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d07		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d0a		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.190d0d		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d11		a9 01 00	lda #$0001	                LDA #$0001
.190d14		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d18		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d1b		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.190d1e		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d22		a9 01 00	lda #$0001	                LDA #$0001
.190d25		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d29		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d2c		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.190d2f		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d33		a9 01 00	lda #$0001	                LDA #$0001
.190d36		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d3a		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d3d		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.190d40		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d44		a9 01 00	lda #$0001	                LDA #$0001
.190d47		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d4b		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d4e		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.190d51		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d55		a9 01 00	lda #$0001	                LDA #$0001
.190d58		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d5c		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d5f		28		plp		                PLP
.190d60		68		pla		                PLA
.190d61		6b		rtl		                RTL
.190d62						IRESETCODEC
.190d62		c2 20		rep #$20	                REP #$20        ; set A long
.190d64		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.190d67		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d6b		a9 01 00	lda #$0001	                LDA #$0001
.190d6e		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d72		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d75		6b		rtl		                RTL
.190d76						CODEC_TRF_FINISHED
.190d76		e2 20		sep #$20	                SEP #$20        ; set A short
.190d78		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.190d7c		29 01		and #$01	                AND #$01
.190d7e		c9 01		cmp #$01	                CMP #$01
.190d80		f0 f6		beq $190d78	                BEQ CODEC_LOOP
.190d82		c2 20		rep #$20	                REP #$20        ; set A long
.190d84		60		rts		                RTS
.190d85						IBM_FILL_SCREEN
.190d85		c2 30		rep #$30	                REP #$30        ; set A&X long
.190d87		a9 00 00	lda #$0000	                LDA #$0000
.190d8a		a2 00 00	ldx #$0000	                LDX #$0000
.190d8d						BM_FILL_SCREEN_LOOPY
.190d8d		a0 00 00	ldy #$0000	                LDY #$0000
.190d90		e2 20		sep #$20	                SEP #$20        ; set A short
.190d92						BM_FILL_SCREEN_LOOPX
.190d92		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190d94		c8		iny		                INY
.190d95		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.190d97		d0 f9		bne $190d92	                BNE BM_FILL_SCREEN_LOOPX
.190d99		20 a4 0d	jsr $190da4	                JSR BM_FILL_COMPUTE_Y_DST
.190d9c		e8		inx		                INX
.190d9d		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.190d9f		d0 ec		bne $190d8d	                BNE BM_FILL_SCREEN_LOOPY
.190da1		c2 30		rep #$30	                REP #$30        ; set A&X long
.190da3		6b		rtl		                RTL
.190da4						BM_FILL_COMPUTE_Y_DST
.190da4		c2 20		rep #$20	                REP #$20        ; set A long
.190da6		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190da8		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190dac		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.190dae		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190db2		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.190db5		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190db9		a9 00 00	lda #$0000	                LDA #$0000
.190dbc		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190dc0		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190dc4		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190dc6		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190dca		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190dcc		a9 00 00	lda #$0000	                LDA #$0000
.190dcf		60		rts		                RTS
.190dd0						IBMP_PARSER
.190dd0		c2 30		rep #$30	                REP #$30        ; set A&X long
.190dd2		a0 00 00	ldy #$0000	                LDY #$0000
.190dd5		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.190dd7		c9 42 4d	cmp #$4d42	                CMP #$4D42
.190dda		f0 03		beq $190ddf	                BEQ IBMP_PARSER_CONT
.190ddc		82 04 01	brl $190ee3	                BRL BMP_PARSER_END_WITH_ERROR
.190ddf						IBMP_PARSER_CONT
.190ddf		a0 02 00	ldy #$0002	                LDY #$0002
.190de2		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.190de4		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190de8		a0 04 00	ldy #$0004	                LDY #$0004
.190deb		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.190ded		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190df1		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.190df4		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190df8		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190dfc		18		clc		                CLC
.190dfd		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190e01		85 50		sta $50		                STA BMP_FILE_SIZE
.190e03		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190e07		85 52		sta $52		                STA BMP_FILE_SIZE+2
.190e09		a0 12 00	ldy #$0012	                LDY #$0012
.190e0c		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e0e		85 40		sta $40		                STA BMP_X_SIZE
.190e10		a0 16 00	ldy #$0016	                LDY #$0016
.190e13		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e15		85 42		sta $42		                STA BMP_Y_SIZE
.190e17		a0 2e 00	ldy #$002e	                LDY #$002E
.190e1a		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e1c		0a		asl a		                ASL A; Multiply by 2
.190e1d		0a		asl a		                ASL A; Multiply by 2
.190e1e		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.190e20		e0 00 00	cpx #$0000	                CPX #$0000
.190e23		d0 05		bne $190e2a	                BNE BMP_LUT1_PICK
.190e25		20 eb 0e	jsr $190eeb	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.190e28		80 08		bra $190e32	                BRA DONE_TRANSFER_LUT;
.190e2a						  BMP_LUT1_PICK
.190e2a		e0 01 00	cpx #$0001	                CPX #$0001
.190e2d		d0 03		bne $190e32	                BNE BMP_LUT2_PICK
.190e2f		20 1b 0f	jsr $190f1b	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.190e32						  BMP_LUT2_PICK
.190e32						  DONE_TRANSFER_LUT
.190e32		a5 56		lda $56		                LDA BMP_POSITION_Y
.190e34		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.190e38		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.190e3a		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.190e3e		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.190e42		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190e46		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.190e4a		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190e4e		a5 54		lda $54		                LDA BMP_POSITION_X
.190e50		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.190e54		a9 00 00	lda #$0000	                LDA #$0000
.190e57		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190e5b		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.190e5f		85 f0		sta $f0		                STA USER_TEMP
.190e61		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.190e65		85 f2		sta $f2		                STA USER_TEMP+2
.190e67		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190e69		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190e6d		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190e6f		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190e73		a5 f0		lda $f0		                LDA USER_TEMP
.190e75		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.190e79		a5 f2		lda $f2		                LDA USER_TEMP+2
.190e7b		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.190e7f		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.190e83		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190e85		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.190e89		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190e8b		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.190e8d		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190e91		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.190e93		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190e97		a5 50		lda $50		                LDA BMP_FILE_SIZE
.190e99		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190e9d		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.190e9f		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190ea3		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190ea7		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190ea9		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190ead		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190eaf		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190eb1		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190eb5		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190eb7		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190ebb		18		clc		                CLC
.190ebc		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.190ebe		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.190ec1		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.190ec4		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.190ec8		a9 ff ff	lda #$ffff	                LDA #$FFFF
.190ecb		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.190ecf		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190ed3		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190ed5		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190ed9		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190edb		20 4b 0f	jsr $190f4b	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.190ede		a2 60 84	ldx #$8460	                LDX #<>bmp_parser_msg0
.190ee1		80 03		bra $190ee6	                BRA BMP_PARSER_END_NO_ERROR
.190ee3						BMP_PARSER_END_WITH_ERROR
.190ee3		a2 4c 84	ldx #$844c	                LDX #<>bmp_parser_err0
.190ee6						BMP_PARSER_END_NO_ERROR
.190ee6		22 01 07 19	jsl $190701	                JSL IPRINT       ; print the first line
.190eea		6b		rtl		                RTL
.190eeb						BMP_PARSER_UPDATE_LUT0
.190eeb		38		sec		                SEC
.190eec		a0 7a 00	ldy #$007a	                LDY #$007A
.190eef		a2 00 00	ldx #$0000	                LDX #$0000
.190ef2		e2 20		sep #$20	                SEP #$20        ; set A short
.190ef4						BMP_PARSER_UPDATE_LOOP
.190ef4		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190ef6		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.190efa		c8		iny		                INY
.190efb		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190efd		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.190f01		c8		iny		                INY
.190f02		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190f04		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.190f08		c8		iny		                INY
.190f09		a9 80		lda #$80	                LDA #$80
.190f0b		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.190f0f		c8		iny		                INY ; For the Alpha Value, nobody cares
.190f10		e8		inx		                INX
.190f11		e8		inx		                INX
.190f12		e8		inx		                INX
.190f13		e8		inx		                INX
.190f14		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190f16		d0 dc		bne $190ef4	                BNE BMP_PARSER_UPDATE_LOOP
.190f18		c2 20		rep #$20	                REP #$20        ; set A long
.190f1a		60		rts		                RTS
.190f1b						BMP_PARSER_UPDATE_LUT1
.190f1b		38		sec		                SEC
.190f1c		a0 36 00	ldy #$0036	                LDY #$0036
.190f1f		a2 00 00	ldx #$0000	                LDX #$0000
.190f22		e2 20		sep #$20	                SEP #$20        ; set A short
.190f24						PALETTE_LUT1_LOOP
.190f24		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190f26		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.190f2a		c8		iny		                INY
.190f2b		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190f2d		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.190f31		c8		iny		                INY
.190f32		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190f34		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.190f38		c8		iny		                INY
.190f39		a9 80		lda #$80	                LDA #$80
.190f3b		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.190f3f		c8		iny		                INY ; For the Alpha Value, nobody cares
.190f40		e8		inx		                INX
.190f41		e8		inx		                INX
.190f42		e8		inx		                INX
.190f43		e8		inx		                INX
.190f44		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190f46		d0 dc		bne $190f24	                BNE PALETTE_LUT1_LOOP
.190f48		c2 20		rep #$20	                REP #$20        ; set A long
.190f4a		60		rts		                RTS
.190f4b						BMP_PARSER_DMA_SHIT_OUT
.190f4b		a2 00 00	ldx #$0000	                LDX #$0000
.190f4e						BMP_PARSER_LOOPY
.190f4e		a0 00 00	ldy #$0000	                LDY #$0000
.190f51		e2 20		sep #$20	                SEP #$20        ; set A short
.190f53						BMP_PARSER_LOOPX
.190f53		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.190f55		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190f57		c8		iny		                INY
.190f58		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.190f5a		d0 f7		bne $190f53	                BNE BMP_PARSER_LOOPX
.190f5c		20 68 0f	jsr $190f68	                JSR BMP_PARSER_COMPUTE_Y_SRC
.190f5f		20 83 0f	jsr $190f83	                JSR BMP_PARSER_COMPUTE_Y_DST
.190f62		e8		inx		                INX
.190f63		e4 42		cpx $42		                CPX BMP_Y_SIZE
.190f65		d0 e7		bne $190f4e	                BNE BMP_PARSER_LOOPY
.190f67		60		rts		                RTS
.190f68						BMP_PARSER_COMPUTE_Y_SRC
.190f68		c2 20		rep #$20	                REP #$20        ; set A long
.190f6a		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190f6c		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190f70		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190f72		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190f76		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190f7a		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190f7c		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190f80		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190f82		60		rts		                RTS
.190f83						BMP_PARSER_COMPUTE_Y_DST
.190f83		c2 20		rep #$20	                REP #$20        ; set A long
.190f85		18		clc		                CLC
.190f86		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190f88		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.190f8a		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190f8c		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190f8e		69 00 00	adc #$0000	                ADC #$0000
.190f91		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190f93		60		rts		                RTS
.190f94		ea		nop		ILOOP           NOP
.190f95		ea		nop		                NOP
.190f96		ea		nop		                NOP
.190f97		ea		nop		                NOP
.190f98		ea		nop		                NOP
.190f99		ea		nop		                NOP
.190f9a		ea		nop		                NOP
.190f9b		ea		nop		                NOP
.190f9c		ea		nop		                NOP
.190f9d		ea		nop		                NOP
.190f9e		6b		rtl		                RTL
.190f9f		22 94 0f 19	jsl $190f94	ILOOP_1         JSL ILOOP
.190fa3		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fa7		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fab		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190faf		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fb3		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fb7		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fbb		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fbf		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fc3		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fc7		6b		rtl		                RTL
.190fc8		22 9f 0f 19	jsl $190f9f	ILOOP_1MS       JSL ILOOP_1
.190fcc		6b		rtl		                RTL
.190fcd		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.190fd0		f0 07		beq $190fd9	                BEQ LOOP_MS_END
.190fd2		22 c8 0f 19	jsl $190fc8	                JSL ILOOP_1MS
.190fd6		ca		dex		                DEX
.190fd7		80 f4		bra $190fcd	                BRA ILOOP_MS
.190fd9		6b		rtl		LOOP_MS_END     RTL
.190fda						IDELAY
.190fda		8b		phb		                PHB
.190fdb		08		php		                PHP
.190fdc		48		pha		                PHA             ; begin setdbr macro
.190fdd		08		php		                PHP
.190fde		e2 20		sep #$20	                SEP #$20        ; set A short
.190fe0		a9 00		lda #$00	                LDA #0
.190fe2		48		pha		                PHA
.190fe3		ab		plb		                PLB
.190fe4		28		plp		                PLP
.190fe5		68		pla		                PLA             ; end setdbr macro
.190fe6		e2 20		sep #$20	                SEP #$20        ; set A short
.190fe8		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.190fea		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.190fee		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.190ff2		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.190ff4		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.190ff8		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.190ffa		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.190ffd		a9 00		lda #$00	                LDA #0
.190fff		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.191003		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.191007		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.19100b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19100d		8a		txa		                TXA
.19100e		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.191012		98		tya		                TYA
.191013		e2 20		sep #$20	                SEP #$20        ; set A short
.191015		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.191019		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.19101b		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.19101f		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.191021		cb		wai		loop            WAI                         ; Wait for an interrupt
.191022		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.191025		f0 fa		beq $191021	                BEQ loop                    ; Keep checking until it's set
.191027		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.191029		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.19102d		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.19102f		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.191032		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.191036		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.191038		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.19103c		28		plp		                PLP
.19103d		ab		plb		                PLB
.19103e		6b		rtl		                RTL
.19103f						SHOW_CREDITS
.19103f		48		pha		                PHA
.191040		da		phx		                PHX
.191041		5a		phy		                PHY
.191042		08		php		                PHP
.191043		e2 20		sep #$20	                SEP #$20        ; set A short
.191045		c2 10		rep #$10	                REP #$10        ; set X long
.191047		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.19104b		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.19104d		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.191051		a2 00 00	ldx #$0000	                LDX #0
.191054		bf 00 00 1b	lda $1b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.191058		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.19105c		bf 00 18 1b	lda $1b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.191060		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.191064		e8		inx		                INX
.191065		e0 00 20	cpx #$2000	                CPX #128 * 64
.191068		d0 ea		bne $191054	                BNE credit_loop
.19106a		22 9b 06 19	jsl $19069b	                JSL IGETCHW                     ; Wait for a keypress
.19106e		22 e5 08 19	jsl $1908e5	                JSL ICLRSCREEN                  ; Then clear the screen and return
.191072		22 15 08 19	jsl $190815	                JSL ICSRHOME                    ; Move cursor to the home position
.191076		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.19107a		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.19107c		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.191080		28		plp		                PLP
.191081		7a		ply		                PLY
.191082		fa		plx		                PLX
.191083		68		pla		                PLA
.191084		6b		rtl		                RTL
.191085		00		brk #		ISCINIT         BRK ;
.191086		00		brk #		IIOINIT         BRK ;
.191087		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.191088		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.191089		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.19108a		00		brk #		ICLOSE          BRK ; Close a channel
.19108b		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.19108c		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.19108d		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.19108e		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.19108f		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.191090		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.191091		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.191092		00		brk #		IPRINTF         BRK ; Print a float value
.191093		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.191094		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.191095		00		brk #		IPUSHKEY        BRK ;
.191096		00		brk #		IPUSHKEYS       BRK ;
.191097		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.191098		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.191099		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>19109a		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>1910a2		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>1910b2		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>1910ba		12
>1910bb		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>1910c3		15
>1910c4		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>1910ca		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>1910cf		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Instruments.asm

>1910d5		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>1910dd		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>1910eb		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>1910f3		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>191101		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>191109		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>191117		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>19111f		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>19112d		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>191135		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>191143		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>19114b		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>191159		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>191161		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>19116f		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>191177		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>191185		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>19118d		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>19119b		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>1911a3		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>1911b1		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>1911b9		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>1911c7		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>1911cf		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>1911dd		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>1911e5		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>1911f3		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>1911fb		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>191209		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>191211		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>19121f		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>191227		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>191235		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>19123d		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>19124b		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>191253		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>191261		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>191269		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>191277		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>19127f		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>19128d		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>191295		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>1912a3		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>1912ab		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>1912b9		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>1912c1		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>1912cf		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>1912d7		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>1912e5		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>1912ed		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>1912fb		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>191303		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>191311		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>191319		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>191327		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>19132f		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>19133d		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>191345		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>191353		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>19135b		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>191369		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>191371		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>19137f		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>191387		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>191395		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>19139d		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>1913ab		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>1913b3		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>1913c1		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>1913c9		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>1913d7		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>1913df		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>1913ed		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>1913f5		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>191403		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>19140b		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>191419		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>191421		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>19142f		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>191437		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>191445		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>19144d		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>19145b		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>191463		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>191471		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>191479		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>191487		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>19148f		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>19149d		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>1914a5		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>1914b3		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>1914bb		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>1914c9		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>1914d1		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>1914df		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>1914e7		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>1914f5		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>1914fd		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>19150b		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>191513		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>191521		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>191529		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>191537		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>19153f		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>19154d		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>191555		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>191563		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>19156b		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>191579		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>191581		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>19158f		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>191597		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>1915a5		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>1915ad		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>1915bb		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>1915c3		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>1915d1		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>1915d9		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>1915e7		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>1915ef		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>1915fd		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>191605		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>191613		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>19161b		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>191629		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>191631		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>19163f		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>191647		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>191655		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>19165d		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>19166b		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>191673		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>191681		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>191689		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>191697		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>19169f		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>1916ad		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>1916b5		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>1916c3		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>1916cb		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>1916d9		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>1916e1		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>1916ef		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>1916f7		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>191705		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>19170d		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>19171b		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>191723		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>191731		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>191739		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>191747		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>19174f		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>19175d		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>191765		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>191773		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>19177b		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>191789		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>191791		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>19179f		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>1917a7		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>1917b5		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>1917bd		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>1917cb		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>1917d3		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>1917e1		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>1917e9		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>1917f7		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>1917ff		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>19180d		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>191815		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>191823		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>19182b		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>191839		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>191841		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>19184f		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>191857		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>191865		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>19186d		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>19187b		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>191883		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>191891		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>191899		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>1918a7		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>1918af		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>1918bd		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>1918c5		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>1918d3		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>1918db		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>1918e9		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>1918f1		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>1918ff		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>191907		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>191915		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>19191d		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>19192b		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>191933		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>191941		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>191949		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>191957		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>19195f		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>19196d		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>191975		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>191983		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>19198b		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>191999		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>1919a1		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>1919af		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>1919b7		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>1919c5		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>1919cd		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>1919db		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>1919e3		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>1919f1		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>1919f9		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>191a07		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>191a0f		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>191a1d		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>191a25		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>191a33		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>191a3b		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>191a49		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>191a51		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>191a5f		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>191a67		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>191a75		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>191a7d		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>191a8b		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>191a93		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>191aa1		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>191aa9		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>191ab7		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>191abf		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>191acd		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>191ad5		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>191ae3		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>191aeb		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>191af9		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>191b01		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>191b0f		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>191b17		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>191b25		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>191b2d		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>191b3b		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>191b43		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>191b51		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>191b59		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>191b67		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>191b6f		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>191b7d		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>191b85		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>191b93		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>191b9b		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>191ba9		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>191bb1		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>191bbf		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>191bc7		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>191bd5		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>191bdd		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>191beb		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>191bf3		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>191c01		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>191c09		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>191c17		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>191c1f		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>191c2d		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>191c35		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>191c43		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>191c4b		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>191c59		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>191c61		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>191c6f		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>191c77		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>191c85		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>191c8d		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>191c9b		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>191ca3		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>191cb1		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>191cb9		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>191cc7		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>191ccf		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>191cdd		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>191ce5		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>191cf3		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>191cfb		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>191d09		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>191d11		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>191d1f		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>191d27		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>191d35		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>191d3d		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Drums.asm

>191d4b		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>191d53		00 87 fa 00
>191d57		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>191d5f		00 88 98 03
>191d63		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>191d6b		00 88 98 03
>191d6f		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191d77		00 f9 69 00
>191d7b		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>191d83		80 e8 4a 00
>191d87		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191d8f		00 f6 9a 00
>191d93		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>191d9b		1b f2 34 00
>191d9f		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>191da7		00 f7 8a 00
>191dab		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>191db3		00 f6 47 00
>191db7		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191dbf		00 f9 69 00
>191dc3		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>191dcb		00 f7 a9 00
>191dcf		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>191dd7		00 87 fa 00
>191ddb		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>191de3		00 f7 a9 00
>191de7		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191def		00 f5 f5 00
>191df3		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>191dfb		06 b8 d8 03
>191dff		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e07		00 f5 f5 00
>191e0b		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>191e13		06 b8 d8 03
>191e17		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e1f		00 f5 f5 00
>191e23		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>191e2b		10 74 f8 03
>191e2f		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e37		00 f5 f5 00
>191e3b		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e43		00 f5 f5 00
>191e47		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191e4f		05 c5 d4 03
>191e53		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e5b		00 f5 f5 00
>191e5f		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191e67		04 f9 44 03
>191e6b		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191e73		05 c5 d4 03
>191e77		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191e7f		04 f9 44 03
>191e83		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>191e8b		03 87 f7 03
>191e8f		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191e97		05 c5 d4 03
>191e9b		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>191ea3		00 f6 28 00
>191ea7		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191eaf		05 c5 d4 03
>191eb3		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>191ebb		00 f5 f7 01
>191ebf		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191ec7		04 f9 44 03
>191ecb		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>191ed3		00 99 f9 00
>191ed7		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>191edf		00 a8 f7 00
>191ee3		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>191eeb		00 99 f9 00
>191eef		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>191ef7		00 a6 f6 00
>191efb		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>191f03		00 a6 f6 00
>191f07		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>191f0f		00 f6 36 02
>191f13		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>191f1b		00 f6 36 02
>191f1f		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>191f27		00 96 e8 01
>191f2b		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>191f33		00 96 e8 01
>191f37		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191f3f		02 79 77 03
>191f43		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191f4b		02 79 77 03
>191f4f		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>191f57		00 a5 2b 02
>191f5b		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>191f63		00 93 3b 02
>191f67		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>191f6f		01 89 3b 03
>191f73		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>191f7b		0a 53 2b 02
>191f7f		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>191f87		00 f6 89 00
>191f8b		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191f93		00 f6 9a 00
>191f97		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191f9f		00 f6 9a 00
>191fa3		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>191fab		00 87 4b 01
>191faf		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>191fb7		00 78 67 01
>191fbb		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>191fc3		02 f8 fc 00
>191fc7		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>191fcf		40 f5 f5 00
>191fd3		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191fdb		02 79 77 03
>191fdf		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>191fe7		40 f5 f5 00
>191feb		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>191ff3		40 f5 f5 00
>191ff7		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191fff		00 f9 69 00
>192003		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>19200b		00 f9 69 00
>19200f		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>192017		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>19201b		4b 1d 19 00 57 1d 19 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>192023		63 1d 19 00 6f 1d 19 00
>19202b		7b 1d 19 00 87 1d 19 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>192033		93 1d 19 00 9f 1d 19 00
>19203b		ab 1d 19 00 b7 1d 19 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>192043		c3 1d 19 00 cf 1d 19 00
>19204b		db 1d 19 00 e7 1d 19 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>192053		f3 1d 19 00 ff 1d 19 00
>19205b		0b 1e 19 00 17 1e 19 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>192063		23 1e 19 00 2f 1e 19 00
>19206b		3b 1e 19 00 47 1e 19 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>192073		53 1e 19 00 5f 1e 19 00
>19207b		6b 1e 19 00 77 1e 19 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>192083		83 1e 19 00 8f 1e 19 00
>19208b		9b 1e 19 00 a7 1e 19 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>192093		b3 1e 19 00 bf 1e 19 00
>19209b		cb 1e 19 00 d7 1e 19 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>1920a3		e3 1e 19 00 ef 1e 19 00
>1920ab		fb 1e 19 00 07 1f 19 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>1920b3		13 1f 19 00 1f 1f 19 00
>1920bb		2b 1f 19 00 37 1f 19 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>1920c3		43 1f 19 00 4f 1f 19 00
>1920cb		5b 1f 19 00 67 1f 19 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>1920d3		73 1f 19 00 7f 1f 19 00
>1920db		8b 1f 19 00 97 1f 19 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>1920e3		a3 1f 19 00 af 1f 19 00
>1920eb		bb 1f 19 00 c7 1f 19 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>1920f3		d3 1f 19 00 df 1f 19 00
>1920fb		eb 1f 19 00 f7 1f 19 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>192103		03 20 19 00 0f 20 19 00

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments.asm

>19210b		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>192113		00 b1 f5 01
>192117		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>19211f		03 f1 f5 00
>192123		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>19212b		03 c1 f5 00
>19212f		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>192137		00 92 f5 01
>19213b		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>192143		00 f1 f9 00
>192147		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>19214f		00 f1 f5 00
>192153		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>19215b		02 81 f6 01
>19215f		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>192167		00 c2 b9 01
>19216b		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>192173		05 b2 35 00
>192177		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>19217f		1b f2 34 00
>192183		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>19218b		01 f5 74 00
>19218f		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>192197		00 61 e3 00
>19219b		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>1921a3		00 a4 64 00
>1921a7		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>1921af		07 b5 f5 00
>1921b3		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>1921bb		00 f3 74 00
>1921bf		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>1921c7		00 c3 94 01
>1921cb		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>1921d3		00 f4 0d 01
>1921d7		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>1921df		00 f5 0b 01
>1921e3		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>1921eb		00 bf 07 00
>1921ef		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>1921f7		00 6d 08 01
>1921fb		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>192203		00 51 17 01
>192207		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>19220f		00 51 17 01
>192213		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>19221b		00 53 08 01
>19221f		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>192227		00 53 06 01
>19222b		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>192233		00 d2 f8 00
>192237		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>19223f		00 e2 c7 01
>192243		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>19224b		00 f1 9c 00
>19224f		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>192257		02 f2 c9 01
>19225b		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>192263		03 95 fb 00
>192267		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>19226f		04 a1 59 00
>192273		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>19227b		03 91 fc 03
>19227f		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>192287		02 b4 ec 00
>19228b		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>192293		00 93 f7 00
>192297		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>19229f		04 c1 58 00
>1922a3		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>1922ab		02 c3 6a 00
>1922af		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>1922b7		00 62 87 00
>1922bb		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>1922c3		00 f3 97 00
>1922c7		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>1922cf		00 b3 97 00
>1922d3		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>1922db		04 f3 cc 00
>1922df		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>1922e7		00 93 aa 00
>1922eb		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>1922f3		00 78 08 01
>1922f7		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>1922ff		00 78 08 01
>192303		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>19230b		00 54 27 01
>19230f		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>192317		00 61 56 00
>19231b		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>192323		00 75 16 01
>192327		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>19232f		00 f5 f6 01
>192333		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>19233b		80 f3 e3 00
>19233f		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>192347		00 b5 f5 00
>19234b		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>192353		80 71 16 00
>192357		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>19235f		00 30 55 01
>192363		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>19236b		00 62 36 01
>19236f		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>192377		02 51 07 00
>19237b		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>192383		00 62 39 00
>192387		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>19238f		00 66 27 00
>192393		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>19239b		00 73 46 00
>19239f		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>1923a7		00 74 76 01
>1923ab		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>1923b3		81 92 38 00
>1923b7		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>1923bf		02 71 19 00
>1923c3		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>1923cb		01 81 09 00
>1923cf		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>1923d7		00 83 4b 02
>1923db		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>1923e3		05 71 59 00
>1923e7		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>1923ef		03 82 39 00
>1923f3		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>1923fb		82 84 17 00
>1923ff		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>192407		02 72 16 00
>19240b		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>192413		00 7b 0a 00
>192417		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>19241f		00 85 0c 01
>192423		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>19242b		00 7b 0a 01
>19242f		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>192437		00 79 18 01
>19243b		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>192443		01 73 08 00
>192447		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>19244f		04 77 0a 00
>192453		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>19245b		00 51 19 00
>19245f		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>192467		01 74 09 00
>19246b		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>192473		01 63 28 00
>192477		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>19247f		00 65 0a 00
>192483		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>19248b		00 67 29 00
>19248f		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>192497		00 67 09 00
>19249b		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>1924a3		01 6a 28 00
>1924a7		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>1924af		00 55 27 00
>1924b3		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>1924bb		00 6f 08 00
>1924bf		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>1924c7		00 7a 07 00
>1924cb		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>1924d3		06 a2 0d 00
>1924d7		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>1924df		00 a3 5f 00
>1924e3		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>1924eb		00 42 27 00
>1924ef		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>1924f7		05 b2 49 00
>1924fb		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>192503		00 b2 79 01
>192507		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>19250f		00 7a 1a 00
>192513		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>19251b		00 82 28 01
>19251f		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>192527		02 c3 5f 00
>19252b		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>192533		86 c4 95 01
>192537		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>19253f		00 44 15 00
>192543		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>19254b		00 d1 06 00
>19254f		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>192557		00 82 37 00
>19255b		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>192563		00 41 35 00
>192567		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>19256f		02 32 f5 01
>192573		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>19257b		00 61 26 00
>19257f		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>192587		84 3f 05 01
>19258b		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>192593		01 d1 f6 00
>192597		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>19259f		00 41 05 01
>1925a3		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>1925ab		05 f3 e4 00
>1925af		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>1925b7		00 92 f5 01
>1925bb		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>1925c3		04 f2 e4 01
>1925c7		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>1925cf		00 45 25 00
>1925d3		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>1925db		01 a3 36 00
>1925df		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>1925e7		01 98 05 01
>1925eb		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>1925f3		02 a3 f6 01
>1925f7		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>1925ff		00 f6 f8 00
>192603		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>19260b		00 f3 f5 00
>19260f		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>192617		00 94 e5 01
>19261b		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>192623		00 84 44 00
>192627		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>19262f		03 83 18 01
>192633		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>19263b		01 78 08 01
>19263f		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>192647		03 8e 08 01
>19264b		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>192653		09 f2 46 00
>192657		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>19265f		00 96 e8 01
>192663		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>19266b		00 f6 f6 01
>19266f		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>192677		00 f6 9a 00
>19267b		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>192683		00 c6 45 00
>192687		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>19268f		00 f4 b4 00
>192693		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>19269b		00 d5 25 00
>19269f		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>1926a7		0e 21 2d 00
>1926ab		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>1926b3		00 55 87 02
>1926b7		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>1926bf		08 98 87 01
>1926c3		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>1926cb		04 17 04 03
>1926cf		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>1926d7		05 77 f9 02
>1926db		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>1926e3		02 f4 08 00
>1926e7		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>1926ef		00 36 05 01
>1926f3		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>1926fb		05 32 55 03
>1926ff		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>192707		00 f3 df 00
>19270b		0b 21 19 00 17 21 19 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>192713		23 21 19 00 2f 21 19 00 3b 21 19 00 47 21 19 00
>192723		53 21 19 00 5f 21 19 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>19272b		6b 21 19 00 77 21 19 00 83 21 19 00 8f 21 19 00
>19273b		9b 21 19 00 a7 21 19 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>192743		b3 21 19 00 bf 21 19 00 cb 21 19 00 d7 21 19 00
>192753		e3 21 19 00 ef 21 19 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>19275b		fb 21 19 00 07 22 19 00 13 22 19 00 1f 22 19 00
>19276b		2b 22 19 00 37 22 19 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>192773		43 22 19 00 4f 22 19 00 5b 22 19 00 67 22 19 00
>192783		73 22 19 00 7f 22 19 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>19278b		8b 22 19 00 97 22 19 00 a3 22 19 00 af 22 19 00
>19279b		bb 22 19 00 c7 22 19 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>1927a3		d3 22 19 00 df 22 19 00 eb 22 19 00 f7 22 19 00
>1927b3		03 23 19 00 0f 23 19 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>1927bb		1b 23 19 00 27 23 19 00 33 23 19 00 3f 23 19 00
>1927cb		4b 23 19 00 57 23 19 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>1927d3		63 23 19 00 6f 23 19 00 7b 23 19 00 87 23 19 00
>1927e3		93 23 19 00 9f 23 19 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>1927eb		ab 23 19 00 b7 23 19 00 c3 23 19 00 cf 23 19 00
>1927fb		db 23 19 00 e7 23 19 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>192803		f3 23 19 00 ff 23 19 00 0b 24 19 00 17 24 19 00
>192813		23 24 19 00 2f 24 19 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>19281b		3b 24 19 00 47 24 19 00 53 24 19 00 5f 24 19 00
>19282b		6b 24 19 00 77 24 19 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>192833		83 24 19 00 8f 24 19 00 9b 24 19 00 a7 24 19 00
>192843		b3 24 19 00 bf 24 19 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>19284b		cb 24 19 00 d7 24 19 00 e3 24 19 00 ef 24 19 00
>19285b		fb 24 19 00 07 25 19 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>192863		13 25 19 00 1f 25 19 00 2b 25 19 00 37 25 19 00
>192873		43 25 19 00 4f 25 19 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>19287b		5b 25 19 00 67 25 19 00 73 25 19 00 7f 25 19 00
>19288b		8b 25 19 00 97 25 19 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>192893		a3 25 19 00 af 25 19 00 bb 25 19 00 c7 25 19 00
>1928a3		d3 25 19 00 df 25 19 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>1928ab		eb 25 19 00 f7 25 19 00 03 26 19 00 0f 26 19 00
>1928bb		1b 26 19 00 27 26 19 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>1928c3		33 26 19 00 3f 26 19 00 4b 26 19 00 57 26 19 00
>1928d3		63 26 19 00 6f 26 19 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>1928db		7b 26 19 00 87 26 19 00 93 26 19 00 9f 26 19 00
>1928eb		ab 26 19 00 b7 26 19 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>1928f3		c3 26 19 00 cf 26 19 00 db 26 19 00 e7 26 19 00
>192903		f3 26 19 00 ff 26 19 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments_Win31.asm

>19290b		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>192913		0d f2 f7 00
>192917		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>19291f		07 f2 f7 00
>192923		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>19292b		07 f2 f6 00
>19292f		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>192937		07 f2 f7 00
>19293b		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>192943		07 f2 f7 00
>192947		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>19294f		07 f2 f7 00
>192953		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>19295b		00 00 00 00
>19295f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192967		00 00 00 00
>19296b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192973		00 00 00 00
>192977		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>19297f		87 f2 f1 00
>192983		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>19298b		07 f4 f4 00
>19298f		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>192997		07 f2 f6 00
>19299b		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>1929a3		07 e7 f7 00
>1929a7		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>1929af		07 f6 f6 00
>1929b3		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>1929bb		87 a3 f3 00
>1929bf		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929c7		00 00 00 00
>1929cb		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929d3		00 00 00 00
>1929d7		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929df		00 00 00 00
>1929e3		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>1929eb		07 8a 08 00
>1929ef		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>1929f7		07 55 14 00
>1929fb		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>192a03		87 55 04 00
>192a07		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>192a0f		07 46 1a 00
>192a13		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>192a1b		07 61 07 00
>192a1f		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>192a27		90 61 07 00
>192a2b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a33		00 00 00 00
>192a37		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a3f		00 00 00 00
>192a43		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a4b		00 00 00 00
>192a4f		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>192a57		87 f3 f8 00
>192a5b		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>192a63		07 f6 3a 00
>192a67		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>192a6f		0c 84 19 00
>192a73		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>192a7b		07 94 19 00
>192a7f		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>192a87		87 d1 f8 00
>192a8b		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>192a93		07 c3 a6 00
>192a97		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a9f		00 00 00 00
>192aa3		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192aab		00 00 00 00
>192aaf		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ab7		00 00 00 00
>192abb		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>192ac3		47 f2 df 00
>192ac7		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>192acf		0f a1 df 00
>192ad3		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>192adb		07 f1 78 00
>192adf		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>192ae7		07 f1 18 00
>192aeb		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>192af3		07 56 26 00
>192af7		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>192aff		07 66 06 00
>192b03		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b0b		00 00 00 00
>192b0f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b17		00 00 00 00
>192b1b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b23		00 00 00 00
>192b27		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>192b2f		87 85 35 00
>192b33		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>192b3b		87 f3 f4 00
>192b3f		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>192b47		07 f2 c3 00
>192b4b		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>192b53		08 72 08 00
>192b57		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>192b5f		07 3f 07 01
>192b63		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>192b6b		07 4f 05 00
>192b6f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b77		00 00 00 00
>192b7b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b83		00 00 00 00
>192b87		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b8f		00 00 00 00
>192b93		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>192b9b		07 7a 05 00
>192b9f		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>192ba7		07 a5 45 00
>192bab		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>192bb3		08 8f 09 00
>192bb7		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>192bbf		0c 8f 09 00
>192bc3		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>192bcb		07 82 37 00
>192bcf		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>192bd7		07 62 2c 01
>192bdb		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192be3		00 00 00 00
>192be7		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192bef		00 00 00 00
>192bf3		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192bfb		00 00 00 00
>192bff		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>192c07		07 a6 1c 00
>192c0b		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>192c13		07 72 0b 00
>192c17		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>192c1f		07 72 09 00
>192c23		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>192c2b		07 82 09 00
>192c2f		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>192c37		07 72 0f 00
>192c3b		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>192c43		07 8f 0a 00
>192c47		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c4f		00 00 00 00
>192c53		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c5b		00 00 00 00
>192c5f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c67		00 00 00 00
>192c6b		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>192c73		07 65 1a 00
>192c77		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>192c7f		07 65 1a 00
>192c83		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>192c8b		07 75 0a 00
>192c8f		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>192c97		07 65 1a 00
>192c9b		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>192ca3		07 65 26 00
>192ca7		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>192caf		07 55 36 00
>192cb3		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192cbb		00 00 00 00
>192cbf		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192cc7		00 00 00 00
>192ccb		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192cd3		00 00 00 00
>192cd7		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>192cdf		07 ff 0f 01
>192ce3		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>192ceb		87 64 18 00
>192cef		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>192cf7		07 96 0a 00
>192cfb		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>192d03		07 91 2a 00
>192d07		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>192d0f		47 6f 07 00
>192d13		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>192d1b		07 8f 06 02
>192d1f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d27		00 00 00 00
>192d2b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d33		00 00 00 00
>192d37		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d3f		00 00 00 00
>192d43		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>192d4b		07 55 16 00
>192d4f		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>192d57		07 6a 03 00
>192d5b		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>192d63		07 42 35 00
>192d67		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>192d6f		07 31 47 01
>192d73		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>192d7b		0a 42 25 00
>192d7f		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>192d87		07 cf 07 00
>192d8b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d93		00 00 00 00
>192d97		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d9f		00 00 00 00
>192da3		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192dab		00 00 00 00
>192daf		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>192db7		8a f2 26 00
>192dbb		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>192dc3		07 f2 f5 00
>192dc7		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>192dcf		87 11 13 00
>192dd3		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>192ddb		87 1d 03 00
>192ddf		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>192de7		07 81 23 00
>192deb		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>192df3		0a f2 f6 01
>192df7		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192dff		00 00 00 00
>192e03		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e0b		00 00 00 00
>192e0f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e17		00 00 00 00
>192e1b		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>192e23		07 c2 05 00
>192e27		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>192e2f		07 6f 0c 01
>192e33		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>192e3b		07 56 16 00
>192e3f		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>192e47		88 8f 0b 00
>192e4b		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>192e53		87 c3 e5 00
>192e57		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>192e5f		07 f8 16 00
>192e63		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e6b		00 00 00 00
>192e6f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e77		00 00 00 00
>192e7b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e83		00 00 00 00
>192e87		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>192e8f		0a f3 03 00
>192e93		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>192e9b		07 f3 02 00
>192e9f		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>192ea7		07 1f ff 03
>192eab		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>192eb3		8f 56 84 02
>192eb7		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>192ebf		0c 34 04 03
>192ec3		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>192ecb		07 1f 02 03
>192ecf		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ed7		00 00 00 00
>192edb		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ee3		00 00 00 00
>192ee7		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192eef		00 00 00 00
>192ef3		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>192efb		07 12 16 01
>192eff		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>192f07		07 f6 c9 02
>192f0b		0b 29 19 00 17 29 19 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>192f13		23 29 19 00 2f 29 19 00 3b 29 19 00 47 29 19 00
>192f23		53 29 19 00 5f 29 19 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>192f2b		6b 29 19 00 77 29 19 00 83 29 19 00 8f 29 19 00
>192f3b		9b 29 19 00 a7 29 19 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>192f43		b3 29 19 00 bf 29 19 00 cb 29 19 00 d7 29 19 00
>192f53		e3 29 19 00 ef 29 19 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>192f5b		fb 29 19 00 07 2a 19 00 13 2a 19 00 1f 2a 19 00
>192f6b		2b 2a 19 00 37 2a 19 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>192f73		43 2a 19 00 4f 2a 19 00 5b 2a 19 00 67 2a 19 00
>192f83		73 2a 19 00 7f 2a 19 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>192f8b		8b 2a 19 00 97 2a 19 00 a3 2a 19 00 af 2a 19 00
>192f9b		bb 2a 19 00 c7 2a 19 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>192fa3		d3 2a 19 00 df 2a 19 00 eb 2a 19 00 f7 2a 19 00
>192fb3		03 2b 19 00 0f 2b 19 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>192fbb		1b 2b 19 00 27 2b 19 00 33 2b 19 00 3f 2b 19 00
>192fcb		4b 2b 19 00 57 2b 19 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>192fd3		63 2b 19 00 6f 2b 19 00 7b 2b 19 00 87 2b 19 00
>192fe3		93 2b 19 00 9f 2b 19 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>192feb		ab 2b 19 00 b7 2b 19 00 c3 2b 19 00 cf 2b 19 00
>192ffb		db 2b 19 00 e7 2b 19 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>193003		f3 2b 19 00 ff 2b 19 00 0b 2c 19 00 17 2c 19 00
>193013		23 2c 19 00 2f 2c 19 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>19301b		3b 2c 19 00 47 2c 19 00 53 2c 19 00 5f 2c 19 00
>19302b		6b 2c 19 00 77 2c 19 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>193033		83 2c 19 00 8f 2c 19 00 9b 2c 19 00 a7 2c 19 00
>193043		b3 2c 19 00 bf 2c 19 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>19304b		cb 2c 19 00 d7 2c 19 00 e3 2c 19 00 ef 2c 19 00
>19305b		fb 2c 19 00 07 2d 19 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>193063		13 2d 19 00 1f 2d 19 00 2b 2d 19 00 37 2d 19 00
>193073		43 2d 19 00 4f 2d 19 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>19307b		5b 2d 19 00 67 2d 19 00 73 2d 19 00 7f 2d 19 00
>19308b		8b 2d 19 00 97 2d 19 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>193093		a3 2d 19 00 af 2d 19 00 bb 2d 19 00 c7 2d 19 00
>1930a3		d3 2d 19 00 df 2d 19 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>1930ab		eb 2d 19 00 f7 2d 19 00 03 2e 19 00 0f 2e 19 00
>1930bb		1b 2e 19 00 27 2e 19 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>1930c3		33 2e 19 00 3f 2e 19 00 4b 2e 19 00 57 2e 19 00
>1930d3		63 2e 19 00 6f 2e 19 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>1930db		7b 2e 19 00 87 2e 19 00 93 2e 19 00 9f 2e 19 00
>1930eb		ab 2e 19 00 b7 2e 19 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>1930f3		c3 2e 19 00 cf 2e 19 00 db 2e 19 00 e7 2e 19 00
>193103		f3 2e 19 00 ff 2e 19 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm

>19310b		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.193113						IOPL2_TONE_TEST
.193113		e2 20		sep #$20	                SEP #$20        ; set A short
.193115		c2 10		rep #$10	                REP #$10        ; set X long
.193117		a2 00 00	ldx #$0000	                LDX #0
.19311a						OPL2_TONE_TESTING_L1
.19311a		bf 0b 31 19	lda $19310b,x	                LDA NOTE_INTRO, X
.19311e		29 0f		and #$0f	                AND #$F
.193120		85 30		sta $30		                STA OPL2_NOTE ; start at C
.193122		bf 0b 31 19	lda $19310b,x	                LDA NOTE_INTRO, X
.193126		29 70		and #$70	                AND #$70
.193128		4a		lsr a		                LSR A
.193129		4a		lsr a		                LSR A
.19312a		4a		lsr a		                LSR A
.19312b		4a		lsr a		                LSR A
.19312c		85 31		sta $31		                STA OPL2_OCTAVE
.19312e		8a		txa		                TXA
.19312f		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.193131		85 27		sta $27		                STA OPL2_CHANNEL
.193133		22 03 33 19	jsl $193303	                JSL OPL2_PLAYNOTE
.193137		a0 00 00	ldy #$0000	                LDY #$0000
.19313a						OPL2_TONE_TESTING_L2
.19313a		ea		nop		                NOP
.19313b		ea		nop		                NOP
.19313c		ea		nop		                NOP
.19313d		ea		nop		                NOP
.19313e		c8		iny		                INY
.19313f		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.193142		d0 f6		bne $19313a	                BNE OPL2_TONE_TESTING_L2
.193144		e8		inx		                INX
.193145		e0 08 00	cpx #$0008	                CPX #8
.193148		d0 d0		bne $19311a	                BNE OPL2_TONE_TESTING_L1
.19314a		6b		rtl		                RTL
.19314b						OPL2_INIT
.19314b		c2 20		rep #$20	                REP #$20        ; set A long
.19314d		a9 00 00	lda #$0000	                LDA #$0000
.193150		85 28		sta $28		                STA OPL2_REG_REGION
.193152		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193154		85 30		sta $30		                STA OPL2_NOTE
.193156		85 32		sta $32		                STA OPL2_PARAMETER0
.193158		85 34		sta $34		                STA OPL2_PARAMETER2
.19315a		a9 d5 10	lda #$10d5	                LDA #<>INSTRUMENT_ACCORDN
.19315d		85 50		sta $50		                STA RAD_ADDR
.19315f		a9 19 00	lda #$0019	                LDA #<`INSTRUMENT_ACCORDN
.193162		85 52		sta $52		                STA RAD_ADDR + 2
.193164		e2 20		sep #$20	                SEP #$20        ; set A short
.193166		6b		rtl		                RTL
.193167						OPL2_Reset
.193167		6b		rtl		                RTL
.193168						OPL2_Get_FrequencyBlock
.193168		6b		rtl		                RTL
.193169						OPL2_GET_REGISTER
.193169		48		pha		                PHA             ; begin setdp macro
.19316a		08		php		                PHP
.19316b		c2 20		rep #$20	                REP #$20        ; set A long
.19316d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193170		5b		tcd		                TCD
.193171		28		plp		                PLP
.193172		68		pla		                PLA             ; end setdp macro
.193173		c2 20		rep #$20	                REP #$20        ; set A long
.193175		18		clc		              CLC
.193176		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193179		65 32		adc $32		              ADC OPL2_PARAMETER0
.19317b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19317d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193180		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193182		e2 20		sep #$20	                SEP #$20        ; set A short
.193184		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193186		6b		rtl		              RTL
.193187						OPL2_GET_WAVEFORM_SELECT
.193187		48		pha		                PHA             ; begin setdp macro
.193188		08		php		                PHP
.193189		c2 20		rep #$20	                REP #$20        ; set A long
.19318b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19318e		5b		tcd		                TCD
.19318f		28		plp		                PLP
.193190		68		pla		                PLA             ; end setdp macro
.193191		c2 20		rep #$20	                REP #$20        ; set A long
.193193		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193196		69 01 00	adc #$0001	              ADC #$0001
.193199		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19319b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19319e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1931a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1931a2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1931a4		29 20		and #$20	              AND #$20
.1931a6		6b		rtl		              RTL
.1931a7						OPL2_GET_SCALINGLEVEL
.1931a7		48		pha		                PHA             ; begin setdp macro
.1931a8		08		php		                PHP
.1931a9		c2 20		rep #$20	                REP #$20        ; set A long
.1931ab		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1931ae		5b		tcd		                TCD
.1931af		28		plp		                PLP
.1931b0		68		pla		                PLA             ; end setdp macro
.1931b1		c2 20		rep #$20	                REP #$20        ; set A long
.1931b3		a9 40 00	lda #$0040	              LDA #$0040  ;
.1931b6		85 28		sta $28		              STA OPL2_REG_REGION
.1931b8		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.1931bb		e2 20		sep #$20	                SEP #$20        ; set A short
.1931bd		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1931bf		29 c0		and #$c0	              AND #$C0
.1931c1		4a		lsr a		              LSR A
.1931c2		4a		lsr a		              LSR A
.1931c3		4a		lsr a		              LSR A
.1931c4		4a		lsr a		              LSR A
.1931c5		4a		lsr a		              LSR A
.1931c6		4a		lsr a		              LSR A
.1931c7		6b		rtl		              RTL
.1931c8						OPL2_GET_BLOCK
.1931c8		48		pha		                PHA             ; begin setdp macro
.1931c9		08		php		                PHP
.1931ca		c2 20		rep #$20	                REP #$20        ; set A long
.1931cc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1931cf		5b		tcd		                TCD
.1931d0		28		plp		                PLP
.1931d1		68		pla		                PLA             ; end setdp macro
.1931d2		e2 20		sep #$20	                SEP #$20        ; set A short
.1931d4		18		clc		              CLC
.1931d5		a5 27		lda $27		              LDA OPL2_CHANNEL
.1931d7		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.1931d9		69 b0		adc #$b0	              ADC #$B0
.1931db		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.1931dd		a9 00		lda #$00	              LDA #$00
.1931df		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.1931e1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1931e3		18		clc		              CLC
.1931e4		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1931e7		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.1931e9		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1931eb		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1931ee		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1931f0		e2 20		sep #$20	                SEP #$20        ; set A short
.1931f2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1931f4		29 1c		and #$1c	              AND #$1C
.1931f6		4a		lsr a		              LSR A
.1931f7		4a		lsr a		              LSR A
.1931f8		6b		rtl		              RTL
.1931f9						OPL2_GET_KEYON
.1931f9		48		pha		                PHA             ; begin setdp macro
.1931fa		08		php		                PHP
.1931fb		c2 20		rep #$20	                REP #$20        ; set A long
.1931fd		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193200		5b		tcd		                TCD
.193201		28		plp		                PLP
.193202		68		pla		                PLA             ; end setdp macro
.193203		e2 20		sep #$20	                SEP #$20        ; set A short
.193205		18		clc		              CLC
.193206		a5 27		lda $27		              LDA OPL2_CHANNEL
.193208		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19320a		69 b0		adc #$b0	              ADC #$B0
.19320c		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.19320e		a9 00		lda #$00	              LDA #$00
.193210		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193212		c2 30		rep #$30	                REP #$30        ; set A&X long
.193214		18		clc		              CLC
.193215		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193218		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19321a		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19321c		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19321f		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193221		e2 20		sep #$20	                SEP #$20        ; set A short
.193223		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193225		29 20		and #$20	              AND #$20
.193227		6b		rtl		              RTL
.193228						OPL2_GET_FEEDBACK
.193228		48		pha		                PHA             ; begin setdp macro
.193229		08		php		                PHP
.19322a		c2 20		rep #$20	                REP #$20        ; set A long
.19322c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19322f		5b		tcd		                TCD
.193230		28		plp		                PLP
.193231		68		pla		                PLA             ; end setdp macro
.193232		e2 20		sep #$20	                SEP #$20        ; set A short
.193234		18		clc		              CLC
.193235		a5 27		lda $27		              LDA OPL2_CHANNEL
.193237		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193239		69 c0		adc #$c0	              ADC #$C0
.19323b		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.19323d		a9 00		lda #$00	              LDA #$00
.19323f		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193241		c2 30		rep #$30	                REP #$30        ; set A&X long
.193243		18		clc		              CLC
.193244		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193247		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193249		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19324b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19324e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193250		e2 20		sep #$20	                SEP #$20        ; set A short
.193252		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193254		29 e0		and #$e0	              AND #$E0
.193256		4a		lsr a		              LSR
.193257		6b		rtl		              RTL
.193258						OPL2_GET_SYNTHMODE
.193258		48		pha		                PHA             ; begin setdp macro
.193259		08		php		                PHP
.19325a		c2 20		rep #$20	                REP #$20        ; set A long
.19325c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19325f		5b		tcd		                TCD
.193260		28		plp		                PLP
.193261		68		pla		                PLA             ; end setdp macro
.193262		e2 20		sep #$20	                SEP #$20        ; set A short
.193264		18		clc		              CLC
.193265		a5 27		lda $27		              LDA OPL2_CHANNEL
.193267		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193269		69 c0		adc #$c0	              ADC #$C0
.19326b		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.19326d		a9 00		lda #$00	              LDA #$00
.19326f		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193271		c2 30		rep #$30	                REP #$30        ; set A&X long
.193273		18		clc		              CLC
.193274		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193277		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193279		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19327b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19327e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193280		e2 20		sep #$20	                SEP #$20        ; set A short
.193282		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193284		29 01		and #$01	              AND #$01
.193286		6b		rtl		              RTL
.193287						OPL2_GET_DEEPTREMOLO
.193287		48		pha		                PHA             ; begin setdp macro
.193288		08		php		                PHP
.193289		c2 20		rep #$20	                REP #$20        ; set A long
.19328b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19328e		5b		tcd		                TCD
.19328f		28		plp		                PLP
.193290		68		pla		                PLA             ; end setdp macro
.193291		c2 20		rep #$20	                REP #$20        ; set A long
.193293		a9 bd 00	lda #$00bd	              LDA #$00BD;
.193296		85 28		sta $28		              STA OPL2_REG_REGION
.193298		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.19329b		e2 20		sep #$20	                SEP #$20        ; set A short
.19329d		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19329f		29 80		and #$80	              AND #$80
.1932a1		6b		rtl		              RTL
.1932a2						OPL2_GET_DEEPVIBRATO
.1932a2		48		pha		                PHA             ; begin setdp macro
.1932a3		08		php		                PHP
.1932a4		c2 20		rep #$20	                REP #$20        ; set A long
.1932a6		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932a9		5b		tcd		                TCD
.1932aa		28		plp		                PLP
.1932ab		68		pla		                PLA             ; end setdp macro
.1932ac		c2 20		rep #$20	                REP #$20        ; set A long
.1932ae		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1932b1		69 bd 00	adc #$00bd	              ADC #$00BD
.1932b4		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1932b6		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1932b9		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1932bb		e2 20		sep #$20	                SEP #$20        ; set A short
.1932bd		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932bf		29 40		and #$40	              AND #$40
.1932c1		6b		rtl		              RTL
.1932c2						OPL2_GET_PERCUSSION
.1932c2		48		pha		                PHA             ; begin setdp macro
.1932c3		08		php		                PHP
.1932c4		c2 20		rep #$20	                REP #$20        ; set A long
.1932c6		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932c9		5b		tcd		                TCD
.1932ca		28		plp		                PLP
.1932cb		68		pla		                PLA             ; end setdp macro
.1932cc		c2 20		rep #$20	                REP #$20        ; set A long
.1932ce		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1932d1		69 bd 00	adc #$00bd	              ADC #$00BD
.1932d4		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1932d6		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1932d9		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1932db		e2 20		sep #$20	                SEP #$20        ; set A short
.1932dd		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932df		29 20		and #$20	              AND #$20
.1932e1		6b		rtl		              RTL
.1932e2						OPL2_GET_DRUMS
.1932e2		48		pha		                PHA             ; begin setdp macro
.1932e3		08		php		                PHP
.1932e4		c2 20		rep #$20	                REP #$20        ; set A long
.1932e6		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932e9		5b		tcd		                TCD
.1932ea		28		plp		                PLP
.1932eb		68		pla		                PLA             ; end setdp macro
.1932ec		c2 20		rep #$20	                REP #$20        ; set A long
.1932ee		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1932f1		69 bd 00	adc #$00bd	              ADC #$00BD
.1932f4		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1932f6		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1932f9		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1932fb		e2 20		sep #$20	                SEP #$20        ; set A short
.1932fd		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932ff		29 1f		and #$1f	              AND #$1F
.193301		6b		rtl		              RTL
.193302						OPL2_Get_WaveForm
.193302		6b		rtl		                RTL
.193303						OPL2_PLAYNOTE
.193303		48		pha		                PHA             ; begin setdp macro
.193304		08		php		                PHP
.193305		c2 20		rep #$20	                REP #$20        ; set A long
.193307		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19330a		5b		tcd		                TCD
.19330b		28		plp		                PLP
.19330c		68		pla		                PLA             ; end setdp macro
.19330d		e2 20		sep #$20	                SEP #$20        ; set A short
.19330f		da		phx		                PHX
.193310		a9 00		lda #$00	                LDA #$00
.193312		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.193314		20 eb 38	jsr $1938eb	                JSR OPL2_SET_KEYON
.193317		20 b0 38	jsr $1938b0	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.19331a		e2 10		sep #$10	                SEP #$10        ; set X short
.19331c		a5 30		lda $30		                LDA OPL2_NOTE
.19331e		3a		dec a		                DEC A
.19331f		0a		asl a		                ASL A
.193320		aa		tax		                TAX
.193321		bf 9a 10 19	lda $19109a,x	                LDA @lnoteFNumbers,X
.193325		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.193327		e8		inx		                INX
.193328		bf 9a 10 19	lda $19109a,x	                LDA @lnoteFNumbers,X
.19332c		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.19332e		22 2e 38 19	jsl $19382e	                JSL OPL2_SET_FNUMBER
.193332		a9 01		lda #$01	                LDA #$01
.193334		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.193336		20 eb 38	jsr $1938eb	                JSR OPL2_SET_KEYON
.193339		c2 10		rep #$10	                REP #$10        ; set X long
.19333b		fa		plx		                PLX
.19333c		6b		rtl		                RTL
.19333d						OPL2_PLAYDRUM
.19333d		6b		rtl		                RTL
.19333e						OPL2_SET_INSTRUMENT
.19333e		48		pha		                PHA             ; begin setdp macro
.19333f		08		php		                PHP
.193340		c2 20		rep #$20	                REP #$20        ; set A long
.193342		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193345		5b		tcd		                TCD
.193346		28		plp		                PLP
.193347		68		pla		                PLA             ; end setdp macro
.193348		38		sec		              SEC ; Set the WaveFormSelect to True
.193349		22 2c 35 19	jsl $19352c	              JSL OPL2_SET_WAVEFORMSELECT;
.19334d		e2 20		sep #$20	                SEP #$20        ; set A short
.19334f		c2 10		rep #$10	                REP #$10        ; set X long
.193351		a0 00 00	ldy #$0000	              LDY #$0000
.193354		a2 00 00	ldx #$0000	              LDX #$0000
.193357		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.193359		85 35		sta $35		              STA OPL2_PARAMETER3
.19335b		c8		iny		              INY
.19335c		c9 06		cmp #$06	              CMP #$06
.19335e		d0 03		bne $193363	              BNE PERCUSSION_NEXT07
.193360		82 70 01	brl $1934d3	              BRL Percussion_6
.193363						PERCUSSION_NEXT07
.193363		c9 07		cmp #$07	              CMP #$07
.193365		d0 03		bne $19336a	              BNE PERCUSSION_NEXT08
.193367		82 44 01	brl $1934ae	              BRL Percussion_7
.19336a						PERCUSSION_NEXT08
.19336a		c9 08		cmp #$08	              CMP #$08
.19336c		d0 03		bne $193371	              BNE PERCUSSION_NEXT09
.19336e		82 18 01	brl $193489	              BRL Percussion_8
.193371						PERCUSSION_NEXT09
.193371		c9 09		cmp #$09	              CMP #$09
.193373		d0 03		bne $193378	              BNE PERCUSSION_NEXT0A
.193375		82 ec 00	brl $193464	              BRL Percussion_9
.193378						PERCUSSION_NEXT0A
.193378		c9 0a		cmp #$0a	              CMP #$0A
.19337a		d0 03		bne $19337f	              BNE Percussion_Default
.19337c		82 c0 00	brl $19343f	              BRL Percussion_A
.19337f						Percussion_Default
.19337f		a9 00		lda #$00	              LDA #$00
.193381		85 26		sta $26		              STA OPL2_OPERATOR
.193383		c2 20		rep #$20	                REP #$20        ; set A long
.193385		a9 20 00	lda #$0020	              LDA #$0020;
.193388		85 28		sta $28		              STA OPL2_REG_REGION
.19338a		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.19338d		e2 20		sep #$20	                SEP #$20        ; set A short
.19338f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193391		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193393		c8		iny		              INY
.193394		c2 20		rep #$20	                REP #$20        ; set A long
.193396		a9 40 00	lda #$0040	              LDA #$0040;
.193399		85 28		sta $28		              STA OPL2_REG_REGION
.19339b		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.19339e		e2 20		sep #$20	                SEP #$20        ; set A short
.1933a0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1933a2		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933a4		c8		iny		              INY
.1933a5		c2 20		rep #$20	                REP #$20        ; set A long
.1933a7		a9 60 00	lda #$0060	              LDA #$0060;
.1933aa		85 28		sta $28		              STA OPL2_REG_REGION
.1933ac		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.1933af		e2 20		sep #$20	                SEP #$20        ; set A short
.1933b1		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1933b3		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933b5		c8		iny		              INY
.1933b6		c2 20		rep #$20	                REP #$20        ; set A long
.1933b8		a9 80 00	lda #$0080	              LDA #$0080;
.1933bb		85 28		sta $28		              STA OPL2_REG_REGION
.1933bd		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.1933c0		e2 20		sep #$20	                SEP #$20        ; set A short
.1933c2		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1933c4		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933c6		c8		iny		              INY
.1933c7		c2 20		rep #$20	                REP #$20        ; set A long
.1933c9		a9 e0 00	lda #$00e0	              LDA #$00E0;
.1933cc		85 28		sta $28		              STA OPL2_REG_REGION
.1933ce		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.1933d1		e2 20		sep #$20	                SEP #$20        ; set A short
.1933d3		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1933d5		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933d7		c8		iny		              INY
.1933d8		e2 10		sep #$10	                SEP #$10        ; set X short
.1933da		a5 27		lda $27		              LDA OPL2_CHANNEL
.1933dc		29 0f		and #$0f	              AND #$0F
.1933de		aa		tax		              TAX
.1933df		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.1933e1		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.1933e5		c8		iny		              INY
.1933e6		a9 01		lda #$01	              LDA #$01
.1933e8		85 26		sta $26		              STA OPL2_OPERATOR
.1933ea		c2 20		rep #$20	                REP #$20        ; set A long
.1933ec		a9 20 00	lda #$0020	              LDA #$0020;
.1933ef		85 28		sta $28		              STA OPL2_REG_REGION
.1933f1		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.1933f4		e2 20		sep #$20	                SEP #$20        ; set A short
.1933f6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.1933f8		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933fa		c8		iny		              INY
.1933fb		c2 20		rep #$20	                REP #$20        ; set A long
.1933fd		a9 40 00	lda #$0040	              LDA #$0040;
.193400		85 28		sta $28		              STA OPL2_REG_REGION
.193402		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.193405		e2 20		sep #$20	                SEP #$20        ; set A short
.193407		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.193409		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19340b		c8		iny		              INY
.19340c		c2 20		rep #$20	                REP #$20        ; set A long
.19340e		a9 60 00	lda #$0060	              LDA #$0060;
.193411		85 28		sta $28		              STA OPL2_REG_REGION
.193413		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.193416		e2 20		sep #$20	                SEP #$20        ; set A short
.193418		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.19341a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19341c		c8		iny		              INY
.19341d		c2 20		rep #$20	                REP #$20        ; set A long
.19341f		a9 80 00	lda #$0080	              LDA #$0080;
.193422		85 28		sta $28		              STA OPL2_REG_REGION
.193424		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.193427		e2 20		sep #$20	                SEP #$20        ; set A short
.193429		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.19342b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19342d		c8		iny		              INY
.19342e		c2 20		rep #$20	                REP #$20        ; set A long
.193430		a9 e0 00	lda #$00e0	              LDA #$00E0;
.193433		85 28		sta $28		              STA OPL2_REG_REGION
.193435		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.193438		e2 20		sep #$20	                SEP #$20        ; set A short
.19343a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.19343c		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19343e		6b		rtl		                RTL
.19343f						Percussion_A
.19343f		e2 20		sep #$20	                SEP #$20        ; set A short
.193441		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193443		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.193447		c8		iny		              INY
.193448		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.19344a		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.19344e		c8		iny		              INY
.19344f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193451		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.193455		c8		iny		              INY
.193456		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193458		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.19345c		c8		iny		              INY
.19345d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.19345f		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.193463		6b		rtl		                RTL
.193464						Percussion_9
.193464		e2 20		sep #$20	                SEP #$20        ; set A short
.193466		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193468		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.19346c		c8		iny		              INY
.19346d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.19346f		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.193473		c8		iny		              INY
.193474		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193476		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.19347a		c8		iny		              INY
.19347b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.19347d		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.193481		c8		iny		              INY
.193482		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193484		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.193488		6b		rtl		              RTL
.193489						Percussion_8
.193489		e2 20		sep #$20	                SEP #$20        ; set A short
.19348b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.19348d		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.193491		c8		iny		              INY
.193492		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.193494		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.193498		c8		iny		              INY
.193499		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.19349b		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.19349f		c8		iny		              INY
.1934a0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1934a2		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.1934a6		c8		iny		              INY
.1934a7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1934a9		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.1934ad		6b		rtl		              RTL
.1934ae						Percussion_7
.1934ae		e2 20		sep #$20	                SEP #$20        ; set A short
.1934b0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1934b2		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.1934b6		c8		iny		              INY
.1934b7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1934b9		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.1934bd		c8		iny		              INY
.1934be		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1934c0		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.1934c4		c8		iny		              INY
.1934c5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1934c7		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.1934cb		c8		iny		              INY
.1934cc		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1934ce		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.1934d2		6b		rtl		              RTL
.1934d3						Percussion_6
.1934d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1934d5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1934d7		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.1934db		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.1934df		c8		iny		              INY
.1934e0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1934e2		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.1934e6		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.1934ea		c8		iny		              INY
.1934eb		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1934ed		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.1934f1		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.1934f5		c8		iny		              INY
.1934f6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1934f8		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.1934fc		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.193500		c8		iny		              INY
.193501		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193503		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.193507		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.19350b		6b		rtl		              RTL
.19350c						OPL2_SET_REGISTER
.19350c		48		pha		                PHA             ; begin setdp macro
.19350d		08		php		                PHP
.19350e		c2 20		rep #$20	                REP #$20        ; set A long
.193510		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193513		5b		tcd		                TCD
.193514		28		plp		                PLP
.193515		68		pla		                PLA             ; end setdp macro
.193516		c2 20		rep #$20	                REP #$20        ; set A long
.193518		18		clc		              CLC
.193519		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19351c		65 32		adc $32		              ADC OPL2_PARAMETER0
.19351e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193520		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193523		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193525		e2 20		sep #$20	                SEP #$20        ; set A short
.193527		a5 33		lda $33		              LDA OPL2_PARAMETER1
.193529		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19352b		6b		rtl		              RTL
.19352c						OPL2_SET_WAVEFORMSELECT
.19352c		48		pha		                PHA             ; begin setdp macro
.19352d		08		php		                PHP
.19352e		c2 20		rep #$20	                REP #$20        ; set A long
.193530		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193533		5b		tcd		                TCD
.193534		28		plp		                PLP
.193535		68		pla		                PLA             ; end setdp macro
.193536		c2 20		rep #$20	                REP #$20        ; set A long
.193538		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.19353b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19353d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193540		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193542		e2 20		sep #$20	                SEP #$20        ; set A short
.193544		b0 07		bcs $19354d	              BCS OPL2_Set_WaveFormSelect_set
.193546		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193548		29 df		and #$df	              AND #$DF
.19354a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19354c		6b		rtl		              RTL
.19354d						OPL2_Set_WaveFormSelect_set
.19354d		48		pha		                PHA             ; begin setdp macro
.19354e		08		php		                PHP
.19354f		c2 20		rep #$20	                REP #$20        ; set A long
.193551		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193554		5b		tcd		                TCD
.193555		28		plp		                PLP
.193556		68		pla		                PLA             ; end setdp macro
.193557		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193559		09 20 00	ora #$0020	              ORA #$20
.19355c		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19355e		6b		rtl		                RTL
.19355f						OPL2_SET_TREMOLO
.19355f		48		pha		                PHA             ; begin setdp macro
.193560		08		php		                PHP
.193561		c2 20		rep #$20	                REP #$20        ; set A long
.193563		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193566		5b		tcd		                TCD
.193567		28		plp		                PLP
.193568		68		pla		                PLA             ; end setdp macro
.193569		08		php		                PHP ; Push the Carry
.19356a		c2 20		rep #$20	                REP #$20        ; set A long
.19356c		18		clc		                CLC
.19356d		a9 20 00	lda #$0020	                LDA #$0020 ;
.193570		85 28		sta $28		                STA OPL2_REG_REGION
.193572		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.193575		28		plp		                PLP ; Pull the Carry out
.193576		e2 20		sep #$20	                SEP #$20        ; set A short
.193578		b0 08		bcs $193582	                BCS OPL2_Set_Tremolo_Set;
.19357a		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19357c		29 7f		and #$7f	                AND #$7F
.19357e		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193580		80 06		bra $193588	                BRA OPL2_Set_Tremolo_Exit
.193582						OPL2_Set_Tremolo_Set
.193582		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193584		09 80		ora #$80	                ORA #$80
.193586		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193588						OPL2_Set_Tremolo_Exit
.193588		6b		rtl		                RTL
.193589						OPL2_GET_TREMOLO
.193589		48		pha		                PHA             ; begin setdp macro
.19358a		08		php		                PHP
.19358b		c2 20		rep #$20	                REP #$20        ; set A long
.19358d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193590		5b		tcd		                TCD
.193591		28		plp		                PLP
.193592		68		pla		                PLA             ; end setdp macro
.193593		c2 20		rep #$20	                REP #$20        ; set A long
.193595		a9 20 00	lda #$0020	                LDA #$0020;
.193598		85 28		sta $28		                STA OPL2_REG_REGION
.19359a		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.19359d		e2 20		sep #$20	                SEP #$20        ; set A short
.19359f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935a1		29 80		and #$80	                AND #$80
.1935a3		6b		rtl		                RTL
.1935a4						OPL2_SET_VIBRATO
.1935a4		48		pha		                PHA             ; begin setdp macro
.1935a5		08		php		                PHP
.1935a6		c2 20		rep #$20	                REP #$20        ; set A long
.1935a8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935ab		5b		tcd		                TCD
.1935ac		28		plp		                PLP
.1935ad		68		pla		                PLA             ; end setdp macro
.1935ae		08		php		                PHP ; Push the Carry
.1935af		c2 20		rep #$20	                REP #$20        ; set A long
.1935b1		18		clc		                CLC
.1935b2		a9 20 00	lda #$0020	                LDA #$0020;
.1935b5		85 28		sta $28		                STA OPL2_REG_REGION
.1935b7		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.1935ba		28		plp		                PLP ; Pull the Carry out
.1935bb		e2 20		sep #$20	                SEP #$20        ; set A short
.1935bd		b0 08		bcs $1935c7	                BCS OPL2_Set_Vibrato_Set;
.1935bf		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935c1		29 bf		and #$bf	                AND #$BF
.1935c3		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1935c5		80 06		bra $1935cd	                BRA OPL2_Set_Vibrato_Exit
.1935c7						OPL2_Set_Vibrato_Set
.1935c7		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935c9		09 40		ora #$40	                ORA #$40
.1935cb		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1935cd						OPL2_Set_Vibrato_Exit
.1935cd		6b		rtl		                RTL
.1935ce						OPL2_GET_VIBRATO
.1935ce		48		pha		                PHA             ; begin setdp macro
.1935cf		08		php		                PHP
.1935d0		c2 20		rep #$20	                REP #$20        ; set A long
.1935d2		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935d5		5b		tcd		                TCD
.1935d6		28		plp		                PLP
.1935d7		68		pla		                PLA             ; end setdp macro
.1935d8		c2 20		rep #$20	                REP #$20        ; set A long
.1935da		a9 20 00	lda #$0020	                LDA #$0020;
.1935dd		85 28		sta $28		                STA OPL2_REG_REGION
.1935df		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.1935e2		e2 20		sep #$20	                SEP #$20        ; set A short
.1935e4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935e6		29 40		and #$40	                AND #$40
.1935e8		6b		rtl		                RTL
.1935e9						OPL2_SET_MAINTAINSUSTAIN
.1935e9		48		pha		                PHA             ; begin setdp macro
.1935ea		08		php		                PHP
.1935eb		c2 20		rep #$20	                REP #$20        ; set A long
.1935ed		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935f0		5b		tcd		                TCD
.1935f1		28		plp		                PLP
.1935f2		68		pla		                PLA             ; end setdp macro
.1935f3		08		php		              PHP ; Push the Carry
.1935f4		c2 20		rep #$20	                REP #$20        ; set A long
.1935f6		18		clc		              CLC
.1935f7		a9 20 00	lda #$0020	              LDA #$0020;
.1935fa		85 28		sta $28		              STA OPL2_REG_REGION
.1935fc		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.1935ff		28		plp		              PLP ; Pull the Carry out
.193600		e2 20		sep #$20	                SEP #$20        ; set A short
.193602		b0 08		bcs $19360c	              BCS OPL2_Set_MaintainSustain_Set;
.193604		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193606		29 df		and #$df	              AND #$DF
.193608		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19360a		80 06		bra $193612	              BRA OPL2_Set_MaintainSustain_Exit
.19360c						OPL2_Set_MaintainSustain_Set
.19360c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19360e		09 20		ora #$20	              ORA #$20
.193610		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193612						OPL2_Set_MaintainSustain_Exit
.193612		6b		rtl		                RTL
.193613						OPL2_GET_MAINTAINSUSTAIN
.193613		48		pha		                PHA             ; begin setdp macro
.193614		08		php		                PHP
.193615		c2 20		rep #$20	                REP #$20        ; set A long
.193617		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19361a		5b		tcd		                TCD
.19361b		28		plp		                PLP
.19361c		68		pla		                PLA             ; end setdp macro
.19361d		c2 20		rep #$20	                REP #$20        ; set A long
.19361f		a9 20 00	lda #$0020	              LDA #$0020;
.193622		85 28		sta $28		              STA OPL2_REG_REGION
.193624		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.193627		e2 20		sep #$20	                SEP #$20        ; set A short
.193629		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19362b		29 20		and #$20	              AND #$20
.19362d		6b		rtl		                RTL
.19362e						OPL2_SET_ENVELOPESCALING
.19362e		48		pha		                PHA             ; begin setdp macro
.19362f		08		php		                PHP
.193630		c2 20		rep #$20	                REP #$20        ; set A long
.193632		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193635		5b		tcd		                TCD
.193636		28		plp		                PLP
.193637		68		pla		                PLA             ; end setdp macro
.193638		08		php		              PHP ; Push the Carry
.193639		c2 20		rep #$20	                REP #$20        ; set A long
.19363b		18		clc		              CLC
.19363c		a9 20 00	lda #$0020	              LDA #$0020;
.19363f		85 28		sta $28		              STA OPL2_REG_REGION
.193641		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.193644		28		plp		              PLP ; Pull the Carry out
.193645		e2 20		sep #$20	                SEP #$20        ; set A short
.193647		b0 08		bcs $193651	              BCS OPL2_Set_EnvelopeScaling_Set;
.193649		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19364b		29 ef		and #$ef	              AND #$EF
.19364d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19364f		80 06		bra $193657	              BRA OPL2_Set_EnvelopeScaling_Exit
.193651						OPL2_Set_EnvelopeScaling_Set
.193651		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193653		09 10		ora #$10	              ORA #$10
.193655		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193657						OPL2_Set_EnvelopeScaling_Exit
.193657		6b		rtl		                RTL
.193658						OPL2_GET_ENVELOPESCALING
.193658		48		pha		                PHA             ; begin setdp macro
.193659		08		php		                PHP
.19365a		c2 20		rep #$20	                REP #$20        ; set A long
.19365c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19365f		5b		tcd		                TCD
.193660		28		plp		                PLP
.193661		68		pla		                PLA             ; end setdp macro
.193662		c2 20		rep #$20	                REP #$20        ; set A long
.193664		a9 20 00	lda #$0020	              LDA #$0020;
.193667		85 28		sta $28		              STA OPL2_REG_REGION
.193669		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.19366c		e2 20		sep #$20	                SEP #$20        ; set A short
.19366e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193670		29 10		and #$10	              AND #$10
.193672		6b		rtl		                RTL
.193673						OPL2_GET_MODFREQMULTIPLE
.193673		48		pha		                PHA             ; begin setdp macro
.193674		08		php		                PHP
.193675		c2 20		rep #$20	                REP #$20        ; set A long
.193677		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19367a		5b		tcd		                TCD
.19367b		28		plp		                PLP
.19367c		68		pla		                PLA             ; end setdp macro
.19367d		c2 20		rep #$20	                REP #$20        ; set A long
.19367f		a9 20 00	lda #$0020	              LDA #$0020;
.193682		85 28		sta $28		              STA OPL2_REG_REGION
.193684		20 6a 3a	jsr $193a6a	              JSR OPL2_GET_REG_OFFSET
.193687		e2 20		sep #$20	                SEP #$20        ; set A short
.193689		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19368b		29 0f		and #$0f	              AND #$0F
.19368d		6b		rtl		              RTL
.19368e						OPL2_SET_MODFREQMULTIPLE
.19368e		48		pha		                PHA             ; begin setdp macro
.19368f		08		php		                PHP
.193690		c2 20		rep #$20	                REP #$20        ; set A long
.193692		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193695		5b		tcd		                TCD
.193696		28		plp		                PLP
.193697		68		pla		                PLA             ; end setdp macro
.193698		c2 20		rep #$20	                REP #$20        ; set A long
.19369a		a9 20 00	lda #$0020	                LDA #$0020;
.19369d		85 28		sta $28		                STA OPL2_REG_REGION
.19369f		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.1936a2		e2 20		sep #$20	                SEP #$20        ; set A short
.1936a4		a5 32		lda $32		                LDA OPL2_PARAMETER0
.1936a6		29 0f		and #$0f	                AND #$0F
.1936a8		85 32		sta $32		                STA OPL2_PARAMETER0
.1936aa		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936ac		29 f0		and #$f0	                AND #$F0
.1936ae		05 32		ora $32		                ORA OPL2_PARAMETER0
.1936b0		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1936b2		6b		rtl		                RTL
.1936b3						OPL2_SET_SCALINGLEVEL
.1936b3		48		pha		                PHA             ; begin setdp macro
.1936b4		08		php		                PHP
.1936b5		c2 20		rep #$20	                REP #$20        ; set A long
.1936b7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936ba		5b		tcd		                TCD
.1936bb		28		plp		                PLP
.1936bc		68		pla		                PLA             ; end setdp macro
.1936bd		c2 20		rep #$20	                REP #$20        ; set A long
.1936bf		a9 40 00	lda #$0040	                LDA #$0040;
.1936c2		85 28		sta $28		                STA OPL2_REG_REGION
.1936c4		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.1936c7		e2 20		sep #$20	                SEP #$20        ; set A short
.1936c9		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1936cb		29 03		and #$03	                AND #$03
.1936cd		0a		asl a		                ASL
.1936ce		0a		asl a		                ASL
.1936cf		0a		asl a		                ASL
.1936d0		0a		asl a		                ASL
.1936d1		0a		asl a		                ASL
.1936d2		0a		asl a		                ASL
.1936d3		85 32		sta $32		                STA OPL2_PARAMETER0
.1936d5		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936d7		29 3f		and #$3f	                AND #$3F
.1936d9		05 32		ora $32		                ORA OPL2_PARAMETER0
.1936db		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1936dd		6b		rtl		                RTL
.1936de						OPL2_SET_VOLUME
.1936de		48		pha		                PHA             ; begin setdp macro
.1936df		08		php		                PHP
.1936e0		c2 20		rep #$20	                REP #$20        ; set A long
.1936e2		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936e5		5b		tcd		                TCD
.1936e6		28		plp		                PLP
.1936e7		68		pla		                PLA             ; end setdp macro
.1936e8		c2 20		rep #$20	                REP #$20        ; set A long
.1936ea		a9 40 00	lda #$0040	                LDA #$0040  ;
.1936ed		85 28		sta $28		                STA OPL2_REG_REGION
.1936ef		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.1936f2		e2 20		sep #$20	                SEP #$20        ; set A short
.1936f4		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.1936f6		29 3f		and #$3f	                AND #$3F
.1936f8		85 32		sta $32		                STA OPL2_PARAMETER0
.1936fa		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936fc		29 c0		and #$c0	                AND #$C0
.1936fe		05 32		ora $32		                ORA OPL2_PARAMETER0
.193700		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193702		6b		rtl		                RTL
.193703						OPL2_GET_VOLUME
.193703		48		pha		                PHA             ; begin setdp macro
.193704		08		php		                PHP
.193705		c2 20		rep #$20	                REP #$20        ; set A long
.193707		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19370a		5b		tcd		                TCD
.19370b		28		plp		                PLP
.19370c		68		pla		                PLA             ; end setdp macro
.19370d		c2 20		rep #$20	                REP #$20        ; set A long
.19370f		a9 40 00	lda #$0040	                LDA #$0040  ;
.193712		85 28		sta $28		                STA OPL2_REG_REGION
.193714		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.193717		e2 20		sep #$20	                SEP #$20        ; set A short
.193719		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19371b		29 3f		and #$3f	                AND #$3F
.19371d		6b		rtl		                RTL
.19371e						OPL2_SET_ATTACK
.19371e		48		pha		                PHA             ; begin setdp macro
.19371f		08		php		                PHP
.193720		c2 20		rep #$20	                REP #$20        ; set A long
.193722		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193725		5b		tcd		                TCD
.193726		28		plp		                PLP
.193727		68		pla		                PLA             ; end setdp macro
.193728		c2 20		rep #$20	                REP #$20        ; set A long
.19372a		a9 60 00	lda #$0060	                LDA #$0060  ;
.19372d		85 28		sta $28		                STA OPL2_REG_REGION
.19372f		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.193732		e2 20		sep #$20	                SEP #$20        ; set A short
.193734		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193736		29 0f		and #$0f	                AND #$0F
.193738		0a		asl a		                ASL
.193739		0a		asl a		                ASL
.19373a		0a		asl a		                ASL
.19373b		0a		asl a		                ASL
.19373c		85 32		sta $32		                STA OPL2_PARAMETER0
.19373e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193740		29 0f		and #$0f	                AND #$0F
.193742		05 32		ora $32		                ORA OPL2_PARAMETER0
.193744		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193746		6b		rtl		                RTL
.193747						OPL2_GET_ATTACK
.193747		48		pha		                PHA             ; begin setdp macro
.193748		08		php		                PHP
.193749		c2 20		rep #$20	                REP #$20        ; set A long
.19374b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19374e		5b		tcd		                TCD
.19374f		28		plp		                PLP
.193750		68		pla		                PLA             ; end setdp macro
.193751		c2 20		rep #$20	                REP #$20        ; set A long
.193753		a9 60 00	lda #$0060	                LDA #$0060
.193756		85 28		sta $28		                STA OPL2_REG_REGION
.193758		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.19375b		e2 20		sep #$20	                SEP #$20        ; set A short
.19375d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19375f		29 f0		and #$f0	                AND #$F0
.193761		4a		lsr a		                LSR
.193762		4a		lsr a		                LSR
.193763		4a		lsr a		                LSR
.193764		4a		lsr a		                LSR
.193765		6b		rtl		                RTL
.193766						OPL2_SET_DECAY
.193766		48		pha		                PHA             ; begin setdp macro
.193767		08		php		                PHP
.193768		c2 20		rep #$20	                REP #$20        ; set A long
.19376a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19376d		5b		tcd		                TCD
.19376e		28		plp		                PLP
.19376f		68		pla		                PLA             ; end setdp macro
.193770		c2 20		rep #$20	                REP #$20        ; set A long
.193772		a9 60 00	lda #$0060	                LDA #$0060;
.193775		85 28		sta $28		                STA OPL2_REG_REGION
.193777		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.19377a		e2 20		sep #$20	                SEP #$20        ; set A short
.19377c		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.19377e		29 0f		and #$0f	                AND #$0F
.193780		85 32		sta $32		                STA OPL2_PARAMETER0
.193782		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193784		29 f0		and #$f0	                AND #$F0
.193786		05 32		ora $32		                ORA OPL2_PARAMETER0
.193788		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19378a		6b		rtl		                RTL
.19378b						OPL2_GET_DECAY
.19378b		48		pha		                PHA             ; begin setdp macro
.19378c		08		php		                PHP
.19378d		c2 20		rep #$20	                REP #$20        ; set A long
.19378f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193792		5b		tcd		                TCD
.193793		28		plp		                PLP
.193794		68		pla		                PLA             ; end setdp macro
.193795		c2 20		rep #$20	                REP #$20        ; set A long
.193797		a9 60 00	lda #$0060	                LDA #$0060
.19379a		85 28		sta $28		                STA OPL2_REG_REGION
.19379c		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.19379f		e2 20		sep #$20	                SEP #$20        ; set A short
.1937a1		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937a3		29 0f		and #$0f	                AND #$0F
.1937a5		6b		rtl		                RTL
.1937a6						OPL2_SET_SUSTAIN
.1937a6		48		pha		                PHA             ; begin setdp macro
.1937a7		08		php		                PHP
.1937a8		c2 20		rep #$20	                REP #$20        ; set A long
.1937aa		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937ad		5b		tcd		                TCD
.1937ae		28		plp		                PLP
.1937af		68		pla		                PLA             ; end setdp macro
.1937b0		c2 20		rep #$20	                REP #$20        ; set A long
.1937b2		a9 80 00	lda #$0080	                LDA #$0080;
.1937b5		85 28		sta $28		                STA OPL2_REG_REGION
.1937b7		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.1937ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1937bc		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1937be		29 0f		and #$0f	                AND #$0F
.1937c0		0a		asl a		                ASL
.1937c1		0a		asl a		                ASL
.1937c2		0a		asl a		                ASL
.1937c3		0a		asl a		                ASL
.1937c4		85 32		sta $32		                STA OPL2_PARAMETER0
.1937c6		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937c8		29 0f		and #$0f	                AND #$0F
.1937ca		05 32		ora $32		                ORA OPL2_PARAMETER0
.1937cc		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1937ce		6b		rtl		                RTL
.1937cf						OPL2_GET_SUSTAIN
.1937cf		48		pha		                PHA             ; begin setdp macro
.1937d0		08		php		                PHP
.1937d1		c2 20		rep #$20	                REP #$20        ; set A long
.1937d3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937d6		5b		tcd		                TCD
.1937d7		28		plp		                PLP
.1937d8		68		pla		                PLA             ; end setdp macro
.1937d9		c2 20		rep #$20	                REP #$20        ; set A long
.1937db		a9 80 00	lda #$0080	                LDA #$0080
.1937de		85 28		sta $28		                STA OPL2_REG_REGION
.1937e0		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.1937e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1937e5		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937e7		29 f0		and #$f0	                AND #$F0
.1937e9		4a		lsr a		                LSR
.1937ea		4a		lsr a		                LSR
.1937eb		4a		lsr a		                LSR
.1937ec		4a		lsr a		                LSR
.1937ed		6b		rtl		                RTL
.1937ee						OPL2_SET_RELEASE
.1937ee		48		pha		                PHA             ; begin setdp macro
.1937ef		08		php		                PHP
.1937f0		c2 20		rep #$20	                REP #$20        ; set A long
.1937f2		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937f5		5b		tcd		                TCD
.1937f6		28		plp		                PLP
.1937f7		68		pla		                PLA             ; end setdp macro
.1937f8		c2 20		rep #$20	                REP #$20        ; set A long
.1937fa		a9 80 00	lda #$0080	                LDA #$0080;
.1937fd		85 28		sta $28		                STA OPL2_REG_REGION
.1937ff		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.193802		e2 20		sep #$20	                SEP #$20        ; set A short
.193804		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193806		29 0f		and #$0f	                AND #$0F
.193808		85 32		sta $32		                STA OPL2_PARAMETER0
.19380a		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19380c		29 f0		and #$f0	                AND #$F0
.19380e		05 32		ora $32		                ORA OPL2_PARAMETER0
.193810		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193812		6b		rtl		                RTL
.193813						OPL2_GET_RELEASE
.193813		48		pha		                PHA             ; begin setdp macro
.193814		08		php		                PHP
.193815		c2 20		rep #$20	                REP #$20        ; set A long
.193817		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19381a		5b		tcd		                TCD
.19381b		28		plp		                PLP
.19381c		68		pla		                PLA             ; end setdp macro
.19381d		c2 20		rep #$20	                REP #$20        ; set A long
.19381f		a9 80 00	lda #$0080	                LDA #$0080
.193822		85 28		sta $28		                STA OPL2_REG_REGION
.193824		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.193827		e2 20		sep #$20	                SEP #$20        ; set A short
.193829		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19382b		29 0f		and #$0f	                AND #$0F
.19382d		6b		rtl		                RTL
.19382e						OPL2_SET_FNUMBER
.19382e		48		pha		                PHA             ; begin setdp macro
.19382f		08		php		                PHP
.193830		c2 20		rep #$20	                REP #$20        ; set A long
.193832		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193835		5b		tcd		                TCD
.193836		28		plp		                PLP
.193837		68		pla		                PLA             ; end setdp macro
.193838		e2 20		sep #$20	                SEP #$20        ; set A short
.19383a		18		clc		                CLC
.19383b		a5 27		lda $27		                LDA OPL2_CHANNEL
.19383d		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.19383f		69 a0		adc #$a0	                ADC #$A0
.193841		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193843		a9 00		lda #$00	                LDA #$00
.193845		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193847		c2 30		rep #$30	                REP #$30        ; set A&X long
.193849		18		clc		                CLC
.19384a		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.19384d		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.19384f		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193851		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193854		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193856		e2 20		sep #$20	                SEP #$20        ; set A short
.193858		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.19385a		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.19385c		18		clc		                CLC
.19385d		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.19385f		69 10		adc #$10	                ADC #$10
.193861		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193863		a5 33		lda $33		                LDA OPL2_PARAMETER1
.193865		29 03		and #$03	                AND #$03
.193867		85 33		sta $33		                STA OPL2_PARAMETER1
.193869		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19386b		29 fc		and #$fc	                AND #$FC
.19386d		05 33		ora $33		                ORA OPL2_PARAMETER1
.19386f		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193871		6b		rtl		                RTL
.193872						OPL2_GET_FNUMBER
.193872		48		pha		                PHA             ; begin setdp macro
.193873		08		php		                PHP
.193874		c2 20		rep #$20	                REP #$20        ; set A long
.193876		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193879		5b		tcd		                TCD
.19387a		28		plp		                PLP
.19387b		68		pla		                PLA             ; end setdp macro
.19387c		e2 20		sep #$20	                SEP #$20        ; set A short
.19387e		18		clc		                CLC
.19387f		a5 27		lda $27		                LDA OPL2_CHANNEL
.193881		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193883		69 a0		adc #$a0	                ADC #$A0
.193885		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193887		a9 00		lda #$00	                LDA #$00
.193889		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.19388b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19388d		18		clc		                CLC
.19388e		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193891		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193893		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193895		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193898		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.19389a		e2 20		sep #$20	                SEP #$20        ; set A short
.19389c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19389e		85 32		sta $32		                STA OPL2_PARAMETER0
.1938a0		18		clc		                CLC
.1938a1		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.1938a3		69 10		adc #$10	                ADC #$10
.1938a5		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1938a7		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938a9		29 03		and #$03	                AND #$03
.1938ab		85 33		sta $33		                STA OPL2_PARAMETER1
.1938ad		6b		rtl		                RTL
.1938ae						OPL2_Set_Frequency
.1938ae		6b		rtl		                RTL
.1938af						OPL2_Get_Frequency
.1938af		6b		rtl		                RTL
.1938b0						OPL2_SET_BLOCK
.1938b0		48		pha		                PHA             ; begin setdp macro
.1938b1		08		php		                PHP
.1938b2		c2 20		rep #$20	                REP #$20        ; set A long
.1938b4		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1938b7		5b		tcd		                TCD
.1938b8		28		plp		                PLP
.1938b9		68		pla		                PLA             ; end setdp macro
.1938ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1938bc		18		clc		                CLC
.1938bd		a5 27		lda $27		                LDA OPL2_CHANNEL
.1938bf		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.1938c1		69 b0		adc #$b0	                ADC #$B0
.1938c3		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1938c5		a9 00		lda #$00	                LDA #$00
.1938c7		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1938c9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1938cb		18		clc		                CLC
.1938cc		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.1938cf		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.1938d1		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1938d3		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.1938d6		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1938d8		e2 20		sep #$20	                SEP #$20        ; set A short
.1938da		a5 31		lda $31		                LDA OPL2_OCTAVE
.1938dc		29 07		and #$07	                AND #$07
.1938de		0a		asl a		                ASL
.1938df		0a		asl a		                ASL
.1938e0		85 31		sta $31		                STA OPL2_OCTAVE
.1938e2		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938e4		29 e3		and #$e3	                AND #$E3
.1938e6		05 31		ora $31		                ORA OPL2_OCTAVE
.1938e8		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1938ea		60		rts		                RTS
.1938eb						OPL2_SET_KEYON
.1938eb		48		pha		                PHA             ; begin setdp macro
.1938ec		08		php		                PHP
.1938ed		c2 20		rep #$20	                REP #$20        ; set A long
.1938ef		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1938f2		5b		tcd		                TCD
.1938f3		28		plp		                PLP
.1938f4		68		pla		                PLA             ; end setdp macro
.1938f5		e2 20		sep #$20	                SEP #$20        ; set A short
.1938f7		18		clc		                CLC
.1938f8		a5 27		lda $27		                LDA OPL2_CHANNEL
.1938fa		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.1938fc		69 b0		adc #$b0	                ADC #$B0
.1938fe		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193900		a9 00		lda #$00	                LDA #$00
.193902		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193904		c2 30		rep #$30	                REP #$30        ; set A&X long
.193906		18		clc		                CLC
.193907		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.19390a		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.19390c		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19390e		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193911		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193913		e2 20		sep #$20	                SEP #$20        ; set A short
.193915		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193917		29 01		and #$01	                AND #$01
.193919		f0 02		beq $19391d	                BEQ SET_KEYON_OFF
.19391b		a9 20		lda #$20	                LDA #$20
.19391d						    SET_KEYON_OFF
.19391d		85 32		sta $32		                STA OPL2_PARAMETER0
.19391f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193921		29 df		and #$df	                AND #$DF
.193923		05 32		ora $32		                ORA OPL2_PARAMETER0
.193925		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193927		60		rts		                RTS
.193928						OPL2_SET_FEEDBACK
.193928		48		pha		                PHA             ; begin setdp macro
.193929		08		php		                PHP
.19392a		c2 20		rep #$20	                REP #$20        ; set A long
.19392c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19392f		5b		tcd		                TCD
.193930		28		plp		                PLP
.193931		68		pla		                PLA             ; end setdp macro
.193932		e2 20		sep #$20	                SEP #$20        ; set A short
.193934		18		clc		              CLC
.193935		a5 27		lda $27		              LDA OPL2_CHANNEL
.193937		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193939		69 c0		adc #$c0	              ADC #$C0
.19393b		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.19393d		a9 00		lda #$00	              LDA #$00
.19393f		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193941		c2 30		rep #$30	                REP #$30        ; set A&X long
.193943		18		clc		              CLC
.193944		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193947		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193949		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19394b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19394e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193950		e2 20		sep #$20	                SEP #$20        ; set A short
.193952		a5 32		lda $32		              LDA OPL2_PARAMETER0
.193954		29 07		and #$07	              AND #$07
.193956		0a		asl a		              ASL
.193957		85 32		sta $32		              STA OPL2_PARAMETER0
.193959		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19395b		29 01		and #$01	              AND #$01
.19395d		05 32		ora $32		              ORA OPL2_PARAMETER0
.19395f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193961		6b		rtl		                RTL
.193962						OPL2_SET_SYNTHMODE
.193962		48		pha		                PHA             ; begin setdp macro
.193963		08		php		                PHP
.193964		c2 20		rep #$20	                REP #$20        ; set A long
.193966		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193969		5b		tcd		                TCD
.19396a		28		plp		                PLP
.19396b		68		pla		                PLA             ; end setdp macro
.19396c		08		php		              PHP ; Push the Carry
.19396d		e2 20		sep #$20	                SEP #$20        ; set A short
.19396f		18		clc		              CLC
.193970		a5 27		lda $27		              LDA OPL2_CHANNEL
.193972		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193974		69 c0		adc #$c0	              ADC #$C0
.193976		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193978		a9 00		lda #$00	              LDA #$00
.19397a		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.19397c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19397e		18		clc		              CLC
.19397f		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193982		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193984		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193986		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193989		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19398b		28		plp		              PLP ; Pull the Carry out
.19398c		e2 20		sep #$20	                SEP #$20        ; set A short
.19398e		b0 08		bcs $193998	              BCS OPL2_Set_Synthmode_Set;
.193990		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193992		29 fe		and #$fe	              AND #$FE
.193994		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193996		80 06		bra $19399e	              BRA OPL2_Set_Synthmode_Exit
.193998						OPL2_Set_Synthmode_Set
.193998		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19399a		09 01		ora #$01	              ORA #$01
.19399c		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19399e						OPL2_Set_Synthmode_Exit
.19399e		6b		rtl		                RTL
.19399f						OPL2_SET_DEEPTREMOLO
.19399f		48		pha		                PHA             ; begin setdp macro
.1939a0		08		php		                PHP
.1939a1		c2 20		rep #$20	                REP #$20        ; set A long
.1939a3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939a6		5b		tcd		                TCD
.1939a7		28		plp		                PLP
.1939a8		68		pla		                PLA             ; end setdp macro
.1939a9		c2 20		rep #$20	                REP #$20        ; set A long
.1939ab		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.1939ae		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1939b0		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1939b3		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1939b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1939b7		b0 08		bcs $1939c1	              BCS OPL2_Set_DeepTremolo_Set;
.1939b9		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939bb		29 7f		and #$7f	              AND #$7F
.1939bd		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939bf		80 06		bra $1939c7	              BRA OPL2_Set_DeepTremolo_Exit
.1939c1						OPL2_Set_DeepTremolo_Set
.1939c1		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939c3		09 80		ora #$80	              ORA #$80
.1939c5		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939c7						OPL2_Set_DeepTremolo_Exit
.1939c7		6b		rtl		                RTL
.1939c8						OPL2_SET_DEEPVIBRATO
.1939c8		48		pha		                PHA             ; begin setdp macro
.1939c9		08		php		                PHP
.1939ca		c2 20		rep #$20	                REP #$20        ; set A long
.1939cc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939cf		5b		tcd		                TCD
.1939d0		28		plp		                PLP
.1939d1		68		pla		                PLA             ; end setdp macro
.1939d2		c2 20		rep #$20	                REP #$20        ; set A long
.1939d4		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.1939d7		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1939d9		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1939dc		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1939de		e2 20		sep #$20	                SEP #$20        ; set A short
.1939e0		b0 08		bcs $1939ea	              BCS OPL2_Set_DeepVibrato_Set;
.1939e2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939e4		29 bf		and #$bf	              AND #$BF
.1939e6		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939e8		80 06		bra $1939f0	              BRA OPL2_Set_DeepVibrato_Exit
.1939ea						OPL2_Set_DeepVibrato_Set
.1939ea		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939ec		09 40		ora #$40	              ORA #$40
.1939ee		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939f0						OPL2_Set_DeepVibrato_Exit
.1939f0		6b		rtl		                RTL
.1939f1						OPL2_SET_PERCUSSION
.1939f1		48		pha		                PHA             ; begin setdp macro
.1939f2		08		php		                PHP
.1939f3		c2 20		rep #$20	                REP #$20        ; set A long
.1939f5		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939f8		5b		tcd		                TCD
.1939f9		28		plp		                PLP
.1939fa		68		pla		                PLA             ; end setdp macro
.1939fb		c2 20		rep #$20	                REP #$20        ; set A long
.1939fd		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.193a00		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193a02		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193a05		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193a07		e2 20		sep #$20	                SEP #$20        ; set A short
.193a09		b0 08		bcs $193a13	                BCS OPL2_Set_Percussion_Set;
.193a0b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a0d		29 df		and #$df	                AND #$DF
.193a0f		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a11		80 06		bra $193a19	                BRA OPL2_Set_Percussion_Exit
.193a13						OPL2_Set_Percussion_Set
.193a13		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a15		09 20		ora #$20	                ORA #$20
.193a17		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a19						OPL2_Set_Percussion_Exit
.193a19		6b		rtl		                RTL
.193a1a						OPL2_SET_DRUMS
.193a1a		48		pha		                PHA             ; begin setdp macro
.193a1b		08		php		                PHP
.193a1c		c2 20		rep #$20	                REP #$20        ; set A long
.193a1e		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a21		5b		tcd		                TCD
.193a22		28		plp		                PLP
.193a23		68		pla		                PLA             ; end setdp macro
.193a24		c2 20		rep #$20	                REP #$20        ; set A long
.193a26		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.193a29		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193a2b		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193a2e		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193a30		e2 20		sep #$20	                SEP #$20        ; set A short
.193a32		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193a34		29 1f		and #$1f	                AND #$1F
.193a36		85 32		sta $32		                STA OPL2_PARAMETER0
.193a38		49 ff		eor #$ff	                EOR #$FF
.193a3a		85 33		sta $33		                STA OPL2_PARAMETER1
.193a3c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a3e		25 33		and $33		                AND OPL2_PARAMETER1
.193a40		05 32		ora $32		                ORA OPL2_PARAMETER0
.193a42		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a44		6b		rtl		                RTL
.193a45						OPL2_SET_WAVEFORM
.193a45		48		pha		                PHA             ; begin setdp macro
.193a46		08		php		                PHP
.193a47		c2 20		rep #$20	                REP #$20        ; set A long
.193a49		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a4c		5b		tcd		                TCD
.193a4d		28		plp		                PLP
.193a4e		68		pla		                PLA             ; end setdp macro
.193a4f		c2 20		rep #$20	                REP #$20        ; set A long
.193a51		a9 e0 00	lda #$00e0	                LDA #$00E0;
.193a54		85 28		sta $28		                STA OPL2_REG_REGION
.193a56		20 6a 3a	jsr $193a6a	                JSR OPL2_GET_REG_OFFSET
.193a59		e2 20		sep #$20	                SEP #$20        ; set A short
.193a5b		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193a5d		29 03		and #$03	                AND #$03
.193a5f		85 32		sta $32		                STA OPL2_PARAMETER0
.193a61		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a63		29 fc		and #$fc	                AND #$FC
.193a65		05 32		ora $32		                ORA OPL2_PARAMETER0
.193a67		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a69		6b		rtl		                RTL
.193a6a						OPL2_GET_REG_OFFSET
.193a6a		e2 30		sep #$30	                SEP #$30        ; set A&X short
.193a6c		a5 27		lda $27		                LDA OPL2_CHANNEL
.193a6e		29 0f		and #$0f	                AND #$0F
.193a70		aa		tax		                TAX
.193a71		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.193a73		d0 06		bne $193a7b	                BNE OPL2_Get_Register_Offset_l0
.193a75		bf b2 10 19	lda $1910b2,x	                LDA @lregisterOffsets_operator0, X
.193a79		80 04		bra $193a7f	                BRA OPL2_Get_Register_Offset_exit
.193a7b						OPL2_Get_Register_Offset_l0
.193a7b		bf bb 10 19	lda $1910bb,x	                LDA @lregisterOffsets_operator1, X
.193a7f						OPL2_Get_Register_Offset_exit
.193a7f		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193a81		a9 00		lda #$00	                LDA #$00
.193a83		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193a85		c2 30		rep #$30	                REP #$30        ; set A&X long
.193a87		18		clc		                CLC
.193a88		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193a8b		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193a8d		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.193a8f		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193a91		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193a94		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193a96		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/sdcard_controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.193a97						ITRACE
.193a97		08		php		                PHP
.193a98		c2 30		rep #$30	                REP #$30        ; set A&X long
.193a9a		8b		phb		                PHB                 ; Print the text
.193a9b		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.193a9d		aa		tax		                TAX                 ; ... into X
.193a9e		e2 20		sep #$20	                SEP #$20        ; set A short
.193aa0		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.193aa2		48		pha		                PHA
.193aa3		ab		plb		                PLB                 ; ... into B
.193aa4		22 0a 07 19	jsl $19070a	                JSL IPUTS           ; Print the string
.193aa8		c2 20		rep #$20	                REP #$20        ; set A long
.193aaa		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.193aac		83 08		sta $08,s	                STA #8,S
.193aae		a3 02		lda $02,s	                LDA #2,S
.193ab0		83 06		sta $06,s	                STA #6,S
.193ab2		ab		plb		                PLB
.193ab3		68		pla		                PLA                 ; Clean up the stack
.193ab4		68		pla		                PLA
.193ab5		28		plp		                PLP
.193ab6		6b		rtl		                RTL
.193ab7						ISETTIMEOUT
.193ab7		8b		phb		                PHB
.193ab8		0b		phd		                PHD
.193ab9		08		php		                PHP
.193aba		48		pha		                PHA             ; begin setdbr macro
.193abb		08		php		                PHP
.193abc		e2 20		sep #$20	                SEP #$20        ; set A short
.193abe		a9 00		lda #$00	                LDA #0
.193ac0		48		pha		                PHA
.193ac1		ab		plb		                PLB
.193ac2		28		plp		                PLP
.193ac3		68		pla		                PLA             ; end setdbr macro
.193ac4		48		pha		                PHA             ; begin setdp macro
.193ac5		08		php		                PHP
.193ac6		c2 20		rep #$20	                REP #$20        ; set A long
.193ac8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193acb		5b		tcd		                TCD
.193acc		28		plp		                PLP
.193acd		68		pla		                PLA             ; end setdp macro
.193ace		78		sei		                SEI                             ; We don't want to be interrupted
.193acf		e2 20		sep #$20	                SEP #$20        ; set A short
.193ad1		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.193ad3		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.193ad5		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.193ad7		85 0c		sta $032c	                STA @b BIOS_FLAGS
.193ad9		28		plp		done            PLP
.193ada		2b		pld		                PLD
.193adb		ab		plb		                PLB
.193adc		6b		rtl		                RTL
.193add						ICMDBLOCK
.193add		0b		phd		                PHD
.193ade		08		php		                PHP
.193adf		48		pha		                PHA             ; begin setdp macro
.193ae0		08		php		                PHP
.193ae1		c2 20		rep #$20	                REP #$20        ; set A long
.193ae3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193ae6		5b		tcd		                TCD
.193ae7		28		plp		                PLP
.193ae8		68		pla		                PLA             ; end setdp macro
.193ae9		e2 20		sep #$20	                SEP #$20        ; set A short
.193aeb		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.193aed		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.193aef		d0 06		bne $193af7	                BNE ret_success             ; No: just return
.193af1		22 42 64 19	jsl $196442	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.193af5		90 0c		bcc $193b03	                BCC pass_failure
.193af7						ret_success
.193af7		e2 20		sep #$20	                SEP #$20        ; set A short
.193af9		64 00		stz $0320	                STZ BIOS_STATUS
.193afb		28		plp		                PLP
.193afc		2b		pld		                PLD
.193afd		38		sec		                SEC
.193afe		6b		rtl		                RTL
.193aff						ret_failure
.193aff		e2 20		sep #$20	                SEP #$20        ; set A short
.193b01		85 00		sta $0320	                STA BIOS_STATUS
.193b03		28		plp		pass_failure    PLP
.193b04		2b		pld		                PLD
.193b05		18		clc		                CLC
.193b06		6b		rtl		                RTL
.193b07						IGETBLOCK
.193b07		5a		phy		                PHY
.193b08		0b		phd		                PHD
.193b09		8b		phb		                PHB
.193b0a		08		php		                PHP
.193b0b		48		pha		                PHA             ; begin setdbr macro
.193b0c		08		php		                PHP
.193b0d		e2 20		sep #$20	                SEP #$20        ; set A short
.193b0f		a9 00		lda #$00	                LDA #0
.193b11		48		pha		                PHA
.193b12		ab		plb		                PLB
.193b13		28		plp		                PLP
.193b14		68		pla		                PLA             ; end setdbr macro
.193b15		48		pha		                PHA             ; begin setdp macro
.193b16		08		php		                PHP
.193b17		c2 20		rep #$20	                REP #$20        ; set A long
.193b19		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193b1c		5b		tcd		                TCD
.193b1d		28		plp		                PLP
.193b1e		68		pla		                PLA             ; end setdp macro
.193b1f		e2 20		sep #$20	                SEP #$20        ; set A short
.193b21		a0 00 00	ldy #$0000	                LDY #0
.193b24		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.193b26		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.193b28		c8		iny		                INY
.193b29		c0 00 02	cpy #$0200	                CPY #512
.193b2c		d0 f8		bne $193b26	                BNE clr_loop
.193b2e		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.193b30		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.193b32		f0 14		beq $193b48	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.193b34		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.193b36		f0 18		beq $193b50	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.193b38		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193b3a		f0 1c		beq $193b58	                BEQ hd_getblock
.193b3c		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.193b3e						ret_failure
.193b3e		e2 20		sep #$20	                SEP #$20        ; set A short
.193b40		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.193b42		28		plp		                PLP
.193b43		ab		plb		                PLB
.193b44		2b		pld		                PLD
.193b45		7a		ply		                PLY
.193b46		38		sec		                SEC                                 ; Return failure
.193b47		6b		rtl		                RTL
.193b48		22 4e 59 19	jsl $19594e	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.193b4c		b0 12		bcs $193b60	                BCS ret_success
.193b4e		80 ee		bra $193b3e	                BRA ret_failure
.193b50		22 47 62 19	jsl $196247	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.193b54		b0 0a		bcs $193b60	                BCS ret_success
.193b56		80 e6		bra $193b3e	                BRA ret_failure
.193b58		22 5b 68 19	jsl $19685b	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.193b5c		b0 02		bcs $193b60	                BCS ret_success
.193b5e		80 de		bra $193b3e	                BRA ret_failure
.193b60						ret_success
.193b60		e2 20		sep #$20	                SEP #$20        ; set A short
.193b62		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.193b64		28		plp		                PLP
.193b65		ab		plb		                PLB
.193b66		2b		pld		                PLD
.193b67		7a		ply		                PLY
.193b68		38		sec		                SEC                                 ; Return success
.193b69		6b		rtl		                RTL
.193b6a						IPUTBLOCK
.193b6a		0b		phd		                PHD
.193b6b		8b		phb		                PHB
.193b6c		08		php		                PHP
.193b6d		48		pha		                PHA             ; begin setdbr macro
.193b6e		08		php		                PHP
.193b6f		e2 20		sep #$20	                SEP #$20        ; set A short
.193b71		a9 00		lda #$00	                LDA #0
.193b73		48		pha		                PHA
.193b74		ab		plb		                PLB
.193b75		28		plp		                PLP
.193b76		68		pla		                PLA             ; end setdbr macro
.193b77		48		pha		                PHA             ; begin setdp macro
.193b78		08		php		                PHP
.193b79		c2 20		rep #$20	                REP #$20        ; set A long
.193b7b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193b7e		5b		tcd		                TCD
.193b7f		28		plp		                PLP
.193b80		68		pla		                PLA             ; end setdp macro
.193b81		e2 20		sep #$20	                SEP #$20        ; set A short
.193b83		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.193b85		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.193b87		f0 13		beq $193b9c	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.193b89		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.193b8b		f0 17		beq $193ba4	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.193b8d		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193b8f		f0 1b		beq $193bac	                BEQ hd_putblock
.193b91		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.193b93						ret_failure
.193b93		e2 20		sep #$20	                SEP #$20        ; set A short
.193b95		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.193b97		28		plp		                PLP
.193b98		ab		plb		                PLB
.193b99		2b		pld		                PLD
.193b9a		18		clc		                CLC                                 ; Return failure
.193b9b		6b		rtl		                RTL
.193b9c		22 f5 59 19	jsl $1959f5	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.193ba0		90 f1		bcc $193b93	                BCC ret_failure
.193ba2		80 10		bra $193bb4	                BRA ret_success
.193ba4		22 ac 62 19	jsl $1962ac	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.193ba8		90 e9		bcc $193b93	                BCC ret_failure
.193baa		80 08		bra $193bb4	                BRA ret_success
.193bac		22 e6 68 19	jsl $1968e6	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.193bb0		90 e1		bcc $193b93	                BCC ret_failure
.193bb2		80 00		bra $193bb4	                BRA ret_success
.193bb4						ret_success
.193bb4		e2 20		sep #$20	                SEP #$20        ; set A short
.193bb6		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.193bb8		28		plp		                PLP
.193bb9		ab		plb		                PLB
.193bba		2b		pld		                PLD
.193bbb		38		sec		                SEC                                 ; Return success
.193bbc		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.193bbd						DOS_DIROPEN
.193bbd		da		phx		                PHX
.193bbe		5a		phy		                PHY
.193bbf		0b		phd		                PHD
.193bc0		8b		phb		                PHB
.193bc1		08		php		                PHP
.193bc2		48		pha		                PHA             ; begin setdbr macro
.193bc3		08		php		                PHP
.193bc4		e2 20		sep #$20	                SEP #$20        ; set A short
.193bc6		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193bc8		48		pha		                PHA
.193bc9		ab		plb		                PLB
.193bca		28		plp		                PLP
.193bcb		68		pla		                PLA             ; end setdbr macro
.193bcc		48		pha		                PHA             ; begin setdp macro
.193bcd		08		php		                PHP
.193bce		c2 20		rep #$20	                REP #$20        ; set A long
.193bd0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193bd3		5b		tcd		                TCD
.193bd4		28		plp		                PLP
.193bd5		68		pla		                PLA             ; end setdp macro
.193bd6		ad 20 a0	lda $18a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.193bd9		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.193bdc		ad 22 a0	lda $18a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.193bdf		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193be2		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.193be5		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193be7		85 18		sta $0338	                STA DOS_DIR_PTR
.193be9		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193bec		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193bee		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193bf0		e2 20		sep #$20	                SEP #$20        ; set A short
.193bf2		ad 01 a0	lda $18a001	                LDA FILE_SYSTEM             ; Check the file system
.193bf5		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.193bf7		d0 24		bne $193c1d	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.193bf9						fetch_fat12
.193bf9		e2 20		sep #$20	                SEP #$20        ; set A short
.193bfb		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.193bfd		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.193c00		c2 20		rep #$20	                REP #$20        ; set A long
.193c02		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.193c04		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193c06		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.193c08		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193c0a		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.193c0d		85 02		sta $0322	                STA BIOS_LBA
.193c0f		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193c12		85 04		sta $0324	                STA BIOS_LBA+2
.193c14		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.193c18		b0 1f		bcs $193c39	                BCS do_success              ; If sucessful, set the directory cursor
.193c1a		82 84 18	brl $1954a1	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193c1d						fetch_fat32
.193c1d		e2 20		sep #$20	                SEP #$20        ; set A short
.193c1f		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.193c21		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.193c24		c2 20		rep #$20	                REP #$20        ; set A long
.193c26		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.193c29		85 10		sta $0330	                STA DOS_CLUS_ID
.193c2b		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193c2e		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193c30		22 a0 41 19	jsl $1941a0	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.193c34		b0 03		bcs $193c39	                BCS do_success              ; If successful: set the directory cursor
.193c36		82 68 18	brl $1954a1	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193c39		82 6c 18	brl $1954a8	do_success      BRL IF_SUCCESS
.193c3c						DOS_DIRFIRST
.193c3c		0b		phd		                PHD
.193c3d		08		php		                PHP
.193c3e		48		pha		                PHA             ; begin setdp macro
.193c3f		08		php		                PHP
.193c40		c2 20		rep #$20	                REP #$20        ; set A long
.193c42		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193c45		5b		tcd		                TCD
.193c46		28		plp		                PLP
.193c47		68		pla		                PLA             ; end setdp macro
.193c48		c2 20		rep #$20	                REP #$20        ; set A long
.193c4a		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.193c4d		85 18		sta $0338	                STA DOS_DIR_PTR
.193c4f		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193c52		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193c54		28		plp		                PLP
.193c55		2b		pld		                PLD
.193c56		6b		rtl		                RTL
.193c57						DOS_DIRNEXT
.193c57		da		phx		                PHX
.193c58		5a		phy		                PHY
.193c59		0b		phd		                PHD
.193c5a		8b		phb		                PHB
.193c5b		08		php		                PHP
.193c5c		48		pha		                PHA             ; begin setdbr macro
.193c5d		08		php		                PHP
.193c5e		e2 20		sep #$20	                SEP #$20        ; set A short
.193c60		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193c62		48		pha		                PHA
.193c63		ab		plb		                PLB
.193c64		28		plp		                PLP
.193c65		68		pla		                PLA             ; end setdbr macro
.193c66		48		pha		                PHA             ; begin setdp macro
.193c67		08		php		                PHP
.193c68		c2 20		rep #$20	                REP #$20        ; set A long
.193c6a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193c6d		5b		tcd		                TCD
.193c6e		28		plp		                PLP
.193c6f		68		pla		                PLA             ; end setdp macro
.193c70		c2 20		rep #$20	                REP #$20        ; set A long
.193c72		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.193c73		a5 18		lda $0338	                LDA DOS_DIR_PTR
.193c75		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.193c78		85 18		sta $0338	                STA DOS_DIR_PTR
.193c7a		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.193c7c		69 00 00	adc #$0000	                ADC #0
.193c7f		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193c81		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.193c82		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.193c85		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.193c87		85 28		sta $0348	                STA DOS_TEMP
.193c89		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER_END
.193c8c		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.193c8e		85 2a		sta $034a	                STA DOS_TEMP+2
.193c90		30 0c		bmi $193c9e	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.193c92		f0 03		beq $193c97	                BEQ check_lower
.193c94		82 11 18	brl $1954a8	                BRL IF_SUCCESS
.193c97		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.193c99		f0 03		beq $193c9e	                BEQ get_next_block
.193c9b		82 0a 18	brl $1954a8	                BRL IF_SUCCESS
.193c9e						get_next_block
.193c9e		e2 20		sep #$20	                SEP #$20        ; set A short
.193ca0		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.193ca3		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.193ca5		f0 38		beq $193cdf	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.193ca7						next_sector
.193ca7		c2 20		rep #$20	                REP #$20        ; set A long
.193ca9		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.193cac		1a		inc a		                INC A
.193cad		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.193cb0		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.193cb3		d0 07		bne $193cbc	                BNE read_sector
.193cb5		e2 20		sep #$20	                SEP #$20        ; set A short
.193cb7		a9 00		lda #$00	                LDA #0
.193cb9		82 e1 17	brl $19549d	                BRL IF_FAILURE
.193cbc						read_sector
.193cbc		c2 20		rep #$20	                REP #$20        ; set A long
.193cbe		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.193cc1		85 02		sta $0322	                STA BIOS_LBA
.193cc3		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193cc6		85 04		sta $0324	                STA BIOS_LBA+2
.193cc8		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.193ccb		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193ccd		85 18		sta $0338	                STA DOS_DIR_PTR
.193ccf		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193cd2		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193cd4		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193cd6		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.193cda		b0 39		bcs $193d15	                BCS do_success              ; If successful: set the directory cursor
.193cdc		82 c2 17	brl $1954a1	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193cdf						next_cluster
.193cdf		c2 20		rep #$20	                REP #$20        ; set A long
.193ce1		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.193ce4		85 10		sta $0330	                STA DOS_CLUS_ID
.193ce6		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193ce9		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193ceb		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.193cee		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193cf0		85 18		sta $0338	                STA DOS_DIR_PTR
.193cf2		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193cf5		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193cf7		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193cf9		22 b4 45 19	jsl $1945b4	                JSL NEXTCLUSTER             ; Try to find the next cluster
.193cfd		b0 03		bcs $193d02	                BCS set_next
.193cff		82 9f 17	brl $1954a1	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.193d02		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.193d04		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.193d07		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.193d09		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193d0c		22 a0 41 19	jsl $1941a0	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.193d10		b0 03		bcs $193d15	                BCS do_success              ; If successful: set the directory cursor
.193d12		82 8c 17	brl $1954a1	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193d15		82 90 17	brl $1954a8	do_success      BRL IF_SUCCESS
.193d18						DOS_DIRFINDFREE
.193d18		da		phx		                PHX
.193d19		5a		phy		                PHY
.193d1a		0b		phd		                PHD
.193d1b		8b		phb		                PHB
.193d1c		08		php		                PHP
.193d1d		48		pha		                PHA             ; begin setdbr macro
.193d1e		08		php		                PHP
.193d1f		e2 20		sep #$20	                SEP #$20        ; set A short
.193d21		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193d23		48		pha		                PHA
.193d24		ab		plb		                PLB
.193d25		28		plp		                PLP
.193d26		68		pla		                PLA             ; end setdbr macro
.193d27		48		pha		                PHA             ; begin setdp macro
.193d28		08		php		                PHP
.193d29		c2 20		rep #$20	                REP #$20        ; set A long
.193d2b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193d2e		5b		tcd		                TCD
.193d2f		28		plp		                PLP
.193d30		68		pla		                PLA             ; end setdp macro
.193d31		22 bf 4f 19	jsl $194fbf	                JSL IF_DIROPEN
.193d35		b0 06		bcs $193d3d	                BCS start_walk
.193d37		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.193d3a		82 28 00	brl $193d65	                BRL ret_failure
.193d3d		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.193d40						chk_entry
.193d40		e2 20		sep #$20	                SEP #$20        ; set A short
.193d42		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.193d44		f0 1c		beq $193d62	                BEQ ret_success             ; If 0: we have a blank... return it
.193d46		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.193d48		f0 18		beq $193d62	                BEQ ret_success             ; Yes: return it
.193d4a		22 f9 4f 19	jsl $194ff9	                JSL IF_DIRNEXT              ; Go to the next directory entry
.193d4e		b0 ed		bcs $193d3d	                BCS start_walk              ; If we got one, start walking it
.193d50		22 68 3d 19	jsl $193d68	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.193d54		90 0f		bcc $193d65	                BCC ret_failure             ; If that didn't work, return the failure
.193d56		c2 20		rep #$20	                REP #$20        ; set A long
.193d58		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.193d5b		85 18		sta $0338	                STA DOS_DIR_PTR
.193d5d		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193d60		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193d62		82 43 17	brl $1954a8	ret_success     BRL IF_SUCCESS
.193d65		82 35 17	brl $19549d	ret_failure     BRL IF_FAILURE
.193d68						DOS_DIRAPPEND
.193d68		da		phx		                PHX
.193d69		8b		phb		                PHB
.193d6a		0b		phd		                PHD
.193d6b		08		php		                PHP
.193d6c		48		pha		                PHA             ; begin setdbr macro
.193d6d		08		php		                PHP
.193d6e		e2 20		sep #$20	                SEP #$20        ; set A short
.193d70		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193d72		48		pha		                PHA
.193d73		ab		plb		                PLB
.193d74		28		plp		                PLP
.193d75		68		pla		                PLA             ; end setdbr macro
.193d76		48		pha		                PHA             ; begin setdp macro
.193d77		08		php		                PHP
.193d78		c2 20		rep #$20	                REP #$20        ; set A long
.193d7a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193d7d		5b		tcd		                TCD
.193d7e		28		plp		                PLP
.193d7f		68		pla		                PLA             ; end setdp macro
.193d80		e2 20		sep #$20	                SEP #$20        ; set A short
.193d82		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE
.193d85		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.193d87		f0 09		beq $193d92	                BEQ clr_sector                  ; Yes: clear out the directory data
.193d89						ret_failure
.193d89		e2 20		sep #$20	                SEP #$20        ; set A short
.193d8b		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.193d8d		85 0e		sta $032e	                STA DOS_STATUS
.193d8f		82 3e 00	brl $193dd0	                BRL pass_failure
.193d92						clr_sector
.193d92		c2 20		rep #$20	                REP #$20        ; set A long
.193d94		a9 00 00	lda #$0000	                LDA #0
.193d97		a2 00 00	ldx #$0000	                LDX #0
.193d9a		9d 00 a1	sta $18a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.193d9d		e8		inx		                INX
.193d9e		e8		inx		                INX
.193d9f		e0 00 02	cpx #$0200	                CPX #512
.193da2		d0 f6		bne $193d9a	                BNE clr_loop
.193da4		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.193da7		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193da9		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193dac		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193dae		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.193db1		85 10		sta $0330	                STA DOS_CLUS_ID
.193db3		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193db6		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193db8		22 d5 49 19	jsl $1949d5	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.193dbc		90 12		bcc $193dd0	                BCC pass_failure                ; If there was an error, pass it up the chain
.193dbe		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.193dc1		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.193dc4		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.193dc7		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193dca		28		plp		ret_success     PLP
.193dcb		2b		pld		                PLD
.193dcc		ab		plb		                PLB
.193dcd		fa		plx		                PLX
.193dce		38		sec		                SEC
.193dcf		6b		rtl		                RTL
.193dd0		28		plp		pass_failure    PLP
.193dd1		2b		pld		                PLD
.193dd2		ab		plb		                PLB
.193dd3		fa		plx		                PLX
.193dd4		18		clc		                CLC
.193dd5		6b		rtl		                RTL
.193dd6						DOS_DIRWRITE
.193dd6		da		phx		                PHX
.193dd7		5a		phy		                PHY
.193dd8		0b		phd		                PHD
.193dd9		8b		phb		                PHB
.193dda		08		php		                PHP
.193ddb		48		pha		                PHA             ; begin setdbr macro
.193ddc		08		php		                PHP
.193ddd		e2 20		sep #$20	                SEP #$20        ; set A short
.193ddf		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193de1		48		pha		                PHA
.193de2		ab		plb		                PLB
.193de3		28		plp		                PLP
.193de4		68		pla		                PLA             ; end setdbr macro
.193de5		48		pha		                PHA             ; begin setdp macro
.193de6		08		php		                PHP
.193de7		c2 20		rep #$20	                REP #$20        ; set A long
.193de9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193dec		5b		tcd		                TCD
.193ded		28		plp		                PLP
.193dee		68		pla		                PLA             ; end setdp macro
.193def		e2 20		sep #$20	                SEP #$20        ; set A short
.193df1		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.193df4		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.193df6		f0 1f		beq $193e17	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.193df8						write_sector
.193df8		c2 20		rep #$20	                REP #$20        ; set A long
.193dfa		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.193dfd		85 02		sta $0322	                STA BIOS_LBA
.193dff		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193e02		85 04		sta $0324	                STA BIOS_LBA+2
.193e04		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.193e07		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193e09		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193e0c		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193e0e		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.193e12		b0 1f		bcs $193e33	                BCS ret_success
.193e14		82 86 16	brl $19549d	ret_failure     BRL IF_FAILURE
.193e17						write_cluster
.193e17		c2 20		rep #$20	                REP #$20        ; set A long
.193e19		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.193e1c		85 10		sta $0330	                STA DOS_CLUS_ID
.193e1e		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193e21		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193e23		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.193e26		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193e28		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193e2b		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193e2d		22 dd 41 19	jsl $1941dd	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.193e31		90 e1		bcc $193e14	                BCC ret_failure
.193e33		82 72 16	brl $1954a8	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=24						DOS_ERR_EOF = 24                        ; At end of file
=25						DOS_ERR_PGZSIG = 25                     ; File does not have the PGZ signature
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\Includes/sdos_fat_vars_user_inc.asm

=$18a000					    DOS_HIGH_VARIABLES      = $18A000
=$18a000					    DEVICE                  = $18A000       ; 1 byte - The number of the block device
=$18a001					    FILE_SYSTEM             = $18A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$18a002					    PARTITION               = $18A002       ; 1 byte - The number of the partitions on the device
=$18a003					    SECTORS_PER_CLUSTER     = $18A003       ; 1 byte - The number of sectors in a cluster
=$18a004					    FIRSTSECTOR             = $18A004       ; 4 bytes - The LBA of the first sector on the volume
=$18a008					    SECTORCOUNT             = $18A008       ; 4 bytes - The number of sectors in the volume
=$18a00c					    NUM_RSRV_SEC            = $18A00C       ; 2 bytes - The number of hidden or reserved sectors
=$18a00e					    CLUSTER_SIZE            = $18A00E       ; 2 bytes - The size of a cluster in bytes
=$18a010					    SEC_PER_FAT             = $18A010       ; 4 bytes - The number of sectors per FAT
=$18a014					    FAT_BEGIN_LBA           = $18A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$18a018					    FAT2_BEGIN_LBA          = $18A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$18a01c					    CLUSTER_BEGIN_LBA       = $18A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$18a020					    ROOT_DIR_FIRST_CLUSTER  = $18A020       ; 4 bytes - The number of the first cluster in the root directory
=$18a024					    ROOT_DIR_MAX_ENTRY      = $18A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$18a026					    VOLUME_ID               = $18A026       ; 4 bytes - The ID of the volume
=$18a02a					    DOS_CURR_CLUS           = $18A02A       ; 4 bytes - The current cluster (for delete)
=$18a02e					    DOS_NEXT_CLUS           = $18A02E       ; 4 bytes - The next cluster in a file (for delete)
=$18a032					    DOS_DIR_BLOCK_ID        = $18A032       ; 4 bytes - The ID of the current directory block
=$18a036					    DOS_NEW_CLUSTER         = $18A036       ; 4 bytes - Space to store a newly written cluster ID
=$18a03a					    DOS_SHORT_NAME          = $18A03A       ; 11 bytes - The short name for a desired file
=$18a045					    DOS_DIR_TYPE            = $18A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$18a046					    DOS_CURR_DIR_ID         = $18A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$18a04a					    DOS_DEV_NAMES           = $18A04A       ; 4 byte - pointer to the linked list of device names
=$18a04e					    FDC_MOTOR_TIMER         = $18A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$18a050					    DOS_MOUNT_DEV           = $18A050       ; 1 byte - the device code of the currently mounted device
=$18a100					    DOS_DIR_CLUSTER         = $18A100       ; 512 bytes - A buffer for directory entries
=$18a300					    DOS_DIR_CLUSTER_END     = $18A300       ; The byte just past the end of the directory cluster buffer
=$18a300					    DOS_SECTOR              = $18A300       ; 512 bytes - A buffer for block device read/write
=$18a500					    DOS_SECTOR_END          = $18A500       ; The byte just past the end of the cluster buffer
=$18a500					    DOS_FAT_SECTORS         = $18A500       ; 1024 bytes - two sectors worth of the FAT
=$18a900					    DOS_FAT_SECTORS_END     = $18A900       ; The byte just past the end of the FAT buffers
=$18a900					    DOS_BOOT_SECTOR         = $18A900       ; A sector for holding the boot sector
=$18ab00					    DOS_BOOT_SECTOR_END     = $18AB00
=$18ab00					    DOS_SPARE_SECTOR        = $18AB00       ; A spare 512 byte buffer for loading sectors
=$18ad00					    DOS_SPARE_SECTOR_END    = $18AD00
=$18ad00					    DOS_SPARE_FD            = $18AD00       ; A spare file descriptor buffer
=1617184					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=1617184					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=1617440					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$18b000					    DOS_FILE_BUFFS          = $18B000
=1622016					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.193e36						DOS_INIT
.193e36		8b		phb		                PHB
.193e37		0b		phd		                PHD
.193e38		08		php		                PHP
.193e39		48		pha		                PHA             ; begin setdbr macro
.193e3a		08		php		                PHP
.193e3b		e2 20		sep #$20	                SEP #$20        ; set A short
.193e3d		a9 00		lda #$00	                LDA #0
.193e3f		48		pha		                PHA
.193e40		ab		plb		                PLB
.193e41		28		plp		                PLP
.193e42		68		pla		                PLA             ; end setdbr macro
.193e43		48		pha		                PHA             ; begin setdp macro
.193e44		08		php		                PHP
.193e45		c2 20		rep #$20	                REP #$20        ; set A long
.193e47		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193e4a		5b		tcd		                TCD
.193e4b		28		plp		                PLP
.193e4c		68		pla		                PLA             ; end setdp macro
.193e4d		e2 20		sep #$20	                SEP #$20        ; set A short
.193e4f		c2 10		rep #$10	                REP #$10        ; set X long
.193e51		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.193e54		a9 00		lda #$00	                LDA #0
.193e56		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.193e59		e8		inx		                INX
.193e5a		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.193e5d		d0 f7		bne $193e56	                BNE b0_clr_loop
.193e5f		48		pha		                PHA             ; begin setdbr macro
.193e60		08		php		                PHP
.193e61		e2 20		sep #$20	                SEP #$20        ; set A short
.193e63		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193e65		48		pha		                PHA
.193e66		ab		plb		                PLB
.193e67		28		plp		                PLP
.193e68		68		pla		                PLA             ; end setdbr macro
.193e69		48		pha		                PHA             ; begin setdp macro
.193e6a		08		php		                PHP
.193e6b		c2 20		rep #$20	                REP #$20        ; set A long
.193e6d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193e70		5b		tcd		                TCD
.193e71		28		plp		                PLP
.193e72		68		pla		                PLA             ; end setdp macro
.193e73		e2 20		sep #$20	                SEP #$20        ; set A short
.193e75		c2 10		rep #$10	                REP #$10        ; set X long
.193e77		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.193e7a		a9 00		lda #$00	                LDA #0
.193e7c		9d 00 a0	sta $18a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.193e7f		e8		inx		                INX
.193e80		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.193e83		d0 f7		bne $193e7c	                BNE b38_clr_loop
.193e85		c2 20		rep #$20	                REP #$20        ; set A long
.193e87		a9 35 42	lda #$4235	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.193e8a		8f 4a a0 18	sta $18a04a	                STA @l DOS_DEV_NAMES
.193e8e		a9 19 00	lda #$0019	                LDA #`DOS_HD_DESC
.193e91		8f 4c a0 18	sta $18a04c	                STA @l DOS_DEV_NAMES+2
.193e95		e2 20		sep #$20	                SEP #$20        ; set A short
.193e97		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.193e99		85 01		sta $0321	                STA BIOS_DEV
.193e9b		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.193e9d		8f 50 a0 18	sta $18a050	                STA @l DOS_MOUNT_DEV
.193ea1		a9 00		lda #$00	                LDA #0
.193ea3		a2 00 00	ldx #$0000	                LDX #0
.193ea6		9d 20 ad	sta $18ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.193ea9		e8		inx		                INX
.193eaa		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.193ead		d0 f7		bne $193ea6	                BNE fd_zero_loop
.193eaf		a9 00		lda #$00	                LDA #0
.193eb1		a2 00 00	ldx #$0000	                LDX #0
.193eb4		9d 00 b0	sta $18b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.193eb7		e8		inx		                INX
.193eb8		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.193ebb		d0 f7		bne $193eb4	                BNE sect_zero_loop
.193ebd		c2 20		rep #$20	                REP #$20        ; set A long
.193ebf		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.193ec2		85 20		sta $0340	                STA @b DOS_FD_PTR
.193ec4		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.193ec7		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.193ec9		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.193ecc		85 28		sta $0348	                STA @b DOS_TEMP
.193ece		a9 18 00	lda #$0018	                LDA #`DOS_FILE_BUFFS
.193ed1		85 2a		sta $034a	                STA @b DOS_TEMP+2
.193ed3		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.193ed6		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.193ed9		a5 28		lda $0348	                LDA @b DOS_TEMP
.193edb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.193edd		c8		iny		                INY
.193ede		c8		iny		                INY
.193edf		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.193ee1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.193ee3		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.193ee4		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.193ee6		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.193ee9		85 20		sta $0340	                STA @b DOS_FD_PTR
.193eeb		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.193eed		69 00 00	adc #$0000	                ADC #0
.193ef0		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.193ef2		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.193ef3		a5 28		lda $0348	                LDA @b DOS_TEMP
.193ef5		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.193ef8		85 28		sta $0348	                STA @b DOS_TEMP
.193efa		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.193efc		69 00 00	adc #$0000	                ADC #0
.193eff		85 2a		sta $034a	                STA @b DOS_TEMP+2
.193f01		ca		dex		                DEX                     ; Count down the descriptors...
.193f02		d0 d2		bne $193ed6	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.193f04		28		plp		                PLP
.193f05		2b		pld		                PLD
.193f06		ab		plb		                PLB
.193f07		6b		rtl		                RTL
.193f08						DOS_MOUNT
.193f08		8b		phb		                PHB
.193f09		0b		phd		                PHD
.193f0a		08		php		                PHP
.193f0b		48		pha		                PHA             ; begin setdbr macro
.193f0c		08		php		                PHP
.193f0d		e2 20		sep #$20	                SEP #$20        ; set A short
.193f0f		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193f11		48		pha		                PHA
.193f12		ab		plb		                PLB
.193f13		28		plp		                PLP
.193f14		68		pla		                PLA             ; end setdbr macro
.193f15		48		pha		                PHA             ; begin setdp macro
.193f16		08		php		                PHP
.193f17		c2 20		rep #$20	                REP #$20        ; set A long
.193f19		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193f1c		5b		tcd		                TCD
.193f1d		28		plp		                PLP
.193f1e		68		pla		                PLA             ; end setdp macro
.193f1f		e2 20		sep #$20	                SEP #$20        ; set A short
.193f21		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.193f23		8f 50 a0 18	sta $18a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.193f27		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.193f29		f0 1f		beq $193f4a	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.193f2b		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.193f2d		f0 26		beq $193f55	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.193f2f		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.193f31		f0 0b		beq $193f3e	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.193f33		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.193f35		85 0e		sta $032e	                STA DOS_STATUS
.193f37		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.193f39		85 00		sta $0320	                STA BIOS_STATUS
.193f3b		82 7c 01	brl $1940ba	                BRL ret_failure
.193f3e		22 18 63 19	jsl $196318	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.193f42		b0 03		bcs $193f47	                BCS fdc_success
.193f44		82 73 01	brl $1940ba	                BRL ret_failure
.193f47		82 67 01	brl $1940b1	fdc_success     BRL ret_success
.193f4a		22 00 59 19	jsl $195900	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.193f4e		b0 10		bcs $193f60	                BCS get_mbr             ; Continue if success
.193f50		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.193f52		82 65 01	brl $1940ba	                BRL ret_failure
.193f55		22 60 67 19	jsl $196760	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.193f59		b0 05		bcs $193f60	                BCS get_mbr             ; Continue if success
.193f5b		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.193f5d		82 5a 01	brl $1940ba	                BRL ret_failure
.193f60						get_mbr
.193f60		c2 30		rep #$30	                REP #$30        ; set A&X long
.193f62		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.193f64		64 04		stz $0324	                STZ BIOS_LBA+2
.193f66		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.193f69		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193f6b		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.193f6e		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193f70		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.193f74		b0 07		bcs $193f7d	                BCS chk_signature       ; If success, check the signature bytes
.193f76		e2 20		sep #$20	                SEP #$20        ; set A short
.193f78		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.193f7a		82 3d 01	brl $1940ba	                BRL ret_failure
.193f7d						chk_signature
.193f7d		e2 20		sep #$20	                SEP #$20        ; set A short
.193f7f		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.193f82		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.193f84		d0 07		bne $193f8d	                BNE not_mbr             ; No: signal we could find the MBR
.193f86		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.193f89		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.193f8b		f0 05		beq $193f92	                BEQ chk_part_type       ; Yes: we have an MBR
.193f8d		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.193f8f		82 28 01	brl $1940ba	                BRL ret_failure
.193f92		ad c2 a4	lda $18a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.193f95		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.193f97		f0 05		beq $193f9e	                BEQ get_LBA             ; Is FAT32 with LBA?
.193f99		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.193f9b		82 1c 01	brl $1940ba	                BRL ret_failure
.193f9e		8d 01 a0	sta $18a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.193fa1		c2 20		rep #$20	                REP #$20        ; set A long
.193fa3		ad c6 a4	lda $18a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.193fa6		8d 04 a0	sta $18a004	                STA FIRSTSECTOR
.193fa9		ad c8 a4	lda $18a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.193fac		8d 06 a0	sta $18a006	                STA FIRSTSECTOR+2
.193faf		ad cb a4	lda $18a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.193fb2		8d 08 a0	sta $18a008	                STA SECTORCOUNT
.193fb5		ad cd a4	lda $18a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.193fb8		8d 0a a0	sta $18a00a	                STA SECTORCOUNT+2
.193fbb		e2 20		sep #$20	                SEP #$20        ; set A short
.193fbd		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.193fbf		8d 00 a0	sta $18a000	                STA DEVICE
.193fc2		a9 00		lda #$00	                LDA #0
.193fc4		8d 02 a0	sta $18a002	                STA PARTITION           ; For the moment, we only support the first partition
.193fc7		c2 20		rep #$20	                REP #$20        ; set A long
.193fc9		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.193fcc		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193fce		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.193fd1		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193fd3		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.193fd6		85 02		sta $0322	                STA BIOS_LBA
.193fd8		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.193fdb		85 04		sta $0324	                STA BIOS_LBA+2
.193fdd		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.193fe1		b0 1c		bcs $193fff	                BCS get_first_sec       ; Got it? Start parsing it
.193fe3		e2 20		sep #$20	                SEP #$20        ; set A short
.193fe5		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.193fe7		82 d0 00	brl $1940ba	                BRL ret_failure
.193fea						chk_bpb_sig
.193fea		e2 20		sep #$20	                SEP #$20        ; set A short
.193fec		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.193fef		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.193ff1		d0 07		bne $193ffa	                BNE not_bpb             ; No: signal we could find the volume ID
.193ff3		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.193ff6		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.193ff8		f0 05		beq $193fff	                BEQ get_first_sec       ; Yes: we have an volume ID
.193ffa		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.193ffc		82 bb 00	brl $1940ba	                BRL ret_failure
.193fff						get_first_sec
.193fff		c2 20		rep #$20	                REP #$20        ; set A long
.194001		ad 2c a3	lda $18a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.194004		8d 20 a0	sta $18a020	                STA ROOT_DIR_FIRST_CLUSTER
.194007		ad 2e a3	lda $18a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.19400a		8d 22 a0	sta $18a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.19400d		ad 0e a3	lda $18a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.194010		8d 0c a0	sta $18a00c	                STA NUM_RSRV_SEC
.194013		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.194014		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.194017		6d 0c a0	adc $18a00c	                ADC NUM_RSRV_SEC
.19401a		8d 14 a0	sta $18a014	                STA FAT_BEGIN_LBA
.19401d		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.194020		69 00 00	adc #$0000	                ADC #0
.194023		8d 16 a0	sta $18a016	                STA FAT_BEGIN_LBA+2
.194026		e2 20		sep #$20	                SEP #$20        ; set A short
.194028		a2 00 00	ldx #$0000	                LDX #0
.19402b		bf 24 a3 18	lda $18a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.19402f		9f 10 a0 18	sta $18a010,x	                STA @l SEC_PER_FAT,X
.194033		e8		inx		                INX
.194034		e0 04 00	cpx #$0004	                CPX #4
.194037		d0 f2		bne $19402b	                BNE cpy_secperfat
.194039		ad 10 a0	lda $18a010	                LDA SEC_PER_FAT
.19403c		0a		asl a		                ASL A
.19403d		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.194040		ad 11 a0	lda $18a011	                LDA SEC_PER_FAT+1
.194043		2a		rol a		                ROL A
.194044		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.194047		ad 12 a0	lda $18a012	                LDA SEC_PER_FAT+2
.19404a		2a		rol a		                ROL A
.19404b		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.19404e		ad 13 a0	lda $18a013	                LDA SEC_PER_FAT+3
.194051		2a		rol a		                ROL A
.194052		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.194055		18		clc		                CLC
.194056		ad 1c a0	lda $18a01c	                LDA CLUSTER_BEGIN_LBA
.194059		6d 14 a0	adc $18a014	                ADC FAT_BEGIN_LBA
.19405c		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.19405f		ad 1d a0	lda $18a01d	                LDA CLUSTER_BEGIN_LBA+1
.194062		6d 15 a0	adc $18a015	                ADC FAT_BEGIN_LBA+1
.194065		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.194068		ad 1e a0	lda $18a01e	                LDA CLUSTER_BEGIN_LBA+2
.19406b		6d 16 a0	adc $18a016	                ADC FAT_BEGIN_LBA+2
.19406e		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.194071		ad 1f a0	lda $18a01f	                LDA CLUSTER_BEGIN_LBA+3
.194074		6d 17 a0	adc $18a017	                ADC FAT_BEGIN_LBA+3
.194077		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.19407a		e2 20		sep #$20	                SEP #$20        ; set A short
.19407c		ad 0d a3	lda $18a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.19407f		8d 03 a0	sta $18a003	                STA SECTORS_PER_CLUSTER
.194082		18		clc		                CLC
.194083		ad 14 a0	lda $18a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.194086		6d 10 a0	adc $18a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.194089		8d 18 a0	sta $18a018	                STA FAT2_BEGIN_LBA
.19408c		ad 15 a0	lda $18a015	                LDA FAT_BEGIN_LBA+1
.19408f		6d 11 a0	adc $18a011	                ADC SEC_PER_FAT+1
.194092		8d 19 a0	sta $18a019	                STA FAT2_BEGIN_LBA+1
.194095		ad 16 a0	lda $18a016	                LDA FAT_BEGIN_LBA+2
.194098		6d 12 a0	adc $18a012	                ADC SEC_PER_FAT+2
.19409b		8d 1a a0	sta $18a01a	                STA FAT2_BEGIN_LBA+2
.19409e		ad 17 a0	lda $18a017	                LDA FAT_BEGIN_LBA+3
.1940a1		6d 13 a0	adc $18a013	                ADC SEC_PER_FAT+3
.1940a4		8d 1b a0	sta $18a01b	                STA FAT2_BEGIN_LBA+3
.1940a7		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.1940a9		8d 0e a0	sta $18a00e	                STA CLUSTER_SIZE
.1940ac		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.1940ae		8d 0f a0	sta $18a00f	                STA CLUSTER_SIZE+1
.1940b1						ret_success
.1940b1		e2 20		sep #$20	                SEP #$20        ; set A short
.1940b3		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.1940b5		28		plp		                PLP
.1940b6		2b		pld		                PLD
.1940b7		ab		plb		                PLB
.1940b8		38		sec		                SEC
.1940b9		6b		rtl		                RTL
.1940ba						ret_failure
.1940ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1940bc		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.1940be		28		plp		                PLP
.1940bf		2b		pld		                PLD
.1940c0		ab		plb		                PLB
.1940c1		18		clc		                CLC
.1940c2		6b		rtl		                RTL
.1940c3						DOS_TESTBOOT
.1940c3		8b		phb		                PHB
.1940c4		0b		phd		                PHD
.1940c5		da		phx		                PHX
.1940c6		08		php		                PHP
.1940c7		48		pha		                PHA             ; begin setdbr macro
.1940c8		08		php		                PHP
.1940c9		e2 20		sep #$20	                SEP #$20        ; set A short
.1940cb		a9 00		lda #$00	                LDA #0
.1940cd		48		pha		                PHA
.1940ce		ab		plb		                PLB
.1940cf		28		plp		                PLP
.1940d0		68		pla		                PLA             ; end setdbr macro
.1940d1		48		pha		                PHA             ; begin setdp macro
.1940d2		08		php		                PHP
.1940d3		c2 20		rep #$20	                REP #$20        ; set A long
.1940d5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1940d8		5b		tcd		                TCD
.1940d9		28		plp		                PLP
.1940da		68		pla		                PLA             ; end setdp macro
.1940db		c2 10		rep #$10	                REP #$10        ; set X long
.1940dd						chk_dev
.1940dd		e2 20		sep #$20	                SEP #$20        ; set A short
.1940df		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.1940e1		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.1940e3		f0 24		beq $194109	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.1940e5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1940e7		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.1940ea		85 02		sta $0322	                STA @b BIOS_LBA
.1940ec		85 04		sta $0324	                STA @b BIOS_LBA+2
.1940ee		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.1940f1		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.1940f3		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.1940f6		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.1940f8		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.1940fc		b0 03		bcs $194101	                BCS chk_mbr_brl
.1940fe		82 47 00	brl $194148	                BRL done                    ; If failed... just return
.194101						chk_mbr_brl
.194101		e2 20		sep #$20	                SEP #$20        ; set A short
.194103		af 00 a3 18	lda $18a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.194107		80 04		bra $19410d	                BRA chk_brl
.194109		af 3e a3 18	lda $18a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.19410d		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.19410f		f0 06		beq $194117	                BEQ chk_magic               ; Yes: check for the magic text
.194111		c9 82		cmp #$82	                CMP #$82
.194113		f0 02		beq $194117	                BEQ chk_magic
.194115		80 31		bra $194148	                BRA done                    ; No: just return
.194117		a2 00 00	ldx #$0000	chk_magic       LDX #0
.19411a		bf 03 a3 18	lda $18a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.19411e		df 4d 41 19	cmp $19414d,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.194122		d0 24		bne $194148	                BNE done                    ; If it's not equal, just return
.194124		e8		inx		                INX                         ; Otherwise, check the next one
.194125		e0 08 00	cpx #$0008	                CPX #8
.194128		d0 f0		bne $19411a	                BNE magic_loop              ; Until we've checked all 8 bytes
.19412a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19412c		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.19412f		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.194132		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.194135		44 18 18	mvp $18,$18	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.194138		e2 20		sep #$20	                SEP #$20        ; set A short
.19413a		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.19413c		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.19413e		f0 04		beq $194144	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.194140		5c 00 a9 18	jmp $18a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.194144		5c 3e a9 18	jmp $18a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.194148		28		plp		done            PLP
.194149		2b		pld		                PLD
.19414a		ab		plb		                PLB
.19414b		fa		plx		                PLX
.19414c		6b		rtl		                RTL
>19414d		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.194155						DOS_CALC_LBA
.194155		8b		phb		                PHB
.194156		0b		phd		                PHD
.194157		08		php		                PHP
.194158		48		pha		                PHA             ; begin setdbr macro
.194159		08		php		                PHP
.19415a		e2 20		sep #$20	                SEP #$20        ; set A short
.19415c		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19415e		48		pha		                PHA
.19415f		ab		plb		                PLB
.194160		28		plp		                PLP
.194161		68		pla		                PLA             ; end setdbr macro
.194162		48		pha		                PHA             ; begin setdp macro
.194163		08		php		                PHP
.194164		c2 20		rep #$20	                REP #$20        ; set A long
.194166		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194169		5b		tcd		                TCD
.19416a		28		plp		                PLP
.19416b		68		pla		                PLA             ; end setdp macro
.19416c		c2 20		rep #$20	                REP #$20        ; set A long
.19416e		38		sec		                SEC
.19416f		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.194171		e9 02 00	sbc #$0002	                SBC #2
.194174		85 28		sta $0348	                STA DOS_TEMP
.194176		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194178		e9 00 00	sbc #$0000	                SBC #0
.19417b		85 2a		sta $034a	                STA DOS_TEMP+2
.19417d		e2 10		sep #$10	                SEP #$10        ; set X short
.19417f		ae 03 a0	ldx $18a003	                LDX SECTORS_PER_CLUSTER
.194182		e0 01		cpx #$01	mult_loop       CPX #1
.194184		f0 07		beq $19418d	                BEQ add_offset
.194186		06 28		asl $0348	                ASL DOS_TEMP
.194188		26 28		rol $0348	                ROL DOS_TEMP
.19418a		ca		dex		                DEX
.19418b		80 f5		bra $194182	                BRA mult_loop
.19418d		18		clc		add_offset      CLC
.19418e		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.194190		6d 1c a0	adc $18a01c	                ADC CLUSTER_BEGIN_LBA
.194193		85 02		sta $0322	                STA BIOS_LBA
.194195		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194197		6d 1e a0	adc $18a01e	                ADC CLUSTER_BEGIN_LBA+2
.19419a		85 04		sta $0324	                STA BIOS_LBA+2
.19419c		28		plp		                PLP
.19419d		2b		pld		                PLD
.19419e		ab		plb		                PLB
.19419f		6b		rtl		                RTL
.1941a0						DOS_GETCLUSTER
.1941a0		8b		phb		                PHB
.1941a1		0b		phd		                PHD
.1941a2		08		php		                PHP
.1941a3		48		pha		                PHA             ; begin setdbr macro
.1941a4		08		php		                PHP
.1941a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1941a7		a9 00		lda #$00	                LDA #0
.1941a9		48		pha		                PHA
.1941aa		ab		plb		                PLB
.1941ab		28		plp		                PLP
.1941ac		68		pla		                PLA             ; end setdbr macro
.1941ad		48		pha		                PHA             ; begin setdp macro
.1941ae		08		php		                PHP
.1941af		c2 20		rep #$20	                REP #$20        ; set A long
.1941b1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1941b4		5b		tcd		                TCD
.1941b5		28		plp		                PLP
.1941b6		68		pla		                PLA             ; end setdp macro
.1941b7		c2 20		rep #$20	                REP #$20        ; set A long
.1941b9		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.1941bb		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1941bd		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.1941bf		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1941c1		22 55 41 19	jsl $194155	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.1941c5		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.1941c9		90 09		bcc $1941d4	                BCC ret_failure
.1941cb						ret_success
.1941cb		e2 20		sep #$20	                SEP #$20        ; set A short
.1941cd		64 0e		stz $032e	                STZ DOS_STATUS
.1941cf		28		plp		                PLP
.1941d0		2b		pld		                PLD
.1941d1		ab		plb		                PLB
.1941d2		38		sec		                SEC
.1941d3		6b		rtl		                RTL
.1941d4						ret_failure
.1941d4		e2 20		sep #$20	                SEP #$20        ; set A short
.1941d6		85 0e		sta $032e	                STA DOS_STATUS
.1941d8		28		plp		                PLP
.1941d9		2b		pld		                PLD
.1941da		ab		plb		                PLB
.1941db		18		clc		                CLC
.1941dc		6b		rtl		                RTL
.1941dd						DOS_PUTCLUSTER
.1941dd		8b		phb		                PHB
.1941de		0b		phd		                PHD
.1941df		08		php		                PHP
.1941e0		48		pha		                PHA             ; begin setdbr macro
.1941e1		08		php		                PHP
.1941e2		e2 20		sep #$20	                SEP #$20        ; set A short
.1941e4		a9 00		lda #$00	                LDA #0
.1941e6		48		pha		                PHA
.1941e7		ab		plb		                PLB
.1941e8		28		plp		                PLP
.1941e9		68		pla		                PLA             ; end setdbr macro
.1941ea		48		pha		                PHA             ; begin setdp macro
.1941eb		08		php		                PHP
.1941ec		c2 20		rep #$20	                REP #$20        ; set A long
.1941ee		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1941f1		5b		tcd		                TCD
.1941f2		28		plp		                PLP
.1941f3		68		pla		                PLA             ; end setdp macro
.1941f4		c2 20		rep #$20	                REP #$20        ; set A long
.1941f6		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.1941f8		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1941fa		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.1941fc		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1941fe		22 55 41 19	jsl $194155	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.194202		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.194206		90 09		bcc $194211	                BCC ret_failure
.194208						ret_success
.194208		e2 20		sep #$20	                SEP #$20        ; set A short
.19420a		64 0e		stz $032e	                STZ DOS_STATUS
.19420c		28		plp		                PLP
.19420d		2b		pld		                PLD
.19420e		ab		plb		                PLB
.19420f		38		sec		                SEC
.194210		6b		rtl		                RTL
.194211						ret_failure
.194211		e2 20		sep #$20	                SEP #$20        ; set A short
.194213		85 0e		sta $032e	                STA DOS_STATUS
.194215		28		plp		                PLP
.194216		2b		pld		                PLD
.194217		ab		plb		                PLB
.194218		18		clc		                CLC
.194219		6b		rtl		                RTL
>19421a		40 46 00			DOS_FDC_NAME    .null "@F"
.19421d						DOS_FDC_DESC
>19421d		1a 42 19 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>194221		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>194222		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>194226		40 53 00			DOS_SDC_NAME    .null "@S"
.194229						DOS_SDC_DESC
>194229		26 42 19 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>19422d		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>19422e		1d 42 19 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>194232		40 48 00			DOS_HDC_NAME    .null "@H"
.194235						DOS_HD_DESC
>194235		32 42 19 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>194239		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>19423a		29 42 19 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.19423e						DOS_PARSE_DEV
.19423e		8b		phb		                PHB
.19423f		0b		phd		                PHD
.194240		08		php		                PHP
.194241		48		pha		                PHA             ; begin setdbr macro
.194242		08		php		                PHP
.194243		e2 20		sep #$20	                SEP #$20        ; set A short
.194245		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194247		48		pha		                PHA
.194248		ab		plb		                PLB
.194249		28		plp		                PLP
.19424a		68		pla		                PLA             ; end setdbr macro
.19424b		48		pha		                PHA             ; begin setdp macro
.19424c		08		php		                PHP
.19424d		c2 20		rep #$20	                REP #$20        ; set A long
.19424f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194252		5b		tcd		                TCD
.194253		28		plp		                PLP
.194254		68		pla		                PLA             ; end setdp macro
.194255		c2 30		rep #$30	                REP #$30        ; set A&X long
.194257		af 4a a0 18	lda $18a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.19425b		85 28		sta $0348	                STA DOS_TEMP
.19425d		af 4c a0 18	lda $18a04c	                LDA @l DOS_DEV_NAMES+2
.194261		85 2a		sta $034a	                STA DOS_TEMP+2
.194263		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.194266		85 48		sta $0368	                STA DOS_STR2_PTR
.194268		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.19426b		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.19426d		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.194270		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194272		85 44		sta $0364	                STA DOS_STR1_PTR
.194274		c8		iny		                INY
.194275		c8		iny		                INY
.194276		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194278		85 46		sta $0366	                STA DOS_STR1_PTR+2
.19427a		e2 20		sep #$20	                SEP #$20        ; set A short
.19427c		a0 00 00	ldy #$0000	                LDY #0
.19427f		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.194281		f0 24		beq $1942a7	                BEQ found                   ; If it's NULL, we found a match
.194283		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.194285		d0 03		bne $19428a	                BNE next_device             ; If no match, try to load the next device
.194287		c8		iny		                INY                         ; Go to the next character
.194288		80 f5		bra $19427f	                BRA cmp_loop
.19428a						next_device
.19428a		c2 20		rep #$20	                REP #$20        ; set A long
.19428c		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.19428f		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194291		48		pha		                PHA
.194292		c8		iny		                INY
.194293		c8		iny		                INY
.194294		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194296		85 2a		sta $034a	                STA DOS_TEMP+2
.194298		68		pla		                PLA
.194299		85 28		sta $0348	                STA DOS_TEMP
.19429b		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.19429d		d0 ce		bne $19426d	                BNE dev_loop                ; No: check this device
.19429f		a5 2a		lda $034a	                LDA DOS_TEMP+2
.1942a1		d0 ca		bne $19426d	                BNE dev_loop
.1942a3		28		plp		done            PLP                         ; Otherwise, return having not found a match
.1942a4		2b		pld		                PLD
.1942a5		ab		plb		                PLB
.1942a6		6b		rtl		                RTL
.1942a7		22 b8 42 19	jsl $1942b8	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.1942ab		e2 20		sep #$20	                SEP #$20        ; set A short
.1942ad		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.1942b0		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.1942b2		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1942b6		80 eb		bra $1942a3	                BRA done
.1942b8						DOS_ADJUSTPATH
.1942b8		da		phx		                PHX
.1942b9		5a		phy		                PHY
.1942ba		8b		phb		                PHB
.1942bb		0b		phd		                PHD
.1942bc		08		php		                PHP
.1942bd		48		pha		                PHA             ; begin setdbr macro
.1942be		08		php		                PHP
.1942bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1942c1		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1942c3		48		pha		                PHA
.1942c4		ab		plb		                PLB
.1942c5		28		plp		                PLP
.1942c6		68		pla		                PLA             ; end setdbr macro
.1942c7		48		pha		                PHA             ; begin setdp macro
.1942c8		08		php		                PHP
.1942c9		c2 20		rep #$20	                REP #$20        ; set A long
.1942cb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1942ce		5b		tcd		                TCD
.1942cf		28		plp		                PLP
.1942d0		68		pla		                PLA             ; end setdp macro
.1942d1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1942d3		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.1942d5		98		tya		                TYA                             ; Compute the address of the first source byte
.1942d6		18		clc		                CLC
.1942d7		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.1942da		aa		tax		                TAX
.1942db		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.1942de		a8		tay		                TAY
.1942df		38		sec		                SEC                             ; Compute the number of bytes to copy
.1942e0		a9 00 01	lda #$0100	                LDA #256
.1942e3		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.1942e5		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.1942e8		28		plp		                PLP
.1942e9		2b		pld		                PLD
.1942ea		ab		plb		                PLB
.1942eb		7a		ply		                PLY
.1942ec		fa		plx		                PLX
.1942ed		6b		rtl		                RTL
.1942ee						DOS_PARSE_PATH
.1942ee		8b		phb		                PHB
.1942ef		0b		phd		                PHD
.1942f0		08		php		                PHP
.1942f1		48		pha		                PHA             ; begin setdbr macro
.1942f2		08		php		                PHP
.1942f3		e2 20		sep #$20	                SEP #$20        ; set A short
.1942f5		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1942f7		48		pha		                PHA
.1942f8		ab		plb		                PLB
.1942f9		28		plp		                PLP
.1942fa		68		pla		                PLA             ; end setdbr macro
.1942fb		48		pha		                PHA             ; begin setdp macro
.1942fc		08		php		                PHP
.1942fd		c2 20		rep #$20	                REP #$20        ; set A long
.1942ff		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194302		5b		tcd		                TCD
.194303		28		plp		                PLP
.194304		68		pla		                PLA             ; end setdp macro
.194305		c2 10		rep #$10	                REP #$10        ; set X long
.194307		e2 20		sep #$20	                SEP #$20        ; set A short
.194309		a2 00 00	ldx #$0000	                LDX #0
.19430c		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.19430e		f0 1b		beq $19432b	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.194310		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.194312		b0 05		bcs $194319	                BGE check_case          ; No: check the case
.194314		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.194316		82 64 00	brl $19437d	                BRL ret_failure
.194319		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.19431b		90 08		bcc $194325	                BLT next_char
.19431d		c9 7b		cmp #$7b	                CMP #'z'+1
.19431f		b0 04		bcs $194325	                BGE next_char
.194321		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.194323		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.194325		e8		inx		next_char       INX                     ; Move to the next character
.194326		e0 00 01	cpx #$0100	                CPX #$100
.194329		d0 e1		bne $19430c	                BNE upcase_loop
.19432b		22 3e 42 19	jsl $19423e	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.19432f		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.194331		c9 3a		cmp #$3a	                CMP #':'
.194333		d0 07		bne $19433c	                BNE clr_name            ; If not colon, treat it as a file name
.194335		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.194338		22 b8 42 19	jsl $1942b8	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.19433c		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.19433f		a9 20		lda #$20	                LDA #' '
.194341		99 3a a0	sta $18a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.194344		c8		iny		                INY
.194345		c0 0b 00	cpy #$000b	                CPY #11
.194348		d0 f7		bne $194341	                BNE clr_loop
.19434a		a2 00 00	ldx #$0000	                LDX #0
.19434d		a0 00 00	ldy #$0000	                LDY #0
.194350		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.194352		f0 20		beq $194374	                BEQ ret_success         ; If NULL: we've finished parsing the path
.194354		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.194356		f0 0a		beq $194362	                BEQ cpy_ext             ; And move to the extension
.194358		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.19435b		e8		inx		                INX
.19435c		c8		iny		                INY                     ; Move to the next character
.19435d		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.194360		d0 ee		bne $194350	                BNE cpy_name_loop       ; No: process this one
.194362		e8		inx		cpy_ext         INX                     ; Skip the dot
.194363		a0 08 00	ldy #$0008	                LDY #8
.194366		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.194368		f0 0a		beq $194374	                BEQ ret_success         ; If it's NULL, we've finished
.19436a		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.19436d		e8		inx		                INX
.19436e		c8		iny		                INY                     ; Move to the next character
.19436f		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.194372		d0 f2		bne $194366	                BNE cpy_ext_loop        ; No: process this one
.194374						ret_success
.194374		e2 20		sep #$20	                SEP #$20        ; set A short
.194376		64 0e		stz $032e	                STZ DOS_STATUS
.194378		28		plp		                PLP
.194379		2b		pld		                PLD
.19437a		ab		plb		                PLB
.19437b		38		sec		                SEC
.19437c		6b		rtl		                RTL
.19437d						ret_failure
.19437d		e2 20		sep #$20	                SEP #$20        ; set A short
.19437f		85 0e		sta $032e	                STA DOS_STATUS
.194381		28		plp		                PLP
.194382		2b		pld		                PLD
.194383		ab		plb		                PLB
.194384		18		clc		                CLC
.194385		6b		rtl		                RTL
.194386						DOS_FINDFILE
.194386		8b		phb		                PHB
.194387		0b		phd		                PHD
.194388		08		php		                PHP
.194389		48		pha		                PHA             ; begin setdbr macro
.19438a		08		php		                PHP
.19438b		e2 20		sep #$20	                SEP #$20        ; set A short
.19438d		a9 00		lda #$00	                LDA #0
.19438f		48		pha		                PHA
.194390		ab		plb		                PLB
.194391		28		plp		                PLP
.194392		68		pla		                PLA             ; end setdbr macro
.194393		48		pha		                PHA             ; begin setdp macro
.194394		08		php		                PHP
.194395		c2 20		rep #$20	                REP #$20        ; set A long
.194397		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19439a		5b		tcd		                TCD
.19439b		28		plp		                PLP
.19439c		68		pla		                PLA             ; end setdp macro
.19439d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19439f		22 ee 42 19	jsl $1942ee	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.1943a3		b0 05		bcs $1943aa	                BCS mount                       ; If success: try to open the directory
.1943a5		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.1943a6		2b		pld		                PLD
.1943a7		ab		plb		                PLB
.1943a8		18		clc		                CLC
.1943a9		6b		rtl		                RTL
.1943aa		22 08 3f 19	jsl $193f08	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.1943ae		b0 07		bcs $1943b7	                BCS get_directory
.1943b0		e2 20		sep #$20	                SEP #$20        ; set A short
.1943b2		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.1943b4		82 56 00	brl $19440d	                BRL ret_failure
.1943b7						get_directory
.1943b7		c2 20		rep #$20	                REP #$20        ; set A long
.1943b9		22 bd 3b 19	jsl $193bbd	                JSL DOS_DIROPEN                 ; Get the directory
.1943bd		b0 07		bcs $1943c6	                BCS scan_entries                ; If success: start scanning the directory entries
.1943bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1943c1		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.1943c3		82 47 00	brl $19440d	                BRL ret_failure
.1943c6		22 3c 3c 19	jsl $193c3c	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.1943ca						scan_loop
.1943ca		e2 20		sep #$20	                SEP #$20        ; set A short
.1943cc		a0 00 00	ldy #$0000	                LDY #0
.1943cf		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.1943d1		d0 05		bne $1943d8	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.1943d3		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.1943d5		82 35 00	brl $19440d	                BRL ret_failure
.1943d8		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.1943da		f0 26		beq $194402	                BEQ next_entry                  ; Go to the next entry
.1943dc		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.1943df		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.1943e1		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.1943e3		d0 1d		bne $194402	                BNE next_entry                  ; Yes: skip it!
.1943e5		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.1943e7		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.1943e9		f0 17		beq $194402	                BEQ next_entry                  ; Yes: skip it!
.1943eb		a2 00 00	ldx #$0000	                LDX #0
.1943ee		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.1943f1		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.1943f3		df 3a a0 18	cmp $18a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.1943f7		d0 09		bne $194402	                BNE next_entry                  ; If not equal: try the next entry
.1943f9		c8		iny		                INY                             ; Advance to the next character
.1943fa		e8		inx		                INX
.1943fb		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.1943fe		f0 16		beq $194416	                BEQ match                       ; Yes: we have a match!
.194400		80 ef		bra $1943f1	                BRA scan_cmp_loop               ; No: keep checking
.194402		22 57 3c 19	jsl $193c57	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.194406		90 05		bcc $19440d	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.194408		82 bf ff	brl $1943ca	                BRL scan_loop                   ; If found: keep scanning
.19440b		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.19440d						ret_failure
.19440d		e2 20		sep #$20	                SEP #$20        ; set A short
.19440f		85 0e		sta $032e	                STA DOS_STATUS
.194411		28		plp		                PLP
.194412		2b		pld		                PLD
.194413		ab		plb		                PLB
.194414		18		clc		                CLC
.194415		6b		rtl		                RTL
.194416						match
.194416		c2 20		rep #$20	                REP #$20        ; set A long
.194418		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.19441b		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.19441d		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.19441f		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.194422		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194424		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194426						ret_success
.194426		e2 20		sep #$20	                SEP #$20        ; set A short
.194428		64 0e		stz $032e	                STZ DOS_STATUS
.19442a		28		plp		                PLP
.19442b		2b		pld		                PLD
.19442c		ab		plb		                PLB
.19442d		38		sec		                SEC
.19442e		6b		rtl		                RTL
.19442f						DOS_READFILE
.19442f		8b		phb		                PHB
.194430		0b		phd		                PHD
.194431		08		php		                PHP
.194432		48		pha		                PHA             ; begin setdbr macro
.194433		08		php		                PHP
.194434		e2 20		sep #$20	                SEP #$20        ; set A short
.194436		a9 00		lda #$00	                LDA #0
.194438		48		pha		                PHA
.194439		ab		plb		                PLB
.19443a		28		plp		                PLP
.19443b		68		pla		                PLA             ; end setdbr macro
.19443c		48		pha		                PHA             ; begin setdp macro
.19443d		08		php		                PHP
.19443e		c2 20		rep #$20	                REP #$20        ; set A long
.194440		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194443		5b		tcd		                TCD
.194444		28		plp		                PLP
.194445		68		pla		                PLA             ; end setdp macro
.194446		c2 30		rep #$30	                REP #$30        ; set A&X long
.194448		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.19444a		48		pha		                PHA
.19444b		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.19444d		48		pha		                PHA
.19444e		22 86 43 19	jsl $194386	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.194452		68		pla		                PLA
.194453		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194455		68		pla		                PLA
.194456		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194458		90 0f		bcc $194469	                BCC pass_failure                    ; If found: try to load the cluster
.19445a		22 a0 41 19	jsl $1941a0	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.19445e		90 09		bcc $194469	                BCC pass_failure                    ; If there's an error... pass it up the chain
.194460						ret_success
.194460		e2 20		sep #$20	                SEP #$20        ; set A short
.194462		64 0e		stz $032e	                STZ DOS_STATUS
.194464		28		plp		                PLP
.194465		2b		pld		                PLD
.194466		ab		plb		                PLB
.194467		38		sec		                SEC
.194468		6b		rtl		                RTL
.194469		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.19446a		2b		pld		                PLD
.19446b		ab		plb		                PLB
.19446c		18		clc		                CLC
.19446d		6b		rtl		                RTL
.19446e						ENTRYFORCLUS12
.19446e		8b		phb		                PHB
.19446f		0b		phd		                PHD
.194470		08		php		                PHP
.194471		48		pha		                PHA             ; begin setdbr macro
.194472		08		php		                PHP
.194473		e2 20		sep #$20	                SEP #$20        ; set A short
.194475		a9 00		lda #$00	                LDA #0
.194477		48		pha		                PHA
.194478		ab		plb		                PLB
.194479		28		plp		                PLP
.19447a		68		pla		                PLA             ; end setdbr macro
.19447b		48		pha		                PHA             ; begin setdp macro
.19447c		08		php		                PHP
.19447d		c2 20		rep #$20	                REP #$20        ; set A long
.19447f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194482		5b		tcd		                TCD
.194483		28		plp		                PLP
.194484		68		pla		                PLA             ; end setdp macro
.194485		c2 30		rep #$30	                REP #$30        ; set A&X long
.194487		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.194489		0a		asl a		                ASL A
.19448a		85 28		sta $0348	                STA DOS_TEMP
.19448c		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.19448e		2a		rol a		                ROL A
.19448f		85 2a		sta $034a	                STA DOS_TEMP+2
.194491		18		clc		                CLC
.194492		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194494		65 28		adc $0348	                ADC DOS_TEMP
.194496		85 28		sta $0348	                STA DOS_TEMP
.194498		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.19449a		65 2a		adc $034a	                ADC DOS_TEMP+2
.19449c		85 2a		sta $034a	                STA DOS_TEMP+2
.19449e		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.1944a0		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.1944a2		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.1944a4		29 ff 03	and #$03ff	                AND #$003FF
.1944a7		aa		tax		                TAX
.1944a8		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944aa		66 28		ror $0348	                ROR DOS_TEMP
.1944ac		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944ae		66 28		ror $0348	                ROR DOS_TEMP
.1944b0		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944b2		66 28		ror $0348	                ROR DOS_TEMP
.1944b4		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944b6		66 28		ror $0348	                ROR DOS_TEMP
.1944b8		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944ba		66 28		ror $0348	                ROR DOS_TEMP
.1944bc		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944be		66 28		ror $0348	                ROR DOS_TEMP
.1944c0		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944c2		66 28		ror $0348	                ROR DOS_TEMP
.1944c4		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944c6		66 28		ror $0348	                ROR DOS_TEMP
.1944c8		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944ca		66 28		ror $0348	                ROR DOS_TEMP
.1944cc		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.1944cd		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA
.1944d1		65 28		adc $0348	                ADC DOS_TEMP
.1944d3		85 24		sta $0344	                STA DOS_FAT_LBA
.1944d5		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.1944d9		65 2a		adc $034a	                ADC DOS_TEMP+2
.1944db		85 26		sta $0346	                STA DOS_FAT_LBA+2
.1944dd		28		plp		                PLP
.1944de		2b		pld		                PLD
.1944df		ab		plb		                PLB
.1944e0		6b		rtl		                RTL
.1944e1						FATFORCLUSTER12
.1944e1		8b		phb		                PHB
.1944e2		0b		phd		                PHD
.1944e3		08		php		                PHP
.1944e4		48		pha		                PHA             ; begin setdbr macro
.1944e5		08		php		                PHP
.1944e6		e2 20		sep #$20	                SEP #$20        ; set A short
.1944e8		a9 00		lda #$00	                LDA #0
.1944ea		48		pha		                PHA
.1944eb		ab		plb		                PLB
.1944ec		28		plp		                PLP
.1944ed		68		pla		                PLA             ; end setdbr macro
.1944ee		48		pha		                PHA             ; begin setdp macro
.1944ef		08		php		                PHP
.1944f0		c2 20		rep #$20	                REP #$20        ; set A long
.1944f2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1944f5		5b		tcd		                TCD
.1944f6		28		plp		                PLP
.1944f7		68		pla		                PLA             ; end setdp macro
.1944f8		c2 30		rep #$30	                REP #$30        ; set A&X long
.1944fa		a2 00 00	ldx #$0000	                LDX #0
.1944fd		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.194500		8f 00 a5 18	sta $18a500	clr_loop        STA DOS_FAT_SECTORS
.194504		e8		inx		                INX
.194505		e8		inx		                INX
.194506		e0 00 04	cpx #$0400	                CPX #1024
.194509		d0 f5		bne $194500	                BNE clr_loop
.19450b		22 6e 44 19	jsl $19446e	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.19450f		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.194511		85 02		sta $0322	                STA BIOS_LBA
.194513		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194515		85 04		sta $0324	                STA BIOS_LBA+2
.194517		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.19451a		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19451c		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.19451f		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194521		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.194525		90 17		bcc $19453e	                BCC error
.194527		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.194529		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.19452c		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19452e		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.194531		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194533		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.194537		90 05		bcc $19453e	                BCC error
.194539		28		plp		                PLP
.19453a		2b		pld		                PLD
.19453b		ab		plb		                PLB
.19453c		38		sec		                SEC
.19453d		6b		rtl		                RTL
.19453e						error
.19453e		e2 20		sep #$20	                SEP #$20        ; set A short
.194540		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194542		85 0e		sta $032e	                STA DOS_STATUS
.194544		28		plp		                PLP
.194545		2b		pld		                PLD
.194546		ab		plb		                PLB
.194547		18		clc		                CLC
.194548		6b		rtl		                RTL
.194549						FATFORCLUSTER32
.194549		8b		phb		                PHB
.19454a		0b		phd		                PHD
.19454b		48		pha		                PHA             ; begin setdbr macro
.19454c		08		php		                PHP
.19454d		e2 20		sep #$20	                SEP #$20        ; set A short
.19454f		a9 00		lda #$00	                LDA #0
.194551		48		pha		                PHA
.194552		ab		plb		                PLB
.194553		28		plp		                PLP
.194554		68		pla		                PLA             ; end setdbr macro
.194555		48		pha		                PHA             ; begin setdp macro
.194556		08		php		                PHP
.194557		c2 20		rep #$20	                REP #$20        ; set A long
.194559		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19455c		5b		tcd		                TCD
.19455d		28		plp		                PLP
.19455e		68		pla		                PLA             ; end setdp macro
.19455f		c2 30		rep #$30	                REP #$30        ; set A&X long
.194561		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194563		85 24		sta $0344	                STA DOS_FAT_LBA
.194565		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194567		85 26		sta $0346	                STA DOS_FAT_LBA+2
.194569		a2 07 00	ldx #$0007	                LDX #7
.19456c		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.19456e		66 24		ror $0344	                ROR DOS_FAT_LBA
.194570		ca		dex		                DEX
.194571		d0 f9		bne $19456c	                BNE div_loop
.194573		18		clc		                CLC
.194574		a5 24		lda $0344	                LDA DOS_FAT_LBA
.194576		6f 14 a0 18	adc $18a014	                ADC FAT_BEGIN_LBA
.19457a		85 24		sta $0344	                STA DOS_FAT_LBA
.19457c		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.19457e		6f 16 a0 18	adc $18a016	                ADC FAT_BEGIN_LBA+2
.194582		85 26		sta $0346	                STA DOS_FAT_LBA+2
.194584		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.194586		85 02		sta $0322	                STA BIOS_LBA
.194588		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.19458a		85 04		sta $0324	                STA BIOS_LBA+2
.19458c		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.19458f		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194591		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.194594		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194596		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.19459a		b0 06		bcs $1945a2	                BCS find_entry
.19459c		e2 20		sep #$20	                SEP #$20        ; set A short
.19459e		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.1945a0		80 0e		bra $1945b0	                BRA ret_failure
.1945a2						find_entry
.1945a2		c2 20		rep #$20	                REP #$20        ; set A long
.1945a4		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1945a6		0a		asl a		                ASL A
.1945a7		0a		asl a		                ASL A                           ; * 4
.1945a8		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.1945ab		aa		tax		                TAX                             ; X should be the offset within the sector
.1945ac		2b		pld		ret_success     PLD
.1945ad		ab		plb		                PLB
.1945ae		38		sec		                SEC                             ; return success
.1945af		6b		rtl		                RTL
.1945b0		2b		pld		ret_failure     PLD
.1945b1		ab		plb		                PLB
.1945b2		18		clc		                CLC                             ; Return failure
.1945b3		6b		rtl		                RTL
.1945b4						NEXTCLUSTER
.1945b4		08		php		                PHP
.1945b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1945b7		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.1945bb		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.1945bd		d0 08		bne $1945c7	                BNE fat32                       ; No: assume it's FAT32
.1945bf		22 d5 45 19	jsl $1945d5	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.1945c3		90 0d		bcc $1945d2	                BCC pass_failure                ; If there was an error, pass it up the chain
.1945c5		80 06		bra $1945cd	                BRA ret_success
.1945c7		22 3d 46 19	jsl $19463d	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.1945cb		90 05		bcc $1945d2	                BCC pass_failure                ; If there was an error, pass it up the chain
.1945cd		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.1945cf		28		plp		                PLP
.1945d0		38		sec		                SEC
.1945d1		6b		rtl		                RTL
.1945d2		28		plp		pass_failure    PLP
.1945d3		18		clc		                CLC
.1945d4		6b		rtl		                RTL
.1945d5						NEXTCLUSTER12
.1945d5		8b		phb		                    PHB
.1945d6		0b		phd		                    PHD
.1945d7		08		php		                    PHP
.1945d8		48		pha		                PHA             ; begin setdbr macro
.1945d9		08		php		                PHP
.1945da		e2 20		sep #$20	                SEP #$20        ; set A short
.1945dc		a9 00		lda #$00	                LDA #0
.1945de		48		pha		                PHA
.1945df		ab		plb		                PLB
.1945e0		28		plp		                PLP
.1945e1		68		pla		                PLA             ; end setdbr macro
.1945e2		48		pha		                PHA             ; begin setdp macro
.1945e3		08		php		                PHP
.1945e4		c2 20		rep #$20	                REP #$20        ; set A long
.1945e6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1945e9		5b		tcd		                TCD
.1945ea		28		plp		                PLP
.1945eb		68		pla		                PLA             ; end setdp macro
.1945ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.1945ee		22 e1 44 19	jsl $1944e1	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.1945f2		b0 03		bcs $1945f7	                    BCS chk_clus_id
.1945f4		82 41 00	brl $194638	                    BRL pass_failure
.1945f7		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.1945f9		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.1945fc		d0 0d		bne $19460b	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.1945fe						is_even
.1945fe		c2 20		rep #$20	                REP #$20        ; set A long
.194600		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.194604		29 ff 0f	and #$0fff	                    AND #$0FFF
.194607		85 28		sta $0348	                    STA DOS_TEMP
.194609		80 0c		bra $194617	                    BRA check_id
.19460b						is_odd
.19460b		c2 20		rep #$20	                REP #$20        ; set A long
.19460d		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.194611		4a		lsr a		                    LSR A
.194612		4a		lsr a		                    LSR A
.194613		4a		lsr a		                    LSR A
.194614		4a		lsr a		                    LSR A
.194615		85 28		sta $0348	                    STA DOS_TEMP
.194617						check_id
.194617		c2 20		rep #$20	                REP #$20        ; set A long
.194619		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.19461b		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.19461e		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.194621		f0 0f		beq $194632	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.194623		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.194625		85 10		sta $0330	                    STA DOS_CLUS_ID
.194627		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.194629						ret_success
.194629		e2 20		sep #$20	                SEP #$20        ; set A short
.19462b		64 0e		stz $032e	                    STZ DOS_STATUS
.19462d		28		plp		                    PLP
.19462e		2b		pld		                    PLD
.19462f		ab		plb		                    PLB
.194630		38		sec		                    SEC
.194631		6b		rtl		                    RTL
.194632						no_more
.194632		e2 20		sep #$20	                SEP #$20        ; set A short
.194634		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.194636		85 0e		sta $032e	                    STA DOS_STATUS
.194638		28		plp		pass_failure        PLP
.194639		2b		pld		                    PLD
.19463a		ab		plb		                    PLB
.19463b		18		clc		                    CLC
.19463c		6b		rtl		                    RTL
.19463d						NEXTCLUSTER32
.19463d		8b		phb		                PHB
.19463e		0b		phd		                PHD
.19463f		08		php		                PHP
.194640		48		pha		                PHA             ; begin setdbr macro
.194641		08		php		                PHP
.194642		e2 20		sep #$20	                SEP #$20        ; set A short
.194644		a9 00		lda #$00	                LDA #0
.194646		48		pha		                PHA
.194647		ab		plb		                PLB
.194648		28		plp		                PLP
.194649		68		pla		                PLA             ; end setdbr macro
.19464a		48		pha		                PHA             ; begin setdp macro
.19464b		08		php		                PHP
.19464c		c2 20		rep #$20	                REP #$20        ; set A long
.19464e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194651		5b		tcd		                TCD
.194652		28		plp		                PLP
.194653		68		pla		                PLA             ; end setdp macro
.194654		c2 30		rep #$30	                REP #$30        ; set A&X long
.194656		22 49 45 19	jsl $194549	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.19465a		90 53		bcc $1946af	                BCC ret_failure                 ; If it did not work, return the error
.19465c		e2 20		sep #$20	                SEP #$20        ; set A short
.19465e		bf 00 a5 18	lda $18a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.194662		85 28		sta $0348	                STA DOS_TEMP
.194664		bf 01 a5 18	lda $18a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.194668		85 29		sta $0349	                STA DOS_TEMP+1
.19466a		bf 02 a5 18	lda $18a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.19466e		85 2a		sta $034a	                STA DOS_TEMP+2
.194670		bf 03 a5 18	lda $18a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.194674		85 2b		sta $034b	                STA DOS_TEMP+3
.194676		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.194678		c9 ff		cmp #$ff	                CMP #$FF
.19467a		d0 18		bne $194694	                BNE found_next
.19467c		a5 29		lda $0349	                LDA DOS_TEMP+1
.19467e		c9 ff		cmp #$ff	                CMP #$FF
.194680		d0 12		bne $194694	                BNE found_next
.194682		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194684		c9 ff		cmp #$ff	                CMP #$FF
.194686		d0 0c		bne $194694	                BNE found_next
.194688		a5 2b		lda $034b	                LDA DOS_TEMP+3
.19468a		c9 0f		cmp #$0f	                CMP #$0F
.19468c		d0 06		bne $194694	                BNE found_next                  ; No: return this cluster as the next
.19468e		e2 20		sep #$20	                SEP #$20        ; set A short
.194690		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.194692		80 1b		bra $1946af	                BRA ret_failure
.194694						found_next
.194694		e2 20		sep #$20	                SEP #$20        ; set A short
.194696		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.194698		85 10		sta $0330	                STA DOS_CLUS_ID
.19469a		a5 29		lda $0349	                LDA DOS_TEMP+1
.19469c		85 11		sta $0331	                STA DOS_CLUS_ID+1
.19469e		a5 2a		lda $034a	                LDA DOS_TEMP+2
.1946a0		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1946a2		a5 2b		lda $034b	                LDA DOS_TEMP+3
.1946a4		85 13		sta $0333	                STA DOS_CLUS_ID+3
.1946a6						ret_success
.1946a6		e2 20		sep #$20	                SEP #$20        ; set A short
.1946a8		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.1946aa		28		plp		                PLP
.1946ab		2b		pld		                PLD
.1946ac		ab		plb		                PLB
.1946ad		38		sec		                SEC
.1946ae		6b		rtl		                RTL
.1946af						ret_failure
.1946af		e2 20		sep #$20	                SEP #$20        ; set A short
.1946b1		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.1946b3		28		plp		                PLP
.1946b4		2b		pld		                PLD
.1946b5		ab		plb		                PLB
.1946b6		18		clc		                CLC
.1946b7		6b		rtl		                RTL
.1946b8						DOS_READNEXT
.1946b8		08		php		                PHP
.1946b9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1946bb		22 b4 45 19	jsl $1945b4	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.1946bf		90 09		bcc $1946ca	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.1946c1		22 a0 41 19	jsl $1941a0	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.1946c5		90 03		bcc $1946ca	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.1946c7		28		plp		ret_success     PLP
.1946c8		38		sec		                SEC
.1946c9		6b		rtl		                RTL
.1946ca		28		plp		pass_failure    PLP
.1946cb		18		clc		                CLC
.1946cc		6b		rtl		                RTL
.1946cd						DOS_FREECLUS
.1946cd		08		php		                PHP
.1946ce		48		pha		                PHA             ; begin setdp macro
.1946cf		08		php		                PHP
.1946d0		c2 20		rep #$20	                REP #$20        ; set A long
.1946d2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1946d5		5b		tcd		                TCD
.1946d6		28		plp		                PLP
.1946d7		68		pla		                PLA             ; end setdp macro
.1946d8		e2 20		sep #$20	                SEP #$20        ; set A short
.1946da		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.1946de		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.1946e0		d0 08		bne $1946ea	                BNE fat32                       ; No: assume it's FAT32
.1946e2		22 5e 47 19	jsl $19475e	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.1946e6		90 0d		bcc $1946f5	                BCC pass_failure                ; If there was an error, pass it up the chain
.1946e8		80 06		bra $1946f0	                BRA ret_success
.1946ea		22 36 48 19	jsl $194836	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.1946ee		90 05		bcc $1946f5	                BCC pass_failure                ; If there was an error, pass it up the chain
.1946f0		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.1946f2		28		plp		                PLP
.1946f3		38		sec		                SEC
.1946f4		6b		rtl		                RTL
.1946f5		28		plp		pass_failure    PLP
.1946f6		18		clc		                CLC
.1946f7		6b		rtl		                RTL
.1946f8						FDC_READ2FAT12
.1946f8		8b		phb		                    PHB
.1946f9		0b		phd		                    PHD
.1946fa		08		php		                    PHP
.1946fb		48		pha		                PHA             ; begin setdbr macro
.1946fc		08		php		                PHP
.1946fd		e2 20		sep #$20	                SEP #$20        ; set A short
.1946ff		a9 00		lda #$00	                LDA #0
.194701		48		pha		                PHA
.194702		ab		plb		                PLB
.194703		28		plp		                PLP
.194704		68		pla		                PLA             ; end setdbr macro
.194705		48		pha		                PHA             ; begin setdp macro
.194706		08		php		                PHP
.194707		c2 20		rep #$20	                REP #$20        ; set A long
.194709		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19470c		5b		tcd		                TCD
.19470d		28		plp		                PLP
.19470e		68		pla		                PLA             ; end setdp macro
.19470f		c2 30		rep #$30	                REP #$30        ; set A&X long
.194711		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.194714		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.194716		a9 18 00	lda #$0018	                    LDA #`DOS_FAT_SECTORS
.194719		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.19471b		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.19471d		85 02		sta $0322	                    STA BIOS_LBA
.19471f		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.194721		85 04		sta $0324	                    STA BIOS_LBA+2
.194723		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.194727		b0 07		bcs $194730	                    BCS inc_sect2                   ; If success: start getting the second sector
.194729		e2 20		sep #$20	                SEP #$20        ; set A short
.19472b		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.19472d		82 1c 00	brl $19474c	                    BRL ret_failure
.194730						inc_sect2
.194730		c2 20		rep #$20	                REP #$20        ; set A long
.194732		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.194734		d0 02		bne $194738	                    BNE inc_buff_ptr
.194736		e6 04		inc $0324	                    INC BIOS_LBA+2
.194738		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.19473b		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.19473d		a9 18 00	lda #$0018	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194740		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.194742		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.194746		b0 0d		bcs $194755	                    BCS ret_success                 ; If success, return success
.194748		e2 20		sep #$20	                SEP #$20        ; set A short
.19474a		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.19474c						ret_failure
.19474c		e2 20		sep #$20	                SEP #$20        ; set A short
.19474e		85 00		sta $0320	                    STA BIOS_STATUS
.194750		28		plp		                    PLP
.194751		2b		pld		                    PLD
.194752		ab		plb		                    PLB
.194753		18		clc		                    CLC
.194754		6b		rtl		                    RTL
.194755						ret_success
.194755		e2 20		sep #$20	                SEP #$20        ; set A short
.194757		64 00		stz $0320	                    STZ BIOS_STATUS
.194759		28		plp		                    PLP
.19475a		2b		pld		                    PLD
.19475b		ab		plb		                    PLB
.19475c		38		sec		                    SEC
.19475d		6b		rtl		                    RTL
.19475e						DOS_FREECLUS12
.19475e		da		phx		                PHX
.19475f		8b		phb		                PHB
.194760		0b		phd		                PHD
.194761		08		php		                PHP
.194762		48		pha		                PHA             ; begin setdbr macro
.194763		08		php		                PHP
.194764		e2 20		sep #$20	                SEP #$20        ; set A short
.194766		a9 00		lda #$00	                LDA #0
.194768		48		pha		                PHA
.194769		ab		plb		                PLB
.19476a		28		plp		                PLP
.19476b		68		pla		                PLA             ; end setdbr macro
.19476c		48		pha		                PHA             ; begin setdp macro
.19476d		08		php		                PHP
.19476e		c2 20		rep #$20	                REP #$20        ; set A long
.194770		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194773		5b		tcd		                TCD
.194774		28		plp		                PLP
.194775		68		pla		                PLA             ; end setdp macro
.194776		c2 30		rep #$30	                REP #$30        ; set A&X long
.194778		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.19477b		85 10		sta $0330	                STA DOS_CLUS_ID
.19477d		a9 00 00	lda #$0000	                LDA #0
.194780		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194782		22 6e 44 19	jsl $19446e	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.194786		22 f8 46 19	jsl $1946f8	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.19478a		b0 07		bcs $194793	                BCS start_of_fat                ; If success, move X to the start of the FAT
.19478c		e2 20		sep #$20	                SEP #$20        ; set A short
.19478e		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194790		82 99 00	brl $19482c	                BRL ret_failure
.194793						start_of_fat
.194793		c2 30		rep #$30	                REP #$30        ; set A&X long
.194795		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.194797		89 01 00	bit #$0001	                BIT #1
.19479a		d0 09		bne $1947a5	                BNE is_odd
.19479c		bf 00 a5 18	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.1947a0		29 ff 0f	and #$0fff	                AND #$0FFF
.1947a3		80 08		bra $1947ad	                BRA chk_available
.1947a5		bf 00 a5 18	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.1947a9		4a		lsr a		                LSR A
.1947aa		4a		lsr a		                LSR A
.1947ab		4a		lsr a		                LSR A
.1947ac		4a		lsr a		                LSR A
.1947ad						chk_available
.1947ad		85 28		sta $0348	                STA DOS_TEMP
.1947af		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.1947b2		f0 03		beq $1947b7	                BEQ chk_found
.1947b4		82 39 00	brl $1947f0	                BRL next_cluster                ; No: advance to the next cluster
.1947b7		8a		txa		chk_found       TXA
.1947b8		85 2a		sta $034a	                STA DOS_TEMP+2
.1947ba		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.1947bc		89 01 00	bit #$0001	                BIT #1
.1947bf		d0 0d		bne $1947ce	                BNE is_odd2
.1947c1						is_even2
.1947c1		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.1947c5		09 ff 0f	ora #$0fff	                ORA #$0FFF
.1947c8		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.1947cc		80 0b		bra $1947d9	                BRA write_fat
.1947ce						is_odd2
.1947ce		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.1947d2		09 f0 ff	ora #$fff0	                ORA #$FFF0
.1947d5		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.1947d9		22 00 49 19	jsl $194900	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.1947dd		b0 07		bcs $1947e6	                BCS ret_success                 ; If success: return success
.1947df		e2 20		sep #$20	                SEP #$20        ; set A short
.1947e1		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.1947e3		82 46 00	brl $19482c	                BRL ret_failure
.1947e6						ret_success
.1947e6		e2 20		sep #$20	                SEP #$20        ; set A short
.1947e8		64 0e		stz $032e	                STZ DOS_STATUS
.1947ea		28		plp		                PLP
.1947eb		2b		pld		                PLD
.1947ec		ab		plb		                PLB
.1947ed		fa		plx		                PLX
.1947ee		38		sec		                SEC
.1947ef		6b		rtl		                RTL
.1947f0						next_cluster
.1947f0		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.1947f2		d0 02		bne $1947f6	                BNE calc_entry
.1947f4		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.1947f6		22 6e 44 19	jsl $19446e	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.1947fa		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.1947fd		f0 03		beq $194802	                BEQ chk_end_of_fat
.1947ff		82 93 ff	brl $194795	                BRL chk_cluster                 ; No: go back and check it too
.194802						chk_end_of_fat
.194802		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.194804		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.194808		d0 0f		bne $194819	                BNE next_2
.19480a		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.19480c		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.194810		d0 07		bne $194819	                BNE next_2                      ; No: get the next to sectors
.194812		e2 20		sep #$20	                SEP #$20        ; set A short
.194814		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.194816		82 13 00	brl $19482c	                BRL ret_failure
.194819						next_2
.194819		22 f8 46 19	jsl $1946f8	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.19481d		90 06		bcc $194825	                BCC fat_fail                    ; If failed: return error
.19481f		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.194822		82 70 ff	brl $194795	                BRL chk_cluster                 ; And start checking from there
.194825						fat_fail
.194825		e2 20		sep #$20	                SEP #$20        ; set A short
.194827		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194829		82 00 00	brl $19482c	                BRL ret_failure
.19482c						ret_failure
.19482c		e2 20		sep #$20	                SEP #$20        ; set A short
.19482e		85 0e		sta $032e	                STA DOS_STATUS
.194830		28		plp		                PLP
.194831		2b		pld		                PLD
.194832		ab		plb		                PLB
.194833		fa		plx		                PLX
.194834		18		clc		                CLC
.194835		6b		rtl		                RTL
.194836						DOS_FREECLUS32
.194836		8b		phb		                PHB
.194837		0b		phd		                PHD
.194838		08		php		                PHP
.194839		48		pha		                PHA             ; begin setdbr macro
.19483a		08		php		                PHP
.19483b		e2 20		sep #$20	                SEP #$20        ; set A short
.19483d		a9 00		lda #$00	                LDA #0
.19483f		48		pha		                PHA
.194840		ab		plb		                PLB
.194841		28		plp		                PLP
.194842		68		pla		                PLA             ; end setdbr macro
.194843		48		pha		                PHA             ; begin setdp macro
.194844		08		php		                PHP
.194845		c2 20		rep #$20	                REP #$20        ; set A long
.194847		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19484a		5b		tcd		                TCD
.19484b		28		plp		                PLP
.19484c		68		pla		                PLA             ; end setdp macro
.19484d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19484f		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.194852		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194854		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.194857		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194859		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.19485d		85 02		sta $0322	                STA BIOS_LBA
.19485f		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.194863		85 04		sta $0324	                STA BIOS_LBA+2
.194865		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.194869		b0 07		bcs $194872	                BCS initial_entry               ; If OK: set the initial entry to check
.19486b		e2 20		sep #$20	                SEP #$20        ; set A short
.19486d		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.19486f		82 6b 00	brl $1948dd	                BRL ret_failure
.194872						initial_entry
.194872		c2 20		rep #$20	                REP #$20        ; set A long
.194874		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.194877		85 10		sta $0330	                STA DOS_CLUS_ID
.194879		a9 00 00	lda #$0000	                LDA #0
.19487c		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19487e		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.194881		bf 00 a3 18	lda $18a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.194885		d0 06		bne $19488d	                BNE next_entry                  ; No: move to the next entry
.194887		bf 02 a3 18	lda $18a302,x	                LDA DOS_SECTOR+2,X
.19488b		f0 36		beq $1948c3	                BEQ found_free                  ; Yes: go to allocate and return it
.19488d		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.19488f		d0 02		bne $194893	                BNE inc_ptr
.194891		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.194893		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.194894		e8		inx		                INX
.194895		e8		inx		                INX
.194896		e8		inx		                INX
.194897		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.19489a		90 e5		bcc $194881	                BLT chk_entry                   ; No: check this entry
.19489c		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.19489e		d0 18		bne $1948b8	                BNE get_block
.1948a0		e6 04		inc $0324	                INC BIOS_LBA+2
.1948a2		a5 04		lda $0324	                LDA BIOS_LBA+2
.1948a4		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.1948a8		90 0e		bcc $1948b8	                BLT get_block
.1948aa		a5 02		lda $0322	                LDA BIOS_LBA
.1948ac		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA
.1948b0		90 06		bcc $1948b8	                BLT get_block
.1948b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1948b4		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.1948b6		80 25		bra $1948dd	                BRA ret_failure
.1948b8		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.1948bc		90 1b		bcc $1948d9	                BCC ret_fat_error               ; If error: throw a FAT error
.1948be		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.1948c1		80 be		bra $194881	                BRA chk_entry                   ; Check this entry
.1948c3						found_free
.1948c3		c2 20		rep #$20	                REP #$20        ; set A long
.1948c5		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.1948c8		9f 00 a3 18	sta $18a300,x	                STA DOS_SECTOR,X
.1948cc		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.1948cf		9f 02 a3 18	sta $18a302,x	                STA DOS_SECTOR+2,X
.1948d3		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.1948d7		b0 0d		bcs $1948e6	                BCS ret_success                 ; If OK: return success
.1948d9						ret_fat_error
.1948d9		e2 20		sep #$20	                SEP #$20        ; set A short
.1948db		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.1948dd						ret_failure
.1948dd		e2 20		sep #$20	                SEP #$20        ; set A short
.1948df		85 0e		sta $032e	                STA DOS_STATUS
.1948e1		28		plp		                PLP
.1948e2		2b		pld		                PLD
.1948e3		ab		plb		                PLB
.1948e4		18		clc		                CLC
.1948e5		6b		rtl		                RTL
.1948e6						ret_success
.1948e6		e2 20		sep #$20	                SEP #$20        ; set A short
.1948e8		64 0e		stz $032e	                STZ DOS_STATUS
.1948ea		28		plp		                PLP
.1948eb		2b		pld		                PLD
.1948ec		ab		plb		                PLB
.1948ed		38		sec		                SEC
.1948ee		6b		rtl		                RTL
.1948ef						DELCLUSTER
.1948ef		e2 20		sep #$20	                SEP #$20        ; set A short
.1948f1		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.1948f5		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.1948f7		d0 04		bne $1948fd	                BNE fat32                       ; No: assume it's FAT32
.1948f9		5c 47 49 19	jmp $194947	fat12           JML DELCLUSTER12
.1948fd		4c 95 49	jmp $194995	fat32           JMP DELCLUSTER32
.194900						WRITEFAT12
.194900		8b		phb		                PHB
.194901		0b		phd		                PHD
.194902		48		pha		                PHA             ; begin setdbr macro
.194903		08		php		                PHP
.194904		e2 20		sep #$20	                SEP #$20        ; set A short
.194906		a9 00		lda #$00	                LDA #0
.194908		48		pha		                PHA
.194909		ab		plb		                PLB
.19490a		28		plp		                PLP
.19490b		68		pla		                PLA             ; end setdbr macro
.19490c		48		pha		                PHA             ; begin setdp macro
.19490d		08		php		                PHP
.19490e		c2 20		rep #$20	                REP #$20        ; set A long
.194910		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194913		5b		tcd		                TCD
.194914		28		plp		                PLP
.194915		68		pla		                PLA             ; end setdp macro
.194916		c2 30		rep #$30	                REP #$30        ; set A&X long
.194918		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.19491b		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19491d		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.194920		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194922		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.194924		85 02		sta $0322	                STA BIOS_LBA
.194926		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194928		85 04		sta $0324	                STA BIOS_LBA+2
.19492a		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.19492e		90 14		bcc $194944	                BCC done
.194930		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194933		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194935		a9 18 00	lda #$0018	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194938		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19493a		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.19493c		d0 02		bne $194940	                BNE put_second
.19493e		e6 04		inc $0324	                INC BIOS_LBA+2
.194940		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.194944		2b		pld		done            PLD
.194945		ab		plb		                PLB
.194946		6b		rtl		                RTL
.194947						DELCLUSTER12
.194947		8b		phb		                PHB
.194948		0b		phd		                PHD
.194949		08		php		                PHP
.19494a		48		pha		                PHA             ; begin setdbr macro
.19494b		08		php		                PHP
.19494c		e2 20		sep #$20	                SEP #$20        ; set A short
.19494e		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194950		48		pha		                PHA
.194951		ab		plb		                PLB
.194952		28		plp		                PLP
.194953		68		pla		                PLA             ; end setdbr macro
.194954		48		pha		                PHA             ; begin setdp macro
.194955		08		php		                PHP
.194956		c2 20		rep #$20	                REP #$20        ; set A long
.194958		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19495b		5b		tcd		                TCD
.19495c		28		plp		                PLP
.19495d		68		pla		                PLA             ; end setdp macro
.19495e		c2 30		rep #$30	                REP #$30        ; set A&X long
.194960		22 e1 44 19	jsl $1944e1	                JSL FATFORCLUSTER12
.194964		8a		txa		                TXA                             ; Check to see if the index is odd or even
.194965		89 01 00	bit #$0001	                BIT #1
.194968		d0 08		bne $194972	                BNE is_odd
.19496a		bd 00 a5	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.19496d		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.194970		80 06		bra $194978	                BRA save_update
.194972		bd 00 a5	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.194975		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.194978		9d 00 a5	sta $18a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.19497b		22 00 49 19	jsl $194900	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.19497f		b0 0b		bcs $19498c	                BCS ret_success
.194981						ret_failure
.194981		e2 20		sep #$20	                SEP #$20        ; set A short
.194983		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194985		85 0e		sta $032e	                STA DOS_STATUS
.194987		28		plp		                PLP
.194988		2b		pld		                PLD
.194989		ab		plb		                PLB
.19498a		18		clc		                CLC
.19498b		6b		rtl		                RTL
.19498c						ret_success
.19498c		e2 20		sep #$20	                SEP #$20        ; set A short
.19498e		64 0e		stz $032e	                STZ DOS_STATUS
.194990		28		plp		                PLP
.194991		2b		pld		                PLD
.194992		ab		plb		                PLB
.194993		38		sec		                SEC
.194994		6b		rtl		                RTL
.194995						DELCLUSTER32
.194995		8b		phb		                PHB
.194996		0b		phd		                PHD
.194997		08		php		                PHP
.194998		c2 30		rep #$30	                REP #$30        ; set A&X long
.19499a		48		pha		                PHA             ; begin setdbr macro
.19499b		08		php		                PHP
.19499c		e2 20		sep #$20	                SEP #$20        ; set A short
.19499e		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1949a0		48		pha		                PHA
.1949a1		ab		plb		                PLB
.1949a2		28		plp		                PLP
.1949a3		68		pla		                PLA             ; end setdbr macro
.1949a4		48		pha		                PHA             ; begin setdp macro
.1949a5		08		php		                PHP
.1949a6		c2 20		rep #$20	                REP #$20        ; set A long
.1949a8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1949ab		5b		tcd		                TCD
.1949ac		28		plp		                PLP
.1949ad		68		pla		                PLA             ; end setdp macro
.1949ae		22 49 45 19	jsl $194549	                JSL FATFORCLUSTER32
.1949b2		a9 00 00	lda #$0000	                LDA #0
.1949b5		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.1949b8		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.1949bb		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.1949bf		b0 0b		bcs $1949cc	                BCS ret_success
.1949c1						ret_failure
.1949c1		e2 20		sep #$20	                SEP #$20        ; set A short
.1949c3		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.1949c5		85 0e		sta $032e	                STA DOS_STATUS
.1949c7		28		plp		                PLP
.1949c8		2b		pld		                PLD
.1949c9		ab		plb		                PLB
.1949ca		18		clc		                CLC
.1949cb		6b		rtl		                RTL
.1949cc						ret_success
.1949cc		e2 20		sep #$20	                SEP #$20        ; set A short
.1949ce		64 0e		stz $032e	                STZ DOS_STATUS
.1949d0		28		plp		                PLP
.1949d1		2b		pld		                PLD
.1949d2		ab		plb		                PLB
.1949d3		38		sec		                SEC
.1949d4		6b		rtl		                RTL
.1949d5						DOS_APPENDCLUS
.1949d5		8b		phb		                PHB
.1949d6		0b		phd		                PHD
.1949d7		08		php		                PHP
.1949d8		48		pha		                PHA             ; begin setdbr macro
.1949d9		08		php		                PHP
.1949da		e2 20		sep #$20	                SEP #$20        ; set A short
.1949dc		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1949de		48		pha		                PHA
.1949df		ab		plb		                PLB
.1949e0		28		plp		                PLP
.1949e1		68		pla		                PLA             ; end setdbr macro
.1949e2		48		pha		                PHA             ; begin setdp macro
.1949e3		08		php		                PHP
.1949e4		c2 20		rep #$20	                REP #$20        ; set A long
.1949e6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1949e9		5b		tcd		                TCD
.1949ea		28		plp		                PLP
.1949eb		68		pla		                PLA             ; end setdp macro
.1949ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.1949ee		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.1949f0		48		pha		                PHA
.1949f1		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1949f3		48		pha		                PHA
.1949f4		22 cd 46 19	jsl $1946cd	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.1949f8		b0 09		bcs $194a03	                BCS save_cluster                ; If we got a cluster, write the data to it
.1949fa		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.1949fb		85 10		sta $0330	                STA DOS_CLUS_ID
.1949fd		68		pla		                PLA
.1949fe		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194a00		82 7d 00	brl $194a80	                BRL pass_failure                ; Pass the failure back up the chain
.194a03		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.194a05		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194a08		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194a0a		8d 38 a0	sta $18a038	                STA DOS_NEW_CLUSTER+2
.194a0d		22 dd 41 19	jsl $1941dd	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.194a11		90 e7		bcc $1949fa	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.194a13		68		pla		                PLA                             ; Restore the cluster of the file
.194a14		85 10		sta $0330	                STA DOS_CLUS_ID
.194a16		68		pla		                PLA
.194a17		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194a19		22 b4 45 19	jsl $1945b4	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.194a1d		b0 fa		bcs $194a19	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.194a1f		e2 20		sep #$20	                SEP #$20        ; set A short
.194a21		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194a25		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194a27		d0 3d		bne $194a66	                BNE fat32                       ; No: assume it's FAT32
.194a29						fat12
.194a29		c2 20		rep #$20	                REP #$20        ; set A long
.194a2b		22 6e 44 19	jsl $19446e	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.194a2f		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.194a31		89 01 00	bit #$0001	                BIT #1
.194a34		d0 11		bne $194a47	                BNE is_odd
.194a36		ad 36 a0	lda $18a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.194a39		29 ff 0f	and #$0fff	                AND #$0FFF
.194a3c		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194a3f		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.194a42		29 00 f0	and #$f000	                AND #$F000
.194a45		80 10		bra $194a57	                BRA update_fat12
.194a47		ad 36 a0	lda $18a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.194a4a		0a		asl a		                ASL A
.194a4b		0a		asl a		                ASL A
.194a4c		0a		asl a		                ASL A
.194a4d		0a		asl a		                ASL A
.194a4e		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194a51		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.194a54		29 0f 00	and #$000f	                AND #$000F
.194a57		0d 36 a0	ora $18a036	update_fat12    ORA DOS_NEW_CLUSTER
.194a5a		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194a5d		22 00 49 19	jsl $194900	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.194a61		b0 22		bcs $194a85	                BCS ret_success
.194a63		82 1a 00	brl $194a80	                BRL pass_failure
.194a66						fat32
.194a66		c2 20		rep #$20	                REP #$20        ; set A long
.194a68		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.194a6b		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194a6e		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.194a71		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.194a74		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.194a78		b0 0b		bcs $194a85	                BCS ret_success
.194a7a		e2 20		sep #$20	                SEP #$20        ; set A short
.194a7c		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.194a7e		85 0e		sta $032e	                STA DOS_STATUS
.194a80		28		plp		pass_failure    PLP
.194a81		2b		pld		                PLD
.194a82		ab		plb		                PLB
.194a83		18		clc		                CLC
.194a84		6b		rtl		                RTL
.194a85						ret_success
.194a85		e2 20		sep #$20	                SEP #$20        ; set A short
.194a87		64 0e		stz $032e	                STZ DOS_STATUS
.194a89		28		plp		                PLP
.194a8a		2b		pld		                PLD
.194a8b		ab		plb		                PLB
.194a8c		38		sec		                SEC
.194a8d		6b		rtl		                RTL
.194a8e						BCD2BIN
.194a8e		8b		phb		                PHB
.194a8f		0b		phd		                PHD
.194a90		08		php		                PHP
.194a91		48		pha		                PHA             ; begin setdbr macro
.194a92		08		php		                PHP
.194a93		e2 20		sep #$20	                SEP #$20        ; set A short
.194a95		a9 00		lda #$00	                LDA #0
.194a97		48		pha		                PHA
.194a98		ab		plb		                PLB
.194a99		28		plp		                PLP
.194a9a		68		pla		                PLA             ; end setdbr macro
.194a9b		48		pha		                PHA             ; begin setdp macro
.194a9c		08		php		                PHP
.194a9d		c2 20		rep #$20	                REP #$20        ; set A long
.194a9f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194aa2		5b		tcd		                TCD
.194aa3		28		plp		                PLP
.194aa4		68		pla		                PLA             ; end setdp macro
.194aa5		c2 30		rep #$30	                REP #$30        ; set A&X long
.194aa7		85 28		sta $0348	                STA DOS_TEMP
.194aa9		29 0f 00	and #$000f	                AND #$000F
.194aac		85 2a		sta $034a	                STA DOS_TEMP+2
.194aae		a5 28		lda $0348	                LDA DOS_TEMP
.194ab0		4a		lsr a		                LSR A
.194ab1		4a		lsr a		                LSR A
.194ab2		4a		lsr a		                LSR A
.194ab3		4a		lsr a		                LSR A
.194ab4		85 28		sta $0348	                STA DOS_TEMP
.194ab6		29 0f 00	and #$000f	                AND #$000F
.194ab9		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194abd		a9 0a 00	lda #$000a	                LDA #10
.194ac0		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194ac4		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194ac8		18		clc		                CLC
.194ac9		65 2a		adc $034a	                ADC DOS_TEMP+2
.194acb		85 2a		sta $034a	                STA DOS_TEMP+2
.194acd		a5 28		lda $0348	                LDA DOS_TEMP
.194acf		4a		lsr a		                LSR A
.194ad0		4a		lsr a		                LSR A
.194ad1		4a		lsr a		                LSR A
.194ad2		4a		lsr a		                LSR A
.194ad3		85 28		sta $0348	                STA DOS_TEMP
.194ad5		29 0f 00	and #$000f	                AND #$000F
.194ad8		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194adc		a9 64 00	lda #$0064	                LDA #100
.194adf		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194ae3		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194ae7		18		clc		                CLC
.194ae8		65 2a		adc $034a	                ADC DOS_TEMP+2
.194aea		85 2a		sta $034a	                STA DOS_TEMP+2
.194aec		a5 28		lda $0348	                LDA DOS_TEMP
.194aee		4a		lsr a		                LSR A
.194aef		4a		lsr a		                LSR A
.194af0		4a		lsr a		                LSR A
.194af1		4a		lsr a		                LSR A
.194af2		29 0f 00	and #$000f	                AND #$000F
.194af5		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194af9		a9 e8 03	lda #$03e8	                LDA #1000
.194afc		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194b00		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194b04		18		clc		                CLC
.194b05		65 2a		adc $034a	                ADC DOS_TEMP+2
.194b07		28		plp		                PLP
.194b08		2b		pld		                PLD
.194b09		ab		plb		                PLB
.194b0a		6b		rtl		                RTL
.194b0b						DOS_RTCCREATE
.194b0b		8b		phb		                PHB
.194b0c		0b		phd		                PHD
.194b0d		08		php		                PHP
.194b0e		48		pha		                PHA             ; begin setdbr macro
.194b0f		08		php		                PHP
.194b10		e2 20		sep #$20	                SEP #$20        ; set A short
.194b12		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194b14		48		pha		                PHA
.194b15		ab		plb		                PLB
.194b16		28		plp		                PLP
.194b17		68		pla		                PLA             ; end setdbr macro
.194b18		48		pha		                PHA             ; begin setdp macro
.194b19		08		php		                PHP
.194b1a		c2 20		rep #$20	                REP #$20        ; set A long
.194b1c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194b1f		5b		tcd		                TCD
.194b20		28		plp		                PLP
.194b21		68		pla		                PLA             ; end setdp macro
.194b22		c2 10		rep #$10	                REP #$10        ; set X long
.194b24		e2 20		sep #$20	                SEP #$20        ; set A short
.194b26		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.194b2a		09 08		ora #$08	                ORA #%00001000
.194b2c		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.194b30		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.194b34		85 29		sta $0349	                STA DOS_TEMP+1
.194b36		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.194b3a		85 28		sta $0348	                STA DOS_TEMP
.194b3c		c2 20		rep #$20	                REP #$20        ; set A long
.194b3e		a5 28		lda $0348	                LDA DOS_TEMP
.194b40		22 8e 4a 19	jsl $194a8e	                JSL BCD2BIN                 ; Convert it to binary
.194b44		85 28		sta $0348	                STA DOS_TEMP
.194b46		38		sec		                SEC                         ; Year is relative to 1980
.194b47		e9 bc 07	sbc #$07bc	                SBC #1980
.194b4a		c2 20		rep #$20	                REP #$20        ; set A long
.194b4c		0a		asl a		                ASL A
.194b4d		0a		asl a		                ASL A
.194b4e		0a		asl a		                ASL A
.194b4f		0a		asl a		                ASL A
.194b50		0a		asl a		                ASL A
.194b51		0a		asl a		                ASL A
.194b52		0a		asl a		                ASL A
.194b53		0a		asl a		                ASL A
.194b54		0a		asl a		                ASL A
.194b55		29 00 fe	and #$fe00	                AND #$FE00
.194b58		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194b5b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b5d		e2 20		sep #$20	                SEP #$20        ; set A short
.194b5f		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.194b63		c2 20		rep #$20	                REP #$20        ; set A long
.194b65		29 ff 00	and #$00ff	                AND #$00FF
.194b68		22 8e 4a 19	jsl $194a8e	                JSL BCD2BIN                 ; Convert it to binary
.194b6c		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.194b6f		0a		asl a		                ASL A
.194b70		0a		asl a		                ASL A
.194b71		0a		asl a		                ASL A
.194b72		0a		asl a		                ASL A
.194b73		0a		asl a		                ASL A
.194b74		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.194b77		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194b7a		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194b7c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b7e		e2 20		sep #$20	                SEP #$20        ; set A short
.194b80		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.194b84		c2 20		rep #$20	                REP #$20        ; set A long
.194b86		29 ff 00	and #$00ff	                AND #$00FF
.194b89		22 8e 4a 19	jsl $194a8e	                JSL BCD2BIN                 ; Convert it to binary
.194b8d		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.194b90		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194b93		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194b95		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b97		e2 20		sep #$20	                SEP #$20        ; set A short
.194b99		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.194b9d		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.194b9f		c2 20		rep #$20	                REP #$20        ; set A long
.194ba1		29 ff 00	and #$00ff	                AND #$00FF
.194ba4		22 8e 4a 19	jsl $194a8e	                JSL BCD2BIN                 ; Convert it to binary
.194ba8		c2 20		rep #$20	                REP #$20        ; set A long
.194baa		0a		asl a		                ASL A
.194bab		0a		asl a		                ASL A
.194bac		0a		asl a		                ASL A
.194bad		0a		asl a		                ASL A
.194bae		0a		asl a		                ASL A
.194baf		0a		asl a		                ASL A
.194bb0		0a		asl a		                ASL A
.194bb1		0a		asl a		                ASL A
.194bb2		0a		asl a		                ASL A
.194bb3		0a		asl a		                ASL A
.194bb4		0a		asl a		                ASL A
.194bb5		29 00 f8	and #$f800	                AND #$F800
.194bb8		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.194bbb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194bbd		e2 20		sep #$20	                SEP #$20        ; set A short
.194bbf		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.194bc3		c2 20		rep #$20	                REP #$20        ; set A long
.194bc5		29 ff 00	and #$00ff	                AND #$00FF
.194bc8		22 8e 4a 19	jsl $194a8e	                JSL BCD2BIN                 ; Convert it to binary
.194bcc		c2 20		rep #$20	                REP #$20        ; set A long
.194bce		0a		asl a		                ASL A
.194bcf		0a		asl a		                ASL A
.194bd0		0a		asl a		                ASL A
.194bd1		0a		asl a		                ASL A
.194bd2		0a		asl a		                ASL A
.194bd3		29 e0 07	and #$07e0	                AND #$07E0
.194bd6		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.194bd9		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194bdb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194bdd		e2 20		sep #$20	                SEP #$20        ; set A short
.194bdf		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.194be3		c2 20		rep #$20	                REP #$20        ; set A long
.194be5		29 ff 00	and #$00ff	                AND #$00FF
.194be8		22 8e 4a 19	jsl $194a8e	                JSL BCD2BIN                 ; Convert it to binary
.194bec		c2 20		rep #$20	                REP #$20        ; set A long
.194bee		29 1f 00	and #$001f	                AND #$001F
.194bf1		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.194bf4		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194bf6		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194bf8		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.194bfc		29 f7 00	and #$00f7	                AND #%11110111
.194bff		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.194c03		28		plp		                PLP
.194c04		2b		pld		                PLD
.194c05		ab		plb		                PLB
.194c06		6b		rtl		                RTL
.194c07						DOS_CREATE
.194c07		8b		phb		                PHB
.194c08		0b		phd		                PHD
.194c09		08		php		                PHP
.194c0a		48		pha		                PHA             ; begin setdbr macro
.194c0b		08		php		                PHP
.194c0c		e2 20		sep #$20	                SEP #$20        ; set A short
.194c0e		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194c10		48		pha		                PHA
.194c11		ab		plb		                PLB
.194c12		28		plp		                PLP
.194c13		68		pla		                PLA             ; end setdbr macro
.194c14		48		pha		                PHA             ; begin setdp macro
.194c15		08		php		                PHP
.194c16		c2 20		rep #$20	                REP #$20        ; set A long
.194c18		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194c1b		5b		tcd		                TCD
.194c1c		28		plp		                PLP
.194c1d		68		pla		                PLA             ; end setdp macro
.194c1e		c2 30		rep #$30	                REP #$30        ; set A&X long
.194c20		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.194c23		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c25		85 28		sta $0348	                STA DOS_TEMP
.194c27		c8		iny		                INY
.194c28		c8		iny		                INY
.194c29		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c2b		85 2a		sta $034a	                STA DOS_TEMP+2
.194c2d		e2 20		sep #$20	                SEP #$20        ; set A short
.194c2f		a0 00 00	ldy #$0000	                LDY #0
.194c32		a2 00 00	ldx #$0000	                LDX #0
.194c35		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.194c37		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.194c39		f0 04		beq $194c3f	                BEQ find_file                   ; If it's NULL, we're done
.194c3b		e8		inx		                INX
.194c3c		c8		iny		                INY
.194c3d		80 f6		bra $194c35	                BRA path_loop
.194c3f		22 ee 42 19	jsl $1942ee	find_file       JSL DOS_PARSE_PATH
.194c43		22 86 43 19	jsl $194386	                JSL DOS_FINDFILE
.194c47		90 07		bcc $194c50	                BCC set_device
.194c49		e2 20		sep #$20	                SEP #$20        ; set A short
.194c4b		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.194c4d		82 d2 00	brl $194d22	                BRL ret_failure
.194c50						set_device
.194c50		e2 20		sep #$20	                SEP #$20        ; set A short
.194c52		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.194c55		a5 01		lda $0321	                LDA BIOS_DEV
.194c57		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c59						validate_name
.194c59		22 cd 46 19	jsl $1946cd	                JSL DOS_FREECLUS
.194c5d		b0 03		bcs $194c62	                BCS save_data
.194c5f		82 c4 00	brl $194d26	                BRL pass_failure
.194c62						save_data
.194c62		c2 20		rep #$20	                REP #$20        ; set A long
.194c64		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.194c67		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.194c69		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c6b		c8		iny		                INY
.194c6c		c8		iny		                INY
.194c6d		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194c6f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c71		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.194c74		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c76		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194c78		c8		iny		                INY
.194c79		c8		iny		                INY
.194c7a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c7c		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194c7e		22 dd 41 19	jsl $1941dd	                JSL DOS_PUTCLUSTER
.194c82		b0 00		bcs $194c84	                BCS find_dir
.194c84						find_dir
.194c84		c2 20		rep #$20	                REP #$20        ; set A long
.194c86		22 18 3d 19	jsl $193d18	                JSL DOS_DIRFINDFREE
.194c8a		b0 1a		bcs $194ca6	                BCS set_entry
.194c8c		c2 20		rep #$20	                REP #$20        ; set A long
.194c8e		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.194c91		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.194c93		85 10		sta $0330	                STA DOS_CLUS_ID
.194c95		c8		iny		                INY
.194c96		c8		iny		                INY
.194c97		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c99		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194c9b		22 95 49 19	jsl $194995	                JSL DELCLUSTER32                ; Delete the cluster
.194c9f		e2 20		sep #$20	                SEP #$20        ; set A short
.194ca1		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.194ca3		82 7c 00	brl $194d22	                BRL ret_failure
.194ca6						set_entry
.194ca6		e2 20		sep #$20	                SEP #$20        ; set A short
.194ca8		a0 00 00	ldy #$0000	                LDY #0
.194cab		a9 00		lda #$00	                LDA #0                          ; NULL
.194cad		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.194caf		c8		iny		                INY
.194cb0		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.194cb3		d0 f8		bne $194cad	                BNE copy_dir_loop
.194cb5		a0 00 00	ldy #$0000	                LDY #0
.194cb8		b9 3a a0	lda $18a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.194cbb		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194cbd		c8		iny		                INY
.194cbe		c0 0b 00	cpy #$000b	                CPY #11
.194cc1		d0 f5		bne $194cb8	                BNE name_loop
.194cc3		c2 20		rep #$20	                REP #$20        ; set A long
.194cc5		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.194cc8		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194cca		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.194ccd		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194ccf		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.194cd2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194cd4		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.194cd7		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194cd9		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.194cdc		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194cde		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.194ce1		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194ce3		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.194ce6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ce8		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.194ceb		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194ced		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.194cf0		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.194cf3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194cf5		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.194cf8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194cfa		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.194cfd		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194cff		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.194d02		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194d04		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.194d07		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194d09		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.194d0c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d0e		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.194d11		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194d13		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.194d16		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194d18		c2 20		rep #$20	                REP #$20        ; set A long
.194d1a		22 d6 3d 19	jsl $193dd6	                JSL DOS_DIRWRITE
.194d1e		b0 0b		bcs $194d2b	                BCS ret_success
.194d20		80 04		bra $194d26	                BRA pass_failure
.194d22						ret_failure
.194d22		e2 20		sep #$20	                SEP #$20        ; set A short
.194d24		85 0e		sta $032e	                STA DOS_STATUS
.194d26		28		plp		pass_failure    PLP
.194d27		2b		pld		                PLD
.194d28		ab		plb		                PLB
.194d29		18		clc		                CLC
.194d2a		6b		rtl		                RTL
.194d2b						ret_success
.194d2b		e2 20		sep #$20	                SEP #$20        ; set A short
.194d2d		64 0e		stz $032e	                STZ DOS_STATUS
.194d2f		28		plp		                PLP
.194d30		2b		pld		                PLD
.194d31		ab		plb		                PLB
.194d32		38		sec		                SEC
.194d33		6b		rtl		                RTL
.194d34						DOS_COPYPATH
.194d34		da		phx		                PHX
.194d35		5a		phy		                PHY
.194d36		8b		phb		                PHB
.194d37		0b		phd		                PHD
.194d38		08		php		                PHP
.194d39		48		pha		                PHA             ; begin setdbr macro
.194d3a		08		php		                PHP
.194d3b		e2 20		sep #$20	                SEP #$20        ; set A short
.194d3d		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194d3f		48		pha		                PHA
.194d40		ab		plb		                PLB
.194d41		28		plp		                PLP
.194d42		68		pla		                PLA             ; end setdbr macro
.194d43		48		pha		                PHA             ; begin setdp macro
.194d44		08		php		                PHP
.194d45		c2 20		rep #$20	                REP #$20        ; set A long
.194d47		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194d4a		5b		tcd		                TCD
.194d4b		28		plp		                PLP
.194d4c		68		pla		                PLA             ; end setdp macro
.194d4d		c2 30		rep #$30	                REP #$30        ; set A&X long
.194d4f		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.194d52		a2 00 00	ldx #$0000	                LDX #0
.194d55		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.194d57		e8		inx		                INX
.194d58		e8		inx		                INX
.194d59		e0 00 01	cpx #$0100	                CPX #256
.194d5c		d0 f7		bne $194d55	                BNE clr_loop
.194d5e		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.194d60		d0 04		bne $194d66	                BNE get_path            ; No: attempt to fetch the path
.194d62		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.194d64		f0 27		beq $194d8d	                BEQ done                ; Yes: return an empty buffer
.194d66		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.194d69		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d6b		85 28		sta $0348	                STA DOS_TEMP
.194d6d		c8		iny		                INY
.194d6e		c8		iny		                INY
.194d6f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d71		85 2a		sta $034a	                STA DOS_TEMP+2
.194d73		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.194d75		d0 04		bne $194d7b	                BNE start_copy          ; No: start copying it
.194d77		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194d79		f0 12		beq $194d8d	                BEQ done                ; Yes: return an empty buffer
.194d7b						start_copy
.194d7b		e2 20		sep #$20	                SEP #$20        ; set A short
.194d7d		a2 00 00	ldx #$0000	                LDX #0
.194d80		a0 00 00	ldy #$0000	                LDY #0
.194d83		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.194d85		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.194d87		f0 04		beq $194d8d	                BEQ done
.194d89		e8		inx		                INX
.194d8a		c8		iny		                INY
.194d8b		d0 f6		bne $194d83	                BNE loop
.194d8d		28		plp		done            PLP
.194d8e		2b		pld		                PLD
.194d8f		ab		plb		                PLB
.194d90		7a		ply		                PLY
.194d91		fa		plx		                PLX
.194d92		6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.194d93						DOS_TEST
.194d93		8b		phb		                PHB
.194d94		0b		phd		                PHD
.194d95		08		php		                PHP
.194d96		48		pha		                PHA             ; begin setdbr macro
.194d97		08		php		                PHP
.194d98		e2 20		sep #$20	                SEP #$20        ; set A short
.194d9a		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194d9c		48		pha		                PHA
.194d9d		ab		plb		                PLB
.194d9e		28		plp		                PLP
.194d9f		68		pla		                PLA             ; end setdbr macro
.194da0		48		pha		                PHA             ; begin setdp macro
.194da1		08		php		                PHP
.194da2		c2 20		rep #$20	                REP #$20        ; set A long
.194da4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194da7		5b		tcd		                TCD
.194da8		28		plp		                PLP
.194da9		68		pla		                PLA             ; end setdp macro
.194daa		c2 30		rep #$30	                REP #$30        ; set A&X long
.194dac		a9 d2 4d	lda #$4dd2	                LDA #<>src_file
.194daf		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.194db3		a9 19 00	lda #$0019	                LDA #`src_file
.194db6		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.194dba		a9 df 4d	lda #$4ddf	                LDA #<>dst_file
.194dbd		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.194dc1		a9 19 00	lda #$0019	                LDA #`dst_file
.194dc4		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.194dc8		22 04 56 19	jsl $195604	                JSL IF_COPY
.194dcc		b0 00		bcs $194dce	                BCS done
.194dce		28		plp		done            PLP
.194dcf		2b		pld		                PLD
.194dd0		ab		plb		                PLB
.194dd1		6b		rtl		                RTL
>194dd2		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>194dda		2e 62 61 73 00
>194ddf		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>194de7		32 2e 62 61 73 00
.194ded						IF_OPEN
.194ded		da		phx		                PHX
.194dee		5a		phy		                PHY
.194def		0b		phd		                PHD
.194df0		8b		phb		                PHB
.194df1		08		php		                PHP
.194df2		48		pha		                PHA             ; begin setdbr macro
.194df3		08		php		                PHP
.194df4		e2 20		sep #$20	                SEP #$20        ; set A short
.194df6		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194df8		48		pha		                PHA
.194df9		ab		plb		                PLB
.194dfa		28		plp		                PLP
.194dfb		68		pla		                PLA             ; end setdbr macro
.194dfc		48		pha		                PHA             ; begin setdp macro
.194dfd		08		php		                PHP
.194dfe		c2 20		rep #$20	                REP #$20        ; set A long
.194e00		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194e03		5b		tcd		                TCD
.194e04		28		plp		                PLP
.194e05		68		pla		                PLA             ; end setdp macro
.194e06		e2 20		sep #$20	                SEP #$20        ; set A short
.194e08		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.194e0b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e0d		89 20		bit #$20	                BIT #FD_STAT_OPEN
.194e0f		f0 05		beq $194e16	                BEQ ok_to_open
.194e11		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.194e13		82 87 06	brl $19549d	                BRL IF_FAILURE
.194e16		22 34 4d 19	jsl $194d34	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.194e1a		22 86 43 19	jsl $194386	                JSL DOS_FINDFILE                ; Attempt to find the file
.194e1e		b0 03		bcs $194e23	                BCS is_found                    ; If OK: we found the file
.194e20		82 7e 06	brl $1954a1	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.194e23						is_found
.194e23		e2 20		sep #$20	                SEP #$20        ; set A short
.194e25		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.194e28		a5 01		lda $0321	                LDA BIOS_DEV
.194e2a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e2c		c2 20		rep #$20	                REP #$20        ; set A long
.194e2e		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.194e31		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e33		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194e35		c8		iny		                INY
.194e36		c8		iny		                INY
.194e37		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e39		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194e3b		22 a0 41 19	jsl $1941a0	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.194e3f		b0 03		bcs $194e44	                BCS read_cluster
.194e41		82 5d 06	brl $1954a1	                BRL IF_PASSFAILURE
.194e44		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.194e47		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194e49		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e4b		c8		iny		                INY
.194e4c		c8		iny		                INY
.194e4d		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194e4f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e51		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.194e54		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194e56		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e58		c8		iny		                INY
.194e59		c8		iny		                INY
.194e5a		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194e5c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e5e		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.194e61		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194e63		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.194e66		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e68		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.194e6b		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194e6d		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.194e70		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e72		e2 20		sep #$20	                SEP #$20        ; set A short
.194e74		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.194e77		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.194e79		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194e7b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e7d		82 28 06	brl $1954a8	                BRL IF_SUCCESS
.194e80						IF_CREATE
.194e80		da		phx		                PHX
.194e81		5a		phy		                PHY
.194e82		0b		phd		                PHD
.194e83		8b		phb		                PHB
.194e84		08		php		                PHP
.194e85		48		pha		                PHA             ; begin setdbr macro
.194e86		08		php		                PHP
.194e87		e2 20		sep #$20	                SEP #$20        ; set A short
.194e89		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194e8b		48		pha		                PHA
.194e8c		ab		plb		                PLB
.194e8d		28		plp		                PLP
.194e8e		68		pla		                PLA             ; end setdbr macro
.194e8f		48		pha		                PHA             ; begin setdp macro
.194e90		08		php		                PHP
.194e91		c2 20		rep #$20	                REP #$20        ; set A long
.194e93		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194e96		5b		tcd		                TCD
.194e97		28		plp		                PLP
.194e98		68		pla		                PLA             ; end setdp macro
.194e99		22 07 4c 19	jsl $194c07	                JSL DOS_CREATE                  ; Attempt to create the file
.194e9d		90 18		bcc $194eb7	                BCC pass_failure                ; If it fails: pass the failure up the chain
.194e9f		c2 30		rep #$30	                REP #$30        ; set A&X long
.194ea1		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.194ea4		a9 00 00	lda #$0000	                LDA #0
.194ea7		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194ea9		c8		iny		                INY
.194eaa		c8		iny		                INY
.194eab		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194ead		e2 20		sep #$20	                SEP #$20        ; set A short
.194eaf		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.194eb2		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.194eb4		82 f1 05	brl $1954a8	                BRL IF_SUCCESS
.194eb7		82 e3 05	brl $19549d	pass_failure    BRL IF_FAILURE
.194eba						IF_CLOSE
.194eba		da		phx		                PHX
.194ebb		5a		phy		                PHY
.194ebc		0b		phd		                PHD
.194ebd		8b		phb		                PHB
.194ebe		08		php		                PHP
.194ebf		48		pha		                PHA             ; begin setdbr macro
.194ec0		08		php		                PHP
.194ec1		e2 20		sep #$20	                SEP #$20        ; set A short
.194ec3		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194ec5		48		pha		                PHA
.194ec6		ab		plb		                PLB
.194ec7		28		plp		                PLP
.194ec8		68		pla		                PLA             ; end setdbr macro
.194ec9		48		pha		                PHA             ; begin setdp macro
.194eca		08		php		                PHP
.194ecb		c2 20		rep #$20	                REP #$20        ; set A long
.194ecd		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194ed0		5b		tcd		                TCD
.194ed1		28		plp		                PLP
.194ed2		68		pla		                PLA             ; end setdp macro
.194ed3		e2 20		sep #$20	                SEP #$20        ; set A short
.194ed5		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.194ed8		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194eda		89 02		bit #$02	                BIT #FD_STAT_WRITE
.194edc		f0 09		beq $194ee7	                BEQ set_flag                    ; No, just mark it closed
.194ede		22 53 4f 19	jsl $194f53	                JSL IF_WRITE                    ; Attempt to write the cluster
.194ee2		b0 03		bcs $194ee7	                BCS set_flag
.194ee4		82 ba 05	brl $1954a1	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.194ee7		22 a2 55 19	jsl $1955a2	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.194eeb		82 ba 05	brl $1954a8	                BRL IF_SUCCESS
.194eee						IF_READ
.194eee		da		phx		                PHX
.194eef		5a		phy		                PHY
.194ef0		0b		phd		                PHD
.194ef1		8b		phb		                PHB
.194ef2		08		php		                PHP
.194ef3		48		pha		                PHA             ; begin setdbr macro
.194ef4		08		php		                PHP
.194ef5		e2 20		sep #$20	                SEP #$20        ; set A short
.194ef7		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194ef9		48		pha		                PHA
.194efa		ab		plb		                PLB
.194efb		28		plp		                PLP
.194efc		68		pla		                PLA             ; end setdbr macro
.194efd		48		pha		                PHA             ; begin setdp macro
.194efe		08		php		                PHP
.194eff		c2 20		rep #$20	                REP #$20        ; set A long
.194f01		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194f04		5b		tcd		                TCD
.194f05		28		plp		                PLP
.194f06		68		pla		                PLA             ; end setdp macro
.194f07		c2 10		rep #$10	                REP #$10        ; set X long
.194f09		e2 20		sep #$20	                SEP #$20        ; set A short
.194f0b						get_dev
.194f0b		e2 20		sep #$20	                SEP #$20        ; set A short
.194f0d		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.194f10		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f12		85 01		sta $0321	                STA BIOS_DEV
.194f14		22 08 3f 19	jsl $193f08	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.194f18		c2 20		rep #$20	                REP #$20        ; set A long
.194f1a		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.194f1d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f1f		85 10		sta $0330	                STA DOS_CLUS_ID
.194f21		c8		iny		                INY
.194f22		c8		iny		                INY
.194f23		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f25		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194f27		22 b4 45 19	jsl $1945b4	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.194f2b		90 13		bcc $194f40	                BCC pass_failure                ; If not OK: pass the failure up the chain
.194f2d		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.194f30		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f32		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194f34		c8		iny		                INY
.194f35		c8		iny		                INY
.194f36		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f38		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194f3a		22 a0 41 19	jsl $1941a0	                JSL DOS_GETCLUSTER              ; Get the cluster
.194f3e		b0 03		bcs $194f43	                BCS ret_success                 ; If ok: return success
.194f40						pass_failure
.194f40		82 5e 05	brl $1954a1	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194f43		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.194f46		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194f48		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f4a		c8		iny		                INY
.194f4b		c8		iny		                INY
.194f4c		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194f4e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f50		82 55 05	brl $1954a8	                BRL IF_SUCCESS
.194f53						IF_WRITE
.194f53		da		phx		                PHX
.194f54		5a		phy		                PHY
.194f55		0b		phd		                PHD
.194f56		8b		phb		                PHB
.194f57		08		php		                PHP
.194f58		48		pha		                PHA             ; begin setdbr macro
.194f59		08		php		                PHP
.194f5a		e2 20		sep #$20	                SEP #$20        ; set A short
.194f5c		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194f5e		48		pha		                PHA
.194f5f		ab		plb		                PLB
.194f60		28		plp		                PLP
.194f61		68		pla		                PLA             ; end setdbr macro
.194f62		48		pha		                PHA             ; begin setdp macro
.194f63		08		php		                PHP
.194f64		c2 20		rep #$20	                REP #$20        ; set A long
.194f66		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194f69		5b		tcd		                TCD
.194f6a		28		plp		                PLP
.194f6b		68		pla		                PLA             ; end setdp macro
.194f6c		c2 10		rep #$10	                REP #$10        ; set X long
.194f6e		e2 20		sep #$20	                SEP #$20        ; set A short
.194f70		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.194f73		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f75		85 01		sta $0321	                STA BIOS_DEV
.194f77		22 08 3f 19	jsl $193f08	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.194f7b		c2 20		rep #$20	                REP #$20        ; set A long
.194f7d		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.194f80		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f82		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194f84		c8		iny		                INY
.194f85		c8		iny		                INY
.194f86		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f88		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194f8a		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.194f8d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f8f		85 10		sta $0330	                STA DOS_CLUS_ID
.194f91		c8		iny		                INY
.194f92		c8		iny		                INY
.194f93		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f95		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194f97		d0 1a		bne $194fb3	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.194f99		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194f9b		d0 16		bne $194fb3	                BNE rewrite_cluster
.194f9d		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.194fa0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194fa2		85 10		sta $0330	                STA DOS_CLUS_ID
.194fa4		c8		iny		                INY
.194fa5		c8		iny		                INY
.194fa6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194fa8		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194faa		22 d5 49 19	jsl $1949d5	                JSL DOS_APPENDCLUS              ; Append the cluster
.194fae		b0 0c		bcs $194fbc	                BCS ret_success                 ; If OK: return success
.194fb0		82 ee 04	brl $1954a1	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194fb3		22 dd 41 19	jsl $1941dd	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.194fb7		b0 03		bcs $194fbc	                BCS ret_success                 ; If ok: return success
.194fb9		82 e5 04	brl $1954a1	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194fbc		82 e9 04	brl $1954a8	ret_success     BRL IF_SUCCESS
.194fbf						IF_DIROPEN
.194fbf		da		phx		                PHX
.194fc0		5a		phy		                PHY
.194fc1		0b		phd		                PHD
.194fc2		8b		phb		                PHB
.194fc3		08		php		                PHP
.194fc4		48		pha		                PHA             ; begin setdbr macro
.194fc5		08		php		                PHP
.194fc6		e2 20		sep #$20	                SEP #$20        ; set A short
.194fc8		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194fca		48		pha		                PHA
.194fcb		ab		plb		                PLB
.194fcc		28		plp		                PLP
.194fcd		68		pla		                PLA             ; end setdbr macro
.194fce		48		pha		                PHA             ; begin setdp macro
.194fcf		08		php		                PHP
.194fd0		c2 20		rep #$20	                REP #$20        ; set A long
.194fd2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194fd5		5b		tcd		                TCD
.194fd6		28		plp		                PLP
.194fd7		68		pla		                PLA             ; end setdp macro
.194fd8		c2 30		rep #$30	                REP #$30        ; set A&X long
.194fda		22 34 4d 19	jsl $194d34	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.194fde		22 ee 42 19	jsl $1942ee	                JSL DOS_PARSE_PATH          ; Parse the path
.194fe2		22 08 3f 19	jsl $193f08	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.194fe6		b0 03		bcs $194feb	                BCS get_root_dir            ; If successful: get the root directory
.194fe8		82 b6 04	brl $1954a1	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.194feb						get_root_dir
.194feb		c2 30		rep #$30	                REP #$30        ; set A&X long
.194fed		22 bd 3b 19	jsl $193bbd	                JSL DOS_DIROPEN
.194ff1		b0 03		bcs $194ff6	                BCS success
.194ff3		82 ab 04	brl $1954a1	                BRL IF_PASSFAILURE
.194ff6		82 af 04	brl $1954a8	success         BRL IF_SUCCESS
.194ff9						IF_DIRNEXT
.194ff9		5c 57 3c 19	jmp $193c57	                JML DOS_DIRNEXT
.194ffd						IF_DELETE
.194ffd		da		phx		                PHX
.194ffe		5a		phy		                PHY
.194fff		0b		phd		                PHD
.195000		8b		phb		                PHB
.195001		08		php		                PHP
.195002		48		pha		                PHA             ; begin setdbr macro
.195003		08		php		                PHP
.195004		e2 20		sep #$20	                SEP #$20        ; set A short
.195006		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195008		48		pha		                PHA
.195009		ab		plb		                PLB
.19500a		28		plp		                PLP
.19500b		68		pla		                PLA             ; end setdbr macro
.19500c		48		pha		                PHA             ; begin setdp macro
.19500d		08		php		                PHP
.19500e		c2 20		rep #$20	                REP #$20        ; set A long
.195010		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195013		5b		tcd		                TCD
.195014		28		plp		                PLP
.195015		68		pla		                PLA             ; end setdp macro
.195016		c2 30		rep #$30	                REP #$30        ; set A&X long
.195018		22 86 43 19	jsl $194386	                JSL DOS_FINDFILE
.19501c		b0 03		bcs $195021	                BCS get_first_clus
.19501e		82 80 04	brl $1954a1	                BRL IF_PASSFAILURE
.195021						get_first_clus
.195021		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.195024		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.195026		85 10		sta $0330	                STA DOS_CLUS_ID
.195028		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.19502b		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.19502d		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19502f		a5 10		lda $0330	                LDA DOS_CLUS_ID
.195031		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.195034		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.195036		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.195039		22 b4 45 19	jsl $1945b4	del_loop        JSL NEXTCLUSTER
.19503d		90 2f		bcc $19506e	                BCC del_one
.19503f		a5 10		lda $0330	                LDA DOS_CLUS_ID
.195041		8d 2e a0	sta $18a02e	                STA DOS_NEXT_CLUS
.195044		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.195046		8d 30 a0	sta $18a030	                STA DOS_NEXT_CLUS+2
.195049		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.19504c		85 10		sta $0330	                STA DOS_CLUS_ID
.19504e		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.195051		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195053		22 95 49 19	jsl $194995	                JSL DELCLUSTER32
.195057		b0 03		bcs $19505c	                BCS go_next
.195059		82 45 04	brl $1954a1	                BRL IF_PASSFAILURE
.19505c						go_next
.19505c		ad 2e a0	lda $18a02e	                LDA DOS_NEXT_CLUS
.19505f		85 10		sta $0330	                STA DOS_CLUS_ID
.195061		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.195064		ad 30 a0	lda $18a030	                LDA DOS_NEXT_CLUS+2
.195067		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195069		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.19506c		80 cb		bra $195039	                BRA del_loop
.19506e						del_one
.19506e		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.195071		85 10		sta $0330	                STA DOS_CLUS_ID
.195073		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.195076		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195078		22 ef 48 19	jsl $1948ef	                JSL DELCLUSTER
.19507c		b0 03		bcs $195081	                BCS free_dir_entry
.19507e		82 20 04	brl $1954a1	                BRL IF_PASSFAILURE
.195081						free_dir_entry
.195081		e2 20		sep #$20	                SEP #$20        ; set A short
.195083		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.195086		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.195088		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.19508a		22 d6 3d 19	jsl $193dd6	                JSL DOS_DIRWRITE                ; Write the directory entry back
.19508e		b0 03		bcs $195093	                BCS ret_success
.195090		82 0e 04	brl $1954a1	                BRL IF_PASSFAILURE
.195093		82 12 04	brl $1954a8	ret_success     BRL IF_SUCCESS
.195096						IF_DIRREAD
.195096		da		phx		                PHX
.195097		5a		phy		                PHY
.195098		0b		phd		                PHD
.195099		8b		phb		                PHB
.19509a		08		php		                PHP
.19509b		48		pha		                PHA             ; begin setdbr macro
.19509c		08		php		                PHP
.19509d		e2 20		sep #$20	                SEP #$20        ; set A short
.19509f		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1950a1		48		pha		                PHA
.1950a2		ab		plb		                PLB
.1950a3		28		plp		                PLP
.1950a4		68		pla		                PLA             ; end setdbr macro
.1950a5		48		pha		                PHA             ; begin setdp macro
.1950a6		08		php		                PHP
.1950a7		c2 20		rep #$20	                REP #$20        ; set A long
.1950a9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1950ac		5b		tcd		                TCD
.1950ad		28		plp		                PLP
.1950ae		68		pla		                PLA             ; end setdp macro
.1950af		c2 30		rep #$30	                REP #$30        ; set A&X long
.1950b1		22 86 43 19	jsl $194386	                JSL DOS_FINDFILE
.1950b5		b0 03		bcs $1950ba	                BCS success
.1950b7		82 e3 03	brl $19549d	                BRL IF_FAILURE
.1950ba		82 eb 03	brl $1954a8	success         BRL IF_SUCCESS
.1950bd						IF_DIRWRITE
.1950bd		5c d6 3d 19	jmp $193dd6	                JML DOS_DIRWRITE
.1950c1						IF_LOAD
.1950c1		da		phx		                PHX
.1950c2		5a		phy		                PHY
.1950c3		0b		phd		                PHD
.1950c4		8b		phb		                PHB
.1950c5		08		php		                PHP
.1950c6		48		pha		                PHA             ; begin setdbr macro
.1950c7		08		php		                PHP
.1950c8		e2 20		sep #$20	                SEP #$20        ; set A short
.1950ca		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1950cc		48		pha		                PHA
.1950cd		ab		plb		                PLB
.1950ce		28		plp		                PLP
.1950cf		68		pla		                PLA             ; end setdbr macro
.1950d0		48		pha		                PHA             ; begin setdp macro
.1950d1		08		php		                PHP
.1950d2		c2 20		rep #$20	                REP #$20        ; set A long
.1950d4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1950d7		5b		tcd		                TCD
.1950d8		28		plp		                PLP
.1950d9		68		pla		                PLA             ; end setdp macro
.1950da		c2 30		rep #$30	                REP #$30        ; set A&X long
.1950dc		22 ed 4d 19	jsl $194ded	                JSL IF_OPEN
.1950e0		b0 03		bcs $1950e5	                BCS setup                   ; If success: start setting things up
.1950e2		82 bc 03	brl $1954a1	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.1950e5						setup
.1950e5		c2 20		rep #$20	                REP #$20        ; set A long
.1950e7		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.1950ea		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950ec		85 2c		sta $034c	                STA DOS_FILE_SIZE
.1950ee		c8		iny		                INY
.1950ef		c8		iny		                INY
.1950f0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950f2		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.1950f4		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.1950f7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950f9		85 30		sta $0350	                STA DOS_SRC_PTR
.1950fb		c8		iny		                INY
.1950fc		c8		iny		                INY
.1950fd		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950ff		85 32		sta $0352	                STA DOS_SRC_PTR+2
.195101		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.195103		c9 40 00	cmp #$0040	                CMP #$0040
.195106		b0 04		bcs $19510c	                BGE load_by_type            ; No: try to load it by type
.195108		5c 52 53 19	jmp $195352	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.19510c		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.19510f		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.195112						type_loop
.195112		e2 20		sep #$20	                SEP #$20        ; set A short
.195114		bf 58 51 19	lda $195158,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.195118		f0 37		beq $195151	                BEQ no_match                ; If NULL... we didn't get a match
.19511a		d9 3a a0	cmp $18a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.19511d		d0 28		bne $195147	                BNE next_entry              ; If they don't match, try the next entry
.19511f		bf 59 51 19	lda $195159,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.195123		d9 3b a0	cmp $18a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.195126		d0 1f		bne $195147	                BNE next_entry              ; If they don't match, try the next entry
.195128		bf 5a 51 19	lda $19515a,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.19512c		d9 3c a0	cmp $18a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.19512f		d0 16		bne $195147	                BNE next_entry              ; If they don't match, try the next entry
.195131		c2 20		rep #$20	                REP #$20        ; set A long
.195133		bf 5b 51 19	lda $19515b,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.195137		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.195139		e2 20		sep #$20	                SEP #$20        ; set A short
.19513b		bf 5d 51 19	lda $19515d,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.19513f		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.195141		a2 00 00	ldx #$0000	                LDX #0
.195144		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.195147						next_entry
.195147		c2 30		rep #$30	                REP #$30        ; set A&X long
.195149		8a		txa		                TXA
.19514a		18		clc		                CLC
.19514b		69 06 00	adc #$0006	                ADC #6
.19514e		aa		tax		                TAX
.19514f		80 c1		bra $195112	                BRA type_loop               ; And check it against the file
.195151						no_match
.195151		e2 20		sep #$20	                SEP #$20        ; set A short
.195153		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.195155		82 45 03	brl $19549d	                BRL IF_FAILURE
>195158		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>19515b		65 51				                .word <>IF_LOADPGX
>19515d		19				                .byte `IF_LOADPGX
>19515e		50 47 5a			                .text "PGZ"                 ; "PGZ" --> IF_LOADPGZ
>195161		ed 51				                .word <>IF_LOADPGZ
>195163		19				                .byte `IF_LOADPGZ
>195164		00				                .byte 0
.195165						IF_LOADPGX
.195165		c2 10		rep #$10	                REP #$10        ; set X long
.195167		e2 20		sep #$20	                SEP #$20        ; set A short
.195169		a0 00 00	ldy #$0000	                LDY #0
.19516c		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.19516e		c9 50		cmp #$50	                CMP #'P'
.195170		d0 15		bne $195187	                BNE fail_sig                        ; If not found, fail
.195172		c8		iny		                INY
.195173		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195175		c9 47		cmp #$47	                CMP #'G'
.195177		d0 0e		bne $195187	                BNE fail_sig
.195179		c8		iny		                INY
.19517a		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.19517c		c9 58		cmp #$58	                CMP #'X'
.19517e		d0 07		bne $195187	                BNE fail_sig
.195180		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.195181		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195183		c9 01		cmp #$01	                CMP #$01
.195185		f0 17		beq $19519e	                BEQ get_dest                        ; All passes: go to get the destination address
.195187		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.195189		22 9d 54 19	jsl $19549d	                JSL IF_FAILURE
.19518d						adjust_size
.19518d		c2 20		rep #$20	                REP #$20        ; set A long
.19518f		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.195190		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.195192		e9 08 00	sbc #$0008	                SBC #8
.195195		85 2c		sta $034c	                STA DOS_FILE_SIZE
.195197		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.195199		e9 00 00	sbc #$0000	                SBC #0
.19519c		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.19519e						get_dest
.19519e		c2 20		rep #$20	                REP #$20        ; set A long
.1951a0		c8		iny		                INY
.1951a1		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.1951a3		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.1951a5		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.1951a7		c8		iny		                INY
.1951a8		c8		iny		                INY
.1951a9		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.1951ab		85 36		sta $0356	                STA DOS_DST_PTR+2
.1951ad		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.1951af		c8		iny		                INY                                 ; Point to the first data byte
.1951b0		c8		iny		                INY
.1951b1						copy_loop
.1951b1		e2 20		sep #$20	                SEP #$20        ; set A short
.1951b3		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.1951b5		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.1951b7		c2 20		rep #$20	                REP #$20        ; set A long
.1951b9		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.1951bb		d0 02		bne $1951bf	                BNE dec_file_size
.1951bd		e6 36		inc $0356	                INC DOS_DST_PTR+2
.1951bf		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.1951c0		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.1951c2		e9 01 00	sbc #$0001	                SBC #1
.1951c5		85 2c		sta $034c	                STA DOS_FILE_SIZE
.1951c7		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1951c9		e9 00 00	sbc #$0000	                SBC #0
.1951cc		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.1951ce		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.1951d0		d0 04		bne $1951d6	                BNE next_byte
.1951d2		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1951d4		f0 14		beq $1951ea	                BEQ done                            ; Yes: we're done
.1951d6		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.1951d7		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.1951da		d0 d5		bne $1951b1	                BNE copy_loop                       ; No: keep copying
.1951dc		22 b8 46 19	jsl $1946b8	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.1951e0		b0 03		bcs $1951e5	                BCS next_cluster
.1951e2		82 bc 02	brl $1954a1	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.1951e5		a0 00 00	ldy #$0000	next_cluster    LDY #0
.1951e8		80 c7		bra $1951b1	                BRA copy_loop                       ; Go back to copying
.1951ea		82 bb 02	brl $1954a8	done            BRL IF_SUCCESS
.1951ed						IF_LOADPGZ
.1951ed		48		pha		                PHA             ; begin setdbr macro
.1951ee		08		php		                PHP
.1951ef		e2 20		sep #$20	                SEP #$20        ; set A short
.1951f1		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1951f3		48		pha		                PHA
.1951f4		ab		plb		                PLB
.1951f5		28		plp		                PLP
.1951f6		68		pla		                PLA             ; end setdbr macro
.1951f7		48		pha		                PHA             ; begin setdp macro
.1951f8		08		php		                PHP
.1951f9		c2 20		rep #$20	                REP #$20        ; set A long
.1951fb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1951fe		5b		tcd		                TCD
.1951ff		28		plp		                PLP
.195200		68		pla		                PLA             ; end setdp macro
.195201		c2 30		rep #$30	                REP #$30        ; set A&X long
.195203		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE                  ; Get the file size
.195206		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195208		85 2c		sta $034c	                STA DOS_FILE_SIZE                   ; And save it to DOS_FILE_SIZE
.19520a		c8		iny		                INY
.19520b		c8		iny		                INY
.19520c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19520e		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.195210		e2 20		sep #$20	                SEP #$20        ; set A short
.195212		a0 00 00	ldy #$0000	                LDY #0                              ; Starting at the beginning of the file
.195215		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "Z" signature
.195217		c9 5a		cmp #$5a	                CMP #'Z'
.195219		f0 06		beq $195221	                BEQ start_block                     ; If found, get the starting address
.19521b		a9 19		lda #$19	fail_sig        LDA #DOS_ERR_PGZSIG                 ; Fail with a PGZSIG error code
.19521d		22 9d 54 19	jsl $19549d	                JSL IF_FAILURE
.195221		c8		iny		start_block     INY
.195222						get_addr
.195222		e2 20		sep #$20	                SEP #$20        ; set A short
.195224		22 a7 52 19	jsl $1952a7	                JSL IF_FILE_EOF                     ; Check if EOF
.195228		90 03		bcc $19522d	                BCC get_addr_lo
.19522a		82 7b 02	brl $1954a8	done            BRL IF_SUCCESS                      ; If so: we're done
.19522d		22 e5 52 19	jsl $1952e5	get_addr_lo     JSL IF_READ_NEXT                    ; Get the next byte
.195231		90 47		bcc $19527a	                BCC ret_failure                     ; Got an error: pass it on
.195233		85 34		sta $0354	                STA DOS_DST_PTR                     ; Save it as the low byte of the destination address
.195235		22 e5 52 19	jsl $1952e5	                JSL IF_READ_NEXT                    ; Get the next byte
.195239		90 3f		bcc $19527a	                BCC ret_failure                     ; Got an error: pass it on
.19523b		85 35		sta $0355	                STA DOS_DST_PTR+1                   ; Save it as the middle byte of the destination address
.19523d		22 e5 52 19	jsl $1952e5	                JSL IF_READ_NEXT                    ; Get the next byte
.195241		90 37		bcc $19527a	                BCC ret_failure                     ; Got an error: pass it on
.195243		85 36		sta $0356	                STA DOS_DST_PTR+2                   ; Save it as the high byte of the destination address
.195245		22 e5 52 19	jsl $1952e5	                JSL IF_READ_NEXT                    ; Get the next byte
.195249		90 2f		bcc $19527a	                BCC ret_failure                     ; Got an error: pass it on
.19524b		85 50		sta $0370	                STA DOS_BLOCK_SIZE                  ; Save it as the low byte of the block size
.19524d		22 e5 52 19	jsl $1952e5	                JSL IF_READ_NEXT                    ; Get the next byte
.195251		90 27		bcc $19527a	                BCC ret_failure                     ; Got an error: pass it on
.195253		85 51		sta $0371	                STA DOS_BLOCK_SIZE+1                ; Save it as the middle byte of the block size
.195255		22 e5 52 19	jsl $1952e5	                JSL IF_READ_NEXT                    ; Get the next byte
.195259		90 1f		bcc $19527a	                BCC ret_failure                     ; Got an error: pass it on
.19525b		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2                ; Save it as the high byte of the block size
.19525d		64 53		stz $0373	                STZ DOS_BLOCK_SIZE+3                ; And MSB is 0
.19525f		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; If DOS_BLOCK_SIZE <> 0, we have data to load
.195261		d0 1a		bne $19527d	                BNE read_data
.195263		a5 51		lda $0371	                LDA DOS_BLOCK_SIZE+1
.195265		d0 16		bne $19527d	                BNE read_data
.195267		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.195269		d0 12		bne $19527d	                BNE read_data
.19526b		a5 34		lda $0354	                LDA DOS_DST_PTR                     ; If DOS_BLOCK_SIZE = 0, we have the run address
.19526d		85 3c		sta $035c	                STA DOS_RUN_PTR
.19526f		a5 35		lda $0355	                LDA DOS_DST_PTR+1
.195271		85 3d		sta $035d	                STA DOS_RUN_PTR+1
.195273		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.195275		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.195277		82 2e 02	brl $1954a8	                BRL IF_SUCCESS                      ; And finish
.19527a		82 20 02	brl $19549d	ret_failure     BRL IF_FAILURE                      ; If there was an error, pass it up to the caller
.19527d						read_data
.19527d		e2 20		sep #$20	                SEP #$20        ; set A short
.19527f		22 e5 52 19	jsl $1952e5	                JSL IF_READ_NEXT                    ; Get the next byte
.195283		90 f5		bcc $19527a	                BCC ret_failure
.195285		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Save it to the destination address
.195287		c2 20		rep #$20	                REP #$20        ; set A long
.195289		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Increment the destination pointer
.19528b		d0 02		bne $19528f	                BNE dec_block_size
.19528d		e6 36		inc $0356	                INC DOS_DST_PTR+2
.19528f		38		sec		dec_block_size  SEC
.195290		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE
.195292		e9 01 00	sbc #$0001	                SBC #1
.195295		85 50		sta $0370	                STA DOS_BLOCK_SIZE
.195297		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.195299		e9 00 00	sbc #$0000	                SBC #0
.19529c		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2
.19529e		d0 dd		bne $19527d	                BNE read_data
.1952a0		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; Is block size = 0?
.1952a2		d0 d9		bne $19527d	                BNE read_data                       ; No: keep reading data
.1952a4		82 7b ff	brl $195222	                BRL get_addr                        ; Yes: check for another block
.1952a7						IF_FILE_EOF
.1952a7		48		pha		                PHA
.1952a8		5a		phy		                PHY
.1952a9		8b		phb		                PHB
.1952aa		0b		phd		                PHD
.1952ab		08		php		                PHP
.1952ac		48		pha		                PHA             ; begin setdbr macro
.1952ad		08		php		                PHP
.1952ae		e2 20		sep #$20	                SEP #$20        ; set A short
.1952b0		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1952b2		48		pha		                PHA
.1952b3		ab		plb		                PLB
.1952b4		28		plp		                PLP
.1952b5		68		pla		                PLA             ; end setdbr macro
.1952b6		48		pha		                PHA             ; begin setdp macro
.1952b7		08		php		                PHP
.1952b8		c2 20		rep #$20	                REP #$20        ; set A long
.1952ba		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1952bd		5b		tcd		                TCD
.1952be		28		plp		                PLP
.1952bf		68		pla		                PLA             ; end setdp macro
.1952c0		e2 20		sep #$20	                SEP #$20        ; set A short
.1952c2		c2 10		rep #$10	                REP #$10        ; set X long
.1952c4		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.1952c7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y                  ; Restore the index
.1952c9		89 80		bit #$80	                BIT #FD_STAT_EOF                    ; Check if the file is EOF
.1952cb		f0 07		beq $1952d4	                BEQ chk_file_size                   ; If not: check the file size
.1952cd		28		plp		ret_true        PLP                                 ; Return true
.1952ce		2b		pld		                PLD
.1952cf		ab		plb		                PLB
.1952d0		7a		ply		                PLY
.1952d1		68		pla		                PLA
.1952d2		38		sec		                SEC
.1952d3		6b		rtl		                RTL
.1952d4						chk_file_size
.1952d4		c2 20		rep #$20	                REP #$20        ; set A long
.1952d6		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; if DOS_FILE_SIZE = 0
.1952d8		d0 04		bne $1952de	                BNE ret_false
.1952da		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1952dc		f0 ef		beq $1952cd	                BEQ ret_true
.1952de		28		plp		ret_false       PLP                                 ; Return false
.1952df		2b		pld		                PLD
.1952e0		ab		plb		                PLB
.1952e1		7a		ply		                PLY
.1952e2		68		pla		                PLA
.1952e3		18		clc		                CLC
.1952e4		6b		rtl		                RTL
.1952e5						IF_READ_NEXT
.1952e5		8b		phb		                PHB
.1952e6		0b		phd		                PHD
.1952e7		08		php		                PHP
.1952e8		48		pha		                PHA             ; begin setdbr macro
.1952e9		08		php		                PHP
.1952ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1952ec		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1952ee		48		pha		                PHA
.1952ef		ab		plb		                PLB
.1952f0		28		plp		                PLP
.1952f1		68		pla		                PLA             ; end setdbr macro
.1952f2		48		pha		                PHA             ; begin setdp macro
.1952f3		08		php		                PHP
.1952f4		c2 20		rep #$20	                REP #$20        ; set A long
.1952f6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1952f9		5b		tcd		                TCD
.1952fa		28		plp		                PLP
.1952fb		68		pla		                PLA             ; end setdp macro
.1952fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1952fe		c2 10		rep #$10	                REP #$10        ; set X long
.195300		22 a7 52 19	jsl $1952a7	                JSL IF_FILE_EOF                     ; Check if the file is EOF
.195304		90 06		bcc $19530c	                BCC get_byte                        ; If not: get the next byte
.195306		a9 18		lda #$18	                LDA #DOS_ERR_EOF                    ; If so: return an EOF error
.195308		85 0e		sta $032e	                STA DOS_STATUS
.19530a		80 3f		bra $19534b	                BRA ret_failure
.19530c		b7 30		lda [$0350],y	get_byte        LDA [DOS_SRC_PTR],Y                 ; Read the byte...
.19530e		48		pha		                PHA                                 ; And save it for the moment
.19530f		c2 20		rep #$20	                REP #$20        ; set A long
.195311		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Decrement the file size...
.195313		d0 02		bne $195317	                BNE dec_low
.195315		c6 2e		dec $034e	                DEC DOS_FILE_SIZE+2
.195317		c6 2c		dec $034c	dec_low         DEC DOS_FILE_SIZE
.195319		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.19531b		d0 04		bne $195321	                BNE next_byte
.19531d		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.19531f		f0 1b		beq $19533c	                BEQ ret_eof                         ; Yes: mark the file as EOF
.195321						next_byte
.195321		e2 20		sep #$20	                SEP #$20        ; set A short
.195323		c8		iny		                INY                                 ; Move to the next byte
.195324		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE                ; Have we reached the end of the sector?
.195327		90 0b		bcc $195334	                BLT ret_success                     ; No: just return the byte
.195329		22 b8 46 19	jsl $1946b8	                JSL DOS_READNEXT                    ; Yes: read the next sector
.19532d		b0 02		bcs $195331	                BCS reset_index
.19532f		80 1a		bra $19534b	                BRA ret_failure                     ; If failure: pass the error up the chain
.195331		a0 00 00	ldy #$0000	reset_index     LDY #0                              ; Reset the index
.195334						ret_success
.195334		e2 20		sep #$20	                SEP #$20        ; set A short
.195336		68		pla		                PLA                                 ; Return the byte retrieved
.195337		28		plp		                PLP
.195338		2b		pld		                PLD
.195339		ab		plb		                PLB
.19533a		38		sec		                SEC
.19533b		6b		rtl		                RTL
.19533c						ret_eof
.19533c		e2 20		sep #$20	                SEP #$20        ; set A short
.19533e		5a		phy		                PHY                                 ; Save the index
.19533f		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.195342		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195344		09 80		ora #$80	                ORA #FD_STAT_EOF                    ; Mark it EOF
.195346		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y                  ; And update the status
.195348		7a		ply		                PLY                                 ; Restore the index
.195349		80 e9		bra $195334	                BRA ret_success
.19534b						ret_failure
.19534b		e2 20		sep #$20	                SEP #$20        ; set A short
.19534d		28		plp		                PLP
.19534e		2b		pld		                PLD
.19534f		ab		plb		                PLB
.195350		18		clc		                CLC
.195351		6b		rtl		                RTL
.195352						IF_LOADRAW
.195352		c2 30		rep #$30	                REP #$30        ; set A&X long
.195354		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.195357						copy_loop
.195357		e2 20		sep #$20	                SEP #$20        ; set A short
.195359		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.19535b		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.19535d		c2 20		rep #$20	                REP #$20        ; set A long
.19535f		38		sec		                SEC                         ; Count down the number of bytes left
.195360		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.195362		e9 01 00	sbc #$0001	                SBC #1
.195365		85 2c		sta $034c	                STA DOS_FILE_SIZE
.195367		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.195369		e9 00 00	sbc #$0000	                SBC #0
.19536c		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.19536e		d0 04		bne $195374	                BNE continue
.195370		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.195372		f0 1b		beq $19538f	                BEQ close_file              ; If not: we're done
.195374		c8		iny		continue        INY
.195375		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.195378		d0 dd		bne $195357	                BNE copy_loop               ; No: keep processing the bytes
.19537a		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.19537b		a5 34		lda $0354	                LDA DOS_DST_PTR
.19537d		6d 0e a0	adc $18a00e	                ADC CLUSTER_SIZE
.195380		85 34		sta $0354	                STA DOS_DST_PTR
.195382		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.195384		69 00 00	adc #$0000	                ADC #0
.195387		85 36		sta $0356	                STA DOS_DST_PTR+2
.195389		22 ee 4e 19	jsl $194eee	                JSL IF_READ                 ; Yes: load the next cluster
.19538d		b0 c5		bcs $195354	                BCS copy_cluster            ; And start copying it
.19538f						close_file
.19538f		82 16 01	brl $1954a8	ret_success     BRL IF_SUCCESS
.195392						IF_NULLBUFFER
.195392		5a		phy		                PHY
.195393		8b		phb		                PHB
.195394		0b		phd		                PHD
.195395		08		php		                PHP
.195396		48		pha		                PHA             ; begin setdbr macro
.195397		08		php		                PHP
.195398		e2 20		sep #$20	                SEP #$20        ; set A short
.19539a		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19539c		48		pha		                PHA
.19539d		ab		plb		                PLB
.19539e		28		plp		                PLP
.19539f		68		pla		                PLA             ; end setdbr macro
.1953a0		48		pha		                PHA             ; begin setdp macro
.1953a1		08		php		                PHP
.1953a2		c2 20		rep #$20	                REP #$20        ; set A long
.1953a4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1953a7		5b		tcd		                TCD
.1953a8		28		plp		                PLP
.1953a9		68		pla		                PLA             ; end setdp macro
.1953aa		c2 30		rep #$30	                REP #$30        ; set A&X long
.1953ac		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1953af		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953b1		85 28		sta $0348	                STA DOS_TEMP
.1953b3		c8		iny		                INY
.1953b4		c8		iny		                INY
.1953b5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953b7		85 2a		sta $034a	                STA DOS_TEMP+2
.1953b9		a0 00 00	ldy #$0000	                LDY #0
.1953bc		a9 00 00	lda #$0000	                LDA #0
.1953bf		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.1953c1		c8		iny		                INY
.1953c2		c8		iny		                INY
.1953c3		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.1953c6		d0 f7		bne $1953bf	                BNE loop
.1953c8		28		plp		                PLP
.1953c9		2b		pld		                PLD
.1953ca		ab		plb		                PLB
.1953cb		7a		ply		                PLY
.1953cc		6b		rtl		                RTL
.1953cd						IF_COPY2BUFF
.1953cd		5a		phy		                PHY
.1953ce		8b		phb		                PHB
.1953cf		0b		phd		                PHD
.1953d0		08		php		                PHP
.1953d1		48		pha		                PHA             ; begin setdbr macro
.1953d2		08		php		                PHP
.1953d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1953d5		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1953d7		48		pha		                PHA
.1953d8		ab		plb		                PLB
.1953d9		28		plp		                PLP
.1953da		68		pla		                PLA             ; end setdbr macro
.1953db		48		pha		                PHA             ; begin setdp macro
.1953dc		08		php		                PHP
.1953dd		c2 20		rep #$20	                REP #$20        ; set A long
.1953df		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1953e2		5b		tcd		                TCD
.1953e3		28		plp		                PLP
.1953e4		68		pla		                PLA             ; end setdp macro
.1953e5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1953e7		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1953ea		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953ec		85 28		sta $0348	                STA DOS_TEMP
.1953ee		c8		iny		                INY
.1953ef		c8		iny		                INY
.1953f0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953f2		85 2a		sta $034a	                STA DOS_TEMP+2
.1953f4		a0 00 00	ldy #$0000	                LDY #0
.1953f7						copy_loop
.1953f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1953f9		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.1953fb		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.1953fd		c2 20		rep #$20	                REP #$20        ; set A long
.1953ff		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.195401		d0 02		bne $195405	                BNE adv_dest
.195403		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.195405		c8		iny		adv_dest        INY                         ; Count it
.195406		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.195409		f0 0c		beq $195417	                BEQ done                    ; Yes: we're done
.19540b		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.19540d		c5 38		cmp $0358	                CMP DOS_END_PTR
.19540f		d0 e6		bne $1953f7	                BNE copy_loop               ; No: keep copying
.195411		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.195413		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.195415		d0 e0		bne $1953f7	                BNE copy_loop
.195417		28		plp		done            PLP
.195418		2b		pld		                PLD
.195419		ab		plb		                PLB
.19541a		7a		ply		                PLY
.19541b		6b		rtl		                RTL
.19541c						IF_SAVE
.19541c		da		phx		                PHX
.19541d		5a		phy		                PHY
.19541e		0b		phd		                PHD
.19541f		8b		phb		                PHB
.195420		08		php		                PHP
.195421		48		pha		                PHA             ; begin setdbr macro
.195422		08		php		                PHP
.195423		e2 20		sep #$20	                SEP #$20        ; set A short
.195425		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195427		48		pha		                PHA
.195428		ab		plb		                PLB
.195429		28		plp		                PLP
.19542a		68		pla		                PLA             ; end setdbr macro
.19542b		48		pha		                PHA             ; begin setdp macro
.19542c		08		php		                PHP
.19542d		c2 20		rep #$20	                REP #$20        ; set A long
.19542f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195432		5b		tcd		                TCD
.195433		28		plp		                PLP
.195434		68		pla		                PLA             ; end setdp macro
.195435		c2 30		rep #$30	                REP #$30        ; set A&X long
.195437		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.19543a		38		sec		                SEC
.19543b		a5 38		lda $0358	                LDA DOS_END_PTR
.19543d		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.19543f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195441		c8		iny		                INY
.195442		c8		iny		                INY
.195443		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.195445		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.195447		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195449		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.19544c		18		clc		                CLC
.19544d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19544f		69 01 00	adc #$0001	                ADC #1
.195452		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195454		90 09		bcc $19545f	                BCC first_block
.195456		c8		iny		                INY
.195457		c8		iny		                INY
.195458		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19545a		69 00 00	adc #$0000	                ADC #0
.19545d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19545f		22 92 53 19	jsl $195392	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.195463		22 cd 53 19	jsl $1953cd	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.195467		22 80 4e 19	jsl $194e80	                JSL IF_CREATE           ; Create file.
.19546b		b0 03		bcs $195470	                BCS check_for_end
.19546d		82 31 00	brl $1954a1	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.195470		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.195472		c5 38		cmp $0358	                CMP DOS_END_PTR
.195474		d0 06		bne $19547c	                BNE next_block
.195476		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.195478		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.19547a		f0 1d		beq $195499	                BEQ done                ; Yes: we're done
.19547c		22 92 53 19	jsl $195392	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.195480		22 cd 53 19	jsl $1953cd	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.195484		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.195487		a9 00 00	lda #$0000	                LDA #0
.19548a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19548c		c8		iny		                INY
.19548d		c8		iny		                INY
.19548e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195490		22 53 4f 19	jsl $194f53	                JSL IF_WRITE            ; Append to the file
.195494		b0 da		bcs $195470	                BCS check_for_end       ; And try again
.195496		82 08 00	brl $1954a1	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.195499		5c a8 54 19	jmp $1954a8	done            JML IF_SUCCESS
.19549d						IF_FAILURE
.19549d		e2 20		sep #$20	                SEP #$20        ; set A short
.19549f		85 0e		sta $032e	                STA DOS_STATUS
.1954a1		28		plp		IF_PASSFAILURE  PLP
.1954a2		18		clc		                CLC
.1954a3		ab		plb		                PLB
.1954a4		2b		pld		                PLD
.1954a5		7a		ply		                PLY
.1954a6		fa		plx		                PLX
.1954a7		6b		rtl		                RTL
.1954a8						IF_SUCCESS
.1954a8		e2 20		sep #$20	                SEP #$20        ; set A short
.1954aa		64 00		stz $0320	                STZ BIOS_STATUS
.1954ac		64 0e		stz $032e	                STZ DOS_STATUS
.1954ae		28		plp		                PLP
.1954af		38		sec		                SEC
.1954b0		ab		plb		                PLB
.1954b1		2b		pld		                PLD
.1954b2		7a		ply		                PLY
.1954b3		fa		plx		                PLX
.1954b4		6b		rtl		                RTL
.1954b5						IF_RUN
.1954b5		da		phx		                PHX
.1954b6		5a		phy		                PHY
.1954b7		0b		phd		                PHD
.1954b8		8b		phb		                PHB
.1954b9		08		php		                PHP
.1954ba		48		pha		                PHA             ; begin setdbr macro
.1954bb		08		php		                PHP
.1954bc		e2 20		sep #$20	                SEP #$20        ; set A short
.1954be		a9 00		lda #$00	                LDA #0
.1954c0		48		pha		                PHA
.1954c1		ab		plb		                PLB
.1954c2		28		plp		                PLP
.1954c3		68		pla		                PLA             ; end setdbr macro
.1954c4		48		pha		                PHA             ; begin setdp macro
.1954c5		08		php		                PHP
.1954c6		c2 20		rep #$20	                REP #$20        ; set A long
.1954c8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1954cb		5b		tcd		                TCD
.1954cc		28		plp		                PLP
.1954cd		68		pla		                PLA             ; end setdp macro
.1954ce		e2 20		sep #$20	                SEP #$20        ; set A short
.1954d0		c2 10		rep #$10	                REP #$10        ; set X long
.1954d2		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.1954d4		a2 00 00	ldx #$0000	                LDX #0
.1954d7		9f 00 ad 18	sta $18ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.1954db		e8		inx		                INX
.1954dc		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.1954df		d0 f6		bne $1954d7	                BNE clr_fd_loop
.1954e1		c2 20		rep #$20	                REP #$20        ; set A long
.1954e3		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.1954e6		8f 0e ad 18	sta $18ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.1954ea		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_SECTOR
.1954ed		8f 10 ad 18	sta $18ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.1954f1		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.1954f3		8f 02 ad 18	sta $18ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.1954f7		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.1954f9		8f 04 ad 18	sta $18ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.1954fd		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.195500		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.195502		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.195504		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.195507		85 20		sta $0340	                STA DOS_FD_PTR
.195509		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_FD
.19550c		85 22		sta $0342	                STA DOS_FD_PTR+2
.19550e		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.195511		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.195515		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.195519		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.19551d		b0 03		bcs $195522	                BCS chk_execute
.19551f		82 7f ff	brl $1954a1	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.195522						chk_execute
.195522		c2 20		rep #$20	                REP #$20        ; set A long
.195524		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.195526		d0 0b		bne $195533	                BNE try_execute                         ; If so: call it
.195528		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.19552a		d0 07		bne $195533	                BNE try_execute
.19552c		e2 20		sep #$20	                SEP #$20        ; set A short
.19552e		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.195530		82 6a ff	brl $19549d	                BRL IF_FAILURE
.195533						try_execute
.195533		e2 20		sep #$20	                SEP #$20        ; set A short
.195535		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.195537		48		pha		                PHA
.195538		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.19553a		48		pha		                PHA
.19553b		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.19553d		48		pha		                PHA
.19553e		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.195540		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.195542		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.195546		e2 20		sep #$20	                SEP #$20        ; set A short
.195548		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.195549		68		pla		                PLA
.19554a		68		pla		                PLA
.19554b		82 5a ff	brl $1954a8	                BRL IF_SUCCESS                          ; Return success
.19554e						IF_ALLOCFD
.19554e		da		phx		                PHX
.19554f		5a		phy		                PHY
.195550		0b		phd		                PHD
.195551		8b		phb		                PHB
.195552		08		php		                PHP
.195553		48		pha		                PHA             ; begin setdbr macro
.195554		08		php		                PHP
.195555		e2 20		sep #$20	                SEP #$20        ; set A short
.195557		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195559		48		pha		                PHA
.19555a		ab		plb		                PLB
.19555b		28		plp		                PLP
.19555c		68		pla		                PLA             ; end setdbr macro
.19555d		48		pha		                PHA             ; begin setdp macro
.19555e		08		php		                PHP
.19555f		c2 20		rep #$20	                REP #$20        ; set A long
.195561		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195564		5b		tcd		                TCD
.195565		28		plp		                PLP
.195566		68		pla		                PLA             ; end setdp macro
.195567		c2 10		rep #$10	                REP #$10        ; set X long
.195569		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.19556c						chk_fd
.19556c		e2 20		sep #$20	                SEP #$20        ; set A short
.19556e		bd 20 ad	lda $18ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.195571		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.195573		f0 14		beq $195589	                BEQ found                           ; No: flag and return the found descriptor
.195575						next_fd
.195575		c2 20		rep #$20	                REP #$20        ; set A long
.195577		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.195578		18		clc		                CLC
.195579		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.19557c		aa		tax		                TAX
.19557d		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.195580		90 ea		bcc $19556c	                BLT chk_fd                          ; No: check this new file descriptor
.195582		e2 20		sep #$20	                SEP #$20        ; set A short
.195584		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.195586		82 14 ff	brl $19549d	                BRL IF_FAILURE
.195589		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.19558b		9d 20 ad	sta $18ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.19558e		c2 20		rep #$20	                REP #$20        ; set A long
.195590		8a		txa		                TXA
.195591		18		clc		                CLC
.195592		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.195595		85 20		sta $0340	                STA @b DOS_FD_PTR
.195597		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.19559a		69 00 00	adc #$0000	                ADC #0
.19559d		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.19559f		82 06 ff	brl $1954a8	                BRL IF_SUCCESS                      ; Return this file descriptor
.1955a2						IF_FREEFD
.1955a2		da		phx		                PHX
.1955a3		5a		phy		                PHY
.1955a4		0b		phd		                PHD
.1955a5		8b		phb		                PHB
.1955a6		08		php		                PHP
.1955a7		48		pha		                PHA             ; begin setdbr macro
.1955a8		08		php		                PHP
.1955a9		e2 20		sep #$20	                SEP #$20        ; set A short
.1955ab		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1955ad		48		pha		                PHA
.1955ae		ab		plb		                PLB
.1955af		28		plp		                PLP
.1955b0		68		pla		                PLA             ; end setdbr macro
.1955b1		48		pha		                PHA             ; begin setdp macro
.1955b2		08		php		                PHP
.1955b3		c2 20		rep #$20	                REP #$20        ; set A long
.1955b5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1955b8		5b		tcd		                TCD
.1955b9		28		plp		                PLP
.1955ba		68		pla		                PLA             ; end setdp macro
.1955bb		e2 20		sep #$20	                SEP #$20        ; set A short
.1955bd		c2 10		rep #$10	                REP #$10        ; set X long
.1955bf		a9 00		lda #$00	                LDA #0
.1955c1		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.1955c3		82 e2 fe	brl $1954a8	                BRL IF_SUCCESS
.1955c6						DOS_SRC2DST
.1955c6		da		phx		                PHX
.1955c7		5a		phy		                PHY
.1955c8		0b		phd		                PHD
.1955c9		8b		phb		                PHB
.1955ca		08		php		                PHP
.1955cb		48		pha		                PHA             ; begin setdp macro
.1955cc		08		php		                PHP
.1955cd		c2 20		rep #$20	                REP #$20        ; set A long
.1955cf		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1955d2		5b		tcd		                TCD
.1955d3		28		plp		                PLP
.1955d4		68		pla		                PLA             ; end setdp macro
.1955d5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1955d7		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1955da		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1955dc		aa		tax		                TAX                                     ; X := source buffer address
.1955dd		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.1955df		a8		tay		                TAY                                     ; Y := destination buffer address
.1955e0		e2 20		sep #$20	                SEP #$20        ; set A short
.1955e2		a9 18		lda #$18	                LDA #`DOS_FILE_BUFFS
.1955e4		48		pha		                PHA
.1955e5		ab		plb		                PLB
.1955e6		c2 20		rep #$20	                REP #$20        ; set A long
.1955e8		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.1955eb		f0 11		beq $1955fe	loop            BEQ done
.1955ed		48		pha		                PHA
.1955ee		e2 20		sep #$20	                SEP #$20        ; set A short
.1955f0		bd 00 00	lda $180000,x	                LDA #0,B,X
.1955f3		99 00 00	sta $180000,y	                STA #0,B,Y
.1955f6		c2 20		rep #$20	                REP #$20        ; set A long
.1955f8		68		pla		                PLA
.1955f9		3a		dec a		                DEC A
.1955fa		e8		inx		                INX
.1955fb		c8		iny		                INY
.1955fc		80 ed		bra $1955eb	                BRA loop
.1955fe		28		plp		done            PLP
.1955ff		ab		plb		                PLB
.195600		2b		pld		                PLD
.195601		7a		ply		                PLY
.195602		fa		plx		                PLX
.195603		6b		rtl		                RTL
.195604						IF_COPY
.195604		da		phx		                PHX
.195605		5a		phy		                PHY
.195606		0b		phd		                PHD
.195607		8b		phb		                PHB
.195608		08		php		                PHP
.195609		48		pha		                PHA             ; begin setdbr macro
.19560a		08		php		                PHP
.19560b		e2 20		sep #$20	                SEP #$20        ; set A short
.19560d		a9 00		lda #$00	                LDA #0
.19560f		48		pha		                PHA
.195610		ab		plb		                PLB
.195611		28		plp		                PLP
.195612		68		pla		                PLA             ; end setdbr macro
.195613		48		pha		                PHA             ; begin setdp macro
.195614		08		php		                PHP
.195615		c2 20		rep #$20	                REP #$20        ; set A long
.195617		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19561a		5b		tcd		                TCD
.19561b		28		plp		                PLP
.19561c		68		pla		                PLA             ; end setdp macro
.19561d		22 4e 55 19	jsl $19554e	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.195621		b0 03		bcs $195626	                BCS set_src_path
.195623		82 7b fe	brl $1954a1	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.195626						set_src_path
.195626		c2 30		rep #$30	                REP #$30        ; set A&X long
.195628		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.19562b		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.19562d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19562f		c8		iny		                INY
.195630		c8		iny		                INY
.195631		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.195633		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195635						alloc_dest
.195635		c2 30		rep #$30	                REP #$30        ; set A&X long
.195637		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.195639		85 30		sta $0350	                STA @b DOS_SRC_PTR
.19563b		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.19563d		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.19563f		22 4e 55 19	jsl $19554e	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.195643		b0 0f		bcs $195654	                BCS set_paths                   ; If everything is ok... start setting the paths
.195645		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195647		85 20		sta $0340	                STA @b DOS_FD_PTR
.195649		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.19564b		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.19564d		22 a2 55 19	jsl $1955a2	                JSL IF_FREEFD                   ; And free it
.195651		82 4d fe	brl $1954a1	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.195654						set_paths
.195654		c2 30		rep #$30	                REP #$30        ; set A&X long
.195656		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.195658		85 34		sta $0354	                STA @b DOS_DST_PTR
.19565a		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.19565c		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.19565e		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.195661		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.195663		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195665		c8		iny		                INY
.195666		c8		iny		                INY
.195667		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.195669		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.19566b		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.19566d		85 20		sta $0340	                STA @b DOS_FD_PTR
.19566f		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195671		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195673		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.195677		b0 10		bcs $195689	                BCS src_open                    ; If success, work with the openned file
.195679		00		brk #		                BRK
.19567a		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.19567c		85 20		sta $0340	                STA @b DOS_FD_PTR
.19567e		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195680		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195682		22 a2 55 19	jsl $1955a2	                JSL IF_FREEFD                   ; And free it
.195686		82 bc ff	brl $195645	                BRL err_free_src_fd             ; Free the source file descriptor
.195689		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.19568c		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.19568e		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195690		c8		iny		                INY
.195691		c8		iny		                INY
.195692		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195694		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195696		22 c6 55 19	jsl $1955c6	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.19569a		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.19569c		85 20		sta $0340	                STA @b DOS_FD_PTR
.19569e		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1956a0		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956a2		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.1956a6		b0 0f		bcs $1956b7	                BCS read_next                   ; If sucessful, try to get the next cluster
.1956a8		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.1956aa		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956ac		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.1956ae		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956b0		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.1956b4		82 c3 ff	brl $19567a	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.1956b7						read_next
.1956b7		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.1956b9		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956bb		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.1956bd		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956bf		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.1956c3		b0 19		bcs $1956de	                BCS copy2dest                   ; If successful, copy the sector
.1956c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1956c7		a5 0e		lda $032e	                LDA @b DOS_STATUS
.1956c9		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.1956cb		f0 32		beq $1956ff	                BEQ file_copied                 ; Yes: we're done copying
.1956cd						err_dest_close
.1956cd		c2 20		rep #$20	                REP #$20        ; set A long
.1956cf		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1956d1		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956d3		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1956d5		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956d7		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.1956db		82 ca ff	brl $1956a8	                BRL err_src_close               ; Close the source and throw an error
.1956de						copy2dest
.1956de		22 c6 55 19	jsl $1955c6	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.1956e2		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.1956e5		a9 00 00	lda #$0000	                LDA #0
.1956e8		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1956ea		c8		iny		                INY
.1956eb		c8		iny		                INY
.1956ec		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1956ee		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1956f0		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956f2		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1956f4		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956f6		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.1956fa		90 d1		bcc $1956cd	                BCC err_dest_close              ; If error: close all files and throw the error
.1956fc		82 b8 ff	brl $1956b7	                BRL read_next                   ; Otherwise: repeat the loop
.1956ff						file_copied
.1956ff		c2 20		rep #$20	                REP #$20        ; set A long
.195701		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195703		85 20		sta $0340	                STA @b DOS_FD_PTR
.195705		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195707		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195709		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.19570d		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.19570f		85 20		sta $0340	                STA @b DOS_FD_PTR
.195711		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195713		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195715		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.195719		82 8c fd	brl $1954a8	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af18f8					    UART1_BASE = $AF18F8        ; Base address for UART 1 (COM1) in the C256 Foenix U (only 1 Serial port)
=$af18f8					    UART2_BASE = $AF18F8
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.19571c						UART_SELECT
.19571c		08		php		            PHP
.19571d		c2 20		rep #$20	                REP #$20        ; set A long
.19571f		c9 02 00	cmp #$0002	            CMP #2
.195722		f0 07		beq $19572b	            BEQ is_COM2
.195724		c2 20		rep #$20	                REP #$20        ; set A long
.195726		a9 f8 18	lda #$18f8	            LDA #<>UART1_BASE
.195729		80 05		bra $195730	            BRA setaddr
.19572b						is_COM2
.19572b		c2 20		rep #$20	                REP #$20        ; set A long
.19572d		a9 f8 18	lda #$18f8	            LDA #<>UART2_BASE
.195730		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.195734		e2 20		sep #$20	                SEP #$20        ; set A short
.195736		a9 af		lda #$af	            LDA #`UART1_BASE
.195738		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.19573c		28		plp		            PLP
.19573d		6b		rtl		            RTL
.19573e						UART_SETBPS
.19573e		08		php		            PHP
.19573f		0b		phd		            PHD
.195740		48		pha		                PHA             ; begin setdp macro
.195741		08		php		                PHP
.195742		c2 20		rep #$20	                REP #$20        ; set A long
.195744		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195747		5b		tcd		                TCD
.195748		28		plp		                PLP
.195749		68		pla		                PLA             ; end setdp macro
.19574a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19574c		48		pha		            PHA
.19574d		e2 20		sep #$20	                SEP #$20        ; set A short
.19574f		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.195752		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.195754		09 80		ora #$80	            ORA #LCR_DLB
.195756		97 00		sta [$0700],y	            STA [CURRUART],Y
.195758		c2 20		rep #$20	                REP #$20        ; set A long
.19575a		68		pla		            PLA
.19575b		a0 00 00	ldy #$0000	            LDY #UART_DLL
.19575e		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.195760		e2 20		sep #$20	                SEP #$20        ; set A short
.195762		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.195765		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.195767		49 80		eor #$80	            EOR #LCR_DLB
.195769		97 00		sta [$0700],y	            STA [CURRUART],Y
.19576b		2b		pld		            PLD
.19576c		28		plp		            PLP
.19576d		6b		rtl		            RTL
.19576e						UART_SETLCR
.19576e		08		php		            PHP
.19576f		0b		phd		            PHD
.195770		48		pha		                PHA             ; begin setdp macro
.195771		08		php		                PHP
.195772		c2 20		rep #$20	                REP #$20        ; set A long
.195774		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195777		5b		tcd		                TCD
.195778		28		plp		                PLP
.195779		68		pla		                PLA             ; end setdp macro
.19577a		e2 20		sep #$20	                SEP #$20        ; set A short
.19577c		c2 10		rep #$10	                REP #$10        ; set X long
.19577e		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.195780		a0 03 00	ldy #$0003	            LDY #UART_LCR
.195783		97 00		sta [$0700],y	            STA [CURRUART],Y
.195785		2b		pld		            PLD
.195786		28		plp		            PLP
.195787		6b		rtl		            RTL
.195788						UART_INIT
.195788		08		php		            PHP
.195789		0b		phd		            PHD
.19578a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19578c		48		pha		                PHA             ; begin setdp macro
.19578d		08		php		                PHP
.19578e		c2 20		rep #$20	                REP #$20        ; set A long
.195790		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195793		5b		tcd		                TCD
.195794		28		plp		                PLP
.195795		68		pla		                PLA             ; end setdp macro
.195796		a9 01 00	lda #$0001	            LDA #UART_115200
.195799		22 3e 57 19	jsl $19573e	            JSL UART_SETBPS
.19579d		e2 20		sep #$20	                SEP #$20        ; set A short
.19579f		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.1957a1		22 6e 57 19	jsl $19576e	            JSL UART_SETLCR
.1957a5		a9 e1		lda #$e1	            LDA #%11100001
.1957a7		a0 02 00	ldy #$0002	            LDY #UART_FCR
.1957aa		97 00		sta [$0700],y	            STA [CURRUART],Y
.1957ac		2b		pld		            PLD
.1957ad		28		plp		            PLP
.1957ae		6b		rtl		            RTL
.1957af						UART_HASBYT
.1957af		08		php		            PHP
.1957b0		0b		phd		            PHD
.1957b1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1957b3		48		pha		                PHA             ; begin setdp macro
.1957b4		08		php		                PHP
.1957b5		c2 20		rep #$20	                REP #$20        ; set A long
.1957b7		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1957ba		5b		tcd		                TCD
.1957bb		28		plp		                PLP
.1957bc		68		pla		                PLA             ; end setdp macro
.1957bd		e2 20		sep #$20	                SEP #$20        ; set A short
.1957bf		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.1957c2		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.1957c4		29 01		and #$01	            AND #LSR_DATA_AVAIL
.1957c6		d0 04		bne $1957cc	            BNE ret_true            ; If flag is set, return true
.1957c8		2b		pld		ret_false   PLD                     ; Return false
.1957c9		28		plp		            PLP
.1957ca		18		clc		            CLC
.1957cb		6b		rtl		            RTL
.1957cc		2b		pld		ret_true    PLD                     ; Return true
.1957cd		28		plp		            PLP
.1957ce		38		sec		            SEC
.1957cf		6b		rtl		            RTL
.1957d0						UART_GETC
.1957d0		08		php		            PHP
.1957d1		0b		phd		            PHD
.1957d2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1957d4		48		pha		                PHA             ; begin setdp macro
.1957d5		08		php		                PHP
.1957d6		c2 20		rep #$20	                REP #$20        ; set A long
.1957d8		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1957db		5b		tcd		                TCD
.1957dc		28		plp		                PLP
.1957dd		68		pla		                PLA             ; end setdp macro
.1957de		e2 20		sep #$20	                SEP #$20        ; set A short
.1957e0		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.1957e3		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.1957e5		29 01		and #$01	            AND #LSR_DATA_AVAIL
.1957e7		f0 fa		beq $1957e3	            BEQ wait_getc           ; If the flag is clear, wait
.1957e9		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.1957ec		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.1957ee		2b		pld		            PLD
.1957ef		28		plp		            PLP
.1957f0		6b		rtl		            RTL
.1957f1						UART_PUTC
.1957f1		08		php		            PHP
.1957f2		0b		phd		            PHD
.1957f3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1957f5		48		pha		                PHA             ; begin setdp macro
.1957f6		08		php		                PHP
.1957f7		c2 20		rep #$20	                REP #$20        ; set A long
.1957f9		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1957fc		5b		tcd		                TCD
.1957fd		28		plp		                PLP
.1957fe		68		pla		                PLA             ; end setdp macro
.1957ff		e2 20		sep #$20	                SEP #$20        ; set A short
.195801		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.195802		a0 05 00	ldy #$0005	            LDY #UART_LSR
.195805		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.195807		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.195809		f0 fa		beq $195805	            BEQ wait_putc
.19580b		68		pla		            PLA
.19580c		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.19580f		97 00		sta [$0700],y	            STA [CURRUART],Y
.195811		2b		pld		            PLD
.195812		28		plp		            PLP
.195813		6b		rtl		            RTL
.195814						UART_PUTS
.195814		08		php		            PHP
.195815		e2 20		sep #$20	                SEP #$20        ; set A short
.195817		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.19581a		f0 07		beq $195823	            BEQ done
.19581c		22 f1 57 19	jsl $1957f1	            JSL UART_PUTC
.195820		e8		inx		            INX
.195821		80 f4		bra $195817	            BRA put_loop
.195823		28		plp		done        PLP
.195824		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.195825						JOYSTICK_SET_NES_MODE
.195825		e2 20		sep #$20	                SEP #$20        ; set A short
.195827		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19582b		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.19582d		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195831		6b		rtl		          RTL
.195832						JOYSTICK_SET_SNES_MODE
.195832		e2 20		sep #$20	                SEP #$20        ; set A short
.195834		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195838		29 fb		and #$fb	          AND #~NES_SNES_JOY
.19583a		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.19583c		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195840		6b		rtl		          RTL
.195841						JOYSTICK_ENABLE_NES_SNES_PORT0
.195841		e2 20		sep #$20	                SEP #$20        ; set A short
.195843		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195847		29 fe		and #$fe	          AND #~NES_SNES_EN0
.195849		09 01		ora #$01	          ORA #NES_SNES_EN0
.19584b		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19584f		6b		rtl		          RTL
.195850						JOYSTICK_ENABLE_NES_SNES_PORT1
.195850		e2 20		sep #$20	                SEP #$20        ; set A short
.195852		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195856		29 fd		and #$fd	          AND #~NES_SNES_EN1
.195858		09 02		ora #$02	          ORA #NES_SNES_EN1
.19585a		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19585e		6b		rtl		          RTL
.19585f						JOYSTICK_DISABLE_NES_SNES_PORT0
.19585f		e2 20		sep #$20	                SEP #$20        ; set A short
.195861		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195865		29 fe		and #$fe	          AND #~NES_SNES_EN0
.195867		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19586b		6b		rtl		          RTL
.19586c						JOYSTICK_DISABLE_NES_SNES_PORT1
.19586c		e2 20		sep #$20	                SEP #$20        ; set A short
.19586e		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195872		29 fd		and #$fd	          AND #~NES_SNES_EN1
.195874		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195878		6b		rtl		          RTL
.195879						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.195879		e2 20		sep #$20	                SEP #$20        ; set A short
.19587b		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19587f		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.195881		c9 00		cmp #$00	          CMP #$00
.195883		f0 14		beq $195899	          BEQ END_OF_JOYSTICK_POLL
.195885		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195889		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.19588b		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19588f						JOYSTICK_POLLING_ISNOTOVER
.19588f		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.195893		29 40		and #$40	          AND #NES_SNES_DONE
.195895		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.195897		d0 f6		bne $19588f	          BNE JOYSTICK_POLLING_ISNOTOVER
.195899						END_OF_JOYSTICK_POLL
.195899		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/sdc_library.asm

.19589a						SDC_TEST
.19589a		8b		phb		                PHB
.19589b		0b		phd		                PHD
.19589c		08		php		                PHP
.19589d		48		pha		                PHA             ; begin setdbr macro
.19589e		08		php		                PHP
.19589f		e2 20		sep #$20	                SEP #$20        ; set A short
.1958a1		a9 00		lda #$00	                LDA #0
.1958a3		48		pha		                PHA
.1958a4		ab		plb		                PLB
.1958a5		28		plp		                PLP
.1958a6		68		pla		                PLA             ; end setdbr macro
.1958a7		48		pha		                PHA             ; begin setdp macro
.1958a8		08		php		                PHP
.1958a9		c2 20		rep #$20	                REP #$20        ; set A long
.1958ab		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1958ae		5b		tcd		                TCD
.1958af		28		plp		                PLP
.1958b0		68		pla		                PLA             ; end setdp macro
.1958b1		e2 20		sep #$20	                SEP #$20        ; set A short
.1958b3		a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.1958b5		8d 1e 00	sta $001e	                STA @w CURCOLOR
.1958b8		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.1958bc		22 a0 10 00	jsl $0010a0	                JSL CSRHOME
.1958c0		22 00 59 19	jsl $195900	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.1958c4		b0 03		bcs $1958c9	                BCS init_ok
.1958c6		82 15 00	brl $1958de	                BRL done
.1958c9		a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.1958cb		85 01		sta $0321	                STA BIOS_DEV
.1958cd		22 08 3f 19	jsl $193f08	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.1958d1		b0 03		bcs $1958d6	                BCS mount_ok
.1958d3		82 08 00	brl $1958de	                BRL done
.1958d6		22 bf 4f 19	jsl $194fbf	mount_ok        JSL IF_DIROPEN
.1958da		b0 02		bcs $1958de	                BCS all_ok
.1958dc		80 00		bra $1958de	                BRA done
.1958de						all_ok
.1958de		22 6c 10 00	jsl $00106c	done            JSL PRINTCR
.1958e2		28		plp		                PLP
.1958e3		2b		pld		                PLD
.1958e4		ab		plb		                PLB
.1958e5		6b		rtl		                RTL
.1958e6						SDC_WAITBUSY
.1958e6		08		php		                PHP
.1958e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1958e9		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.1958ed		29 01		and #$01	                AND #SDC_TRANS_BUSY
.1958ef		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.1958f1		f0 f6		beq $1958e9	                BEQ wait_xact
.1958f3		28		plp		                PLP
.1958f4		6b		rtl		                RTL
.1958f5						SDC_RESET
.1958f5		08		php		                PHP
.1958f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1958f8		a9 01		lda #$01	                LDA #1
.1958fa		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.1958fe		28		plp		                PLP
.1958ff		6b		rtl		                RTL
.195900						SDC_INIT
.195900		0b		phd		                PHD
.195901		8b		phb		                PHB
.195902		08		php		                PHP
.195903		48		pha		                PHA             ; begin setdbr macro
.195904		08		php		                PHP
.195905		e2 20		sep #$20	                SEP #$20        ; set A short
.195907		a9 00		lda #$00	                LDA #0
.195909		48		pha		                PHA
.19590a		ab		plb		                PLB
.19590b		28		plp		                PLP
.19590c		68		pla		                PLA             ; end setdbr macro
.19590d		48		pha		                PHA             ; begin setdp macro
.19590e		08		php		                PHP
.19590f		c2 20		rep #$20	                REP #$20        ; set A long
.195911		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195914		5b		tcd		                TCD
.195915		28		plp		                PLP
.195916		68		pla		                PLA             ; end setdp macro
.195917		e2 20		sep #$20	                SEP #$20        ; set A short
.195919		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.19591d		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.19591f		f0 04		beq $195925	                BEQ start_trans                     ; Yes: start the transaction
.195921		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.195923		80 22		bra $195947	                BRA set_error
.195925		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.195927		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.19592b		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.19592d		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195931		22 e6 58 19	jsl $1958e6	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.195935		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195939		d0 07		bne $195942	                BNE ret_error                       ; Is there one? Process the error
.19593b		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.19593d		28		plp		                PLP
.19593e		ab		plb		                PLB
.19593f		2b		pld		                PLD
.195940		38		sec		                SEC
.195941		6b		rtl		                RTL
.195942		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.195945		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.195947		85 00		sta $0320	set_error       STA BIOS_STATUS
.195949		28		plp		                PLP
.19594a		ab		plb		                PLB
.19594b		2b		pld		                PLD
.19594c		18		clc		                CLC
.19594d		6b		rtl		                RTL
.19594e						SDC_GETBLOCK
.19594e		0b		phd		                PHD
.19594f		8b		phb		                PHB
.195950		08		php		                PHP
.195951		48		pha		                PHA             ; begin setdbr macro
.195952		08		php		                PHP
.195953		e2 20		sep #$20	                SEP #$20        ; set A short
.195955		a9 00		lda #$00	                LDA #0
.195957		48		pha		                PHA
.195958		ab		plb		                PLB
.195959		28		plp		                PLP
.19595a		68		pla		                PLA             ; end setdbr macro
.19595b		48		pha		                PHA             ; begin setdp macro
.19595c		08		php		                PHP
.19595d		c2 20		rep #$20	                REP #$20        ; set A long
.19595f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195962		5b		tcd		                TCD
.195963		28		plp		                PLP
.195964		68		pla		                PLA             ; end setdp macro
.195965		e2 20		sep #$20	                SEP #$20        ; set A short
.195967		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.19596b		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.19596d		f0 04		beq $195973	                BEQ led_on                          ; Yes: turn on the LED
.19596f		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.195971		80 71		bra $1959e4	                BRA ret_error
.195973		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.195977		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.195979		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.19597d		a9 00		lda #$00	                LDA #0
.19597f		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.195983		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.195985		0a		asl a		                ASL A
.195986		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.19598a		a5 03		lda $0323	                LDA BIOS_LBA+1
.19598c		2a		rol a		                ROL A
.19598d		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.195991		a5 04		lda $0324	                LDA BIOS_LBA+2
.195993		2a		rol a		                ROL A
.195994		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.195998		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.19599a		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.19599e		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.1959a0		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.1959a4		22 e6 58 19	jsl $1958e6	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.1959a8		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.1959ac		d0 36		bne $1959e4	                BNE ret_error                       ; Is there one? Process the error
.1959ae		e2 20		sep #$20	                SEP #$20        ; set A short
.1959b0		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.1959b4		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.1959b6		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.1959ba		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.1959bc		c2 10		rep #$10	                REP #$10        ; set X long
.1959be		a0 00 00	ldy #$0000	                LDY #0
.1959c1		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.1959c5		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.1959c7		c8		iny		                INY                                 ; Advance to the next byte
.1959c8		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.1959cb		d0 f4		bne $1959c1	                BNE loop_rd                         ; No: keep reading
.1959cd		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.1959d1		d0 11		bne $1959e4	                BNE ret_error                       ; Is there one? Process the error
.1959d3		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.1959d5		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.1959d9		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.1959db		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.1959df		28		plp		                PLP
.1959e0		ab		plb		                PLB
.1959e1		2b		pld		                PLD
.1959e2		38		sec		                SEC
.1959e3		6b		rtl		                RTL
.1959e4		85 00		sta $0320	ret_error       STA BIOS_STATUS
.1959e6		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.1959ea		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.1959ec		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.1959f0		28		plp		                PLP
.1959f1		ab		plb		                PLB
.1959f2		2b		pld		                PLD
.1959f3		18		clc		                CLC
.1959f4		6b		rtl		                RTL
.1959f5						SDC_PUTBLOCK
.1959f5		0b		phd		                PHD
.1959f6		8b		phb		                PHB
.1959f7		08		php		                PHP
.1959f8		48		pha		                PHA             ; begin setdbr macro
.1959f9		08		php		                PHP
.1959fa		e2 20		sep #$20	                SEP #$20        ; set A short
.1959fc		a9 00		lda #$00	                LDA #0
.1959fe		48		pha		                PHA
.1959ff		ab		plb		                PLB
.195a00		28		plp		                PLP
.195a01		68		pla		                PLA             ; end setdbr macro
.195a02		48		pha		                PHA             ; begin setdp macro
.195a03		08		php		                PHP
.195a04		c2 20		rep #$20	                REP #$20        ; set A long
.195a06		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195a09		5b		tcd		                TCD
.195a0a		28		plp		                PLP
.195a0b		68		pla		                PLA             ; end setdp macro
.195a0c		e2 20		sep #$20	                SEP #$20        ; set A short
.195a0e		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.195a12		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.195a14		f0 04		beq $195a1a	                BEQ check_wp                        ; Yes: check for write protect
.195a16		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.195a18		80 65		bra $195a7f	                BRA ret_error
.195a1a		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.195a1c		f0 04		beq $195a22	                BEQ led_on                          ; Yes: start the transaction
.195a1e		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.195a20		80 5d		bra $195a7f	                BRA ret_error
.195a22		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.195a26		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.195a28		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195a2c		c2 10		rep #$10	                REP #$10        ; set X long
.195a2e		a0 00 00	ldy #$0000	                LDY #0
.195a31		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.195a33		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.195a37		c8		iny		                INY                                 ; Advance to the next byte
.195a38		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.195a3b		d0 f4		bne $195a31	                BNE loop_wr                         ; No: keep writing
.195a3d		a9 00		lda #$00	                LDA #0
.195a3f		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.195a43		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.195a45		0a		asl a		                ASL A
.195a46		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.195a4a		a5 03		lda $0323	                LDA BIOS_LBA+1
.195a4c		2a		rol a		                ROL A
.195a4d		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.195a51		a5 04		lda $0324	                LDA BIOS_LBA+2
.195a53		2a		rol a		                ROL A
.195a54		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.195a58		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.195a5a		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.195a5e		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195a60		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195a64		22 e6 58 19	jsl $1958e6	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.195a68		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195a6c		d0 11		bne $195a7f	                BNE ret_error                       ; Is there one? Process the error
.195a6e		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.195a70		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195a74		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195a76		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195a7a		28		plp		                PLP
.195a7b		ab		plb		                PLB
.195a7c		2b		pld		                PLD
.195a7d		38		sec		                SEC
.195a7e		6b		rtl		                RTL
.195a7f		85 00		sta $0320	ret_error       STA BIOS_STATUS
.195a81		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195a85		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195a87		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195a8b		28		plp		                PLP
.195a8c		ab		plb		                PLB
.195a8d		2b		pld		                PLD
.195a8e		18		clc		                CLC
.195a8f		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.195a90						FDC_TEST
.195a90		8b		phb		                    PHB
.195a91		0b		phd		                    PHD
.195a92		08		php		                    PHP
.195a93		48		pha		                PHA             ; begin setdbr macro
.195a94		08		php		                PHP
.195a95		e2 20		sep #$20	                SEP #$20        ; set A short
.195a97		a9 00		lda #$00	                LDA #0
.195a99		48		pha		                PHA
.195a9a		ab		plb		                PLB
.195a9b		28		plp		                PLP
.195a9c		68		pla		                PLA             ; end setdbr macro
.195a9d		48		pha		                PHA             ; begin setdp macro
.195a9e		08		php		                PHP
.195a9f		c2 20		rep #$20	                REP #$20        ; set A long
.195aa1		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195aa4		5b		tcd		                TCD
.195aa5		28		plp		                PLP
.195aa6		68		pla		                PLA             ; end setdp macro
.195aa7		e2 20		sep #$20	                SEP #$20        ; set A short
.195aa9		a9 f0		lda #$f0	                    LDA #$F0
.195aab		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.195aae		22 a8 10 00	jsl $0010a8	                    JSL CLRSCREEN
.195ab2		22 a0 10 00	jsl $0010a0	                    JSL CSRHOME
.195ab6		c2 30		rep #$30	                REP #$30        ; set A&X long
.195ab8		22 86 5d 19	jsl $195d86	                    JSL FDC_Init
.195abc		b0 03		bcs $195ac1	                    BCS init_ok
.195abe		82 20 00	brl $195ae1	                    BRL motor_off
.195ac1		22 85 64 19	jsl $196485	init_ok             JSL FDC_CHK_MEDIA
.195ac5		90 03		bcc $195aca	                    BCC no_media
.195ac7		82 03 00	brl $195acd	                    BRL is_ok1
.195aca						no_media
.195aca		82 14 00	brl $195ae1	                    BRL motor_off
.195acd		22 18 63 19	jsl $196318	is_ok1              JSL FDC_MOUNT
.195ad1		90 03		bcc $195ad6	                    BCC mount_err
.195ad3		82 03 00	brl $195ad9	                    BRL is_ok2
.195ad6						mount_err
.195ad6		82 08 00	brl $195ae1	                    BRL motor_off
.195ad9		22 ed 5a 19	jsl $195aed	is_ok2              JSL FDC_TEST_PUTBLOCK
.195add		b0 02		bcs $195ae1	                    BCS all_ok
.195adf		80 00		bra $195ae1	                    BRA motor_off
.195ae1						all_ok
.195ae1		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.195ae5		22 36 5e 19	jsl $195e36	                    JSL FDC_Motor_Off
.195ae9		28		plp		                    PLP
.195aea		2b		pld		                    PLD
.195aeb		ab		plb		                    PLB
.195aec		6b		rtl		                    RTL
.195aed						FDC_TEST_PUTBLOCK
.195aed		e2 20		sep #$20	                SEP #$20        ; set A short
.195aef		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.195af1		a2 00 00	ldx #$0000	                    LDX #0
.195af4		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.195af8		1a		inc a		                    INC A
.195af9		e8		inx		                    INX
.195afa		e0 00 02	cpx #$0200	                    CPX #512
.195afd		d0 f5		bne $195af4	                    BNE init_loop
.195aff		c2 20		rep #$20	                REP #$20        ; set A long
.195b01		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.195b04		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.195b08		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.195b0b		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.195b0f		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.195b12		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.195b16		a9 00 00	lda #$0000	                    LDA #0
.195b19		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.195b1d		22 ac 62 19	jsl $1962ac	                    JSL FDC_PUTBLOCK                ; Try to write the data
.195b21		6b		rtl		                    RTL
>195b22		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>195b2a		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>195b3a		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.195b3e						FDC_Check_RQM
.195b3e		0b		phd		                    PHD
.195b3f		08		php		                    PHP
.195b40		48		pha		                PHA             ; begin setdp macro
.195b41		08		php		                PHP
.195b42		c2 20		rep #$20	                REP #$20        ; set A long
.195b44		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195b47		5b		tcd		                TCD
.195b48		28		plp		                PLP
.195b49		68		pla		                PLA             ; end setdp macro
.195b4a		e2 20		sep #$20	                SEP #$20        ; set A short
.195b4c		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195b4e		22 b7 3a 19	jsl $193ab7	                    JSL ISETTIMEOUT
.195b52		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195b54		30 12		bmi $195b68	                    BMI time_out            ; If so: signal a time out
.195b56		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195b5a		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.195b5c		f0 f4		beq $195b52	                    BEQ loop
.195b5e		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195b60		22 b7 3a 19	jsl $193ab7	                    JSL ISETTIMEOUT
.195b64		28		plp		                    PLP
.195b65		2b		pld		                    PLD
.195b66		38		sec		                    SEC
.195b67		60		rts		                    RTS
.195b68		28		plp		time_out            PLP
.195b69		2b		pld		                    PLD
.195b6a		18		clc		                    CLC
.195b6b		60		rts		                    RTS
.195b6c						FDC_Check_DRV0_BSY
.195b6c		0b		phd		                    PHD
.195b6d		08		php		                    PHP
.195b6e		48		pha		                PHA             ; begin setdp macro
.195b6f		08		php		                PHP
.195b70		c2 20		rep #$20	                REP #$20        ; set A long
.195b72		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195b75		5b		tcd		                TCD
.195b76		28		plp		                PLP
.195b77		68		pla		                PLA             ; end setdp macro
.195b78		e2 20		sep #$20	                SEP #$20        ; set A short
.195b7a		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195b7c		22 b7 3a 19	jsl $193ab7	                    JSL ISETTIMEOUT
.195b80		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195b82		30 12		bmi $195b96	                    BMI time_out            ; If so: signal a time out
.195b84		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195b88		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.195b8a		d0 f4		bne $195b80	                    BNE loop
.195b8c		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195b8e		22 b7 3a 19	jsl $193ab7	                    JSL ISETTIMEOUT
.195b92		28		plp		                    PLP
.195b93		2b		pld		                    PLD
.195b94		38		sec		                    SEC
.195b95		60		rts		                    RTS
.195b96		28		plp		time_out            PLP
.195b97		2b		pld		                    PLD
.195b98		18		clc		                    CLC
.195b99		60		rts		                    RTS
.195b9a						FDC_Check_CMD_BSY
.195b9a		0b		phd		                    PHD
.195b9b		08		php		                    PHP
.195b9c		48		pha		                PHA             ; begin setdp macro
.195b9d		08		php		                PHP
.195b9e		c2 20		rep #$20	                REP #$20        ; set A long
.195ba0		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195ba3		5b		tcd		                TCD
.195ba4		28		plp		                PLP
.195ba5		68		pla		                PLA             ; end setdp macro
.195ba6		e2 20		sep #$20	                SEP #$20        ; set A short
.195ba8		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195baa		22 b7 3a 19	jsl $193ab7	                    JSL ISETTIMEOUT
.195bae		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195bb0		30 12		bmi $195bc4	                    BMI time_out            ; If so: signal a time out
.195bb2		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195bb6		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.195bb8		d0 f4		bne $195bae	                    BNE loop
.195bba		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195bbc		22 b7 3a 19	jsl $193ab7	                    JSL ISETTIMEOUT
.195bc0		28		plp		                    PLP
.195bc1		2b		pld		                    PLD
.195bc2		38		sec		                    SEC
.195bc3		60		rts		                    RTS
.195bc4		28		plp		time_out            PLP
.195bc5		2b		pld		                    PLD
.195bc6		18		clc		                    CLC
.195bc7		60		rts		                    RTS
.195bc8						FDC_Can_Read_Data
.195bc8		0b		phd		                    PHD
.195bc9		08		php		                    PHP
.195bca		48		pha		                PHA             ; begin setdp macro
.195bcb		08		php		                PHP
.195bcc		c2 20		rep #$20	                REP #$20        ; set A long
.195bce		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195bd1		5b		tcd		                TCD
.195bd2		28		plp		                PLP
.195bd3		68		pla		                PLA             ; end setdp macro
.195bd4		e2 20		sep #$20	                SEP #$20        ; set A short
.195bd6		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195bd8		22 b7 3a 19	jsl $193ab7	                    JSL ISETTIMEOUT
.195bdc		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195bde		30 14		bmi $195bf4	                    BMI time_out            ; If so: signal a time out
.195be0		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195be4		29 40		and #$40	                    AND #FDC_MSR_DIO
.195be6		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.195be8		d0 f2		bne $195bdc	                    BNE loop
.195bea		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195bec		22 b7 3a 19	jsl $193ab7	                    JSL ISETTIMEOUT
.195bf0		28		plp		                    PLP
.195bf1		2b		pld		                    PLD
.195bf2		38		sec		                    SEC
.195bf3		60		rts		                    RTS
.195bf4		28		plp		time_out            PLP
.195bf5		2b		pld		                    PLD
.195bf6		18		clc		                    CLC
.195bf7		60		rts		                    RTS
.195bf8						FDC_CAN_WRITE
.195bf8		0b		phd		                    PHD
.195bf9		08		php		                    PHP
.195bfa		48		pha		                PHA             ; begin setdp macro
.195bfb		08		php		                PHP
.195bfc		c2 20		rep #$20	                REP #$20        ; set A long
.195bfe		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195c01		5b		tcd		                TCD
.195c02		28		plp		                PLP
.195c03		68		pla		                PLA             ; end setdp macro
.195c04		e2 20		sep #$20	                SEP #$20        ; set A short
.195c06		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195c08		22 b7 3a 19	jsl $193ab7	                    JSL ISETTIMEOUT
.195c0c		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195c0e		30 14		bmi $195c24	                    BMI time_out            ; If so: signal a time out
.195c10		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195c14		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195c16		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.195c18		d0 f2		bne $195c0c	                    BNE loop
.195c1a		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195c1c		22 b7 3a 19	jsl $193ab7	                    JSL ISETTIMEOUT
.195c20		28		plp		                    PLP
.195c21		2b		pld		                    PLD
.195c22		38		sec		                    SEC
.195c23		60		rts		                    RTS
.195c24		28		plp		time_out            PLP
.195c25		2b		pld		                    PLD
.195c26		18		clc		                    CLC
.195c27		60		rts		                    RTS
.195c28						FDC_DELAY_10MS
.195c28		da		phx		                    PHX
.195c29		08		php		                    PHP
.195c2a		c2 10		rep #$10	                REP #$10        ; set X long
.195c2c		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.195c2f		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.195c30		ca		dex		                    DEX
.195c31		e0 00 00	cpx #$0000	                    CPX #0
.195c34		d0 f9		bne $195c2f	                    BNE loop
.195c36		28		plp		                    PLP
.195c37		fa		plx		                    PLX
.195c38		6b		rtl		                    RTL
.195c39						FDC_COMMAND
.195c39		da		phx		                    PHX
.195c3a		8b		phb		                    PHB
.195c3b		0b		phd		                    PHD
.195c3c		08		php		                    PHP
.195c3d		48		pha		                PHA             ; begin setdbr macro
.195c3e		08		php		                PHP
.195c3f		e2 20		sep #$20	                SEP #$20        ; set A short
.195c41		a9 00		lda #$00	                LDA #0
.195c43		48		pha		                PHA
.195c44		ab		plb		                PLB
.195c45		28		plp		                PLP
.195c46		68		pla		                PLA             ; end setdbr macro
.195c47		48		pha		                PHA             ; begin setdp macro
.195c48		08		php		                PHP
.195c49		c2 20		rep #$20	                REP #$20        ; set A long
.195c4b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195c4e		5b		tcd		                TCD
.195c4f		28		plp		                PLP
.195c50		68		pla		                PLA             ; end setdp macro
.195c51		22 28 5c 19	jsl $195c28	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.195c55		e2 30		sep #$30	                SEP #$30        ; set A&X short
.195c57		a2 00		ldx #$00	                    LDX #0
.195c59		a9 00		lda #$00	                    LDA #0
.195c5b		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.195c5e		e8		inx		                    INX
.195c5f		e0 10		cpx #$10	                    CPX #16
.195c61		d0 f8		bne $195c5b	                    BNE clr_results
.195c63		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.195c67		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195c69		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.195c6b		f0 04		beq $195c71	                    BEQ start_send                          ; If so, start sending
.195c6d		22 86 5d 19	jsl $195d86	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.195c71						start_send
.195c71		e2 10		sep #$10	                SEP #$10        ; set X short
.195c73		a2 00		ldx #$00	                    LDX #0
.195c75		20 3e 5b	jsr $195b3e	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.195c78		b0 03		bcs $195c7d	                    BCS send_param
.195c7a		82 5e 00	brl $195cdb	                    BRL time_out                            ; If there was a timeout, flag the time out
.195c7d		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.195c80		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.195c84		22 28 5c 19	jsl $195c28	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.195c88		e8		inx		                    INX                                     ; Advance to the next byte
.195c89		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.195c8c		d0 e7		bne $195c75	                    BNE send_loop                           ; Keep sending until we've sent them all
.195c8e		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.195c91		d0 03		bne $195c96	                    BNE chk_data_dir
.195c93		82 80 00	brl $195d16	                    BRL result_phase                        ; If 0: we just want a result
.195c96		10 3c		bpl $195cd4	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.195c98						wr_data
.195c98		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.195c9a		30 03		bmi $195c9f	                    BMI wr_chk_rqm
.195c9c		82 3c 00	brl $195cdb	                    BRL time_out                            ; If not, raise an error
.195c9f		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.195ca3		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.195ca5		f0 f1		beq $195c98	                    BEQ wr_data_rdy
.195ca7		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.195ca9		d0 03		bne $195cae	                    BNE wr_data_phase                       ; If so: transfer the data
.195cab		82 68 00	brl $195d16	                    BRL result_phase                          ; If not: it's an error
.195cae						wr_data_phase
.195cae		c2 10		rep #$10	                REP #$10        ; set X long
.195cb0		a0 00 00	ldy #$0000	                    LDY #0
.195cb3		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.195cb5		30 03		bmi $195cba	                    BMI wr_chk_nondma
.195cb7		82 21 00	brl $195cdb	                    BRL time_out                            ; If not, raise an error
.195cba		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.195cbe		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.195cc0		f0 54		beq $195d16	                    BEQ result_phase                        ; If not: break out to result phase
.195cc2		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.195cc4		f0 ed		beq $195cb3	                    BEQ wr_data_loop                        ; No: keep waiting
.195cc6		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.195cc8		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.195ccc		c8		iny		                    INY                                     ; Move to the next position
.195ccd		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.195cd0		d0 e1		bne $195cb3	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.195cd2		80 42		bra $195d16	                    BRA result_phase                        ; ready for the result phase
.195cd4		20 c8 5b	jsr $195bc8	rd_data             JSR FDC_Can_Read_Data
.195cd7		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.195cd9		30 07		bmi $195ce2	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.195cdb						time_out
.195cdb		e2 20		sep #$20	                SEP #$20        ; set A short
.195cdd		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.195cdf		82 9c 00	brl $195d7e	                    BRL pass_error
.195ce2		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.195ce6		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195ce8		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.195cea		d0 eb		bne $195cd7	                    BNE rd_data_rdy
.195cec		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.195cf0		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.195cf2		d0 03		bne $195cf7	                    BNE rd_data_phase                       ; If so: transfer the data
.195cf4		82 83 00	brl $195d7a	                    BRL error                               ; If not: it's an error
.195cf7						rd_data_phase
.195cf7		c2 10		rep #$10	                REP #$10        ; set X long
.195cf9		a0 00 00	ldy #$0000	                    LDY #0
.195cfc		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.195cfe		10 db		bpl $195cdb	                    BPL time_out                            ; If not: throw a timeout error
.195d00		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.195d04		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195d06		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.195d08		d0 f2		bne $195cfc	                    BNE rd_data_loop
.195d0a		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.195d0e		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.195d10		c8		iny		                    INY                                     ; Move to the next position
.195d11		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.195d14		d0 e6		bne $195cfc	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.195d16		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.195d19		f0 34		beq $195d4f	                    BEQ chk_busy                            ; Then we're done
.195d1b		e2 10		sep #$10	                SEP #$10        ; set X short
.195d1d		a2 00		ldx #$00	                    LDX #0
.195d1f		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.195d21		22 b7 3a 19	jsl $193ab7	                    JSL ISETTIMEOUT
.195d25		20 c8 5b	jsr $195bc8	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.195d28		90 b1		bcc $195cdb	                    BCC time_out                            ; If there was a time out, raise an error
.195d2a		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.195d2e		20 c8 5b	jsr $195bc8	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.195d31		90 a8		bcc $195cdb	                    BCC time_out                            ; If there was a time out, raise an error
.195d33		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.195d37		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.195d3a		20 3e 5b	jsr $195b3e	                    JSR FDC_Check_RQM
.195d3d		90 9c		bcc $195cdb	                    BCC time_out                            ; If there was a time out, flag the error
.195d3f		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.195d43		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.195d45		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.195d47		d0 06		bne $195d4f	                    BNE chk_busy
.195d49		e8		inx		                    INX                                     ; Move to the next result positions
.195d4a		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.195d4d		d0 e4		bne $195d33	                    BNE read_result                         ; And keep looping until we've read all
.195d4f						chk_busy
.195d4f		c2 10		rep #$10	                REP #$10        ; set X long
.195d51		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.195d54		22 cd 0f 19	jsl $190fcd	                    JSL ILOOP_MS
.195d58		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.195d5c		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.195d5e		f0 12		beq $195d72	                    BEQ done                                ; If not set: we're done
.195d60		20 c8 5b	jsr $195bc8	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.195d63		b0 03		bcs $195d68	                    BCS get_result_byte
.195d65		82 73 ff	brl $195cdb	                    BRL time_out                            ; If there was a time out, flag the error
.195d68		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.195d6c		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.195d6f		e8		inx		                    INX
.195d70		80 dd		bra $195d4f	                    BRA chk_busy                            ; And keep checking
.195d72						done
.195d72		64 20		stz $0320	                    STZ BIOS_STATUS
.195d74		28		plp		                    PLP
.195d75		2b		pld		                    PLD
.195d76		ab		plb		                    PLB
.195d77		fa		plx		                    PLX
.195d78		38		sec		                    SEC
.195d79		6b		rtl		                    RTL
.195d7a						error
.195d7a		e2 20		sep #$20	                SEP #$20        ; set A short
.195d7c		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.195d7e		85 20		sta $0320	pass_error          STA BIOS_STATUS
.195d80		28		plp		                    PLP
.195d81		2b		pld		                    PLD
.195d82		ab		plb		                    PLB
.195d83		fa		plx		                    PLX
.195d84		18		clc		                    CLC
.195d85		6b		rtl		                    RTL
.195d86						FDC_Init
.195d86		08		php		                    PHP
.195d87		c2 10		rep #$10	                REP #$10        ; set X long
.195d89		e2 20		sep #$20	                SEP #$20        ; set A short
.195d8b		a9 00		lda #$00	                    LDA #0
.195d8d		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.195d91		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.195d94		a0 00 00	ldy #$0000	                    LDY #0
.195d97		22 da 0f 19	jsl $190fda	                    JSL IDELAY
.195d9b		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.195d9d		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.195da1		ea		nop		                    NOP
.195da2		ea		nop		                    NOP
.195da3		ea		nop		                    NOP
.195da4		ea		nop		                    NOP
.195da5		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.195da7		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.195dab		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.195dad		8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.195db1		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.195db4		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.195db7		22 da 0f 19	jsl $190fda	                    JSL IDELAY
.195dbb		22 96 5e 19	jsl $195e96	                    JSL FDC_Sense_Int_Status
.195dbf		90 25		bcc $195de6	                    BCC pass_failure
.195dc1		22 96 5e 19	jsl $195e96	                    JSL FDC_Sense_Int_Status
.195dc5		90 1f		bcc $195de6	                    BCC pass_failure
.195dc7		22 96 5e 19	jsl $195e96	                    JSL FDC_Sense_Int_Status
.195dcb		90 19		bcc $195de6	                    BCC pass_failure
.195dcd		22 96 5e 19	jsl $195e96	                    JSL FDC_Sense_Int_Status
.195dd1		90 13		bcc $195de6	                    BCC pass_failure
.195dd3		22 58 5f 19	jsl $195f58	                    JSL FDC_Configure_Command
.195dd7		90 0d		bcc $195de6	                    BCC pass_failure
.195dd9		22 ff 5e 19	jsl $195eff	                    JSL FDC_Specify_Command
.195ddd		90 07		bcc $195de6	                    BCC pass_failure
.195ddf		22 02 5e 19	jsl $195e02	                    JSL FDC_Motor_On
.195de3		28		plp		                    PLP
.195de4		38		sec		                    SEC
.195de5		6b		rtl		                    RTL
.195de6		28		plp		pass_failure        PLP
.195de7		18		clc		                    CLC
.195de8		6b		rtl		                    RTL
.195de9						FDC_MOTOR_NEEDED
.195de9		08		php		                    PHP
.195dea		c2 20		rep #$20	                REP #$20        ; set A long
.195dec		78		sei		                    SEI                         ; Turn off interrupts
.195ded		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.195df0		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.195df4		e2 20		sep #$20	                SEP #$20        ; set A short
.195df6		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.195dfa		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.195dfc		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.195e00		28		plp		                    PLP
.195e01		6b		rtl		                    RTL
.195e02						FDC_Motor_On
.195e02		08		php		                    PHP
.195e03		22 e9 5d 19	jsl $195de9	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.195e07		e2 20		sep #$20	                SEP #$20        ; set A short
.195e09		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.195e0d		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.195e0f		d0 1f		bne $195e30	                    BNE done                    ; If so: skip
.195e11		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.195e13		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.195e17		20 3e 5b	jsr $195b3e	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.195e1a		90 17		bcc $195e33	                    BCC time_out
.195e1c		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.195e1f		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.195e22		22 da 0f 19	jsl $190fda	                    JSL IDELAY
.195e26		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.195e2a		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.195e2c		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.195e30		28		plp		done                PLP
.195e31		38		sec		                    SEC
.195e32		6b		rtl		                    RTL
.195e33		28		plp		time_out            PLP                         ; Return a timeout error
.195e34		18		clc		                    CLC
.195e35		6b		rtl		                    RTL
.195e36						FDC_Motor_Off
.195e36		08		php		                    PHP
.195e37		e2 20		sep #$20	                SEP #$20        ; set A short
.195e39		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.195e3b		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.195e3f		c2 20		rep #$20	                REP #$20        ; set A long
.195e41		78		sei		                    SEI                         ; Turn off interrupts
.195e42		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.195e45		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.195e49		e2 20		sep #$20	                SEP #$20        ; set A short
.195e4b		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.195e4f		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.195e51		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.195e55		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.195e59		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.195e5b		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.195e5f		28		plp		                    PLP
.195e60		6b		rtl		                    RTL
.195e61						FDC_Recalibrate_Command
.195e61		0b		phd		                    PHD
.195e62		08		php		                    PHP
.195e63		48		pha		                PHA             ; begin setdp macro
.195e64		08		php		                PHP
.195e65		c2 20		rep #$20	                REP #$20        ; set A long
.195e67		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195e6a		5b		tcd		                TCD
.195e6b		28		plp		                PLP
.195e6c		68		pla		                PLA             ; end setdp macro
.195e6d		22 e9 5d 19	jsl $195de9	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.195e71		e2 20		sep #$20	                SEP #$20        ; set A short
.195e73		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.195e75		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195e78		a5 00		lda $0300	                    LDA FDC_DRIVE
.195e7a		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.195e7d		a9 02		lda #$02	                    LDA #2
.195e7f		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.195e82		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.195e85		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.195e88		22 39 5c 19	jsl $195c39	                    JSL FDC_COMMAND             ; Issue the command
.195e8c		90 04		bcc $195e92	                    BCC pass_failure            ; If failure, pass the failure up
.195e8e		28		plp		                    PLP
.195e8f		2b		pld		                    PLD
.195e90		38		sec		                    SEC
.195e91		6b		rtl		                    RTL
.195e92		28		plp		pass_failure        PLP
.195e93		2b		pld		                    PLD
.195e94		18		clc		                    CLC
.195e95		6b		rtl		                    RTL
.195e96						FDC_Sense_Int_Status
.195e96		8b		phb		                    PHB
.195e97		0b		phd		                    PHD
.195e98		08		php		                    PHP
.195e99		48		pha		                PHA             ; begin setdbr macro
.195e9a		08		php		                PHP
.195e9b		e2 20		sep #$20	                SEP #$20        ; set A short
.195e9d		a9 00		lda #$00	                LDA #0
.195e9f		48		pha		                PHA
.195ea0		ab		plb		                PLB
.195ea1		28		plp		                PLP
.195ea2		68		pla		                PLA             ; end setdbr macro
.195ea3		48		pha		                PHA             ; begin setdp macro
.195ea4		08		php		                PHP
.195ea5		c2 20		rep #$20	                REP #$20        ; set A long
.195ea7		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195eaa		5b		tcd		                TCD
.195eab		28		plp		                PLP
.195eac		68		pla		                PLA             ; end setdp macro
.195ead		c2 30		rep #$30	                REP #$30        ; set A&X long
.195eaf		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.195eb2		22 cd 0f 19	jsl $190fcd	                    JSL ILOOP_MS
.195eb6		e2 20		sep #$20	                SEP #$20        ; set A short
.195eb8		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.195eba		a9 ff		lda #$ff	                    LDA #$FF
.195ebc		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.195ebe		20 9a 5b	jsr $195b9a	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.195ec1		90 30		bcc $195ef3	                    BCC time_out                        ; If there was a time out, raise an error
.195ec3		20 3e 5b	jsr $195b3e	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195ec6		90 2b		bcc $195ef3	                    BCC time_out                        ; If there was a time out, raise an error
.195ec8		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.195eca		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195ece		20 c8 5b	jsr $195bc8	                    JSR FDC_Can_Read_Data
.195ed1		90 20		bcc $195ef3	                    BCC time_out                        ; If there was a time out, raise an error
.195ed3		20 3e 5b	jsr $195b3e	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195ed6		90 1b		bcc $195ef3	                    BCC time_out                        ; If there was a time out, raise an error
.195ed8		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.195edc		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.195ede		20 3e 5b	jsr $195b3e	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195ee1		90 10		bcc $195ef3	                    BCC time_out                        ; If there was a time out, raise an error
.195ee3		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.195ee7		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.195ee9		e2 20		sep #$20	                SEP #$20        ; set A short
.195eeb		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.195eee		28		plp		                    PLP
.195eef		2b		pld		                    PLD
.195ef0		ab		plb		                    PLB
.195ef1		38		sec		                    SEC
.195ef2		6b		rtl		                    RTL
.195ef3						time_out
.195ef3		e2 20		sep #$20	                SEP #$20        ; set A short
.195ef5		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.195ef7		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195efa		28		plp		                    PLP
.195efb		2b		pld		                    PLD
.195efc		ab		plb		                    PLB
.195efd		18		clc		                    CLC
.195efe		6b		rtl		                    RTL
.195eff						FDC_Specify_Command
.195eff		8b		phb		                    PHB
.195f00		0b		phd		                    PHD
.195f01		08		php		                    PHP
.195f02		48		pha		                PHA             ; begin setdbr macro
.195f03		08		php		                PHP
.195f04		e2 20		sep #$20	                SEP #$20        ; set A short
.195f06		a9 00		lda #$00	                LDA #0
.195f08		48		pha		                PHA
.195f09		ab		plb		                PLB
.195f0a		28		plp		                PLP
.195f0b		68		pla		                PLA             ; end setdbr macro
.195f0c		48		pha		                PHA             ; begin setdp macro
.195f0d		08		php		                PHP
.195f0e		c2 20		rep #$20	                REP #$20        ; set A long
.195f10		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195f13		5b		tcd		                TCD
.195f14		28		plp		                PLP
.195f15		68		pla		                PLA             ; end setdp macro
.195f16		c2 30		rep #$30	                REP #$30        ; set A&X long
.195f18		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.195f1b		22 cd 0f 19	jsl $190fcd	                    JSL ILOOP_MS
.195f1f		e2 20		sep #$20	                SEP #$20        ; set A short
.195f21		20 9a 5b	jsr $195b9a	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195f24		90 26		bcc $195f4c	                    BCC time_out            ; If there was a time out, raise an error
.195f26		20 3e 5b	jsr $195b3e	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f29		90 21		bcc $195f4c	                    BCC time_out            ; If there was a time out, raise an error
.195f2b		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.195f2d		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f31		20 3e 5b	jsr $195b3e	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f34		90 16		bcc $195f4c	                    BCC time_out            ; If there was a time out, raise an error
.195f36		a9 cf		lda #$cf	                    LDA #$CF
.195f38		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f3c		20 3e 5b	jsr $195b3e	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f3f		90 0b		bcc $195f4c	                    BCC time_out            ; If there was a time out, raise an error
.195f41		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.195f43		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f47		28		plp		                    PLP
.195f48		2b		pld		                    PLD
.195f49		ab		plb		                    PLB
.195f4a		38		sec		                    SEC
.195f4b		6b		rtl		                    RTL
.195f4c						time_out
.195f4c		e2 20		sep #$20	                SEP #$20        ; set A short
.195f4e		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.195f50		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195f53		28		plp		                    PLP
.195f54		2b		pld		                    PLD
.195f55		ab		plb		                    PLB
.195f56		18		clc		                    CLC
.195f57		6b		rtl		                    RTL
.195f58						FDC_Configure_Command
.195f58		8b		phb		                    PHB
.195f59		0b		phd		                    PHD
.195f5a		08		php		                    PHP
.195f5b		48		pha		                PHA             ; begin setdbr macro
.195f5c		08		php		                PHP
.195f5d		e2 20		sep #$20	                SEP #$20        ; set A short
.195f5f		a9 00		lda #$00	                LDA #0
.195f61		48		pha		                PHA
.195f62		ab		plb		                PLB
.195f63		28		plp		                PLP
.195f64		68		pla		                PLA             ; end setdbr macro
.195f65		48		pha		                PHA             ; begin setdp macro
.195f66		08		php		                PHP
.195f67		c2 20		rep #$20	                REP #$20        ; set A long
.195f69		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195f6c		5b		tcd		                TCD
.195f6d		28		plp		                PLP
.195f6e		68		pla		                PLA             ; end setdp macro
.195f6f		c2 30		rep #$30	                REP #$30        ; set A&X long
.195f71		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.195f74		22 cd 0f 19	jsl $190fcd	                    JSL ILOOP_MS
.195f78		e2 20		sep #$20	                SEP #$20        ; set A short
.195f7a		20 9a 5b	jsr $195b9a	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195f7d		90 36		bcc $195fb5	                    BCC time_out            ; If there was a time out, raise an error
.195f7f		20 3e 5b	jsr $195b3e	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f82		90 31		bcc $195fb5	                    BCC time_out            ; If there was a time out, raise an error
.195f84		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.195f86		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f8a		20 3e 5b	jsr $195b3e	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f8d		90 26		bcc $195fb5	                    BCC time_out            ; If there was a time out, raise an error
.195f8f		a9 00		lda #$00	                    LDA #$00
.195f91		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f95		20 3e 5b	jsr $195b3e	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f98		90 1b		bcc $195fb5	                    BCC time_out            ; If there was a time out, raise an error
.195f9a		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.195f9c		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195fa0		20 3e 5b	jsr $195b3e	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195fa3		90 10		bcc $195fb5	                    BCC time_out            ; If there was a time out, raise an error
.195fa5		a9 00		lda #$00	                    LDA #$00
.195fa7		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195fab		20 9a 5b	jsr $195b9a	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195fae		90 05		bcc $195fb5	                    BCC time_out            ; If there was a time out, raise an error
.195fb0		28		plp		                    PLP
.195fb1		2b		pld		                    PLD
.195fb2		ab		plb		                    PLB
.195fb3		38		sec		                    SEC
.195fb4		6b		rtl		                    RTL
.195fb5						time_out
.195fb5		e2 20		sep #$20	                SEP #$20        ; set A short
.195fb7		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.195fb9		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195fbc		28		plp		                    PLP
.195fbd		2b		pld		                    PLD
.195fbe		ab		plb		                    PLB
.195fbf		18		clc		                    CLC
.195fc0		6b		rtl		                    RTL
.195fc1						FDC_Read_ID_Command
.195fc1		8b		phb		                    PHB
.195fc2		0b		phd		                    PHD
.195fc3		08		php		                    PHP
.195fc4		48		pha		                PHA             ; begin setdbr macro
.195fc5		08		php		                PHP
.195fc6		e2 20		sep #$20	                SEP #$20        ; set A short
.195fc8		a9 00		lda #$00	                LDA #0
.195fca		48		pha		                PHA
.195fcb		ab		plb		                PLB
.195fcc		28		plp		                PLP
.195fcd		68		pla		                PLA             ; end setdbr macro
.195fce		48		pha		                PHA             ; begin setdp macro
.195fcf		08		php		                PHP
.195fd0		c2 20		rep #$20	                REP #$20        ; set A long
.195fd2		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195fd5		5b		tcd		                TCD
.195fd6		28		plp		                PLP
.195fd7		68		pla		                PLA             ; end setdp macro
.195fd8		e2 20		sep #$20	                SEP #$20        ; set A short
.195fda		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.195fdc		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195fdf		a9 01		lda #$01	                    LDA #1
.195fe1		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.195fe4		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.195fe7		a9 07		lda #$07	                    LDA #7
.195fe9		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.195fec		22 39 5c 19	jsl $195c39	                    JSL FDC_COMMAND                     ; Issue the command
.195ff0		90 27		bcc $196019	                    BCC pass_failure
.195ff2		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.195ff5		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.195ff7		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.195ffa		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.195ffc		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.195fff		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.196001		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.196004		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.196006		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.196009		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.19600b		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.19600e		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.196010		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.196013		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.196015		28		plp		                    PLP
.196016		2b		pld		                    PLD
.196017		ab		plb		                    PLB
.196018		6b		rtl		                    RTL
.196019		28		plp		pass_failure        PLP
.19601a		2b		pld		                    PLD
.19601b		ab		plb		                    PLB
.19601c		18		clc		                    CLC
.19601d		6b		rtl		                    RTL
.19601e						FDC_DumpReg_Command
.19601e		0b		phd		                    PHD
.19601f		08		php		                    PHP
.196020		e2 20		sep #$20	                SEP #$20        ; set A short
.196022		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.196024		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.196027		a9 01		lda #$01	                    LDA #1
.196029		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.19602c		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.19602f		a9 0a		lda #$0a	                    LDA #10
.196031		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.196034		22 39 5c 19	jsl $195c39	                    JSL FDC_COMMAND                     ; Issue the command
.196038		90 03		bcc $19603d	                    BCC pass_failure
.19603a		28		plp		                    PLP
.19603b		2b		pld		                    PLD
.19603c		6b		rtl		                    RTL
.19603d		28		plp		pass_failure        PLP
.19603e		2b		pld		                    PLD
.19603f		18		clc		                    CLC
.196040		6b		rtl		                    RTL
.196041						FDC_Seek_Track
.196041		8b		phb		                    PHB
.196042		0b		phd		                    PHD
.196043		08		php		                    PHP
.196044		48		pha		                PHA             ; begin setdbr macro
.196045		08		php		                PHP
.196046		e2 20		sep #$20	                SEP #$20        ; set A short
.196048		a9 00		lda #$00	                LDA #0
.19604a		48		pha		                PHA
.19604b		ab		plb		                PLB
.19604c		28		plp		                PLP
.19604d		68		pla		                PLA             ; end setdbr macro
.19604e		48		pha		                PHA             ; begin setdp macro
.19604f		08		php		                PHP
.196050		c2 20		rep #$20	                REP #$20        ; set A long
.196052		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196055		5b		tcd		                TCD
.196056		28		plp		                PLP
.196057		68		pla		                PLA             ; end setdp macro
.196058		22 e9 5d 19	jsl $195de9	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.19605c		e2 20		sep #$20	                SEP #$20        ; set A short
.19605e		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.196060		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.196063		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.196065		29 01		and #$01	                    AND #$01
.196067		0a		asl a		                    ASL A
.196068		0a		asl a		                    ASL A
.196069		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.19606b		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.19606e		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.196070		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.196073		a9 03		lda #$03	                    LDA #3
.196075		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.196078		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.19607b		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.19607e		22 39 5c 19	jsl $195c39	                    JSL FDC_COMMAND                     ; Issue the command
.196082		90 05		bcc $196089	                    BCC pass_failure
.196084		28		plp		                    PLP
.196085		2b		pld		                    PLD
.196086		ab		plb		                    PLB
.196087		38		sec		                    SEC
.196088		6b		rtl		                    RTL
.196089		28		plp		pass_failure        PLP
.19608a		2b		pld		                    PLD
.19608b		ab		plb		                    PLB
.19608c		18		clc		                    CLC
.19608d		6b		rtl		                    RTL
.19608e						FDC_Read_Sector
.19608e		8b		phb		                    PHB
.19608f		0b		phd		                    PHD
.196090		08		php		                    PHP
.196091		48		pha		                PHA             ; begin setdbr macro
.196092		08		php		                PHP
.196093		e2 20		sep #$20	                SEP #$20        ; set A short
.196095		a9 00		lda #$00	                LDA #0
.196097		48		pha		                PHA
.196098		ab		plb		                PLB
.196099		28		plp		                PLP
.19609a		68		pla		                PLA             ; end setdbr macro
.19609b		48		pha		                PHA             ; begin setdp macro
.19609c		08		php		                PHP
.19609d		c2 20		rep #$20	                REP #$20        ; set A long
.19609f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1960a2		5b		tcd		                TCD
.1960a3		28		plp		                PLP
.1960a4		68		pla		                PLA             ; end setdp macro
.1960a5		22 e9 5d 19	jsl $195de9	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.1960a9		e2 20		sep #$20	                SEP #$20        ; set A short
.1960ab		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.1960ad		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.1960af		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.1960b2		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.1960b4		29 01		and #$01	                    AND #$01
.1960b6		0a		asl a		                    ASL A
.1960b7		0a		asl a		                    ASL A
.1960b8		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.1960ba		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.1960bd		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.1960bf		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.1960c2		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.1960c4		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.1960c7		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.1960c9		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.1960cc		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.1960ce		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.1960d1		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.1960d3		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.1960d6		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.1960d8		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.1960db		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.1960dd		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.1960e0		a9 09		lda #$09	                    LDA #9
.1960e2		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.1960e5		a9 01		lda #$01	                    LDA #1
.1960e7		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.1960ea		a9 07		lda #$07	                    LDA #7
.1960ec		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.1960ef		22 39 5c 19	jsl $195c39	command             JSL FDC_COMMAND                     ; Issue the command
.1960f3		08		php		                    PHP
.1960f4		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.1960f7		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.1960f9		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.1960fc		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.1960fe		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.196101		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.196103		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.196106		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.196108		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.19610b		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.19610d		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.196110		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.196112		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.196115		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.196117		28		plp		                    PLP
.196118		90 04		bcc $19611e	                    BCC pass_failure
.19611a		28		plp		done                PLP
.19611b		2b		pld		                    PLD
.19611c		ab		plb		                    PLB
.19611d		6b		rtl		                    RTL
.19611e		28		plp		pass_failure        PLP
.19611f		2b		pld		                    PLD
.196120		ab		plb		                    PLB
.196121		18		clc		                    CLC
.196122		6b		rtl		                    RTL
.196123						FDC_Write_Sector
.196123		8b		phb		                    PHB
.196124		0b		phd		                    PHD
.196125		08		php		                    PHP
.196126		48		pha		                PHA             ; begin setdbr macro
.196127		08		php		                PHP
.196128		e2 20		sep #$20	                SEP #$20        ; set A short
.19612a		a9 00		lda #$00	                LDA #0
.19612c		48		pha		                PHA
.19612d		ab		plb		                PLB
.19612e		28		plp		                PLP
.19612f		68		pla		                PLA             ; end setdbr macro
.196130		48		pha		                PHA             ; begin setdp macro
.196131		08		php		                PHP
.196132		c2 20		rep #$20	                REP #$20        ; set A long
.196134		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196137		5b		tcd		                TCD
.196138		28		plp		                PLP
.196139		68		pla		                PLA             ; end setdp macro
.19613a		e2 20		sep #$20	                SEP #$20        ; set A short
.19613c		22 e9 5d 19	jsl $195de9	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.196140		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.196142		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.196144		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.196147		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.196149		29 01		and #$01	                    AND #$01
.19614b		0a		asl a		                    ASL A
.19614c		0a		asl a		                    ASL A
.19614d		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.19614f		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.196152		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.196154		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.196157		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.196159		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.19615c		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.19615e		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.196161		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.196163		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.196166		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.196168		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.19616b		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.19616d		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.196170		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.196172		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.196175		a9 09		lda #$09	                    LDA #9
.196177		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.19617a		a9 ff		lda #$ff	                    LDA #$FF
.19617c		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.19617f		a9 07		lda #$07	                    LDA #7
.196181		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.196184		22 39 5c 19	jsl $195c39	command             JSL FDC_COMMAND                     ; Issue the command
.196188		08		php		                    PHP
.196189		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.19618c		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.19618e		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.196191		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.196193		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.196196		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.196198		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.19619b		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.19619d		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.1961a0		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.1961a2		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.1961a5		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.1961a7		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.1961aa		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.1961ac		28		plp		check_status        PLP
.1961ad		90 04		bcc $1961b3	                    BCC pass_failure
.1961af		28		plp		done                PLP
.1961b0		2b		pld		                    PLD
.1961b1		ab		plb		                    PLB
.1961b2		6b		rtl		                    RTL
.1961b3		28		plp		pass_failure        PLP
.1961b4		2b		pld		                    PLD
.1961b5		ab		plb		                    PLB
.1961b6		18		clc		                    CLC
.1961b7		6b		rtl		                    RTL
.1961b8						DIVIDE32
.1961b8		da		phx		                    PHX
.1961b9		5a		phy		                    PHY
.1961ba		0b		phd		                    PHD
.1961bb		08		php		                    PHP
.1961bc		48		pha		                PHA             ; begin setdp macro
.1961bd		08		php		                PHP
.1961be		c2 20		rep #$20	                REP #$20        ; set A long
.1961c0		a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.1961c3		5b		tcd		                TCD
.1961c4		28		plp		                PLP
.1961c5		68		pla		                PLA             ; end setdp macro
.1961c6		c2 30		rep #$30	                REP #$30        ; set A&X long
.1961c8		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.1961ca		64 0a		stz $0316	                    STZ REMAINDER+2
.1961cc		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.1961cf		06 00		asl $030c	loop                ASL DIVIDEND
.1961d1		26 02		rol $030e	                    ROL DIVIDEND+2
.1961d3		26 08		rol $0314	                    ROL REMAINDER
.1961d5		26 0a		rol $0316	                    ROL REMAINDER+2
.1961d7		a5 08		lda $0314	                    LDA REMAINDER
.1961d9		38		sec		                    SEC
.1961da		e5 04		sbc $0310	                    SBC DIVISOR
.1961dc		a8		tay		                    TAY
.1961dd		a5 0a		lda $0316	                    LDA REMAINDER+2
.1961df		e5 06		sbc $0312	                    SBC DIVISOR+2
.1961e1		90 06		bcc $1961e9	                    BCC skip
.1961e3		85 0a		sta $0316	                    STA REMAINDER+2
.1961e5		84 08		sty $0314	                    STY REMAINDER
.1961e7		e6 00		inc $030c	                    INC DIVIDEND
.1961e9		ca		dex		skip                DEX
.1961ea		d0 e3		bne $1961cf	                    BNE loop
.1961ec		28		plp		                    PLP
.1961ed		2b		pld		                    PLD
.1961ee		7a		ply		                    PLY
.1961ef		fa		plx		                    PLX
.1961f0		60		rts		                    RTS
.1961f1						LBA2CHS
.1961f1		8b		phb		                    PHB
.1961f2		0b		phd		                    PHD
.1961f3		08		php		                    PHP
.1961f4		48		pha		                PHA             ; begin setdbr macro
.1961f5		08		php		                PHP
.1961f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1961f8		a9 00		lda #$00	                LDA #0
.1961fa		48		pha		                PHA
.1961fb		ab		plb		                PLB
.1961fc		28		plp		                PLP
.1961fd		68		pla		                PLA             ; end setdbr macro
.1961fe		48		pha		                PHA             ; begin setdp macro
.1961ff		08		php		                PHP
.196200		c2 20		rep #$20	                REP #$20        ; set A long
.196202		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196205		5b		tcd		                TCD
.196206		28		plp		                PLP
.196207		68		pla		                PLA             ; end setdp macro
.196208		c2 30		rep #$30	                REP #$30        ; set A&X long
.19620a		a5 22		lda $0322	                    LDA BIOS_LBA
.19620c		85 0c		sta $030c	                    STA DIVIDEND
.19620e		a5 24		lda $0324	                    LDA BIOS_LBA+2
.196210		85 0e		sta $030e	                    STA DIVIDEND+2
.196212		a9 24 00	lda #$0024	                    LDA #36
.196215		85 10		sta $0310	                    STA DIVISOR
.196217		64 12		stz $0312	                    STZ DIVISOR+2
.196219		20 b8 61	jsr $1961b8	                    JSR DIVIDE32
.19621c		e2 20		sep #$20	                SEP #$20        ; set A short
.19621e		a5 0c		lda $030c	                    LDA DIVIDEND
.196220		85 02		sta $0302	                    STA FDC_CYLINDER
.196222		c2 20		rep #$20	                REP #$20        ; set A long
.196224		a5 14		lda $0314	                    LDA REMAINDER
.196226		85 0c		sta $030c	                    STA DIVIDEND
.196228		a5 16		lda $0316	                    LDA REMAINDER+2
.19622a		85 0e		sta $030e	                    STA DIVIDEND+2
.19622c		a9 12 00	lda #$0012	                    LDA #18
.19622f		85 10		sta $0310	                    STA DIVISOR
.196231		64 12		stz $0312	                    STZ DIVISOR+2
.196233		20 b8 61	jsr $1961b8	                    JSR DIVIDE32
.196236		e2 20		sep #$20	                SEP #$20        ; set A short
.196238		a5 0c		lda $030c	                    LDA DIVIDEND
.19623a		29 01		and #$01	                    AND #$01
.19623c		85 01		sta $0301	                    STA FDC_HEAD
.19623e		a5 14		lda $0314	                    LDA REMAINDER
.196240		1a		inc a		                    INC A
.196241		85 03		sta $0303	                    STA FDC_SECTOR
.196243		28		plp		                    PLP
.196244		2b		pld		                    PLD
.196245		ab		plb		                    PLB
.196246		6b		rtl		                    RTL
.196247						FDC_GETBLOCK
.196247		8b		phb		                    PHB
.196248		0b		phd		                    PHD
.196249		08		php		                    PHP
.19624a		48		pha		                PHA             ; begin setdbr macro
.19624b		08		php		                PHP
.19624c		e2 20		sep #$20	                SEP #$20        ; set A short
.19624e		a9 00		lda #$00	                LDA #0
.196250		48		pha		                PHA
.196251		ab		plb		                PLB
.196252		28		plp		                PLP
.196253		68		pla		                PLA             ; end setdbr macro
.196254		48		pha		                PHA             ; begin setdp macro
.196255		08		php		                PHP
.196256		c2 20		rep #$20	                REP #$20        ; set A long
.196258		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19625b		5b		tcd		                TCD
.19625c		28		plp		                PLP
.19625d		68		pla		                PLA             ; end setdp macro
.19625e		e2 20		sep #$20	                SEP #$20        ; set A short
.196260		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.196262		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.196265		c2 30		rep #$30	                REP #$30        ; set A&X long
.196267		22 f1 61 19	jsl $1961f1	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.19626b		e2 20		sep #$20	                SEP #$20        ; set A short
.19626d		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.19626f		f0 29		beq $19629a	                    BEQ read_failure
.196271						try_read
.196271		c2 20		rep #$20	                REP #$20        ; set A long
.196273		22 8e 60 19	jsl $19608e	                    JSL FDC_Read_Sector         ; Read the sector
.196277		90 14		bcc $19628d	                    BCC retry
.196279		e2 20		sep #$20	                SEP #$20        ; set A short
.19627b		a5 06		lda $0306	                    LDA FDC_ST0
.19627d		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.19627f		d0 19		bne $19629a	                    BNE read_failure
.196281						ret_success
.196281		e2 20		sep #$20	                SEP #$20        ; set A short
.196283		a9 00		lda #$00	                    LDA #0
.196285		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.196288		28		plp		                    PLP
.196289		2b		pld		                    PLD
.19628a		ab		plb		                    PLB
.19628b		38		sec		                    SEC
.19628c		6b		rtl		                    RTL
.19628d						retry
.19628d		e2 20		sep #$20	                SEP #$20        ; set A short
.19628f		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.196292		30 13		bmi $1962a7	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.196294		22 86 5d 19	jsl $195d86	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.196298		80 d7		bra $196271	                    BRA try_read                ; And try the read again
.19629a						read_failure
.19629a		e2 20		sep #$20	                SEP #$20        ; set A short
.19629c		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.19629e		80 04		bra $1962a4	                    BRA ret_failure
.1962a0						seek_failure
.1962a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1962a2		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.1962a4		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.1962a7		28		plp		pass_failure        PLP
.1962a8		2b		pld		                    PLD
.1962a9		ab		plb		                    PLB
.1962aa		18		clc		                    CLC
.1962ab		6b		rtl		                    RTL
.1962ac						FDC_PUTBLOCK
.1962ac		8b		phb		                    PHB
.1962ad		0b		phd		                    PHD
.1962ae		08		php		                    PHP
.1962af		48		pha		                PHA             ; begin setdbr macro
.1962b0		08		php		                PHP
.1962b1		e2 20		sep #$20	                SEP #$20        ; set A short
.1962b3		a9 00		lda #$00	                LDA #0
.1962b5		48		pha		                PHA
.1962b6		ab		plb		                PLB
.1962b7		28		plp		                PLP
.1962b8		68		pla		                PLA             ; end setdbr macro
.1962b9		48		pha		                PHA             ; begin setdp macro
.1962ba		08		php		                PHP
.1962bb		c2 20		rep #$20	                REP #$20        ; set A long
.1962bd		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1962c0		5b		tcd		                TCD
.1962c1		28		plp		                PLP
.1962c2		68		pla		                PLA             ; end setdp macro
.1962c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1962c5		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.1962c7		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.1962ca		c2 30		rep #$30	                REP #$30        ; set A&X long
.1962cc		22 f1 61 19	jsl $1961f1	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.1962d0		22 23 61 19	jsl $196123	retry               JSL FDC_Write_Sector        ; Write the sector
.1962d4		b0 03		bcs $1962d9	                    BCS chk_st0
.1962d6		82 28 00	brl $196301	                    BRL attempt_retry
.1962d9						chk_st0
.1962d9		e2 20		sep #$20	                SEP #$20        ; set A short
.1962db		a5 06		lda $0306	                    LDA FDC_ST0
.1962dd		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.1962df		d0 0c		bne $1962ed	                    BNE write_failure
.1962e1						ret_success
.1962e1		e2 20		sep #$20	                SEP #$20        ; set A short
.1962e3		a9 00		lda #$00	                    LDA #0
.1962e5		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.1962e8		28		plp		                    PLP
.1962e9		2b		pld		                    PLD
.1962ea		ab		plb		                    PLB
.1962eb		38		sec		                    SEC
.1962ec		6b		rtl		                    RTL
.1962ed						write_failure
.1962ed		e2 20		sep #$20	                SEP #$20        ; set A short
.1962ef		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.1962f1		89 02		bit #$02	                    BIT #FDC_ST1_NW
.1962f3		f0 04		beq $1962f9	                    BEQ generic_err
.1962f5		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.1962f7		80 17		bra $196310	                    BRA ret_failure
.1962f9		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.1962fb		d0 e4		bne $1962e1	                    BNE ret_success
.1962fd		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.1962ff		d0 e0		bne $1962e1	                    BNE ret_success
.196301						attempt_retry
.196301		e2 20		sep #$20	                SEP #$20        ; set A short
.196303		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.196306		d0 c8		bne $1962d0	                    BNE retry                           ; And retry unless we have none left
.196308		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.19630a		80 04		bra $196310	                    BRA ret_failure
.19630c						seek_failure
.19630c		e2 20		sep #$20	                SEP #$20        ; set A short
.19630e		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.196310						ret_failure
.196310		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.196313		28		plp		pass_failure        PLP
.196314		2b		pld		                    PLD
.196315		ab		plb		                    PLB
.196316		18		clc		                    CLC
.196317		6b		rtl		                    RTL
.196318						FDC_MOUNT
.196318		8b		phb		                    PHB
.196319		0b		phd		                    PHD
.19631a		08		php		                    PHP
.19631b		48		pha		                PHA             ; begin setdbr macro
.19631c		08		php		                PHP
.19631d		e2 20		sep #$20	                SEP #$20        ; set A short
.19631f		a9 00		lda #$00	                LDA #0
.196321		48		pha		                PHA
.196322		ab		plb		                PLB
.196323		28		plp		                PLP
.196324		68		pla		                PLA             ; end setdbr macro
.196325		48		pha		                PHA             ; begin setdp macro
.196326		08		php		                PHP
.196327		c2 20		rep #$20	                REP #$20        ; set A long
.196329		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19632c		5b		tcd		                TCD
.19632d		28		plp		                PLP
.19632e		68		pla		                PLA             ; end setdp macro
.19632f		22 86 5d 19	jsl $195d86	                    JSL FDC_INIT
.196333		e2 20		sep #$20	                SEP #$20        ; set A short
.196335		c2 10		rep #$10	                REP #$10        ; set X long
.196337		a9 00		lda #$00	                    LDA #0
.196339		a2 00 00	ldx #$0000	                    LDX #0
.19633c		9f 00 a3 18	sta $18a300,x	zero_loop           STA DOS_SECTOR,X
.196340		e8		inx		                    INX
.196341		e0 00 02	cpx #$0200	                    CPX #512
.196344		d0 f6		bne $19633c	                    BNE zero_loop
.196346		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.196348		85 00		sta $0300	                    STA FDC_DRIVE
.19634a		22 02 5e 19	jsl $195e02	                    JSL FDC_Motor_On                        ; Turn the motor on
.19634e		c2 30		rep #$30	                REP #$30        ; set A&X long
.196350		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.196353		85 22		sta $0322	                    STA BIOS_LBA
.196355		85 24		sta $0324	                    STA BIOS_LBA+2
.196357		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.19635a		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.19635c		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.19635f		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.196361		22 47 62 19	jsl $196247	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.196365		b0 03		bcs $19636a	                    BCS parse_boot                          ; If ok: start parsing the boot record
.196367		82 d3 00	brl $19643d	                    BRL pass_failure                        ; Pass the error up the chain
.19636a						parse_boot
.19636a		e2 20		sep #$20	                SEP #$20        ; set A short
.19636c		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.19636e		8f 01 a0 18	sta $18a001	                    STA @l FILE_SYSTEM
.196372		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.196374		8f 02 a0 18	sta $18a002	                    STA @l PARTITION
.196378		e2 20		sep #$20	                SEP #$20        ; set A short
.19637a		af 0d a3 18	lda $18a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.19637e		8f 03 a0 18	sta $18a003	                    STA @l SECTORS_PER_CLUSTER
.196382		c2 20		rep #$20	                REP #$20        ; set A long
.196384		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.196387		8f 04 a0 18	sta $18a004	                    STA @l FIRSTSECTOR
.19638b		8f 06 a0 18	sta $18a006	                    STA @l FIRSTSECTOR+2
.19638f		af 16 a3 18	lda $18a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.196393		8f 10 a0 18	sta $18a010	                    STA @l SEC_PER_FAT
.196397		a9 00 00	lda #$0000	                    LDA #0
.19639a		8f 12 a0 18	sta $18a012	                    STA @l SEC_PER_FAT+2
.19639e		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.1963a1		8f 14 a0 18	sta $18a014	                    STA @l FAT_BEGIN_LBA
.1963a5		18		clc		                    CLC
.1963a6		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.1963aa		8f 18 a0 18	sta $18a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.1963ae		a9 00 00	lda #$0000	                    LDA #0
.1963b1		8f 16 a0 18	sta $18a016	                    STA @l FAT_BEGIN_LBA+2
.1963b5		8f 1a a0 18	sta $18a01a	                    STA @L FAT2_BEGIN_LBA+2
.1963b9		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.1963ba		af 18 a0 18	lda $18a018	                    LDA @l FAT2_BEGIN_LBA
.1963be		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.1963c2		8f 20 a0 18	sta $18a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.1963c6		a9 00 00	lda #$0000	                    LDA #0
.1963c9		8f 22 a0 18	sta $18a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.1963cd		af 11 a3 18	lda $18a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.1963d1		8f 24 a0 18	sta $18a024	                    STA @l ROOT_DIR_MAX_ENTRY
.1963d5		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.1963d6		4a		lsr a		                    LSR A
.1963d7		4a		lsr a		                    LSR A
.1963d8		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.1963d9		18		clc		                    CLC
.1963da		6f 20 a0 18	adc $18a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.1963de		8f 1c a0 18	sta $18a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.1963e2		a9 00 00	lda #$0000	                    LDA #0
.1963e5		8f 1e a0 18	sta $18a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.1963e9		af 13 a3 18	lda $18a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.1963ed		8f 08 a0 18	sta $18a008	                    STA @l SECTORCOUNT
.1963f1		a9 00 00	lda #$0000	                    LDA #0
.1963f4		8f 0a a0 18	sta $18a00a	                    STA @l SECTORCOUNT+2
.1963f8		af 0e a3 18	lda $18a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.1963fc		8f 0c a0 18	sta $18a00c	                    STA @l NUM_RSRV_SEC
.196400		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.196403		8f 0e a0 18	sta $18a00e	                    STA @l CLUSTER_SIZE
.196407		e2 20		sep #$20	                SEP #$20        ; set A short
.196409		af 26 a3 18	lda $18a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.19640d		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.19640f		80 14		bra $196425	                    BRA no_volume_id                        ; No: there is no volume ID
.196411						is_extended
.196411		c2 20		rep #$20	                REP #$20        ; set A long
.196413		af 27 a3 18	lda $18a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.196417		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.19641b		af 29 a3 18	lda $18a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.19641f		8f 28 a0 18	sta $18a028	                    STA @l VOLUME_ID+2
.196423		80 0d		bra $196432	                    BRA ret_success
.196425						no_volume_id
.196425		c2 20		rep #$20	                REP #$20        ; set A long
.196427		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.19642a		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.19642e		8f 28 a0 18	sta $18a028	                    STA @L VOLUME_ID+2
.196432						ret_success
.196432		e2 20		sep #$20	                SEP #$20        ; set A short
.196434		a9 00		lda #$00	                    LDA #0
.196436		85 20		sta $0320	                    STA BIOS_STATUS
.196438		28		plp		                    PLP
.196439		2b		pld		                    PLD
.19643a		ab		plb		                    PLB
.19643b		38		sec		                    SEC
.19643c		6b		rtl		                    RTL
.19643d		28		plp		pass_failure        PLP
.19643e		2b		pld		                    PLD
.19643f		ab		plb		                    PLB
.196440		18		clc		                    CLC
.196441		6b		rtl		                    RTL
.196442						FDC_CMDBLOCK
.196442		8b		phb		                    PHB
.196443		0b		phd		                    PHD
.196444		08		php		                    PHP
.196445		48		pha		                PHA             ; begin setdbr macro
.196446		08		php		                PHP
.196447		e2 20		sep #$20	                SEP #$20        ; set A short
.196449		a9 00		lda #$00	                LDA #0
.19644b		48		pha		                PHA
.19644c		ab		plb		                PLB
.19644d		28		plp		                PLP
.19644e		68		pla		                PLA             ; end setdbr macro
.19644f		48		pha		                PHA             ; begin setdp macro
.196450		08		php		                PHP
.196451		c2 20		rep #$20	                REP #$20        ; set A long
.196453		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196456		5b		tcd		                TCD
.196457		28		plp		                PLP
.196458		68		pla		                PLA             ; end setdp macro
.196459		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19645b		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.19645d		f0 0f		beq $19646e	                    BEQ motor_on
.19645f		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.196461		f0 11		beq $196474	                    BEQ motor_off
.196463		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.196465		f0 13		beq $19647a	                    BEQ recalibrate
.196467		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.196469		28		plp		                    PLP
.19646a		2b		pld		                    PLD
.19646b		ab		plb		                    PLB
.19646c		38		sec		                    SEC
.19646d		6b		rtl		                    RTL
.19646e		22 02 5e 19	jsl $195e02	motor_on            JSL FDC_Motor_On
.196472		80 f3		bra $196467	                    BRA ret_success
.196474		22 36 5e 19	jsl $195e36	motor_off           JSL FDC_Motor_Off
.196478		80 ed		bra $196467	                    BRA ret_success
.19647a		22 61 5e 19	jsl $195e61	recalibrate         JSL FDC_Recalibrate_Command
.19647e		b0 e7		bcs $196467	                    BCS ret_success
.196480		28		plp		pass_failure        PLP
.196481		2b		pld		                    PLD
.196482		ab		plb		                    PLB
.196483		18		clc		                    CLC
.196484		6b		rtl		                    RTL
.196485						FDC_CHK_MEDIA
.196485		0b		phd		                    PHD
.196486		08		php		                    PHP
.196487		48		pha		                PHA             ; begin setdp macro
.196488		08		php		                PHP
.196489		c2 20		rep #$20	                REP #$20        ; set A long
.19648b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19648e		5b		tcd		                TCD
.19648f		28		plp		                PLP
.196490		68		pla		                PLA             ; end setdp macro
.196491		22 02 5e 19	jsl $195e02	                    JSL FDC_Motor_On                ; Turn on the motor
.196495		e2 20		sep #$20	                SEP #$20        ; set A short
.196497		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.19649b		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.19649d		f0 42		beq $1964e1	                    BEQ ret_true                    ; If not: assume the disk is present
.19649f		a9 00		lda #$00	                    LDA #0
.1964a1		85 00		sta $0300	                    STA FDC_DRIVE
.1964a3		a9 00		lda #$00	                    LDA #0
.1964a5		85 01		sta $0301	                    STA FDC_HEAD
.1964a7		a9 50		lda #$50	                    LDA #80
.1964a9		85 02		sta $0302	                    STA FDC_CYLINDER
.1964ab		22 41 60 19	jsl $196041	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.1964af		90 34		bcc $1964e5	                    BCC ret_false                   ; If fail: return false
.1964b1		c2 10		rep #$10	                REP #$10        ; set X long
.1964b3		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.1964b6		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.1964b9		22 da 0f 19	jsl $190fda	                    JSL IDELAY
.1964bd		22 96 5e 19	jsl $195e96	                    JSL FDC_Sense_Int_Status
.1964c1		a5 06		lda $0306	                    LDA FDC_ST0
.1964c3		29 d0		and #$d0	                    AND #%11010000
.1964c5		d0 1e		bne $1964e5	                    BNE ret_false
.1964c7		22 61 5e 19	jsl $195e61	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.1964cb		90 18		bcc $1964e5	                    BCC ret_false                   ; If fail: return false
.1964cd		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.1964d0		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.1964d3		22 da 0f 19	jsl $190fda	                    JSL IDELAY
.1964d7		22 96 5e 19	jsl $195e96	                    JSL FDC_Sense_Int_Status
.1964db		a5 06		lda $0306	                    LDA FDC_ST0
.1964dd		29 d0		and #$d0	                    AND #%11010000
.1964df		d0 04		bne $1964e5	                    BNE ret_false
.1964e1						ret_true
.1964e1		28		plp		                    PLP
.1964e2		2b		pld		                    PLD
.1964e3		38		sec		                    SEC
.1964e4		6b		rtl		                    RTL
.1964e5						ret_false
.1964e5		28		plp		                    PLP
.1964e6		2b		pld		                    PLD
.1964e7		18		clc		                    CLC
.1964e8		6b		rtl		                    RTL
.1964e9						FDC_WRITEVBR
.1964e9		8b		phb		                    PHB
.1964ea		0b		phd		                    PHD
.1964eb		08		php		                    PHP
.1964ec		48		pha		                PHA             ; begin setdbr macro
.1964ed		08		php		                PHP
.1964ee		e2 20		sep #$20	                SEP #$20        ; set A short
.1964f0		a9 00		lda #$00	                LDA #0
.1964f2		48		pha		                PHA
.1964f3		ab		plb		                PLB
.1964f4		28		plp		                PLP
.1964f5		68		pla		                PLA             ; end setdbr macro
.1964f6		48		pha		                PHA             ; begin setdp macro
.1964f7		08		php		                PHP
.1964f8		c2 20		rep #$20	                REP #$20        ; set A long
.1964fa		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1964fd		5b		tcd		                TCD
.1964fe		28		plp		                PLP
.1964ff		68		pla		                PLA             ; end setdp macro
.196500		22 18 63 19	jsl $196318	                    JSL FDC_MOUNT               ; Mount the floppy disk
.196504		c2 30		rep #$30	                REP #$30        ; set A&X long
.196506		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.196509		a2 00 00	ldx #$0000	                    LDX #0
.19650c		9f 00 a3 18	sta $18a300,x	clr_loop            STA DOS_SECTOR,X
.196510		e8		inx		                    INX
.196511		e8		inx		                    INX
.196512		e0 00 02	cpx #$0200	                    CPX #512
.196515		d0 f5		bne $19650c	                    BNE clr_loop
.196517		e2 20		sep #$20	                SEP #$20        ; set A short
.196519		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.19651c		bf d1 65 19	lda $1965d1,x	copy_loop           LDA FDC_VBR_BEGIN,X
.196520		9f 00 a3 18	sta $18a300,x	                    STA DOS_SECTOR,X
.196524		e8		inx		                    INX
.196525		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.196528		d0 f2		bne $19651c	                    BNE copy_loop
.19652a		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.19652d		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.196530		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.196532		9f 00 a3 18	sta $18a300,x	                    STA DOS_SECTOR,X
.196536		f0 07		beq $19653f	                    BEQ path_copy_done
.196538		e8		inx		                    INX
.196539		c8		iny		                    INY
.19653a		c0 80 00	cpy #$0080	                    CPY #128
.19653d		d0 f1		bne $196530	                    BNE path_copy_loop
.19653f						path_copy_done
.19653f		c2 20		rep #$20	                REP #$20        ; set A long
.196541		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.196544		8f fe a4 18	sta $18a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.196548		c2 20		rep #$20	                REP #$20        ; set A long
.19654a		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.19654d		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.19654f		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.196552		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.196554		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.196557		85 02		sta $0322	                    STA BIOS_LBA
.196559		85 04		sta $0324	                    STA BIOS_LBA+2
.19655b		e2 20		sep #$20	                SEP #$20        ; set A short
.19655d		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.19655f		85 01		sta $0321	                    STA BIOS_DEV
.196561		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.196565		b0 09		bcs $196570	                    BCS ret_success
.196567		22 36 5e 19	jsl $195e36	                    JSL FDC_Motor_Off
.19656b		28		plp		                    PLP                         ; Return the failure
.19656c		2b		pld		                    PLD
.19656d		ab		plb		                    PLB
.19656e		18		clc		                    CLC
.19656f		6b		rtl		                    RTL
.196570		22 36 5e 19	jsl $195e36	ret_success         JSL FDC_Motor_Off
.196574		e2 20		sep #$20	                SEP #$20        ; set A short
.196576		a9 00		lda #$00	                    LDA #0
.196578		85 00		sta $0320	                    STA BIOS_STATUS
.19657a		28		plp		                    PLP
.19657b		2b		pld		                    PLD
.19657c		ab		plb		                    PLB
.19657d		38		sec		                    SEC
.19657e		6b		rtl		                    RTL
.19657f						FDC_TIME_HANDLE
.19657f		08		php		                    PHP
.196580		e2 20		sep #$20	                SEP #$20        ; set A short
.196582		af 4e a0 18	lda $18a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.196586		d0 06		bne $19658e	                    BNE dec_motor                   ; If not zero: decrement the timer
.196588		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.19658c		f0 28		beq $1965b6	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.19658e		af 4e a0 18	lda $18a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.196592		3a		dec a		                    DEC A
.196593		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.196597		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.196599		d0 0b		bne $1965a6	                    BNE chk_motor_end               ; No: check to see if we're a the end
.19659b		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.19659f		3a		dec a		                    DEC A
.1965a0		8f 4f a0 18	sta $18a04f	                    STA @l FDC_MOTOR_TIMER+1
.1965a4		80 10		bra $1965b6	                    BRA sof_timeout                 ; And move on to the next timer
.1965a6		af 4e a0 18	lda $18a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.1965aa		d0 0a		bne $1965b6	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.1965ac		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1
.1965b0		d0 04		bne $1965b6	                    BNE sof_timeout
.1965b2		22 36 5e 19	jsl $195e36	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.1965b6						sof_timeout
.1965b6		e2 20		sep #$20	                SEP #$20        ; set A short
.1965b8		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.1965bc		f0 11		beq $1965cf	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.1965be		3a		dec a		                    DEC A                           ; Count down one tick
.1965bf		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.1965c3		d0 0a		bne $1965cf	                    BNE sof_int_done                ; If not 0, we're done
.1965c5		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.1965c9		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.1965cb		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.1965cf		28		plp		sof_int_done        PLP
.1965d0		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.1965d1						FDC_VBR_BEGIN
>1965d1		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>1965d4		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>1965dc		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>1965de		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>1965df		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>1965e1		02				num_fat             .byte 2                 ; Number of FATs
>1965e2		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>1965e4		40 0b				total_sectors       .word 2880              ; Total sectors
>1965e6		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>1965e7		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>1965e9		12 00				sec_per_track       .word 18                ; Sectors per track
>1965eb		02 00				num_head            .word 2                 ; Number of heads
>1965ed		00 00 00 00			ignore2             .dword 0
>1965f1		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>1965f5		00 00				ignore3             .word 0
>1965f7		29				boot_signature      .byte $29
>1965f8		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>1965fc		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>196604		20 20 20
>196607		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.19660f		80 40		bra $196651	                    BRA vbr_start
>196611						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.196651						vbr_start
.196651		c2 20		rep #$20	                REP #$20        ; set A long
.196653		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.196656		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.19665a		a9 18 00	lda #$0018	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.19665d		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.196661		22 24 11 00	jsl $001124	                    JSL F_RUN               ; And try to execute the binary file
.196665		b0 0c		bcs $196673	                    BCS lock                ; If it returned success... lock up... I guess?
.196667						error
.196667		e2 20		sep #$20	                SEP #$20        ; set A short
.196669		4b		phk		                    PHK                     ; Otherwise, print an error message
.19666a		ab		plb		                    PLB
.19666b		62 08 00	per $196676	                    PER message
.19666e		fa		plx		                    PLX
.19666f		22 1c 10 00	jsl $00101c	                    JSL PUTS
.196673		ea		nop		lock                NOP                     ; And lock up
.196674		80 fd		bra $196673	                    BRA lock
>196676		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>19667e		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>19668e		65 20 62 69 6e 61 72 79 2e 0d 00
.196699						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.196699						IDE_TEST
.196699		08		php		                PHP
.19669a		c2 20		rep #$20	                REP #$20        ; set A long
.19669c		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.19669f		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.1966a3		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.1966a6		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.1966aa		22 cd 67 19	jsl $1967cd	                JSL IDE_IDENTIFY
.1966ae		b0 03		bcs $1966b3	                BCS id_ok
.1966b0		82 ab 00	brl $19675e	                BRL done
.1966b3						id_ok
.1966b3		c2 10		rep #$10	                REP #$10        ; set X long
.1966b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1966b7		a0 28 00	ldy #$0028	                LDY #40
.1966ba		a2 36 00	ldx #$0036	                LDX #27*2
.1966bd		bf 01 a3 18	lda $18a301,x	pr_model        LDA DOS_SECTOR+1,X
.1966c1		22 18 10 00	jsl $001018	                JSL PUTC
.1966c5		bf 00 a3 18	lda $18a300,x	                LDA DOS_SECTOR,X
.1966c9		22 18 10 00	jsl $001018	                JSL PUTC
.1966cd		e8		inx		                INX
.1966ce		e8		inx		                INX
.1966cf		88		dey		                DEY
.1966d0		88		dey		                DEY
.1966d1		d0 ea		bne $1966bd	                BNE pr_model
.1966d3		c2 10		rep #$10	                REP #$10        ; set X long
.1966d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1966d7		a0 14 00	ldy #$0014	                LDY #20
.1966da		a2 14 00	ldx #$0014	                LDX #10*2
.1966dd		bf 01 a3 18	lda $18a301,x	pr_serial       LDA DOS_SECTOR+1,X
.1966e1		22 18 10 00	jsl $001018	                JSL PUTC
.1966e5		bf 00 a3 18	lda $18a300,x	                LDA DOS_SECTOR,X
.1966e9		22 18 10 00	jsl $001018	                JSL PUTC
.1966ed		e8		inx		                INX
.1966ee		e8		inx		                INX
.1966ef		88		dey		                DEY
.1966f0		88		dey		                DEY
.1966f1		d0 ea		bne $1966dd	                BNE pr_serial
.1966f3		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.1966f7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1966f9		a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.1966fc		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.196700		a9 00 00	lda #$0000	                LDA #0
.196703		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.196707		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.19670a		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.19670e		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.196711		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.196715		a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.196718		a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.19671b		9f 00 a3 18	sta $18a300,x	init_loop       STA DOS_SECTOR,X
.19671f		e8		inx		                INX
.196720		e8		inx		                INX
.196721		e0 00 02	cpx #$0200	                CPX #512
.196724		d0 f5		bne $19671b	                BNE init_loop
.196726		22 e6 68 19	jsl $1968e6	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.19672a		b0 06		bcs $196732	                BCS read_sect1
.19672c		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196730		80 2c		bra $19675e	                BRA done
.196732		a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.196735		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.196739		a9 00 00	lda #$0000	                LDA #0
.19673c		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.196740		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.196743		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.196747		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.19674a		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.19674e		22 5b 68 19	jsl $19685b	                JSL IDE_GETBLOCK        ; Attempt to read the block
.196752		b0 06		bcs $19675a	                BCS all_ok
.196754		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196758		80 04		bra $19675e	                BRA done
.19675a						all_ok
.19675a		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.19675e		28		plp		done            PLP
.19675f		6b		rtl		                RTL
.196760						IDE_INIT
.196760		e2 20		sep #$20	                SEP #$20        ; set A short
.196762		a9 00		lda #$00	              LDA #$00
.196764		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.196768		20 89 67	jsr $196789	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.19676b		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.19676d		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.196771		a9 01		lda #$01	              LDA #$01
.196773		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.196777		a9 00		lda #$00	              LDA #$00
.196779		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.19677d		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.196781		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.196785		20 a7 67	jsr $1967a7	              JSR IDE_DRV_READY_NOTBUSY
.196788		6b		rtl		              RTL
.196789						IDE_DRIVE_BSY
.196789		08		php		                PHP
.19678a		e2 20		sep #$20	                SEP #$20        ; set A short
.19678c		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.196790		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.196792		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.196794		f0 f6		beq $19678c	                BEQ loop
.196796		28		plp		                PLP
.196797		60		rts		                RTS
.196798						IDE_DRIVE_READY
.196798		08		php		                PHP
.196799		e2 20		sep #$20	                SEP #$20        ; set A short
.19679b		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.19679f		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.1967a1		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.1967a3		d0 f6		bne $19679b	                BNE loop
.1967a5		28		plp		                PLP
.1967a6		60		rts		                RTS
.1967a7						IDE_DRV_READY_NOTBUSY
.1967a7		08		php		                PHP
.1967a8		e2 20		sep #$20	                SEP #$20        ; set A short
.1967aa		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.1967ae		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.1967b0		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.1967b2		d0 f6		bne $1967aa	                BNE loop                            ; No: keep waiting
.1967b4		28		plp		ret_success     PLP                                 ; Return success
.1967b5		38		sec		                SEC
.1967b6		60		rts		                RTS
.1967b7		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.1967bb		28		plp		                PLP                                 ; Return failure
.1967bc		18		clc		                CLC
.1967bd		60		rts		                RTS
.1967be						IDE_NOT_DRQ
.1967be		08		php		                PHP
.1967bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1967c1		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.1967c5		29 08		and #$08	                AND #IDE_STAT_DRQ
.1967c7		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.1967c9		d0 f6		bne $1967c1	                BNE loop                ; No: keep waiting
.1967cb		28		plp		                PLP
.1967cc		60		rts		                RTS
.1967cd						IDE_IDENTIFY
.1967cd		5a		phy		                PHY
.1967ce		8b		phb		                PHB
.1967cf		0b		phd		                PHD
.1967d0		08		php		                PHP
.1967d1		48		pha		                PHA             ; begin setdbr macro
.1967d2		08		php		                PHP
.1967d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1967d5		a9 00		lda #$00	                LDA #0
.1967d7		48		pha		                PHA
.1967d8		ab		plb		                PLB
.1967d9		28		plp		                PLP
.1967da		68		pla		                PLA             ; end setdbr macro
.1967db		48		pha		                PHA             ; begin setdp macro
.1967dc		08		php		                PHP
.1967dd		c2 20		rep #$20	                REP #$20        ; set A long
.1967df		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1967e2		5b		tcd		                TCD
.1967e3		28		plp		                PLP
.1967e4		68		pla		                PLA             ; end setdp macro
.1967e5		e2 20		sep #$20	                SEP #$20        ; set A short
.1967e7		20 a7 67	jsr $1967a7	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.1967ea		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.1967ec		29 07		and #$07	                AND #$07
.1967ee		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.1967f0		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.1967f4		20 a7 67	jsr $1967a7	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.1967f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1967f9		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.1967fb		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.1967ff		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196803		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196807		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.19680b		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.19680d		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.196811		f0 29		beq $19683c	                BEQ no_media                    ; If 0: there is no drive
.196813		20 89 67	jsr $196789	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.196816		20 a7 67	jsr $1967a7	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196819		90 2d		bcc $196848	                BCC ret_failure                 ; If an error occurred, return it
.19681b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19681d		a0 00 00	ldy #$0000	                LDY #0
.196820		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.196824		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.196826		c8		iny		                INY                             ; Move to the next position
.196827		c8		iny		                INY
.196828		c0 00 02	cpy #$0200	                CPY #512
.19682b		d0 f3		bne $196820	                BNE read_loop
.19682d						ret_success
.19682d		e2 20		sep #$20	                SEP #$20        ; set A short
.19682f		a9 00		lda #$00	                LDA #0
.196831		85 00		sta $0320	                STA BIOS_STATUS
.196833		8d 06 03	sta $0306	                STA @w FDC_ST0
.196836		28		plp		                PLP                             ; Return success
.196837		2b		pld		                PLD
.196838		ab		plb		                PLB
.196839		7a		ply		                PLY
.19683a		38		sec		                SEC
.19683b		6b		rtl		                RTL
.19683c						no_media
.19683c		e2 20		sep #$20	                SEP #$20        ; set A short
.19683e		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.196840		80 0a		bra $19684c	                BRA pass_failure
.196842						not_ata
.196842		e2 20		sep #$20	                SEP #$20        ; set A short
.196844		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.196846		80 04		bra $19684c	                BRA pass_failure
.196848						ret_failure
.196848		e2 20		sep #$20	                SEP #$20        ; set A short
.19684a		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.19684c		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.19684e		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196852		8d 06 03	sta $0306	                STA @w FDC_ST0
.196855		28		plp		                PLP
.196856		2b		pld		                PLD
.196857		ab		plb		                PLB
.196858		7a		ply		                PLY
.196859		18		clc		                CLC
.19685a		6b		rtl		                RTL
.19685b						IDE_GETBLOCK
.19685b		5a		phy		                PHY
.19685c		8b		phb		                PHB
.19685d		0b		phd		                PHD
.19685e		08		php		                PHP
.19685f		48		pha		                PHA             ; begin setdbr macro
.196860		08		php		                PHP
.196861		e2 20		sep #$20	                SEP #$20        ; set A short
.196863		a9 00		lda #$00	                LDA #0
.196865		48		pha		                PHA
.196866		ab		plb		                PLB
.196867		28		plp		                PLP
.196868		68		pla		                PLA             ; end setdbr macro
.196869		48		pha		                PHA             ; begin setdp macro
.19686a		08		php		                PHP
.19686b		c2 20		rep #$20	                REP #$20        ; set A long
.19686d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.196870		5b		tcd		                TCD
.196871		28		plp		                PLP
.196872		68		pla		                PLA             ; end setdp macro
.196873		e2 20		sep #$20	                SEP #$20        ; set A short
.196875		20 a7 67	jsr $1967a7	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.196878		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.19687a		29 07		and #$07	                AND #$07
.19687c		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.19687e		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.196882		20 a7 67	jsr $1967a7	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.196885		e2 20		sep #$20	                SEP #$20        ; set A short
.196887		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.196889		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.19688d		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.19688f		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196893		a5 03		lda $0323	                LDA BIOS_LBA+1
.196895		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196899		a5 04		lda $0324	                LDA BIOS_LBA+2
.19689b		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.19689f		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.1968a1		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.1968a5		ea		nop		                NOP                             ; Wait about 500ns
.1968a6		ea		nop		                NOP
.1968a7		ea		nop		                NOP
.1968a8		ea		nop		                NOP
.1968a9		20 a7 67	jsr $1967a7	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.1968ac		90 25		bcc $1968d3	                BCC ret_failure                 ; If an error occurred, return it
.1968ae		a0 00 00	ldy #$0000	                LDY #0
.1968b1		c2 20		rep #$20	                REP #$20        ; set A long
.1968b3		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.1968b7		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.1968b9		c8		iny		                INY                             ; Move to the next position
.1968ba		c8		iny		                INY
.1968bb		c0 00 02	cpy #$0200	                CPY #512
.1968be		d0 f3		bne $1968b3	                BNE read_loop
.1968c0		ea		nop		                NOP                             ; Wait about 500ns
.1968c1		ea		nop		                NOP
.1968c2		ea		nop		                NOP
.1968c3		ea		nop		                NOP
.1968c4						ret_success
.1968c4		e2 20		sep #$20	                SEP #$20        ; set A short
.1968c6		a9 00		lda #$00	                LDA #0
.1968c8		85 00		sta $0320	                STA BIOS_STATUS
.1968ca		8d 06 03	sta $0306	                STA @w FDC_ST0
.1968cd		28		plp		                PLP                             ; Return success
.1968ce		2b		pld		                PLD
.1968cf		ab		plb		                PLB
.1968d0		7a		ply		                PLY
.1968d1		38		sec		                SEC
.1968d2		6b		rtl		                RTL
.1968d3						ret_failure
.1968d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1968d5		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.1968d9		8d 06 03	sta $0306	                STA @w FDC_ST0
.1968dc		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.1968de		85 00		sta $0320	                STA BIOS_STATUS
.1968e0		28		plp		                PLP
.1968e1		2b		pld		                PLD
.1968e2		ab		plb		                PLB
.1968e3		7a		ply		                PLY
.1968e4		18		clc		                CLC
.1968e5		6b		rtl		                RTL
.1968e6						IDE_PUTBLOCK
.1968e6		5a		phy		                PHY
.1968e7		8b		phb		                PHB
.1968e8		0b		phd		                PHD
.1968e9		08		php		                PHP
.1968ea		48		pha		                PHA             ; begin setdbr macro
.1968eb		08		php		                PHP
.1968ec		e2 20		sep #$20	                SEP #$20        ; set A short
.1968ee		a9 00		lda #$00	                LDA #0
.1968f0		48		pha		                PHA
.1968f1		ab		plb		                PLB
.1968f2		28		plp		                PLP
.1968f3		68		pla		                PLA             ; end setdbr macro
.1968f4		48		pha		                PHA             ; begin setdp macro
.1968f5		08		php		                PHP
.1968f6		c2 20		rep #$20	                REP #$20        ; set A long
.1968f8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1968fb		5b		tcd		                TCD
.1968fc		28		plp		                PLP
.1968fd		68		pla		                PLA             ; end setdp macro
.1968fe		e2 20		sep #$20	                SEP #$20        ; set A short
.196900		20 a7 67	jsr $1967a7	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.196903		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.196905		29 07		and #$07	                AND #$07
.196907		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.196909		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.19690d		20 a7 67	jsr $1967a7	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.196910		e2 20		sep #$20	                SEP #$20        ; set A short
.196912		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.196914		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.196918		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.19691a		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.19691e		a5 03		lda $0323	                LDA BIOS_LBA+1
.196920		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196924		a5 04		lda $0324	                LDA BIOS_LBA+2
.196926		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.19692a		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.19692c		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.196930		ea		nop		                NOP                             ; Wait about 500ns
.196931		ea		nop		                NOP
.196932		ea		nop		                NOP
.196933		ea		nop		                NOP
.196934		20 a7 67	jsr $1967a7	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196937		90 37		bcc $196970	                BCC ret_failure                 ; If an error occurred, return it
.196939		c2 30		rep #$30	                REP #$30        ; set A&X long
.19693b		a0 00 00	ldy #$0000	                LDY #0
.19693e		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.196940		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.196944		c8		iny		                INY                             ; Move to the next position
.196945		c8		iny		                INY
.196946		c0 00 02	cpy #$0200	                CPY #512
.196949		d0 f3		bne $19693e	                BNE read_loop
.19694b		ea		nop		                NOP                             ; Wait about 500ns
.19694c		ea		nop		                NOP
.19694d		ea		nop		                NOP
.19694e		ea		nop		                NOP
.19694f		20 a7 67	jsr $1967a7	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196952		90 1c		bcc $196970	                BCC ret_failure                 ; If an error occurred, return it
.196954		ea		nop		                NOP                             ; Wait about 500ns
.196955		ea		nop		                NOP
.196956		ea		nop		                NOP
.196957		ea		nop		                NOP
.196958		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.19695c		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.19695f		d0 0f		bne $196970	                BNE ret_failure                 ; If error: return failure
.196961						ret_success
.196961		e2 20		sep #$20	                SEP #$20        ; set A short
.196963		a9 00		lda #$00	                LDA #0
.196965		85 00		sta $0320	                STA BIOS_STATUS
.196967		8d 06 03	sta $0306	                STA @w FDC_ST0
.19696a		28		plp		                PLP                             ; Return success
.19696b		2b		pld		                PLD
.19696c		ab		plb		                PLB
.19696d		7a		ply		                PLY
.19696e		38		sec		                SEC
.19696f		6b		rtl		                RTL
.196970		ea		nop		ret_failure     NOP                             ; Wait about 500ns
.196971		ea		nop		                NOP
.196972		ea		nop		                NOP
.196973		ea		nop		                NOP
.196974		e2 20		sep #$20	                SEP #$20        ; set A short
.196976		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.19697a		80 08		bra $196984	                BRA save_error
.19697c		ea		nop		                NOP
.19697d		ea		nop		                NOP
.19697e		ea		nop		                NOP
.19697f		ea		nop		                NOP
.196980		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196984		8d 06 03	sta $0306	save_error      STA @w FDC_ST0
.196987		a9 83		lda #$83	                LDA #BIOS_ERR_WRITE
.196989		85 00		sta $0320	                STA BIOS_STATUS
.19698b		28		plp		                PLP
.19698c		2b		pld		                PLD
.19698d		ab		plb		                PLB
.19698e		7a		ply		                PLY
.19698f		18		clc		                CLC
.196990		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/Ethernet_Init_library.asm

.196991						SIMPLE_INIT_ETHERNET_CTRL
.196991						WaitforittobeReady:
.196991		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.196995		29 01 00	and #$0001	                AND #$0001
.196998		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.19699b		d0 f4		bne $196991	                BNE WaitforittobeReady
.19699d		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.1969a1		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.1969a5		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.1969a9		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.1969ad		a9 00 00	lda #$0000	                LDA #$0000
.1969b0		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.1969b4		a9 00 70	lda #$7000	                LDA #$7000
.1969b7		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.1969bb		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.1969be		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.1969c2		a9 0b 00	lda #$000b	                LDA #$000B
.1969c5		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.1969c9		a9 00 00	lda #$0000	                LDA #$0000
.1969cc		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.1969d0		20 04 6a	jsr $196a04	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.1969d3		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.1969d6		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.1969da		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.1969dd		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.1969e1		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.1969e4		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.1969e8		20 04 6a	jsr $196a04	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.1969eb		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.1969ee		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.1969f2		a9 0c 00	lda #$000c	                LDA #$000C
.1969f5		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.1969f9		a9 04 00	lda #$0004	                LDA #$0004
.1969fc		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.196a00		20 04 6a	jsr $196a04	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.196a03		6b		rtl		                RTL
.196a04						MAC_ACCESS_WAIT_FOR_COMPLETION
.196a04		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.196a07		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.196a0b						WaitForCompletion:
.196a0b		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.196a0f		29 00 80	and #$8000	                AND #$8000
.196a12		c9 00 80	cmp #$8000	                CMP #$8000
.196a15		f0 f4		beq $196a0b	                BEQ WaitForCompletion
.196a17		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/EXP-C200_EVID_Library.asm

=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.196a18						INIT_EVID_VID_MODE
.196a18		e2 20		sep #$20	                SEP #$20        ; set A short
.196a1a		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable     ; 0 - 80x60, 1- 100x75
.196a1c		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.196a20		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable    ; Enable the Border
.196a22		8f 04 1e ae	sta $ae1e04	                STA @l EVID_BORDER_CTRL_REG
.196a26		a9 08		lda #$08	                LDA #8                          ; Set the border to the standard 8 pixels
.196a28		8f 08 1e ae	sta $ae1e08	                STA @l EVID_BORDER_X_SIZE       ; Let's use maximum space
.196a2c		8f 09 1e ae	sta $ae1e09	                STA @l EVID_BORDER_Y_SIZE
.196a30		a9 20		lda #$20	                LDA #$20
.196a32		8f 07 1e ae	sta $ae1e07	                STA @l EVID_BORDER_COLOR_R      ; R
.196a36		a9 00		lda #$00	                LDA #$00
.196a38		8f 06 1e ae	sta $ae1e06	                STA @l EVID_BORDER_COLOR_G      ; G
.196a3c		a9 20		lda #$20	                LDA #$20
.196a3e		8f 05 1e ae	sta $ae1e05	                STA @l EVID_BORDER_COLOR_B      ; B
.196a42		22 44 6b 19	jsl $196b44	                JSL INIT_EVID_LUT
.196a46		22 2d 6b 19	jsl $196b2d	                JSL INIT_EVID_FONTSET
.196a4a		22 68 6b 19	jsl $196b68	                JSL INIT_EVID_CURSOR
.196a4e		c2 30		rep #$30	                REP #$30        ; set A&X long
.196a50		a9 62 00	lda #$0062	                LDA #(100-2)
.196a53		8f 63 00 00	sta $000063	                STA @l EVID_COLS_VISIBLE
.196a57		a9 49 00	lda #$0049	                LDA #(75-2)
.196a5a		8f 67 00 00	sta $000067	                STA @l EVID_LINES_VISIBLE
.196a5e		a9 64 00	lda #$0064	                LDA #100
.196a61		8f 65 00 00	sta $000065	                STA @l EVID_COLS_PER_LINE
.196a65		a9 4b 00	lda #$004b	                LDA #75
.196a68		8f 69 00 00	sta $000069	                STA @l EVID_LINES_MAX
.196a6c		a9 70 00	lda #$0070	                LDA #$70                        ; Set the default text color to light gray on dark gray
.196a6f		8f 72 00 00	sta $000072	                STA @l EVID_CURCOLOR
.196a73		c2 30		rep #$30	                REP #$30        ; set A&X long
.196a75		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM            ; store the initial screen buffer location
.196a78		8f 60 00 00	sta $000060	                STA @l EVID_SCREENBEGIN
.196a7c		8f 6b 00 00	sta $00006b	                STA @l EVID_CURSORPOS
.196a80		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM           ; Set the initial COLOR cursor position
.196a83		8d 76 00	sta $0076	                STA EVID_COLORPOS
.196a86		e2 20		sep #$20	                SEP #$20        ; set A short
.196a88		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.196a8a		8f 62 00 00	sta $000062	                STA @l EVID_SCREENBEGIN + 2
.196a8e		8f 6d 00 00	sta $00006d	                STA @l EVID_CURSORPOS+2
.196a92		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM            ; Set the initial COLOR cursor position
.196a94		8f 78 00 00	sta $000078	                STA @l EVID_COLORPOS + 2
.196a98		6b		rtl		                RTL
>196a99		1b 5b 31 6d 1b 5b 33 31		EVID_DEV_RDY0   .text $1B, "[1m", $1B, "[31m", $0B, $0C, $1B, "[35m", $0B, $0C, $1B, "[33m", $0B, $0C, $1B
>196aa1		6d 0b 0c 1b 5b 33 35 6d 0b 0c 1b 5b 33 33 6d 0b
>196ab1		0c 1b
>196ab3		5b 33 32 6d 0b 0c 1b 5b		                .null "[32m", $0B, $0C, $1B, "[34m", $0B, $0C, $1B, "[0m", $20, "C256 Foenix EXP-C200-EVID", $0D
>196abb		33 34 6d 0b 0c 1b 5b 30 6d 20 43 32 35 36 20 46
>196acb		6f 65 6e 69 78 20 45 58 50 2d 43 32 30 30 2d 45
>196adb		56 49 44 0d 00
>196ae0		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1   .null "Your Device is Ready..."
>196ae8		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
.196af8						EVID_GREET
.196af8		48		pha		                PHA
.196af9		da		phx		                PHX
.196afa		08		php		                PHP
.196afb		e2 20		sep #$20	                SEP #$20        ; set A short
.196afd		af 7d 00 00	lda $00007d	                LDA @l EVID_PRESENT             ; Check if the EVID screen is present
.196b01		f0 26		beq $196b29	                BEQ done                        ; If not, skip this routine
.196b03		a9 04		lda #$04	                LDA #CHAN_EVID                  ; Switch to the EVID screen
.196b05		22 3c 10 00	jsl $00103c	                JSL SETOUT
.196b09		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN                   ; Clear the screen
.196b0d		c2 10		rep #$10	                REP #$10        ; set X long
.196b0f		8b		phb		                PHB                             ; Print the messages
.196b10		a9 19		lda #$19	                LDA #`EVID_DEV_RDY0
.196b12		48		pha		                PHA
.196b13		ab		plb		                PLB
.196b14		a2 99 6a	ldx #$6a99	                LDX #<>EVID_DEV_RDY0
.196b17		22 01 07 19	jsl $190701	                JSL IPRINT
.196b1b		a2 e0 6a	ldx #$6ae0	                LDX #<>EVID_DEV_RDY1
.196b1e		22 01 07 19	jsl $190701	                JSL IPRINT
.196b22		ab		plb		                PLB
.196b23		a9 00		lda #$00	                LDA #CHAN_CONSOLE               ; Go back to the main console
.196b25		22 3c 10 00	jsl $00103c	                JSL SETOUT
.196b29		28		plp		done            PLP
.196b2a		fa		plx		                PLX
.196b2b		68		pla		                PLA
.196b2c		6b		rtl		                RTL
.196b2d						INIT_EVID_FONTSET
.196b2d		e2 20		sep #$20	                SEP #$20        ; set A short
.196b2f		c2 10		rep #$10	                REP #$10        ; set X long
.196b31		a2 00 00	ldx #$0000	                LDX #$0000
.196b34						initFontsetbranch0
.196b34		bf 00 00 1f	lda $1f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.196b38		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X   ; Vicky FONT RAM Bank
.196b3c		e8		inx		                INX
.196b3d		e0 00 08	cpx #$0800	                CPX #$0800
.196b40		d0 f2		bne $196b34	                BNE initFontsetbranch0
.196b42		ea		nop		                NOP
.196b43		6b		rtl		                RTL
.196b44						INIT_EVID_LUT
.196b44		e2 20		sep #$20	                SEP #$20        ; set A short
.196b46		e2 10		sep #$10	                SEP #$10        ; set X short
.196b48		a2 00		ldx #$00	                LDX	#$00
.196b4a		bf ce 82 19	lda $1982ce,x	lutinitloop0	LDA @lfg_color_lut,x    ; get Local Data c64_character_Color_LUT_4_Txt
.196b4e		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	    ; Write in LUT Memory
.196b52		e8		inx		                inx
.196b53		e0 40		cpx #$40	                cpx #$40
.196b55		d0 f3		bne $196b4a	                bne lutinitloop0
.196b57		a2 00		ldx #$00	                LDX	#$00
.196b59		bf 0e 83 19	lda $19830e,x	lutinitloop1	LDA @lbg_color_lut,x    ; get Local Data
.196b5d		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	    ; Write in LUT Memory
.196b61		e8		inx		                INX
.196b62		e0 40		cpx #$40	                CPX #$40
.196b64		d0 f3		bne $196b59	                bne lutinitloop1
.196b66		ea		nop		                NOP
.196b67		6b		rtl		                RTL
.196b68						INIT_EVID_CURSOR
.196b68		08		php		                PHP
.196b69		e2 20		sep #$20	                SEP #$20        ; set A short
.196b6b		a9 b1		lda #$b1	                LDA #$B1                                            ; The Cursor Character will be a Fully Filled Block
.196b6d		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.196b71		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0) ; Set Cursor Enable And Flash Rate @1Hz
.196b73		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG
.196b77		c2 30		rep #$30	                REP #$30        ; set A&X long
.196b79		a9 00 00	lda #$0000	                LDA #$0000;
.196b7c		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L   ; Set the X to Position 1
.196b80		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L   ; Set the Y to Position 6 (Below)
.196b84		28		plp		                PLP
.196b85		6b		rtl		                RTL
.196b86						INIT_EVID_CLRSCREEN
.196b86		08		php		                PHP
.196b87		e2 20		sep #$20	                SEP #$20        ; set A short
.196b89		c2 10		rep #$10	                REP #$10        ; set X long
.196b8b		a2 00 00	ldx #$0000	                LDX #$0000		        ; Only Use One Pointer
.196b8e		a9 20		lda #$20	                LDA #$20		        ; Fill the Entire Screen with Space
.196b90		9f 00 20 ae	sta $ae2000,x	iclearloop0	    STA @l EVID_TEXT_MEM,X
.196b94		e8		inx		                inx
.196b95		e0 00 20	cpx #$2000	                cpx #$2000
.196b98		d0 f6		bne $196b90	                bne iclearloop0
.196b9a		a2 00 00	ldx #$0000	                LDX	#$0000		        ; Only Use One Pointer
.196b9d		a9 f0		lda #$f0	                LDA #$F0		        ; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.196b9f		9f 00 40 ae	sta $ae4000,x	iclearloop1	    STA @l EVID_COLOR_MEM,X
.196ba3		e8		inx		                inx
.196ba4		e0 00 20	cpx #$2000	                cpx #$2000
.196ba7		d0 f6		bne $196b9f	                bne iclearloop1
.196ba9		28		plp		                PLP
.196baa		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/ansi_screens.asm

.0000						S_ANSI_VARS
>0000						SCREENBEGIN         .long ?     ; Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>0003						COLS_VISIBLE        .word ?     ; Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>0005						COLS_PER_LINE       .word ?     ; Columns in memory per screen line. A virtual line can be this long. Default=128
>0007						LINES_VISIBLE       .word ?     ; The number of rows visible on the screen. Default=25
>0009						LINES_MAX           .word ?     ; The number of rows in memory for the screen. Default=64
>000b						CURSORPOS           .long ?     ; The next character written to the screen will be written in this location.
>000e						CURSORX             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0010						CURSORY             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0012						CURCOLOR            .byte ?     ; Color of next character to be printed to the screen.
>0013						COLORPOS            .long ?     ; Address of cursor's position in the color matrix
>0016						COLORBEGIN          .long ?     ; Address of the first byte of the color matrix for this screen
>0019						TMPPTR1             .dword ?    ; Temporary pointer
>001d						PRESENT             .byte ?     ; Screen is present on the machine (EVID only)
>001e						STATE               .byte ?     ; State of the escape code parser
>001f						CONTROL             .byte ?     ; Control bit
>0020						ARGC                .byte ?     ; The number of arguments provided by the escape sequence (max 2)
>0021						ARG0                .byte ?     ; First ANSI code argument
>0022						ARG1                .byte ?     ; Second ANSI code argument
=0						ST_INIT = 0             ; Starting state for the ANSI code parser. Most characters just print
=1						ST_ESCAPE = 1           ; ESC has been seen
=2						ST_CSI = 2              ; Full CSI has been seen "ESC ["
=2						ANSI_MAX_ARG = 2        ; We'll limit ourselves to two arguments
=$70						ANSI_DEF_COLOR = $70    ; Default color (dim white on dim black)
=$80						CONTROL_INVERT = $80    ; Control bit: Colors are inverted
=$40						CONTROL_BOLD = $40      ; Control bit: Colors should be intense
.196bab						ANSI_INIT
.196bab		da		phx		                    PHX
.196bac		5a		phy		                    PHY
.196bad		8b		phb		                    PHB
.196bae		0b		phd		                    PHD
.196baf		08		php		                    PHP
.196bb0		c2 30		rep #$30	                REP #$30        ; set A&X long
.196bb2		a0 00 00	ldy #$0000	                    LDY #0
.196bb5		22 61 6c 19	jsl $196c61	                    JSL INIT_SCREEN_Y               ; Set up the main screen
.196bb9		e2 20		sep #$20	                SEP #$20        ; set A short
.196bbb		af 87 e8 af	lda $afe887	                    LDA @l GABE_SYS_STAT            ; Let's check the Presence of an Expansion Card here
.196bbf		29 10		and #$10	                    AND #GABE_SYS_STAT_EXP          ; When there is a Card the Value is 1
.196bc1		c9 10		cmp #$10	                    CMP #GABE_SYS_STAT_EXP
.196bc3		d0 1d		bne $196be2	                    BNE no_evid
.196bc5		c2 20		rep #$20	                REP #$20        ; set A long
.196bc7		af 12 00 ae	lda $ae0012	                    LDA @l ESID_ID_CARD_ID_Lo       ; Load the Card ID and check for C100 or C200
.196bcb		c9 c8 00	cmp #$00c8	                    CMP #$00C8                      ; Is it the EVID card?
.196bce		d0 12		bne $196be2	                    BNE no_evid                     ; No: mark the EVID screen as not present
.196bd0		e2 20		sep #$20	                SEP #$20        ; set A short
.196bd2		a9 01		lda #$01	                    LDA #1                          ; Otherwise: Mark that there is an EVID present
.196bd4		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.196bd8		a0 01 00	ldy #$0001	                    LDY #1
.196bdb		22 61 6c 19	jsl $196c61	                    JSL INIT_SCREEN_Y               ; Initialize the EVID screen variables
.196bdf		80 09		bra $196bea	                    BRA done
.196be1		00		brk #		                    BRK
.196be2						no_evid
.196be2		e2 20		sep #$20	                SEP #$20        ; set A short
.196be4		a9 00		lda #$00	                    LDA #0                          ; Mark that there is no EVID present
.196be6		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.196bea		28		plp		done                PLP
.196beb		2b		pld		                    PLD
.196bec		ab		plb		                    PLB
.196bed		7a		ply		                    PLY
.196bee		fa		plx		                    PLX
.196bef		6b		rtl		                    RTL
.196bf0						ANSI_INIT_LUTS
.196bf0		08		php		                    PHP
.196bf1		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196bf3		a2 00		ldx #$00	                    LDX #0
.196bf5		bf 21 6c 19	lda $196c21,x	vicky_loop          LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.196bf9		9f 40 1f af	sta $af1f40,x	                    STA @l FG_CHAR_LUT_PTR,X        ; Set the corresponding foreground color component on Vicky
.196bfd		9f 80 1f af	sta $af1f80,x	                    STA @l BG_CHAR_LUT_PTR,X        ; Set the corresponding background color component on Vicky
.196c01		e8		inx		                    INX
.196c02		e0 40		cpx #$40	                    CPX #4*16
.196c04		d0 ef		bne $196bf5	                    BNE vicky_loop
.196c06		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Check to see if EVID is present
.196c0a		f0 13		beq $196c1f	                    BEQ done                        ; If not, we're done
.196c0c		a2 00		ldx #$00	                    LDX #0
.196c0e		bf 21 6c 19	lda $196c21,x	evid_loop           LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.196c12		9f 00 1b ae	sta $ae1b00,x	                    STA @l EVID_FG_LUT,X            ; Set the corresponding foreground color component on the EVID card
.196c16		9f 40 1b ae	sta $ae1b40,x	                    STA @l EVID_BG_LUT,X            ; Set the corresponding background color component on the EVID card
.196c1a		e8		inx		                    INX
.196c1b		e0 40		cpx #$40	                    CPX #4*16
.196c1d		d0 ef		bne $196c0e	                    BNE evid_loop
.196c1f		28		plp		done                PLP
.196c20		6b		rtl		                    RTL
.196c21						ANSI_TEXT_LUT
>196c21		00 00 00 00			                    .byte 0, 0, 0, 0
>196c25		00 00 80 00			                    .byte 0, 0, 128, 0
>196c29		00 80 00 00			                    .byte 0, 128, 0, 0
>196c2d		00 80 80 00			                    .byte 0, 128, 128, 0
>196c31		80 00 00 00			                    .byte 128, 0, 0, 0
>196c35		80 00 80 00			                    .byte 128, 0, 128, 0
>196c39		80 80 00 00			                    .byte 128, 128, 0, 0
>196c3d		c0 c0 c0 00			                    .byte 192, 192, 192, 0
>196c41		80 80 80 00			                    .byte 128, 128, 128, 0
>196c45		00 00 ff 00			                    .byte 0, 0, 255, 0
>196c49		00 ff 00 00			                    .byte 0, 255, 0, 0
>196c4d		00 ff ff 00			                    .byte 0, 255, 255, 0
>196c51		ff 00 00 00			                    .byte 255, 0, 0, 0
>196c55		00 7f fc 00			                    .byte 0, 127, 252, 0
>196c59		ff ff 00 00			                    .byte 255, 255, 0, 0
>196c5d		ff ff ff 00			                    .byte 255, 255, 255, 0
.196c61						INIT_SCREEN_Y
.196c61		c2 30		rep #$30	                REP #$30        ; set A&X long
.196c63		c0 00 00	cpy #$0000	                    CPY #0
.196c66		f0 06		beq $196c6e	                    BEQ setdp_0
.196c68		a9 60 00	lda #$0060	setdp_1             LDA #<>EVID_SCREENBEGIN         ; Set DP to the EVID variable block
.196c6b		5b		tcd		                    TCD
.196c6c		80 04		bra $196c72	                    BRA set_addresses
.196c6e		a9 0c 00	lda #$000c	setdp_0             LDA #<>SCREENBEGIN              ; Set DP to the main screen variable block
.196c71		5b		tcd		                    TCD
.196c72		98		tya		set_addresses       TYA                             ; Compute offset to screen Y's addresses
.196c73		0a		asl a		                    ASL A
.196c74		0a		asl a		                    ASL A
.196c75		aa		tax		                    TAX
.196c76		bf b1 6c 19	lda $196cb1,x	                    LDA @l text_address,X
.196c7a		85 00		sta $0320	                    STA #S_ANSI_VARS.SCREENBEGIN,D  ; Set the address of the text matrix
.196c7c		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D    ; And the cursor pointer
.196c7e		e2 20		sep #$20	                SEP #$20        ; set A short
.196c80		bf b3 6c 19	lda $196cb3,x	                    LDA @l text_address+2,X
.196c84		85 02		sta $0322	                    STA #S_ANSI_VARS.SCREENBEGIN+2,D
.196c86		85 0d		sta $032d	                    STA #S_ANSI_VARS.CURSORPOS+2,D
.196c88		c2 20		rep #$20	                REP #$20        ; set A long
.196c8a		bf b9 6c 19	lda $196cb9,x	                    LDA @l color_address,X
.196c8e		85 16		sta $0336	                    STA #S_ANSI_VARS.COLORBEGIN,D   ; Set the address of the color matrix
.196c90		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D     ; And the color cursor pointer
.196c92		e2 20		sep #$20	                SEP #$20        ; set A short
.196c94		bf bb 6c 19	lda $196cbb,x	                    LDA @l color_address+2,X
.196c98		85 18		sta $0338	                    STA #S_ANSI_VARS.COLORBEGIN+2,D
.196c9a		85 15		sta $0335	                    STA #S_ANSI_VARS.COLORPOS+2,D
.196c9c		c2 20		rep #$20	                REP #$20        ; set A long
.196c9e		64 0e		stz $032e	                    STZ #S_ANSI_VARS.CURSORX,D      ; Set the cursor position to 0, 0
.196ca0		64 10		stz $0330	                    STZ #S_ANSI_VARS.CURSORY,D
.196ca2		e2 20		sep #$20	                SEP #$20        ; set A short
.196ca4		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D        ; Set the state of the ANSI parser to S0
.196ca6		64 1f		stz $033f	                    STZ #S_ANSI_VARS.CONTROL,D      ; Set the control bits to 0 (default)
.196ca8		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.196caa		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D     ; Set the current color to the default
.196cac		22 fa 6c 19	jsl $196cfa	                    JSL ANSI_SETSIZE_Y              ; Set the size variables for the main screen
.196cb0		6b		rtl		                    RTL
>196cb1		00 a0 af 00 00 20 ae 00		text_address        .dword CS_TEXT_MEM_PTR, EVID_TEXT_MEM
>196cb9		00 c0 af 00 00 40 ae 00		color_address       .dword CS_COLOR_MEM_PTR, EVID_COLOR_MEM
.196cc1						ANSI_SETSIZES
.196cc1		48		pha		                    PHA
.196cc2		da		phx		                    PHX
.196cc3		5a		phy		                    PHY
.196cc4		0b		phd		                    PHD
.196cc5		08		php		                    PHP
.196cc6		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196cc8		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Save the current output channel
.196ccc		48		pha		                    PHA
.196ccd		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; Set the sizes for the main screen
.196ccf		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.196cd3		22 bd 6d 19	jsl $196dbd	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.196cd7		a0 00		ldy #$00	                    LDY #0
.196cd9		22 fa 6c 19	jsl $196cfa	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.196cdd		a9 04		lda #$04	                    LDA #CHAN_EVID                  ; Set the sizes for the EVID screen
.196cdf		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.196ce3		22 bd 6d 19	jsl $196dbd	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.196ce7		b0 06		bcs $196cef	                    BCS done                        ; Not present, just return
.196ce9		a0 01		ldy #$01	                    LDY #1
.196ceb		22 fa 6c 19	jsl $196cfa	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.196cef		68		pla		done                PLA
.196cf0		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT                 ; Restore the output channel
.196cf4		28		plp		                    PLP
.196cf5		2b		pld		                    PLD
.196cf6		7a		ply		                    PLY
.196cf7		fa		plx		                    PLX
.196cf8		68		pla		                    PLA
.196cf9		6b		rtl		                    RTL
.196cfa						ANSI_SETSIZE_Y
.196cfa		08		php		                    PHP
.196cfb		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196cfd		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196cff		f0 06		beq $196d07	                    BEQ vky_master                      ; Yes: get the resolution from Vicky
.196d01		af 01 1e ae	lda $ae1e01	                    LDA @l EVID_MSTR_CTRL_REG_H         ; No: get the resolution from EVID
.196d05		80 04		bra $196d0b	                    BRA resolution
.196d07		af 01 00 af	lda $af0001	vky_master          LDA @l MASTER_CTRL_REG_H
.196d0b		29 03		and #$03	resolution          AND #$03                            ; Mask off the resolution bits
.196d0d		0a		asl a		                    ASL A
.196d0e		aa		tax		                    TAX                                 ; Index to the col/line count in X
.196d0f		c2 20		rep #$20	                REP #$20        ; set A long
.196d11		bf ad 6d 19	lda $196dad,x	                    LDA @l cols_by_res,X                ; Get the number of columns
.196d15		85 05		sta $0325	                    STA #S_ANSI_VARS.COLS_PER_LINE,D    ; This is how many columns there are per line in the memory
.196d17		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D     ; This is how many would be visible with no border
.196d19		bf b5 6d 19	lda $196db5,x	                    LDA @l lines_by_res,X               ; Get the number of lines
.196d1d		85 09		sta $0329	                    STA #S_ANSI_VARS.LINES_MAX,D        ; This is the total number of lines in memory
.196d1f		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D    ; This is how many lines would be visible with no border
.196d21		e2 20		sep #$20	                SEP #$20        ; set A short
.196d23		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196d25		f0 06		beq $196d2d	                    BEQ vky_border                      ; Yes: get the border from Vicky
.196d27		af 04 1e ae	lda $ae1e04	                    LDA @l EVID_BORDER_CTRL_REG         ; No: Check EVID to see if we have a border
.196d2b		80 04		bra $196d31	                    BRA border
.196d2d		af 04 00 af	lda $af0004	vky_border          LDA @l BORDER_CTRL_REG              ; Check Vicky to see if we have a border
.196d31		89 01		bit #$01	border              BIT #Border_Ctrl_Enable
.196d33		f0 76		beq $196dab	                    BEQ done                            ; No border... the sizes are correct now
.196d35		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196d37		f0 06		beq $196d3f	                    BEQ vky_border_size                 ; Yes: get the border size from Vicky
.196d39		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the horizontal border width from EVID
.196d3d		80 04		bra $196d43	                    BRA get_border_x_size
.196d3f		af 08 00 af	lda $af0008	vky_border_size     LDA @l BORDER_X_SIZE                ; Get the horizontal border width from Vicky
.196d43		29 3f		and #$3f	get_border_x_size   AND #$3F
.196d45		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.196d47		d0 04		bne $196d4d	                    BNE frac_width
.196d49		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.196d4a		4a		lsr a		                    LSR A
.196d4b		80 03		bra $196d50	                    BRA store_width
.196d4d		4a		lsr a		frac_width          LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.196d4e		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.196d4f		1a		inc a		                    INC A
.196d50		85 19		sta $0339	store_width         STA #S_ANSI_VARS.TMPPTR1,D
.196d52		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.196d54		e2 20		sep #$20	                SEP #$20        ; set A short
.196d56		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.196d58		f0 0c		beq $196d66	                    BEQ adjust_width                    ; Yes: skip the pixel doubling check
.196d5a		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check Vucky if we're pixel doubling
.196d5e		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.196d60		f0 04		beq $196d66	                    BEQ adjust_width                    ; No... just adjust the width of the screen
.196d62		c2 20		rep #$20	                REP #$20        ; set A long
.196d64		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.196d66						adjust_width
.196d66		c2 20		rep #$20	                REP #$20        ; set A long
.196d68		38		sec		                    SEC
.196d69		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.196d6b		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.196d6d		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D
.196d6f		e2 20		sep #$20	                SEP #$20        ; set A short
.196d71		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196d73		f0 06		beq $196d7b	                    BEQ vky_border_y_size               ; Yes: get the border Y size from Vicky
.196d75		af 09 1e ae	lda $ae1e09	                    LDA @l EVID_BORDER_Y_SIZE           ; No: Get the vertical border width from EVID
.196d79		80 04		bra $196d7f	                    BRA get_border_y_size
.196d7b		af 09 00 af	lda $af0009	vky_border_y_size   LDA @l BORDER_Y_SIZE                ; Get the vertical border width from Vicky
.196d7f		29 3f		and #$3f	get_border_y_size   AND #$3F
.196d81		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.196d83		d0 04		bne $196d89	                    BNE frac_height
.196d85		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.196d86		4a		lsr a		                    LSR A
.196d87		80 03		bra $196d8c	                    BRA store_height
.196d89		4a		lsr a		frac_height         LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.196d8a		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.196d8b		1a		inc a		                    INC A
.196d8c		85 19		sta $0339	store_height        STA #S_ANSI_VARS.TMPPTR1,D
.196d8e		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.196d90		e2 20		sep #$20	                SEP #$20        ; set A short
.196d92		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.196d94		f0 0c		beq $196da2	                    BEQ adjust_height                   ; Yes: skip the pixel doubling check
.196d96		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check if we're pixel doubling
.196d9a		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.196d9c		f0 04		beq $196da2	                    BEQ adjust_height                   ; No... just adjust the height of the screen
.196d9e		c2 20		rep #$20	                REP #$20        ; set A long
.196da0		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.196da2						adjust_height
.196da2		c2 20		rep #$20	                REP #$20        ; set A long
.196da4		38		sec		                    SEC
.196da5		a5 09		lda $0329	                    LDA #S_ANSI_VARS.LINES_MAX,D
.196da7		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.196da9		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D
.196dab		28		plp		done                PLP
.196dac		6b		rtl		                    RTL
>196dad		50 00 64 00 28 00 32 00		cols_by_res         .word 80,100,40,50
>196db5		3c 00 4b 00 1e 00 25 00		lines_by_res        .word 60,75,30,37
.196dbd						ANSI_SETDEVICE
.196dbd		48		pha		                    PHA
.196dbe		08		php		                    PHP
.196dbf		e2 20		sep #$20	                SEP #$20        ; set A short
.196dc1		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check the current output channel
.196dc5		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE               ; Is it the console?
.196dc7		f0 08		beq $196dd1	                    BEQ console                     ; Yes: point to the console
.196dc9		c9 04		cmp #$04	                    CMP #CHAN_EVID                  ; Is it the EVID?
.196dcb		f0 0b		beq $196dd8	                    BEQ evid                        ; Check to see if the EVID is present
.196dcd		28		plp		bad_device          PLP
.196dce		68		pla		                    PLA
.196dcf		38		sec		                    SEC
.196dd0		6b		rtl		                    RTL
.196dd1						console
.196dd1		c2 20		rep #$20	                REP #$20        ; set A long
.196dd3		a9 0c 00	lda #$000c	                    LDA #<>SCREENBEGIN              ; Point to the the main screen's variables
.196dd6		80 0d		bra $196de5	                    BRA set_dp
.196dd8						evid
.196dd8		e2 20		sep #$20	                SEP #$20        ; set A short
.196dda		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Is the EVID present?
.196dde		f0 ed		beq $196dcd	                    BEQ bad_device                  ; No: return that the device is bad
.196de0		c2 20		rep #$20	                REP #$20        ; set A long
.196de2		a9 60 00	lda #$0060	                    LDA #<>EVID_SCREENBEGIN         ; Yes: point to the EVID's variables
.196de5		5b		tcd		set_dp              TCD
.196de6		28		plp		                    PLP
.196de7		68		pla		                    PLA
.196de8		18		clc		                    CLC
.196de9		6b		rtl		                    RTL
.196dea						ANSI_PUTC
.196dea		da		phx		                    PHX
.196deb		5a		phy		                    PHY
.196dec		0b		phd		                    PHD
.196ded		08		php		                    PHP
.196dee		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196df0		22 bd 6d 19	jsl $196dbd	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.196df4		90 03		bcc $196df9	                    BCC get_state               ; If valid, check the current state
.196df6		82 9d 00	brl $196e96	                    BRL done                    ; If invalid, just return
.196df9		a6 1e		ldx $033e	get_state           LDX #S_ANSI_VARS.STATE,D    ; Get the current state
.196dfb		f0 0c		beq $196e09	                    BEQ do_st_init              ; Dispatch to the correct code for the state
.196dfd		e0 01		cpx #$01	                    CPX #ST_ESCAPE
.196dff		f0 21		beq $196e22	                    BEQ do_st_escape
.196e01		e0 02		cpx #$02	                    CPX #ST_CSI
.196e03		f0 3f		beq $196e44	                    BEQ do_st_csi
.196e05		64 1e		stz $033e	pr_and_reset        STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.196e07		80 06		bra $196e0f	                    BRA print_raw
.196e09		c9 1b		cmp #$1b	do_st_init          CMP #CHAR_ESC               ; Is it ESC?
.196e0b		f0 09		beq $196e16	                    BEQ go_escape               ; Yes, handle the ESC
.196e0d		90 0d		bcc $196e1c	                    BLT do_control              ; If less than, handle as a control code
.196e0f		22 77 6f 19	jsl $196f77	print_raw           JSL ANSI_PUTRAWC            ; Otherwise: Just print the raw character
.196e13		82 80 00	brl $196e96	                    BRL done
.196e16		a9 01		lda #$01	go_escape           LDA #ST_ESCAPE
.196e18		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the ESCAPE state
.196e1a		80 7a		bra $196e96	                    BRA done
.196e1c		22 2e 6f 19	jsl $196f2e	do_control          JSL ANSI_PR_CONTROL         ; Hand a single byte control code
.196e20		80 74		bra $196e96	                    BRA done
.196e22		c9 5c		cmp #$5c	do_st_escape        CMP #'\'                    ; Have we gotten 'ESC\' (String terminator)?
.196e24		f0 08		beq $196e2e	                    BEQ go_init                 ; Yes: go back to the init state (we do nothing with this)
.196e26		c9 5f		cmp #$5f	chk_apc             CMP #'_'                    ; Have we gotten 'ESC_' (Application Program Command)?
.196e28		d0 0a		bne $196e34	                    BNE chk_csi                 ; No: check to see if we have a CSI
.196e2a		22 3f 10 19	jsl $19103f	                    JSL SHOW_CREDITS            ; Yes: show the credits
.196e2e		a9 00		lda #$00	go_init             LDA #ST_INIT
.196e30		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the INIT state
.196e32		80 62		bra $196e96	                    BRA done
.196e34		c9 5b		cmp #$5b	chk_csi             CMP #'['                    ; Have we gotten 'ESC['?
.196e36		d0 cd		bne $196e05	                    BNE pr_and_reset            ; No: print this and return to ST_INIT
.196e38		64 21		stz $0341	                    STZ #S_ANSI_VARS.ARG0,D     ; Clear the arguments
.196e3a		64 22		stz $0342	                    STZ #S_ANSI_VARS.ARG1,D
.196e3c		64 20		stz $0340	                    STZ #S_ANSI_VARS.ARGC,D
.196e3e		a9 02		lda #$02	                    LDA #ST_CSI
.196e40		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the CSI state
.196e42		80 52		bra $196e96	                    BRA done
.196e44		c9 30		cmp #$30	do_st_csi           CMP #'0'                    ; Do we have a digit?
.196e46		90 1d		bcc $196e65	                    BLT csi_not_digit
.196e48		c9 3a		cmp #$3a	                    CMP #'9'+1
.196e4a		b0 19		bcs $196e65	                    BGE csi_not_digit
.196e4c		38		sec		                    SEC                         ; Have digit... convert to a number
.196e4d		e9 30		sbc #$30	                    SBC #'0'
.196e4f		48		pha		                    PHA                         ; Save it
.196e50		a6 20		ldx $0340	                    LDX #S_ANSI_VARS.ARGC,D
.196e52		16 21		asl $0341,x	                    ASL #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 2
.196e54		b5 21		lda $0341,x	                    LDA #S_ANSI_VARS.ARG0,D,X
.196e56		0a		asl a		                    ASL A                       ; A := arg * 4
.196e57		0a		asl a		                    ASL A                       ; A := arg * 8
.196e58		18		clc		                    CLC
.196e59		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10
.196e5b		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := A
.196e5d		18		clc		                    CLC
.196e5e		68		pla		                    PLA                         ; Get the digit back
.196e5f		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10 + digit
.196e61		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 10 + digit
.196e63		80 31		bra $196e96	                    BRA done                    ; And we're done with this particular character
.196e65		c9 3b		cmp #$3b	csi_not_digit       CMP #';'                    ; Is it an argument separator?
.196e67		d0 0e		bne $196e77	                    BNE csi_not_sep
.196e69		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D     ; Get the argument count
.196e6b		c9 02		cmp #$02	                    CMP #ANSI_MAX_ARG           ; Are we at the maximum argument count?
.196e6d		d0 03		bne $196e72	                    BNE csi_next_arg            ; No: move to the next argument
.196e6f		82 93 ff	brl $196e05	                    BRL pr_and_reset            ; Yes: print and reset state
.196e72		1a		inc a		csi_next_arg        INC A
.196e73		85 20		sta $0340	                    STA #S_ANSI_VARS.ARGC,D     ; Set the new argument count
.196e75		80 1f		bra $196e96	                    BRA done                    ; And we're done with this character
.196e77		c9 40		cmp #$40	csi_not_sep         CMP #'@'
.196e79		90 0a		bcc $196e85	                    BLT csi_not_upper
.196e7b		c9 5b		cmp #$5b	                    CMP #'Z'+1
.196e7d		b0 06		bcs $196e85	                    BGE csi_not_upper
.196e7f		22 a6 6e 19	jsl $196ea6	                    JSL ANSI_ANSI_UPPER         ; Process an ANSI upper case code
.196e83		80 11		bra $196e96	                    BRA done
.196e85		c9 61		cmp #$61	csi_not_upper       CMP #'a'
.196e87		90 0a		bcc $196e93	                    BLT csi_not_lower
.196e89		c9 7b		cmp #$7b	                    CMP #'z'+1
.196e8b		b0 06		bcs $196e93	                    BGE csi_not_lower
.196e8d		22 eb 6e 19	jsl $196eeb	                    JSL ANSI_ANSI_LOWER         ; Process an ANSI lower case code
.196e91		80 03		bra $196e96	                    BRA done
.196e93		82 6f ff	brl $196e05	csi_not_lower       BRL pr_and_reset            ; Invalid sequence: print it and reset
.196e96		28		plp		done                PLP
.196e97		2b		pld		                    PLD
.196e98		7a		ply		                    PLY
.196e99		fa		plx		                    PLX
.196e9a		6b		rtl		                    RTL
.196e9b						ANSI_INVALID
.196e9b		08		php		                    PHP
.196e9c		e2 20		sep #$20	                SEP #$20        ; set A short
.196e9e		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.196ea0		22 77 6f 19	jsl $196f77	                    JSL ANSI_PUTRAWC            ; Print the character
.196ea4		28		plp		                    PLP
.196ea5		6b		rtl		                    RTL
.196ea6						ANSI_ANSI_UPPER
.196ea6		08		php		                    PHP
.196ea7		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196ea9		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.196eab		38		sec		                    SEC
.196eac		e9 40		sbc #$40	                    SBC #'@'
.196eae		0a		asl a		                    ASL A
.196eaf		aa		tax		                    TAX
.196eb0		fc b5 6e	jsr ($196eb5,x)	                    JSR (ansi_table,X)
.196eb3		28		plp		                    PLP
.196eb4		6b		rtl		                    RTL
>196eb5		0f 72				ansi_table          .word <>ANSI_ICH        ; '@' -- ICH -- Insert Character
>196eb7		92 6f				                    .word <>ANSI_CUU        ; 'A' -- CUU -- Cursor Up
>196eb9		a6 6f				                    .word <>ANSI_CUD        ; 'B' -- CUD -- Cursor Down
>196ebb		ba 6f				                    .word <>ANSI_CUF        ; 'C' -- CUF -- Cursor Forward
>196ebd		ce 6f				                    .word <>ANSI_CUB        ; 'D' -- CUB -- Cursor Back
>196ebf		9b 6e				                    .word <>ANSI_INVALID    ; 'E' -- CNL -- Cursor Next Line
>196ec1		9b 6e				                    .word <>ANSI_INVALID    ; 'F' -- CPL -- Cursor Previous Line
>196ec3		9b 6e				                    .word <>ANSI_INVALID    ; 'G' -- CHA -- Cursor Horizontal Absolute
>196ec5		e2 6f				                    .word <>ANSI_CUP        ; 'H' -- CUP -- Cursor Position
>196ec7		9b 6e				                    .word <>ANSI_INVALID    ; 'I'
>196ec9		61 71				                    .word <>ANSI_ED         ; 'J' -- ED -- Erase In Display
>196ecb		be 71				                    .word <>ANSI_EL         ; 'K' -- EL -- Erase In Line
>196ecd		9b 6e				                    .word <>ANSI_INVALID    ; 'L'
>196ecf		9b 6e				                    .word <>ANSI_INVALID    ; 'M'
>196ed1		9b 6e				                    .word <>ANSI_INVALID    ; 'N'
>196ed3		9b 6e				                    .word <>ANSI_INVALID    ; 'O'
>196ed5		53 72				                    .word <>ANSI_DCH        ; 'P' -- DCH -- Delete Character
>196ed7		9b 6e				                    .word <>ANSI_INVALID    ; 'Q'
>196ed9		9b 6e				                    .word <>ANSI_INVALID    ; 'R'
>196edb		9b 6e				                    .word <>ANSI_INVALID    ; 'S' -- SU -- Scroll Up
>196edd		9b 6e				                    .word <>ANSI_INVALID    ; 'T' -- SD -- Scroll Down
>196edf		9b 6e				                    .word <>ANSI_INVALID    ; 'U'
>196ee1		9b 6e				                    .word <>ANSI_INVALID    ; 'V'
>196ee3		9b 6e				                    .word <>ANSI_INVALID    ; 'W'
>196ee5		9b 6e				                    .word <>ANSI_INVALID    ; 'X'
>196ee7		9b 6e				                    .word <>ANSI_INVALID    ; 'Y'
>196ee9		9b 6e				                    .word <>ANSI_INVALID    ; 'Z'
.196eeb						ANSI_ANSI_LOWER
.196eeb		08		php		                    PHP
.196eec		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196eee		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.196ef0		38		sec		                    SEC
.196ef1		e9 61		sbc #$61	                    SBC #'a'
.196ef3		0a		asl a		                    ASL A
.196ef4		aa		tax		                    TAX
.196ef5		fc fa 6e	jsr ($196efa,x)	                    JSR (ansi_table,X)
.196ef8		28		plp		                    PLP
.196ef9		6b		rtl		                    RTL
>196efa		9b 6e				ansi_table          .word <>ANSI_INVALID    ; 'a'
>196efc		9b 6e				                    .word <>ANSI_INVALID    ; 'b'
>196efe		9b 6e				                    .word <>ANSI_INVALID    ; 'c'
>196f00		9b 6e				                    .word <>ANSI_INVALID    ; 'd'
>196f02		9b 6e				                    .word <>ANSI_INVALID    ; 'e'
>196f04		9b 6e				                    .word <>ANSI_INVALID    ; 'f' -- HVP -- Horizontal Vertical Position
>196f06		9b 6e				                    .word <>ANSI_INVALID    ; 'g'
>196f08		fb 6f				                    .word <>ANSI_SET_MODE   ; 'h'
>196f0a		9b 6e				                    .word <>ANSI_INVALID    ; 'i'
>196f0c		9b 6e				                    .word <>ANSI_INVALID    ; 'j'
>196f0e		9b 6e				                    .word <>ANSI_INVALID    ; 'k'
>196f10		38 70				                    .word <>ANSI_RESET_MODE ; 'l'
>196f12		75 70				                    .word <>ANSI_SGR        ; 'm' -- SGR -- Select Graphics Rendition
>196f14		9b 6e				                    .word <>ANSI_INVALID    ; 'n'
>196f16		9b 6e				                    .word <>ANSI_INVALID    ; 'o'
>196f18		9b 6e				                    .word <>ANSI_INVALID    ; 'p'
>196f1a		9b 6e				                    .word <>ANSI_INVALID    ; 'q'
>196f1c		9b 6e				                    .word <>ANSI_INVALID    ; 'r'
>196f1e		9b 6e				                    .word <>ANSI_INVALID    ; 's'
>196f20		9b 6e				                    .word <>ANSI_INVALID    ; 't'
>196f22		9b 6e				                    .word <>ANSI_INVALID    ; 'u'
>196f24		9b 6e				                    .word <>ANSI_INVALID    ; 'v'
>196f26		9b 6e				                    .word <>ANSI_INVALID    ; 'w'
>196f28		9b 6e				                    .word <>ANSI_INVALID    ; 'x'
>196f2a		9b 6e				                    .word <>ANSI_INVALID    ; 'y'
>196f2c		9b 6e				                    .word <>ANSI_INVALID    ; 'z'
.196f2e						ANSI_PR_CONTROL
.196f2e		08		php		                    PHP
.196f2f		e2 20		sep #$20	                SEP #$20        ; set A short
.196f31		c2 10		rep #$10	                REP #$10        ; set X long
.196f33		c9 0d		cmp #$0d	                    CMP #CHAR_CR                ; Handle carriage return
.196f35		f0 12		beq $196f49	                    BEQ do_cr
.196f37		c9 0a		cmp #$0a	                    CMP #CHAR_LF                ; Handle line feed
.196f39		f0 1a		beq $196f55	                    BEQ do_lf
.196f3b		c9 08		cmp #$08	                    CMP #CHAR_BS                ; Handle back space
.196f3d		f0 1c		beq $196f5b	                    BEQ do_bs
.196f3f		c9 09		cmp #$09	                    CMP #CHAR_TAB               ; Handle TAB
.196f41		f0 1e		beq $196f61	                    BEQ do_tab
.196f43		22 77 6f 19	jsl $196f77	                    JSL ANSI_PUTRAWC            ; Otherwise, just print it raw and wriggling!
.196f47		80 2c		bra $196f75	                    BRA done
.196f49		a2 00 00	ldx #$0000	do_cr               LDX #0                      ; Move to the beginning of the next line
.196f4c		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.196f4e		c8		iny		                    INY
.196f4f		22 2c 73 19	jsl $19732c	                    JSL ANSI_LOCATE
.196f53		80 20		bra $196f75	                    BRA done
.196f55		22 09 73 19	jsl $197309	do_lf               JSL ANSI_CSRDOWN            ; Move the cursor down a line
.196f59		80 1a		bra $196f75	                    BRA done
.196f5b		22 cd 72 19	jsl $1972cd	do_bs               JSL ANSI_CSRLEFT            ; Move the cursor to the left (TODO: delete to the left?)
.196f5f		80 14		bra $196f75	                    BRA done
.196f61						do_tab
.196f61		c2 30		rep #$30	                REP #$30        ; set A&X long
.196f63		a5 0e		lda $032e	                    LDA #S_ANSI_VARS.CURSORX,D  ; Move to the next power 8th column
.196f65		29 f8 ff	and #$fff8	                    AND #$FFF8
.196f68		18		clc		                    CLC
.196f69		69 08 00	adc #$0008	                    ADC #$0008
.196f6c		aa		tax		                    TAX
.196f6d		e2 20		sep #$20	                SEP #$20        ; set A short
.196f6f		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.196f71		22 2c 73 19	jsl $19732c	                    JSL ANSI_LOCATE
.196f75		28		plp		done                PLP
.196f76		6b		rtl		                    RTL
.196f77						ANSI_PUTRAWC
.196f77		da		phx		                    PHX
.196f78		5a		phy		                    PHY
.196f79		0b		phd		                    PHD
.196f7a		08		php		                    PHP
.196f7b		e2 20		sep #$20	                SEP #$20        ; set A short
.196f7d		22 bd 6d 19	jsl $196dbd	                    JSL ANSI_SETDEVICE              ; Look at the current output channel and point
.196f81		b0 0a		bcs $196f8d	                    BCS done                        ; If invalid, just return
.196f83		87 0b		sta [$032b]	                    STA [#S_ANSI_VARS.CURSORPOS,D]  ; Save the character on the screen
.196f85		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Set the color based on CURCOLOR
.196f87		87 13		sta [$0333]	                    STA [#S_ANSI_VARS.COLORPOS,D]
.196f89		22 a2 72 19	jsl $1972a2	                    JSL ANSI_CSRRIGHT              ; And advance the cursor
.196f8d		28		plp		done                PLP
.196f8e		2b		pld		                    PLD
.196f8f		7a		ply		                    PLY
.196f90		fa		plx		                    PLX
.196f91		6b		rtl		                    RTL
.196f92						ANSI_CUU
.196f92		08		php		                    PHP
.196f93		e2 20		sep #$20	                SEP #$20        ; set A short
.196f95		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196f97		d0 02		bne $196f9b	                    BNE loop                        ; Move so long as not 0
.196f99		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.196f9b		48		pha		loop                PHA                             ; Save the count
.196f9c		22 eb 72 19	jsl $1972eb	                    JSL ANSI_CSRUP                  ; Cursor Up
.196fa0		68		pla		                    PLA                             ; Restore the count
.196fa1		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196fa2		d0 f7		bne $196f9b	                    BNE loop
.196fa4		28		plp		                    PLP
.196fa5		60		rts		                    RTS
.196fa6						ANSI_CUD
.196fa6		08		php		                    PHP
.196fa7		e2 20		sep #$20	                SEP #$20        ; set A short
.196fa9		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196fab		d0 02		bne $196faf	                    BNE loop                        ; Move so long as not 0
.196fad		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.196faf		48		pha		loop                PHA                             ; Save the count
.196fb0		22 09 73 19	jsl $197309	                    JSL ANSI_CSRDOWN                ; Cursor Down
.196fb4		68		pla		                    PLA                             ; Restore the count
.196fb5		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196fb6		d0 f7		bne $196faf	                    BNE loop
.196fb8		28		plp		                    PLP
.196fb9		60		rts		                    RTS
.196fba						ANSI_CUF
.196fba		08		php		                    PHP
.196fbb		e2 20		sep #$20	                SEP #$20        ; set A short
.196fbd		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196fbf		d0 02		bne $196fc3	                    BNE loop                        ; Move so long as not 0
.196fc1		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.196fc3		48		pha		loop                PHA                             ; Save the count
.196fc4		22 a2 72 19	jsl $1972a2	                    JSL ANSI_CSRRIGHT               ; Cursor right
.196fc8		68		pla		                    PLA                             ; Restore the count
.196fc9		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196fca		d0 f7		bne $196fc3	                    BNE loop
.196fcc		28		plp		                    PLP
.196fcd		60		rts		                    RTS
.196fce						ANSI_CUB
.196fce		08		php		                    PHP
.196fcf		e2 20		sep #$20	                SEP #$20        ; set A short
.196fd1		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196fd3		d0 02		bne $196fd7	                    BNE loop                        ; Move so long as not 0
.196fd5		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.196fd7		48		pha		loop                PHA                             ; Save the count
.196fd8		22 cd 72 19	jsl $1972cd	                    JSL ANSI_CSRLEFT                ; Cursor left
.196fdc		68		pla		                    PLA                             ; Restore the count
.196fdd		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196fde		d0 f7		bne $196fd7	                    BNE loop
.196fe0		28		plp		                    PLP
.196fe1		60		rts		                    RTS
.196fe2						ANSI_CUP
.196fe2		08		php		                    PHP
.196fe3		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196fe5		a6 21		ldx $0341	                    LDX #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196fe7		d0 02		bne $196feb	                    BNE get_row
.196fe9		a2 01		ldx #$01	                    LDX #1                          ; Default to 1
.196feb		a4 22		ldy $0342	get_row             LDY #S_ANSI_VARS.ARG1,D         ; Get the second argument
.196fed		d0 02		bne $196ff1	                    BNE adjust_coords
.196fef		a0 01		ldy #$01	                    LDY #1                          ; Default to 1
.196ff1		ca		dex		adjust_coords       DEX                             ; Translate from base 1 to base 0 coordinates
.196ff2		88		dey		                    DEY
.196ff3		c2 30		rep #$30	                REP #$30        ; set A&X long
.196ff5		22 2c 73 19	jsl $19732c	                    JSL ANSI_LOCATE                 ; Set the cursor position
.196ff9		28		plp		                    PLP
.196ffa		60		rts		                    RTS
.196ffb						ANSI_SET_MODE
.196ffb		08		php		                    PHP
.196ffc		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196ffe		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.197000		c9 19		cmp #$19	                    CMP #25
.197002		d0 24		bne $197028	                    BNE chk_break
.197004		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.197008		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.19700a		d0 0c		bne $197018	                    BNE check_evid
.19700c		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.197010		09 01		ora #$01	                    ORA #Vky_Cursor_Enable
.197012		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.197016		80 1e		bra $197036	                    BRA done
.197018		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.19701a		d0 1a		bne $197036	                    BNE done
.19701c		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.197020		09 01		ora #$01	                    ORA #EVID_Cursor_Enable
.197022		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.197026		80 0e		bra $197036	                    BRA done
.197028		c9 1c		cmp #$1c	chk_break           CMP #28
.19702a		d0 0a		bne $197036	                    BNE done
.19702c		22 e3 77 19	jsl $1977e3	                    JSL KBD_GET_CONTROL
.197030		09 80		ora #$80	                    ORA #KBD_CTRL_BREAK
.197032		22 f6 77 19	jsl $1977f6	                    JSL KBD_SET_CONTROL
.197036		28		plp		done                PLP
.197037		60		rts		                    RTS
.197038						ANSI_RESET_MODE
.197038		08		php		                    PHP
.197039		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19703b		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.19703d		c9 19		cmp #$19	                    CMP #25
.19703f		d0 24		bne $197065	                    BNE chk_break
.197041		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.197045		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.197047		d0 0c		bne $197055	                    BNE check_evid
.197049		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.19704d		29 fe		and #$fe	                    AND #~Vky_Cursor_Enable
.19704f		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.197053		80 1e		bra $197073	                    BRA done
.197055		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.197057		d0 1a		bne $197073	                    BNE done
.197059		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.19705d		29 fe		and #$fe	                    AND #~EVID_Cursor_Enable
.19705f		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.197063		80 0e		bra $197073	                    BRA done
.197065		c9 1c		cmp #$1c	chk_break           CMP #28
.197067		d0 0a		bne $197073	                    BNE done
.197069		22 e3 77 19	jsl $1977e3	                    JSL KBD_GET_CONTROL
.19706d		29 7f		and #$7f	                    AND #~KBD_CTRL_BREAK
.19706f		22 f6 77 19	jsl $1977f6	                    JSL KBD_SET_CONTROL
.197073		28		plp		done                PLP
.197074		60		rts		                    RTS
.197075						ANSI_SGR
.197075		08		php		                    PHP
.197076		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197078		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.19707a		d0 0d		bne $197089	                    BNE chk_1
.19707c		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR             ; 0 ==> Return to the default colors
.19707e		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197080		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Switch off inversion
.197082		29 3f		and #$3f	                    AND #~(CONTROL_INVERT | CONTROL_BOLD)
.197084		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.197086		82 d6 00	brl $19715f	                    BRL done
.197089		c9 01		cmp #$01	chk_1               CMP #1
.19708b		d0 0f		bne $19709c	                    BNE chk_2
.19708d		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Make the current color bold
.19708f		09 80		ora #$80	                    ORA #$80
.197091		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197093		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be bold
.197095		09 40		ora #$40	                    ORA #CONTROL_BOLD
.197097		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.197099		82 c3 00	brl $19715f	                    BRL done
.19709c		c9 02		cmp #$02	chk_2               CMP #2
.19709e		f0 04		beq $1970a4	                    BEQ normal_intensity
.1970a0		c9 16		cmp #$16	chk_22              CMP #22
.1970a2		d0 0f		bne $1970b3	                    BNE chk_7
.1970a4		a5 12		lda $0332	normal_intensity    LDA #S_ANSI_VARS.CURCOLOR,D     ; 2 ==> Set the foreground to normal intensity
.1970a6		29 7f		and #$7f	                    AND #~$80
.1970a8		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1970aa		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be normal
.1970ac		29 bf		and #$bf	                    AND #~CONTROL_BOLD
.1970ae		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.1970b0		82 ac 00	brl $19715f	                    BRL done
.1970b3		c9 07		cmp #$07	chk_7               CMP #7
.1970b5		d0 2c		bne $1970e3	                    BNE chk_27
.1970b7		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors already inverted?
.1970b9		89 80		bit #$80	                    BIT #CONTROL_INVERT
.1970bb		f0 03		beq $1970c0	                    BEQ invert_on
.1970bd		82 9f 00	brl $19715f	                    BRL done                        ; Yes: just finish
.1970c0		09 80		ora #$80	invert_on           ORA #CONTROL_INVERT             ; No: Mark that the colors are inverted
.1970c2		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.1970c4		a5 12		lda $0332	swap_colors         LDA #S_ANSI_VARS.CURCOLOR,D     ; Exchange the upper and lower nibbles
.1970c6		0a		asl a		                    ASL  A
.1970c7		69 80		adc #$80	                    ADC  #$80
.1970c9		2a		rol a		                    ROL  A
.1970ca		0a		asl a		                    ASL  A
.1970cb		69 80		adc #$80	                    ADC  #$80
.1970cd		2a		rol a		                    ROL  A
.1970ce		29 f7		and #$f7	                    AND #%11110111                  ; Make sure the background is not bolded
.1970d0		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1970d2		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.1970d4		89 40		bit #$40	                    BIT #CONTROL_BOLD
.1970d6		d0 03		bne $1970db	                    BNE bold_on
.1970d8		82 84 00	brl $19715f	                    BRL done                        ; No: we're done
.1970db		a5 12		lda $0332	bold_on             LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.1970dd		09 80		ora #$80	                    ORA #$80
.1970df		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1970e1		80 7c		bra $19715f	                    BRA done
.1970e3		c9 1b		cmp #$1b	chk_27              CMP #27
.1970e5		d0 0c		bne $1970f3	                    BNE chk_39
.1970e7		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors inverted?
.1970e9		89 80		bit #$80	                    BIT #CONTROL_INVERT
.1970eb		f0 72		beq $19715f	                    BEQ done                        ; No: just finish
.1970ed		29 7f		and #$7f	                    AND #~CONTROL_INVERT            ; Yes: Mark that the colors are back to normal
.1970ef		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.1970f1		80 d1		bra $1970c4	                    BRA swap_colors                 ; And go swap the colors
.1970f3		c9 27		cmp #$27	chk_39              CMP #39
.1970f5		d0 10		bne $197107	                    BNE chk_49
.1970f7		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.1970f9		29 0f		and #$0f	                    AND #$0F
.1970fb		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1970fd		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.1970ff		29 f0		and #$f0	                    AND #$F0
.197101		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.197103		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197105		80 58		bra $19715f	                    BRA done
.197107		c9 31		cmp #$31	chk_49              CMP #49
.197109		d0 10		bne $19711b	                    BNE chk_foreground
.19710b		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.19710d		29 f0		and #$f0	                    AND #$F0
.19710f		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197111		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.197113		29 0f		and #$0f	                    AND #$0F
.197115		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.197117		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197119		80 44		bra $19715f	                    BRA done
.19711b		c9 1e		cmp #$1e	chk_foreground      CMP #30                         ; If [30..37], set the foreground color
.19711d		90 29		bcc $197148	                    BLT chk_background
.19711f		c9 26		cmp #$26	                    CMP #38
.197121		b0 25		bcs $197148	                    BGE chk_background
.197123		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.197125		29 0f		and #$0f	                    AND #$0F
.197127		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197129		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.19712b		38		sec		                    SEC
.19712c		e9 1e		sbc #$1e	                    SBC #30
.19712e		0a		asl a		                    ASL A
.19712f		0a		asl a		                    ASL A
.197130		0a		asl a		                    ASL A
.197131		0a		asl a		                    ASL A
.197132		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.197134		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197136		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.197138		89 40		bit #$40	                    BIT #CONTROL_BOLD
.19713a		d0 03		bne $19713f	                    BNE bold_fore                   ; No: we're done
.19713c		82 20 00	brl $19715f	                    BRL done
.19713f		a5 12		lda $0332	bold_fore           LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.197141		09 80		ora #$80	                    ORA #$80
.197143		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197145		82 17 00	brl $19715f	                    BRL done
.197148		c9 28		cmp #$28	chk_background      CMP #40                         ; If [40..47], set the background color
.19714a		90 13		bcc $19715f	                    BLT done
.19714c		c9 30		cmp #$30	                    CMP #48
.19714e		b0 0f		bcs $19715f	                    BGE done
.197150		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.197152		29 f0		and #$f0	                    AND #$F0
.197154		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197156		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.197158		38		sec		                    SEC
.197159		e9 28		sbc #$28	                    SBC #40
.19715b		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.19715d		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.19715f		28		plp		done                PLP
.197160		60		rts		                    RTS
.197161						ANSI_ED
.197161		5a		phy		                    PHY
.197162		08		php		                    PHP
.197163		e2 20		sep #$20	                SEP #$20        ; set A short
.197165		c2 10		rep #$10	                REP #$10        ; set X long
.197167		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.197169		d0 1b		bne $197186	                    BNE not_0                           ; Is the code 0?
.19716b						code_0
.19716b		c2 20		rep #$20	                REP #$20        ; set A long
.19716d		38		sec		                    SEC                                 ; Calculate min index to erase
.19716e		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.197170		e5 00		sbc $0320	                    SBC #S_ANSI_VARS.SCREENBEGIN,D
.197172		a8		tay		                    TAY
.197173		e2 20		sep #$20	                SEP #$20        ; set A short
.197175		a9 20		lda #$20	code_2_loop         LDA #' '
.197177		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.197179		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.19717b		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.19717d		c8		iny		                    INY
.19717e		c0 00 20	cpy #$2000	                    CPY #$2000
.197181		d0 f2		bne $197175	                    BNE code_2_loop
.197183		82 35 00	brl $1971bb	                    BRL done
.197186		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.197188		d0 18		bne $1971a2	                    BNE not_1
.19718a						code_1
.19718a		c2 20		rep #$20	                REP #$20        ; set A long
.19718c		38		sec		                    SEC                                 ; Calculate max index to erase
.19718d		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.19718f		e5 00		sbc $0320	                    SBC #S_ANSI_VARS.SCREENBEGIN,D
.197191		a8		tay		                    TAY
.197192		e2 20		sep #$20	                SEP #$20        ; set A short
.197194		a9 20		lda #$20	code_1_loop         LDA #' '
.197196		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.197198		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.19719a		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.19719c		88		dey		                    DEY                                 ; Move to the previous index
.19719d		10 f5		bpl $197194	                    BPL code_1_loop                     ; And loop until we're done
.19719f		82 19 00	brl $1971bb	                    BRL done
.1971a2		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.1971a4		f0 04		beq $1971aa	                    BEQ cls_all
.1971a6		c9 03		cmp #$03	                    CMP #3
.1971a8		d0 11		bne $1971bb	                    BNE done                            ; No: just ignore the sequence
.1971aa		a0 00 00	ldy #$0000	cls_all             LDY #0                              ; Start with the cursor's position
.1971ad		a9 20		lda #$20	cls_all_loop        LDA #' '
.1971af		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.1971b1		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.1971b3		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.1971b5		c8		iny		                    INY                                 ; Go to the next position
.1971b6		c0 00 20	cpy #$2000	                    CPY #$2000                          ; Have we reached the end?
.1971b9		d0 f2		bne $1971ad	                    BNE cls_all_loop                    ; No: keep going
.1971bb		28		plp		done                PLP
.1971bc		7a		ply		                    PLY
.1971bd		60		rts		                    RTS
.1971be						ANSI_EL
.1971be		da		phx		                    PHX
.1971bf		5a		phy		                    PHY
.1971c0		08		php		                    PHP
.1971c1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1971c3		38		sec		                    SEC
.1971c4		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D        ; Compute the address of the first character of the line
.1971c6		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.1971c8		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.1971ca		e2 20		sep #$20	                SEP #$20        ; set A short
.1971cc		a5 02		lda $0322	                    LDA #S_ANSI_VARS.SCREENBEGIN+2,D    ; Get the bank of the screen
.1971ce		85 1b		sta $033b	                    STA #S_ANSI_VARS.TMPPTR1+2,D        ; And put it in the TMPPTR1
.1971d0		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.1971d2		d0 0e		bne $1971e2	                    BNE not_0                           ; Is the code 0?
.1971d4						code_0
.1971d4		a9 20		lda #$20	                    LDA #' '
.1971d6		a4 0e		ldy $032e	                    LDY #S_ANSI_VARS.CURSORX,D          ; Start at the cursor position
.1971d8		97 19		sta [$0339],y	code_0_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.1971da		c8		iny		                    INY
.1971db		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.1971dd		d0 f9		bne $1971d8	                    BNE code_0_loop                     ; No: keep looping
.1971df		82 29 00	brl $19720b	                    BRL done
.1971e2		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.1971e4		d0 11		bne $1971f7	                    BNE not_1
.1971e6						code_1
.1971e6		a9 20		lda #$20	                    LDA #' '
.1971e8		a0 00 00	ldy #$0000	                    LDY #0
.1971eb		97 19		sta [$0339],y	code_1_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.1971ed		c8		iny		                    INY
.1971ee		c4 0e		cpy $032e	                    CPY #S_ANSI_VARS.CURSORX,D          ; Have we reached the cursor?
.1971f0		d0 f9		bne $1971eb	                    BNE code_1_loop                     ; No: keep looping
.1971f2		97 19		sta [$0339],y	                    STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; And clear under the cursor
.1971f4		82 14 00	brl $19720b	                    BRL done
.1971f7		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.1971f9		f0 04		beq $1971ff	                    BEQ code_2_3
.1971fb		c9 03		cmp #$03	                    CMP #3
.1971fd		d0 0c		bne $19720b	                    BNE done                            ; No: just ignore the sequence
.1971ff						code_2_3
.1971ff		a9 20		lda #$20	                    LDA #' '
.197201		a0 00 00	ldy #$0000	                    LDY #0
.197204		97 19		sta [$0339],y	code_2_3_loop       STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.197206		c8		iny		                    INY
.197207		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.197209		d0 f9		bne $197204	                    BNE code_2_3_loop                   ; No: keep looping
.19720b		28		plp		done                PLP
.19720c		7a		ply		                    PLY
.19720d		fa		plx		                    PLX
.19720e		60		rts		                    RTS
.19720f						ANSI_ICH
.19720f		5a		phy		                    PHY
.197210		08		php		                    PHP
.197211		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197213		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.197215		f0 04		beq $19721b	                    BEQ default_1                       ; If 0, default to 1
.197217		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.197219		d0 04		bne $19721f	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.19721b		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.19721d		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.19721f		38		sec		calc_src_dest       SEC
.197220		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D     ; TMPPTR1 := COLS_VISIBLE - CURSORX (destination index)
.197222		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.197224		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.197226		38		sec		                    SEC
.197227		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D             ; TMPPTR1+1 := TMPPTR1 - n (source index)
.197229		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D
.19722b		a4 1a		ldy $033a	insert_loop         LDY #S_ANSI_VARS.TMPPTR1+1,D        ; text[dest] := text[source]
.19722d		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.19722f		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.197231		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.197233		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D        ; color[dest] := color[source]
.197235		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.197237		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.197239		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.19723b		c6 19		dec $0339	                    DEC #S_ANSI_VARS.TMPPTR1,D          ; Move to the previous position
.19723d		c6 1a		dec $033a	                    DEC #S_ANSI_VARS.TMPPTR1+1,D
.19723f		10 ea		bpl $19722b	                    BPL insert_loop                     ; Keep looping until we reach the end
.197241		a0 00		ldy #$00	                    LDY #0
.197243		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.197245		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.197247		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.197249		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.19724b		c8		iny		                    INY                                 ; Move to the next byte
.19724c		c4 21		cpy $0341	                    CPY #S_ANSI_VARS.ARG0,D             ; Until we reach the end
.19724e		d0 f3		bne $197243	                    BNE fill_loop
.197250		28		plp		                    PLP
.197251		7a		ply		                    PLY
.197252		60		rts		                    RTS
.197253						ANSI_DCH
.197253		5a		phy		                    PHY
.197254		08		php		                    PHP
.197255		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197257		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.197259		f0 04		beq $19725f	                    BEQ default_1                       ; If 0, default to 1
.19725b		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.19725d		d0 04		bne $197263	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.19725f		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.197261		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.197263		a9 00		lda #$00	calc_src_dest       LDA #0
.197265		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D        ; TMPPTR+1 := 0 (destination)
.197267		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.197269		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D          ; TMPPTR+1 := n (source)
.19726b		38		sec		                    SEC                                 ; Calculate end offset
.19726c		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D
.19726e		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.197270		85 22		sta $0342	                    STA #S_ANSI_VARS.ARG1,D
.197272		a4 19		ldy $0339	del_loop            LDY #S_ANSI_VARS.TMPPTR1,D          ; text[dest] := text[source]
.197274		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.197276		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.197278		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.19727a		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D          ; color[dest] := color[source]
.19727c		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.19727e		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.197280		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.197282		e6 19		inc $0339	                    INC #S_ANSI_VARS.TMPPTR1,D          ; Move to the next position
.197284		e6 1a		inc $033a	                    INC #S_ANSI_VARS.TMPPTR1+1,D
.197286		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.197288		c5 22		cmp $0342	                    CMP #S_ANSI_VARS.ARG1,D
.19728a		90 e6		bcc $197272	                    BLT del_loop                        ; Keep looping until we reach the end
.19728c		38		sec		                    SEC                                 ; Calculate the starting point to fill with blanks
.19728d		a5 1a		lda $033a	                    LDA #S_ANSI_VARS.TMPPTR1+1,D
.19728f		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D
.197291		a8		tay		                    TAY
.197292		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.197294		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.197296		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.197298		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.19729a		c8		iny		                    INY                                 ; Move to the next byte
.19729b		c4 22		cpy $0342	                    CPY #S_ANSI_VARS.ARG1,D             ; Until we reach the end
.19729d		90 f3		bcc $197292	                    BLT fill_loop
.19729f		28		plp		                    PLP
.1972a0		7a		ply		                    PLY
.1972a1		60		rts		                    RTS
.1972a2						ANSI_CSRRIGHT
.1972a2		da		phx		                    PHX
.1972a3		5a		phy		                    PHY
.1972a4		0b		phd		                    PHD
.1972a5		08		php		                    PHP
.1972a6		c2 30		rep #$30	                REP #$30        ; set A&X long
.1972a8		22 bd 6d 19	jsl $196dbd	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.1972ac		b0 1a		bcs $1972c8	                    BCS done                            ; If invalid, just return
.1972ae		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the new column
.1972b0		e8		inx		                    INX
.1972b1		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the current row
.1972b3		e4 03		cpx $0323	                    CPX #S_ANSI_VARS.COLS_VISIBLE,D     ; Are we off screen?
.1972b5		90 0d		bcc $1972c4	                    BCC nowrap                          ; No: just set the position
.1972b7		a2 00 00	ldx #$0000	                    LDX #0                              ; Yes: move to the first column
.1972ba		c8		iny		                    INY                                 ; And move to the next row
.1972bb		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Are we still off screen?
.1972bd		90 05		bcc $1972c4	                    BCC nowrap                          ; No: just set the position
.1972bf		88		dey		                    DEY                                 ; Yes: lock to the last row
.1972c0		22 90 73 19	jsl $197390	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.1972c4		22 2c 73 19	jsl $19732c	nowrap              JSL ANSI_LOCATE                     ; Set the cursor position
.1972c8		28		plp		done                PLP
.1972c9		2b		pld		                    PLD
.1972ca		7a		ply		                    PLY
.1972cb		fa		plx		                    PLX
.1972cc		6b		rtl		                    RTL
.1972cd						ANSI_CSRLEFT
.1972cd		da		phx		                    PHX
.1972ce		5a		phy		                    PHY
.1972cf		0b		phd		                    PHD
.1972d0		08		php		                    PHP
.1972d1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1972d3		22 bd 6d 19	jsl $196dbd	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.1972d7		b0 0d		bcs $1972e6	                    BCS done                    ; If invalid, just return
.1972d9		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D  ; Check that we are not already @ Zero
.1972db		f0 09		beq $1972e6	                    BEQ done                    ; If so, just ignore this call
.1972dd		ca		dex		                    DEX
.1972de		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.1972e0		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.1972e2		22 2c 73 19	jsl $19732c	                    JSL ANSI_LOCATE
.1972e6		28		plp		done                PLP
.1972e7		2b		pld		                    PLD
.1972e8		7a		ply		                    PLY
.1972e9		fa		plx		                    PLX
.1972ea		6b		rtl		                    RTL
.1972eb						ANSI_CSRUP
.1972eb		da		phx		                    PHX
.1972ec		5a		phy		                    PHY
.1972ed		0b		phd		                    PHD
.1972ee		08		php		                    PHP
.1972ef		c2 30		rep #$30	                REP #$30        ; set A&X long
.1972f1		22 bd 6d 19	jsl $196dbd	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.1972f5		b0 0d		bcs $197304	                    BCS done                    ; If invalid, just return
.1972f7		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D  ; Check if we are not already @ Zero
.1972f9		f0 09		beq $197304	                    BEQ done                    ; If we are, just ignore the call
.1972fb		88		dey		                    DEY
.1972fc		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.1972fe		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D
.197300		22 2c 73 19	jsl $19732c	                    JSL ANSI_LOCATE
.197304		28		plp		done                PLP
.197305		2b		pld		                    PLD
.197306		7a		ply		                    PLY
.197307		fa		plx		                    PLX
.197308		6b		rtl		                    RTL
.197309						ANSI_CSRDOWN
.197309		da		phx		                    PHX
.19730a		5a		phy		                    PHY
.19730b		0b		phd		                    PHD
.19730c		08		php		                    PHP
.19730d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19730f		22 bd 6d 19	jsl $196dbd	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.197313		b0 12		bcs $197327	                    BCS done                            ; If invalid, just return
.197315		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the current column
.197317		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the new row
.197319		c8		iny		                    INY
.19731a		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Check to see if we're off screen
.19731c		90 05		bcc $197323	                    BCC noscroll                        ; No: go ahead and set the position
.19731e		88		dey		                    DEY                                 ; Yes: go back to the last row
.19731f		22 90 73 19	jsl $197390	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.197323		22 2c 73 19	jsl $19732c	noscroll            JSL ANSI_LOCATE                     ; And set the cursor position
.197327		28		plp		done                PLP
.197328		2b		pld		                    PLD
.197329		7a		ply		                    PLY
.19732a		fa		plx		                    PLX
.19732b		6b		rtl		                    RTL
.19732c						ANSI_LOCATE
.19732c		da		phx		                    PHX
.19732d		5a		phy		                    PHY
.19732e		0b		phd		                    PHD
.19732f		08		php		                    PHP
.197330		22 bd 6d 19	jsl $196dbd	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.197334		b0 55		bcs $19738b	                    BCS done                    ; If invalid, just return
.197336		c2 30		rep #$30	                REP #$30        ; set A&X long
.197338						locate_scroll
.197338		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D
.19733a		90 07		bcc $197343	                    BCC locate_scrolldone
.19733c		22 90 73 19	jsl $197390	                    JSL ANSI_SCROLLUP
.197340		88		dey		                    DEY
.197341		80 f5		bra $197338	                    BRA locate_scroll
.197343						locate_scrolldone
.197343		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.197345		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.197347		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.197349						locate_row
.197349		c0 00 00	cpy #$0000	                    CPY #$0
.19734c		f0 08		beq $197356	                    BEQ locate_right
.19734e		18		clc		locate_down         CLC
.19734f		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.197351		88		dey		                    DEY
.197352		f0 02		beq $197356	                    BEQ locate_right
.197354		80 f8		bra $19734e	                    BRA locate_down
.197356		18		clc		locate_right        CLC
.197357		65 0e		adc $032e	                    ADC #S_ANSI_VARS.CURSORX,D      ; move the cursor right X columns
.197359		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D
.19735b		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.19735d		e2 20		sep #$20	                SEP #$20        ; set A short
.19735f		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT
.197363		c9 04		cmp #$04	                    CMP #CHAN_EVID
.197365		f0 0e		beq $197375	                    beq locate_evid
.197367		c2 20		rep #$20	                REP #$20        ; set A long
.197369		98		tya		                    TYA
.19736a		8f 16 00 af	sta $af0016	                    STA @l VKY_TXT_CURSOR_Y_REG_L
.19736e		8a		txa		                    TXA
.19736f		8f 14 00 af	sta $af0014	                    STA @l VKY_TXT_CURSOR_X_REG_L
.197373		80 0c		bra $197381	                    BRA update_colorpos
.197375						locate_evid
.197375		c2 20		rep #$20	                REP #$20        ; set A long
.197377		98		tya		                    TYA
.197378		8f 16 1e ae	sta $ae1e16	                    STA @l EVID_TXT_CURSOR_Y_REG_L
.19737c		8a		txa		                    TXA
.19737d		8f 14 1e ae	sta $ae1e14	                    STA @l EVID_TXT_CURSOR_X_REG_L
.197381						update_colorpos
.197381		c2 20		rep #$20	                REP #$20        ; set A long
.197383		18		clc		                    CLC
.197384		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.197386		69 00 20	adc #$2000	                    ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.197389		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D
.19738b		28		plp		done                PLP
.19738c		2b		pld		                    PLD
.19738d		7a		ply		                    PLY
.19738e		fa		plx		                    PLX
.19738f		6b		rtl		                    RTL
.197390						ANSI_SCROLLUP
.197390		da		phx		                    PHX
.197391		5a		phy		                    PHY
.197392		8b		phb		                    PHB
.197393		0b		phd		                    PHD
.197394		08		php		                    PHP
.197395		22 bd 6d 19	jsl $196dbd	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.197399		90 03		bcc $19739e	                    BCC calc_size
.19739b		82 81 00	brl $19741f	                    BRL done                    ; If invalid, just return
.19739e						calc_size
.19739e		c2 30		rep #$30	                REP #$30        ; set A&X long
.1973a0		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.1973a2		8f 00 01 00	sta $000100	                    STA @l UNSIGNED_MULT_A_LO
.1973a6		a5 07		lda $0327	                    LDA #S_ANSI_VARS.LINES_VISIBLE,D
.1973a8		8f 02 01 00	sta $000102	                    STA @l UNSIGNED_MULT_B_LO
.1973ac		af 04 01 00	lda $000104	                    LDA @l UNSIGNED_MULT_AL_LO
.1973b0		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.1973b2		18		clc		                    CLC
.1973b3		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.1973b5		a8		tay		                    TAY
.1973b6		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.1973b8		aa		tax		                    TAX
.1973b9		e2 20		sep #$20	                SEP #$20        ; set A short
.1973bb		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID
.1973bf		c9 04		cmp #$04	                    CMP #CHAN_EVID
.1973c1		f0 09		beq $1973cc	                    BEQ move_text_1                             ; Yes: do the move on the EVID memory
.1973c3						move_text_0
.1973c3		c2 20		rep #$20	                REP #$20        ; set A long
.1973c5		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.1973c7		54 af af	mvn $af,$af	                    MVN `CS_TEXT_MEM_PTR,`CS_TEXT_MEM_PTR       ; Move the data on the main screen
.1973ca		80 07		bra $1973d3	                    BRA scroll_color
.1973cc						move_text_1
.1973cc		c2 20		rep #$20	                REP #$20        ; set A long
.1973ce		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.1973d0		54 ae ae	mvn $ae,$ae	                    MVN `EVID_TEXT_MEM,`EVID_TEXT_MEM           ; Move the data on the EVID screen
.1973d3						scroll_color
.1973d3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1973d5		18		clc		                    CLC
.1973d6		a5 16		lda $0336	                    LDA #S_ANSI_VARS.COLORBEGIN,D
.1973d8		a8		tay		                    TAY
.1973d9		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.1973db		aa		tax		                    TAX
.1973dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1973de		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID?
.1973e2		c9 04		cmp #$04	                    CMP #CHAN_EVID
.1973e4		f0 09		beq $1973ef	                    BEQ move_color_1                            ; Yes: scroll the EVID color matrix
.1973e6						move_color_0
.1973e6		c2 20		rep #$20	                REP #$20        ; set A long
.1973e8		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.1973ea		54 af af	mvn $af,$af	                    MVN `CS_COLOR_MEM_PTR,`CS_COLOR_MEM_PTR     ; Move the data on the main screen
.1973ed		80 07		bra $1973f6	                    BRA vicky_lastline
.1973ef						move_color_1
.1973ef		c2 20		rep #$20	                REP #$20        ; set A long
.1973f1		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.1973f3		54 ae ae	mvn $ae,$ae	                    MVN `EVID_COLOR_MEM,`EVID_COLOR_MEM         ; Move the data on the EVID screen
.1973f6						vicky_lastline
.1973f6		c2 20		rep #$20	                REP #$20        ; set A long
.1973f8		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.1973fa		48		pha		                    PHA
.1973fb		18		clc		                    CLC
.1973fc		65 00		adc $0320	                    ADC #S_ANSI_VARS.SCREENBEGIN,D
.1973fe		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.197400		a0 00 00	ldy #$0000	start_clear         LDY #0
.197403		a9 20 00	lda #$0020	                    LDA #' '
.197406		97 19		sta [$0339],y	clr_text            STA [#S_ANSI_VARS.TMPPTR1,D],Y
.197408		c8		iny		                    INY
.197409		c4 0f		cpy $032f	                    CPY #COLS_VISIBLE,D
.19740b		d0 f9		bne $197406	                    BNE clr_text
.19740d		68		pla		vicky_lastcolor     PLA
.19740e		18		clc		                    CLC
.19740f		65 16		adc $0336	                    ADC #S_ANSI_VARS.COLORBEGIN,D
.197411		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.197413		a0 00 00	ldy #$0000	start_color         LDY #0
.197416		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.197418		97 19		sta [$0339],y	clr_color           STA [#S_ANSI_VARS.TMPPTR1,D],Y
.19741a		c8		iny		                    INY
.19741b		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D
.19741d		d0 f9		bne $197418	                    BNE clr_color
.19741f		28		plp		done                PLP
.197420		2b		pld		                    PLD
.197421		ab		plb		                    PLB
.197422		7a		ply		                    PLY
.197423		fa		plx		                    PLX
.197424		6b		rtl		                    RTL
.197425						ANSI_CLRSCREEN
.197425		da		phx		                    PHX
.197426		5a		phy		                    PHY
.197427		0b		phd		                    PHD
.197428		08		php		                    PHP
.197429		22 bd 6d 19	jsl $196dbd	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.19742d		b0 1e		bcs $19744d	                    BCS done                            ; If invalid, just return
.19742f		e2 20		sep #$20	                SEP #$20        ; set A short
.197431		c2 10		rep #$10	                REP #$10        ; set X long
.197433		a0 00 00	ldy #$0000	                    LDY #0
.197436		a9 20		lda #$20	                    LDA #$20		                    ; Fill the Entire Screen with Space
.197438		97 00		sta [$0320],y	iclearloop0	        STA [#S_ANSI_VARS.SCREENBEGIN,D],Y
.19743a		c8		iny		                    INY
.19743b		c0 00 20	cpy #$2000	                    CPY #$2000
.19743e		d0 f8		bne $197438	                    BNE iclearloop0
.197440		a0 00 00	ldy #$0000	                    LDY	#0
.197443		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D         ; Fill the current color
.197445		97 16		sta [$0336],y	evid_clearloop1     STA [#S_ANSI_VARS.COLORBEGIN,D],Y
.197447		c8		iny		                    INY
.197448		c0 00 20	cpy #$2000	                    CPY #$2000
.19744b		d0 f8		bne $197445	                    BNE evid_clearloop1
.19744d		28		plp		done                PLP
.19744e		2b		pld		                    PLD
.19744f		7a		ply		                    PLY
.197450		fa		plx		                    PLX
.197451		6b		rtl		                    RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/kbd_driver.asm

=16						KBD_INBUF_SIZE = 16         ; Number of scan codes that can be buffered
=0						KBD_STATE_IDLE = 0          ; Keyboard is IDLE
=1						KBD_STATE_E0 = 1            ; Keyboard has sent E0
=2						KBD_STATE_E02A = 2          ; Keybaord has sent E0 2A (leading to Print Screen E02AE037)
=3						KBD_STATE_E02AE0 = 3
=4						KBD_STATE_E1 = 4            ; Keyboard has sent E1 (leading to Pause/Break)
=5						KBD_STATE_E11D = 5
=6						KBD_STATE_E11D45 = 6
=7						KBD_STATE_E11D45E1 = 7
=8						KBD_STATE_E11D45E19D = 8
=9						KBD_STATE_E0B7 = 9          ; Keyboard has sent E0 B7 (leading to break of Print Screen E0 B7 E0 AA)
=10						KBD_STATE_E0B7E0 = 10
=0						KBD_ACTION_IGNORE = 0       ; State machine action: do nothing with the current byte
=1						KBD_ACTION_EMIT_BASE = 1    ; State machine action: translate scancode from base table and emit it
=2						KBD_ACTION_EMIT_E0 = 2      ; State machine action: translate scancode from E0 prefix table and emit it
=$01						KBD_STAT_OBF = $01          ; Keyboard status: Output Buffer is Full
=$02						KBD_STAT_IBF = $02          ; Keyboard status: Input Buffer is Full
=$a7						KBD_CTRL_CMD_DISABLE2 = $A7 ; Keybaord controller command: disable output device #2
=$a9						KBD_CTRL_CMD_ENABLE2 = $A9  ; Keybaord controller command: enable output device #2
=$aa						KBD_CTRL_CMD_SELFTEST = $AA ; Keyboard controller command: start self test
=$ab						KBD_CTRL_CMD_KBDTEST = $AB  ; Keyboard controller command: start keyboard test
=$ad						KBD_CTRL_CMD_DISABLE1 = $AD ; Keybaord controller command: disable output device #1
=$ae						KBD_CTRL_CMD_ENABLE1 = $AE  ; Keybaord controller command: enable output device #1
=$60						KBD_CTRL_CMD_WRITECMD = $60 ; Keyboard controller command: write to the command register
=$ff						KBD_CMD_RESET = $FF         ; Keyboard command: reset the keyboard
=$f4						KBD_CMD_ENABLE = $F4        ; Keyboard command: enable to keyboard
=$ed						KBD_CMD_SET_LED = $ED       ; Keyboard command: set the LEDs
=$55						KBD_RESP_OK = $55           ; Keyboard response: Command was OK
=$fa						KBD_RESP_ACK = $FA          ; Keyboard response: command acknowledged
=$01						KBD_LOCK_SCROLL = $01       ; LED/lock mask for Scroll Lock key
=$02						KBD_LOCK_NUMBER = $02       ; LED/lock mask for Num Lock key
=$04						KBD_LOCK_CAPS = $04         ; LED/lock mask for Caps Lock key
=$01						KBD_MOD_LSHIFT  = %00000001     ; Left shift is pressed
=$02						KBD_MOD_RSHIFT  = %00000010     ; Right shift is pressed
=$04						KBD_MOD_LCTRL   = %00000100     ; Left CTRL is pressed
=$08						KBD_MOD_RCTRL   = %00001000     ; Right CTRL is pressed
=$10						KBD_MOD_LALT    = %00010000     ; Left ALT is pressed
=$20						KBD_MOD_RALT    = %00100000     ; Right ALT is pressed
=$40						KBD_MOD_OS      = %01000000     ; OS key (e.g. Windows Key) is pressed
=$80						KBD_MOD_MENU    = %10000000     ; Menu key is pressed
=$80						KBD_CTRL_BREAK      = %10000000 ; CONTROL Flag to indicate if keyboard should capture BREAK
=$40						KBD_CTRL_MONITOR    = %01000000 ; CONTROL Flag to indicate if keyboard should trap ALT-BREAK to go to the monitor
=$80						KBD_STAT_BREAK  = %10000000     ; STATUS flag, BREAK has been pressed recently
=$01						KBD_STAT_SCAN   = %00000001     ; STATUS flag to indicate if there are scan codes in the queue
=$02						KBD_STAT_CHAR   = %00000010     ; STATUS flag to indicate if there are characters in the queue
=$61						KBD_SC_BREAK = $61              ; Scan code for the PAUSE/BREAK key
=$3a						KBD_SC_CAPSLOCK = $3A           ; Scan code for the CAPS lock key
=$45						KBD_SC_NUMLOCK = $45            ; Scan code for the NUM lock key
=$46						KBD_SC_SCROLL = $46             ; Scan code for the SCROLL lock key
=$2a						KBD_SC_LSHIFT = $2A             ; Scan code for the left SHIFT key
=$1d						KBD_SC_LCTRL = $1D              ; Scan code for the left CTLR key
=$38						KBD_SC_LALT = $38               ; Scan code for the left ALT key
=$36						KBD_SC_RSHIFT = $36             ; Scan code for the right SHIFT key
=$5e						KBD_SC_RCTRL = $5E              ; Scan code for the right CTRL key
=$5c						KBD_SC_RALT = $5C               ; Scan code for the right ALT key
=$38						KBD_SC_PIVOT = $38              ; Scan code we will use as a pivot for checking NUM lock
.0000						S_KBD_CONTROL
>0000						STATE               .byte ?                     ; The state of the keyboard controller state machine
>0001						CONTROL             .byte ?                     ; Control register
>0002						STATUS              .byte ?                     ; Status register
>0003						SC_BUF              .fill KBD_INBUF_SIZE        ; Buffer for keyboard scancodes read
>0013						SC_HEAD             .byte ?                     ; Index of the first scancode cell to write to
>0014						CHAR_BUF            .fill KBD_INBUF_SIZE        ; Character buffer
>0024						CHAR_HEAD           .byte ?                     ; Number of characters in the character buffer
>0025						MODIFIERS           .byte ?                     ; State of the modifier keys
>0026						LOCKS               .byte ?                     ; State of the lock keys: Caps, Num, Scroll
>0027						TBL_UNMOD           .dword ?                    ; Pointer to the scan code translation table for unmodified keys
>002b						TBL_SHIFT           .dword ?                    ; Pointer to the scan code translation table for shifted keys
>002f						TBL_CTRL            .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL
>0033						TBL_LOCK            .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
>0037						TBL_LOCK_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
>003b						TBL_CTRL_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL and SHIFT
.197452						IINITKEYBOARD
.197452		da		phx		                    PHX
.197453		5a		phy		                    PHY
.197454		0b		phd		                    PHD
.197455		08		php		                    PHP
.197456		48		pha		                PHA             ; begin setdp macro
.197457		08		php		                PHP
.197458		c2 20		rep #$20	                REP #$20        ; set A long
.19745a		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.19745d		5b		tcd		                TCD
.19745e		28		plp		                PLP
.19745f		68		pla		                PLA             ; end setdp macro
.197460		e2 20		sep #$20	                SEP #$20        ; set A short
.197462		c2 10		rep #$10	                REP #$10        ; set X long
.197464		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1                        ; Disable the keyboard interrupts while we get things started
.197468		09 01		ora #$01	                    ORA #FNX1_INT00_KBD
.19746a		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.19746e		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                         ; Set the state machine to the starting IDLE state
.197470		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.197472		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D                ; Mark the scancode buffer as empty
.197474		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D              ; Mark the character buffer as empty
.197476		64 25		stz $0f25	                    STZ #S_KBD_CONTROL.MODIFIERS,D              ; Default to modifiers being off
.197478		64 02		stz $0f02	                    STZ #S_KBD_CONTROL.STATUS,D                 ; Clear the status register
.19747a		a9 80		lda #$80	                    LDA #KBD_CTRL_BREAK                         ; Enable BREAK processing
.19747c		85 01		sta $0f01	                    STA #S_KBD_CONTROL.CONTROL,D
.19747e		c2 20		rep #$20	                REP #$20        ; set A long
.197480		a9 00 7c	lda #$7c00	                    LDA #<>SC_US_UNMOD
.197483		85 27		sta $0f27	                    STA #S_KBD_CONTROL.TBL_UNMOD,D
.197485		a9 80 7c	lda #$7c80	                    LDA #<>SC_US_SHFT
.197488		85 2b		sta $0f2b	                    STA #S_KBD_CONTROL.TBL_SHIFT,D
.19748a		a9 00 7d	lda #$7d00	                    LDA #<>SC_US_CTRL
.19748d		85 2f		sta $0f2f	                    STA #S_KBD_CONTROL.TBL_CTRL,D
.19748f		a9 80 7d	lda #$7d80	                    LDA #<>SC_US_LOCK
.197492		85 33		sta $0f33	                    STA #S_KBD_CONTROL.TBL_LOCK,D
.197494		a9 00 7e	lda #$7e00	                    LDA #<>SC_US_LOCK_SHFT
.197497		85 37		sta $0f37	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.197499		a9 80 7e	lda #$7e80	                    LDA #<>SC_US_CTRL_SHFT
.19749c		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.19749e		e2 20		sep #$20	                SEP #$20        ; set A short
.1974a0		a9 19		lda #$19	                    LDA #`SC_US_UNMOD
.1974a2		85 29		sta $0f29	                    STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.1974a4		a9 19		lda #$19	                    LDA #`SC_US_SHFT
.1974a6		85 2d		sta $0f2d	                    STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.1974a8		a9 19		lda #$19	                    LDA #`SC_US_CTRL
.1974aa		85 31		sta $0f31	                    STA #S_KBD_CONTROL.TBL_CTRL+2,D
.1974ac		a9 19		lda #$19	                    LDA #`SC_US_LOCK
.1974ae		85 35		sta $0f35	                    STA #S_KBD_CONTROL.TBL_LOCK+2,D
.1974b0		a9 19		lda #$19	                    LDA #`SC_US_LOCK_SHFT
.1974b2		85 39		sta $0f39	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.1974b4		a9 19		lda #$19	                    LDA #`SC_US_CTRL_SHFT
.1974b6		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.1974b8		a9 ad		lda #$ad	                    LDA #KBD_CTRL_CMD_DISABLE1  ; Disable the keyboard sending data
.1974ba		22 3e 75 19	jsl $19753e	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.1974be		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.1974c2		af 03 18 af	lda $af1803	flush_output        LDA @l KBD_DATA_BUF         ; We just throw that away
.1974c6		a9 aa		lda #$aa	                    LDA #KBD_CTRL_CMD_SELFTEST  ; Send the self test command
.1974c8		22 49 75 19	jsl $197549	                    JSL KBD_CTRL_SND_CMD
.1974cc		c9 55		cmp #$55	                    CMP #KBD_RESP_OK            ; Did we get an OK?
.1974ce		f0 05		beq $1974d5	                    BEQ test_AB
.1974d0		a9 02		lda #$02	                    LDA #2                      ; Return error #2
.1974d2		82 59 00	brl $19752e	                    BRL done
.1974d5		a9 ab		lda #$ab	test_AB             LDA #KBD_CTRL_CMD_KBDTEST   ; Send the keyboard test command
.1974d7		22 49 75 19	jsl $197549	                    JSL KBD_CTRL_SND_CMD
.1974db		c9 00		cmp #$00	                    CMP #0                      ; Did we get a good response?
.1974dd		f0 05		beq $1974e4	                    BEQ write_command
.1974df		a9 03		lda #$03	                    LDA #3                      ; Return error #3
.1974e1		82 4a 00	brl $19752e	                    BRL done
.1974e4		a9 60		lda #$60	write_command       LDA #KBD_CTRL_CMD_WRITECMD
.1974e6		a2 43 00	ldx #$0043	                    LDX #%01000011              ; Translate to set 1, no interrupts
.1974e9		22 a3 75 19	jsl $1975a3	                    JSL KBD_CTRL_SND_CMD_P
.1974ed		a9 ae		lda #$ae	enable_dev1         LDA #KBD_CTRL_CMD_ENABLE1   ; Re-enable the keyboard sending data
.1974ef		22 3e 75 19	jsl $19753e	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.1974f3		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.1974f7		a9 ff		lda #$ff	reset_kbd           LDA #KBD_CMD_RESET          ; Send a reset command to the keyboard
.1974f9		a2 ff ff	ldx #$ffff	                    LDX #$FFFF                  ; And wait a while for it to complete the reset
.1974fc		22 5a 75 19	jsl $19755a	                    JSL KBD_SND_CMD
.197500		a0 80 00	ldy #$0080	                    LDY #128                    ; Attemp enabling the keyboard 128 times
.197503		a9 f4		lda #$f4	enable_loop         LDA #KBD_CMD_ENABLE         ; Try to enable the keyboard
.197505		a2 00 00	ldx #$0000	                    LDX #0
.197508		22 5a 75 19	jsl $19755a	                    JSL KBD_SND_CMD
.19750c		a9 36		lda #$36	set_led             LDA #"6"
.19750e		22 18 10 00	jsl $001018	                    JSL PUTC
.197512		a9 00		lda #$00	                    LDA #0                      ; Set the state of the locks
.197514		22 d0 77 19	jsl $1977d0	                    JSL KBD_SETLOCKS
.197518		af 41 01 00	lda $000141	                    LDA @l INT_PENDING_REG1     ; Read the Pending Register &
.19751c		29 01		and #$01	                    AND #FNX1_INT00_KBD
.19751e		8f 41 01 00	sta $000141	                    STA @l INT_PENDING_REG1     ; Writing it back will clear the Active Bit
.197522		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.197526		29 fe		and #$fe	                    AND #~FNX1_INT00_KBD
.197528		8f 4d 01 00	sta $00014d	                    STA @l INT_MASK_REG1
.19752c		a9 00		lda #$00	return_0            LDA #0                      ; Return status code for success
.19752e		28		plp		done                PLP
.19752f		2b		pld		                    PLD
.197530		7a		ply		                    PLY
.197531		fa		plx		                    PLX
.197532		6b		rtl		                    RTL
.197533						KBD_WAIT_OUT
.197533		48		pha		                    PHA
.197534		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.197538		89 01		bit #$01	                    BIT #KBD_STAT_OBF       ; Check to see if the output buffer is full
.19753a		f0 f8		beq $197534	                    BEQ wait                ; If it isn't, keep waiting
.19753c		68		pla		                    PLA
.19753d		6b		rtl		                    RTL
.19753e						KBD_WAIT_IN
.19753e		48		pha		                    PHA
.19753f		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.197543		89 02		bit #$02	                    BIT #KBD_STAT_IBF       ; Check to see if the input buffer has data
.197545		d0 f8		bne $19753f	                    BNE wait                ; If not, wait for it to have something
.197547		68		pla		                    PLA
.197548		6b		rtl		                    RTL
.197549						KBD_CTRL_SND_CMD
.197549		22 3e 75 19	jsl $19753e	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.19754d		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.197551		22 33 75 19	jsl $197533	                    JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.197555		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.197559		6b		rtl		                    RTL
.19755a						KBD_SND_CMD
.19755a		22 3e 75 19	jsl $19753e	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.19755e		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.197562		c2 10		rep #$10	                REP #$10        ; set X long
.197564		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.197567		f0 0b		beq $197574	                    BEQ get_response        ; If 0, check for a response
.197569		ca		dex		                    DEX                     ; Count down
.19756a		ea		nop		                    NOP                     ; And do a delay
.19756b		ea		nop		                    NOP
.19756c		ea		nop		                    NOP
.19756d		ea		nop		                    NOP
.19756e		ea		nop		                    NOP
.19756f		ea		nop		                    NOP
.197570		ea		nop		                    NOP
.197571		ea		nop		                    NOP
.197572		80 f0		bra $197564	                    BRA delay
.197574		22 33 75 19	jsl $197533	get_response        JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.197578		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.19757c		6b		rtl		                    RTL
.19757d						KBD_SND_CMD_P
.19757d		22 3e 75 19	jsl $19753e	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.197581		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.197585		8a		txa		                    TXA                     ; Send the parameter to the keyboard
.197586		c2 10		rep #$10	                REP #$10        ; set X long
.197588		a2 e8 03	ldx #$03e8	                    LDX #1000
.19758b		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.19758e		f0 0a		beq $19759a	                    BEQ send_data           ; If 0, check for a response
.197590		ca		dex		                    DEX                     ; Count down
.197591		ea		nop		                    NOP                     ; And do a delay
.197592		ea		nop		                    NOP
.197593		ea		nop		                    NOP
.197594		ea		nop		                    NOP
.197595		ea		nop		                    NOP
.197596		ea		nop		                    NOP
.197597		ea		nop		                    NOP
.197598		80 f1		bra $19758b	                    BRA delay
.19759a		22 3e 75 19	jsl $19753e	send_data           JSL KBD_WAIT_IN
.19759e		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.1975a2						get_response
.1975a2		6b		rtl		                    RTL
.1975a3						KBD_CTRL_SND_CMD_P
.1975a3		22 3e 75 19	jsl $19753e	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.1975a7		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.1975ab		8a		txa		                    TXA
.1975ac		22 3e 75 19	jsl $19753e	                    JSL KBD_WAIT_IN         ; Send the parameter to the controller
.1975b0		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.1975b4		6b		rtl		                    RTL
.1975b5						KBD_PROCESS_BYTE
.1975b5		8b		phb		                    PHB
.1975b6		0b		phd		                    PHD
.1975b7		08		php		                    PHP
.1975b8		48		pha		                PHA             ; begin setdbr macro
.1975b9		08		php		                PHP
.1975ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1975bc		a9 19		lda #$19	                LDA #`KBD_STATE_MACH
.1975be		48		pha		                PHA
.1975bf		ab		plb		                PLB
.1975c0		28		plp		                PLP
.1975c1		68		pla		                PLA             ; end setdbr macro
.1975c2		48		pha		                PHA             ; begin setdp macro
.1975c3		08		php		                PHP
.1975c4		c2 20		rep #$20	                REP #$20        ; set A long
.1975c6		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1975c9		5b		tcd		                TCD
.1975ca		28		plp		                PLP
.1975cb		68		pla		                PLA             ; end setdp macro
.1975cc		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1975ce		a9 00		lda #$00	                    LDA #0
.1975d0		8f e0 00 00	sta $0000e0	                    STA @l MOUSE_IDX                    ; A bit of a hack to try to stabilize the mouse
.1975d4		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF                 ; Get the current scancode byte
.1975d8		d0 03		bne $1975dd	                    BNE save_scancode
.1975da		82 67 00	brl $197644	                    BRL done                            ; If it's 0, just ignore it
.1975dd						LOCALS
>0001						l_break             .byte ?                             ; The make/break bit of the scancode
>0002						l_code              .byte ?                             ; The scancode
.1975dd		48		pha		save_scancode       PHA
.1975de		48		pha		                    PHA
.1975df		29 80		and #$80	                    AND #$80
.1975e1		83 01		sta $01,s	                    STA l_break                         ; Save the make/break bit
.1975e3		a2 00		ldx #$00	                    LDX #0                              ; Start from the beginning
.1975e5		bf 00 7b 19	lda $197b00,x	chk_transition      LDA @l KBD_STATE_MACH,X             ; Get the tranition's start state
.1975e9		c9 ff		cmp #$ff	                    CMP #$FF
.1975eb		d0 03		bne $1975f0	                    BNE compare_state
.1975ed		82 54 00	brl $197644	                    BRL done                            ; If $FF: we've reached the end... this is an error... just ignore it?
.1975f0		c5 00		cmp $0f00	compare_state       CMP #S_KBD_CONTROL.STATE,D          ; Compare it to the current state
.1975f2		d0 0e		bne $197602	                    BNE next_transition                 ; If they don't match, go to the next transition
.1975f4		bf 01 7b 19	lda $197b01,x	                    LDA @l KBD_STATE_MACH+1,X           ; Get the tranition's test byte
.1975f8		f0 0e		beq $197608	                    BEQ apply                           ; Is it 0? Yes: the default applies
.1975fa		a3 02		lda $02,s	                    LDA l_code                          ; Otherwise: get the scan code back
.1975fc		df 01 7b 19	cmp $197b01,x	                    CMP @l KBD_STATE_MACH+1,X           ; Compare it to the transition's test byte
.197600		f0 06		beq $197608	                    BEQ apply                           ; If equal: this matches, apply the transition
.197602		e8		inx		next_transition     INX                                 ; Move to the next transition
.197603		e8		inx		                    INX
.197604		e8		inx		                    INX
.197605		e8		inx		                    INX
.197606		80 dd		bra $1975e5	                    BRA chk_transition                  ; Check to see if the next transition applies
.197608		bf 02 7b 19	lda $197b02,x	apply               LDA @l KBD_STATE_MACH+2,X           ; Get the tranition's destination state
.19760c		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D          ; And save it as our new state
.19760e		bf 03 7b 19	lda $197b03,x	                    LDA @l KBD_STATE_MACH+3,X           ; Get the tranition's action
.197612		c9 00		cmp #$00	                    CMP #KBD_ACTION_IGNORE              ; Is it IGNORE?
.197614		f0 2e		beq $197644	                    BEQ done                            ; Yes: we're done for now
.197616		c9 01		cmp #$01	                    CMP #KBD_ACTION_EMIT_BASE           ; Is it EMIT_BASE?
.197618		f0 06		beq $197620	                    BEQ emit_base                       ; Yes: emit the translation of the base byte
.19761a		c9 02		cmp #$02	                    CMP #KBD_ACTION_EMIT_E0             ; Is it EMIT_E0?
.19761c		f0 0f		beq $19762d	                    BEQ emit_e0                         ; Yes: emit the translation of the E0 prefixed byte
.19761e		80 18		bra $197638	                    BRA emit_A                          ; Otherwise: just emit the action byte as the new scan code
.197620		a3 02		lda $02,s	emit_base           LDA l_code
.197622		29 7f		and #$7f	                    AND #$7F                            ; Strip off the make/break bit
.197624		aa		tax		                    TAX
.197625		bf 00 7a 19	lda $197a00,x	                    LDA @l TBL_SET1,X                   ; Get the translation of the base scan code
.197629		03 01		ora $01,s	                    ORA l_break                         ; Add the make/break bit back
.19762b		80 0b		bra $197638	                    BRA emit_A                          ; Emit the translation
.19762d		a3 02		lda $02,s	emit_e0             LDA l_code
.19762f		29 7f		and #$7f	                    AND #$7F                            ; Strip off any make/break bit
.197631		aa		tax		                    TAX
.197632		bf 80 7a 19	lda $197a80,x	                    LDA @l TBL_SET1_E0,X                ; Get the translation of the E0 prefixed scan code
.197636		03 01		ora $01,s	                    ORA l_break                         ; Add in the make/break flag
.197638		c9 00		cmp #$00	emit_A              CMP #0                              ; Is the code NUL?
.19763a		f0 08		beq $197644	                    BEQ done                            ; If so, skip enqueuing it
.19763c		22 4c 76 19	jsl $19764c	enqueue             JSL KBD_SC_ENQUEUE                  ; Enqueue the scancode
.197640		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                 ; Set the state machine to the initial state
.197642		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.197644						done
.197644		e2 20		sep #$20	                SEP #$20        ; set A short
.197646		68		pla		                    PLA                                 ; Clean the scan code byte from the stack
.197647		68		pla		                    PLA
.197648		28		plp		                    PLP
.197649		2b		pld		                    PLD
.19764a		ab		plb		                    PLB
.19764b		6b		rtl		                    RTL
.19764c						KBD_SC_ENQUEUE
.19764c		0b		phd		                    PHD
.19764d		08		php		                    PHP
.19764e		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.19764f		48		pha		                PHA             ; begin setdp macro
.197650		08		php		                PHP
.197651		c2 20		rep #$20	                REP #$20        ; set A long
.197653		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197656		5b		tcd		                TCD
.197657		28		plp		                PLP
.197658		68		pla		                PLA             ; end setdp macro
.197659		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19765b		c9 00		cmp #$00	                    CMP #0                          ; Is the scan code a NUL?
.19765d		f0 2f		beq $19768e	                    BEQ done                        ; Yes: just ignore
.19765f		c9 61		cmp #$61	                    CMP #KBD_SC_BREAK               ; Is it the BREAK key?
.197661		d0 10		bne $197673	                    BNE chk_locks                   ; No: check the various lock keys
.197663		a5 01		lda $0f01	                    LDA #S_KBD_CONTROL.CONTROL,D
.197665		89 80		bit #$80	                    BIT #KBD_CTRL_BREAK                 ; Are we processing BREAK?
.197667		f0 08		beq $197671	                    BEQ enqueue_break                   ; No: enqueue it as normal
.197669		a9 80		lda #$80	                    LDA #KBD_STAT_BREAK                 ; Yes: turn on the BREAK bit
.19766b		05 02		ora $0f02	                    ORA #S_KBD_CONTROL.STATUS,D
.19766d		85 02		sta $0f02	                    STA #S_KBD_CONTROL.STATUS,D
.19766f		80 1d		bra $19768e	                    BRA done                            ; And we're done
.197671		a9 61		lda #$61	enqueue_break       LDA #KBD_SC_BREAK
.197673		c9 3a		cmp #$3a	chk_locks           CMP #KBD_SC_CAPSLOCK            ; Is it the CAPS lock?
.197675		f0 1a		beq $197691	                    BEQ toggle_caps                 ; Yes: toggle the CAPS lock bits
.197677		c9 45		cmp #$45	                    CMP #KBD_SC_NUMLOCK             ; Is it the NUM lock?
.197679		f0 20		beq $19769b	                    BEQ toggle_num                  ; Yes: toggle the NUM lock bits
.19767b		c9 46		cmp #$46	                    CMP #KBD_SC_SCROLL              ; Is it the SCROLL lock?
.19767d		f0 22		beq $1976a1	                    BEQ toggle_scroll               ; Yes: toggle the SCROLL lock bits
.19767f		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.197681		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.197683		f0 09		beq $19768e	                    BEQ done                        ; Yes: we're full... ignore the scancode
.197685		95 03		sta $0f03,x	                    STA #S_KBD_CONTROL.SC_BUF,D,X   ; No: we have room, write the scan code to the buffer
.197687		e8		inx		                    INX                             ; Advance to the next location
.197688		86 13		stx $0f13	                    STX #S_KBD_CONTROL.SC_HEAD,D
.19768a		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Set the KBD_STAT_SCAN bit
.19768c		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.19768e		28		plp		done                PLP
.19768f		2b		pld		                    PLD
.197690		6b		rtl		                    RTL
.197691		a5 26		lda $0f26	toggle_caps         LDA #S_KBD_CONTROL.LOCKS,D
.197693		49 04		eor #$04	                    EOR #KBD_LOCK_CAPS              ; Toggle the CAPS lock
.197695		22 d0 77 19	jsl $1977d0	save_locks          JSL KBD_SETLOCKS                ; Set the locks
.197699		80 f3		bra $19768e	                    BRA done
.19769b		a5 26		lda $0f26	toggle_num          LDA #S_KBD_CONTROL.LOCKS,D
.19769d		49 02		eor #$02	                    EOR #KBD_LOCK_NUMBER            ; Toggle the NUM lock
.19769f		80 f4		bra $197695	                    BRA save_locks
.1976a1		a5 26		lda $0f26	toggle_scroll       LDA #S_KBD_CONTROL.LOCKS,D
.1976a3		49 01		eor #$01	                    EOR #KBD_LOCK_SCROLL            ; Toggle the SCROLL lock
.1976a5		80 ee		bra $197695	                    BRA save_locks
.1976a7						KBD_CHAR_ENQUEUE
.1976a7		0b		phd		                    PHD
.1976a8		08		php		                    PHP
.1976a9		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.1976aa		48		pha		                PHA             ; begin setdp macro
.1976ab		08		php		                PHP
.1976ac		c2 20		rep #$20	                REP #$20        ; set A long
.1976ae		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1976b1		5b		tcd		                TCD
.1976b2		28		plp		                PLP
.1976b3		68		pla		                PLA             ; end setdp macro
.1976b4		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1976b6		c9 00		cmp #$00	                    CMP #0                          ; Is the character a NUL?
.1976b8		f0 0f		beq $1976c9	                    BEQ done                        ; Yes: just ignore
.1976ba		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D  ; Get the index of the next free spot
.1976bc		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.1976be		f0 09		beq $1976c9	                    BEQ done                        ; Yes: we're full... ignore the scancode
.1976c0		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X ; No: we have room, write the scan code to the buffer
.1976c2		e8		inx		                    INX                             ; Advance to the next location
.1976c3		86 24		stx $0f24	                    STX #S_KBD_CONTROL.CHAR_HEAD,D
.1976c5		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR              ; Set the KBD_STAT_CHAR bit
.1976c7		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.1976c9		28		plp		done                PLP
.1976ca		2b		pld		                    PLD
.1976cb		6b		rtl		                    RTL
.1976cc						KBD_CHAR_DEQUEUE
.1976cc		da		phx		                    PHX
.1976cd		0b		phd		                    PHD
.1976ce		08		php		                    PHP
.1976cf		48		pha		                PHA             ; begin setdp macro
.1976d0		08		php		                PHP
.1976d1		c2 20		rep #$20	                REP #$20        ; set A long
.1976d3		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1976d6		5b		tcd		                TCD
.1976d7		28		plp		                PLP
.1976d8		68		pla		                PLA             ; end setdp macro
.1976d9		78		sei		                    SEI                                 ; Disable IRQ for the duration of this routine to avoid race conditions
.1976da		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1976dc		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; Get the index of the next free spot
.1976de		f0 21		beq $197701	                    BEQ return_empty                    ; If it's 0, we have no data
.1976e0		a5 14		lda $0f14	                    LDA #S_KBD_CONTROL.CHAR_BUF,D       ; Get the character at the head of the queue
.1976e2		48		pha		                    PHA                                 ; Save it
.1976e3		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; How many bytes were there?
.1976e5		e0 01		cpx #$01	                    CPX #1                              ; Is it one?
.1976e7		d0 08		bne $1976f1	                    BNE copy_down                       ; No: we need to copy down the remaining bytes
.1976e9		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D      ; Yes: mark that we have no data in the queue now
.1976eb		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR                  ; Clear the KBD_STAT_CHAR bit
.1976ed		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.1976ef		80 0d		bra $1976fe	                    BRA return_head                     ; And return the character we found
.1976f1		a2 00		ldx #$00	copy_down           LDX #0                              ; Starting at the beginning of the buffer...
.1976f3		b5 15		lda $0f15,x	loop                LDA #S_KBD_CONTROL.CHAR_BUF+1,D,X   ; Get the next byte
.1976f5		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X     ; Move it down
.1976f7		e8		inx		                    INX                                 ; And move to the next byte
.1976f8		e4 24		cpx $0f24	                    CPX #S_KBD_CONTROL.CHAR_HEAD,D      ; Have we reached the end?
.1976fa		d0 f7		bne $1976f3	                    BNE loop                            ; No: keep copying bytes
.1976fc		c6 24		dec $0f24	                    DEC #S_KBD_CONTROL.CHAR_HEAD,D      ; Decrement the index
.1976fe		68		pla		return_head         PLA                                 ; Get the character back
.1976ff		80 02		bra $197703	                    BRA done                            ; And return it
.197701		a9 00		lda #$00	return_empty        LDA #0                              ; Return: 0 for no character
.197703		28		plp		done                PLP
.197704		2b		pld		                    PLD
.197705		fa		plx		                    PLX
.197706		6b		rtl		                    RTL
.197707						KBD_GET_SCANCODE
.197707		da		phx		                    PHX
.197708		0b		phd		                    PHD
.197709		08		php		                    PHP
.19770a		48		pha		                PHA             ; begin setdp macro
.19770b		08		php		                PHP
.19770c		c2 20		rep #$20	                REP #$20        ; set A long
.19770e		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197711		5b		tcd		                TCD
.197712		28		plp		                PLP
.197713		68		pla		                PLA             ; end setdp macro
.197714		78		sei		                    SEI                             ; Disable IRQ for the duration of this routine to avoid race conditions
.197715		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197717		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.197719		f0 21		beq $19773c	                    BEQ return_empty                ; If it's 0, we have no data
.19771b		a5 03		lda $0f03	                    LDA #S_KBD_CONTROL.SC_BUF,D     ; Get the scan code at the head of the queue
.19771d		48		pha		                    PHA                             ; Save it
.19771e		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; How many bytes were there?
.197720		e0 01		cpx #$01	                    CPX #1                          ; Is it one?
.197722		d0 08		bne $19772c	                    BNE copy_down                   ; No: we need to copy down the remaining bytes
.197724		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D    ; Yes: mark that we have no data in the queue now
.197726		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Clear the KBD_STAT_SCAN bit
.197728		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.19772a		80 0d		bra $197739	                    BRA return_head                 ; And return the scan code we found
.19772c		a2 00		ldx #$00	copy_down           LDX #0                          ; Starting at the beginning of the buffer...
.19772e		b5 04		lda $0f04,x	loop                LDA #S_KBD_CONTROL.SC_BUF+1,D,X ; Get the next byte
.197730		85 03		sta $0f03	                    STA #S_KBD_CONTROL.SC_BUF,D     ; Move it down
.197732		e8		inx		                    INX                             ; And move to the next byte
.197733		e4 13		cpx $0f13	                    CPX #S_KBD_CONTROL.SC_HEAD,D    ; Have we reached the end?
.197735		d0 f7		bne $19772e	                    BNE loop                        ; No: keep copying bytes
.197737		c6 13		dec $0f13	                    DEC #S_KBD_CONTROL.SC_HEAD,D    ; Reduce the index to the next free byte
.197739		68		pla		return_head         PLA                             ; Get the scan code back
.19773a		80 02		bra $19773e	                    BRA done                        ; And return it
.19773c		a9 00		lda #$00	return_empty        LDA #0                          ; Return: 0 for no scan code
.19773e		28		plp		done                PLP
.19773f		2b		pld		                    PLD
.197740		fa		plx		                    PLX
.197741		6b		rtl		                    RTL
.197742						KBD_GETMODS
.197742		0b		phd		                PHD
.197743		08		php		                PHP
.197744		48		pha		                PHA             ; begin setdp macro
.197745		08		php		                PHP
.197746		c2 20		rep #$20	                REP #$20        ; set A long
.197748		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.19774b		5b		tcd		                TCD
.19774c		28		plp		                PLP
.19774d		68		pla		                PLA             ; end setdp macro
.19774e		e2 20		sep #$20	                SEP #$20        ; set A short
.197750		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.197752		28		plp		                PLP
.197753		2b		pld		                PLD
.197754		6b		rtl		                RTL
.197755						KBD_GET_STAT
.197755		0b		phd		                PHD
.197756		08		php		                PHP
.197757		48		pha		                PHA             ; begin setdp macro
.197758		08		php		                PHP
.197759		c2 20		rep #$20	                REP #$20        ; set A long
.19775b		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.19775e		5b		tcd		                TCD
.19775f		28		plp		                PLP
.197760		68		pla		                PLA             ; end setdp macro
.197761		e2 20		sep #$20	                SEP #$20        ; set A short
.197763		a5 02		lda $0f02	                LDA #S_KBD_CONTROL.STATUS,D
.197765		28		plp		                PLP
.197766		2b		pld		                PLD
.197767		6b		rtl		                RTL
.197768						KBD_TEST_BREAK
.197768		0b		phd		                PHD
.197769		08		php		                PHP
.19776a		48		pha		                PHA             ; begin setdp macro
.19776b		08		php		                PHP
.19776c		c2 20		rep #$20	                REP #$20        ; set A long
.19776e		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197771		5b		tcd		                TCD
.197772		28		plp		                PLP
.197773		68		pla		                PLA             ; end setdp macro
.197774		e2 20		sep #$20	                SEP #$20        ; set A short
.197776		a9 80		lda #$80	                LDA #KBD_STAT_BREAK             ; Check the BREAK bit in STATUS
.197778		14 02		trb $0f02	                TRB #S_KBD_CONTROL.STATUS,D     ; ... and clear it
.19777a		d0 04		bne $197780	                BNE ret_true                    ; If it was set, return TRUE
.19777c		28		plp		ret_false       PLP                             ; Otherwise, return false
.19777d		2b		pld		                PLD
.19777e		18		clc		                CLC
.19777f		6b		rtl		                RTL
.197780		28		plp		ret_true        PLP
.197781		2b		pld		                PLD
.197782		38		sec		                SEC
.197783		6b		rtl		                RTL
.197784						KBD_GETMODS_ANSI
.197784		0b		phd		                    PHD
.197785		08		php		                    PHP
.197786		48		pha		                PHA             ; begin setdp macro
.197787		08		php		                PHP
.197788		c2 20		rep #$20	                REP #$20        ; set A long
.19778a		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.19778d		5b		tcd		                TCD
.19778e		28		plp		                PLP
.19778f		68		pla		                PLA             ; end setdp macro
.197790		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197792		a9 00		lda #$00	                    LDA #0                      ; Make space for the result code
.197794		48		pha		                    PHA
>0001						l_result            .byte ?
.197795		a5 25		lda $0f25	                    LDA #S_KBD_CONTROL.MODIFIERS,D
.197797		89 03		bit #$03	                    BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT
.197799		f0 06		beq $1977a1	                    BEQ check_alt
.19779b		a3 01		lda $01,s	                    LDA l_result
.19779d		09 02		ora #$02	                    ORA #%00000010
.19779f		83 01		sta $01,s	                    STA l_result
.1977a1		a5 25		lda $0f25	check_alt           LDA #S_KBD_CONTROL.MODIFIERS,D
.1977a3		89 30		bit #$30	                    BIT #KBD_MOD_LALT | KBD_MOD_RALT
.1977a5		f0 06		beq $1977ad	                    BEQ check_ctrl
.1977a7		a3 01		lda $01,s	                    LDA l_result
.1977a9		09 04		ora #$04	                    ORA #%00000100
.1977ab		83 01		sta $01,s	                    STA l_result
.1977ad		a5 25		lda $0f25	check_ctrl          LDA #S_KBD_CONTROL.MODIFIERS,D
.1977af		89 0c		bit #$0c	                    BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL
.1977b1		f0 06		beq $1977b9	                    BEQ return_result
.1977b3		a3 01		lda $01,s	                    LDA l_result
.1977b5		09 08		ora #$08	                    ORA #%00001000
.1977b7		83 01		sta $01,s	                    STA l_result
.1977b9		68		pla		return_result       PLA
.1977ba		28		plp		                    PLP
.1977bb		2b		pld		                    PLD
.1977bc		6b		rtl		                    RTL
.1977bd						KBD_GETLOCKS
.1977bd		0b		phd		                PHD
.1977be		08		php		                PHP
.1977bf		48		pha		                PHA             ; begin setdp macro
.1977c0		08		php		                PHP
.1977c1		c2 20		rep #$20	                REP #$20        ; set A long
.1977c3		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1977c6		5b		tcd		                TCD
.1977c7		28		plp		                PLP
.1977c8		68		pla		                PLA             ; end setdp macro
.1977c9		e2 20		sep #$20	                SEP #$20        ; set A short
.1977cb		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D
.1977cd		28		plp		                PLP
.1977ce		2b		pld		                PLD
.1977cf		6b		rtl		                RTL
.1977d0						KBD_SETLOCKS
.1977d0		0b		phd		                PHD
.1977d1		08		php		                PHP
.1977d2		48		pha		                PHA             ; begin setdp macro
.1977d3		08		php		                PHP
.1977d4		c2 20		rep #$20	                REP #$20        ; set A long
.1977d6		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1977d9		5b		tcd		                TCD
.1977da		28		plp		                PLP
.1977db		68		pla		                PLA             ; end setdp macro
.1977dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1977de		85 26		sta $0f26	                STA #S_KBD_CONTROL.LOCKS,D
.1977e0		28		plp		                PLP
.1977e1		2b		pld		                PLD
.1977e2		6b		rtl		                RTL
.1977e3						KBD_GET_CONTROL
.1977e3		0b		phd		                PHD
.1977e4		08		php		                PHP
.1977e5		48		pha		                PHA             ; begin setdp macro
.1977e6		08		php		                PHP
.1977e7		c2 20		rep #$20	                REP #$20        ; set A long
.1977e9		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1977ec		5b		tcd		                TCD
.1977ed		28		plp		                PLP
.1977ee		68		pla		                PLA             ; end setdp macro
.1977ef		e2 20		sep #$20	                SEP #$20        ; set A short
.1977f1		a5 01		lda $0f01	                LDA #S_KBD_CONTROL.CONTROL,D
.1977f3		28		plp		                PLP
.1977f4		2b		pld		                PLD
.1977f5		6b		rtl		                RTL
.1977f6						KBD_SET_CONTROL
.1977f6		0b		phd		                PHD
.1977f7		08		php		                PHP
.1977f8		48		pha		                PHA             ; begin setdp macro
.1977f9		08		php		                PHP
.1977fa		c2 20		rep #$20	                REP #$20        ; set A long
.1977fc		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1977ff		5b		tcd		                TCD
.197800		28		plp		                PLP
.197801		68		pla		                PLA             ; end setdp macro
.197802		e2 20		sep #$20	                SEP #$20        ; set A short
.197804		85 01		sta $0f01	                STA #S_KBD_CONTROL.CONTROL,D
.197806		28		plp		                PLP
.197807		2b		pld		                PLD
.197808		6b		rtl		                RTL
.197809						KBD_GETCW
.197809		22 15 78 19	jsl $197815	                JSL KBD_GETC
.19780d		c9 00		cmp #$00	                CMP #0
.19780f		f0 01		beq $197812	                BEQ wait
.197811		6b		rtl		                RTL
.197812		cb		wai		wait            WAI
.197813		80 f4		bra $197809	                BRA KBD_GETCW
.197815						KBD_GETC
.197815		0b		phd		                PHD
.197816		08		php		                PHP
.197817		48		pha		                PHA             ; begin setdp macro
.197818		08		php		                PHP
.197819		c2 20		rep #$20	                REP #$20        ; set A long
.19781b		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.19781e		5b		tcd		                TCD
.19781f		28		plp		                PLP
.197820		68		pla		                PLA             ; end setdp macro
.197821		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197823		22 cc 76 19	jsl $1976cc	                JSL KBD_CHAR_DEQUEUE        ; Try to fetch a character from the character queue
.197827		c9 00		cmp #$00	                CMP #0                      ; Did we get anything back?
.197829		f0 03		beq $19782e	                BEQ get_scancode            ; No: try to get a scan code
.19782b		82 cb 00	brl $1978f9	                BRL done                    ; Yes: return the character we had queued
.19782e		22 07 77 19	jsl $197707	get_scancode    JSL KBD_GET_SCANCODE        ; Fetch the next scancode
.197832		c9 00		cmp #$00	                CMP #0                      ; Is it NUL?
.197834		d0 04		bne $19783a	                BNE chk_make_break
.197836		28		plp		                PLP                         ; Yes: return 0... we got nothin
.197837		38		sec		                SEC
.197838		2b		pld		                PLD
.197839		6b		rtl		                RTL
.19783a		89 80		bit #$80	chk_make_break  BIT #$80                    ; Is it a break scan code?
.19783c		d0 08		bne $197846	                BNE handle_break            ; Yes: process the break
.19783e		c9 2a		cmp #$2a	handle_make     CMP #KBD_SC_LSHIFT          ; Is it a make LSHIFT?
.197840		d0 0c		bne $19784e	                BNE not_make_ls
.197842		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.197844		80 4e		bra $197894	                BRA set_modifier
.197846		c9 aa		cmp #$aa	handle_break    CMP #KBD_SC_LSHIFT | $80    ; Is it a break LSHIFT?
.197848		d0 0c		bne $197856	                BNE not_break_ls
.19784a		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.19784c		80 50		bra $19789e	                BRA clr_modifier
.19784e		c9 1d		cmp #$1d	not_make_ls     CMP #KBD_SC_LCTRL           ; Is it a make LCTRL?
.197850		d0 0c		bne $19785e	                BNE not_make_lc
.197852		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.197854		80 3e		bra $197894	                BRA set_modifier
.197856		c9 9d		cmp #$9d	not_break_ls    CMP #KBD_SC_LCTRL | $80     ; Is it a break LCTRL?
.197858		d0 0c		bne $197866	                BNE not_break_lc
.19785a		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.19785c		80 40		bra $19789e	                BRA clr_modifier
.19785e		c9 38		cmp #$38	not_make_lc     CMP #KBD_SC_LALT            ; Is it a make LALT?
.197860		d0 0c		bne $19786e	                BNE not_make_la
.197862		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.197864		80 2e		bra $197894	                BRA set_modifier
.197866		c9 b8		cmp #$b8	not_break_lc    CMP #KBD_SC_LALT | $80      ; Is it a break LALT?
.197868		d0 0c		bne $197876	                BNE not_break_la
.19786a		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.19786c		80 30		bra $19789e	                BRA clr_modifier
.19786e		c9 36		cmp #$36	not_make_la     CMP #KBD_SC_RSHIFT          ; Is it a make RSHIFT?
.197870		d0 0c		bne $19787e	                BNE not_make_rs
.197872		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.197874		80 1e		bra $197894	                BRA set_modifier
.197876		c9 b6		cmp #$b6	not_break_la    CMP #KBD_SC_RSHIFT | $80    ; Is it a break RSHIFT?
.197878		d0 0c		bne $197886	                BNE not_break_rs
.19787a		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.19787c		80 20		bra $19789e	                BRA clr_modifier
.19787e		c9 5e		cmp #$5e	not_make_rs     CMP #KBD_SC_RCTRL           ; Is it a make RCTRL?
.197880		d0 0c		bne $19788e	                BNE not_make_rc
.197882		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.197884		80 0e		bra $197894	                BRA set_modifier
.197886		c9 de		cmp #$de	not_break_rs    CMP #KBD_SC_RCTRL | $80     ; Is it a break RCTRL?
.197888		d0 0e		bne $197898	                BNE not_break_rc
.19788a		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.19788c		80 10		bra $19789e	                BRA clr_modifier
.19788e		c9 5c		cmp #$5c	not_make_rc     CMP #KBD_SC_RALT            ; Is it a make RALT?
.197890		d0 12		bne $1978a4	                BNE not_make_ra
.197892		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.197894		04 25		tsb $0f25	set_modifier    TSB #S_KBD_CONTROL.MODIFIERS,D  ; Set the indicated modifier bit
.197896		80 08		bra $1978a0	                BRA return_null
.197898		c9 dc		cmp #$dc	not_break_rc    CMP #KBD_SC_RALT | $80          ; Is it a break RALT?
.19789a		d0 04		bne $1978a0	                BNE return_null                 ; No: we don't use any other break scan codes
.19789c		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.19789e		14 25		trb $0f25	clr_modifier    TRB #S_KBD_CONTROL.MODIFIERS,D  ; Clear the indicated modifier bit
.1978a0		a9 00		lda #$00	return_null     LDA #0
.1978a2		80 55		bra $1978f9	                BRA done
.1978a4		a8		tay		not_make_ra     TAY                                     ; Use the scan code as an index...
.1978a5		c9 38		cmp #$38	                CMP #KBD_SC_PIVOT
.1978a7		90 0e		bcc $1978b7	                BLT below_38
.1978a9		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D              ; Check the NUM lock
.1978ab		89 02		bit #$02	                BIT #KBD_LOCK_NUMBER
.1978ad		f0 2a		beq $1978d9	                BEQ fetch_unmod                         ; No: translate the keys as unmodified
.1978af		a5 25		lda $0f25	chk_num_shift   LDA #S_KBD_CONTROL.MODIFIERS,D
.1978b1		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Check for a shift key being pressed
.1978b3		d0 24		bne $1978d9	                BNE fetch_unmod                         ; If so: translate the keys as modified
.1978b5		80 30		bra $1978e7	                BRA fetch_caps                          ; No: translate the key using the lock table
.1978b7		a5 25		lda $0f25	below_38        LDA #S_KBD_CONTROL.MODIFIERS,D
.1978b9		89 0c		bit #$0c	                BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL      ; Is either control key pressed?
.1978bb		f0 0c		beq $1978c9	                BEQ chk_capslock                        ; No: check for capslock
.1978bd		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.1978bf		f0 04		beq $1978c5	                BEQ fetch_control                       ; No: translate just based off of control
.1978c1		b7 3b		lda [$0f3b],y	                LDA [#S_KBD_CONTROL.TBL_CTRL_SHIFT,D],Y ; Look up the key modfified by CTRL and SHIFT
.1978c3		80 26		bra $1978eb	                BRA chk_ansi
.1978c5		b7 2f		lda [$0f2f],y	fetch_control   LDA [#S_KBD_CONTROL.TBL_CTRL,D],Y       ; Look up the key modified by CONTROL
.1978c7		80 22		bra $1978eb	                BRA chk_ansi
.1978c9		a5 26		lda $0f26	chk_capslock    LDA #S_KBD_CONTROL.LOCKS,D              ; Check the CAPS lock
.1978cb		89 04		bit #$04	                BIT #KBD_LOCK_CAPS
.1978cd		d0 0e		bne $1978dd	                BNE chk_caps_shift                      ; Yes: check the state of the SHIFT key
.1978cf		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.1978d1		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.1978d3		f0 04		beq $1978d9	                BEQ fetch_unmod                         ; No: translate just based off of control
.1978d5		b7 2b		lda [$0f2b],y	fetch_shifted   LDA [#S_KBD_CONTROL.TBL_SHIFT,D],Y      ; Look up the key modified by SHIFT
.1978d7		80 12		bra $1978eb	                BRA chk_ansi
.1978d9		b7 27		lda [$0f27],y	fetch_unmod     LDA [#S_KBD_CONTROL.TBL_UNMOD,D],Y      ; Look up the unmodified key
.1978db		80 0e		bra $1978eb	                BRA chk_ansi
.1978dd		a5 25		lda $0f25	chk_caps_shift  LDA #S_KBD_CONTROL.MODIFIERS,D
.1978df		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.1978e1		f0 04		beq $1978e7	                BEQ fetch_caps                          ; No: translate just based off of control
.1978e3		b7 37		lda [$0f37],y	                LDA [#S_KBD_CONTROL.TBL_LOCK_SHIFT,D],Y ; Look up the key modified by CAPS and SHIFT
.1978e5		80 04		bra $1978eb	                BRA chk_ansi
.1978e7		b7 33		lda [$0f33],y	fetch_caps      LDA [#S_KBD_CONTROL.TBL_LOCK,D],Y       ; Look up the key modified by CAPSLOCK
.1978e9		80 00		bra $1978eb	                BRA chk_ansi
.1978eb		c9 80		cmp #$80	chk_ansi        CMP #$80                                ; Check to see if we have an ANSI escape sequence to send
.1978ed		90 0a		bcc $1978f9	                BLT done                                ; If not, just return the character
.1978ef		c9 96		cmp #$96	                CMP #$96
.1978f1		b0 06		bcs $1978f9	                BGE done
.1978f3		22 35 79 19	jsl $197935	                JSL KBD_ENQ_ANSI                        ; Expand and enqueue the ANSI sequence
.1978f7		a9 1b		lda #$1b	                LDA #CHAR_ESC                           ; And return the ESC key to start the sequence
.1978f9		28		plp		done            PLP
.1978fa		2b		pld		                PLD
.1978fb		18		clc		                CLC
.1978fc		6b		rtl		                RTL
.1978fd						KBD_ENQUEUE_BCD
.1978fd		08		php		                PHP
.1978fe		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197900		48		pha		                PHA                     ; Save the value
.197901		4a		lsr a		                LSR A                   ; Get the 10s digit
.197902		4a		lsr a		                LSR A
.197903		4a		lsr a		                LSR A
.197904		4a		lsr a		                LSR A
.197905		c9 00		cmp #$00	                CMP #0                  ; If it's 0, move to the 1s digit
.197907		f0 0b		beq $197914	                BEQ enqueue_1
.197909		c9 0a		cmp #$0a	                CMP #$0A                ; If it's out of range, ignore this whole call
.19790b		b0 13		bcs $197920	                BGE done_A
.19790d		18		clc		                CLC                     ; Enqueue the tens digit
.19790e		69 30		adc #$30	                ADC #'0'
.197910		22 a7 76 19	jsl $1976a7	                JSL KBD_CHAR_ENQUEUE
.197914		68		pla		enqueue_1       PLA                     ; Enqueue the ones digit
.197915		29 0f		and #$0f	                AND #$0F
.197917		18		clc		                CLC
.197918		69 30		adc #$30	                ADC #'0'
.19791a		22 a7 76 19	jsl $1976a7	                JSL KBD_CHAR_ENQUEUE
.19791e		28		plp		done            PLP
.19791f		6b		rtl		                RTL
.197920		68		pla		done_A          PLA
.197921		80 fb		bra $19791e	                BRA done
.197923						KBD_BIN_TO_BCD
.197923		da		phx		                PHX
.197924		08		php		                PHP
.197925		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197927		aa		tax		                TAX
.197928		a9 99		lda #$99	                LDA #$99                ; Start with -1 in BCD form
.19792a		f8		sed		                SED                     ; Switch to Decimal arithmetic
.19792b		18		clc		loop            CLC
.19792c		69 01		adc #$01	                ADC #1                  ; Add 1 with BCD arithmetic
.19792e		ca		dex		                DEX                     ; Decrement input value in X
.19792f		10 fa		bpl $19792b	                BPL loop                ; loop until input value < 0
.197931		d8		cld		                CLD                     ; Switch back to Binary arithmetic
.197932		28		plp		                PLP
.197933		fa		plx		                PLX
.197934		6b		rtl		                RTL
.197935						KBD_ENQ_ANSI
.197935		08		php		                PHP
.197936		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197938		c9 80		cmp #$80	                CMP #$80                        ; check to make sure the code is within range
.19793a		b0 03		bcs $19793f	                BGE chk_high_end
.19793c		82 4a 00	brl $197989	                BRL done                        ; Out of range, just ignore it
.19793f		c9 96		cmp #$96	chk_high_end    CMP #$96
.197941		90 03		bcc $197946	                BLT save_value
.197943		82 43 00	brl $197989	                BRL done                        ; Out of range, just ignore it
.197946		48		pha		save_value      PHA
.197947		a9 5b		lda #$5b	                LDA #'['
.197949		22 a7 76 19	jsl $1976a7	                JSL KBD_CHAR_ENQUEUE
.19794d		68		pla		                PLA
.19794e		38		sec		                SEC
.19794f		e9 80		sbc #$80	                SBC #$80                ; Convert to an offset
.197951		aa		tax		                TAX                     ; And use it as an index to...
.197952		bf 8b 79 19	lda $19798b,x	                LDA @l ENCODE_CODE,X    ; Get the number
.197956		10 0b		bpl $197963	                BPL send_number         ; If MSB is not set, send the number as-is
.197958		29 7f		and #$7f	                AND #$7F                ; Remove the MSB
.19795a		18		clc		                CLC
.19795b		69 41		adc #$41	                ADC #'A'                ; Convert to 'A' .. 'D'
.19795d		22 a7 76 19	jsl $1976a7	                JSL KBD_CHAR_ENQUEUE    ; Enqueue the code
.197961		80 26		bra $197989	                BRA done
.197963		22 23 79 19	jsl $197923	send_number     JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.197967		22 fd 78 19	jsl $1978fd	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.19796b		22 84 77 19	jsl $197784	chk_modifier    JSL KBD_GETMODS_ANSI    ; Get the modifiers
.19796f		c9 00		cmp #$00	                CMP #0                  ; Are there any?
.197971		f0 10		beq $197983	                BEQ close               ; No: close the sequence
.197973		48		pha		                PHA
.197974		a9 3b		lda #$3b	                LDA #';'                ; Enqueue the separator
.197976		22 a7 76 19	jsl $1976a7	                JSL KBD_CHAR_ENQUEUE
.19797a		68		pla		                PLA
.19797b		22 23 79 19	jsl $197923	                JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.19797f		22 fd 78 19	jsl $1978fd	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.197983		a9 7e		lda #$7e	close           LDA #'~'                ; Enqueue closing code
.197985		22 a7 76 19	jsl $1976a7	                JSL KBD_CHAR_ENQUEUE
.197989		28		plp		done            PLP
.19798a		6b		rtl		                RTL
>19798b		01 02 03 04 05 06		ENCODE_CODE     .byte 1, 2, 3, 4, 5, 6      ; Insert, etc...
>197991		80 81 82 83			                .byte $80, $81, $82, $83    ; Cursor keys
>197995		0b 0c 0d 0e 0f			                .byte 11, 12, 13, 14, 15    ; F1 - F5
>19799a		11 12 13 14 15			                .byte 17, 18, 19, 20, 21    ; F6 - F10
>19799f		17 18				                .byte 23, 24                ; F11 - F12
.1979a1						KBD_SETTABLE
.1979a1		48		pha		                PHA
.1979a2		8b		phb		                PHB
.1979a3		0b		phd		                PHD
.1979a4		08		php		                PHP
.1979a5		48		pha		                PHA             ; begin setdp macro
.1979a6		08		php		                PHP
.1979a7		c2 20		rep #$20	                REP #$20        ; set A long
.1979a9		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1979ac		5b		tcd		                TCD
.1979ad		28		plp		                PLP
.1979ae		68		pla		                PLA             ; end setdp macro
.1979af		e2 20		sep #$20	                SEP #$20        ; set A short
.1979b1		8b		phb		                PHB                 ; Get the data bank into A
.1979b2		68		pla		                PLA
.1979b3		c2 20		rep #$20	                REP #$20        ; set A long
.1979b5		29 ff 00	and #$00ff	                AND #$00FF
.1979b8		85 29		sta $0f29	                STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.1979ba		85 2d		sta $0f2d	                STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.1979bc		85 31		sta $0f31	                STA #S_KBD_CONTROL.TBL_CTRL+2,D
.1979be		85 35		sta $0f35	                STA #S_KBD_CONTROL.TBL_LOCK+2,D
.1979c0		85 39		sta $0f39	                STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.1979c2		85 3d		sta $0f3d	                STA #S_KBD_CONTROL.TBL_CTRL_SHIFT+2,D
.1979c4		86 27		stx $0f27	                STX #S_KBD_CONTROL.TBL_UNMOD,D
.1979c6		86 2b		stx $0f2b	                STX #S_KBD_CONTROL.TBL_SHIFT,D
.1979c8		86 2f		stx $0f2f	                STX #S_KBD_CONTROL.TBL_CTRL,D
.1979ca		86 33		stx $0f33	                STX #S_KBD_CONTROL.TBL_LOCK,D
.1979cc		86 37		stx $0f37	                STX #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.1979ce		86 3b		stx $0f3b	                STX #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.1979d0		28		plp		                PLP
.1979d1		2b		pld		                PLD
.1979d2		ab		plb		                PLB
.1979d3		68		pla		                PLA
.1979d4		6b		rtl		                RTL
>1979d5						.align 256
>197a00		00 01 02 03 04 05 06 07		TBL_SET1        .byte $00, $01, $02, $03, $04, $05, $06, $07    ; $00 - $07
>197a08		08 09 0a 0b 0c 0d 0e 0f		                .byte $08, $09, $0A, $0B, $0C, $0D, $0E, $0F    ; $08 - $0F
>197a10		10 11 12 13 14 15 16 17		                .byte $10, $11, $12, $13, $14, $15, $16, $17    ; $10 - $17
>197a18		18 19 1a 1b 1c 1d 1e 1f		                .byte $18, $19, $1A, $1B, $1C, $1D, $1E, $1F    ; $18 - $1F
>197a20		20 21 22 23 24 25 26 27		                .byte $20, $21, $22, $23, $24, $25, $26, $27    ; $20 - $27
>197a28		28 29 2a 2b 2c 2d 2e 2f		                .byte $28, $29, $2A, $2B, $2C, $2D, $2E, $2F    ; $28 - $2F
>197a30		30 31 32 33 34 35 36 37		                .byte $30, $31, $32, $33, $34, $35, $36, $37    ; $30 - $37
>197a38		38 39 3a 3b 3c 3d 3e 3f		                .byte $38, $39, $3A, $3B, $3C, $3D, $3E, $3F    ; $38 - $3F
>197a40		40 41 42 43 44 45 46 47		                .byte $40, $41, $42, $43, $44, $45, $46, $47    ; $40 - $47
>197a48		48 49 4a 4b 4c 4d 4e 4f		                .byte $48, $49, $4A, $4B, $4C, $4D, $4E, $4F    ; $48 - $4F
>197a50		50 51 52 53 54 55 56 57		                .byte $50, $51, $52, $53, $54, $55, $56, $57    ; $50 - $57
>197a58		58 00 00 00 00 00 00 00		                .byte $58, $00, $00, $00, $00, $00, $00, $00    ; $58 - $5F
>197a60		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>197a68		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>197a70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>197a78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
>197a80		00 00 00 00 00 00 00 00		TBL_SET1_E0     .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $00 - $07
>197a88		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $08 - $0F
>197a90		70 00 00 00 00 00 00 00		                .byte $70, $00, $00, $00, $00, $00, $00, $00    ; $10 - $17
>197a98		00 71 00 00 6d 5e 00 00		                .byte $00, $71, $00, $00, $6D, $5E, $00, $00    ; $18 - $1F
>197aa0		72 00 6e 00 6f 00 00 00		                .byte $72, $00, $6E, $00, $6F, $00, $00, $00    ; $20 - $27
>197aa8		00 00 00 00 00 00 73 00		                .byte $00, $00, $00, $00, $00, $00, $73, $00    ; $28 - $2F
>197ab0		74 00 00 00 00 6c 00 00		                .byte $74, $00, $00, $00, $00, $6C, $00, $00    ; $30 - $37
>197ab8		5c 00 00 00 00 00 00 00		                .byte $5C, $00, $00, $00, $00, $00, $00, $00    ; $38 - $3F
>197ac0		00 00 00 00 00 00 61 63		                .byte $00, $00, $00, $00, $00, $00, $61, $63    ; $40 - $47
>197ac8		68 64 00 69 00 6b 00 66		                .byte $68, $64, $00, $69, $00, $6B, $00, $66    ; $48 - $4F
>197ad0		6a 67 62 65 00 00 00 00		                .byte $6A, $67, $62, $65, $00, $00, $00, $00    ; $50 - $57
>197ad8		00 00 00 00 00 5d 00 00		                .byte $00, $00, $00, $00, $00, $5D, $00, $00    ; $58 - $5F
>197ae0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>197ae8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>197af0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>197af8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
.197b00						KBD_STATE_MACH
>197b00		00 e0 01 00			                .byte KBD_STATE_IDLE, $E0, KBD_STATE_E0, 0                          ; IDLE =[E0]=> STATE_E0
>197b04		00 e1 04 00			                .byte KBD_STATE_IDLE, $E1, KBD_STATE_E1, 0                          ; IDLE =[E1]=> STATE_E1
>197b08		00 00 00 01			                .byte KBD_STATE_IDLE, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_BASE       ; IDLE =[default]=> IDLE / emit(TBL_SET1[x])
>197b0c		01 2a 02 00			                .byte KBD_STATE_E0, $2A, KBD_STATE_E02A, 0                          ; STATE_E0 =[2A]=> STATE_E02A
>197b10		01 b7 09 00			                .byte KBD_STATE_E0, $B7, KBD_STATE_E0B7, 0                          ; STATE_E0 =[B7]=> STATE_E0B7
>197b14		01 00 00 02			                .byte KBD_STATE_E0, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_E0           ; STATE_E0 =[default]=> IDLE, emit(TBL_SET1_E0[x])
>197b18		02 e0 03 00			                .byte KBD_STATE_E02A, $E0, KBD_STATE_E02AE0, 0                      ; STATE_E02A =[E0]=> STATE_E02AE0
>197b1c		02 00 00 00			                .byte KBD_STATE_E02A, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E02A =[default]=> IDLE, ignore(x)
>197b20		03 37 00 60			                .byte KBD_STATE_E02AE0, $37, KBD_STATE_IDLE, $60                    ; STATE_E02AE0 =[37]=> IDLE, emit(make{PrintScreen})
>197b24		03 00 00 00			                .byte KBD_STATE_E02AE0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E02AE0 =[default]=> IDLE, ignore(x)
>197b28		09 e0 0a 00			                .byte KBD_STATE_E0B7, $E0, KBD_STATE_E0B7E0, 0                      ; STATE_E0B7 =[E0]=> STATE_E0B7E0
>197b2c		09 00 00 00			                .byte KBD_STATE_E0B7, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E0B7 =[default]=> IDLE, ignore(x)
>197b30		0a aa 00 e0			                .byte KBD_STATE_E0B7E0, $AA, KBD_STATE_IDLE, $E0                    ; STATE_E0B7E0 =[AA]=> IDLE, emit(break{PrintScreen})
>197b34		0a 00 00 00			                .byte KBD_STATE_E0B7E0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E0B7E0 =[default]=> IDLE, ignore(x)
>197b38		04 1d 05 00			                .byte KBD_STATE_E1, $1D, KBD_STATE_E11D, 0                          ; STATE_E1 =[1D]=> STATE_E11D
>197b3c		04 00 00 00			                .byte KBD_STATE_E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE            ; STATE_E1 =[default]=> IDLE, ignore(x)
>197b40		05 45 06 00			                .byte KBD_STATE_E11D, $45, KBD_STATE_E11D45, 0                      ; STATE_E11D =[45]=> STATE_E11D45
>197b44		05 00 00 00			                .byte KBD_STATE_E11D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E11D =[default]=> IDLE, ignore(x)
>197b48		06 e1 07 00			                .byte KBD_STATE_E11D45, $E1, KBD_STATE_E11D45E1, 0                  ; STATE_E11D45 =[E1]=> STATE_E11D45E1
>197b4c		06 00 00 00			                .byte KBD_STATE_E11D45, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E11D45 =[default]=> IDLE, ignore(x)
>197b50		07 9d 08 00			                .byte KBD_STATE_E11D45E1, $9D, KBD_STATE_E11D45E19D, 0              ; STATE_E11D45E1 =[9D]=> STATE_E11D45E19D
>197b54		07 00 00 00			                .byte KBD_STATE_E11D45E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE      ; STATE_E11D45E1 =[default]=> IDLE, ignore(x)
>197b58		08 c5 00 61			                .byte KBD_STATE_E11D45E19D, $C5, KBD_STATE_IDLE, $61                ; STATE_E11D45E19D =[C5]=> IDLE, emit(make{Pause})
>197b5c		08 00 00 00			                .byte KBD_STATE_E11D45E19D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE    ; STATE_E11D45E19D =[default]=> IDLE, ignore(x)
>197b60		ff ff ff ff			                .byte $FF, $FF, $FF, $FF                                            ; End of state machine
>197b64						.align 256
>197c00		00 1b 31 32 33 34 35 36		SC_US_UNMOD     .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>197c08		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>197c10		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>197c18		6f 70 5b 5d 0d 00 61 73		                .byte 'o', 'p', '[', ']', $0D, $00, 'a', 's'                        ; $18 - $1F
>197c20		64 66 67 68 6a 6b 6c 3b		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';'                        ; $20 - $27
>197c28		27 60 00 5c 7a 78 63 76		                .byte $27, '`', $00, '\', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>197c30		62 6e 6d 2c 2e 2f 00 2a		                .byte 'b', 'n', 'm', ',', '.', '/', $00, '*'                        ; $30 - $37
>197c38		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197c40		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197c48		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197c50		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197c58		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197c60		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197c68		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197c70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197c78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197c80		00 1b 21 40 23 24 25 5e		SC_US_SHFT      .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197c88		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197c90		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>197c98		4f 50 7b 7d 0a 00 41 53		                .byte 'O', 'P', '{', '}', $0A, $00, 'A', 'S'                        ; $18 - $1F
>197ca0		44 46 47 48 4a 4b 4c 3a		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':'                        ; $20 - $27
>197ca8		22 7e 00 7c 5a 58 43 56		                .byte $22, '~', $00, '|', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>197cb0		42 4e 4d 3c 3e 3f 00 00		                .byte 'B', 'N', 'M', '<', '>', '?', $00, $00                        ; $30 - $37
>197cb8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197cc0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197cc8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197cd0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197cd8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197ce0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197ce8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197cf0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197cf8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197d00		00 1b 31 32 33 34 35 1e		SC_US_CTRL      .byte $00, $1B, '1', '2', '3', '4', '5', $1E                        ; $00 - $07
>197d08		37 38 39 30 1f 3d 08 09		                .byte '7', '8', '9', '0', $1F, '=', $08, $09                        ; $08 - $0F
>197d10		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>197d18		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>197d20		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>197d28		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>197d30		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>197d38		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197d40		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197d48		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197d50		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197d58		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197d60		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197d68		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197d70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197d78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197d80		00 1b 31 32 33 34 35 36		SC_US_LOCK      .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>197d88		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>197d90		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>197d98		4f 50 5b 5d 0d 00 41 53		                .byte 'O', 'P', '[', ']', $0D, $00, 'A', 'S'                        ; $18 - $1F
>197da0		44 46 47 48 4a 4b 4c 3b		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';'                        ; $20 - $27
>197da8		27 60 00 5c 5a 58 43 56		                .byte $27, '`', $00, '\', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>197db0		42 4e 4d 2c 2e 2f 00 00		                .byte 'B', 'N', 'M', ',', '.', '/', $00, $00                        ; $30 - $37
>197db8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197dc0		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>197dc8		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>197dd0		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>197dd8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197de0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197de8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197df0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197df8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197e00		00 1b 21 40 23 24 25 5e		SC_US_LOCK_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197e08		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197e10		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>197e18		6f 70 7b 7d 0a 00 61 73		                .byte 'o', 'p', '{', '}', $0A, $00, 'a', 's'                        ; $18 - $1F
>197e20		64 66 67 68 6a 6b 6c 3a		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ':'                        ; $20 - $27
>197e28		22 7e 00 7c 7a 78 63 76		                .byte $22, '~', $00, '|', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>197e30		62 6e 6d 3c 3e 3f 00 00		                .byte 'b', 'n', 'm', '<', '>', '?', $00, $00                        ; $30 - $37
>197e38		00 20 00 00 00 00 00 00		                .byte $00, ' ', $00, $00, $00, $00, $00, $00                        ; $38 - $3F
>197e40		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>197e48		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>197e50		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>197e58		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197e60		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197e68		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197e70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197e78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197e80		00 1b 21 40 23 24 25 5e		SC_US_CTRL_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197e88		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197e90		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>197e98		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>197ea0		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>197ea8		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>197eb0		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>197eb8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197ec0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197ec8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197ed0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197ed8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197ee0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197ee8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197ef0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197ef8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/mouse_driver.asm

.197f00						IINITMOUSE
.197f00		48		pha		                PHA
.197f01		da		phx		                PHX
.197f02		8b		phb		                PHB
.197f03		0b		phd		                PHD
.197f04		08		php		                PHP
.197f05		48		pha		                PHA             ; begin setdbr macro
.197f06		08		php		                PHP
.197f07		e2 20		sep #$20	                SEP #$20        ; set A short
.197f09		a9 00		lda #$00	                LDA #0
.197f0b		48		pha		                PHA
.197f0c		ab		plb		                PLB
.197f0d		28		plp		                PLP
.197f0e		68		pla		                PLA             ; end setdbr macro
.197f0f		48		pha		                PHA             ; begin setdp macro
.197f10		08		php		                PHP
.197f11		c2 20		rep #$20	                REP #$20        ; set A long
.197f13		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.197f16		5b		tcd		                TCD
.197f17		28		plp		                PLP
.197f18		68		pla		                PLA             ; end setdp macro
.197f19		78		sei		                SEI
.197f1a		e2 20		sep #$20	                SEP #$20        ; set A short
.197f1c		c2 10		rep #$10	                REP #$10        ; set X long
.197f1e		18		clc		                CLC
.197f1f		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.197f22		20 0d 80	jsr $19800d	DO_CMD_A9_AGAIN JSR Poll_Inbuf_Mouse_TimeOut
.197f25		b0 0b		bcs $197f32	                BCS mouse_init_fail
.197f27		a9 a9		lda #$a9	                LDA #$A9                        ; Tests second PS2 Channel
.197f29		8f 07 18 af	sta $af1807	                STA @l KBD_CMD_BUF
.197f2d		20 e5 7f	jsr $197fe5	                JSR Poll_Outbuf_Mouse_TimeOut
.197f30		90 2b		bcc $197f5d	                BCC mouse_found
.197f32		a9 00		lda #$00	mouse_init_fail LDA #0                          ; Disable the mouse pointer
.197f34		8f 00 07 af	sta $af0700	                STA @l MOUSE_PTR_CTRL_REG_L
.197f38		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Make sure the mouse interrupt is disabled
.197f3c		09 80		ora #$80	                ORA #FNX0_INT07_MOUSE
.197f3e		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.197f42		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1         ; Read the Pending Register &
.197f46		29 01		and #$01	                AND #FNX1_INT00_KBD
.197f48		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1         ; Writing it back will clear the Active Bit
.197f4c		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.197f50		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.197f52		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.197f56		28		plp		                PLP                             ; Return failure
.197f57		2b		pld		                PLD
.197f58		ab		plb		                PLB
.197f59		fa		plx		                PLX
.197f5a		68		pla		                PLA
.197f5b		38		sec		                SEC
.197f5c		6b		rtl		                RTL
.197f5d		af 03 18 af	lda $af1803	mouse_found     LDA @l KBD_OUT_BUF              ; Clear the Output buffer
.197f61		c9 00		cmp #$00	                CMP #$00
.197f63		d0 bd		bne $197f22	                BNE DO_CMD_A9_AGAIN
.197f65		a9 f5		lda #$f5	                LDA #$F5                        ; Disable the mouse
.197f67		20 b7 7f	jsr $197fb7	                JSR MOUSE_WRITE
.197f6a		20 cc 7f	jsr $197fcc	                JSR MOUSE_READ
.197f6d		b0 c3		bcs $197f32	                BCS mouse_init_fail
.197f6f		a9 f6		lda #$f6	                LDA #$F6                        ;Tell the mouse to use default settings
.197f71		20 b7 7f	jsr $197fb7	                JSR MOUSE_WRITE
.197f74		20 cc 7f	jsr $197fcc	                JSR MOUSE_READ
.197f77		b0 b9		bcs $197f32	                BCS mouse_init_fail
.197f79		a9 e8		lda #$e8	                LDA #$E8
.197f7b		20 b7 7f	jsr $197fb7	                JSR MOUSE_WRITE
.197f7e		20 cc 7f	jsr $197fcc	                JSR MOUSE_READ
.197f81		b0 af		bcs $197f32	                BCS mouse_init_fail
.197f83		a9 00		lda #$00	                LDA #$00
.197f85		20 b7 7f	jsr $197fb7	                JSR MOUSE_WRITE
.197f88		20 cc 7f	jsr $197fcc	                JSR MOUSE_READ
.197f8b		b0 a5		bcs $197f32	                BCS mouse_init_fail
.197f8d		a9 f4		lda #$f4	                LDA #$F4                        ; Enable the Mouse
.197f8f		20 b7 7f	jsr $197fb7	                JSR MOUSE_WRITE
.197f92		20 cc 7f	jsr $197fcc	                JSR MOUSE_READ
.197f95		b0 9b		bcs $197f32	                BCS mouse_init_fail
.197f97		a9 00		lda #$00	                LDA #$00
.197f99		8d e0 00	sta $00e0	                STA @w MOUSE_IDX
.197f9c		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.197fa0		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.197fa2		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.197fa6		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Enable the mouse interrupt
.197faa		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.197fac		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.197fb0		28		plp		mouse_init_ok   PLP
.197fb1		2b		pld		                PLD
.197fb2		ab		plb		                PLB
.197fb3		fa		plx		                PLX
.197fb4		68		pla		                PLA
.197fb5		18		clc		                CLC
.197fb6		6b		rtl		                RTL
.197fb7						MOUSE_WRITE
.197fb7		e2 20		sep #$20	                SEP #$20        ; set A short
.197fb9		48		pha		                PHA
.197fba		20 00 80	jsr $198000	                JSR Poll_Inbuf          ; Test bit $01 (if 2, Full)
.197fbd		a9 d4		lda #$d4	                LDA #$D4
.197fbf		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF         ; KBD_CMD_BUF		= $AF1064
.197fc3		20 00 80	jsr $198000	                JSR Poll_Inbuf
.197fc6		68		pla		                PLA
.197fc7		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF        ; KBD_DATA_BUF	= $AF1060
.197fcb		60		rts		                RTS
.197fcc						MOUSE_READ
.197fcc		e2 20		sep #$20	                SEP #$20        ; set A short
.197fce		20 e5 7f	jsr $197fe5	                JSR Poll_Outbuf_Mouse_TimeOut   ; Test bit $01 (if 1, Full)
.197fd1		b0 04		bcs $197fd7	                BCS done
.197fd3		af 03 18 af	lda $af1803	                LDA KBD_INPT_BUF        ; KBD_INPT_BUF	= $AF1060
.197fd7		60		rts		done            RTS
.197fd8						Poll_Outbuf_Mouse
.197fd8		e2 20		sep #$20	                SEP #$20        ; set A short
.197fda		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.197fde		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.197fe0		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.197fe2		d0 f6		bne $197fda	                BNE wait
.197fe4		60		rts		                RTS
.197fe5						Poll_Outbuf_Mouse_TimeOut
.197fe5		e2 20		sep #$20	                SEP #$20        ; set A short
.197fe7		c2 10		rep #$10	                REP #$10        ; set X long
.197fe9		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.197fec		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.197ff0		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.197ff2		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.197ff4		f0 08		beq $197ffe	                BEQ ret_success
.197ff6		ca		dex		                DEX
.197ff7		e0 00 00	cpx #$0000	                CPX #$0000
.197ffa		d0 f0		bne $197fec	                BNE wait
.197ffc		38		sec		                SEC                     ; Return timeout error
.197ffd		60		rts		                RTS
.197ffe		18		clc		ret_success     CLC                     ; Return success
.197fff		60		rts		                RTS
.198000						Poll_Inbuf
.198000		e2 20		sep #$20	                SEP #$20        ; set A short
.198002		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT         ; Load Status Byte
.198006		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.198008		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.19800a		f0 f6		beq $198002	                BEQ wait
.19800c		60		rts		                RTS
.19800d						Poll_Inbuf_Mouse_TimeOut
.19800d		e2 20		sep #$20	                SEP #$20        ; set A short
.19800f		c2 10		rep #$10	                REP #$10        ; set X long
.198011		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.198014		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.198018		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.19801a		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.19801c		d0 08		bne $198026	                BNE ret_success
.19801e		ca		dex		                DEX
.19801f		e0 00 00	cpx #$0000	                CPX #$0000
.198022		d0 f0		bne $198014	                BNE wait
.198024		38		sec		                SEC                     ; Return timeout error
.198025		60		rts		                RTS
.198026		18		clc		ret_success     CLC                     ; Return success
.198027		60		rts		                RTS
.198028						MOUSE_INTERRUPT
.198028		8b		phb		                PHB
.198029		0b		phd		                PHD
.19802a		08		php		                PHP
.19802b						                setasx
.19802b		78		sei		                SEI
.19802c		48		pha		                PHA             ; begin setdbr macro
.19802d		08		php		                PHP
.19802e		e2 20		sep #$20	                SEP #$20        ; set A short
.198030		a9 00		lda #$00	                LDA #0
.198032		48		pha		                PHA
.198033		ab		plb		                PLB
.198034		28		plp		                PLP
.198035		68		pla		                PLA             ; end setdbr macro
.198036		48		pha		                PHA             ; begin setdp macro
.198037		08		php		                PHP
.198038		c2 20		rep #$20	                REP #$20        ; set A long
.19803a		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19803d		5b		tcd		                TCD
.19803e		28		plp		                PLP
.19803f		68		pla		                PLA             ; end setdp macro
.198040		ae e0 00	ldx $00e0	                LDX @w MOUSE_IDX                ; Get the # of the mouse byte to write
.198043		af 03 18 af	lda $af1803	                LDA @l KBD_INPT_BUF             ; Get the byte from the PS/2 interface
.198047		9f 06 07 af	sta $af0706,x	                STA @l MOUSE_PTR_BYTE0,X        ; Store it into the correct Vicky register
.19804b		e8		inx		next_byte       INX                             ; Move to the next byte
.19804c		e0 03 00	cpx #$0003	                CPX #$03                        ; Have we written 3 bytes?
.19804f		d0 1b		bne $19806c	                BNE save_ptr                    ; No: return and wait for the next mouse interrupt
.198051		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.198055		85 e1		sta $e1		                STA @b MOUSE_POS_X_LO
.198057		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.19805b		85 e2		sta $e2		                STA @b MOUSE_POS_X_HI
.19805d		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.198061		85 e3		sta $e3		                STA @b MOUSE_POS_Y_LO
.198063		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.198067		85 e4		sta $e4		                STA @b MOUSE_POS_Y_HI
.198069		a2 00 00	ldx #$0000	                LDX #0                          ; Reset our state machine to the beginning
.19806c		8e e0 00	stx $00e0	save_ptr        STX @w MOUSE_IDX                ; Save our next byte position (state)
.19806f		28		plp		                PLP
.198070		2b		pld		                PLD
.198071		ab		plb		                PLB
.198072		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/boot_sound.asm

.198073						BOOT_SOUND
.198073		48		pha		                PHA
.198074		da		phx		                PHX
.198075		08		php		                PHP
.198076		e2 20		sep #$20	                SEP #$20        ; set A short
.198078		a9 00		lda #$00	                LDA #0
.19807a		a2 00 00	ldx #$0000	                LDX #0
.19807d		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.198081		e8		inx		                INX                             ; Move to the next SID register
.198082		e0 18 00	cpx #$0018	                CPX #24
.198085		d0 f6		bne $19807d	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.198087		a9 29		lda #$29	                LDA #$29                        ; Attack = 2, Decay = 9
.198089		8f 05 e4 af	sta $afe405	                STA @l SID0_V1_ATCK_DECY
.19808d		8f 0c e4 af	sta $afe40c	                STA @l SID0_V2_ATCK_DECY
.198091		8f 13 e4 af	sta $afe413	                STA @l SID0_V3_ATCK_DECY
.198095		a9 1f		lda #$1f	                LDA #$1F                        ; Sustain = 1, Release = 5
.198097		8f 06 e4 af	sta $afe406	                STA @l SID0_V1_SSTN_RLSE
.19809b		8f 0d e4 af	sta $afe40d	                STA @l SID0_V2_SSTN_RLSE
.19809f		8f 14 e4 af	sta $afe414	                STA @l SID0_V3_SSTN_RLSE
.1980a3		a9 0f		lda #$0f	                LDA #15                         ; Set the volume to max
.1980a5		8f 18 e4 af	sta $afe418	                STA @l SID0_MODE_VOL
.1980a9		a9 60		lda #$60	                LDA #96                         ; Set voice 1 to F-3
.1980ab		8f 00 e4 af	sta $afe400	                STA @l SID0_V1_FREQ_LO
.1980af		a9 16		lda #$16	                LDA #22
.1980b1		8f 01 e4 af	sta $afe401	                STA @l SID0_V1_FREQ_HI
.1980b5		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.1980b7		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.1980bb		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.1980be		22 cd 0f 19	jsl $190fcd	                JSL ILOOP_MS
.1980c2		a9 31		lda #$31	                LDA #49                         ; Set voice 2 to A-3
.1980c4		8f 07 e4 af	sta $afe407	                STA @l SID0_V2_FREQ_LO
.1980c8		a9 08		lda #$08	                LDA #8
.1980ca		8f 08 e4 af	sta $afe408	                STA @l SID0_V2_FREQ_HI
.1980ce		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.1980d0		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.1980d4		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.1980d7		22 cd 0f 19	jsl $190fcd	                JSL ILOOP_MS
.1980db		a9 87		lda #$87	                LDA #135                        ; Set voice 3 to C-3
.1980dd		8f 0e e4 af	sta $afe40e	                STA @l SID0_V3_FREQ_LO
.1980e1		a9 21		lda #$21	                LDA #33
.1980e3		8f 0f e4 af	sta $afe40f	                STA @l SID0_V3_FREQ_HI
.1980e7		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.1980e9		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.1980ed		a2 20 4e	ldx #$4e20	                LDX #20000                      ; Hold down the keys, so to speak... for a while
.1980f0		22 cd 0f 19	jsl $190fcd	                JSL ILOOP_MS
.1980f4		a9 10		lda #$10	                LDA #$10                        ; Release the keys...
.1980f6		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.1980fa		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.1980fe		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.198102		a9 0e		lda #$0e	                LDA #14
.198104		8f 18 e4 af	sta $afe418	dampen          STA @l SID0_MODE_VOL
.198108		a2 64 00	ldx #$0064	                LDX #100
.19810b		22 cd 0f 19	jsl $190fcd	                JSL ILOOP_MS
.19810f		3a		dec a		                DEC A
.198110		d0 f2		bne $198104	                BNE dampen
.198112		28		plp		                PLP
.198113		fa		plx		                PLX
.198114		68		pla		                PLA
.198115		6b		rtl		                RTL
.198116						BOOT_SOUND_OFF
.198116		48		pha		                PHA
.198117		da		phx		                PHX
.198118		08		php		                PHP
.198119		a2 00 00	ldx #$0000	                LDX #0
.19811c		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.198120		e8		inx		                INX                             ; Move to the next SID register
.198121		e0 18 00	cpx #$0018	                CPX #24
.198124		d0 f6		bne $19811c	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.198126		28		plp		                PLP
.198127		fa		plx		                PLX
.198128		68		pla		                PLA
.198129		6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.19812a						    KERNEL_DATA
>19812a		20 20 20 20 0b 0c 0b 0c		    greet_msg   .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " UU    UU" ,$0D
>198132		0b 0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>198142		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>19814a		0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>198159		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>198161		0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>19816f		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>198177		0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>198184		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UUUUUUUU",$0D
>19818c		0b 0c 20 55 55 55 55 55 55 55 55 0d
>198198		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX U -- 1,572,864 Bytes Free", $0D
>1981a0		45 4e 49 58 20 55 20 2d 2d 20 31 2c 35 37 32 2c
>1981b0		38 36 34 20 42 79 74 65 73 20 46 72 65 65 0d
>1981bf		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com -- Kernel: "
>1981c7		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 2d 20 4b 65
>1981d7		72 6e 65 6c 3a 20

;******  Processing file: src\version.asm

>1981dd		76 30 2e 34 2e 30 2d 61		.text "v0.4.0-alpha+303 (2021-05-17)"
>1981e5		6c 70 68 61 2b 33 30 33 20 28 32 30 32 31 2d 30
>1981f5		35 2d 31 37 29

;******  Return to file: src\kernel.asm

>1981fa		0d 00				                .text $0D,$00
>1981fc		90 90 90 90 90 90 d0 d0		  greet_clr_line1 .text $90, $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>198204		b0 b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198214		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198224		f0 f0
>198226		90 90 90 90 90 d0 d0 b0		  greet_clr_line2 .text $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>19822e		b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>19823e		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>19824e		f0 f0
>198250		90 90 90 90 d0 d0 b0 b0		  greet_clr_line3 .text $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>198258		a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198268		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198278		f0 f0
>19827a		90 90 90 d0 d0 b0 b0 a0		  greet_clr_line4 .text $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>198282		a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198292		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1982a2		f0 f0
>1982a4		90 90 d0 d0 b0 b0 a0 a0		  greet_clr_line5 .text $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>1982ac		e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1982bc		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1982cc		f0 f0
>1982ce		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>1982d2		00 00 80 ff			                .text $00, $00, $80, $FF
>1982d6		00 80 00 ff			                .text $00, $80, $00, $FF
>1982da		80 00 00 ff			                .text $80, $00, $00, $FF
>1982de		00 80 80 ff			                .text $00, $80, $80, $FF
>1982e2		80 80 00 ff			                .text $80, $80, $00, $FF
>1982e6		80 00 80 ff			                .text $80, $00, $80, $FF
>1982ea		80 80 80 ff			                .text $80, $80, $80, $FF
>1982ee		00 45 ff ff			                .text $00, $45, $FF, $FF
>1982f2		13 45 8b ff			                .text $13, $45, $8B, $FF
>1982f6		00 00 20 ff			                .text $00, $00, $20, $FF
>1982fa		00 20 00 ff			                .text $00, $20, $00, $FF
>1982fe		20 00 00 ff			                .text $20, $00, $00, $FF
>198302		20 20 20 ff			                .text $20, $20, $20, $FF
>198306		40 40 40 ff			                .text $40, $40, $40, $FF
>19830a		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>19830e		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>198312		00 00 80 ff			                .text $00, $00, $80, $FF
>198316		00 80 00 ff			                .text $00, $80, $00, $FF
>19831a		80 00 00 ff			                .text $80, $00, $00, $FF
>19831e		00 20 20 ff			                .text $00, $20, $20, $FF
>198322		20 20 00 ff			                .text $20, $20, $00, $FF
>198326		20 00 20 ff			                .text $20, $00, $20, $FF
>19832a		20 20 20 ff			                .text $20, $20, $20, $FF
>19832e		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>198332		13 45 8b ff			                .text $13, $45, $8B, $FF
>198336		00 00 20 ff			                .text $00, $00, $20, $FF
>19833a		00 20 00 ff			                .text $00, $20, $00, $FF
>19833e		40 00 00 ff			                .text $40, $00, $00, $FF
>198342		10 10 10 ff			                .text $10, $10, $10, $FF
>198346		40 40 40 ff			                .text $40, $40, $40, $FF
>19834a		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>19834e		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>198356		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>198366		00
>198367		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>19836f		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>19837f		00
>198380		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>198388		20 45 78 65 63 75 74 65 64 2e 0d 00
>198394		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>19839c		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>1983ac		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>1983b4		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>1983c4		64 2e 2e 2e 0d 00
>1983ca		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>1983d2		20 50 72 65 73 65 6e 74 0d 00
>1983dc		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>1983e4		65 73 65 6e 74 0d 00
>1983eb		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>1983f3		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>198403		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>198413		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>19841b		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>19842b		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>198438		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>198440		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>19844c		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>198454		54 55 52 45 20 46 4f 55 4e 44 2e 00
>198460		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>198468		45 44 2e 00
>19846c		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>198474		47 20 42 4d 50 20 50 41 52 53 45 52 00
>198481		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>198489		50 72 65 73 65 6e 74 3a 00
>198492		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>19849a		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>1984aa		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>1984b8		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>1984c0		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>1984d0		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>1984dd		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>1984e5		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>1984f5		72 64 2e 00
>1984f9		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>198501		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>198511		49 44 45 20 64 72 69 76 65 2e 00
>19851c		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>198524		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>198534		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>198542		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>19854a		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>198559		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>198561		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>198570		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>198578		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>198588		2e 2e 00
>19858b		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>198593		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>19859b		52 4f 52 00
>19859f		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>1985a7		38 39 41 42 43 44 45 46 00
>1985b0						.align 256
>198600		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198608		37 38 39 30 2d 3d 08 09
>198610		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198618		6f 70 5b 5d 0d 00 61 73
>198620		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198628		27 60 00 5c 7a 78 63 76
>198630		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>198638		00 20 00 81 82 83 84 85
>198640		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>198648		11 00 00 9d 00 1d 00 00
>198650		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>198658		8c 00 00 00 00 00 00 00
>198660		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198668		00 00 00 00 00 00 00 00
>198670		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198678		00 00 00 00 00 00 00 00
>198680		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>198688		26 2a 28 29 5f 2b 08 09
>198690		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>198698		4f 50 7b 7d 0d 00 41 53
>1986a0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>1986a8		22 7e 00 7c 5a 58 43 56
>1986b0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1986b8		00 20 00 00 00 00 00 00
>1986c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1986c8		00 00 00 00 00 00 00 00
>1986d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1986d8		00 00 00 00 00 00 00 00
>1986e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1986e8		00 00 00 00 00 00 00 00
>1986f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1986f8		00 00 00 00 00 00 00 00
>198700		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198708		37 38 39 30 2d 3d 08 09
>198710		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>198718		0f 10 5b 5d 0d 00 01 13
>198720		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>198728		27 00 00 5c 1a 18 03 16
>198730		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198738		00 20 00 00 00 00 00 00
>198740		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198748		00 00 00 00 00 00 00 00
>198750		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198758		00 00 00 00 00 00 00 00
>198760		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198768		00 00 00 00 00 00 00 00
>198770		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198778		00 00 00 00 00 00 00 00
>198780		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198788		37 38 39 30 2d 3d 08 09
>198790		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198798		6f 70 5b 5d 0d 00 61 73
>1987a0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>1987a8		27 60 00 5c 7a 78 63 76
>1987b0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1987b8		00 20 00 00 00 00 00 00
>1987c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1987c8		00 00 00 00 00 00 00 00
>1987d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1987d8		00 00 00 00 00 00 00 00
>1987e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1987e8		00 00 00 00 00 00 00 00
>1987f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1987f8		00 00 00 00 00 00 00 00
>198800		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198808		37 38 39 30 2d 3d 08 09
>198810		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198818		6f 70 5b 5d 0d 00 61 73
>198820		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198828		27 60 00 5c 7a 78 63 76
>198830		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198838		00 20 00 00 00 00 00 00
>198840		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198848		00 00 00 00 00 00 00 00
>198850		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198858		00 00 00 00 00 00 00 00
>198860		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198868		00 00 00 00 00 00 00 00
>198870		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198878		00 00 00 00 00 00 00 00
>198880		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>198888		00 00 00 00 00 00 00 00
>198890		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>198898		00 00 00 00 00 00 00 00
>1988a0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>1988a8		00 00 00 00 00 00 00 00
>1988b0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>1988b8		00 00 00 00 00 00 00 00
>1988c0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>1988c8		11 00 00 9d 00 1d 00 05
>1988d0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1988d8		00 00 00 00 00 00 00 00
>1988e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1988e8		00 00 00 00 00 00 00 00
>1988f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1988f8		00 00 00 00 00 00 00 00
>198900						.align 256
>198900		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>198908		34 37 3a 3d 3f 41 44 46
>198910		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>198918		57 58 5a 5b 5d 5e 60 61
>198920		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>198928		6d 6f 70 71 72 73 75 76
>198930		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>198938		80 81 82 83 84 85 86 87
>198940		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>198948		8f 90 91 92 93 93 94 95
>198950		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>198958		9d 9e 9e 9f a0 a1 a2 a2
>198960		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>198968		a9 aa ab ab ac ad ae ae
>198970		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>198978		b5 b5 b6 b7 b7 b8 b9 b9
>198980		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>198988		bf c0 c0 c1 c2 c2 c3 c4
>198990		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>198998		c9 ca ca cb cb cc cd cd
>1989a0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>1989a8		d2 d3 d4 d4 d5 d5 d6 d6
>1989b0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>1989b8		db dc dc dd de de df df
>1989c0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>1989c8		e4 e4 e5 e5 e6 e6 e7 e7
>1989d0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>1989d8		ec ec ed ed ee ee ef ef
>1989e0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>1989e8		f4 f4 f5 f5 f6 f6 f7 f7
>1989f0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>1989f8		fb fc fc fd fd fe fe ff
>198a00						.align 256
>198a00		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>198a08		25 27 2a 2c 2e 30 32 34
>198a10		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>198a18		44 46 47 49 4a 4c 4d 4f
>198a20		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>198a28		5b 5c 5d 5e 60 61 62 63
>198a30		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>198a38		6d 6e 70 71 72 73 74 75
>198a40		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>198a48		7e 7f 80 81 82 83 84 84
>198a50		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>198a58		8d 8e 8e 8f 90 91 92 93
>198a60		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>198a68		9a 9b 9c 9d 9e 9f 9f a0
>198a70		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>198a78		a7 a8 a9 aa aa ab ac ad
>198a80		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>198a88		b3 b4 b5 b6 b6 b7 b8 b8
>198a90		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>198a98		bf bf c0 c1 c2 c2 c3 c4
>198aa0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>198aa8		ca ca cb cc cc cd ce ce
>198ab0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>198ab8		d4 d5 d6 d6 d7 d7 d8 d9
>198ac0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>198ac8		de df e0 e0 e1 e1 e2 e3
>198ad0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>198ad8		e8 e9 e9 ea ea eb ec ec
>198ae0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>198ae8		f1 f2 f3 f3 f4 f4 f5 f5
>198af0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>198af8		fb fb fc fc fd fd fe ff
>198b00						.align 256
>198b00		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>198b08		83 dd ce 39 cd c5 3b 15
>198b10		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>198b18		87 12 31 65 89 27 88 42
>198b20		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>198b28		94 ce 56 ec fe da 58 c9
>198b30		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>198b38		d0 10 2c b2 4b ea 32 61
>198b40		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>198b48		a1 e6 ca 2d b3 ce b0 79
>198b50		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>198b58		5f e3 fb bd 15 2e be f5
>198b60		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>198b68		8d 8f 2c 80 0a 5e 99 36
>198b70		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>198b78		13 52 44 2f e3 ef 44 a2
>198b80		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>198b88		be 23 02 58 0a 52 5e b4
>198b90		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>198b98		d5 cf 3e df c4 9e da bb
>198ba0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>198ba8		77 7d b1 3b 4a 68 35 6e
>198bb0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>198bb8		b5 8f 44 63 55 6f e1 50
>198bc0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>198bc8		57 74 b9 bd 05 14 50 eb
>198bd0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>198bd8		44 bc ec db 22 58 fc be
>198be0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>198be8		24 aa 82 11 5c 9f 43 4d
>198bf0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>198bf8		3e 3d 66 7e 0a 1c 6b 74
>198c00						.align 16
>198c00		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>198c08		01 01 01 00 00 00 00 00
>198c10		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>198c18		ff ff ff 01 00 00 00 00
>198c20		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>198c28		01 55 ff ff 01 00 00 00
>198c30		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>198c38		ff ff ff ff 01 00 00 00
>198c40		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>198c48		ff ff 01 ff ff 01 00 00
>198c50		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>198c58		01 ff ff 01 ff 01 00 00
>198c60		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>198c68		ff 01 ff ff ff 01 00 00
>198c70		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>198c78		ff ff ff ff ff 01 01 00
>198c80		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>198c88		ff ff ff ff 01 ff ff 01
>198c90		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>198c98		ff ff ff ff ff ff ff 01
>198ca0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>198ca8		55 55 01 ff ff 55 01 00
>198cb0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>198cb8		01 01 55 ff 55 01 00 00
>198cc0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>198cc8		01 55 55 55 01 00 00 00
>198cd0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>198cd8		01 55 55 01 00 00 00 00
>198ce0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>198ce8		00 01 01 00 00 00 00 00
>198cf0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>198cf8		00 00 00 00 00 00 00 00
>1a0000		5c 72 8a 1a 5c 84 70 1a		        .binary "binaries/basic816_1A0000.bin"
>1a0008		5c 76 27 1a 5c ba 02 1a 5c 58 00 1a 5c b8 00 1a
>1a0018		5c 0f 04 1a 5c 5e 02 1a 5c 79 02 1a 5c 80 02 1a
>1a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>1a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>1a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>1a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>1a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>1a0078		0d d0 03 4c b1 00 c9 08 d0 1a e0 00 00 f0 ed da
>1a0088		bf 01 4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0
>1a0098		fa ca 80 0e c9 20 90 d4 9f 00 4c 00 e8 20 18 00
>1a00a8		80 ca a9 08 20 18 00 80 c3 a9 00 20 1c 00 28 60
>1a00b8		da 5a 8b 0b 08 22 4c 10 00 28 2b ab 7a fa 60 08
>1a00c8		e2 30 48 a9 1b 20 18 00 a9 5b 20 18 00 68 20 18
>1a00d8		00 28 60 0b 8b 08 08 e2 20 48 a9 00 48 ab 68 28
>1a00e8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 3b 38 e9 04
>1a00f8		00 1b e2 20 a9 00 83 02 83 03 83 04 20 14 00 c9
>1a0108		00 f0 f9 83 01 a3 02 d0 35 a3 01 c9 08 d0 0a 20
>1a0118		18 00 a9 50 20 c7 00 80 e3 c9 0d f0 0a c9 1b d0
>1a0128		06 a9 01 83 02 80 d5 20 18 00 a3 01 85 0c c2 20
>1a0138		3b 18 69 04 00 1b e2 20 a5 0c 28 2b ab 60 c9 01
>1a0148		d0 10 a3 01 c9 5b f0 03 82 a9 ff a9 02 83 02 82
>1a0158		aa ff c9 02 d0 29 a3 01 c9 41 90 0c c9 45 b0 08
>1a0168		a3 01 20 c7 00 82 8c ff c9 30 90 10 c9 3a b0 0c
>1a0178		38 e9 30 83 03 a9 03 83 02 82 80 ff 82 75 ff c9
>1a0188		03 d0 41 a3 01 c9 30 90 29 c9 3a b0 25 a3 03 8f
>1a0198		00 01 00 a9 00 8f 01 01 00 8f 03 01 00 a9 0a 8f
>1a01a8		02 01 00 a3 01 38 e9 30 18 6f 04 01 00 83 03 82
>1a01b8		4a ff c9 3b d0 07 a9 04 83 02 82 3f ff c9 7e f0
>1a01c8		40 82 30 ff c9 04 f0 03 82 5f ff a3 01 c9 30 90
>1a01d8		29 c9 3a b0 25 a3 04 8f 00 01 00 a9 00 8f 01 01
>1a01e8		00 8f 03 01 00 a9 0a 8f 02 01 00 a3 01 38 e9 30
>1a01f8		18 6f 04 01 00 83 04 82 02 ff c9 7e f0 03 82 f3
>1a0208		fe a3 03 c9 02 f0 0b c9 03 f0 0b c9 18 f0 0f 82
>1a0218		e2 fe a9 40 80 02 a9 50 20 c7 00 82 d6 fe a5 d2
>1a0228		d0 10 a3 04 c9 08 d0 0a a9 1b 20 18 00 a9 5f 20
>1a0238		18 00 82 bf fe 08 e2 20 af 00 00 af 89 3c f0 08
>1a0248		09 03 8f 00 00 af 80 0c 09 01 8f 00 00 af a9 00
>1a0258		22 3c 10 00 28 60 08 e2 20 c9 00 f0 08 af 10 00
>1a0268		af 09 01 80 06 af 10 00 af 29 fe 8f 10 00 af 28
>1a0278		60 08 22 84 10 00 28 60 48 da 5a 0b 08 e2 20 c2
>1a0288		10 a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f 00
>1a0298		c0 af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00 5b
>1a02a8		68 28 a2 00 00 a0 00 00 22 84 10 00 28 2b 7a fa
>1a02b8		68 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a02c8		c2 30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2 20
>1a02d8		29 ff 00 85 0a af 11 00 00 8f 08 01 00 af 1c 00
>1a02e8		00 3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08 a5
>1a02f8		0a 69 00 00 85 0a e2 20 af 0f 00 00 85 8f a0 00
>1a0308		00 a2 00 00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0 f4
>1a0318		af 0f 00 00 3a aa bf 00 4f 00 c9 20 d0 09 a9 00
>1a0328		9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 20 69
>1a0338		03 a2 00 00 a9 00 9f 18 f0 1a e8 e0 40 00 d0 f6
>1a0348		a9 80 8f b4 08 00 e2 20 a9 00 8f 89 0f 00 a9 00
>1a0358		8f 00 02 af 8f 0c 02 af 8f 18 02 af 8f 24 02 af
>1a0368		60 08 e2 20 af 0e 08 af 09 08 8f 0e 08 af af 00
>1a0378		08 af 8f 84 e8 af af 02 08 af 8f 85 e8 af a9 03
>1a0388		8f 86 e8 af af 0e 08 af 29 f7 8f 0e 08 af ea ea
>1a0398		ea a9 01 8f 86 e8 af 28 60 08 e2 20 48 48 a9 00
>1a03a8		22 3c 10 00 68 22 18 10 00 af 89 0f 00 29 01 d0
>1a03b8		f8 68 28 60 08 e2 20 48 48 a9 01 22 3c 10 00 68
>1a03c8		22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60 08
>1a03d8		c2 20 48 e2 20 a9 0d 20 18 00 c2 20 68 28 60 08
>1a03e8		22 78 10 00 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>1a03f8		68 28 e2 20 a5 b6 1a 85 b6 cf 13 00 00 90 05 20
>1a0408		14 00 64 b6 2b 28 60 da 5a 0b 08 08 c2 20 48 a9
>1a0418		00 08 5b 68 28 e2 20 c2 10 8f b5 08 00 af b4 08
>1a0428		00 29 20 f0 07 af b5 08 00 20 28 00 af b4 08 00
>1a0438		29 80 f0 07 af b5 08 00 20 a1 03 af b4 08 00 29
>1a0448		40 f0 14 af b5 08 00 20 bc 03 af b5 08 00 c9 0d
>1a0458		d0 05 a9 0a 20 bc 03 28 2b 7a fa 60 08 e2 20 bd
>1a0468		00 00 f0 06 20 18 00 e8 80 f5 28 60 08 c2 20 48
>1a0478		48 4a 4a 4a 4a 4a 4a 4a 4a 20 8e 04 68 29 ff 00
>1a0488		20 8e 04 68 28 60 08 c2 20 48 e2 20 48 4a 4a 4a
>1a0498		4a 20 a5 04 68 20 a5 04 c2 20 68 28 60 08 c2 30
>1a04a8		da 29 0f 00 aa bf 00 d0 1a 20 18 00 fa 28 60 08
>1a04b8		c2 30 48 da 5a 8b 0b c2 30 a3 0b 18 69 03 00 aa
>1a04c8		e2 20 a9 1a 48 ab bd 00 00 f0 06 20 a1 03 e8 80
>1a04d8		f5 c2 30 2b ab 7a fa 68 28 60 08 e2 20 c9 5b b0
>1a04e8		04 c9 41 b0 0b c9 7b b0 04 c9 61 b0 03 28 18 60
>1a04f8		28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 03 28 18
>1a0508		60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 13 c9
>1a0518		67 b0 04 c9 61 b0 0b c9 47 b0 04 c9 41 b0 03 28
>1a0528		18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 12
>1a0538		c9 67 b0 04 c9 61 b0 0f c9 47 b0 04 c9 41 b0 09
>1a0548		28 60 38 e9 30 80 f9 29 df 38 e9 37 80 f2 08 e2
>1a0558		20 c9 7b b0 06 c9 61 90 02 29 df 28 60 08 e2 20
>1a0568		c2 10 bd 00 00 f0 09 20 56 05 9d 00 00 e8 80 f2
>1a0578		28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>1a0588		48 06 23 26 25 a5 23 85 0c a5 25 85 0e 06 0c 26
>1a0598		0e 06 0c 26 0e 18 a5 23 65 0c 85 23 a5 25 65 0e
>1a05a8		85 25 68 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>1a05b8		68 28 c2 20 a5 23 8f 1a 01 00 a9 0a 00 8f 18 01
>1a05c8		00 af 1c 01 00 85 23 64 25 af 1e 01 00 85 29 64
>1a05d8		2b e2 20 a9 00 85 27 85 2d 2b 28 60 08 0b 08 c2
>1a05e8		20 48 a9 00 08 5b 68 28 c2 20 a5 23 8f 1a 01 00
>1a05f8		a9 64 00 8f 18 01 00 af 1c 01 00 85 23 64 25 af
>1a0608		1e 01 00 85 29 64 2b e2 20 a9 00 85 27 85 2d 2b
>1a0618		28 60 08 c2 20 a5 23 d0 08 a5 25 d0 04 28 e2 02
>1a0628		60 28 c2 02 60 08 c2 30 a9 ff ff 85 23 85 25 e2
>1a0638		20 a9 00 85 27 28 60 08 c2 30 a9 00 00 85 23 85
>1a0648		25 e2 20 a9 00 85 27 28 60 08 e2 20 a5 27 c9 00
>1a0658		f0 07 c9 01 d0 05 20 0a 5c 28 60 08 c2 20 48 a9
>1a0668		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a0678		ff 00 20 5e 1e e2 20 dc d4 08 08 e2 20 a5 2d c9
>1a0688		00 f0 37 c9 01 d0 35 c2 20 a5 25 48 a5 23 48 c2
>1a0698		20 a5 29 85 23 a5 2b 85 25 e2 20 a9 01 85 27 20
>1a06a8		0a 5c c2 20 a5 23 85 29 a5 25 85 2b e2 20 a9 00
>1a06b8		85 2d c2 20 68 85 23 68 85 25 28 60 08 c2 20 48
>1a06c8		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>1a06d8		29 ff 00 20 5e 1e e2 20 dc d4 08 08 e2 20 a5 27
>1a06e8		c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a06f8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a0708		e2 20 dc d4 08 08 e2 20 a5 27 c9 00 f0 07 c9 01
>1a0718		d0 0b 20 0a 5c c2 20 a5 25 d0 21 28 60 08 c2 20
>1a0728		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a0738		20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20 48
>1a0748		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>1a0758		29 ff 00 20 5e 1e e2 20 dc d4 08 08 e2 20 a5 27
>1a0768		c9 00 f0 07 c9 01 d0 11 20 0a 5c a5 26 d0 29 a5
>1a0778		25 d0 25 a5 24 d0 21 28 60 08 c2 20 48 a9 00 08
>1a0788		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a0798		20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a07a8		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a07b8		5e 1e e2 20 dc d4 08 08 e2 20 a5 27 c9 01 f0 26
>1a07c8		c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a07d8		a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>1a07e8		dc d4 08 20 04 5c 28 60 08 e2 20 a5 2d c9 01 f0
>1a07f8		26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a0808		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>1a0818		20 dc d4 08 20 21 08 28 60 c2 20 a5 25 48 a5 23
>1a0828		48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20 a9 00 85
>1a0838		27 20 04 5c c2 20 a5 23 85 29 a5 25 85 2b e2 20
>1a0848		a9 01 85 2d c2 20 68 85 23 68 85 25 60 08 e2 20
>1a0858		a5 27 c9 00 f0 23 c9 01 f0 2e 08 c2 20 48 a9 00
>1a0868		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a0878		00 20 5e 1e e2 20 dc d4 08 a5 2d c9 00 f0 16 c9
>1a0888		01 d0 d7 20 04 5c 80 0d a5 2d c9 01 f0 07 c9 00
>1a0898		d0 c8 20 21 08 e2 20 a5 27 28 60 08 e2 20 a5 27
>1a08a8		c9 02 d0 25 a5 2d c9 02 f0 24 08 c2 20 48 a9 00
>1a08b8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a08c8		00 20 5e 1e e2 20 dc d4 08 20 55 08 a5 27 28 60
>1a08d8		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 64 23
>1a08e8		64 25 e2 20 64 27 a7 00 c9 26 f0 44 e2 20 a7 00
>1a08f8		20 fb 04 90 76 20 7a 05 38 e9 30 c2 20 29 ff 00
>1a0908		18 65 23 85 23 a5 25 69 00 00 85 25 20 1d 21 80
>1a0918		db 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a0928		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a0938		20 1d 21 a7 00 c9 48 f0 04 c9 68 d0 d4 20 1d 21
>1a0948		e2 20 a7 00 20 0c 05 90 22 20 2d 05 c2 20 06 23
>1a0958		26 25 06 23 26 25 06 23 26 25 06 23 26 25 29 ff
>1a0968		00 18 65 23 85 23 20 1d 21 80 d5 2b 28 60 08 c2
>1a0978		30 a5 04 f0 1c 38 a5 04 e5 1a a8 e2 20 b7 1a f0
>1a0988		10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0 ff ff d0
>1a0998		ec a9 00 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>1a09a8		c2 30 a5 1a 85 00 e2 20 a5 1c 85 02 20 3e 21 a7
>1a09b8		00 20 fb 04 90 0c 20 d8 08 c2 20 a5 23 85 d7 20
>1a09c8		3e 21 c2 20 a5 00 85 1a e2 20 a5 02 85 1c 20 ea
>1a09d8		09 e2 20 20 5b 0a c9 00 f0 05 20 06 0c 80 f4 2b
>1a09e8		28 60 08 c2 20 a5 1a 85 00 a5 1c 85 02 a2 00 00
>1a09f8		e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0 53 c9 3a
>1a0a08		f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0 10 c9
>1a0a18		72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72 d0 1a c8
>1a0a28		b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7 00 f0
>1a0a38		20 c9 4d f0 0a c9 6d f0 06 e8 20 1d 21 80 b3 a7
>1a0a48		00 c9 3a d0 03 20 1d 21 a9 03 85 1e a9 91 20 06
>1a0a58		0c 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a0a68		20 a9 7f 85 1e c2 10 20 bb 0b a5 1e d0 03 4c fb
>1a0a78		0a c2 20 a5 1a 85 00 e2 20 a5 1c 85 02 c2 20 64
>1a0a88		04 64 06 e2 30 a0 00 b7 00 f0 da c9 91 f0 d6 c8
>1a0a98		c4 1e 90 f3 c2 10 a7 00 c9 22 d0 05 20 1d 0b 80
>1a0aa8		28 a5 1e c9 03 90 19 c2 20 a5 00 c5 1a d0 08 e2
>1a0ab8		20 a5 02 c5 1c f0 09 e2 20 a7 04 20 4d 51 b0 09
>1a0ac8		e2 20 20 2d 0b c9 00 d0 11 c2 20 a5 00 85 04 e2
>1a0ad8		20 a5 02 85 06 20 1d 21 80 a9 c9 81 d0 15 20 76
>1a0ae8		09 c9 00 f0 11 89 80 f0 08 c9 90 f0 04 a9 af 80
>1a0af8		02 a9 81 2b 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a0b08		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a0b18		e2 20 dc d4 08 08 e2 20 20 1d 21 a7 00 f0 04 c9
>1a0b28		22 d0 f5 28 60 da 5a 08 0b 08 c2 20 48 a9 00 08
>1a0b38		5b 68 28 c2 20 a5 04 d0 0a e2 20 a5 04 d0 04 a9
>1a0b48		00 80 0a e2 20 a7 04 20 4d 51 a9 00 2a 85 28 c2
>1a0b58		30 a9 fb 0c 85 08 e2 20 a9 1a 85 0a a2 80 00 e2
>1a0b68		20 a0 01 00 b7 08 f0 31 c5 1e d0 32 c2 30 a0 02
>1a0b78		00 b7 08 85 0c e2 20 a9 1a 85 0e a5 28 f0 07 a7
>1a0b88		0c 20 4d 51 b0 18 e2 10 a0 00 b7 00 20 56 05 d7
>1a0b98		0c d0 0b c8 c4 1e 90 f2 8a 2b 28 7a fa 60 c2 30
>1a0ba8		18 a5 08 69 08 00 85 08 e2 20 a5 0a 69 00 85 0a
>1a0bb8		e8 80 ac 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>1a0bc8		c2 30 a9 fb 0c 85 08 a9 1a 00 85 0a 64 0c e2 20
>1a0bd8		a0 01 00 b7 08 f0 1d c5 1e b0 06 c5 0c 90 02 85
>1a0be8		0c c2 20 18 a5 08 69 08 00 85 08 a5 0a 69 00 00
>1a0bf8		85 0a 80 da e2 20 a5 0c 85 1e ab 2b 28 60 08 0b
>1a0c08		08 c2 20 48 a9 00 08 5b 68 28 e2 20 87 00 c2 20
>1a0c18		18 a5 00 69 01 00 85 08 a5 02 69 00 00 85 0a e2
>1a0c28		10 a4 1e 88 e2 20 b7 08 87 08 f0 13 c2 20 18 a5
>1a0c38		08 69 01 00 85 08 a5 0a 69 00 00 85 0a 80 e5 2b
>1a0c48		28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69 fb 0c aa
>1a0c58		28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>1a0c68		e2 20 48 a9 1a 48 ab 68 28 e2 20 c2 10 20 4a 0c
>1a0c78		bd 00 00 c2 20 29 0f 00 2b ab 28 60 08 8b 0b 08
>1a0c88		c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 1a 48
>1a0c98		ab 68 28 c2 30 20 4a 0c bd 04 00 2b ab 28 60 08
>1a0ca8		8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>1a0cb8		a9 1a 48 ab 68 28 e2 20 c2 10 20 4a 0c bd 00 00
>1a0cc8		c2 20 29 f0 00 2b ab 28 60 08 8b 0b 08 c2 20 48
>1a0cd8		a9 00 08 5b 68 28 08 e2 20 48 a9 1a 48 ab 68 28
>1a0ce8		e2 20 c2 10 20 4a 0c bd 06 00 c2 20 29 ff 00 2b
>1a0cf8		ab 28 60 03 01 10 d0 e3 27 02 00 03 01 12 d0 23
>1a0d08		28 02 00 02 01 14 d0 5a 28 02 00 02 01 16 d0 91
>1a0d18		28 02 00 02 03 18 d0 9b 28 02 00 00 01 1c d0 ae
>1a0d28		28 02 00 04 02 1e d0 6c 2a 02 00 04 02 21 d0 2c
>1a0d38		2a 02 00 04 02 24 d0 ec 29 02 00 04 01 27 d0 2c
>1a0d48		29 02 00 04 01 29 d0 ac 29 02 00 04 01 2b d0 6c
>1a0d58		29 02 00 05 03 2d d0 16 29 01 00 06 03 31 d0 e8
>1a0d68		28 02 00 07 02 35 d0 ff 28 02 00 ff 01 38 d0 00
>1a0d78		00 00 00 40 01 3a d0 00 00 00 00 20 03 3c d0 7f
>1a0d88		41 00 00 20 05 40 d0 84 45 00 00 20 03 46 d0 cf
>1a0d98		44 00 00 20 04 4a d0 6f 44 00 00 20 03 4f d0 66
>1a0da8		44 00 00 20 02 53 d0 fe 43 00 00 50 04 56 d0 00
>1a0db8		00 00 00 50 04 5b d0 00 00 00 00 20 05 60 d0 41
>1a0dc8		43 00 00 20 06 66 d0 ba 43 00 00 20 03 6d d0 96
>1a0dd8		41 00 00 50 02 71 d0 00 00 00 00 50 04 74 d0 00
>1a0de8		00 00 00 20 04 79 d0 8a 42 00 00 20 02 7e d0 90
>1a0df8		41 00 00 20 04 81 d0 93 41 00 00 50 05 86 d0 00
>1a0e08		00 00 00 50 05 8c d0 00 00 00 00 20 04 92 d0 8d
>1a0e18		41 00 00 20 03 97 d0 c5 44 00 00 20 04 9b d0 60
>1a0e28		41 00 00 20 04 a0 d0 f0 40 00 00 20 05 a5 d0 86
>1a0e38		40 00 00 20 05 ab d0 13 40 00 00 20 03 b1 d0 0f
>1a0e48		40 00 00 20 04 b5 d0 f0 3e 00 00 20 04 ba d0 02
>1a0e58		40 00 00 20 07 bf d0 06 40 00 00 20 03 c7 d0 43
>1a0e68		3e 00 00 20 04 cb d0 ac 3d 00 00 00 01 d0 d0 ac
>1a0e78		2a 01 00 30 03 d2 d0 9c 4b 00 00 30 04 d6 d0 ec
>1a0e88		4b 00 00 30 05 db d0 b5 4c 00 00 30 05 e1 d0 42
>1a0e98		4c 00 00 30 04 e7 d0 14 4d 00 00 30 03 ec d0 69
>1a0ea8		4d 00 00 30 03 f0 d0 ae 4d 00 00 30 03 f4 d0 37
>1a0eb8		4e 00 00 30 03 f8 d0 c0 4e 00 00 30 03 fc d0 22
>1a0ec8		4f 00 00 30 04 00 d1 0e 4b 00 00 30 03 05 d1 ad
>1a0ed8		4a 00 00 30 04 09 d1 5f 4a 00 00 30 03 0e d1 09
>1a0ee8		4a 00 00 30 05 12 d1 40 49 00 00 30 06 18 d1 5f
>1a0ef8		48 00 00 30 04 1f d1 aa 47 00 00 10 03 24 d1 89
>1a0f08		50 00 00 10 03 28 d1 54 50 00 00 10 04 2c d1 5d
>1a0f18		6c 00 00 10 04 31 d1 a0 50 00 00 10 03 36 d1 84
>1a0f28		69 00 00 20 05 3a d1 2f 6b 00 00 10 04 40 d1 0a
>1a0f38		6c 00 00 20 05 45 d1 16 6d 00 00 20 03 4b d1 35
>1a0f48		6e 00 00 10 04 4f d1 a2 6d 00 00 20 06 54 d1 ab
>1a0f58		6e 00 00 20 04 5b d1 cf 6f 00 00 10 07 60 d1 51
>1a0f68		50 00 00 20 03 68 d1 3a 3d 00 00 20 05 6c d1 4a
>1a0f78		3c 00 00 20 09 72 d1 6b 2c 00 00 20 09 7c d1 f8
>1a0f88		2b 00 00 20 0a 86 d1 28 2c 00 00 20 07 91 d1 65
>1a0f98		2b 00 00 30 08 99 d1 61 46 00 00 20 07 a2 d1 fa
>1a0fa8		2a 00 00 30 08 aa d1 cb 46 00 00 20 08 b3 d1 b0
>1a0fb8		2d 00 00 20 08 bc d1 e4 2c 00 00 20 06 c5 d1 ea
>1a0fc8		2e 00 00 20 09 cc d1 f2 2f 00 00 20 04 d6 d1 4f
>1a0fd8		31 00 00 20 04 db d1 c0 31 00 00 20 04 e0 d1 59
>1a0fe8		32 00 00 20 06 e5 d1 95 33 00 00 20 08 ec d1 33
>1a0ff8		34 00 00 20 0a f5 d1 81 34 00 00 20 07 00 d2 b8
>1a1008		35 00 00 20 07 08 d2 36 36 00 00 20 08 10 d2 a8
>1a1018		36 00 00 20 06 19 d2 e5 36 00 00 20 07 20 d2 15
>1a1028		3a 00 00 50 06 28 d2 00 00 00 00 50 04 2f d2 00
>1a1038		00 00 00 20 06 34 d2 2a 3c 00 00 30 03 3b d2 78
>1a1048		4f 00 00 30 03 3f d2 30 47 00 00 30 03 43 d2 8b
>1a1058		4f 00 00 30 03 47 d2 a1 4f 00 00 30 03 4b d2 b7
>1a1068		4f 00 00 30 02 4f d2 cd 4f 00 00 30 04 52 d2 e3
>1a1078		4f 00 00 30 04 57 d2 f9 4f 00 00 30 04 5c d2 0f
>1a1088		50 00 00 30 03 61 d2 25 50 00 00 30 03 65 d2 3b
>1a1098		50 00 00 30 05 69 d2 86 47 00 00 00 00 00 00 00
>1a10a8		00 00 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a10b8		30 a9 ff ff 85 ba e2 20 a9 17 85 bc c2 20 64 b7
>1a10c8		64 bd e2 20 64 b9 64 bf 2b 28 60 5a 08 e2 20 85
>1a10d8		ea c2 10 86 8f c2 20 a5 0e 48 a5 0c 48 a5 12 48
>1a10e8		a5 10 48 20 83 11 b0 03 20 07 11 20 0f 13 c2 20
>1a10f8		68 85 10 68 85 12 68 85 0c 68 85 0e 28 7a 60 08
>1a1108		0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a6 8f ca
>1a1118		86 0c e8 c2 30 38 a5 ba e5 0c 85 c0 e2 20 a5 bc
>1a1128		e9 00 85 c2 20 0f 13 e2 20 a5 ea a0 00 00 97 c3
>1a1138		a9 00 a0 01 00 97 c3 a0 02 00 97 c3 c2 20 a9 00
>1a1148		00 97 c3 c2 20 18 a5 ba 69 01 00 a0 05 00 97 c3
>1a1158		e2 20 c8 c8 a5 bc 69 00 97 c3 c2 20 a5 c0 85 b7
>1a1168		e2 20 a5 c2 85 b9 c2 20 38 a5 c3 e9 01 00 85 ba
>1a1178		e2 20 a5 c5 e9 00 85 bc 2b 28 60 08 0b 08 c2 20
>1a1188		48 a9 00 08 5b 68 28 c2 30 c2 20 a5 bd 85 c9 e2
>1a1198		20 a5 bf 85 cb a5 c9 d0 17 e2 20 a5 cb d0 11 c2
>1a11a8		20 a9 00 00 85 cf e2 20 a9 00 85 d1 2b 28 18 60
>1a11b8		c2 20 a0 05 00 b7 c9 85 cc e2 20 c8 c8 b7 c9 85
>1a11c8		ce c2 20 18 a5 c9 65 8f 85 0c e2 20 a5 cb 69 00
>1a11d8		85 0e c2 20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e
>1a11e8		69 00 85 0e c2 20 a5 0c c5 cc d0 28 e2 20 a5 0e
>1a11f8		c5 ce d0 20 c2 20 a5 cf d0 5d e2 20 a5 d1 d0 57
>1a1208		c2 20 a0 02 00 b7 c9 85 bd e2 20 c8 c8 b7 c9 85
>1a1218		bf 4c c0 12 c2 20 a5 0c 69 08 00 85 10 e2 20 a5
>1a1228		0e 69 00 85 12 e2 20 a5 c6 c5 10 b0 3e 90 08 c2
>1a1238		20 a5 c6 c5 10 b0 34 c2 20 a5 c9 85 cf e2 20 a5
>1a1248		cb 85 d1 c2 20 a0 02 00 b7 cf 85 c9 e2 20 c8 c8
>1a1258		b7 cf 85 cb 4c 9d 11 c2 20 a0 02 00 b7 c9 97 cf
>1a1268		e2 20 c8 c8 b7 c9 97 cf 4c c0 12 c2 20 a0 05 00
>1a1278		b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a0 02
>1a1288		00 b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a5
>1a1298		cf d0 14 e2 20 a5 cf d0 0e c2 20 a5 0c 85 bd e2
>1a12a8		20 a5 0e 85 bf 80 11 c2 20 a0 02 00 a5 0c 97 cf
>1a12b8		e2 20 c8 c8 a5 0e 97 cf c2 20 a5 c9 85 c3 e2 20
>1a12c8		a5 cb 85 c5 c2 20 a5 c3 85 b7 e2 20 a5 c5 85 b9
>1a12d8		c2 20 a0 05 00 a5 0c 97 c3 e2 20 c8 c8 a5 0e 97
>1a12e8		c3 c2 20 a0 02 00 a9 00 00 97 c3 e2 20 c8 c8 97
>1a12f8		c3 e2 20 a5 ea e2 20 a0 00 00 97 c3 a0 01 00 a9
>1a1308		00 97 c3 2b 28 38 60 08 c2 20 38 a5 c0 e9 08 00
>1a1318		85 c3 e2 20 a5 c2 e9 00 85 c5 28 60 08 e2 20 a5
>1a1328		c5 f0 04 c9 18 b0 12 c2 20 a5 c3 f0 0c e2 20 a0
>1a1338		01 00 b7 c3 1a 97 c3 28 60 00 ea 08 e2 20 a5 c5
>1a1348		f0 04 c9 18 b0 17 c2 20 a5 c3 f0 11 e2 20 a0 01
>1a1358		00 b7 c3 3a 97 c3 d0 03 20 67 13 28 60 00 ea 08
>1a1368		c2 20 a5 bd d0 21 e2 20 a5 bf d0 1b a5 c5 85 bf
>1a1378		c2 20 a5 c3 85 bd a9 00 00 a0 02 00 97 c3 c8 c8
>1a1388		e2 20 97 c3 4c 4e 14 e2 20 a5 bf c5 c5 90 28 c2
>1a1398		20 a5 bd c5 c3 90 20 c2 20 a5 bd a0 02 00 97 c3
>1a13a8		e2 20 c8 c8 a5 bf 97 c3 c2 20 a5 c3 85 bd e2 20
>1a13b8		a5 c5 85 bf 4c 4e 14 c2 20 a5 bd 85 08 e2 20 a5
>1a13c8		bf 85 0a e2 20 a0 04 00 b7 08 c5 c8 90 32 d0 0b
>1a13d8		c2 20 a0 02 00 b7 08 c5 c6 90 25 c2 20 a0 02 00
>1a13e8		b7 08 97 c3 e2 20 c8 c8 b7 08 97 c3 c2 20 a5 c3
>1a13f8		a0 02 00 97 08 e2 20 a5 c5 c8 c8 97 08 4c 4e 14
>1a1408		c2 20 a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0
>1a1418		19 c2 20 a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08
>1a1428		85 0a c2 20 a5 0c 85 08 80 99 c2 20 a5 c3 a0 02
>1a1438		00 97 08 e2 20 c8 c8 a5 c5 97 08 a9 00 97 c3 c2
>1a1448		20 a0 02 00 97 c3 20 53 14 28 60 08 c2 20 a5 bd
>1a1458		85 c3 e2 20 a5 bf 85 c5 c2 20 a5 c3 d0 09 e2 20
>1a1468		a5 c5 d0 03 4c f6 14 c2 20 a0 02 00 b7 c3 85 0c
>1a1478		e2 20 c8 c8 b7 c3 85 0e c2 20 a0 05 00 b7 c3 85
>1a1488		10 e2 20 c8 c8 b7 c3 85 12 c2 20 a5 0c c5 10 d0
>1a1498		08 e2 20 a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c3
>1a14a8		85 0c e2 20 c8 c8 b7 c3 85 0e c2 20 a5 0c 85 c3
>1a14b8		e2 20 a5 0e 85 c5 80 a0 c2 20 a0 02 00 b7 c3 85
>1a14c8		0c e2 20 c8 c8 b7 c3 85 0e c2 20 a0 02 00 b7 0c
>1a14d8		97 c3 e2 20 c8 c8 b7 0c 97 c3 c2 20 a0 05 00 b7
>1a14e8		0c 97 c3 e2 20 c8 c8 b7 0c 97 c3 4c 6f 14 28 60
>1a14f8		08 c2 20 64 16 64 18 28 60 08 c2 30 a5 16 d0 16
>1a1508		a5 18 d0 12 e2 20 64 16 a5 e2 1a 1a 85 17 a5 e3
>1a1518		85 18 64 19 80 07 c2 20 a5 17 1a 85 17 c2 20 a5
>1a1528		bb 3a c5 17 f0 02 b0 1f 08 c2 20 48 a9 00 08 5b
>1a1538		68 28 e2 20 a9 03 8f d3 08 00 c2 20 29 ff 00 20
>1a1548		5e 1e e2 20 dc d4 08 28 60 c9 00 d0 05 c0 01 00
>1a1558		f0 05 09 30 97 16 c8 60 08 c2 30 64 0c a5 25 10
>1a1568		1a 18 a5 23 49 ff ff 69 01 00 85 23 a5 25 49 ff
>1a1578		ff 69 00 00 85 25 a9 ff ff 85 0c 64 10 64 12 64
>1a1588		14 a2 1f 00 f8 06 23 26 25 a5 10 65 10 85 10 a5
>1a1598		12 65 12 85 12 a5 14 65 14 85 14 ca 10 e7 d8 e2
>1a15a8		20 20 01 15 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9
>1a15b8		20 97 16 c8 a2 05 00 b5 10 29 f0 4a 4a 4a 4a 20
>1a15c8		51 15 b5 10 29 0f 20 51 15 ca 10 eb c0 01 00 d0
>1a15d8		0c a9 20 87 16 a0 01 00 a9 30 97 16 c8 a9 00 97
>1a15e8		16 28 60 00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00
>1a15f8		f0 04 e8 c8 80 f7 28 60 08 0b 08 c2 20 48 a9 00
>1a1608		08 5b 68 28 e2 20 c2 10 a0 00 00 b7 23 d0 04 b7
>1a1618		29 f0 25 b7 23 d7 29 90 12 d0 03 c8 80 ed c2 20
>1a1628		a9 01 00 85 23 e2 20 64 25 80 15 c2 20 a9 ff ff
>1a1638		85 23 e2 20 85 25 80 08 c2 20 64 23 e2 20 64 25
>1a1648		e2 20 a9 00 85 27 2b 28 60 08 0b 8b 08 c2 20 48
>1a1658		a9 00 08 5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20
>1a1668		a5 25 48 ab c2 20 68 28 a6 23 20 ed 15 84 0c 08
>1a1678		c2 20 48 e2 20 a5 2b 48 ab c2 20 68 28 a6 29 20
>1a1688		ed 15 c2 20 98 38 65 0c aa e2 20 a9 02 20 d3 10
>1a1698		c2 20 a5 b7 85 08 e2 20 a5 b9 85 0a a0 00 00 08
>1a16a8		c2 20 48 e2 20 a5 25 48 ab c2 20 68 28 a6 23 bd
>1a16b8		00 00 f0 06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48
>1a16c8		e2 20 a5 2b 48 ab c2 20 68 28 a6 29 bd 00 00 97
>1a16d8		08 f0 04 e8 c8 80 f5 c2 20 a5 08 85 23 e2 20 a5
>1a16e8		0a 85 25 a9 02 85 27 ab 2b 28 60 da 5a 08 0b 8b
>1a16f8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 0a 48 a5
>1a1708		08 48 c2 30 08 c2 20 48 e2 20 a5 25 48 ab c2 20
>1a1718		68 28 a6 23 20 ed 15 98 aa e8 e2 20 a9 02 20 d3
>1a1728		10 c2 20 a5 c0 85 08 a5 c2 85 0a a0 00 00 e2 20
>1a1738		b7 23 97 08 f0 03 c8 80 f7 c2 20 a5 08 85 23 a5
>1a1748		0a 85 25 c2 20 68 85 08 68 85 0a ab 2b 28 7a fa
>1a1758		60 08 e2 20 c2 10 a0 00 00 b7 23 f0 05 c8 80 f9
>1a1768		84 92 c2 30 c4 29 90 13 f0 11 a5 8f 30 0d f0 0b
>1a1778		c4 8f b0 12 a5 29 d0 0e 4c d7 17 20 01 15 e2 20
>1a1788		a9 00 87 16 80 39 20 01 15 c2 30 18 a5 23 65 29
>1a1798		85 23 a5 25 69 00 00 85 25 a0 00 00 e2 20 a7 23
>1a17a8		97 16 f0 1b c2 20 18 a5 23 69 01 00 85 23 a5 25
>1a17b8		69 00 00 85 25 c8 c4 8f d0 e2 a9 00 00 97 16 c2
>1a17c8		20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28
>1a17d8		60 08 c2 30 20 00 16 a5 23 c9 ff ff d0 05 20 2d
>1a17e8		06 80 03 20 3f 06 28 60 08 c2 30 20 00 16 a5 23
>1a17f8		c9 01 00 d0 05 20 2d 06 80 03 20 3f 06 28 60 08
>1a1808		c2 30 20 00 16 a5 23 c9 00 00 d0 05 20 2d 06 80
>1a1818		03 20 3f 06 28 60 08 c2 30 20 00 16 a5 23 c9 00
>1a1828		00 f0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2 30
>1a1838		20 00 16 a5 23 c9 ff ff f0 05 20 2d 06 80 03 20
>1a1848		3f 06 28 60 08 c2 30 20 00 16 a5 23 c9 01 00 f0
>1a1858		05 20 2d 06 80 03 20 3f 06 28 60 08 e2 20 a5 27
>1a1868		c9 02 d0 1d a5 23 d0 19 a5 24 d0 15 a5 25 d0 11
>1a1878		20 01 15 a9 00 87 16 c2 20 a5 16 85 23 a5 18 85
>1a1888		25 28 60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>1a1898		28 c2 30 a9 00 00 85 00 85 1a a9 16 00 85 02 85
>1a18a8		1c 22 3c 11 00 b0 20 a0 02 00 b7 1a f0 0f c5 55
>1a18b8		90 10 c5 59 f0 02 b0 05 20 ee 18 80 e4 28 2b 7a
>1a18c8		68 60 20 fa 21 80 da 08 c2 20 48 a9 00 08 5b 68
>1a18d8		28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a18e8		1e e2 20 dc d4 08 08 c2 30 85 23 64 25 20 60 15
>1a18f8		a5 16 1a 85 23 a5 18 85 25 20 00 46 18 a5 1a 69
>1a1908		04 00 85 00 a5 1c 69 00 00 85 02 e2 20 a9 20 20
>1a1918		18 00 c2 20 20 2d 19 90 fb e2 20 a9 0d 20 18 00
>1a1928		20 fa 21 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>1a1938		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>1a1948		a7 00 f0 3a 30 05 20 18 00 80 29 c2 20 29 7f 00
>1a1958		0a 0a 0a 18 69 fb 0c 85 08 a9 1a 00 69 00 00 85
>1a1968		0a 08 e2 20 48 a9 1a 48 ab 68 28 a0 02 00 b7 08
>1a1978		aa 20 64 04 c2 20 20 1d 21 ab 2b 28 18 60 ab 2b
>1a1988		28 38 60 08 c2 20 a9 ff 6f 85 1f a9 ff 7f 85 21
>1a1998		a9 ff ff 85 23 85 25 85 29 85 2b e2 20 85 27 85
>1a19a8		2d 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>1a19b8		08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a a4 1f bd
>1a19c8		00 00 99 00 00 bd 02 00 99 02 00 e2 20 bd 04 00
>1a19d8		99 04 00 c2 20 38 98 e9 05 00 85 1f 7a ab 2b 28
>1a19e8		60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>1a19f8		20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5 1f 69 05
>1a1a08		00 85 1f a8 b9 00 00 9d 00 00 b9 02 00 9d 02 00
>1a1a18		e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab 2b 28 60
>1a1a28		08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>1a1a38		48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 21 99 00
>1a1a48		00 88 84 21 7a ab 2b 28 60 08 0b 8b 08 c2 20 48
>1a1a58		a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>1a1a68		e2 20 c2 10 5a a4 21 c8 84 21 b9 00 00 c2 20 29
>1a1a78		ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20 28 1a 28
>1a1a88		60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68 28 e2 20
>1a1a98		a4 21 b9 01 00 c9 01 d0 08 c2 20 e6 21 ab 28 7a
>1a1aa8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a1ab8		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a1ac8		48 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>1a1ad8		20 48 a9 00 48 ab 68 28 e2 20 a4 21 c0 ff 7f f0
>1a1ae8		11 20 5a 0c 85 0c b9 01 00 20 5a 0c c5 0c f0 02
>1a1af8		90 08 c2 20 ab 2b 28 68 18 60 c2 20 ab 2b 28 68
>1a1b08		38 60 4c d8 08 08 e2 20 a9 00 8f 00 4d 00 a2 01
>1a1b18		00 20 0c 1d 20 51 06 c2 20 a5 23 9f 00 4d 00 e2
>1a1b28		20 af 00 4d 00 1a 30 3e 8f 00 4d 00 e8 e8 20 3e
>1a1b38		21 e2 20 a7 00 c9 90 f0 09 c9 2c d0 0a 20 1d 21
>1a1b48		80 cf 20 1d 21 28 60 08 c2 20 48 a9 00 08 5b 68
>1a1b58		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a1b68		1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>1a1b78		e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a1b88		e2 20 dc d4 08 08 20 20 54 90 47 e2 20 a5 ea 29
>1a1b98		80 d0 06 20 21 52 4c d8 1b 20 93 51 90 53 c2 20
>1a1ba8		a5 c2 48 a5 c0 48 a0 09 00 b7 08 85 c0 e2 20 c8
>1a1bb8		c8 b7 08 85 c2 e2 20 a9 8f 20 2a 22 20 7f 1a 20
>1a1bc8		0d 1b 20 f7 68 20 89 1a c2 20 68 85 c2 68 85 c0
>1a1bd8		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a1be8		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>1a1bf8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f
>1a1c08		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a1c18		08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10
>1a1c28		20 1d 21 a0 00 00 b7 00 f0 24 c9 22 f0 03 c8 80
>1a1c38		f5 84 0c e2 20 a9 02 a6 0c e8 20 01 15 a0 00 00
>1a1c48		c4 0c f0 29 a7 00 97 16 c8 20 1d 21 80 f2 08 c2
>1a1c58		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a1c68		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 a9 00 97
>1a1c78		16 c2 20 a5 16 85 23 a5 18 85 25 a9 02 00 85 27
>1a1c88		20 1d 21 2b 28 60 08 e2 20 a7 00 c2 20 29 ff 00
>1a1c98		20 84 0c 85 2f 20 7f 1a 08 e2 20 48 a9 00 48 ab
>1a1ca8		68 28 20 b2 1c 20 89 1a 28 60 20 1d 21 6c 2f 08
>1a1cb8		48 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>1a1cc8		20 51 1a 89 80 00 f0 37 48 20 84 0c 85 2f 68 20
>1a1cd8		d1 0c c9 01 00 f0 08 c2 30 a2 29 08 20 e9 19 c2
>1a1ce8		30 a2 23 08 20 e9 19 08 e2 20 48 a9 00 48 ab 68
>1a1cf8		28 20 09 1d a2 23 08 20 ab 19 ab 2b 28 68 60 00
>1a1d08		ea 6c 2f 08 08 08 c2 20 48 a9 00 08 5b 68 28 08
>1a1d18		e2 20 48 a9 00 48 ab 68 28 c2 10 da e2 20 a7 00
>1a1d28		d0 03 4c cf 1d 30 33 c9 20 d0 03 4c c9 1d c9 3a
>1a1d38		b0 04 c9 30 b0 56 c9 26 f0 52 c9 22 d0 03 4c e2
>1a1d48		1d c9 5b b0 07 c9 41 90 03 4c ee 1d c9 7b b0 07
>1a1d58		c9 61 90 03 4c ee 1d 4c cf 1d c9 8f f0 40 c9 90
>1a1d68		f0 41 20 a7 0c c9 30 d0 0c 20 8e 1c a2 23 08 20
>1a1d78		ab 19 4c 24 1d c9 00 d0 4e a7 00 a6 21 e0 ff 7f
>1a1d88		f0 05 20 c8 1a b0 12 20 28 1a 80 35 c2 20 20 42
>1a1d98		5a a2 23 08 20 ab 19 80 83 20 b8 1c 80 dd 20 28
>1a1da8		1a 80 1e e2 20 a4 21 c0 ff 7f f0 46 a4 21 b9 01
>1a1db8		00 c9 01 f0 3d c9 8f f0 05 20 b8 1c 80 ee 20 51
>1a1dc8		1a 20 1d 21 4c 24 1d a6 21 e0 ff 7f b0 24 bd 01
>1a1dd8		00 c9 01 f0 1d 20 b8 1c 80 ed 20 18 1c a2 23 08
>1a1de8		20 ab 19 4c 24 1d 20 8d 1b a2 23 08 20 ab 19 4c
>1a1df8		24 1d a2 23 08 20 e9 19 fa 28 60 08 0b 8b 08 e2
>1a1e08		20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08 5b
>1a1e18		68 28 c2 30 a9 fd 5f 85 33 ab 2b 28 60 08 0b 08
>1a1e28		c2 20 48 a9 00 08 5b 68 28 c2 30 92 33 c6 33 c6
>1a1e38		33 2b 28 60 08 c2 30 29 ff 00 20 25 1e 28 60 08
>1a1e48		0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 e6 33 e6
>1a1e58		33 b2 33 2b 28 60 8b 0b 08 08 c2 20 48 a9 00 08
>1a1e68		5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 20 85
>1a1e78		23 a9 00 00 85 25 e2 20 a9 00 85 27 85 ea a9 1a
>1a1e88		85 e9 c2 20 a9 b8 1e 85 e7 20 83 53 c2 20 a5 d7
>1a1e98		85 23 a5 d9 85 25 e2 20 a9 00 85 27 85 ea a9 1a
>1a1ea8		85 e9 c2 20 a9 bc 1e 85 e7 20 83 53 28 2b ab 60
>1a1eb8		45 52 52 00 45 52 4c 00 e2 20 c2 10 20 d7 03 af
>1a1ec8		d3 08 00 0a c2 20 29 ff 00 a8 08 e2 20 48 a9 1a
>1a1ed8		48 ab 68 28 be 12 1f 20 64 04 c2 20 a5 d7 f0 27
>1a1ee8		a2 42 1f 20 64 04 08 e2 20 48 a9 00 48 ab 68 28
>1a1ef8		c2 20 af d7 08 00 8f 23 08 00 a9 00 00 8f 25 08
>1a1f08		00 20 1e 46 20 d7 03 4c c0 27 46 1f 49 1f 4f 1f
>1a1f18		5c 1f 6a 1f 78 1f 8b 1f a1 1f b1 1f c0 1f cd 1f
>1a1f28		de 1f ed 1f fa 1f 08 20 17 20 28 20 41 20 55 20
>1a1f38		69 20 7f 20 93 20 ae 20 c6 20 20 61 74 00 4f 4b
>1a1f48		00 42 72 65 61 6b 00 53 79 6e 74 61 78 20 65 72
>1a1f58		72 6f 72 00 4f 75 74 20 6f 66 20 6d 65 6d 6f 72
>1a1f68		79 00 54 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>1a1f78		56 61 72 69 61 62 6c 65 20 6e 6f 74 20 66 6f 75
>1a1f88		6e 64 00 4c 69 6e 65 20 6e 75 6d 62 65 72 20 6e
>1a1f98		6f 74 20 66 6f 75 6e 64 00 53 74 61 63 6b 20 75
>1a1fa8		6e 64 65 72 66 6c 6f 77 00 53 74 61 63 6b 20 6f
>1a1fb8		76 65 72 66 6c 6f 77 00 4f 75 74 20 6f 66 20 72
>1a1fc8		61 6e 67 65 00 49 6c 6c 65 67 61 6c 20 61 72 67
>1a1fd8		75 6d 65 6e 74 00 46 69 6c 65 20 6e 6f 74 20 66
>1a1fe8		6f 75 6e 64 00 4e 6f 74 20 61 20 6e 75 6d 62 65
>1a1ff8		72 00 4d 61 74 68 20 6f 76 65 72 66 6c 6f 77 00
>1a2008		4d 61 74 68 20 75 6e 64 65 72 66 6c 6f 77 00 44
>1a2018		69 76 69 73 69 6f 6e 20 62 79 20 7a 65 72 6f 00
>1a2028		55 6e 61 62 6c 65 20 74 6f 20 72 65 61 64 20 64
>1a2038		69 72 65 63 74 6f 72 79 00 55 6e 61 62 6c 65 20
>1a2048		74 6f 20 6c 6f 61 64 20 66 69 6c 65 00 55 6e 61
>1a2058		62 6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c 65
>1a2068		00 55 6e 61 62 6c 65 20 74 6f 20 64 65 6c 65 74
>1a2078		65 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74
>1a2088		20 66 69 6e 64 20 66 69 6c 65 00 43 6f 75 6c 64
>1a2098		20 6e 6f 74 20 75 70 64 61 74 65 20 64 69 72 65
>1a20a8		63 74 6f 72 79 00 43 6f 75 6c 64 20 6e 6f 74 20
>1a20b8		63 6f 70 79 20 74 68 65 20 66 69 6c 65 00 41 72
>1a20c8		67 75 6d 65 6e 74 20 6f 75 74 73 69 64 65 20 64
>1a20d8		6f 6d 61 69 6e 00 08 0b 08 c2 20 48 a9 00 08 5b
>1a20e8		68 28 e2 20 a9 00 85 d2 2b 28 60 0b 08 08 c2 20
>1a20f8		48 a9 00 08 5b 68 28 08 c2 20 a9 c0 1e 8f d4 08
>1a2108		00 e2 20 a9 1a 8f d6 08 00 28 20 c5 44 20 06 40
>1a2118		64 31 28 2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>1a2128		28 c2 20 18 a5 00 69 01 00 85 00 e2 20 a5 02 69
>1a2138		00 85 02 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>1a2148		68 28 e2 20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02
>1a2158		80 05 20 1d 21 80 ed 2b 28 60 08 e2 20 a7 00 f0
>1a2168		09 c9 3a f0 05 20 1d 21 80 f3 28 60 08 e2 20 64
>1a2178		36 a7 00 f0 19 c5 37 f0 2c c9 9b f0 1e c9 9f f0
>1a2188		1a c9 9e f0 1a c9 a0 f0 16 20 1d 21 80 e3 20 fa
>1a2198		21 c2 20 a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea c6
>1a21a8		36 30 30 80 e4 a5 35 30 06 a5 36 f0 02 80 da 20
>1a21b8		1d 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a21c8		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>1a21d8		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a21e8		02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a21f8		d4 08 08 c2 30 a0 00 00 b7 1a 85 0c 18 a5 1a 65
>1a2208		0c 85 1a a5 1c 69 00 00 85 1c a0 02 00 b7 1a 85
>1a2218		d7 18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02
>1a2228		28 60 08 e2 20 48 20 3e 21 68 e2 20 c7 00 d0 08
>1a2238		20 1d 21 20 3e 21 28 60 08 c2 20 48 a9 00 08 5b
>1a2248		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>1a2258		5e 1e e2 20 dc d4 08 08 e2 20 20 3e 21 e2 20 a7
>1a2268		00 f0 10 c9 3a f0 0c c5 37 f0 05 20 1d 21 80 ef
>1a2278		28 38 60 28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0
>1a2288		0d c9 3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a
>1a2298		60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20 f8
>1a22a8		14 20 8b 19 e2 20 a9 00 85 dc 22 3c 11 00 b0 4b
>1a22b8		a7 00 c9 3a d0 03 20 1d 21 20 3e 21 a7 00 d0 03
>1a22c8		4c 4d 23 20 e2 04 b0 52 a7 00 10 10 20 a7 0c 85
>1a22d8		0c c9 20 d0 03 4c 3b 23 a5 d2 f0 51 08 c2 20 48
>1a22e8		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>1a22f8		29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9
>1a2308		00 08 5b 68 28 e2 20 a9 01 8f d3 08 00 c2 20 29
>1a2318		ff 00 20 5e 1e e2 20 dc d4 08 20 cf 44 4c 4d 23
>1a2328		08 e2 20 48 a9 00 48 ab 68 28 6c 2f 08 a5 0c c9
>1a2338		10 d0 a9 a7 00 20 84 0c c2 20 85 2f 20 8b 19 20
>1a2348		1d 21 20 28 23 ab 2b 28 60 08 58 20 de 20 20 03
>1a2358		1e e2 20 9c 8a 0f c2 20 a5 1a 85 00 a5 1c 85 02
>1a2368		4c 8f 23 08 c2 20 a0 02 00 b7 1a 85 d7 e2 20 a5
>1a2378		dc c9 03 f0 12 c2 20 18 a5 1a 69 04 00 85 00 e2
>1a2388		20 a5 1c 69 00 85 02 c2 20 20 99 22 e2 20 a5 dc
>1a2398		c9 03 f0 f3 c9 00 d0 31 e2 20 20 3e 21 a7 00 f0
>1a23a8		28 c9 3a f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a23b8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>1a23c8		20 dc d4 08 20 1d 21 80 be 28 60 08 58 e2 20 a9
>1a23d8		80 85 d2 9c 8a 0f 20 03 1e c2 30 64 31 a0 02 00
>1a23e8		b7 1a f0 29 20 6b 23 e2 20 a5 dc c9 01 f0 1e c9
>1a23f8		02 f0 ea c9 03 f0 e6 c2 20 a0 00 00 18 a5 1a 77
>1a2408		1a 85 1a e2 20 a5 1c 69 00 85 1c 80 d0 e2 20 a9
>1a2418		00 85 d2 28 60 08 c2 30 c2 20 a9 00 00 85 08 a9
>1a2428		16 00 85 0a c2 20 a0 02 00 b7 08 f0 31 c5 23 f0
>1a2438		1e b0 2b c2 20 a0 00 00 18 a5 08 77 08 85 0c e2
>1a2448		20 a5 0a 69 00 85 0a c2 20 a5 0c 85 08 80 d7 c2
>1a2458		20 a5 08 85 1a e2 20 a5 0a 85 1c 28 38 60 28 18
>1a2468		60 08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 08
>1a2478		e2 20 a5 0e c5 02 f0 26 c2 20 18 a5 0c 69 01 00
>1a2488		85 0c e2 20 a5 0e 69 00 85 0e c2 20 18 a5 08 69
>1a2498		01 00 85 08 e2 20 a5 0a 69 00 85 0a 80 c4 28 60
>1a24a8		08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 06 a5
>1a24b8		0e c5 02 f0 26 c2 20 38 a5 0c e9 01 00 85 0c e2
>1a24c8		20 a5 0e e9 00 85 0e c2 20 38 a5 08 e9 01 00 85
>1a24d8		08 e2 20 a5 0a e9 00 85 0a 80 c6 28 60 08 a0 00
>1a24e8		00 c2 20 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00
>1a24f8		85 0e c2 20 18 a5 d9 69 04 00 85 00 e2 20 a5 db
>1a2508		69 00 85 02 a0 00 00 c2 20 38 a5 d9 f7 08 85 d9
>1a2518		e2 20 a5 db e9 00 85 db 20 69 24 20 c5 44 28 60
>1a2528		08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a0 02 00
>1a2538		97 d9 18 a5 d9 69 04 00 85 08 e2 20 a5 db 69 00
>1a2548		85 0a e2 20 a0 00 00 b7 1a 97 08 f0 03 c8 80 f7
>1a2558		c2 20 98 18 69 05 00 85 0c c2 20 a0 00 00 a5 0c
>1a2568		97 d9 c2 20 18 a5 d9 65 0c 85 0c e2 20 a5 db 69
>1a2578		00 85 db c2 20 a5 0c 85 d9 c2 20 a0 00 00 a9 00
>1a2588		00 97 d9 c8 c0 05 00 d0 f8 20 c5 44 28 60 0b 08
>1a2598		08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 00 00 85
>1a25a8		08 a9 16 00 85 0a a0 02 00 b7 08 f0 1d c5 d7 f0
>1a25b8		25 b0 1d a0 00 00 18 a5 08 77 08 85 0c a5 0a 69
>1a25c8		00 00 85 0a a5 0c 85 08 80 dc a9 00 00 28 2b 60
>1a25d8		a9 01 00 28 2b 60 a9 02 00 28 2b 60 08 c2 30 a9
>1a25e8		05 00 85 10 a0 00 00 e2 20 b7 1a f0 07 c2 20 e6
>1a25f8		10 c8 80 f3 c2 20 a5 08 85 00 a5 0a 85 02 18 a5
>1a2608		d9 69 04 00 85 0c a5 db 69 00 00 85 0e 18 a5 d9
>1a2618		65 10 85 d9 a5 db 69 00 00 85 db 18 a5 d9 69 04
>1a2628		00 85 08 a5 db 69 00 00 85 0a 20 a8 24 c2 20 a5
>1a2638		10 a0 00 00 97 00 a5 d7 a0 02 00 97 00 18 a5 00
>1a2648		69 04 00 85 00 a5 02 69 00 00 85 02 a0 00 00 e2
>1a2658		20 b7 1a 97 00 f0 03 c8 80 f7 20 c5 44 28 60 08
>1a2668		c2 30 85 d7 20 96 25 c9 00 00 f0 2c c9 01 00 f0
>1a2678		22 c2 20 a5 08 48 a5 0a 48 20 e5 24 68 85 0a 68
>1a2688		85 08 a5 1a 85 00 a5 1c 85 02 20 3e 21 e2 20 a7
>1a2698		00 f0 0a 20 e4 25 80 05 a5 d7 20 28 25 28 60 0b
>1a26a8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a2
>1a26b8		00 00 bd 00 4f f0 03 e8 80 f8 86 0c c2 30 8a c9
>1a26c8		02 00 90 12 3a 18 69 00 4f aa 18 65 8f a8 a5 0c
>1a26d8		3a 8b 44 00 00 ab c2 20 a6 55 a0 00 4f a5 8f 8b
>1a26e8		54 00 1a ab e2 20 a5 0c c9 02 90 18 a6 8f a9 22
>1a26f8		9d 00 4f e8 bd 00 4f d0 fa a9 22 9d 00 4f a9 00
>1a2708		e8 9d 00 4f 28 2b 60 da 5a 8b 0b 08 08 c2 20 48
>1a2718		a9 00 08 5b 68 28 e2 20 c2 10 ad 00 4f c9 23 f0
>1a2728		0a c9 7c f0 17 28 2b ab 7a fa 60 c2 20 a9 03 00
>1a2738		85 8f a9 55 27 85 55 20 a7 26 80 e9 c2 20 a9 04
>1a2748		00 85 8f a9 59 27 85 55 20 a7 26 80 d8 44 49 52
>1a2758		00 42 52 55 4e 00 8b 08 20 3d 02 08 e2 20 48 a9
>1a2768		1a 48 ab 68 28 a2 6f d2 20 64 04 28 ab 60 08 e2
>1a2778		30 a9 01 20 1c 00 20 db 00 c9 00 f0 f9 c9 0d f0
>1a2788		02 80 f3 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68
>1a2798		28 c2 30 64 d7 a9 00 4f 85 1a a9 00 00 85 1c 20
>1a27a8		9c 09 c2 20 a5 d7 d0 05 20 51 23 80 07 20 67 26
>1a27b8		28 2b 38 60 28 2b 18 60 c2 30 a2 ff fe 9a 20 5e
>1a27c8		27 20 08 00 20 0c 00 22 3c 11 00 a9 00 00 20 1c
>1a27d8		00 20 0f 27 20 8d 27 b0 e8 80 e3 08 e2 20 20 a3
>1a27e8		08 c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20
>1a27f8		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a2808		20 29 ff 00 20 5e 1e e2 20 dc d4 08 20 51 16 80
>1a2818		08 20 72 54 80 03 20 e1 56 28 60 08 e2 20 20 55
>1a2828		08 c9 00 f0 23 c9 01 f0 24 08 c2 20 48 a9 00 08
>1a2838		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a2848		20 5e 1e e2 20 dc d4 08 20 84 54 80 03 20 d6 56
>1a2858		28 60 08 e2 20 20 55 08 c9 00 f0 23 c9 01 f0 24
>1a2868		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a2878		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 20
>1a2888		96 54 80 03 20 77 57 28 60 20 bf 07 20 f0 07 20
>1a2898		2c 57 60 a5 23 8f 1a 01 00 a5 29 8f 18 01 00 af
>1a28a8		1e 01 00 85 23 60 08 c2 30 48 20 bf 07 a5 2d c9
>1a28b8		00 00 d0 0d a5 2b d0 09 da a6 29 20 4a 64 fa 80
>1a28c8		1c 20 f0 07 c2 20 a5 2b 48 a5 29 48 20 d5 62 c2
>1a28d8		20 68 85 29 68 85 2b 20 77 57 20 b4 64 68 28 60
>1a28e8		08 20 51 06 20 82 06 c2 20 a5 23 25 29 85 23 a5
>1a28f8		25 25 2b 85 25 28 60 08 20 51 06 20 82 06 c2 20
>1a2908		a5 23 05 29 85 23 a5 25 05 2b 85 25 28 60 08 20
>1a2918		51 06 c2 20 a5 23 49 ff ff 85 23 a5 25 49 ff ff
>1a2928		85 25 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>1a2938		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a2948		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a2958		e2 20 dc d4 08 20 d9 17 80 08 20 97 55 80 03 20
>1a2968		0c 5d 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>1a2978		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a2988		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a2998		e2 20 dc d4 08 20 f0 17 80 08 20 b8 55 80 03 20
>1a29a8		21 5d 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>1a29b8		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a29c8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a29d8		e2 20 dc d4 08 20 07 18 80 08 20 e5 55 80 03 20
>1a29e8		36 5d 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>1a29f8		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a2a08		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a2a18		e2 20 dc d4 08 20 1e 18 80 08 20 03 56 80 03 20
>1a2a28		75 5d 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>1a2a38		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a2a48		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a2a58		e2 20 dc d4 08 20 35 18 80 08 20 21 56 80 03 20
>1a2a68		60 5d 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>1a2a78		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a2a88		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a2a98		e2 20 dc d4 08 20 4c 18 80 08 20 4e 56 80 03 20
>1a2aa8		4b 5d 28 60 08 e2 20 a5 27 c9 00 f0 2d c9 01 f0
>1a2ab8		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>1a2ac8		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a2ad8		e2 20 a5 26 49 80 85 26 80 16 c2 20 a5 23 49 ff
>1a2ae8		ff 85 23 a5 25 49 ff ff 85 25 e6 23 d0 02 e6 25
>1a2af8		28 60 08 e2 20 20 0c 1d 20 63 07 20 ae 05 a5 23
>1a2b08		0a 0a 0a 0a 05 29 48 a9 2c 20 2a 22 20 0c 1d 20
>1a2b18		63 07 20 ae 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c
>1a2b28		20 2a 22 20 0c 1d 20 63 07 20 ae 05 a5 23 0a 0a
>1a2b38		0a 0a 05 29 48 af 0e 08 af 09 0c 8f 0e 08 af 68
>1a2b48		8f 00 08 af 68 8f 02 08 af 68 8f 04 08 af af 0e
>1a2b58		08 af 29 f7 8f 0e 08 af 20 62 21 28 60 08 e2 20
>1a2b68		20 0c 1d 20 63 07 20 ae 05 a5 23 0a 0a 0a 0a 05
>1a2b78		29 48 a9 2c 20 2a 22 20 0c 1d 20 63 07 20 ae 05
>1a2b88		a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 2a 22 20 0c
>1a2b98		1d 20 51 06 20 e4 05 c2 20 a5 23 85 92 a5 29 85
>1a2ba8		23 20 ae 05 e2 20 a5 23 0a 0a 0a 0a 05 29 48 c2
>1a2bb8		20 a5 92 85 23 20 ae 05 e2 20 a5 23 0a 0a 0a 0a
>1a2bc8		05 29 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 0f
>1a2bd8		08 af 68 8f 0a 08 af 68 8f 09 08 af 68 8f 06 08
>1a2be8		af af 0e 08 af 29 f7 8f 0e 08 af 20 62 21 28 60
>1a2bf8		08 e2 20 48 20 0c 1d 20 63 07 e2 20 a5 23 29 0f
>1a2c08		0a 0a 0a 0a 83 01 a9 2c 20 2a 22 20 0c 1d 20 63
>1a2c18		07 a5 23 29 0f 03 01 8f 1e 00 00 e2 20 68 28 60
>1a2c28		08 c2 20 f4 00 00 e2 20 20 0c 1d 20 63 07 a5 23
>1a2c38		83 01 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5 23 83
>1a2c48		02 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5 23 8f 0d
>1a2c58		00 af a3 02 8f 0e 00 af a3 01 8f 0f 00 af c2 20
>1a2c68		68 28 60 08 c2 20 f4 00 00 e2 20 20 0c 1d 20 51
>1a2c78		06 a5 23 f0 16 a9 01 8f 04 00 af a9 20 8f 08 00
>1a2c88		af 8f 09 00 af 22 2c 11 00 80 0a a9 00 8f 04 00
>1a2c98		af 22 2c 11 00 a9 2c 85 37 20 5f 22 90 39 20 1d
>1a2ca8		21 20 0c 1d 20 63 07 a5 23 83 01 a9 2c 20 2a 22
>1a2cb8		20 0c 1d 20 63 07 a5 23 83 02 a9 2c 20 2a 22 20
>1a2cc8		0c 1d 20 63 07 a5 23 8f 05 00 af a3 02 8f 06 00
>1a2cd8		af a3 01 8f 07 00 af c2 20 68 28 60 08 c2 20 3b
>1a2ce8		38 e9 05 00 1b e2 20 20 0c 1d 20 63 07 a5 23 c9
>1a2cf8		0a 90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2d08		0a 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a2d18		d4 08 83 01 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5
>1a2d28		23 83 02 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5 23
>1a2d38		83 03 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5 23 83
>1a2d48		04 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5 23 83 05
>1a2d58		a9 af 85 a0 a3 01 0a c2 20 29 ff 00 aa bf 9c 2d
>1a2d68		1a 85 9e e2 20 a3 02 c2 20 29 ff 00 0a 0a 18 65
>1a2d78		9e 85 9e e2 20 a0 02 00 a3 03 97 9e a0 01 00 a3
>1a2d88		04 97 9e a0 00 00 a3 05 97 9e c2 20 3b 18 69 05
>1a2d98		00 1b 28 60 00 20 00 24 00 28 00 2c 00 30 00 34
>1a2da8		00 38 00 3c 40 1f 80 1f da 5a 08 20 0c 1d 20 51
>1a2db8		06 c2 20 a5 23 89 00 01 d0 17 af 00 00 af 89 00
>1a2dc8		01 f0 0e e2 20 a9 00 8f 01 00 af a9 01 8f 01 00
>1a2dd8		af c2 20 a5 23 8f 00 00 af e2 20 a5 24 c2 20 29
>1a2de8		03 00 0a aa c2 20 bf 37 2e 1a 8f 10 f0 1a bf 3f
>1a2df8		2e 1a 8f 12 f0 1a af 10 f0 1a 8f 08 01 00 af 12
>1a2e08		f0 1a 8f 0a 01 00 af 0c 01 00 8f 14 f0 1a e2 20
>1a2e18		af 0e 01 00 8f 16 f0 1a 22 2c 11 00 c2 20 af 1a
>1a2e28		00 00 aa af 1c 00 00 a8 20 20 00 28 7a fa 60 80
>1a2e38		02 20 03 40 01 90 01 e0 01 58 02 f0 00 2c 01 50
>1a2e48		00 64 00 28 00 32 00 3c 00 4b 00 1e 00 32 00 48
>1a2e58		00 5c 00 20 00 2a 00 34 00 43 00 16 00 34 00 da
>1a2e68		08 c2 30 c9 02 00 b0 1c 0a 0a aa bf 00 f0 1a 85
>1a2e78		9e bf 02 f0 1a 85 a0 c9 f0 00 b0 08 c9 b0 00 90
>1a2e88		03 28 fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a2e98		a9 09 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>1a2ea8		dc d4 08 da 08 c2 30 c9 02 00 b0 17 0a 0a aa bf
>1a2eb8		08 f0 1a 85 9e bf 0a f0 1a 85 a0 c9 40 00 b0 03
>1a2ec8		28 fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2ed8		09 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a2ee8		d4 08 08 c2 30 3b 38 e9 07 00 1b 20 0c 1d 20 63
>1a2ef8		07 c2 20 a5 23 c9 02 00 b0 59 83 01 e2 20 a9 2c
>1a2f08		20 2a 22 20 0c 1d 20 63 07 a5 23 83 03 a9 2c 20
>1a2f18		2a 22 20 0c 1d 20 63 07 a3 01 0a 0a 0a aa a3 03
>1a2f28		d0 05 a5 23 0a 80 04 a5 23 38 2a 9f 00 01 af c2
>1a2f38		20 a9 2c 00 85 37 20 5f 22 b0 37 c2 20 08 c2 20
>1a2f48		a9 00 00 85 23 a9 b0 00 85 25 e2 20 a9 00 85 27
>1a2f58		28 80 27 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2f68		09 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a2f78		d4 08 c2 20 20 1d 21 20 0c 1d c2 20 a3 01 0a 0a
>1a2f88		aa a5 23 9f 00 f0 1a 9f 08 f0 1a 83 04 a5 25 9f
>1a2f98		02 f0 1a 38 e9 b0 00 9f 0a f0 1a 83 06 a3 01 0a
>1a2fa8		0a 0a aa e2 20 a3 04 9f 01 01 af a3 05 9f 02 01
>1a2fb8		af a3 06 9f 03 01 af a9 00 9f 04 01 af 9f 05 01
>1a2fc8		af c2 30 3b 18 69 07 00 1b 28 60 08 c2 20 48 a9
>1a2fd8		00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29
>1a2fe8		ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20 20 0c 1d
>1a2ff8		20 63 07 a5 23 20 ab 2e c2 20 a5 9e 8f 05 04 af
>1a3008		af 14 f0 1a 8f 08 04 af e2 20 a5 a0 8f 07 04 af
>1a3018		af 16 f0 1a 8f 0a 04 af a9 00 8f 01 04 af a9 85
>1a3028		8f 00 04 af af 01 04 af 30 fa a9 00 8f 00 04 af
>1a3038		28 60 08 c2 20 a5 59 cf 10 f0 1a 90 1f 08 c2 20
>1a3048		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>1a3058		20 29 ff 00 20 5e 1e e2 20 dc d4 08 c2 30 a5 5d
>1a3068		cf 12 f0 1a b0 d7 8f 08 01 00 af 10 f0 1a 8f 0a
>1a3078		01 00 18 af 0c 01 00 65 59 85 0c af 0e 01 00 69
>1a3088		00 00 85 0e 18 a5 0c 65 9e 85 0c a5 0e 65 a0 85
>1a3098		0e e2 20 a5 55 87 0c 28 60 c2 20 a9 01 00 85 dd
>1a30a8		38 a5 61 e5 59 85 69 10 0b 49 ff ff 1a 85 69 a9
>1a30b8		ff ff 85 dd a9 01 00 85 df 38 a5 65 e5 5d 85 6d
>1a30c8		10 0b 49 ff ff 1a 85 6d a9 ff ff 85 df a5 6d c9
>1a30d8		01 00 d0 19 a5 69 c9 01 00 d0 10 20 3a 30 a5 61
>1a30e8		85 59 a5 65 85 5d 20 3a 30 80 5b a5 6d c5 69 b0
>1a30f8		04 a5 69 80 06 a5 6d 49 ff ff 1a 48 0a 68 6a 85
>1a3108		71 20 3a 30 a5 59 c5 61 d0 06 a5 5d c5 65 f0 36
>1a3118		a5 71 85 75 a5 69 49 ff ff 1a c5 75 10 10 f0 0e
>1a3128		38 a5 71 e5 6d 85 71 18 a5 59 65 dd 85 59 a5 75
>1a3138		c5 6d 10 cd f0 cb 18 a5 71 65 69 85 71 18 a5 5d
>1a3148		65 df 85 5d 80 bb 60 08 c2 20 3b 38 e9 06 00 1b
>1a3158		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>1a3168		48 ab 68 28 c2 30 20 0c 1d 20 63 07 83 01 a9 2c
>1a3178		00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 03 a9 2c
>1a3188		00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 05 a9 2c
>1a3198		00 20 2a 22 20 0c 1d 20 63 07 a5 23 85 55 a3 03
>1a31a8		85 59 a3 05 85 5d a3 01 20 67 2e 20 3a 30 c2 20
>1a31b8		3b 18 69 06 00 1b 28 60 08 c2 20 3b 38 e9 0a 00
>1a31c8		1b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>1a31d8		00 48 ab 68 28 c2 30 20 0c 1d 20 63 07 83 01 a9
>1a31e8		2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 03 a9
>1a31f8		2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 05 a9
>1a3208		2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 07 a9
>1a3218		2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 09 a9
>1a3228		2c 00 20 2a 22 20 0c 1d 20 63 07 a5 23 85 55 a3
>1a3238		03 85 59 a3 05 85 5d a3 07 85 61 a3 09 85 65 a3
>1a3248		01 20 67 2e 20 a1 30 c2 20 3b 18 69 0a 00 1b 28
>1a3258		60 08 c2 20 3b 38 e9 0c 00 1b 08 c2 20 48 a9 00
>1a3268		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>1a3278		20 0c 1d 20 63 07 83 01 a9 2c 00 20 2a 22 20 0c
>1a3288		1d 20 51 06 a5 23 83 03 a9 2c 00 20 2a 22 20 0c
>1a3298		1d 20 51 06 a5 23 83 05 a9 2c 00 20 2a 22 20 0c
>1a32a8		1d 20 51 06 a5 23 83 07 a9 2c 00 20 2a 22 20 0c
>1a32b8		1d 20 51 06 a5 23 83 09 a9 2c 00 20 2a 22 20 0c
>1a32c8		1d 20 63 07 a5 23 83 0b a3 01 20 ab 2e a9 07 00
>1a32d8		8f 00 04 af c2 20 a3 05 8f 00 01 00 af 10 f0 1a
>1a32e8		8f 02 01 00 18 af 04 01 00 63 03 85 0c e2 20 af
>1a32f8		06 01 00 69 00 85 0e c2 20 18 a5 9e 65 0c 8f 05
>1a3308		04 af e2 20 a5 a0 65 0e 8f 07 04 af c2 20 38 a3
>1a3318		07 e3 03 85 0c 8f 08 04 af 38 af 10 f0 1a 8f 0e
>1a3328		04 af 38 a3 09 e3 05 8f 0a 04 af e2 20 a3 0b 8f
>1a3338		01 04 af af 00 04 af 09 80 8f 00 04 af af 01 04
>1a3348		af 30 fa a9 00 8f 00 04 af c2 20 3b 18 69 0c 00
>1a3358		1b 28 60 08 c2 20 c9 40 00 b0 13 0a 0a 0a 18 69
>1a3368		00 0c 85 9e a9 af 00 69 00 00 85 a0 28 60 08 c2
>1a3378		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a3388		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20
>1a3398		3b 38 e9 03 00 1b c2 30 20 0c 1d 20 63 07 a5 23
>1a33a8		83 01 a9 2c 00 20 2a 22 e2 20 20 0c 1d 20 63 07
>1a33b8		a5 23 c9 08 b0 56 83 03 a9 2c 20 2a 22 20 0c 1d
>1a33c8		20 51 06 c2 20 38 a5 23 e9 00 00 85 23 a5 25 e9
>1a33d8		b0 00 85 25 30 36 c2 20 a3 01 aa 20 5b 33 a5 23
>1a33e8		a0 01 00 97 9e e2 20 a5 25 c8 c8 97 9e bf 18 f0
>1a33f8		1a 29 f1 85 0c a3 03 0a 29 0e 05 0c 87 9e 9f 18
>1a3408		f0 1a c2 20 3b 18 69 03 00 1b 28 60 08 c2 20 48
>1a3418		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>1a3428		29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20 3b 38
>1a3438		e9 04 00 1b c2 30 20 0c 1d 20 63 07 a5 23 83 01
>1a3448		a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 03
>1a3458		a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a3 01 20 5b
>1a3468		33 a3 03 a0 04 00 97 9e a5 23 a0 06 00 97 9e c2
>1a3478		20 3b 18 69 04 00 1b 28 60 08 c2 20 3b 38 e9 03
>1a3488		00 1b c2 30 20 0c 1d 20 63 07 a5 23 83 01 a9 2c
>1a3498		00 20 2a 22 e2 20 20 0c 1d 20 51 06 a5 23 d0 04
>1a34a8		83 03 80 04 a9 01 83 03 a9 2c 85 37 20 5f 22 b0
>1a34b8		20 c2 30 a3 01 aa 20 5b 33 e2 20 bf 18 f0 1a 29
>1a34c8		fe 85 0c a3 03 29 01 05 0c 9f 18 f0 1a 87 9e 80
>1a34d8		36 c2 30 20 1d 21 20 0c 1d 20 63 07 a5 23 c9 08
>1a34e8		00 b0 2e 0a 0a 0a 0a 85 0c a3 01 aa 20 5b 33 e2
>1a34f8		20 a3 03 29 01 05 0c 85 0c bf 18 f0 1a 29 8e 05
>1a3508		0c 87 9e 9f 18 f0 1a c2 20 3b 18 69 03 00 1b 28
>1a3518		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a3528		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a3538		08 c2 20 c9 04 00 b0 19 8d 00 01 a9 04 00 8d 02
>1a3548		01 18 ad 04 01 69 80 02 85 9e a9 af 00 85 a0 28
>1a3558		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a3568		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a3578		08 c2 20 c9 04 00 b0 19 8d 00 01 a9 0c 00 8d 02
>1a3588		01 18 ad 04 01 69 00 02 85 9e a9 af 00 85 a0 28
>1a3598		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a35a8		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a35b8		08 c2 20 3b 38 e9 06 00 1b c2 20 20 0c 1d 20 63
>1a35c8		07 a5 23 83 01 a9 2c 00 20 2a 22 20 0c 1d 20 63
>1a35d8		07 a5 23 83 03 a9 2c 00 20 2a 22 20 0c 1d 20 63
>1a35e8		07 a5 23 83 05 a9 2c 00 20 2a 22 20 0c 1d 20 51
>1a35f8		06 a3 01 20 38 35 a5 23 87 9e e2 20 38 a5 25 e9
>1a3608		b0 a0 02 00 97 9e a3 05 d0 0d e2 20 a3 03 29 07
>1a3618		a0 03 00 97 9e 80 0d e2 20 a3 03 29 07 09 08 a0
>1a3628		03 00 97 9e c2 20 3b 18 69 06 00 1b 28 60 08 c2
>1a3638		20 3b 38 e9 06 00 1b c2 20 20 0c 1d 20 63 07 a5
>1a3648		23 83 01 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a5
>1a3658		23 83 03 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a5
>1a3668		23 83 05 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a3
>1a3678		01 20 78 35 a5 23 a0 01 00 97 9e e2 20 38 a5 25
>1a3688		e9 b0 c8 c8 97 9e c2 20 a3 03 a0 04 00 97 9e a3
>1a3698		05 a0 06 00 97 9e c2 20 3b 18 69 06 00 1b 28 60
>1a36a8		08 c2 20 f4 00 00 c2 20 20 0c 1d 20 63 07 a5 23
>1a36b8		83 01 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a3 01
>1a36c8		20 78 35 a5 23 d0 06 e2 20 a9 00 80 04 e2 20 a9
>1a36d8		01 e2 20 a0 00 00 97 9e c2 20 68 28 60 08 c2 20
>1a36e8		3b 38 e9 04 00 1b c2 20 20 0c 1d 20 63 07 a5 23
>1a36f8		83 01 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23
>1a3708		83 03 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a3 01
>1a3718		20 78 35 a5 23 a0 0a 00 97 9e a3 03 a0 08 00 97
>1a3728		9e c2 20 3b 18 69 04 00 1b 28 60 0b 08 08 c2 20
>1a3738		48 a9 00 08 5b 68 28 e2 20 a9 00 8f 58 f0 1a af
>1a3748		5c f0 1a c9 b0 b0 1c 8f 24 04 af af 5b f0 1a 8f
>1a3758		23 04 af af 5a f0 1a 8f 22 04 af a9 10 8f 58 f0
>1a3768		1a 80 17 38 e9 b0 8f 04 04 af af 5b f0 1a 8f 03
>1a3778		04 af af 5a f0 1a 8f 02 04 af af 59 f0 1a d0 3c
>1a3788		af 58 f0 1a f0 1b af 5d f0 1a 8f 28 04 af af 5e
>1a3798		f0 1a 8f 29 04 af af 5f f0 1a 8f 2a 04 af 82 8b
>1a37a8		00 af 5d f0 1a 8f 08 04 af af 5e f0 1a 8f 09 04
>1a37b8		af af 5f f0 1a 8f 0a 04 af 82 70 00 af 58 f0 1a
>1a37c8		09 01 8f 58 f0 1a 89 10 f0 32 af 60 f0 1a 8f 28
>1a37d8		04 af af 61 f0 1a 8f 29 04 af af 62 f0 1a 8f 2a
>1a37e8		04 af af 63 f0 1a 8f 2b 04 af af 64 f0 1a 8f 2c
>1a37f8		04 af af 65 f0 1a 8f 2d 04 af 80 30 af 60 f0 1a
>1a3808		8f 08 04 af af 61 f0 1a 8f 09 04 af af 62 f0 1a
>1a3818		8f 0a 04 af af 63 f0 1a 8f 0b 04 af af 64 f0 1a
>1a3828		8f 0c 04 af af 65 f0 1a 8f 0d 04 af e2 20 af 69
>1a3838		f0 1a c9 b0 b0 20 8f 27 04 af af 68 f0 1a 8f 26
>1a3848		04 af af 67 f0 1a 8f 25 04 af af 58 f0 1a 09 20
>1a3858		8f 58 f0 1a 80 17 38 e9 b0 8f 07 04 af af 68 f0
>1a3868		1a 8f 06 04 af af 67 f0 1a 8f 05 04 af af 66 f0
>1a3878		1a d0 3e af 58 f0 1a 89 20 f0 1b af 6a f0 1a 8f
>1a3888		28 04 af af 6b f0 1a 8f 29 04 af af 6c f0 1a 8f
>1a3898		2a 04 af 82 8b 00 af 6a f0 1a 8f 08 04 af af 6b
>1a38a8		f0 1a 8f 09 04 af af 6c f0 1a 8f 0a 04 af 82 70
>1a38b8		00 af 58 f0 1a 09 02 8f 58 f0 1a 89 20 f0 32 af
>1a38c8		6d f0 1a 8f 28 04 af af 6e f0 1a 8f 29 04 af af
>1a38d8		6f f0 1a 8f 2a 04 af af 70 f0 1a 8f 2b 04 af af
>1a38e8		71 f0 1a 8f 2e 04 af af 72 f0 1a 8f 2f 04 af 80
>1a38f8		30 af 6d f0 1a 8f 08 04 af af 6e f0 1a 8f 09 04
>1a3908		af af 6f f0 1a 8f 0a 04 af af 70 f0 1a 8f 0b 04
>1a3918		af af 71 f0 1a 8f 0e 04 af af 72 f0 1a 8f 0f 04
>1a3928		af af 58 f0 1a 29 30 f0 43 c9 10 f0 76 c9 20 d0
>1a3938		03 82 8a 00 af 58 f0 1a 29 03 f0 23 c9 03 f0 23
>1a3948		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>1a3958		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 a9
>1a3968		01 80 02 a9 03 8f 20 04 af 82 7d 00 af 58 f0 1a
>1a3978		29 03 f0 23 c9 03 f0 23 08 c2 20 48 a9 00 08 5b
>1a3988		68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20
>1a3998		5e 1e e2 20 dc d4 08 a9 01 80 02 a9 03 8f 00 04
>1a39a8		af 80 34 af 58 f0 1a 29 01 0a 09 11 8f 20 04 af
>1a39b8		af 58 f0 1a 29 02 09 11 8f 00 04 af 80 19 af 58
>1a39c8		f0 1a 29 02 09 21 8f 20 04 af af 58 f0 1a 29 01
>1a39d8		0a 09 21 8f 00 04 af af 00 04 af 09 80 8f 00 04
>1a39e8		af af 58 f0 1a 29 30 f0 0f af 20 04 af 09 80 8f
>1a39f8		20 04 af ea ea ea ea ea af 01 04 af 89 80 d0 f8
>1a3a08		a9 00 8f 20 04 af 8f 00 04 af 28 2b 60 0b 08 e2
>1a3a18		20 c2 10 a9 00 a2 00 00 8f 59 f0 1a e8 e0 1a 00
>1a3a28		d0 f6 20 7e 22 c9 e6 f0 23 c9 e7 f0 5e 08 c2 20
>1a3a38		48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2
>1a3a48		20 29 ff 00 20 5e 1e e2 20 dc d4 08 20 2a 22 20
>1a3a58		0c 1d 20 51 06 c2 20 a5 23 8f 5a f0 1a e2 20 a5
>1a3a68		25 8f 5c f0 1a a9 2c 20 2a 22 20 0c 1d 20 51 06
>1a3a78		c2 20 a5 23 8f 5d f0 1a e2 20 a5 25 8f 5f f0 1a
>1a3a88		e2 20 a9 00 8f 59 f0 1a 82 74 00 20 2a 22 20 0c
>1a3a98		1d 20 51 06 c2 20 a5 23 8f 5a f0 1a e2 20 a5 25
>1a3aa8		8f 5c f0 1a a9 2c 20 2a 22 20 0c 1d 20 0d 07 c2
>1a3ab8		20 a5 23 8f 60 f0 1a 8d 00 01 a9 2c 00 20 2a 22
>1a3ac8		20 0c 1d 20 0d 07 c2 20 a5 23 8f 62 f0 1a 8d 02
>1a3ad8		01 a9 2c 00 20 2a 22 20 0c 1d 20 0d 07 c2 20 a5
>1a3ae8		23 8f 64 f0 1a c2 20 ad 04 01 8f 5d f0 1a e2 20
>1a3af8		ad 06 01 8f 5f f0 1a e2 20 a9 01 8f 59 f0 1a e2
>1a3b08		20 a9 9c 20 2a 22 20 7e 22 c9 e6 f0 23 c9 e7 f0
>1a3b18		5e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a3b28		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a3b38		20 2a 22 20 0c 1d 20 51 06 c2 20 a5 23 8f 67 f0
>1a3b48		1a e2 20 a5 25 8f 69 f0 1a a9 2c 20 2a 22 20 0c
>1a3b58		1d 20 51 06 c2 20 a5 23 8f 6a f0 1a e2 20 a5 25
>1a3b68		8f 6c f0 1a e2 20 a9 00 8f 66 f0 1a 82 74 00 20
>1a3b78		2a 22 20 0c 1d 20 51 06 c2 20 a5 23 8f 67 f0 1a
>1a3b88		e2 20 a5 25 8f 69 f0 1a a9 2c 20 2a 22 20 0c 1d
>1a3b98		20 0d 07 c2 20 a5 23 8f 6d f0 1a 8d 00 01 a9 2c
>1a3ba8		00 20 2a 22 20 0c 1d 20 0d 07 c2 20 a5 23 8f 6f
>1a3bb8		f0 1a 8d 02 01 a9 2c 00 20 2a 22 20 0c 1d 20 0d
>1a3bc8		07 c2 20 a5 23 8f 71 f0 1a c2 20 ad 04 01 8f 6a
>1a3bd8		f0 1a e2 20 ad 06 01 8f 6c f0 1a e2 20 a9 01 8f
>1a3be8		66 f0 1a c2 20 af 5d f0 1a cf 6a f0 1a d0 14 e2
>1a3bf8		20 af 5f f0 1a cf 6c f0 1a d0 08 c2 20 20 33 37
>1a3c08		28 2b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a3c18		0a 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a3c28		d4 08 08 c2 30 20 0c 1d 20 63 07 a5 23 48 a9 2c
>1a3c38		00 20 2a 22 20 0c 1d 20 63 07 a4 23 fa 20 20 00
>1a3c48		28 60 08 20 3e 21 e2 20 a7 00 d0 03 4c f2 3c c9
>1a3c58		3a d0 03 4c f2 3c c9 22 d0 0b 20 18 1c 20 00 46
>1a3c68		a9 3b 20 2a 22 20 e2 04 90 44 20 20 54 90 3f a9
>1a3c78		3f 20 18 00 a9 20 20 18 00 20 10 00 e2 20 a5 ea
>1a3c88		c9 02 f0 49 c9 00 d0 03 82 84 00 c9 01 f0 5d 08
>1a3c98		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a3ca8		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2
>1a3cb8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a3cc8		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 c2 20 a9
>1a3cd8		00 4c 85 23 a9 00 00 85 25 e2 20 a9 02 85 27 c2
>1a3ce8		20 20 83 53 a9 0d 00 20 18 00 28 60 c2 20 a5 00
>1a3cf8		85 40 a5 02 85 42 a9 00 4c 85 00 a9 00 00 85 02
>1a3d08		20 42 5a c2 20 a5 40 85 00 a5 42 85 02 80 d0 c2
>1a3d18		20 a5 00 85 40 a5 02 85 42 a9 00 4c 85 00 a9 00
>1a3d28		00 85 02 20 d8 08 c2 20 a5 40 85 00 a5 42 85 02
>1a3d38		80 ad 08 20 3e 21 e2 20 a7 00 f0 47 c9 3a f0 43
>1a3d48		20 e2 04 90 40 20 20 54 90 3b 20 01 15 20 14 00
>1a3d58		e2 20 a0 00 00 97 16 a9 00 c8 97 16 c2 20 a5 16
>1a3d68		85 23 a5 18 85 25 e2 20 a9 02 85 27 20 83 53 20
>1a3d78		3e 21 a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20 1d
>1a3d88		21 80 b0 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a3d98		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>1a3da8		20 dc d4 08 08 20 0c 1d 20 51 06 e2 20 a9 5c 85
>1a3db8		a2 c2 20 a5 23 85 a3 e2 20 a5 25 85 a5 e2 20 a9
>1a3dc8		2c 85 37 20 5f 22 90 41 20 1d 21 20 0c 1d 20 0d
>1a3dd8		07 c2 20 a5 23 85 55 e2 20 a9 2c 85 37 20 5f 22
>1a3de8		90 27 20 1d 21 20 0c 1d 20 0d 07 c2 20 a5 23 85
>1a3df8		59 e2 20 a9 2c 85 37 20 5f 22 90 0d 20 1d 21 20
>1a3e08		0c 1d 20 0d 07 c2 20 a4 23 a6 59 a5 55 0b 8b 08
>1a3e18		22 a2 08 00 28 ab 2b 20 62 21 28 60 08 c2 20 48
>1a3e28		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>1a3e38		29 ff 00 20 5e 1e e2 20 dc d4 08 08 e2 20 20 3e
>1a3e48		21 20 20 54 90 64 a9 8f 20 2a 22 a9 01 20 28 1a
>1a3e58		a2 01 00 a9 00 8f 00 4d 00 20 0c 1d 20 51 06 c2
>1a3e68		20 a5 23 9f 00 4d 00 e2 20 af 00 4d 00 1a 8f 00
>1a3e78		4d 00 30 55 e8 e8 20 3e 21 a7 00 c9 2c f0 25 c9
>1a3e88		90 d0 27 20 1d 21 20 9e 66 c2 20 a5 c0 85 23 e2
>1a3e98		20 a5 c2 85 25 64 26 a5 ea 09 80 85 ea 85 27 20
>1a3ea8		83 53 28 60 20 1d 21 4c 61 3e 08 c2 20 48 a9 00
>1a3eb8		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>1a3ec8		00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08
>1a3ed8		5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00
>1a3ee8		20 5e 1e e2 20 dc d4 08 08 20 3e 21 e2 20 a7 00
>1a3ef8		f0 28 c9 3a f0 24 20 e2 04 90 21 20 20 54 90 1c
>1a3f08		20 43 3f 20 83 53 20 3e 21 a7 00 f0 0d c9 3a f0
>1a3f18		09 c9 2c d0 07 20 1d 21 80 cf 28 60 08 c2 20 48
>1a3f28		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>1a3f38		29 ff 00 20 5e 1e e2 20 dc d4 08 08 a5 02 85 42
>1a3f48		a5 00 85 40 a5 1c 85 46 a5 1a 85 44 c2 20 a5 3a
>1a3f58		d0 04 a5 38 f0 4e a5 38 85 00 a5 3a 85 02 a5 3c
>1a3f68		85 1a a5 3e 85 1c e2 20 a7 00 f0 53 c9 3a f0 4f
>1a3f78		c9 2c d0 03 20 1d 21 20 3e 21 a7 00 c9 22 f0 4e
>1a3f88		20 fb 04 b0 4e 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a3f98		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>1a3fa8		20 dc d4 08 c2 20 a9 00 00 85 1a a9 16 00 85 1c
>1a3fb8		18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02 e2
>1a3fc8		20 a9 80 85 35 a9 ab 85 37 20 74 21 80 a9 20 18
>1a3fd8		1c 80 03 20 0a 1b c2 20 a5 00 85 38 a5 02 85 3a
>1a3fe8		a5 1a 85 3c a5 1c 85 3e a5 44 85 1a a5 46 85 1c
>1a3ff8		a5 40 85 00 a5 42 85 02 28 60 20 62 21 60 64 38
>1a4008		64 3a 64 3c 64 3e 60 20 24 00 60 20 0c 1d c2 20
>1a4018		a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0 22 20 1d
>1a4028		21 20 0c 1d c2 20 a5 26 d0 35 68 85 08 68 85 0a
>1a4038		c2 20 a5 23 87 08 e2 20 a0 02 00 a5 25 97 08 60
>1a4048		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>1a4058		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08
>1a4068		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08
>1a4078		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 20 0c
>1a4088		1d c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0
>1a4098		19 20 1d 21 20 0c 1d c2 20 a5 25 d0 2c 68 85 08
>1a40a8		68 85 0a c2 20 a5 23 87 08 60 08 c2 20 48 a9 00
>1a40b8		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>1a40c8		00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08
>1a40d8		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>1a40e8		20 5e 1e e2 20 dc d4 08 20 0c 1d c2 20 a5 25 48
>1a40f8		a5 23 48 e2 20 a7 00 c9 2c d0 1f 20 1d 21 20 0c
>1a4108		1d e2 20 a5 24 d0 32 c2 20 a5 25 d0 2c 68 85 08
>1a4118		68 85 0a e2 20 a5 23 87 08 60 08 c2 20 48 a9 00
>1a4128		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>1a4138		00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08
>1a4148		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>1a4158		20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a4168		68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20
>1a4178		5e 1e e2 20 dc d4 08 08 e2 20 a7 00 f0 05 20 1d
>1a4188		21 80 f7 28 60 08 28 60 08 28 60 08 28 60 08 c2
>1a4198		20 a5 1c 20 25 1e a5 1a 20 25 1e a5 02 48 a5 00
>1a41a8		48 20 62 21 a5 02 20 25 1e a5 00 20 25 1e 68 85
>1a41b8		00 68 85 02 20 3e 21 20 20 54 b0 1f 08 c2 20 48
>1a41c8		a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00 c2 20
>1a41d8		29 ff 00 20 5e 1e e2 20 dc d4 08 e2 20 a5 ea 20
>1a41e8		3c 1e a5 e9 20 3c 1e c2 20 a5 e7 20 25 1e 20 3e
>1a41f8		21 e2 20 a7 00 c9 8a d0 6a a5 ea c9 00 f0 04 c9
>1a4208		01 f0 00 20 1d 21 20 0c 1d 20 83 53 e2 20 a9 9c
>1a4218		20 2a 22 20 0c 1d c2 20 a5 27 20 25 1e a5 25 20
>1a4228		25 1e a5 23 20 25 1e e2 20 a9 9d 85 37 20 5f 22
>1a4238		90 1b 20 1d 21 20 0c 1d e2 20 a5 27 20 25 1e c2
>1a4248		20 a5 25 20 25 1e a5 23 20 25 1e 80 14 c2 20 a9
>1a4258		00 00 20 25 1e a9 00 00 20 25 1e a9 01 00 20 25
>1a4268		1e 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a4278		02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a4288		d4 08 08 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2
>1a4298		20 48 a9 00 08 5b 68 28 c2 30 a4 33 c8 c8 c2 20
>1a42a8		b9 0c 00 85 e7 b9 0e 00 e2 20 85 e9 b9 10 00 85
>1a42b8		ea c2 20 5a 20 21 52 7a c2 20 b9 00 00 85 29 b9
>1a42c8		02 00 85 2b e2 20 b9 04 00 85 2d c2 20 5a 20 e3
>1a42d8		27 20 83 53 7a c2 20 b9 06 00 85 29 b9 08 00 85
>1a42e8		2b e2 20 b9 0a 00 85 2d c2 20 b9 02 00 30 0a 20
>1a42f8		6c 2a 20 1a 06 f0 28 80 08 20 2c 2a 20 1a 06 f0
>1a4308		1e c2 20 b9 12 00 85 00 b9 14 00 85 02 b9 16 00
>1a4318		85 1a b9 18 00 85 1c e2 20 a9 03 85 dc 80 17 a2
>1a4328		23 08 20 e9 19 c2 20 18 a5 33 69 1a 00 85 33 a5
>1a4338		35 69 00 00 85 35 ab 28 60 08 a5 1a 48 a5 1c 48
>1a4348		20 3e 21 20 d8 08 a5 23 f0 26 20 1d 24 90 42 e2
>1a4358		20 a9 02 85 dc 20 62 21 c2 20 68 20 25 1e 68 20
>1a4368		25 1e a5 02 20 25 1e a5 00 20 25 1e e6 31 28 60
>1a4378		68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a4388		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>1a4398		08 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a43a8		06 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a43b8		d4 08 08 c2 30 a5 31 f0 1e 20 47 1e 85 00 20 47
>1a43c8		1e 85 02 20 47 1e 85 1a 20 47 1e 85 1c c6 31 e2
>1a43d8		20 a9 03 85 dc 28 60 08 c2 20 48 a9 00 08 5b 68
>1a43e8		28 e2 20 a9 07 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a43f8		1e e2 20 dc d4 08 08 20 0c 1d 20 1a 06 f0 1c e2
>1a4408		20 a9 97 20 2a 22 20 d8 08 20 1a 06 f0 12 20 1d
>1a4418		24 90 2c e2 20 a9 02 85 dc 80 03 20 62 21 28 60
>1a4428		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>1a4438		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08
>1a4448		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d3 08
>1a4458		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 e2
>1a4468		20 a9 01 85 dc 28 60 08 20 3e 21 20 d8 08 a5 23
>1a4478		f0 0d 20 1d 24 90 27 e2 20 a9 02 85 dc 28 60 08
>1a4488		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a4498		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2
>1a44a8		20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d3 08 00
>1a44b8		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 20 8b 19
>1a44c8		20 ab 10 20 20 51 60 08 a7 00 10 03 20 1d 21 20
>1a44d8		20 54 b0 03 4c 46 45 e2 20 a5 ea 48 a5 e9 48 a5
>1a44e8		e8 48 a5 e7 48 20 7e 22 c9 8f d0 0e a9 8f 20 2a
>1a44f8		22 a9 00 8f 00 4d 00 20 0d 1b 20 3e 21 e2 20 a7
>1a4508		00 c9 8a f0 03 4c 46 45 20 1d 21 20 0c 1d 68 85
>1a4518		e7 68 85 e8 68 85 e9 68 85 ea 29 80 f0 1b 20 93
>1a4528		51 90 3a c2 20 a0 09 00 b7 08 85 c0 e2 20 c8 c8
>1a4538		b7 08 85 c2 20 8a 68 80 03 20 83 53 28 60 08 c2
>1a4548		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a4558		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20
>1a4568		48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00 c2
>1a4578		20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 e2 20 20
>1a4588		7e 22 c9 00 f0 6d 20 0c 1d e2 20 a5 27 c9 ff f0
>1a4598		1b c9 02 d0 05 20 00 46 80 12 c9 00 d0 05 20 1e
>1a45a8		46 80 09 c9 01 d0 4f 20 31 46 80 00 20 3e 21 a7
>1a45b8		00 f0 40 c9 3a f0 3c c9 2c f0 23 c9 3b f0 24 08
>1a45c8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a45d8		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 a9 09
>1a45e8		20 18 00 20 1d 21 20 3e 21 a7 00 f0 09 c9 3a f0
>1a45f8		05 80 93 20 d7 03 28 60 08 8b 08 c2 20 48 a9 00
>1a4608		08 5b 68 28 e2 20 a0 00 00 b7 23 f0 06 20 18 00
>1a4618		c8 80 f6 ab 28 60 08 c2 20 20 60 15 a5 16 85 23
>1a4628		a5 18 85 25 20 00 46 28 60 08 20 e9 5d c2 20 a5
>1a4638		16 85 23 a5 18 85 25 20 00 46 28 60 08 e2 20 85
>1a4648		b5 4a 4a 4a 4a 29 0f 18 69 30 97 16 c8 a5 b5 29
>1a4658		0f 18 69 30 97 16 c8 28 60 e2 20 a9 8f 20 2a 22
>1a4668		08 20 0c 1d e2 20 c2 10 af 0e 08 af 09 08 8f 0e
>1a4678		08 af 20 01 15 a0 00 00 af 06 08 af 20 44 46 a9
>1a4688		2f 97 16 c8 af 09 08 af 20 44 46 a9 2f 97 16 c8
>1a4698		af 0f 08 af 20 44 46 af 0a 08 af 20 44 46 a9 00
>1a46a8		97 16 af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5 16
>1a46b8		85 23 a5 18 85 25 e2 20 a9 02 85 27 28 e2 20 20
>1a46c8		1d 21 60 e2 20 a9 8f 20 2a 22 08 20 0c 1d e2 20
>1a46d8		c2 10 af 0e 08 af 09 08 8f 0e 08 af 20 01 15 a0
>1a46e8		00 00 af 04 08 af 29 7f 20 44 46 a9 3a 97 16 c8
>1a46f8		af 02 08 af 20 44 46 a9 3a 97 16 c8 af 00 08 af
>1a4708		20 44 46 a9 00 97 16 af 0e 08 af 29 f7 8f 0e 08
>1a4718		af c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>1a4728		27 28 e2 20 20 1d 21 60 e2 20 a9 8f 20 2a 22 08
>1a4738		20 0c 1d e2 20 a9 01 85 27 a9 03 8f 00 e2 af a9
>1a4748		01 8f 01 e2 af c2 30 af 84 e8 af 8f 08 e2 af af
>1a4758		84 e8 af 29 ff 7f 8f 0a e2 af a9 ff ff 8f 0c e2
>1a4768		af a9 ff 7f 8f 0e e2 af ea ea ea af 08 e2 af 85
>1a4778		23 af 0a e2 af 85 25 28 e2 20 20 1d 21 60 e2 20
>1a4788		a9 8f 20 2a 22 08 20 0c 1d 22 28 10 00 e2 20 85
>1a4798		23 64 24 64 25 64 26 a9 00 85 27 28 e2 20 20 1d
>1a47a8		21 60 e2 20 a9 8f 20 2a 22 08 c2 30 20 0c 1d 20
>1a47b8		e3 06 c2 20 a5 25 48 a5 23 48 20 3e 21 e2 20 a7
>1a47c8		00 c9 2c f0 03 4c 21 48 20 1d 21 20 0c 1d 20 0d
>1a47d8		07 c2 20 a5 23 48 20 3e 21 e2 20 a7 00 c9 2c f0
>1a47e8		03 4c 21 48 20 1d 21 20 0c 1d 20 0d 07 c2 20 a5
>1a47f8		23 85 8f e2 20 a5 25 85 91 c2 20 68 85 29 a9 00
>1a4808		00 85 2b 68 85 23 68 85 25 e2 20 a9 02 85 27 20
>1a4818		59 17 e2 20 20 1d 21 28 60 08 c2 20 48 a9 00 08
>1a4828		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a4838		20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a4848		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a4858		5e 1e e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 08 c2
>1a4868		30 20 0c 1d e2 20 a5 27 c9 02 f0 03 4c e3 48 c2
>1a4878		20 a5 25 48 a5 23 48 20 3e 21 e2 20 a7 00 c9 2c
>1a4888		f0 03 4c 02 49 20 1d 21 20 0c 1d e2 20 a5 27 c9
>1a4898		00 d0 48 c2 20 a5 23 85 8f c2 20 68 85 23 68 85
>1a48a8		25 e2 20 a9 02 85 27 e2 20 a0 00 00 b7 23 f0 03
>1a48b8		c8 80 f9 c2 20 98 38 e5 8f 30 09 85 29 a9 00 00
>1a48c8		85 2b 80 07 a9 00 00 85 29 85 2b e2 20 a9 00 85
>1a48d8		2d 20 59 17 e2 20 20 1d 21 28 60 08 c2 20 48 a9
>1a48e8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a48f8		ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00
>1a4908		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>1a4918		00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08
>1a4928		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>1a4938		20 5e 1e e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 08
>1a4948		c2 30 20 0c 1d e2 20 a5 27 c9 02 f0 03 4c ac 49
>1a4958		c2 20 a5 25 48 a5 23 48 20 3e 21 e2 20 a7 00 c9
>1a4968		2c f0 03 4c cb 49 20 1d 21 20 0c 1d e2 20 a5 27
>1a4978		c9 00 d0 30 c2 20 a5 23 85 8f c2 20 a9 00 00 85
>1a4988		29 a9 00 00 85 2b e2 20 a9 00 85 2d c2 20 68 85
>1a4998		23 68 85 25 e2 20 a9 02 85 27 20 59 17 e2 20 20
>1a49a8		1d 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a49b8		a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>1a49c8		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a49d8		02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a49e8		d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>1a49f8		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>1a4a08		08 e2 20 a9 8f 20 2a 22 20 0c 1d c2 10 e2 20 a5
>1a4a18		27 c9 02 d0 23 c2 20 a5 00 85 40 a5 02 85 42 a5
>1a4a28		23 85 00 a5 25 85 02 20 d8 08 a5 40 85 00 a5 42
>1a4a38		85 02 e2 20 20 1d 21 60 08 c2 20 48 a9 00 08 5b
>1a4a48		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>1a4a58		5e 1e e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 08 20
>1a4a68		0c 1d c2 10 e2 20 a5 27 c9 00 d0 1a 20 60 15 c2
>1a4a78		20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28
>1a4a88		e2 20 20 1d 21 60 08 c2 20 48 a9 00 08 5b 68 28
>1a4a98		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a4aa8		e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 08 20 0c 1d
>1a4ab8		20 e3 06 c2 20 64 0c 64 0e e2 30 a0 00 b7 23 c9
>1a4ac8		20 f0 04 c9 24 d0 03 c8 80 f3 b7 23 20 0c 05 90
>1a4ad8		1e c2 20 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e 06
>1a4ae8		0c 26 0e e2 20 20 2d 05 05 0c 85 0c c8 80 db c2
>1a4af8		20 a5 0c 85 23 a5 0e 85 25 e2 20 a9 00 85 27 28
>1a4b08		e2 20 20 1d 21 60 e2 20 a9 8f 20 2a 22 08 20 0c
>1a4b18		1d 20 51 06 20 01 15 e2 30 a0 ff a9 00 97 16 88
>1a4b28		a5 23 29 0f aa bf 00 d0 1a 97 16 88 a5 23 29 f0
>1a4b38		4a 4a 4a 4a aa bf 00 d0 1a 97 16 88 a5 24 85 23
>1a4b48		a5 25 85 24 a5 26 85 25 a9 00 85 26 a5 23 d0 d0
>1a4b58		a5 24 d0 cc a5 25 d0 c8 98 38 65 16 85 23 a5 17
>1a4b68		85 24 a5 18 85 25 a5 19 85 26 a9 02 85 27 28 e2
>1a4b78		20 20 1d 21 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4b88		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>1a4b98		20 dc d4 08 e2 20 a9 8f 20 2a 22 20 0c 1d e2 20
>1a4ba8		a5 27 c9 02 d0 1f 8b a5 25 48 ab c2 10 a6 23 20
>1a4bb8		ed 15 ab 84 23 c2 20 64 25 e2 20 a9 00 85 27 e2
>1a4bc8		20 20 1d 21 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4bd8		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>1a4be8		20 dc d4 08 e2 20 a9 8f 20 2a 22 20 0c 1d 20 51
>1a4bf8		06 e2 20 a5 25 c9 b0 90 10 c9 f0 b0 0c 8b 48 ab
>1a4c08		a6 23 22 44 11 00 ab 80 04 e2 20 a7 23 85 23 64
>1a4c18		24 64 25 64 26 e2 20 20 1d 21 60 08 c2 20 48 a9
>1a4c28		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a4c38		ff 00 20 5e 1e e2 20 dc d4 08 e2 20 a9 8f 20 2a
>1a4c48		22 20 0c 1d 20 51 06 e2 20 a5 25 c9 b0 90 22 c9
>1a4c58		f0 b0 1e 8b 48 ab a6 23 da 22 44 11 00 85 0c fa
>1a4c68		e8 da 22 44 11 00 85 0d fa e8 22 44 11 00 ab 80
>1a4c78		0d c2 20 a7 23 85 0c e2 20 a0 02 00 b7 23 85 25
>1a4c88		64 26 c2 20 a5 0c 85 23 e2 20 20 1d 21 60 08 c2
>1a4c98		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a4ca8		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 e2 20 a9
>1a4cb8		8f 20 2a 22 20 0c 1d 20 51 06 e2 20 a5 25 c9 b0
>1a4cc8		90 1d c9 f0 b0 19 8b 48 ab a6 23 da 22 44 11 00
>1a4cd8		85 23 fa e8 22 44 11 00 85 24 ab c2 20 80 06 c2
>1a4ce8		20 a7 23 85 23 64 25 e2 20 20 1d 21 60 08 c2 20
>1a4cf8		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a4d08		20 29 ff 00 20 5e 1e e2 20 dc d4 08 e2 20 a9 8f
>1a4d18		20 2a 22 20 0c 1d e2 20 a5 27 c9 00 d0 24 20 01
>1a4d28		15 a5 23 87 16 a9 00 a0 01 00 97 16 c2 20 a5 16
>1a4d38		85 23 a5 18 85 25 e2 20 a9 02 85 27 e2 20 20 1d
>1a4d48		21 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>1a4d58		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>1a4d68		08 e2 20 a9 8f 20 2a 22 20 0c 1d e2 20 a5 27 c9
>1a4d78		02 d0 14 a7 23 85 23 64 24 64 25 64 26 a9 00 85
>1a4d88		27 e2 20 20 1d 21 60 08 c2 20 48 a9 00 08 5b 68
>1a4d98		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a4da8		1e e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 20 0c 1d
>1a4db8		e2 20 a5 27 c9 00 d0 39 e2 20 a5 26 d0 52 a5 25
>1a4dc8		d0 4e a5 24 d0 4a c2 10 20 01 15 a4 23 e2 20 a9
>1a4dd8		00 97 16 88 30 07 a9 20 97 16 88 10 fb a9 02 85
>1a4de8		27 c2 20 a5 16 85 23 a5 18 85 25 e2 20 20 1d 21
>1a4df8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>1a4e08		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a4e18		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>1a4e28		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 e2
>1a4e38		20 a9 8f 20 2a 22 20 0c 1d e2 20 a5 27 c9 00 d0
>1a4e48		39 e2 20 a5 26 d0 52 a5 25 d0 4e a5 24 d0 4a c2
>1a4e58		10 20 01 15 a4 23 e2 20 a9 00 97 16 88 30 07 a9
>1a4e68		09 97 16 88 10 fb a9 02 85 27 c2 20 a5 16 85 23
>1a4e78		a5 18 85 25 e2 20 20 1d 21 60 08 c2 20 48 a9 00
>1a4e88		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a4e98		00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08
>1a4ea8		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>1a4eb8		20 5e 1e e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 20
>1a4ec8		0c 1d e2 20 a5 27 c9 00 f0 23 c9 01 f0 3e 08 c2
>1a4ed8		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a4ee8		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 c2 20 a5
>1a4ef8		25 10 21 49 ff ff 85 25 a5 23 49 ff ff 18 69 01
>1a4f08		00 85 23 a5 25 69 00 00 85 25 80 08 e2 20 a5 26
>1a4f18		29 7f 85 26 e2 20 20 1d 21 60 e2 20 a9 8f 20 2a
>1a4f28		22 20 0c 1d e2 20 a5 27 c9 00 d0 25 c2 20 a5 25
>1a4f38		30 12 d0 04 a5 23 f0 13 a9 00 00 85 25 a9 01 00
>1a4f48		85 23 80 07 a9 ff ff 85 25 85 23 e2 20 20 1d 21
>1a4f58		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>1a4f68		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a4f78		e2 20 a9 8f 20 2a 22 20 0c 1d 20 51 06 e2 20 20
>1a4f88		1d 21 60 e2 20 a9 8f 20 2a 22 20 0c 1d 20 bf 07
>1a4f98		20 49 62 e2 20 20 1d 21 60 e2 20 a9 8f 20 2a 22
>1a4fa8		20 0c 1d 20 bf 07 20 78 62 e2 20 20 1d 21 60 e2
>1a4fb8		20 a9 8f 20 2a 22 20 0c 1d 20 bf 07 20 a7 62 e2
>1a4fc8		20 20 1d 21 60 e2 20 a9 8f 20 2a 22 20 0c 1d 20
>1a4fd8		bf 07 20 d5 62 e2 20 20 1d 21 60 e2 20 a9 8f 20
>1a4fe8		2a 22 20 0c 1d 20 bf 07 20 fe 63 e2 20 20 1d 21
>1a4ff8		60 e2 20 a9 8f 20 2a 22 20 0c 1d 20 bf 07 20 d4
>1a5008		63 e2 20 20 1d 21 60 e2 20 a9 8f 20 2a 22 20 0c
>1a5018		1d 20 bf 07 20 20 64 e2 20 20 1d 21 60 e2 20 a9
>1a5028		8f 20 2a 22 20 0c 1d 20 bf 07 20 b4 64 e2 20 20
>1a5038		1d 21 60 e2 20 a9 8f 20 2a 22 20 0c 1d 20 bf 07
>1a5048		20 36 65 e2 20 20 1d 21 60 00 ea 60 08 0b 08 c2
>1a5058		20 48 a9 00 08 5b 68 28 c2 30 c2 20 a9 00 00 85
>1a5068		d9 e2 20 a9 16 85 db c2 30 a9 00 00 a0 00 00 97
>1a5078		d9 a0 02 00 97 d9 a0 04 00 97 d9 20 f3 20 2b 28
>1a5088		60 8b 08 c2 20 a9 00 00 85 1a a9 16 00 85 1c 20
>1a5098		f3 20 20 d3 23 28 ab 60 08 c2 20 64 55 a9 ff 7f
>1a50a8		85 59 20 d7 03 20 7e 22 29 ff 00 c9 00 00 f0 2c
>1a50b8		c9 81 00 f0 1a 20 3e 21 20 d8 08 a5 23 85 55 20
>1a50c8		7e 22 29 ff 00 c9 00 00 f0 12 c9 81 00 d0 2a 20
>1a50d8		2a 22 20 3e 21 20 d8 08 a5 23 85 59 a5 1c 48 a5
>1a50e8		1a 48 a5 02 48 a5 00 48 20 8b 18 68 85 00 68 85
>1a50f8		02 68 85 1a 68 85 1c 28 60 08 c2 20 48 a9 00 08
>1a5108		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a5118		20 5e 1e e2 20 dc d4 08 08 08 c2 20 48 a9 00 08
>1a5128		5b 68 28 c2 20 64 e4 64 e7 e2 20 64 e6 64 e9 64
>1a5138		ea c2 20 38 a5 d9 69 04 00 85 e1 e2 20 a5 db 69
>1a5148		00 85 e3 28 60 c9 5f f0 1a c9 3a b0 04 c9 30 b0
>1a5158		12 c9 5b b0 04 c9 41 b0 0a c9 7b b0 04 c9 61 b0
>1a5168		02 18 60 38 60 08 e2 20 c2 10 a0 00 00 b7 0c f0
>1a5178		0a d7 e7 d0 13 c8 c0 08 00 d0 f2 b7 e7 20 56 05
>1a5188		20 4d 51 b0 03 28 38 60 28 18 60 08 e2 20 c2 10
>1a5198		a0 00 00 a2 00 00 b7 e7 f0 0b 20 56 05 9f 00 4e
>1a51a8		00 c8 e8 80 f1 a9 00 9f 00 4e 00 c2 20 a9 00 4e
>1a51b8		85 e7 e2 20 a9 00 85 e9 c2 20 a5 e4 85 08 d0 06
>1a51c8		e2 20 a5 e6 f0 4d e2 20 a5 e6 85 0a a5 ea a0 00
>1a51d8		00 d7 08 d0 17 c2 20 18 a5 08 69 01 00 85 0c e2
>1a51e8		20 a5 0a 69 00 85 0e 20 6d 51 b0 2a a0 0d 00 c2
>1a51f8		20 b7 08 85 0c c8 c8 e2 20 b7 08 85 0e d0 06 c2
>1a5208		20 a5 0c f0 0e c2 20 a5 0c 85 08 e2 20 a5 0e 85
>1a5218		0a 80 b9 28 18 60 28 38 60 08 20 93 51 b0 1f 08
>1a5228		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08
>1a5238		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 c2 30
>1a5248		a0 09 00 b7 08 85 23 c8 c8 b7 08 85 25 e2 20 a0
>1a5258		00 00 b7 08 85 27 28 60 08 c2 20 18 a5 e1 69 10
>1a5268		00 85 08 e2 20 a5 e3 69 00 85 0a c5 bc 90 27 c2
>1a5278		20 a5 08 c5 ba 90 1f 08 c2 20 48 a9 00 08 5b 68
>1a5288		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a5298		1e e2 20 dc d4 08 c2 20 a5 e1 85 c0 e2 20 a5 e3
>1a52a8		85 c2 c2 20 a5 08 85 e1 e2 20 a5 0a 85 e3 28 60
>1a52b8		08 e2 20 a5 27 c5 ea f0 33 a5 ea c9 00 d0 05 20
>1a52c8		51 06 80 2f c9 01 d0 05 20 bf 07 80 26 08 c2 20
>1a52d8		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a52e8		20 29 ff 00 20 5e 1e e2 20 dc d4 08 c9 02 d0 03
>1a52f8		20 f3 16 c2 10 20 60 52 c2 30 18 a5 c0 69 01 00
>1a5308		85 08 e2 20 a5 c2 69 00 85 0a a0 00 00 a9 00 97
>1a5318		08 c8 c0 08 00 d0 f8 a0 00 00 b7 e7 f0 10 20 56
>1a5328		05 20 4d 51 90 08 97 08 c8 c0 08 00 d0 ec c2 20
>1a5338		a0 09 00 a5 23 97 c0 a5 25 c8 c8 97 c0 a5 e4 a0
>1a5348		0d 00 97 c0 c8 c8 e2 20 a5 e6 97 c0 c2 20 a5 c0
>1a5358		85 e4 e2 20 a5 c2 85 e6 e2 20 a0 00 00 a5 27 97
>1a5368		c0 c9 02 f0 02 28 60 c2 20 a5 23 85 c0 e2 20 a5
>1a5378		25 85 c2 20 0f 13 20 24 13 80 ea 08 c2 30 a5 e4
>1a5388		d0 06 e2 20 a5 e6 f0 05 20 93 51 b0 05 20 b8 52
>1a5398		80 4e e2 20 a5 27 c5 ea f0 33 a5 ea c9 00 d0 05
>1a53a8		20 51 06 80 2c c9 01 d0 05 20 bf 07 80 23 08 c2
>1a53b8		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a53c8		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 c9 02 f0
>1a53d8		11 c2 30 a0 09 00 a5 23 97 08 c8 c8 a5 25 97 08
>1a53e8		28 60 20 f3 16 a0 09 00 b7 08 85 c0 c8 c8 e2 20
>1a53f8		b7 08 85 c2 20 0f 13 20 43 13 e2 20 a5 27 c9 02
>1a5408		f0 02 80 cd c2 20 a5 23 85 c0 e2 20 a5 25 85 c2
>1a5418		20 0f 13 20 24 13 80 b9 08 20 3e 21 e2 20 a7 00
>1a5428		20 e2 04 90 42 c2 20 a5 00 85 e7 e2 20 a5 02 85
>1a5438		e9 20 1d 21 a7 00 f0 0d c9 24 f0 14 c9 25 f0 09
>1a5448		20 4d 51 b0 ec a9 01 80 0c 20 1d 21 a9 00 80 05
>1a5458		20 1d 21 a9 02 85 ea 20 7e 22 c9 8f d0 06 a5 ea
>1a5468		09 80 85 ea 28 38 60 28 18 60 08 c2 20 18 a5 23
>1a5478		65 29 85 23 a5 25 65 2b 85 25 28 60 08 c2 20 38
>1a5488		a5 23 e5 29 85 23 a5 25 e5 2b 85 25 28 60 08 c2
>1a5498		20 3b 38 e9 0a 00 1b c2 30 a9 00 00 83 01 83 03
>1a54a8		83 05 83 07 83 09 a5 25 10 18 a9 00 80 83 01 a5
>1a54b8		25 49 ff ff 85 25 a5 23 49 ff ff 1a 85 23 d0 02
>1a54c8		e6 25 a5 2b 10 1a a3 01 49 00 80 83 01 a5 2b 49
>1a54d8		ff ff 85 2b a5 29 49 ff ff 1a 85 29 d0 02 e6 2b
>1a54e8		a5 25 f0 04 a5 2b d0 5a a5 23 8f 00 01 00 a5 29
>1a54f8		8f 02 01 00 af 04 01 00 83 03 af 06 01 00 83 05
>1a5508		a5 25 8f 00 01 00 a5 29 8f 02 01 00 18 af 04 01
>1a5518		00 63 05 83 05 af 06 01 00 63 07 83 07 a5 23 8f
>1a5528		00 01 00 a5 2b 8f 02 01 00 18 af 04 01 00 63 05
>1a5538		83 05 af 06 01 00 63 07 83 07 a3 07 f0 23 a3 09
>1a5548		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0d
>1a5558		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>1a5568		08 c2 30 a3 01 10 16 a3 05 49 ff ff 83 05 a3 03
>1a5578		49 ff ff 1a 83 03 d0 05 a3 05 1a 83 05 a3 03 85
>1a5588		23 a3 05 85 25 c2 20 3b 18 69 0a 00 1b 28 60 08
>1a5598		c2 20 a5 23 c5 29 a5 25 e5 2b 50 03 49 00 80 30
>1a55a8		06 64 23 64 25 80 07 a9 ff ff 85 23 85 25 28 60
>1a55b8		08 c2 20 a5 23 c5 29 d0 0c a5 25 c5 2b d0 06 64
>1a55c8		23 64 25 80 16 a5 29 c5 23 a5 2b e5 25 50 03 49
>1a55d8		00 80 10 eb a9 ff ff 85 23 85 25 28 60 08 c2 20
>1a55e8		a5 2b c5 25 d0 0f a5 29 c5 23 d0 09 a9 ff ff 85
>1a55f8		23 85 25 80 04 64 23 64 25 28 60 08 c2 20 a5 2b
>1a5608		c5 25 d0 0c a5 29 c5 23 d0 06 64 23 64 25 80 07
>1a5618		a9 ff ff 85 23 85 25 28 60 08 c2 20 a5 23 c5 29
>1a5628		d0 0f a5 25 c5 2b d0 09 a9 ff ff 85 23 85 25 80
>1a5638		13 a5 29 c5 23 a5 2b e5 25 50 03 49 00 80 30 e8
>1a5648		64 23 64 25 28 60 08 c2 20 a5 23 c5 29 d0 0f a5
>1a5658		25 c5 2b d0 09 a9 ff ff 85 23 85 25 80 13 a5 23
>1a5668		c5 29 a5 25 e5 2b 50 03 49 00 80 30 e8 64 23 64
>1a5678		25 28 60 08 c2 20 8f 12 01 00 8a 8f 10 01 00 af
>1a5688		16 01 00 aa af 14 01 00 28 60 08 e2 20 a9 03 8f
>1a5698		00 e2 af a9 00 8f 01 e2 af c2 20 a5 23 8f 08 e2
>1a56a8		af a5 25 8f 0a e2 af a9 00 00 8f 0c e2 af a9 00
>1a56b8		01 8f 0e e2 af ea ea ea ea ea ea af 08 e2 af 85
>1a56c8		23 af 0a e2 af 85 25 a9 01 00 85 27 28 60 08 e2
>1a56d8		20 a9 40 8f 00 e2 af 80 09 08 e2 20 a9 48 8f 00
>1a56e8		e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f 08 e2 af
>1a56f8		a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e
>1a5708		e2 af ea ea ea e2 20 af 06 e2 af 29 07 d0 10 c2
>1a5718		20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60 20
>1a5728		c2 57 80 f9 08 e2 20 a9 01 8f 01 e2 af a9 00 8f
>1a5738		00 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2
>1a5748		af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af ea ea ea
>1a5758		e2 20 af 05 e2 af 29 17 d0 10 c2 20 af 08 e2 af
>1a5768		85 23 af 0a e2 af 85 25 28 60 20 c2 57 80 f9 08
>1a5778		e2 20 a9 00 8f 01 e2 af a9 00 8f 00 e2 af c2 20
>1a5788		a5 23 8f 08 e2 af a5 25 8f 0a e2 af a5 29 8f 0c
>1a5798		e2 af a5 2b 8f 0e e2 af ea ea ea e2 20 af 04 e2
>1a57a8		af 29 07 d0 10 c2 20 af 08 e2 af 85 23 af 0a e2
>1a57b8		af 85 25 28 60 20 c2 57 80 f9 e2 20 89 01 f0 20
>1a57c8		00 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0c 8f
>1a57d8		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a57e8		89 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a57f8		a9 0d 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>1a5808		dc d4 08 89 04 f0 1f 08 c2 20 48 a9 00 08 5b 68
>1a5818		28 e2 20 a9 0e 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a5828		1e e2 20 dc d4 08 60 08 e2 20 a9 00 8f 01 e2 af
>1a5838		a9 02 8f 00 e2 af c2 20 a9 00 a0 8f 0c e2 af a9
>1a5848		00 00 8f 0e e2 af a5 23 8f 08 e2 af a5 25 8f 0a
>1a5858		e2 af ea ea ea e2 20 af 04 e2 af 89 07 f0 01 00
>1a5868		c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60
>1a5878		08 e2 20 a9 01 8f 01 e2 af a9 02 8f 00 e2 af c2
>1a5888		20 a9 00 a0 8f 0c e2 af a9 00 00 8f 0e e2 af a5
>1a5898		23 8f 08 e2 af a5 25 8f 0a e2 af ea ea ea af 08
>1a58a8		e2 af 85 23 af 0a e2 af 85 25 28 60 08 c2 20 a5
>1a58b8		23 d0 0a a5 25 29 ff 7f d0 03 28 38 60 28 18 60
>1a58c8		08 e2 20 38 e9 30 20 7a 05 c2 20 29 ff 00 18 65
>1a58d8		23 85 23 a5 25 69 00 00 85 25 28 60 08 e2 20 c9
>1a58e8		30 90 04 c9 3a 90 1c c9 61 90 04 c9 67 90 0a c9
>1a58f8		41 90 04 c9 47 90 07 80 31 38 e9 57 80 08 38 e9
>1a5908		37 80 03 38 e9 30 06 23 26 24 26 25 26 26 06 23
>1a5918		26 24 26 25 26 26 06 23 26 24 26 25 26 26 06 23
>1a5928		26 24 26 25 26 26 05 23 85 23 28 60 08 e2 20 c9
>1a5938		30 f0 06 c9 31 f0 0a 80 0f c2 20 06 23 26 25 80
>1a5948		07 c2 20 38 26 23 26 25 28 60 08 e2 30 a5 61 f0
>1a5958		0d aa a5 69 d0 15 a9 00 8f 01 e2 af 80 15 e2 20
>1a5968		a9 03 8f 01 e2 af ea ea ea 80 62 e2 20 a9 01 8f
>1a5978		01 e2 af e2 20 a9 43 8f 00 e2 af c2 20 a9 00 10
>1a5988		8f 08 e2 af a9 00 00 8f 0a e2 af c2 20 a9 00 a0
>1a5998		8f 0c e2 af a9 00 00 8f 0e e2 af ea ea ea ca f0
>1a59a8		2c af 08 e2 af 8f 0c 08 00 af 0a e2 af 8f 0e 08
>1a59b8		00 e2 20 a9 42 8f 00 e2 af c2 20 af 0c 08 00 8f
>1a59c8		08 e2 af af 0e 08 00 8f 0a e2 af 80 be c2 20 af
>1a59d8		08 e2 af 85 23 af 0a e2 af 85 25 e2 20 a9 01 85
>1a59e8		27 28 60 08 c2 20 a5 5d 85 23 a5 5f 85 25 20 04
>1a59f8		5c c2 20 a5 23 85 29 a5 25 85 2b c2 20 a5 59 85
>1a5a08		23 a5 5b 85 25 20 2c 57 c2 20 a5 55 85 29 a5 57
>1a5a18		85 2b 20 e1 56 c2 20 a5 23 85 29 a5 25 85 2b 20
>1a5a28		52 59 20 77 57 c2 20 a5 65 f0 07 a5 25 09 00 80
>1a5a38		85 25 e2 20 a9 01 85 27 28 60 5a 08 c2 30 64 23
>1a5a48		64 25 64 55 64 57 64 65 64 59 64 5b a9 01 00 85
>1a5a58		5d 64 5f 64 61 64 63 64 69 e2 20 a0 00 00 b7 00
>1a5a68		c9 2b f0 33 c9 2d f0 2b c9 26 f0 3a 20 fb 04 90
>1a5a78		03 82 ac 00 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a5a88		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>1a5a98		dc d4 08 a9 01 85 65 c8 b7 00 c9 26 f0 08 20 fb
>1a5aa8		04 90 d1 82 7a 00 c8 b7 00 c9 68 f0 0e c9 48 f0
>1a5ab8		0a c9 62 f0 4c c9 42 f0 48 80 b9 c8 b7 00 20 0c
>1a5ac8		05 b0 02 80 af 20 e4 58 c8 b7 00 20 0c 05 b0 f5
>1a5ad8		e2 20 a5 65 f0 11 c2 20 38 a9 00 00 e5 23 85 23
>1a5ae8		a9 00 00 e5 25 85 25 e2 20 a9 00 85 27 c2 20 18
>1a5af8		98 65 00 85 00 a5 02 69 00 00 85 02 e2 20 28 7a
>1a5b08		60 c8 b7 00 c9 30 f0 07 c9 31 f0 03 82 65 ff 20
>1a5b18		34 59 c8 b7 00 c9 30 f0 f6 c9 31 f0 f2 82 b0 ff
>1a5b28		20 c8 58 c8 b7 00 c9 2e f0 08 20 fb 04 b0 f1 82
>1a5b38		9e ff c2 20 20 04 5c c2 20 a5 23 85 55 a5 25 85
>1a5b48		57 64 23 64 25 e2 20 80 36 20 c8 58 c2 20 a5 5f
>1a5b58		8f 00 01 00 a9 0a 00 8f 02 01 00 af 04 01 00 85
>1a5b68		5f a5 5d 8f 00 01 00 a9 0a 00 8f 02 01 00 af 04
>1a5b78		01 00 85 5d af 06 01 00 18 65 5f 85 5f e2 20 c8
>1a5b88		b7 00 c9 65 f0 24 c9 45 f0 20 20 fb 04 b0 ba c2
>1a5b98		20 20 04 5c c2 20 a5 23 85 59 a5 25 85 5b 64 23
>1a5ba8		64 25 20 eb 59 e2 20 82 43 ff c2 20 20 04 5c c2
>1a5bb8		20 a5 23 85 59 a5 25 85 5b 64 23 64 25 e2 20 c8
>1a5bc8		b7 00 c9 2b f0 10 c9 2d f0 08 20 fb 04 b0 12 82
>1a5bd8		a2 fe a9 01 85 69 c8 b7 00 20 fb 04 b0 03 82 93
>1a5be8		fe 20 c8 58 c8 b7 00 20 fb 04 b0 f5 c2 20 a5 23
>1a5bf8		85 61 a5 25 85 63 20 eb 59 82 f1 fe 08 20 92 56
>1a5c08		28 60 08 c2 20 a9 01 5f 85 29 a9 1a 00 85 2b e2
>1a5c18		20 a9 01 85 2d c2 20 20 dd 5c c9 ff ff d0 0c a9
>1a5c28		00 00 8d 23 08 8d 25 08 82 a1 00 f4 00 00 f4 00
>1a5c38		00 f4 00 00 e2 20 ad 26 08 29 80 83 01 ad 25 08
>1a5c48		2a ad 26 08 2a 83 02 a9 00 83 06 ad 25 08 09 80
>1a5c58		83 05 ad 24 08 83 04 ad 23 08 83 03 a3 02 c9 96
>1a5c68		f0 3a 90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a5c78		a9 0d 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>1a5c88		dc d4 08 c2 20 a3 05 4a 83 05 a3 03 6a 83 03 e2
>1a5c98		20 a3 02 1a 83 02 c9 96 f0 02 80 e7 a3 01 f0 1b
>1a5ca8		c2 20 a3 03 49 ff ff 18 69 01 00 8d 23 08 a3 05
>1a5cb8		49 ff ff 69 00 00 8d 25 08 80 0c c2 20 a3 03 8d
>1a5cc8		23 08 a3 05 8d 25 08 c2 20 68 68 68 e2 20 a9 00
>1a5cd8		8d 27 08 28 60 da 08 c2 20 a5 25 48 a5 23 48 20
>1a5ce8		d6 56 20 b4 58 b0 11 a5 25 89 00 80 d0 05 a9 01
>1a5cf8		00 80 08 a9 ff ff 80 03 a9 00 00 fa 86 23 fa 86
>1a5d08		25 28 fa 60 08 c2 30 20 dd 5c c9 ff ff d0 05 20
>1a5d18		2d 06 80 03 20 3f 06 28 60 08 c2 30 20 dd 5c c9
>1a5d28		01 00 d0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2
>1a5d38		30 20 dd 5c c9 00 00 d0 05 20 2d 06 80 03 20 3f
>1a5d48		06 28 60 08 c2 30 20 dd 5c c9 01 00 f0 05 20 2d
>1a5d58		06 80 03 20 3f 06 28 60 08 c2 30 20 dd 5c c9 ff
>1a5d68		ff f0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2 30
>1a5d78		20 dd 5c c9 00 00 f0 05 20 2d 06 80 03 20 3f 06
>1a5d88		28 60 08 e2 20 97 23 c8 a9 00 97 23 28 60 da 08
>1a5d98		e2 20 c9 80 90 0a 48 a9 2d 20 8a 5d 68 49 ff 1a
>1a5da8		c2 30 29 ff 00 c9 64 00 90 0e a2 64 00 20 7b 56
>1a5db8		18 69 30 00 20 8a 5d 8a a2 0a 00 20 7b 56 18 69
>1a5dc8		30 00 20 8a 5d 8a 18 69 30 00 20 8a 5d 28 fa 60
>1a5dd8		08 e2 20 c2 10 a0 00 00 b7 23 f0 03 c8 80 f9 28
>1a5de8		60 08 e2 20 c2 10 f4 00 00 f4 00 00 f4 00 00 20
>1a5df8		b4 58 90 19 20 01 15 e2 20 a0 00 00 a9 20 97 16
>1a5e08		c8 a9 30 97 16 c8 a9 00 97 16 82 ce 00 e2 20 a5
>1a5e18		26 10 08 29 7f 85 26 a9 01 83 01 c2 20 a9 00 00
>1a5e28		83 03 c2 20 af fd 5e 1a 85 29 af ff 5e 1a 85 2b
>1a5e38		20 dd 5c 89 00 80 d0 12 20 78 58 a3 03 1a 83 03
>1a5e48		20 dd 5c c9 ff ff f0 12 80 ee 20 2f 58 a3 03 3a
>1a5e58		83 03 20 dd 5c c9 ff ff f0 f0 e2 30 a5 25 0a a5
>1a5e68		26 2a 83 05 38 a9 96 e3 05 aa f0 0f a5 25 09 80
>1a5e78		85 25 46 25 66 24 66 23 ca d0 f7 c2 10 e2 20 64
>1a5e88		26 a9 00 85 27 a3 01 f0 11 c2 20 38 a9 00 00 e5
>1a5e98		23 85 23 a9 00 00 e5 25 85 25 20 60 15 c2 20 a5
>1a5ea8		16 85 23 a5 18 85 25 20 d8 5d e2 20 c8 a9 00 97
>1a5eb8		23 88 88 b7 23 c8 97 23 c0 02 00 d0 f4 a9 2e 97
>1a5ec8		23 e2 20 18 a3 03 69 05 83 06 f0 19 20 d8 5d a9
>1a5ed8		45 20 8a 5d a3 06 20 96 5d 80 0a c2 20 a5 16 85
>1a5ee8		23 a5 18 85 25 e2 20 a9 02 85 27 c2 20 3b 18 69
>1a5ef8		06 00 1b 28 60 00 50 c3 47 00 00 80 3f f3 04 b5
>1a5f08		3f f3 04 35 3f e2 20 a9 48 8f 00 e2 af c2 20 bd
>1a5f18		00 00 8f 08 e2 af bd 02 00 8f 0a e2 af 88 e8 e8
>1a5f28		e8 e8 e2 20 a9 00 8f 01 e2 af c2 20 af 23 08 00
>1a5f38		8f 0c e2 af af 25 08 00 8f 0e e2 af ea ea ea af
>1a5f48		08 e2 af 48 af 0a e2 af 8f 0a e2 af 68 8f 08 e2
>1a5f58		af e2 20 a9 02 8f 01 e2 af c2 20 bd 00 00 8f 0c
>1a5f68		e2 af bd 02 00 8f 0e e2 af ea ea ea 88 f0 14 af
>1a5f78		08 e2 af 48 af 0a e2 af 8f 0a e2 af 68 8f 08 e2
>1a5f88		af 80 9b af 08 e2 af 8f 23 08 00 af 0a e2 af 8f
>1a5f98		25 08 00 60 e2 20 a9 00 8f 00 e2 af a9 00 8f 01
>1a5fa8		e2 af c2 20 a5 23 8f 08 e2 af 8f 0c e2 af af 25
>1a5fb8		08 00 8f 0a e2 af 8f 0e e2 af ea ea ea af 08 e2
>1a5fc8		af 85 23 af 0a e2 af 85 25 60 e2 20 a9 00 8f 00
>1a5fd8		e2 af a9 01 8f 01 e2 af c2 20 a5 23 8f 0c e2 af
>1a5fe8		af 25 08 00 8f 0e e2 af af 26 66 1a 8f 08 e2 af
>1a5ff8		af 28 66 1a 8f 0a e2 af ea ea ea af 08 e2 af 85
>1a6008		23 af 0a e2 af 85 25 60 a2 00 00 a5 23 c5 29 a5
>1a6018		25 e5 2b 90 1e a5 23 8f 08 e2 af a5 25 8f 0a e2
>1a6028		af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25
>1a6038		e8 80 d8 60 e2 20 a5 26 10 09 29 7f 85 26 a9 01
>1a6048		48 80 03 a9 00 48 a9 40 8f 00 e2 af a9 02 8f 01
>1a6058		e2 af c2 30 af 8e 66 1a 85 29 8f 0c e2 af af 90
>1a6068		66 1a 85 2b 8f 0e e2 af 20 10 60 e2 20 68 c2 20
>1a6078		f0 1e a5 23 8f 08 e2 af a5 25 8f 0a e2 af ea ea
>1a6088		ea af 08 e2 af 85 23 af 0a e2 af 29 ff 7f 85 25
>1a6098		60 5a a2 00 00 a0 00 00 a5 23 df 92 66 1a a5 25
>1a60a8		ff 94 66 1a 90 2c bf 8e 66 1a 8f 08 e2 af bf 90
>1a60b8		66 1a 8f 0a e2 af a5 23 8f 0c e2 af a5 25 8f 0e
>1a60c8		e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85
>1a60d8		25 38 98 2a a8 e8 e8 e8 e8 e0 0c 00 d0 ba 98 aa
>1a60e8		7a 60 08 c2 30 48 da 20 9c 5f 8b e2 20 a9 1a 48
>1a60f8		ab c2 20 a2 ce 65 5a a0 05 00 20 0d 5f 7a a9 01
>1a6108		00 8f 27 08 00 ab fa 68 28 60 08 c2 30 48 da a5
>1a6118		23 85 29 a5 25 85 2b 20 9c 5f 8b e2 20 a9 1a 48
>1a6128		ab c2 20 a2 e2 65 5a a0 05 00 20 0d 5f 7a ab 20
>1a6138		77 57 fa 68 28 60 08 c2 30 48 da a5 23 85 29 a5
>1a6148		25 85 2b 20 9c 5f 8b e2 20 a9 1a 48 ab c2 20 a2
>1a6158		f6 65 5a a0 05 00 20 0d 5f 7a ab 20 77 57 fa 68
>1a6168		28 60 08 c2 30 48 da e2 20 a9 40 8f 00 e2 af a9
>1a6178		02 8f 01 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f
>1a6188		0a e2 af af 26 66 1a 8f 0c e2 af af 28 66 1a 8f
>1a6198		0e e2 af ea ea ea af 08 e2 af 85 0c af 0a e2 af
>1a61a8		85 0e e2 20 a9 48 8f 00 e2 af c2 20 ea ea ea af
>1a61b8		08 e2 af 85 10 af 0a e2 af 85 12 e2 20 a9 01 8f
>1a61c8		01 e2 af c2 20 a5 0c 8f 08 e2 af a5 0e 8f 0a e2
>1a61d8		af a5 10 8f 0c e2 af a5 12 8f 0e e2 af ea ea ea
>1a61e8		af 08 e2 af 85 23 af 0a e2 af 85 25 e2 20 a9 08
>1a61f8		8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f 08
>1a6208		e2 af a5 25 8f 0a e2 af ea ea ea af 08 e2 af 85
>1a6218		29 af 0a e2 af 85 2b 20 9c 5f 8b e2 20 a9 1a 48
>1a6228		ab c2 20 a2 0a 66 5a a0 08 00 20 0d 5f 7a a9 01
>1a6238		00 8f 27 08 00 8f 2d 08 00 20 77 57 ab fa 68 28
>1a6248		60 08 c2 30 48 da 20 3c 60 20 99 60 da 8a 29 01
>1a6258		00 d0 05 20 12 61 80 03 20 ea 60 fa 8a 29 04 00
>1a6268		f0 0a e2 20 a5 26 09 80 85 26 c2 20 fa 68 28 60
>1a6278		08 c2 30 48 da 20 3c 60 20 99 60 da 8a 29 01 00
>1a6288		d0 05 20 ea 60 80 03 20 12 61 fa 8a 29 02 00 f0
>1a6298		0a e2 20 a5 26 09 80 85 26 c2 20 fa 68 28 60 08
>1a62a8		c2 30 48 da 20 3c 60 20 99 60 20 3e 61 8a 29 01
>1a62b8		00 f0 03 20 d2 5f 8a e2 20 4a 4a 69 00 29 01 f0
>1a62c8		06 a5 26 09 80 85 26 c2 20 fa 68 28 60 08 c2 30
>1a62d8		48 da 5a a5 25 10 1f 08 c2 20 48 a9 00 08 5b 68
>1a62e8		28 e2 20 a9 17 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a62f8		1e e2 20 dc d4 08 c2 30 a5 23 cf 26 66 1a a5 25
>1a6308		cf 28 66 1a b0 04 20 d2 5f 18 a9 00 00 a8 2a 48
>1a6318		e2 20 a9 00 8f 00 e2 af a9 01 8f 01 e2 af c2 20
>1a6328		af 7e 66 1a 85 29 8f 0c e2 af af 80 66 1a 85 2b
>1a6338		8f 0e e2 af 20 10 60 8a f0 07 0a 0a 0a 0a 0a 0a
>1a6348		a8 af 82 66 1a 85 29 8f 0c e2 af af 84 66 1a 85
>1a6358		2b 8f 0e e2 af 20 10 60 8a f0 0b 0a 0a 0a 0a 85
>1a6368		29 18 98 65 29 a8 af 86 66 1a 85 29 8f 0c e2 af
>1a6378		af 88 66 1a 85 2b 8f 0e e2 af 20 10 60 8a f0 09
>1a6388		0a 0a 85 29 18 98 65 29 a8 af 8a 66 1a 85 29 8f
>1a6398		0c e2 af af 8c 66 1a 85 2b 8f 0e e2 af 20 10 60
>1a63a8		86 29 18 98 65 29 a8 20 6a 61 a5 23 85 29 a5 25
>1a63b8		85 2b 98 85 23 64 25 20 04 5c 20 e1 56 68 d0 07
>1a63c8		a5 25 09 00 80 85 25 7a fa 68 28 60 08 c2 30 48
>1a63d8		da a5 23 85 29 a5 25 85 2b 20 9c 5f 8b e2 20 a9
>1a63e8		1a 48 ab c2 20 a2 2e 66 a0 05 00 20 0d 5f ab 20
>1a63f8		77 57 fa 68 28 60 08 c2 30 48 da 20 d4 63 af 96
>1a6408		66 1a 85 29 af 98 66 1a 85 2b 20 d6 56 a5 25 49
>1a6418		00 80 85 25 fa 68 28 60 08 c2 30 48 da a5 23 85
>1a6428		29 a5 25 85 2b 20 9c 5f 8b e2 20 a9 1a 48 ab c2
>1a6438		20 a2 42 66 a0 05 00 20 0d 5f ab 20 77 57 fa 68
>1a6448		28 60 c2 20 a5 23 85 29 a5 25 85 2b c2 20 af 26
>1a6458		66 1a 85 23 af 28 66 1a 85 25 8a f0 30 4a aa 90
>1a6468		03 20 77 57 c2 20 a5 25 48 a5 23 48 c2 20 a5 29
>1a6478		85 23 a5 2b 85 25 20 9c 5f c2 20 a5 23 85 29 a5
>1a6488		25 85 2b c2 20 68 85 23 68 85 25 80 cd 60 08 c2
>1a6498		30 48 da 8b e2 20 a9 1a 48 ab c2 20 a2 56 66 5a
>1a64a8		a0 0a 00 20 0d 5f 7a ab fa 68 28 60 08 c2 30 48
>1a64b8		da 5a a5 23 05 25 d0 10 c2 20 af 26 66 1a 85 23
>1a64c8		af 28 66 1a 85 25 80 61 a5 25 29 00 80 a8 f0 07
>1a64d8		a5 25 29 ff 7f 85 25 c2 20 a5 25 48 a5 23 48 20
>1a64e8		51 06 a6 23 20 bf 07 c2 20 a5 23 85 29 a5 25 85
>1a64f8		2b c2 20 68 85 23 68 85 25 20 d6 56 20 96 64 c2
>1a6508		20 a5 25 48 a5 23 48 c2 20 af 8a 66 1a 85 23 af
>1a6518		8c 66 1a 85 25 20 4a 64 c2 20 68 85 29 68 85 2b
>1a6528		20 77 57 98 f0 03 20 d2 5f 7a fa 68 28 60 08 c2
>1a6538		30 48 a5 25 10 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a6548		e2 20 a9 17 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a6558		e2 20 dc d4 08 c2 30 05 23 f0 68 c2 20 af 2a 66
>1a6568		1a 85 29 af 2c 66 1a 85 2b e2 20 a9 01 85 2d c2
>1a6578		20 c2 20 a5 25 48 a5 23 48 20 2c 57 a5 25 c5 2b
>1a6588		d0 09 a5 23 45 29 29 f8 ff f0 30 20 e1 56 c2 20
>1a6598		af 2a 66 1a 85 29 af 2c 66 1a 85 2b 20 2c 57 c2
>1a65a8		20 a5 23 85 29 a5 25 85 2b c2 20 68 85 23 68 85
>1a65b8		25 c2 20 a5 25 48 a5 23 48 80 be c2 20 68 85 29
>1a65c8		68 85 2b 68 28 60 01 0d d0 37 61 0b b6 ba ab aa
>1a65d8		2a 3d 00 00 00 bf 00 00 80 3f 1d ef 38 36 01 0d
>1a65e8		50 b9 89 88 08 3c ab aa 2a be 00 00 80 3f a4 27
>1a65f8		b3 3c d1 0d 5d 3d 89 88 08 3e ab aa aa 3e 00 00
>1a6608		80 3f 89 88 88 3d d9 89 9d 3d 8c 2e ba 3d 39 8e
>1a6618		e3 3d 25 49 12 3e cd cc 4c 3e ab aa aa 3e 00 00
>1a6628		80 3f 00 00 00 40 8e e3 f8 3c 6e db 36 3d 9a 99
>1a6638		99 3d ab aa 2a 3e 00 00 80 3f 39 8e e3 3d 25 49
>1a6648		12 be cd cc 4c 3e ab aa aa be 00 00 80 3f 1d ef
>1a6658		38 36 01 0d d0 37 01 0d 50 39 61 0b b6 3a 89 88
>1a6668		08 3c ab aa 2a 3d ab aa 2a 3e 00 00 00 3f 00 00
>1a6678		80 3f 00 00 80 3f c1 2c a1 6d 5f 97 07 4b 81 64
>1a6688		5a 42 54 f8 2d 40 db 0f c9 40 db 0f 49 40 db 0f
>1a6698		c9 3f db 0f 49 3f 08 20 0f 13 c2 20 a9 01 00 85
>1a66a8		23 a9 00 00 85 25 e2 20 af 00 4d 00 c2 20 29 ff
>1a66b8		00 85 8f a8 a2 01 00 c2 20 bf 00 4d 00 85 29 a9
>1a66c8		00 00 85 2b e2 20 a9 00 85 2d c2 20 20 5a 28 e8
>1a66d8		e8 88 d0 e3 c2 20 a9 04 00 85 29 a9 00 00 85 2b
>1a66e8		20 5a 28 e2 20 af 00 4d 00 85 0c a9 00 85 0d c2
>1a66f8		20 06 0c 38 a5 23 65 0c 85 23 a5 25 69 00 00 85
>1a6708		25 d0 29 e2 20 a5 ea 09 80 a6 23 20 d3 10 e2 20
>1a6718		af 00 4d 00 87 c0 a0 01 00 a2 00 00 e2 20 bf 01
>1a6728		4d 00 97 c0 e4 8f f0 23 e8 c8 80 f0 08 c2 20 48
>1a6738		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>1a6748		29 ff 00 20 5e 1e e2 20 dc d4 08 e2 20 38 a5 c0
>1a6758		67 c0 85 08 a5 c1 69 00 85 09 a5 c2 69 00 85 0a
>1a6768		64 0b c2 20 a0 05 00 b7 c3 85 0c e2 20 c8 c8 b7
>1a6778		c3 85 0e 64 0f e2 20 a9 00 87 08 c2 20 18 a5 08
>1a6788		69 01 00 85 08 a5 0a 69 00 00 85 0a c5 0e d0 e5
>1a6798		a5 08 c5 0c d0 df 28 60 08 c2 20 64 08 64 0a e2
>1a67a8		20 af 00 4d 00 85 8f 64 90 a2 01 00 e2 20 a7 c0
>1a67b8		c5 8f f0 22 a6 8f 00 08 c2 20 48 a9 00 08 5b 68
>1a67c8		28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a67d8		1e e2 20 dc d4 08 c9 01 f0 3a a0 01 00 e2 20 bf
>1a67e8		00 4d 00 85 23 64 24 64 25 64 26 b7 c0 85 29 64
>1a67f8		2a 64 2b 64 2c a5 23 c5 29 b0 68 20 5a 28 c2 20
>1a6808		18 a5 08 65 23 85 08 a5 0a 65 25 85 0a e8 e8 c8
>1a6818		c4 8f d0 c9 e2 20 18 bf 00 4d 00 85 90 65 08 85
>1a6828		08 a5 09 69 00 85 09 c2 20 a5 0a 69 00 00 85 0a
>1a6838		c2 20 06 08 26 0a 06 08 26 0a e2 20 38 a5 08 65
>1a6848		8f 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69 00 00
>1a6858		85 0a 18 a5 08 65 c0 85 08 e2 20 a5 0a 65 c2 85
>1a6868		0a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a6878		09 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a6888		d4 08 08 20 0f 13 e2 20 a0 00 00 b7 c3 29 7f c9
>1a6898		02 d0 05 20 e3 06 80 10 c9 00 d0 05 20 51 06 80
>1a68a8		07 c9 01 d0 2b 20 bf 07 a5 27 48 c2 20 a5 25 48
>1a68b8		a5 23 48 20 a0 67 68 85 23 68 85 25 e2 20 68 85
>1a68c8		27 c2 20 a5 23 87 08 a0 02 00 a5 25 97 08 28 60
>1a68d8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a68e8		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08
>1a68f8		20 0f 13 f4 00 00 f4 00 00 e2 20 48 20 a0 67 e2
>1a6908		20 68 c2 20 68 68 c2 20 a7 08 85 23 a0 02 00 b7
>1a6918		08 85 25 e2 20 a0 00 00 b7 c3 29 7f 85 27 20 63
>1a6928		18 28 60 da 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a6938		c2 30 a5 25 89 f0 ff d0 29 89 0f 00 d0 0c a5 23
>1a6948		89 00 fc d0 05 20 1e 46 80 2e a2 0a 00 46 25 66
>1a6958		23 ca d0 f9 20 1e 46 e2 20 a9 4b 20 18 00 c2 20
>1a6968		80 16 a2 14 00 46 25 66 23 ca d0 f9 20 1e 46 e2
>1a6978		20 a9 4d 20 18 00 c2 20 28 2b fa 60 0b 08 c2 30
>1a6988		a9 00 00 8f b6 08 00 8f b8 08 00 e2 20 20 7e 22
>1a6998		c9 00 f0 08 20 0c 1d 20 e3 06 80 11 c2 20 a9 00
>1a69a8		00 85 23 85 25 e2 20 a9 02 85 27 c2 20 20 e5 6a
>1a69b8		22 08 11 00 b0 22 20 96 6b 08 c2 20 48 a9 00 08
>1a69c8		5b 68 28 e2 20 a9 10 8f d3 08 00 c2 20 29 ff 00
>1a69d8		20 5e 1e e2 20 dc d4 08 20 d7 03 08 c2 20 48 a9
>1a69e8		20 03 5b 68 28 e2 20 a0 00 00 b7 18 d0 03 82 a9
>1a69f8		00 c9 e5 d0 03 82 96 00 a0 0b 00 b7 18 89 08 f0
>1a6a08		03 82 a9 00 89 02 f0 03 82 83 00 29 0f c9 0f d0
>1a6a18		03 82 7a 00 a0 00 00 b7 18 20 18 00 c8 c0 08 00
>1a6a28		d0 f5 a9 20 20 18 00 a0 08 00 b7 18 20 18 00 c8
>1a6a38		c0 0b 00 d0 f5 a9 09 20 18 00 a0 0b 00 b7 18 89
>1a6a48		10 d0 1e c2 20 a0 1c 00 b7 18 8f 23 08 00 c8 c8
>1a6a58		b7 18 8f 25 08 00 e2 20 a9 00 8f 27 08 00 20 2b
>1a6a68		69 a9 09 20 18 00 a0 0b 00 b7 18 89 08 d0 1c 89
>1a6a78		01 f0 05 a9 52 20 18 00 89 04 f0 05 a9 53 20 18
>1a6a88		00 89 10 f0 05 a9 44 20 18 00 ea 20 d7 03 20 ee
>1a6a98		03 22 0c 11 00 90 03 82 41 ff 20 96 6b 08 c2 20
>1a6aa8		48 a9 00 08 5b 68 28 20 62 21 28 2b 60 08 c2 20
>1a6ab8		48 a9 20 03 5b 68 28 e2 20 29 0f c9 0f f0 cf a9
>1a6ac8		5b 20 18 00 a0 00 00 b7 18 c9 20 f0 09 20 18 00
>1a6ad8		c8 c0 08 00 d0 f1 a9 5d 20 18 00 80 ae 0b 08 08
>1a6ae8		c2 20 48 a9 20 03 5b 68 28 c2 30 a9 73 f2 85 20
>1a6af8		a9 1a 00 85 22 a0 00 00 e2 20 a9 00 97 20 c8 c0
>1a6b08		1e 00 d0 f8 c2 20 a9 73 f0 8f 81 f2 1a a9 1a 00
>1a6b18		8f 83 f2 1a af 23 08 00 8f 75 f2 1a af 25 08 00
>1a6b28		8f 77 f2 1a 28 2b 60 08 c2 30 20 3e 21 20 0c 1d
>1a6b38		20 e3 06 20 e5 6a e2 20 a9 2c 85 37 20 5f 22 b0
>1a6b48		0f c2 20 a9 ff ff 8f 54 03 00 8f 56 03 00 80 17
>1a6b58		20 1d 21 20 0c 1d 20 51 06 c2 20 a5 23 8f 54 03
>1a6b68		00 a5 25 8f 56 03 00 22 18 11 00 b0 1f 08 c2 20
>1a6b78		48 a9 00 08 5b 68 28 e2 20 a9 11 8f d3 08 00 c2
>1a6b88		20 29 ff 00 20 5e 1e e2 20 dc d4 08 28 60 8b 0b
>1a6b98		08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>1a6ba8		00 48 ab 68 28 e2 20 af 2e 03 00 85 23 a9 00 85
>1a6bb8		24 85 25 85 26 a9 00 85 27 85 ea a9 1a 85 e9 c2
>1a6bc8		20 a9 f9 6b 85 e7 20 83 53 e2 20 af 20 03 00 85
>1a6bd8		23 a9 00 85 24 85 25 85 26 a9 00 85 27 85 ea a9
>1a6be8		1a 85 e9 c2 20 a9 01 6c 85 e7 20 83 53 28 2b ab
>1a6bf8		60 44 4f 53 53 54 41 54 00 42 49 4f 53 53 54 41
>1a6c08		54 00 08 c2 30 20 3e 21 20 0c 1d 20 e3 06 a5 23
>1a6c18		8f 60 03 00 a5 25 8f 62 03 00 a9 ff ff 8f 54 03
>1a6c28		00 8f 56 03 00 22 24 11 00 b0 25 20 5e 1e 20 96
>1a6c38		6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f
>1a6c48		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a6c58		20 5e 1e 28 60 08 c2 30 20 3e 21 20 0c 1d 20 e3
>1a6c68		06 20 e5 6a a9 00 00 8f 54 03 00 a9 01 00 8f 56
>1a6c78		03 00 20 54 50 22 18 11 00 b0 22 20 96 6b 08 c2
>1a6c88		20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d3 08 00
>1a6c98		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 20 96 6b
>1a6ca8		c2 20 a2 12 00 18 bf 73 f2 1a 69 00 00 85 92 bf
>1a6cb8		75 f2 1a 69 01 00 85 94 e2 20 a9 00 87 92 c2 20
>1a6cc8		a9 00 00 85 7a a9 01 00 85 7c a2 00 00 e2 20 a7
>1a6cd8		7a f0 2a c9 0d f0 12 c9 0a f0 04 9d 00 4f e8 c2
>1a6ce8		20 e6 7a d0 e8 e6 7c 80 e4 e2 20 a9 00 9d 00 4f
>1a6cf8		20 8d 27 c2 20 e6 7a d0 d1 e6 7c 80 cd e0 00 00
>1a6d08		f0 0a e2 20 a9 00 9d 00 4f 20 8d 27 28 60 08 c2
>1a6d18		30 20 3e 21 20 0c 1d 20 e3 06 20 e5 6a e2 20 a9
>1a6d28		2c 20 2a 22 c2 20 20 0c 1d 20 51 06 a5 23 8f 50
>1a6d38		03 00 a5 25 8f 52 03 00 e2 20 a9 2c c2 20 20 2a
>1a6d48		22 20 0c 1d 20 51 06 a5 23 8f 58 03 00 a5 25 8f
>1a6d58		5a 03 00 22 1c 11 00 b0 22 20 96 6b 08 c2 20 48
>1a6d68		a9 00 08 5b 68 28 e2 20 a9 12 8f d3 08 00 c2 20
>1a6d78		29 ff 00 20 5e 1e e2 20 dc d4 08 20 96 6b 28 60
>1a6d88		da 5a 08 a2 00 00 a0 00 00 e2 20 b7 23 9d 00 04
>1a6d98		f0 04 e8 c8 80 f5 28 7a fa 60 08 c2 30 20 3e 21
>1a6da8		20 0c 1d 20 e3 06 20 e5 6a a9 00 00 85 a6 e2 20
>1a6db8		a9 01 85 a8 a9 20 85 b4 c2 20 a9 00 00 85 ab a9
>1a6dc8		ff ff 85 a9 c2 20 a9 00 00 85 55 85 57 a9 ff ff
>1a6dd8		85 59 a9 ff 7f 85 5b 20 8b 18 e2 20 a9 80 85 b4
>1a6de8		c2 20 c6 ab 18 a9 00 00 8f 50 03 00 65 ab 8f 58
>1a6df8		03 00 a9 01 00 8f 52 03 00 69 00 00 8f 5a 03 00
>1a6e08		22 1c 11 00 b0 22 20 96 6b 08 c2 20 48 a9 00 08
>1a6e18		5b 68 28 e2 20 a9 12 8f d3 08 00 c2 20 29 ff 00
>1a6e28		20 5e 1e e2 20 dc d4 08 20 96 6b 28 60 08 c2 30
>1a6e38		20 3e 21 20 0c 1d 20 e3 06 20 88 6d 22 04 11 00
>1a6e48		b0 22 20 96 6b 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a6e58		20 a9 13 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>1a6e68		20 dc d4 08 20 96 6b 28 60 da 08 e2 20 c9 61 90
>1a6e78		08 c9 7b b0 04 29 df 80 13 c9 20 90 13 a2 00 00
>1a6e88		df 9c 6e 1a f0 0a e8 e0 0f 00 d0 f4 28 38 fa 6b
>1a6e98		28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c 3d 3e 3f 5c 5b
>1a6ea8		5d 7c 22 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>1a6eb8		20 0c 1d 20 e3 06 20 88 6d 22 10 11 00 b0 22 20
>1a6ec8		96 6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 14
>1a6ed8		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>1a6ee8		08 e2 20 a9 2c 20 2a 22 c2 20 20 0c 1d 20 e3 06
>1a6ef8		ad 38 03 85 08 ad 3a 03 85 0a e2 20 a2 00 00 a9
>1a6f08		20 95 7e e8 e0 0b 00 d0 f8 a2 00 00 a0 00 00 b7
>1a6f18		23 f0 76 c9 2e f0 39 22 71 6e 1a b0 1f 08 c2 20
>1a6f28		48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2
>1a6f38		20 29 ff 00 20 5e 1e e2 20 dc d4 08 95 7e c8 e8
>1a6f48		c0 08 00 d0 ca b7 23 f0 40 c9 2e f0 03 c8 80 f5
>1a6f58		c8 a2 08 00 b7 23 f0 31 22 71 6e 1a b0 22 20 96
>1a6f68		6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f
>1a6f78		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a6f88		95 7e c8 e8 c0 0c 00 d0 cb a2 00 00 a0 00 00 b5
>1a6f98		7e 97 08 e8 c8 c0 0b 00 d0 f5 22 14 11 00 b0 22
>1a6fa8		20 96 6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a6fb8		15 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a6fc8		d4 08 20 96 6b 28 60 08 08 c2 20 48 a9 00 08 5b
>1a6fd8		68 28 c2 30 20 0c 1d 20 e3 06 a5 23 8f 64 03 00
>1a6fe8		a5 25 8f 66 03 00 e2 20 a9 2c 20 2a 22 c2 20 20
>1a6ff8		0c 1d 20 e3 06 a5 23 8f 68 03 00 a5 25 8f 6a 03
>1a7008		00 22 30 11 00 b0 1f 08 c2 20 48 a9 00 08 5b 68
>1a7018		28 e2 20 a9 16 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a7028		1e e2 20 dc d4 08 28 60 5c ed 89 1a 5c 3e 88 1a
>1a7038		5c ee 89 1a 5c 6a 79 1a 5c c7 79 1a 5c fa 78 1a
>1a7048		5c 80 78 1a 5c fd 7d 1a 5c eb 74 1a 5c 18 78 1a
>1a7058		5c d3 77 1a 5c 5d 77 1a 5c fc 88 1a 5c f9 75 1a
>1a7068		5c 49 74 1a 5c 77 89 1a 5c 27 75 1a 5c f0 89 1a
>1a7078		5c e9 89 1a 5c 16 77 1a 5c f1 89 1a 18 fb 58 5c
>1a7088		8b 70 1a c2 30 22 49 74 1a 20 08 00 20 0c 00 8b
>1a7098		e2 20 a9 00 48 ab a2 00 4f 20 65 05 ab 22 34 70
>1a70a8		1a 22 3c 70 1a 80 e2 08 8b e2 20 a9 1a 48 ab c2
>1a70b8		10 a2 c2 70 20 64 04 ab 28 6b 41 20 3c 73 74 61
>1a70c8		72 74 3e 20 3c 61 73 73 65 6d 62 6c 79 3e 0d 20
>1a70d8		20 41 73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67
>1a70e8		72 61 6d 0d 0d 43 20 3c 73 74 61 72 74 31 3e 20
>1a70f8		3c 73 74 61 72 74 32 3e 20 5b 6c 65 6e 20 28 31
>1a7108		20 69 66 20 62 6c 61 6e 6b 29 5d 0d 20 20 43 6f
>1a7118		6d 70 61 72 65 20 74 6f 20 73 65 63 74 69 6f 6e
>1a7128		73 20 6f 66 20 6d 65 6d 6f 72 79 0d 0d 44 20 3c
>1a7138		73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44
>1a7148		69 73 61 73 73 65 6d 62 6c 65 20 61 20 70 72 6f
>1a7158		67 72 61 6d 0d 0d 46 20 3c 73 74 61 72 74 3e 20
>1a7168		3c 65 6e 64 3e 20 3c 62 79 74 65 3e 0d 20 20 46
>1a7178		69 6c 6c 20 61 20 62 6c 6f 63 6b 20 6f 66 20 6d
>1a7188		65 6d 6f 72 79 20 77 69 74 68 20 61 20 62 79 74
>1a7198		65 0d 0d 47 20 5b 61 64 64 72 65 73 73 5d 0d 20
>1a71a8		20 53 74 61 72 74 20 65 78 65 63 75 74 69 6f 6e
>1a71b8		20 61 74 20 61 20 6c 6f 63 61 74 69 6f 6e 0d 0d
>1a71c8		4a 20 5b 61 64 64 72 65 73 73 5d 20 2d 20 4a 75
>1a71d8		6d 70 20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e
>1a71e8		20 69 6e 20 6d 65 6d 6f 72 79 0d 20 20 4a 75 6d
>1a71f8		70 20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20
>1a7208		69 6e 20 6d 65 6d 6f 72 79 0d 0d 48 20 3c 73 74
>1a7218		61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65
>1a7228		3e 20 5b 62 79 74 65 5d 2e 2e 0d 20 20 48 75 6e
>1a7238		74 20 66 6f 72 20 76 61 6c 75 65 73 20 69 6e 20
>1a7248		6d 65 6d 6f 72 79 0d 0d 4c 20 20 20 20 20 4c 4f
>1a7258		41 44 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>1a7268		22 20 5b 64 65 73 74 69 6e 61 74 69 6f 6e 5d 0d
>1a7278		4d 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d
>1a7288		20 20 44 75 6d 70 20 74 68 65 20 76 61 6c 75 65
>1a7298		20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 52 20 2d 20
>1a72a8		44 69 73 70 6c 61 79 20 74 68 65 20 76 61 6c 75
>1a72b8		65 73 20 6f 66 20 74 68 65 20 72 65 67 69 73 74
>1a72c8		65 72 73 0d 0d 3b 20 3c 50 43 3e 20 3c 41 3e 20
>1a72d8		3c 58 3e 20 3c 59 3e 20 3c 53 50 3e 20 3c 44 42
>1a72e8		52 3e 20 3c 44 50 3e 20 3c 4e 56 4d 58 44 49 5a
>1a72f8		43 3e 0d 20 20 43 68 61 6e 67 65 20 74 68 65 20
>1a7308		63 6f 6e 74 65 6e 74 73 20 6f 66 20 74 68 65 20
>1a7318		72 65 67 69 73 74 65 72 73 0d 0d 53 20 20 20 20
>1a7328		20 53 41 56 45 20 20 20 20 20 20 20 20 20 22 46
>1a7338		69 6c 65 22 20 3c 73 74 61 72 74 3e 20 3c 65 6e
>1a7348		64 3e 0d 54 20 3c 73 74 61 72 74 3e 20 3c 65 6e
>1a7358		64 3e 20 3c 64 65 73 74 69 6e 61 74 69 6f 6e 3e
>1a7368		0d 20 20 54 72 61 6e 73 66 65 72 20 28 63 6f 70
>1a7378		79 29 20 64 61 74 61 20 77 69 74 68 69 6e 20 6d
>1a7388		65 6d 6f 72 79 0d 0d 57 20 3c 62 79 74 65 3e 0d
>1a7398		20 20 53 65 74 20 74 68 65 20 72 65 67 69 73 74
>1a73a8		65 72 20 77 69 64 74 68 20 66 6c 61 67 73 20 66
>1a73b8		6f 72 20 74 68 65 20 64 69 73 61 73 73 65 6d 62
>1a73c8		6c 65 72 0d 0d 58 20 2d 20 52 65 74 75 72 6e 20
>1a73d8		74 6f 20 42 41 53 49 43 0d 0d 3e 20 3c 73 74 61
>1a73e8		72 74 3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65
>1a73f8		5d 2e 2e 2e 0d 20 20 45 64 69 74 20 64 61 74 61
>1a7408		20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 3f 20 2d 20
>1a7418		44 69 73 70 6c 61 79 20 61 20 73 68 6f 72 74 20
>1a7428		68 65 6c 70 20 73 63 72 65 65 6e 0d 0d 00 08 08
>1a7438		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 0d 85 4e 28
>1a7448		6b 20 3d 02 08 e2 20 48 a9 1a 48 ab 68 28 a2 2e
>1a7458		8a 20 64 04 e2 20 a9 3b 20 18 00 a9 20 20 18 00
>1a7468		c2 30 08 e2 20 48 a9 00 48 ab 68 28 a0 03 00 a2
>1a7478		42 02 20 e7 03 c2 20 a9 20 00 20 18 00 af 44 02
>1a7488		00 20 74 04 a9 20 00 20 18 00 af 46 02 00 20 74
>1a7498		04 a9 20 00 20 18 00 af 48 02 00 20 74 04 a9 20
>1a74a8		00 20 18 00 af 4a 02 00 20 74 04 a9 20 00 20 18
>1a74b8		00 af 4e 02 00 20 8e 04 a9 20 00 20 18 00 a9 20
>1a74c8		00 20 18 00 af 4c 02 00 20 74 04 a9 20 00 20 18
>1a74d8		00 08 e2 20 ad 4f 02 22 47 87 1a 28 20 d7 03 20
>1a74e8		d7 03 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28 e2
>1a74f8		20 a5 15 87 0d e2 20 a5 0f c5 13 d0 0e c2 20 a5
>1a7508		0d c5 11 d0 06 20 d7 03 2b 28 6b c2 20 18 a5 0d
>1a7518		69 01 00 85 0d e2 20 a5 0e 69 00 85 0e 80 d0 08
>1a7528		0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 0f c5
>1a7538		17 90 45 c2 20 a5 0d c5 15 90 3d e2 20 a7 0d 87
>1a7548		15 a5 0f c5 13 d0 0b c2 20 a5 0d c5 11 d0 03 4c
>1a7558		de 75 c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e
>1a7568		69 00 85 0e c2 20 18 a5 15 69 01 00 85 15 e2 20
>1a7578		a5 16 69 00 85 16 80 c3 c2 20 38 a5 11 e5 0d 85
>1a7588		19 e2 20 a5 13 e5 0f 85 1b c2 20 18 a5 19 65 15
>1a7598		85 15 e2 20 a5 1b 65 17 85 17 e2 20 a7 11 87 15
>1a75a8		a5 13 c5 0f d0 0a c2 20 a5 11 c5 0d d0 02 80 26
>1a75b8		c2 20 38 a5 11 e9 01 00 85 11 e2 20 a5 12 e9 00
>1a75c8		85 12 c2 20 38 a5 15 e9 01 00 85 15 e2 20 a5 16
>1a75d8		e9 00 85 16 80 c4 20 d7 03 2b 28 6b 08 e2 20 c9
>1a75e8		21 90 0b c9 7f 90 04 c9 a0 90 03 28 38 6b 28 18
>1a75f8		6b 08 8b 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>1a7608		a9 00 8f b6 08 00 a5 31 c9 02 b0 16 c9 01 90 20
>1a7618		c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00
>1a7628		85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12
>1a7638		c2 20 18 a5 32 69 00 01 85 11 e2 20 a5 34 69 00
>1a7648		85 13 e2 20 a0 00 00 c2 20 a5 32 85 19 e2 20 a5
>1a7658		34 85 1b e2 20 a7 19 22 e4 75 1a b0 02 a9 3f 99
>1a7668		7e 08 c2 20 18 a5 19 69 01 00 85 19 e2 20 a5 1b
>1a7678		69 00 85 1b c8 c0 08 00 90 db a9 00 99 7e 08 a9
>1a7688		3e 20 18 00 a9 20 20 18 00 e2 20 a5 34 20 8e 04
>1a7698		a9 3a 20 18 00 c2 20 a5 32 20 74 04 c2 20 a9 08
>1a76a8		00 85 47 e2 20 a9 20 20 18 00 a7 32 20 8e 04 22
>1a76b8		26 87 1a e2 20 c6 47 d0 ea a9 20 20 18 00 a9 20
>1a76c8		20 18 00 08 e2 20 48 a9 00 48 ab 68 28 a2 7e 08
>1a76d8		20 64 04 20 d7 03 20 ee 03 a5 34 c5 13 90 0f c2
>1a76e8		20 a5 32 c5 11 90 07 20 d7 03 2b ab 28 6b 4c 4a
>1a76f8		76 08 8d 92 08 e2 20 bd 00 00 99 00 00 ad 92 08
>1a7708		f0 0a c8 e8 e8 e8 e8 ce 92 08 80 eb 28 6b 08 0b
>1a7718		8b 08 c2 20 48 a9 48 08 5b 68 28 08 e2 20 48 a9
>1a7728		00 48 ab 68 28 c2 30 a5 0d 85 32 a5 0f 85 34 e2
>1a7738		20 a5 31 3a 85 47 a2 59 08 a0 7e 08 22 f9 76 1a
>1a7748		a0 00 00 b9 7e 08 87 32 22 26 87 1a c8 c4 47 d0
>1a7758		f2 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b
>1a7768		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>1a7778		a5 31 3a 3a 85 47 a2 5d 08 a0 7e 08 22 f9 76 1a
>1a7788		c2 20 a5 0d 85 32 a5 0f 85 34 c2 20 a5 34 c5 13
>1a7798		d0 06 a5 32 c5 11 f0 2c e2 20 a0 00 00 b7 32 d9
>1a77a8		7e 08 d0 1a c8 c4 47 d0 f4 c2 20 a5 32 85 4a a5
>1a77b8		34 85 4c 22 d0 81 1a e2 20 a9 20 20 18 00 22 26
>1a77c8		87 1a 80 c6 20 d7 03 ab 2b 28 6b 08 c2 20 48 a9
>1a77d8		48 08 5b 68 28 e2 20 a5 31 f0 0e c2 30 a5 0d 8f
>1a77e8		40 02 00 a5 0f 8f 42 02 00 af 46 02 00 aa af 48
>1a77f8		02 00 a8 af 4a 02 00 1b af 4c 02 00 5b e2 20 a9
>1a7808		1a 48 a9 78 48 a9 13 48 4c 4a 78 ea 5c 04 00 1a
>1a7818		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0 c9
>1a7828		c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46
>1a7838		02 00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c 02
>1a7848		00 5b e2 20 af 4e 02 00 48 ab a9 5c 8f a2 08 00
>1a7858		af 42 02 00 8f a5 08 00 af 41 02 00 8f a4 08 00
>1a7868		af 40 02 00 8f a3 08 00 af 4f 02 00 48 c2 20 af
>1a7878		44 02 00 28 5c a2 08 00 08 0b 8b 08 e2 20 48 a9
>1a7888		1a 48 ab 68 28 08 c2 20 48 a9 48 08 5b 68 28 c2
>1a7898		10 e2 20 a5 31 c9 02 f0 0c c9 03 d0 11 c2 20 a5
>1a78a8		15 85 47 80 11 c2 20 a9 01 00 85 47 80 08 a2 f2
>1a78b8		89 20 64 04 80 35 a5 0d 85 4a a5 0f 85 4c a0 00
>1a78c8		00 e2 20 a7 4a d7 11 f0 09 22 d0 81 1a a9 20 20
>1a78d8		18 00 c2 20 18 a5 4a 69 01 00 85 4a a5 4c 69 00
>1a78e8		00 85 4c c8 c4 47 d0 d9 20 d7 03 20 d7 03 ab 2b
>1a78f8		28 6b 08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08
>1a7908		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0 4f a6
>1a7918		0d 8e 40 02 a6 0f 8e 42 02 c9 01 f0 41 a6 11 8e
>1a7928		44 02 c9 02 f0 38 a6 15 8e 46 02 c9 03 f0 2f a6
>1a7938		19 8e 48 02 c9 04 f0 26 a6 1d 8e 4a 02 c9 05 f0
>1a7948		1d e2 10 a6 21 8e 4e 02 c9 06 f0 12 c2 10 a6 25
>1a7958		8e 4c 02 c9 07 f0 07 e2 10 a6 29 8e 4f 02 ab 2b
>1a7968		28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b 68 28 e2
>1a7978		20 c2 10 a2 00 00 bf 5f 8a 1a f0 18 c7 08 f0 03
>1a7988		e8 80 f3 c2 20 8a 0a aa bf a0 79 1a 8f 2f 08 00
>1a7998		22 c4 79 1a ab 2b 28 6b 40 70 48 70 4c 70 50 70
>1a79a8		54 70 58 70 5c 70 60 70 64 70 68 70 44 70 6c 70
>1a79b8		70 70 74 70 36 74 78 70 7c 70 af 70 6c 2f 08 08
>1a79c8		8b 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31
>1a79d8		c9 02 b0 03 4c 6d 7b c2 20 a5 0d 85 32 a5 0f 85
>1a79e8		34 c2 20 22 6f 7d 1a c9 ff ff f0 10 85 54 e2 20
>1a79f8		a5 31 c9 03 f0 36 a9 13 85 4f 80 4c 20 d7 03 08
>1a7a08		e2 20 48 a9 1a 48 ab 68 28 c2 10 a2 a4 7b 20 64
>1a7a18		04 4c 6d 7b 20 d7 03 08 e2 20 48 a9 1a 48 ab 68
>1a7a28		28 c2 10 a2 b3 7b 20 64 04 4c 6d 7b e2 20 22 a5
>1a7a38		7d 1a c9 ff f0 de 85 4f c9 03 f0 62 c9 0b f0 5e
>1a7a48		c9 13 f0 04 c9 08 f0 00 22 9d 7c 1a b0 03 4c 36
>1a7a58		7b 87 32 22 26 87 1a 08 e2 20 48 a9 00 48 ab 68
>1a7a68		28 c2 20 a5 32 85 56 a5 34 85 58 e2 20 a5 4f c9
>1a7a78		12 f0 6c c9 16 f0 68 c9 14 f0 7c 29 3f c9 02 d0
>1a7a88		03 4c 64 7b c2 20 29 ff 00 aa e2 20 bf 6c 86 1a
>1a7a98		c9 03 f0 57 c9 02 f0 5f c9 01 f0 67 80 71 c2 20
>1a7aa8		a5 54 c9 e4 82 f0 26 c9 48 83 f0 2a c9 c8 82 f0
>1a7ab8		1c c9 cc 82 f0 17 c9 d4 82 f0 12 c9 bc 82 f0 0d
>1a7ac8		c9 d0 82 f0 08 c9 b8 82 f0 03 4c 50 7a e2 20 a9
>1a7ad8		12 85 4f 4c 50 7a e2 20 a9 16 85 4f 4c 50 7a 22
>1a7ae8		e0 7b 1a 90 60 c9 02 f0 0e 80 18 a0 02 00 b9 98
>1a7af8		08 97 56 22 26 87 1a a0 01 00 b9 98 08 97 56 22
>1a7b08		26 87 1a a0 00 00 b9 98 08 97 56 22 26 87 1a e2
>1a7b18		20 a9 41 20 18 00 a9 20 20 18 00 a6 32 86 4a a6
>1a7b28		34 86 4c 22 d0 81 1a a9 20 20 18 00 80 37 20 d7
>1a7b38		03 08 e2 20 48 a9 1a 48 ab 68 28 c2 10 a2 71 7b
>1a7b48		20 64 04 80 20 20 d7 03 08 e2 20 48 a9 1a 48 ab
>1a7b58		68 28 c2 10 a2 c1 7b 20 64 04 80 09 a5 4f 29 c0
>1a7b68		d0 95 4c 0b 7b 2b ab 28 6b 41 64 64 72 65 73 73
>1a7b78		69 6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66
>1a7b88		69 6e 65 64 20 66 6f 72 20 74 68 61 74 20 69 6e
>1a7b98		73 74 72 75 63 74 69 6f 6e 2e 0d 00 42 61 64 20
>1a7ba8		6d 6e 65 6d 6f 6e 69 63 2e 0d 00 42 61 64 20 6f
>1a7bb8		70 65 72 61 6e 64 2e 0d 00 52 65 6c 61 74 69 76
>1a7bc8		65 20 6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20
>1a7bd8		6c 61 72 67 65 2e 0d 00 08 0b 08 c2 20 48 a9 48
>1a7be8		08 5b 68 28 e2 20 a5 4f c9 12 f0 0a c2 20 18 a5
>1a7bf8		32 69 02 00 80 08 c2 20 18 a5 32 69 01 00 85 4a
>1a7c08		a5 34 69 00 00 85 4c 38 a5 50 e5 4a 85 50 a5 52
>1a7c18		e5 4c 85 52 e2 20 a5 4f c9 16 f0 1e a5 50 30 0c
>1a7c28		a5 51 d0 2a a5 52 d0 26 a9 01 80 26 a5 51 c9 ff
>1a7c38		d0 1c a5 52 c9 ff d0 16 80 18 a5 51 30 06 a5 52
>1a7c48		d0 0c 80 0e a5 52 c9 ff d0 04 a9 02 80 04 2b 28
>1a7c58		18 6b 2b 28 38 6b 08 0b c2 10 da 08 c2 20 48 a9
>1a7c68		48 08 5b 68 28 e2 20 a2 00 00 df 00 d0 1a f0 08
>1a7c78		e8 e0 10 00 f0 1b 80 f2 c2 20 06 50 26 52 06 50
>1a7c88		26 52 06 50 26 52 06 50 26 52 e2 20 8a 05 50 85
>1a7c98		50 fa 2b 28 6b 0b 8b 08 c2 20 48 a9 48 08 5b 68
>1a7ca8		28 08 e2 20 48 a9 1a 48 ab 68 28 e2 20 a5 4f 29
>1a7cb8		3f 85 4a c2 30 a2 00 00 a0 00 00 bd 6a 83 f0 1b
>1a7cc8		c5 54 d0 0d e2 20 b9 6c 85 29 3f c5 4a f0 07 c2
>1a7cd8		20 e8 e8 c8 80 e5 98 38 ab 2b 6b 18 ab 2b 6b 08
>1a7ce8		0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 c2 10 a0
>1a7cf8		00 00 64 50 64 52 b7 03 f0 11 c9 64 f0 19 48 b7
>1a7d08		36 85 4a 68 c5 4a d0 0b c8 80 eb b7 36 d0 04 2b
>1a7d18		28 38 6b 2b 28 18 6b e2 20 b7 36 c9 3a b0 04 c9
>1a7d28		30 b0 14 c9 47 b0 04 c9 41 b0 0c c9 67 b0 e4 c9
>1a7d38		61 b0 02 80 de 29 df 22 5e 7c 1a 80 cb 0b 08 c2
>1a7d48		20 48 a9 48 08 5b 68 28 a0 00 00 e2 20 b7 03 f0
>1a7d58		03 c8 80 f9 c2 20 c8 5a 68 18 65 03 85 03 a5 05
>1a7d68		69 00 00 85 05 2b 6b 0b 08 c2 20 48 a9 48 08 5b
>1a7d78		68 28 c2 20 a5 11 85 36 a5 13 85 38 a9 f8 81 85
>1a7d88		03 a9 1a 00 85 05 22 e7 7c 1a b0 0d 22 45 7d 1a
>1a7d98		a7 03 d0 f2 a9 ff ff 80 02 a5 03 2b 6b 08 0b 08
>1a7da8		c2 20 48 a9 48 08 5b 68 28 c2 30 a5 15 85 36 a5
>1a7db8		17 85 38 a9 84 86 85 03 a9 1a 00 85 05 22 e7 7c
>1a7dc8		1a b0 22 22 45 7d 1a c2 20 18 a5 03 69 01 00 85
>1a7dd8		03 a5 05 69 00 00 85 05 e2 20 a7 03 d0 df c2 20
>1a7de8		a9 ff ff 80 0d 22 45 7d 1a e2 20 a7 03 c2 20 29
>1a7df8		ff 00 2b 28 6b 08 8b 0b 08 c2 20 48 a9 48 08 5b
>1a7e08		68 28 e2 20 a9 00 8f b6 08 00 a5 31 c9 02 b0 16
>1a7e18		c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11 e2 20
>1a7e28		a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5 0f
>1a7e38		85 34 80 12 c2 20 18 a5 32 69 00 01 85 11 e2 20
>1a7e48		a5 34 69 00 85 13 22 69 7e 1a e2 20 a5 34 c5 13
>1a7e58		90 f4 c2 20 a5 32 c5 11 90 ec 20 d7 03 2b ab 28
>1a7e68		6b 08 0b e2 20 a9 41 20 18 00 a9 20 20 18 00 08
>1a7e78		c2 20 48 a9 7a 08 5b 68 28 c2 20 a5 00 85 18 e2
>1a7e88		20 a5 02 85 1a 22 d0 81 1a a9 20 20 18 00 c2 20
>1a7e98		18 a5 00 69 01 00 85 18 e2 20 a5 02 69 00 85 1a
>1a7ea8		e2 20 c2 10 a7 00 c9 c2 d0 0b 48 a7 18 49 ff 2f
>1a7eb8		96 08 00 80 0b c9 e2 d0 0c 48 a7 18 0f 96 08 00
>1a7ec8		8f 96 08 00 68 c2 20 29 ff 00 0a aa bf 6a 83 1a
>1a7ed8		aa 22 4a 81 1a e2 20 a7 00 aa bf 6c 85 1a 22 26
>1a7ee8		87 1a 22 f7 7e 1a 20 d7 03 20 ee 03 2b 28 6b 08
>1a7ef8		e2 20 48 29 3f 0a c2 10 aa 68 7c 05 7f 35 7f 50
>1a7f08		7f 57 7f 7c 7f 83 7f 9e 7f c0 7f d1 7f 0e 80 16
>1a7f18		80 27 80 38 80 3f 80 64 80 91 80 fd 7f e2 7f af
>1a7f28		7f 84 80 8e 80 a2 80 d1 80 7f 80 e2 80 a9 28 20
>1a7f38		18 00 22 f9 80 1a a9 2c 20 18 00 a9 58 20 18 00
>1a7f48		a9 29 20 18 00 4c f3 80 22 f9 80 1a 4c f3 80 e2
>1a7f58		20 48 a9 23 20 18 00 68 29 c0 c9 00 f0 0f 4a 4a
>1a7f68		2f 96 08 00 d0 07 22 03 81 1a 4c f3 80 22 f9 80
>1a7f78		1a 4c f3 80 22 03 81 1a 4c f3 80 a9 28 20 18 00
>1a7f88		22 f9 80 1a a9 29 20 18 00 a9 2c 20 18 00 a9 59
>1a7f98		20 18 00 4c f3 80 22 f9 80 1a a9 2c 20 18 00 a9
>1a7fa8		58 20 18 00 4c f3 80 22 f9 80 1a a9 2c 20 18 00
>1a7fb8		a9 59 20 18 00 4c f3 80 22 03 81 1a a9 2c 20 18
>1a7fc8		00 a9 59 20 18 00 4c f3 80 22 03 81 1a a9 2c 20
>1a7fd8		18 00 a9 58 20 18 00 4c f3 80 a9 28 20 18 00 22
>1a7fe8		03 81 1a a9 2c 20 18 00 a9 58 20 18 00 a9 29 20
>1a7ff8		18 00 4c f3 80 a9 28 20 18 00 22 f9 80 1a a9 29
>1a8008		20 18 00 4c f3 80 a9 41 20 18 00 4c f7 80 22 f9
>1a8018		80 1a a9 2c 20 18 00 a9 53 20 18 00 4c f3 80 a9
>1a8028		5b 20 18 00 22 f9 80 1a a9 5d 20 18 00 4c f3 80
>1a8038		22 11 81 1a 4c f7 80 a9 28 20 18 00 22 f9 80 1a
>1a8048		a9 2c 20 18 00 a9 53 20 18 00 a9 29 20 18 00 a9
>1a8058		2c 20 18 00 a9 59 20 18 00 4c f3 80 a9 5b 20 18
>1a8068		00 22 f9 80 1a a9 5d 20 18 00 a9 2c 20 18 00 a9
>1a8078		59 20 18 00 4c f3 80 a0 02 00 80 03 a0 01 00 22
>1a8088		77 81 1a 4c f7 80 4c f7 80 22 11 81 1a a9 2c 20
>1a8098		18 00 a9 58 20 18 00 4c f7 80 a9 23 20 18 00 8b
>1a80a8		a5 02 48 ab a6 00 e8 a0 01 00 22 e7 03 1a a9 2c
>1a80b8		20 18 00 a9 23 20 18 00 a6 00 a0 01 00 22 e7 03
>1a80c8		1a ab 22 26 87 1a 4c f3 80 a9 28 20 18 00 22 03
>1a80d8		81 1a a9 29 20 18 00 4c f3 80 a9 5b 20 18 00 22
>1a80e8		03 81 1a a9 5d 20 18 00 4c f3 80 22 26 87 1a 28
>1a80f8		6b 08 e2 20 a7 00 20 8e 04 28 6b 08 c2 30 a7 00
>1a8108		20 74 04 22 26 87 1a 28 6b 08 8b 0b c2 30 5a 08
>1a8118		c2 20 48 a9 7a 08 5b 68 28 08 e2 20 48 a9 00 48
>1a8128		ab 68 28 e2 20 a0 00 00 a7 00 99 92 08 22 26 87
>1a8138		1a c8 c0 03 00 d0 f1 22 d0 81 1a c2 30 7a 2b ab
>1a8148		28 6b 08 8b e2 20 c2 10 08 e2 20 48 a9 1a 48 ab
>1a8158		68 28 bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8
>1a8168		bd 00 00 20 18 00 e8 a9 20 20 18 00 ab 28 6b 08
>1a8178		0b 08 c2 20 48 a9 7a 08 5b 68 28 e2 20 c0 02 00
>1a8188		f0 14 a7 00 85 18 30 06 64 19 64 1a 80 1e a9 ff
>1a8198		85 19 85 1a 80 16 a7 00 85 18 22 26 87 1a a7 00
>1a81a8		85 19 30 04 64 1a 80 04 a9 ff 85 1a c2 20 38 a5
>1a81b8		00 65 18 85 18 e2 20 a5 02 65 1a 85 1a 22 d0 81
>1a81c8		1a 22 26 87 1a 2b 28 6b 08 0b c2 20 48 08 c2 20
>1a81d8		48 a9 48 08 5b 68 28 e2 20 a5 4c 20 8e 04 e2 20
>1a81e8		a9 3a 20 18 00 c2 20 a5 4a 20 74 04 68 2b 28 6b
>1a81f8		4f 52 41 00 41 4e 44 00 45 4f 52 00 41 44 43 00
>1a8208		53 54 41 00 4c 44 41 00 43 4d 50 00 53 42 43 00
>1a8218		41 53 4c 00 52 4f 4c 00 4c 53 52 00 52 4f 52 00
>1a8228		53 54 58 00 4c 44 58 00 44 45 43 00 49 4e 43 00
>1a8238		42 49 54 00 4a 4d 50 00 53 54 59 00 4c 44 59 00
>1a8248		43 50 59 00 43 50 58 00 42 52 4b 00 4a 53 52 00
>1a8258		52 54 49 00 52 54 53 00 50 48 50 00 50 4c 50 00
>1a8268		50 48 41 00 50 4c 41 00 44 45 59 00 54 41 59 00
>1a8278		49 4e 59 00 49 4e 58 00 43 4c 43 00 53 45 43 00
>1a8288		43 4c 49 00 53 45 49 00 54 59 41 00 43 4c 56 00
>1a8298		43 4c 44 00 53 45 44 00 54 58 41 00 54 58 53 00
>1a82a8		54 41 58 00 54 53 58 00 44 45 58 00 4e 4f 50 00
>1a82b8		42 50 4c 00 42 4d 49 00 42 56 43 00 42 56 53 00
>1a82c8		42 43 43 00 42 43 53 00 42 4e 45 00 42 45 51 00
>1a82d8		54 53 42 00 54 52 42 00 53 54 5a 00 42 52 41 00
>1a82e8		50 48 59 00 50 4c 59 00 50 48 58 00 50 4c 58 00
>1a82f8		50 48 44 00 50 4c 44 00 50 48 4b 00 52 54 4c 00
>1a8308		50 48 42 00 50 4c 42 00 57 41 49 00 58 42 41 00
>1a8318		54 43 53 00 54 53 43 00 54 43 44 00 54 44 43 00
>1a8328		54 58 59 00 54 59 58 00 53 54 50 00 58 43 45 00
>1a8338		43 4f 50 00 4a 53 4c 00 57 44 4d 00 50 45 52 00
>1a8348		42 52 4c 00 52 45 50 00 53 45 50 00 4d 56 50 00
>1a8358		4d 56 4e 00 50 45 49 00 50 45 41 00 4a 4d 4c 00
>1a8368		00 00 50 82 f8 81 38 83 f8 81 d8 82 f8 81 18 82
>1a8378		f8 81 60 82 f8 81 18 82 f8 82 d8 82 f8 81 18 82
>1a8388		f8 81 b8 82 f8 81 f8 81 f8 81 dc 82 f8 81 18 82
>1a8398		f8 81 80 82 f8 81 34 82 18 83 dc 82 f8 81 18 82
>1a83a8		f8 81 54 82 fc 81 3c 83 fc 81 38 82 fc 81 1c 82
>1a83b8		fc 81 64 82 fc 81 1c 82 fc 82 38 82 fc 81 1c 82
>1a83c8		fc 81 bc 82 fc 81 fc 81 fc 81 38 82 fc 81 1c 82
>1a83d8		fc 81 84 82 fc 81 30 82 1c 83 38 82 fc 81 1c 82
>1a83e8		fc 81 58 82 00 82 40 83 00 82 54 83 00 82 20 82
>1a83f8		00 82 68 82 00 82 20 82 00 83 3c 82 00 82 20 82
>1a8408		00 82 c0 82 00 82 00 82 00 82 58 83 00 82 20 82
>1a8418		00 82 88 82 00 82 e8 82 20 83 64 83 00 82 20 82
>1a8428		00 82 5c 82 04 82 44 83 04 82 e0 82 04 82 24 82
>1a8438		04 82 6c 82 04 82 24 82 04 83 3c 82 04 82 24 82
>1a8448		04 82 c4 82 04 82 04 82 04 82 e0 82 04 82 24 82
>1a8458		04 82 8c 82 04 82 ec 82 24 83 3c 82 04 82 24 82
>1a8468		04 82 e4 82 08 82 48 83 08 82 40 82 08 82 28 82
>1a8478		08 82 70 82 38 82 a0 82 08 83 40 82 08 82 28 82
>1a8488		08 82 c8 82 08 82 08 82 08 82 40 82 08 82 28 82
>1a8498		08 82 90 82 08 82 a4 82 28 83 e0 82 08 82 e0 82
>1a84a8		08 82 44 82 0c 82 2c 82 0c 82 44 82 0c 82 2c 82
>1a84b8		0c 82 74 82 0c 82 a8 82 0c 83 44 82 0c 82 2c 82
>1a84c8		0c 82 cc 82 0c 82 0c 82 0c 82 44 82 0c 82 2c 82
>1a84d8		0c 82 94 82 0c 82 ac 82 2c 83 44 82 0c 82 2c 82
>1a84e8		0c 82 48 82 10 82 4c 83 10 82 48 82 10 82 30 82
>1a84f8		10 82 78 82 10 82 b0 82 10 83 48 82 10 82 30 82
>1a8508		10 82 d0 82 10 82 10 82 10 82 5c 83 10 82 30 82
>1a8518		10 82 98 82 10 82 f0 82 30 83 64 83 10 82 30 82
>1a8528		10 82 4c 82 14 82 50 83 14 82 4c 82 14 82 34 82
>1a8538		14 82 7c 82 14 82 b4 82 14 83 4c 82 14 82 34 82
>1a8548		14 82 d4 82 14 82 14 82 14 82 60 83 14 82 34 82
>1a8558		14 82 9c 82 14 82 f4 82 34 83 54 82 14 82 34 82
>1a8568		14 82 00 00 13 00 02 09 01 01 01 0a 13 82 08 13
>1a8578		03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 08 13
>1a8588		03 07 07 0e 03 00 0b 09 01 01 01 0a 13 82 08 13
>1a8598		03 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 08 13
>1a85a8		07 07 07 0e 13 00 13 09 14 01 01 0a 13 82 08 13
>1a85b8		03 03 03 0b 12 04 0f 0c 14 05 05 0d 13 06 13 13
>1a85c8		0b 07 07 0b 13 00 16 09 01 01 01 0a 13 82 08 13
>1a85d8		15 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 13 13
>1a85e8		10 07 07 0e 12 00 16 09 01 01 01 0a 13 82 13 13
>1a85f8		03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13
>1a8608		03 07 07 0e 82 00 42 09 01 01 01 0a 13 82 13 13
>1a8618		03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13
>1a8628		07 07 06 0e 42 00 02 09 01 01 01 0a 13 82 13 13
>1a8638		03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 13 13
>1a8648		17 07 07 0e 42 00 02 09 01 01 01 0f 13 82 13 13
>1a8658		03 03 03 0b 12 04 0f 0c 03 05 05 0d 13 06 13 13
>1a8668		10 07 07 0e 01 01 01 02 01 01 02 02 00 01 01 03
>1a8678		01 01 03 01 02 01 01 00 02 02 02 02 41 00 08 64
>1a8688		64 3a 64 64 64 64 2c 58 00 0e 64 64 3a 64 64 64
>1a8698		64 00 0b 64 64 64 64 2c 58 00 07 64 64 64 64 2c
>1a86a8		59 00 06 64 64 64 64 00 03 64 64 2c 58 00 05 64
>1a86b8		64 2c 59 00 11 64 64 2c 53 00 09 64 64 00 01 23
>1a86c8		64 64 64 64 00 c2 23 64 64 2c 23 64 64 00 14 23
>1a86d8		64 64 00 02 28 64 64 2c 53 29 2c 59 00 0c 28 64
>1a86e8		64 64 64 2c 58 29 00 10 28 64 64 64 64 29 00 10
>1a86f8		28 64 64 2c 58 29 00 00 28 64 64 29 2c 59 00 04
>1a8708		28 64 64 29 00 0f 5b 64 64 64 64 5d 00 17 5b 64
>1a8718		64 5d 2c 59 00 0d 5b 64 64 5d 00 0a 00 00 08 c2
>1a8728		20 48 18 af 7a 08 00 69 01 00 8f 7a 08 00 e2 20
>1a8738		af 7c 08 00 69 00 8f 7c 08 00 c2 20 68 28 6b 08
>1a8748		c2 10 e2 20 da a2 08 00 0a b0 08 48 a9 30 20 18
>1a8758		00 80 06 48 a9 31 20 18 00 68 ca d0 eb fa 28 6b
>1a8768		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a7 32 f0 0a
>1a8778		c9 20 d0 06 22 26 87 1a 80 f2 6b 08 08 c2 20 48
>1a8788		a9 48 08 5b 68 28 22 26 87 1a 22 68 87 1a c2 30
>1a8798		a5 31 c2 20 29 ff 00 0a 0a aa a5 32 95 0d a5 34
>1a87a8		95 0f e2 20 a7 32 f0 14 c9 22 f0 06 22 26 87 1a
>1a87b8		80 f2 a9 00 87 32 22 26 87 1a e6 31 28 6b 08 c2
>1a87c8		20 48 a9 48 08 5b 68 28 e2 20 64 4a c2 20 64 50
>1a87d8		64 52 e2 20 a7 32 c9 3a f0 0d 20 0c 05 90 0e 22
>1a87e8		5e 7c 1a a9 01 85 4a 22 26 87 1a 80 e5 a5 4a f0
>1a87f8		16 a5 31 c2 20 29 ff 00 0a 0a aa a5 50 95 0d a5
>1a8808		52 95 0f e2 20 e6 31 6b e2 20 64 31 22 68 87 1a
>1a8818		a7 32 f0 21 c9 22 d0 06 22 83 87 1a 80 0a 22 c6
>1a8828		87 1a a5 31 c9 09 b0 0d a7 32 f0 09 c9 20 f0 dc
>1a8838		20 0c 05 b0 d7 6b 08 0b 08 c2 20 48 a9 48 08 5b
>1a8848		68 28 c2 10 e2 20 a2 31 00 74 00 ca d0 fb a9 00
>1a8858		85 02 85 34 c2 20 a9 00 4f 85 00 85 32 e2 20 22
>1a8868		68 87 1a c9 00 f0 38 c2 20 a5 32 85 08 e2 20 a5
>1a8878		34 85 0a a2 01 00 22 26 87 1a a7 32 d0 06 86 0b
>1a8888		64 31 80 1b c9 20 f0 03 e8 80 eb 86 0b a9 00 87
>1a8898		32 22 26 87 1a a7 08 c9 41 f0 07 22 10 88 1a 2b
>1a88a8		28 6b 22 68 87 1a a7 32 f0 f5 22 c6 87 1a 22 68
>1a88b8		87 1a a7 32 f0 e9 c2 20 a5 32 85 11 e2 20 a5 34
>1a88c8		85 13 22 26 87 1a a7 32 f0 26 c9 20 d0 f4 a9 00
>1a88d8		87 32 e6 31 22 26 87 1a 22 68 87 1a a7 32 f0 bf
>1a88e8		c2 20 a5 32 85 15 e2 20 a5 34 85 17 e6 31 80 af
>1a88f8		e6 31 80 ab 08 c2 10 e2 20 a5 31 d0 0f a2 f2 89
>1a8908		a9 1a 48 ab 20 64 04 20 d7 03 80 61 c2 20 a5 0d
>1a8918		8f 23 08 00 a5 0f 8f 25 08 00 20 e5 6a e2 20 a5
>1a8928		31 c9 01 d0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56
>1a8938		03 00 80 0e c2 20 a5 11 8f 54 03 00 a5 13 8f 56
>1a8948		03 00 22 18 11 00 b0 25 e2 20 a2 18 8a a9 1a 48
>1a8958		ab 20 64 04 af 2e 03 00 20 8e 04 a9 20 20 18 00
>1a8968		af 20 03 00 20 8e 04 20 d7 03 20 d7 03 28 6b 8b
>1a8978		08 c2 10 e2 20 a5 31 c9 03 f0 0f a2 f2 89 a9 1a
>1a8988		48 ab 20 64 04 20 d7 03 80 54 c2 20 a5 0d 8f 23
>1a8998		08 00 a5 0f 8f 25 08 00 20 e5 6a a5 11 8f 50 03
>1a89a8		00 a5 13 8f 52 03 00 a5 15 8f 58 03 00 a5 17 8f
>1a89b8		5a 03 00 22 1c 11 00 b0 25 e2 20 a2 02 8a a9 1a
>1a89c8		48 ab 20 64 04 af 2e 03 00 20 8e 04 a9 20 20 18
>1a89d8		00 af 20 03 00 20 8e 04 20 d7 03 20 d7 03 28 ab
>1a89e8		6b 5c c0 27 1a 6b 00 00 00 00 42 61 64 20 61 72
>1a89f8		67 75 6d 65 6e 74 73 0d 0d 00 55 6e 61 62 6c 65
>1a8a08		20 74 6f 20 73 61 76 65 20 66 69 6c 65 3a 20 00
>1a8a18		55 6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64 20 66
>1a8a28		69 6c 65 3a 20 00 0d 20 20 50 43 20 20 20 20 20
>1a8a38		41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>1a8a48		50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>1a8a58		58 44 49 5a 43 0d 00 41 43 44 46 47 4a 48 4c 4d
>1a8a68		52 3b 53 54 56 57 58 3e 3f 00 18 fb 08 c2 20 48
>1a8a78		a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>1a8a88		c2 30 20 b1 8a a9 ff fe 1b 08 e2 20 48 a9 1a 48
>1a8a98		ab 68 28 a2 77 d2 20 64 04 08 e2 20 48 a9 00 48
>1a8aa8		ab 68 28 4c c0 27 4c ae 8a 08 20 34 03 20 54 50
>1a8ab8		28 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1a8ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1106 times (17696 bytes)...
>1acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>1ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>1ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>1ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>1ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>1ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>1ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>1ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>1ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>1ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>1ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>1ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>1ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>1ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>1ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>1ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>1ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>1ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>1ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>1ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>1ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>1ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>1ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>1ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>1ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>1ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>1ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>1ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>1ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>1ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>1ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>1ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>1ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>1ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>1ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>1ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>1ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>1ad248		4f 53 00 54 41 4e 00 4c 4e 00 41 43 4f 53 00 41
>1ad258		53 49 4e 00 41 54 41 4e 00 45 58 50 00 53 51 52
>1ad268		00 49 4e 4b 45 59 00 0d 52 45 41 44 59 0d 00 43
>1ad278		32 35 36 20 46 6f 65 6e 69 78 20 42 41 53 49 43
>1ad288		38 31 36 20 76 30 2e 32 2e 30 2d 61 6c 70 68 61
>1ad298		2b 34 30 38 0d 00
>1b0000						.align 256
.1b0000						CREDITS_TEXT
>1b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>1b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>1b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>1b004f		20
>1b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>1b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>1b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>1b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>1b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>1b009f		20
>1b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b00ef		20
>1b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b013f		20
>1b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>1b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>1b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>1b0168		6e 79 20 41 6c 6c 61 69 72 65
>1b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>1b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b018a		20 20 20 20 20 20
>1b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>1b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>1b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>1b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b01da		20 20 20 20 20 20
>1b01e0		20				                .text " "
>1b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0229		20 20 20 20 20 20 20
>1b0230		20				                .text " "
>1b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0279		20 20 20 20 20 20 20
>1b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>1b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>1b0298		53 3a
>1b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>1b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>1b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>1b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>1b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>1b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b031d		20 20 20
>1b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>1b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>1b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>1b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>1b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>1b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>1b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>1b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>1b0398		75 73 68
>1b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>1b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>1b03c8		54 68 61 6e 6b 73 3a
>1b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>1b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0407		20 20 20 20 20 20 20 20 20
>1b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>1b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>1b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>1b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>1b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>1b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b045f		20
>1b0460		20				                .text " "
>1b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04a9		20 20 20 20 20 20 20
>1b04b0		20				                .text " "
>1b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04f9		20 20 20 20 20 20 20
>1b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>1b0508		45 53 20 41 55 54 48 4f 52 53 3a
>1b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>1b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b054b		20 20 20 20 20
>1b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>1b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>1b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>1b0578		63 6f 72 65 73 2e 6f 72 67
>1b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>1b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0599		20 20 20 20 20 20 20
>1b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>1b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>1b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>1b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>1b05d8		6d
>1b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>1b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>1b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>1b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>1b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>1b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>1b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>1b063b		20 20 20 20 20
>1b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>1b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>1b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>1b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>1b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b068b		20 20 20 20 20
>1b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>1b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>1b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>1b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>1b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06da		20 20 20 20 20 20
>1b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>1b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>1b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>1b0708		6a 61 64 61 20 47 6f 6d 65 7a
>1b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b072a		20 20 20 20 20 20
>1b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>1b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>1b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>1b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>1b0768		6f 6d
>1b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>1b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>1b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>1b0798		6e 69 78 20 55 29 3a 20 54 42 44
>1b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>1b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07cb		20 20 20 20 20
>1b07d0		20				                .text " "
>1b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0819		20 20 20 20 20 20 20
>1b0820		20				                .text " "
>1b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0869		20 20 20 20 20 20 20
>1b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>1b0878		54 48 41 4e 4b 53 3a
>1b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>1b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b08b7		20 20 20 20 20 20 20 20 20
>1b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>1b08c8		56 61 6e 68 61 72 65 6e
>1b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>1b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0908		20 20 20 20 20 20 20 20
>1b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>1b0918		65 77
>1b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>1b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>1b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>1b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>1b0988		65 66 65 72 65 6e 63 65 73 29
>1b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>1b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b09aa		20 20 20 20 20 20
>1b09b0		20				                .text " "
>1b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b09f9		20 20 20 20 20 20 20
>1b0a00		20				                .text " "
>1b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0a49		20 20 20 20 20 20 20
>1b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0a9f		20
>1b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>1b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>1b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>1b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>1b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>1b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>1b0aec		20 20 20 20
>1b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>1b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>1b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>1b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>1b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>1b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>1b0b3c		20 20 20 20
>1b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>1b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>1b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>1b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>1b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>1b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>1b0b8d		20 20 20
>1b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>1b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>1b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>1b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>1b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>1b0bdd		20 20 20
>1b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>1b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>1b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>1b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>1b0c2d		20 20 20
>1b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0c7f		20
>1b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>1b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c98		53 74 65 66 61 6e 79
>1b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>1b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cc7		20 20 20 20 20 20 20 20 20
>1b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>1b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>1b1768		20 20 20 20 20 20 20 20
>1b1770						.align 256
>1b1800		f4 f4 f4 f4 f4 f4 f4 f4		CREDITS_COLOR   .fill 80 * 60, $F4
>1b1808		f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4
;		...repeated 298 times (4768 bytes)...
>1b2ab8		f4 f4 f4 f4 f4 f4 f4 f4
.1e0000						BOOT_MENU
.1e0000						SplashScreenMain:
.1e0000		48		pha		                PHA             ; begin setdp macro
.1e0001		08		php		                PHP
.1e0002		c2 20		rep #$20	                REP #$20        ; set A long
.1e0004		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1e0007		5b		tcd		                TCD
.1e0008		28		plp		                PLP
.1e0009		68		pla		                PLA             ; end setdp macro
.1e000a		c2 10		rep #$10	                REP #$10        ; set X long
.1e000c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e000e		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.1e0012		a9 00		lda #$00	                LDA #$00
.1e0014		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0016		85 f1		sta $f1		                STA INTERRUPT_COUNT
.1e0018		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e001a		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.1e001e		29 04		and #$04	                AND #FNX0_INT02_TMR0
.1e0020		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.1e0024		20 ee 00	jsr $1e00ee	                JSR Splash_Get_Machine_ID
.1e0027		20 21 01	jsr $1e0121	                JSR Splash_Clear_Screen
.1e002a		20 0b 01	jsr $1e010b	                JSR Splash_Load_FontSet
.1e002d		22 08 03 1e	jsl $1e0308	                JSL Splashscreen_BitMapSetup
.1e0031		20 1b 06	jsr $1e061b	                JSR Model_Update_Info_Field
.1e0034		20 fc 05	jsr $1e05fc	                JSR Set_Text_Color
.1e0037		a9 00		lda #$00	                LDA #$00
.1e0039		85 a6		sta $a6		                STA LINE_INDEX  ; Point to the first line to be displayed
.1e003b		85 a7		sta $a7		                STA LINE_INDEX + 1
.1e003d		20 a3 08	jsr $1e08a3	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e0040						HAVE_FUN:
.1e0040		22 16 81 19	jsl $198116	                JSL BOOT_SOUND_OFF
.1e0044		22 3b 01 1e	jsl $1e013b	                JSL Splash_Moniker_Color_Rolling  ; Go Move The Colors on the Logo
.1e0048		a6 a6		ldx $a6		                LDX LINE_INDEX
.1e004a		e0 17 00	cpx #$0017	                CPX #NumberOfEntry
.1e004d		f0 08		beq $1e0057	                BEQ ByPassCharDisplay           ; If Equal all Lines have been displayed
.1e004f		20 e0 08	jsr $1e08e0	                JSR Line_Display_1_Character    ; Go move the cursor one stop
.1e0052		90 21		bcc $1e0075	                BCC Still_Displaying_Char
.1e0054		20 a3 08	jsr $1e08a3	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e0057						ByPassCharDisplay:
.1e0057		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0059		22 48 10 00	jsl $001048	                JSL GETCH               ; Try to get a character
.1e005d		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.1e005f		f0 14		beq $1e0075	                BEQ Still_Displaying_Char            ; No: keep waiting until timeout
.1e0061		c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.1e0063		f0 1f		beq $1e0084	                BEQ return              ; Yes: return it
.1e0065		c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.1e0067		f0 1b		beq $1e0084	                BEQ return              ; Yes: return it
.1e0069		c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.1e006b		f0 17		beq $1e0084	                BEQ return              ; Yes: return it
.1e006d		c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.1e006f		f0 13		beq $1e0084	                BEQ return              ; Yes: return it
.1e0071		c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.1e0073		f0 0d		beq $1e0082	                BEQ exitshere
.1e0075						Still_Displaying_Char:
.1e0075						WaitForNextSOF:
.1e0075		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0
.1e0079		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e007b		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.1e007d		d0 f6		bne $1e0075	                BNE WaitForNextSOF;
.1e007f		4c 40 00	jmp $1e0040	                JMP HAVE_FUN
.1e0082						exitshere:
.1e0082						timeout
.1e0082		a9 00		lda #$00	                LDA #0                  ; Return 0 for a timeout / SPACE
.1e0084						return
.1e0084		8f 08 00 00	sta $000008	                STA @l KRNL_BOOT_MENU_K          ; Store ther Keyboard Value
.1e0088		a9 00		lda #$00	                LDA #$00
.1e008a		8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L         ; Disable Everything
.1e008e		22 3c 05 1e	jsl $1e053c	                JSL SS_VDMA_CLEAR_MEMORY_640_480 ; Clear the Bitmap Screen
.1e0092		20 a7 00	jsr $1e00a7	                JSR VickyII_Registers_Clear      ; Reset All Vicky Registers
.1e0095		22 c0 10 00	jsl $0010c0	                JSL INITFONTSET ; Reload the Official FONT set
.1e0099		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR ; Reset the Cursor to its origin
.1e009d		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.1e00a1		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE  ; Init VICKY TextMode now contains Hi-Res Dipswitch read and Automatic Text Size Parameter adjust
.1e00a5		ea		nop		                NOP
.1e00a6		6b		rtl		                RTL
.1e00a7						VickyII_Registers_Clear:
.1e00a7		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00a9		c2 10		rep #$10	                REP #$10        ; set X long
.1e00ab		a2 00 00	ldx #$0000	                LDX #$0000
.1e00ae		a9 00		lda #$00	                LDA #$00
.1e00b0						ClearSpriteRegisters:
.1e00b0		9f 00 0c af	sta $af0c00,x	                STA @l SP00_CONTROL_REG, X
.1e00b4		e8		inx		                INX
.1e00b5		e0 00 02	cpx #$0200	                CPX #$0200
.1e00b8		d0 f6		bne $1e00b0	                BNE ClearSpriteRegisters
.1e00ba		a2 00 00	ldx #$0000	                LDX #$0000
.1e00bd		a9 00		lda #$00	                LDA #$00
.1e00bf						ClearTiles0Registers:
.1e00bf		9f 00 02 af	sta $af0200,x	                STA @l TL0_CONTROL_REG, X
.1e00c3		e8		inx		                INX
.1e00c4		e0 30 00	cpx #$0030	                CPX #$0030
.1e00c7		d0 f6		bne $1e00bf	                BNE ClearTiles0Registers
.1e00c9		ea		nop		                NOP
.1e00ca		a2 00 00	ldx #$0000	                LDX #$0000
.1e00cd		a9 00		lda #$00	                LDA #$00
.1e00cf						ClearTiles1Registers:
.1e00cf		9f 80 02 af	sta $af0280,x	                STA @l TILESET0_ADDY_L, X
.1e00d3		e8		inx		                INX
.1e00d4		e0 20 00	cpx #$0020	                CPX #$0020
.1e00d7		d0 f6		bne $1e00cf	                BNE ClearTiles1Registers
.1e00d9		ea		nop		                NOP
.1e00da		a2 00 00	ldx #$0000	                LDX #$0000
.1e00dd		a9 00		lda #$00	                LDA #$00
.1e00df						ClearBitmapRegisters:
.1e00df		9f 00 01 af	sta $af0100,x	                STA @l BM0_CONTROL_REG, X
.1e00e3		9f 08 01 af	sta $af0108,x	                STA @l BM1_CONTROL_REG, X
.1e00e7		e8		inx		                INX
.1e00e8		e0 10 00	cpx #$0010	                CPX #$0010
.1e00eb		d0 f2		bne $1e00df	                BNE ClearBitmapRegisters
.1e00ed		60		rts		                RTS
.1e00ee						Splash_Get_Machine_ID
.1e00ee		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00f0		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e00f4		29 03		and #$03	                AND #$03        ; Isolate the first 2 bits to know if it is a U or FMX
.1e00f6		85 b0		sta $b0		                STA MODEL
.1e00f8		c9 00		cmp #$00	                CMP #$00
.1e00fa		f0 0e		beq $1e010a	                BEQ DONE
.1e00fc		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e0100		29 04		and #$04	                AND #GABE_SYS_STAT_MID2 ; High 4Meg, Low - 2Megs
.1e0102		c9 04		cmp #$04	                CMP #GABE_SYS_STAT_MID2
.1e0104		f0 04		beq $1e010a	                BEQ DONE
.1e0106		a9 02		lda #$02	                LDA #$02
.1e0108		85 b0		sta $b0		                STA MODEL       ; In this Scheme 00 - FMX, 01 - U+, 02 - U
.1e010a						DONE:
.1e010a		60		rts		                RTS
.1e010b						Splash_Load_FontSet
.1e010b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e010d		c2 10		rep #$10	                REP #$10        ; set X long
.1e010f		a2 00 00	ldx #$0000	                LDX #$0000
.1e0112						DONE_LOADING_FONT:
.1e0112		bf 00 08 1f	lda $1f0800,x	                LDA @l FONT_4_SPLASH, X
.1e0116		9f 00 80 af	sta $af8000,x	                STA @l FONT_MEMORY_BANK0, X
.1e011a		e8		inx		                INX
.1e011b		e0 00 08	cpx #$0800	                CPX #2048
.1e011e		d0 f2		bne $1e0112	                BNE DONE_LOADING_FONT
.1e0120		60		rts		                RTS
.1e0121						Splash_Clear_Screen
.1e0121		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0123		c2 10		rep #$10	                REP #$10        ; set X long
.1e0125		a2 00 00	ldx #$0000	                LDX #$0000
.1e0128						Branch_Clear:
.1e0128		a9 20		lda #$20	                LDA #$20
.1e012a		9f 00 a0 af	sta $afa000,x	                STA @l CS_TEXT_MEM_PTR,X
.1e012e		a9 f0		lda #$f0	                LDA #$F0
.1e0130		9f 00 c0 af	sta $afc000,x	                STA @l CS_COLOR_MEM_PTR,X
.1e0134		e8		inx		                INX
.1e0135		e0 00 20	cpx #$2000	                CPX #$2000
.1e0138		d0 ee		bne $1e0128	                BNE Branch_Clear
.1e013a		60		rts		                RTS
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
.1e013b						Splash_Moniker_Color_Rolling
.1e013b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e013d		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.1e0141		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e0143		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.1e0147		a5 f0		lda $f0		                LDA INTERRUPT_STATE
.1e0149		c9 00		cmp #$00	                CMP #IRQ_SOF_ST0
.1e014b		f0 0c		beq $1e0159	                BEQ SERVE_STATE0
.1e014d		c9 01		cmp #$01	                CMP #IRQ_SOF_ST1
.1e014f		f0 1a		beq $1e016b	                BEQ SERVE_STATE1
.1e0151		c9 02		cmp #$02	                CMP #IRQ_SOF_ST2
.1e0153		d0 03		bne $1e0158	                BNE NOT_SERVE_STATE2
.1e0155		82 39 01	brl $1e0291	                BRL SERVE_STATE2
.1e0158						NOT_SERVE_STATE2
.1e0158		6b		rtl		                RTL
.1e0159						SERVE_STATE0
.1e0159		a5 f1		lda $f1		                LDA INTERRUPT_COUNT
.1e015b		c9 04		cmp #$04	                CMP #$04
.1e015d		f0 03		beq $1e0162	                BEQ SERVE_NEXT_STATE
.1e015f		e6 f1		inc $f1		                INC INTERRUPT_COUNT
.1e0161		6b		rtl		                RTL
.1e0162						SERVE_NEXT_STATE
.1e0162		a9 00		lda #$00	                LDA #$00
.1e0164		85 f1		sta $f1		                STA INTERRUPT_COUNT
.1e0166		a9 01		lda #$01	                LDA #IRQ_SOF_ST1
.1e0168		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e016a		6b		rtl		                RTL
.1e016b						SERVE_STATE1
.1e016b		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e016d		a9 00 00	lda #$0000	                LDA #$0000
.1e0170		a2 00 00	ldx #$0000	                LDX #$0000
.1e0173		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1e0175		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0177		bf c0 02 1e	lda $1e02c0,x	                LDA @lCOLOR_POINTER+0, X
.1e017b		aa		tax		                TAX
.1e017c		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e0180		8f e0 3f af	sta $af3fe0	                STA @lGRPH_LUT7_PTR+992
.1e0184		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0188		8f e1 3f af	sta $af3fe1	                STA @lGRPH_LUT7_PTR+993
.1e018c		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e0190		8f e2 3f af	sta $af3fe2	                STA @lGRPH_LUT7_PTR+994
.1e0194		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0196		bf c1 02 1e	lda $1e02c1,x	                LDA @lCOLOR_POINTER+1, X
.1e019a		aa		tax		                TAX
.1e019b		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e019f		8f e4 3f af	sta $af3fe4	                STA @lGRPH_LUT7_PTR+996
.1e01a3		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01a7		8f e5 3f af	sta $af3fe5	                STA @lGRPH_LUT7_PTR+997
.1e01ab		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01af		8f e6 3f af	sta $af3fe6	                STA @lGRPH_LUT7_PTR+998
.1e01b3		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01b5		bf c2 02 1e	lda $1e02c2,x	                LDA @lCOLOR_POINTER+2, X
.1e01b9		aa		tax		                TAX
.1e01ba		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01be		8f e8 3f af	sta $af3fe8	                STA @lGRPH_LUT7_PTR+1000
.1e01c2		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01c6		8f e9 3f af	sta $af3fe9	                STA @lGRPH_LUT7_PTR+1001
.1e01ca		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01ce		8f ea 3f af	sta $af3fea	                STA @lGRPH_LUT7_PTR+1002
.1e01d2		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01d4		bf c3 02 1e	lda $1e02c3,x	                LDA @lCOLOR_POINTER+3, X
.1e01d8		aa		tax		                TAX
.1e01d9		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01dd		8f ec 3f af	sta $af3fec	                STA @lGRPH_LUT7_PTR+1004
.1e01e1		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01e5		8f ed 3f af	sta $af3fed	                STA @lGRPH_LUT7_PTR+1005
.1e01e9		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01ed		8f ee 3f af	sta $af3fee	                STA @lGRPH_LUT7_PTR+1006
.1e01f1		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01f3		bf c4 02 1e	lda $1e02c4,x	                LDA @lCOLOR_POINTER+4, X
.1e01f7		aa		tax		                TAX
.1e01f8		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01fc		8f f0 3f af	sta $af3ff0	                STA @lGRPH_LUT7_PTR+1008
.1e0200		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0204		8f f1 3f af	sta $af3ff1	                STA @lGRPH_LUT7_PTR+1009
.1e0208		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e020c		8f f2 3f af	sta $af3ff2	                STA @lGRPH_LUT7_PTR+1010
.1e0210		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0212		bf c5 02 1e	lda $1e02c5,x	                LDA @lCOLOR_POINTER+5, X
.1e0216		aa		tax		                TAX
.1e0217		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e021b		8f f4 3f af	sta $af3ff4	                STA @lGRPH_LUT7_PTR+1012
.1e021f		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0223		8f f5 3f af	sta $af3ff5	                STA @lGRPH_LUT7_PTR+1013
.1e0227		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e022b		8f f6 3f af	sta $af3ff6	                STA @lGRPH_LUT7_PTR+1014
.1e022f		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0231		bf c6 02 1e	lda $1e02c6,x	                LDA @lCOLOR_POINTER+6, X
.1e0235		aa		tax		                TAX
.1e0236		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e023a		8f f8 3f af	sta $af3ff8	                STA @lGRPH_LUT7_PTR+1016
.1e023e		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0242		8f f9 3f af	sta $af3ff9	                STA @lGRPH_LUT7_PTR+1017
.1e0246		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e024a		8f fa 3f af	sta $af3ffa	                STA @lGRPH_LUT7_PTR+1018
.1e024e		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0250		bf c7 02 1e	lda $1e02c7,x	                LDA @lCOLOR_POINTER+7, X
.1e0254		aa		tax		                TAX
.1e0255		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e0259		8f fc 3f af	sta $af3ffc	                STA @lGRPH_LUT7_PTR+1020
.1e025d		8f 50 1f af	sta $af1f50	                STA @lFG_CHAR_LUT_PTR + $10           ;
.1e0261		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0265		8f fd 3f af	sta $af3ffd	                STA @lGRPH_LUT7_PTR+1021
.1e0269		8f 51 1f af	sta $af1f51	                STA @lFG_CHAR_LUT_PTR + $11            ;
.1e026d		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e0271		8f fe 3f af	sta $af3ffe	                STA @lGRPH_LUT7_PTR+1022
.1e0275		8f 52 1f af	sta $af1f52	                STA @lFG_CHAR_LUT_PTR + $12            ;
.1e0279						HERE
.1e0279		18		clc		                CLC
.1e027a		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.1e027c		69 09		adc #$09	                ADC #$09
.1e027e		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e0280		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.1e0282		c9 48		cmp #$48	                CMP #$48
.1e0284		d0 04		bne $1e028a	                BNE EXIT_COLOR_CHANGE
.1e0286		a9 00		lda #$00	                LDA #$00
.1e0288		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e028a						EXIT_COLOR_CHANGE
.1e028a		c2 10		rep #$10	                REP #$10        ; set X long
.1e028c		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e028e		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0290		6b		rtl		                RTL
.1e0291						SERVE_STATE2
.1e0291		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e0293		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0295		6b		rtl		                RTL
>1e0296						.align 16
>1e02a0		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>1e02a4		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>1e02a8		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>1e02ac		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>1e02b0		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>1e02b4		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>1e02b8		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>1e02bc		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>1e02c0		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>1e02c8		00
>1e02c9		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>1e02d1		00
>1e02d2		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>1e02da		00
>1e02db		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>1e02e3		00
>1e02e4		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>1e02ec		00
>1e02ed		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>1e02f5		00
>1e02f6		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>1e02fe		00
>1e02ff		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>1e0307		00

;******  Processing file: src\SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480
.1e0308						Splashscreen_BitMapSetup
.1e0308		e2 20		sep #$20	                SEP #$20        ; set A short
.1e030a		c2 10		rep #$10	                REP #$10        ; set X long
.1e030c		a9 0f		lda #$0f	        LDA #( Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay );
.1e030e		8f 00 00 af	sta $af0000	        STA @l MASTER_CTRL_REG_L
.1e0312		a9 00		lda #$00	        LDA #$00
.1e0314		8f 01 00 af	sta $af0001	        STA @l MASTER_CTRL_REG_H
.1e0318		a9 00		lda #$00	        LDA #$00
.1e031a		8f 00 01 af	sta $af0100	        STA @l BM0_CONTROL_REG
.1e031e		a9 0f		lda #$0f	        LDA #( BM_Enable | BM_LUT7)
.1e0320		8f 08 01 af	sta $af0108	        STA @l BM1_CONTROL_REG
.1e0324		a9 00		lda #$00	        LDA #$00
.1e0326		8f 09 01 af	sta $af0109	        STA @l BM1_START_ADDY_L
.1e032a		a9 00		lda #$00	        LDA #$00
.1e032c		8f 0a 01 af	sta $af010a	        STA @l BM1_START_ADDY_M
.1e0330		8f 0b 01 af	sta $af010b	        STA @l BM1_START_ADDY_H
.1e0334		a9 01		lda #$01	        LDA #$01
.1e0336		8f 04 00 af	sta $af0004	        STA BORDER_CTRL_REG
.1e033a		a9 08		lda #$08	        LDA #$08
.1e033c		8f 08 00 af	sta $af0008	        STA BORDER_X_SIZE
.1e0340		8f 09 00 af	sta $af0009	        STA BORDER_Y_SIZE
.1e0344		a9 80		lda #$80	        LDA #$80
.1e0346		8f 06 00 af	sta $af0006	        STA BORDER_COLOR_G
.1e034a		a9 00		lda #$00	        LDA #$00
.1e034c		8f 05 00 af	sta $af0005	        STA BORDER_COLOR_B
.1e0350		8f 07 00 af	sta $af0007	        STA BORDER_COLOR_R
.1e0354		a9 a0		lda #$a0	        LDA #$A0
.1e0356		8f 12 00 af	sta $af0012	        STA @l VKY_TXT_CURSOR_CHAR_REG
.1e035a		a9 10		lda #$10	        LDA #$10
.1e035c		8f 0e 00 af	sta $af000e	        STA @l BACKGROUND_COLOR_G
.1e0360		a9 10		lda #$10	        LDA #$10
.1e0362		8f 0f 00 af	sta $af000f	        STA @l BACKGROUND_COLOR_R
.1e0366		8f 0d 00 af	sta $af000d	        STA @l BACKGROUND_COLOR_B
.1e036a		e2 20		sep #$20	                SEP #$20        ; set A short
.1e036c		c2 10		rep #$10	                REP #$10        ; set X long
.1e036e		a2 00 00	ldx #$0000	        LDX #$0000
.1e0371						SS_LUT_BRANCH:
.1e0371		bf 00 0e 1e	lda $1e0e00,x	        LDA @l SS_MONIKER_LUT, X
.1e0375		ea		nop		        NOP
.1e0376		9f 00 3c af	sta $af3c00,x	        STA @l GRPH_LUT7_PTR, X
.1e037a		e8		inx		        INX
.1e037b		e0 00 04	cpx #$0400	        CPX #1024
.1e037e		d0 f1		bne $1e0371	        BNE SS_LUT_BRANCH
.1e0380		a9 00		lda #$00	        LDA #$00
.1e0382		8f 04 3c af	sta $af3c04	        STA @l GRPH_LUT7_PTR + 4
.1e0386		8f 05 3c af	sta $af3c05	        STA @l GRPH_LUT7_PTR + 5
.1e038a		8f 06 3c af	sta $af3c06	        STA @l GRPH_LUT7_PTR + 6
.1e038e		22 3c 05 1e	jsl $1e053c	        JSL SS_VDMA_CLEAR_MEMORY_640_480;
.1e0392		c2 20		rep #$20	                REP #$20        ; set A long
.1e0394		a9 00 12	lda #$1200	        LDA #<>SS_MONIKER      ; Set up the Source
.1e0397		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e039b		a9 00 50	lda #$5000	        LDA #<>( C256Moniker_SizeX * C256Moniker_SizeY )
.1e039e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e03a2		a9 00 00	lda #$0000	        LDA #$0000
.1e03a5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e03a9		a9 a0 78	lda #$78a0	        LDA #<>( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)    ; Set up the Source
.1e03ac		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e03b0		a9 40 01	lda #$0140	        LDA #C256Moniker_SizeX
.1e03b3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e03b7		a9 40 00	lda #$0040	        LDA #C256Moniker_SizeY
.1e03ba		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e03be		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e03c1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e03c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03c7		a9 1e		lda #$1e	        LDA #`SS_MONIKER
.1e03c9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e03cd		a9 00		lda #$00	        LDA #`( C256Moniker_SizeX * C256Moniker_SizeY )
.1e03cf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e03d3		a9 00		lda #$00	        LDA #$00
.1e03d5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e03d9		a9 00		lda #$00	        LDA #`( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)
.1e03db		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e03df		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e03e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03e5		af b0 00 00	lda $0000b0	        LDA @lMODEL
.1e03e9		29 03		and #$03	        AND #$03
.1e03eb		c9 00		cmp #$00	        CMP #$00
.1e03ed		f0 0b		beq $1e03fa	        BEQ DMA_FMX_Moniker
.1e03ef		c9 01		cmp #$01	        CMP #$01
.1e03f1		f0 5b		beq $1e044e	        BEQ DMA_UPlus_Moniker
.1e03f3		c9 02		cmp #$02	        CMP #$02
.1e03f5		d0 03		bne $1e03fa	        BNE BAD_MODEL_NUMBER
.1e03f7		82 a8 00	brl $1e04a2	        BRL DMA_U_Moniker
.1e03fa						 BAD_MODEL_NUMBER:
.1e03fa						DMA_FMX_Moniker:
.1e03fa		c2 20		rep #$20	                REP #$20        ; set A long
.1e03fc		a9 00 62	lda #$6200	        LDA #<>SS_FMX_TXT      ; Set up the Source
.1e03ff		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e0403		a9 00 32	lda #$3200	        LDA #<>( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e0406		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e040a		a9 00 00	lda #$0000	        LDA #$0000
.1e040d		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0411		a9 f0 13	lda #$13f0	        LDA #<>( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)    ; Set up the Source
.1e0414		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0418		a9 a0 00	lda #$00a0	        LDA #FMXMoniker_SizeX
.1e041b		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e041f		a9 50 00	lda #$0050	        LDA #FMXMoniker_SizeY
.1e0422		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e0426		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e0429		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e042d		e2 20		sep #$20	                SEP #$20        ; set A short
.1e042f		a9 1e		lda #$1e	        LDA #`SS_FMX_TXT
.1e0431		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0435		a9 00		lda #$00	        LDA #`( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e0437		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e043b		a9 00		lda #$00	        LDA #$00
.1e043d		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0441		a9 01		lda #$01	        LDA #`( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)
.1e0443		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e0447		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e044b		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e044e						DMA_UPlus_Moniker:
.1e044e		c2 20		rep #$20	                REP #$20        ; set A long
.1e0450		a9 00 94	lda #$9400	        LDA #<>SS_UPlus_TXT      ; Set up the Source
.1e0453		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e0457		a9 00 18	lda #$1800	        LDA #<>( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e045a		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e045e		a9 00 00	lda #$0000	        LDA #$0000
.1e0461		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0465		a9 10 14	lda #$1410	        LDA #<>( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)    ; Set up the Source
.1e0468		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e046c		a9 60 00	lda #$0060	        LDA #UPlusMoniker_SizeX
.1e046f		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e0473		a9 40 00	lda #$0040	        LDA #UPlusMoniker_SizeY
.1e0476		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e047a		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e047d		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e0481		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0483		a9 1e		lda #$1e	        LDA #`SS_UPlus_TXT
.1e0485		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0489		a9 00		lda #$00	        LDA #`( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e048b		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e048f		a9 00		lda #$00	        LDA #$00
.1e0491		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0495		a9 01		lda #$01	        LDA #`( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)
.1e0497		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e049b		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e049f		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e04a2						DMA_U_Moniker:
.1e04a2		c2 20		rep #$20	                REP #$20        ; set A long
.1e04a4		a9 00 ac	lda #$ac00	        LDA #<>SS_U_TXT      ; Set up the Source
.1e04a7		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e04ab		a9 00 10	lda #$1000	        LDA #<>( UMoniker_SizeX *UMoniker_SizeY )
.1e04ae		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e04b2		a9 00 00	lda #$0000	        LDA #$0000
.1e04b5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e04b9		a9 20 14	lda #$1420	        LDA #<>( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)    ; Set up the Source
.1e04bc		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e04c0		a9 40 00	lda #$0040	        LDA #UMoniker_SizeX
.1e04c3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e04c7		a9 40 00	lda #$0040	        LDA #UMoniker_SizeY
.1e04ca		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e04ce		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e04d1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e04d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04d7		a9 1e		lda #$1e	        LDA #`SS_U_TXT
.1e04d9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e04dd		a9 00		lda #$00	        LDA #`( UMoniker_SizeX * UMoniker_SizeY )
.1e04df		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e04e3		a9 00		lda #$00	        LDA #$00
.1e04e5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e04e9		a9 01		lda #$01	        LDA #`( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)
.1e04eb		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e04ef		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e04f3		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e04f6						Done_DMA_Model_Moniker
.1e04f6		6b		rtl		        RTL
.1e04f7						SS_VDMA_SETUP_2_TRANSFER_IMAGE
.1e04f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04f9		a9 11		lda #$11	        LDA #( SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src )
.1e04fb		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e04ff		a9 13		lda #$13	        LDA #( VDMA_CTRL_Enable |  VDMA_CTRL_SysRAM_Src | VDMA_CTRL_1D_2D )
.1e0501		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0505		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0507		af 00 04 af	lda $af0400	        LDA @l VDMA_CONTROL_REG
.1e050b		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e050d		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0511		af 20 04 af	lda $af0420	        LDA @l SDMA_CTRL_REG0
.1e0515		09 80		ora #$80	        ORA #SDMA_CTRL0_Start_TRF
.1e0517		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e051b		ea		nop		        NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e051c		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e051d		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e051e		ea		nop		        NOP
.1e051f		ea		nop		        NOP
.1e0520		ea		nop		        NOP
.1e0521		ea		nop		        NOP
.1e0522		ea		nop		        NOP
.1e0523		ea		nop		        NOP
.1e0524		ea		nop		        NOP
.1e0525		a9 00		lda #$00	        LDA #$00
.1e0527		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e052b						NOTFINISHED:
.1e052b		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e052f		29 80		and #$80	        AND #$80
.1e0531		c9 80		cmp #$80	        CMP #$80
.1e0533		f0 f6		beq $1e052b	        BEQ NOTFINISHED
.1e0535		a9 00		lda #$00	        LDA #$00
.1e0537		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e053b		6b		rtl		        RTL
.1e053c						SS_VDMA_CLEAR_MEMORY_640_480
.1e053c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e053e		a9 05		lda #$05	        LDA #( VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill )
.1e0540		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0544		a9 00		lda #$00	        LDA #$00
.1e0546		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e054a		c2 20		rep #$20	                REP #$20        ; set A long
.1e054c		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e054f		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0553		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0555		a9 00		lda #$00	        LDA #$00
.1e0557		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e055b		c2 20		rep #$20	                REP #$20        ; set A long
.1e055d		a9 00 b0	lda #$b000	        LDA #<>(640*480)
.1e0560		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e0564		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0566		a9 04		lda #$04	        LDA #`(640*480)
.1e0568		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e056c		a9 00		lda #$00	        LDA #$00
.1e056e		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0572		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e0576		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e0578		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e057c		ea		nop		         NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e057d		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e057e		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e057f		ea		nop		        NOP
.1e0580		ea		nop		        NOP
.1e0581		ea		nop		        NOP
.1e0582		ea		nop		        NOP
.1e0583		ea		nop		        NOP
.1e0584						SS_VDMA_CLR_LOOPA:
.1e0584		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e0588		29 80		and #$80	        AND #$80
.1e058a		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e058c		f0 f6		beq $1e0584	        BEQ SS_VDMA_CLR_LOOPA
.1e058e		ea		nop		        NOP
.1e058f		a9 00		lda #$00	        LDA #$00
.1e0591		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0595		6b		rtl		        RTL
.1e0596						SS_VDMA_TRANSFER_VRAM_2_VRAM
.1e0596		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0598		a9 01		lda #$01	        LDA #( VDMA_CTRL_Enable )
.1e059a		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e059e		a9 00		lda #$00	        LDA #$00
.1e05a0		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e05a4		c2 20		rep #$20	                REP #$20        ; set A long
.1e05a6		a9 00 96	lda #$9600	        LDA #$9600      ; Set up the Source
.1e05a9		8f 02 04 af	sta $af0402	        STA @l VDMA_SRC_ADDY_L
.1e05ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05af		a9 00		lda #$00	        LDA #$00
.1e05b1		8f 04 04 af	sta $af0404	        STA @l VDMA_SRC_ADDY_H
.1e05b5		c2 20		rep #$20	                REP #$20        ; set A long
.1e05b7		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e05ba		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e05be		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05c0		a9 00		lda #$00	        LDA #$00
.1e05c2		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e05c6		c2 20		rep #$20	                REP #$20        ; set A long
.1e05c8		a9 00 14	lda #$1400	        LDA #<>(320*16)
.1e05cb		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e05cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05d1		a9 00		lda #$00	        LDA #`(320*16)
.1e05d3		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e05d7		a9 00		lda #$00	        LDA #$00
.1e05d9		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e05dd		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e05e1		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e05e3		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e05e7		ea		nop		        NOP
.1e05e8		ea		nop		        NOP
.1e05e9		ea		nop		        NOP
.1e05ea						SS_VDMA_CLR_LOOPB:
.1e05ea		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e05ee		29 80		and #$80	        AND #$80
.1e05f0		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e05f2		f0 f6		beq $1e05ea	        BEQ SS_VDMA_CLR_LOOPB
.1e05f4		ea		nop		        NOP
.1e05f5		a9 00		lda #$00	        LDA #$00
.1e05f7		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e05fb		6b		rtl		        RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/Splashscreen_Text_Display.asm

=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
.1e05fc						Set_Text_Color:
.1e05fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e05fe		a9 00 00	lda #$0000	            LDA #00
.1e0601		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e0603		a9 30 00	lda #$0030	            LDA #48
.1e0606		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e0608		20 fc 08	jsr $1e08fc	            JSR Line_Display_Compute_Pointer
.1e060b		a0 00 00	ldy #$0000	            LDY #$0000
.1e060e		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0610		a9 40		lda #$40	            LDA #$40
.1e0612						SetColorBranch:
.1e0612		97 a8		sta [$a8],y	            STA [COLOR_DST_PTR_L],Y
.1e0614		c8		iny		            INY
.1e0615		c0 50 00	cpy #$0050	            CPY #80
.1e0618		d0 f8		bne $1e0612	            BNE SetColorBranch
.1e061a		60		rts		            RTS
.1e061b						Model_Update_Info_Field:
.1e061b		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e061d		a9 00 00	lda #$0000	            LDA #$0000
.1e0620		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0622		a5 b0		lda $b0		            LDA MODEL
.1e0624		0a		asl a		            ASL
.1e0625		0a		asl a		            ASL
.1e0626		aa		tax		            TAX
.1e0627		c2 20		rep #$20	                REP #$20        ; set A long
.1e0629		bf af 0c 1e	lda $1e0caf,x	            LDA MODEL_TABLE, X
.1e062d		85 a0		sta $a0		            STA MOD_SELECT_L
.1e062f		bf b1 0c 1e	lda $1e0cb1,x	            LDA MODEL_TABLE + 2, X
.1e0633		85 a2		sta $a2		            STA MOD_SELECT_H
.1e0635		a0 00 00	ldy #$0000	            LDY #$0000
.1e0638		84 a6		sty $a6		            STY LINE_INDEX
.1e063a						Next_Change_Here:
.1e063a		c2 20		rep #$20	                REP #$20        ; set A long
.1e063c		a4 a6		ldy $a6		            LDY LINE_INDEX
.1e063e		bb		tyx		            TYX
.1e063f		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e0641		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e0643		bf ff 0c 1e	lda $1e0cff,x	            LDA LINE_MOD, X
.1e0647		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0649		c8		iny		            INY
.1e064a		c8		iny		            INY
.1e064b		bb		tyx		            TYX
.1e064c		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e064e		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e0650		bf ff 0c 1e	lda $1e0cff,x	            LDA LINE_MOD, X
.1e0654		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0656		c8		iny		            INY
.1e0657		c8		iny		            INY
.1e0658		84 a6		sty $a6		            STY LINE_INDEX
.1e065a		c0 10 00	cpy #$0010	            CPY #16
.1e065d		f0 10		beq $1e066f	            BEQ LetsMoveOn
.1e065f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0661		a0 00 00	ldy #$0000	            LDY #$0000
.1e0664						nextchar:
.1e0664		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e0666		c9 00		cmp #$00	            CMP #$00
.1e0668		f0 d0		beq $1e063a	            BEQ Next_Change_Here
.1e066a		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e066c		c8		iny		            INY
.1e066d		80 f5		bra $1e0664	            BRA nextchar
.1e066f						LetsMoveOn:
.1e066f		af 0b 0d 1e	lda $1e0d0b	            LDA LINE_MOD + 12
.1e0673		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0675		a0 00 00	ldy #$0000	            LDY #$0000
.1e0678		e2 20		sep #$20	                SEP #$20        ; set A short
.1e067a		af 05 e8 af	lda $afe805	            LDA @lREVOFPCB_C
.1e067e		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0680		c8		iny		            INY
.1e0681		af 06 e8 af	lda $afe806	            LDA @lREVOFPCB_4
.1e0685		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0687		c8		iny		            INY
.1e0688		af 07 e8 af	lda $afe807	            LDA @lREVOFPCB_A
.1e068c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e068e		18		clc		            CLC
.1e068f		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR   ; it is in BCD
.1e0693		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0696		8f da 0a 1e	sta $1e0ada	            STA @lLINE8 + 56    ; FAT VICKY in U/U+ Model
.1e069a		8f 13 0b 1e	sta $1e0b13	            STA @lLINE9 + 47    ; GABE in FMX
.1e069e		8f 59 0b 1e	sta $1e0b59	            STA @lLINE10 + 51   ; VICKY II in FMX
.1e06a2		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR
.1e06a6		29 0f		and #$0f	            AND #$0F
.1e06a8		69 30		adc #$30	            ADC #$30
.1e06aa		8f db 0a 1e	sta $1e0adb	            STA @lLINE8 + 57    ; FAT VICKY in U/U+ Model
.1e06ae		8f 14 0b 1e	sta $1e0b14	            STA @lLINE9 + 48    ; GABE in FMX
.1e06b2		8f 5a 0b 1e	sta $1e0b5a	            STA @lLINE10 + 52   ; VICKY II in FMX
.1e06b6		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR   ; it is in BCD
.1e06ba		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e06bd		8f dd 0a 1e	sta $1e0add	            STA @lLINE8 + 59    ; FAT VICKY in U/U+ Model
.1e06c1		8f 16 0b 1e	sta $1e0b16	            STA @lLINE9 + 50    ; GABE in FMX
.1e06c5		8f 5c 0b 1e	sta $1e0b5c	            STA @lLINE10 + 54   ; VICKY II in FMX
.1e06c9		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR
.1e06cd		29 0f		and #$0f	            AND #$0F
.1e06cf		69 30		adc #$30	            ADC #$30
.1e06d1		8f de 0a 1e	sta $1e0ade	            STA @lLINE8 + 60    ; FAT VICKY in U/U+ Model
.1e06d5		8f 17 0b 1e	sta $1e0b17	            STA @lLINE9 + 51    ; GABE in FMX
.1e06d9		8f 5d 0b 1e	sta $1e0b5d	            STA @lLINE10 + 55   ; VICKY II in FMX
.1e06dd		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR   ; it is in BCD
.1e06e1		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e06e4		8f e0 0a 1e	sta $1e0ae0	            STA @lLINE8 + 62    ; FAT VICKY in U/U+ Model
.1e06e8		8f 19 0b 1e	sta $1e0b19	            STA @lLINE9 + 53    ; GABE in FMX
.1e06ec		8f 5f 0b 1e	sta $1e0b5f	            STA @lLINE10 + 57   ; VICKY II in FMX
.1e06f0		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR
.1e06f4		29 0f		and #$0f	            AND #$0F
.1e06f6		69 30		adc #$30	            ADC #$30
.1e06f8		8f e1 0a 1e	sta $1e0ae1	            STA @lLINE8 + 63    ; FAT VICKY in U/U+ Model
.1e06fc		8f 1a 0b 1e	sta $1e0b1a	            STA @lLINE9 + 54    ; GABE in FMX
.1e0700		8f 60 0b 1e	sta $1e0b60	            STA @lLINE10 + 58   ; VICKY II in FMX
.1e0704		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e0708		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e070b		8f d0 0a 1e	sta $1e0ad0	            STA @lLINE8 + 46    ; U/U+
.1e070f		8f 09 0b 1e	sta $1e0b09	            STA @lLINE9 + 37    ; When FMX, this is the Info for GABE
.1e0713		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e0717		29 0f		and #$0f	            AND #$0F
.1e0719		69 30		adc #$30	            ADC #$30
.1e071b		8f d1 0a 1e	sta $1e0ad1	            STA @lLINE8 + 47
.1e071f		8f 0a 0b 1e	sta $1e0b0a	            STA @lLINE9 + 38    ; When FMX, this is the Info for GABE
.1e0723		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e0727		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e072a		8f 4f 0b 1e	sta $1e0b4f	            STA @lLINE10 + 41    ; When FMX, this is the Info for GABE
.1e072e		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e0732		29 0f		and #$0f	            AND #$0F
.1e0734		69 30		adc #$30	            ADC #$30
.1e0736		8f 50 0b 1e	sta $1e0b50	            STA @lLINE10 + 42    ; When FMX, this is the Info for GABE
.1e073a		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e073e		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0741		8f d2 0a 1e	sta $1e0ad2	            STA @lLINE8 + 48
.1e0745		8f 0b 0b 1e	sta $1e0b0b	            STA @lLINE9 + 39    ; When FMX, this is the Info for GABE
.1e0749		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e074d		29 0f		and #$0f	            AND #$0F
.1e074f		69 30		adc #$30	            ADC #$30
.1e0751		8f d3 0a 1e	sta $1e0ad3	            STA @lLINE8 + 49
.1e0755		8f 0c 0b 1e	sta $1e0b0c	            STA @lLINE9 + 40    ; When FMX, this is the Info for GABE
.1e0759		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e075d		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0760		8f 51 0b 1e	sta $1e0b51	            STA @lLINE10 + 43    ; When FMX, this is the Info for GABE
.1e0764		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e0768		29 0f		and #$0f	            AND #$0F
.1e076a		69 30		adc #$30	            ADC #$30
.1e076c		8f 52 0b 1e	sta $1e0b52	            STA @lLINE10 + 44    ; When FMX, this is the Info for GABE
.1e0770		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e0774		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0777		8f c4 0a 1e	sta $1e0ac4	            STA @lLINE8 + 34
.1e077b		8f fd 0a 1e	sta $1e0afd	            STA @lLINE9 + 25    ; When FMX, this is the Info for GABE
.1e077f		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e0783		29 0f		and #$0f	            AND #$0F
.1e0785		69 30		adc #$30	            ADC #$30
.1e0787		8f c5 0a 1e	sta $1e0ac5	            STA @lLINE8 + 35
.1e078b		8f fe 0a 1e	sta $1e0afe	            STA @lLINE9 + 26    ; When FMX, this is the Info for GABE
.1e078f		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e0793		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0796		8f 44 0b 1e	sta $1e0b44	            STA @lLINE10 + 30    ; When FMX, this is the Info for GABE
.1e079a		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e079e		29 0f		and #$0f	            AND #$0F
.1e07a0		69 30		adc #$30	            ADC #$30
.1e07a2		8f 45 0b 1e	sta $1e0b45	            STA @lLINE10 + 31    ; When FMX, this is the Info for GABE
.1e07a6		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e07aa		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e07ad		8f c6 0a 1e	sta $1e0ac6	            STA @lLINE8 + 36
.1e07b1		8f ff 0a 1e	sta $1e0aff	            STA @lLINE9 + 27    ; When FMX, this is the Info for GABE
.1e07b5		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e07b9		29 0f		and #$0f	            AND #$0F
.1e07bb		69 30		adc #$30	            ADC #$30
.1e07bd		8f c7 0a 1e	sta $1e0ac7	            STA @lLINE8 + 37
.1e07c1		8f 00 0b 1e	sta $1e0b00	            STA @lLINE9 + 28    ; When FMX, this is the Info for GABE
.1e07c5		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e07c9		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e07cc		8f 46 0b 1e	sta $1e0b46	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e07d0		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e07d4		29 0f		and #$0f	            AND #$0F
.1e07d6		69 30		adc #$30	            ADC #$30
.1e07d8		8f 46 0b 1e	sta $1e0b46	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e07dc		20 4f 08	jsr $1e084f	            JSR GODETECTHIRES ; Dip-Switch and Change Text
.1e07df		20 70 08	jsr $1e0870	            JSR GODETECTHDD   ; Dip-Switch and Change Text
.1e07e2		20 71 08	jsr $1e0871	            JSR GODETECTEXP   ; Go Check if there is a Card Change Text
.1e07e5		a5 b0		lda $b0		            LDA MODEL
.1e07e7		29 03		and #$03	            AND #$03
.1e07e9		c9 00		cmp #$00	            CMP #$00
.1e07eb		f0 12		beq $1e07ff	            BEQ Erase_FATVicky_Line;
.1e07ed		c9 01		cmp #$01	            CMP #$01
.1e07ef		f0 29		beq $1e081a	            BEQ Erase_2Lines;
.1e07f1		c9 02		cmp #$02	            CMP #$02
.1e07f3		f0 25		beq $1e081a	            BEQ Erase_2Lines;
.1e07f5		60		rts		            RTS
.1e07f6						HighNibblerBCD:
.1e07f6		29 f0		and #$f0	            AND #$F0
.1e07f8		4a		lsr a		            LSR A
.1e07f9		4a		lsr a		            LSR A
.1e07fa		4a		lsr a		            LSR A
.1e07fb		4a		lsr a		            LSR A
.1e07fc		69 30		adc #$30	            ADC #$30
.1e07fe		60		rts		            RTS
.1e07ff						Erase_FATVicky_Line:
.1e07ff		c2 20		rep #$20	                REP #$20        ; set A long
.1e0801		a9 a2 0a	lda #$0aa2	            LDA #<>LINE8
.1e0804		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0806		a9 1e 00	lda #$001e	            LDA #`LINE8
.1e0809		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e080b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e080d		a0 00 00	ldy #$0000	            LDY #$0000
.1e0810		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e0812		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0814		c8		iny		            INY
.1e0815		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e0817		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0819		60		rts		            RTS
.1e081a						Erase_2Lines
.1e081a		c2 20		rep #$20	                REP #$20        ; set A long
.1e081c		a9 e4 0a	lda #$0ae4	            LDA #<>LINE9
.1e081f		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0821		a9 1e 00	lda #$001e	            LDA #`LINE9
.1e0824		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0826		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0828		a0 00 00	ldy #$0000	            LDY #$0000
.1e082b		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e082d		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e082f		c8		iny		            INY
.1e0830		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e0832		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0834		c2 20		rep #$20	                REP #$20        ; set A long
.1e0836		a9 26 0b	lda #$0b26	            LDA #<>LINE10
.1e0839		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e083b		a9 1e 00	lda #$001e	            LDA #`LINE10
.1e083e		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0840		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0842		a0 00 00	ldy #$0000	            LDY #$0000
.1e0845		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e0847		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0849		c8		iny		            INY
.1e084a		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e084c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e084e		60		rts		            RTS
.1e084f						GODETECTHIRES
.1e084f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0851		af 02 00 af	lda $af0002	            LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.1e0855		29 10		and #$10	            AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.1e0857		c9 10		cmp #$10	            CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.1e0859		f0 14		beq $1e086f	            BEQ WeAreDone
.1e085b		c2 10		rep #$10	                REP #$10        ; set X long
.1e085d		a2 00 00	ldx #$0000	            LDX #$0000
.1e0860						ChangeNextChar
.1e0860		bf 5f 0d 1e	lda $1e0d5f,x	            LDA @l ON_TEXT, X
.1e0864		c9 00		cmp #$00	            CMP #$00
.1e0866		f0 07		beq $1e086f	            BEQ WeAreDone
.1e0868		9f 53 0c 1e	sta $1e0c53,x	            STA @l LINE17 +13, X
.1e086c		e8		inx		            INX
.1e086d		d0 f1		bne $1e0860	            BNE ChangeNextChar
.1e086f						WeAreDone
.1e086f						NoExpansionCardPresent
.1e086f		60		rts		            RTS
.1e0870						GODETECTHDD
.1e0870		60		rts		            RTS
.1e0871						GODETECTEXP
.1e0871		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0873		af 87 e8 af	lda $afe887	            LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.1e0877		29 10		and #$10	            AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.1e0879		c9 10		cmp #$10	            CMP #GABE_SYS_STAT_EXP
.1e087b		d0 25		bne $1e08a2	            BNE NoExpansionCardPresent
.1e087d		c2 10		rep #$10	                REP #$10        ; set X long
.1e087f		a2 00 00	ldx #$0000	            LDX #$0000
.1e0882						ChangeNextChar
.1e0882		bf 63 0d 1e	lda $1e0d63,x	            LDA @l YES_TEXT, X
.1e0886		c9 00		cmp #$00	            CMP #$00
.1e0888		f0 07		beq $1e0891	            BEQ WeAreDone
.1e088a		9f 85 0c 1e	sta $1e0c85,x	            STA @l LINE19 +26, X
.1e088e		e8		inx		            INX
.1e088f		d0 f1		bne $1e0882	            BNE ChangeNextChar
.1e0891						WeAreDone
.1e0891		a2 00 00	ldx #$0000	            LDX #$0000
.1e0894						AddCardName
.1e0894		bf 00 00 ae	lda $ae0000,x	            LDA @l EVID_ID_NAME_ASCII, X
.1e0898		9f 89 0c 1e	sta $1e0c89,x	            STA @l LINE20, X
.1e089c		e8		inx		            INX
.1e089d		e0 10 00	cpx #$0010	            CPX #$10
.1e08a0		d0 f2		bne $1e0894	            BNE AddCardName
.1e08a2						NoExpansionCardPresent
.1e08a2		60		rts		            RTS
.1e08a3						Line_Setup_Before_Display
.1e08a3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08a5		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08a7		c9 17 00	cmp #$0017	            CMP #NumberOfEntry
.1e08aa		f0 33		beq $1e08df	            BEQ DONE
.1e08ac		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08ae		0a		asl a		            ASL A
.1e08af		0a		asl a		            ASL A
.1e08b0		aa		tax		            TAX
.1e08b1		bf 24 09 1e	lda $1e0924,x	            LDA TEXT_TABLE, X
.1e08b5		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e08b7		bf 26 09 1e	lda $1e0926,x	            LDA TEXT_TABLE + 2, X
.1e08bb		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e08bd		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08bf		0a		asl a		            ASL A
.1e08c0		aa		tax		            TAX
.1e08c1		bf 80 09 1e	lda $1e0980,x	            LDA TEXT_POSX, X
.1e08c5		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e08c7		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e08cb		bf ae 09 1e	lda $1e09ae,x	            LDA TEXT_POSY, X
.1e08cf		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e08d1		8f 16 00 af	sta $af0016	            STA @l VKY_TXT_CURSOR_Y_REG_L
.1e08d5		20 fc 08	jsr $1e08fc	            JSR Line_Display_Compute_Pointer
.1e08d8		a9 00 00	lda #$0000	            LDA #$0000
.1e08db		85 a0		sta $a0		            STA TEXT_INDEX
.1e08dd		e6 a6		inc $a6		            INC LINE_INDEX
.1e08df						DONE:
.1e08df		60		rts		            RTS
.1e08e0						Line_Display_1_Character
.1e08e0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08e2		e6 a2		inc $a2		            INC TEXT_CURSOR_X       ; Always put the Cursor In Front of the "To be displayed Char"
.1e08e4		a5 a2		lda $a2		            LDA TEXT_CURSOR_X
.1e08e6		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e08ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1e08ec		38		sec		            SEC
.1e08ed		a4 a0		ldy $a0		            LDY TEXT_INDEX
.1e08ef		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e08f1		c9 00		cmp #$00	            CMP #$00
.1e08f3		f0 06		beq $1e08fb	            BEQ WE_ARE_DONE;
.1e08f5		18		clc		            CLC
.1e08f6		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e08f8		c8		iny		            INY
.1e08f9		84 a0		sty $a0		            STY TEXT_INDEX
.1e08fb						WE_ARE_DONE:
.1e08fb		60		rts		            RTS
.1e08fc						Line_Display_Compute_Pointer
.1e08fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08fe		a5 a4		lda $a4		            LDA TEXT_CURSOR_Y
.1e0900		8f 00 01 00	sta $000100	            STA @lUNSIGNED_MULT_A_LO
.1e0904		a9 50 00	lda #$0050	            LDA #80
.1e0907		8f 02 01 00	sta $000102	            STA @lUNSIGNED_MULT_B_LO
.1e090b		18		clc		            CLC
.1e090c		af 04 01 00	lda $000104	            LDA @lUNSIGNED_MULT_AL_LO
.1e0910		65 a2		adc $a2		            ADC TEXT_CURSOR_X
.1e0912		69 00 a0	adc #$a000	            ADC #$A000
.1e0915		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0917		69 00 20	adc #$2000	            ADC #$2000
.1e091a		85 a8		sta $a8		            STA COLOR_DST_PTR_L
.1e091c		a9 af 00	lda #$00af	            LDA #$00AF
.1e091f		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0921		85 aa		sta $aa		            STA COLOR_DST_PTR_H
.1e0923		60		rts		            RTS
>1e0924		dc 09 1e 00 fd 09 1e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>1e092c		13 0a 1e 00 21 0a 1e 00 39 0a 1e 00 5c 0a 1e 00
>1e093c		80 0a 1e 00 95 0a 1e 00
>1e0944		a2 0a 1e 00 e4 0a 1e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>1e094c		26 0b 1e 00 68 0b 1e 00 72 0b 1e 00 9b 0b 1e 00
>1e095c		d2 0b 1e 00 f5 0b 1e 00
>1e0964		07 0c 1e 00 46 0c 1e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>1e096c		58 0c 1e 00 6b 0c 1e 00 89 0c 1e 00 9a 0c 1e 00
>1e097c		ad 0c 1e 00
>1e0980		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>1e0988		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>1e0998		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>1e09a8		2d 00 1e 00 48 00
>1e09ae		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>1e09b6		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>1e09c6		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>1e09d6		35 00 39 00 39 00
=6						leftAlign = 6
>1e09dc		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>1e09e4		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>1e09f4		20 20 20 20 20 20 20 20 00
>1e09fd		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>1e0a05		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>1e0a13		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>1e0a1b		4e 46 4f 3a 20 00
>1e0a21		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>1e0a29		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>1e0a39		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>1e0a41		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>1e0a51		20 20 20 20 20 20 20 20 20 20 00
>1e0a5c		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>1e0a64		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>1e0a74		20 20 20 20 20 20 20 20 20 20 20 00
>1e0a80		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>1e0a88		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>1e0a95		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>1e0a9d		53 29 3a 20 00
>1e0aa2		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>1e0aaa		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>1e0aba		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>1e0aca		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>1e0ada		30 30 2f 30 30 2f 30 30 20 00
>1e0ae4		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533 - GABE - REV:0000 SUBREV:0000 DATE:00/00/00          ", $00
>1e0aec		35 33 33 20 2d 20 47 41 42 45 20 2d 20 52 45 56
>1e0afc		3a 30 30 30 30 20 53 55 42 52 45 56 3a 30 30 30
>1e0b0c		30 20 44 41 54 45 3a 30 30 2f 30 30 2f 30 30 20
>1e0b1c		20 20 20 20 20 20 20 20 20 00
>1e0b26		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551 - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00      ", $00
>1e0b2e		35 35 31 20 2d 20 56 49 43 4b 59 20 49 49 20 2d
>1e0b3e		20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45 56
>1e0b4e		3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30 30
>1e0b5e		2f 30 30 20 20 20 20 20 20 00
>1e0b68		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>1e0b70		20 00
>1e0b72		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>1e0b7a		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>1e0b8a		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>1e0b9a		00
>1e0b9b		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>1e0ba3		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>1e0bb3		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>1e0bc3		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>1e0bd2		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>1e0bda		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>1e0bea		4c 20 54 52 45 4d 42 4c 41 59 00
>1e0bf5		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>1e0bfd		20 4d 45 4e 55 2d 2d 2d 2d 00
>1e0c07		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>1e0c0f		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>1e0c1f		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>1e0c2f		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>1e0c3f		46 41 55 4c 54 20 00
>1e0c46		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>1e0c4e		4f 44 45 3a 20 4f 46 46 20 00
>1e0c58		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>1e0c60		41 4c 4c 45 44 3a 20 2d 2d 20 00
>1e0c6b		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>1e0c73		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>1e0c83		3a 20 4e 4f 20 00
>1e0c89		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1e0c91		00 00 00 00 00 00 00 00 00
>1e0c9a		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>1e0ca2		46 4f 45 4e 49 58 2e 43 4f 4d 00
>1e0cad		20 00				LINE22 .text " ", $00
>1e0caf		bf 0c 1e 00 cf 0c 1e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>1e0cb7		df 0c 1e 00 ef 0c 1e 00
>1e0cbf		0f 0d 1e 00 4f 0d 1e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>1e0cc7		4f 0d 1e 00 00 00 00 00
>1e0ccf		1f 0d 1e 00 4f 0d 1e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>1e0cd7		3f 0d 1e 00 00 00 00 00
>1e0cdf		2f 0d 1e 00 3f 0d 1e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>1e0ce7		3f 0d 1e 00 00 00 00 00
>1e0cef		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>1e0cf7		00 00 00 00 00 00 00 00
>1e0cff		ec 09 1e 00 4b 0a 1e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>1e0d07		6f 0a 1e 00 8e 0a 1e 00
>1e0d0f		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>1e0d17		4e 49 58 20 46 4d 58 00
>1e0d1f		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>1e0d27		4e 49 58 20 55 2b 20 00
>1e0d2f		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>1e0d37		4e 49 58 20 55 20 20 00
>1e0d3f		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>1e0d47		32 20 42 59 54 45 53 00
>1e0d4f		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>1e0d57		34 20 42 59 54 45 53 00
>1e0d5f		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>1e0d63		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src\kernel.asm

>1e0d67						.align 256
.1e0e00						SS_MONIKER_LUT
>1e0e00		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>1e0e08		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>1e0e18		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>1e0e28		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>1e0e38		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>1e0e48		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>1e0e58		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>1e0e68		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>1e0e78		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>1e0e88		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>1e0e98		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>1e0ea8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>1e0eb8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>1e0ec8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>1e0ed8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>1e0ee8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>1e0ef8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>1e0f08		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>1e0f18		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>1e0f28		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>1e0f38		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>1e0f48		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>1e0f58		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>1e0f68		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>1e0f78		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>1e0f88		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>1e0f98		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>1e0fa8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>1e0fb8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>1e0fc8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>1e0fd8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>1e0fe8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>1e0ff8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>1e1008		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>1e1018		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>1e1028		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>1e1038		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>1e1048		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>1e1058		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>1e1068		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>1e1078		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>1e1088		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>1e1098		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>1e10a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>1e10b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>1e10c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>1e10d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>1e10e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>1e10f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>1e1108		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>1e1118		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>1e1128		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>1e1138		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>1e1148		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>1e1158		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>1e1168		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>1e1178		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>1e1188		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>1e1198		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>1e11a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>1e11b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>1e11c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>1e11d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>1e11e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>1e11f8		ff ff ff 00 e5 80 80 00
.1e1200						SS_MONIKER
>1e1200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>1e1208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>1e1808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e1818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e1828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e1958		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e1968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1a98		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>1e1aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1bd8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1d08		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1d18		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>1e1d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1e48		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1e58		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1f88		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e1f98		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e20c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e20d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e20e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2128		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>1e2138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2208		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>1e2218		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e2228		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2268		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e2278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2348		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e2358		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e23a8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e23b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2488		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2498		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e24a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e24e8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e24f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e25c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e25d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e25e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2628		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>1e2638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2668		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>1e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e2708		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2718		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2738		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2768		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>1e2778		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e2788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2798		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>1e27a8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e27b8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e27c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e27d8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>1e27e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e2848		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2868		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e28a8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>1e28b8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>1e28c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e28d8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>1e28e8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>1e28f8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2918		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>1e2928		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e2938		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e2948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2958		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>1e2968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2978		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>1e2988		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>1e29b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>1e29e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>1e29f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1e2a08		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>1e2a18		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>1e2a28		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>1e2a38		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e2a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2a58		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>1e2a68		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>1e2a78		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>1e2a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2a98		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>1e2aa8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>1e2ac8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>1e2ad8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>1e2ae8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>1e2af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b18		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2b28		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>1e2b38		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e2b48		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2b58		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e2b68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2b78		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2b98		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ba8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>1e2bb8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>1e2bc8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>1e2bd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2be8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>1e2bf8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2c08		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c18		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>1e2c28		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>1e2c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c58		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2c68		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c78		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2c88		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2c98		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>1e2ca8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e2cb8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2cc8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>1e2cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ce8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>1e2cf8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e2d08		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>1e2d18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2d28		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>1e2d38		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2d48		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2d58		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>1e2d68		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>1e2d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2d98		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2da8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2db8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2dc8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e2dd8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e2de8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e2df8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2e08		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e28		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>1e2e38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e48		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e68		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2e78		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>1e2e88		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2e98		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2ea8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>1e2eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1e2ed8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ee8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2ef8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e2f08		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f18		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>1e2f28		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f38		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2f48		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>1e2f88		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f98		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2fa8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2fb8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>1e2fc8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2fd8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2fe8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>1e2ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3008		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>1e3018		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3028		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e3038		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e3048		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3058		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>1e3068		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>1e3078		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3088		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e3098		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e30a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>1e30b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>1e30c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e30d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>1e30e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>1e30f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e3108		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>1e3118		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>1e3128		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>1e3138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3148		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e3158		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e3168		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3178		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3198		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e31a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e31b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e31c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e31d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>1e31e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>1e31f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>1e3208		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e3218		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>1e3228		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3238		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3248		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3258		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>1e3268		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3288		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3298		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e32a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e32b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>1e32d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e32e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3308		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>1e3318		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>1e3328		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3338		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>1e3348		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3358		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e3368		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3378		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3388		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>1e3398		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>1e33a8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e33b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e33c8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e33d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e33e8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>1e33f8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3408		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>1e3418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3428		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3448		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>1e3458		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>1e3468		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>1e3478		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>1e3488		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3498		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e34a8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e34b8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e34c8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e34d8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>1e34e8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e34f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3508		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3518		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>1e3528		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>1e3538		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3548		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e3558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e3568		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3588		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e3598		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e35a8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e35b8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e35c8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e35d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e35e8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e35f8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>1e3608		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e3618		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>1e3628		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3648		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3658		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>1e3668		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>1e3678		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3688		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>1e3698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e36a8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e36b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e36c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e36d8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e36e8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e36f8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3708		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3728		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3738		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e3748		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3758		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3768		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e3778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3788		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3798		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>1e37a8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>1e37b8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e37c8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e37d8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e37e8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>1e37f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3808		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e3818		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e3828		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3838		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3848		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3858		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e3868		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3878		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3888		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3898		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e38a8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e38b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e38c8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e38d8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>1e38e8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>1e38f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3908		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3918		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3928		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>1e3938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3948		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3958		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>1e3968		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>1e3978		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3988		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3998		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e39a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e39b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>1e39c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e39d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e39e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>1e39f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a08		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3a18		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e3a28		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3a38		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>1e3a48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a58		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>1e3a68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a78		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a88		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3a98		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>1e3aa8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3ab8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3ac8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3ad8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>1e3ae8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3af8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3b08		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e3b18		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3b28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e3b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e3b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b68		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3b78		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>1e3b88		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3b98		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>1e3ba8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3bb8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3bc8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>1e3bd8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>1e3be8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3bf8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3c08		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3c18		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3c28		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e3c38		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>1e3c48		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3c58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3c68		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e3c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3c88		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>1e3c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ca8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e3cb8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3cc8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cd8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3ce8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cf8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3d08		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>1e3d18		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>1e3d28		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d38		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3d48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3d58		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>1e3d68		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3d78		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>1e3d88		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d98		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3da8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3dc8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>1e3dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3de8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3df8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3e08		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>1e3e18		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3e28		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e38		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e3e48		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e58		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>1e3e68		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3e78		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3e88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e98		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e3ea8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3eb8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3ec8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3ed8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3ee8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f08		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f28		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3f38		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e3f48		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>1e3f58		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>1e3f68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f78		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e3f88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f98		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>1e3fa8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3fd8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>1e3fe8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>1e3ff8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e4008		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e4018		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e4028		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4048		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4068		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e4078		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4088		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e4098		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e40a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>1e40b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>1e40c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e40d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e40e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e40f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>1e4108		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>1e4118		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4128		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>1e4138		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4148		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4158		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4188		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>1e41b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>1e41e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4208		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4218		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4228		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4238		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>1e4248		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1e4258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4268		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>1e4278		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>1e4288		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4298		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e42a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e42d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1e42f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4308		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e4318		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4328		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e4338		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4348		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e4358		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4368		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4378		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>1e4388		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e43a8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e43b8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e43c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e43d8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e43e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e43f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4408		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4428		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4448		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e4458		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e4478		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4488		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1e4498		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e44a8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e44b8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e44c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e44d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e44e8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e44f8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e4508		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1e4518		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4528		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4548		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4558		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4568		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1e4578		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>1e4588		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>1e4598		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e45a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e45b8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e45c8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e45d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e45e8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e45f8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e4608		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4618		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4628		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4638		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>1e4648		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4658		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4668		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4688		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4698		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>1e46a8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e46b8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>1e46c8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e46d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e46e8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e46f8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4708		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e4718		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4728		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>1e4738		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>1e4748		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1e4758		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>1e4768		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4778		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4788		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>1e4798		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e47a8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e47b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e47c8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e47d8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>1e47e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e47f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1e4808		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4818		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4828		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4848		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4868		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>1e4878		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>1e4888		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>1e4898		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>1e48a8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e48b8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>1e48c8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e48d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1e48e8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e48f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4908		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4918		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4928		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4938		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4948		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4958		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4968		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>1e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4988		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e49a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>1e49b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>1e49c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>1e49d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>1e49e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e49f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4a08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>1e4a18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>1e4a28		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4a48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4a58		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>1e4a88		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a98		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4aa8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ac8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4ae8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4af8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1e4b08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b28		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4b38		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4b48		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4b58		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>1e4b68		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4b88		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4b98		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ba8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>1e4bd8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4be8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4c08		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4c28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c38		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>1e4c48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c68		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4c88		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e4c98		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4ca8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4cc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>1e4cd8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ce8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4cf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4d18		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d48		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d68		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d78		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>1e4d88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d98		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>1e4da8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4db8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4dc8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4dd8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4de8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>1e4df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4e08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>1e4e18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>1e4e28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e38		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>1e4e58		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>1e4e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4e88		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ea8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4eb8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ec8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ed8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4ee8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ef8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e4f08		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4f18		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4f28		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4f38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f58		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>1e4f68		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f78		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>1e4f98		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>1e4fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fc8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e4fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fe8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4ff8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5018		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>1e5028		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5038		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>1e5048		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e5058		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5068		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e5078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5088		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5098		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>1e50a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>1e50b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e50c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>1e50d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e50e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>1e50f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5108		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5128		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5138		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5148		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>1e5158		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>1e5168		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>1e5178		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>1e5188		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>1e5198		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e51a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e51d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>1e51e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>1e51f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5208		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5218		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>1e5228		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e5238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5248		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5268		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>1e5278		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5288		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>1e5298		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>1e52a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e52b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>1e52c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>1e52d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e52e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e52f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5308		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5318		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>1e5328		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>1e5338		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>1e5348		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5358		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>1e5368		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5388		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>1e5398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53a8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e53b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e53c8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e53d8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>1e53e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53f8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>1e5408		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>1e5418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e5428		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5448		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5458		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5468		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e5478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>1e54a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54c8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>1e54d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e5508		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5518		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>1e5528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5538		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e5548		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>1e5558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e5568		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5588		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>1e5598		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55a8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e5608		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>1e5618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5658		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>1e5668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5678		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e5688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56a8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56c8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>1e56d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>1e5748		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5798		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e57a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e57c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57e8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e5888		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>1e5898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e58d8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>1e58e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5928		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e59c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e59d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5a18		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>1e5a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>1e5b08		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>1e5c48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>1e61f8		00 00 00 00 00 00 00 00
.1e6200						SS_FMX_TXT
>1e6200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>1e6208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>1e64b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e64c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6558		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e65f8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6698		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e66a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e66f8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e6708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6738		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e6748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e6798		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e67a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e67d8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e67e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6838		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6878		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e6888		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e68c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e68d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e68e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6918		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>1e6928		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6968		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>1e6978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e69b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e69c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6a08		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>1e6a18		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a48		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a58		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6a68		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6aa8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>1e6ab8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ae8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6af8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6b08		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b28		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b48		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>1e6b58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b88		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b98		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>1e6ba8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6bc8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6be8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>1e6bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e6c28		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>1e6c38		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>1e6c48		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>1e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>1e6c68		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>1e6c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c88		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>1e6c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6cb8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>1e6cc8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>1e6cd8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>1e6ce8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e6d08		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>1e6d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d28		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>1e6d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d58		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>1e6d68		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6d78		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6d88		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6d98		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>1e6da8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>1e6db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6dc8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>1e6dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6de8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e6df8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e08		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e18		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6e28		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6e38		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>1e6e48		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>1e6e58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e68		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e88		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>1e6e98		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ea8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6eb8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>1e6ec8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6ed8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e6ee8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6ef8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6f08		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6f28		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>1e6f38		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f48		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f58		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>1e6f68		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6f78		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e6f88		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6f98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e6fa8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>1e6fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6fc8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>1e6fd8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6fe8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ff8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>1e7008		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e7018		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7028		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e7038		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e7048		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>1e7058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7068		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>1e7078		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7088		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7098		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>1e70a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e70b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>1e70c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e70d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>1e70e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>1e70f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7108		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>1e7118		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7128		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>1e7138		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>1e7148		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7158		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>1e7168		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e7178		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>1e7188		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>1e7198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e71a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>1e71b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e71c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>1e71d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e71e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e71f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>1e7208		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7218		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e7228		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7248		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7258		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e7268		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>1e7278		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7288		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7298		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e72a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>1e72b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e72c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e72d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7308		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e7318		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7328		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7338		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7348		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7358		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7368		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e7378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7388		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7398		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e73a8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e73b8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73c8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e73d8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e73e8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73f8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e7408		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>1e7418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7438		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7448		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7458		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7468		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>1e7478		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7488		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7498		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e74a8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e74b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e74e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74f8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7508		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>1e7518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7528		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7548		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e7558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7578		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>1e7588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7598		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e75a8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>1e75b8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75c8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e75d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75e8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e75f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7618		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e7628		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7638		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7648		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>1e7658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7668		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7678		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7688		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76b8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e76c8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>1e76d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e76e8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e76f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7708		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e7718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7758		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7768		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7778		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e7788		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7798		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e77a8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e77b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e77c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e77f8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7808		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7818		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7828		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7838		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7848		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7858		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7888		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>1e7898		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e78b8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e78c8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e78e8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e78f8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7928		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>1e7938		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7948		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>1e7958		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7968		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7978		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7988		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7998		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e79a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e79d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e79e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e79f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7a08		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a18		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7a28		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e7a38		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e7a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7a68		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a78		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a88		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>1e7a98		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7aa8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7ab8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7ac8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>1e7ad8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7af8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7b08		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b18		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b28		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7b38		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7b48		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7b58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7b68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e7b78		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ba8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>1e7bb8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>1e7bc8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7bd8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7be8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7bf8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7c08		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e7c18		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c48		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e7c58		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7c78		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c88		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>1e7c98		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7ca8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e7cb8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e7cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ce8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>1e7cf8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7d18		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d28		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>1e7d38		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e7d58		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d88		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>1e7d98		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7db8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7dc8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>1e7dd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7de8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7df8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e28		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>1e7e38		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7e58		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e68		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>1e7e78		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e88		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7e98		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ec8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7ed8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7ef8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7f08		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>1e7f18		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7f28		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7f38		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f68		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7f78		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7f88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7f98		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7fb8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7fd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8008		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8018		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e8038		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e8048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8058		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>1e8068		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e8078		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e8088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e80a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e80b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>1e8108		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>1e8118		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e8128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8148		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8158		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8168		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8178		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8188		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8198		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e81a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>1e81b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e81c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e81f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8208		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8218		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8228		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8238		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e8248		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8258		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8288		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8298		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e82e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e82f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e8308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8328		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8338		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8348		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8358		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8368		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8378		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>1e8388		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e8398		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e83a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83c8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e83d8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e83e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e83f8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>1e8408		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8418		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e8428		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e8438		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e8448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8478		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8488		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8498		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e84a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e84b8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e84c8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e84d8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e84e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e84f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8508		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e8518		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8528		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8538		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8548		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8558		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e8568		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8578		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e8588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85a8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e85b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85c8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e85d8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85e8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e85f8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>1e8608		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8618		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>1e8628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8648		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8658		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8668		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>1e8678		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8688		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e8698		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>1e86a8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e86b8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e86c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86e8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e86f8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8708		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>1e8718		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8728		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8738		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>1e8748		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8758		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8788		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8798		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87a8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87c8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e87d8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>1e87e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87f8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>1e8808		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8828		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8848		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e8858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8868		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8878		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>1e8888		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8898		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>1e88a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88c8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>1e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e88f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8908		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8918		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>1e8928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8938		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>1e8948		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8968		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>1e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e89a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e89b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>1e89e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a08		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>1e8a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8a48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a78		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>1e8a88		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8aa8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>1e8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8ae8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>1e8af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b18		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>1e8b28		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b48		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>1e8b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8b88		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e8b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bb8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>1e8bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8be8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>1e8bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8c28		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>1e8c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c58		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>1e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c88		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>1e8c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8cc8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8cf8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>1e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d28		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>1e8d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8d68		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d98		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1e8da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8dc8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8e08		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e8e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e38		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>1e8e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8ea8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>1e8eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ed8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e8ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8f48		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>1e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f78		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>1e8f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8fe8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>1e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e9028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e9088		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>1e9098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e90c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9128		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e9138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e91c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e91d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e9268		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>1e93f8		00 00 00 00 00 00 00 00
.1e9400						SS_UPlus_TXT
>1e9400		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>1e9408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>1e94f8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9558		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e95b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e95c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9618		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9668		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>1e9678		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e96c8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>1e96d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9728		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>1e9738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9788		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>1e9798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e97e8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>1e97f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9848		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>1e9858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e98a8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>1e98b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e98e8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>1e98f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9908		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e9948		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>1e9958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9968		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e99a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>1e99b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e99d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>1e99e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a08		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>1e9a18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a28		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e9a38		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a68		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9a78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9a88		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9a98		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>1e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ac8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9ad8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9ae8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9af8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>1e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9b48		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9b58		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e9b68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b88		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9ba8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9bb8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e9bc8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9be8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e9bf8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c08		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c18		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c28		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c48		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1e9c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c68		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c78		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ca8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9cb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9cc8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9cd8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e9ce8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d08		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9d18		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9d28		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9d38		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e9d48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d68		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9d78		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9d88		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e9d98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9da8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9dc8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9dd8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9de8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e9df8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e28		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e38		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e9e48		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e9e58		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>1e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e88		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e98		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e9ea8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9eb8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>1e9ec8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>1e9ed8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ee8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9ef8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f08		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9f18		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e9f28		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>1e9f38		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9f48		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9f58		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e9f78		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e9f88		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>1e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fa8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e9fc8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fd8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e9fe8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea008		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1ea018		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1ea028		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>1ea038		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea048		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>1ea058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea068		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea078		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1ea088		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>1ea098		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea0a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>1ea0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea0c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea0d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1ea0e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>1ea0f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea108		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1ea118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea128		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea138		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1ea148		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea158		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea168		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea188		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea198		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1ea1a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>1ea1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea1e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea1f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea208		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea218		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea228		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>1ea238		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea248		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea258		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea268		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea278		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>1ea288		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea298		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea2a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea2b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea2c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea2d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>1ea2e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea308		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea318		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1ea328		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>1ea338		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1ea348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea368		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea378		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea388		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>1ea398		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea3a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea3b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1ea3c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1ea3d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea3e8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea3f8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea418		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea428		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>1ea438		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea458		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea478		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea488		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1ea498		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea4a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea4b8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea4c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea4d8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea4e8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>1ea4f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1ea508		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea518		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea538		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea548		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>1ea558		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1ea568		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea578		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea598		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea5a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1ea5b8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1ea5c8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1ea5d8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea608		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea618		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1ea628		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea638		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea658		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea668		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea678		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1ea688		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea698		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea6c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea6d8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>1ea6e8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>1ea6f8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea718		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea728		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea738		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>1ea748		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea758		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea778		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea788		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea798		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1ea7a8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea7b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea7e8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea7f8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1ea808		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea858		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea868		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1ea878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1ea8a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea8b8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8c8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>1ea8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea918		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea928		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea968		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>1ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea988		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea9c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>1ea9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea9e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaa28		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>1eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>1eabf8		00 00 00 00 00 00 00 00
.1eac00						SS_U_TXT
>1eac00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>1eac08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>1eacb8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eacc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eacf8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ead38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1ead78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eada8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>1eadb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eade8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>1eadf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae28		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>1eae38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae68		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>1eae78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaea8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>1eaeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaee8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>1eaef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaf28		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>1eaf38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf48		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>1eaf58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf68		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eaf78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf88		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>1eaf98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafa8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eafb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafc8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>1eafd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafe8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eaff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb008		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>1eb018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb028		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eb038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb048		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb068		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb088		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb0a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb0c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb0e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb108		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb128		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb148		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1eb158		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb168		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>1eb198		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb1a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb1c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb1d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb1e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb208		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb218		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb228		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb248		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb258		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb268		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1eb278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb288		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb298		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb2a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1eb2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb2c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb2d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1eb2e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1eb2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb308		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb318		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1eb328		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb348		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb358		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb368		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb388		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb398		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb3a8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb3c8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb3d8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb3e8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb408		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1eb418		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb428		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb448		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb458		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1eb468		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb488		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb498		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1eb4a8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb4c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb4d8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1eb4e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb508		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb518		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1eb528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb538		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb548		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb558		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb578		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb588		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb598		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb5c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb5d8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb608		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1eb618		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1eb628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb638		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb648		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1eb658		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb678		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1eb688		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>1eb698		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb6c8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1eb6d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb6e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb708		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>1eb718		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb738		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb748		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>1eb758		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1eb768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb778		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb788		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>1eb798		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1eb7a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb7c8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>1eb7d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1eb7e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb808		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb818		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1eb828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb838		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb848		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb858		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1eb868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb878		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb888		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb898		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>1eb8a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8b8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb8c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb8d8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1eb8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8f8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb918		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb938		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb948		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb958		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb978		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb988		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb998		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1eb9c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb9d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1eba08		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1eba18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eba48		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>1eba58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eba88		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>1eba98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ebac8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1ebad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1ebbf8		00 00 00 00 00 00 00 00
.1f0000						FONT_4_BANK0
>1f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>1f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>1f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>1f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>1f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>1f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>1f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>1f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>1f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>1f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>1f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>1f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>1f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>1f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>1f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>1f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>1f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>1f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>1f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>1f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>1f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>1f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>1f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>1f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>1f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>1f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>1f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>1f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>1f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>1f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>1f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>1f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>1f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>1f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>1f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>1f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>1f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>1f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>1f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>1f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>1f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>1f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>1f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>1f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>1f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>1f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>1f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>1f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>1f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>1f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>1f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>1f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>1f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>1f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>1f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>1f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>1f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>1f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>1f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>1f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>1f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>1f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>1f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>1f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>1f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>1f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>1f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>1f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>1f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>1f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>1f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>1f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>1f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>1f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>1f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>1f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>1f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>1f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>1f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>1f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>1f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>1f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>1f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>1f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>1f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>1f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>1f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>1f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>1f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>1f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>1f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>1f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>1f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>1f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>1f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>1f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>1f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>1f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>1f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>1f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>1f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>1f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>1f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>1f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>1f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>1f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>1f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>1f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>1f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>1f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>1f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>1f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>1f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>1f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>1f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>1f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>1f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>1f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>1f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>1f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>1f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>1f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>1f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>1f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>1f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>1f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>1f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>1f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>1f07f8		00 00 00 00 00 00 00 00
.1f0800						FONT_4_SPLASH
>1f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>1f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>1f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>1f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>1f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>1f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>1f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>1f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>1f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>1f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>1f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>1f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>1f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>1f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>1f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>1f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>1f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>1f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>1f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>1f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>1f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>1f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>1f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>1f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>1f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>1f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>1f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>1f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>1f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>1f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>1f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>1f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>1f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>1f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>1f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>1f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>1f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>1f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>1f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>1f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>1f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>1f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>1f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>1f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>1f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>1f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>1f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>1f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>1f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>1f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>1f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>1f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>1f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>1f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>1f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>1f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>1f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>1f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>1f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>1f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>1f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>1f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>1f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>1f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>1f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>1f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>1f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>1f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>1f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>1f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>1f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>1f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>1f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>1f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>1f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>1f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>1f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>1f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>1f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>1f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>1f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>1f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>1f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>1f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>1f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>1f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>1f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>1f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>1f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>1f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>1f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>1f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>1f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>1f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>1f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>1f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>1f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>1f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>1f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>1f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>1f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>1f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>1f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>1f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>1f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>1f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>1f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>1f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>1f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>1f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>1f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>1f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>1f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>1f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>1f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>1f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>1f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>1f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>1f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>1f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>1f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>1f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>1f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>1f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>1f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>1f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>1f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>1f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>1f0ff8		0f 0f 0f 0f f0 f0 f0 00
>1fffff		ff				                .byte $FF               ; Last byte of flash data

;******  End of listing
