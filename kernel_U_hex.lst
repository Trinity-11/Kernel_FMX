
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 -D TARGET_SYS=2 --long-address --flat --intel-hex -o kernel_U.hex --list kernel_U_hex.lst --labels=kernel_U_hex.lbl src\kernel.asm
; Thu Mar 25 19:24:51 2021

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=2						TARGET=2
=2						TARGET_SYS=2

;******  Processing input file: src\kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$180000					  START_OF_FLASH := $180000                   ; The Foenix U Flash starts at $180000
=$190400					  START_OF_KERNEL := $190400                  ; The kernel itself starts at $190400
=$1a0000					  START_OF_BASIC := $1A0000                   ; The BASIC flash code starts at $1A0000
=$1b0000					  START_OF_CREDITS := $1B0000                 ; The credits screen starts at $1B0000
=$1e0000					  START_OF_SPLASH := $1E0000                  ; SplashScreen Code and Data $3E0000
=$1f0000					  START_OF_FONT := $1F0000                    ; The font starts at $3F0000

;******  Processing file: src\Includes/macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81						CHAR_F1 = $81       ; Function keys
=$82						CHAR_F2 = $82
=$83						CHAR_F3 = $83
=$84						CHAR_F4 = $84
=$85						CHAR_F5 = $85
=$86						CHAR_F6 = $86
=$87						CHAR_F7 = $87
=$88						CHAR_F8 = $88
=$89						CHAR_F9 = $89
=$8a						CHAR_F10 = $8A
=$8b						CHAR_F11 = $8B
=$8c						CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$0000e0					MOUSE_PTR        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00					    ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00					    HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10					    HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20					    HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30					    HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40					    HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60					    HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80					    Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0					    VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0					    JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4					    VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6					    VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8					    VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea					    VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec					    VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee					    VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0					    RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4					    VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6					    VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8					    VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa					    VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc					    VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe					    VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000					    VECTORS_END      = $010000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_data.asm

>180000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>180003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>180005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>180007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>180009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>18000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>18000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>180013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>180014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>180016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_code.asm

.ff00		18		clc		RHRESET         CLC
.ff01		fb		xce		                XCE
.ff02		5c 00 10 00	jmp $001000	                JML BOOT
.ff10						RHCOP
.ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12		8b		phb		                PHB
.ff13		0b		phd		                PHD
.ff14		48		pha		                PHA
.ff15		da		phx		                PHX
.ff16		5a		phy		                PHY
.ff17		5c 08 10 00	jmp $001008	                JML BREAK
.ff20						RHBRK
.ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22		8b		phb		                PHB
.ff23		0b		phd		                PHD
.ff24		48		pha		                PHA
.ff25		da		phx		                PHX
.ff26		5a		phy		                PHY
.ff27		5c 08 10 00	jmp $001008	                JML BREAK
.ff30						RHABORT
.ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32		8b		phb		                PHB
.ff33		0b		phd		                PHD
.ff34		48		pha		                PHA
.ff35		da		phx		                PHX
.ff36		5a		phy		                PHY
.ff37		5c 08 10 00	jmp $001008	                JML BREAK
.ff40						 RHNMI
.ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42		8b		phb		                PHB
.ff43		0b		phd		                PHD
.ff44		48		pha		                PHA
.ff45		da		phx		                PHX
.ff46		5a		phy		                PHY
.ff47		22 d5 18 18	jsl $1818d5	                JSL NMI_HANDLER
.ff4b		7a		ply		                PLY
.ff4c		fa		plx		                PLX
.ff4d		68		pla		                PLA
.ff4e		2b		pld		                PLD
.ff4f		ab		plb		                PLB
.ff50		40		rti		                RTI
.ff60						RHIRQ
.ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62		8b		phb		                PHB
.ff63		0b		phd		                PHD
.ff64		48		pha		                PHA
.ff65		da		phx		                PHX
.ff66		5a		phy		                PHY
.ff67		22 14 17 18	jsl $181714	                JSL IRQ_HANDLER
.ff6b		7a		ply		                PLY
.ff6c		fa		plx		                PLX
.ff6d		68		pla		                PLA
.ff6e		2b		pld		                PLD
.ff6f		ab		plb		                PLB
.ff70		40		rti		                RTI
.ffe0		5c 04 00 1a	jmp $1a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec		00 00				                .word $0000    ; FFEC
>ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0		5c dd 06 19	jmp $1906dd	RRETURN         JML IRETURN
>fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/fdc_inc.asm

=$af13f0					SIO_FDC  = $AF13F0
=$af13f0					SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1					SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2					SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3					SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4					SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4					SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5					SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7					SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7					SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/basic_inc.asm

=$1a0000					    BASIC = $1A0000
=1703940					    MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.181000	1000	5c 00 04 19	jmp $190400	BOOT            JML IBOOT
.181004	1004	5c e8 05 19	jmp $1905e8	RESTORE         JML IRESTORE
.181008	1008	5c 7c 06 19	jmp $19067c	BREAK           JML IBREAK
.18100c	100c	5c c3 06 19	jmp $1906c3	READY           JML IREADY
.181010	1010	5c e7 14 19	jmp $1914e7	SCINIT          JML ISCINIT
.181014	1014	5c e8 14 19	jmp $1914e8	IOINIT          JML IIOINIT
.181018	1018	5c 7f 07 19	jmp $19077f	PUTC            JML IPUTC
.18101c	101c	5c 68 07 19	jmp $190768	PUTS            JML IPUTS
.181020	1020	5c f7 08 19	jmp $1908f7	PUTB            JML IPUTB
.181024	1024	5c cc 3f 19	jmp $193fcc	PUTBLOCK        JML IPUTBLOCK
.181028	1028	5c e9 14 19	jmp $1914e9	SETLFS          JML ISETLFS
.18102c	102c	5c ea 14 19	jmp $1914ea	SETNAM          JML ISETNAM
.181030	1030	5c eb 14 19	jmp $1914eb	OPEN            JML IOPEN
.181034	1034	5c ec 14 19	jmp $1914ec	CLOSE           JML ICLOSE
.181038	1038	5c de 06 19	jmp $1906de	SETIN           JML ISETIN
.18103c	103c	5c e7 06 19	jmp $1906e7	SETOUT          JML ISETOUT
.181040	1040	5c ed 14 19	jmp $1914ed	GETB            JML IGETB
.181044	1044	5c 69 3f 19	jmp $193f69	GETBLOCK        JML IGETBLOCK
.181048	1048	5c 2c 07 19	jmp $19072c	GETCH           JML IGETCH
.18104c	104c	5c f9 06 19	jmp $1906f9	GETCHW          JML IGETCHW
.181050	1050	5c f0 06 19	jmp $1906f0	GETCHE          JML IGETCHE
.181054	1054	5c ee 14 19	jmp $1914ee	GETS            JML IGETS
.181058	1058	5c ef 14 19	jmp $1914ef	GETLINE         JML IGETLINE
.18105c	105c	5c f0 14 19	jmp $1914f0	GETFIELD        JML IGETFIELD
.181060	1060	5c f1 14 19	jmp $1914f1	TRIM            JML ITRIM
.181064	1064	5c f2 14 19	jmp $1914f2	PRINTC          JML IPRINTC
.181068	1068	5c f3 14 19	jmp $1914f3	PRINTS          JML IPRINTS
.18106c	106c	5c f8 08 19	jmp $1908f8	PRINTCR         JML IPRINTCR
.181070	1070	5c f4 14 19	jmp $1914f4	PRINTF          JML IPRINTF
.181074	1074	5c f5 14 19	jmp $1914f5	PRINTI          JML IPRINTI
.181078	1078	5c b8 0a 19	jmp $190ab8	PRINTH          JML IPRINTH
.18107c	107c	5c f6 14 19	jmp $1914f6	PRINTAI         JML IPRINTAI
.181080	1080	5c d5 0a 19	jmp $190ad5	PRINTAH         JML IPRINTAH
.181084	1084	5c fc 09 19	jmp $1909fc	LOCATE          JML ILOCATE
.181088	1088	5c f7 14 19	jmp $1914f7	PUSHKEY         JML IPUSHKEY
.18108c	108c	5c f8 14 19	jmp $1914f8	PUSHKEYS        JML IPUSHKEYS
.181090	1090	5c 58 09 19	jmp $190958	CSRRIGHT        JML ICSRRIGHT
.181094	1094	5c 8b 09 19	jmp $19098b	CSRLEFT         JML ICSRLEFT
.181098	1098	5c b1 09 19	jmp $1909b1	CSRUP           JML ICSRUP
.18109c	109c	5c d7 09 19	jmp $1909d7	CSRDOWN         JML ICSRDOWN
.1810a0	10a0	5c 47 09 19	jmp $190947	CSRHOME         JML ICSRHOME
.1810a4	10a4	5c 48 0a 19	jmp $190a48	SCROLLUP        JML ISCROLLUP
.1810a8	10a8	5c 23 0b 19	jmp $190b23	CLRSCREEN       JML ICLRSCREEN
.1810ac	10ac	5c ee 0b 19	jmp $190bee	INITCHLUT	    JML IINITCHLUT
.1810b0	10b0	5c c4 0e 19	jmp $190ec4	INITSUPERIO	    JML IINITSUPERIO
.1810b4	10b4	5c c3 0f 19	jmp $190fc3	INITKEYBOARD    JML IINITKEYBOARD
.1810b8	10b8	5c 78 10 19	jmp $191078	INITMOUSE       JML IINITMOUSE
.1810bc	10bc	5c a5 0e 19	jmp $190ea5	INITCURSOR      JML IINITCURSOR
.1810c0	10c0	5c 6d 0e 19	jmp $190e6d	INITFONTSET     JML IINITFONTSET
.1810c4	10c4	5c 1d 0c 19	jmp $190c1d	INITGAMMATABLE  JML IINITGAMMATABLE
.1810c8	10c8	5c 3d 0c 19	jmp $190c3d	INITALLLUT      JML IINITALLLUT
.1810cc	10cc	5c 03 0d 19	jmp $190d03	INITVKYTXTMODE  JML IINITVKYTXTMODE
.1810d0	10d0	5c 34 0e 19	jmp $190e34	INITVKYGRPMODE  JML IINITVKYGRPMODE
.1810d4	10d4	5c 6c 0e 19	jmp $190e6c	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810d8	10d8	5c 6c 0e 19	jmp $190e6c	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810dc	10dc	5c 35 11 19	jmp $191135	INITCODEC       JML IINITCODEC
.1810e0	10e0	5c c4 11 19	jmp $1911c4	RESETCODEC      JML IRESETCODEC
.1810e4	10e4	5c 32 12 19	jmp $191232	BMP_PARSER      JML IBMP_PARSER
.1810e8	10e8	5c e7 11 19	jmp $1911e7	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.1810ec	10ec	5c 75 35 19	jmp $193575	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.1810f0	10f0	5c 4f 52 19	jmp $19524f	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.1810f4	10f4	5c e2 52 19	jmp $1952e2	F_CREATE        JML IF_CREATE       ; create a new file
.1810f8	10f8	5c 1c 53 19	jmp $19531c	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.1810fc	10fc	5c b5 53 19	jmp $1953b5	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.181100	1100	5c 50 53 19	jmp $195350	F_READ          JML IF_READ         ; read the next cluster from the file
.181104	1104	5c 5f 54 19	jmp $19545f	F_DELETE        JML IF_DELETE       ; delete a file / directory
.181108	1108	5c 21 54 19	jmp $195421	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.18110c	110c	5c 5b 54 19	jmp $19545b	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.181110	1110	5c f8 54 19	jmp $1954f8	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.181114	1114	5c 1f 55 19	jmp $19551f	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.181118	1118	5c 23 55 19	jmp $195523	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.18111c	111c	5c 13 57 19	jmp $195713	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.181120	1120	5c 3f 3f 19	jmp $193f3f	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.181124	1124	5c ac 57 19	jmp $1957ac	F_RUN           JML IF_RUN          ; Load an run a binary file
.181128	1128	5c 6a 43 19	jmp $19436a	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.18112c	112c	5c 81 0d 19	jmp $190d81	SETSIZES        JML ISETSIZES
.181130	1130	5c fb 58 19	jmp $1958fb	F_COPY          JML IF_COPY         ; Copy a file
.181134	1134	5c 45 58 19	jmp $195845	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.181138	1138	5c 99 58 19	jmp $195899	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.181700	1700	5c 76 68 19	jmp $196876	VEC_INT00_SOF   JML FDC_TIME_HANDLE ; IRQ 0, 0 --- Start Of Frame interrupt
.181704	1704	5c fb 14 19	jmp $1914fb	VEC_INT01_SOL   JML IRQHANDLESTUB   ; IRQ 0, 1 --- Start Of Line interrupt
.181708	1708	5c fb 14 19	jmp $1914fb	VEC_INT02_TMR0  JML IRQHANDLESTUB   ; IRQ 0, 2 --- Timer 0 interrupt
.18170c	170c	5c fb 14 19	jmp $1914fb	VEC_INT03_TMR1  JML IRQHANDLESTUB   ; IRQ 0, 3 --- Timer 1 interrupt
.181710	1710	5c fb 14 19	jmp $1914fb	VEC_INT04_TMR2  JML IRQHANDLESTUB   ; IRQ 0, 4 --- Timer 2 interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.181714						IRQ_HANDLER
.181714		e2 20		sep #$20	                SEP #$20        ; set A short
.181716		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.18171a		c9 00		cmp #$00	                CMP #$00
.18171c		f0 7d		beq $18179b	                BEQ CHECK_PENDING_REG1
.18171e		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.181722		29 01		and #$01	                AND #FNX0_INT00_SOF
.181724		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.181726		d0 09		bne $181731	                BNE SERVICE_NEXT_IRQ1
.181728		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.18172c		20 09 18	jsr $181809	                JSR SOF_INTERRUPT
.18172f		e2 20		sep #$20	                SEP #$20        ; set A short
.181731						SERVICE_NEXT_IRQ1
.181731		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.181735		29 02		and #$02	                AND #FNX0_INT01_SOL
.181737		c9 02		cmp #$02	                CMP #FNX0_INT01_SOL
.181739		d0 07		bne $181742	                BNE SERVICE_NEXT_IRQ2
.18173b		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.18173f		20 1a 18	jsr $18181a	                JSR SOL_INTERRUPT
.181742						SERVICE_NEXT_IRQ2
.181742		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.181746		29 04		and #$04	                AND #FNX0_INT02_TMR0
.181748		c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.18174a		d0 07		bne $181753	                BNE SERVICE_NEXT_IRQ3
.18174c		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.181750		20 2b 18	jsr $18182b	                JSR TIMER0_INTERRUPT
.181753						SERVICE_NEXT_IRQ3
.181753		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.181757		29 08		and #$08	                AND #FNX0_INT03_TMR1
.181759		c9 08		cmp #$08	                CMP #FNX0_INT03_TMR1
.18175b		d0 07		bne $181764	                BNE SERVICE_NEXT_IRQ4
.18175d		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.181761		20 3c 18	jsr $18183c	                JSR TIMER1_INTERRUPT
.181764						SERVICE_NEXT_IRQ4
.181764		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.181768		29 10		and #$10	                AND #FNX0_INT04_TMR2
.18176a		c9 10		cmp #$10	                CMP #FNX0_INT04_TMR2
.18176c		d0 09		bne $181777	                BNE SERVICE_NEXT_IRQ6
.18176e		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.181772		20 4d 18	jsr $18184d	                JSR TIMER2_INTERRUPT
.181775		e2 20		sep #$20	                SEP #$20        ; set A short
.181777						SERVICE_NEXT_IRQ6
.181777		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.18177b		29 40		and #$40	                AND #FNX0_INT06_FDC
.18177d		c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.18177f		d0 09		bne $18178a	                BNE SERVICE_NEXT_IRQ7
.181781		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.181785		20 9e 18	jsr $18189e	                JSR FDC_INTERRUPT
.181788		e2 20		sep #$20	                SEP #$20        ; set A short
.18178a						SERVICE_NEXT_IRQ7
.18178a		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.18178e		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.181790		c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.181792		d0 07		bne $18179b	                BNE CHECK_PENDING_REG1
.181794		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.181798		20 5e 18	jsr $18185e	                JSR MOUSE_INTERRUPT
.18179b						CHECK_PENDING_REG1
.18179b		e2 20		sep #$20	                SEP #$20        ; set A short
.18179d		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1817a1		c9 00		cmp #$00	                CMP #$00
.1817a3		f0 61		beq $181806	                BEQ EXIT_IRQ_HANDLE
.1817a5						SERVICE_NEXT_IRQ8
.1817a5		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1817a9		29 01		and #$01	                AND #FNX1_INT00_KBD
.1817ab		c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.1817ad		d0 0d		bne $1817bc	                BNE SERVICE_NEXT_IRQ11
.1817af		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1817b3		8b		phb		                PHB
.1817b4		0b		phd		                PHD
.1817b5		20 d6 18	jsr $1818d6	                JSR KEYBOARD_INTERRUPT
.1817b8		2b		pld		                PLD
.1817b9		ab		plb		                PLB
.1817ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1817bc						SERVICE_NEXT_IRQ11
.1817bc		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1817c0		29 08		and #$08	                AND #FNX1_INT03_COM2
.1817c2		c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.1817c4		d0 09		bne $1817cf	                BNE SERVICE_NEXT_IRQ12
.1817c6		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1817ca		20 a9 18	jsr $1818a9	                JSR COM2_INTERRUPT
.1817cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1817cf						SERVICE_NEXT_IRQ12
.1817cf		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1817d3		29 10		and #$10	                AND #FNX1_INT04_COM1
.1817d5		c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.1817d7		d0 09		bne $1817e2	                BNE SERVICE_NEXT_IRQ13
.1817d9		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1817dd		20 b4 18	jsr $1818b4	                JSR COM1_INTERRUPT
.1817e0		e2 20		sep #$20	                SEP #$20        ; set A short
.1817e2						SERVICE_NEXT_IRQ13
.1817e2		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1817e6		29 20		and #$20	                AND #FNX1_INT05_MPU401
.1817e8		c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.1817ea		d0 09		bne $1817f5	                BNE SERVICE_NEXT_IRQ14
.1817ec		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1817f0		20 bf 18	jsr $1818bf	                JSR MPU401_INTERRUPT
.1817f3		e2 20		sep #$20	                SEP #$20        ; set A short
.1817f5						SERVICE_NEXT_IRQ14
.1817f5		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1817f9		29 40		and #$40	                AND #FNX1_INT06_LPT
.1817fb		c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.1817fd		d0 07		bne $181806	                BNE EXIT_IRQ_HANDLE
.1817ff		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.181803		20 ca 18	jsr $1818ca	                JSR LPT1_INTERRUPT
.181806						EXIT_IRQ_HANDLE
.181806		c2 30		rep #$30	                REP #$30        ; set A&X long
.181808		6b		rtl		                RTL
.181809						SOF_INTERRUPT
.181809		e2 20		sep #$20	                SEP #$20        ; set A short
.18180b		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.18180f		29 01		and #$01	                AND #FNX0_INT00_SOF
.181811		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.181815		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF
.181819		60		rts		                RTS
.18181a						SOL_INTERRUPT
.18181a		e2 20		sep #$20	                SEP #$20        ; set A short
.18181c		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.181820		29 02		and #$02	                AND #FNX0_INT01_SOL
.181822		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.181826		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL
.18182a		60		rts		                RTS
.18182b						TIMER0_INTERRUPT
.18182b		e2 20		sep #$20	                SEP #$20        ; set A short
.18182d		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.181831		09 80		ora #$80	                ORA #TIMER0TRIGGER
.181833		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.181837		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0
.18183b		60		rts		                RTS
.18183c						TIMER1_INTERRUPT
.18183c		e2 20		sep #$20	                SEP #$20        ; set A short
.18183e		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.181842		09 40		ora #$40	                ORA #TIMER1TRIGGER
.181844		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.181848		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1
.18184c		60		rts		                RTS
.18184d						TIMER2_INTERRUPT
.18184d		e2 20		sep #$20	                SEP #$20        ; set A short
.18184f		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.181853		09 20		ora #$20	                ORA #TIMER2TRIGGER
.181855		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.181859		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2
.18185d		60		rts		                RTS
.18185e						MOUSE_INTERRUPT
.18185e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.181860		af e0 00 00	lda $0000e0	                LDA @l MOUSE_PTR
.181864		aa		tax		                TAX
.181865		af 03 18 af	lda $af1803	                LDA @l KBD_INPT_BUF
.181869		9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.18186d		e8		inx		                INX
.18186e		e0 03		cpx #$03	                CPX #$03
.181870		d0 24		bne $181896	                BNE EXIT_FOR_NEXT_VALUE
.181872		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.181876		8f e1 00 00	sta $0000e1	                STA @l MOUSE_POS_X_LO
.18187a		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.18187e		8f e2 00 00	sta $0000e2	                STA @l MOUSE_POS_X_HI
.181882		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.181886		8f e3 00 00	sta $0000e3	                STA @l MOUSE_POS_Y_LO
.18188a		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.18188e		8f e4 00 00	sta $0000e4	                STA @l MOUSE_POS_Y_HI
.181892		e2 20		sep #$20	                SEP #$20        ; set A short
.181894		a2 00		ldx #$00	                LDX #$00
.181896						EXIT_FOR_NEXT_VALUE
.181896		8a		txa		                TXA
.181897		8f e0 00 00	sta $0000e0	                STA @l MOUSE_PTR
.18189b		c2 10		rep #$10	                REP #$10        ; set X long
.18189d		60		rts		                RTS
.18189e						FDC_INTERRUPT
.18189e		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.1818a2		29 40		and #$40	                AND #FNX0_INT06_FDC
.1818a4		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.1818a8		60		rts		                RTS
.1818a9						COM2_INTERRUPT
.1818a9		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1818ad		29 08		and #$08	                AND #FNX1_INT03_COM2
.1818af		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1818b3		60		rts		                RTS
.1818b4						COM1_INTERRUPT
.1818b4		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1818b8		29 10		and #$10	                AND #FNX1_INT04_COM1
.1818ba		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1818be		60		rts		                RTS
.1818bf						MPU401_INTERRUPT
.1818bf		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1818c3		29 20		and #$20	                AND #FNX1_INT05_MPU401
.1818c5		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1818c9		60		rts		                RTS
.1818ca						LPT1_INTERRUPT
.1818ca		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1818ce		29 40		and #$40	                AND #FNX1_INT06_LPT
.1818d0		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1818d4		60		rts		                RTS
.1818d5						NMI_HANDLER
.1818d5		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.1818d6						KEYBOARD_INTERRUPT
.1818d6		48		pha		                PHA             ; begin setdp macro
.1818d7		08		php		                PHP
.1818d8		c2 20		rep #$20	                REP #$20        ; set A long
.1818da		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.1818dd		5b		tcd		                TCD
.1818de		28		plp		                PLP
.1818df		68		pla		                PLA             ; end setdp macro
.1818e0		a2 00 00	ldx #$0000	                ldx #$0000
.1818e3		e2 10		sep #$10	                SEP #$10        ; set X short
.1818e5		e2 20		sep #$20	                SEP #$20        ; set A short
.1818e7		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1818eb		29 01		and #$01	                AND #FNX1_INT00_KBD
.1818ed		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1818f1						IRQ_HANDLER_FETCH
.1818f1		af 03 18 af	lda $af1803	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.1818f5		85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.1818f7		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.1818f9		29 80		and #$80	                AND #$80
.1818fb		c9 80		cmp #$80	                CMP #$80
.1818fd		d0 10		bne $18190f	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.1818ff		a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.181901		29 7f		and #$7f	                AND #$7F
.181903		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.181905		a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.181907		aa		tax		                TAX
.181908		bf 80 79 19	lda $197980,x	                LDA @lScanCode_Prefix_Set1, x
.18190c		4c b2 19	jmp $1819b2	                JMP KB_WR_2_SCREEN      ; And save it
.18190f		a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.181911		c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.181913		d0 03		bne $181918	                BNE NOT_KB_SET_LSHIFT
.181915		82 ad 00	brl $1819c5	                BRL KB_SET_SHIFT
.181918						NOT_KB_SET_LSHIFT
.181918		c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.18191a		d0 03		bne $18191f	                BNE NOT_KB_CLR_LSHIFT
.18191c		82 af 00	brl $1819ce	                BRL KB_CLR_SHIFT
.18191f						NOT_KB_CLR_LSHIFT
.18191f		c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.181921		d0 03		bne $181926	                BNE NOT_KB_SET_RSHIFT
.181923		82 9f 00	brl $1819c5	                BRL KB_SET_SHIFT
.181926						NOT_KB_SET_RSHIFT
.181926		c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.181928		d0 03		bne $18192d	                BNE NOT_KB_CLR_RSHIFT
.18192a		82 a1 00	brl $1819ce	                BRL KB_CLR_SHIFT
.18192d						NOT_KB_CLR_RSHIFT
.18192d		c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.18192f		d0 03		bne $181934	                BNE NOT_KB_SET_CTRL
.181931		82 a3 00	brl $1819d7	                BRL KB_SET_CTRL
.181934						NOT_KB_SET_CTRL
.181934		c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.181936		d0 03		bne $18193b	                BNE NOT_KB_CLR_CTRL
.181938		82 a5 00	brl $1819e0	                BRL KB_CLR_CTRL
.18193b						NOT_KB_CLR_CTRL
.18193b		c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.18193d		d0 03		bne $181942	                BNE NOT_KB_SET_ALT
.18193f		82 a7 00	brl $1819e9	                BRL KB_SET_ALT
.181942						NOT_KB_SET_ALT
.181942		c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.181944		d0 03		bne $181949	                BNE NOT_KB_CLR_ALT
.181946		82 a9 00	brl $1819f2	                BRL KB_CLR_ALT
.181949		c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.18194b		d0 03		bne $181950	                BNE NOT_PREFIXED
.18194d		82 ab 00	brl $1819fb	                BRL KB_SET_PREFIX
.181950		c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.181952		d0 03		bne $181957	                BNE NOT_KB_SET_NUM
.181954		82 b6 00	brl $181a0d	                BRL KB_TOG_NUMLOCK
.181957		c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.181959		d0 03		bne $18195e	                BNE NOT_KB_SET_SCR
.18195b		82 a6 00	brl $181a04	                BRL KB_TOG_SCRLOCK
.18195e		c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.181960		d0 03		bne $181965	                BNE NOT_KB_CAPSLOCK
.181962		82 bc 00	brl $181a21	                BRL KB_TOG_CAPLOCK
.181965		c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.181967		d0 09		bne $181972	                BNE KB_UNPRESSED
.181969		a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.18196b		8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.18196f		82 b5 00	brl $181a27	                BRL KB_CHECK_B_DONE
.181972		29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.181974		c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.181976		d0 03		bne $18197b	                BNE KB_NORM_SC
.181978		82 ac 00	brl $181a27	                BRL KB_CHECK_B_DONE
.18197b		a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.18197d		aa		tax		                TAX
.18197e		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.181980		29 10		and #$10	                AND #$10
.181982		c9 10		cmp #$10	                CMP #$10
.181984		f0 17		beq $18199d	                BEQ SHIFT_KEY_ON
.181986		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.181988		29 20		and #$20	                AND #$20
.18198a		c9 20		cmp #$20	                CMP #$20
.18198c		f0 16		beq $1819a4	                BEQ CTRL_KEY_ON
.18198e		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.181990		29 40		and #$40	                AND #$40
.181992		c9 40		cmp #$40	                CMP #$40
.181994		f0 15		beq $1819ab	                BEQ ALT_KEY_ON
.181996		bf 00 77 19	lda $197700,x	                LDA @lScanCode_Press_Set1, x
.18199a		82 15 00	brl $1819b2	                BRL KB_WR_2_SCREEN
.18199d		bf 80 77 19	lda $197780,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.1819a1		82 0e 00	brl $1819b2	                BRL KB_WR_2_SCREEN
.1819a4		bf 00 78 19	lda $197800,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.1819a8		82 07 00	brl $1819b2	                BRL KB_WR_2_SCREEN
.1819ab		bf 80 78 19	lda $197880,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.1819af		82 00 00	brl $1819b2	                BRL KB_WR_2_SCREEN
.1819b2		c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.1819b4		d0 03		bne $1819b9	                BNE savechar
.1819b6		4c 37 1a	jmp $181a37	                JMP programmerKey       ; Yes: trigger the programmer key
.1819b9		48		pha		savechar        PHA
.1819ba		c2 10		rep #$10	                REP #$10        ; set X long
.1819bc		20 43 1a	jsr $181a43	                JSR SAVEKEY
.1819bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1819c1		68		pla		                PLA
.1819c2		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.1819c5		a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.1819c7		09 10		ora #$10	                ORA #$10
.1819c9		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.1819cb		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.1819ce		a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.1819d0		29 ef		and #$ef	                AND #$EF
.1819d2		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.1819d4		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.1819d7		a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.1819d9		09 20		ora #$20	                ORA #$20
.1819db		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.1819dd		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.1819e0		a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.1819e2		29 df		and #$df	                AND #$DF
.1819e4		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.1819e6		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.1819e9		a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.1819eb		09 40		ora #$40	                ORA #$40
.1819ed		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.1819ef		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.1819f2		a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.1819f4		29 bf		and #$bf	                AND #$BF
.1819f6		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.1819f8		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.1819fb		a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.1819fd		09 80		ora #$80	                ORA #$80
.1819ff		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.181a01		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.181a04		a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.181a06		49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.181a08		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.181a0a		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.181a0d		a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.181a0f		29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.181a11		c9 60		cmp #$60	                CMP #$60
.181a13		d0 03		bne $181a18	                BNE KB_TOG_NUMLOC2
.181a15		82 63 ff	brl $18197b	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.181a18		a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.181a1a		49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.181a1c		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.181a1e		4c 27 1a	jmp $181a27	                JMP KB_CHECK_B_DONE
.181a21		a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.181a23		49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.181a25		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.181a27						KB_CHECK_B_DONE
.181a27		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.181a2b		29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.181a2d		c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.181a2f		d0 03		bne $181a34	                BNE SET_LED
.181a31		4c f1 18	jmp $1818f1	                JMP IRQ_HANDLER_FETCH
.181a34						SET_LED
.181a34						KB_DONE
.181a34		c2 30		rep #$30	                REP #$30        ; set A&X long
.181a36		60		rts		                RTS
.181a37						programmerKey
.181a37		c2 30		rep #$30	                REP #$30        ; set A&X long
.181a39		68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.181a3a		2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.181a3b		ab		plb		                PLB
.181a3c		7a		ply		                PLY
.181a3d		fa		plx		                PLX
.181a3e		68		pla		                PLA
.181a3f		5c 08 10 00	jmp $001008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.181a43						SAVEKEY
.181a43		e2 20		sep #$20	                SEP #$20        ; set A short
.181a45		48		pha		                PHA                     ; Save the character
.181a46		a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.181a48		29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.181a4a		f0 0d		beq $181a59	                BEQ no_caps             ; No... just use the character as-is
.181a4c		68		pla		                PLA                     ; Get the character back
.181a4d		c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.181a4f		90 09		bcc $181a5a	                BLT check_break         ; Yes: just use as-is
.181a51		c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.181a53		b0 05		bcs $181a5a	                BGE check_break         ; Yes: just us as-is
.181a55		29 df		and #$df	                AND #%11011111          ; Conver to upper case
.181a57		80 01		bra $181a5a	                BRA check_break
.181a59		68		pla		no_caps         PLA                     ; Restore the character
.181a5a		c9 00		cmp #$00	check_break     CMP #0
.181a5c		f0 18		beq $181a76	                BEQ done
.181a5e		c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.181a60		f0 15		beq $181a77	                BEQ flag_break          ; Yes: flag a break
.181a62		a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.181a64		e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.181a67		b0 0d		bcs $181a76	                BCS done                ; Stop storing - An error should ensue here...
.181a69		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.181a6d		e8		inx		                INX
.181a6e		86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.181a70		a9 00		lda #$00	                LDA #$00
.181a72		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.181a76		60		rts		done            RTS
.181a77						flag_break
.181a77		e2 20		sep #$20	                SEP #$20        ; set A short
.181a79		a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.181a7b		85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.181a7d		60		rts		                RTS
.181a7e						KBD_GETCW
.181a7e		da		phx		                PHX
.181a7f		0b		phd		                PHD
.181a80		08		php		                PHP
.181a81		48		pha		                PHA             ; begin setdp macro
.181a82		08		php		                PHP
.181a83		c2 20		rep #$20	                REP #$20        ; set A long
.181a85		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.181a88		5b		tcd		                TCD
.181a89		28		plp		                PLP
.181a8a		68		pla		                PLA             ; end setdp macro
.181a8b		e2 20		sep #$20	                SEP #$20        ; set A short
.181a8d		c2 10		rep #$10	                REP #$10        ; set X long
.181a8f		58		cli		                CLI                     ; Make sure interrupts can happen
.181a90		af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.181a94		29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.181a96		c9 60		cmp #$60	                CMP #KB_CREDITS
.181a98		d0 0a		bne $181aa4	                BNE check_buffer        ; No: check the key buffer
.181a9a		a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.181a9c		8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.181aa0		22 a1 14 19	jsl $1914a1	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.181aa4		a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.181aa6		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.181aa8		90 02		bcc $181aac	                BCC read_buff           ; Yes: a key is present, read it
.181aaa		80 e4		bra $181a90	                BRA get_wait            ; Otherwise, keep waiting
.181aac		78		sei		read_buff       SEI                     ; Don't interrupt me!
.181aad		b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.181aaf		e8		inx		                INX                     ; And move to the next key
.181ab0		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.181ab2		f0 07		beq $181abb	                BEQ reset_indexes       ; Yes: return to 0 position
.181ab4		86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.181ab6		58		cli		                CLI
.181ab7		28		plp		done            PLP                     ; Restore status and interrupts
.181ab8		2b		pld		                PLD
.181ab9		fa		plx		                PLX
.181aba		6b		rtl		                RTL
.181abb		64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.181abd		64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.181abf		80 f6		bra $181ab7	                BRA done
.181ac1						KBD_GETC
.181ac1		da		phx		                PHX
.181ac2		0b		phd		                PHD
.181ac3		08		php		                PHP
.181ac4		48		pha		                PHA             ; begin setdp macro
.181ac5		08		php		                PHP
.181ac6		c2 20		rep #$20	                REP #$20        ; set A long
.181ac8		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.181acb		5b		tcd		                TCD
.181acc		28		plp		                PLP
.181acd		68		pla		                PLA             ; end setdp macro
.181ace		e2 20		sep #$20	                SEP #$20        ; set A short
.181ad0		c2 10		rep #$10	                REP #$10        ; set X long
.181ad2		58		cli		                CLI                     ; Make sure interrupts can happen
.181ad3		a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.181ad5		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.181ad7		90 05		bcc $181ade	                BCC read_buff           ; Yes: a key is present, read it
.181ad9		a9 00		lda #$00	                LDA #0                  ; If no key, return zero and set carry bit
.181adb		38		sec		                SEC
.181adc		80 0b		bra $181ae9	                BRA done
.181ade		78		sei		read_buff       SEI                     ; Don't interrupt me!
.181adf		b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.181ae1		e8		inx		                INX                     ; And move to the next key
.181ae2		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.181ae4		f0 07		beq $181aed	                BEQ reset_indexes       ; Yes: return to 0 position
.181ae6		86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.181ae8		58		cli		                CLI
.181ae9		28		plp		done            PLP                     ; Restore status and interrupts
.181aea		2b		pld		                PLD
.181aeb		fa		plx		                PLX
.181aec		6b		rtl		                RTL
.181aed		64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.181aef		64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.181af1		80 f6		bra $181ae9	                BRA done

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/super_io_def.asm

=$af1100					PME_STS_REG     = $AF1100
=$af1102					PME_EN_REG		  = $AF1102
=$af1104					PME_STS1_REG		= $AF1104
=$af1105					PME_STS2_REG		= $AF1105
=$af1106					PME_STS3_REG		= $AF1106
=$af1107					PME_STS4_REG		= $AF1107
=$af1108					PME_STS5_REG		= $AF1108
=$af110a					PME_EN1_REG     = $AF110A
=$af110b					PME_EN2_REG     = $AF110B
=$af110c					PME_EN3_REG     = $AF110C
=$af110d					PME_EN4_REG     = $AF110D
=$af110e					PME_EN5_REG     = $AF110E
=$af1110					SMI_STS1_REG		= $AF1110
=$af1111					SMI_STS2_REG		= $AF1111
=$af1112					SMI_STS3_REG		= $AF1112
=$af1113					SMI_STS4_REG		= $AF1113
=$af1114					SMI_STS5_REG		= $AF1114
=$af1116					SMI_EN1_REG     = $AF1116
=$af1117					SMI_EN2_REG     = $AF1117
=$af1118					SMI_EN3_REG     = $AF1118
=$af1119					SMI_EN4_REG     = $AF1119
=$af111a					SMI_EN5_REG     = $AF111A
=$af111c					MSC_ST_REG      = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		= $AF1123
=$af1124					GP11_REG    		= $AF1124
=$af1125					GP12_REG    		= $AF1125
=$af1126					GP13_REG    		= $AF1126
=$af1127					GP14_REG    		= $AF1127
=$af1128					GP15_REG    		= $AF1128
=$af1129					GP16_REG    		= $AF1129
=$af112a					GP17_REG    		= $AF112A
=$af112b					GP20_REG    		= $AF112B
=$af112c					GP21_REG    		= $AF112C
=$af112d					GP22_REG		= $AF112D
=$af112f					GP24_REG		= $AF112F
=$af1130					GP25_REG		= $AF1130
=$af1131					GP26_REG		= $AF1131
=$af1132					GP27_REG		= $AF1132
=$af1133					GP30_REG		= $AF1133
=$af1134					GP31_REG		= $AF1134
=$af1135					GP32_REG		= $AF1135
=$af1136					GP33_REG		= $AF1136
=$af1137					GP34_REG		= $AF1137
=$af1138					GP35_REG		= $AF1138
=$af1139					GP36_REG		= $AF1139
=$af113a					GP37_REG		= $AF113A
=$af113b					GP40_REG		= $AF113B
=$af113c					GP41_REG		= $AF113C
=$af113d					GP42_REG		= $AF113D
=$af113e					GP43_REG		= $AF113E
=$af113f					GP50_REG		= $AF113F
=$af1140					GP51_REG		= $AF1140
=$af1141					GP52_REG		= $AF1141
=$af1142					GP53_REG		= $AF1142
=$af1143					GP54_REG		= $AF1143
=$af1144					GP55_REG		= $AF1144
=$af1145					GP56_REG		= $AF1145
=$af1146					GP57_REG		= $AF1146
=$af1147					GP60_REG		= $AF1147
=$af1148					GP61_REG		= $AF1148
=$af114b					GP1_REG			= $AF114B
=$af114c					GP2_REG			= $AF114C
=$af114d					GP3_REG			= $AF114D
=$af114e					GP4_REG			= $AF114E
=$af114f					GP5_REG			= $AF114F
=$af1150					GP6_REG			= $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG            = $AF1157
=$af1158					FAN_CTRL_REG  	    = $AF1158
=$af1159					FAN1_TACH_REG       = $AF1159
=$af115a					FAN2_TACH_REG       = $AF115A
=$af115b					FAN1_PRELOAD_REG    = $AF115B
=$af115c					FAN2_PRELOAD_REG    = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/keyboard_def.asm

=$af1807					    STATUS_PORT 	= $AF1807
=$af1807					    KBD_CMD_BUF		= $AF1807
=$af1803					    KBD_OUT_BUF 	= $AF1803
=$af1803					    KBD_INPT_BUF	= $AF1803
=$af1803					    KBD_DATA_BUF	= $AF1803
=$af180a					    PORT_A		    = $AF180A   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$af180b					    PORT_B			= $AF180B   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src\kernel.asm

.190400						IBOOT
.190400		18		clc		                CLC               ; clear the carry flag
.190401		fb		xce		                XCE               ; move carry to emulation flag.
.190402		78		sei		                SEI               ; Disable interrupts
.190403		c2 30		rep #$30	                REP #$30        ; set A&X long
.190405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.190408		1b		tcs		                TAS
.190409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.19040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.19040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.190412		54 00 18	mvn $18,$00	                MVN $18,$00       ; Or during soft loading of the kernel from the debug port
.190415		48		pha		                PHA             ; begin setdp macro
.190416		08		php		                PHP
.190417		c2 20		rep #$20	                REP #$20        ; set A long
.190419		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19041c		5b		tcd		                TCD
.19041d		28		plp		                PLP
.19041e		68		pla		                PLA             ; end setdp macro
.19041f		e2 20		sep #$20	                SEP #$20        ; set A short
.190421		a2 00 00	ldx #$0000	                LDX #$0000
.190424		a9 00		lda #$00	                LDA #$00
.190426						CLEAR_MEM_LOOP
.190426		95 00		sta $00,x	                STA $0000, X
.190428		e8		inx		                INX
.190429		e0 00 01	cpx #$0100	                CPX #$0100
.19042c		d0 f8		bne $190426	                BNE CLEAR_MEM_LOOP
.19042e		ea		nop		                NOP
.19042f		a9 ff		lda #$ff	                LDA #$FF
.190431		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.190435		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.190439		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.19043d		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.190441		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.190445		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190449		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.19044d		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.190451		22 1a 11 19	jsl $19111a	                JSL INITRTC               ; Initialize the RTC
.190455		e2 20		sep #$20	                SEP #$20        ; set A short
.190457		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.19045b		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.19045d		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.19045f		d0 1e		bne $19047f	                BNE SkipInitExpC100C200
.190461		c2 20		rep #$20	                REP #$20        ; set A long
.190463		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.190467		c9 64 00	cmp #$0064	                CMP #$0064
.19046a		f0 0f		beq $19047b	                BEQ InitC100ESID
.19046c		c9 c8 00	cmp #$00c8	                CMP #$00C8
.19046f		d0 0e		bne $19047f	                BNE SkipInitExpC100C200
.190471		22 76 6c 19	jsl $196c76	                JSL SIMPLE_INIT_ETHERNET_CTRL
.190475		22 81 70 19	jsl $197081	                JSL INIT_EVID_VID_MODE
.190479		80 04		bra $19047f	                BRA SkipInitExpC100C200
.19047b						InitC100ESID:
.19047b		22 76 6c 19	jsl $196c76	                JSL SIMPLE_INIT_ETHERNET_CTRL
.19047f						SkipInitExpC100C200:
.19047f		c2 30		rep #$30	                REP #$30        ; set A&X long
.190481		a2 48 00	ldx #$0048	                LDX #72                   ; Set these by default, but they will be changed later by Init Vicky Text Mode
.190484		86 0f		stx $0f		                STX COLS_VISIBLE
.190486		a0 34 00	ldy #$0034	                LDY #52
.190489		84 13		sty $13		                STY LINES_VISIBLE
.19048b		a2 80 00	ldx #$0080	                LDX #128
.19048e		86 11		stx $11		                STX COLS_PER_LINE
.190490		a0 40 00	ldy #$0040	                LDY #64
.190493		84 15		sty $15		                STY LINES_MAX
.190495		a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.190498		85 0c		sta $0c		                STA SCREENBEGIN
.19049a		85 17		sta $17		                STA CURSORPOS
.19049c		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.19049f		85 1f		sta $1f		                STA COLORPOS
.1904a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1904a3		a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.1904a5		85 0e		sta $0e		                STA SCREENBEGIN+2
.1904a7		85 19		sta $19		                STA CURSORPOS+2
.1904a9		a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.1904ab		85 21		sta $21		                STA COLORPOS+2
.1904ad		a9 00		lda #$00	                LDA #$00
.1904af		8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.1904b2		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.1904b4		8f 00 f1 af	sta $aff100	                STA $AFF100
.1904b8		a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.1904ba		8f 00 f1 af	sta $aff100	                STA $AFF100
.1904be		a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.1904c0		8f 00 f1 af	sta $aff100	                STA $AFF100
.1904c4		a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.1904c6		8f 00 f1 af	sta $aff100	                STA $AFF100
.1904ca		a9 ed		lda #$ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.1904cc		85 1e		sta $1e		                STA CURCOLOR
.1904ce		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.1904d2		29 01		and #$01	                AND #$01
.1904d4		c9 01		cmp #$01	                CMP #$01
.1904d6		d0 14		bne $1904ec	                BNE Alreadyin640480Mode
.1904d8		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904dc		29 fc		and #$fc	                AND #$FC
.1904de		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904e2		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904e6		09 01		ora #$01	                ORA #$01
.1904e8		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904ec						Alreadyin640480Mode
.1904ec		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904f0		29 fc		and #$fc	                AND #$FC
.1904f2		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.1904f6		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.1904fa		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.1904fe		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.190502		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT
.190506		22 86 0e 19	jsl $190e86	                JSL INITMOUSEPOINTER
.19050a		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.19050e		a9 00		lda #$00	                LDA #0
.190510		22 38 10 00	jsl $001038	                JSL SETIN
.190514		22 3c 10 00	jsl $00103c	                JSL SETOUT
.190518		c2 20		rep #$20	                REP #$20        ; set A long
.19051a		48		pha		                PHA             ; begin setdp macro
.19051b		08		php		                PHP
.19051c		c2 20		rep #$20	                REP #$20        ; set A long
.19051e		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190521		5b		tcd		                TCD
.190522		28		plp		                PLP
.190523		68		pla		                PLA             ; end setdp macro
.190524		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD ;
.190528		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE;  // I Seperated them
.19052c		e2 20		sep #$20	                SEP #$20        ; set A short
.19052e		c2 10		rep #$10	                REP #$10        ; set X long
.190530		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.190532		8f 00 f1 af	sta $aff100	                STA $AFF100
.190536		a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.190538		8f 00 f1 af	sta $aff100	                STA $AFF100
.19053c		a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.19053e		8f 00 f1 af	sta $aff100	                STA $AFF100
.190542		a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.190544		8f 00 f1 af	sta $aff100	                STA $AFF100
.190548		a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.19054a		8f 00 f1 af	sta $aff100	                STA $AFF100
.19054e		a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.190550		8f 00 f1 af	sta $aff100	                STA $AFF100
.190554		a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.190556		8f 00 f1 af	sta $aff100	                STA $AFF100
.19055a		a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.19055d		22 2f 14 19	jsl $19142f	                JSL ILOOP_MS
.190561		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.190563		8f 00 f1 af	sta $aff100	                STA $AFF100
.190567		58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.190568		e2 20		sep #$20	                SEP #$20        ; set A short
.19056a		c2 10		rep #$10	                REP #$10        ; set X long
.19056c		48		pha		                PHA             ; begin setdbr macro
.19056d		08		php		                PHP
.19056e		e2 20		sep #$20	                SEP #$20        ; set A short
.190570		a9 19		lda #$19	                LDA #`greet_msg
.190572		48		pha		                PHA
.190573		ab		plb		                PLB
.190574		28		plp		                PLP
.190575		68		pla		                PLA             ; end setdbr macro
.190576		a2 00 00	ldx #$0000	                LDX #0
.190579		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.19057d		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.190581		e8		inx		                INX
.190582		e0 00 10	cpx #$1000	                CPX #$1000
.190585		d0 f2		bne $190579	                BNE jmpcopy
.190587						retry_boot
.190587		22 98 42 19	jsl $194298	                JSL DOS_INIT          ; Initialize the "disc operating system"
.19058b		22 00 00 1e	jsl $1e0000	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.19058f		22 23 0b 19	jsl $190b23	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.190593		c2 30		rep #$30	                REP #$30        ; set A&X long
.190595		a2 00 00	ldx #$0000	                LDX #0
.190598		a0 00 00	ldy #$0000	                LDY #0
.19059b		22 fc 09 19	jsl $1909fc	                JSL ILOCATE
.19059f						greet
.19059f		48		pha		                PHA             ; begin setdbr macro
.1905a0		08		php		                PHP
.1905a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1905a3		a9 19		lda #$19	                LDA #`greet_msg
.1905a5		48		pha		                PHA
.1905a6		ab		plb		                PLB
.1905a7		28		plp		                PLP
.1905a8		68		pla		                PLA             ; end setdbr macro
.1905a9		a2 e2 71	ldx #$71e2	                LDX #<>greet_msg
.1905ac		22 5f 07 19	jsl $19075f	                JSL IPRINT       ; print the first line
.1905b0		22 6e 0b 19	jsl $190b6e	                JSL ICOLORFLAG  ; This is to set the Color Memory for the TExt Logo
.1905b4		c2 30		rep #$30	                REP #$30        ; set A&X long
.1905b6		a9 ff fe	lda #$feff	                LDA #STACK_END    ; We are the root, let's make sure from now on, that we start clean
.1905b9		1b		tcs		                TAS
.1905ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1905bc		c2 10		rep #$10	                REP #$10        ; set X long
.1905be		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.1905c2		c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.1905c4		f0 10		beq $1905d6	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.1905c6		c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.1905c8		f0 1e		beq $1905e8	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.1905ca		c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.1905cc		f0 62		beq $190630	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.1905ce		c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.1905d0		f0 1d		beq $1905ef	                BEQ BOOTSDC           ; Yes: boot via the SDC
.1905d2		c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.1905d4		f0 39		beq $19060f	                BEQ BOOTIDE           ; Yes: boot via the IDE
.1905d6		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.1905da		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.1905dc		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.1905de		f0 2f		beq $19060f	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.1905e0		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.1905e2		f0 0b		beq $1905ef	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.1905e4		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.1905e6		f0 48		beq $190630	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.1905e8						IRESTORE
.1905e8		5c 00 00 1a	jmp $1a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.1905ec		ea		nop		CREDIT_LOCK     NOP
.1905ed		80 fd		bra $1905ec	                BRA CREDIT_LOCK
.1905ef		a2 27 76	ldx #$7627	BOOTSDC         LDX #<>sdc_boot
.1905f2		22 5f 07 19	jsl $19075f	                JSL IPRINT
.1905f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1905f8		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.1905fa		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905fe		22 6a 43 19	jsl $19436a	                JSL DOS_MOUNT         ; Mount the SDC
.190602		90 06		bcc $19060a	                BCC sdc_error         ; Print an error message if couldn't get anything
.190604		22 25 45 19	jsl $194525	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.190608		80 de		bra $1905e8	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.19060a		a2 ab 75	ldx #$75ab	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.19060d		80 40		bra $19064f	                BRA PR_BOOT_ERROR
.19060f		a2 3e 76	ldx #$763e	BOOTIDE         LDX #<>ide_boot
.190612		22 5f 07 19	jsl $19075f	                JSL IPRINT
.190616		e2 20		sep #$20	                SEP #$20        ; set A short
.190618		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.19061a		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.19061e		22 6a 43 19	jsl $19436a	                JSL DOS_MOUNT         ; Mount the IDE drive
.190622		90 07		bcc $19062b	                BCC hdc_error         ; Print an error message if couldn't get anything
.190624		22 25 45 19	jsl $194525	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.190628		82 bd ff	brl $1905e8	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.19062b		a2 c7 75	ldx #$75c7	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.19062e		80 1f		bra $19064f	                BRA PR_BOOT_ERROR
.190630		a2 10 76	ldx #$7610	BOOTFLOPPY      LDX #<>fdc_boot
.190633		22 5f 07 19	jsl $19075f	                JSL IPRINT
.190637		e2 20		sep #$20	                SEP #$20        ; set A short
.190639		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.19063b		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.19063f		22 0f 66 19	jsl $19660f	                JSL FDC_MOUNT         ; Mount the floppy drive
.190643		90 07		bcc $19064c	                BCC fdc_error         ; Print an error message if couldn't get anything
.190645		22 25 45 19	jsl $194525	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.190649		82 9c ff	brl $1905e8	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.19064c		a2 ea 75	ldx #$75ea	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.19064f		22 5f 07 19	jsl $19075f	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.190653		a2 86 75	ldx #$7586	                LDX #<>boot_retry     ; Print the boot retry prompt
.190656		22 5f 07 19	jsl $19075f	                JSL IPRINT
.19065a		22 f9 06 19	jsl $1906f9	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.19065e		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.190660		d0 03		bne $190665	                BNE chk_r_lc
.190662		82 22 ff	brl $190587	                BRL retry_boot        ; Yes: retry the boot sequence
.190665		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.190667		d0 03		bne $19066c	                BNE chk_b_lc
.190669		82 1b ff	brl $190587	                BRL retry_boot
.19066c		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.19066e		d0 03		bne $190673	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.190670		82 75 ff	brl $1905e8	                BRL BOOTBASIC
.190673						chk_b_lc_not:
.190673		c9 42		cmp #$42	                CMP #'B'
.190675		d0 03		bne $19067a	                BNE chk_b_lc_not0
.190677		82 6e ff	brl $1905e8	                BRL BOOTBASIC
.19067a						chk_b_lc_not0:
.19067a		80 de		bra $19065a	                BRA boot_wait_key     ; No: keep waiting
.19067c						IBREAK
.19067c		48		pha		                PHA             ; begin setdp macro
.19067d		08		php		                PHP
.19067e		c2 20		rep #$20	                REP #$20        ; set A long
.190680		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190683		5b		tcd		                TCD
.190684		28		plp		                PLP
.190685		68		pla		                PLA             ; end setdp macro
.190686		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.190687		8f 48 02 00	sta $000248	                STA CPUY
.19068b		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.19068c		8f 46 02 00	sta $000246	                STA CPUX
.190690		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.190691		8f 44 02 00	sta $000244	                STA CPUA
.190695		68		pla		                PLA
.190696		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.19069a		e2 20		sep #$20	                SEP #$20        ; set A short
.19069c		68		pla		                PLA             ; Pull Data Bank (8 bits)
.19069d		8f 4e 02 00	sta $00024e	                STA CPUDBR
.1906a1		68		pla		                PLA             ; Pull Flags (8 bits)
.1906a2		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.1906a6		c2 20		rep #$20	                REP #$20        ; set A long
.1906a8		68		pla		                PLA             ; Pull Program Counter (16 bits)
.1906a9		8f 40 02 00	sta $000240	                STA CPUPC
.1906ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1906af		68		pla		                PLA             ; Pull Program Bank (8 bits)
.1906b0		8f 42 02 00	sta $000242	                STA CPUPBR
.1906b4		c2 20		rep #$20	                REP #$20        ; set A long
.1906b6		3b		tsc		                TSA             ; Get the stack
.1906b7		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.1906bb		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.1906be		1b		tcs		                TAS
.1906bf		5c 04 00 1a	jmp $1a0004	                JML MONITOR
.1906c3						IREADY
.1906c3		48		pha		                PHA             ; begin setdbr macro
.1906c4		08		php		                PHP
.1906c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1906c7		a9 19		lda #$19	                LDA #`ready_msg
.1906c9		48		pha		                PHA
.1906ca		ab		plb		                PLB
.1906cb		28		plp		                PLP
.1906cc		68		pla		                PLA             ; end setdbr macro
.1906cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1906cf		a2 59 76	ldx #$7659	                LDX #<>ready_msg
.1906d2		22 5f 07 19	jsl $19075f	                JSL IPRINT
.1906d6						IREADYWAIT
.1906d6		22 f0 06 19	jsl $1906f0	                JSL IGETCHE
.1906da		80 fa		bra $1906d6	                BRA IREADYWAIT
.1906dc		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.1906dd		db		stp		IRETURN         STP
.1906de		08		php		ISETIN          PHP
.1906df		e2 20		sep #$20	                SEP #$20        ; set A short
.1906e1		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.1906e5		28		plp		                PLP
.1906e6		6b		rtl		                RTL
.1906e7		08		php		ISETOUT         PHP
.1906e8		e2 20		sep #$20	                SEP #$20        ; set A short
.1906ea		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.1906ee		28		plp		                PLP
.1906ef		6b		rtl		                RTL
.1906f0		22 f9 06 19	jsl $1906f9	IGETCHE         JSL IGETCHW
.1906f4		22 7f 07 19	jsl $19077f	                JSL IPUTC
.1906f8		6b		rtl		                RTL
.1906f9						IGETCHW
.1906f9		da		phx		                PHX
.1906fa		5a		phy		                PHY
.1906fb		8b		phb		                PHB
.1906fc		0b		phd		                PHD
.1906fd		08		php		                PHP
.1906fe		e2 20		sep #$20	                SEP #$20        ; set A short
.190700		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.190704		f0 1b		beq $190721	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.190706		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.190708		f0 0d		beq $190717	                BEQ getc_uart       ; Yes: handle reading from the UART
.19070a		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.19070c		f0 09		beq $190717	                BEQ getc_uart       ; Yes: handle reading from the UART
.19070e		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.190710		28		plp		                PLP
.190711		38		sec		                SEC                 ; And return carry set
.190712		2b		pld		                PLD
.190713		ab		plb		                PLB
.190714		7a		ply		                PLY
.190715		fa		plx		                PLX
.190716		6b		rtl		                RTL
.190717		22 13 5a 19	jsl $195a13	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.19071b		22 c7 5a 19	jsl $195ac7	                JSL UART_GETC       ; Get the charater from the COM port
.19071f		80 04		bra $190725	                BRA done
.190721		22 7e 1a 18	jsl $181a7e	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.190725		28		plp		done            PLP
.190726		18		clc		                CLC                 ; Return carry clear for valid data
.190727		2b		pld		                PLD
.190728		ab		plb		                PLB
.190729		7a		ply		                PLY
.19072a		fa		plx		                PLX
.19072b		6b		rtl		                RTL
.19072c						IGETCH
.19072c		da		phx		                PHX
.19072d		5a		phy		                PHY
.19072e		8b		phb		                PHB
.19072f		0b		phd		                PHD
.190730		08		php		                PHP
.190731		e2 20		sep #$20	                SEP #$20        ; set A short
.190733		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.190737		f0 1b		beq $190754	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.190739		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.19073b		f0 0d		beq $19074a	                BEQ getc_uart       ; Yes: handle reading from the UART
.19073d		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.19073f		f0 09		beq $19074a	                BEQ getc_uart       ; Yes: handle reading from the UART
.190741		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.190743		28		plp		                PLP
.190744		38		sec		                SEC                 ; And return carry set
.190745		2b		pld		                PLD
.190746		ab		plb		                PLB
.190747		7a		ply		                PLY
.190748		fa		plx		                PLX
.190749		6b		rtl		                RTL
.19074a		22 13 5a 19	jsl $195a13	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.19074e		22 c7 5a 19	jsl $195ac7	                JSL UART_GETC       ; Get the charater from the COM port
.190752		80 04		bra $190758	                BRA done
.190754		22 c1 1a 18	jsl $181ac1	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.190758		28		plp		done            PLP
.190759		18		clc		                CLC                 ; Return carry clear for valid data
.19075a		2b		pld		                PLD
.19075b		ab		plb		                PLB
.19075c		7a		ply		                PLY
.19075d		fa		plx		                PLX
.19075e		6b		rtl		                RTL
.19075f		22 68 07 19	jsl $190768	IPRINT          JSL IPUTS
.190763		22 f8 08 19	jsl $1908f8	                JSL IPRINTCR
.190767		6b		rtl		                RTL
.190768		48		pha		IPUTS           PHA
.190769		08		php		                PHP
.19076a		e2 20		sep #$20	                SEP #$20        ; set A short
.19076c		c2 10		rep #$10	                REP #$10        ; set X long
.19076e		bd 00 00	lda $190000,x	iputs1          LDA $0,b,x      ; read from the string
.190771		f0 08		beq $19077b	                BEQ iputs_done
.190773		22 7f 07 19	jsl $19077f	iputs2          JSL IPUTC
.190777		e8		inx		iputs3          INX
.190778		4c 6e 07	jmp $19076e	                JMP iputs1
.19077b		e8		inx		iputs_done      INX
.19077c		28		plp		                PLP
.19077d		68		pla		                PLA
.19077e		6b		rtl		                RTL
.19077f						IPUTC
.19077f		da		phx		                PHX
.190780		5a		phy		                PHY
.190781		0b		phd		                PHD
.190782		8b		phb		                PHB
.190783		08		php		                PHP                 ; stash the flags (we'll be changing M)
.190784		48		pha		                PHA             ; begin setdp macro
.190785		08		php		                PHP
.190786		c2 20		rep #$20	                REP #$20        ; set A long
.190788		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19078b		5b		tcd		                TCD
.19078c		28		plp		                PLP
.19078d		68		pla		                PLA             ; end setdp macro
.19078e		48		pha		                PHA             ; begin setdbr macro
.19078f		08		php		                PHP
.190790		e2 20		sep #$20	                SEP #$20        ; set A short
.190792		a9 00		lda #$00	                LDA #0
.190794		48		pha		                PHA
.190795		ab		plb		                PLB
.190796		28		plp		                PLP
.190797		68		pla		                PLA             ; end setdbr macro
.190798		e2 20		sep #$20	                SEP #$20        ; set A short
.19079a		c2 10		rep #$10	                REP #$10        ; set X long
.19079c		48		pha		                PHA                 ; Save the character to print
.19079d		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.1907a1		f0 16		beq $1907b9	                BEQ putc_screen     ; If it's 0: print to the screen
.1907a3		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1907a5		f0 07		beq $1907ae	                BEQ putc_uart       ; Yes: handle printing to the UART
.1907a7		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1907a9		f0 03		beq $1907ae	                BEQ putc_uart       ; Yes: handle printing to the UART
.1907ab		68		pla		                PLA                 ; Otherwise, just exit
.1907ac		80 57		bra $190805	                BRA done
.1907ae		22 13 5a 19	jsl $195a13	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.1907b2		68		pla		                PLA                 ; Recover the character to send
.1907b3		22 e8 5a 19	jsl $195ae8	                JSL UART_PUTC       ; Send the character
.1907b7		80 4c		bra $190805	                BRA done
.1907b9		68		pla		putc_screen     PLA                 ; Get the character to print
.1907ba		c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.1907bc		f0 69		beq $190827	                BEQ go_down
.1907be		c9 20		cmp #$20	                CMP #$20
.1907c0		90 19		bcc $1907db	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.1907c2		c9 7f		cmp #$7f	                CMP #$7F
.1907c4		f0 45		beq $19080b	                BEQ do_del
.1907c6		b0 02		bcs $1907ca	                BCS check_A0        ; [$20..$7E]: print it
.1907c8		80 31		bra $1907fb	                BRA printc
.1907ca		c9 a0		cmp #$a0	check_A0        CMP #$A0
.1907cc		90 02		bcc $1907d0	                BCC check_ctrl1
.1907ce		80 2b		bra $1907fb	                BRA printc          ; [$A0..$FF]: print it
.1907d0		c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.1907d2		f0 53		beq $190827	                BEQ go_down         ; ... move the cursor down one row
.1907d4		c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.1907d6		f0 61		beq $190839	                BEQ go_left         ; ... move the cursor left one column
.1907d8		4c 05 08	jmp $190805	                JMP done
.1907db		c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.1907dd		f0 69		beq $190848	                BEQ do_TAB          ; ... move to the next TAB stop
.1907df		c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.1907e1		f0 34		beq $190817	                BEQ backspace       ; ... move the cursor back and replace with a space
.1907e3		c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.1907e5		f0 3a		beq $190821	                BEQ do_cr           ; ... move cursor down and to the first column
.1907e7		c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.1907e9		f0 42		beq $19082d	                BEQ go_up           ; ... move the cursor up one row
.1907eb		c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.1907ed		f0 44		beq $190833	                BEQ go_right        ; ... move the cursor right one column
.1907ef		c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.1907f1		f0 1e		beq $190811	                BEQ do_ins          ; ... insert a space
.1907f3		c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.1907f5		f0 48		beq $19083f	                BEQ go_sol          ; ... move the cursor to the start of the line
.1907f7		c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.1907f9		f0 74		beq $19086f	                BEQ go_eol          ; ... move the cursor to the end of the line
.1907fb		87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.1907fd		a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.1907ff		87 1f		sta [$1f]	                STA [COLORPOS]
.190801		22 58 09 19	jsl $190958	                JSL ICSRRIGHT       ; And advance the cursor
.190805		28		plp		done            PLP
.190806		ab		plb		                PLB
.190807		2b		pld		                PLD
.190808		7a		ply		                PLY
.190809		fa		plx		                PLX
.19080a		6b		rtl		                RTL
.19080b		22 9c 08 19	jsl $19089c	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.19080f		80 f4		bra $190805	                BRA done
.190811		22 c0 08 19	jsl $1908c0	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.190815		80 ee		bra $190805	                BRA done
.190817		22 8b 09 19	jsl $19098b	backspace       JSL ICSRLEFT
.19081b		22 9c 08 19	jsl $19089c	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.19081f		80 e4		bra $190805	                BRA done
.190821		22 f8 08 19	jsl $1908f8	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.190825		80 de		bra $190805	                BRA done
.190827		22 d7 09 19	jsl $1909d7	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.19082b		80 d8		bra $190805	                BRA done
.19082d		22 b1 09 19	jsl $1909b1	go_up           JSL ICSRUP          ; Move the cursor up one line
.190831		80 d2		bra $190805	                BRA done
.190833		22 58 09 19	jsl $190958	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.190837		80 cc		bra $190805	                BRA done
.190839		22 8b 09 19	jsl $19098b	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.19083d		80 c6		bra $190805	                BRA done
.19083f						go_sol
.19083f		c2 20		rep #$20	                REP #$20        ; set A long
.190841		a2 00 00	ldx #$0000	                LDX #0
.190844		a4 1c		ldy $1c		                LDY CURSORY
.190846		80 21		bra $190869	                BRA do_locate
.190848						do_TAB
.190848		c2 20		rep #$20	                REP #$20        ; set A long
.19084a		a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.19084c		29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.19084f		18		clc		                CLC
.190850		69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.190853		aa		tax		                TAX
.190854		a4 1c		ldy $1c		                LDY CURSORY
.190856		e2 20		sep #$20	                SEP #$20        ; set A short
.190858		e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.19085a		90 04		bcc $190860	                BCC check_row       ; Yes: check the row
.19085c		a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.19085f		c8		iny		                INY                 ; ... and the next row
.190860		c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.190862		90 05		bcc $190869	                BCC do_locate       ; Yes: reposition the cursor
.190864		22 48 0a 19	jsl $190a48	                JSL ISCROLLUP       ; No: scroll the screen
.190868		88		dey		                DEY                 ; And set the row to the last one
.190869		22 fc 09 19	jsl $1909fc	do_locate       JSL ILOCATE         ; Set the cursor position
.19086d		80 96		bra $190805	                BRA done
.19086f		a6 0f		ldx $0f		go_eol          LDX COLS_VISIBLE    ; Move the cursor to the right most column
.190871		ca		dex		                DEX
.190872		a4 1c		ldy $1c		                LDY CURSORY
.190874		22 fc 09 19	jsl $1909fc	                JSL ILOCATE
.190878		e2 20		sep #$20	                SEP #$20        ; set A short
.19087a		a7 17		lda [$17]	eol_loop        LDA [CURSORPOS]     ; Get the character under the cursor
.19087c		c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.19087e		d0 0b		bne $19088b	                BNE eol_done        ; No: exit the loop
.190880		22 8b 09 19	jsl $19098b	                JSL ICSRLEFT        ; Yes: move to the left
.190884		a6 1a		ldx $1a		                LDX CURSORX         ; Are we at column 0?
.190886		d0 f2		bne $19087a	                BNE eol_loop        ; No: try again
.190888		82 7a ff	brl $190805	                BRL done            ; Yes: we're done
.19088b		a6 1a		ldx $1a		eol_done        LDX CURSORX         ; Check the column
.19088d		e8		inx		                INX
.19088e		e4 0f		cpx $0f		                CPX COLS_VISIBLE    ; Is it the right most?
.190890		d0 03		bne $190895	                BNE eol_right
.190892		82 70 ff	brl $190805	                BRL done            ; Yes: we're done
.190895		22 58 09 19	jsl $190958	eol_right       JSL ICSRRIGHT       ; No: move right one column
.190899		82 69 ff	brl $190805	                BRL done
.19089c		da		phx		SCRSHIFTLL      PHX
.19089d		5a		phy		                PHY
.19089e		48		pha		                PHA
.19089f		0b		phd		                PHD
.1908a0		08		php		                PHP
.1908a1		48		pha		                PHA             ; begin setdp macro
.1908a2		08		php		                PHP
.1908a3		c2 20		rep #$20	                REP #$20        ; set A long
.1908a5		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1908a8		5b		tcd		                TCD
.1908a9		28		plp		                PLP
.1908aa		68		pla		                PLA             ; end setdp macro
.1908ab		c2 30		rep #$30	                REP #$30        ; set A&X long
.1908ad		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.1908af		a8		tay		                TAY                 ; Set it as the destination
.1908b0		aa		tax		                TAX
.1908b1		e8		inx		                INX                 ; And set the next cell as the source
.1908b2		18		clc		                CLC                 ; Calculate the length of the block to move
.1908b3		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.1908b5		e5 1a		sbc $1a		                SBC CURSORX
.1908b7		54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.1908ba		28		plp		                PLP
.1908bb		2b		pld		                PLD
.1908bc		68		pla		                PLA
.1908bd		7a		ply		                PLY
.1908be		fa		plx		                PLX
.1908bf		6b		rtl		                RTL
.1908c0		da		phx		SCRSHIFTLR      PHX
.1908c1		48		pha		                PHA
.1908c2		0b		phd		                PHD
.1908c3		08		php		                PHP
.1908c4		48		pha		                PHA             ; begin setdp macro
.1908c5		08		php		                PHP
.1908c6		c2 20		rep #$20	                REP #$20        ; set A long
.1908c8		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1908cb		5b		tcd		                TCD
.1908cc		28		plp		                PLP
.1908cd		68		pla		                PLA             ; end setdp macro
.1908ce		c2 30		rep #$30	                REP #$30        ; set A&X long
.1908d0		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.1908d2		1a		inc a		                INC A
.1908d3		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.1908d5		b0 1b		bcs $1908f2	                BGE done            ; Yes: just skip the whole thing
.1908d7		38		sec		                SEC                 ; Calculate the length of the block to move
.1908d8		a5 0f		lda $0f		                LDA COLS_VISIBLE
.1908da		e5 1a		sbc $1a		                SBC CURSORX
.1908dc		1a		inc a		                INC A
.1908dd		18		clc		                CLC
.1908de		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.1908e0		3a		dec a		                DEC A
.1908e1		a8		tay		                TAY                 ; Make it the destination
.1908e2		3a		dec a		                DEC A               ; Move to the previous column
.1908e3		aa		tax		                TAX                 ; Make it the source
.1908e4		38		sec		                SEC                 ; Calculate the length of the block to move
.1908e5		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.1908e7		e5 1a		sbc $1a		                SBC CURSORX
.1908e9		44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.1908ec		e2 20		sep #$20	                SEP #$20        ; set A short
.1908ee		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.1908f0		87 17		sta [$17]	                STA [CURSORPOS]
.1908f2		28		plp		done            PLP
.1908f3		2b		pld		                PLD
.1908f4		68		pla		                PLA
.1908f5		fa		plx		                PLX
.1908f6		6b		rtl		                RTL
.1908f7						IPUTB
.1908f7		6b		rtl		                RTL
.1908f8						IPRINTCR
.1908f8		da		phx		                PHX
.1908f9		5a		phy		                PHY
.1908fa		8b		phb		                PHB
.1908fb		0b		phd		                PHD
.1908fc		08		php		                PHP
.1908fd		48		pha		                PHA             ; begin setdbr macro
.1908fe		08		php		                PHP
.1908ff		e2 20		sep #$20	                SEP #$20        ; set A short
.190901		a9 00		lda #$00	                LDA #0
.190903		48		pha		                PHA
.190904		ab		plb		                PLB
.190905		28		plp		                PLP
.190906		68		pla		                PLA             ; end setdbr macro
.190907		48		pha		                PHA             ; begin setdp macro
.190908		08		php		                PHP
.190909		c2 20		rep #$20	                REP #$20        ; set A long
.19090b		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19090e		5b		tcd		                TCD
.19090f		28		plp		                PLP
.190910		68		pla		                PLA             ; end setdp macro
.190911		e2 20		sep #$20	                SEP #$20        ; set A short
.190913		c2 10		rep #$10	                REP #$10        ; set X long
.190915		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.190919		f0 1c		beq $190937	                BEQ scr_printcr
.19091b		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.19091d		f0 06		beq $190925	                BEQ uart_printcr    ; Yes: handle printing to the UART
.19091f		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.190921		f0 02		beq $190925	                BEQ uart_printcr    ; Yes: handle printing to the UART
.190923		80 1c		bra $190941	                BRA done
.190925		22 13 5a 19	jsl $195a13	uart_printcr    JSL UART_SELECT
.190929		a9 0d		lda #$0d	                LDA #CHAR_CR
.19092b		22 7f 07 19	jsl $19077f	                JSL IPUTC
.19092f		a9 0a		lda #$0a	                LDA #CHAR_LF
.190931		22 7f 07 19	jsl $19077f	                JSL IPUTC
.190935		80 0a		bra $190941	                BRA done
.190937		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.19093a		a4 1c		ldy $1c		                LDY CURSORY
.19093c		c8		iny		                INY
.19093d		22 fc 09 19	jsl $1909fc	                JSL ILOCATE
.190941		28		plp		done            PLP
.190942		2b		pld		                PLD
.190943		ab		plb		                PLB
.190944		7a		ply		                PLY
.190945		fa		plx		                PLX
.190946		6b		rtl		                RTL
.190947		da		phx		ICSRHOME        PHX
.190948		5a		phy		                PHY
.190949		08		php		                PHP
.19094a		a2 00 00	ldx #$0000	                LDX #0
.19094d		a0 00 00	ldy #$0000	                LDY #0
.190950		22 fc 09 19	jsl $1909fc	                JSL ILOCATE
.190954		28		plp		                PLP
.190955		7a		ply		                PLY
.190956		fa		plx		                PLX
.190957		6b		rtl		                RTL
.190958		da		phx		ICSRRIGHT       PHX
.190959		5a		phy		                PHY
.19095a		48		pha		                PHA
.19095b		0b		phd		                PHD
.19095c		08		php		                PHP
.19095d		c2 20		rep #$20	                REP #$20        ; set A long
.19095f		c2 10		rep #$10	                REP #$10        ; set X long
.190961		48		pha		                PHA             ; begin setdp macro
.190962		08		php		                PHP
.190963		c2 20		rep #$20	                REP #$20        ; set A long
.190965		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.190968		5b		tcd		                TCD
.190969		28		plp		                PLP
.19096a		68		pla		                PLA             ; end setdp macro
.19096b		a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.19096d		e8		inx		                INX
.19096e		a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.190970		e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.190972		90 0d		bcc $190981	                BCC icsrright_nowrap  ; No: just set the position
.190974		a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.190977		c8		iny		                INY                   ; And move to the next row
.190978		c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.19097a		90 05		bcc $190981	                BCC icsrright_nowrap  ; No: just set the position
.19097c		88		dey		                DEY                   ; Yes: lock to the last row
.19097d		22 48 0a 19	jsl $190a48	                JSL ISCROLLUP         ; But scroll the screen up
.190981						icsrright_nowrap
.190981		22 fc 09 19	jsl $1909fc	                JSL ILOCATE           ; Set the cursor position
.190985		28		plp		                PLP
.190986		2b		pld		                PLD
.190987		68		pla		                PLA
.190988		7a		ply		                PLY
.190989		fa		plx		                PLX
.19098a		6b		rtl		                RTL
.19098b						ICSRLEFT
.19098b		da		phx		                PHX
.19098c		5a		phy		                PHY
.19098d		48		pha		                PHA
.19098e		0b		phd		                PHD
.19098f		08		php		                PHP
.190990		c2 30		rep #$30	                REP #$30        ; set A&X long
.190992		48		pha		                PHA             ; begin setdp macro
.190993		08		php		                PHP
.190994		c2 20		rep #$20	                REP #$20        ; set A long
.190996		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.190999		5b		tcd		                TCD
.19099a		28		plp		                PLP
.19099b		68		pla		                PLA             ; end setdp macro
.19099c		a5 1a		lda $1a		                LDA CURSORX
.19099e		f0 0b		beq $1909ab	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.1909a0		a6 1a		ldx $1a		                LDX CURSORX
.1909a2		ca		dex		                DEX
.1909a3		86 1a		stx $1a		                STX CURSORX
.1909a5		a4 1c		ldy $1c		                LDY CURSORY
.1909a7		22 fc 09 19	jsl $1909fc	                JSL ILOCATE
.1909ab						icsrleft_done_already_zero
.1909ab		28		plp		                PLP
.1909ac		2b		pld		                PLD
.1909ad		68		pla		                PLA
.1909ae		7a		ply		                PLY
.1909af		fa		plx		                PLX
.1909b0		6b		rtl		                RTL
.1909b1						ICSRUP
.1909b1		da		phx		                PHX
.1909b2		5a		phy		                PHY
.1909b3		48		pha		                PHA
.1909b4		0b		phd		                PHD
.1909b5		08		php		                PHP
.1909b6		c2 30		rep #$30	                REP #$30        ; set A&X long
.1909b8		48		pha		                PHA             ; begin setdp macro
.1909b9		08		php		                PHP
.1909ba		c2 20		rep #$20	                REP #$20        ; set A long
.1909bc		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.1909bf		5b		tcd		                TCD
.1909c0		28		plp		                PLP
.1909c1		68		pla		                PLA             ; end setdp macro
.1909c2		a5 1c		lda $1c		                LDA CURSORY
.1909c4		f0 0b		beq $1909d1	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.1909c6		a4 1c		ldy $1c		                LDY CURSORY
.1909c8		88		dey		                DEY
.1909c9		84 1c		sty $1c		                STY CURSORY
.1909cb		a6 1a		ldx $1a		                LDX CURSORX
.1909cd		22 fc 09 19	jsl $1909fc	                JSL ILOCATE
.1909d1						isrup_done_already_zero
.1909d1		28		plp		                PLP
.1909d2		2b		pld		                PLD
.1909d3		68		pla		                PLA
.1909d4		7a		ply		                PLY
.1909d5		fa		plx		                PLX
.1909d6		6b		rtl		                RTL
.1909d7		da		phx		ICSRDOWN        PHX
.1909d8		5a		phy		                PHY
.1909d9		0b		phd		                PHD
.1909da		c2 30		rep #$30	                REP #$30        ; set A&X long
.1909dc		48		pha		                PHA             ; begin setdp macro
.1909dd		08		php		                PHP
.1909de		c2 20		rep #$20	                REP #$20        ; set A long
.1909e0		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.1909e3		5b		tcd		                TCD
.1909e4		28		plp		                PLP
.1909e5		68		pla		                PLA             ; end setdp macro
.1909e6		a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.1909e8		a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.1909ea		c8		iny		                INY
.1909eb		c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.1909ed		90 05		bcc $1909f4	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.1909ef		88		dey		                DEY                         ; Yes: go back to the last row
.1909f0		22 48 0a 19	jsl $190a48	                JSL ISCROLLUP               ; But scroll the screen up
.1909f4						icsrdown_noscroll
.1909f4		22 fc 09 19	jsl $1909fc	                JSL ILOCATE                 ; And set the cursor position
.1909f8		2b		pld		                PLD
.1909f9		7a		ply		                PLY
.1909fa		fa		plx		                PLX
.1909fb		6b		rtl		                RTL
.1909fc		48		pha		ILOCATE         PHA
.1909fd		0b		phd		                PHD
.1909fe		08		php		                PHP
.1909ff		48		pha		                PHA             ; begin setdp macro
.190a00		08		php		                PHP
.190a01		c2 20		rep #$20	                REP #$20        ; set A long
.190a03		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190a06		5b		tcd		                TCD
.190a07		28		plp		                PLP
.190a08		68		pla		                PLA             ; end setdp macro
.190a09		c2 30		rep #$30	                REP #$30        ; set A&X long
.190a0b						ilocate_scroll
.190a0b		c4 13		cpy $13		                CPY LINES_VISIBLE
.190a0d		90 07		bcc $190a16	                BCC ilocate_scrolldone
.190a0f		22 48 0a 19	jsl $190a48	                JSL ISCROLLUP
.190a13		88		dey		                DEY
.190a14		80 f5		bra $190a0b	                BRA ilocate_scroll
.190a16						ilocate_scrolldone
.190a16		86 1a		stx $1a		                STX CURSORX
.190a18		84 1c		sty $1c		                STY CURSORY
.190a1a		a5 0c		lda $0c		                LDA SCREENBEGIN
.190a1c						ilocate_row
.190a1c		c0 00 00	cpy #$0000	                CPY #$0
.190a1f		f0 08		beq $190a29	                BEQ ilocate_right
.190a21		18		clc		ilocate_down    CLC
.190a22		65 11		adc $11		                ADC COLS_PER_LINE
.190a24		88		dey		                DEY
.190a25		f0 02		beq $190a29	                BEQ ilocate_right
.190a27		80 f8		bra $190a21	                BRA ilocate_down
.190a29		18		clc		ilocate_right   CLC
.190a2a		65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.190a2c		85 17		sta $17		                STA CURSORPOS
.190a2e		a4 1c		ldy $1c		                LDY CURSORY
.190a30		98		tya		                TYA
.190a31		8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.190a35		8a		txa		                TXA
.190a36		8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.190a3a		c2 20		rep #$20	                REP #$20        ; set A long
.190a3c		18		clc		                CLC
.190a3d		a5 17		lda $17		                LDA CURSORPOS
.190a3f		69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.190a42		85 1f		sta $1f		                STA COLORPOS
.190a44		28		plp		ilocate_done    PLP
.190a45		2b		pld		                PLD
.190a46		68		pla		                PLA
.190a47		6b		rtl		                RTL
.190a48						ISCROLLUP
.190a48		48		pha		                PHA
.190a49		da		phx		                PHX
.190a4a		5a		phy		                PHY
.190a4b		8b		phb		                PHB
.190a4c		0b		phd		                PHD
.190a4d		08		php		                PHP
.190a4e		48		pha		                PHA             ; begin setdp macro
.190a4f		08		php		                PHP
.190a50		c2 20		rep #$20	                REP #$20        ; set A long
.190a52		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190a55		5b		tcd		                TCD
.190a56		28		plp		                PLP
.190a57		68		pla		                PLA             ; end setdp macro
.190a58		c2 30		rep #$30	                REP #$30        ; set A&X long
.190a5a		a5 11		lda $11		                LDA COLS_PER_LINE
.190a5c		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.190a60		a5 13		lda $13		                LDA LINES_VISIBLE
.190a62		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.190a66		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.190a6a		85 00		sta $00		                STA TMPPTR1
.190a6c		18		clc		                CLC
.190a6d		a9 00 a0	lda #$a000	                LDA #$A000
.190a70		a8		tay		                TAY
.190a71		65 11		adc $11		                ADC COLS_PER_LINE
.190a73		aa		tax		                TAX
.190a74		a5 00		lda $00		                LDA TMPPTR1
.190a76		54 af af	mvn $af,$af	                MVN $AF,$AF
.190a79		c2 30		rep #$30	                REP #$30        ; set A&X long
.190a7b		18		clc		                CLC
.190a7c		a9 00 c0	lda #$c000	                LDA #$C000
.190a7f		a8		tay		                TAY
.190a80		65 11		adc $11		                ADC COLS_PER_LINE
.190a82		aa		tax		                TAX
.190a83		a5 00		lda $00		                LDA TMPPTR1
.190a85		54 af af	mvn $af,$af	                MVN $AF,$AF
.190a88		a5 00		lda $00		                LDA TMPPTR1
.190a8a		48		pha		                PHA
.190a8b		18		clc		                CLC
.190a8c		69 00 a0	adc #$a000	                ADC #<>CS_TEXT_MEM_PTR
.190a8f		85 00		sta $00		                STA TMPPTR1
.190a91		a0 00 00	ldy #$0000	                LDY #0
.190a94		a9 20 00	lda #$0020	                LDA #' '
.190a97		97 00		sta [$00],y	clr_text        STA [TMPPTR1],Y
.190a99		c8		iny		                INY
.190a9a		c4 0f		cpy $0f		                CPY COLS_VISIBLE
.190a9c		d0 f9		bne $190a97	                BNE clr_text
.190a9e		68		pla		                PLA
.190a9f		18		clc		                CLC
.190aa0		69 00 c0	adc #$c000	                ADC #<>CS_COLOR_MEM_PTR
.190aa3		85 00		sta $00		                STA TMPPTR1
.190aa5		a0 00 00	ldy #$0000	                LDY #0
.190aa8		a5 1e		lda $1e		                LDA CURCOLOR
.190aaa		97 00		sta [$00],y	clr_color       STA [TMPPTR1],Y
.190aac		c8		iny		                INY
.190aad		c4 0f		cpy $0f		                CPY COLS_VISIBLE
.190aaf		d0 f9		bne $190aaa	                BNE clr_color
.190ab1		28		plp		                PLP
.190ab2		2b		pld		                PLD
.190ab3		ab		plb		                PLB
.190ab4		7a		ply		                PLY
.190ab5		fa		plx		                PLX
.190ab6		68		pla		                PLA
.190ab7		6b		rtl		                RTL
.190ab8		08		php		IPRINTH         PHP
.190ab9		48		pha		                PHA
.190aba						iprinth1
.190aba		e2 20		sep #$20	                SEP #$20        ; set A short
.190abc		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.190abf		4a		lsr a		                LSR
.190ac0		4a		lsr a		                LSR
.190ac1		4a		lsr a		                LSR
.190ac2		4a		lsr a		                LSR
.190ac3		22 12 0b 19	jsl $190b12	                JSL iprint_digit
.190ac7		bd 00 00	lda $0000,x	                LDA #0,b,x
.190aca		22 12 0b 19	jsl $190b12	                JSL iprint_digit
.190ace		ca		dex		                DEX
.190acf		88		dey		                DEY
.190ad0		d0 e8		bne $190aba	                BNE iprinth1
.190ad2		68		pla		                PLA
.190ad3		28		plp		                PLP
.190ad4		6b		rtl		                RTL
.190ad5						IPRINTAH
.190ad5		48		pha		                PHA
.190ad6		08		php		                PHP
.190ad7		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.190adb		08		php		                PHP                   ; Get the processor status into A
.190adc		e2 20		sep #$20	                SEP #$20        ; set A short
.190ade		c2 10		rep #$10	                REP #$10        ; set X long
.190ae0		68		pla		                PLA
.190ae1		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.190ae3		c9 20		cmp #$20	                CMP #%00100000
.190ae5		f0 14		beq $190afb	                BEQ eight_bit
.190ae7		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.190aeb		4a		lsr a		                LSR A
.190aec		4a		lsr a		                LSR A
.190aed		4a		lsr a		                LSR A
.190aee		4a		lsr a		                LSR A
.190aef		22 12 0b 19	jsl $190b12	                JSL iprint_digit      ; And print it
.190af3		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.190af7		22 12 0b 19	jsl $190b12	                JSL iprint_digit      ; And print it
.190afb		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.190aff		4a		lsr a		                LSR A
.190b00		4a		lsr a		                LSR A
.190b01		4a		lsr a		                LSR A
.190b02		4a		lsr a		                LSR A
.190b03		22 12 0b 19	jsl $190b12	                JSL iprint_digit      ; And print it
.190b07		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.190b0b		22 12 0b 19	jsl $190b12	                JSL iprint_digit      ; And print it
.190b0f		28		plp		                PLP
.190b10		68		pla		                PLA
.190b11		6b		rtl		                RTL
.190b12		da		phx		iprint_digit    PHX
.190b13		c2 20		rep #$20	                REP #$20        ; set A long
.190b15		29 0f 00	and #$000f	                AND #$0F
.190b18		aa		tax		                TAX
.190b19		bf 6d 76 19	lda $19766d,x	                LDA hex_digits,X
.190b1d		22 7f 07 19	jsl $19077f	                JSL IPUTC       ; Print the digit
.190b21		fa		plx		                PLX
.190b22		6b		rtl		                RTL
.190b23		48		pha		ICLRSCREEN	    PHA
.190b24		da		phx		                PHX
.190b25		08		php		                PHP
.190b26		e2 20		sep #$20	                SEP #$20        ; set A short
.190b28		c2 10		rep #$10	                REP #$10        ; set X long
.190b2a		a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.190b2d		a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.190b2f		9f 00 a0 af	sta $afa000,x	iclearloop0	STA CS_TEXT_MEM_PTR, x	;
.190b33		e8		inx		                inx
.190b34		e0 00 20	cpx #$2000	                cpx #$2000
.190b37		d0 f6		bne $190b2f	                bne iclearloop0
.190b39		a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.190b3c		af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.190b40		9f 00 c0 af	sta $afc000,x	iclearloop1     STA CS_COLOR_MEM_PTR, x	;
.190b44		e8		inx		                inx
.190b45		e0 00 20	cpx #$2000	                cpx #$2000
.190b48		d0 f6		bne $190b40	                bne iclearloop1
.190b4a		28		plp		                PLP
.190b4b		fa		plx		                PLX
.190b4c		68		pla		                PLA
.190b4d		6b		rtl		                RTL
.190b4e						COPYBYTES42
.190b4e		08		php		                PHP
.190b4f		0b		phd		                PHD
.190b50		48		pha		                PHA             ; begin setdp macro
.190b51		08		php		                PHP
.190b52		c2 20		rep #$20	                REP #$20        ; set A long
.190b54		a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.190b57		5b		tcd		                TCD
.190b58		28		plp		                PLP
.190b59		68		pla		                PLA             ; end setdp macro
.190b5a		e2 20		sep #$20	                SEP #$20        ; set A short
.190b5c		c2 10		rep #$10	                REP #$10        ; set X long
.190b5e		a0 00 00	ldy #$0000	                LDY #0
.190b61		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.190b63		97 04		sta [$04],y	                STA [TMPPTR2],Y
.190b65		c8		iny		                INY
.190b66		c0 2a 00	cpy #$002a	                CPY #42
.190b69		d0 f6		bne $190b61	                BNE copy_loop
.190b6b		2b		pld		                PLD
.190b6c		28		plp		                PLP
.190b6d		60		rts		                RTS
.190b6e						ICOLORFLAG
.190b6e		48		pha		                PHA
.190b6f		da		phx		                PHX
.190b70		5a		phy		                PHY
.190b71		08		php		                PHP
.190b72		8b		phb		                PHB
.190b73		0b		phd		                PHD
.190b74		48		pha		                PHA             ; begin setdp macro
.190b75		08		php		                PHP
.190b76		c2 20		rep #$20	                REP #$20        ; set A long
.190b78		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190b7b		5b		tcd		                TCD
.190b7c		28		plp		                PLP
.190b7d		68		pla		                PLA             ; end setdp macro
.190b7e		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b80		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.190b83		85 04		sta $04		                STA TMPPTR2
.190b85		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.190b88		85 06		sta $06		                STA TMPPTR2+2
.190b8a		a9 ca 72	lda #$72ca	                LDA #<>greet_clr_line1
.190b8d		85 00		sta $00		                STA TMPPTR1
.190b8f		a9 19 00	lda #$0019	                LDA #`greet_clr_line1
.190b92		85 02		sta $02		                STA TMPPTR1+2
.190b94		20 4e 0b	jsr $190b4e	                JSR COPYBYTES42
.190b97		18		clc		                CLC
.190b98		a5 04		lda $04		                LDA TMPPTR2
.190b9a		65 11		adc $11		                ADC COLS_PER_LINE
.190b9c		85 04		sta $04		                STA TMPPTR2
.190b9e		a9 f4 72	lda #$72f4	                LDA #<>greet_clr_line2
.190ba1		85 00		sta $00		                STA TMPPTR1
.190ba3		a9 19 00	lda #$0019	                LDA #`greet_clr_line2
.190ba6		85 02		sta $02		                STA TMPPTR1+2
.190ba8		20 4e 0b	jsr $190b4e	                JSR COPYBYTES42
.190bab		18		clc		                CLC
.190bac		a5 04		lda $04		                LDA TMPPTR2
.190bae		65 11		adc $11		                ADC COLS_PER_LINE
.190bb0		85 04		sta $04		                STA TMPPTR2
.190bb2		a9 1e 73	lda #$731e	                LDA #<>greet_clr_line3
.190bb5		85 00		sta $00		                STA TMPPTR1
.190bb7		a9 19 00	lda #$0019	                LDA #`greet_clr_line3
.190bba		85 02		sta $02		                STA TMPPTR1+2
.190bbc		20 4e 0b	jsr $190b4e	                JSR COPYBYTES42
.190bbf		18		clc		                CLC
.190bc0		a5 04		lda $04		                LDA TMPPTR2
.190bc2		65 11		adc $11		                ADC COLS_PER_LINE
.190bc4		85 04		sta $04		                STA TMPPTR2
.190bc6		a9 48 73	lda #$7348	                LDA #<>greet_clr_line4
.190bc9		85 00		sta $00		                STA TMPPTR1
.190bcb		a9 19 00	lda #$0019	                LDA #`greet_clr_line4
.190bce		85 02		sta $02		                STA TMPPTR1+2
.190bd0		20 4e 0b	jsr $190b4e	                JSR COPYBYTES42
.190bd3		18		clc		                CLC
.190bd4		a5 04		lda $04		                LDA TMPPTR2
.190bd6		65 11		adc $11		                ADC COLS_PER_LINE
.190bd8		85 04		sta $04		                STA TMPPTR2
.190bda		a9 72 73	lda #$7372	                LDA #<>greet_clr_line5
.190bdd		85 00		sta $00		                STA TMPPTR1
.190bdf		a9 19 00	lda #$0019	                LDA #`greet_clr_line5
.190be2		85 02		sta $02		                STA TMPPTR1+2
.190be4		20 4e 0b	jsr $190b4e	                JSR COPYBYTES42
.190be7		2b		pld		                PLD
.190be8		ab		plb		                PLB
.190be9		28		plp		                PLP
.190bea		7a		ply		                PLY
.190beb		fa		plx		                PLX
.190bec		68		pla		                PLA
.190bed		6b		rtl		                RTL
.190bee		0b		phd		IINITCHLUT		  PHD
.190bef		08		php		                PHP
.190bf0		48		pha		                PHA
.190bf1		da		phx		                PHX
.190bf2		e2 20		sep #$20	                SEP #$20        ; set A short
.190bf4		e2 10		sep #$10	                SEP #$10        ; set X short
.190bf6		a2 00		ldx #$00					        LDX	#$00
.190bf8		bf 9c 73 19	lda $19739c,x	lutinitloop0	LDA @lfg_color_lut,x		; get Local Data
.190bfc		9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.190c00		e8		inx		                inx
.190c01		e0 40		cpx #$40	                cpx #$40
.190c03		d0 f3		bne $190bf8	                bne lutinitloop0
.190c05		a2 00		ldx #$00	                LDX	#$00
.190c07		bf dc 73 19	lda $1973dc,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.190c0b		9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.190c0f		e8		inx		                INX
.190c10		e0 40		cpx #$40	                CPX #$40
.190c12		d0 f3		bne $190c07	                bne lutinitloop1
.190c14		c2 20		rep #$20	                REP #$20        ; set A long
.190c16		c2 10		rep #$10	                REP #$10        ; set X long
.190c18		fa		plx		                PLX
.190c19		68		pla		                PLA
.190c1a		28		plp		                PLP
.190c1b		2b		pld		                PLD
.190c1c		6b		rtl		                RTL
.190c1d						IINITGAMMATABLE
.190c1d		e2 20		sep #$20	                SEP #$20        ; set A short
.190c1f		c2 10		rep #$10	                REP #$10        ; set X long
.190c21		a2 00 00	ldx #$0000	                ldx #$0000
.190c24		bf 00 7b 19	lda $197b00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.190c28		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.190c2c		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.190c30		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.190c34		e8		inx		                inx
.190c35		e0 00 01	cpx #$0100	                cpx #$0100
.190c38		d0 ea		bne $190c24	                bne initgammaloop
.190c3a		c2 30		rep #$30	                REP #$30        ; set A&X long
.190c3c		6b		rtl		                RTL
.190c3d		48		pha		IINITALLLUT     PHA
.190c3e		da		phx		                PHX
.190c3f		a2 00 00	ldx #$0000	                LDX #$0000
.190c42		e2 20		sep #$20	                SEP #$20        ; set A short
.190c44		a9 00		lda #$00	                LDA #$00
.190c46		85 0a		sta $0a		                STA $0A     ; Temp Location
.190c48						iinit_lut_loop
.190c48		86 02		stx $02		                STX $02
.190c4a		a6 0a		ldx $0a		                LDX $0A
.190c4c		bf 00 7a 19	lda $197a00,x	                LDA GAMMA_2_2_Tbl, x
.190c50		49 55		eor #$55	                EOR  #$55
.190c52		a6 02		ldx $02		                LDX $02
.190c54		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190c58		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190c5c		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190c60		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190c64		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190c68		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190c6c		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190c70		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190c74		e8		inx		                inx
.190c75		86 02		stx $02		                STX $02
.190c77		a6 0a		ldx $0a		                LDX $0A
.190c79		bf 00 7c 19	lda $197c00,x	                LDA RANDOM_LUT_Tbl, x
.190c7d		a6 02		ldx $02		                LDX $02
.190c7f		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190c83		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190c87		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190c8b		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190c8f		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190c93		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190c97		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190c9b		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190c9f		e8		inx		                inx
.190ca0		86 02		stx $02		                STX $02
.190ca2		a6 0a		ldx $0a		                LDX $0A
.190ca4		bf 00 7b 19	lda $197b00,x	                LDA GAMMA_1_8_Tbl, x
.190ca8		49 aa		eor #$aa	                EOR  #$AA
.190caa		a6 02		ldx $02		                LDX $02
.190cac		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190cb0		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190cb4		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190cb8		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190cbc		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190cc0		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190cc4		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190cc8		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190ccc		e8		inx		                inx
.190ccd		a9 ff		lda #$ff	                LDA #$FF
.190ccf		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190cd3		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190cd7		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190cdb		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190cdf		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190ce3		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190ce7		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190ceb		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190cef		e6 0a		inc $0a		                inc $0A
.190cf1		e8		inx		                inx
.190cf2		e0 00 04	cpx #$0400	                cpx #$0400
.190cf5		f0 03		beq $190cfa	                beq iinit_lut_exit
.190cf7		82 4e ff	brl $190c48	                brl iinit_lut_loop
.190cfa						iinit_lut_exit
.190cfa		c2 30		rep #$30	                REP #$30        ; set A&X long
.190cfc		fa		plx		                PLX
.190cfd		68		pla		                PLA
.190cfe		6b		rtl		                RTL
.190cff						INITVKYTXTMODE_BYPASS_DPSW
.190cff		48		pha		                PHA
.190d00		08		php		                PHP
.190d01		80 24		bra $190d27	                BRA WeNeed640480Here
.190d03						IINITVKYTXTMODE
.190d03		48		pha		                PHA
.190d04		08		php		                PHP
.190d05		e2 20		sep #$20	                SEP #$20        ; set A short
.190d07		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.190d0b		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.190d0d		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.190d0f		f0 16		beq $190d27	                BEQ WeNeed640480Here
.190d11		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190d15		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.190d17		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.190d19		f0 33		beq $190d4e	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.190d1b		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.190d1f		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.190d21		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190d25		80 27		bra $190d4e	                BRA INITVICKYMODEHIRES
.190d27						WeNeed640480Here:
.190d27		e2 20		sep #$20	                SEP #$20        ; set A short
.190d29		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190d2d		29 01		and #$01	                AND #$01
.190d2f		c9 01		cmp #$01	                CMP #$01
.190d31		d0 15		bne $190d48	                BNE INITVICKYMODE
.190d33		a9 00		lda #$00	                LDA #$00
.190d35		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190d39		ea		nop		                NOP
.190d3a		ea		nop		                NOP
.190d3b		ea		nop		                NOP
.190d3c		ea		nop		                NOP
.190d3d		ea		nop		                NOP
.190d3e		a9 01		lda #$01	                LDA #$01
.190d40		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190d44		ea		nop		                NOP
.190d45		ea		nop		                NOP
.190d46		ea		nop		                NOP
.190d47		ea		nop		                NOP
.190d48						INITVICKYMODE
.190d48		a9 00		lda #$00	                LDA #$00
.190d4a		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.190d4e						INITVICKYMODEHIRES
.190d4e		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.190d50		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.190d54		e2 20		sep #$20	                SEP #$20        ; set A short
.190d56		a9 00		lda #$00	                LDA #$00
.190d58		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.190d5c		a9 54		lda #$54	                LDA #$54
.190d5e		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.190d62		a9 54		lda #$54	                LDA #$54
.190d64		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.190d68		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.190d6a		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.190d6e		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.190d70		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.190d74		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.190d78		c2 30		rep #$30	                REP #$30        ; set A&X long
.190d7a		22 81 0d 19	jsl $190d81	                JSL ISETSIZES                     ; Calculate the size of the text screen
.190d7e		28		plp		                PLP
.190d7f		68		pla		                PLA
.190d80		6b		rtl		                RTL
.190d81						ISETSIZES
.190d81		48		pha		                PHA
.190d82		da		phx		                PHX
.190d83		5a		phy		                PHY
.190d84		8b		phb		                PHB
.190d85		0b		phd		                PHD
.190d86		08		php		                PHP
.190d87		48		pha		                PHA             ; begin setdp macro
.190d88		08		php		                PHP
.190d89		c2 20		rep #$20	                REP #$20        ; set A long
.190d8b		a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.190d8e		5b		tcd		                TCD
.190d8f		28		plp		                PLP
.190d90		68		pla		                PLA             ; end setdp macro
.190d91		48		pha		                PHA             ; begin setdbr macro
.190d92		08		php		                PHP
.190d93		e2 20		sep #$20	                SEP #$20        ; set A short
.190d95		a9 00		lda #$00	                LDA #0
.190d97		48		pha		                PHA
.190d98		ab		plb		                PLB
.190d99		28		plp		                PLP
.190d9a		68		pla		                PLA             ; end setdbr macro
.190d9b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.190d9d		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190da1		29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.190da3		0a		asl a		                ASL A
.190da4		aa		tax		                TAX                         ; Index to the col/line count in X
.190da5		c2 20		rep #$20	                REP #$20        ; set A long
.190da7		bf 24 0e 19	lda $190e24,x	                LDA cols_by_res,X           ; Get the number of columns
.190dab		85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.190dad		85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.190daf		bf 2c 0e 19	lda $190e2c,x	                LDA lines_by_res,X          ; Get the number of lines
.190db3		85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.190db5		85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.190db7		e2 20		sep #$20	                SEP #$20        ; set A short
.190db9		af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.190dbd		89 01		bit #$01	                BIT #Border_Ctrl_Enable
.190dbf		f0 5c		beq $190e1d	                BEQ done                    ; No border... the sizes are correct now
.190dc1		af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.190dc5		29 3f		and #$3f	                AND #$3F
.190dc7		89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.190dc9		d0 04		bne $190dcf	                BNE frac_width
.190dcb		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.190dcc		4a		lsr a		                LSR A
.190dcd		80 03		bra $190dd2	                BRA store_width
.190dcf		4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.190dd0		4a		lsr a		                LSR A                       ; because a column is partially hidden
.190dd1		1a		inc a		                INC A
.190dd2		85 00		sta $00		store_width     STA TMPPTR1
.190dd4		64 01		stz $01		                STZ TMPPTR1+1
.190dd6		e2 20		sep #$20	                SEP #$20        ; set A short
.190dd8		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.190ddc		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.190dde		f0 04		beq $190de4	                BEQ adjust_width            ; No... just adjust the width of the screen
.190de0		c2 20		rep #$20	                REP #$20        ; set A long
.190de2		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.190de4						adjust_width
.190de4		c2 20		rep #$20	                REP #$20        ; set A long
.190de6		38		sec		                SEC
.190de7		a5 11		lda $11		                LDA COLS_PER_LINE
.190de9		e5 00		sbc $00		                SBC TMPPTR1
.190deb		85 0f		sta $0f		                STA COLS_VISIBLE
.190ded		af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.190df1		29 3f 00	and #$003f	                AND #$3F
.190df4		89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.190df7		d0 04		bne $190dfd	                BNE frac_height
.190df9		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.190dfa		4a		lsr a		                LSR A
.190dfb		80 03		bra $190e00	                BRA store_height
.190dfd		4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.190dfe		4a		lsr a		                LSR A                       ; because a column is partially hidden
.190dff		1a		inc a		                INC A
.190e00		85 00		sta $00		store_height    STA TMPPTR1
.190e02		64 01		stz $01		                STZ TMPPTR1+1
.190e04		e2 20		sep #$20	                SEP #$20        ; set A short
.190e06		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.190e0a		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.190e0c		f0 04		beq $190e12	                BEQ adjust_height           ; No... just adjust the height of the screen
.190e0e		c2 20		rep #$20	                REP #$20        ; set A long
.190e10		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.190e12						adjust_height
.190e12		c2 20		rep #$20	                REP #$20        ; set A long
.190e14		38		sec		                SEC
.190e15		a5 15		lda $15		                LDA LINES_MAX
.190e17		e5 00		sbc $00		                SBC TMPPTR1
.190e19		85 13		sta $13		                STA LINES_VISIBLE
.190e1b		c2 30		rep #$30	                REP #$30        ; set A&X long
.190e1d		28		plp		done            PLP
.190e1e		2b		pld		                PLD
.190e1f		ab		plb		                PLB
.190e20		7a		ply		                PLY
.190e21		fa		plx		                PLX
.190e22		68		pla		                PLA
.190e23		6b		rtl		                RTL
>190e24		50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>190e2c		3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.190e34						IINITVKYGRPMODE
.190e34		48		pha		                PHA
.190e35		e2 20		sep #$20	                SEP #$20        ; set A short
.190e37		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190e39		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.190e3d		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190e3f		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.190e43		a9 c0		lda #$c0	                LDA #$C0
.190e45		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.190e49		a9 00		lda #$00	                LDA #$00
.190e4b		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.190e4f		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190e51		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.190e55		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190e57		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.190e5b		a9 c0		lda #$c0	                LDA #$C0
.190e5d		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.190e61		a9 00		lda #$00	                LDA #$00
.190e63		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.190e67		c2 30		rep #$30	                REP #$30        ; set A&X long
.190e69		68		pla		                PLA
.190e6a		6b		rtl		                RTL
.190e6b						IINITTILEMODE
.190e6b		6b		rtl		                RTL
.190e6c		6b		rtl		INOP            RTL
.190e6d						IINITFONTSET
.190e6d		48		pha		                PHA
.190e6e		da		phx		                PHX
.190e6f		5a		phy		                PHY
.190e70		8b		phb		                PHB
.190e71		08		php		                PHP
.190e72		c2 30		rep #$30	                REP #$30        ; set A&X long
.190e74		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.190e77		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.190e7a		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.190e7d		54 af 1f	mvn $1f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.190e80		28		plp		                PLP
.190e81		ab		plb		                PLB
.190e82		7a		ply		                PLY
.190e83		fa		plx		                PLX
.190e84		68		pla		                PLA
.190e85		6b		rtl		                RTL
.190e86						INITMOUSEPOINTER
.190e86		e2 20		sep #$20	                SEP #$20        ; set A short
.190e88		c2 10		rep #$10	                REP #$10        ; set X long
.190e8a		a2 00 00	ldx #$0000	                LDX #$0000
.190e8d						FILL_MOUSE_MARKER
.190e8d		bf 00 7d 19	lda $197d00,x	                LDA @lMOUSE_POINTER_PTR,X
.190e91		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.190e95		e8		inx		                INX
.190e96		e0 00 01	cpx #$0100	                CPX #$0100
.190e99		d0 f2		bne $190e8d	                BNE FILL_MOUSE_MARKER
.190e9b		ea		nop		                nop
.190e9c		a9 01		lda #$01	                LDA #$01
.190e9e		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.190ea2		c2 30		rep #$30	                REP #$30        ; set A&X long
.190ea4		6b		rtl		                RTL
.190ea5						IINITCURSOR
.190ea5		e2 20		sep #$20	                SEP #$20        ; set A short
.190ea7		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.190ea9		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.190ead		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.190eaf		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.190eb3		c2 30		rep #$30	                REP #$30        ; set A&X long
.190eb5		a9 00 00	lda #$0000	                LDA #$0000;
.190eb8		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.190ebc		a9 06 00	lda #$0006	                LDA #$0006;
.190ebf		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.190ec3		6b		rtl		                RTL
.190ec4		0b		phd		IINITSUPERIO	  PHD
.190ec5		08		php		                PHP
.190ec6		48		pha		                PHA
.190ec7		e2 20		sep #$20	                SEP #$20        ; set A short
.190ec9		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190ecb		8f 23 11 af	sta $af1123	                STA GP10_REG
.190ecf		af 23 11 af	lda $af1123	                LDA GP10_REG
.190ed3		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190ed5		8f 24 11 af	sta $af1124	                STA GP11_REG
.190ed9		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190edb		8f 25 11 af	sta $af1125	                STA GP12_REG
.190edf		a9 01		lda #$01	        	LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190ee1		8f 26 11 af	sta $af1126	        	STA GP13_REG
.190ee5		a9 05		lda #$05	        	LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.190ee7		8f 27 11 af	sta $af1127	        	STA GP14_REG
.190eeb		a9 05		lda #$05	        	LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.190eed		8f 28 11 af	sta $af1128	        	STA GP15_REG
.190ef1		a9 05		lda #$05	        	LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.190ef3		8f 29 11 af	sta $af1129	        	STA GP16_REG
.190ef7		a9 05		lda #$05	        	LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.190ef9		8f 2a 11 af	sta $af112a	        	STA GP17_REG
.190efd		a9 00		lda #$00	        	LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.190eff		8f 2b 11 af	sta $af112b	        	STA GP20_REG
.190f03		a9 01		lda #$01			LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190f05		8f 2f 11 af	sta $af112f			STA GP24_REG
.190f09		a9 05		lda #$05			LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.190f0b		8f 30 11 af	sta $af1130			STA GP25_REG
.190f0f		a9 84		lda #$84			LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.190f11		8f 31 11 af	sta $af1131			STA GP26_REG
.190f15		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.190f17		8f 33 11 af	sta $af1133			STA GP30_REG
.190f1b		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.190f1d		8f 34 11 af	sta $af1134			STA GP31_REG
.190f21		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.190f23		8f 35 11 af	sta $af1135			STA GP32_REG
.190f27		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.190f29		8f 36 11 af	sta $af1136			STA GP33_REG
.190f2d		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.190f2f		8f 37 11 af	sta $af1137			STA GP34_REG
.190f33		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.190f35		8f 38 11 af	sta $af1138			STA GP35_REG
.190f39		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.190f3b		8f 39 11 af	sta $af1139			STA GP36_REG
.190f3f		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.190f41		8f 3a 11 af	sta $af113a			STA GP37_REG
.190f45		a9 01		lda #$01			LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190f47		8f 3d 11 af	sta $af113d			STA GP42_REG
.190f4b		a9 01		lda #$01			LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.190f4d		8f 3e 11 af	sta $af113e			STA GP43_REG
.190f51		a9 05		lda #$05			LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.190f53		8f 3f 11 af	sta $af113f			STA GP50_REG
.190f57		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.190f59		8f 40 11 af	sta $af1140	                STA GP51_REG
.190f5d		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.190f5f		8f 41 11 af	sta $af1141	                STA GP52_REG
.190f63		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.190f65		8f 42 11 af	sta $af1142	                STA GP53_REG
.190f69		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.190f6b		8f 43 11 af	sta $af1143	                STA GP54_REG
.190f6f		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.190f71		8f 44 11 af	sta $af1144	                STA GP55_REG
.190f75		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.190f77		8f 45 11 af	sta $af1145	                STA GP56_REG
.190f7b		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.190f7d		8f 46 11 af	sta $af1146	                STA GP57_REG
.190f81		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.190f83		8f 47 11 af	sta $af1147	                STA GP60_REG
.190f87		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.190f89		8f 48 11 af	sta $af1148	                STA GP61_REG
.190f8d		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.190f8f		8f 4b 11 af	sta $af114b	                STA GP1_REG
.190f93		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.190f95		8f 4c 11 af	sta $af114c	                STA GP2_REG
.190f99		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.190f9b		8f 4d 11 af	sta $af114d	                STA GP3_REG
.190f9f		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.190fa1		8f 4e 11 af	sta $af114e	                STA GP4_REG
.190fa5		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.190fa7		8f 4f 11 af	sta $af114f	                STA GP5_REG
.190fab		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.190fad		8f 50 11 af	sta $af1150	                STA GP6_REG
.190fb1		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.190fb3		8f 5d 11 af	sta $af115d	                STA LED1_REG
.190fb7		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.190fb9		8f 5e 11 af	sta $af115e	                STA LED2_REG
.190fbd		c2 20		rep #$20	                REP #$20        ; set A long
.190fbf		68		pla		                PLA
.190fc0		28		plp			        PLP
.190fc1		2b		pld				PLD
.190fc2		6b		rtl		                RTL
.190fc3		0b		phd		IINITKEYBOARD	PHD
.190fc4		08		php				PHP
.190fc5		48		pha				PHA
.190fc6		da		phx				PHX
.190fc7		e2 20		sep #$20	                SEP #$20        ; set A short
.190fc9		c2 10		rep #$10	                REP #$10        ; set X long
.190fcb		18		clc		                CLC
.190fcc		20 62 10	jsr $191062	                JSR Poll_Inbuf ;
.190fcf		a9 aa		lda #$aa			LDA #$AA			;Send self test command
.190fd1		8f 07 18 af	sta $af1807			STA KBD_CMD_BUF
.190fd5		20 6d 10	jsr $19106d	                JSR Poll_Outbuf ;
.190fd8		af 03 18 af	lda $af1803	                LDA KBD_OUT_BUF		;Check self test result
.190fdc		c9 55		cmp #$55	                CMP #$55
.190fde		f0 03		beq $190fe3	                BEQ	passAAtest
.190fe0		82 72 00	brl $191055	                BRL initkb_loop_out
.190fe3						passAAtest
.190fe3		a9 ab		lda #$ab			LDA #$AB			;Send test Interface command
.190fe5		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF
.190fe9		20 6d 10	jsr $19106d	                JSR Poll_Outbuf ;
.190fec		af 03 18 af	lda $af1803			LDA KBD_OUT_BUF		;Display Interface test results
.190ff0		c9 00		cmp #$00			CMP #$00			;Should be 00
.190ff2		f0 03		beq $190ff7			BEQ	passABtest
.190ff4		82 5e 00	brl $191055	                BRL initkb_loop_out
.190ff7						passABtest
.190ff7		a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.190ff9		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF
.190ffd		20 62 10	jsr $191062	                JSR Poll_Inbuf ;
.191000		a9 43		lda #$43	                LDA #%01000011      ; Enable Interrupt - Translation from CODE 2 to CODE 1 Scan code is enable
.191002		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF
.191006		20 62 10	jsr $191062	                JSR Poll_Inbuf ;
.191009		a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.19100b		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF
.19100f		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.191012		ca		dex		DLY_LOOP1       DEX
.191013		ea		nop		                NOP
.191014		ea		nop		                NOP
.191015		ea		nop		                NOP
.191016		ea		nop		                NOP
.191017		ea		nop		                NOP
.191018		ea		nop		                NOP
.191019		ea		nop		                NOP
.19101a		ea		nop		                NOP
.19101b		e0 00 00	cpx #$0000	                CPX #$0000
.19101e		d0 f2		bne $191012	                BNE DLY_LOOP1
.191020		20 6d 10	jsr $19106d	                JSR Poll_Outbuf ;
.191023		af 03 18 af	lda $af1803	                LDA KBD_OUT_BUF   ; Read Output Buffer
.191027						DO_CMD_F4_AGAIN
.191027		20 62 10	jsr $191062	                JSR Poll_Inbuf ;
.19102a		a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.19102c		8f 03 18 af	sta $af1803					        STA KBD_DATA_BUF
.191030		20 6d 10	jsr $19106d	                JSR Poll_Outbuf ;
.191033		af 03 18 af	lda $af1803					        LDA KBD_OUT_BUF		; Clear the Output buffer
.191037		c9 fa		cmp #$fa	                CMP #$FA
.191039		d0 ec		bne $191027	                BNE DO_CMD_F4_AGAIN
.19103b		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.19103f		29 01		and #$01	                AND #FNX1_INT00_KBD
.191041		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.191045		af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.191049		29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.19104b		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.19104f		a2 98 74	ldx #$7498	                LDX #<>Success_kb_init
.191052		38		sec		                SEC
.191053		b0 00		bcs $191055	                BCS InitKbSuccess
.191055						initkb_loop_out
.191055		22 5f 07 19	jsl $19075f	InitKbSuccess   JSL IPRINT       ; print Message
.191059		c2 20		rep #$20	                REP #$20        ; set A long
.19105b		c2 10		rep #$10	                REP #$10        ; set X long
.19105d		fa		plx		                PLX
.19105e		68		pla		                PLA
.19105f		28		plp						        PLP
.191060		2b		pld						        PLD
.191061		6b		rtl		                RTL
.191062						Poll_Inbuf
.191062		af 07 18 af	lda $af1807	                LDA STATUS_PORT		; Load Status Byte
.191066		29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.191068		c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.19106a		f0 f6		beq $191062					        BEQ Poll_Inbuf
.19106c		60		rts		                RTS
.19106d						Poll_Outbuf
.19106d		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.191071		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.191073		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.191075		d0 f6		bne $19106d	                BNE Poll_Outbuf
.191077		60		rts		                RTS
.191078		0b		phd		IINITMOUSE      PHD
.191079		08		php						        PHP
.19107a		48		pha						        PHA
.19107b		da		phx						        PHX
.19107c		e2 20		sep #$20	                SEP #$20        ; set A short
.19107e		c2 10		rep #$10	                REP #$10        ; set X long
.191080		18		clc		                CLC
.191081		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.191084						DO_CMD_A9_AGAIN
.191084		20 62 10	jsr $191062	                JSR Poll_Inbuf
.191087		a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.191089		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF
.19108d		20 07 11	jsr $191107	                JSR Poll_Outbuf_Mouse_TimeOut ;
.191090		af 03 18 af	lda $af1803					        LDA KBD_OUT_BUF		; Clear the Output buffer
.191094		c9 00		cmp #$00	                CMP #$00
.191096		d0 ec		bne $191084	                BNE DO_CMD_A9_AGAIN
.191098		a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.19109a		20 e1 10	jsr $1910e1	                JSR MOUSE_WRITE
.19109d		20 f4 10	jsr $1910f4	                JSR MOUSE_READ ;***
.1910a0		a9 e8		lda #$e8	                LDA #$E8
.1910a2		20 e1 10	jsr $1910e1	                JSR MOUSE_WRITE
.1910a5		20 f4 10	jsr $1910f4	                JSR MOUSE_READ ;***
.1910a8		a9 00		lda #$00	                LDA #$00
.1910aa		20 e1 10	jsr $1910e1	                JSR MOUSE_WRITE
.1910ad		20 f4 10	jsr $1910f4	                JSR MOUSE_READ ;***
.1910b0		a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.1910b2		20 e1 10	jsr $1910e1	                JSR MOUSE_WRITE
.1910b5		20 f4 10	jsr $1910f4	                JSR MOUSE_READ ;***
.1910b8		a9 00		lda #$00	                LDA #$00
.1910ba		85 e0		sta $e0		                STA MOUSE_PTR
.1910bc		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.1910c0		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.1910c2		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.1910c6		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.1910ca		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.1910cc		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.1910d0		c2 10		rep #$10	                REP #$10        ; set X long
.1910d2		a2 aa 74	ldx #$74aa	                LDX #<>Success_ms_init
.1910d5		80 03		bra $1910da	                BRA InitMsSuccess
.1910d7		a2 e1 74	ldx #$74e1	initms_loop_out LDX #<>Failed_ms_init
.1910da						InitMsSuccess
.1910da		c2 20		rep #$20	                REP #$20        ; set A long
.1910dc		fa		plx		                PLX
.1910dd		68		pla		                PLA
.1910de		28		plp				PLP
.1910df		2b		pld				PLD
.1910e0		6b		rtl		                RTL
.1910e1						MOUSE_WRITE
.1910e1		48		pha		                PHA
.1910e2		20 62 10	jsr $191062	                JSR Poll_Inbuf    ; Test bit $01 (if 2, Full)
.1910e5		a9 d4		lda #$d4	                LDA #$D4
.1910e7		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF   ; KBD_CMD_BUF		= $AF1064
.1910eb		20 62 10	jsr $191062	                JSR Poll_Inbuf
.1910ee		68		pla		                PLA
.1910ef		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF  ; KBD_DATA_BUF	= $AF1060
.1910f3		60		rts		                RTS
.1910f4						MOUSE_READ
.1910f4		20 fc 10	jsr $1910fc	                JSR Poll_Outbuf_Mouse   ; Test bit $01 (if 1, Full)
.1910f7		af 03 18 af	lda $af1803	                LDA KBD_INPT_BUF  ; KBD_INPT_BUF	= $AF1060
.1910fb		60		rts		                RTS
.1910fc						Poll_Outbuf_Mouse
.1910fc		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.191100		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.191102		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.191104		d0 f6		bne $1910fc	                BNE Poll_Outbuf_Mouse
.191106		60		rts		                RTS
.191107						Poll_Outbuf_Mouse_TimeOut
.191107		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.19110b		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.19110d		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.19110f		f0 08		beq $191119	                BEQ Poll_OutbufWeAreDone
.191111		ca		dex		                DEX
.191112		e0 00 00	cpx #$0000	                CPX #$0000
.191115		d0 f0		bne $191107	                BNE Poll_Outbuf_Mouse_TimeOut
.191117		80 be		bra $1910d7	                BRA initms_loop_out
.191119						Poll_OutbufWeAreDone:
.191119		60		rts		                RTS
.19111a		48		pha		INITRTC         PHA
.19111b		08		php		                PHP
.19111c		e2 20		sep #$20	                SEP #$20        ; set A short
.19111e		a9 00		lda #$00	                LDA #0
.191120		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.191124		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.191128		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.19112c		09 04		ora #$04	                ORA #%00000100
.19112e		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.191132		28		plp		                PLP
.191133		68		pla		                PLA
.191134		6b		rtl		                RTL
.191135		48		pha		IINITCODEC      PHA
.191136		08		php		                PHP
.191137		c2 20		rep #$20	                REP #$20        ; set A long
.191139		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.19113c		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.191140		a9 01 00	lda #$0001	                LDA #$0001
.191143		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.191147		20 d8 11	jsr $1911d8	                JSR CODEC_TRF_FINISHED
.19114a		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.19114d		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.191151		a9 01 00	lda #$0001	                LDA #$0001
.191154		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.191158		20 d8 11	jsr $1911d8	                JSR CODEC_TRF_FINISHED
.19115b		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.19115e		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.191162		a9 01 00	lda #$0001	                LDA #$0001
.191165		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.191169		20 d8 11	jsr $1911d8	                JSR CODEC_TRF_FINISHED
.19116c		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.19116f		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.191173		a9 01 00	lda #$0001	                LDA #$0001
.191176		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.19117a		20 d8 11	jsr $1911d8	                JSR CODEC_TRF_FINISHED
.19117d		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.191180		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.191184		a9 01 00	lda #$0001	                LDA #$0001
.191187		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.19118b		20 d8 11	jsr $1911d8	                JSR CODEC_TRF_FINISHED
.19118e		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.191191		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.191195		a9 01 00	lda #$0001	                LDA #$0001
.191198		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.19119c		20 d8 11	jsr $1911d8	                JSR CODEC_TRF_FINISHED
.19119f		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.1911a2		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.1911a6		a9 01 00	lda #$0001	                LDA #$0001
.1911a9		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.1911ad		20 d8 11	jsr $1911d8	                JSR CODEC_TRF_FINISHED
.1911b0		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.1911b3		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.1911b7		a9 01 00	lda #$0001	                LDA #$0001
.1911ba		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.1911be		20 d8 11	jsr $1911d8	                JSR CODEC_TRF_FINISHED
.1911c1		28		plp		                PLP
.1911c2		68		pla		                PLA
.1911c3		6b		rtl		                RTL
.1911c4						IRESETCODEC
.1911c4		c2 20		rep #$20	                REP #$20        ; set A long
.1911c6		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.1911c9		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.1911cd		a9 01 00	lda #$0001	                LDA #$0001
.1911d0		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.1911d4		20 d8 11	jsr $1911d8	                JSR CODEC_TRF_FINISHED
.1911d7		6b		rtl		                RTL
.1911d8						CODEC_TRF_FINISHED
.1911d8		e2 20		sep #$20	                SEP #$20        ; set A short
.1911da		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.1911de		29 01		and #$01	                AND #$01
.1911e0		c9 01		cmp #$01	                CMP #$01
.1911e2		f0 f6		beq $1911da	                BEQ CODEC_LOOP
.1911e4		c2 20		rep #$20	                REP #$20        ; set A long
.1911e6		60		rts		                RTS
.1911e7						IBM_FILL_SCREEN
.1911e7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1911e9		a9 00 00	lda #$0000	                LDA #$0000
.1911ec		a2 00 00	ldx #$0000	                LDX #$0000
.1911ef						BM_FILL_SCREEN_LOOPY
.1911ef		a0 00 00	ldy #$0000	                LDY #$0000
.1911f2		e2 20		sep #$20	                SEP #$20        ; set A short
.1911f4						BM_FILL_SCREEN_LOOPX
.1911f4		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.1911f6		c8		iny		                INY
.1911f7		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.1911f9		d0 f9		bne $1911f4	                BNE BM_FILL_SCREEN_LOOPX
.1911fb		20 06 12	jsr $191206	                JSR BM_FILL_COMPUTE_Y_DST
.1911fe		e8		inx		                INX
.1911ff		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.191201		d0 ec		bne $1911ef	                BNE BM_FILL_SCREEN_LOOPY
.191203		c2 30		rep #$30	                REP #$30        ; set A&X long
.191205		6b		rtl		                RTL
.191206						BM_FILL_COMPUTE_Y_DST
.191206		c2 20		rep #$20	                REP #$20        ; set A long
.191208		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.19120a		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.19120e		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.191210		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.191214		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.191217		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.19121b		a9 00 00	lda #$0000	                LDA #$0000
.19121e		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.191222		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.191226		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.191228		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.19122c		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.19122e		a9 00 00	lda #$0000	                LDA #$0000
.191231		60		rts		                RTS
.191232						IBMP_PARSER
.191232		c2 30		rep #$30	                REP #$30        ; set A&X long
.191234		a0 00 00	ldy #$0000	                LDY #$0000
.191237		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.191239		c9 42 4d	cmp #$4d42	                CMP #$4D42
.19123c		f0 03		beq $191241	                BEQ IBMP_PARSER_CONT
.19123e		82 04 01	brl $191345	                BRL BMP_PARSER_END_WITH_ERROR
.191241						IBMP_PARSER_CONT
.191241		a0 02 00	ldy #$0002	                LDY #$0002
.191244		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.191246		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.19124a		a0 04 00	ldy #$0004	                LDY #$0004
.19124d		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.19124f		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.191253		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.191256		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.19125a		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.19125e		18		clc		                CLC
.19125f		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.191263		85 50		sta $50		                STA BMP_FILE_SIZE
.191265		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.191269		85 52		sta $52		                STA BMP_FILE_SIZE+2
.19126b		a0 12 00	ldy #$0012	                LDY #$0012
.19126e		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.191270		85 40		sta $40		                STA BMP_X_SIZE
.191272		a0 16 00	ldy #$0016	                LDY #$0016
.191275		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.191277		85 42		sta $42		                STA BMP_Y_SIZE
.191279		a0 2e 00	ldy #$002e	                LDY #$002E
.19127c		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.19127e		0a		asl a		                ASL A; Multiply by 2
.19127f		0a		asl a		                ASL A; Multiply by 2
.191280		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.191282		e0 00 00	cpx #$0000	                CPX #$0000
.191285		d0 05		bne $19128c	                BNE BMP_LUT1_PICK
.191287		20 4d 13	jsr $19134d	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.19128a		80 08		bra $191294	                BRA DONE_TRANSFER_LUT;
.19128c						  BMP_LUT1_PICK
.19128c		e0 01 00	cpx #$0001	                CPX #$0001
.19128f		d0 03		bne $191294	                BNE BMP_LUT2_PICK
.191291		20 7d 13	jsr $19137d	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.191294						  BMP_LUT2_PICK
.191294						  DONE_TRANSFER_LUT
.191294		a5 56		lda $56		                LDA BMP_POSITION_Y
.191296		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.19129a		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.19129c		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.1912a0		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.1912a4		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.1912a8		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.1912ac		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.1912b0		a5 54		lda $54		                LDA BMP_POSITION_X
.1912b2		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.1912b6		a9 00 00	lda #$0000	                LDA #$0000
.1912b9		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.1912bd		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.1912c1		85 f0		sta $f0		                STA USER_TEMP
.1912c3		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.1912c7		85 f2		sta $f2		                STA USER_TEMP+2
.1912c9		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.1912cb		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.1912cf		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.1912d1		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.1912d5		a5 f0		lda $f0		                LDA USER_TEMP
.1912d7		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.1912db		a5 f2		lda $f2		                LDA USER_TEMP+2
.1912dd		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.1912e1		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.1912e5		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.1912e7		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.1912eb		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.1912ed		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.1912ef		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.1912f3		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.1912f5		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.1912f9		a5 50		lda $50		                LDA BMP_FILE_SIZE
.1912fb		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.1912ff		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.191301		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.191305		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.191309		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.19130b		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.19130f		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.191311		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.191313		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.191317		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.191319		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.19131d		18		clc		                CLC
.19131e		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.191320		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.191323		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.191326		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.19132a		a9 ff ff	lda #$ffff	                LDA #$FFFF
.19132d		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.191331		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.191335		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.191337		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.19133b		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.19133d		20 ad 13	jsr $1913ad	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.191340		a2 2e 75	ldx #$752e	                LDX #<>bmp_parser_msg0
.191343		80 03		bra $191348	                BRA BMP_PARSER_END_NO_ERROR
.191345						BMP_PARSER_END_WITH_ERROR
.191345		a2 1a 75	ldx #$751a	                LDX #<>bmp_parser_err0
.191348						BMP_PARSER_END_NO_ERROR
.191348		22 5f 07 19	jsl $19075f	                JSL IPRINT       ; print the first line
.19134c		6b		rtl		                RTL
.19134d						BMP_PARSER_UPDATE_LUT0
.19134d		38		sec		                SEC
.19134e		a0 7a 00	ldy #$007a	                LDY #$007A
.191351		a2 00 00	ldx #$0000	                LDX #$0000
.191354		e2 20		sep #$20	                SEP #$20        ; set A short
.191356						BMP_PARSER_UPDATE_LOOP
.191356		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.191358		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.19135c		c8		iny		                INY
.19135d		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.19135f		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.191363		c8		iny		                INY
.191364		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.191366		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.19136a		c8		iny		                INY
.19136b		a9 80		lda #$80	                LDA #$80
.19136d		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.191371		c8		iny		                INY ; For the Alpha Value, nobody cares
.191372		e8		inx		                INX
.191373		e8		inx		                INX
.191374		e8		inx		                INX
.191375		e8		inx		                INX
.191376		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.191378		d0 dc		bne $191356	                BNE BMP_PARSER_UPDATE_LOOP
.19137a		c2 20		rep #$20	                REP #$20        ; set A long
.19137c		60		rts		                RTS
.19137d						BMP_PARSER_UPDATE_LUT1
.19137d		38		sec		                SEC
.19137e		a0 36 00	ldy #$0036	                LDY #$0036
.191381		a2 00 00	ldx #$0000	                LDX #$0000
.191384		e2 20		sep #$20	                SEP #$20        ; set A short
.191386						PALETTE_LUT1_LOOP
.191386		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.191388		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.19138c		c8		iny		                INY
.19138d		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.19138f		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.191393		c8		iny		                INY
.191394		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.191396		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.19139a		c8		iny		                INY
.19139b		a9 80		lda #$80	                LDA #$80
.19139d		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.1913a1		c8		iny		                INY ; For the Alpha Value, nobody cares
.1913a2		e8		inx		                INX
.1913a3		e8		inx		                INX
.1913a4		e8		inx		                INX
.1913a5		e8		inx		                INX
.1913a6		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.1913a8		d0 dc		bne $191386	                BNE PALETTE_LUT1_LOOP
.1913aa		c2 20		rep #$20	                REP #$20        ; set A long
.1913ac		60		rts		                RTS
.1913ad						BMP_PARSER_DMA_SHIT_OUT
.1913ad		a2 00 00	ldx #$0000	                LDX #$0000
.1913b0						BMP_PARSER_LOOPY
.1913b0		a0 00 00	ldy #$0000	                LDY #$0000
.1913b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1913b5						BMP_PARSER_LOOPX
.1913b5		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.1913b7		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.1913b9		c8		iny		                INY
.1913ba		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.1913bc		d0 f7		bne $1913b5	                BNE BMP_PARSER_LOOPX
.1913be		20 ca 13	jsr $1913ca	                JSR BMP_PARSER_COMPUTE_Y_SRC
.1913c1		20 e5 13	jsr $1913e5	                JSR BMP_PARSER_COMPUTE_Y_DST
.1913c4		e8		inx		                INX
.1913c5		e4 42		cpx $42		                CPX BMP_Y_SIZE
.1913c7		d0 e7		bne $1913b0	                BNE BMP_PARSER_LOOPY
.1913c9		60		rts		                RTS
.1913ca						BMP_PARSER_COMPUTE_Y_SRC
.1913ca		c2 20		rep #$20	                REP #$20        ; set A long
.1913cc		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.1913ce		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.1913d2		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.1913d4		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.1913d8		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.1913dc		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.1913de		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.1913e2		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.1913e4		60		rts		                RTS
.1913e5						BMP_PARSER_COMPUTE_Y_DST
.1913e5		c2 20		rep #$20	                REP #$20        ; set A long
.1913e7		18		clc		                CLC
.1913e8		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.1913ea		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.1913ec		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.1913ee		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.1913f0		69 00 00	adc #$0000	                ADC #$0000
.1913f3		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.1913f5		60		rts		                RTS
.1913f6		ea		nop		ILOOP           NOP
.1913f7		ea		nop		                NOP
.1913f8		ea		nop		                NOP
.1913f9		ea		nop		                NOP
.1913fa		ea		nop		                NOP
.1913fb		ea		nop		                NOP
.1913fc		ea		nop		                NOP
.1913fd		ea		nop		                NOP
.1913fe		ea		nop		                NOP
.1913ff		ea		nop		                NOP
.191400		6b		rtl		                RTL
.191401		22 f6 13 19	jsl $1913f6	ILOOP_1         JSL ILOOP
.191405		22 f6 13 19	jsl $1913f6	                JSL ILOOP
.191409		22 f6 13 19	jsl $1913f6	                JSL ILOOP
.19140d		22 f6 13 19	jsl $1913f6	                JSL ILOOP
.191411		22 f6 13 19	jsl $1913f6	                JSL ILOOP
.191415		22 f6 13 19	jsl $1913f6	                JSL ILOOP
.191419		22 f6 13 19	jsl $1913f6	                JSL ILOOP
.19141d		22 f6 13 19	jsl $1913f6	                JSL ILOOP
.191421		22 f6 13 19	jsl $1913f6	                JSL ILOOP
.191425		22 f6 13 19	jsl $1913f6	                JSL ILOOP
.191429		6b		rtl		                RTL
.19142a		22 01 14 19	jsl $191401	ILOOP_1MS       JSL ILOOP_1
.19142e		6b		rtl		                RTL
.19142f		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.191432		f0 07		beq $19143b	                BEQ LOOP_MS_END
.191434		22 2a 14 19	jsl $19142a	                JSL ILOOP_1MS
.191438		ca		dex		                DEX
.191439		80 f4		bra $19142f	                BRA ILOOP_MS
.19143b		6b		rtl		LOOP_MS_END     RTL
.19143c						IDELAY
.19143c		8b		phb		                PHB
.19143d		08		php		                PHP
.19143e		48		pha		                PHA             ; begin setdbr macro
.19143f		08		php		                PHP
.191440		e2 20		sep #$20	                SEP #$20        ; set A short
.191442		a9 00		lda #$00	                LDA #0
.191444		48		pha		                PHA
.191445		ab		plb		                PLB
.191446		28		plp		                PLP
.191447		68		pla		                PLA             ; end setdbr macro
.191448		e2 20		sep #$20	                SEP #$20        ; set A short
.19144a		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.19144c		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.191450		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.191454		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.191456		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.19145a		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.19145c		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.19145f		a9 00		lda #$00	                LDA #0
.191461		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.191465		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.191469		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.19146d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19146f		8a		txa		                TXA
.191470		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.191474		98		tya		                TYA
.191475		e2 20		sep #$20	                SEP #$20        ; set A short
.191477		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.19147b		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.19147d		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.191481		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.191483		cb		wai		loop            WAI                         ; Wait for an interrupt
.191484		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.191487		f0 fa		beq $191483	                BEQ loop                    ; Keep checking until it's set
.191489		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.19148b		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.19148f		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.191491		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.191494		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.191498		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.19149a		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.19149e		28		plp		                PLP
.19149f		ab		plb		                PLB
.1914a0		6b		rtl		                RTL
.1914a1						SHOW_CREDITS
.1914a1		48		pha		                PHA
.1914a2		da		phx		                PHX
.1914a3		5a		phy		                PHY
.1914a4		08		php		                PHP
.1914a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1914a7		c2 10		rep #$10	                REP #$10        ; set X long
.1914a9		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.1914ad		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.1914af		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.1914b3		a2 00 00	ldx #$0000	                LDX #0
.1914b6		bf 00 00 1b	lda $1b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.1914ba		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.1914be		bf 00 18 1b	lda $1b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.1914c2		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.1914c6		e8		inx		                INX
.1914c7		e0 00 20	cpx #$2000	                CPX #128 * 64
.1914ca		d0 ea		bne $1914b6	                BNE credit_loop
.1914cc		22 f9 06 19	jsl $1906f9	                JSL IGETCHW                     ; Wait for a keypress
.1914d0		22 23 0b 19	jsl $190b23	                JSL ICLRSCREEN                  ; Then clear the screen and return
.1914d4		22 47 09 19	jsl $190947	                JSL ICSRHOME                    ; Move cursor to the home position
.1914d8		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.1914dc		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.1914de		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.1914e2		28		plp		                PLP
.1914e3		7a		ply		                PLY
.1914e4		fa		plx		                PLX
.1914e5		68		pla		                PLA
.1914e6		6b		rtl		                RTL
.1914e7		00		brk #		ISCINIT         BRK ;
.1914e8		00		brk #		IIOINIT         BRK ;
.1914e9		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.1914ea		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.1914eb		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.1914ec		00		brk #		ICLOSE          BRK ; Close a channel
.1914ed		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.1914ee		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.1914ef		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.1914f0		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.1914f1		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.1914f2		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.1914f3		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.1914f4		00		brk #		IPRINTF         BRK ; Print a float value
.1914f5		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.1914f6		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.1914f7		00		brk #		IPUSHKEY        BRK ;
.1914f8		00		brk #		IPUSHKEYS       BRK ;
.1914f9		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.1914fa		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.1914fb		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>1914fc		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>191504		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>191514		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>19151c		12
>19151d		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>191525		15
>191526		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>19152c		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>191531		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Instruments.asm

>191537		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>19153f		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>19154d		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>191555		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>191563		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>19156b		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>191579		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>191581		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>19158f		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>191597		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>1915a5		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>1915ad		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>1915bb		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>1915c3		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>1915d1		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>1915d9		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>1915e7		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>1915ef		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>1915fd		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>191605		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>191613		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>19161b		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>191629		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>191631		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>19163f		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>191647		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>191655		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>19165d		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>19166b		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>191673		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>191681		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>191689		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>191697		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>19169f		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>1916ad		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>1916b5		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>1916c3		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>1916cb		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>1916d9		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>1916e1		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>1916ef		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>1916f7		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>191705		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>19170d		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>19171b		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>191723		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>191731		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>191739		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>191747		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>19174f		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>19175d		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>191765		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>191773		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>19177b		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>191789		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>191791		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>19179f		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>1917a7		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>1917b5		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>1917bd		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>1917cb		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>1917d3		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>1917e1		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>1917e9		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>1917f7		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>1917ff		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>19180d		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>191815		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>191823		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>19182b		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>191839		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>191841		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>19184f		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>191857		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>191865		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>19186d		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>19187b		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>191883		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>191891		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>191899		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>1918a7		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>1918af		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>1918bd		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>1918c5		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>1918d3		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>1918db		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>1918e9		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>1918f1		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>1918ff		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>191907		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>191915		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>19191d		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>19192b		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>191933		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>191941		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>191949		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>191957		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>19195f		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>19196d		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>191975		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>191983		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>19198b		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>191999		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>1919a1		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>1919af		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>1919b7		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>1919c5		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>1919cd		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>1919db		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>1919e3		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>1919f1		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>1919f9		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>191a07		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>191a0f		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>191a1d		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>191a25		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>191a33		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>191a3b		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>191a49		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>191a51		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>191a5f		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>191a67		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>191a75		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>191a7d		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>191a8b		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>191a93		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>191aa1		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>191aa9		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>191ab7		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>191abf		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>191acd		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>191ad5		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>191ae3		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>191aeb		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>191af9		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>191b01		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>191b0f		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>191b17		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>191b25		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>191b2d		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>191b3b		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>191b43		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>191b51		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>191b59		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>191b67		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>191b6f		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>191b7d		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>191b85		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>191b93		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>191b9b		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>191ba9		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>191bb1		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>191bbf		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>191bc7		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>191bd5		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>191bdd		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>191beb		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>191bf3		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>191c01		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>191c09		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>191c17		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>191c1f		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>191c2d		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>191c35		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>191c43		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>191c4b		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>191c59		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>191c61		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>191c6f		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>191c77		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>191c85		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>191c8d		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>191c9b		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>191ca3		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>191cb1		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>191cb9		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>191cc7		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>191ccf		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>191cdd		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>191ce5		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>191cf3		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>191cfb		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>191d09		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>191d11		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>191d1f		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>191d27		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>191d35		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>191d3d		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>191d4b		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>191d53		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>191d61		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>191d69		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>191d77		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>191d7f		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>191d8d		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>191d95		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>191da3		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>191dab		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>191db9		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>191dc1		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>191dcf		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>191dd7		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>191de5		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>191ded		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>191dfb		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>191e03		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>191e11		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>191e19		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>191e27		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>191e2f		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>191e3d		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>191e45		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>191e53		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>191e5b		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>191e69		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>191e71		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>191e7f		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>191e87		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>191e95		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>191e9d		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>191eab		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>191eb3		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>191ec1		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>191ec9		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>191ed7		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>191edf		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>191eed		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>191ef5		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>191f03		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>191f0b		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>191f19		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>191f21		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>191f2f		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>191f37		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>191f45		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>191f4d		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>191f5b		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>191f63		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>191f71		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>191f79		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>191f87		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>191f8f		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>191f9d		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>191fa5		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>191fb3		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>191fbb		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>191fc9		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>191fd1		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>191fdf		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>191fe7		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>191ff5		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>191ffd		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>19200b		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>192013		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>192021		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>192029		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>192037		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>19203f		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>19204d		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>192055		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>192063		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>19206b		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>192079		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>192081		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>19208f		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>192097		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>1920a5		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>1920ad		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>1920bb		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>1920c3		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>1920d1		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>1920d9		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>1920e7		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>1920ef		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>1920fd		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>192105		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>192113		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>19211b		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>192129		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>192131		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>19213f		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>192147		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>192155		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>19215d		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>19216b		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>192173		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>192181		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>192189		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>192197		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>19219f		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Drums.asm

>1921ad		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>1921b5		00 87 fa 00
>1921b9		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>1921c1		00 88 98 03
>1921c5		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>1921cd		00 88 98 03
>1921d1		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>1921d9		00 f9 69 00
>1921dd		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>1921e5		80 e8 4a 00
>1921e9		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>1921f1		00 f6 9a 00
>1921f5		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>1921fd		1b f2 34 00
>192201		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>192209		00 f7 8a 00
>19220d		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>192215		00 f6 47 00
>192219		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>192221		00 f9 69 00
>192225		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>19222d		00 f7 a9 00
>192231		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>192239		00 87 fa 00
>19223d		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>192245		00 f7 a9 00
>192249		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>192251		00 f5 f5 00
>192255		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>19225d		06 b8 d8 03
>192261		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>192269		00 f5 f5 00
>19226d		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>192275		06 b8 d8 03
>192279		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>192281		00 f5 f5 00
>192285		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>19228d		10 74 f8 03
>192291		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>192299		00 f5 f5 00
>19229d		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>1922a5		00 f5 f5 00
>1922a9		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>1922b1		05 c5 d4 03
>1922b5		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>1922bd		00 f5 f5 00
>1922c1		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>1922c9		04 f9 44 03
>1922cd		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>1922d5		05 c5 d4 03
>1922d9		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>1922e1		04 f9 44 03
>1922e5		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>1922ed		03 87 f7 03
>1922f1		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>1922f9		05 c5 d4 03
>1922fd		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>192305		00 f6 28 00
>192309		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>192311		05 c5 d4 03
>192315		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>19231d		00 f5 f7 01
>192321		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>192329		04 f9 44 03
>19232d		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>192335		00 99 f9 00
>192339		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>192341		00 a8 f7 00
>192345		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>19234d		00 99 f9 00
>192351		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>192359		00 a6 f6 00
>19235d		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>192365		00 a6 f6 00
>192369		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>192371		00 f6 36 02
>192375		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>19237d		00 f6 36 02
>192381		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>192389		00 96 e8 01
>19238d		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>192395		00 96 e8 01
>192399		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>1923a1		02 79 77 03
>1923a5		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>1923ad		02 79 77 03
>1923b1		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>1923b9		00 a5 2b 02
>1923bd		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>1923c5		00 93 3b 02
>1923c9		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>1923d1		01 89 3b 03
>1923d5		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>1923dd		0a 53 2b 02
>1923e1		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>1923e9		00 f6 89 00
>1923ed		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>1923f5		00 f6 9a 00
>1923f9		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>192401		00 f6 9a 00
>192405		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>19240d		00 87 4b 01
>192411		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>192419		00 78 67 01
>19241d		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>192425		02 f8 fc 00
>192429		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>192431		40 f5 f5 00
>192435		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>19243d		02 79 77 03
>192441		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>192449		40 f5 f5 00
>19244d		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>192455		40 f5 f5 00
>192459		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>192461		00 f9 69 00
>192465		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>19246d		00 f9 69 00
>192471		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>192479		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>19247d		ad 21 19 00 b9 21 19 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>192485		c5 21 19 00 d1 21 19 00
>19248d		dd 21 19 00 e9 21 19 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>192495		f5 21 19 00 01 22 19 00
>19249d		0d 22 19 00 19 22 19 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>1924a5		25 22 19 00 31 22 19 00
>1924ad		3d 22 19 00 49 22 19 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>1924b5		55 22 19 00 61 22 19 00
>1924bd		6d 22 19 00 79 22 19 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>1924c5		85 22 19 00 91 22 19 00
>1924cd		9d 22 19 00 a9 22 19 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>1924d5		b5 22 19 00 c1 22 19 00
>1924dd		cd 22 19 00 d9 22 19 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>1924e5		e5 22 19 00 f1 22 19 00
>1924ed		fd 22 19 00 09 23 19 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>1924f5		15 23 19 00 21 23 19 00
>1924fd		2d 23 19 00 39 23 19 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>192505		45 23 19 00 51 23 19 00
>19250d		5d 23 19 00 69 23 19 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>192515		75 23 19 00 81 23 19 00
>19251d		8d 23 19 00 99 23 19 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>192525		a5 23 19 00 b1 23 19 00
>19252d		bd 23 19 00 c9 23 19 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>192535		d5 23 19 00 e1 23 19 00
>19253d		ed 23 19 00 f9 23 19 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>192545		05 24 19 00 11 24 19 00
>19254d		1d 24 19 00 29 24 19 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>192555		35 24 19 00 41 24 19 00
>19255d		4d 24 19 00 59 24 19 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>192565		65 24 19 00 71 24 19 00

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments.asm

>19256d		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>192575		00 b1 f5 01
>192579		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>192581		03 f1 f5 00
>192585		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>19258d		03 c1 f5 00
>192591		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>192599		00 92 f5 01
>19259d		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>1925a5		00 f1 f9 00
>1925a9		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>1925b1		00 f1 f5 00
>1925b5		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>1925bd		02 81 f6 01
>1925c1		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>1925c9		00 c2 b9 01
>1925cd		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>1925d5		05 b2 35 00
>1925d9		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>1925e1		1b f2 34 00
>1925e5		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>1925ed		01 f5 74 00
>1925f1		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>1925f9		00 61 e3 00
>1925fd		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>192605		00 a4 64 00
>192609		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>192611		07 b5 f5 00
>192615		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>19261d		00 f3 74 00
>192621		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>192629		00 c3 94 01
>19262d		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>192635		00 f4 0d 01
>192639		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>192641		00 f5 0b 01
>192645		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>19264d		00 bf 07 00
>192651		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>192659		00 6d 08 01
>19265d		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>192665		00 51 17 01
>192669		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>192671		00 51 17 01
>192675		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>19267d		00 53 08 01
>192681		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>192689		00 53 06 01
>19268d		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>192695		00 d2 f8 00
>192699		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>1926a1		00 e2 c7 01
>1926a5		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>1926ad		00 f1 9c 00
>1926b1		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>1926b9		02 f2 c9 01
>1926bd		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>1926c5		03 95 fb 00
>1926c9		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>1926d1		04 a1 59 00
>1926d5		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>1926dd		03 91 fc 03
>1926e1		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>1926e9		02 b4 ec 00
>1926ed		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>1926f5		00 93 f7 00
>1926f9		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>192701		04 c1 58 00
>192705		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>19270d		02 c3 6a 00
>192711		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>192719		00 62 87 00
>19271d		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>192725		00 f3 97 00
>192729		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>192731		00 b3 97 00
>192735		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>19273d		04 f3 cc 00
>192741		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>192749		00 93 aa 00
>19274d		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>192755		00 78 08 01
>192759		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>192761		00 78 08 01
>192765		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>19276d		00 54 27 01
>192771		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>192779		00 61 56 00
>19277d		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>192785		00 75 16 01
>192789		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>192791		00 f5 f6 01
>192795		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>19279d		80 f3 e3 00
>1927a1		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>1927a9		00 b5 f5 00
>1927ad		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>1927b5		80 71 16 00
>1927b9		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>1927c1		00 30 55 01
>1927c5		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>1927cd		00 62 36 01
>1927d1		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>1927d9		02 51 07 00
>1927dd		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>1927e5		00 62 39 00
>1927e9		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>1927f1		00 66 27 00
>1927f5		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>1927fd		00 73 46 00
>192801		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>192809		00 74 76 01
>19280d		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>192815		81 92 38 00
>192819		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>192821		02 71 19 00
>192825		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>19282d		01 81 09 00
>192831		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>192839		00 83 4b 02
>19283d		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>192845		05 71 59 00
>192849		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>192851		03 82 39 00
>192855		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>19285d		82 84 17 00
>192861		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>192869		02 72 16 00
>19286d		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>192875		00 7b 0a 00
>192879		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>192881		00 85 0c 01
>192885		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>19288d		00 7b 0a 01
>192891		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>192899		00 79 18 01
>19289d		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>1928a5		01 73 08 00
>1928a9		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>1928b1		04 77 0a 00
>1928b5		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>1928bd		00 51 19 00
>1928c1		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>1928c9		01 74 09 00
>1928cd		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>1928d5		01 63 28 00
>1928d9		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>1928e1		00 65 0a 00
>1928e5		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>1928ed		00 67 29 00
>1928f1		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>1928f9		00 67 09 00
>1928fd		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>192905		01 6a 28 00
>192909		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>192911		00 55 27 00
>192915		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>19291d		00 6f 08 00
>192921		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>192929		00 7a 07 00
>19292d		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>192935		06 a2 0d 00
>192939		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>192941		00 a3 5f 00
>192945		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>19294d		00 42 27 00
>192951		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>192959		05 b2 49 00
>19295d		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>192965		00 b2 79 01
>192969		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>192971		00 7a 1a 00
>192975		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>19297d		00 82 28 01
>192981		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>192989		02 c3 5f 00
>19298d		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>192995		86 c4 95 01
>192999		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>1929a1		00 44 15 00
>1929a5		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>1929ad		00 d1 06 00
>1929b1		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>1929b9		00 82 37 00
>1929bd		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>1929c5		00 41 35 00
>1929c9		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>1929d1		02 32 f5 01
>1929d5		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>1929dd		00 61 26 00
>1929e1		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>1929e9		84 3f 05 01
>1929ed		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>1929f5		01 d1 f6 00
>1929f9		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>192a01		00 41 05 01
>192a05		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>192a0d		05 f3 e4 00
>192a11		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>192a19		00 92 f5 01
>192a1d		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>192a25		04 f2 e4 01
>192a29		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>192a31		00 45 25 00
>192a35		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>192a3d		01 a3 36 00
>192a41		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>192a49		01 98 05 01
>192a4d		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>192a55		02 a3 f6 01
>192a59		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>192a61		00 f6 f8 00
>192a65		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>192a6d		00 f3 f5 00
>192a71		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>192a79		00 94 e5 01
>192a7d		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>192a85		00 84 44 00
>192a89		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>192a91		03 83 18 01
>192a95		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>192a9d		01 78 08 01
>192aa1		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>192aa9		03 8e 08 01
>192aad		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>192ab5		09 f2 46 00
>192ab9		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>192ac1		00 96 e8 01
>192ac5		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>192acd		00 f6 f6 01
>192ad1		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>192ad9		00 f6 9a 00
>192add		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>192ae5		00 c6 45 00
>192ae9		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>192af1		00 f4 b4 00
>192af5		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>192afd		00 d5 25 00
>192b01		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>192b09		0e 21 2d 00
>192b0d		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>192b15		00 55 87 02
>192b19		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>192b21		08 98 87 01
>192b25		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>192b2d		04 17 04 03
>192b31		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>192b39		05 77 f9 02
>192b3d		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>192b45		02 f4 08 00
>192b49		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>192b51		00 36 05 01
>192b55		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>192b5d		05 32 55 03
>192b61		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>192b69		00 f3 df 00
>192b6d		6d 25 19 00 79 25 19 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>192b75		85 25 19 00 91 25 19 00 9d 25 19 00 a9 25 19 00
>192b85		b5 25 19 00 c1 25 19 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>192b8d		cd 25 19 00 d9 25 19 00 e5 25 19 00 f1 25 19 00
>192b9d		fd 25 19 00 09 26 19 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>192ba5		15 26 19 00 21 26 19 00 2d 26 19 00 39 26 19 00
>192bb5		45 26 19 00 51 26 19 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>192bbd		5d 26 19 00 69 26 19 00 75 26 19 00 81 26 19 00
>192bcd		8d 26 19 00 99 26 19 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>192bd5		a5 26 19 00 b1 26 19 00 bd 26 19 00 c9 26 19 00
>192be5		d5 26 19 00 e1 26 19 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>192bed		ed 26 19 00 f9 26 19 00 05 27 19 00 11 27 19 00
>192bfd		1d 27 19 00 29 27 19 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>192c05		35 27 19 00 41 27 19 00 4d 27 19 00 59 27 19 00
>192c15		65 27 19 00 71 27 19 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>192c1d		7d 27 19 00 89 27 19 00 95 27 19 00 a1 27 19 00
>192c2d		ad 27 19 00 b9 27 19 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>192c35		c5 27 19 00 d1 27 19 00 dd 27 19 00 e9 27 19 00
>192c45		f5 27 19 00 01 28 19 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>192c4d		0d 28 19 00 19 28 19 00 25 28 19 00 31 28 19 00
>192c5d		3d 28 19 00 49 28 19 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>192c65		55 28 19 00 61 28 19 00 6d 28 19 00 79 28 19 00
>192c75		85 28 19 00 91 28 19 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>192c7d		9d 28 19 00 a9 28 19 00 b5 28 19 00 c1 28 19 00
>192c8d		cd 28 19 00 d9 28 19 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>192c95		e5 28 19 00 f1 28 19 00 fd 28 19 00 09 29 19 00
>192ca5		15 29 19 00 21 29 19 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>192cad		2d 29 19 00 39 29 19 00 45 29 19 00 51 29 19 00
>192cbd		5d 29 19 00 69 29 19 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>192cc5		75 29 19 00 81 29 19 00 8d 29 19 00 99 29 19 00
>192cd5		a5 29 19 00 b1 29 19 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>192cdd		bd 29 19 00 c9 29 19 00 d5 29 19 00 e1 29 19 00
>192ced		ed 29 19 00 f9 29 19 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>192cf5		05 2a 19 00 11 2a 19 00 1d 2a 19 00 29 2a 19 00
>192d05		35 2a 19 00 41 2a 19 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>192d0d		4d 2a 19 00 59 2a 19 00 65 2a 19 00 71 2a 19 00
>192d1d		7d 2a 19 00 89 2a 19 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>192d25		95 2a 19 00 a1 2a 19 00 ad 2a 19 00 b9 2a 19 00
>192d35		c5 2a 19 00 d1 2a 19 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>192d3d		dd 2a 19 00 e9 2a 19 00 f5 2a 19 00 01 2b 19 00
>192d4d		0d 2b 19 00 19 2b 19 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>192d55		25 2b 19 00 31 2b 19 00 3d 2b 19 00 49 2b 19 00
>192d65		55 2b 19 00 61 2b 19 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments_Win31.asm

>192d6d		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>192d75		0d f2 f7 00
>192d79		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>192d81		07 f2 f7 00
>192d85		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>192d8d		07 f2 f6 00
>192d91		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>192d99		07 f2 f7 00
>192d9d		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>192da5		07 f2 f7 00
>192da9		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>192db1		07 f2 f7 00
>192db5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192dbd		00 00 00 00
>192dc1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192dc9		00 00 00 00
>192dcd		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192dd5		00 00 00 00
>192dd9		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>192de1		87 f2 f1 00
>192de5		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>192ded		07 f4 f4 00
>192df1		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>192df9		07 f2 f6 00
>192dfd		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>192e05		07 e7 f7 00
>192e09		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>192e11		07 f6 f6 00
>192e15		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>192e1d		87 a3 f3 00
>192e21		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e29		00 00 00 00
>192e2d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e35		00 00 00 00
>192e39		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e41		00 00 00 00
>192e45		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>192e4d		07 8a 08 00
>192e51		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>192e59		07 55 14 00
>192e5d		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>192e65		87 55 04 00
>192e69		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>192e71		07 46 1a 00
>192e75		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>192e7d		07 61 07 00
>192e81		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>192e89		90 61 07 00
>192e8d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e95		00 00 00 00
>192e99		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ea1		00 00 00 00
>192ea5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ead		00 00 00 00
>192eb1		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>192eb9		87 f3 f8 00
>192ebd		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>192ec5		07 f6 3a 00
>192ec9		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>192ed1		0c 84 19 00
>192ed5		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>192edd		07 94 19 00
>192ee1		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>192ee9		87 d1 f8 00
>192eed		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>192ef5		07 c3 a6 00
>192ef9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f01		00 00 00 00
>192f05		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f0d		00 00 00 00
>192f11		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f19		00 00 00 00
>192f1d		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>192f25		47 f2 df 00
>192f29		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>192f31		0f a1 df 00
>192f35		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>192f3d		07 f1 78 00
>192f41		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>192f49		07 f1 18 00
>192f4d		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>192f55		07 56 26 00
>192f59		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>192f61		07 66 06 00
>192f65		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f6d		00 00 00 00
>192f71		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f79		00 00 00 00
>192f7d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f85		00 00 00 00
>192f89		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>192f91		87 85 35 00
>192f95		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>192f9d		87 f3 f4 00
>192fa1		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>192fa9		07 f2 c3 00
>192fad		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>192fb5		08 72 08 00
>192fb9		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>192fc1		07 3f 07 01
>192fc5		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>192fcd		07 4f 05 00
>192fd1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192fd9		00 00 00 00
>192fdd		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192fe5		00 00 00 00
>192fe9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ff1		00 00 00 00
>192ff5		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>192ffd		07 7a 05 00
>193001		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>193009		07 a5 45 00
>19300d		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>193015		08 8f 09 00
>193019		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>193021		0c 8f 09 00
>193025		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>19302d		07 82 37 00
>193031		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>193039		07 62 2c 01
>19303d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193045		00 00 00 00
>193049		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193051		00 00 00 00
>193055		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>19305d		00 00 00 00
>193061		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>193069		07 a6 1c 00
>19306d		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>193075		07 72 0b 00
>193079		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>193081		07 72 09 00
>193085		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>19308d		07 82 09 00
>193091		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>193099		07 72 0f 00
>19309d		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>1930a5		07 8f 0a 00
>1930a9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1930b1		00 00 00 00
>1930b5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1930bd		00 00 00 00
>1930c1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1930c9		00 00 00 00
>1930cd		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>1930d5		07 65 1a 00
>1930d9		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>1930e1		07 65 1a 00
>1930e5		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>1930ed		07 75 0a 00
>1930f1		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>1930f9		07 65 1a 00
>1930fd		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>193105		07 65 26 00
>193109		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>193111		07 55 36 00
>193115		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>19311d		00 00 00 00
>193121		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193129		00 00 00 00
>19312d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193135		00 00 00 00
>193139		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>193141		07 ff 0f 01
>193145		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>19314d		87 64 18 00
>193151		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>193159		07 96 0a 00
>19315d		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>193165		07 91 2a 00
>193169		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>193171		47 6f 07 00
>193175		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>19317d		07 8f 06 02
>193181		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193189		00 00 00 00
>19318d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193195		00 00 00 00
>193199		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1931a1		00 00 00 00
>1931a5		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>1931ad		07 55 16 00
>1931b1		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>1931b9		07 6a 03 00
>1931bd		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>1931c5		07 42 35 00
>1931c9		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>1931d1		07 31 47 01
>1931d5		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>1931dd		0a 42 25 00
>1931e1		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>1931e9		07 cf 07 00
>1931ed		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1931f5		00 00 00 00
>1931f9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193201		00 00 00 00
>193205		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>19320d		00 00 00 00
>193211		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>193219		8a f2 26 00
>19321d		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>193225		07 f2 f5 00
>193229		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>193231		87 11 13 00
>193235		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>19323d		87 1d 03 00
>193241		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>193249		07 81 23 00
>19324d		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>193255		0a f2 f6 01
>193259		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193261		00 00 00 00
>193265		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>19326d		00 00 00 00
>193271		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193279		00 00 00 00
>19327d		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>193285		07 c2 05 00
>193289		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>193291		07 6f 0c 01
>193295		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>19329d		07 56 16 00
>1932a1		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>1932a9		88 8f 0b 00
>1932ad		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>1932b5		87 c3 e5 00
>1932b9		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>1932c1		07 f8 16 00
>1932c5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1932cd		00 00 00 00
>1932d1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1932d9		00 00 00 00
>1932dd		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1932e5		00 00 00 00
>1932e9		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>1932f1		0a f3 03 00
>1932f5		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>1932fd		07 f3 02 00
>193301		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>193309		07 1f ff 03
>19330d		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>193315		8f 56 84 02
>193319		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>193321		0c 34 04 03
>193325		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>19332d		07 1f 02 03
>193331		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193339		00 00 00 00
>19333d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193345		00 00 00 00
>193349		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>193351		00 00 00 00
>193355		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>19335d		07 12 16 01
>193361		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>193369		07 f6 c9 02
>19336d		6d 2d 19 00 79 2d 19 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>193375		85 2d 19 00 91 2d 19 00 9d 2d 19 00 a9 2d 19 00
>193385		b5 2d 19 00 c1 2d 19 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>19338d		cd 2d 19 00 d9 2d 19 00 e5 2d 19 00 f1 2d 19 00
>19339d		fd 2d 19 00 09 2e 19 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>1933a5		15 2e 19 00 21 2e 19 00 2d 2e 19 00 39 2e 19 00
>1933b5		45 2e 19 00 51 2e 19 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>1933bd		5d 2e 19 00 69 2e 19 00 75 2e 19 00 81 2e 19 00
>1933cd		8d 2e 19 00 99 2e 19 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>1933d5		a5 2e 19 00 b1 2e 19 00 bd 2e 19 00 c9 2e 19 00
>1933e5		d5 2e 19 00 e1 2e 19 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>1933ed		ed 2e 19 00 f9 2e 19 00 05 2f 19 00 11 2f 19 00
>1933fd		1d 2f 19 00 29 2f 19 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>193405		35 2f 19 00 41 2f 19 00 4d 2f 19 00 59 2f 19 00
>193415		65 2f 19 00 71 2f 19 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>19341d		7d 2f 19 00 89 2f 19 00 95 2f 19 00 a1 2f 19 00
>19342d		ad 2f 19 00 b9 2f 19 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>193435		c5 2f 19 00 d1 2f 19 00 dd 2f 19 00 e9 2f 19 00
>193445		f5 2f 19 00 01 30 19 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>19344d		0d 30 19 00 19 30 19 00 25 30 19 00 31 30 19 00
>19345d		3d 30 19 00 49 30 19 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>193465		55 30 19 00 61 30 19 00 6d 30 19 00 79 30 19 00
>193475		85 30 19 00 91 30 19 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>19347d		9d 30 19 00 a9 30 19 00 b5 30 19 00 c1 30 19 00
>19348d		cd 30 19 00 d9 30 19 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>193495		e5 30 19 00 f1 30 19 00 fd 30 19 00 09 31 19 00
>1934a5		15 31 19 00 21 31 19 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>1934ad		2d 31 19 00 39 31 19 00 45 31 19 00 51 31 19 00
>1934bd		5d 31 19 00 69 31 19 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>1934c5		75 31 19 00 81 31 19 00 8d 31 19 00 99 31 19 00
>1934d5		a5 31 19 00 b1 31 19 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>1934dd		bd 31 19 00 c9 31 19 00 d5 31 19 00 e1 31 19 00
>1934ed		ed 31 19 00 f9 31 19 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>1934f5		05 32 19 00 11 32 19 00 1d 32 19 00 29 32 19 00
>193505		35 32 19 00 41 32 19 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>19350d		4d 32 19 00 59 32 19 00 65 32 19 00 71 32 19 00
>19351d		7d 32 19 00 89 32 19 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>193525		95 32 19 00 a1 32 19 00 ad 32 19 00 b9 32 19 00
>193535		c5 32 19 00 d1 32 19 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>19353d		dd 32 19 00 e9 32 19 00 f5 32 19 00 01 33 19 00
>19354d		0d 33 19 00 19 33 19 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>193555		25 33 19 00 31 33 19 00 3d 33 19 00 49 33 19 00
>193565		55 33 19 00 61 33 19 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm

>19356d		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.193575						IOPL2_TONE_TEST
.193575		e2 20		sep #$20	                SEP #$20        ; set A short
.193577		c2 10		rep #$10	                REP #$10        ; set X long
.193579		a2 00 00	ldx #$0000	                LDX #0
.19357c						OPL2_TONE_TESTING_L1
.19357c		bf 6d 35 19	lda $19356d,x	                LDA NOTE_INTRO, X
.193580		29 0f		and #$0f	                AND #$F
.193582		85 30		sta $30		                STA OPL2_NOTE ; start at C
.193584		bf 6d 35 19	lda $19356d,x	                LDA NOTE_INTRO, X
.193588		29 70		and #$70	                AND #$70
.19358a		4a		lsr a		                LSR A
.19358b		4a		lsr a		                LSR A
.19358c		4a		lsr a		                LSR A
.19358d		4a		lsr a		                LSR A
.19358e		85 31		sta $31		                STA OPL2_OCTAVE
.193590		8a		txa		                TXA
.193591		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.193593		85 27		sta $27		                STA OPL2_CHANNEL
.193595		22 65 37 19	jsl $193765	                JSL OPL2_PLAYNOTE
.193599		a0 00 00	ldy #$0000	                LDY #$0000
.19359c						OPL2_TONE_TESTING_L2
.19359c		ea		nop		                NOP
.19359d		ea		nop		                NOP
.19359e		ea		nop		                NOP
.19359f		ea		nop		                NOP
.1935a0		c8		iny		                INY
.1935a1		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.1935a4		d0 f6		bne $19359c	                BNE OPL2_TONE_TESTING_L2
.1935a6		e8		inx		                INX
.1935a7		e0 08 00	cpx #$0008	                CPX #8
.1935aa		d0 d0		bne $19357c	                BNE OPL2_TONE_TESTING_L1
.1935ac		6b		rtl		                RTL
.1935ad						OPL2_INIT
.1935ad		c2 20		rep #$20	                REP #$20        ; set A long
.1935af		a9 00 00	lda #$0000	                LDA #$0000
.1935b2		85 28		sta $28		                STA OPL2_REG_REGION
.1935b4		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1935b6		85 30		sta $30		                STA OPL2_NOTE
.1935b8		85 32		sta $32		                STA OPL2_PARAMETER0
.1935ba		85 34		sta $34		                STA OPL2_PARAMETER2
.1935bc		a9 37 15	lda #$1537	                LDA #<>INSTRUMENT_ACCORDN
.1935bf		85 50		sta $50		                STA RAD_ADDR
.1935c1		a9 19 00	lda #$0019	                LDA #<`INSTRUMENT_ACCORDN
.1935c4		85 52		sta $52		                STA RAD_ADDR + 2
.1935c6		e2 20		sep #$20	                SEP #$20        ; set A short
.1935c8		6b		rtl		                RTL
.1935c9						OPL2_Reset
.1935c9		6b		rtl		                RTL
.1935ca						OPL2_Get_FrequencyBlock
.1935ca		6b		rtl		                RTL
.1935cb						OPL2_GET_REGISTER
.1935cb		48		pha		                PHA             ; begin setdp macro
.1935cc		08		php		                PHP
.1935cd		c2 20		rep #$20	                REP #$20        ; set A long
.1935cf		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935d2		5b		tcd		                TCD
.1935d3		28		plp		                PLP
.1935d4		68		pla		                PLA             ; end setdp macro
.1935d5		c2 20		rep #$20	                REP #$20        ; set A long
.1935d7		18		clc		              CLC
.1935d8		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1935db		65 32		adc $32		              ADC OPL2_PARAMETER0
.1935dd		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1935df		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1935e2		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1935e4		e2 20		sep #$20	                SEP #$20        ; set A short
.1935e6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1935e8		6b		rtl		              RTL
.1935e9						OPL2_GET_WAVEFORM_SELECT
.1935e9		48		pha		                PHA             ; begin setdp macro
.1935ea		08		php		                PHP
.1935eb		c2 20		rep #$20	                REP #$20        ; set A long
.1935ed		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935f0		5b		tcd		                TCD
.1935f1		28		plp		                PLP
.1935f2		68		pla		                PLA             ; end setdp macro
.1935f3		c2 20		rep #$20	                REP #$20        ; set A long
.1935f5		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1935f8		69 01 00	adc #$0001	              ADC #$0001
.1935fb		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1935fd		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193600		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193602		e2 20		sep #$20	                SEP #$20        ; set A short
.193604		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193606		29 20		and #$20	              AND #$20
.193608		6b		rtl		              RTL
.193609						OPL2_GET_SCALINGLEVEL
.193609		48		pha		                PHA             ; begin setdp macro
.19360a		08		php		                PHP
.19360b		c2 20		rep #$20	                REP #$20        ; set A long
.19360d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193610		5b		tcd		                TCD
.193611		28		plp		                PLP
.193612		68		pla		                PLA             ; end setdp macro
.193613		c2 20		rep #$20	                REP #$20        ; set A long
.193615		a9 40 00	lda #$0040	              LDA #$0040  ;
.193618		85 28		sta $28		              STA OPL2_REG_REGION
.19361a		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.19361d		e2 20		sep #$20	                SEP #$20        ; set A short
.19361f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193621		29 c0		and #$c0	              AND #$C0
.193623		4a		lsr a		              LSR A
.193624		4a		lsr a		              LSR A
.193625		4a		lsr a		              LSR A
.193626		4a		lsr a		              LSR A
.193627		4a		lsr a		              LSR A
.193628		4a		lsr a		              LSR A
.193629		6b		rtl		              RTL
.19362a						OPL2_GET_BLOCK
.19362a		48		pha		                PHA             ; begin setdp macro
.19362b		08		php		                PHP
.19362c		c2 20		rep #$20	                REP #$20        ; set A long
.19362e		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193631		5b		tcd		                TCD
.193632		28		plp		                PLP
.193633		68		pla		                PLA             ; end setdp macro
.193634		e2 20		sep #$20	                SEP #$20        ; set A short
.193636		18		clc		              CLC
.193637		a5 27		lda $27		              LDA OPL2_CHANNEL
.193639		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19363b		69 b0		adc #$b0	              ADC #$B0
.19363d		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.19363f		a9 00		lda #$00	              LDA #$00
.193641		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193643		c2 30		rep #$30	                REP #$30        ; set A&X long
.193645		18		clc		              CLC
.193646		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193649		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19364b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19364d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193650		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193652		e2 20		sep #$20	                SEP #$20        ; set A short
.193654		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193656		29 1c		and #$1c	              AND #$1C
.193658		4a		lsr a		              LSR A
.193659		4a		lsr a		              LSR A
.19365a		6b		rtl		              RTL
.19365b						OPL2_GET_KEYON
.19365b		48		pha		                PHA             ; begin setdp macro
.19365c		08		php		                PHP
.19365d		c2 20		rep #$20	                REP #$20        ; set A long
.19365f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193662		5b		tcd		                TCD
.193663		28		plp		                PLP
.193664		68		pla		                PLA             ; end setdp macro
.193665		e2 20		sep #$20	                SEP #$20        ; set A short
.193667		18		clc		              CLC
.193668		a5 27		lda $27		              LDA OPL2_CHANNEL
.19366a		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19366c		69 b0		adc #$b0	              ADC #$B0
.19366e		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193670		a9 00		lda #$00	              LDA #$00
.193672		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193674		c2 30		rep #$30	                REP #$30        ; set A&X long
.193676		18		clc		              CLC
.193677		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19367a		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19367c		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19367e		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193681		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193683		e2 20		sep #$20	                SEP #$20        ; set A short
.193685		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193687		29 20		and #$20	              AND #$20
.193689		6b		rtl		              RTL
.19368a						OPL2_GET_FEEDBACK
.19368a		48		pha		                PHA             ; begin setdp macro
.19368b		08		php		                PHP
.19368c		c2 20		rep #$20	                REP #$20        ; set A long
.19368e		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193691		5b		tcd		                TCD
.193692		28		plp		                PLP
.193693		68		pla		                PLA             ; end setdp macro
.193694		e2 20		sep #$20	                SEP #$20        ; set A short
.193696		18		clc		              CLC
.193697		a5 27		lda $27		              LDA OPL2_CHANNEL
.193699		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19369b		69 c0		adc #$c0	              ADC #$C0
.19369d		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.19369f		a9 00		lda #$00	              LDA #$00
.1936a1		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.1936a3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1936a5		18		clc		              CLC
.1936a6		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1936a9		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.1936ab		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1936ad		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1936b0		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1936b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1936b4		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1936b6		29 e0		and #$e0	              AND #$E0
.1936b8		4a		lsr a		              LSR
.1936b9		6b		rtl		              RTL
.1936ba						OPL2_GET_SYNTHMODE
.1936ba		48		pha		                PHA             ; begin setdp macro
.1936bb		08		php		                PHP
.1936bc		c2 20		rep #$20	                REP #$20        ; set A long
.1936be		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936c1		5b		tcd		                TCD
.1936c2		28		plp		                PLP
.1936c3		68		pla		                PLA             ; end setdp macro
.1936c4		e2 20		sep #$20	                SEP #$20        ; set A short
.1936c6		18		clc		              CLC
.1936c7		a5 27		lda $27		              LDA OPL2_CHANNEL
.1936c9		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.1936cb		69 c0		adc #$c0	              ADC #$C0
.1936cd		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.1936cf		a9 00		lda #$00	              LDA #$00
.1936d1		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.1936d3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1936d5		18		clc		              CLC
.1936d6		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1936d9		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.1936db		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1936dd		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1936e0		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1936e2		e2 20		sep #$20	                SEP #$20        ; set A short
.1936e4		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1936e6		29 01		and #$01	              AND #$01
.1936e8		6b		rtl		              RTL
.1936e9						OPL2_GET_DEEPTREMOLO
.1936e9		48		pha		                PHA             ; begin setdp macro
.1936ea		08		php		                PHP
.1936eb		c2 20		rep #$20	                REP #$20        ; set A long
.1936ed		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936f0		5b		tcd		                TCD
.1936f1		28		plp		                PLP
.1936f2		68		pla		                PLA             ; end setdp macro
.1936f3		c2 20		rep #$20	                REP #$20        ; set A long
.1936f5		a9 bd 00	lda #$00bd	              LDA #$00BD;
.1936f8		85 28		sta $28		              STA OPL2_REG_REGION
.1936fa		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.1936fd		e2 20		sep #$20	                SEP #$20        ; set A short
.1936ff		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193701		29 80		and #$80	              AND #$80
.193703		6b		rtl		              RTL
.193704						OPL2_GET_DEEPVIBRATO
.193704		48		pha		                PHA             ; begin setdp macro
.193705		08		php		                PHP
.193706		c2 20		rep #$20	                REP #$20        ; set A long
.193708		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19370b		5b		tcd		                TCD
.19370c		28		plp		                PLP
.19370d		68		pla		                PLA             ; end setdp macro
.19370e		c2 20		rep #$20	                REP #$20        ; set A long
.193710		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193713		69 bd 00	adc #$00bd	              ADC #$00BD
.193716		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193718		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19371b		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19371d		e2 20		sep #$20	                SEP #$20        ; set A short
.19371f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193721		29 40		and #$40	              AND #$40
.193723		6b		rtl		              RTL
.193724						OPL2_GET_PERCUSSION
.193724		48		pha		                PHA             ; begin setdp macro
.193725		08		php		                PHP
.193726		c2 20		rep #$20	                REP #$20        ; set A long
.193728		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19372b		5b		tcd		                TCD
.19372c		28		plp		                PLP
.19372d		68		pla		                PLA             ; end setdp macro
.19372e		c2 20		rep #$20	                REP #$20        ; set A long
.193730		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193733		69 bd 00	adc #$00bd	              ADC #$00BD
.193736		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193738		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19373b		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19373d		e2 20		sep #$20	                SEP #$20        ; set A short
.19373f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193741		29 20		and #$20	              AND #$20
.193743		6b		rtl		              RTL
.193744						OPL2_GET_DRUMS
.193744		48		pha		                PHA             ; begin setdp macro
.193745		08		php		                PHP
.193746		c2 20		rep #$20	                REP #$20        ; set A long
.193748		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19374b		5b		tcd		                TCD
.19374c		28		plp		                PLP
.19374d		68		pla		                PLA             ; end setdp macro
.19374e		c2 20		rep #$20	                REP #$20        ; set A long
.193750		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193753		69 bd 00	adc #$00bd	              ADC #$00BD
.193756		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193758		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19375b		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19375d		e2 20		sep #$20	                SEP #$20        ; set A short
.19375f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193761		29 1f		and #$1f	              AND #$1F
.193763		6b		rtl		              RTL
.193764						OPL2_Get_WaveForm
.193764		6b		rtl		                RTL
.193765						OPL2_PLAYNOTE
.193765		48		pha		                PHA             ; begin setdp macro
.193766		08		php		                PHP
.193767		c2 20		rep #$20	                REP #$20        ; set A long
.193769		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19376c		5b		tcd		                TCD
.19376d		28		plp		                PLP
.19376e		68		pla		                PLA             ; end setdp macro
.19376f		e2 20		sep #$20	                SEP #$20        ; set A short
.193771		da		phx		                PHX
.193772		a9 00		lda #$00	                LDA #$00
.193774		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.193776		20 4d 3d	jsr $193d4d	                JSR OPL2_SET_KEYON
.193779		20 12 3d	jsr $193d12	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.19377c		e2 10		sep #$10	                SEP #$10        ; set X short
.19377e		a5 30		lda $30		                LDA OPL2_NOTE
.193780		3a		dec a		                DEC A
.193781		0a		asl a		                ASL A
.193782		aa		tax		                TAX
.193783		bf fc 14 19	lda $1914fc,x	                LDA @lnoteFNumbers,X
.193787		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.193789		e8		inx		                INX
.19378a		bf fc 14 19	lda $1914fc,x	                LDA @lnoteFNumbers,X
.19378e		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.193790		22 90 3c 19	jsl $193c90	                JSL OPL2_SET_FNUMBER
.193794		a9 01		lda #$01	                LDA #$01
.193796		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.193798		20 4d 3d	jsr $193d4d	                JSR OPL2_SET_KEYON
.19379b		c2 10		rep #$10	                REP #$10        ; set X long
.19379d		fa		plx		                PLX
.19379e		6b		rtl		                RTL
.19379f						OPL2_PLAYDRUM
.19379f		6b		rtl		                RTL
.1937a0						OPL2_SET_INSTRUMENT
.1937a0		48		pha		                PHA             ; begin setdp macro
.1937a1		08		php		                PHP
.1937a2		c2 20		rep #$20	                REP #$20        ; set A long
.1937a4		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937a7		5b		tcd		                TCD
.1937a8		28		plp		                PLP
.1937a9		68		pla		                PLA             ; end setdp macro
.1937aa		38		sec		              SEC ; Set the WaveFormSelect to True
.1937ab		22 8e 39 19	jsl $19398e	              JSL OPL2_SET_WAVEFORMSELECT;
.1937af		e2 20		sep #$20	                SEP #$20        ; set A short
.1937b1		c2 10		rep #$10	                REP #$10        ; set X long
.1937b3		a0 00 00	ldy #$0000	              LDY #$0000
.1937b6		a2 00 00	ldx #$0000	              LDX #$0000
.1937b9		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.1937bb		85 35		sta $35		              STA OPL2_PARAMETER3
.1937bd		c8		iny		              INY
.1937be		c9 06		cmp #$06	              CMP #$06
.1937c0		d0 03		bne $1937c5	              BNE PERCUSSION_NEXT07
.1937c2		82 70 01	brl $193935	              BRL Percussion_6
.1937c5						PERCUSSION_NEXT07
.1937c5		c9 07		cmp #$07	              CMP #$07
.1937c7		d0 03		bne $1937cc	              BNE PERCUSSION_NEXT08
.1937c9		82 44 01	brl $193910	              BRL Percussion_7
.1937cc						PERCUSSION_NEXT08
.1937cc		c9 08		cmp #$08	              CMP #$08
.1937ce		d0 03		bne $1937d3	              BNE PERCUSSION_NEXT09
.1937d0		82 18 01	brl $1938eb	              BRL Percussion_8
.1937d3						PERCUSSION_NEXT09
.1937d3		c9 09		cmp #$09	              CMP #$09
.1937d5		d0 03		bne $1937da	              BNE PERCUSSION_NEXT0A
.1937d7		82 ec 00	brl $1938c6	              BRL Percussion_9
.1937da						PERCUSSION_NEXT0A
.1937da		c9 0a		cmp #$0a	              CMP #$0A
.1937dc		d0 03		bne $1937e1	              BNE Percussion_Default
.1937de		82 c0 00	brl $1938a1	              BRL Percussion_A
.1937e1						Percussion_Default
.1937e1		a9 00		lda #$00	              LDA #$00
.1937e3		85 26		sta $26		              STA OPL2_OPERATOR
.1937e5		c2 20		rep #$20	                REP #$20        ; set A long
.1937e7		a9 20 00	lda #$0020	              LDA #$0020;
.1937ea		85 28		sta $28		              STA OPL2_REG_REGION
.1937ec		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.1937ef		e2 20		sep #$20	                SEP #$20        ; set A short
.1937f1		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1937f3		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1937f5		c8		iny		              INY
.1937f6		c2 20		rep #$20	                REP #$20        ; set A long
.1937f8		a9 40 00	lda #$0040	              LDA #$0040;
.1937fb		85 28		sta $28		              STA OPL2_REG_REGION
.1937fd		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.193800		e2 20		sep #$20	                SEP #$20        ; set A short
.193802		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.193804		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193806		c8		iny		              INY
.193807		c2 20		rep #$20	                REP #$20        ; set A long
.193809		a9 60 00	lda #$0060	              LDA #$0060;
.19380c		85 28		sta $28		              STA OPL2_REG_REGION
.19380e		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.193811		e2 20		sep #$20	                SEP #$20        ; set A short
.193813		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193815		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193817		c8		iny		              INY
.193818		c2 20		rep #$20	                REP #$20        ; set A long
.19381a		a9 80 00	lda #$0080	              LDA #$0080;
.19381d		85 28		sta $28		              STA OPL2_REG_REGION
.19381f		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.193822		e2 20		sep #$20	                SEP #$20        ; set A short
.193824		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193826		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193828		c8		iny		              INY
.193829		c2 20		rep #$20	                REP #$20        ; set A long
.19382b		a9 e0 00	lda #$00e0	              LDA #$00E0;
.19382e		85 28		sta $28		              STA OPL2_REG_REGION
.193830		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.193833		e2 20		sep #$20	                SEP #$20        ; set A short
.193835		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193837		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193839		c8		iny		              INY
.19383a		e2 10		sep #$10	                SEP #$10        ; set X short
.19383c		a5 27		lda $27		              LDA OPL2_CHANNEL
.19383e		29 0f		and #$0f	              AND #$0F
.193840		aa		tax		              TAX
.193841		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.193843		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.193847		c8		iny		              INY
.193848		a9 01		lda #$01	              LDA #$01
.19384a		85 26		sta $26		              STA OPL2_OPERATOR
.19384c		c2 20		rep #$20	                REP #$20        ; set A long
.19384e		a9 20 00	lda #$0020	              LDA #$0020;
.193851		85 28		sta $28		              STA OPL2_REG_REGION
.193853		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.193856		e2 20		sep #$20	                SEP #$20        ; set A short
.193858		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.19385a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19385c		c8		iny		              INY
.19385d		c2 20		rep #$20	                REP #$20        ; set A long
.19385f		a9 40 00	lda #$0040	              LDA #$0040;
.193862		85 28		sta $28		              STA OPL2_REG_REGION
.193864		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.193867		e2 20		sep #$20	                SEP #$20        ; set A short
.193869		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.19386b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19386d		c8		iny		              INY
.19386e		c2 20		rep #$20	                REP #$20        ; set A long
.193870		a9 60 00	lda #$0060	              LDA #$0060;
.193873		85 28		sta $28		              STA OPL2_REG_REGION
.193875		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.193878		e2 20		sep #$20	                SEP #$20        ; set A short
.19387a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.19387c		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19387e		c8		iny		              INY
.19387f		c2 20		rep #$20	                REP #$20        ; set A long
.193881		a9 80 00	lda #$0080	              LDA #$0080;
.193884		85 28		sta $28		              STA OPL2_REG_REGION
.193886		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.193889		e2 20		sep #$20	                SEP #$20        ; set A short
.19388b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.19388d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19388f		c8		iny		              INY
.193890		c2 20		rep #$20	                REP #$20        ; set A long
.193892		a9 e0 00	lda #$00e0	              LDA #$00E0;
.193895		85 28		sta $28		              STA OPL2_REG_REGION
.193897		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.19389a		e2 20		sep #$20	                SEP #$20        ; set A short
.19389c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.19389e		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1938a0		6b		rtl		                RTL
.1938a1						Percussion_A
.1938a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1938a3		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1938a5		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.1938a9		c8		iny		              INY
.1938aa		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1938ac		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.1938b0		c8		iny		              INY
.1938b1		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1938b3		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.1938b7		c8		iny		              INY
.1938b8		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1938ba		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.1938be		c8		iny		              INY
.1938bf		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1938c1		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.1938c5		6b		rtl		                RTL
.1938c6						Percussion_9
.1938c6		e2 20		sep #$20	                SEP #$20        ; set A short
.1938c8		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1938ca		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.1938ce		c8		iny		              INY
.1938cf		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1938d1		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.1938d5		c8		iny		              INY
.1938d6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1938d8		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.1938dc		c8		iny		              INY
.1938dd		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1938df		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.1938e3		c8		iny		              INY
.1938e4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1938e6		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.1938ea		6b		rtl		              RTL
.1938eb						Percussion_8
.1938eb		e2 20		sep #$20	                SEP #$20        ; set A short
.1938ed		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1938ef		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.1938f3		c8		iny		              INY
.1938f4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1938f6		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.1938fa		c8		iny		              INY
.1938fb		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1938fd		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.193901		c8		iny		              INY
.193902		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193904		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.193908		c8		iny		              INY
.193909		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.19390b		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.19390f		6b		rtl		              RTL
.193910						Percussion_7
.193910		e2 20		sep #$20	                SEP #$20        ; set A short
.193912		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193914		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.193918		c8		iny		              INY
.193919		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.19391b		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.19391f		c8		iny		              INY
.193920		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193922		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.193926		c8		iny		              INY
.193927		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193929		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.19392d		c8		iny		              INY
.19392e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193930		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.193934		6b		rtl		              RTL
.193935						Percussion_6
.193935		e2 20		sep #$20	                SEP #$20        ; set A short
.193937		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193939		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.19393d		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.193941		c8		iny		              INY
.193942		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.193944		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.193948		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.19394c		c8		iny		              INY
.19394d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.19394f		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.193953		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.193957		c8		iny		              INY
.193958		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.19395a		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.19395e		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.193962		c8		iny		              INY
.193963		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193965		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.193969		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.19396d		6b		rtl		              RTL
.19396e						OPL2_SET_REGISTER
.19396e		48		pha		                PHA             ; begin setdp macro
.19396f		08		php		                PHP
.193970		c2 20		rep #$20	                REP #$20        ; set A long
.193972		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193975		5b		tcd		                TCD
.193976		28		plp		                PLP
.193977		68		pla		                PLA             ; end setdp macro
.193978		c2 20		rep #$20	                REP #$20        ; set A long
.19397a		18		clc		              CLC
.19397b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19397e		65 32		adc $32		              ADC OPL2_PARAMETER0
.193980		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193982		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193985		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193987		e2 20		sep #$20	                SEP #$20        ; set A short
.193989		a5 33		lda $33		              LDA OPL2_PARAMETER1
.19398b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19398d		6b		rtl		              RTL
.19398e						OPL2_SET_WAVEFORMSELECT
.19398e		48		pha		                PHA             ; begin setdp macro
.19398f		08		php		                PHP
.193990		c2 20		rep #$20	                REP #$20        ; set A long
.193992		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193995		5b		tcd		                TCD
.193996		28		plp		                PLP
.193997		68		pla		                PLA             ; end setdp macro
.193998		c2 20		rep #$20	                REP #$20        ; set A long
.19399a		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.19399d		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19399f		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1939a2		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1939a4		e2 20		sep #$20	                SEP #$20        ; set A short
.1939a6		b0 07		bcs $1939af	              BCS OPL2_Set_WaveFormSelect_set
.1939a8		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939aa		29 df		and #$df	              AND #$DF
.1939ac		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939ae		6b		rtl		              RTL
.1939af						OPL2_Set_WaveFormSelect_set
.1939af		48		pha		                PHA             ; begin setdp macro
.1939b0		08		php		                PHP
.1939b1		c2 20		rep #$20	                REP #$20        ; set A long
.1939b3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939b6		5b		tcd		                TCD
.1939b7		28		plp		                PLP
.1939b8		68		pla		                PLA             ; end setdp macro
.1939b9		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939bb		09 20 00	ora #$0020	              ORA #$20
.1939be		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939c0		6b		rtl		                RTL
.1939c1						OPL2_SET_TREMOLO
.1939c1		48		pha		                PHA             ; begin setdp macro
.1939c2		08		php		                PHP
.1939c3		c2 20		rep #$20	                REP #$20        ; set A long
.1939c5		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939c8		5b		tcd		                TCD
.1939c9		28		plp		                PLP
.1939ca		68		pla		                PLA             ; end setdp macro
.1939cb		08		php		                PHP ; Push the Carry
.1939cc		c2 20		rep #$20	                REP #$20        ; set A long
.1939ce		18		clc		                CLC
.1939cf		a9 20 00	lda #$0020	                LDA #$0020 ;
.1939d2		85 28		sta $28		                STA OPL2_REG_REGION
.1939d4		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.1939d7		28		plp		                PLP ; Pull the Carry out
.1939d8		e2 20		sep #$20	                SEP #$20        ; set A short
.1939da		b0 08		bcs $1939e4	                BCS OPL2_Set_Tremolo_Set;
.1939dc		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1939de		29 7f		and #$7f	                AND #$7F
.1939e0		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1939e2		80 06		bra $1939ea	                BRA OPL2_Set_Tremolo_Exit
.1939e4						OPL2_Set_Tremolo_Set
.1939e4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1939e6		09 80		ora #$80	                ORA #$80
.1939e8		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1939ea						OPL2_Set_Tremolo_Exit
.1939ea		6b		rtl		                RTL
.1939eb						OPL2_GET_TREMOLO
.1939eb		48		pha		                PHA             ; begin setdp macro
.1939ec		08		php		                PHP
.1939ed		c2 20		rep #$20	                REP #$20        ; set A long
.1939ef		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939f2		5b		tcd		                TCD
.1939f3		28		plp		                PLP
.1939f4		68		pla		                PLA             ; end setdp macro
.1939f5		c2 20		rep #$20	                REP #$20        ; set A long
.1939f7		a9 20 00	lda #$0020	                LDA #$0020;
.1939fa		85 28		sta $28		                STA OPL2_REG_REGION
.1939fc		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.1939ff		e2 20		sep #$20	                SEP #$20        ; set A short
.193a01		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a03		29 80		and #$80	                AND #$80
.193a05		6b		rtl		                RTL
.193a06						OPL2_SET_VIBRATO
.193a06		48		pha		                PHA             ; begin setdp macro
.193a07		08		php		                PHP
.193a08		c2 20		rep #$20	                REP #$20        ; set A long
.193a0a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a0d		5b		tcd		                TCD
.193a0e		28		plp		                PLP
.193a0f		68		pla		                PLA             ; end setdp macro
.193a10		08		php		                PHP ; Push the Carry
.193a11		c2 20		rep #$20	                REP #$20        ; set A long
.193a13		18		clc		                CLC
.193a14		a9 20 00	lda #$0020	                LDA #$0020;
.193a17		85 28		sta $28		                STA OPL2_REG_REGION
.193a19		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.193a1c		28		plp		                PLP ; Pull the Carry out
.193a1d		e2 20		sep #$20	                SEP #$20        ; set A short
.193a1f		b0 08		bcs $193a29	                BCS OPL2_Set_Vibrato_Set;
.193a21		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a23		29 bf		and #$bf	                AND #$BF
.193a25		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a27		80 06		bra $193a2f	                BRA OPL2_Set_Vibrato_Exit
.193a29						OPL2_Set_Vibrato_Set
.193a29		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a2b		09 40		ora #$40	                ORA #$40
.193a2d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a2f						OPL2_Set_Vibrato_Exit
.193a2f		6b		rtl		                RTL
.193a30						OPL2_GET_VIBRATO
.193a30		48		pha		                PHA             ; begin setdp macro
.193a31		08		php		                PHP
.193a32		c2 20		rep #$20	                REP #$20        ; set A long
.193a34		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a37		5b		tcd		                TCD
.193a38		28		plp		                PLP
.193a39		68		pla		                PLA             ; end setdp macro
.193a3a		c2 20		rep #$20	                REP #$20        ; set A long
.193a3c		a9 20 00	lda #$0020	                LDA #$0020;
.193a3f		85 28		sta $28		                STA OPL2_REG_REGION
.193a41		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.193a44		e2 20		sep #$20	                SEP #$20        ; set A short
.193a46		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a48		29 40		and #$40	                AND #$40
.193a4a		6b		rtl		                RTL
.193a4b						OPL2_SET_MAINTAINSUSTAIN
.193a4b		48		pha		                PHA             ; begin setdp macro
.193a4c		08		php		                PHP
.193a4d		c2 20		rep #$20	                REP #$20        ; set A long
.193a4f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a52		5b		tcd		                TCD
.193a53		28		plp		                PLP
.193a54		68		pla		                PLA             ; end setdp macro
.193a55		08		php		              PHP ; Push the Carry
.193a56		c2 20		rep #$20	                REP #$20        ; set A long
.193a58		18		clc		              CLC
.193a59		a9 20 00	lda #$0020	              LDA #$0020;
.193a5c		85 28		sta $28		              STA OPL2_REG_REGION
.193a5e		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.193a61		28		plp		              PLP ; Pull the Carry out
.193a62		e2 20		sep #$20	                SEP #$20        ; set A short
.193a64		b0 08		bcs $193a6e	              BCS OPL2_Set_MaintainSustain_Set;
.193a66		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193a68		29 df		and #$df	              AND #$DF
.193a6a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193a6c		80 06		bra $193a74	              BRA OPL2_Set_MaintainSustain_Exit
.193a6e						OPL2_Set_MaintainSustain_Set
.193a6e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193a70		09 20		ora #$20	              ORA #$20
.193a72		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193a74						OPL2_Set_MaintainSustain_Exit
.193a74		6b		rtl		                RTL
.193a75						OPL2_GET_MAINTAINSUSTAIN
.193a75		48		pha		                PHA             ; begin setdp macro
.193a76		08		php		                PHP
.193a77		c2 20		rep #$20	                REP #$20        ; set A long
.193a79		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a7c		5b		tcd		                TCD
.193a7d		28		plp		                PLP
.193a7e		68		pla		                PLA             ; end setdp macro
.193a7f		c2 20		rep #$20	                REP #$20        ; set A long
.193a81		a9 20 00	lda #$0020	              LDA #$0020;
.193a84		85 28		sta $28		              STA OPL2_REG_REGION
.193a86		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.193a89		e2 20		sep #$20	                SEP #$20        ; set A short
.193a8b		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193a8d		29 20		and #$20	              AND #$20
.193a8f		6b		rtl		                RTL
.193a90						OPL2_SET_ENVELOPESCALING
.193a90		48		pha		                PHA             ; begin setdp macro
.193a91		08		php		                PHP
.193a92		c2 20		rep #$20	                REP #$20        ; set A long
.193a94		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a97		5b		tcd		                TCD
.193a98		28		plp		                PLP
.193a99		68		pla		                PLA             ; end setdp macro
.193a9a		08		php		              PHP ; Push the Carry
.193a9b		c2 20		rep #$20	                REP #$20        ; set A long
.193a9d		18		clc		              CLC
.193a9e		a9 20 00	lda #$0020	              LDA #$0020;
.193aa1		85 28		sta $28		              STA OPL2_REG_REGION
.193aa3		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.193aa6		28		plp		              PLP ; Pull the Carry out
.193aa7		e2 20		sep #$20	                SEP #$20        ; set A short
.193aa9		b0 08		bcs $193ab3	              BCS OPL2_Set_EnvelopeScaling_Set;
.193aab		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193aad		29 ef		and #$ef	              AND #$EF
.193aaf		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193ab1		80 06		bra $193ab9	              BRA OPL2_Set_EnvelopeScaling_Exit
.193ab3						OPL2_Set_EnvelopeScaling_Set
.193ab3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193ab5		09 10		ora #$10	              ORA #$10
.193ab7		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193ab9						OPL2_Set_EnvelopeScaling_Exit
.193ab9		6b		rtl		                RTL
.193aba						OPL2_GET_ENVELOPESCALING
.193aba		48		pha		                PHA             ; begin setdp macro
.193abb		08		php		                PHP
.193abc		c2 20		rep #$20	                REP #$20        ; set A long
.193abe		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193ac1		5b		tcd		                TCD
.193ac2		28		plp		                PLP
.193ac3		68		pla		                PLA             ; end setdp macro
.193ac4		c2 20		rep #$20	                REP #$20        ; set A long
.193ac6		a9 20 00	lda #$0020	              LDA #$0020;
.193ac9		85 28		sta $28		              STA OPL2_REG_REGION
.193acb		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.193ace		e2 20		sep #$20	                SEP #$20        ; set A short
.193ad0		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193ad2		29 10		and #$10	              AND #$10
.193ad4		6b		rtl		                RTL
.193ad5						OPL2_GET_MODFREQMULTIPLE
.193ad5		48		pha		                PHA             ; begin setdp macro
.193ad6		08		php		                PHP
.193ad7		c2 20		rep #$20	                REP #$20        ; set A long
.193ad9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193adc		5b		tcd		                TCD
.193add		28		plp		                PLP
.193ade		68		pla		                PLA             ; end setdp macro
.193adf		c2 20		rep #$20	                REP #$20        ; set A long
.193ae1		a9 20 00	lda #$0020	              LDA #$0020;
.193ae4		85 28		sta $28		              STA OPL2_REG_REGION
.193ae6		20 cc 3e	jsr $193ecc	              JSR OPL2_GET_REG_OFFSET
.193ae9		e2 20		sep #$20	                SEP #$20        ; set A short
.193aeb		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193aed		29 0f		and #$0f	              AND #$0F
.193aef		6b		rtl		              RTL
.193af0						OPL2_SET_MODFREQMULTIPLE
.193af0		48		pha		                PHA             ; begin setdp macro
.193af1		08		php		                PHP
.193af2		c2 20		rep #$20	                REP #$20        ; set A long
.193af4		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193af7		5b		tcd		                TCD
.193af8		28		plp		                PLP
.193af9		68		pla		                PLA             ; end setdp macro
.193afa		c2 20		rep #$20	                REP #$20        ; set A long
.193afc		a9 20 00	lda #$0020	                LDA #$0020;
.193aff		85 28		sta $28		                STA OPL2_REG_REGION
.193b01		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.193b04		e2 20		sep #$20	                SEP #$20        ; set A short
.193b06		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193b08		29 0f		and #$0f	                AND #$0F
.193b0a		85 32		sta $32		                STA OPL2_PARAMETER0
.193b0c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193b0e		29 f0		and #$f0	                AND #$F0
.193b10		05 32		ora $32		                ORA OPL2_PARAMETER0
.193b12		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193b14		6b		rtl		                RTL
.193b15						OPL2_SET_SCALINGLEVEL
.193b15		48		pha		                PHA             ; begin setdp macro
.193b16		08		php		                PHP
.193b17		c2 20		rep #$20	                REP #$20        ; set A long
.193b19		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193b1c		5b		tcd		                TCD
.193b1d		28		plp		                PLP
.193b1e		68		pla		                PLA             ; end setdp macro
.193b1f		c2 20		rep #$20	                REP #$20        ; set A long
.193b21		a9 40 00	lda #$0040	                LDA #$0040;
.193b24		85 28		sta $28		                STA OPL2_REG_REGION
.193b26		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.193b29		e2 20		sep #$20	                SEP #$20        ; set A short
.193b2b		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193b2d		29 03		and #$03	                AND #$03
.193b2f		0a		asl a		                ASL
.193b30		0a		asl a		                ASL
.193b31		0a		asl a		                ASL
.193b32		0a		asl a		                ASL
.193b33		0a		asl a		                ASL
.193b34		0a		asl a		                ASL
.193b35		85 32		sta $32		                STA OPL2_PARAMETER0
.193b37		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193b39		29 3f		and #$3f	                AND #$3F
.193b3b		05 32		ora $32		                ORA OPL2_PARAMETER0
.193b3d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193b3f		6b		rtl		                RTL
.193b40						OPL2_SET_VOLUME
.193b40		48		pha		                PHA             ; begin setdp macro
.193b41		08		php		                PHP
.193b42		c2 20		rep #$20	                REP #$20        ; set A long
.193b44		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193b47		5b		tcd		                TCD
.193b48		28		plp		                PLP
.193b49		68		pla		                PLA             ; end setdp macro
.193b4a		c2 20		rep #$20	                REP #$20        ; set A long
.193b4c		a9 40 00	lda #$0040	                LDA #$0040  ;
.193b4f		85 28		sta $28		                STA OPL2_REG_REGION
.193b51		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.193b54		e2 20		sep #$20	                SEP #$20        ; set A short
.193b56		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.193b58		29 3f		and #$3f	                AND #$3F
.193b5a		85 32		sta $32		                STA OPL2_PARAMETER0
.193b5c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193b5e		29 c0		and #$c0	                AND #$C0
.193b60		05 32		ora $32		                ORA OPL2_PARAMETER0
.193b62		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193b64		6b		rtl		                RTL
.193b65						OPL2_GET_VOLUME
.193b65		48		pha		                PHA             ; begin setdp macro
.193b66		08		php		                PHP
.193b67		c2 20		rep #$20	                REP #$20        ; set A long
.193b69		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193b6c		5b		tcd		                TCD
.193b6d		28		plp		                PLP
.193b6e		68		pla		                PLA             ; end setdp macro
.193b6f		c2 20		rep #$20	                REP #$20        ; set A long
.193b71		a9 40 00	lda #$0040	                LDA #$0040  ;
.193b74		85 28		sta $28		                STA OPL2_REG_REGION
.193b76		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.193b79		e2 20		sep #$20	                SEP #$20        ; set A short
.193b7b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193b7d		29 3f		and #$3f	                AND #$3F
.193b7f		6b		rtl		                RTL
.193b80						OPL2_SET_ATTACK
.193b80		48		pha		                PHA             ; begin setdp macro
.193b81		08		php		                PHP
.193b82		c2 20		rep #$20	                REP #$20        ; set A long
.193b84		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193b87		5b		tcd		                TCD
.193b88		28		plp		                PLP
.193b89		68		pla		                PLA             ; end setdp macro
.193b8a		c2 20		rep #$20	                REP #$20        ; set A long
.193b8c		a9 60 00	lda #$0060	                LDA #$0060  ;
.193b8f		85 28		sta $28		                STA OPL2_REG_REGION
.193b91		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.193b94		e2 20		sep #$20	                SEP #$20        ; set A short
.193b96		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193b98		29 0f		and #$0f	                AND #$0F
.193b9a		0a		asl a		                ASL
.193b9b		0a		asl a		                ASL
.193b9c		0a		asl a		                ASL
.193b9d		0a		asl a		                ASL
.193b9e		85 32		sta $32		                STA OPL2_PARAMETER0
.193ba0		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193ba2		29 0f		and #$0f	                AND #$0F
.193ba4		05 32		ora $32		                ORA OPL2_PARAMETER0
.193ba6		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193ba8		6b		rtl		                RTL
.193ba9						OPL2_GET_ATTACK
.193ba9		48		pha		                PHA             ; begin setdp macro
.193baa		08		php		                PHP
.193bab		c2 20		rep #$20	                REP #$20        ; set A long
.193bad		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193bb0		5b		tcd		                TCD
.193bb1		28		plp		                PLP
.193bb2		68		pla		                PLA             ; end setdp macro
.193bb3		c2 20		rep #$20	                REP #$20        ; set A long
.193bb5		a9 60 00	lda #$0060	                LDA #$0060
.193bb8		85 28		sta $28		                STA OPL2_REG_REGION
.193bba		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.193bbd		e2 20		sep #$20	                SEP #$20        ; set A short
.193bbf		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193bc1		29 f0		and #$f0	                AND #$F0
.193bc3		4a		lsr a		                LSR
.193bc4		4a		lsr a		                LSR
.193bc5		4a		lsr a		                LSR
.193bc6		4a		lsr a		                LSR
.193bc7		6b		rtl		                RTL
.193bc8						OPL2_SET_DECAY
.193bc8		48		pha		                PHA             ; begin setdp macro
.193bc9		08		php		                PHP
.193bca		c2 20		rep #$20	                REP #$20        ; set A long
.193bcc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193bcf		5b		tcd		                TCD
.193bd0		28		plp		                PLP
.193bd1		68		pla		                PLA             ; end setdp macro
.193bd2		c2 20		rep #$20	                REP #$20        ; set A long
.193bd4		a9 60 00	lda #$0060	                LDA #$0060;
.193bd7		85 28		sta $28		                STA OPL2_REG_REGION
.193bd9		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.193bdc		e2 20		sep #$20	                SEP #$20        ; set A short
.193bde		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193be0		29 0f		and #$0f	                AND #$0F
.193be2		85 32		sta $32		                STA OPL2_PARAMETER0
.193be4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193be6		29 f0		and #$f0	                AND #$F0
.193be8		05 32		ora $32		                ORA OPL2_PARAMETER0
.193bea		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193bec		6b		rtl		                RTL
.193bed						OPL2_GET_DECAY
.193bed		48		pha		                PHA             ; begin setdp macro
.193bee		08		php		                PHP
.193bef		c2 20		rep #$20	                REP #$20        ; set A long
.193bf1		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193bf4		5b		tcd		                TCD
.193bf5		28		plp		                PLP
.193bf6		68		pla		                PLA             ; end setdp macro
.193bf7		c2 20		rep #$20	                REP #$20        ; set A long
.193bf9		a9 60 00	lda #$0060	                LDA #$0060
.193bfc		85 28		sta $28		                STA OPL2_REG_REGION
.193bfe		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.193c01		e2 20		sep #$20	                SEP #$20        ; set A short
.193c03		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193c05		29 0f		and #$0f	                AND #$0F
.193c07		6b		rtl		                RTL
.193c08						OPL2_SET_SUSTAIN
.193c08		48		pha		                PHA             ; begin setdp macro
.193c09		08		php		                PHP
.193c0a		c2 20		rep #$20	                REP #$20        ; set A long
.193c0c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193c0f		5b		tcd		                TCD
.193c10		28		plp		                PLP
.193c11		68		pla		                PLA             ; end setdp macro
.193c12		c2 20		rep #$20	                REP #$20        ; set A long
.193c14		a9 80 00	lda #$0080	                LDA #$0080;
.193c17		85 28		sta $28		                STA OPL2_REG_REGION
.193c19		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.193c1c		e2 20		sep #$20	                SEP #$20        ; set A short
.193c1e		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193c20		29 0f		and #$0f	                AND #$0F
.193c22		0a		asl a		                ASL
.193c23		0a		asl a		                ASL
.193c24		0a		asl a		                ASL
.193c25		0a		asl a		                ASL
.193c26		85 32		sta $32		                STA OPL2_PARAMETER0
.193c28		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193c2a		29 0f		and #$0f	                AND #$0F
.193c2c		05 32		ora $32		                ORA OPL2_PARAMETER0
.193c2e		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193c30		6b		rtl		                RTL
.193c31						OPL2_GET_SUSTAIN
.193c31		48		pha		                PHA             ; begin setdp macro
.193c32		08		php		                PHP
.193c33		c2 20		rep #$20	                REP #$20        ; set A long
.193c35		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193c38		5b		tcd		                TCD
.193c39		28		plp		                PLP
.193c3a		68		pla		                PLA             ; end setdp macro
.193c3b		c2 20		rep #$20	                REP #$20        ; set A long
.193c3d		a9 80 00	lda #$0080	                LDA #$0080
.193c40		85 28		sta $28		                STA OPL2_REG_REGION
.193c42		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.193c45		e2 20		sep #$20	                SEP #$20        ; set A short
.193c47		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193c49		29 f0		and #$f0	                AND #$F0
.193c4b		4a		lsr a		                LSR
.193c4c		4a		lsr a		                LSR
.193c4d		4a		lsr a		                LSR
.193c4e		4a		lsr a		                LSR
.193c4f		6b		rtl		                RTL
.193c50						OPL2_SET_RELEASE
.193c50		48		pha		                PHA             ; begin setdp macro
.193c51		08		php		                PHP
.193c52		c2 20		rep #$20	                REP #$20        ; set A long
.193c54		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193c57		5b		tcd		                TCD
.193c58		28		plp		                PLP
.193c59		68		pla		                PLA             ; end setdp macro
.193c5a		c2 20		rep #$20	                REP #$20        ; set A long
.193c5c		a9 80 00	lda #$0080	                LDA #$0080;
.193c5f		85 28		sta $28		                STA OPL2_REG_REGION
.193c61		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.193c64		e2 20		sep #$20	                SEP #$20        ; set A short
.193c66		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193c68		29 0f		and #$0f	                AND #$0F
.193c6a		85 32		sta $32		                STA OPL2_PARAMETER0
.193c6c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193c6e		29 f0		and #$f0	                AND #$F0
.193c70		05 32		ora $32		                ORA OPL2_PARAMETER0
.193c72		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193c74		6b		rtl		                RTL
.193c75						OPL2_GET_RELEASE
.193c75		48		pha		                PHA             ; begin setdp macro
.193c76		08		php		                PHP
.193c77		c2 20		rep #$20	                REP #$20        ; set A long
.193c79		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193c7c		5b		tcd		                TCD
.193c7d		28		plp		                PLP
.193c7e		68		pla		                PLA             ; end setdp macro
.193c7f		c2 20		rep #$20	                REP #$20        ; set A long
.193c81		a9 80 00	lda #$0080	                LDA #$0080
.193c84		85 28		sta $28		                STA OPL2_REG_REGION
.193c86		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.193c89		e2 20		sep #$20	                SEP #$20        ; set A short
.193c8b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193c8d		29 0f		and #$0f	                AND #$0F
.193c8f		6b		rtl		                RTL
.193c90						OPL2_SET_FNUMBER
.193c90		48		pha		                PHA             ; begin setdp macro
.193c91		08		php		                PHP
.193c92		c2 20		rep #$20	                REP #$20        ; set A long
.193c94		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193c97		5b		tcd		                TCD
.193c98		28		plp		                PLP
.193c99		68		pla		                PLA             ; end setdp macro
.193c9a		e2 20		sep #$20	                SEP #$20        ; set A short
.193c9c		18		clc		                CLC
.193c9d		a5 27		lda $27		                LDA OPL2_CHANNEL
.193c9f		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193ca1		69 a0		adc #$a0	                ADC #$A0
.193ca3		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193ca5		a9 00		lda #$00	                LDA #$00
.193ca7		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193ca9		c2 30		rep #$30	                REP #$30        ; set A&X long
.193cab		18		clc		                CLC
.193cac		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193caf		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193cb1		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193cb3		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193cb6		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193cb8		e2 20		sep #$20	                SEP #$20        ; set A short
.193cba		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.193cbc		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.193cbe		18		clc		                CLC
.193cbf		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.193cc1		69 10		adc #$10	                ADC #$10
.193cc3		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193cc5		a5 33		lda $33		                LDA OPL2_PARAMETER1
.193cc7		29 03		and #$03	                AND #$03
.193cc9		85 33		sta $33		                STA OPL2_PARAMETER1
.193ccb		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193ccd		29 fc		and #$fc	                AND #$FC
.193ccf		05 33		ora $33		                ORA OPL2_PARAMETER1
.193cd1		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193cd3		6b		rtl		                RTL
.193cd4						OPL2_GET_FNUMBER
.193cd4		48		pha		                PHA             ; begin setdp macro
.193cd5		08		php		                PHP
.193cd6		c2 20		rep #$20	                REP #$20        ; set A long
.193cd8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193cdb		5b		tcd		                TCD
.193cdc		28		plp		                PLP
.193cdd		68		pla		                PLA             ; end setdp macro
.193cde		e2 20		sep #$20	                SEP #$20        ; set A short
.193ce0		18		clc		                CLC
.193ce1		a5 27		lda $27		                LDA OPL2_CHANNEL
.193ce3		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193ce5		69 a0		adc #$a0	                ADC #$A0
.193ce7		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193ce9		a9 00		lda #$00	                LDA #$00
.193ceb		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193ced		c2 30		rep #$30	                REP #$30        ; set A&X long
.193cef		18		clc		                CLC
.193cf0		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193cf3		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193cf5		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193cf7		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193cfa		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193cfc		e2 20		sep #$20	                SEP #$20        ; set A short
.193cfe		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193d00		85 32		sta $32		                STA OPL2_PARAMETER0
.193d02		18		clc		                CLC
.193d03		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.193d05		69 10		adc #$10	                ADC #$10
.193d07		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193d09		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193d0b		29 03		and #$03	                AND #$03
.193d0d		85 33		sta $33		                STA OPL2_PARAMETER1
.193d0f		6b		rtl		                RTL
.193d10						OPL2_Set_Frequency
.193d10		6b		rtl		                RTL
.193d11						OPL2_Get_Frequency
.193d11		6b		rtl		                RTL
.193d12						OPL2_SET_BLOCK
.193d12		48		pha		                PHA             ; begin setdp macro
.193d13		08		php		                PHP
.193d14		c2 20		rep #$20	                REP #$20        ; set A long
.193d16		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193d19		5b		tcd		                TCD
.193d1a		28		plp		                PLP
.193d1b		68		pla		                PLA             ; end setdp macro
.193d1c		e2 20		sep #$20	                SEP #$20        ; set A short
.193d1e		18		clc		                CLC
.193d1f		a5 27		lda $27		                LDA OPL2_CHANNEL
.193d21		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193d23		69 b0		adc #$b0	                ADC #$B0
.193d25		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193d27		a9 00		lda #$00	                LDA #$00
.193d29		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193d2b		c2 30		rep #$30	                REP #$30        ; set A&X long
.193d2d		18		clc		                CLC
.193d2e		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193d31		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193d33		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193d35		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193d38		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193d3a		e2 20		sep #$20	                SEP #$20        ; set A short
.193d3c		a5 31		lda $31		                LDA OPL2_OCTAVE
.193d3e		29 07		and #$07	                AND #$07
.193d40		0a		asl a		                ASL
.193d41		0a		asl a		                ASL
.193d42		85 31		sta $31		                STA OPL2_OCTAVE
.193d44		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193d46		29 e3		and #$e3	                AND #$E3
.193d48		05 31		ora $31		                ORA OPL2_OCTAVE
.193d4a		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193d4c		60		rts		                RTS
.193d4d						OPL2_SET_KEYON
.193d4d		48		pha		                PHA             ; begin setdp macro
.193d4e		08		php		                PHP
.193d4f		c2 20		rep #$20	                REP #$20        ; set A long
.193d51		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193d54		5b		tcd		                TCD
.193d55		28		plp		                PLP
.193d56		68		pla		                PLA             ; end setdp macro
.193d57		e2 20		sep #$20	                SEP #$20        ; set A short
.193d59		18		clc		                CLC
.193d5a		a5 27		lda $27		                LDA OPL2_CHANNEL
.193d5c		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193d5e		69 b0		adc #$b0	                ADC #$B0
.193d60		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193d62		a9 00		lda #$00	                LDA #$00
.193d64		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193d66		c2 30		rep #$30	                REP #$30        ; set A&X long
.193d68		18		clc		                CLC
.193d69		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193d6c		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193d6e		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193d70		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193d73		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193d75		e2 20		sep #$20	                SEP #$20        ; set A short
.193d77		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193d79		29 01		and #$01	                AND #$01
.193d7b		f0 02		beq $193d7f	                BEQ SET_KEYON_OFF
.193d7d		a9 20		lda #$20	                LDA #$20
.193d7f						    SET_KEYON_OFF
.193d7f		85 32		sta $32		                STA OPL2_PARAMETER0
.193d81		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193d83		29 df		and #$df	                AND #$DF
.193d85		05 32		ora $32		                ORA OPL2_PARAMETER0
.193d87		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193d89		60		rts		                RTS
.193d8a						OPL2_SET_FEEDBACK
.193d8a		48		pha		                PHA             ; begin setdp macro
.193d8b		08		php		                PHP
.193d8c		c2 20		rep #$20	                REP #$20        ; set A long
.193d8e		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193d91		5b		tcd		                TCD
.193d92		28		plp		                PLP
.193d93		68		pla		                PLA             ; end setdp macro
.193d94		e2 20		sep #$20	                SEP #$20        ; set A short
.193d96		18		clc		              CLC
.193d97		a5 27		lda $27		              LDA OPL2_CHANNEL
.193d99		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193d9b		69 c0		adc #$c0	              ADC #$C0
.193d9d		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193d9f		a9 00		lda #$00	              LDA #$00
.193da1		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193da3		c2 30		rep #$30	                REP #$30        ; set A&X long
.193da5		18		clc		              CLC
.193da6		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193da9		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193dab		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193dad		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193db0		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193db2		e2 20		sep #$20	                SEP #$20        ; set A short
.193db4		a5 32		lda $32		              LDA OPL2_PARAMETER0
.193db6		29 07		and #$07	              AND #$07
.193db8		0a		asl a		              ASL
.193db9		85 32		sta $32		              STA OPL2_PARAMETER0
.193dbb		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193dbd		29 01		and #$01	              AND #$01
.193dbf		05 32		ora $32		              ORA OPL2_PARAMETER0
.193dc1		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193dc3		6b		rtl		                RTL
.193dc4						OPL2_SET_SYNTHMODE
.193dc4		48		pha		                PHA             ; begin setdp macro
.193dc5		08		php		                PHP
.193dc6		c2 20		rep #$20	                REP #$20        ; set A long
.193dc8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193dcb		5b		tcd		                TCD
.193dcc		28		plp		                PLP
.193dcd		68		pla		                PLA             ; end setdp macro
.193dce		08		php		              PHP ; Push the Carry
.193dcf		e2 20		sep #$20	                SEP #$20        ; set A short
.193dd1		18		clc		              CLC
.193dd2		a5 27		lda $27		              LDA OPL2_CHANNEL
.193dd4		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193dd6		69 c0		adc #$c0	              ADC #$C0
.193dd8		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193dda		a9 00		lda #$00	              LDA #$00
.193ddc		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193dde		c2 30		rep #$30	                REP #$30        ; set A&X long
.193de0		18		clc		              CLC
.193de1		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193de4		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193de6		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193de8		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193deb		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193ded		28		plp		              PLP ; Pull the Carry out
.193dee		e2 20		sep #$20	                SEP #$20        ; set A short
.193df0		b0 08		bcs $193dfa	              BCS OPL2_Set_Synthmode_Set;
.193df2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193df4		29 fe		and #$fe	              AND #$FE
.193df6		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193df8		80 06		bra $193e00	              BRA OPL2_Set_Synthmode_Exit
.193dfa						OPL2_Set_Synthmode_Set
.193dfa		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193dfc		09 01		ora #$01	              ORA #$01
.193dfe		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193e00						OPL2_Set_Synthmode_Exit
.193e00		6b		rtl		                RTL
.193e01						OPL2_SET_DEEPTREMOLO
.193e01		48		pha		                PHA             ; begin setdp macro
.193e02		08		php		                PHP
.193e03		c2 20		rep #$20	                REP #$20        ; set A long
.193e05		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193e08		5b		tcd		                TCD
.193e09		28		plp		                PLP
.193e0a		68		pla		                PLA             ; end setdp macro
.193e0b		c2 20		rep #$20	                REP #$20        ; set A long
.193e0d		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.193e10		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193e12		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193e15		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193e17		e2 20		sep #$20	                SEP #$20        ; set A short
.193e19		b0 08		bcs $193e23	              BCS OPL2_Set_DeepTremolo_Set;
.193e1b		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193e1d		29 7f		and #$7f	              AND #$7F
.193e1f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193e21		80 06		bra $193e29	              BRA OPL2_Set_DeepTremolo_Exit
.193e23						OPL2_Set_DeepTremolo_Set
.193e23		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193e25		09 80		ora #$80	              ORA #$80
.193e27		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193e29						OPL2_Set_DeepTremolo_Exit
.193e29		6b		rtl		                RTL
.193e2a						OPL2_SET_DEEPVIBRATO
.193e2a		48		pha		                PHA             ; begin setdp macro
.193e2b		08		php		                PHP
.193e2c		c2 20		rep #$20	                REP #$20        ; set A long
.193e2e		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193e31		5b		tcd		                TCD
.193e32		28		plp		                PLP
.193e33		68		pla		                PLA             ; end setdp macro
.193e34		c2 20		rep #$20	                REP #$20        ; set A long
.193e36		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.193e39		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193e3b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193e3e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193e40		e2 20		sep #$20	                SEP #$20        ; set A short
.193e42		b0 08		bcs $193e4c	              BCS OPL2_Set_DeepVibrato_Set;
.193e44		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193e46		29 bf		and #$bf	              AND #$BF
.193e48		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193e4a		80 06		bra $193e52	              BRA OPL2_Set_DeepVibrato_Exit
.193e4c						OPL2_Set_DeepVibrato_Set
.193e4c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193e4e		09 40		ora #$40	              ORA #$40
.193e50		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193e52						OPL2_Set_DeepVibrato_Exit
.193e52		6b		rtl		                RTL
.193e53						OPL2_SET_PERCUSSION
.193e53		48		pha		                PHA             ; begin setdp macro
.193e54		08		php		                PHP
.193e55		c2 20		rep #$20	                REP #$20        ; set A long
.193e57		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193e5a		5b		tcd		                TCD
.193e5b		28		plp		                PLP
.193e5c		68		pla		                PLA             ; end setdp macro
.193e5d		c2 20		rep #$20	                REP #$20        ; set A long
.193e5f		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.193e62		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193e64		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193e67		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193e69		e2 20		sep #$20	                SEP #$20        ; set A short
.193e6b		b0 08		bcs $193e75	                BCS OPL2_Set_Percussion_Set;
.193e6d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193e6f		29 df		and #$df	                AND #$DF
.193e71		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193e73		80 06		bra $193e7b	                BRA OPL2_Set_Percussion_Exit
.193e75						OPL2_Set_Percussion_Set
.193e75		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193e77		09 20		ora #$20	                ORA #$20
.193e79		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193e7b						OPL2_Set_Percussion_Exit
.193e7b		6b		rtl		                RTL
.193e7c						OPL2_SET_DRUMS
.193e7c		48		pha		                PHA             ; begin setdp macro
.193e7d		08		php		                PHP
.193e7e		c2 20		rep #$20	                REP #$20        ; set A long
.193e80		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193e83		5b		tcd		                TCD
.193e84		28		plp		                PLP
.193e85		68		pla		                PLA             ; end setdp macro
.193e86		c2 20		rep #$20	                REP #$20        ; set A long
.193e88		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.193e8b		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193e8d		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193e90		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193e92		e2 20		sep #$20	                SEP #$20        ; set A short
.193e94		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193e96		29 1f		and #$1f	                AND #$1F
.193e98		85 32		sta $32		                STA OPL2_PARAMETER0
.193e9a		49 ff		eor #$ff	                EOR #$FF
.193e9c		85 33		sta $33		                STA OPL2_PARAMETER1
.193e9e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193ea0		25 33		and $33		                AND OPL2_PARAMETER1
.193ea2		05 32		ora $32		                ORA OPL2_PARAMETER0
.193ea4		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193ea6		6b		rtl		                RTL
.193ea7						OPL2_SET_WAVEFORM
.193ea7		48		pha		                PHA             ; begin setdp macro
.193ea8		08		php		                PHP
.193ea9		c2 20		rep #$20	                REP #$20        ; set A long
.193eab		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193eae		5b		tcd		                TCD
.193eaf		28		plp		                PLP
.193eb0		68		pla		                PLA             ; end setdp macro
.193eb1		c2 20		rep #$20	                REP #$20        ; set A long
.193eb3		a9 e0 00	lda #$00e0	                LDA #$00E0;
.193eb6		85 28		sta $28		                STA OPL2_REG_REGION
.193eb8		20 cc 3e	jsr $193ecc	                JSR OPL2_GET_REG_OFFSET
.193ebb		e2 20		sep #$20	                SEP #$20        ; set A short
.193ebd		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193ebf		29 03		and #$03	                AND #$03
.193ec1		85 32		sta $32		                STA OPL2_PARAMETER0
.193ec3		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193ec5		29 fc		and #$fc	                AND #$FC
.193ec7		05 32		ora $32		                ORA OPL2_PARAMETER0
.193ec9		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193ecb		6b		rtl		                RTL
.193ecc						OPL2_GET_REG_OFFSET
.193ecc		e2 30		sep #$30	                SEP #$30        ; set A&X short
.193ece		a5 27		lda $27		                LDA OPL2_CHANNEL
.193ed0		29 0f		and #$0f	                AND #$0F
.193ed2		aa		tax		                TAX
.193ed3		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.193ed5		d0 06		bne $193edd	                BNE OPL2_Get_Register_Offset_l0
.193ed7		bf 14 15 19	lda $191514,x	                LDA @lregisterOffsets_operator0, X
.193edb		80 04		bra $193ee1	                BRA OPL2_Get_Register_Offset_exit
.193edd						OPL2_Get_Register_Offset_l0
.193edd		bf 1d 15 19	lda $19151d,x	                LDA @lregisterOffsets_operator1, X
.193ee1						OPL2_Get_Register_Offset_exit
.193ee1		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193ee3		a9 00		lda #$00	                LDA #$00
.193ee5		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193ee7		c2 30		rep #$30	                REP #$30        ; set A&X long
.193ee9		18		clc		                CLC
.193eea		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193eed		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193eef		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.193ef1		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193ef3		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193ef6		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193ef8		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/sdcard_controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.193ef9						ITRACE
.193ef9		08		php		                PHP
.193efa		c2 30		rep #$30	                REP #$30        ; set A&X long
.193efc		8b		phb		                PHB                 ; Print the text
.193efd		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.193eff		aa		tax		                TAX                 ; ... into X
.193f00		e2 20		sep #$20	                SEP #$20        ; set A short
.193f02		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.193f04		48		pha		                PHA
.193f05		ab		plb		                PLB                 ; ... into B
.193f06		22 68 07 19	jsl $190768	                JSL IPUTS           ; Print the string
.193f0a		c2 20		rep #$20	                REP #$20        ; set A long
.193f0c		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.193f0e		83 08		sta $08,s	                STA #8,S
.193f10		a3 02		lda $02,s	                LDA #2,S
.193f12		83 06		sta $06,s	                STA #6,S
.193f14		ab		plb		                PLB
.193f15		68		pla		                PLA                 ; Clean up the stack
.193f16		68		pla		                PLA
.193f17		28		plp		                PLP
.193f18		6b		rtl		                RTL
.193f19						ISETTIMEOUT
.193f19		8b		phb		                PHB
.193f1a		0b		phd		                PHD
.193f1b		08		php		                PHP
.193f1c		48		pha		                PHA             ; begin setdbr macro
.193f1d		08		php		                PHP
.193f1e		e2 20		sep #$20	                SEP #$20        ; set A short
.193f20		a9 00		lda #$00	                LDA #0
.193f22		48		pha		                PHA
.193f23		ab		plb		                PLB
.193f24		28		plp		                PLP
.193f25		68		pla		                PLA             ; end setdbr macro
.193f26		48		pha		                PHA             ; begin setdp macro
.193f27		08		php		                PHP
.193f28		c2 20		rep #$20	                REP #$20        ; set A long
.193f2a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193f2d		5b		tcd		                TCD
.193f2e		28		plp		                PLP
.193f2f		68		pla		                PLA             ; end setdp macro
.193f30		78		sei		                SEI                             ; We don't want to be interrupted
.193f31		e2 20		sep #$20	                SEP #$20        ; set A short
.193f33		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.193f35		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.193f37		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.193f39		85 0c		sta $032c	                STA @b BIOS_FLAGS
.193f3b		28		plp		done            PLP
.193f3c		2b		pld		                PLD
.193f3d		ab		plb		                PLB
.193f3e		6b		rtl		                RTL
.193f3f						ICMDBLOCK
.193f3f		0b		phd		                PHD
.193f40		08		php		                PHP
.193f41		48		pha		                PHA             ; begin setdp macro
.193f42		08		php		                PHP
.193f43		c2 20		rep #$20	                REP #$20        ; set A long
.193f45		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193f48		5b		tcd		                TCD
.193f49		28		plp		                PLP
.193f4a		68		pla		                PLA             ; end setdp macro
.193f4b		e2 20		sep #$20	                SEP #$20        ; set A short
.193f4d		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.193f4f		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.193f51		d0 06		bne $193f59	                BNE ret_success             ; No: just return
.193f53		22 39 67 19	jsl $196739	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.193f57		90 0c		bcc $193f65	                BCC pass_failure
.193f59						ret_success
.193f59		e2 20		sep #$20	                SEP #$20        ; set A short
.193f5b		64 00		stz $0320	                STZ BIOS_STATUS
.193f5d		28		plp		                PLP
.193f5e		2b		pld		                PLD
.193f5f		38		sec		                SEC
.193f60		6b		rtl		                RTL
.193f61						ret_failure
.193f61		e2 20		sep #$20	                SEP #$20        ; set A short
.193f63		85 00		sta $0320	                STA BIOS_STATUS
.193f65		28		plp		pass_failure    PLP
.193f66		2b		pld		                PLD
.193f67		18		clc		                CLC
.193f68		6b		rtl		                RTL
.193f69						IGETBLOCK
.193f69		5a		phy		                PHY
.193f6a		0b		phd		                PHD
.193f6b		8b		phb		                PHB
.193f6c		08		php		                PHP
.193f6d		48		pha		                PHA             ; begin setdbr macro
.193f6e		08		php		                PHP
.193f6f		e2 20		sep #$20	                SEP #$20        ; set A short
.193f71		a9 00		lda #$00	                LDA #0
.193f73		48		pha		                PHA
.193f74		ab		plb		                PLB
.193f75		28		plp		                PLP
.193f76		68		pla		                PLA             ; end setdbr macro
.193f77		48		pha		                PHA             ; begin setdp macro
.193f78		08		php		                PHP
.193f79		c2 20		rep #$20	                REP #$20        ; set A long
.193f7b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193f7e		5b		tcd		                TCD
.193f7f		28		plp		                PLP
.193f80		68		pla		                PLA             ; end setdp macro
.193f81		e2 20		sep #$20	                SEP #$20        ; set A short
.193f83		a0 00 00	ldy #$0000	                LDY #0
.193f86		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.193f88		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.193f8a		c8		iny		                INY
.193f8b		c0 00 02	cpy #$0200	                CPY #512
.193f8e		d0 f8		bne $193f88	                BNE clr_loop
.193f90		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.193f92		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.193f94		f0 14		beq $193faa	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.193f96		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.193f98		f0 18		beq $193fb2	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.193f9a		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193f9c		f0 1c		beq $193fba	                BEQ hd_getblock
.193f9e		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.193fa0						ret_failure
.193fa0		e2 20		sep #$20	                SEP #$20        ; set A short
.193fa2		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.193fa4		28		plp		                PLP
.193fa5		ab		plb		                PLB
.193fa6		2b		pld		                PLD
.193fa7		7a		ply		                PLY
.193fa8		38		sec		                SEC                                 ; Return failure
.193fa9		6b		rtl		                RTL
.193faa		22 45 5c 19	jsl $195c45	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.193fae		b0 12		bcs $193fc2	                BCS ret_success
.193fb0		80 ee		bra $193fa0	                BRA ret_failure
.193fb2		22 3e 65 19	jsl $19653e	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.193fb6		b0 0a		bcs $193fc2	                BCS ret_success
.193fb8		80 e6		bra $193fa0	                BRA ret_failure
.193fba		22 52 6b 19	jsl $196b52	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.193fbe		b0 02		bcs $193fc2	                BCS ret_success
.193fc0		80 de		bra $193fa0	                BRA ret_failure
.193fc2						ret_success
.193fc2		e2 20		sep #$20	                SEP #$20        ; set A short
.193fc4		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.193fc6		28		plp		                PLP
.193fc7		ab		plb		                PLB
.193fc8		2b		pld		                PLD
.193fc9		7a		ply		                PLY
.193fca		38		sec		                SEC                                 ; Return success
.193fcb		6b		rtl		                RTL
.193fcc						IPUTBLOCK
.193fcc		0b		phd		                PHD
.193fcd		8b		phb		                PHB
.193fce		08		php		                PHP
.193fcf		48		pha		                PHA             ; begin setdbr macro
.193fd0		08		php		                PHP
.193fd1		e2 20		sep #$20	                SEP #$20        ; set A short
.193fd3		a9 00		lda #$00	                LDA #0
.193fd5		48		pha		                PHA
.193fd6		ab		plb		                PLB
.193fd7		28		plp		                PLP
.193fd8		68		pla		                PLA             ; end setdbr macro
.193fd9		48		pha		                PHA             ; begin setdp macro
.193fda		08		php		                PHP
.193fdb		c2 20		rep #$20	                REP #$20        ; set A long
.193fdd		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193fe0		5b		tcd		                TCD
.193fe1		28		plp		                PLP
.193fe2		68		pla		                PLA             ; end setdp macro
.193fe3		e2 20		sep #$20	                SEP #$20        ; set A short
.193fe5		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.193fe7		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.193fe9		f0 13		beq $193ffe	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.193feb		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.193fed		f0 17		beq $194006	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.193fef		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193ff1		f0 1b		beq $19400e	                BEQ hd_putblock
.193ff3		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.193ff5						ret_failure
.193ff5		e2 20		sep #$20	                SEP #$20        ; set A short
.193ff7		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.193ff9		28		plp		                PLP
.193ffa		ab		plb		                PLB
.193ffb		2b		pld		                PLD
.193ffc		18		clc		                CLC                                 ; Return failure
.193ffd		6b		rtl		                RTL
.193ffe		22 ec 5c 19	jsl $195cec	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.194002		90 f1		bcc $193ff5	                BCC ret_failure
.194004		80 10		bra $194016	                BRA ret_success
.194006		22 a3 65 19	jsl $1965a3	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.19400a		90 e9		bcc $193ff5	                BCC ret_failure
.19400c		80 08		bra $194016	                BRA ret_success
.19400e		22 dd 6b 19	jsl $196bdd	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.194012		90 e1		bcc $193ff5	                BCC ret_failure
.194014		80 00		bra $194016	                BRA ret_success
.194016						ret_success
.194016		e2 20		sep #$20	                SEP #$20        ; set A short
.194018		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.19401a		28		plp		                PLP
.19401b		ab		plb		                PLB
.19401c		2b		pld		                PLD
.19401d		38		sec		                SEC                                 ; Return success
.19401e		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.19401f						DOS_DIROPEN
.19401f		da		phx		                PHX
.194020		5a		phy		                PHY
.194021		0b		phd		                PHD
.194022		8b		phb		                PHB
.194023		08		php		                PHP
.194024		48		pha		                PHA             ; begin setdbr macro
.194025		08		php		                PHP
.194026		e2 20		sep #$20	                SEP #$20        ; set A short
.194028		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19402a		48		pha		                PHA
.19402b		ab		plb		                PLB
.19402c		28		plp		                PLP
.19402d		68		pla		                PLA             ; end setdbr macro
.19402e		48		pha		                PHA             ; begin setdp macro
.19402f		08		php		                PHP
.194030		c2 20		rep #$20	                REP #$20        ; set A long
.194032		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194035		5b		tcd		                TCD
.194036		28		plp		                PLP
.194037		68		pla		                PLA             ; end setdp macro
.194038		ad 20 a0	lda $18a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.19403b		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.19403e		ad 22 a0	lda $18a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.194041		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.194044		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.194047		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194049		85 18		sta $0338	                STA DOS_DIR_PTR
.19404b		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.19404e		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194050		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.194052		e2 20		sep #$20	                SEP #$20        ; set A short
.194054		ad 01 a0	lda $18a001	                LDA FILE_SYSTEM             ; Check the file system
.194057		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.194059		d0 24		bne $19407f	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.19405b						fetch_fat12
.19405b		e2 20		sep #$20	                SEP #$20        ; set A short
.19405d		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.19405f		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.194062		c2 20		rep #$20	                REP #$20        ; set A long
.194064		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.194066		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194068		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.19406a		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19406c		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.19406f		85 02		sta $0322	                STA BIOS_LBA
.194071		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.194074		85 04		sta $0324	                STA BIOS_LBA+2
.194076		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.19407a		b0 1f		bcs $19409b	                BCS do_success              ; If sucessful, set the directory cursor
.19407c		82 19 17	brl $195798	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.19407f						fetch_fat32
.19407f		e2 20		sep #$20	                SEP #$20        ; set A short
.194081		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.194083		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.194086		c2 20		rep #$20	                REP #$20        ; set A long
.194088		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.19408b		85 10		sta $0330	                STA DOS_CLUS_ID
.19408d		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.194090		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194092		22 02 46 19	jsl $194602	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.194096		b0 03		bcs $19409b	                BCS do_success              ; If successful: set the directory cursor
.194098		82 fd 16	brl $195798	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.19409b		82 01 17	brl $19579f	do_success      BRL IF_SUCCESS
.19409e						DOS_DIRFIRST
.19409e		0b		phd		                PHD
.19409f		08		php		                PHP
.1940a0		48		pha		                PHA             ; begin setdp macro
.1940a1		08		php		                PHP
.1940a2		c2 20		rep #$20	                REP #$20        ; set A long
.1940a4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1940a7		5b		tcd		                TCD
.1940a8		28		plp		                PLP
.1940a9		68		pla		                PLA             ; end setdp macro
.1940aa		c2 20		rep #$20	                REP #$20        ; set A long
.1940ac		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.1940af		85 18		sta $0338	                STA DOS_DIR_PTR
.1940b1		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.1940b4		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.1940b6		28		plp		                PLP
.1940b7		2b		pld		                PLD
.1940b8		6b		rtl		                RTL
.1940b9						DOS_DIRNEXT
.1940b9		da		phx		                PHX
.1940ba		5a		phy		                PHY
.1940bb		0b		phd		                PHD
.1940bc		8b		phb		                PHB
.1940bd		08		php		                PHP
.1940be		48		pha		                PHA             ; begin setdbr macro
.1940bf		08		php		                PHP
.1940c0		e2 20		sep #$20	                SEP #$20        ; set A short
.1940c2		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1940c4		48		pha		                PHA
.1940c5		ab		plb		                PLB
.1940c6		28		plp		                PLP
.1940c7		68		pla		                PLA             ; end setdbr macro
.1940c8		48		pha		                PHA             ; begin setdp macro
.1940c9		08		php		                PHP
.1940ca		c2 20		rep #$20	                REP #$20        ; set A long
.1940cc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1940cf		5b		tcd		                TCD
.1940d0		28		plp		                PLP
.1940d1		68		pla		                PLA             ; end setdp macro
.1940d2		c2 20		rep #$20	                REP #$20        ; set A long
.1940d4		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.1940d5		a5 18		lda $0338	                LDA DOS_DIR_PTR
.1940d7		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.1940da		85 18		sta $0338	                STA DOS_DIR_PTR
.1940dc		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.1940de		69 00 00	adc #$0000	                ADC #0
.1940e1		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.1940e3		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.1940e4		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.1940e7		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.1940e9		85 28		sta $0348	                STA DOS_TEMP
.1940eb		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER_END
.1940ee		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.1940f0		85 2a		sta $034a	                STA DOS_TEMP+2
.1940f2		30 0c		bmi $194100	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.1940f4		f0 03		beq $1940f9	                BEQ check_lower
.1940f6		82 a6 16	brl $19579f	                BRL IF_SUCCESS
.1940f9		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.1940fb		f0 03		beq $194100	                BEQ get_next_block
.1940fd		82 9f 16	brl $19579f	                BRL IF_SUCCESS
.194100						get_next_block
.194100		e2 20		sep #$20	                SEP #$20        ; set A short
.194102		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.194105		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.194107		f0 38		beq $194141	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.194109						next_sector
.194109		c2 20		rep #$20	                REP #$20        ; set A long
.19410b		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.19410e		1a		inc a		                INC A
.19410f		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.194112		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.194115		d0 07		bne $19411e	                BNE read_sector
.194117		e2 20		sep #$20	                SEP #$20        ; set A short
.194119		a9 00		lda #$00	                LDA #0
.19411b		82 76 16	brl $195794	                BRL IF_FAILURE
.19411e						read_sector
.19411e		c2 20		rep #$20	                REP #$20        ; set A long
.194120		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.194123		85 02		sta $0322	                STA BIOS_LBA
.194125		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.194128		85 04		sta $0324	                STA BIOS_LBA+2
.19412a		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.19412d		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19412f		85 18		sta $0338	                STA DOS_DIR_PTR
.194131		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.194134		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194136		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.194138		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.19413c		b0 39		bcs $194177	                BCS do_success              ; If successful: set the directory cursor
.19413e		82 57 16	brl $195798	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.194141						next_cluster
.194141		c2 20		rep #$20	                REP #$20        ; set A long
.194143		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.194146		85 10		sta $0330	                STA DOS_CLUS_ID
.194148		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.19414b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19414d		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.194150		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194152		85 18		sta $0338	                STA DOS_DIR_PTR
.194154		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.194157		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194159		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.19415b		22 16 4a 19	jsl $194a16	                JSL NEXTCLUSTER             ; Try to find the next cluster
.19415f		b0 03		bcs $194164	                BCS set_next
.194161		82 34 16	brl $195798	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.194164		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.194166		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.194169		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.19416b		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.19416e		22 02 46 19	jsl $194602	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.194172		b0 03		bcs $194177	                BCS do_success              ; If successful: set the directory cursor
.194174		82 21 16	brl $195798	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.194177		82 25 16	brl $19579f	do_success      BRL IF_SUCCESS
.19417a						DOS_DIRFINDFREE
.19417a		da		phx		                PHX
.19417b		5a		phy		                PHY
.19417c		0b		phd		                PHD
.19417d		8b		phb		                PHB
.19417e		08		php		                PHP
.19417f		48		pha		                PHA             ; begin setdbr macro
.194180		08		php		                PHP
.194181		e2 20		sep #$20	                SEP #$20        ; set A short
.194183		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194185		48		pha		                PHA
.194186		ab		plb		                PLB
.194187		28		plp		                PLP
.194188		68		pla		                PLA             ; end setdbr macro
.194189		48		pha		                PHA             ; begin setdp macro
.19418a		08		php		                PHP
.19418b		c2 20		rep #$20	                REP #$20        ; set A long
.19418d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194190		5b		tcd		                TCD
.194191		28		plp		                PLP
.194192		68		pla		                PLA             ; end setdp macro
.194193		22 21 54 19	jsl $195421	                JSL IF_DIROPEN
.194197		b0 06		bcs $19419f	                BCS start_walk
.194199		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.19419c		82 28 00	brl $1941c7	                BRL ret_failure
.19419f		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.1941a2						chk_entry
.1941a2		e2 20		sep #$20	                SEP #$20        ; set A short
.1941a4		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.1941a6		f0 1c		beq $1941c4	                BEQ ret_success             ; If 0: we have a blank... return it
.1941a8		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.1941aa		f0 18		beq $1941c4	                BEQ ret_success             ; Yes: return it
.1941ac		22 5b 54 19	jsl $19545b	                JSL IF_DIRNEXT              ; Go to the next directory entry
.1941b0		b0 ed		bcs $19419f	                BCS start_walk              ; If we got one, start walking it
.1941b2		22 ca 41 19	jsl $1941ca	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.1941b6		90 0f		bcc $1941c7	                BCC ret_failure             ; If that didn't work, return the failure
.1941b8		c2 20		rep #$20	                REP #$20        ; set A long
.1941ba		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.1941bd		85 18		sta $0338	                STA DOS_DIR_PTR
.1941bf		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.1941c2		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.1941c4		82 d8 15	brl $19579f	ret_success     BRL IF_SUCCESS
.1941c7		82 ca 15	brl $195794	ret_failure     BRL IF_FAILURE
.1941ca						DOS_DIRAPPEND
.1941ca		da		phx		                PHX
.1941cb		8b		phb		                PHB
.1941cc		0b		phd		                PHD
.1941cd		08		php		                PHP
.1941ce		48		pha		                PHA             ; begin setdbr macro
.1941cf		08		php		                PHP
.1941d0		e2 20		sep #$20	                SEP #$20        ; set A short
.1941d2		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1941d4		48		pha		                PHA
.1941d5		ab		plb		                PLB
.1941d6		28		plp		                PLP
.1941d7		68		pla		                PLA             ; end setdbr macro
.1941d8		48		pha		                PHA             ; begin setdp macro
.1941d9		08		php		                PHP
.1941da		c2 20		rep #$20	                REP #$20        ; set A long
.1941dc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1941df		5b		tcd		                TCD
.1941e0		28		plp		                PLP
.1941e1		68		pla		                PLA             ; end setdp macro
.1941e2		e2 20		sep #$20	                SEP #$20        ; set A short
.1941e4		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE
.1941e7		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.1941e9		f0 09		beq $1941f4	                BEQ clr_sector                  ; Yes: clear out the directory data
.1941eb						ret_failure
.1941eb		e2 20		sep #$20	                SEP #$20        ; set A short
.1941ed		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.1941ef		85 0e		sta $032e	                STA DOS_STATUS
.1941f1		82 3e 00	brl $194232	                BRL pass_failure
.1941f4						clr_sector
.1941f4		c2 20		rep #$20	                REP #$20        ; set A long
.1941f6		a9 00 00	lda #$0000	                LDA #0
.1941f9		a2 00 00	ldx #$0000	                LDX #0
.1941fc		9d 00 a1	sta $18a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.1941ff		e8		inx		                INX
.194200		e8		inx		                INX
.194201		e0 00 02	cpx #$0200	                CPX #512
.194204		d0 f6		bne $1941fc	                BNE clr_loop
.194206		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.194209		85 1c		sta $033c	                STA DOS_BUFF_PTR
.19420b		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.19420e		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194210		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.194213		85 10		sta $0330	                STA DOS_CLUS_ID
.194215		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.194218		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19421a		22 37 4e 19	jsl $194e37	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.19421e		90 12		bcc $194232	                BCC pass_failure                ; If there was an error, pass it up the chain
.194220		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.194223		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.194226		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.194229		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.19422c		28		plp		ret_success     PLP
.19422d		2b		pld		                PLD
.19422e		ab		plb		                PLB
.19422f		fa		plx		                PLX
.194230		38		sec		                SEC
.194231		6b		rtl		                RTL
.194232		28		plp		pass_failure    PLP
.194233		2b		pld		                PLD
.194234		ab		plb		                PLB
.194235		fa		plx		                PLX
.194236		18		clc		                CLC
.194237		6b		rtl		                RTL
.194238						DOS_DIRWRITE
.194238		da		phx		                PHX
.194239		5a		phy		                PHY
.19423a		0b		phd		                PHD
.19423b		8b		phb		                PHB
.19423c		08		php		                PHP
.19423d		48		pha		                PHA             ; begin setdbr macro
.19423e		08		php		                PHP
.19423f		e2 20		sep #$20	                SEP #$20        ; set A short
.194241		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194243		48		pha		                PHA
.194244		ab		plb		                PLB
.194245		28		plp		                PLP
.194246		68		pla		                PLA             ; end setdbr macro
.194247		48		pha		                PHA             ; begin setdp macro
.194248		08		php		                PHP
.194249		c2 20		rep #$20	                REP #$20        ; set A long
.19424b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19424e		5b		tcd		                TCD
.19424f		28		plp		                PLP
.194250		68		pla		                PLA             ; end setdp macro
.194251		e2 20		sep #$20	                SEP #$20        ; set A short
.194253		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.194256		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.194258		f0 1f		beq $194279	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.19425a						write_sector
.19425a		c2 20		rep #$20	                REP #$20        ; set A long
.19425c		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.19425f		85 02		sta $0322	                STA BIOS_LBA
.194261		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.194264		85 04		sta $0324	                STA BIOS_LBA+2
.194266		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.194269		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19426b		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.19426e		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194270		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.194274		b0 1f		bcs $194295	                BCS ret_success
.194276		82 1b 15	brl $195794	ret_failure     BRL IF_FAILURE
.194279						write_cluster
.194279		c2 20		rep #$20	                REP #$20        ; set A long
.19427b		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.19427e		85 10		sta $0330	                STA DOS_CLUS_ID
.194280		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.194283		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194285		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.194288		85 1c		sta $033c	                STA DOS_BUFF_PTR
.19428a		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.19428d		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.19428f		22 3f 46 19	jsl $19463f	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.194293		90 e1		bcc $194276	                BCC ret_failure
.194295		82 07 15	brl $19579f	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\Includes/sdos_fat_vars_user_inc.asm

=$18a000					    DOS_HIGH_VARIABLES      = $18A000
=$18a000					    DEVICE                  = $18A000       ; 1 byte - The number of the block device
=$18a001					    FILE_SYSTEM             = $18A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$18a002					    PARTITION               = $18A002       ; 1 byte - The number of the partitions on the device
=$18a003					    SECTORS_PER_CLUSTER     = $18A003       ; 1 byte - The number of sectors in a cluster
=$18a004					    FIRSTSECTOR             = $18A004       ; 4 bytes - The LBA of the first sector on the volume
=$18a008					    SECTORCOUNT             = $18A008       ; 4 bytes - The number of sectors in the volume
=$18a00c					    NUM_RSRV_SEC            = $18A00C       ; 2 bytes - The number of hidden or reserved sectors
=$18a00e					    CLUSTER_SIZE            = $18A00E       ; 2 bytes - The size of a cluster in bytes
=$18a010					    SEC_PER_FAT             = $18A010       ; 4 bytes - The number of sectors per FAT
=$18a014					    FAT_BEGIN_LBA           = $18A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$18a018					    FAT2_BEGIN_LBA          = $18A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$18a01c					    CLUSTER_BEGIN_LBA       = $18A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$18a020					    ROOT_DIR_FIRST_CLUSTER  = $18A020       ; 4 bytes - The number of the first cluster in the root directory
=$18a024					    ROOT_DIR_MAX_ENTRY      = $18A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$18a026					    VOLUME_ID               = $18A026       ; 4 bytes - The ID of the volume
=$18a02a					    DOS_CURR_CLUS           = $18A02A       ; 4 bytes - The current cluster (for delete)
=$18a02e					    DOS_NEXT_CLUS           = $18A02E       ; 4 bytes - The next cluster in a file (for delete)
=$18a032					    DOS_DIR_BLOCK_ID        = $18A032       ; 4 bytes - The ID of the current directory block
=$18a036					    DOS_NEW_CLUSTER         = $18A036       ; 4 bytes - Space to store a newly written cluster ID
=$18a03a					    DOS_SHORT_NAME          = $18A03A       ; 11 bytes - The short name for a desired file
=$18a045					    DOS_DIR_TYPE            = $18A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$18a046					    DOS_CURR_DIR_ID         = $18A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$18a04a					    DOS_DEV_NAMES           = $18A04A       ; 4 byte - pointer to the linked list of device names
=$18a04e					    FDC_MOTOR_TIMER         = $18A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$18a050					    DOS_MOUNT_DEV           = $18A050       ; 1 byte - the device code of the currently mounted device
=$18a100					    DOS_DIR_CLUSTER         = $18A100       ; 512 bytes - A buffer for directory entries
=$18a300					    DOS_DIR_CLUSTER_END     = $18A300       ; The byte just past the end of the directory cluster buffer
=$18a300					    DOS_SECTOR              = $18A300       ; 512 bytes - A buffer for block device read/write
=$18a500					    DOS_SECTOR_END          = $18A500       ; The byte just past the end of the cluster buffer
=$18a500					    DOS_FAT_SECTORS         = $18A500       ; 1024 bytes - two sectors worth of the FAT
=$18a900					    DOS_FAT_SECTORS_END     = $18A900       ; The byte just past the end of the FAT buffers
=$18a900					    DOS_BOOT_SECTOR         = $18A900       ; A sector for holding the boot sector
=$18ab00					    DOS_BOOT_SECTOR_END     = $18AB00
=$18ab00					    DOS_SPARE_SECTOR        = $18AB00       ; A spare 512 byte buffer for loading sectors
=$18ad00					    DOS_SPARE_SECTOR_END    = $18AD00
=$18ad00					    DOS_SPARE_FD            = $18AD00       ; A spare file descriptor buffer
=1617184					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=1617184					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=1617440					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$18b000					    DOS_FILE_BUFFS          = $18B000
=1622016					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.194298						DOS_INIT
.194298		8b		phb		                PHB
.194299		0b		phd		                PHD
.19429a		08		php		                PHP
.19429b		48		pha		                PHA             ; begin setdbr macro
.19429c		08		php		                PHP
.19429d		e2 20		sep #$20	                SEP #$20        ; set A short
.19429f		a9 00		lda #$00	                LDA #0
.1942a1		48		pha		                PHA
.1942a2		ab		plb		                PLB
.1942a3		28		plp		                PLP
.1942a4		68		pla		                PLA             ; end setdbr macro
.1942a5		48		pha		                PHA             ; begin setdp macro
.1942a6		08		php		                PHP
.1942a7		c2 20		rep #$20	                REP #$20        ; set A long
.1942a9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1942ac		5b		tcd		                TCD
.1942ad		28		plp		                PLP
.1942ae		68		pla		                PLA             ; end setdp macro
.1942af		e2 20		sep #$20	                SEP #$20        ; set A short
.1942b1		c2 10		rep #$10	                REP #$10        ; set X long
.1942b3		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.1942b6		a9 00		lda #$00	                LDA #0
.1942b8		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.1942bb		e8		inx		                INX
.1942bc		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.1942bf		d0 f7		bne $1942b8	                BNE b0_clr_loop
.1942c1		48		pha		                PHA             ; begin setdbr macro
.1942c2		08		php		                PHP
.1942c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1942c5		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1942c7		48		pha		                PHA
.1942c8		ab		plb		                PLB
.1942c9		28		plp		                PLP
.1942ca		68		pla		                PLA             ; end setdbr macro
.1942cb		48		pha		                PHA             ; begin setdp macro
.1942cc		08		php		                PHP
.1942cd		c2 20		rep #$20	                REP #$20        ; set A long
.1942cf		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1942d2		5b		tcd		                TCD
.1942d3		28		plp		                PLP
.1942d4		68		pla		                PLA             ; end setdp macro
.1942d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1942d7		c2 10		rep #$10	                REP #$10        ; set X long
.1942d9		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.1942dc		a9 00		lda #$00	                LDA #0
.1942de		9d 00 a0	sta $18a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.1942e1		e8		inx		                INX
.1942e2		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.1942e5		d0 f7		bne $1942de	                BNE b38_clr_loop
.1942e7		c2 20		rep #$20	                REP #$20        ; set A long
.1942e9		a9 97 46	lda #$4697	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.1942ec		8f 4a a0 18	sta $18a04a	                STA @l DOS_DEV_NAMES
.1942f0		a9 19 00	lda #$0019	                LDA #`DOS_HD_DESC
.1942f3		8f 4c a0 18	sta $18a04c	                STA @l DOS_DEV_NAMES+2
.1942f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1942f9		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.1942fb		85 01		sta $0321	                STA BIOS_DEV
.1942fd		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.1942ff		8f 50 a0 18	sta $18a050	                STA @l DOS_MOUNT_DEV
.194303		a9 00		lda #$00	                LDA #0
.194305		a2 00 00	ldx #$0000	                LDX #0
.194308		9d 20 ad	sta $18ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.19430b		e8		inx		                INX
.19430c		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.19430f		d0 f7		bne $194308	                BNE fd_zero_loop
.194311		a9 00		lda #$00	                LDA #0
.194313		a2 00 00	ldx #$0000	                LDX #0
.194316		9d 00 b0	sta $18b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.194319		e8		inx		                INX
.19431a		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.19431d		d0 f7		bne $194316	                BNE sect_zero_loop
.19431f		c2 20		rep #$20	                REP #$20        ; set A long
.194321		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.194324		85 20		sta $0340	                STA @b DOS_FD_PTR
.194326		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.194329		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.19432b		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.19432e		85 28		sta $0348	                STA @b DOS_TEMP
.194330		a9 18 00	lda #$0018	                LDA #`DOS_FILE_BUFFS
.194333		85 2a		sta $034a	                STA @b DOS_TEMP+2
.194335		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.194338		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.19433b		a5 28		lda $0348	                LDA @b DOS_TEMP
.19433d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19433f		c8		iny		                INY
.194340		c8		iny		                INY
.194341		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.194343		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194345		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.194346		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.194348		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.19434b		85 20		sta $0340	                STA @b DOS_FD_PTR
.19434d		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.19434f		69 00 00	adc #$0000	                ADC #0
.194352		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.194354		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.194355		a5 28		lda $0348	                LDA @b DOS_TEMP
.194357		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.19435a		85 28		sta $0348	                STA @b DOS_TEMP
.19435c		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.19435e		69 00 00	adc #$0000	                ADC #0
.194361		85 2a		sta $034a	                STA @b DOS_TEMP+2
.194363		ca		dex		                DEX                     ; Count down the descriptors...
.194364		d0 d2		bne $194338	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.194366		28		plp		                PLP
.194367		2b		pld		                PLD
.194368		ab		plb		                PLB
.194369		6b		rtl		                RTL
.19436a						DOS_MOUNT
.19436a		8b		phb		                PHB
.19436b		0b		phd		                PHD
.19436c		08		php		                PHP
.19436d		48		pha		                PHA             ; begin setdbr macro
.19436e		08		php		                PHP
.19436f		e2 20		sep #$20	                SEP #$20        ; set A short
.194371		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194373		48		pha		                PHA
.194374		ab		plb		                PLB
.194375		28		plp		                PLP
.194376		68		pla		                PLA             ; end setdbr macro
.194377		48		pha		                PHA             ; begin setdp macro
.194378		08		php		                PHP
.194379		c2 20		rep #$20	                REP #$20        ; set A long
.19437b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19437e		5b		tcd		                TCD
.19437f		28		plp		                PLP
.194380		68		pla		                PLA             ; end setdp macro
.194381		e2 20		sep #$20	                SEP #$20        ; set A short
.194383		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.194385		8f 50 a0 18	sta $18a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.194389		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.19438b		f0 1f		beq $1943ac	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.19438d		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.19438f		f0 26		beq $1943b7	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.194391		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.194393		f0 0b		beq $1943a0	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.194395		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.194397		85 0e		sta $032e	                STA DOS_STATUS
.194399		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.19439b		85 00		sta $0320	                STA BIOS_STATUS
.19439d		82 7c 01	brl $19451c	                BRL ret_failure
.1943a0		22 0f 66 19	jsl $19660f	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.1943a4		b0 03		bcs $1943a9	                BCS fdc_success
.1943a6		82 73 01	brl $19451c	                BRL ret_failure
.1943a9		82 67 01	brl $194513	fdc_success     BRL ret_success
.1943ac		22 f7 5b 19	jsl $195bf7	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.1943b0		b0 10		bcs $1943c2	                BCS get_mbr             ; Continue if success
.1943b2		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.1943b4		82 65 01	brl $19451c	                BRL ret_failure
.1943b7		22 57 6a 19	jsl $196a57	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.1943bb		b0 05		bcs $1943c2	                BCS get_mbr             ; Continue if success
.1943bd		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.1943bf		82 5a 01	brl $19451c	                BRL ret_failure
.1943c2						get_mbr
.1943c2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1943c4		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.1943c6		64 04		stz $0324	                STZ BIOS_LBA+2
.1943c8		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.1943cb		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1943cd		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.1943d0		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1943d2		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.1943d6		b0 07		bcs $1943df	                BCS chk_signature       ; If success, check the signature bytes
.1943d8		e2 20		sep #$20	                SEP #$20        ; set A short
.1943da		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.1943dc		82 3d 01	brl $19451c	                BRL ret_failure
.1943df						chk_signature
.1943df		e2 20		sep #$20	                SEP #$20        ; set A short
.1943e1		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.1943e4		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.1943e6		d0 07		bne $1943ef	                BNE not_mbr             ; No: signal we could find the MBR
.1943e8		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.1943eb		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.1943ed		f0 05		beq $1943f4	                BEQ chk_part_type       ; Yes: we have an MBR
.1943ef		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.1943f1		82 28 01	brl $19451c	                BRL ret_failure
.1943f4		ad c2 a4	lda $18a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.1943f7		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.1943f9		f0 05		beq $194400	                BEQ get_LBA             ; Is FAT32 with LBA?
.1943fb		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.1943fd		82 1c 01	brl $19451c	                BRL ret_failure
.194400		8d 01 a0	sta $18a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.194403		c2 20		rep #$20	                REP #$20        ; set A long
.194405		ad c6 a4	lda $18a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.194408		8d 04 a0	sta $18a004	                STA FIRSTSECTOR
.19440b		ad c8 a4	lda $18a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.19440e		8d 06 a0	sta $18a006	                STA FIRSTSECTOR+2
.194411		ad cb a4	lda $18a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.194414		8d 08 a0	sta $18a008	                STA SECTORCOUNT
.194417		ad cd a4	lda $18a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.19441a		8d 0a a0	sta $18a00a	                STA SECTORCOUNT+2
.19441d		e2 20		sep #$20	                SEP #$20        ; set A short
.19441f		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.194421		8d 00 a0	sta $18a000	                STA DEVICE
.194424		a9 00		lda #$00	                LDA #0
.194426		8d 02 a0	sta $18a002	                STA PARTITION           ; For the moment, we only support the first partition
.194429		c2 20		rep #$20	                REP #$20        ; set A long
.19442b		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.19442e		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194430		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.194433		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194435		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.194438		85 02		sta $0322	                STA BIOS_LBA
.19443a		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.19443d		85 04		sta $0324	                STA BIOS_LBA+2
.19443f		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.194443		b0 1c		bcs $194461	                BCS get_first_sec       ; Got it? Start parsing it
.194445		e2 20		sep #$20	                SEP #$20        ; set A short
.194447		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.194449		82 d0 00	brl $19451c	                BRL ret_failure
.19444c						chk_bpb_sig
.19444c		e2 20		sep #$20	                SEP #$20        ; set A short
.19444e		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.194451		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.194453		d0 07		bne $19445c	                BNE not_bpb             ; No: signal we could find the volume ID
.194455		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.194458		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.19445a		f0 05		beq $194461	                BEQ get_first_sec       ; Yes: we have an volume ID
.19445c		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.19445e		82 bb 00	brl $19451c	                BRL ret_failure
.194461						get_first_sec
.194461		c2 20		rep #$20	                REP #$20        ; set A long
.194463		ad 2c a3	lda $18a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.194466		8d 20 a0	sta $18a020	                STA ROOT_DIR_FIRST_CLUSTER
.194469		ad 2e a3	lda $18a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.19446c		8d 22 a0	sta $18a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.19446f		ad 0e a3	lda $18a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.194472		8d 0c a0	sta $18a00c	                STA NUM_RSRV_SEC
.194475		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.194476		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.194479		6d 0c a0	adc $18a00c	                ADC NUM_RSRV_SEC
.19447c		8d 14 a0	sta $18a014	                STA FAT_BEGIN_LBA
.19447f		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.194482		69 00 00	adc #$0000	                ADC #0
.194485		8d 16 a0	sta $18a016	                STA FAT_BEGIN_LBA+2
.194488		e2 20		sep #$20	                SEP #$20        ; set A short
.19448a		a2 00 00	ldx #$0000	                LDX #0
.19448d		bf 24 a3 18	lda $18a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.194491		9f 10 a0 18	sta $18a010,x	                STA @l SEC_PER_FAT,X
.194495		e8		inx		                INX
.194496		e0 04 00	cpx #$0004	                CPX #4
.194499		d0 f2		bne $19448d	                BNE cpy_secperfat
.19449b		ad 10 a0	lda $18a010	                LDA SEC_PER_FAT
.19449e		0a		asl a		                ASL A
.19449f		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.1944a2		ad 11 a0	lda $18a011	                LDA SEC_PER_FAT+1
.1944a5		2a		rol a		                ROL A
.1944a6		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.1944a9		ad 12 a0	lda $18a012	                LDA SEC_PER_FAT+2
.1944ac		2a		rol a		                ROL A
.1944ad		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.1944b0		ad 13 a0	lda $18a013	                LDA SEC_PER_FAT+3
.1944b3		2a		rol a		                ROL A
.1944b4		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.1944b7		18		clc		                CLC
.1944b8		ad 1c a0	lda $18a01c	                LDA CLUSTER_BEGIN_LBA
.1944bb		6d 14 a0	adc $18a014	                ADC FAT_BEGIN_LBA
.1944be		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.1944c1		ad 1d a0	lda $18a01d	                LDA CLUSTER_BEGIN_LBA+1
.1944c4		6d 15 a0	adc $18a015	                ADC FAT_BEGIN_LBA+1
.1944c7		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.1944ca		ad 1e a0	lda $18a01e	                LDA CLUSTER_BEGIN_LBA+2
.1944cd		6d 16 a0	adc $18a016	                ADC FAT_BEGIN_LBA+2
.1944d0		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.1944d3		ad 1f a0	lda $18a01f	                LDA CLUSTER_BEGIN_LBA+3
.1944d6		6d 17 a0	adc $18a017	                ADC FAT_BEGIN_LBA+3
.1944d9		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.1944dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1944de		ad 0d a3	lda $18a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.1944e1		8d 03 a0	sta $18a003	                STA SECTORS_PER_CLUSTER
.1944e4		18		clc		                CLC
.1944e5		ad 14 a0	lda $18a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.1944e8		6d 10 a0	adc $18a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.1944eb		8d 18 a0	sta $18a018	                STA FAT2_BEGIN_LBA
.1944ee		ad 15 a0	lda $18a015	                LDA FAT_BEGIN_LBA+1
.1944f1		6d 11 a0	adc $18a011	                ADC SEC_PER_FAT+1
.1944f4		8d 19 a0	sta $18a019	                STA FAT2_BEGIN_LBA+1
.1944f7		ad 16 a0	lda $18a016	                LDA FAT_BEGIN_LBA+2
.1944fa		6d 12 a0	adc $18a012	                ADC SEC_PER_FAT+2
.1944fd		8d 1a a0	sta $18a01a	                STA FAT2_BEGIN_LBA+2
.194500		ad 17 a0	lda $18a017	                LDA FAT_BEGIN_LBA+3
.194503		6d 13 a0	adc $18a013	                ADC SEC_PER_FAT+3
.194506		8d 1b a0	sta $18a01b	                STA FAT2_BEGIN_LBA+3
.194509		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.19450b		8d 0e a0	sta $18a00e	                STA CLUSTER_SIZE
.19450e		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.194510		8d 0f a0	sta $18a00f	                STA CLUSTER_SIZE+1
.194513						ret_success
.194513		e2 20		sep #$20	                SEP #$20        ; set A short
.194515		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.194517		28		plp		                PLP
.194518		2b		pld		                PLD
.194519		ab		plb		                PLB
.19451a		38		sec		                SEC
.19451b		6b		rtl		                RTL
.19451c						ret_failure
.19451c		e2 20		sep #$20	                SEP #$20        ; set A short
.19451e		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.194520		28		plp		                PLP
.194521		2b		pld		                PLD
.194522		ab		plb		                PLB
.194523		18		clc		                CLC
.194524		6b		rtl		                RTL
.194525						DOS_TESTBOOT
.194525		8b		phb		                PHB
.194526		0b		phd		                PHD
.194527		da		phx		                PHX
.194528		08		php		                PHP
.194529		48		pha		                PHA             ; begin setdbr macro
.19452a		08		php		                PHP
.19452b		e2 20		sep #$20	                SEP #$20        ; set A short
.19452d		a9 00		lda #$00	                LDA #0
.19452f		48		pha		                PHA
.194530		ab		plb		                PLB
.194531		28		plp		                PLP
.194532		68		pla		                PLA             ; end setdbr macro
.194533		48		pha		                PHA             ; begin setdp macro
.194534		08		php		                PHP
.194535		c2 20		rep #$20	                REP #$20        ; set A long
.194537		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19453a		5b		tcd		                TCD
.19453b		28		plp		                PLP
.19453c		68		pla		                PLA             ; end setdp macro
.19453d		c2 10		rep #$10	                REP #$10        ; set X long
.19453f						chk_dev
.19453f		e2 20		sep #$20	                SEP #$20        ; set A short
.194541		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.194543		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.194545		f0 24		beq $19456b	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.194547		c2 30		rep #$30	                REP #$30        ; set A&X long
.194549		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.19454c		85 02		sta $0322	                STA @b BIOS_LBA
.19454e		85 04		sta $0324	                STA @b BIOS_LBA+2
.194550		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.194553		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.194555		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.194558		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.19455a		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.19455e		b0 03		bcs $194563	                BCS chk_mbr_brl
.194560		82 47 00	brl $1945aa	                BRL done                    ; If failed... just return
.194563						chk_mbr_brl
.194563		e2 20		sep #$20	                SEP #$20        ; set A short
.194565		af 00 a3 18	lda $18a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.194569		80 04		bra $19456f	                BRA chk_brl
.19456b		af 3e a3 18	lda $18a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.19456f		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.194571		f0 06		beq $194579	                BEQ chk_magic               ; Yes: check for the magic text
.194573		c9 82		cmp #$82	                CMP #$82
.194575		f0 02		beq $194579	                BEQ chk_magic
.194577		80 31		bra $1945aa	                BRA done                    ; No: just return
.194579		a2 00 00	ldx #$0000	chk_magic       LDX #0
.19457c		bf 03 a3 18	lda $18a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.194580		df af 45 19	cmp $1945af,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.194584		d0 24		bne $1945aa	                BNE done                    ; If it's not equal, just return
.194586		e8		inx		                INX                         ; Otherwise, check the next one
.194587		e0 08 00	cpx #$0008	                CPX #8
.19458a		d0 f0		bne $19457c	                BNE magic_loop              ; Until we've checked all 8 bytes
.19458c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19458e		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.194591		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.194594		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.194597		44 18 18	mvp $18,$18	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.19459a		e2 20		sep #$20	                SEP #$20        ; set A short
.19459c		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.19459e		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.1945a0		f0 04		beq $1945a6	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.1945a2		5c 00 a9 18	jmp $18a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.1945a6		5c 3e a9 18	jmp $18a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.1945aa		28		plp		done            PLP
.1945ab		2b		pld		                PLD
.1945ac		ab		plb		                PLB
.1945ad		fa		plx		                PLX
.1945ae		6b		rtl		                RTL
>1945af		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.1945b7						DOS_CALC_LBA
.1945b7		8b		phb		                PHB
.1945b8		0b		phd		                PHD
.1945b9		08		php		                PHP
.1945ba		48		pha		                PHA             ; begin setdbr macro
.1945bb		08		php		                PHP
.1945bc		e2 20		sep #$20	                SEP #$20        ; set A short
.1945be		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1945c0		48		pha		                PHA
.1945c1		ab		plb		                PLB
.1945c2		28		plp		                PLP
.1945c3		68		pla		                PLA             ; end setdbr macro
.1945c4		48		pha		                PHA             ; begin setdp macro
.1945c5		08		php		                PHP
.1945c6		c2 20		rep #$20	                REP #$20        ; set A long
.1945c8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1945cb		5b		tcd		                TCD
.1945cc		28		plp		                PLP
.1945cd		68		pla		                PLA             ; end setdp macro
.1945ce		c2 20		rep #$20	                REP #$20        ; set A long
.1945d0		38		sec		                SEC
.1945d1		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.1945d3		e9 02 00	sbc #$0002	                SBC #2
.1945d6		85 28		sta $0348	                STA DOS_TEMP
.1945d8		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1945da		e9 00 00	sbc #$0000	                SBC #0
.1945dd		85 2a		sta $034a	                STA DOS_TEMP+2
.1945df		e2 10		sep #$10	                SEP #$10        ; set X short
.1945e1		ae 03 a0	ldx $18a003	                LDX SECTORS_PER_CLUSTER
.1945e4		e0 01		cpx #$01	mult_loop       CPX #1
.1945e6		f0 07		beq $1945ef	                BEQ add_offset
.1945e8		06 28		asl $0348	                ASL DOS_TEMP
.1945ea		26 28		rol $0348	                ROL DOS_TEMP
.1945ec		ca		dex		                DEX
.1945ed		80 f5		bra $1945e4	                BRA mult_loop
.1945ef		18		clc		add_offset      CLC
.1945f0		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.1945f2		6d 1c a0	adc $18a01c	                ADC CLUSTER_BEGIN_LBA
.1945f5		85 02		sta $0322	                STA BIOS_LBA
.1945f7		a5 2a		lda $034a	                LDA DOS_TEMP+2
.1945f9		6d 1e a0	adc $18a01e	                ADC CLUSTER_BEGIN_LBA+2
.1945fc		85 04		sta $0324	                STA BIOS_LBA+2
.1945fe		28		plp		                PLP
.1945ff		2b		pld		                PLD
.194600		ab		plb		                PLB
.194601		6b		rtl		                RTL
.194602						DOS_GETCLUSTER
.194602		8b		phb		                PHB
.194603		0b		phd		                PHD
.194604		08		php		                PHP
.194605		48		pha		                PHA             ; begin setdbr macro
.194606		08		php		                PHP
.194607		e2 20		sep #$20	                SEP #$20        ; set A short
.194609		a9 00		lda #$00	                LDA #0
.19460b		48		pha		                PHA
.19460c		ab		plb		                PLB
.19460d		28		plp		                PLP
.19460e		68		pla		                PLA             ; end setdbr macro
.19460f		48		pha		                PHA             ; begin setdp macro
.194610		08		php		                PHP
.194611		c2 20		rep #$20	                REP #$20        ; set A long
.194613		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194616		5b		tcd		                TCD
.194617		28		plp		                PLP
.194618		68		pla		                PLA             ; end setdp macro
.194619		c2 20		rep #$20	                REP #$20        ; set A long
.19461b		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.19461d		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19461f		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.194621		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194623		22 b7 45 19	jsl $1945b7	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.194627		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.19462b		90 09		bcc $194636	                BCC ret_failure
.19462d						ret_success
.19462d		e2 20		sep #$20	                SEP #$20        ; set A short
.19462f		64 0e		stz $032e	                STZ DOS_STATUS
.194631		28		plp		                PLP
.194632		2b		pld		                PLD
.194633		ab		plb		                PLB
.194634		38		sec		                SEC
.194635		6b		rtl		                RTL
.194636						ret_failure
.194636		e2 20		sep #$20	                SEP #$20        ; set A short
.194638		85 0e		sta $032e	                STA DOS_STATUS
.19463a		28		plp		                PLP
.19463b		2b		pld		                PLD
.19463c		ab		plb		                PLB
.19463d		18		clc		                CLC
.19463e		6b		rtl		                RTL
.19463f						DOS_PUTCLUSTER
.19463f		8b		phb		                PHB
.194640		0b		phd		                PHD
.194641		08		php		                PHP
.194642		48		pha		                PHA             ; begin setdbr macro
.194643		08		php		                PHP
.194644		e2 20		sep #$20	                SEP #$20        ; set A short
.194646		a9 00		lda #$00	                LDA #0
.194648		48		pha		                PHA
.194649		ab		plb		                PLB
.19464a		28		plp		                PLP
.19464b		68		pla		                PLA             ; end setdbr macro
.19464c		48		pha		                PHA             ; begin setdp macro
.19464d		08		php		                PHP
.19464e		c2 20		rep #$20	                REP #$20        ; set A long
.194650		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194653		5b		tcd		                TCD
.194654		28		plp		                PLP
.194655		68		pla		                PLA             ; end setdp macro
.194656		c2 20		rep #$20	                REP #$20        ; set A long
.194658		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.19465a		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19465c		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.19465e		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194660		22 b7 45 19	jsl $1945b7	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.194664		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.194668		90 09		bcc $194673	                BCC ret_failure
.19466a						ret_success
.19466a		e2 20		sep #$20	                SEP #$20        ; set A short
.19466c		64 0e		stz $032e	                STZ DOS_STATUS
.19466e		28		plp		                PLP
.19466f		2b		pld		                PLD
.194670		ab		plb		                PLB
.194671		38		sec		                SEC
.194672		6b		rtl		                RTL
.194673						ret_failure
.194673		e2 20		sep #$20	                SEP #$20        ; set A short
.194675		85 0e		sta $032e	                STA DOS_STATUS
.194677		28		plp		                PLP
.194678		2b		pld		                PLD
.194679		ab		plb		                PLB
.19467a		18		clc		                CLC
.19467b		6b		rtl		                RTL
>19467c		40 46 00			DOS_FDC_NAME    .null "@F"
.19467f						DOS_FDC_DESC
>19467f		7c 46 19 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>194683		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>194684		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>194688		40 53 00			DOS_SDC_NAME    .null "@S"
.19468b						DOS_SDC_DESC
>19468b		88 46 19 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>19468f		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>194690		7f 46 19 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>194694		40 48 00			DOS_HDC_NAME    .null "@H"
.194697						DOS_HD_DESC
>194697		94 46 19 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>19469b		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>19469c		8b 46 19 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.1946a0						DOS_PARSE_DEV
.1946a0		8b		phb		                PHB
.1946a1		0b		phd		                PHD
.1946a2		08		php		                PHP
.1946a3		48		pha		                PHA             ; begin setdbr macro
.1946a4		08		php		                PHP
.1946a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1946a7		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1946a9		48		pha		                PHA
.1946aa		ab		plb		                PLB
.1946ab		28		plp		                PLP
.1946ac		68		pla		                PLA             ; end setdbr macro
.1946ad		48		pha		                PHA             ; begin setdp macro
.1946ae		08		php		                PHP
.1946af		c2 20		rep #$20	                REP #$20        ; set A long
.1946b1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1946b4		5b		tcd		                TCD
.1946b5		28		plp		                PLP
.1946b6		68		pla		                PLA             ; end setdp macro
.1946b7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1946b9		af 4a a0 18	lda $18a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.1946bd		85 28		sta $0348	                STA DOS_TEMP
.1946bf		af 4c a0 18	lda $18a04c	                LDA @l DOS_DEV_NAMES+2
.1946c3		85 2a		sta $034a	                STA DOS_TEMP+2
.1946c5		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.1946c8		85 48		sta $0368	                STA DOS_STR2_PTR
.1946ca		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.1946cd		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.1946cf		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.1946d2		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.1946d4		85 44		sta $0364	                STA DOS_STR1_PTR
.1946d6		c8		iny		                INY
.1946d7		c8		iny		                INY
.1946d8		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.1946da		85 46		sta $0366	                STA DOS_STR1_PTR+2
.1946dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1946de		a0 00 00	ldy #$0000	                LDY #0
.1946e1		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.1946e3		f0 24		beq $194709	                BEQ found                   ; If it's NULL, we found a match
.1946e5		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.1946e7		d0 03		bne $1946ec	                BNE next_device             ; If no match, try to load the next device
.1946e9		c8		iny		                INY                         ; Go to the next character
.1946ea		80 f5		bra $1946e1	                BRA cmp_loop
.1946ec						next_device
.1946ec		c2 20		rep #$20	                REP #$20        ; set A long
.1946ee		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.1946f1		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.1946f3		48		pha		                PHA
.1946f4		c8		iny		                INY
.1946f5		c8		iny		                INY
.1946f6		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.1946f8		85 2a		sta $034a	                STA DOS_TEMP+2
.1946fa		68		pla		                PLA
.1946fb		85 28		sta $0348	                STA DOS_TEMP
.1946fd		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.1946ff		d0 ce		bne $1946cf	                BNE dev_loop                ; No: check this device
.194701		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194703		d0 ca		bne $1946cf	                BNE dev_loop
.194705		28		plp		done            PLP                         ; Otherwise, return having not found a match
.194706		2b		pld		                PLD
.194707		ab		plb		                PLB
.194708		6b		rtl		                RTL
.194709		22 1a 47 19	jsl $19471a	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.19470d		e2 20		sep #$20	                SEP #$20        ; set A short
.19470f		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.194712		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194714		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.194718		80 eb		bra $194705	                BRA done
.19471a						DOS_ADJUSTPATH
.19471a		da		phx		                PHX
.19471b		5a		phy		                PHY
.19471c		8b		phb		                PHB
.19471d		0b		phd		                PHD
.19471e		08		php		                PHP
.19471f		48		pha		                PHA             ; begin setdbr macro
.194720		08		php		                PHP
.194721		e2 20		sep #$20	                SEP #$20        ; set A short
.194723		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194725		48		pha		                PHA
.194726		ab		plb		                PLB
.194727		28		plp		                PLP
.194728		68		pla		                PLA             ; end setdbr macro
.194729		48		pha		                PHA             ; begin setdp macro
.19472a		08		php		                PHP
.19472b		c2 20		rep #$20	                REP #$20        ; set A long
.19472d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194730		5b		tcd		                TCD
.194731		28		plp		                PLP
.194732		68		pla		                PLA             ; end setdp macro
.194733		c2 30		rep #$30	                REP #$30        ; set A&X long
.194735		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.194737		98		tya		                TYA                             ; Compute the address of the first source byte
.194738		18		clc		                CLC
.194739		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.19473c		aa		tax		                TAX
.19473d		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.194740		a8		tay		                TAY
.194741		38		sec		                SEC                             ; Compute the number of bytes to copy
.194742		a9 00 01	lda #$0100	                LDA #256
.194745		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.194747		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.19474a		28		plp		                PLP
.19474b		2b		pld		                PLD
.19474c		ab		plb		                PLB
.19474d		7a		ply		                PLY
.19474e		fa		plx		                PLX
.19474f		6b		rtl		                RTL
.194750						DOS_PARSE_PATH
.194750		8b		phb		                PHB
.194751		0b		phd		                PHD
.194752		08		php		                PHP
.194753		48		pha		                PHA             ; begin setdbr macro
.194754		08		php		                PHP
.194755		e2 20		sep #$20	                SEP #$20        ; set A short
.194757		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194759		48		pha		                PHA
.19475a		ab		plb		                PLB
.19475b		28		plp		                PLP
.19475c		68		pla		                PLA             ; end setdbr macro
.19475d		48		pha		                PHA             ; begin setdp macro
.19475e		08		php		                PHP
.19475f		c2 20		rep #$20	                REP #$20        ; set A long
.194761		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194764		5b		tcd		                TCD
.194765		28		plp		                PLP
.194766		68		pla		                PLA             ; end setdp macro
.194767		c2 10		rep #$10	                REP #$10        ; set X long
.194769		e2 20		sep #$20	                SEP #$20        ; set A short
.19476b		a2 00 00	ldx #$0000	                LDX #0
.19476e		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.194770		f0 1b		beq $19478d	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.194772		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.194774		b0 05		bcs $19477b	                BGE check_case          ; No: check the case
.194776		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.194778		82 64 00	brl $1947df	                BRL ret_failure
.19477b		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.19477d		90 08		bcc $194787	                BLT next_char
.19477f		c9 7b		cmp #$7b	                CMP #'z'+1
.194781		b0 04		bcs $194787	                BGE next_char
.194783		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.194785		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.194787		e8		inx		next_char       INX                     ; Move to the next character
.194788		e0 00 01	cpx #$0100	                CPX #$100
.19478b		d0 e1		bne $19476e	                BNE upcase_loop
.19478d		22 a0 46 19	jsl $1946a0	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.194791		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.194793		c9 3a		cmp #$3a	                CMP #':'
.194795		d0 07		bne $19479e	                BNE clr_name            ; If not colon, treat it as a file name
.194797		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.19479a		22 1a 47 19	jsl $19471a	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.19479e		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.1947a1		a9 20		lda #$20	                LDA #' '
.1947a3		99 3a a0	sta $18a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.1947a6		c8		iny		                INY
.1947a7		c0 0b 00	cpy #$000b	                CPY #11
.1947aa		d0 f7		bne $1947a3	                BNE clr_loop
.1947ac		a2 00 00	ldx #$0000	                LDX #0
.1947af		a0 00 00	ldy #$0000	                LDY #0
.1947b2		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.1947b4		f0 20		beq $1947d6	                BEQ ret_success         ; If NULL: we've finished parsing the path
.1947b6		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.1947b8		f0 0a		beq $1947c4	                BEQ cpy_ext             ; And move to the extension
.1947ba		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.1947bd		e8		inx		                INX
.1947be		c8		iny		                INY                     ; Move to the next character
.1947bf		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.1947c2		d0 ee		bne $1947b2	                BNE cpy_name_loop       ; No: process this one
.1947c4		e8		inx		cpy_ext         INX                     ; Skip the dot
.1947c5		a0 08 00	ldy #$0008	                LDY #8
.1947c8		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.1947ca		f0 0a		beq $1947d6	                BEQ ret_success         ; If it's NULL, we've finished
.1947cc		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.1947cf		e8		inx		                INX
.1947d0		c8		iny		                INY                     ; Move to the next character
.1947d1		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.1947d4		d0 f2		bne $1947c8	                BNE cpy_ext_loop        ; No: process this one
.1947d6						ret_success
.1947d6		e2 20		sep #$20	                SEP #$20        ; set A short
.1947d8		64 0e		stz $032e	                STZ DOS_STATUS
.1947da		28		plp		                PLP
.1947db		2b		pld		                PLD
.1947dc		ab		plb		                PLB
.1947dd		38		sec		                SEC
.1947de		6b		rtl		                RTL
.1947df						ret_failure
.1947df		e2 20		sep #$20	                SEP #$20        ; set A short
.1947e1		85 0e		sta $032e	                STA DOS_STATUS
.1947e3		28		plp		                PLP
.1947e4		2b		pld		                PLD
.1947e5		ab		plb		                PLB
.1947e6		18		clc		                CLC
.1947e7		6b		rtl		                RTL
.1947e8						DOS_FINDFILE
.1947e8		8b		phb		                PHB
.1947e9		0b		phd		                PHD
.1947ea		08		php		                PHP
.1947eb		48		pha		                PHA             ; begin setdbr macro
.1947ec		08		php		                PHP
.1947ed		e2 20		sep #$20	                SEP #$20        ; set A short
.1947ef		a9 00		lda #$00	                LDA #0
.1947f1		48		pha		                PHA
.1947f2		ab		plb		                PLB
.1947f3		28		plp		                PLP
.1947f4		68		pla		                PLA             ; end setdbr macro
.1947f5		48		pha		                PHA             ; begin setdp macro
.1947f6		08		php		                PHP
.1947f7		c2 20		rep #$20	                REP #$20        ; set A long
.1947f9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1947fc		5b		tcd		                TCD
.1947fd		28		plp		                PLP
.1947fe		68		pla		                PLA             ; end setdp macro
.1947ff		c2 30		rep #$30	                REP #$30        ; set A&X long
.194801		22 50 47 19	jsl $194750	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.194805		b0 05		bcs $19480c	                BCS mount                       ; If success: try to open the directory
.194807		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.194808		2b		pld		                PLD
.194809		ab		plb		                PLB
.19480a		18		clc		                CLC
.19480b		6b		rtl		                RTL
.19480c		22 6a 43 19	jsl $19436a	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.194810		b0 07		bcs $194819	                BCS get_directory
.194812		e2 20		sep #$20	                SEP #$20        ; set A short
.194814		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.194816		82 56 00	brl $19486f	                BRL ret_failure
.194819						get_directory
.194819		c2 20		rep #$20	                REP #$20        ; set A long
.19481b		22 1f 40 19	jsl $19401f	                JSL DOS_DIROPEN                 ; Get the directory
.19481f		b0 07		bcs $194828	                BCS scan_entries                ; If success: start scanning the directory entries
.194821		e2 20		sep #$20	                SEP #$20        ; set A short
.194823		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.194825		82 47 00	brl $19486f	                BRL ret_failure
.194828		22 9e 40 19	jsl $19409e	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.19482c						scan_loop
.19482c		e2 20		sep #$20	                SEP #$20        ; set A short
.19482e		a0 00 00	ldy #$0000	                LDY #0
.194831		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.194833		d0 05		bne $19483a	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.194835		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.194837		82 35 00	brl $19486f	                BRL ret_failure
.19483a		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.19483c		f0 26		beq $194864	                BEQ next_entry                  ; Go to the next entry
.19483e		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.194841		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194843		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.194845		d0 1d		bne $194864	                BNE next_entry                  ; Yes: skip it!
.194847		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.194849		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.19484b		f0 17		beq $194864	                BEQ next_entry                  ; Yes: skip it!
.19484d		a2 00 00	ldx #$0000	                LDX #0
.194850		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.194853		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.194855		df 3a a0 18	cmp $18a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.194859		d0 09		bne $194864	                BNE next_entry                  ; If not equal: try the next entry
.19485b		c8		iny		                INY                             ; Advance to the next character
.19485c		e8		inx		                INX
.19485d		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.194860		f0 16		beq $194878	                BEQ match                       ; Yes: we have a match!
.194862		80 ef		bra $194853	                BRA scan_cmp_loop               ; No: keep checking
.194864		22 b9 40 19	jsl $1940b9	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.194868		90 05		bcc $19486f	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.19486a		82 bf ff	brl $19482c	                BRL scan_loop                   ; If found: keep scanning
.19486d		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.19486f						ret_failure
.19486f		e2 20		sep #$20	                SEP #$20        ; set A short
.194871		85 0e		sta $032e	                STA DOS_STATUS
.194873		28		plp		                PLP
.194874		2b		pld		                PLD
.194875		ab		plb		                PLB
.194876		18		clc		                CLC
.194877		6b		rtl		                RTL
.194878						match
.194878		c2 20		rep #$20	                REP #$20        ; set A long
.19487a		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.19487d		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.19487f		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.194881		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.194884		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194886		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194888						ret_success
.194888		e2 20		sep #$20	                SEP #$20        ; set A short
.19488a		64 0e		stz $032e	                STZ DOS_STATUS
.19488c		28		plp		                PLP
.19488d		2b		pld		                PLD
.19488e		ab		plb		                PLB
.19488f		38		sec		                SEC
.194890		6b		rtl		                RTL
.194891						DOS_READFILE
.194891		8b		phb		                PHB
.194892		0b		phd		                PHD
.194893		08		php		                PHP
.194894		48		pha		                PHA             ; begin setdbr macro
.194895		08		php		                PHP
.194896		e2 20		sep #$20	                SEP #$20        ; set A short
.194898		a9 00		lda #$00	                LDA #0
.19489a		48		pha		                PHA
.19489b		ab		plb		                PLB
.19489c		28		plp		                PLP
.19489d		68		pla		                PLA             ; end setdbr macro
.19489e		48		pha		                PHA             ; begin setdp macro
.19489f		08		php		                PHP
.1948a0		c2 20		rep #$20	                REP #$20        ; set A long
.1948a2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1948a5		5b		tcd		                TCD
.1948a6		28		plp		                PLP
.1948a7		68		pla		                PLA             ; end setdp macro
.1948a8		c2 30		rep #$30	                REP #$30        ; set A&X long
.1948aa		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.1948ac		48		pha		                PHA
.1948ad		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.1948af		48		pha		                PHA
.1948b0		22 e8 47 19	jsl $1947e8	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.1948b4		68		pla		                PLA
.1948b5		85 1c		sta $033c	                STA DOS_BUFF_PTR
.1948b7		68		pla		                PLA
.1948b8		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.1948ba		90 0f		bcc $1948cb	                BCC pass_failure                    ; If found: try to load the cluster
.1948bc		22 02 46 19	jsl $194602	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.1948c0		90 09		bcc $1948cb	                BCC pass_failure                    ; If there's an error... pass it up the chain
.1948c2						ret_success
.1948c2		e2 20		sep #$20	                SEP #$20        ; set A short
.1948c4		64 0e		stz $032e	                STZ DOS_STATUS
.1948c6		28		plp		                PLP
.1948c7		2b		pld		                PLD
.1948c8		ab		plb		                PLB
.1948c9		38		sec		                SEC
.1948ca		6b		rtl		                RTL
.1948cb		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.1948cc		2b		pld		                PLD
.1948cd		ab		plb		                PLB
.1948ce		18		clc		                CLC
.1948cf		6b		rtl		                RTL
.1948d0						ENTRYFORCLUS12
.1948d0		8b		phb		                PHB
.1948d1		0b		phd		                PHD
.1948d2		08		php		                PHP
.1948d3		48		pha		                PHA             ; begin setdbr macro
.1948d4		08		php		                PHP
.1948d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1948d7		a9 00		lda #$00	                LDA #0
.1948d9		48		pha		                PHA
.1948da		ab		plb		                PLB
.1948db		28		plp		                PLP
.1948dc		68		pla		                PLA             ; end setdbr macro
.1948dd		48		pha		                PHA             ; begin setdp macro
.1948de		08		php		                PHP
.1948df		c2 20		rep #$20	                REP #$20        ; set A long
.1948e1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1948e4		5b		tcd		                TCD
.1948e5		28		plp		                PLP
.1948e6		68		pla		                PLA             ; end setdp macro
.1948e7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1948e9		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.1948eb		0a		asl a		                ASL A
.1948ec		85 28		sta $0348	                STA DOS_TEMP
.1948ee		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1948f0		2a		rol a		                ROL A
.1948f1		85 2a		sta $034a	                STA DOS_TEMP+2
.1948f3		18		clc		                CLC
.1948f4		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1948f6		65 28		adc $0348	                ADC DOS_TEMP
.1948f8		85 28		sta $0348	                STA DOS_TEMP
.1948fa		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1948fc		65 2a		adc $034a	                ADC DOS_TEMP+2
.1948fe		85 2a		sta $034a	                STA DOS_TEMP+2
.194900		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.194902		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.194904		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.194906		29 ff 03	and #$03ff	                AND #$003FF
.194909		aa		tax		                TAX
.19490a		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.19490c		66 28		ror $0348	                ROR DOS_TEMP
.19490e		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194910		66 28		ror $0348	                ROR DOS_TEMP
.194912		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194914		66 28		ror $0348	                ROR DOS_TEMP
.194916		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194918		66 28		ror $0348	                ROR DOS_TEMP
.19491a		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.19491c		66 28		ror $0348	                ROR DOS_TEMP
.19491e		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194920		66 28		ror $0348	                ROR DOS_TEMP
.194922		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194924		66 28		ror $0348	                ROR DOS_TEMP
.194926		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194928		66 28		ror $0348	                ROR DOS_TEMP
.19492a		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.19492c		66 28		ror $0348	                ROR DOS_TEMP
.19492e		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.19492f		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA
.194933		65 28		adc $0348	                ADC DOS_TEMP
.194935		85 24		sta $0344	                STA DOS_FAT_LBA
.194937		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.19493b		65 2a		adc $034a	                ADC DOS_TEMP+2
.19493d		85 26		sta $0346	                STA DOS_FAT_LBA+2
.19493f		28		plp		                PLP
.194940		2b		pld		                PLD
.194941		ab		plb		                PLB
.194942		6b		rtl		                RTL
.194943						FATFORCLUSTER12
.194943		8b		phb		                PHB
.194944		0b		phd		                PHD
.194945		08		php		                PHP
.194946		48		pha		                PHA             ; begin setdbr macro
.194947		08		php		                PHP
.194948		e2 20		sep #$20	                SEP #$20        ; set A short
.19494a		a9 00		lda #$00	                LDA #0
.19494c		48		pha		                PHA
.19494d		ab		plb		                PLB
.19494e		28		plp		                PLP
.19494f		68		pla		                PLA             ; end setdbr macro
.194950		48		pha		                PHA             ; begin setdp macro
.194951		08		php		                PHP
.194952		c2 20		rep #$20	                REP #$20        ; set A long
.194954		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194957		5b		tcd		                TCD
.194958		28		plp		                PLP
.194959		68		pla		                PLA             ; end setdp macro
.19495a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19495c		a2 00 00	ldx #$0000	                LDX #0
.19495f		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.194962		8f 00 a5 18	sta $18a500	clr_loop        STA DOS_FAT_SECTORS
.194966		e8		inx		                INX
.194967		e8		inx		                INX
.194968		e0 00 04	cpx #$0400	                CPX #1024
.19496b		d0 f5		bne $194962	                BNE clr_loop
.19496d		22 d0 48 19	jsl $1948d0	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.194971		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.194973		85 02		sta $0322	                STA BIOS_LBA
.194975		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194977		85 04		sta $0324	                STA BIOS_LBA+2
.194979		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.19497c		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19497e		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.194981		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194983		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.194987		90 17		bcc $1949a0	                BCC error
.194989		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.19498b		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.19498e		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194990		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.194993		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194995		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.194999		90 05		bcc $1949a0	                BCC error
.19499b		28		plp		                PLP
.19499c		2b		pld		                PLD
.19499d		ab		plb		                PLB
.19499e		38		sec		                SEC
.19499f		6b		rtl		                RTL
.1949a0						error
.1949a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1949a2		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.1949a4		85 0e		sta $032e	                STA DOS_STATUS
.1949a6		28		plp		                PLP
.1949a7		2b		pld		                PLD
.1949a8		ab		plb		                PLB
.1949a9		18		clc		                CLC
.1949aa		6b		rtl		                RTL
.1949ab						FATFORCLUSTER32
.1949ab		8b		phb		                PHB
.1949ac		0b		phd		                PHD
.1949ad		48		pha		                PHA             ; begin setdbr macro
.1949ae		08		php		                PHP
.1949af		e2 20		sep #$20	                SEP #$20        ; set A short
.1949b1		a9 00		lda #$00	                LDA #0
.1949b3		48		pha		                PHA
.1949b4		ab		plb		                PLB
.1949b5		28		plp		                PLP
.1949b6		68		pla		                PLA             ; end setdbr macro
.1949b7		48		pha		                PHA             ; begin setdp macro
.1949b8		08		php		                PHP
.1949b9		c2 20		rep #$20	                REP #$20        ; set A long
.1949bb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1949be		5b		tcd		                TCD
.1949bf		28		plp		                PLP
.1949c0		68		pla		                PLA             ; end setdp macro
.1949c1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1949c3		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1949c5		85 24		sta $0344	                STA DOS_FAT_LBA
.1949c7		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1949c9		85 26		sta $0346	                STA DOS_FAT_LBA+2
.1949cb		a2 07 00	ldx #$0007	                LDX #7
.1949ce		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.1949d0		66 24		ror $0344	                ROR DOS_FAT_LBA
.1949d2		ca		dex		                DEX
.1949d3		d0 f9		bne $1949ce	                BNE div_loop
.1949d5		18		clc		                CLC
.1949d6		a5 24		lda $0344	                LDA DOS_FAT_LBA
.1949d8		6f 14 a0 18	adc $18a014	                ADC FAT_BEGIN_LBA
.1949dc		85 24		sta $0344	                STA DOS_FAT_LBA
.1949de		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.1949e0		6f 16 a0 18	adc $18a016	                ADC FAT_BEGIN_LBA+2
.1949e4		85 26		sta $0346	                STA DOS_FAT_LBA+2
.1949e6		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.1949e8		85 02		sta $0322	                STA BIOS_LBA
.1949ea		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.1949ec		85 04		sta $0324	                STA BIOS_LBA+2
.1949ee		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.1949f1		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1949f3		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.1949f6		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1949f8		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.1949fc		b0 06		bcs $194a04	                BCS find_entry
.1949fe		e2 20		sep #$20	                SEP #$20        ; set A short
.194a00		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194a02		80 0e		bra $194a12	                BRA ret_failure
.194a04						find_entry
.194a04		c2 20		rep #$20	                REP #$20        ; set A long
.194a06		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194a08		0a		asl a		                ASL A
.194a09		0a		asl a		                ASL A                           ; * 4
.194a0a		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.194a0d		aa		tax		                TAX                             ; X should be the offset within the sector
.194a0e		2b		pld		ret_success     PLD
.194a0f		ab		plb		                PLB
.194a10		38		sec		                SEC                             ; return success
.194a11		6b		rtl		                RTL
.194a12		2b		pld		ret_failure     PLD
.194a13		ab		plb		                PLB
.194a14		18		clc		                CLC                             ; Return failure
.194a15		6b		rtl		                RTL
.194a16						NEXTCLUSTER
.194a16		08		php		                PHP
.194a17		e2 20		sep #$20	                SEP #$20        ; set A short
.194a19		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194a1d		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194a1f		d0 08		bne $194a29	                BNE fat32                       ; No: assume it's FAT32
.194a21		22 37 4a 19	jsl $194a37	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.194a25		90 0d		bcc $194a34	                BCC pass_failure                ; If there was an error, pass it up the chain
.194a27		80 06		bra $194a2f	                BRA ret_success
.194a29		22 9f 4a 19	jsl $194a9f	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.194a2d		90 05		bcc $194a34	                BCC pass_failure                ; If there was an error, pass it up the chain
.194a2f		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.194a31		28		plp		                PLP
.194a32		38		sec		                SEC
.194a33		6b		rtl		                RTL
.194a34		28		plp		pass_failure    PLP
.194a35		18		clc		                CLC
.194a36		6b		rtl		                RTL
.194a37						NEXTCLUSTER12
.194a37		8b		phb		                    PHB
.194a38		0b		phd		                    PHD
.194a39		08		php		                    PHP
.194a3a		48		pha		                PHA             ; begin setdbr macro
.194a3b		08		php		                PHP
.194a3c		e2 20		sep #$20	                SEP #$20        ; set A short
.194a3e		a9 00		lda #$00	                LDA #0
.194a40		48		pha		                PHA
.194a41		ab		plb		                PLB
.194a42		28		plp		                PLP
.194a43		68		pla		                PLA             ; end setdbr macro
.194a44		48		pha		                PHA             ; begin setdp macro
.194a45		08		php		                PHP
.194a46		c2 20		rep #$20	                REP #$20        ; set A long
.194a48		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194a4b		5b		tcd		                TCD
.194a4c		28		plp		                PLP
.194a4d		68		pla		                PLA             ; end setdp macro
.194a4e		c2 30		rep #$30	                REP #$30        ; set A&X long
.194a50		22 43 49 19	jsl $194943	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.194a54		b0 03		bcs $194a59	                    BCS chk_clus_id
.194a56		82 41 00	brl $194a9a	                    BRL pass_failure
.194a59		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.194a5b		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.194a5e		d0 0d		bne $194a6d	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.194a60						is_even
.194a60		c2 20		rep #$20	                REP #$20        ; set A long
.194a62		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.194a66		29 ff 0f	and #$0fff	                    AND #$0FFF
.194a69		85 28		sta $0348	                    STA DOS_TEMP
.194a6b		80 0c		bra $194a79	                    BRA check_id
.194a6d						is_odd
.194a6d		c2 20		rep #$20	                REP #$20        ; set A long
.194a6f		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.194a73		4a		lsr a		                    LSR A
.194a74		4a		lsr a		                    LSR A
.194a75		4a		lsr a		                    LSR A
.194a76		4a		lsr a		                    LSR A
.194a77		85 28		sta $0348	                    STA DOS_TEMP
.194a79						check_id
.194a79		c2 20		rep #$20	                REP #$20        ; set A long
.194a7b		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.194a7d		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.194a80		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.194a83		f0 0f		beq $194a94	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.194a85		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.194a87		85 10		sta $0330	                    STA DOS_CLUS_ID
.194a89		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.194a8b						ret_success
.194a8b		e2 20		sep #$20	                SEP #$20        ; set A short
.194a8d		64 0e		stz $032e	                    STZ DOS_STATUS
.194a8f		28		plp		                    PLP
.194a90		2b		pld		                    PLD
.194a91		ab		plb		                    PLB
.194a92		38		sec		                    SEC
.194a93		6b		rtl		                    RTL
.194a94						no_more
.194a94		e2 20		sep #$20	                SEP #$20        ; set A short
.194a96		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.194a98		85 0e		sta $032e	                    STA DOS_STATUS
.194a9a		28		plp		pass_failure        PLP
.194a9b		2b		pld		                    PLD
.194a9c		ab		plb		                    PLB
.194a9d		18		clc		                    CLC
.194a9e		6b		rtl		                    RTL
.194a9f						NEXTCLUSTER32
.194a9f		8b		phb		                PHB
.194aa0		0b		phd		                PHD
.194aa1		08		php		                PHP
.194aa2		48		pha		                PHA             ; begin setdbr macro
.194aa3		08		php		                PHP
.194aa4		e2 20		sep #$20	                SEP #$20        ; set A short
.194aa6		a9 00		lda #$00	                LDA #0
.194aa8		48		pha		                PHA
.194aa9		ab		plb		                PLB
.194aaa		28		plp		                PLP
.194aab		68		pla		                PLA             ; end setdbr macro
.194aac		48		pha		                PHA             ; begin setdp macro
.194aad		08		php		                PHP
.194aae		c2 20		rep #$20	                REP #$20        ; set A long
.194ab0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194ab3		5b		tcd		                TCD
.194ab4		28		plp		                PLP
.194ab5		68		pla		                PLA             ; end setdp macro
.194ab6		c2 30		rep #$30	                REP #$30        ; set A&X long
.194ab8		22 ab 49 19	jsl $1949ab	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.194abc		90 53		bcc $194b11	                BCC ret_failure                 ; If it did not work, return the error
.194abe		e2 20		sep #$20	                SEP #$20        ; set A short
.194ac0		bf 00 a5 18	lda $18a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.194ac4		85 28		sta $0348	                STA DOS_TEMP
.194ac6		bf 01 a5 18	lda $18a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.194aca		85 29		sta $0349	                STA DOS_TEMP+1
.194acc		bf 02 a5 18	lda $18a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.194ad0		85 2a		sta $034a	                STA DOS_TEMP+2
.194ad2		bf 03 a5 18	lda $18a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.194ad6		85 2b		sta $034b	                STA DOS_TEMP+3
.194ad8		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.194ada		c9 ff		cmp #$ff	                CMP #$FF
.194adc		d0 18		bne $194af6	                BNE found_next
.194ade		a5 29		lda $0349	                LDA DOS_TEMP+1
.194ae0		c9 ff		cmp #$ff	                CMP #$FF
.194ae2		d0 12		bne $194af6	                BNE found_next
.194ae4		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194ae6		c9 ff		cmp #$ff	                CMP #$FF
.194ae8		d0 0c		bne $194af6	                BNE found_next
.194aea		a5 2b		lda $034b	                LDA DOS_TEMP+3
.194aec		c9 0f		cmp #$0f	                CMP #$0F
.194aee		d0 06		bne $194af6	                BNE found_next                  ; No: return this cluster as the next
.194af0		e2 20		sep #$20	                SEP #$20        ; set A short
.194af2		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.194af4		80 1b		bra $194b11	                BRA ret_failure
.194af6						found_next
.194af6		e2 20		sep #$20	                SEP #$20        ; set A short
.194af8		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.194afa		85 10		sta $0330	                STA DOS_CLUS_ID
.194afc		a5 29		lda $0349	                LDA DOS_TEMP+1
.194afe		85 11		sta $0331	                STA DOS_CLUS_ID+1
.194b00		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194b02		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194b04		a5 2b		lda $034b	                LDA DOS_TEMP+3
.194b06		85 13		sta $0333	                STA DOS_CLUS_ID+3
.194b08						ret_success
.194b08		e2 20		sep #$20	                SEP #$20        ; set A short
.194b0a		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.194b0c		28		plp		                PLP
.194b0d		2b		pld		                PLD
.194b0e		ab		plb		                PLB
.194b0f		38		sec		                SEC
.194b10		6b		rtl		                RTL
.194b11						ret_failure
.194b11		e2 20		sep #$20	                SEP #$20        ; set A short
.194b13		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.194b15		28		plp		                PLP
.194b16		2b		pld		                PLD
.194b17		ab		plb		                PLB
.194b18		18		clc		                CLC
.194b19		6b		rtl		                RTL
.194b1a						DOS_READNEXT
.194b1a		08		php		                PHP
.194b1b		c2 30		rep #$30	                REP #$30        ; set A&X long
.194b1d		22 16 4a 19	jsl $194a16	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.194b21		90 09		bcc $194b2c	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.194b23		22 02 46 19	jsl $194602	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.194b27		90 03		bcc $194b2c	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.194b29		28		plp		ret_success     PLP
.194b2a		38		sec		                SEC
.194b2b		6b		rtl		                RTL
.194b2c		28		plp		pass_failure    PLP
.194b2d		18		clc		                CLC
.194b2e		6b		rtl		                RTL
.194b2f						DOS_FREECLUS
.194b2f		08		php		                PHP
.194b30		48		pha		                PHA             ; begin setdp macro
.194b31		08		php		                PHP
.194b32		c2 20		rep #$20	                REP #$20        ; set A long
.194b34		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194b37		5b		tcd		                TCD
.194b38		28		plp		                PLP
.194b39		68		pla		                PLA             ; end setdp macro
.194b3a		e2 20		sep #$20	                SEP #$20        ; set A short
.194b3c		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194b40		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194b42		d0 08		bne $194b4c	                BNE fat32                       ; No: assume it's FAT32
.194b44		22 c0 4b 19	jsl $194bc0	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.194b48		90 0d		bcc $194b57	                BCC pass_failure                ; If there was an error, pass it up the chain
.194b4a		80 06		bra $194b52	                BRA ret_success
.194b4c		22 98 4c 19	jsl $194c98	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.194b50		90 05		bcc $194b57	                BCC pass_failure                ; If there was an error, pass it up the chain
.194b52		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.194b54		28		plp		                PLP
.194b55		38		sec		                SEC
.194b56		6b		rtl		                RTL
.194b57		28		plp		pass_failure    PLP
.194b58		18		clc		                CLC
.194b59		6b		rtl		                RTL
.194b5a						FDC_READ2FAT12
.194b5a		8b		phb		                    PHB
.194b5b		0b		phd		                    PHD
.194b5c		08		php		                    PHP
.194b5d		48		pha		                PHA             ; begin setdbr macro
.194b5e		08		php		                PHP
.194b5f		e2 20		sep #$20	                SEP #$20        ; set A short
.194b61		a9 00		lda #$00	                LDA #0
.194b63		48		pha		                PHA
.194b64		ab		plb		                PLB
.194b65		28		plp		                PLP
.194b66		68		pla		                PLA             ; end setdbr macro
.194b67		48		pha		                PHA             ; begin setdp macro
.194b68		08		php		                PHP
.194b69		c2 20		rep #$20	                REP #$20        ; set A long
.194b6b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194b6e		5b		tcd		                TCD
.194b6f		28		plp		                PLP
.194b70		68		pla		                PLA             ; end setdp macro
.194b71		c2 30		rep #$30	                REP #$30        ; set A&X long
.194b73		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.194b76		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.194b78		a9 18 00	lda #$0018	                    LDA #`DOS_FAT_SECTORS
.194b7b		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.194b7d		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.194b7f		85 02		sta $0322	                    STA BIOS_LBA
.194b81		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.194b83		85 04		sta $0324	                    STA BIOS_LBA+2
.194b85		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.194b89		b0 07		bcs $194b92	                    BCS inc_sect2                   ; If success: start getting the second sector
.194b8b		e2 20		sep #$20	                SEP #$20        ; set A short
.194b8d		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.194b8f		82 1c 00	brl $194bae	                    BRL ret_failure
.194b92						inc_sect2
.194b92		c2 20		rep #$20	                REP #$20        ; set A long
.194b94		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.194b96		d0 02		bne $194b9a	                    BNE inc_buff_ptr
.194b98		e6 04		inc $0324	                    INC BIOS_LBA+2
.194b9a		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194b9d		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.194b9f		a9 18 00	lda #$0018	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194ba2		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.194ba4		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.194ba8		b0 0d		bcs $194bb7	                    BCS ret_success                 ; If success, return success
.194baa		e2 20		sep #$20	                SEP #$20        ; set A short
.194bac		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.194bae						ret_failure
.194bae		e2 20		sep #$20	                SEP #$20        ; set A short
.194bb0		85 00		sta $0320	                    STA BIOS_STATUS
.194bb2		28		plp		                    PLP
.194bb3		2b		pld		                    PLD
.194bb4		ab		plb		                    PLB
.194bb5		18		clc		                    CLC
.194bb6		6b		rtl		                    RTL
.194bb7						ret_success
.194bb7		e2 20		sep #$20	                SEP #$20        ; set A short
.194bb9		64 00		stz $0320	                    STZ BIOS_STATUS
.194bbb		28		plp		                    PLP
.194bbc		2b		pld		                    PLD
.194bbd		ab		plb		                    PLB
.194bbe		38		sec		                    SEC
.194bbf		6b		rtl		                    RTL
.194bc0						DOS_FREECLUS12
.194bc0		da		phx		                PHX
.194bc1		8b		phb		                PHB
.194bc2		0b		phd		                PHD
.194bc3		08		php		                PHP
.194bc4		48		pha		                PHA             ; begin setdbr macro
.194bc5		08		php		                PHP
.194bc6		e2 20		sep #$20	                SEP #$20        ; set A short
.194bc8		a9 00		lda #$00	                LDA #0
.194bca		48		pha		                PHA
.194bcb		ab		plb		                PLB
.194bcc		28		plp		                PLP
.194bcd		68		pla		                PLA             ; end setdbr macro
.194bce		48		pha		                PHA             ; begin setdp macro
.194bcf		08		php		                PHP
.194bd0		c2 20		rep #$20	                REP #$20        ; set A long
.194bd2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194bd5		5b		tcd		                TCD
.194bd6		28		plp		                PLP
.194bd7		68		pla		                PLA             ; end setdp macro
.194bd8		c2 30		rep #$30	                REP #$30        ; set A&X long
.194bda		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.194bdd		85 10		sta $0330	                STA DOS_CLUS_ID
.194bdf		a9 00 00	lda #$0000	                LDA #0
.194be2		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194be4		22 d0 48 19	jsl $1948d0	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.194be8		22 5a 4b 19	jsl $194b5a	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.194bec		b0 07		bcs $194bf5	                BCS start_of_fat                ; If success, move X to the start of the FAT
.194bee		e2 20		sep #$20	                SEP #$20        ; set A short
.194bf0		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194bf2		82 99 00	brl $194c8e	                BRL ret_failure
.194bf5						start_of_fat
.194bf5		c2 30		rep #$30	                REP #$30        ; set A&X long
.194bf7		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.194bf9		89 01 00	bit #$0001	                BIT #1
.194bfc		d0 09		bne $194c07	                BNE is_odd
.194bfe		bf 00 a5 18	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.194c02		29 ff 0f	and #$0fff	                AND #$0FFF
.194c05		80 08		bra $194c0f	                BRA chk_available
.194c07		bf 00 a5 18	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.194c0b		4a		lsr a		                LSR A
.194c0c		4a		lsr a		                LSR A
.194c0d		4a		lsr a		                LSR A
.194c0e		4a		lsr a		                LSR A
.194c0f						chk_available
.194c0f		85 28		sta $0348	                STA DOS_TEMP
.194c11		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.194c14		f0 03		beq $194c19	                BEQ chk_found
.194c16		82 39 00	brl $194c52	                BRL next_cluster                ; No: advance to the next cluster
.194c19		8a		txa		chk_found       TXA
.194c1a		85 2a		sta $034a	                STA DOS_TEMP+2
.194c1c		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.194c1e		89 01 00	bit #$0001	                BIT #1
.194c21		d0 0d		bne $194c30	                BNE is_odd2
.194c23						is_even2
.194c23		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.194c27		09 ff 0f	ora #$0fff	                ORA #$0FFF
.194c2a		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194c2e		80 0b		bra $194c3b	                BRA write_fat
.194c30						is_odd2
.194c30		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.194c34		09 f0 ff	ora #$fff0	                ORA #$FFF0
.194c37		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194c3b		22 62 4d 19	jsl $194d62	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.194c3f		b0 07		bcs $194c48	                BCS ret_success                 ; If success: return success
.194c41		e2 20		sep #$20	                SEP #$20        ; set A short
.194c43		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.194c45		82 46 00	brl $194c8e	                BRL ret_failure
.194c48						ret_success
.194c48		e2 20		sep #$20	                SEP #$20        ; set A short
.194c4a		64 0e		stz $032e	                STZ DOS_STATUS
.194c4c		28		plp		                PLP
.194c4d		2b		pld		                PLD
.194c4e		ab		plb		                PLB
.194c4f		fa		plx		                PLX
.194c50		38		sec		                SEC
.194c51		6b		rtl		                RTL
.194c52						next_cluster
.194c52		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.194c54		d0 02		bne $194c58	                BNE calc_entry
.194c56		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.194c58		22 d0 48 19	jsl $1948d0	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.194c5c		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.194c5f		f0 03		beq $194c64	                BEQ chk_end_of_fat
.194c61		82 93 ff	brl $194bf7	                BRL chk_cluster                 ; No: go back and check it too
.194c64						chk_end_of_fat
.194c64		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.194c66		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.194c6a		d0 0f		bne $194c7b	                BNE next_2
.194c6c		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194c6e		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.194c72		d0 07		bne $194c7b	                BNE next_2                      ; No: get the next to sectors
.194c74		e2 20		sep #$20	                SEP #$20        ; set A short
.194c76		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.194c78		82 13 00	brl $194c8e	                BRL ret_failure
.194c7b						next_2
.194c7b		22 5a 4b 19	jsl $194b5a	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.194c7f		90 06		bcc $194c87	                BCC fat_fail                    ; If failed: return error
.194c81		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.194c84		82 70 ff	brl $194bf7	                BRL chk_cluster                 ; And start checking from there
.194c87						fat_fail
.194c87		e2 20		sep #$20	                SEP #$20        ; set A short
.194c89		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194c8b		82 00 00	brl $194c8e	                BRL ret_failure
.194c8e						ret_failure
.194c8e		e2 20		sep #$20	                SEP #$20        ; set A short
.194c90		85 0e		sta $032e	                STA DOS_STATUS
.194c92		28		plp		                PLP
.194c93		2b		pld		                PLD
.194c94		ab		plb		                PLB
.194c95		fa		plx		                PLX
.194c96		18		clc		                CLC
.194c97		6b		rtl		                RTL
.194c98						DOS_FREECLUS32
.194c98		8b		phb		                PHB
.194c99		0b		phd		                PHD
.194c9a		08		php		                PHP
.194c9b		48		pha		                PHA             ; begin setdbr macro
.194c9c		08		php		                PHP
.194c9d		e2 20		sep #$20	                SEP #$20        ; set A short
.194c9f		a9 00		lda #$00	                LDA #0
.194ca1		48		pha		                PHA
.194ca2		ab		plb		                PLB
.194ca3		28		plp		                PLP
.194ca4		68		pla		                PLA             ; end setdbr macro
.194ca5		48		pha		                PHA             ; begin setdp macro
.194ca6		08		php		                PHP
.194ca7		c2 20		rep #$20	                REP #$20        ; set A long
.194ca9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194cac		5b		tcd		                TCD
.194cad		28		plp		                PLP
.194cae		68		pla		                PLA             ; end setdp macro
.194caf		c2 30		rep #$30	                REP #$30        ; set A&X long
.194cb1		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.194cb4		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194cb6		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.194cb9		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194cbb		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.194cbf		85 02		sta $0322	                STA BIOS_LBA
.194cc1		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.194cc5		85 04		sta $0324	                STA BIOS_LBA+2
.194cc7		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.194ccb		b0 07		bcs $194cd4	                BCS initial_entry               ; If OK: set the initial entry to check
.194ccd		e2 20		sep #$20	                SEP #$20        ; set A short
.194ccf		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.194cd1		82 6b 00	brl $194d3f	                BRL ret_failure
.194cd4						initial_entry
.194cd4		c2 20		rep #$20	                REP #$20        ; set A long
.194cd6		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.194cd9		85 10		sta $0330	                STA DOS_CLUS_ID
.194cdb		a9 00 00	lda #$0000	                LDA #0
.194cde		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194ce0		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.194ce3		bf 00 a3 18	lda $18a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.194ce7		d0 06		bne $194cef	                BNE next_entry                  ; No: move to the next entry
.194ce9		bf 02 a3 18	lda $18a302,x	                LDA DOS_SECTOR+2,X
.194ced		f0 36		beq $194d25	                BEQ found_free                  ; Yes: go to allocate and return it
.194cef		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.194cf1		d0 02		bne $194cf5	                BNE inc_ptr
.194cf3		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.194cf5		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.194cf6		e8		inx		                INX
.194cf7		e8		inx		                INX
.194cf8		e8		inx		                INX
.194cf9		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.194cfc		90 e5		bcc $194ce3	                BLT chk_entry                   ; No: check this entry
.194cfe		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.194d00		d0 18		bne $194d1a	                BNE get_block
.194d02		e6 04		inc $0324	                INC BIOS_LBA+2
.194d04		a5 04		lda $0324	                LDA BIOS_LBA+2
.194d06		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.194d0a		90 0e		bcc $194d1a	                BLT get_block
.194d0c		a5 02		lda $0322	                LDA BIOS_LBA
.194d0e		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA
.194d12		90 06		bcc $194d1a	                BLT get_block
.194d14		e2 20		sep #$20	                SEP #$20        ; set A short
.194d16		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.194d18		80 25		bra $194d3f	                BRA ret_failure
.194d1a		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.194d1e		90 1b		bcc $194d3b	                BCC ret_fat_error               ; If error: throw a FAT error
.194d20		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.194d23		80 be		bra $194ce3	                BRA chk_entry                   ; Check this entry
.194d25						found_free
.194d25		c2 20		rep #$20	                REP #$20        ; set A long
.194d27		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.194d2a		9f 00 a3 18	sta $18a300,x	                STA DOS_SECTOR,X
.194d2e		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.194d31		9f 02 a3 18	sta $18a302,x	                STA DOS_SECTOR+2,X
.194d35		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.194d39		b0 0d		bcs $194d48	                BCS ret_success                 ; If OK: return success
.194d3b						ret_fat_error
.194d3b		e2 20		sep #$20	                SEP #$20        ; set A short
.194d3d		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.194d3f						ret_failure
.194d3f		e2 20		sep #$20	                SEP #$20        ; set A short
.194d41		85 0e		sta $032e	                STA DOS_STATUS
.194d43		28		plp		                PLP
.194d44		2b		pld		                PLD
.194d45		ab		plb		                PLB
.194d46		18		clc		                CLC
.194d47		6b		rtl		                RTL
.194d48						ret_success
.194d48		e2 20		sep #$20	                SEP #$20        ; set A short
.194d4a		64 0e		stz $032e	                STZ DOS_STATUS
.194d4c		28		plp		                PLP
.194d4d		2b		pld		                PLD
.194d4e		ab		plb		                PLB
.194d4f		38		sec		                SEC
.194d50		6b		rtl		                RTL
.194d51						DELCLUSTER
.194d51		e2 20		sep #$20	                SEP #$20        ; set A short
.194d53		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194d57		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194d59		d0 04		bne $194d5f	                BNE fat32                       ; No: assume it's FAT32
.194d5b		5c a9 4d 19	jmp $194da9	fat12           JML DELCLUSTER12
.194d5f		4c f7 4d	jmp $194df7	fat32           JMP DELCLUSTER32
.194d62						WRITEFAT12
.194d62		8b		phb		                PHB
.194d63		0b		phd		                PHD
.194d64		48		pha		                PHA             ; begin setdbr macro
.194d65		08		php		                PHP
.194d66		e2 20		sep #$20	                SEP #$20        ; set A short
.194d68		a9 00		lda #$00	                LDA #0
.194d6a		48		pha		                PHA
.194d6b		ab		plb		                PLB
.194d6c		28		plp		                PLP
.194d6d		68		pla		                PLA             ; end setdbr macro
.194d6e		48		pha		                PHA             ; begin setdp macro
.194d6f		08		php		                PHP
.194d70		c2 20		rep #$20	                REP #$20        ; set A long
.194d72		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194d75		5b		tcd		                TCD
.194d76		28		plp		                PLP
.194d77		68		pla		                PLA             ; end setdp macro
.194d78		c2 30		rep #$30	                REP #$30        ; set A&X long
.194d7a		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.194d7d		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194d7f		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.194d82		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194d84		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.194d86		85 02		sta $0322	                STA BIOS_LBA
.194d88		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194d8a		85 04		sta $0324	                STA BIOS_LBA+2
.194d8c		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.194d90		90 14		bcc $194da6	                BCC done
.194d92		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194d95		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194d97		a9 18 00	lda #$0018	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194d9a		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194d9c		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.194d9e		d0 02		bne $194da2	                BNE put_second
.194da0		e6 04		inc $0324	                INC BIOS_LBA+2
.194da2		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.194da6		2b		pld		done            PLD
.194da7		ab		plb		                PLB
.194da8		6b		rtl		                RTL
.194da9						DELCLUSTER12
.194da9		8b		phb		                PHB
.194daa		0b		phd		                PHD
.194dab		08		php		                PHP
.194dac		48		pha		                PHA             ; begin setdbr macro
.194dad		08		php		                PHP
.194dae		e2 20		sep #$20	                SEP #$20        ; set A short
.194db0		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194db2		48		pha		                PHA
.194db3		ab		plb		                PLB
.194db4		28		plp		                PLP
.194db5		68		pla		                PLA             ; end setdbr macro
.194db6		48		pha		                PHA             ; begin setdp macro
.194db7		08		php		                PHP
.194db8		c2 20		rep #$20	                REP #$20        ; set A long
.194dba		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194dbd		5b		tcd		                TCD
.194dbe		28		plp		                PLP
.194dbf		68		pla		                PLA             ; end setdp macro
.194dc0		c2 30		rep #$30	                REP #$30        ; set A&X long
.194dc2		22 43 49 19	jsl $194943	                JSL FATFORCLUSTER12
.194dc6		8a		txa		                TXA                             ; Check to see if the index is odd or even
.194dc7		89 01 00	bit #$0001	                BIT #1
.194dca		d0 08		bne $194dd4	                BNE is_odd
.194dcc		bd 00 a5	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.194dcf		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.194dd2		80 06		bra $194dda	                BRA save_update
.194dd4		bd 00 a5	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.194dd7		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.194dda		9d 00 a5	sta $18a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.194ddd		22 62 4d 19	jsl $194d62	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.194de1		b0 0b		bcs $194dee	                BCS ret_success
.194de3						ret_failure
.194de3		e2 20		sep #$20	                SEP #$20        ; set A short
.194de5		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194de7		85 0e		sta $032e	                STA DOS_STATUS
.194de9		28		plp		                PLP
.194dea		2b		pld		                PLD
.194deb		ab		plb		                PLB
.194dec		18		clc		                CLC
.194ded		6b		rtl		                RTL
.194dee						ret_success
.194dee		e2 20		sep #$20	                SEP #$20        ; set A short
.194df0		64 0e		stz $032e	                STZ DOS_STATUS
.194df2		28		plp		                PLP
.194df3		2b		pld		                PLD
.194df4		ab		plb		                PLB
.194df5		38		sec		                SEC
.194df6		6b		rtl		                RTL
.194df7						DELCLUSTER32
.194df7		8b		phb		                PHB
.194df8		0b		phd		                PHD
.194df9		08		php		                PHP
.194dfa		c2 30		rep #$30	                REP #$30        ; set A&X long
.194dfc		48		pha		                PHA             ; begin setdbr macro
.194dfd		08		php		                PHP
.194dfe		e2 20		sep #$20	                SEP #$20        ; set A short
.194e00		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194e02		48		pha		                PHA
.194e03		ab		plb		                PLB
.194e04		28		plp		                PLP
.194e05		68		pla		                PLA             ; end setdbr macro
.194e06		48		pha		                PHA             ; begin setdp macro
.194e07		08		php		                PHP
.194e08		c2 20		rep #$20	                REP #$20        ; set A long
.194e0a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194e0d		5b		tcd		                TCD
.194e0e		28		plp		                PLP
.194e0f		68		pla		                PLA             ; end setdp macro
.194e10		22 ab 49 19	jsl $1949ab	                JSL FATFORCLUSTER32
.194e14		a9 00 00	lda #$0000	                LDA #0
.194e17		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.194e1a		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.194e1d		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.194e21		b0 0b		bcs $194e2e	                BCS ret_success
.194e23						ret_failure
.194e23		e2 20		sep #$20	                SEP #$20        ; set A short
.194e25		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194e27		85 0e		sta $032e	                STA DOS_STATUS
.194e29		28		plp		                PLP
.194e2a		2b		pld		                PLD
.194e2b		ab		plb		                PLB
.194e2c		18		clc		                CLC
.194e2d		6b		rtl		                RTL
.194e2e						ret_success
.194e2e		e2 20		sep #$20	                SEP #$20        ; set A short
.194e30		64 0e		stz $032e	                STZ DOS_STATUS
.194e32		28		plp		                PLP
.194e33		2b		pld		                PLD
.194e34		ab		plb		                PLB
.194e35		38		sec		                SEC
.194e36		6b		rtl		                RTL
.194e37						DOS_APPENDCLUS
.194e37		8b		phb		                PHB
.194e38		0b		phd		                PHD
.194e39		08		php		                PHP
.194e3a		48		pha		                PHA             ; begin setdbr macro
.194e3b		08		php		                PHP
.194e3c		e2 20		sep #$20	                SEP #$20        ; set A short
.194e3e		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194e40		48		pha		                PHA
.194e41		ab		plb		                PLB
.194e42		28		plp		                PLP
.194e43		68		pla		                PLA             ; end setdbr macro
.194e44		48		pha		                PHA             ; begin setdp macro
.194e45		08		php		                PHP
.194e46		c2 20		rep #$20	                REP #$20        ; set A long
.194e48		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194e4b		5b		tcd		                TCD
.194e4c		28		plp		                PLP
.194e4d		68		pla		                PLA             ; end setdp macro
.194e4e		c2 30		rep #$30	                REP #$30        ; set A&X long
.194e50		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.194e52		48		pha		                PHA
.194e53		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194e55		48		pha		                PHA
.194e56		22 2f 4b 19	jsl $194b2f	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.194e5a		b0 09		bcs $194e65	                BCS save_cluster                ; If we got a cluster, write the data to it
.194e5c		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.194e5d		85 10		sta $0330	                STA DOS_CLUS_ID
.194e5f		68		pla		                PLA
.194e60		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194e62		82 7d 00	brl $194ee2	                BRL pass_failure                ; Pass the failure back up the chain
.194e65		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.194e67		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194e6a		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194e6c		8d 38 a0	sta $18a038	                STA DOS_NEW_CLUSTER+2
.194e6f		22 3f 46 19	jsl $19463f	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.194e73		90 e7		bcc $194e5c	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.194e75		68		pla		                PLA                             ; Restore the cluster of the file
.194e76		85 10		sta $0330	                STA DOS_CLUS_ID
.194e78		68		pla		                PLA
.194e79		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194e7b		22 16 4a 19	jsl $194a16	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.194e7f		b0 fa		bcs $194e7b	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.194e81		e2 20		sep #$20	                SEP #$20        ; set A short
.194e83		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194e87		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194e89		d0 3d		bne $194ec8	                BNE fat32                       ; No: assume it's FAT32
.194e8b						fat12
.194e8b		c2 20		rep #$20	                REP #$20        ; set A long
.194e8d		22 d0 48 19	jsl $1948d0	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.194e91		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.194e93		89 01 00	bit #$0001	                BIT #1
.194e96		d0 11		bne $194ea9	                BNE is_odd
.194e98		ad 36 a0	lda $18a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.194e9b		29 ff 0f	and #$0fff	                AND #$0FFF
.194e9e		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194ea1		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.194ea4		29 00 f0	and #$f000	                AND #$F000
.194ea7		80 10		bra $194eb9	                BRA update_fat12
.194ea9		ad 36 a0	lda $18a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.194eac		0a		asl a		                ASL A
.194ead		0a		asl a		                ASL A
.194eae		0a		asl a		                ASL A
.194eaf		0a		asl a		                ASL A
.194eb0		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194eb3		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.194eb6		29 0f 00	and #$000f	                AND #$000F
.194eb9		0d 36 a0	ora $18a036	update_fat12    ORA DOS_NEW_CLUSTER
.194ebc		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194ebf		22 62 4d 19	jsl $194d62	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.194ec3		b0 22		bcs $194ee7	                BCS ret_success
.194ec5		82 1a 00	brl $194ee2	                BRL pass_failure
.194ec8						fat32
.194ec8		c2 20		rep #$20	                REP #$20        ; set A long
.194eca		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.194ecd		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194ed0		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.194ed3		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.194ed6		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.194eda		b0 0b		bcs $194ee7	                BCS ret_success
.194edc		e2 20		sep #$20	                SEP #$20        ; set A short
.194ede		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.194ee0		85 0e		sta $032e	                STA DOS_STATUS
.194ee2		28		plp		pass_failure    PLP
.194ee3		2b		pld		                PLD
.194ee4		ab		plb		                PLB
.194ee5		18		clc		                CLC
.194ee6		6b		rtl		                RTL
.194ee7						ret_success
.194ee7		e2 20		sep #$20	                SEP #$20        ; set A short
.194ee9		64 0e		stz $032e	                STZ DOS_STATUS
.194eeb		28		plp		                PLP
.194eec		2b		pld		                PLD
.194eed		ab		plb		                PLB
.194eee		38		sec		                SEC
.194eef		6b		rtl		                RTL
.194ef0						BCD2BIN
.194ef0		8b		phb		                PHB
.194ef1		0b		phd		                PHD
.194ef2		08		php		                PHP
.194ef3		48		pha		                PHA             ; begin setdbr macro
.194ef4		08		php		                PHP
.194ef5		e2 20		sep #$20	                SEP #$20        ; set A short
.194ef7		a9 00		lda #$00	                LDA #0
.194ef9		48		pha		                PHA
.194efa		ab		plb		                PLB
.194efb		28		plp		                PLP
.194efc		68		pla		                PLA             ; end setdbr macro
.194efd		48		pha		                PHA             ; begin setdp macro
.194efe		08		php		                PHP
.194eff		c2 20		rep #$20	                REP #$20        ; set A long
.194f01		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194f04		5b		tcd		                TCD
.194f05		28		plp		                PLP
.194f06		68		pla		                PLA             ; end setdp macro
.194f07		c2 30		rep #$30	                REP #$30        ; set A&X long
.194f09		85 28		sta $0348	                STA DOS_TEMP
.194f0b		29 0f 00	and #$000f	                AND #$000F
.194f0e		85 2a		sta $034a	                STA DOS_TEMP+2
.194f10		a5 28		lda $0348	                LDA DOS_TEMP
.194f12		4a		lsr a		                LSR A
.194f13		4a		lsr a		                LSR A
.194f14		4a		lsr a		                LSR A
.194f15		4a		lsr a		                LSR A
.194f16		85 28		sta $0348	                STA DOS_TEMP
.194f18		29 0f 00	and #$000f	                AND #$000F
.194f1b		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194f1f		a9 0a 00	lda #$000a	                LDA #10
.194f22		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194f26		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194f2a		18		clc		                CLC
.194f2b		65 2a		adc $034a	                ADC DOS_TEMP+2
.194f2d		85 2a		sta $034a	                STA DOS_TEMP+2
.194f2f		a5 28		lda $0348	                LDA DOS_TEMP
.194f31		4a		lsr a		                LSR A
.194f32		4a		lsr a		                LSR A
.194f33		4a		lsr a		                LSR A
.194f34		4a		lsr a		                LSR A
.194f35		85 28		sta $0348	                STA DOS_TEMP
.194f37		29 0f 00	and #$000f	                AND #$000F
.194f3a		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194f3e		a9 64 00	lda #$0064	                LDA #100
.194f41		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194f45		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194f49		18		clc		                CLC
.194f4a		65 2a		adc $034a	                ADC DOS_TEMP+2
.194f4c		85 2a		sta $034a	                STA DOS_TEMP+2
.194f4e		a5 28		lda $0348	                LDA DOS_TEMP
.194f50		4a		lsr a		                LSR A
.194f51		4a		lsr a		                LSR A
.194f52		4a		lsr a		                LSR A
.194f53		4a		lsr a		                LSR A
.194f54		29 0f 00	and #$000f	                AND #$000F
.194f57		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194f5b		a9 e8 03	lda #$03e8	                LDA #1000
.194f5e		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194f62		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194f66		18		clc		                CLC
.194f67		65 2a		adc $034a	                ADC DOS_TEMP+2
.194f69		28		plp		                PLP
.194f6a		2b		pld		                PLD
.194f6b		ab		plb		                PLB
.194f6c		6b		rtl		                RTL
.194f6d						DOS_RTCCREATE
.194f6d		8b		phb		                PHB
.194f6e		0b		phd		                PHD
.194f6f		08		php		                PHP
.194f70		48		pha		                PHA             ; begin setdbr macro
.194f71		08		php		                PHP
.194f72		e2 20		sep #$20	                SEP #$20        ; set A short
.194f74		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194f76		48		pha		                PHA
.194f77		ab		plb		                PLB
.194f78		28		plp		                PLP
.194f79		68		pla		                PLA             ; end setdbr macro
.194f7a		48		pha		                PHA             ; begin setdp macro
.194f7b		08		php		                PHP
.194f7c		c2 20		rep #$20	                REP #$20        ; set A long
.194f7e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194f81		5b		tcd		                TCD
.194f82		28		plp		                PLP
.194f83		68		pla		                PLA             ; end setdp macro
.194f84		c2 10		rep #$10	                REP #$10        ; set X long
.194f86		e2 20		sep #$20	                SEP #$20        ; set A short
.194f88		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.194f8c		09 08		ora #$08	                ORA #%00001000
.194f8e		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.194f92		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.194f96		85 29		sta $0349	                STA DOS_TEMP+1
.194f98		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.194f9c		85 28		sta $0348	                STA DOS_TEMP
.194f9e		c2 20		rep #$20	                REP #$20        ; set A long
.194fa0		a5 28		lda $0348	                LDA DOS_TEMP
.194fa2		22 f0 4e 19	jsl $194ef0	                JSL BCD2BIN                 ; Convert it to binary
.194fa6		85 28		sta $0348	                STA DOS_TEMP
.194fa8		38		sec		                SEC                         ; Year is relative to 1980
.194fa9		e9 bc 07	sbc #$07bc	                SBC #1980
.194fac		c2 20		rep #$20	                REP #$20        ; set A long
.194fae		0a		asl a		                ASL A
.194faf		0a		asl a		                ASL A
.194fb0		0a		asl a		                ASL A
.194fb1		0a		asl a		                ASL A
.194fb2		0a		asl a		                ASL A
.194fb3		0a		asl a		                ASL A
.194fb4		0a		asl a		                ASL A
.194fb5		0a		asl a		                ASL A
.194fb6		0a		asl a		                ASL A
.194fb7		29 00 fe	and #$fe00	                AND #$FE00
.194fba		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194fbd		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194fbf		e2 20		sep #$20	                SEP #$20        ; set A short
.194fc1		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.194fc5		c2 20		rep #$20	                REP #$20        ; set A long
.194fc7		29 ff 00	and #$00ff	                AND #$00FF
.194fca		22 f0 4e 19	jsl $194ef0	                JSL BCD2BIN                 ; Convert it to binary
.194fce		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.194fd1		0a		asl a		                ASL A
.194fd2		0a		asl a		                ASL A
.194fd3		0a		asl a		                ASL A
.194fd4		0a		asl a		                ASL A
.194fd5		0a		asl a		                ASL A
.194fd6		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.194fd9		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194fdc		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194fde		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194fe0		e2 20		sep #$20	                SEP #$20        ; set A short
.194fe2		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.194fe6		c2 20		rep #$20	                REP #$20        ; set A long
.194fe8		29 ff 00	and #$00ff	                AND #$00FF
.194feb		22 f0 4e 19	jsl $194ef0	                JSL BCD2BIN                 ; Convert it to binary
.194fef		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.194ff2		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194ff5		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194ff7		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194ff9		e2 20		sep #$20	                SEP #$20        ; set A short
.194ffb		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.194fff		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.195001		c2 20		rep #$20	                REP #$20        ; set A long
.195003		29 ff 00	and #$00ff	                AND #$00FF
.195006		22 f0 4e 19	jsl $194ef0	                JSL BCD2BIN                 ; Convert it to binary
.19500a		c2 20		rep #$20	                REP #$20        ; set A long
.19500c		0a		asl a		                ASL A
.19500d		0a		asl a		                ASL A
.19500e		0a		asl a		                ASL A
.19500f		0a		asl a		                ASL A
.195010		0a		asl a		                ASL A
.195011		0a		asl a		                ASL A
.195012		0a		asl a		                ASL A
.195013		0a		asl a		                ASL A
.195014		0a		asl a		                ASL A
.195015		0a		asl a		                ASL A
.195016		0a		asl a		                ASL A
.195017		29 00 f8	and #$f800	                AND #$F800
.19501a		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.19501d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19501f		e2 20		sep #$20	                SEP #$20        ; set A short
.195021		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.195025		c2 20		rep #$20	                REP #$20        ; set A long
.195027		29 ff 00	and #$00ff	                AND #$00FF
.19502a		22 f0 4e 19	jsl $194ef0	                JSL BCD2BIN                 ; Convert it to binary
.19502e		c2 20		rep #$20	                REP #$20        ; set A long
.195030		0a		asl a		                ASL A
.195031		0a		asl a		                ASL A
.195032		0a		asl a		                ASL A
.195033		0a		asl a		                ASL A
.195034		0a		asl a		                ASL A
.195035		29 e0 07	and #$07e0	                AND #$07E0
.195038		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.19503b		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.19503d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19503f		e2 20		sep #$20	                SEP #$20        ; set A short
.195041		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.195045		c2 20		rep #$20	                REP #$20        ; set A long
.195047		29 ff 00	and #$00ff	                AND #$00FF
.19504a		22 f0 4e 19	jsl $194ef0	                JSL BCD2BIN                 ; Convert it to binary
.19504e		c2 20		rep #$20	                REP #$20        ; set A long
.195050		29 1f 00	and #$001f	                AND #$001F
.195053		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.195056		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.195058		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19505a		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.19505e		29 f7 00	and #$00f7	                AND #%11110111
.195061		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.195065		28		plp		                PLP
.195066		2b		pld		                PLD
.195067		ab		plb		                PLB
.195068		6b		rtl		                RTL
.195069						DOS_CREATE
.195069		8b		phb		                PHB
.19506a		0b		phd		                PHD
.19506b		08		php		                PHP
.19506c		48		pha		                PHA             ; begin setdbr macro
.19506d		08		php		                PHP
.19506e		e2 20		sep #$20	                SEP #$20        ; set A short
.195070		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195072		48		pha		                PHA
.195073		ab		plb		                PLB
.195074		28		plp		                PLP
.195075		68		pla		                PLA             ; end setdbr macro
.195076		48		pha		                PHA             ; begin setdp macro
.195077		08		php		                PHP
.195078		c2 20		rep #$20	                REP #$20        ; set A long
.19507a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19507d		5b		tcd		                TCD
.19507e		28		plp		                PLP
.19507f		68		pla		                PLA             ; end setdp macro
.195080		c2 30		rep #$30	                REP #$30        ; set A&X long
.195082		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.195085		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195087		85 28		sta $0348	                STA DOS_TEMP
.195089		c8		iny		                INY
.19508a		c8		iny		                INY
.19508b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19508d		85 2a		sta $034a	                STA DOS_TEMP+2
.19508f		e2 20		sep #$20	                SEP #$20        ; set A short
.195091		a0 00 00	ldy #$0000	                LDY #0
.195094		a2 00 00	ldx #$0000	                LDX #0
.195097		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.195099		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.19509b		f0 04		beq $1950a1	                BEQ find_file                   ; If it's NULL, we're done
.19509d		e8		inx		                INX
.19509e		c8		iny		                INY
.19509f		80 f6		bra $195097	                BRA path_loop
.1950a1		22 50 47 19	jsl $194750	find_file       JSL DOS_PARSE_PATH
.1950a5		22 e8 47 19	jsl $1947e8	                JSL DOS_FINDFILE
.1950a9		90 07		bcc $1950b2	                BCC set_device
.1950ab		e2 20		sep #$20	                SEP #$20        ; set A short
.1950ad		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.1950af		82 d2 00	brl $195184	                BRL ret_failure
.1950b2						set_device
.1950b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1950b4		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.1950b7		a5 01		lda $0321	                LDA BIOS_DEV
.1950b9		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1950bb						validate_name
.1950bb		22 2f 4b 19	jsl $194b2f	                JSL DOS_FREECLUS
.1950bf		b0 03		bcs $1950c4	                BCS save_data
.1950c1		82 c4 00	brl $195188	                BRL pass_failure
.1950c4						save_data
.1950c4		c2 20		rep #$20	                REP #$20        ; set A long
.1950c6		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.1950c9		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.1950cb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1950cd		c8		iny		                INY
.1950ce		c8		iny		                INY
.1950cf		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1950d1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1950d3		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.1950d6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950d8		85 1c		sta $033c	                STA DOS_BUFF_PTR
.1950da		c8		iny		                INY
.1950db		c8		iny		                INY
.1950dc		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950de		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.1950e0		22 3f 46 19	jsl $19463f	                JSL DOS_PUTCLUSTER
.1950e4		b0 00		bcs $1950e6	                BCS find_dir
.1950e6						find_dir
.1950e6		c2 20		rep #$20	                REP #$20        ; set A long
.1950e8		22 7a 41 19	jsl $19417a	                JSL DOS_DIRFINDFREE
.1950ec		b0 1a		bcs $195108	                BCS set_entry
.1950ee		c2 20		rep #$20	                REP #$20        ; set A long
.1950f0		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.1950f3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.1950f5		85 10		sta $0330	                STA DOS_CLUS_ID
.1950f7		c8		iny		                INY
.1950f8		c8		iny		                INY
.1950f9		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950fb		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1950fd		22 f7 4d 19	jsl $194df7	                JSL DELCLUSTER32                ; Delete the cluster
.195101		e2 20		sep #$20	                SEP #$20        ; set A short
.195103		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.195105		82 7c 00	brl $195184	                BRL ret_failure
.195108						set_entry
.195108		e2 20		sep #$20	                SEP #$20        ; set A short
.19510a		a0 00 00	ldy #$0000	                LDY #0
.19510d		a9 00		lda #$00	                LDA #0                          ; NULL
.19510f		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.195111		c8		iny		                INY
.195112		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.195115		d0 f8		bne $19510f	                BNE copy_dir_loop
.195117		a0 00 00	ldy #$0000	                LDY #0
.19511a		b9 3a a0	lda $18a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.19511d		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.19511f		c8		iny		                INY
.195120		c0 0b 00	cpy #$000b	                CPY #11
.195123		d0 f5		bne $19511a	                BNE name_loop
.195125		c2 20		rep #$20	                REP #$20        ; set A long
.195127		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.19512a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19512c		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.19512f		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.195131		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.195134		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195136		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.195139		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.19513b		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.19513e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195140		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.195143		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.195145		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.195148		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19514a		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.19514d		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.19514f		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.195152		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.195155		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195157		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.19515a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19515c		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.19515f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195161		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.195164		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.195166		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.195169		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.19516b		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.19516e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195170		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.195173		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.195175		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.195178		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.19517a		c2 20		rep #$20	                REP #$20        ; set A long
.19517c		22 38 42 19	jsl $194238	                JSL DOS_DIRWRITE
.195180		b0 0b		bcs $19518d	                BCS ret_success
.195182		80 04		bra $195188	                BRA pass_failure
.195184						ret_failure
.195184		e2 20		sep #$20	                SEP #$20        ; set A short
.195186		85 0e		sta $032e	                STA DOS_STATUS
.195188		28		plp		pass_failure    PLP
.195189		2b		pld		                PLD
.19518a		ab		plb		                PLB
.19518b		18		clc		                CLC
.19518c		6b		rtl		                RTL
.19518d						ret_success
.19518d		e2 20		sep #$20	                SEP #$20        ; set A short
.19518f		64 0e		stz $032e	                STZ DOS_STATUS
.195191		28		plp		                PLP
.195192		2b		pld		                PLD
.195193		ab		plb		                PLB
.195194		38		sec		                SEC
.195195		6b		rtl		                RTL
.195196						DOS_COPYPATH
.195196		da		phx		                PHX
.195197		5a		phy		                PHY
.195198		8b		phb		                PHB
.195199		0b		phd		                PHD
.19519a		08		php		                PHP
.19519b		48		pha		                PHA             ; begin setdbr macro
.19519c		08		php		                PHP
.19519d		e2 20		sep #$20	                SEP #$20        ; set A short
.19519f		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1951a1		48		pha		                PHA
.1951a2		ab		plb		                PLB
.1951a3		28		plp		                PLP
.1951a4		68		pla		                PLA             ; end setdbr macro
.1951a5		48		pha		                PHA             ; begin setdp macro
.1951a6		08		php		                PHP
.1951a7		c2 20		rep #$20	                REP #$20        ; set A long
.1951a9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1951ac		5b		tcd		                TCD
.1951ad		28		plp		                PLP
.1951ae		68		pla		                PLA             ; end setdp macro
.1951af		c2 30		rep #$30	                REP #$30        ; set A&X long
.1951b1		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.1951b4		a2 00 00	ldx #$0000	                LDX #0
.1951b7		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.1951b9		e8		inx		                INX
.1951ba		e8		inx		                INX
.1951bb		e0 00 01	cpx #$0100	                CPX #256
.1951be		d0 f7		bne $1951b7	                BNE clr_loop
.1951c0		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.1951c2		d0 04		bne $1951c8	                BNE get_path            ; No: attempt to fetch the path
.1951c4		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.1951c6		f0 27		beq $1951ef	                BEQ done                ; Yes: return an empty buffer
.1951c8		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.1951cb		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1951cd		85 28		sta $0348	                STA DOS_TEMP
.1951cf		c8		iny		                INY
.1951d0		c8		iny		                INY
.1951d1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1951d3		85 2a		sta $034a	                STA DOS_TEMP+2
.1951d5		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.1951d7		d0 04		bne $1951dd	                BNE start_copy          ; No: start copying it
.1951d9		a5 2a		lda $034a	                LDA DOS_TEMP+2
.1951db		f0 12		beq $1951ef	                BEQ done                ; Yes: return an empty buffer
.1951dd						start_copy
.1951dd		e2 20		sep #$20	                SEP #$20        ; set A short
.1951df		a2 00 00	ldx #$0000	                LDX #0
.1951e2		a0 00 00	ldy #$0000	                LDY #0
.1951e5		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.1951e7		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.1951e9		f0 04		beq $1951ef	                BEQ done
.1951eb		e8		inx		                INX
.1951ec		c8		iny		                INY
.1951ed		d0 f6		bne $1951e5	                BNE loop
.1951ef		28		plp		done            PLP
.1951f0		2b		pld		                PLD
.1951f1		ab		plb		                PLB
.1951f2		7a		ply		                PLY
.1951f3		fa		plx		                PLX
.1951f4		6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.1951f5						DOS_TEST
.1951f5		8b		phb		                PHB
.1951f6		0b		phd		                PHD
.1951f7		08		php		                PHP
.1951f8		48		pha		                PHA             ; begin setdbr macro
.1951f9		08		php		                PHP
.1951fa		e2 20		sep #$20	                SEP #$20        ; set A short
.1951fc		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1951fe		48		pha		                PHA
.1951ff		ab		plb		                PLB
.195200		28		plp		                PLP
.195201		68		pla		                PLA             ; end setdbr macro
.195202		48		pha		                PHA             ; begin setdp macro
.195203		08		php		                PHP
.195204		c2 20		rep #$20	                REP #$20        ; set A long
.195206		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195209		5b		tcd		                TCD
.19520a		28		plp		                PLP
.19520b		68		pla		                PLA             ; end setdp macro
.19520c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19520e		a9 34 52	lda #$5234	                LDA #<>src_file
.195211		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.195215		a9 19 00	lda #$0019	                LDA #`src_file
.195218		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.19521c		a9 41 52	lda #$5241	                LDA #<>dst_file
.19521f		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.195223		a9 19 00	lda #$0019	                LDA #`dst_file
.195226		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.19522a		22 fb 58 19	jsl $1958fb	                JSL IF_COPY
.19522e		b0 00		bcs $195230	                BCS done
.195230		28		plp		done            PLP
.195231		2b		pld		                PLD
.195232		ab		plb		                PLB
.195233		6b		rtl		                RTL
>195234		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>19523c		2e 62 61 73 00
>195241		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>195249		32 2e 62 61 73 00
.19524f						IF_OPEN
.19524f		da		phx		                PHX
.195250		5a		phy		                PHY
.195251		0b		phd		                PHD
.195252		8b		phb		                PHB
.195253		08		php		                PHP
.195254		48		pha		                PHA             ; begin setdbr macro
.195255		08		php		                PHP
.195256		e2 20		sep #$20	                SEP #$20        ; set A short
.195258		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19525a		48		pha		                PHA
.19525b		ab		plb		                PLB
.19525c		28		plp		                PLP
.19525d		68		pla		                PLA             ; end setdbr macro
.19525e		48		pha		                PHA             ; begin setdp macro
.19525f		08		php		                PHP
.195260		c2 20		rep #$20	                REP #$20        ; set A long
.195262		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195265		5b		tcd		                TCD
.195266		28		plp		                PLP
.195267		68		pla		                PLA             ; end setdp macro
.195268		e2 20		sep #$20	                SEP #$20        ; set A short
.19526a		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.19526d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19526f		89 20		bit #$20	                BIT #FD_STAT_OPEN
.195271		f0 05		beq $195278	                BEQ ok_to_open
.195273		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.195275		82 1c 05	brl $195794	                BRL IF_FAILURE
.195278		22 96 51 19	jsl $195196	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.19527c		22 e8 47 19	jsl $1947e8	                JSL DOS_FINDFILE                ; Attempt to find the file
.195280		b0 03		bcs $195285	                BCS is_found                    ; If OK: we found the file
.195282		82 13 05	brl $195798	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.195285						is_found
.195285		e2 20		sep #$20	                SEP #$20        ; set A short
.195287		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.19528a		a5 01		lda $0321	                LDA BIOS_DEV
.19528c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19528e		c2 20		rep #$20	                REP #$20        ; set A long
.195290		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.195293		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195295		85 1c		sta $033c	                STA DOS_BUFF_PTR
.195297		c8		iny		                INY
.195298		c8		iny		                INY
.195299		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19529b		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.19529d		22 02 46 19	jsl $194602	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.1952a1		b0 03		bcs $1952a6	                BCS read_cluster
.1952a3		82 f2 04	brl $195798	                BRL IF_PASSFAILURE
.1952a6		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.1952a9		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1952ab		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1952ad		c8		iny		                INY
.1952ae		c8		iny		                INY
.1952af		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1952b1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1952b3		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.1952b6		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1952b8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1952ba		c8		iny		                INY
.1952bb		c8		iny		                INY
.1952bc		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1952be		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1952c0		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.1952c3		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.1952c5		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.1952c8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1952ca		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.1952cd		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.1952cf		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.1952d2		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1952d4		e2 20		sep #$20	                SEP #$20        ; set A short
.1952d6		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.1952d9		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.1952db		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.1952dd		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1952df		82 bd 04	brl $19579f	                BRL IF_SUCCESS
.1952e2						IF_CREATE
.1952e2		da		phx		                PHX
.1952e3		5a		phy		                PHY
.1952e4		0b		phd		                PHD
.1952e5		8b		phb		                PHB
.1952e6		08		php		                PHP
.1952e7		48		pha		                PHA             ; begin setdbr macro
.1952e8		08		php		                PHP
.1952e9		e2 20		sep #$20	                SEP #$20        ; set A short
.1952eb		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1952ed		48		pha		                PHA
.1952ee		ab		plb		                PLB
.1952ef		28		plp		                PLP
.1952f0		68		pla		                PLA             ; end setdbr macro
.1952f1		48		pha		                PHA             ; begin setdp macro
.1952f2		08		php		                PHP
.1952f3		c2 20		rep #$20	                REP #$20        ; set A long
.1952f5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1952f8		5b		tcd		                TCD
.1952f9		28		plp		                PLP
.1952fa		68		pla		                PLA             ; end setdp macro
.1952fb		22 69 50 19	jsl $195069	                JSL DOS_CREATE                  ; Attempt to create the file
.1952ff		90 18		bcc $195319	                BCC pass_failure                ; If it fails: pass the failure up the chain
.195301		c2 30		rep #$30	                REP #$30        ; set A&X long
.195303		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.195306		a9 00 00	lda #$0000	                LDA #0
.195309		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19530b		c8		iny		                INY
.19530c		c8		iny		                INY
.19530d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19530f		e2 20		sep #$20	                SEP #$20        ; set A short
.195311		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.195314		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.195316		82 86 04	brl $19579f	                BRL IF_SUCCESS
.195319		82 78 04	brl $195794	pass_failure    BRL IF_FAILURE
.19531c						IF_CLOSE
.19531c		da		phx		                PHX
.19531d		5a		phy		                PHY
.19531e		0b		phd		                PHD
.19531f		8b		phb		                PHB
.195320		08		php		                PHP
.195321		48		pha		                PHA             ; begin setdbr macro
.195322		08		php		                PHP
.195323		e2 20		sep #$20	                SEP #$20        ; set A short
.195325		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195327		48		pha		                PHA
.195328		ab		plb		                PLB
.195329		28		plp		                PLP
.19532a		68		pla		                PLA             ; end setdbr macro
.19532b		48		pha		                PHA             ; begin setdp macro
.19532c		08		php		                PHP
.19532d		c2 20		rep #$20	                REP #$20        ; set A long
.19532f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195332		5b		tcd		                TCD
.195333		28		plp		                PLP
.195334		68		pla		                PLA             ; end setdp macro
.195335		e2 20		sep #$20	                SEP #$20        ; set A short
.195337		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.19533a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19533c		89 02		bit #$02	                BIT #FD_STAT_WRITE
.19533e		f0 09		beq $195349	                BEQ set_flag                    ; No, just mark it closed
.195340		22 b5 53 19	jsl $1953b5	                JSL IF_WRITE                    ; Attempt to write the cluster
.195344		b0 03		bcs $195349	                BCS set_flag
.195346		82 4f 04	brl $195798	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.195349		22 99 58 19	jsl $195899	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.19534d		82 4f 04	brl $19579f	                BRL IF_SUCCESS
.195350						IF_READ
.195350		da		phx		                PHX
.195351		5a		phy		                PHY
.195352		0b		phd		                PHD
.195353		8b		phb		                PHB
.195354		08		php		                PHP
.195355		48		pha		                PHA             ; begin setdbr macro
.195356		08		php		                PHP
.195357		e2 20		sep #$20	                SEP #$20        ; set A short
.195359		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19535b		48		pha		                PHA
.19535c		ab		plb		                PLB
.19535d		28		plp		                PLP
.19535e		68		pla		                PLA             ; end setdbr macro
.19535f		48		pha		                PHA             ; begin setdp macro
.195360		08		php		                PHP
.195361		c2 20		rep #$20	                REP #$20        ; set A long
.195363		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195366		5b		tcd		                TCD
.195367		28		plp		                PLP
.195368		68		pla		                PLA             ; end setdp macro
.195369		c2 10		rep #$10	                REP #$10        ; set X long
.19536b		e2 20		sep #$20	                SEP #$20        ; set A short
.19536d						get_dev
.19536d		e2 20		sep #$20	                SEP #$20        ; set A short
.19536f		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.195372		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195374		85 01		sta $0321	                STA BIOS_DEV
.195376		22 6a 43 19	jsl $19436a	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.19537a		c2 20		rep #$20	                REP #$20        ; set A long
.19537c		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.19537f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195381		85 10		sta $0330	                STA DOS_CLUS_ID
.195383		c8		iny		                INY
.195384		c8		iny		                INY
.195385		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195387		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195389		22 16 4a 19	jsl $194a16	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.19538d		90 13		bcc $1953a2	                BCC pass_failure                ; If not OK: pass the failure up the chain
.19538f		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.195392		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195394		85 1c		sta $033c	                STA DOS_BUFF_PTR
.195396		c8		iny		                INY
.195397		c8		iny		                INY
.195398		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19539a		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.19539c		22 02 46 19	jsl $194602	                JSL DOS_GETCLUSTER              ; Get the cluster
.1953a0		b0 03		bcs $1953a5	                BCS ret_success                 ; If ok: return success
.1953a2						pass_failure
.1953a2		82 f3 03	brl $195798	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.1953a5		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.1953a8		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1953aa		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1953ac		c8		iny		                INY
.1953ad		c8		iny		                INY
.1953ae		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1953b0		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1953b2		82 ea 03	brl $19579f	                BRL IF_SUCCESS
.1953b5						IF_WRITE
.1953b5		da		phx		                PHX
.1953b6		5a		phy		                PHY
.1953b7		0b		phd		                PHD
.1953b8		8b		phb		                PHB
.1953b9		08		php		                PHP
.1953ba		48		pha		                PHA             ; begin setdbr macro
.1953bb		08		php		                PHP
.1953bc		e2 20		sep #$20	                SEP #$20        ; set A short
.1953be		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1953c0		48		pha		                PHA
.1953c1		ab		plb		                PLB
.1953c2		28		plp		                PLP
.1953c3		68		pla		                PLA             ; end setdbr macro
.1953c4		48		pha		                PHA             ; begin setdp macro
.1953c5		08		php		                PHP
.1953c6		c2 20		rep #$20	                REP #$20        ; set A long
.1953c8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1953cb		5b		tcd		                TCD
.1953cc		28		plp		                PLP
.1953cd		68		pla		                PLA             ; end setdp macro
.1953ce		c2 10		rep #$10	                REP #$10        ; set X long
.1953d0		e2 20		sep #$20	                SEP #$20        ; set A short
.1953d2		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.1953d5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953d7		85 01		sta $0321	                STA BIOS_DEV
.1953d9		22 6a 43 19	jsl $19436a	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.1953dd		c2 20		rep #$20	                REP #$20        ; set A long
.1953df		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.1953e2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953e4		85 1c		sta $033c	                STA DOS_BUFF_PTR
.1953e6		c8		iny		                INY
.1953e7		c8		iny		                INY
.1953e8		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953ea		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.1953ec		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.1953ef		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953f1		85 10		sta $0330	                STA DOS_CLUS_ID
.1953f3		c8		iny		                INY
.1953f4		c8		iny		                INY
.1953f5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953f7		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1953f9		d0 1a		bne $195415	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.1953fb		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1953fd		d0 16		bne $195415	                BNE rewrite_cluster
.1953ff		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.195402		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195404		85 10		sta $0330	                STA DOS_CLUS_ID
.195406		c8		iny		                INY
.195407		c8		iny		                INY
.195408		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19540a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19540c		22 37 4e 19	jsl $194e37	                JSL DOS_APPENDCLUS              ; Append the cluster
.195410		b0 0c		bcs $19541e	                BCS ret_success                 ; If OK: return success
.195412		82 83 03	brl $195798	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.195415		22 3f 46 19	jsl $19463f	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.195419		b0 03		bcs $19541e	                BCS ret_success                 ; If ok: return success
.19541b		82 7a 03	brl $195798	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.19541e		82 7e 03	brl $19579f	ret_success     BRL IF_SUCCESS
.195421						IF_DIROPEN
.195421		da		phx		                PHX
.195422		5a		phy		                PHY
.195423		0b		phd		                PHD
.195424		8b		phb		                PHB
.195425		08		php		                PHP
.195426		48		pha		                PHA             ; begin setdbr macro
.195427		08		php		                PHP
.195428		e2 20		sep #$20	                SEP #$20        ; set A short
.19542a		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19542c		48		pha		                PHA
.19542d		ab		plb		                PLB
.19542e		28		plp		                PLP
.19542f		68		pla		                PLA             ; end setdbr macro
.195430		48		pha		                PHA             ; begin setdp macro
.195431		08		php		                PHP
.195432		c2 20		rep #$20	                REP #$20        ; set A long
.195434		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195437		5b		tcd		                TCD
.195438		28		plp		                PLP
.195439		68		pla		                PLA             ; end setdp macro
.19543a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19543c		22 96 51 19	jsl $195196	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.195440		22 50 47 19	jsl $194750	                JSL DOS_PARSE_PATH          ; Parse the path
.195444		22 6a 43 19	jsl $19436a	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.195448		b0 03		bcs $19544d	                BCS get_root_dir            ; If successful: get the root directory
.19544a		82 4b 03	brl $195798	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.19544d						get_root_dir
.19544d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19544f		22 1f 40 19	jsl $19401f	                JSL DOS_DIROPEN
.195453		b0 03		bcs $195458	                BCS success
.195455		82 40 03	brl $195798	                BRL IF_PASSFAILURE
.195458		82 44 03	brl $19579f	success         BRL IF_SUCCESS
.19545b						IF_DIRNEXT
.19545b		5c b9 40 19	jmp $1940b9	                JML DOS_DIRNEXT
.19545f						IF_DELETE
.19545f		da		phx		                PHX
.195460		5a		phy		                PHY
.195461		0b		phd		                PHD
.195462		8b		phb		                PHB
.195463		08		php		                PHP
.195464		48		pha		                PHA             ; begin setdbr macro
.195465		08		php		                PHP
.195466		e2 20		sep #$20	                SEP #$20        ; set A short
.195468		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19546a		48		pha		                PHA
.19546b		ab		plb		                PLB
.19546c		28		plp		                PLP
.19546d		68		pla		                PLA             ; end setdbr macro
.19546e		48		pha		                PHA             ; begin setdp macro
.19546f		08		php		                PHP
.195470		c2 20		rep #$20	                REP #$20        ; set A long
.195472		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195475		5b		tcd		                TCD
.195476		28		plp		                PLP
.195477		68		pla		                PLA             ; end setdp macro
.195478		c2 30		rep #$30	                REP #$30        ; set A&X long
.19547a		22 e8 47 19	jsl $1947e8	                JSL DOS_FINDFILE
.19547e		b0 03		bcs $195483	                BCS get_first_clus
.195480		82 15 03	brl $195798	                BRL IF_PASSFAILURE
.195483						get_first_clus
.195483		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.195486		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.195488		85 10		sta $0330	                STA DOS_CLUS_ID
.19548a		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.19548d		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.19548f		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195491		a5 10		lda $0330	                LDA DOS_CLUS_ID
.195493		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.195496		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.195498		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.19549b		22 16 4a 19	jsl $194a16	del_loop        JSL NEXTCLUSTER
.19549f		90 2f		bcc $1954d0	                BCC del_one
.1954a1		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1954a3		8d 2e a0	sta $18a02e	                STA DOS_NEXT_CLUS
.1954a6		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1954a8		8d 30 a0	sta $18a030	                STA DOS_NEXT_CLUS+2
.1954ab		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.1954ae		85 10		sta $0330	                STA DOS_CLUS_ID
.1954b0		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.1954b3		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1954b5		22 f7 4d 19	jsl $194df7	                JSL DELCLUSTER32
.1954b9		b0 03		bcs $1954be	                BCS go_next
.1954bb		82 da 02	brl $195798	                BRL IF_PASSFAILURE
.1954be						go_next
.1954be		ad 2e a0	lda $18a02e	                LDA DOS_NEXT_CLUS
.1954c1		85 10		sta $0330	                STA DOS_CLUS_ID
.1954c3		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.1954c6		ad 30 a0	lda $18a030	                LDA DOS_NEXT_CLUS+2
.1954c9		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1954cb		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.1954ce		80 cb		bra $19549b	                BRA del_loop
.1954d0						del_one
.1954d0		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.1954d3		85 10		sta $0330	                STA DOS_CLUS_ID
.1954d5		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.1954d8		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1954da		22 51 4d 19	jsl $194d51	                JSL DELCLUSTER
.1954de		b0 03		bcs $1954e3	                BCS free_dir_entry
.1954e0		82 b5 02	brl $195798	                BRL IF_PASSFAILURE
.1954e3						free_dir_entry
.1954e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1954e5		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.1954e8		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.1954ea		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.1954ec		22 38 42 19	jsl $194238	                JSL DOS_DIRWRITE                ; Write the directory entry back
.1954f0		b0 03		bcs $1954f5	                BCS ret_success
.1954f2		82 a3 02	brl $195798	                BRL IF_PASSFAILURE
.1954f5		82 a7 02	brl $19579f	ret_success     BRL IF_SUCCESS
.1954f8						IF_DIRREAD
.1954f8		da		phx		                PHX
.1954f9		5a		phy		                PHY
.1954fa		0b		phd		                PHD
.1954fb		8b		phb		                PHB
.1954fc		08		php		                PHP
.1954fd		48		pha		                PHA             ; begin setdbr macro
.1954fe		08		php		                PHP
.1954ff		e2 20		sep #$20	                SEP #$20        ; set A short
.195501		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195503		48		pha		                PHA
.195504		ab		plb		                PLB
.195505		28		plp		                PLP
.195506		68		pla		                PLA             ; end setdbr macro
.195507		48		pha		                PHA             ; begin setdp macro
.195508		08		php		                PHP
.195509		c2 20		rep #$20	                REP #$20        ; set A long
.19550b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19550e		5b		tcd		                TCD
.19550f		28		plp		                PLP
.195510		68		pla		                PLA             ; end setdp macro
.195511		c2 30		rep #$30	                REP #$30        ; set A&X long
.195513		22 e8 47 19	jsl $1947e8	                JSL DOS_FINDFILE
.195517		b0 03		bcs $19551c	                BCS success
.195519		82 78 02	brl $195794	                BRL IF_FAILURE
.19551c		82 80 02	brl $19579f	success         BRL IF_SUCCESS
.19551f						IF_DIRWRITE
.19551f		5c 38 42 19	jmp $194238	                JML DOS_DIRWRITE
.195523						IF_LOAD
.195523		da		phx		                PHX
.195524		5a		phy		                PHY
.195525		0b		phd		                PHD
.195526		8b		phb		                PHB
.195527		08		php		                PHP
.195528		48		pha		                PHA             ; begin setdbr macro
.195529		08		php		                PHP
.19552a		e2 20		sep #$20	                SEP #$20        ; set A short
.19552c		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19552e		48		pha		                PHA
.19552f		ab		plb		                PLB
.195530		28		plp		                PLP
.195531		68		pla		                PLA             ; end setdbr macro
.195532		48		pha		                PHA             ; begin setdp macro
.195533		08		php		                PHP
.195534		c2 20		rep #$20	                REP #$20        ; set A long
.195536		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195539		5b		tcd		                TCD
.19553a		28		plp		                PLP
.19553b		68		pla		                PLA             ; end setdp macro
.19553c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19553e		22 4f 52 19	jsl $19524f	                JSL IF_OPEN
.195542		b0 03		bcs $195547	                BCS setup                   ; If success: start setting things up
.195544		82 51 02	brl $195798	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.195547						setup
.195547		c2 20		rep #$20	                REP #$20        ; set A long
.195549		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.19554c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19554e		85 2c		sta $034c	                STA DOS_FILE_SIZE
.195550		c8		iny		                INY
.195551		c8		iny		                INY
.195552		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195554		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.195556		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.195559		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19555b		85 30		sta $0350	                STA DOS_SRC_PTR
.19555d		c8		iny		                INY
.19555e		c8		iny		                INY
.19555f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195561		85 32		sta $0352	                STA DOS_SRC_PTR+2
.195563		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.195565		c9 40 00	cmp #$0040	                CMP #$0040
.195568		b0 04		bcs $19556e	                BGE load_by_type            ; No: try to load it by type
.19556a		5c 49 56 19	jmp $195649	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.19556e		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.195571		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.195574						type_loop
.195574		e2 20		sep #$20	                SEP #$20        ; set A short
.195576		bf ba 55 19	lda $1955ba,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.19557a		f0 37		beq $1955b3	                BEQ no_match                ; If NULL... we didn't get a match
.19557c		d9 3a a0	cmp $18a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.19557f		d0 28		bne $1955a9	                BNE next_entry              ; If they don't match, try the next entry
.195581		bf bb 55 19	lda $1955bb,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.195585		d9 3b a0	cmp $18a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.195588		d0 1f		bne $1955a9	                BNE next_entry              ; If they don't match, try the next entry
.19558a		bf bc 55 19	lda $1955bc,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.19558e		d9 3c a0	cmp $18a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.195591		d0 16		bne $1955a9	                BNE next_entry              ; If they don't match, try the next entry
.195593		c2 20		rep #$20	                REP #$20        ; set A long
.195595		bf bd 55 19	lda $1955bd,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.195599		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.19559b		e2 20		sep #$20	                SEP #$20        ; set A short
.19559d		bf bf 55 19	lda $1955bf,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.1955a1		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.1955a3		a2 00 00	ldx #$0000	                LDX #0
.1955a6		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.1955a9						next_entry
.1955a9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1955ab		8a		txa		                TXA
.1955ac		18		clc		                CLC
.1955ad		69 06 00	adc #$0006	                ADC #6
.1955b0		aa		tax		                TAX
.1955b1		80 c1		bra $195574	                BRA type_loop               ; And check it against the file
.1955b3						no_match
.1955b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1955b5		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.1955b7		82 da 01	brl $195794	                BRL IF_FAILURE
>1955ba		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>1955bd		c1 55				                .word <>IF_LOADPGX
>1955bf		19				                .byte `IF_LOADPGX
>1955c0		00				                .byte 0
.1955c1						IF_LOADPGX
.1955c1		c2 10		rep #$10	                REP #$10        ; set X long
.1955c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1955c5		a0 00 00	ldy #$0000	                LDY #0
.1955c8		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.1955ca		c9 50		cmp #$50	                CMP #'P'
.1955cc		d0 15		bne $1955e3	                BNE fail_sig                        ; If not found, fail
.1955ce		c8		iny		                INY
.1955cf		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1955d1		c9 47		cmp #$47	                CMP #'G'
.1955d3		d0 0e		bne $1955e3	                BNE fail_sig
.1955d5		c8		iny		                INY
.1955d6		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1955d8		c9 58		cmp #$58	                CMP #'X'
.1955da		d0 07		bne $1955e3	                BNE fail_sig
.1955dc		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.1955dd		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1955df		c9 01		cmp #$01	                CMP #$01
.1955e1		f0 17		beq $1955fa	                BEQ get_dest                        ; All passes: go to get the destination address
.1955e3		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.1955e5		22 94 57 19	jsl $195794	                JSL IF_FAILURE
.1955e9						adjust_size
.1955e9		c2 20		rep #$20	                REP #$20        ; set A long
.1955eb		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.1955ec		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.1955ee		e9 08 00	sbc #$0008	                SBC #8
.1955f1		85 2c		sta $034c	                STA DOS_FILE_SIZE
.1955f3		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1955f5		e9 00 00	sbc #$0000	                SBC #0
.1955f8		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.1955fa						get_dest
.1955fa		c2 20		rep #$20	                REP #$20        ; set A long
.1955fc		c8		iny		                INY
.1955fd		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.1955ff		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.195601		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.195603		c8		iny		                INY
.195604		c8		iny		                INY
.195605		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.195607		85 36		sta $0356	                STA DOS_DST_PTR+2
.195609		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.19560b		c8		iny		                INY                                 ; Point to the first data byte
.19560c		c8		iny		                INY
.19560d						copy_loop
.19560d		e2 20		sep #$20	                SEP #$20        ; set A short
.19560f		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.195611		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.195613		c2 20		rep #$20	                REP #$20        ; set A long
.195615		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.195617		d0 02		bne $19561b	                BNE dec_file_size
.195619		e6 36		inc $0356	                INC DOS_DST_PTR+2
.19561b		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.19561c		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.19561e		e9 01 00	sbc #$0001	                SBC #1
.195621		85 2c		sta $034c	                STA DOS_FILE_SIZE
.195623		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.195625		e9 00 00	sbc #$0000	                SBC #0
.195628		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.19562a		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.19562c		d0 04		bne $195632	                BNE next_byte
.19562e		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.195630		f0 14		beq $195646	                BEQ done                            ; Yes: we're done
.195632		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.195633		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.195636		d0 d5		bne $19560d	                BNE copy_loop                       ; No: keep copying
.195638		22 1a 4b 19	jsl $194b1a	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.19563c		b0 03		bcs $195641	                BCS next_cluster
.19563e		82 57 01	brl $195798	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.195641		a0 00 00	ldy #$0000	next_cluster    LDY #0
.195644		80 c7		bra $19560d	                BRA copy_loop                       ; Go back to copying
.195646		82 56 01	brl $19579f	done            BRL IF_SUCCESS
.195649						IF_LOADRAW
.195649		c2 30		rep #$30	                REP #$30        ; set A&X long
.19564b		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.19564e						copy_loop
.19564e		e2 20		sep #$20	                SEP #$20        ; set A short
.195650		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.195652		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195654		c2 20		rep #$20	                REP #$20        ; set A long
.195656		38		sec		                SEC                         ; Count down the number of bytes left
.195657		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.195659		e9 01 00	sbc #$0001	                SBC #1
.19565c		85 2c		sta $034c	                STA DOS_FILE_SIZE
.19565e		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.195660		e9 00 00	sbc #$0000	                SBC #0
.195663		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.195665		d0 04		bne $19566b	                BNE continue
.195667		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.195669		f0 1b		beq $195686	                BEQ close_file              ; If not: we're done
.19566b		c8		iny		continue        INY
.19566c		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.19566f		d0 dd		bne $19564e	                BNE copy_loop               ; No: keep processing the bytes
.195671		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.195672		a5 34		lda $0354	                LDA DOS_DST_PTR
.195674		6d 0e a0	adc $18a00e	                ADC CLUSTER_SIZE
.195677		85 34		sta $0354	                STA DOS_DST_PTR
.195679		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.19567b		69 00 00	adc #$0000	                ADC #0
.19567e		85 36		sta $0356	                STA DOS_DST_PTR+2
.195680		22 50 53 19	jsl $195350	                JSL IF_READ                 ; Yes: load the next cluster
.195684		b0 c5		bcs $19564b	                BCS copy_cluster            ; And start copying it
.195686						close_file
.195686		82 16 01	brl $19579f	ret_success     BRL IF_SUCCESS
.195689						IF_NULLBUFFER
.195689		5a		phy		                PHY
.19568a		8b		phb		                PHB
.19568b		0b		phd		                PHD
.19568c		08		php		                PHP
.19568d		48		pha		                PHA             ; begin setdbr macro
.19568e		08		php		                PHP
.19568f		e2 20		sep #$20	                SEP #$20        ; set A short
.195691		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195693		48		pha		                PHA
.195694		ab		plb		                PLB
.195695		28		plp		                PLP
.195696		68		pla		                PLA             ; end setdbr macro
.195697		48		pha		                PHA             ; begin setdp macro
.195698		08		php		                PHP
.195699		c2 20		rep #$20	                REP #$20        ; set A long
.19569b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19569e		5b		tcd		                TCD
.19569f		28		plp		                PLP
.1956a0		68		pla		                PLA             ; end setdp macro
.1956a1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1956a3		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1956a6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1956a8		85 28		sta $0348	                STA DOS_TEMP
.1956aa		c8		iny		                INY
.1956ab		c8		iny		                INY
.1956ac		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1956ae		85 2a		sta $034a	                STA DOS_TEMP+2
.1956b0		a0 00 00	ldy #$0000	                LDY #0
.1956b3		a9 00 00	lda #$0000	                LDA #0
.1956b6		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.1956b8		c8		iny		                INY
.1956b9		c8		iny		                INY
.1956ba		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.1956bd		d0 f7		bne $1956b6	                BNE loop
.1956bf		28		plp		                PLP
.1956c0		2b		pld		                PLD
.1956c1		ab		plb		                PLB
.1956c2		7a		ply		                PLY
.1956c3		6b		rtl		                RTL
.1956c4						IF_COPY2BUFF
.1956c4		5a		phy		                PHY
.1956c5		8b		phb		                PHB
.1956c6		0b		phd		                PHD
.1956c7		08		php		                PHP
.1956c8		48		pha		                PHA             ; begin setdbr macro
.1956c9		08		php		                PHP
.1956ca		e2 20		sep #$20	                SEP #$20        ; set A short
.1956cc		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1956ce		48		pha		                PHA
.1956cf		ab		plb		                PLB
.1956d0		28		plp		                PLP
.1956d1		68		pla		                PLA             ; end setdbr macro
.1956d2		48		pha		                PHA             ; begin setdp macro
.1956d3		08		php		                PHP
.1956d4		c2 20		rep #$20	                REP #$20        ; set A long
.1956d6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1956d9		5b		tcd		                TCD
.1956da		28		plp		                PLP
.1956db		68		pla		                PLA             ; end setdp macro
.1956dc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1956de		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1956e1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1956e3		85 28		sta $0348	                STA DOS_TEMP
.1956e5		c8		iny		                INY
.1956e6		c8		iny		                INY
.1956e7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1956e9		85 2a		sta $034a	                STA DOS_TEMP+2
.1956eb		a0 00 00	ldy #$0000	                LDY #0
.1956ee						copy_loop
.1956ee		e2 20		sep #$20	                SEP #$20        ; set A short
.1956f0		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.1956f2		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.1956f4		c2 20		rep #$20	                REP #$20        ; set A long
.1956f6		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.1956f8		d0 02		bne $1956fc	                BNE adv_dest
.1956fa		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.1956fc		c8		iny		adv_dest        INY                         ; Count it
.1956fd		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.195700		f0 0c		beq $19570e	                BEQ done                    ; Yes: we're done
.195702		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.195704		c5 38		cmp $0358	                CMP DOS_END_PTR
.195706		d0 e6		bne $1956ee	                BNE copy_loop               ; No: keep copying
.195708		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.19570a		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.19570c		d0 e0		bne $1956ee	                BNE copy_loop
.19570e		28		plp		done            PLP
.19570f		2b		pld		                PLD
.195710		ab		plb		                PLB
.195711		7a		ply		                PLY
.195712		6b		rtl		                RTL
.195713						IF_SAVE
.195713		da		phx		                PHX
.195714		5a		phy		                PHY
.195715		0b		phd		                PHD
.195716		8b		phb		                PHB
.195717		08		php		                PHP
.195718		48		pha		                PHA             ; begin setdbr macro
.195719		08		php		                PHP
.19571a		e2 20		sep #$20	                SEP #$20        ; set A short
.19571c		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19571e		48		pha		                PHA
.19571f		ab		plb		                PLB
.195720		28		plp		                PLP
.195721		68		pla		                PLA             ; end setdbr macro
.195722		48		pha		                PHA             ; begin setdp macro
.195723		08		php		                PHP
.195724		c2 20		rep #$20	                REP #$20        ; set A long
.195726		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195729		5b		tcd		                TCD
.19572a		28		plp		                PLP
.19572b		68		pla		                PLA             ; end setdp macro
.19572c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19572e		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.195731		38		sec		                SEC
.195732		a5 38		lda $0358	                LDA DOS_END_PTR
.195734		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.195736		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195738		c8		iny		                INY
.195739		c8		iny		                INY
.19573a		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.19573c		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.19573e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195740		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.195743		18		clc		                CLC
.195744		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195746		69 01 00	adc #$0001	                ADC #1
.195749		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19574b		90 09		bcc $195756	                BCC first_block
.19574d		c8		iny		                INY
.19574e		c8		iny		                INY
.19574f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195751		69 00 00	adc #$0000	                ADC #0
.195754		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195756		22 89 56 19	jsl $195689	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.19575a		22 c4 56 19	jsl $1956c4	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.19575e		22 e2 52 19	jsl $1952e2	                JSL IF_CREATE           ; Create file.
.195762		b0 03		bcs $195767	                BCS check_for_end
.195764		82 31 00	brl $195798	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.195767		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.195769		c5 38		cmp $0358	                CMP DOS_END_PTR
.19576b		d0 06		bne $195773	                BNE next_block
.19576d		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.19576f		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.195771		f0 1d		beq $195790	                BEQ done                ; Yes: we're done
.195773		22 89 56 19	jsl $195689	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.195777		22 c4 56 19	jsl $1956c4	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.19577b		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.19577e		a9 00 00	lda #$0000	                LDA #0
.195781		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195783		c8		iny		                INY
.195784		c8		iny		                INY
.195785		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195787		22 b5 53 19	jsl $1953b5	                JSL IF_WRITE            ; Append to the file
.19578b		b0 da		bcs $195767	                BCS check_for_end       ; And try again
.19578d		82 08 00	brl $195798	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.195790		5c 9f 57 19	jmp $19579f	done            JML IF_SUCCESS
.195794						IF_FAILURE
.195794		e2 20		sep #$20	                SEP #$20        ; set A short
.195796		85 0e		sta $032e	                STA DOS_STATUS
.195798		28		plp		IF_PASSFAILURE  PLP
.195799		18		clc		                CLC
.19579a		ab		plb		                PLB
.19579b		2b		pld		                PLD
.19579c		7a		ply		                PLY
.19579d		fa		plx		                PLX
.19579e		6b		rtl		                RTL
.19579f						IF_SUCCESS
.19579f		e2 20		sep #$20	                SEP #$20        ; set A short
.1957a1		64 00		stz $0320	                STZ BIOS_STATUS
.1957a3		64 0e		stz $032e	                STZ DOS_STATUS
.1957a5		28		plp		                PLP
.1957a6		38		sec		                SEC
.1957a7		ab		plb		                PLB
.1957a8		2b		pld		                PLD
.1957a9		7a		ply		                PLY
.1957aa		fa		plx		                PLX
.1957ab		6b		rtl		                RTL
.1957ac						IF_RUN
.1957ac		da		phx		                PHX
.1957ad		5a		phy		                PHY
.1957ae		0b		phd		                PHD
.1957af		8b		phb		                PHB
.1957b0		08		php		                PHP
.1957b1		48		pha		                PHA             ; begin setdbr macro
.1957b2		08		php		                PHP
.1957b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1957b5		a9 00		lda #$00	                LDA #0
.1957b7		48		pha		                PHA
.1957b8		ab		plb		                PLB
.1957b9		28		plp		                PLP
.1957ba		68		pla		                PLA             ; end setdbr macro
.1957bb		48		pha		                PHA             ; begin setdp macro
.1957bc		08		php		                PHP
.1957bd		c2 20		rep #$20	                REP #$20        ; set A long
.1957bf		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1957c2		5b		tcd		                TCD
.1957c3		28		plp		                PLP
.1957c4		68		pla		                PLA             ; end setdp macro
.1957c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1957c7		c2 10		rep #$10	                REP #$10        ; set X long
.1957c9		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.1957cb		a2 00 00	ldx #$0000	                LDX #0
.1957ce		9f 00 ad 18	sta $18ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.1957d2		e8		inx		                INX
.1957d3		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.1957d6		d0 f6		bne $1957ce	                BNE clr_fd_loop
.1957d8		c2 20		rep #$20	                REP #$20        ; set A long
.1957da		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.1957dd		8f 0e ad 18	sta $18ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.1957e1		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_SECTOR
.1957e4		8f 10 ad 18	sta $18ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.1957e8		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.1957ea		8f 02 ad 18	sta $18ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.1957ee		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.1957f0		8f 04 ad 18	sta $18ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.1957f4		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.1957f7		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.1957f9		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.1957fb		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.1957fe		85 20		sta $0340	                STA DOS_FD_PTR
.195800		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_FD
.195803		85 22		sta $0342	                STA DOS_FD_PTR+2
.195805		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.195808		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.19580c		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.195810		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.195814		b0 14		bcs $19582a	                BCS try_execute
.195816		82 7f ff	brl $195798	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.195819						chk_execute
.195819		c2 20		rep #$20	                REP #$20        ; set A long
.19581b		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.19581d		d0 0b		bne $19582a	                BNE try_execute                         ; If so: call it
.19581f		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.195821		d0 07		bne $19582a	                BNE try_execute
.195823		e2 20		sep #$20	                SEP #$20        ; set A short
.195825		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.195827		82 6a ff	brl $195794	                BRL IF_FAILURE
.19582a						try_execute
.19582a		e2 20		sep #$20	                SEP #$20        ; set A short
.19582c		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.19582e		48		pha		                PHA
.19582f		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.195831		48		pha		                PHA
.195832		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.195834		48		pha		                PHA
.195835		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.195837		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.195839		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.19583d		e2 20		sep #$20	                SEP #$20        ; set A short
.19583f		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.195840		68		pla		                PLA
.195841		68		pla		                PLA
.195842		82 5a ff	brl $19579f	                BRL IF_SUCCESS                          ; Return success
.195845						IF_ALLOCFD
.195845		da		phx		                PHX
.195846		5a		phy		                PHY
.195847		0b		phd		                PHD
.195848		8b		phb		                PHB
.195849		08		php		                PHP
.19584a		48		pha		                PHA             ; begin setdbr macro
.19584b		08		php		                PHP
.19584c		e2 20		sep #$20	                SEP #$20        ; set A short
.19584e		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195850		48		pha		                PHA
.195851		ab		plb		                PLB
.195852		28		plp		                PLP
.195853		68		pla		                PLA             ; end setdbr macro
.195854		48		pha		                PHA             ; begin setdp macro
.195855		08		php		                PHP
.195856		c2 20		rep #$20	                REP #$20        ; set A long
.195858		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19585b		5b		tcd		                TCD
.19585c		28		plp		                PLP
.19585d		68		pla		                PLA             ; end setdp macro
.19585e		c2 10		rep #$10	                REP #$10        ; set X long
.195860		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.195863						chk_fd
.195863		e2 20		sep #$20	                SEP #$20        ; set A short
.195865		bd 20 ad	lda $18ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.195868		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.19586a		f0 14		beq $195880	                BEQ found                           ; No: flag and return the found descriptor
.19586c						next_fd
.19586c		c2 20		rep #$20	                REP #$20        ; set A long
.19586e		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.19586f		18		clc		                CLC
.195870		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.195873		aa		tax		                TAX
.195874		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.195877		90 ea		bcc $195863	                BLT chk_fd                          ; No: check this new file descriptor
.195879		e2 20		sep #$20	                SEP #$20        ; set A short
.19587b		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.19587d		82 14 ff	brl $195794	                BRL IF_FAILURE
.195880		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.195882		9d 20 ad	sta $18ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.195885		c2 20		rep #$20	                REP #$20        ; set A long
.195887		8a		txa		                TXA
.195888		18		clc		                CLC
.195889		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.19588c		85 20		sta $0340	                STA @b DOS_FD_PTR
.19588e		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.195891		69 00 00	adc #$0000	                ADC #0
.195894		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195896		82 06 ff	brl $19579f	                BRL IF_SUCCESS                      ; Return this file descriptor
.195899						IF_FREEFD
.195899		da		phx		                PHX
.19589a		5a		phy		                PHY
.19589b		0b		phd		                PHD
.19589c		8b		phb		                PHB
.19589d		08		php		                PHP
.19589e		48		pha		                PHA             ; begin setdbr macro
.19589f		08		php		                PHP
.1958a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1958a2		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1958a4		48		pha		                PHA
.1958a5		ab		plb		                PLB
.1958a6		28		plp		                PLP
.1958a7		68		pla		                PLA             ; end setdbr macro
.1958a8		48		pha		                PHA             ; begin setdp macro
.1958a9		08		php		                PHP
.1958aa		c2 20		rep #$20	                REP #$20        ; set A long
.1958ac		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1958af		5b		tcd		                TCD
.1958b0		28		plp		                PLP
.1958b1		68		pla		                PLA             ; end setdp macro
.1958b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1958b4		c2 10		rep #$10	                REP #$10        ; set X long
.1958b6		a9 00		lda #$00	                LDA #0
.1958b8		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.1958ba		82 e2 fe	brl $19579f	                BRL IF_SUCCESS
.1958bd						DOS_SRC2DST
.1958bd		da		phx		                PHX
.1958be		5a		phy		                PHY
.1958bf		0b		phd		                PHD
.1958c0		8b		phb		                PHB
.1958c1		08		php		                PHP
.1958c2		48		pha		                PHA             ; begin setdp macro
.1958c3		08		php		                PHP
.1958c4		c2 20		rep #$20	                REP #$20        ; set A long
.1958c6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1958c9		5b		tcd		                TCD
.1958ca		28		plp		                PLP
.1958cb		68		pla		                PLA             ; end setdp macro
.1958cc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1958ce		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1958d1		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1958d3		aa		tax		                TAX                                     ; X := source buffer address
.1958d4		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.1958d6		a8		tay		                TAY                                     ; Y := destination buffer address
.1958d7		e2 20		sep #$20	                SEP #$20        ; set A short
.1958d9		a9 18		lda #$18	                LDA #`DOS_FILE_BUFFS
.1958db		48		pha		                PHA
.1958dc		ab		plb		                PLB
.1958dd		c2 20		rep #$20	                REP #$20        ; set A long
.1958df		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.1958e2		f0 11		beq $1958f5	loop            BEQ done
.1958e4		48		pha		                PHA
.1958e5		e2 20		sep #$20	                SEP #$20        ; set A short
.1958e7		bd 00 00	lda $180000,x	                LDA #0,B,X
.1958ea		99 00 00	sta $180000,y	                STA #0,B,Y
.1958ed		c2 20		rep #$20	                REP #$20        ; set A long
.1958ef		68		pla		                PLA
.1958f0		3a		dec a		                DEC A
.1958f1		e8		inx		                INX
.1958f2		c8		iny		                INY
.1958f3		80 ed		bra $1958e2	                BRA loop
.1958f5		28		plp		done            PLP
.1958f6		ab		plb		                PLB
.1958f7		2b		pld		                PLD
.1958f8		7a		ply		                PLY
.1958f9		fa		plx		                PLX
.1958fa		6b		rtl		                RTL
.1958fb						IF_COPY
.1958fb		da		phx		                PHX
.1958fc		5a		phy		                PHY
.1958fd		0b		phd		                PHD
.1958fe		8b		phb		                PHB
.1958ff		08		php		                PHP
.195900		48		pha		                PHA             ; begin setdbr macro
.195901		08		php		                PHP
.195902		e2 20		sep #$20	                SEP #$20        ; set A short
.195904		a9 00		lda #$00	                LDA #0
.195906		48		pha		                PHA
.195907		ab		plb		                PLB
.195908		28		plp		                PLP
.195909		68		pla		                PLA             ; end setdbr macro
.19590a		48		pha		                PHA             ; begin setdp macro
.19590b		08		php		                PHP
.19590c		c2 20		rep #$20	                REP #$20        ; set A long
.19590e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195911		5b		tcd		                TCD
.195912		28		plp		                PLP
.195913		68		pla		                PLA             ; end setdp macro
.195914		22 45 58 19	jsl $195845	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.195918		b0 03		bcs $19591d	                BCS set_src_path
.19591a		82 7b fe	brl $195798	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.19591d						set_src_path
.19591d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19591f		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.195922		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.195924		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195926		c8		iny		                INY
.195927		c8		iny		                INY
.195928		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.19592a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19592c						alloc_dest
.19592c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19592e		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.195930		85 30		sta $0350	                STA @b DOS_SRC_PTR
.195932		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.195934		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.195936		22 45 58 19	jsl $195845	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.19593a		b0 0f		bcs $19594b	                BCS set_paths                   ; If everything is ok... start setting the paths
.19593c		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.19593e		85 20		sta $0340	                STA @b DOS_FD_PTR
.195940		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195942		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195944		22 99 58 19	jsl $195899	                JSL IF_FREEFD                   ; And free it
.195948		82 4d fe	brl $195798	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.19594b						set_paths
.19594b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19594d		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.19594f		85 34		sta $0354	                STA @b DOS_DST_PTR
.195951		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.195953		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.195955		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.195958		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.19595a		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.19595c		c8		iny		                INY
.19595d		c8		iny		                INY
.19595e		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.195960		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195962		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195964		85 20		sta $0340	                STA @b DOS_FD_PTR
.195966		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195968		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.19596a		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.19596e		b0 10		bcs $195980	                BCS src_open                    ; If success, work with the openned file
.195970		00		brk #		                BRK
.195971		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195973		85 20		sta $0340	                STA @b DOS_FD_PTR
.195975		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195977		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195979		22 99 58 19	jsl $195899	                JSL IF_FREEFD                   ; And free it
.19597d		82 bc ff	brl $19593c	                BRL err_free_src_fd             ; Free the source file descriptor
.195980		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.195983		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195985		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195987		c8		iny		                INY
.195988		c8		iny		                INY
.195989		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.19598b		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.19598d		22 bd 58 19	jsl $1958bd	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.195991		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195993		85 20		sta $0340	                STA @b DOS_FD_PTR
.195995		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195997		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195999		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.19599d		b0 0f		bcs $1959ae	                BCS read_next                   ; If sucessful, try to get the next cluster
.19599f		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.1959a1		85 20		sta $0340	                STA @b DOS_FD_PTR
.1959a3		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.1959a5		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1959a7		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.1959ab		82 c3 ff	brl $195971	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.1959ae						read_next
.1959ae		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.1959b0		85 20		sta $0340	                STA @b DOS_FD_PTR
.1959b2		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.1959b4		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1959b6		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.1959ba		b0 19		bcs $1959d5	                BCS copy2dest                   ; If successful, copy the sector
.1959bc		e2 20		sep #$20	                SEP #$20        ; set A short
.1959be		a5 0e		lda $032e	                LDA @b DOS_STATUS
.1959c0		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.1959c2		f0 32		beq $1959f6	                BEQ file_copied                 ; Yes: we're done copying
.1959c4						err_dest_close
.1959c4		c2 20		rep #$20	                REP #$20        ; set A long
.1959c6		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1959c8		85 20		sta $0340	                STA @b DOS_FD_PTR
.1959ca		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1959cc		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1959ce		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.1959d2		82 ca ff	brl $19599f	                BRL err_src_close               ; Close the source and throw an error
.1959d5						copy2dest
.1959d5		22 bd 58 19	jsl $1958bd	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.1959d9		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.1959dc		a9 00 00	lda #$0000	                LDA #0
.1959df		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1959e1		c8		iny		                INY
.1959e2		c8		iny		                INY
.1959e3		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1959e5		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1959e7		85 20		sta $0340	                STA @b DOS_FD_PTR
.1959e9		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1959eb		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1959ed		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.1959f1		90 d1		bcc $1959c4	                BCC err_dest_close              ; If error: close all files and throw the error
.1959f3		82 b8 ff	brl $1959ae	                BRL read_next                   ; Otherwise: repeat the loop
.1959f6						file_copied
.1959f6		c2 20		rep #$20	                REP #$20        ; set A long
.1959f8		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1959fa		85 20		sta $0340	                STA @b DOS_FD_PTR
.1959fc		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1959fe		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195a00		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.195a04		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195a06		85 20		sta $0340	                STA @b DOS_FD_PTR
.195a08		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195a0a		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195a0c		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.195a10		82 8c fd	brl $19579f	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af18f8					    UART1_BASE = $AF18F8        ; Base address for UART 1 (COM1) in the C256 Foenix U (only 1 Serial port)
=$af18f8					    UART2_BASE = $AF18F8
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.195a13						UART_SELECT
.195a13		08		php		            PHP
.195a14		c2 20		rep #$20	                REP #$20        ; set A long
.195a16		c9 02 00	cmp #$0002	            CMP #2
.195a19		f0 07		beq $195a22	            BEQ is_COM2
.195a1b		c2 20		rep #$20	                REP #$20        ; set A long
.195a1d		a9 f8 18	lda #$18f8	            LDA #<>UART1_BASE
.195a20		80 05		bra $195a27	            BRA setaddr
.195a22						is_COM2
.195a22		c2 20		rep #$20	                REP #$20        ; set A long
.195a24		a9 f8 18	lda #$18f8	            LDA #<>UART2_BASE
.195a27		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.195a2b		e2 20		sep #$20	                SEP #$20        ; set A short
.195a2d		a9 af		lda #$af	            LDA #`UART1_BASE
.195a2f		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.195a33		28		plp		            PLP
.195a34		6b		rtl		            RTL
.195a35						UART_SETBPS
.195a35		08		php		            PHP
.195a36		0b		phd		            PHD
.195a37		48		pha		                PHA             ; begin setdp macro
.195a38		08		php		                PHP
.195a39		c2 20		rep #$20	                REP #$20        ; set A long
.195a3b		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195a3e		5b		tcd		                TCD
.195a3f		28		plp		                PLP
.195a40		68		pla		                PLA             ; end setdp macro
.195a41		c2 30		rep #$30	                REP #$30        ; set A&X long
.195a43		48		pha		            PHA
.195a44		e2 20		sep #$20	                SEP #$20        ; set A short
.195a46		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.195a49		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.195a4b		09 80		ora #$80	            ORA #LCR_DLB
.195a4d		97 00		sta [$0700],y	            STA [CURRUART],Y
.195a4f		c2 20		rep #$20	                REP #$20        ; set A long
.195a51		68		pla		            PLA
.195a52		a0 00 00	ldy #$0000	            LDY #UART_DLL
.195a55		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.195a57		e2 20		sep #$20	                SEP #$20        ; set A short
.195a59		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.195a5c		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.195a5e		49 80		eor #$80	            EOR #LCR_DLB
.195a60		97 00		sta [$0700],y	            STA [CURRUART],Y
.195a62		2b		pld		            PLD
.195a63		28		plp		            PLP
.195a64		6b		rtl		            RTL
.195a65						UART_SETLCR
.195a65		08		php		            PHP
.195a66		0b		phd		            PHD
.195a67		48		pha		                PHA             ; begin setdp macro
.195a68		08		php		                PHP
.195a69		c2 20		rep #$20	                REP #$20        ; set A long
.195a6b		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195a6e		5b		tcd		                TCD
.195a6f		28		plp		                PLP
.195a70		68		pla		                PLA             ; end setdp macro
.195a71		e2 20		sep #$20	                SEP #$20        ; set A short
.195a73		c2 10		rep #$10	                REP #$10        ; set X long
.195a75		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.195a77		a0 03 00	ldy #$0003	            LDY #UART_LCR
.195a7a		97 00		sta [$0700],y	            STA [CURRUART],Y
.195a7c		2b		pld		            PLD
.195a7d		28		plp		            PLP
.195a7e		6b		rtl		            RTL
.195a7f						UART_INIT
.195a7f		08		php		            PHP
.195a80		0b		phd		            PHD
.195a81		c2 30		rep #$30	                REP #$30        ; set A&X long
.195a83		48		pha		                PHA             ; begin setdp macro
.195a84		08		php		                PHP
.195a85		c2 20		rep #$20	                REP #$20        ; set A long
.195a87		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195a8a		5b		tcd		                TCD
.195a8b		28		plp		                PLP
.195a8c		68		pla		                PLA             ; end setdp macro
.195a8d		a9 01 00	lda #$0001	            LDA #UART_115200
.195a90		22 35 5a 19	jsl $195a35	            JSL UART_SETBPS
.195a94		e2 20		sep #$20	                SEP #$20        ; set A short
.195a96		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.195a98		22 65 5a 19	jsl $195a65	            JSL UART_SETLCR
.195a9c		a9 e1		lda #$e1	            LDA #%11100001
.195a9e		a0 02 00	ldy #$0002	            LDY #UART_FCR
.195aa1		97 00		sta [$0700],y	            STA [CURRUART],Y
.195aa3		2b		pld		            PLD
.195aa4		28		plp		            PLP
.195aa5		6b		rtl		            RTL
.195aa6						UART_HASBYT
.195aa6		08		php		            PHP
.195aa7		0b		phd		            PHD
.195aa8		c2 30		rep #$30	                REP #$30        ; set A&X long
.195aaa		48		pha		                PHA             ; begin setdp macro
.195aab		08		php		                PHP
.195aac		c2 20		rep #$20	                REP #$20        ; set A long
.195aae		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195ab1		5b		tcd		                TCD
.195ab2		28		plp		                PLP
.195ab3		68		pla		                PLA             ; end setdp macro
.195ab4		e2 20		sep #$20	                SEP #$20        ; set A short
.195ab6		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.195ab9		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.195abb		29 01		and #$01	            AND #LSR_DATA_AVAIL
.195abd		d0 04		bne $195ac3	            BNE ret_true            ; If flag is set, return true
.195abf		2b		pld		ret_false   PLD                     ; Return false
.195ac0		28		plp		            PLP
.195ac1		18		clc		            CLC
.195ac2		6b		rtl		            RTL
.195ac3		2b		pld		ret_true    PLD                     ; Return true
.195ac4		28		plp		            PLP
.195ac5		38		sec		            SEC
.195ac6		6b		rtl		            RTL
.195ac7						UART_GETC
.195ac7		08		php		            PHP
.195ac8		0b		phd		            PHD
.195ac9		c2 30		rep #$30	                REP #$30        ; set A&X long
.195acb		48		pha		                PHA             ; begin setdp macro
.195acc		08		php		                PHP
.195acd		c2 20		rep #$20	                REP #$20        ; set A long
.195acf		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195ad2		5b		tcd		                TCD
.195ad3		28		plp		                PLP
.195ad4		68		pla		                PLA             ; end setdp macro
.195ad5		e2 20		sep #$20	                SEP #$20        ; set A short
.195ad7		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.195ada		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.195adc		29 01		and #$01	            AND #LSR_DATA_AVAIL
.195ade		f0 fa		beq $195ada	            BEQ wait_getc           ; If the flag is clear, wait
.195ae0		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.195ae3		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.195ae5		2b		pld		            PLD
.195ae6		28		plp		            PLP
.195ae7		6b		rtl		            RTL
.195ae8						UART_PUTC
.195ae8		08		php		            PHP
.195ae9		0b		phd		            PHD
.195aea		c2 30		rep #$30	                REP #$30        ; set A&X long
.195aec		48		pha		                PHA             ; begin setdp macro
.195aed		08		php		                PHP
.195aee		c2 20		rep #$20	                REP #$20        ; set A long
.195af0		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195af3		5b		tcd		                TCD
.195af4		28		plp		                PLP
.195af5		68		pla		                PLA             ; end setdp macro
.195af6		e2 20		sep #$20	                SEP #$20        ; set A short
.195af8		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.195af9		a0 05 00	ldy #$0005	            LDY #UART_LSR
.195afc		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.195afe		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.195b00		f0 fa		beq $195afc	            BEQ wait_putc
.195b02		68		pla		            PLA
.195b03		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.195b06		97 00		sta [$0700],y	            STA [CURRUART],Y
.195b08		2b		pld		            PLD
.195b09		28		plp		            PLP
.195b0a		6b		rtl		            RTL
.195b0b						UART_PUTS
.195b0b		08		php		            PHP
.195b0c		e2 20		sep #$20	                SEP #$20        ; set A short
.195b0e		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.195b11		f0 07		beq $195b1a	            BEQ done
.195b13		22 e8 5a 19	jsl $195ae8	            JSL UART_PUTC
.195b17		e8		inx		            INX
.195b18		80 f4		bra $195b0e	            BRA put_loop
.195b1a		28		plp		done        PLP
.195b1b		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.195b1c						JOYSTICK_SET_NES_MODE
.195b1c		e2 20		sep #$20	                SEP #$20        ; set A short
.195b1e		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195b22		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.195b24		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195b28		6b		rtl		          RTL
.195b29						JOYSTICK_SET_SNES_MODE
.195b29		e2 20		sep #$20	                SEP #$20        ; set A short
.195b2b		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195b2f		29 fb		and #$fb	          AND #~NES_SNES_JOY
.195b31		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.195b33		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195b37		6b		rtl		          RTL
.195b38						JOYSTICK_ENABLE_NES_SNES_PORT0
.195b38		e2 20		sep #$20	                SEP #$20        ; set A short
.195b3a		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195b3e		29 fe		and #$fe	          AND #~NES_SNES_EN0
.195b40		09 01		ora #$01	          ORA #NES_SNES_EN0
.195b42		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195b46		6b		rtl		          RTL
.195b47						JOYSTICK_ENABLE_NES_SNES_PORT1
.195b47		e2 20		sep #$20	                SEP #$20        ; set A short
.195b49		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195b4d		29 fd		and #$fd	          AND #~NES_SNES_EN1
.195b4f		09 02		ora #$02	          ORA #NES_SNES_EN1
.195b51		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195b55		6b		rtl		          RTL
.195b56						JOYSTICK_DISABLE_NES_SNES_PORT0
.195b56		e2 20		sep #$20	                SEP #$20        ; set A short
.195b58		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195b5c		29 fe		and #$fe	          AND #~NES_SNES_EN0
.195b5e		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195b62		6b		rtl		          RTL
.195b63						JOYSTICK_DISABLE_NES_SNES_PORT1
.195b63		e2 20		sep #$20	                SEP #$20        ; set A short
.195b65		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195b69		29 fd		and #$fd	          AND #~NES_SNES_EN1
.195b6b		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195b6f		6b		rtl		          RTL
.195b70						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.195b70		e2 20		sep #$20	                SEP #$20        ; set A short
.195b72		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195b76		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.195b78		c9 00		cmp #$00	          CMP #$00
.195b7a		f0 14		beq $195b90	          BEQ END_OF_JOYSTICK_POLL
.195b7c		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195b80		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.195b82		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195b86						JOYSTICK_POLLING_ISNOTOVER
.195b86		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.195b8a		29 40		and #$40	          AND #NES_SNES_DONE
.195b8c		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.195b8e		d0 f6		bne $195b86	          BNE JOYSTICK_POLLING_ISNOTOVER
.195b90						END_OF_JOYSTICK_POLL
.195b90		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/sdc_library.asm

.195b91						SDC_TEST
.195b91		8b		phb		                PHB
.195b92		0b		phd		                PHD
.195b93		08		php		                PHP
.195b94		48		pha		                PHA             ; begin setdbr macro
.195b95		08		php		                PHP
.195b96		e2 20		sep #$20	                SEP #$20        ; set A short
.195b98		a9 00		lda #$00	                LDA #0
.195b9a		48		pha		                PHA
.195b9b		ab		plb		                PLB
.195b9c		28		plp		                PLP
.195b9d		68		pla		                PLA             ; end setdbr macro
.195b9e		48		pha		                PHA             ; begin setdp macro
.195b9f		08		php		                PHP
.195ba0		c2 20		rep #$20	                REP #$20        ; set A long
.195ba2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195ba5		5b		tcd		                TCD
.195ba6		28		plp		                PLP
.195ba7		68		pla		                PLA             ; end setdp macro
.195ba8		e2 20		sep #$20	                SEP #$20        ; set A short
.195baa		a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.195bac		8d 1e 00	sta $001e	                STA @w CURCOLOR
.195baf		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.195bb3		22 a0 10 00	jsl $0010a0	                JSL CSRHOME
.195bb7		22 f7 5b 19	jsl $195bf7	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.195bbb		b0 03		bcs $195bc0	                BCS init_ok
.195bbd		82 15 00	brl $195bd5	                BRL done
.195bc0		a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.195bc2		85 01		sta $0321	                STA BIOS_DEV
.195bc4		22 6a 43 19	jsl $19436a	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.195bc8		b0 03		bcs $195bcd	                BCS mount_ok
.195bca		82 08 00	brl $195bd5	                BRL done
.195bcd		22 21 54 19	jsl $195421	mount_ok        JSL IF_DIROPEN
.195bd1		b0 02		bcs $195bd5	                BCS all_ok
.195bd3		80 00		bra $195bd5	                BRA done
.195bd5						all_ok
.195bd5		22 6c 10 00	jsl $00106c	done            JSL PRINTCR
.195bd9		28		plp		                PLP
.195bda		2b		pld		                PLD
.195bdb		ab		plb		                PLB
.195bdc		6b		rtl		                RTL
.195bdd						SDC_WAITBUSY
.195bdd		08		php		                PHP
.195bde		e2 20		sep #$20	                SEP #$20        ; set A short
.195be0		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.195be4		29 01		and #$01	                AND #SDC_TRANS_BUSY
.195be6		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.195be8		f0 f6		beq $195be0	                BEQ wait_xact
.195bea		28		plp		                PLP
.195beb		6b		rtl		                RTL
.195bec						SDC_RESET
.195bec		08		php		                PHP
.195bed		e2 20		sep #$20	                SEP #$20        ; set A short
.195bef		a9 01		lda #$01	                LDA #1
.195bf1		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.195bf5		28		plp		                PLP
.195bf6		6b		rtl		                RTL
.195bf7						SDC_INIT
.195bf7		0b		phd		                PHD
.195bf8		8b		phb		                PHB
.195bf9		08		php		                PHP
.195bfa		48		pha		                PHA             ; begin setdbr macro
.195bfb		08		php		                PHP
.195bfc		e2 20		sep #$20	                SEP #$20        ; set A short
.195bfe		a9 00		lda #$00	                LDA #0
.195c00		48		pha		                PHA
.195c01		ab		plb		                PLB
.195c02		28		plp		                PLP
.195c03		68		pla		                PLA             ; end setdbr macro
.195c04		48		pha		                PHA             ; begin setdp macro
.195c05		08		php		                PHP
.195c06		c2 20		rep #$20	                REP #$20        ; set A long
.195c08		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195c0b		5b		tcd		                TCD
.195c0c		28		plp		                PLP
.195c0d		68		pla		                PLA             ; end setdp macro
.195c0e		e2 20		sep #$20	                SEP #$20        ; set A short
.195c10		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.195c14		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.195c16		f0 04		beq $195c1c	                BEQ start_trans                     ; Yes: start the transaction
.195c18		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.195c1a		80 22		bra $195c3e	                BRA set_error
.195c1c		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.195c1e		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.195c22		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195c24		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195c28		22 dd 5b 19	jsl $195bdd	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.195c2c		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195c30		d0 07		bne $195c39	                BNE ret_error                       ; Is there one? Process the error
.195c32		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.195c34		28		plp		                PLP
.195c35		ab		plb		                PLB
.195c36		2b		pld		                PLD
.195c37		38		sec		                SEC
.195c38		6b		rtl		                RTL
.195c39		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.195c3c		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.195c3e		85 00		sta $0320	set_error       STA BIOS_STATUS
.195c40		28		plp		                PLP
.195c41		ab		plb		                PLB
.195c42		2b		pld		                PLD
.195c43		18		clc		                CLC
.195c44		6b		rtl		                RTL
.195c45						SDC_GETBLOCK
.195c45		0b		phd		                PHD
.195c46		8b		phb		                PHB
.195c47		08		php		                PHP
.195c48		48		pha		                PHA             ; begin setdbr macro
.195c49		08		php		                PHP
.195c4a		e2 20		sep #$20	                SEP #$20        ; set A short
.195c4c		a9 00		lda #$00	                LDA #0
.195c4e		48		pha		                PHA
.195c4f		ab		plb		                PLB
.195c50		28		plp		                PLP
.195c51		68		pla		                PLA             ; end setdbr macro
.195c52		48		pha		                PHA             ; begin setdp macro
.195c53		08		php		                PHP
.195c54		c2 20		rep #$20	                REP #$20        ; set A long
.195c56		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195c59		5b		tcd		                TCD
.195c5a		28		plp		                PLP
.195c5b		68		pla		                PLA             ; end setdp macro
.195c5c		e2 20		sep #$20	                SEP #$20        ; set A short
.195c5e		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.195c62		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.195c64		f0 04		beq $195c6a	                BEQ led_on                          ; Yes: turn on the LED
.195c66		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.195c68		80 71		bra $195cdb	                BRA ret_error
.195c6a		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.195c6e		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.195c70		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195c74		a9 00		lda #$00	                LDA #0
.195c76		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.195c7a		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.195c7c		0a		asl a		                ASL A
.195c7d		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.195c81		a5 03		lda $0323	                LDA BIOS_LBA+1
.195c83		2a		rol a		                ROL A
.195c84		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.195c88		a5 04		lda $0324	                LDA BIOS_LBA+2
.195c8a		2a		rol a		                ROL A
.195c8b		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.195c8f		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.195c91		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.195c95		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195c97		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195c9b		22 dd 5b 19	jsl $195bdd	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.195c9f		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195ca3		d0 36		bne $195cdb	                BNE ret_error                       ; Is there one? Process the error
.195ca5		e2 20		sep #$20	                SEP #$20        ; set A short
.195ca7		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.195cab		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.195cad		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.195cb1		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.195cb3		c2 10		rep #$10	                REP #$10        ; set X long
.195cb5		a0 00 00	ldy #$0000	                LDY #0
.195cb8		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.195cbc		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.195cbe		c8		iny		                INY                                 ; Advance to the next byte
.195cbf		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.195cc2		d0 f4		bne $195cb8	                BNE loop_rd                         ; No: keep reading
.195cc4		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195cc8		d0 11		bne $195cdb	                BNE ret_error                       ; Is there one? Process the error
.195cca		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.195ccc		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195cd0		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195cd2		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195cd6		28		plp		                PLP
.195cd7		ab		plb		                PLB
.195cd8		2b		pld		                PLD
.195cd9		38		sec		                SEC
.195cda		6b		rtl		                RTL
.195cdb		85 00		sta $0320	ret_error       STA BIOS_STATUS
.195cdd		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195ce1		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195ce3		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195ce7		28		plp		                PLP
.195ce8		ab		plb		                PLB
.195ce9		2b		pld		                PLD
.195cea		18		clc		                CLC
.195ceb		6b		rtl		                RTL
.195cec						SDC_PUTBLOCK
.195cec		0b		phd		                PHD
.195ced		8b		phb		                PHB
.195cee		08		php		                PHP
.195cef		48		pha		                PHA             ; begin setdbr macro
.195cf0		08		php		                PHP
.195cf1		e2 20		sep #$20	                SEP #$20        ; set A short
.195cf3		a9 00		lda #$00	                LDA #0
.195cf5		48		pha		                PHA
.195cf6		ab		plb		                PLB
.195cf7		28		plp		                PLP
.195cf8		68		pla		                PLA             ; end setdbr macro
.195cf9		48		pha		                PHA             ; begin setdp macro
.195cfa		08		php		                PHP
.195cfb		c2 20		rep #$20	                REP #$20        ; set A long
.195cfd		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195d00		5b		tcd		                TCD
.195d01		28		plp		                PLP
.195d02		68		pla		                PLA             ; end setdp macro
.195d03		e2 20		sep #$20	                SEP #$20        ; set A short
.195d05		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.195d09		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.195d0b		f0 04		beq $195d11	                BEQ check_wp                        ; Yes: check for write protect
.195d0d		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.195d0f		80 65		bra $195d76	                BRA ret_error
.195d11		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.195d13		f0 04		beq $195d19	                BEQ led_on                          ; Yes: start the transaction
.195d15		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.195d17		80 5d		bra $195d76	                BRA ret_error
.195d19		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.195d1d		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.195d1f		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195d23		c2 10		rep #$10	                REP #$10        ; set X long
.195d25		a0 00 00	ldy #$0000	                LDY #0
.195d28		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.195d2a		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.195d2e		c8		iny		                INY                                 ; Advance to the next byte
.195d2f		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.195d32		d0 f4		bne $195d28	                BNE loop_wr                         ; No: keep writing
.195d34		a9 00		lda #$00	                LDA #0
.195d36		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.195d3a		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.195d3c		0a		asl a		                ASL A
.195d3d		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.195d41		a5 03		lda $0323	                LDA BIOS_LBA+1
.195d43		2a		rol a		                ROL A
.195d44		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.195d48		a5 04		lda $0324	                LDA BIOS_LBA+2
.195d4a		2a		rol a		                ROL A
.195d4b		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.195d4f		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.195d51		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.195d55		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195d57		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195d5b		22 dd 5b 19	jsl $195bdd	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.195d5f		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195d63		d0 11		bne $195d76	                BNE ret_error                       ; Is there one? Process the error
.195d65		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.195d67		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195d6b		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195d6d		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195d71		28		plp		                PLP
.195d72		ab		plb		                PLB
.195d73		2b		pld		                PLD
.195d74		38		sec		                SEC
.195d75		6b		rtl		                RTL
.195d76		85 00		sta $0320	ret_error       STA BIOS_STATUS
.195d78		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195d7c		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195d7e		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195d82		28		plp		                PLP
.195d83		ab		plb		                PLB
.195d84		2b		pld		                PLD
.195d85		18		clc		                CLC
.195d86		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.195d87						FDC_TEST
.195d87		8b		phb		                    PHB
.195d88		0b		phd		                    PHD
.195d89		08		php		                    PHP
.195d8a		48		pha		                PHA             ; begin setdbr macro
.195d8b		08		php		                PHP
.195d8c		e2 20		sep #$20	                SEP #$20        ; set A short
.195d8e		a9 00		lda #$00	                LDA #0
.195d90		48		pha		                PHA
.195d91		ab		plb		                PLB
.195d92		28		plp		                PLP
.195d93		68		pla		                PLA             ; end setdbr macro
.195d94		48		pha		                PHA             ; begin setdp macro
.195d95		08		php		                PHP
.195d96		c2 20		rep #$20	                REP #$20        ; set A long
.195d98		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195d9b		5b		tcd		                TCD
.195d9c		28		plp		                PLP
.195d9d		68		pla		                PLA             ; end setdp macro
.195d9e		e2 20		sep #$20	                SEP #$20        ; set A short
.195da0		a9 f0		lda #$f0	                    LDA #$F0
.195da2		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.195da5		22 23 0b 19	jsl $190b23	                    JSL ICLRSCREEN
.195da9		22 47 09 19	jsl $190947	                    JSL ICSRHOME
.195dad		c2 30		rep #$30	                REP #$30        ; set A&X long
.195daf		22 7d 60 19	jsl $19607d	                    JSL FDC_Init
.195db3		b0 03		bcs $195db8	                    BCS init_ok
.195db5		82 20 00	brl $195dd8	                    BRL motor_off
.195db8		22 7c 67 19	jsl $19677c	init_ok             JSL FDC_CHK_MEDIA
.195dbc		90 03		bcc $195dc1	                    BCC no_media
.195dbe		82 03 00	brl $195dc4	                    BRL is_ok1
.195dc1						no_media
.195dc1		82 14 00	brl $195dd8	                    BRL motor_off
.195dc4		22 0f 66 19	jsl $19660f	is_ok1              JSL FDC_MOUNT
.195dc8		90 03		bcc $195dcd	                    BCC mount_err
.195dca		82 03 00	brl $195dd0	                    BRL is_ok2
.195dcd						mount_err
.195dcd		82 08 00	brl $195dd8	                    BRL motor_off
.195dd0		22 e4 5d 19	jsl $195de4	is_ok2              JSL FDC_TEST_PUTBLOCK
.195dd4		b0 02		bcs $195dd8	                    BCS all_ok
.195dd6		80 00		bra $195dd8	                    BRA motor_off
.195dd8						all_ok
.195dd8		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.195ddc		22 2d 61 19	jsl $19612d	                    JSL FDC_Motor_Off
.195de0		28		plp		                    PLP
.195de1		2b		pld		                    PLD
.195de2		ab		plb		                    PLB
.195de3		6b		rtl		                    RTL
.195de4						FDC_TEST_PUTBLOCK
.195de4		e2 20		sep #$20	                SEP #$20        ; set A short
.195de6		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.195de8		a2 00 00	ldx #$0000	                    LDX #0
.195deb		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.195def		1a		inc a		                    INC A
.195df0		e8		inx		                    INX
.195df1		e0 00 02	cpx #$0200	                    CPX #512
.195df4		d0 f5		bne $195deb	                    BNE init_loop
.195df6		c2 20		rep #$20	                REP #$20        ; set A long
.195df8		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.195dfb		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.195dff		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.195e02		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.195e06		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.195e09		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.195e0d		a9 00 00	lda #$0000	                    LDA #0
.195e10		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.195e14		22 a3 65 19	jsl $1965a3	                    JSL FDC_PUTBLOCK                ; Try to write the data
.195e18		6b		rtl		                    RTL
>195e19		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>195e21		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>195e31		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.195e35						FDC_Check_RQM
.195e35		0b		phd		                    PHD
.195e36		08		php		                    PHP
.195e37		48		pha		                PHA             ; begin setdp macro
.195e38		08		php		                PHP
.195e39		c2 20		rep #$20	                REP #$20        ; set A long
.195e3b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195e3e		5b		tcd		                TCD
.195e3f		28		plp		                PLP
.195e40		68		pla		                PLA             ; end setdp macro
.195e41		e2 20		sep #$20	                SEP #$20        ; set A short
.195e43		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195e45		22 19 3f 19	jsl $193f19	                    JSL ISETTIMEOUT
.195e49		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195e4b		30 12		bmi $195e5f	                    BMI time_out            ; If so: signal a time out
.195e4d		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195e51		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.195e53		f0 f4		beq $195e49	                    BEQ loop
.195e55		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195e57		22 19 3f 19	jsl $193f19	                    JSL ISETTIMEOUT
.195e5b		28		plp		                    PLP
.195e5c		2b		pld		                    PLD
.195e5d		38		sec		                    SEC
.195e5e		60		rts		                    RTS
.195e5f		28		plp		time_out            PLP
.195e60		2b		pld		                    PLD
.195e61		18		clc		                    CLC
.195e62		60		rts		                    RTS
.195e63						FDC_Check_DRV0_BSY
.195e63		0b		phd		                    PHD
.195e64		08		php		                    PHP
.195e65		48		pha		                PHA             ; begin setdp macro
.195e66		08		php		                PHP
.195e67		c2 20		rep #$20	                REP #$20        ; set A long
.195e69		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195e6c		5b		tcd		                TCD
.195e6d		28		plp		                PLP
.195e6e		68		pla		                PLA             ; end setdp macro
.195e6f		e2 20		sep #$20	                SEP #$20        ; set A short
.195e71		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195e73		22 19 3f 19	jsl $193f19	                    JSL ISETTIMEOUT
.195e77		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195e79		30 12		bmi $195e8d	                    BMI time_out            ; If so: signal a time out
.195e7b		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195e7f		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.195e81		d0 f4		bne $195e77	                    BNE loop
.195e83		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195e85		22 19 3f 19	jsl $193f19	                    JSL ISETTIMEOUT
.195e89		28		plp		                    PLP
.195e8a		2b		pld		                    PLD
.195e8b		38		sec		                    SEC
.195e8c		60		rts		                    RTS
.195e8d		28		plp		time_out            PLP
.195e8e		2b		pld		                    PLD
.195e8f		18		clc		                    CLC
.195e90		60		rts		                    RTS
.195e91						FDC_Check_CMD_BSY
.195e91		0b		phd		                    PHD
.195e92		08		php		                    PHP
.195e93		48		pha		                PHA             ; begin setdp macro
.195e94		08		php		                PHP
.195e95		c2 20		rep #$20	                REP #$20        ; set A long
.195e97		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195e9a		5b		tcd		                TCD
.195e9b		28		plp		                PLP
.195e9c		68		pla		                PLA             ; end setdp macro
.195e9d		e2 20		sep #$20	                SEP #$20        ; set A short
.195e9f		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195ea1		22 19 3f 19	jsl $193f19	                    JSL ISETTIMEOUT
.195ea5		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195ea7		30 12		bmi $195ebb	                    BMI time_out            ; If so: signal a time out
.195ea9		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195ead		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.195eaf		d0 f4		bne $195ea5	                    BNE loop
.195eb1		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195eb3		22 19 3f 19	jsl $193f19	                    JSL ISETTIMEOUT
.195eb7		28		plp		                    PLP
.195eb8		2b		pld		                    PLD
.195eb9		38		sec		                    SEC
.195eba		60		rts		                    RTS
.195ebb		28		plp		time_out            PLP
.195ebc		2b		pld		                    PLD
.195ebd		18		clc		                    CLC
.195ebe		60		rts		                    RTS
.195ebf						FDC_Can_Read_Data
.195ebf		0b		phd		                    PHD
.195ec0		08		php		                    PHP
.195ec1		48		pha		                PHA             ; begin setdp macro
.195ec2		08		php		                PHP
.195ec3		c2 20		rep #$20	                REP #$20        ; set A long
.195ec5		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195ec8		5b		tcd		                TCD
.195ec9		28		plp		                PLP
.195eca		68		pla		                PLA             ; end setdp macro
.195ecb		e2 20		sep #$20	                SEP #$20        ; set A short
.195ecd		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195ecf		22 19 3f 19	jsl $193f19	                    JSL ISETTIMEOUT
.195ed3		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195ed5		30 14		bmi $195eeb	                    BMI time_out            ; If so: signal a time out
.195ed7		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195edb		29 40		and #$40	                    AND #FDC_MSR_DIO
.195edd		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.195edf		d0 f2		bne $195ed3	                    BNE loop
.195ee1		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195ee3		22 19 3f 19	jsl $193f19	                    JSL ISETTIMEOUT
.195ee7		28		plp		                    PLP
.195ee8		2b		pld		                    PLD
.195ee9		38		sec		                    SEC
.195eea		60		rts		                    RTS
.195eeb		28		plp		time_out            PLP
.195eec		2b		pld		                    PLD
.195eed		18		clc		                    CLC
.195eee		60		rts		                    RTS
.195eef						FDC_CAN_WRITE
.195eef		0b		phd		                    PHD
.195ef0		08		php		                    PHP
.195ef1		48		pha		                PHA             ; begin setdp macro
.195ef2		08		php		                PHP
.195ef3		c2 20		rep #$20	                REP #$20        ; set A long
.195ef5		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195ef8		5b		tcd		                TCD
.195ef9		28		plp		                PLP
.195efa		68		pla		                PLA             ; end setdp macro
.195efb		e2 20		sep #$20	                SEP #$20        ; set A short
.195efd		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195eff		22 19 3f 19	jsl $193f19	                    JSL ISETTIMEOUT
.195f03		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195f05		30 14		bmi $195f1b	                    BMI time_out            ; If so: signal a time out
.195f07		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195f0b		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195f0d		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.195f0f		d0 f2		bne $195f03	                    BNE loop
.195f11		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195f13		22 19 3f 19	jsl $193f19	                    JSL ISETTIMEOUT
.195f17		28		plp		                    PLP
.195f18		2b		pld		                    PLD
.195f19		38		sec		                    SEC
.195f1a		60		rts		                    RTS
.195f1b		28		plp		time_out            PLP
.195f1c		2b		pld		                    PLD
.195f1d		18		clc		                    CLC
.195f1e		60		rts		                    RTS
.195f1f						FDC_DELAY_10MS
.195f1f		da		phx		                    PHX
.195f20		08		php		                    PHP
.195f21		c2 10		rep #$10	                REP #$10        ; set X long
.195f23		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.195f26		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.195f27		ca		dex		                    DEX
.195f28		e0 00 00	cpx #$0000	                    CPX #0
.195f2b		d0 f9		bne $195f26	                    BNE loop
.195f2d		28		plp		                    PLP
.195f2e		fa		plx		                    PLX
.195f2f		6b		rtl		                    RTL
.195f30						FDC_COMMAND
.195f30		da		phx		                    PHX
.195f31		8b		phb		                    PHB
.195f32		0b		phd		                    PHD
.195f33		08		php		                    PHP
.195f34		48		pha		                PHA             ; begin setdbr macro
.195f35		08		php		                PHP
.195f36		e2 20		sep #$20	                SEP #$20        ; set A short
.195f38		a9 00		lda #$00	                LDA #0
.195f3a		48		pha		                PHA
.195f3b		ab		plb		                PLB
.195f3c		28		plp		                PLP
.195f3d		68		pla		                PLA             ; end setdbr macro
.195f3e		48		pha		                PHA             ; begin setdp macro
.195f3f		08		php		                PHP
.195f40		c2 20		rep #$20	                REP #$20        ; set A long
.195f42		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195f45		5b		tcd		                TCD
.195f46		28		plp		                PLP
.195f47		68		pla		                PLA             ; end setdp macro
.195f48		22 1f 5f 19	jsl $195f1f	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.195f4c		e2 30		sep #$30	                SEP #$30        ; set A&X short
.195f4e		a2 00		ldx #$00	                    LDX #0
.195f50		a9 00		lda #$00	                    LDA #0
.195f52		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.195f55		e8		inx		                    INX
.195f56		e0 10		cpx #$10	                    CPX #16
.195f58		d0 f8		bne $195f52	                    BNE clr_results
.195f5a		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.195f5e		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195f60		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.195f62		f0 04		beq $195f68	                    BEQ start_send                          ; If so, start sending
.195f64		22 7d 60 19	jsl $19607d	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.195f68						start_send
.195f68		e2 10		sep #$10	                SEP #$10        ; set X short
.195f6a		a2 00		ldx #$00	                    LDX #0
.195f6c		20 35 5e	jsr $195e35	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.195f6f		b0 03		bcs $195f74	                    BCS send_param
.195f71		82 5e 00	brl $195fd2	                    BRL time_out                            ; If there was a timeout, flag the time out
.195f74		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.195f77		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.195f7b		22 1f 5f 19	jsl $195f1f	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.195f7f		e8		inx		                    INX                                     ; Advance to the next byte
.195f80		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.195f83		d0 e7		bne $195f6c	                    BNE send_loop                           ; Keep sending until we've sent them all
.195f85		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.195f88		d0 03		bne $195f8d	                    BNE chk_data_dir
.195f8a		82 80 00	brl $19600d	                    BRL result_phase                        ; If 0: we just want a result
.195f8d		10 3c		bpl $195fcb	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.195f8f						wr_data
.195f8f		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.195f91		30 03		bmi $195f96	                    BMI wr_chk_rqm
.195f93		82 3c 00	brl $195fd2	                    BRL time_out                            ; If not, raise an error
.195f96		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.195f9a		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.195f9c		f0 f1		beq $195f8f	                    BEQ wr_data_rdy
.195f9e		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.195fa0		d0 03		bne $195fa5	                    BNE wr_data_phase                       ; If so: transfer the data
.195fa2		82 68 00	brl $19600d	                    BRL result_phase                          ; If not: it's an error
.195fa5						wr_data_phase
.195fa5		c2 10		rep #$10	                REP #$10        ; set X long
.195fa7		a0 00 00	ldy #$0000	                    LDY #0
.195faa		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.195fac		30 03		bmi $195fb1	                    BMI wr_chk_nondma
.195fae		82 21 00	brl $195fd2	                    BRL time_out                            ; If not, raise an error
.195fb1		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.195fb5		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.195fb7		f0 54		beq $19600d	                    BEQ result_phase                        ; If not: break out to result phase
.195fb9		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.195fbb		f0 ed		beq $195faa	                    BEQ wr_data_loop                        ; No: keep waiting
.195fbd		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.195fbf		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.195fc3		c8		iny		                    INY                                     ; Move to the next position
.195fc4		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.195fc7		d0 e1		bne $195faa	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.195fc9		80 42		bra $19600d	                    BRA result_phase                        ; ready for the result phase
.195fcb		20 bf 5e	jsr $195ebf	rd_data             JSR FDC_Can_Read_Data
.195fce		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.195fd0		30 07		bmi $195fd9	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.195fd2						time_out
.195fd2		e2 20		sep #$20	                SEP #$20        ; set A short
.195fd4		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.195fd6		82 9c 00	brl $196075	                    BRL pass_error
.195fd9		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.195fdd		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195fdf		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.195fe1		d0 eb		bne $195fce	                    BNE rd_data_rdy
.195fe3		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.195fe7		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.195fe9		d0 03		bne $195fee	                    BNE rd_data_phase                       ; If so: transfer the data
.195feb		82 83 00	brl $196071	                    BRL error                               ; If not: it's an error
.195fee						rd_data_phase
.195fee		c2 10		rep #$10	                REP #$10        ; set X long
.195ff0		a0 00 00	ldy #$0000	                    LDY #0
.195ff3		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.195ff5		10 db		bpl $195fd2	                    BPL time_out                            ; If not: throw a timeout error
.195ff7		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.195ffb		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195ffd		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.195fff		d0 f2		bne $195ff3	                    BNE rd_data_loop
.196001		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.196005		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.196007		c8		iny		                    INY                                     ; Move to the next position
.196008		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.19600b		d0 e6		bne $195ff3	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.19600d		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.196010		f0 34		beq $196046	                    BEQ chk_busy                            ; Then we're done
.196012		e2 10		sep #$10	                SEP #$10        ; set X short
.196014		a2 00		ldx #$00	                    LDX #0
.196016		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.196018		22 19 3f 19	jsl $193f19	                    JSL ISETTIMEOUT
.19601c		20 bf 5e	jsr $195ebf	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.19601f		90 b1		bcc $195fd2	                    BCC time_out                            ; If there was a time out, raise an error
.196021		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.196025		20 bf 5e	jsr $195ebf	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.196028		90 a8		bcc $195fd2	                    BCC time_out                            ; If there was a time out, raise an error
.19602a		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.19602e		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.196031		20 35 5e	jsr $195e35	                    JSR FDC_Check_RQM
.196034		90 9c		bcc $195fd2	                    BCC time_out                            ; If there was a time out, flag the error
.196036		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.19603a		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.19603c		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.19603e		d0 06		bne $196046	                    BNE chk_busy
.196040		e8		inx		                    INX                                     ; Move to the next result positions
.196041		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.196044		d0 e4		bne $19602a	                    BNE read_result                         ; And keep looping until we've read all
.196046						chk_busy
.196046		c2 10		rep #$10	                REP #$10        ; set X long
.196048		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.19604b		22 2f 14 19	jsl $19142f	                    JSL ILOOP_MS
.19604f		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.196053		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.196055		f0 12		beq $196069	                    BEQ done                                ; If not set: we're done
.196057		20 bf 5e	jsr $195ebf	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.19605a		b0 03		bcs $19605f	                    BCS get_result_byte
.19605c		82 73 ff	brl $195fd2	                    BRL time_out                            ; If there was a time out, flag the error
.19605f		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.196063		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.196066		e8		inx		                    INX
.196067		80 dd		bra $196046	                    BRA chk_busy                            ; And keep checking
.196069						done
.196069		64 20		stz $0320	                    STZ BIOS_STATUS
.19606b		28		plp		                    PLP
.19606c		2b		pld		                    PLD
.19606d		ab		plb		                    PLB
.19606e		fa		plx		                    PLX
.19606f		38		sec		                    SEC
.196070		6b		rtl		                    RTL
.196071						error
.196071		e2 20		sep #$20	                SEP #$20        ; set A short
.196073		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.196075		85 20		sta $0320	pass_error          STA BIOS_STATUS
.196077		28		plp		                    PLP
.196078		2b		pld		                    PLD
.196079		ab		plb		                    PLB
.19607a		fa		plx		                    PLX
.19607b		18		clc		                    CLC
.19607c		6b		rtl		                    RTL
.19607d						FDC_Init
.19607d		08		php		                    PHP
.19607e		c2 10		rep #$10	                REP #$10        ; set X long
.196080		e2 20		sep #$20	                SEP #$20        ; set A short
.196082		a9 00		lda #$00	                    LDA #0
.196084		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.196088		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.19608b		a0 00 00	ldy #$0000	                    LDY #0
.19608e		22 3c 14 19	jsl $19143c	                    JSL IDELAY
.196092		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.196094		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.196098		ea		nop		                    NOP
.196099		ea		nop		                    NOP
.19609a		ea		nop		                    NOP
.19609b		ea		nop		                    NOP
.19609c		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.19609e		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.1960a2		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.1960a4		8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.1960a8		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.1960ab		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.1960ae		22 3c 14 19	jsl $19143c	                    JSL IDELAY
.1960b2		22 8d 61 19	jsl $19618d	                    JSL FDC_Sense_Int_Status
.1960b6		90 25		bcc $1960dd	                    BCC pass_failure
.1960b8		22 8d 61 19	jsl $19618d	                    JSL FDC_Sense_Int_Status
.1960bc		90 1f		bcc $1960dd	                    BCC pass_failure
.1960be		22 8d 61 19	jsl $19618d	                    JSL FDC_Sense_Int_Status
.1960c2		90 19		bcc $1960dd	                    BCC pass_failure
.1960c4		22 8d 61 19	jsl $19618d	                    JSL FDC_Sense_Int_Status
.1960c8		90 13		bcc $1960dd	                    BCC pass_failure
.1960ca		22 4f 62 19	jsl $19624f	                    JSL FDC_Configure_Command
.1960ce		90 0d		bcc $1960dd	                    BCC pass_failure
.1960d0		22 f6 61 19	jsl $1961f6	                    JSL FDC_Specify_Command
.1960d4		90 07		bcc $1960dd	                    BCC pass_failure
.1960d6		22 f9 60 19	jsl $1960f9	                    JSL FDC_Motor_On
.1960da		28		plp		                    PLP
.1960db		38		sec		                    SEC
.1960dc		6b		rtl		                    RTL
.1960dd		28		plp		pass_failure        PLP
.1960de		18		clc		                    CLC
.1960df		6b		rtl		                    RTL
.1960e0						FDC_MOTOR_NEEDED
.1960e0		08		php		                    PHP
.1960e1		c2 20		rep #$20	                REP #$20        ; set A long
.1960e3		78		sei		                    SEI                         ; Turn off interrupts
.1960e4		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.1960e7		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.1960eb		e2 20		sep #$20	                SEP #$20        ; set A short
.1960ed		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.1960f1		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.1960f3		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.1960f7		28		plp		                    PLP
.1960f8		6b		rtl		                    RTL
.1960f9						FDC_Motor_On
.1960f9		08		php		                    PHP
.1960fa		22 e0 60 19	jsl $1960e0	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.1960fe		e2 20		sep #$20	                SEP #$20        ; set A short
.196100		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.196104		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.196106		d0 1f		bne $196127	                    BNE done                    ; If so: skip
.196108		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.19610a		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.19610e		20 35 5e	jsr $195e35	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.196111		90 17		bcc $19612a	                    BCC time_out
.196113		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.196116		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.196119		22 3c 14 19	jsl $19143c	                    JSL IDELAY
.19611d		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.196121		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.196123		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.196127		28		plp		done                PLP
.196128		38		sec		                    SEC
.196129		6b		rtl		                    RTL
.19612a		28		plp		time_out            PLP                         ; Return a timeout error
.19612b		18		clc		                    CLC
.19612c		6b		rtl		                    RTL
.19612d						FDC_Motor_Off
.19612d		08		php		                    PHP
.19612e		e2 20		sep #$20	                SEP #$20        ; set A short
.196130		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.196132		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.196136		c2 20		rep #$20	                REP #$20        ; set A long
.196138		78		sei		                    SEI                         ; Turn off interrupts
.196139		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.19613c		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.196140		e2 20		sep #$20	                SEP #$20        ; set A short
.196142		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.196146		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.196148		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.19614c		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.196150		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.196152		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.196156		28		plp		                    PLP
.196157		6b		rtl		                    RTL
.196158						FDC_Recalibrate_Command
.196158		0b		phd		                    PHD
.196159		08		php		                    PHP
.19615a		48		pha		                PHA             ; begin setdp macro
.19615b		08		php		                PHP
.19615c		c2 20		rep #$20	                REP #$20        ; set A long
.19615e		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196161		5b		tcd		                TCD
.196162		28		plp		                PLP
.196163		68		pla		                PLA             ; end setdp macro
.196164		22 e0 60 19	jsl $1960e0	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.196168		e2 20		sep #$20	                SEP #$20        ; set A short
.19616a		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.19616c		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.19616f		a5 00		lda $0300	                    LDA FDC_DRIVE
.196171		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.196174		a9 02		lda #$02	                    LDA #2
.196176		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.196179		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.19617c		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.19617f		22 30 5f 19	jsl $195f30	                    JSL FDC_COMMAND             ; Issue the command
.196183		90 04		bcc $196189	                    BCC pass_failure            ; If failure, pass the failure up
.196185		28		plp		                    PLP
.196186		2b		pld		                    PLD
.196187		38		sec		                    SEC
.196188		6b		rtl		                    RTL
.196189		28		plp		pass_failure        PLP
.19618a		2b		pld		                    PLD
.19618b		18		clc		                    CLC
.19618c		6b		rtl		                    RTL
.19618d						FDC_Sense_Int_Status
.19618d		8b		phb		                    PHB
.19618e		0b		phd		                    PHD
.19618f		08		php		                    PHP
.196190		48		pha		                PHA             ; begin setdbr macro
.196191		08		php		                PHP
.196192		e2 20		sep #$20	                SEP #$20        ; set A short
.196194		a9 00		lda #$00	                LDA #0
.196196		48		pha		                PHA
.196197		ab		plb		                PLB
.196198		28		plp		                PLP
.196199		68		pla		                PLA             ; end setdbr macro
.19619a		48		pha		                PHA             ; begin setdp macro
.19619b		08		php		                PHP
.19619c		c2 20		rep #$20	                REP #$20        ; set A long
.19619e		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1961a1		5b		tcd		                TCD
.1961a2		28		plp		                PLP
.1961a3		68		pla		                PLA             ; end setdp macro
.1961a4		c2 30		rep #$30	                REP #$30        ; set A&X long
.1961a6		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.1961a9		22 2f 14 19	jsl $19142f	                    JSL ILOOP_MS
.1961ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1961af		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.1961b1		a9 ff		lda #$ff	                    LDA #$FF
.1961b3		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.1961b5		20 91 5e	jsr $195e91	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.1961b8		90 30		bcc $1961ea	                    BCC time_out                        ; If there was a time out, raise an error
.1961ba		20 35 5e	jsr $195e35	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.1961bd		90 2b		bcc $1961ea	                    BCC time_out                        ; If there was a time out, raise an error
.1961bf		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.1961c1		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.1961c5		20 bf 5e	jsr $195ebf	                    JSR FDC_Can_Read_Data
.1961c8		90 20		bcc $1961ea	                    BCC time_out                        ; If there was a time out, raise an error
.1961ca		20 35 5e	jsr $195e35	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.1961cd		90 1b		bcc $1961ea	                    BCC time_out                        ; If there was a time out, raise an error
.1961cf		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.1961d3		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.1961d5		20 35 5e	jsr $195e35	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.1961d8		90 10		bcc $1961ea	                    BCC time_out                        ; If there was a time out, raise an error
.1961da		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.1961de		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.1961e0		e2 20		sep #$20	                SEP #$20        ; set A short
.1961e2		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.1961e5		28		plp		                    PLP
.1961e6		2b		pld		                    PLD
.1961e7		ab		plb		                    PLB
.1961e8		38		sec		                    SEC
.1961e9		6b		rtl		                    RTL
.1961ea						time_out
.1961ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1961ec		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.1961ee		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.1961f1		28		plp		                    PLP
.1961f2		2b		pld		                    PLD
.1961f3		ab		plb		                    PLB
.1961f4		18		clc		                    CLC
.1961f5		6b		rtl		                    RTL
.1961f6						FDC_Specify_Command
.1961f6		8b		phb		                    PHB
.1961f7		0b		phd		                    PHD
.1961f8		08		php		                    PHP
.1961f9		48		pha		                PHA             ; begin setdbr macro
.1961fa		08		php		                PHP
.1961fb		e2 20		sep #$20	                SEP #$20        ; set A short
.1961fd		a9 00		lda #$00	                LDA #0
.1961ff		48		pha		                PHA
.196200		ab		plb		                PLB
.196201		28		plp		                PLP
.196202		68		pla		                PLA             ; end setdbr macro
.196203		48		pha		                PHA             ; begin setdp macro
.196204		08		php		                PHP
.196205		c2 20		rep #$20	                REP #$20        ; set A long
.196207		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19620a		5b		tcd		                TCD
.19620b		28		plp		                PLP
.19620c		68		pla		                PLA             ; end setdp macro
.19620d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19620f		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.196212		22 2f 14 19	jsl $19142f	                    JSL ILOOP_MS
.196216		e2 20		sep #$20	                SEP #$20        ; set A short
.196218		20 91 5e	jsr $195e91	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.19621b		90 26		bcc $196243	                    BCC time_out            ; If there was a time out, raise an error
.19621d		20 35 5e	jsr $195e35	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.196220		90 21		bcc $196243	                    BCC time_out            ; If there was a time out, raise an error
.196222		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.196224		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.196228		20 35 5e	jsr $195e35	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.19622b		90 16		bcc $196243	                    BCC time_out            ; If there was a time out, raise an error
.19622d		a9 cf		lda #$cf	                    LDA #$CF
.19622f		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.196233		20 35 5e	jsr $195e35	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.196236		90 0b		bcc $196243	                    BCC time_out            ; If there was a time out, raise an error
.196238		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.19623a		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.19623e		28		plp		                    PLP
.19623f		2b		pld		                    PLD
.196240		ab		plb		                    PLB
.196241		38		sec		                    SEC
.196242		6b		rtl		                    RTL
.196243						time_out
.196243		e2 20		sep #$20	                SEP #$20        ; set A short
.196245		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.196247		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.19624a		28		plp		                    PLP
.19624b		2b		pld		                    PLD
.19624c		ab		plb		                    PLB
.19624d		18		clc		                    CLC
.19624e		6b		rtl		                    RTL
.19624f						FDC_Configure_Command
.19624f		8b		phb		                    PHB
.196250		0b		phd		                    PHD
.196251		08		php		                    PHP
.196252		48		pha		                PHA             ; begin setdbr macro
.196253		08		php		                PHP
.196254		e2 20		sep #$20	                SEP #$20        ; set A short
.196256		a9 00		lda #$00	                LDA #0
.196258		48		pha		                PHA
.196259		ab		plb		                PLB
.19625a		28		plp		                PLP
.19625b		68		pla		                PLA             ; end setdbr macro
.19625c		48		pha		                PHA             ; begin setdp macro
.19625d		08		php		                PHP
.19625e		c2 20		rep #$20	                REP #$20        ; set A long
.196260		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196263		5b		tcd		                TCD
.196264		28		plp		                PLP
.196265		68		pla		                PLA             ; end setdp macro
.196266		c2 30		rep #$30	                REP #$30        ; set A&X long
.196268		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.19626b		22 2f 14 19	jsl $19142f	                    JSL ILOOP_MS
.19626f		e2 20		sep #$20	                SEP #$20        ; set A short
.196271		20 91 5e	jsr $195e91	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.196274		90 36		bcc $1962ac	                    BCC time_out            ; If there was a time out, raise an error
.196276		20 35 5e	jsr $195e35	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.196279		90 31		bcc $1962ac	                    BCC time_out            ; If there was a time out, raise an error
.19627b		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.19627d		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.196281		20 35 5e	jsr $195e35	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.196284		90 26		bcc $1962ac	                    BCC time_out            ; If there was a time out, raise an error
.196286		a9 00		lda #$00	                    LDA #$00
.196288		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.19628c		20 35 5e	jsr $195e35	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.19628f		90 1b		bcc $1962ac	                    BCC time_out            ; If there was a time out, raise an error
.196291		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.196293		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.196297		20 35 5e	jsr $195e35	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.19629a		90 10		bcc $1962ac	                    BCC time_out            ; If there was a time out, raise an error
.19629c		a9 00		lda #$00	                    LDA #$00
.19629e		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.1962a2		20 91 5e	jsr $195e91	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.1962a5		90 05		bcc $1962ac	                    BCC time_out            ; If there was a time out, raise an error
.1962a7		28		plp		                    PLP
.1962a8		2b		pld		                    PLD
.1962a9		ab		plb		                    PLB
.1962aa		38		sec		                    SEC
.1962ab		6b		rtl		                    RTL
.1962ac						time_out
.1962ac		e2 20		sep #$20	                SEP #$20        ; set A short
.1962ae		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.1962b0		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.1962b3		28		plp		                    PLP
.1962b4		2b		pld		                    PLD
.1962b5		ab		plb		                    PLB
.1962b6		18		clc		                    CLC
.1962b7		6b		rtl		                    RTL
.1962b8						FDC_Read_ID_Command
.1962b8		8b		phb		                    PHB
.1962b9		0b		phd		                    PHD
.1962ba		08		php		                    PHP
.1962bb		48		pha		                PHA             ; begin setdbr macro
.1962bc		08		php		                PHP
.1962bd		e2 20		sep #$20	                SEP #$20        ; set A short
.1962bf		a9 00		lda #$00	                LDA #0
.1962c1		48		pha		                PHA
.1962c2		ab		plb		                PLB
.1962c3		28		plp		                PLP
.1962c4		68		pla		                PLA             ; end setdbr macro
.1962c5		48		pha		                PHA             ; begin setdp macro
.1962c6		08		php		                PHP
.1962c7		c2 20		rep #$20	                REP #$20        ; set A long
.1962c9		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1962cc		5b		tcd		                TCD
.1962cd		28		plp		                PLP
.1962ce		68		pla		                PLA             ; end setdp macro
.1962cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1962d1		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.1962d3		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.1962d6		a9 01		lda #$01	                    LDA #1
.1962d8		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.1962db		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.1962de		a9 07		lda #$07	                    LDA #7
.1962e0		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.1962e3		22 30 5f 19	jsl $195f30	                    JSL FDC_COMMAND                     ; Issue the command
.1962e7		90 27		bcc $196310	                    BCC pass_failure
.1962e9		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.1962ec		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.1962ee		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.1962f1		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.1962f3		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.1962f6		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.1962f8		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.1962fb		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.1962fd		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.196300		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.196302		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.196305		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.196307		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.19630a		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.19630c		28		plp		                    PLP
.19630d		2b		pld		                    PLD
.19630e		ab		plb		                    PLB
.19630f		6b		rtl		                    RTL
.196310		28		plp		pass_failure        PLP
.196311		2b		pld		                    PLD
.196312		ab		plb		                    PLB
.196313		18		clc		                    CLC
.196314		6b		rtl		                    RTL
.196315						FDC_DumpReg_Command
.196315		0b		phd		                    PHD
.196316		08		php		                    PHP
.196317		e2 20		sep #$20	                SEP #$20        ; set A short
.196319		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.19631b		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.19631e		a9 01		lda #$01	                    LDA #1
.196320		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.196323		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.196326		a9 0a		lda #$0a	                    LDA #10
.196328		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.19632b		22 30 5f 19	jsl $195f30	                    JSL FDC_COMMAND                     ; Issue the command
.19632f		90 03		bcc $196334	                    BCC pass_failure
.196331		28		plp		                    PLP
.196332		2b		pld		                    PLD
.196333		6b		rtl		                    RTL
.196334		28		plp		pass_failure        PLP
.196335		2b		pld		                    PLD
.196336		18		clc		                    CLC
.196337		6b		rtl		                    RTL
.196338						FDC_Seek_Track
.196338		8b		phb		                    PHB
.196339		0b		phd		                    PHD
.19633a		08		php		                    PHP
.19633b		48		pha		                PHA             ; begin setdbr macro
.19633c		08		php		                PHP
.19633d		e2 20		sep #$20	                SEP #$20        ; set A short
.19633f		a9 00		lda #$00	                LDA #0
.196341		48		pha		                PHA
.196342		ab		plb		                PLB
.196343		28		plp		                PLP
.196344		68		pla		                PLA             ; end setdbr macro
.196345		48		pha		                PHA             ; begin setdp macro
.196346		08		php		                PHP
.196347		c2 20		rep #$20	                REP #$20        ; set A long
.196349		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19634c		5b		tcd		                TCD
.19634d		28		plp		                PLP
.19634e		68		pla		                PLA             ; end setdp macro
.19634f		22 e0 60 19	jsl $1960e0	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.196353		e2 20		sep #$20	                SEP #$20        ; set A short
.196355		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.196357		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.19635a		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.19635c		29 01		and #$01	                    AND #$01
.19635e		0a		asl a		                    ASL A
.19635f		0a		asl a		                    ASL A
.196360		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.196362		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.196365		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.196367		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.19636a		a9 03		lda #$03	                    LDA #3
.19636c		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.19636f		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.196372		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.196375		22 30 5f 19	jsl $195f30	                    JSL FDC_COMMAND                     ; Issue the command
.196379		90 05		bcc $196380	                    BCC pass_failure
.19637b		28		plp		                    PLP
.19637c		2b		pld		                    PLD
.19637d		ab		plb		                    PLB
.19637e		38		sec		                    SEC
.19637f		6b		rtl		                    RTL
.196380		28		plp		pass_failure        PLP
.196381		2b		pld		                    PLD
.196382		ab		plb		                    PLB
.196383		18		clc		                    CLC
.196384		6b		rtl		                    RTL
.196385						FDC_Read_Sector
.196385		8b		phb		                    PHB
.196386		0b		phd		                    PHD
.196387		08		php		                    PHP
.196388		48		pha		                PHA             ; begin setdbr macro
.196389		08		php		                PHP
.19638a		e2 20		sep #$20	                SEP #$20        ; set A short
.19638c		a9 00		lda #$00	                LDA #0
.19638e		48		pha		                PHA
.19638f		ab		plb		                PLB
.196390		28		plp		                PLP
.196391		68		pla		                PLA             ; end setdbr macro
.196392		48		pha		                PHA             ; begin setdp macro
.196393		08		php		                PHP
.196394		c2 20		rep #$20	                REP #$20        ; set A long
.196396		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196399		5b		tcd		                TCD
.19639a		28		plp		                PLP
.19639b		68		pla		                PLA             ; end setdp macro
.19639c		22 e0 60 19	jsl $1960e0	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.1963a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1963a2		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.1963a4		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.1963a6		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.1963a9		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.1963ab		29 01		and #$01	                    AND #$01
.1963ad		0a		asl a		                    ASL A
.1963ae		0a		asl a		                    ASL A
.1963af		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.1963b1		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.1963b4		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.1963b6		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.1963b9		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.1963bb		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.1963be		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.1963c0		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.1963c3		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.1963c5		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.1963c8		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.1963ca		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.1963cd		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.1963cf		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.1963d2		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.1963d4		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.1963d7		a9 09		lda #$09	                    LDA #9
.1963d9		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.1963dc		a9 01		lda #$01	                    LDA #1
.1963de		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.1963e1		a9 07		lda #$07	                    LDA #7
.1963e3		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.1963e6		22 30 5f 19	jsl $195f30	command             JSL FDC_COMMAND                     ; Issue the command
.1963ea		08		php		                    PHP
.1963eb		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.1963ee		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.1963f0		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.1963f3		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.1963f5		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.1963f8		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.1963fa		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.1963fd		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.1963ff		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.196402		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.196404		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.196407		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.196409		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.19640c		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.19640e		28		plp		                    PLP
.19640f		90 04		bcc $196415	                    BCC pass_failure
.196411		28		plp		done                PLP
.196412		2b		pld		                    PLD
.196413		ab		plb		                    PLB
.196414		6b		rtl		                    RTL
.196415		28		plp		pass_failure        PLP
.196416		2b		pld		                    PLD
.196417		ab		plb		                    PLB
.196418		18		clc		                    CLC
.196419		6b		rtl		                    RTL
.19641a						FDC_Write_Sector
.19641a		8b		phb		                    PHB
.19641b		0b		phd		                    PHD
.19641c		08		php		                    PHP
.19641d		48		pha		                PHA             ; begin setdbr macro
.19641e		08		php		                PHP
.19641f		e2 20		sep #$20	                SEP #$20        ; set A short
.196421		a9 00		lda #$00	                LDA #0
.196423		48		pha		                PHA
.196424		ab		plb		                PLB
.196425		28		plp		                PLP
.196426		68		pla		                PLA             ; end setdbr macro
.196427		48		pha		                PHA             ; begin setdp macro
.196428		08		php		                PHP
.196429		c2 20		rep #$20	                REP #$20        ; set A long
.19642b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19642e		5b		tcd		                TCD
.19642f		28		plp		                PLP
.196430		68		pla		                PLA             ; end setdp macro
.196431		e2 20		sep #$20	                SEP #$20        ; set A short
.196433		22 e0 60 19	jsl $1960e0	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.196437		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.196439		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.19643b		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.19643e		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.196440		29 01		and #$01	                    AND #$01
.196442		0a		asl a		                    ASL A
.196443		0a		asl a		                    ASL A
.196444		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.196446		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.196449		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.19644b		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.19644e		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.196450		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.196453		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.196455		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.196458		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.19645a		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.19645d		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.19645f		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.196462		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.196464		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.196467		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.196469		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.19646c		a9 09		lda #$09	                    LDA #9
.19646e		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.196471		a9 ff		lda #$ff	                    LDA #$FF
.196473		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.196476		a9 07		lda #$07	                    LDA #7
.196478		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.19647b		22 30 5f 19	jsl $195f30	command             JSL FDC_COMMAND                     ; Issue the command
.19647f		08		php		                    PHP
.196480		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.196483		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.196485		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.196488		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.19648a		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.19648d		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.19648f		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.196492		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.196494		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.196497		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.196499		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.19649c		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.19649e		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.1964a1		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.1964a3		28		plp		check_status        PLP
.1964a4		90 04		bcc $1964aa	                    BCC pass_failure
.1964a6		28		plp		done                PLP
.1964a7		2b		pld		                    PLD
.1964a8		ab		plb		                    PLB
.1964a9		6b		rtl		                    RTL
.1964aa		28		plp		pass_failure        PLP
.1964ab		2b		pld		                    PLD
.1964ac		ab		plb		                    PLB
.1964ad		18		clc		                    CLC
.1964ae		6b		rtl		                    RTL
.1964af						DIVIDE32
.1964af		da		phx		                    PHX
.1964b0		5a		phy		                    PHY
.1964b1		0b		phd		                    PHD
.1964b2		08		php		                    PHP
.1964b3		48		pha		                PHA             ; begin setdp macro
.1964b4		08		php		                PHP
.1964b5		c2 20		rep #$20	                REP #$20        ; set A long
.1964b7		a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.1964ba		5b		tcd		                TCD
.1964bb		28		plp		                PLP
.1964bc		68		pla		                PLA             ; end setdp macro
.1964bd		c2 30		rep #$30	                REP #$30        ; set A&X long
.1964bf		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.1964c1		64 0a		stz $0316	                    STZ REMAINDER+2
.1964c3		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.1964c6		06 00		asl $030c	loop                ASL DIVIDEND
.1964c8		26 02		rol $030e	                    ROL DIVIDEND+2
.1964ca		26 08		rol $0314	                    ROL REMAINDER
.1964cc		26 0a		rol $0316	                    ROL REMAINDER+2
.1964ce		a5 08		lda $0314	                    LDA REMAINDER
.1964d0		38		sec		                    SEC
.1964d1		e5 04		sbc $0310	                    SBC DIVISOR
.1964d3		a8		tay		                    TAY
.1964d4		a5 0a		lda $0316	                    LDA REMAINDER+2
.1964d6		e5 06		sbc $0312	                    SBC DIVISOR+2
.1964d8		90 06		bcc $1964e0	                    BCC skip
.1964da		85 0a		sta $0316	                    STA REMAINDER+2
.1964dc		84 08		sty $0314	                    STY REMAINDER
.1964de		e6 00		inc $030c	                    INC DIVIDEND
.1964e0		ca		dex		skip                DEX
.1964e1		d0 e3		bne $1964c6	                    BNE loop
.1964e3		28		plp		                    PLP
.1964e4		2b		pld		                    PLD
.1964e5		7a		ply		                    PLY
.1964e6		fa		plx		                    PLX
.1964e7		60		rts		                    RTS
.1964e8						LBA2CHS
.1964e8		8b		phb		                    PHB
.1964e9		0b		phd		                    PHD
.1964ea		08		php		                    PHP
.1964eb		48		pha		                PHA             ; begin setdbr macro
.1964ec		08		php		                PHP
.1964ed		e2 20		sep #$20	                SEP #$20        ; set A short
.1964ef		a9 00		lda #$00	                LDA #0
.1964f1		48		pha		                PHA
.1964f2		ab		plb		                PLB
.1964f3		28		plp		                PLP
.1964f4		68		pla		                PLA             ; end setdbr macro
.1964f5		48		pha		                PHA             ; begin setdp macro
.1964f6		08		php		                PHP
.1964f7		c2 20		rep #$20	                REP #$20        ; set A long
.1964f9		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1964fc		5b		tcd		                TCD
.1964fd		28		plp		                PLP
.1964fe		68		pla		                PLA             ; end setdp macro
.1964ff		c2 30		rep #$30	                REP #$30        ; set A&X long
.196501		a5 22		lda $0322	                    LDA BIOS_LBA
.196503		85 0c		sta $030c	                    STA DIVIDEND
.196505		a5 24		lda $0324	                    LDA BIOS_LBA+2
.196507		85 0e		sta $030e	                    STA DIVIDEND+2
.196509		a9 24 00	lda #$0024	                    LDA #36
.19650c		85 10		sta $0310	                    STA DIVISOR
.19650e		64 12		stz $0312	                    STZ DIVISOR+2
.196510		20 af 64	jsr $1964af	                    JSR DIVIDE32
.196513		e2 20		sep #$20	                SEP #$20        ; set A short
.196515		a5 0c		lda $030c	                    LDA DIVIDEND
.196517		85 02		sta $0302	                    STA FDC_CYLINDER
.196519		c2 20		rep #$20	                REP #$20        ; set A long
.19651b		a5 14		lda $0314	                    LDA REMAINDER
.19651d		85 0c		sta $030c	                    STA DIVIDEND
.19651f		a5 16		lda $0316	                    LDA REMAINDER+2
.196521		85 0e		sta $030e	                    STA DIVIDEND+2
.196523		a9 12 00	lda #$0012	                    LDA #18
.196526		85 10		sta $0310	                    STA DIVISOR
.196528		64 12		stz $0312	                    STZ DIVISOR+2
.19652a		20 af 64	jsr $1964af	                    JSR DIVIDE32
.19652d		e2 20		sep #$20	                SEP #$20        ; set A short
.19652f		a5 0c		lda $030c	                    LDA DIVIDEND
.196531		29 01		and #$01	                    AND #$01
.196533		85 01		sta $0301	                    STA FDC_HEAD
.196535		a5 14		lda $0314	                    LDA REMAINDER
.196537		1a		inc a		                    INC A
.196538		85 03		sta $0303	                    STA FDC_SECTOR
.19653a		28		plp		                    PLP
.19653b		2b		pld		                    PLD
.19653c		ab		plb		                    PLB
.19653d		6b		rtl		                    RTL
.19653e						FDC_GETBLOCK
.19653e		8b		phb		                    PHB
.19653f		0b		phd		                    PHD
.196540		08		php		                    PHP
.196541		48		pha		                PHA             ; begin setdbr macro
.196542		08		php		                PHP
.196543		e2 20		sep #$20	                SEP #$20        ; set A short
.196545		a9 00		lda #$00	                LDA #0
.196547		48		pha		                PHA
.196548		ab		plb		                PLB
.196549		28		plp		                PLP
.19654a		68		pla		                PLA             ; end setdbr macro
.19654b		48		pha		                PHA             ; begin setdp macro
.19654c		08		php		                PHP
.19654d		c2 20		rep #$20	                REP #$20        ; set A long
.19654f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196552		5b		tcd		                TCD
.196553		28		plp		                PLP
.196554		68		pla		                PLA             ; end setdp macro
.196555		e2 20		sep #$20	                SEP #$20        ; set A short
.196557		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.196559		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.19655c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19655e		22 e8 64 19	jsl $1964e8	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.196562		e2 20		sep #$20	                SEP #$20        ; set A short
.196564		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.196566		f0 29		beq $196591	                    BEQ read_failure
.196568						try_read
.196568		c2 20		rep #$20	                REP #$20        ; set A long
.19656a		22 85 63 19	jsl $196385	                    JSL FDC_Read_Sector         ; Read the sector
.19656e		90 14		bcc $196584	                    BCC retry
.196570		e2 20		sep #$20	                SEP #$20        ; set A short
.196572		a5 06		lda $0306	                    LDA FDC_ST0
.196574		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.196576		d0 19		bne $196591	                    BNE read_failure
.196578						ret_success
.196578		e2 20		sep #$20	                SEP #$20        ; set A short
.19657a		a9 00		lda #$00	                    LDA #0
.19657c		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.19657f		28		plp		                    PLP
.196580		2b		pld		                    PLD
.196581		ab		plb		                    PLB
.196582		38		sec		                    SEC
.196583		6b		rtl		                    RTL
.196584						retry
.196584		e2 20		sep #$20	                SEP #$20        ; set A short
.196586		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.196589		30 13		bmi $19659e	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.19658b		22 7d 60 19	jsl $19607d	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.19658f		80 d7		bra $196568	                    BRA try_read                ; And try the read again
.196591						read_failure
.196591		e2 20		sep #$20	                SEP #$20        ; set A short
.196593		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.196595		80 04		bra $19659b	                    BRA ret_failure
.196597						seek_failure
.196597		e2 20		sep #$20	                SEP #$20        ; set A short
.196599		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.19659b		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.19659e		28		plp		pass_failure        PLP
.19659f		2b		pld		                    PLD
.1965a0		ab		plb		                    PLB
.1965a1		18		clc		                    CLC
.1965a2		6b		rtl		                    RTL
.1965a3						FDC_PUTBLOCK
.1965a3		8b		phb		                    PHB
.1965a4		0b		phd		                    PHD
.1965a5		08		php		                    PHP
.1965a6		48		pha		                PHA             ; begin setdbr macro
.1965a7		08		php		                PHP
.1965a8		e2 20		sep #$20	                SEP #$20        ; set A short
.1965aa		a9 00		lda #$00	                LDA #0
.1965ac		48		pha		                PHA
.1965ad		ab		plb		                PLB
.1965ae		28		plp		                PLP
.1965af		68		pla		                PLA             ; end setdbr macro
.1965b0		48		pha		                PHA             ; begin setdp macro
.1965b1		08		php		                PHP
.1965b2		c2 20		rep #$20	                REP #$20        ; set A long
.1965b4		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1965b7		5b		tcd		                TCD
.1965b8		28		plp		                PLP
.1965b9		68		pla		                PLA             ; end setdp macro
.1965ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1965bc		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.1965be		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.1965c1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1965c3		22 e8 64 19	jsl $1964e8	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.1965c7		22 1a 64 19	jsl $19641a	retry               JSL FDC_Write_Sector        ; Write the sector
.1965cb		b0 03		bcs $1965d0	                    BCS chk_st0
.1965cd		82 28 00	brl $1965f8	                    BRL attempt_retry
.1965d0						chk_st0
.1965d0		e2 20		sep #$20	                SEP #$20        ; set A short
.1965d2		a5 06		lda $0306	                    LDA FDC_ST0
.1965d4		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.1965d6		d0 0c		bne $1965e4	                    BNE write_failure
.1965d8						ret_success
.1965d8		e2 20		sep #$20	                SEP #$20        ; set A short
.1965da		a9 00		lda #$00	                    LDA #0
.1965dc		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.1965df		28		plp		                    PLP
.1965e0		2b		pld		                    PLD
.1965e1		ab		plb		                    PLB
.1965e2		38		sec		                    SEC
.1965e3		6b		rtl		                    RTL
.1965e4						write_failure
.1965e4		e2 20		sep #$20	                SEP #$20        ; set A short
.1965e6		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.1965e8		89 02		bit #$02	                    BIT #FDC_ST1_NW
.1965ea		f0 04		beq $1965f0	                    BEQ generic_err
.1965ec		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.1965ee		80 17		bra $196607	                    BRA ret_failure
.1965f0		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.1965f2		d0 e4		bne $1965d8	                    BNE ret_success
.1965f4		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.1965f6		d0 e0		bne $1965d8	                    BNE ret_success
.1965f8						attempt_retry
.1965f8		e2 20		sep #$20	                SEP #$20        ; set A short
.1965fa		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.1965fd		d0 c8		bne $1965c7	                    BNE retry                           ; And retry unless we have none left
.1965ff		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.196601		80 04		bra $196607	                    BRA ret_failure
.196603						seek_failure
.196603		e2 20		sep #$20	                SEP #$20        ; set A short
.196605		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.196607						ret_failure
.196607		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.19660a		28		plp		pass_failure        PLP
.19660b		2b		pld		                    PLD
.19660c		ab		plb		                    PLB
.19660d		18		clc		                    CLC
.19660e		6b		rtl		                    RTL
.19660f						FDC_MOUNT
.19660f		8b		phb		                    PHB
.196610		0b		phd		                    PHD
.196611		08		php		                    PHP
.196612		48		pha		                PHA             ; begin setdbr macro
.196613		08		php		                PHP
.196614		e2 20		sep #$20	                SEP #$20        ; set A short
.196616		a9 00		lda #$00	                LDA #0
.196618		48		pha		                PHA
.196619		ab		plb		                PLB
.19661a		28		plp		                PLP
.19661b		68		pla		                PLA             ; end setdbr macro
.19661c		48		pha		                PHA             ; begin setdp macro
.19661d		08		php		                PHP
.19661e		c2 20		rep #$20	                REP #$20        ; set A long
.196620		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196623		5b		tcd		                TCD
.196624		28		plp		                PLP
.196625		68		pla		                PLA             ; end setdp macro
.196626		22 7d 60 19	jsl $19607d	                    JSL FDC_INIT
.19662a		e2 20		sep #$20	                SEP #$20        ; set A short
.19662c		c2 10		rep #$10	                REP #$10        ; set X long
.19662e		a9 00		lda #$00	                    LDA #0
.196630		a2 00 00	ldx #$0000	                    LDX #0
.196633		9f 00 a3 18	sta $18a300,x	zero_loop           STA DOS_SECTOR,X
.196637		e8		inx		                    INX
.196638		e0 00 02	cpx #$0200	                    CPX #512
.19663b		d0 f6		bne $196633	                    BNE zero_loop
.19663d		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.19663f		85 00		sta $0300	                    STA FDC_DRIVE
.196641		22 f9 60 19	jsl $1960f9	                    JSL FDC_Motor_On                        ; Turn the motor on
.196645		c2 30		rep #$30	                REP #$30        ; set A&X long
.196647		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.19664a		85 22		sta $0322	                    STA BIOS_LBA
.19664c		85 24		sta $0324	                    STA BIOS_LBA+2
.19664e		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.196651		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.196653		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.196656		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.196658		22 3e 65 19	jsl $19653e	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.19665c		b0 03		bcs $196661	                    BCS parse_boot                          ; If ok: start parsing the boot record
.19665e		82 d3 00	brl $196734	                    BRL pass_failure                        ; Pass the error up the chain
.196661						parse_boot
.196661		e2 20		sep #$20	                SEP #$20        ; set A short
.196663		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.196665		8f 01 a0 18	sta $18a001	                    STA @l FILE_SYSTEM
.196669		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.19666b		8f 02 a0 18	sta $18a002	                    STA @l PARTITION
.19666f		e2 20		sep #$20	                SEP #$20        ; set A short
.196671		af 0d a3 18	lda $18a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.196675		8f 03 a0 18	sta $18a003	                    STA @l SECTORS_PER_CLUSTER
.196679		c2 20		rep #$20	                REP #$20        ; set A long
.19667b		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.19667e		8f 04 a0 18	sta $18a004	                    STA @l FIRSTSECTOR
.196682		8f 06 a0 18	sta $18a006	                    STA @l FIRSTSECTOR+2
.196686		af 16 a3 18	lda $18a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.19668a		8f 10 a0 18	sta $18a010	                    STA @l SEC_PER_FAT
.19668e		a9 00 00	lda #$0000	                    LDA #0
.196691		8f 12 a0 18	sta $18a012	                    STA @l SEC_PER_FAT+2
.196695		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.196698		8f 14 a0 18	sta $18a014	                    STA @l FAT_BEGIN_LBA
.19669c		18		clc		                    CLC
.19669d		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.1966a1		8f 18 a0 18	sta $18a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.1966a5		a9 00 00	lda #$0000	                    LDA #0
.1966a8		8f 16 a0 18	sta $18a016	                    STA @l FAT_BEGIN_LBA+2
.1966ac		8f 1a a0 18	sta $18a01a	                    STA @L FAT2_BEGIN_LBA+2
.1966b0		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.1966b1		af 18 a0 18	lda $18a018	                    LDA @l FAT2_BEGIN_LBA
.1966b5		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.1966b9		8f 20 a0 18	sta $18a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.1966bd		a9 00 00	lda #$0000	                    LDA #0
.1966c0		8f 22 a0 18	sta $18a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.1966c4		af 11 a3 18	lda $18a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.1966c8		8f 24 a0 18	sta $18a024	                    STA @l ROOT_DIR_MAX_ENTRY
.1966cc		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.1966cd		4a		lsr a		                    LSR A
.1966ce		4a		lsr a		                    LSR A
.1966cf		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.1966d0		18		clc		                    CLC
.1966d1		6f 20 a0 18	adc $18a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.1966d5		8f 1c a0 18	sta $18a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.1966d9		a9 00 00	lda #$0000	                    LDA #0
.1966dc		8f 1e a0 18	sta $18a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.1966e0		af 13 a3 18	lda $18a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.1966e4		8f 08 a0 18	sta $18a008	                    STA @l SECTORCOUNT
.1966e8		a9 00 00	lda #$0000	                    LDA #0
.1966eb		8f 0a a0 18	sta $18a00a	                    STA @l SECTORCOUNT+2
.1966ef		af 0e a3 18	lda $18a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.1966f3		8f 0c a0 18	sta $18a00c	                    STA @l NUM_RSRV_SEC
.1966f7		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.1966fa		8f 0e a0 18	sta $18a00e	                    STA @l CLUSTER_SIZE
.1966fe		e2 20		sep #$20	                SEP #$20        ; set A short
.196700		af 26 a3 18	lda $18a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.196704		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.196706		80 14		bra $19671c	                    BRA no_volume_id                        ; No: there is no volume ID
.196708						is_extended
.196708		c2 20		rep #$20	                REP #$20        ; set A long
.19670a		af 27 a3 18	lda $18a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.19670e		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.196712		af 29 a3 18	lda $18a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.196716		8f 28 a0 18	sta $18a028	                    STA @l VOLUME_ID+2
.19671a		80 0d		bra $196729	                    BRA ret_success
.19671c						no_volume_id
.19671c		c2 20		rep #$20	                REP #$20        ; set A long
.19671e		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.196721		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.196725		8f 28 a0 18	sta $18a028	                    STA @L VOLUME_ID+2
.196729						ret_success
.196729		e2 20		sep #$20	                SEP #$20        ; set A short
.19672b		a9 00		lda #$00	                    LDA #0
.19672d		85 20		sta $0320	                    STA BIOS_STATUS
.19672f		28		plp		                    PLP
.196730		2b		pld		                    PLD
.196731		ab		plb		                    PLB
.196732		38		sec		                    SEC
.196733		6b		rtl		                    RTL
.196734		28		plp		pass_failure        PLP
.196735		2b		pld		                    PLD
.196736		ab		plb		                    PLB
.196737		18		clc		                    CLC
.196738		6b		rtl		                    RTL
.196739						FDC_CMDBLOCK
.196739		8b		phb		                    PHB
.19673a		0b		phd		                    PHD
.19673b		08		php		                    PHP
.19673c		48		pha		                PHA             ; begin setdbr macro
.19673d		08		php		                PHP
.19673e		e2 20		sep #$20	                SEP #$20        ; set A short
.196740		a9 00		lda #$00	                LDA #0
.196742		48		pha		                PHA
.196743		ab		plb		                PLB
.196744		28		plp		                PLP
.196745		68		pla		                PLA             ; end setdbr macro
.196746		48		pha		                PHA             ; begin setdp macro
.196747		08		php		                PHP
.196748		c2 20		rep #$20	                REP #$20        ; set A long
.19674a		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19674d		5b		tcd		                TCD
.19674e		28		plp		                PLP
.19674f		68		pla		                PLA             ; end setdp macro
.196750		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196752		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.196754		f0 0f		beq $196765	                    BEQ motor_on
.196756		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.196758		f0 11		beq $19676b	                    BEQ motor_off
.19675a		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.19675c		f0 13		beq $196771	                    BEQ recalibrate
.19675e		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.196760		28		plp		                    PLP
.196761		2b		pld		                    PLD
.196762		ab		plb		                    PLB
.196763		38		sec		                    SEC
.196764		6b		rtl		                    RTL
.196765		22 f9 60 19	jsl $1960f9	motor_on            JSL FDC_Motor_On
.196769		80 f3		bra $19675e	                    BRA ret_success
.19676b		22 2d 61 19	jsl $19612d	motor_off           JSL FDC_Motor_Off
.19676f		80 ed		bra $19675e	                    BRA ret_success
.196771		22 58 61 19	jsl $196158	recalibrate         JSL FDC_Recalibrate_Command
.196775		b0 e7		bcs $19675e	                    BCS ret_success
.196777		28		plp		pass_failure        PLP
.196778		2b		pld		                    PLD
.196779		ab		plb		                    PLB
.19677a		18		clc		                    CLC
.19677b		6b		rtl		                    RTL
.19677c						FDC_CHK_MEDIA
.19677c		0b		phd		                    PHD
.19677d		08		php		                    PHP
.19677e		48		pha		                PHA             ; begin setdp macro
.19677f		08		php		                PHP
.196780		c2 20		rep #$20	                REP #$20        ; set A long
.196782		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196785		5b		tcd		                TCD
.196786		28		plp		                PLP
.196787		68		pla		                PLA             ; end setdp macro
.196788		22 f9 60 19	jsl $1960f9	                    JSL FDC_Motor_On                ; Turn on the motor
.19678c		e2 20		sep #$20	                SEP #$20        ; set A short
.19678e		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.196792		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.196794		f0 42		beq $1967d8	                    BEQ ret_true                    ; If not: assume the disk is present
.196796		a9 00		lda #$00	                    LDA #0
.196798		85 00		sta $0300	                    STA FDC_DRIVE
.19679a		a9 00		lda #$00	                    LDA #0
.19679c		85 01		sta $0301	                    STA FDC_HEAD
.19679e		a9 50		lda #$50	                    LDA #80
.1967a0		85 02		sta $0302	                    STA FDC_CYLINDER
.1967a2		22 38 63 19	jsl $196338	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.1967a6		90 34		bcc $1967dc	                    BCC ret_false                   ; If fail: return false
.1967a8		c2 10		rep #$10	                REP #$10        ; set X long
.1967aa		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.1967ad		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.1967b0		22 3c 14 19	jsl $19143c	                    JSL IDELAY
.1967b4		22 8d 61 19	jsl $19618d	                    JSL FDC_Sense_Int_Status
.1967b8		a5 06		lda $0306	                    LDA FDC_ST0
.1967ba		29 d0		and #$d0	                    AND #%11010000
.1967bc		d0 1e		bne $1967dc	                    BNE ret_false
.1967be		22 58 61 19	jsl $196158	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.1967c2		90 18		bcc $1967dc	                    BCC ret_false                   ; If fail: return false
.1967c4		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.1967c7		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.1967ca		22 3c 14 19	jsl $19143c	                    JSL IDELAY
.1967ce		22 8d 61 19	jsl $19618d	                    JSL FDC_Sense_Int_Status
.1967d2		a5 06		lda $0306	                    LDA FDC_ST0
.1967d4		29 d0		and #$d0	                    AND #%11010000
.1967d6		d0 04		bne $1967dc	                    BNE ret_false
.1967d8						ret_true
.1967d8		28		plp		                    PLP
.1967d9		2b		pld		                    PLD
.1967da		38		sec		                    SEC
.1967db		6b		rtl		                    RTL
.1967dc						ret_false
.1967dc		28		plp		                    PLP
.1967dd		2b		pld		                    PLD
.1967de		18		clc		                    CLC
.1967df		6b		rtl		                    RTL
.1967e0						FDC_WRITEVBR
.1967e0		8b		phb		                    PHB
.1967e1		0b		phd		                    PHD
.1967e2		08		php		                    PHP
.1967e3		48		pha		                PHA             ; begin setdbr macro
.1967e4		08		php		                PHP
.1967e5		e2 20		sep #$20	                SEP #$20        ; set A short
.1967e7		a9 00		lda #$00	                LDA #0
.1967e9		48		pha		                PHA
.1967ea		ab		plb		                PLB
.1967eb		28		plp		                PLP
.1967ec		68		pla		                PLA             ; end setdbr macro
.1967ed		48		pha		                PHA             ; begin setdp macro
.1967ee		08		php		                PHP
.1967ef		c2 20		rep #$20	                REP #$20        ; set A long
.1967f1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1967f4		5b		tcd		                TCD
.1967f5		28		plp		                PLP
.1967f6		68		pla		                PLA             ; end setdp macro
.1967f7		22 0f 66 19	jsl $19660f	                    JSL FDC_MOUNT               ; Mount the floppy disk
.1967fb		c2 30		rep #$30	                REP #$30        ; set A&X long
.1967fd		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.196800		a2 00 00	ldx #$0000	                    LDX #0
.196803		9f 00 a3 18	sta $18a300,x	clr_loop            STA DOS_SECTOR,X
.196807		e8		inx		                    INX
.196808		e8		inx		                    INX
.196809		e0 00 02	cpx #$0200	                    CPX #512
.19680c		d0 f5		bne $196803	                    BNE clr_loop
.19680e		e2 20		sep #$20	                SEP #$20        ; set A short
.196810		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.196813		bf c8 68 19	lda $1968c8,x	copy_loop           LDA FDC_VBR_BEGIN,X
.196817		9f 00 a3 18	sta $18a300,x	                    STA DOS_SECTOR,X
.19681b		e8		inx		                    INX
.19681c		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.19681f		d0 f2		bne $196813	                    BNE copy_loop
.196821		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.196824		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.196827		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.196829		9f 00 a3 18	sta $18a300,x	                    STA DOS_SECTOR,X
.19682d		f0 07		beq $196836	                    BEQ path_copy_done
.19682f		e8		inx		                    INX
.196830		c8		iny		                    INY
.196831		c0 80 00	cpy #$0080	                    CPY #128
.196834		d0 f1		bne $196827	                    BNE path_copy_loop
.196836						path_copy_done
.196836		c2 20		rep #$20	                REP #$20        ; set A long
.196838		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.19683b		8f fe a4 18	sta $18a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.19683f		c2 20		rep #$20	                REP #$20        ; set A long
.196841		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.196844		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.196846		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.196849		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.19684b		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.19684e		85 02		sta $0322	                    STA BIOS_LBA
.196850		85 04		sta $0324	                    STA BIOS_LBA+2
.196852		e2 20		sep #$20	                SEP #$20        ; set A short
.196854		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.196856		85 01		sta $0321	                    STA BIOS_DEV
.196858		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.19685c		b0 09		bcs $196867	                    BCS ret_success
.19685e		22 2d 61 19	jsl $19612d	                    JSL FDC_Motor_Off
.196862		28		plp		                    PLP                         ; Return the failure
.196863		2b		pld		                    PLD
.196864		ab		plb		                    PLB
.196865		18		clc		                    CLC
.196866		6b		rtl		                    RTL
.196867		22 2d 61 19	jsl $19612d	ret_success         JSL FDC_Motor_Off
.19686b		e2 20		sep #$20	                SEP #$20        ; set A short
.19686d		a9 00		lda #$00	                    LDA #0
.19686f		85 00		sta $0320	                    STA BIOS_STATUS
.196871		28		plp		                    PLP
.196872		2b		pld		                    PLD
.196873		ab		plb		                    PLB
.196874		38		sec		                    SEC
.196875		6b		rtl		                    RTL
.196876						FDC_TIME_HANDLE
.196876		08		php		                    PHP
.196877		e2 20		sep #$20	                SEP #$20        ; set A short
.196879		af 4e a0 18	lda $18a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.19687d		d0 06		bne $196885	                    BNE dec_motor                   ; If not zero: decrement the timer
.19687f		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.196883		f0 28		beq $1968ad	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.196885		af 4e a0 18	lda $18a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.196889		3a		dec a		                    DEC A
.19688a		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.19688e		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.196890		d0 0b		bne $19689d	                    BNE chk_motor_end               ; No: check to see if we're a the end
.196892		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.196896		3a		dec a		                    DEC A
.196897		8f 4f a0 18	sta $18a04f	                    STA @l FDC_MOTOR_TIMER+1
.19689b		80 10		bra $1968ad	                    BRA sof_timeout                 ; And move on to the next timer
.19689d		af 4e a0 18	lda $18a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.1968a1		d0 0a		bne $1968ad	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.1968a3		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1
.1968a7		d0 04		bne $1968ad	                    BNE sof_timeout
.1968a9		22 2d 61 19	jsl $19612d	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.1968ad						sof_timeout
.1968ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1968af		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.1968b3		f0 11		beq $1968c6	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.1968b5		3a		dec a		                    DEC A                           ; Count down one tick
.1968b6		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.1968ba		d0 0a		bne $1968c6	                    BNE sof_int_done                ; If not 0, we're done
.1968bc		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.1968c0		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.1968c2		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.1968c6		28		plp		sof_int_done        PLP
.1968c7		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.1968c8						FDC_VBR_BEGIN
>1968c8		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>1968cb		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>1968d3		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>1968d5		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>1968d6		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>1968d8		02				num_fat             .byte 2                 ; Number of FATs
>1968d9		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>1968db		40 0b				total_sectors       .word 2880              ; Total sectors
>1968dd		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>1968de		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>1968e0		12 00				sec_per_track       .word 18                ; Sectors per track
>1968e2		02 00				num_head            .word 2                 ; Number of heads
>1968e4		00 00 00 00			ignore2             .dword 0
>1968e8		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>1968ec		00 00				ignore3             .word 0
>1968ee		29				boot_signature      .byte $29
>1968ef		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>1968f3		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>1968fb		20 20 20
>1968fe		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.196906		80 40		bra $196948	                    BRA vbr_start
>196908						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.196948						vbr_start
.196948		c2 20		rep #$20	                REP #$20        ; set A long
.19694a		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.19694d		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.196951		a9 18 00	lda #$0018	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.196954		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.196958		22 ac 57 19	jsl $1957ac	                    JSL IF_RUN              ; And try to execute the binary file
.19695c		b0 0c		bcs $19696a	                    BCS lock                ; If it returned success... lock up... I guess?
.19695e						error
.19695e		e2 20		sep #$20	                SEP #$20        ; set A short
.196960		4b		phk		                    PHK                     ; Otherwise, print an error message
.196961		ab		plb		                    PLB
.196962		62 08 00	per $19696d	                    PER message
.196965		fa		plx		                    PLX
.196966		22 1c 10 00	jsl $00101c	                    JSL PUTS
.19696a		ea		nop		lock                NOP                     ; And lock up
.19696b		80 fd		bra $19696a	                    BRA lock
>19696d		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>196975		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>196985		65 20 62 69 6e 61 72 79 2e 0d 00
.196990						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.196990						IDE_TEST
.196990		08		php		                PHP
.196991		c2 20		rep #$20	                REP #$20        ; set A long
.196993		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.196996		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.19699a		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.19699d		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.1969a1		22 c4 6a 19	jsl $196ac4	                JSL IDE_IDENTIFY
.1969a5		b0 03		bcs $1969aa	                BCS id_ok
.1969a7		82 ab 00	brl $196a55	                BRL done
.1969aa						id_ok
.1969aa		c2 10		rep #$10	                REP #$10        ; set X long
.1969ac		e2 20		sep #$20	                SEP #$20        ; set A short
.1969ae		a0 28 00	ldy #$0028	                LDY #40
.1969b1		a2 36 00	ldx #$0036	                LDX #27*2
.1969b4		bf 01 a3 18	lda $18a301,x	pr_model        LDA DOS_SECTOR+1,X
.1969b8		22 18 10 00	jsl $001018	                JSL PUTC
.1969bc		bf 00 a3 18	lda $18a300,x	                LDA DOS_SECTOR,X
.1969c0		22 18 10 00	jsl $001018	                JSL PUTC
.1969c4		e8		inx		                INX
.1969c5		e8		inx		                INX
.1969c6		88		dey		                DEY
.1969c7		88		dey		                DEY
.1969c8		d0 ea		bne $1969b4	                BNE pr_model
.1969ca		c2 10		rep #$10	                REP #$10        ; set X long
.1969cc		e2 20		sep #$20	                SEP #$20        ; set A short
.1969ce		a0 14 00	ldy #$0014	                LDY #20
.1969d1		a2 14 00	ldx #$0014	                LDX #10*2
.1969d4		bf 01 a3 18	lda $18a301,x	pr_serial       LDA DOS_SECTOR+1,X
.1969d8		22 18 10 00	jsl $001018	                JSL PUTC
.1969dc		bf 00 a3 18	lda $18a300,x	                LDA DOS_SECTOR,X
.1969e0		22 18 10 00	jsl $001018	                JSL PUTC
.1969e4		e8		inx		                INX
.1969e5		e8		inx		                INX
.1969e6		88		dey		                DEY
.1969e7		88		dey		                DEY
.1969e8		d0 ea		bne $1969d4	                BNE pr_serial
.1969ea		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.1969ee		c2 30		rep #$30	                REP #$30        ; set A&X long
.1969f0		a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.1969f3		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.1969f7		a9 00 00	lda #$0000	                LDA #0
.1969fa		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.1969fe		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.196a01		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.196a05		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.196a08		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.196a0c		a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.196a0f		a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.196a12		9f 00 a3 18	sta $18a300,x	init_loop       STA DOS_SECTOR,X
.196a16		e8		inx		                INX
.196a17		e8		inx		                INX
.196a18		e0 00 02	cpx #$0200	                CPX #512
.196a1b		d0 f5		bne $196a12	                BNE init_loop
.196a1d		22 dd 6b 19	jsl $196bdd	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.196a21		b0 06		bcs $196a29	                BCS read_sect1
.196a23		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196a27		80 2c		bra $196a55	                BRA done
.196a29		a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.196a2c		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.196a30		a9 00 00	lda #$0000	                LDA #0
.196a33		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.196a37		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.196a3a		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.196a3e		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.196a41		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.196a45		22 52 6b 19	jsl $196b52	                JSL IDE_GETBLOCK        ; Attempt to read the block
.196a49		b0 06		bcs $196a51	                BCS all_ok
.196a4b		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196a4f		80 04		bra $196a55	                BRA done
.196a51						all_ok
.196a51		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196a55		28		plp		done            PLP
.196a56		6b		rtl		                RTL
.196a57						IDE_INIT
.196a57		e2 20		sep #$20	                SEP #$20        ; set A short
.196a59		a9 00		lda #$00	              LDA #$00
.196a5b		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.196a5f		20 80 6a	jsr $196a80	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.196a62		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.196a64		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.196a68		a9 01		lda #$01	              LDA #$01
.196a6a		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.196a6e		a9 00		lda #$00	              LDA #$00
.196a70		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.196a74		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.196a78		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.196a7c		20 9e 6a	jsr $196a9e	              JSR IDE_DRV_READY_NOTBUSY
.196a7f		6b		rtl		              RTL
.196a80						IDE_DRIVE_BSY
.196a80		08		php		                PHP
.196a81		e2 20		sep #$20	                SEP #$20        ; set A short
.196a83		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.196a87		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.196a89		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.196a8b		f0 f6		beq $196a83	                BEQ loop
.196a8d		28		plp		                PLP
.196a8e		60		rts		                RTS
.196a8f						IDE_DRIVE_READY
.196a8f		08		php		                PHP
.196a90		e2 20		sep #$20	                SEP #$20        ; set A short
.196a92		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.196a96		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.196a98		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.196a9a		d0 f6		bne $196a92	                BNE loop
.196a9c		28		plp		                PLP
.196a9d		60		rts		                RTS
.196a9e						IDE_DRV_READY_NOTBUSY
.196a9e		08		php		                PHP
.196a9f		e2 20		sep #$20	                SEP #$20        ; set A short
.196aa1		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.196aa5		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.196aa7		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.196aa9		d0 f6		bne $196aa1	                BNE loop                            ; No: keep waiting
.196aab		28		plp		ret_success     PLP                                 ; Return success
.196aac		38		sec		                SEC
.196aad		60		rts		                RTS
.196aae		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.196ab2		28		plp		                PLP                                 ; Return failure
.196ab3		18		clc		                CLC
.196ab4		60		rts		                RTS
.196ab5						IDE_NOT_DRQ
.196ab5		08		php		                PHP
.196ab6		e2 20		sep #$20	                SEP #$20        ; set A short
.196ab8		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.196abc		29 08		and #$08	                AND #IDE_STAT_DRQ
.196abe		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.196ac0		d0 f6		bne $196ab8	                BNE loop                ; No: keep waiting
.196ac2		28		plp		                PLP
.196ac3		60		rts		                RTS
.196ac4						IDE_IDENTIFY
.196ac4		5a		phy		                PHY
.196ac5		8b		phb		                PHB
.196ac6		0b		phd		                PHD
.196ac7		08		php		                PHP
.196ac8		48		pha		                PHA             ; begin setdbr macro
.196ac9		08		php		                PHP
.196aca		e2 20		sep #$20	                SEP #$20        ; set A short
.196acc		a9 00		lda #$00	                LDA #0
.196ace		48		pha		                PHA
.196acf		ab		plb		                PLB
.196ad0		28		plp		                PLP
.196ad1		68		pla		                PLA             ; end setdbr macro
.196ad2		48		pha		                PHA             ; begin setdp macro
.196ad3		08		php		                PHP
.196ad4		c2 20		rep #$20	                REP #$20        ; set A long
.196ad6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.196ad9		5b		tcd		                TCD
.196ada		28		plp		                PLP
.196adb		68		pla		                PLA             ; end setdp macro
.196adc		e2 20		sep #$20	                SEP #$20        ; set A short
.196ade		20 9e 6a	jsr $196a9e	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.196ae1		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.196ae3		29 07		and #$07	                AND #$07
.196ae5		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.196ae7		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.196aeb		20 9e 6a	jsr $196a9e	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.196aee		e2 20		sep #$20	                SEP #$20        ; set A short
.196af0		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.196af2		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.196af6		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196afa		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196afe		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.196b02		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.196b04		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.196b08		f0 29		beq $196b33	                BEQ no_media                    ; If 0: there is no drive
.196b0a		20 80 6a	jsr $196a80	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.196b0d		20 9e 6a	jsr $196a9e	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196b10		90 2d		bcc $196b3f	                BCC ret_failure                 ; If an error occurred, return it
.196b12		c2 30		rep #$30	                REP #$30        ; set A&X long
.196b14		a0 00 00	ldy #$0000	                LDY #0
.196b17		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.196b1b		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.196b1d		c8		iny		                INY                             ; Move to the next position
.196b1e		c8		iny		                INY
.196b1f		c0 00 02	cpy #$0200	                CPY #512
.196b22		d0 f3		bne $196b17	                BNE read_loop
.196b24						ret_success
.196b24		e2 20		sep #$20	                SEP #$20        ; set A short
.196b26		a9 00		lda #$00	                LDA #0
.196b28		85 00		sta $0320	                STA BIOS_STATUS
.196b2a		8d 06 03	sta $0306	                STA @w FDC_ST0
.196b2d		28		plp		                PLP                             ; Return success
.196b2e		2b		pld		                PLD
.196b2f		ab		plb		                PLB
.196b30		7a		ply		                PLY
.196b31		38		sec		                SEC
.196b32		6b		rtl		                RTL
.196b33						no_media
.196b33		e2 20		sep #$20	                SEP #$20        ; set A short
.196b35		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.196b37		80 0a		bra $196b43	                BRA pass_failure
.196b39						not_ata
.196b39		e2 20		sep #$20	                SEP #$20        ; set A short
.196b3b		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.196b3d		80 04		bra $196b43	                BRA pass_failure
.196b3f						ret_failure
.196b3f		e2 20		sep #$20	                SEP #$20        ; set A short
.196b41		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.196b43		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.196b45		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196b49		8d 06 03	sta $0306	                STA @w FDC_ST0
.196b4c		28		plp		                PLP
.196b4d		2b		pld		                PLD
.196b4e		ab		plb		                PLB
.196b4f		7a		ply		                PLY
.196b50		18		clc		                CLC
.196b51		6b		rtl		                RTL
.196b52						IDE_GETBLOCK
.196b52		5a		phy		                PHY
.196b53		8b		phb		                PHB
.196b54		0b		phd		                PHD
.196b55		08		php		                PHP
.196b56		48		pha		                PHA             ; begin setdbr macro
.196b57		08		php		                PHP
.196b58		e2 20		sep #$20	                SEP #$20        ; set A short
.196b5a		a9 00		lda #$00	                LDA #0
.196b5c		48		pha		                PHA
.196b5d		ab		plb		                PLB
.196b5e		28		plp		                PLP
.196b5f		68		pla		                PLA             ; end setdbr macro
.196b60		48		pha		                PHA             ; begin setdp macro
.196b61		08		php		                PHP
.196b62		c2 20		rep #$20	                REP #$20        ; set A long
.196b64		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.196b67		5b		tcd		                TCD
.196b68		28		plp		                PLP
.196b69		68		pla		                PLA             ; end setdp macro
.196b6a		e2 20		sep #$20	                SEP #$20        ; set A short
.196b6c		20 9e 6a	jsr $196a9e	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.196b6f		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.196b71		29 07		and #$07	                AND #$07
.196b73		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.196b75		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.196b79		20 9e 6a	jsr $196a9e	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.196b7c		e2 20		sep #$20	                SEP #$20        ; set A short
.196b7e		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.196b80		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.196b84		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.196b86		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196b8a		a5 03		lda $0323	                LDA BIOS_LBA+1
.196b8c		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196b90		a5 04		lda $0324	                LDA BIOS_LBA+2
.196b92		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.196b96		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.196b98		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.196b9c		ea		nop		                NOP                             ; Wait about 500ns
.196b9d		ea		nop		                NOP
.196b9e		ea		nop		                NOP
.196b9f		ea		nop		                NOP
.196ba0		20 9e 6a	jsr $196a9e	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196ba3		90 25		bcc $196bca	                BCC ret_failure                 ; If an error occurred, return it
.196ba5		a0 00 00	ldy #$0000	                LDY #0
.196ba8		c2 20		rep #$20	                REP #$20        ; set A long
.196baa		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.196bae		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.196bb0		c8		iny		                INY                             ; Move to the next position
.196bb1		c8		iny		                INY
.196bb2		c0 00 02	cpy #$0200	                CPY #512
.196bb5		d0 f3		bne $196baa	                BNE read_loop
.196bb7		ea		nop		                NOP                             ; Wait about 500ns
.196bb8		ea		nop		                NOP
.196bb9		ea		nop		                NOP
.196bba		ea		nop		                NOP
.196bbb						ret_success
.196bbb		e2 20		sep #$20	                SEP #$20        ; set A short
.196bbd		a9 00		lda #$00	                LDA #0
.196bbf		85 00		sta $0320	                STA BIOS_STATUS
.196bc1		8d 06 03	sta $0306	                STA @w FDC_ST0
.196bc4		28		plp		                PLP                             ; Return success
.196bc5		2b		pld		                PLD
.196bc6		ab		plb		                PLB
.196bc7		7a		ply		                PLY
.196bc8		38		sec		                SEC
.196bc9		6b		rtl		                RTL
.196bca						ret_failure
.196bca		e2 20		sep #$20	                SEP #$20        ; set A short
.196bcc		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196bd0		8d 06 03	sta $0306	                STA @w FDC_ST0
.196bd3		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.196bd5		85 00		sta $0320	                STA BIOS_STATUS
.196bd7		28		plp		                PLP
.196bd8		2b		pld		                PLD
.196bd9		ab		plb		                PLB
.196bda		7a		ply		                PLY
.196bdb		18		clc		                CLC
.196bdc		6b		rtl		                RTL
.196bdd						IDE_PUTBLOCK
.196bdd		5a		phy		                PHY
.196bde		8b		phb		                PHB
.196bdf		0b		phd		                PHD
.196be0		08		php		                PHP
.196be1		48		pha		                PHA             ; begin setdbr macro
.196be2		08		php		                PHP
.196be3		e2 20		sep #$20	                SEP #$20        ; set A short
.196be5		a9 00		lda #$00	                LDA #0
.196be7		48		pha		                PHA
.196be8		ab		plb		                PLB
.196be9		28		plp		                PLP
.196bea		68		pla		                PLA             ; end setdbr macro
.196beb		48		pha		                PHA             ; begin setdp macro
.196bec		08		php		                PHP
.196bed		c2 20		rep #$20	                REP #$20        ; set A long
.196bef		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.196bf2		5b		tcd		                TCD
.196bf3		28		plp		                PLP
.196bf4		68		pla		                PLA             ; end setdp macro
.196bf5		e2 20		sep #$20	                SEP #$20        ; set A short
.196bf7		20 9e 6a	jsr $196a9e	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.196bfa		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.196bfc		29 07		and #$07	                AND #$07
.196bfe		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.196c00		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.196c04		20 9e 6a	jsr $196a9e	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.196c07		e2 20		sep #$20	                SEP #$20        ; set A short
.196c09		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.196c0b		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.196c0f		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.196c11		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196c15		a5 03		lda $0323	                LDA BIOS_LBA+1
.196c17		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196c1b		a5 04		lda $0324	                LDA BIOS_LBA+2
.196c1d		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.196c21		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.196c23		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.196c27		ea		nop		                NOP                             ; Wait about 500ns
.196c28		ea		nop		                NOP
.196c29		ea		nop		                NOP
.196c2a		ea		nop		                NOP
.196c2b		20 9e 6a	jsr $196a9e	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196c2e		90 33		bcc $196c63	                BCC ret_failure                 ; If an error occurred, return it
.196c30		c2 30		rep #$30	                REP #$30        ; set A&X long
.196c32		a0 00 00	ldy #$0000	                LDY #0
.196c35		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.196c37		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.196c3b		c8		iny		                INY                             ; Move to the next position
.196c3c		c8		iny		                INY
.196c3d		c0 00 02	cpy #$0200	                CPY #512
.196c40		d0 f3		bne $196c35	                BNE read_loop
.196c42		ea		nop		                NOP                             ; Wait about 500ns
.196c43		ea		nop		                NOP
.196c44		ea		nop		                NOP
.196c45		ea		nop		                NOP
.196c46		20 9e 6a	jsr $196a9e	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196c49		90 18		bcc $196c63	                BCC ret_failure                 ; If an error occurred, return it
.196c4b		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.196c4f		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.196c52		d0 0f		bne $196c63	                BNE ret_failure                 ; If error: return failure
.196c54						ret_success
.196c54		e2 20		sep #$20	                SEP #$20        ; set A short
.196c56		a9 00		lda #$00	                LDA #0
.196c58		85 00		sta $0320	                STA BIOS_STATUS
.196c5a		8d 06 03	sta $0306	                STA @w FDC_ST0
.196c5d		28		plp		                PLP                             ; Return success
.196c5e		2b		pld		                PLD
.196c5f		ab		plb		                PLB
.196c60		7a		ply		                PLY
.196c61		38		sec		                SEC
.196c62		6b		rtl		                RTL
.196c63						ret_failure
.196c63		e2 20		sep #$20	                SEP #$20        ; set A short
.196c65		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196c69		8d 06 03	sta $0306	                STA @w FDC_ST0
.196c6c		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.196c6e		85 00		sta $0320	                STA BIOS_STATUS
.196c70		28		plp		                PLP
.196c71		2b		pld		                PLD
.196c72		ab		plb		                PLB
.196c73		7a		ply		                PLY
.196c74		18		clc		                CLC
.196c75		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/Ethernet_Init_library.asm

.196c76						SIMPLE_INIT_ETHERNET_CTRL
.196c76						WaitforittobeReady:
.196c76		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.196c7a		29 01 00	and #$0001	                AND #$0001
.196c7d		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.196c80		d0 f4		bne $196c76	                BNE WaitforittobeReady
.196c82		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.196c86		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.196c8a		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.196c8e		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.196c92		a9 00 00	lda #$0000	                LDA #$0000
.196c95		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.196c99		a9 00 70	lda #$7000	                LDA #$7000
.196c9c		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.196ca0		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.196ca3		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.196ca7		a9 0b 00	lda #$000b	                LDA #$000B
.196caa		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.196cae		a9 00 00	lda #$0000	                LDA #$0000
.196cb1		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.196cb5		20 e9 6c	jsr $196ce9	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.196cb8		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.196cbb		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.196cbf		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.196cc2		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.196cc6		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.196cc9		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.196ccd		20 e9 6c	jsr $196ce9	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.196cd0		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.196cd3		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.196cd7		a9 0c 00	lda #$000c	                LDA #$000C
.196cda		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.196cde		a9 04 00	lda #$0004	                LDA #$0004
.196ce1		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.196ce5		20 e9 6c	jsr $196ce9	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.196ce8		6b		rtl		                RTL
.196ce9						MAC_ACCESS_WAIT_FOR_COMPLETION
.196ce9		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.196cec		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.196cf0						WaitForCompletion:
.196cf0		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.196cf4		29 00 80	and #$8000	                AND #$8000
.196cf7		c9 00 80	cmp #$8000	                CMP #$8000
.196cfa		f0 f4		beq $196cf0	                BEQ WaitForCompletion
.196cfc		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/EXP-C200_EVID_Library.asm

=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000064					EVID_COLS_VISIBLE     = $000064 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000066					EVID_COLS_PER_LINE    = $000066 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000068					EVID_LINES_VISIBLE    = $000068 ;2 Bytes The number of rows visible on the screen. Default=25
=$00006a					EVID_LINES_MAX        = $00006A ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006c					EVID_CURSORPOS        = $00006C ;3 Bytes The next character written to the screen will be written in this location.
=$000070					EVID_CURSORX          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURSORY          = $000072 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000074					EVID_CURCOLOR         = $000074 ;1 Byte Color of next character to be printed to the screen.
=$000075					EVID_COLORPOS         = $000075 ;3 Byte address of cursor's position in the color matrix
=$000076					EVID_TMPPTR1          = $000076 ; 4 byte temporary pointer
=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.196cfd						EVID_IPRINT
.196cfd		22 06 6d 19	jsl $196d06	                JSL EVID_IPUTS
.196d01		22 78 6e 19	jsl $196e78	                JSL EVID_IPRINTCR
.196d05		6b		rtl		                RTL
.196d06						EVID_IPUTS
.196d06		48		pha		                PHA
.196d07		08		php		                PHP
.196d08		e2 20		sep #$20	                SEP #$20        ; set A short
.196d0a		c2 10		rep #$10	                REP #$10        ; set X long
.196d0c		bd 00 00	lda $0000,x	iputs1          LDA $0,b,x      ; read from the string
.196d0f		f0 08		beq $196d19	                BEQ iputs_done
.196d11		22 1d 6d 19	jsl $196d1d	iputs2          JSL EVID_IPUTC
.196d15		e8		inx		iputs3          INX
.196d16		4c 0c 6d	jmp $196d0c	                JMP iputs1
.196d19		e8		inx		iputs_done      INX
.196d1a		28		plp		                PLP
.196d1b		68		pla		                PLA
.196d1c		6b		rtl		                RTL
.196d1d						EVID_IPUTC
.196d1d		da		phx		                PHX
.196d1e		5a		phy		                PHY
.196d1f		0b		phd		                PHD
.196d20		8b		phb		                PHB
.196d21		08		php		                PHP                 ; stash the flags (we'll be changing M)
.196d22		48		pha		                PHA             ; begin setdp macro
.196d23		08		php		                PHP
.196d24		c2 20		rep #$20	                REP #$20        ; set A long
.196d26		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.196d29		5b		tcd		                TCD
.196d2a		28		plp		                PLP
.196d2b		68		pla		                PLA             ; end setdp macro
.196d2c		48		pha		                PHA             ; begin setdbr macro
.196d2d		08		php		                PHP
.196d2e		e2 20		sep #$20	                SEP #$20        ; set A short
.196d30		a9 00		lda #$00	                LDA #0
.196d32		48		pha		                PHA
.196d33		ab		plb		                PLB
.196d34		28		plp		                PLP
.196d35		68		pla		                PLA             ; end setdbr macro
.196d36		e2 20		sep #$20	                SEP #$20        ; set A short
.196d38		c2 10		rep #$10	                REP #$10        ; set X long
.196d3a		c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.196d3c		f0 69		beq $196da7	                BEQ go_down
.196d3e		c9 20		cmp #$20	                CMP #$20
.196d40		90 19		bcc $196d5b	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.196d42		c9 7f		cmp #$7f	                CMP #$7F
.196d44		f0 45		beq $196d8b	                BEQ do_del
.196d46		b0 02		bcs $196d4a	                BCS check_A0        ; [$20..$7E]: print it
.196d48		80 31		bra $196d7b	                BRA printc
.196d4a		c9 a0		cmp #$a0	check_A0        CMP #$A0
.196d4c		90 02		bcc $196d50	                BCC check_ctrl1
.196d4e		80 2b		bra $196d7b	                BRA printc          ; [$A0..$FF]: print it
.196d50		c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.196d52		f0 53		beq $196da7	                BEQ go_down         ; ... move the cursor down one row
.196d54		c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.196d56		f0 61		beq $196db9	                BEQ go_left         ; ... move the cursor left one column
.196d58		4c 85 6d	jmp $196d85	                JMP done
.196d5b		c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.196d5d		f0 69		beq $196dc8	                BEQ do_TAB          ; ... move to the next TAB stop
.196d5f		c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.196d61		f0 34		beq $196d97	                BEQ backspace       ; ... move the cursor back and replace with a space
.196d63		c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.196d65		f0 3a		beq $196da1	                BEQ do_cr           ; ... move cursor down and to the first column
.196d67		c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.196d69		f0 42		beq $196dad	                BEQ go_up           ; ... move the cursor up one row
.196d6b		c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.196d6d		f0 44		beq $196db3	                BEQ go_right        ; ... move the cursor right one column
.196d6f		c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.196d71		f0 1e		beq $196d91	                BEQ do_ins          ; ... insert a space
.196d73		c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.196d75		f0 48		beq $196dbf	                BEQ go_sol          ; ... move the cursor to the start of the line
.196d77		c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.196d79		f0 74		beq $196def	                BEQ go_eol          ; ... move the cursor to the end of the line
.196d7b		87 6c		sta [$6c]	printc          STA [EVID_CURSORPOS]     ; Save the character on the screen
.196d7d		a5 74		lda $74		                LDA EVID_CURCOLOR        ; Set the color based on CURCOLOR
.196d7f		87 75		sta [$75]	                STA [EVID_COLORPOS]
.196d81		22 b6 6e 19	jsl $196eb6	                JSL EVID_ICSRRIGHT       ; And advance the cursor
.196d85		28		plp		done            PLP
.196d86		ab		plb		                PLB
.196d87		2b		pld		                PLD
.196d88		7a		ply		                PLY
.196d89		fa		plx		                PLX
.196d8a		6b		rtl		                RTL
.196d8b		22 1c 6e 19	jsl $196e1c	do_del          JSL EVID_SCRSHIFTLL      ; Shift the current line left one space into the cursor
.196d8f		80 f4		bra $196d85	                BRA done
.196d91		22 40 6e 19	jsl $196e40	do_ins          JSL EVID_SCRSHIFTLR      ; Shift the current line right one space from the cursor
.196d95		80 ee		bra $196d85	                BRA done
.196d97		22 e9 6e 19	jsl $196ee9	backspace       JSL EVID_ICSRLEFT
.196d9b		22 1c 6e 19	jsl $196e1c	                JSL EVID_SCRSHIFTLL      ; Shift the current line left one space into the cursor
.196d9f		80 e4		bra $196d85	                BRA done
.196da1		22 78 6e 19	jsl $196e78	do_cr           JSL EVID_IPRINTCR        ; Move the cursor to the beginning of the next line
.196da5		80 de		bra $196d85	                BRA done
.196da7		22 35 6f 19	jsl $196f35	go_down         JSL EVID_ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.196dab		80 d8		bra $196d85	                BRA done
.196dad		22 0f 6f 19	jsl $196f0f	go_up           JSL EVID_ICSRUP          ; Move the cursor up one line
.196db1		80 d2		bra $196d85	                BRA done
.196db3		22 b6 6e 19	jsl $196eb6	go_right        JSL EVID_ICSRRIGHT       ; Move the cursor right one column
.196db7		80 cc		bra $196d85	                BRA done
.196db9		22 e9 6e 19	jsl $196ee9	go_left         JSL EVID_ICSRLEFT        ; Move the cursor left one column
.196dbd		80 c6		bra $196d85	                BRA done
.196dbf						go_sol
.196dbf		c2 20		rep #$20	                REP #$20        ; set A long
.196dc1		a2 00 00	ldx #$0000	                LDX #0
.196dc4		a4 72		ldy $72		                LDY EVID_CURSORY
.196dc6		80 21		bra $196de9	                BRA do_locate
.196dc8						do_TAB
.196dc8		c2 20		rep #$20	                REP #$20        ; set A long
.196dca		a5 70		lda $70		                LDA EVID_CURSORX         ; Get the current column
.196dcc		29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.196dcf		18		clc		                CLC
.196dd0		69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.196dd3		aa		tax		                TAX
.196dd4		a4 72		ldy $72		                LDY EVID_CURSORY
.196dd6		e2 20		sep #$20	                SEP #$20        ; set A short
.196dd8		e4 64		cpx $64		set_xy          CPX EVID_COLS_VISIBLE    ; Check if we're still on screen horizontally
.196dda		90 04		bcc $196de0	                BCC check_row       ; Yes: check the row
.196ddc		a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.196ddf		c8		iny		                INY                 ; ... and the next row
.196de0		c4 68		cpy $68		check_row       CPY EVID_LINES_VISIBLE   ; Check if we're still on the screen vertically
.196de2		90 05		bcc $196de9	                BCC do_locate       ; Yes: reposition the cursor
.196de4		22 a6 6f 19	jsl $196fa6	                JSL EVID_ISCROLLUP       ; No: scroll the screen
.196de8		88		dey		                DEY                 ; And set the row to the last one
.196de9		22 5a 6f 19	jsl $196f5a	do_locate       JSL EVID_ILOCATE         ; Set the cursor position
.196ded		80 96		bra $196d85	                BRA done
.196def		a6 64		ldx $64		go_eol          LDX EVID_COLS_VISIBLE    ; Move the cursor to the right most column
.196df1		ca		dex		                DEX
.196df2		a4 72		ldy $72		                LDY EVID_CURSORY
.196df4		22 5a 6f 19	jsl $196f5a	                JSL EVID_ILOCATE
.196df8		e2 20		sep #$20	                SEP #$20        ; set A short
.196dfa		a7 6c		lda [$6c]	eol_loop        LDA [EVID_CURSORPOS]     ; Get the character under the cursor
.196dfc		c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.196dfe		d0 0b		bne $196e0b	                BNE eol_done        ; No: exit the loop
.196e00		22 e9 6e 19	jsl $196ee9	                JSL EVID_ICSRLEFT        ; Yes: move to the left
.196e04		a6 70		ldx $70		                LDX EVID_CURSORX         ; Are we at column 0?
.196e06		d0 f2		bne $196dfa	                BNE eol_loop        ; No: try again
.196e08		82 7a ff	brl $196d85	                BRL done            ; Yes: we're done
.196e0b		a6 70		ldx $70		eol_done        LDX EVID_CURSORX         ; Check the column
.196e0d		e8		inx		                INX
.196e0e		e4 64		cpx $64		                CPX EVID_COLS_VISIBLE    ; Is it the right most?
.196e10		d0 03		bne $196e15	                BNE eol_right
.196e12		82 70 ff	brl $196d85	                BRL done            ; Yes: we're done
.196e15		22 b6 6e 19	jsl $196eb6	eol_right       JSL EVID_ICSRRIGHT       ; No: move right one column
.196e19		82 69 ff	brl $196d85	                BRL done
.196e1c						EVID_SCRSHIFTLL
.196e1c		da		phx		                PHX
.196e1d		5a		phy		                PHY
.196e1e		48		pha		                PHA
.196e1f		0b		phd		                PHD
.196e20		08		php		                PHP
.196e21		48		pha		                PHA             ; begin setdp macro
.196e22		08		php		                PHP
.196e23		c2 20		rep #$20	                REP #$20        ; set A long
.196e25		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.196e28		5b		tcd		                TCD
.196e29		28		plp		                PLP
.196e2a		68		pla		                PLA             ; end setdp macro
.196e2b		c2 30		rep #$30	                REP #$30        ; set A&X long
.196e2d		a5 6c		lda $6c		                LDA EVID_CURSORPOS       ; Get the current cursor position
.196e2f		a8		tay		                TAY                 ; Set it as the destination
.196e30		aa		tax		                TAX
.196e31		e8		inx		                INX                 ; And set the next cell as the source
.196e32		18		clc		                CLC                 ; Calculate the length of the block to move
.196e33		a5 64		lda $64		                LDA EVID_COLS_VISIBLE    ; as columns visible - X
.196e35		e5 70		sbc $70		                SBC EVID_CURSORX
.196e37		54 ae ae	mvn $ae,$ae	                MVN $AE, $AE        ; And move the block
.196e3a		28		plp		                PLP
.196e3b		2b		pld		                PLD
.196e3c		68		pla		                PLA
.196e3d		7a		ply		                PLY
.196e3e		fa		plx		                PLX
.196e3f		6b		rtl		                RTL
.196e40						EVID_SCRSHIFTLR
.196e40		da		phx		                PHX
.196e41		48		pha		                PHA
.196e42		0b		phd		                PHD
.196e43		08		php		                PHP
.196e44		48		pha		                PHA             ; begin setdp macro
.196e45		08		php		                PHP
.196e46		c2 20		rep #$20	                REP #$20        ; set A long
.196e48		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.196e4b		5b		tcd		                TCD
.196e4c		28		plp		                PLP
.196e4d		68		pla		                PLA             ; end setdp macro
.196e4e		c2 30		rep #$30	                REP #$30        ; set A&X long
.196e50		a5 70		lda $70		                LDA EVID_CURSORX         ; What column are we on
.196e52		1a		inc a		                INC A
.196e53		c5 64		cmp $64		                CMP EVID_COLS_VISIBLE    ; >= the # visible?
.196e55		b0 1b		bcs $196e72	                BGE done            ; Yes: just skip the whole thing
.196e57		38		sec		                SEC                 ; Calculate the length of the block to move
.196e58		a5 64		lda $64		                LDA EVID_COLS_VISIBLE
.196e5a		e5 70		sbc $70		                SBC EVID_CURSORX
.196e5c		1a		inc a		                INC A
.196e5d		18		clc		                CLC
.196e5e		65 6c		adc $6c		                ADC EVID_CURSORPOS       ; Add the current cursor position
.196e60		3a		dec a		                DEC A
.196e61		a8		tay		                TAY                 ; Make it the destination
.196e62		3a		dec a		                DEC A               ; Move to the previous column
.196e63		aa		tax		                TAX                 ; Make it the source
.196e64		38		sec		                SEC                 ; Calculate the length of the block to move
.196e65		a5 64		lda $64		                LDA EVID_COLS_VISIBLE    ; as columns visible - X
.196e67		e5 70		sbc $70		                SBC EVID_CURSORX
.196e69		44 ae ae	mvp $ae,$ae	                MVP $AE, $AE        ; And move the block
.196e6c		e2 20		sep #$20	                SEP #$20        ; set A short
.196e6e		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.196e70		87 6c		sta [$6c]	                STA [EVID_CURSORPOS]
.196e72		28		plp		done            PLP
.196e73		2b		pld		                PLD
.196e74		68		pla		                PLA
.196e75		fa		plx		                PLX
.196e76		6b		rtl		                RTL
.196e77						EVID_IPUTB
.196e77		6b		rtl		                RTL
.196e78						EVID_IPRINTCR
.196e78		da		phx		                PHX
.196e79		5a		phy		                PHY
.196e7a		8b		phb		                PHB
.196e7b		0b		phd		                PHD
.196e7c		08		php		                PHP
.196e7d		48		pha		                PHA             ; begin setdbr macro
.196e7e		08		php		                PHP
.196e7f		e2 20		sep #$20	                SEP #$20        ; set A short
.196e81		a9 00		lda #$00	                LDA #0
.196e83		48		pha		                PHA
.196e84		ab		plb		                PLB
.196e85		28		plp		                PLP
.196e86		68		pla		                PLA             ; end setdbr macro
.196e87		48		pha		                PHA             ; begin setdp macro
.196e88		08		php		                PHP
.196e89		c2 20		rep #$20	                REP #$20        ; set A long
.196e8b		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.196e8e		5b		tcd		                TCD
.196e8f		28		plp		                PLP
.196e90		68		pla		                PLA             ; end setdp macro
.196e91		e2 20		sep #$20	                SEP #$20        ; set A short
.196e93		c2 10		rep #$10	                REP #$10        ; set X long
.196e95		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.196e98		a4 72		ldy $72		                LDY EVID_CURSORY
.196e9a		c8		iny		                INY
.196e9b		22 5a 6f 19	jsl $196f5a	                JSL EVID_ILOCATE
.196e9f		28		plp		done            PLP
.196ea0		2b		pld		                PLD
.196ea1		ab		plb		                PLB
.196ea2		7a		ply		                PLY
.196ea3		fa		plx		                PLX
.196ea4		6b		rtl		                RTL
.196ea5						EVID_ICSRHOME
.196ea5		da		phx		                PHX
.196ea6		5a		phy		                PHY
.196ea7		08		php		                PHP
.196ea8		a2 00 00	ldx #$0000	                LDX #0
.196eab		a0 00 00	ldy #$0000	                LDY #0
.196eae		22 5a 6f 19	jsl $196f5a	                JSL EVID_ILOCATE
.196eb2		28		plp		                PLP
.196eb3		7a		ply		                PLY
.196eb4		fa		plx		                PLX
.196eb5		6b		rtl		                RTL
.196eb6						EVID_ICSRRIGHT
.196eb6		da		phx		                PHX
.196eb7		5a		phy		                PHY
.196eb8		48		pha		                PHA
.196eb9		0b		phd		                PHD
.196eba		08		php		                PHP
.196ebb		c2 20		rep #$20	                REP #$20        ; set A long
.196ebd		c2 10		rep #$10	                REP #$10        ; set X long
.196ebf		48		pha		                PHA             ; begin setdp macro
.196ec0		08		php		                PHP
.196ec1		c2 20		rep #$20	                REP #$20        ; set A long
.196ec3		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.196ec6		5b		tcd		                TCD
.196ec7		28		plp		                PLP
.196ec8		68		pla		                PLA             ; end setdp macro
.196ec9		a6 70		ldx $70		                LDX EVID_CURSORX           ; Get the new column
.196ecb		e8		inx		                INX
.196ecc		a4 72		ldy $72		                LDY EVID_CURSORY           ; Get the current row
.196ece		e4 64		cpx $64		                CPX EVID_COLS_VISIBLE      ; Are we off screen?
.196ed0		90 0d		bcc $196edf	                BCC icsrright_nowrap  ; No: just set the position
.196ed2		a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.196ed5		c8		iny		                INY                   ; And move to the next row
.196ed6		c4 68		cpy $68		                CPY EVID_LINES_VISIBLE     ; Are we still off screen?
.196ed8		90 05		bcc $196edf	                BCC icsrright_nowrap  ; No: just set the position
.196eda		88		dey		                DEY                   ; Yes: lock to the last row
.196edb		22 a6 6f 19	jsl $196fa6	                JSL EVID_ISCROLLUP         ; But scroll the screen up
.196edf						icsrright_nowrap
.196edf		22 5a 6f 19	jsl $196f5a	                JSL EVID_ILOCATE           ; Set the cursor position
.196ee3		28		plp		                PLP
.196ee4		2b		pld		                PLD
.196ee5		68		pla		                PLA
.196ee6		7a		ply		                PLY
.196ee7		fa		plx		                PLX
.196ee8		6b		rtl		                RTL
.196ee9						EVID_ICSRLEFT
.196ee9		da		phx		                PHX
.196eea		5a		phy		                PHY
.196eeb		48		pha		                PHA
.196eec		0b		phd		                PHD
.196eed		08		php		                PHP
.196eee		c2 30		rep #$30	                REP #$30        ; set A&X long
.196ef0		48		pha		                PHA             ; begin setdp macro
.196ef1		08		php		                PHP
.196ef2		c2 20		rep #$20	                REP #$20        ; set A long
.196ef4		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.196ef7		5b		tcd		                TCD
.196ef8		28		plp		                PLP
.196ef9		68		pla		                PLA             ; end setdp macro
.196efa		a5 70		lda $70		                LDA EVID_CURSORX
.196efc		f0 0b		beq $196f09	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.196efe		a6 70		ldx $70		                LDX EVID_CURSORX
.196f00		ca		dex		                DEX
.196f01		86 70		stx $70		                STX EVID_CURSORX
.196f03		a4 72		ldy $72		                LDY EVID_CURSORY
.196f05		22 5a 6f 19	jsl $196f5a	                JSL EVID_ILOCATE
.196f09						icsrleft_done_already_zero
.196f09		28		plp		                PLP
.196f0a		2b		pld		                PLD
.196f0b		68		pla		                PLA
.196f0c		7a		ply		                PLY
.196f0d		fa		plx		                PLX
.196f0e		6b		rtl		                RTL
.196f0f						EVID_ICSRUP
.196f0f		da		phx		                PHX
.196f10		5a		phy		                PHY
.196f11		48		pha		                PHA
.196f12		0b		phd		                PHD
.196f13		08		php		                PHP
.196f14		c2 30		rep #$30	                REP #$30        ; set A&X long
.196f16		48		pha		                PHA             ; begin setdp macro
.196f17		08		php		                PHP
.196f18		c2 20		rep #$20	                REP #$20        ; set A long
.196f1a		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.196f1d		5b		tcd		                TCD
.196f1e		28		plp		                PLP
.196f1f		68		pla		                PLA             ; end setdp macro
.196f20		a5 72		lda $72		                LDA EVID_CURSORY
.196f22		f0 0b		beq $196f2f	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.196f24		a4 72		ldy $72		                LDY EVID_CURSORY
.196f26		88		dey		                DEY
.196f27		84 72		sty $72		                STY EVID_CURSORY
.196f29		a6 70		ldx $70		                LDX EVID_CURSORX
.196f2b		22 5a 6f 19	jsl $196f5a	                JSL EVID_ILOCATE
.196f2f						isrup_done_already_zero
.196f2f		28		plp		                PLP
.196f30		2b		pld		                PLD
.196f31		68		pla		                PLA
.196f32		7a		ply		                PLY
.196f33		fa		plx		                PLX
.196f34		6b		rtl		                RTL
.196f35						EVID_ICSRDOWN
.196f35		da		phx		                PHX
.196f36		5a		phy		                PHY
.196f37		0b		phd		                PHD
.196f38		c2 30		rep #$30	                REP #$30        ; set A&X long
.196f3a		48		pha		                PHA             ; begin setdp macro
.196f3b		08		php		                PHP
.196f3c		c2 20		rep #$20	                REP #$20        ; set A long
.196f3e		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.196f41		5b		tcd		                TCD
.196f42		28		plp		                PLP
.196f43		68		pla		                PLA             ; end setdp macro
.196f44		a6 70		ldx $70		                LDX EVID_CURSORX                 ; Get the current column
.196f46		a4 72		ldy $72		                LDY EVID_CURSORY                 ; Get the new row
.196f48		c8		iny		                INY
.196f49		c4 68		cpy $68		                CPY EVID_LINES_VISIBLE           ; Check to see if we're off screen
.196f4b		90 05		bcc $196f52	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.196f4d		88		dey		                DEY                         ; Yes: go back to the last row
.196f4e		22 a6 6f 19	jsl $196fa6	                JSL EVID_ISCROLLUP               ; But scroll the screen up
.196f52						icsrdown_noscroll
.196f52		22 5a 6f 19	jsl $196f5a	                JSL EVID_ILOCATE                 ; And set the cursor position
.196f56		2b		pld		                PLD
.196f57		7a		ply		                PLY
.196f58		fa		plx		                PLX
.196f59		6b		rtl		                RTL
.196f5a						EVID_ILOCATE
.196f5a		48		pha		                PHA
.196f5b		0b		phd		                PHD
.196f5c		08		php		                PHP
.196f5d		48		pha		                PHA             ; begin setdp macro
.196f5e		08		php		                PHP
.196f5f		c2 20		rep #$20	                REP #$20        ; set A long
.196f61		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.196f64		5b		tcd		                TCD
.196f65		28		plp		                PLP
.196f66		68		pla		                PLA             ; end setdp macro
.196f67		c2 30		rep #$30	                REP #$30        ; set A&X long
.196f69						ilocate_scroll
.196f69		c4 68		cpy $68		                CPY EVID_LINES_VISIBLE
.196f6b		90 07		bcc $196f74	                BCC ilocate_scrolldone
.196f6d		22 a6 6f 19	jsl $196fa6	                JSL EVID_ISCROLLUP
.196f71		88		dey		                DEY
.196f72		80 f5		bra $196f69	                BRA ilocate_scroll
.196f74						ilocate_scrolldone
.196f74		86 70		stx $70		                STX EVID_CURSORX
.196f76		84 72		sty $72		                STY EVID_CURSORY
.196f78		a5 60		lda $60		                LDA EVID_SCREENBEGIN
.196f7a						ilocate_row
.196f7a		c0 00 00	cpy #$0000	                CPY #$0
.196f7d		f0 08		beq $196f87	                BEQ ilocate_right
.196f7f		18		clc		ilocate_down    CLC
.196f80		65 66		adc $66		                ADC EVID_COLS_PER_LINE
.196f82		88		dey		                DEY
.196f83		f0 02		beq $196f87	                BEQ ilocate_right
.196f85		80 f8		bra $196f7f	                BRA ilocate_down
.196f87		18		clc		ilocate_right   CLC
.196f88		65 70		adc $70		                ADC EVID_CURSORX             ; move the cursor right X columns
.196f8a		85 6c		sta $6c		                STA EVID_CURSORPOS
.196f8c		a4 72		ldy $72		                LDY EVID_CURSORY
.196f8e		98		tya		                TYA
.196f8f		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.196f93		8a		txa		                TXA
.196f94		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.196f98		c2 20		rep #$20	                REP #$20        ; set A long
.196f9a		18		clc		                CLC
.196f9b		a5 6c		lda $6c		                LDA EVID_CURSORPOS
.196f9d		69 00 20	adc #$2000	                ADC #<>(EVID_COLOR_MEM - EVID_TEXT_MEM)
.196fa0		85 75		sta $75		                STA EVID_COLORPOS
.196fa2		28		plp		ilocate_done    PLP
.196fa3		2b		pld		                PLD
.196fa4		68		pla		                PLA
.196fa5		6b		rtl		                RTL
.196fa6						EVID_ISCROLLUP
.196fa6		48		pha		                PHA
.196fa7		da		phx		                PHX
.196fa8		5a		phy		                PHY
.196fa9		8b		phb		                PHB
.196faa		0b		phd		                PHD
.196fab		08		php		                PHP
.196fac		48		pha		                PHA             ; begin setdp macro
.196fad		08		php		                PHP
.196fae		c2 20		rep #$20	                REP #$20        ; set A long
.196fb0		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.196fb3		5b		tcd		                TCD
.196fb4		28		plp		                PLP
.196fb5		68		pla		                PLA             ; end setdp macro
.196fb6		c2 30		rep #$30	                REP #$30        ; set A&X long
.196fb8		a5 66		lda $66		                LDA EVID_COLS_PER_LINE
.196fba		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.196fbe		a5 68		lda $68		                LDA EVID_LINES_VISIBLE
.196fc0		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.196fc4		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.196fc8		85 76		sta $76		                STA EVID_TMPPTR1
.196fca		18		clc		                CLC
.196fcb		a9 00 20	lda #$2000	                LDA #$2000
.196fce		a8		tay		                TAY
.196fcf		65 66		adc $66		                ADC EVID_COLS_PER_LINE
.196fd1		aa		tax		                TAX
.196fd2		a5 76		lda $76		                LDA EVID_TMPPTR1
.196fd4		54 ae ae	mvn $ae,$ae	                MVN $AE,$AE
.196fd7		c2 30		rep #$30	                REP #$30        ; set A&X long
.196fd9		18		clc		                CLC
.196fda		a9 00 40	lda #$4000	                LDA #$4000
.196fdd		a8		tay		                TAY
.196fde		65 66		adc $66		                ADC EVID_COLS_PER_LINE
.196fe0		aa		tax		                TAX
.196fe1		a5 76		lda $76		                LDA EVID_TMPPTR1
.196fe3		54 ae ae	mvn $ae,$ae	                MVN $AE,$AE
.196fe6		a5 76		lda $76		                LDA EVID_TMPPTR1
.196fe8		48		pha		                PHA
.196fe9		18		clc		                CLC
.196fea		69 00 20	adc #$2000	                ADC #<>EVID_TEXT_MEM
.196fed		85 76		sta $76		                STA EVID_TMPPTR1
.196fef		a0 00 00	ldy #$0000	                LDY #0
.196ff2		a9 20 00	lda #$0020	                LDA #' '
.196ff5		97 76		sta [$76],y	clr_text        STA [EVID_TMPPTR1],Y
.196ff7		c8		iny		                INY
.196ff8		c4 64		cpy $64		                CPY EVID_COLS_VISIBLE
.196ffa		d0 f9		bne $196ff5	                BNE clr_text
.196ffc		68		pla		                PLA
.196ffd		18		clc		                CLC
.196ffe		69 00 40	adc #$4000	                ADC #<>EVID_COLOR_MEM
.197001		85 76		sta $76		                STA EVID_TMPPTR1
.197003		a0 00 00	ldy #$0000	                LDY #0
.197006		a5 74		lda $74		                LDA EVID_CURCOLOR
.197008		97 76		sta [$76],y	clr_color       STA [EVID_TMPPTR1],Y
.19700a		c8		iny		                INY
.19700b		c4 64		cpy $64		                CPY EVID_COLS_VISIBLE
.19700d		d0 f9		bne $197008	                BNE clr_color
.19700f		28		plp		                PLP
.197010		2b		pld		                PLD
.197011		ab		plb		                PLB
.197012		7a		ply		                PLY
.197013		fa		plx		                PLX
.197014		68		pla		                PLA
.197015		6b		rtl		                RTL
.197016						EVID_IPRINTH
.197016		08		php		                PHP
.197017		48		pha		                PHA
.197018						iprinth1
.197018		e2 20		sep #$20	                SEP #$20        ; set A short
.19701a		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.19701d		4a		lsr a		                LSR
.19701e		4a		lsr a		                LSR
.19701f		4a		lsr a		                LSR
.197020		4a		lsr a		                LSR
.197021		22 70 70 19	jsl $197070	                JSL EVID_iprint_digit
.197025		bd 00 00	lda $0000,x	                LDA #0,b,x
.197028		22 70 70 19	jsl $197070	                JSL EVID_iprint_digit
.19702c		ca		dex		                DEX
.19702d		88		dey		                DEY
.19702e		d0 e8		bne $197018	                BNE iprinth1
.197030		68		pla		                PLA
.197031		28		plp		                PLP
.197032		6b		rtl		                RTL
.197033						EVID_IPRINTAH
.197033		48		pha		                PHA
.197034		08		php		                PHP
.197035		8f 44 02 00	sta $000244	                STA @lCPUA              ; Save A where we can use it multiple times
.197039		08		php		                PHP                     ; Get the processor status into A
.19703a		e2 20		sep #$20	                SEP #$20        ; set A short
.19703c		c2 10		rep #$10	                REP #$10        ; set X long
.19703e		68		pla		                PLA
.19703f		29 20		and #$20	                AND #%00100000          ; Is M = 1?
.197041		c9 20		cmp #$20	                CMP #%00100000
.197043		f0 14		beq $197059	                BEQ eight_bit
.197045		af 45 02 00	lda $000245	                LDA @lCPUA+1            ; Get nibble [15..12]
.197049		4a		lsr a		                LSR A
.19704a		4a		lsr a		                LSR A
.19704b		4a		lsr a		                LSR A
.19704c		4a		lsr a		                LSR A
.19704d		22 70 70 19	jsl $197070	                JSL EVID_iprint_digit   ; And print it
.197051		af 45 02 00	lda $000245	                LDA @lCPUA+1            ; Get nibble [11..8]
.197055		22 70 70 19	jsl $197070	                JSL EVID_iprint_digit   ; And print it
.197059		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA              ; Get nibble [7..4]
.19705d		4a		lsr a		                LSR A
.19705e		4a		lsr a		                LSR A
.19705f		4a		lsr a		                LSR A
.197060		4a		lsr a		                LSR A
.197061		22 70 70 19	jsl $197070	                JSL EVID_iprint_digit   ; And print it
.197065		af 44 02 00	lda $000244	                LDA @lCPUA              ; Get nibble [3..0]
.197069		22 70 70 19	jsl $197070	                JSL EVID_iprint_digit   ; And print it
.19706d		28		plp		                PLP
.19706e		68		pla		                PLA
.19706f		6b		rtl		                RTL
.197070						EVID_iprint_digit
.197070		da		phx		                PHX
.197071		c2 20		rep #$20	                REP #$20        ; set A long
.197073		29 0f 00	and #$000f	                AND #$0F
.197076		aa		tax		                TAX
.197077		bf 6d 76 19	lda $19766d,x	                LDA hex_digits,X
.19707b		22 1d 6d 19	jsl $196d1d	                JSL EVID_IPUTC       ; Print the digit
.19707f		fa		plx		                PLX
.197080		6b		rtl		                RTL
.197081						INIT_EVID_VID_MODE
.197081		e2 20		sep #$20	                SEP #$20        ; set A short
.197083		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable          ; 0 - 80x60, 1- 100x75
.197085		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.197089		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable           ; Enable the Border
.19708b		8f 04 1e ae	sta $ae1e04	                STA EVID_BORDER_CTRL_REG
.19708f		a9 08		lda #$08	                LDA #8                           ; Set the border to the standard 8 pixels
.197091		8f 08 1e ae	sta $ae1e08	                STA EVID_BORDER_X_SIZE          ; Let's use maximum space
.197095		8f 09 1e ae	sta $ae1e09	                STA EVID_BORDER_Y_SIZE
.197099		a9 20		lda #$20	                LDA #$20
.19709b		8f 07 1e ae	sta $ae1e07	                STA EVID_BORDER_COLOR_R        ; R
.19709f		a9 00		lda #$00	                LDA #$00
.1970a1		8f 06 1e ae	sta $ae1e06	                STA EVID_BORDER_COLOR_G        ; G
.1970a5		a9 20		lda #$20	                LDA #$20
.1970a7		8f 05 1e ae	sta $ae1e05	                STA EVID_BORDER_COLOR_B        ; B
.1970ab		22 7d 71 19	jsl $19717d	                JSL INIT_EVID_EVID_LUT
.1970af		22 66 71 19	jsl $197166	                JSL INIT_EVID_EVID_FONTSET
.1970b3		22 a1 71 19	jsl $1971a1	                JSL INIT_EVID_EVID_CURSOR
.1970b7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1970b9		a2 62 00	ldx #$0062	                LDX #(100-2)
.1970bc		86 64		stx $64		                STX EVID_COLS_VISIBLE
.1970be		a0 49 00	ldy #$0049	                LDY #(75-2)
.1970c1		84 68		sty $68		                STY EVID_LINES_VISIBLE
.1970c3		a2 64 00	ldx #$0064	                LDX #100
.1970c6		86 66		stx $66		                STX EVID_COLS_PER_LINE
.1970c8		a0 4b 00	ldy #$004b	                LDY #75
.1970cb		84 6a		sty $6a		                STY EVID_LINES_MAX
.1970cd		a9 f0 00	lda #$00f0	                LDA #$F0                  ; Set the default text color to light gray on dark gray
.1970d0		85 74		sta $74		                STA EVID_CURCOLOR
.1970d2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1970d4		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM      ; store the initial screen buffer location
.1970d7		85 60		sta $60		                STA EVID_SCREENBEGIN
.1970d9		85 6c		sta $6c		                STA EVID_CURSORPOS
.1970db		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM   ; Set the initial COLOR cursor position
.1970de		85 75		sta $75		                STA EVID_COLORPOS
.1970e0		e2 20		sep #$20	                SEP #$20        ; set A short
.1970e2		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.1970e4		85 0e		sta $0e		                STA SCREENBEGIN + 2
.1970e6		85 6e		sta $6e		                STA EVID_CURSORPOS+2
.1970e8		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM    ; Set the initial COLOR cursor position
.1970ea		85 77		sta $77		                STA EVID_COLORPOS + 2
.1970ec		22 bf 71 19	jsl $1971bf	                JSL INIT_EVID_EVID_CLRSCREEN
.1970f0		c2 10		rep #$10	                REP #$10        ; set X long
.1970f2		0b		phd		                PHD
.1970f3		48		pha		                PHA             ; begin setdbr macro
.1970f4		08		php		                PHP
.1970f5		e2 20		sep #$20	                SEP #$20        ; set A short
.1970f7		a9 19		lda #$19	                LDA #`EVID_DEV_RDY0
.1970f9		48		pha		                PHA
.1970fa		ab		plb		                PLB
.1970fb		28		plp		                PLP
.1970fc		68		pla		                PLA             ; end setdbr macro
.1970fd		a2 1e 71	ldx #$711e	                LDX #<>EVID_DEV_RDY0
.197100		22 fd 6c 19	jsl $196cfd	                JSL EVID_IPRINT
.197104		a2 4e 71	ldx #$714e	                LDX #<>EVID_DEV_RDY1
.197107		22 fd 6c 19	jsl $196cfd	                JSL EVID_IPRINT
.19710b		2b		pld		                PLD
.19710c		a2 00 00	ldx #$0000	                LDX #$0000
.19710f						LifeIsFullOfColors:
.19710f		bf 44 71 19	lda $197144,x	                LDA @l EVID_DEV_RDY0_CLR, X
.197113		9f 00 40 ae	sta $ae4000,x	                STA @l EVID_COLOR_MEM, X
.197117		e8		inx		                INX
.197118		e0 0a 00	cpx #$000a	                CPX #10
.19711b		d0 f2		bne $19710f	                BNE LifeIsFullOfColors
.19711d		6b		rtl		                RTL
>19711e		0b 0c 0b 0c 0b 0c 0b 0c		EVID_DEV_RDY0  .null $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "C256 Foenix EXP-C200-EVID", $0D
>197126		0b 0c 20 43 32 35 36 20 46 6f 65 6e 69 78 20 45
>197136		58 50 2d 43 32 30 30 2d 45 56 49 44 0d 00
>197144		1d 1d 8d 8d 4d 4d 2d 2d		EVID_DEV_RDY0_CLR .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D
>19714c		5d 5d
>19714e		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1  .null "Your Device is Ready..."
>197156		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
=100						TXTLINESIZE = 100
.197166						INIT_EVID_EVID_FONTSET
.197166		e2 20		sep #$20	                SEP #$20        ; set A short
.197168		c2 10		rep #$10	                REP #$10        ; set X long
.19716a		a2 00 00	ldx #$0000	                LDX #$0000
.19716d						initFontsetbranch0
.19716d		bf 00 00 1f	lda $1f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.197171		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X ; Vicky FONT RAM Bank
.197175		e8		inx		                INX
.197176		e0 00 08	cpx #$0800	                CPX #$0800
.197179		d0 f2		bne $19716d	                BNE initFontsetbranch0
.19717b		ea		nop		                NOP
.19717c		6b		rtl		                RTL
.19717d						INIT_EVID_EVID_LUT
.19717d		e2 20		sep #$20	                SEP #$20        ; set A short
.19717f		e2 10		sep #$10	                SEP #$10        ; set X short
.197181		a2 00		ldx #$00					        LDX	#$00
.197183		bf 9c 73 19	lda $19739c,x	lutinitloop0	LDA @lfg_color_lut,x		; get Local Data c64_character_Color_LUT_4_Txt
.197187		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	; Write in LUT Memory
.19718b		e8		inx		                inx
.19718c		e0 40		cpx #$40	                cpx #$40
.19718e		d0 f3		bne $197183	                bne lutinitloop0
.197190		a2 00		ldx #$00	                LDX	#$00
.197192		bf dc 73 19	lda $1973dc,x	lutinitloop1	LDA @lbg_color_lut,x		; get Local Data
.197196		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	; Write in LUT Memory
.19719a		e8		inx		                INX
.19719b		e0 40		cpx #$40	                CPX #$40
.19719d		d0 f3		bne $197192	                bne lutinitloop1
.19719f		ea		nop		                NOP
.1971a0		6b		rtl		                RTL
.1971a1						INIT_EVID_EVID_CURSOR
.1971a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1971a3		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.1971a5		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.1971a9		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0)      ;Set Cursor Enable And Flash Rate @1Hz
.1971ab		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG ;
.1971af		c2 30		rep #$30	                REP #$30        ; set A&X long
.1971b1		a9 00 00	lda #$0000	                LDA #$0000;
.1971b4		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L ;; // Set the X to Position 1
.1971b8		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L ; // Set the Y to Position 6 (Below)
.1971bc		e2 20		sep #$20	                SEP #$20        ; set A short
.1971be		6b		rtl		                RTL
.1971bf						INIT_EVID_EVID_CLRSCREEN
.1971bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1971c1		c2 10		rep #$10	                REP #$10        ; set X long
.1971c3		a2 00 00	ldx #$0000	                LDX #$0000		; Only Use One Pointer
.1971c6		a9 20		lda #$20	                LDA #$20		; Fill the Entire Screen with Space
.1971c8		9f 00 20 ae	sta $ae2000,x	iclearloop0	    STA EVID_TEXT_MEM, x	;
.1971cc		e8		inx		                inx
.1971cd		e0 00 20	cpx #$2000	                cpx #$2000
.1971d0		d0 f6		bne $1971c8	                bne iclearloop0
.1971d2		a2 00 00	ldx #$0000	                LDX	#$0000		; Only Use One Pointer
.1971d5		a9 f0		lda #$f0	                LDA #$F0		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.1971d7		9f 00 40 ae	sta $ae4000,x	iclearloop1	    STA EVID_COLOR_MEM, x	;
.1971db		e8		inx		                inx
.1971dc		e0 00 20	cpx #$2000	                cpx #$2000
.1971df		d0 f6		bne $1971d7	                bne iclearloop1
.1971e1		6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.1971e2						    KERNEL_DATA
>1971e2		20 20 20 20 0b 0c 0b 0c		    greet_msg   .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " UU    UU" ,$0D
>1971ea		0b 0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>1971fa		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>197202		0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>197211		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>197219		0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>197227		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>19722f		0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>19723c		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UUUUUUUU",$0D
>197244		0b 0c 20 55 55 55 55 55 55 55 55 0d
>197250		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX U -- 1,572,864 Bytes Free", $0D
>197258		45 4e 49 58 20 55 20 2d 2d 20 31 2c 35 37 32 2c
>197268		38 36 34 20 42 79 74 65 73 20 46 72 65 65 0d
>197277		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel Date: March 13th, 2021",$0D
>19727f		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>19728f		6e 65 6c 20 44 61 74 65 3a 20 4d 61 72 63 68 20
>19729f		31 33 74 68 2c 20 32 30 32 31 0d

;******  Processing file: src\version.asm

>1972aa		76 30 2e 33 2e 30 2d 61		.text "v0.3.0-alpha+1398 (2021-03-25)"
>1972b2		6c 70 68 61 2b 31 33 39 38 20 28 32 30 32 31 2d
>1972c2		30 33 2d 32 35 29

;******  Return to file: src\kernel.asm

>1972c8		0d 00				                .text $0D,$00
>1972ca		1d 1d 1d 1d 1d 1d 8d 8d		  greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>1972d2		4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>1972e2		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1972f2		fd fd
>1972f4		1d 1d 1d 1d 1d 8d 8d 4d		  greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>1972fc		4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>19730c		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>19731c		fd fd
>19731e		1d 1d 1d 1d 8d 8d 4d 4d		  greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>197326		2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>197336		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>197346		fd fd
>197348		1d 1d 1d 8d 8d 4d 4d 2d		  greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>197350		2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>197360		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>197370		fd fd
>197372		1d 1d 8d 8d 4d 4d 2d 2d		  greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>19737a		5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>19738a		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>19739a		fd fd
>19739c		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>1973a0		00 00 80 ff			                .text $00, $00, $80, $FF
>1973a4		00 80 00 ff			                .text $00, $80, $00, $FF
>1973a8		80 00 00 ff			                .text $80, $00, $00, $FF
>1973ac		00 80 80 ff			                .text $00, $80, $80, $FF
>1973b0		80 80 00 ff			                .text $80, $80, $00, $FF
>1973b4		80 00 80 ff			                .text $80, $00, $80, $FF
>1973b8		80 80 80 ff			                .text $80, $80, $80, $FF
>1973bc		00 45 ff ff			                .text $00, $45, $FF, $FF
>1973c0		13 45 8b ff			                .text $13, $45, $8B, $FF
>1973c4		00 00 20 ff			                .text $00, $00, $20, $FF
>1973c8		00 20 00 ff			                .text $00, $20, $00, $FF
>1973cc		20 00 00 ff			                .text $20, $00, $00, $FF
>1973d0		20 20 20 ff			                .text $20, $20, $20, $FF
>1973d4		40 40 40 ff			                .text $40, $40, $40, $FF
>1973d8		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>1973dc		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>1973e0		00 00 80 ff			                .text $00, $00, $80, $FF
>1973e4		00 80 00 ff			                .text $00, $80, $00, $FF
>1973e8		80 00 00 ff			                .text $80, $00, $00, $FF
>1973ec		00 20 20 ff			                .text $00, $20, $20, $FF
>1973f0		20 20 00 ff			                .text $20, $20, $00, $FF
>1973f4		20 00 20 ff			                .text $20, $00, $20, $FF
>1973f8		20 20 20 ff			                .text $20, $20, $20, $FF
>1973fc		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>197400		13 45 8b ff			                .text $13, $45, $8B, $FF
>197404		00 00 20 ff			                .text $00, $00, $20, $FF
>197408		00 20 00 ff			                .text $00, $20, $00, $FF
>19740c		40 00 00 ff			                .text $40, $00, $00, $FF
>197410		10 10 10 ff			                .text $10, $10, $10, $FF
>197414		40 40 40 ff			                .text $40, $40, $40, $FF
>197418		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>19741c		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>197424		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>197434		00
>197435		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>19743d		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>19744d		00
>19744e		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>197456		20 45 78 65 63 75 74 65 64 2e 0d 00
>197462		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>19746a		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>19747a		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>197482		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>197492		64 2e 2e 2e 0d 00
>197498		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>1974a0		20 50 72 65 73 65 6e 74 0d 00
>1974aa		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>1974b2		65 73 65 6e 74 0d 00
>1974b9		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>1974c1		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>1974d1		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>1974e1		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>1974e9		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>1974f9		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>197506		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>19750e		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>19751a		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>197522		54 55 52 45 20 46 4f 55 4e 44 2e 00
>19752e		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>197536		45 44 2e 00
>19753a		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>197542		47 20 42 4d 50 20 50 41 52 53 45 52 00
>19754f		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>197557		50 72 65 73 65 6e 74 3a 00
>197560		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>197568		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>197578		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>197586		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>19758e		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>19759e		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>1975ab		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>1975b3		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>1975c3		72 64 2e 00
>1975c7		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>1975cf		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>1975df		49 44 45 20 64 72 69 76 65 2e 00
>1975ea		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>1975f2		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>197602		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>197610		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>197618		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>197627		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>19762f		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>19763e		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>197646		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>197656		2e 2e 00
>197659		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>197661		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>197669		52 4f 52 00
>19766d		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>197675		38 39 41 42 43 44 45 46 00
>19767e						.align 256
>197700		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>197708		37 38 39 30 2d 3d 08 09
>197710		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>197718		6f 70 5b 5d 0d 00 61 73
>197720		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>197728		27 60 00 5c 7a 78 63 76
>197730		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>197738		00 20 00 81 82 83 84 85
>197740		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>197748		11 00 00 9d 00 1d 00 00
>197750		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>197758		8c 00 00 00 00 00 00 00
>197760		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>197768		00 00 00 00 00 00 00 00
>197770		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>197778		00 00 00 00 00 00 00 00
>197780		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>197788		26 2a 28 29 5f 2b 08 09
>197790		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>197798		4f 50 7b 7d 0d 00 41 53
>1977a0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>1977a8		22 7e 00 7c 5a 58 43 56
>1977b0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1977b8		00 20 00 00 00 00 00 00
>1977c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1977c8		00 00 00 00 00 00 00 00
>1977d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1977d8		00 00 00 00 00 00 00 00
>1977e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1977e8		00 00 00 00 00 00 00 00
>1977f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1977f8		00 00 00 00 00 00 00 00
>197800		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>197808		37 38 39 30 2d 3d 08 09
>197810		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>197818		0f 10 5b 5d 0d 00 01 13
>197820		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>197828		27 00 00 5c 1a 18 03 16
>197830		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>197838		00 20 00 00 00 00 00 00
>197840		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>197848		00 00 00 00 00 00 00 00
>197850		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>197858		00 00 00 00 00 00 00 00
>197860		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>197868		00 00 00 00 00 00 00 00
>197870		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>197878		00 00 00 00 00 00 00 00
>197880		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>197888		37 38 39 30 2d 3d 08 09
>197890		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>197898		6f 70 5b 5d 0d 00 61 73
>1978a0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>1978a8		27 60 00 5c 7a 78 63 76
>1978b0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1978b8		00 20 00 00 00 00 00 00
>1978c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1978c8		00 00 00 00 00 00 00 00
>1978d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1978d8		00 00 00 00 00 00 00 00
>1978e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1978e8		00 00 00 00 00 00 00 00
>1978f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1978f8		00 00 00 00 00 00 00 00
>197900		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>197908		37 38 39 30 2d 3d 08 09
>197910		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>197918		6f 70 5b 5d 0d 00 61 73
>197920		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>197928		27 60 00 5c 7a 78 63 76
>197930		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>197938		00 20 00 00 00 00 00 00
>197940		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>197948		00 00 00 00 00 00 00 00
>197950		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>197958		00 00 00 00 00 00 00 00
>197960		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>197968		00 00 00 00 00 00 00 00
>197970		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>197978		00 00 00 00 00 00 00 00
>197980		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>197988		00 00 00 00 00 00 00 00
>197990		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>197998		00 00 00 00 00 00 00 00
>1979a0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>1979a8		00 00 00 00 00 00 00 00
>1979b0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>1979b8		00 00 00 00 00 00 00 00
>1979c0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>1979c8		11 00 00 9d 00 1d 00 05
>1979d0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1979d8		00 00 00 00 00 00 00 00
>1979e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1979e8		00 00 00 00 00 00 00 00
>1979f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1979f8		00 00 00 00 00 00 00 00
>197a00						.align 256
>197a00		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>197a08		34 37 3a 3d 3f 41 44 46
>197a10		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>197a18		57 58 5a 5b 5d 5e 60 61
>197a20		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>197a28		6d 6f 70 71 72 73 75 76
>197a30		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>197a38		80 81 82 83 84 85 86 87
>197a40		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>197a48		8f 90 91 92 93 93 94 95
>197a50		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>197a58		9d 9e 9e 9f a0 a1 a2 a2
>197a60		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>197a68		a9 aa ab ab ac ad ae ae
>197a70		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>197a78		b5 b5 b6 b7 b7 b8 b9 b9
>197a80		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>197a88		bf c0 c0 c1 c2 c2 c3 c4
>197a90		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>197a98		c9 ca ca cb cb cc cd cd
>197aa0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>197aa8		d2 d3 d4 d4 d5 d5 d6 d6
>197ab0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>197ab8		db dc dc dd de de df df
>197ac0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>197ac8		e4 e4 e5 e5 e6 e6 e7 e7
>197ad0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>197ad8		ec ec ed ed ee ee ef ef
>197ae0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>197ae8		f4 f4 f5 f5 f6 f6 f7 f7
>197af0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>197af8		fb fc fc fd fd fe fe ff
>197b00						.align 256
>197b00		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>197b08		25 27 2a 2c 2e 30 32 34
>197b10		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>197b18		44 46 47 49 4a 4c 4d 4f
>197b20		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>197b28		5b 5c 5d 5e 60 61 62 63
>197b30		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>197b38		6d 6e 70 71 72 73 74 75
>197b40		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>197b48		7e 7f 80 81 82 83 84 84
>197b50		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>197b58		8d 8e 8e 8f 90 91 92 93
>197b60		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>197b68		9a 9b 9c 9d 9e 9f 9f a0
>197b70		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>197b78		a7 a8 a9 aa aa ab ac ad
>197b80		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>197b88		b3 b4 b5 b6 b6 b7 b8 b8
>197b90		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>197b98		bf bf c0 c1 c2 c2 c3 c4
>197ba0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>197ba8		ca ca cb cc cc cd ce ce
>197bb0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>197bb8		d4 d5 d6 d6 d7 d7 d8 d9
>197bc0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>197bc8		de df e0 e0 e1 e1 e2 e3
>197bd0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>197bd8		e8 e9 e9 ea ea eb ec ec
>197be0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>197be8		f1 f2 f3 f3 f4 f4 f5 f5
>197bf0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>197bf8		fb fb fc fc fd fd fe ff
>197c00						.align 256
>197c00		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>197c08		83 dd ce 39 cd c5 3b 15
>197c10		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>197c18		87 12 31 65 89 27 88 42
>197c20		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>197c28		94 ce 56 ec fe da 58 c9
>197c30		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>197c38		d0 10 2c b2 4b ea 32 61
>197c40		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>197c48		a1 e6 ca 2d b3 ce b0 79
>197c50		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>197c58		5f e3 fb bd 15 2e be f5
>197c60		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>197c68		8d 8f 2c 80 0a 5e 99 36
>197c70		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>197c78		13 52 44 2f e3 ef 44 a2
>197c80		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>197c88		be 23 02 58 0a 52 5e b4
>197c90		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>197c98		d5 cf 3e df c4 9e da bb
>197ca0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>197ca8		77 7d b1 3b 4a 68 35 6e
>197cb0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>197cb8		b5 8f 44 63 55 6f e1 50
>197cc0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>197cc8		57 74 b9 bd 05 14 50 eb
>197cd0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>197cd8		44 bc ec db 22 58 fc be
>197ce0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>197ce8		24 aa 82 11 5c 9f 43 4d
>197cf0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>197cf8		3e 3d 66 7e 0a 1c 6b 74
>197d00						.align 16
>197d00		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>197d08		01 01 01 00 00 00 00 00
>197d10		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>197d18		ff ff ff 01 00 00 00 00
>197d20		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>197d28		01 55 ff ff 01 00 00 00
>197d30		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>197d38		ff ff ff ff 01 00 00 00
>197d40		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>197d48		ff ff 01 ff ff 01 00 00
>197d50		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>197d58		01 ff ff 01 ff 01 00 00
>197d60		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>197d68		ff 01 ff ff ff 01 00 00
>197d70		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>197d78		ff ff ff ff ff 01 01 00
>197d80		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>197d88		ff ff ff ff 01 ff ff 01
>197d90		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>197d98		ff ff ff ff ff ff ff 01
>197da0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>197da8		55 55 01 ff ff 55 01 00
>197db0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>197db8		01 01 55 ff 55 01 00 00
>197dc0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>197dc8		01 55 55 55 01 00 00 00
>197dd0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>197dd8		01 55 55 01 00 00 00 00
>197de0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>197de8		00 01 01 00 00 00 00 00
>197df0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>197df8		00 00 00 00 00 00 00 00
>1a0000		5c 24 85 1a 5c 33 6b 1a		        .binary "binaries/basic816_1A0000.bin"
>1a0008		5c 96 25 1a 5c 5b 01 1a 5c 58 00 1a 5c d6 00 1a
>1a0018		5c c1 02 1a 5c ff 00 1a 5c 1a 01 1a 5c 21 01 1a
>1a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>1a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>1a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>1a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>1a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>1a0078		0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>1a0088		80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>1a0098		db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>1a00a8		4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>1a00b8		80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>1a00c8		a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>1a00d8		10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 af
>1a00e8		00 00 af 89 3c f0 08 09 03 8f 00 00 af 80 06 09
>1a00f8		01 8f 00 00 af 28 60 08 e2 20 c9 00 f0 08 af 10
>1a0108		00 af 09 01 80 06 af 10 00 af 29 fe 8f 10 00 af
>1a0118		28 60 08 22 84 10 00 28 60 48 da 5a 0b 08 e2 20
>1a0128		c2 10 a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f
>1a0138		00 c0 af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00
>1a0148		5b 68 28 a2 00 00 a0 00 00 22 84 10 00 28 2b 7a
>1a0158		fa 68 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>1a0168		28 c2 30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2
>1a0178		20 29 ff 00 85 0a af 11 00 00 8f 08 01 00 af 1c
>1a0188		00 00 3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08
>1a0198		a5 0a 69 00 00 85 0a e2 20 af 0f 00 00 85 8f a0
>1a01a8		00 00 a2 00 00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0
>1a01b8		f4 ca bf 00 4f 00 c9 20 d0 09 a9 00 9f 00 4f 00
>1a01c8		ca 10 ef 28 2b 7a fa 60 e2 20 20 1b 02 a9 48 8f
>1a01d8		0f 00 00 a9 34 8f 13 00 00 a9 20 8f 08 00 af 8f
>1a01e8		09 00 af a2 00 00 a9 00 9f 18 f0 1a e8 e0 40 00
>1a01f8		d0 f6 a9 80 8f b4 08 00 e2 20 a9 00 8f 89 0f 00
>1a0208		a9 00 8f 00 02 af 8f 0c 02 af 8f 18 02 af 8f 24
>1a0218		02 af 60 08 e2 20 af 0e 08 af 09 08 8f 0e 08 af
>1a0228		af 00 08 af 8f 84 e8 af af 02 08 af 8f 85 e8 af
>1a0238		a9 03 8f 86 e8 af af 0e 08 af 29 f7 8f 0e 08 af
>1a0248		ea ea ea a9 01 8f 86 e8 af 28 60 08 e2 20 48 48
>1a0258		a9 00 22 3c 10 00 68 22 18 10 00 af 89 0f 00 29
>1a0268		01 d0 f8 68 28 60 08 e2 20 48 48 a9 01 22 3c 10
>1a0278		00 68 22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28
>1a0288		60 08 c2 20 48 e2 20 a9 0d 20 18 00 c2 20 68 28
>1a0298		60 08 22 78 10 00 28 60 08 0b 08 c2 20 48 a9 00
>1a02a8		08 5b 68 28 e2 20 a5 b6 1a 85 b6 cf 13 00 00 90
>1a02b8		05 20 14 00 64 b6 2b 28 60 da 5a 0b 08 08 c2 20
>1a02c8		48 a9 00 08 5b 68 28 e2 20 c2 10 8f b5 08 00 af
>1a02d8		b4 08 00 29 20 f0 07 af b5 08 00 20 28 00 af b4
>1a02e8		08 00 29 80 f0 07 af b5 08 00 20 53 02 af b4 08
>1a02f8		00 29 40 f0 14 af b5 08 00 20 6e 02 af b5 08 00
>1a0308		c9 0d d0 05 a9 0a 20 6e 02 28 2b 7a fa 60 08 e2
>1a0318		20 bd 00 00 f0 06 20 18 00 e8 80 f5 28 60 08 c2
>1a0328		20 48 48 4a 4a 4a 4a 4a 4a 4a 4a 20 40 03 68 29
>1a0338		ff 00 20 40 03 68 28 60 08 c2 20 48 e2 20 48 4a
>1a0348		4a 4a 4a 20 57 03 68 20 57 03 c2 20 68 28 60 08
>1a0358		c2 30 da 29 0f 00 aa bf 00 d0 1a 20 18 00 fa 28
>1a0368		60 08 c2 30 48 da 5a 8b 0b c2 30 a3 0b 18 69 03
>1a0378		00 aa e2 20 a9 1a 48 ab bd 00 00 f0 06 20 53 02
>1a0388		e8 80 f5 c2 30 2b ab 7a fa 68 28 60 08 e2 20 c9
>1a0398		5b b0 04 c9 41 b0 0b c9 7b b0 04 c9 61 b0 03 28
>1a03a8		18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 03
>1a03b8		28 18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0
>1a03c8		13 c9 67 b0 04 c9 61 b0 0b c9 47 b0 04 c9 41 b0
>1a03d8		03 28 18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30
>1a03e8		b0 12 c9 67 b0 04 c9 61 b0 0f c9 47 b0 04 c9 41
>1a03f8		b0 09 28 60 38 e9 30 80 f9 29 df 38 e9 37 80 f2
>1a0408		08 e2 20 c9 7b b0 06 c9 61 90 02 29 df 28 60 08
>1a0418		e2 20 c2 10 bd 00 00 f0 09 20 08 04 9d 00 00 e8
>1a0428		80 f2 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>1a0438		c2 20 48 06 23 26 25 a5 23 85 0c a5 25 85 0e 06
>1a0448		0c 26 0e 06 0c 26 0e 18 a5 23 65 0c 85 23 a5 25
>1a0458		65 0e 85 25 68 2b 28 60 08 0b 08 c2 20 48 a9 00
>1a0468		08 5b 68 28 c2 20 a5 23 8f 1a 01 00 a9 0a 00 8f
>1a0478		18 01 00 af 1c 01 00 85 23 64 25 af 1e 01 00 85
>1a0488		29 64 2b e2 20 a9 00 85 27 85 2d 2b 28 60 08 0b
>1a0498		08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 23 8f 1a
>1a04a8		01 00 a9 64 00 8f 18 01 00 af 1c 01 00 85 23 64
>1a04b8		25 af 1e 01 00 85 29 64 2b e2 20 a9 00 85 27 85
>1a04c8		2d 2b 28 60 08 c2 20 a5 23 d0 08 a5 25 d0 04 28
>1a04d8		e2 02 60 28 c2 02 60 08 c2 30 a9 ff ff 85 23 85
>1a04e8		25 e2 20 a9 00 85 27 28 60 08 c2 30 a9 00 00 85
>1a04f8		23 85 25 e2 20 a9 00 85 27 28 60 08 e2 20 a5 27
>1a0508		c9 00 f0 07 c9 01 d0 05 20 3a 59 28 60 08 c2 20
>1a0518		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a0528		20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 e2 20 a5
>1a0538		2d c9 00 f0 37 c9 01 d0 35 c2 20 a5 25 48 a5 23
>1a0548		48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20 a9 01 85
>1a0558		27 20 3a 59 c2 20 a5 23 85 29 a5 25 85 2b e2 20
>1a0568		a9 00 85 2d c2 20 68 85 23 68 85 25 28 60 08 c2
>1a0578		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a0588		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 e2 20
>1a0598		a5 27 c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b
>1a05a8		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>1a05b8		7f 1c e2 20 dc d4 08 08 e2 20 a5 27 c9 00 f0 07
>1a05c8		c9 01 d0 0b 20 3a 59 c2 20 a5 25 d0 21 28 60 08
>1a05d8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a05e8		00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 c2
>1a05f8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a0608		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 e2 20
>1a0618		a5 27 c9 00 f0 07 c9 01 d0 11 20 3a 59 a5 26 d0
>1a0628		29 a5 25 d0 25 a5 24 d0 21 28 60 08 c2 20 48 a9
>1a0638		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a0648		ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20 48 a9 00
>1a0658		08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff
>1a0668		00 20 7f 1c e2 20 dc d4 08 08 e2 20 a5 27 c9 01
>1a0678		f0 26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a0688		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>1a0698		e2 20 dc d4 08 20 34 59 28 60 08 e2 20 a5 2d c9
>1a06a8		01 f0 26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68
>1a06b8		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f
>1a06c8		1c e2 20 dc d4 08 20 d3 06 28 60 c2 20 a5 25 48
>1a06d8		a5 23 48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20 a9
>1a06e8		00 85 27 20 34 59 c2 20 a5 23 85 29 a5 25 85 2b
>1a06f8		e2 20 a9 01 85 2d c2 20 68 85 23 68 85 25 60 08
>1a0708		e2 20 a5 27 c9 00 f0 23 c9 01 f0 2e 08 c2 20 48
>1a0718		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>1a0728		29 ff 00 20 7f 1c e2 20 dc d4 08 a5 2d c9 00 f0
>1a0738		16 c9 01 d0 d7 20 34 59 80 0d a5 2d c9 01 f0 07
>1a0748		c9 00 d0 c8 20 d3 06 e2 20 a5 27 28 60 08 e2 20
>1a0758		a5 27 c9 02 d0 25 a5 2d c9 02 f0 24 08 c2 20 48
>1a0768		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>1a0778		29 ff 00 20 7f 1c e2 20 dc d4 08 20 07 07 a5 27
>1a0788		28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>1a0798		64 23 64 25 e2 20 64 27 a7 00 c9 26 f0 44 e2 20
>1a07a8		a7 00 20 ad 03 90 76 20 2c 04 38 e9 30 c2 20 29
>1a07b8		ff 00 18 65 23 85 23 a5 25 69 00 00 85 25 20 3e
>1a07c8		1f 80 db 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a07d8		02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>1a07e8		d4 08 20 3e 1f a7 00 c9 48 f0 04 c9 68 d0 d4 20
>1a07f8		3e 1f e2 20 a7 00 20 be 03 90 22 20 df 03 c2 20
>1a0808		06 23 26 25 06 23 26 25 06 23 26 25 06 23 26 25
>1a0818		29 ff 00 18 65 23 85 23 20 3e 1f 80 d5 2b 28 60
>1a0828		08 c2 30 a5 04 f0 1c 38 a5 04 e5 1a a8 e2 20 b7
>1a0838		1a f0 10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0 ff
>1a0848		ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9 00 08 5b
>1a0858		68 28 c2 30 a5 1a 85 00 e2 20 a5 1c 85 02 20 5f
>1a0868		1f a7 00 20 ad 03 90 0c 20 8a 07 c2 20 a5 23 85
>1a0878		d7 20 5f 1f c2 20 a5 00 85 1a e2 20 a5 02 85 1c
>1a0888		20 9c 08 e2 20 20 0d 09 c9 00 f0 05 20 bb 0a 80
>1a0898		f4 2b 28 60 08 c2 20 a5 1a 85 00 a5 1c 85 02 a2
>1a08a8		00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0 53
>1a08b8		c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0
>1a08c8		10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72 d0
>1a08d8		1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7
>1a08e8		00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20 3e 1f 80
>1a08f8		b3 a7 00 c9 3a d0 03 20 3e 1f a9 03 85 1e a9 91
>1a0908		20 bb 0a 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>1a0918		28 e2 20 a9 7f 85 1e c2 10 20 70 0a a5 1e d0 03
>1a0928		4c b0 09 c2 20 a5 1a 85 00 e2 20 a5 1c 85 02 c2
>1a0938		20 64 04 64 06 e2 30 a0 00 b7 00 f0 da c9 91 f0
>1a0948		d6 c8 c4 1e 90 f3 c2 10 a7 00 c9 22 d0 05 20 d2
>1a0958		09 80 28 a5 1e c9 03 90 19 c2 20 a5 00 c5 1a d0
>1a0968		08 e2 20 a5 02 c5 1c f0 09 e2 20 a7 04 20 7d 4e
>1a0978		b0 09 e2 20 20 e2 09 c9 00 d0 11 c2 20 a5 00 85
>1a0988		04 e2 20 a5 02 85 06 20 3e 1f 80 a9 c9 81 d0 18
>1a0998		20 28 08 c9 00 f0 14 89 80 10 0b 20 5c 0b c9 30
>1a09a8		f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2 20 48 a9
>1a09b8		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>1a09c8		ff 00 20 7f 1c e2 20 dc d4 08 08 e2 20 20 3e 1f
>1a09d8		a7 00 f0 04 c9 22 d0 f5 28 60 da 5a 08 0b 08 c2
>1a09e8		20 48 a9 00 08 5b 68 28 c2 20 a5 04 d0 0a e2 20
>1a09f8		a5 04 d0 04 a9 00 80 0a e2 20 a7 04 20 7d 4e a9
>1a0a08		00 2a 85 28 c2 30 a9 b0 0b 85 08 e2 20 a9 1a 85
>1a0a18		0a a2 80 00 e2 20 a0 01 00 b7 08 f0 31 c5 1e d0
>1a0a28		32 c2 30 a0 02 00 b7 08 85 0c e2 20 a9 1a 85 0e
>1a0a38		a5 28 f0 07 a7 0c 20 7d 4e b0 18 e2 10 a0 00 b7
>1a0a48		00 20 08 04 d7 0c d0 0b c8 c4 1e 90 f2 8a 2b 28
>1a0a58		7a fa 60 c2 30 18 a5 08 69 08 00 85 08 e2 20 a5
>1a0a68		0a 69 00 85 0a e8 80 ac 08 0b 8b 08 c2 20 48 a9
>1a0a78		00 08 5b 68 28 c2 30 a9 b0 0b 85 08 a9 1a 00 85
>1a0a88		0a 64 0c e2 20 a0 01 00 b7 08 f0 1d c5 1e b0 06
>1a0a98		c5 0c 90 02 85 0c c2 20 18 a5 08 69 08 00 85 08
>1a0aa8		a5 0a 69 00 00 85 0a 80 da e2 20 a5 0c 85 1e ab
>1a0ab8		2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a0ac8		20 87 00 c2 20 18 a5 00 69 01 00 85 08 a5 02 69
>1a0ad8		00 00 85 0a e2 10 a4 1e 88 e2 20 b7 08 87 08 f0
>1a0ae8		13 c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00
>1a0af8		85 0a 80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a 0a
>1a0b08		18 69 b0 0b aa 28 60 08 8b 0b 08 c2 20 48 a9 00
>1a0b18		08 5b 68 28 08 e2 20 48 a9 1a 48 ab 68 28 e2 20
>1a0b28		c2 10 20 ff 0a bd 00 00 c2 20 29 0f 00 2b ab 28
>1a0b38		60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>1a0b48		20 48 a9 1a 48 ab 68 28 c2 30 20 ff 0a bd 04 00
>1a0b58		2b ab 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68
>1a0b68		28 08 e2 20 48 a9 1a 48 ab 68 28 e2 20 c2 10 20
>1a0b78		ff 0a bd 00 00 c2 20 29 f0 00 2b ab 28 60 08 8b
>1a0b88		0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>1a0b98		1a 48 ab 68 28 e2 20 c2 10 20 ff 0a bd 06 00 c2
>1a0ba8		20 29 ff 00 2b ab 28 60 03 01 10 d0 fd 25 02 00
>1a0bb8		03 01 12 d0 3d 26 02 00 02 01 14 d0 74 26 02 00
>1a0bc8		02 01 16 d0 ab 26 02 00 02 03 18 d0 b5 26 02 00
>1a0bd8		00 01 1c d0 00 00 02 00 04 02 1e d0 4c 28 02 00
>1a0be8		04 02 21 d0 0c 28 02 00 04 02 24 d0 cc 27 02 00
>1a0bf8		04 01 27 d0 0c 27 02 00 04 01 29 d0 8c 27 02 00
>1a0c08		04 01 2b d0 4c 27 02 00 05 03 2d d0 f6 26 01 00
>1a0c18		06 03 31 d0 c8 26 02 00 07 02 35 d0 df 26 02 00
>1a0c28		ff 01 38 d0 00 00 00 00 40 01 3a d0 00 00 00 00
>1a0c38		20 03 3c d0 e6 3e 00 00 20 05 40 d0 eb 42 00 00
>1a0c48		20 03 46 d0 36 42 00 00 20 04 4a d0 d6 41 00 00
>1a0c58		20 03 4f d0 cd 41 00 00 20 02 53 d0 65 41 00 00
>1a0c68		50 04 56 d0 00 00 00 00 50 04 5b d0 00 00 00 00
>1a0c78		20 05 60 d0 a8 40 00 00 20 06 66 d0 21 41 00 00
>1a0c88		20 03 6d d0 fd 3e 00 00 50 02 71 d0 00 00 00 00
>1a0c98		50 04 74 d0 00 00 00 00 20 04 79 d0 f1 3f 00 00
>1a0ca8		20 02 7e d0 f7 3e 00 00 20 04 81 d0 fa 3e 00 00
>1a0cb8		50 05 86 d0 00 00 00 00 50 05 8c d0 00 00 00 00
>1a0cc8		20 04 92 d0 f4 3e 00 00 20 03 97 d0 2c 42 00 00
>1a0cd8		20 04 9b d0 c7 3e 00 00 20 04 a0 d0 57 3e 00 00
>1a0ce8		20 05 a5 d0 ed 3d 00 00 20 05 ab d0 7a 3d 00 00
>1a0cf8		20 03 b1 d0 76 3d 00 00 20 04 b5 d0 57 3c 00 00
>1a0d08		20 04 ba d0 69 3d 00 00 20 07 bf d0 6d 3d 00 00
>1a0d18		20 03 c7 d0 aa 3b 00 00 20 04 cb d0 13 3b 00 00
>1a0d28		00 01 d0 d0 8c 28 01 00 30 03 d2 d0 e1 48 00 00
>1a0d38		30 04 d6 d0 31 49 00 00 30 05 db d0 c2 49 00 00
>1a0d48		30 05 e1 d0 74 49 00 00 30 04 e7 d0 01 4a 00 00
>1a0d58		30 03 ec d0 56 4a 00 00 30 03 f0 d0 9b 4a 00 00
>1a0d68		30 03 f4 d0 24 4b 00 00 30 03 f8 d0 ad 4b 00 00
>1a0d78		30 03 fc d0 0f 4c 00 00 30 04 00 d1 53 48 00 00
>1a0d88		30 03 05 d1 f2 47 00 00 30 04 09 d1 a4 47 00 00
>1a0d98		30 03 0e d1 4e 47 00 00 30 05 12 d1 85 46 00 00
>1a0da8		30 06 18 d1 a4 45 00 00 30 04 1f d1 ef 44 00 00
>1a0db8		10 03 24 d1 b9 4d 00 00 10 03 28 d1 84 4d 00 00
>1a0dc8		10 04 2c d1 0c 67 00 00 10 04 31 d1 d0 4d 00 00
>1a0dd8		10 03 36 d1 33 64 00 00 20 05 3a d1 de 65 00 00
>1a0de8		10 04 40 d1 b9 66 00 00 20 05 45 d1 c5 67 00 00
>1a0df8		20 03 4b d1 e4 68 00 00 10 04 4f d1 51 68 00 00
>1a0e08		20 06 54 d1 5a 69 00 00 20 04 5b d1 7e 6a 00 00
>1a0e18		10 07 60 d1 81 4d 00 00 20 03 68 d1 a2 3a 00 00
>1a0e28		20 05 6c d1 d7 39 00 00 20 09 72 d1 4b 2a 00 00
>1a0e38		20 09 7c d1 d8 29 00 00 20 0a 86 d1 08 2a 00 00
>1a0e48		20 07 91 d1 45 29 00 00 30 08 99 d1 ca 43 00 00
>1a0e58		20 07 a2 d1 da 28 00 00 30 08 aa d1 34 44 00 00
>1a0e68		20 08 b3 d1 90 2b 00 00 20 08 bc d1 c4 2a 00 00
>1a0e78		20 06 c5 d1 ca 2c 00 00 20 09 cc d1 d2 2d 00 00
>1a0e88		20 04 d6 d1 e2 2e 00 00 20 04 db d1 53 2f 00 00
>1a0e98		20 04 e0 d1 ec 2f 00 00 20 06 e5 d1 28 31 00 00
>1a0ea8		20 08 ec d1 c4 31 00 00 20 0a f5 d1 10 32 00 00
>1a0eb8		20 07 00 d2 45 33 00 00 20 07 08 d2 c3 33 00 00
>1a0ec8		20 08 10 d2 35 34 00 00 20 06 19 d2 72 34 00 00
>1a0ed8		20 07 20 d2 a2 37 00 00 50 06 28 d2 00 00 00 00
>1a0ee8		50 04 2f d2 00 00 00 00 20 06 34 d2 b7 39 00 00
>1a0ef8		30 03 3b d2 65 4c 00 00 30 03 3f d2 99 44 00 00
>1a0f08		30 03 43 d2 78 4c 00 00 30 03 47 d2 ad 4c 00 00
>1a0f18		30 03 4b d2 e2 4c 00 00 30 02 4f d2 4c 4d 00 00
>1a0f28		30 08 52 d2 17 4d 00 00 00 00 00 00 00 00 00 00
>1a0f38		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 ff
>1a0f48		ff 85 ba e2 20 a9 17 85 bc c2 20 64 b7 64 bd e2
>1a0f58		20 64 b9 64 bf 2b 28 60 5a 08 e2 20 85 ea c2 10
>1a0f68		86 8f c2 20 a5 0e 48 a5 0c 48 a5 12 48 a5 10 48
>1a0f78		20 10 10 b0 03 20 94 0f 20 9c 11 c2 20 68 85 10
>1a0f88		68 85 12 68 85 0c 68 85 0e 28 7a 60 08 0b 08 c2
>1a0f98		20 48 a9 00 08 5b 68 28 e2 20 a6 8f ca 86 0c e8
>1a0fa8		c2 30 38 a5 ba e5 0c 85 c0 e2 20 a5 bc e9 00 85
>1a0fb8		c2 20 9c 11 e2 20 a5 ea a0 00 00 97 c3 a9 00 a0
>1a0fc8		01 00 97 c3 a0 02 00 97 c3 c2 20 a9 00 00 97 c3
>1a0fd8		c2 20 18 a5 ba 69 01 00 a0 05 00 97 c3 e2 20 c8
>1a0fe8		c8 a5 bc 69 00 97 c3 c2 20 a5 c0 85 b7 e2 20 a5
>1a0ff8		c2 85 b9 c2 20 38 a5 c3 e9 01 00 85 ba e2 20 a5
>1a1008		c5 e9 00 85 bc 2b 28 60 08 0b 08 c2 20 48 a9 00
>1a1018		08 5b 68 28 c2 30 c2 20 a5 bd 85 c9 e2 20 a5 bf
>1a1028		85 cb a5 c9 d0 17 e2 20 a5 cb d0 11 c2 20 a9 00
>1a1038		00 85 cf e2 20 a9 00 85 d1 2b 28 18 60 c2 20 a0
>1a1048		05 00 b7 c9 85 cc e2 20 c8 c8 b7 c9 85 ce c2 20
>1a1058		18 a5 c9 65 8f 85 0c e2 20 a5 cb 69 00 85 0e c2
>1a1068		20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e 69 00 85
>1a1078		0e c2 20 a5 0c c5 cc d0 28 e2 20 a5 0e c5 ce d0
>1a1088		20 c2 20 a5 cf d0 5d e2 20 a5 d1 d0 57 c2 20 a0
>1a1098		02 00 b7 c9 85 bd e2 20 c8 c8 b7 c9 85 bf 4c 4d
>1a10a8		11 c2 20 a5 0c 69 08 00 85 10 e2 20 a5 0e 69 00
>1a10b8		85 12 e2 20 a5 c6 c5 10 b0 3e 90 08 c2 20 a5 c6
>1a10c8		c5 10 b0 34 c2 20 a5 c9 85 cf e2 20 a5 cb 85 d1
>1a10d8		c2 20 a0 02 00 b7 cf 85 c9 e2 20 c8 c8 b7 cf 85
>1a10e8		cb 4c 2a 10 c2 20 a0 02 00 b7 c9 97 cf e2 20 c8
>1a10f8		c8 b7 c9 97 cf 4c 4d 11 c2 20 a0 05 00 b7 c9 97
>1a1108		0c e2 20 c8 c8 b7 c9 97 0c c2 20 a0 02 00 b7 c9
>1a1118		97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a5 cf d0 14
>1a1128		e2 20 a5 cf d0 0e c2 20 a5 0c 85 bd e2 20 a5 0e
>1a1138		85 bf 80 11 c2 20 a0 02 00 a5 0c 97 cf e2 20 c8
>1a1148		c8 a5 0e 97 cf c2 20 a5 c9 85 c3 e2 20 a5 cb 85
>1a1158		c5 c2 20 a5 c3 85 b7 e2 20 a5 c5 85 b9 c2 20 a0
>1a1168		05 00 a5 0c 97 c3 e2 20 c8 c8 a5 0e 97 c3 c2 20
>1a1178		a0 02 00 a9 00 00 97 c3 e2 20 c8 c8 97 c3 e2 20
>1a1188		a5 ea e2 20 a0 00 00 97 c3 a0 01 00 a9 00 97 c3
>1a1198		2b 28 38 60 08 c2 20 38 a5 c0 e9 08 00 85 c3 e2
>1a11a8		20 a5 c2 e9 00 85 c5 28 60 08 e2 20 a5 c5 f0 04
>1a11b8		c9 18 b0 12 c2 20 a5 c3 f0 0c e2 20 a0 01 00 b7
>1a11c8		c3 1a 97 c3 28 60 00 ea 08 e2 20 a5 c5 f0 04 c9
>1a11d8		18 b0 17 c2 20 a5 c3 f0 11 e2 20 a0 01 00 b7 c3
>1a11e8		3a 97 c3 d0 03 20 f4 11 28 60 00 ea 08 c2 20 a5
>1a11f8		bd d0 21 e2 20 a5 bf d0 1b a5 c5 85 bf c2 20 a5
>1a1208		c3 85 bd a9 00 00 a0 02 00 97 c3 c8 c8 e2 20 97
>1a1218		c3 4c db 12 e2 20 a5 bf c5 c5 90 28 c2 20 a5 bd
>1a1228		c5 c3 90 20 c2 20 a5 bd a0 02 00 97 c3 e2 20 c8
>1a1238		c8 a5 bf 97 c3 c2 20 a5 c3 85 bd e2 20 a5 c5 85
>1a1248		bf 4c db 12 c2 20 a5 bd 85 08 e2 20 a5 bf 85 0a
>1a1258		e2 20 a0 04 00 b7 08 c5 c8 90 32 d0 0b c2 20 a0
>1a1268		02 00 b7 08 c5 c6 90 25 c2 20 a0 02 00 b7 08 97
>1a1278		c3 e2 20 c8 c8 b7 08 97 c3 c2 20 a5 c3 a0 02 00
>1a1288		97 08 e2 20 a5 c5 c8 c8 97 08 4c db 12 c2 20 a0
>1a1298		02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0 19 c2 20
>1a12a8		a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08 85 0a c2
>1a12b8		20 a5 0c 85 08 80 99 c2 20 a5 c3 a0 02 00 97 08
>1a12c8		e2 20 c8 c8 a5 c5 97 08 a9 00 97 c3 c2 20 a0 02
>1a12d8		00 97 c3 20 e0 12 28 60 08 c2 20 a5 bd 85 c3 e2
>1a12e8		20 a5 bf 85 c5 c2 20 a5 c3 d0 09 e2 20 a5 c5 d0
>1a12f8		03 4c 83 13 c2 20 a0 02 00 b7 c3 85 0c e2 20 c8
>1a1308		c8 b7 c3 85 0e c2 20 a0 05 00 b7 c3 85 10 e2 20
>1a1318		c8 c8 b7 c3 85 12 c2 20 a5 0c c5 10 d0 08 e2 20
>1a1328		a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c3 85 0c e2
>1a1338		20 c8 c8 b7 c3 85 0e c2 20 a5 0c 85 c3 e2 20 a5
>1a1348		0e 85 c5 80 a0 c2 20 a0 02 00 b7 c3 85 0c e2 20
>1a1358		c8 c8 b7 c3 85 0e c2 20 a0 02 00 b7 0c 97 c3 e2
>1a1368		20 c8 c8 b7 0c 97 c3 c2 20 a0 05 00 b7 0c 97 c3
>1a1378		e2 20 c8 c8 b7 0c 97 c3 4c fc 12 28 60 08 c2 20
>1a1388		64 16 64 18 28 60 08 c2 30 a5 16 d0 16 a5 18 d0
>1a1398		12 e2 20 64 16 a5 e2 1a 1a 85 17 a5 e3 85 18 64
>1a13a8		19 80 07 c2 20 a5 17 1a 85 17 c2 20 a5 bb 3a c5
>1a13b8		17 f0 02 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a13c8		20 a9 03 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2
>1a13d8		20 dc d4 08 28 60 c9 00 d0 05 c0 01 00 f0 05 09
>1a13e8		30 97 16 c8 60 08 c2 30 64 0c a5 25 10 1a 18 a5
>1a13f8		23 49 ff ff 69 01 00 85 23 a5 25 49 ff ff 69 00
>1a1408		00 85 25 a9 ff ff 85 0c 64 10 64 12 64 14 a2 1f
>1a1418		00 f8 06 23 26 25 a5 10 65 10 85 10 a5 12 65 12
>1a1428		85 12 a5 14 65 14 85 14 ca 10 e7 d8 e2 20 20 8e
>1a1438		13 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9 20 97 16
>1a1448		c8 a2 05 00 b5 10 29 f0 4a 4a 4a 4a 20 de 13 b5
>1a1458		10 29 0f 20 de 13 ca 10 eb c0 01 00 d0 0c a9 20
>1a1468		87 16 a0 01 00 a9 30 97 16 c8 a9 00 97 16 28 60
>1a1478		00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00 f0 04 e8
>1a1488		c8 80 f7 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>1a1498		28 e2 20 c2 10 a0 00 00 b7 23 d0 04 b7 29 f0 25
>1a14a8		b7 23 d7 29 90 12 d0 03 c8 80 ed c2 20 a9 01 00
>1a14b8		85 23 e2 20 64 25 80 15 c2 20 a9 ff ff 85 23 e2
>1a14c8		20 85 25 80 08 c2 20 64 23 e2 20 64 25 e2 20 a9
>1a14d8		00 85 27 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>1a14e8		5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20 a5 25 48
>1a14f8		ab c2 20 68 28 a6 23 20 7a 14 84 0c 08 c2 20 48
>1a1508		e2 20 a5 2b 48 ab c2 20 68 28 a6 29 20 7a 14 c2
>1a1518		20 98 38 65 0c aa e2 20 a9 02 20 60 0f c2 20 a5
>1a1528		b7 85 08 e2 20 a5 b9 85 0a a0 00 00 08 c2 20 48
>1a1538		e2 20 a5 25 48 ab c2 20 68 28 a6 23 bd 00 00 f0
>1a1548		06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48 e2 20 a5
>1a1558		2b 48 ab c2 20 68 28 a6 29 bd 00 00 97 08 f0 04
>1a1568		e8 c8 80 f5 c2 20 a5 08 85 23 e2 20 a5 0a 85 25
>1a1578		a9 02 85 27 ab 2b 28 60 da 5a 08 0b 8b 08 c2 20
>1a1588		48 a9 00 08 5b 68 28 c2 20 a5 0a 48 a5 08 48 c2
>1a1598		30 08 c2 20 48 e2 20 a5 25 48 ab c2 20 68 28 a6
>1a15a8		23 20 7a 14 98 aa e8 e2 20 a9 02 20 60 0f c2 20
>1a15b8		a5 c0 85 08 a5 c2 85 0a a0 00 00 e2 20 b7 23 97
>1a15c8		08 f0 03 c8 80 f7 c2 20 a5 08 85 23 a5 0a 85 25
>1a15d8		c2 20 68 85 08 68 85 0a ab 2b 28 7a fa 60 08 e2
>1a15e8		20 c2 10 a0 00 00 b7 23 f0 05 c8 80 f9 84 92 c2
>1a15f8		30 c4 29 90 13 f0 11 a5 8f 30 0d f0 0b c4 8f b0
>1a1608		12 a5 29 d0 0e 4c 64 16 20 8e 13 e2 20 a9 00 87
>1a1618		16 80 39 20 8e 13 c2 30 18 a5 23 65 29 85 23 a5
>1a1628		25 69 00 00 85 25 a0 00 00 e2 20 a7 23 97 16 f0
>1a1638		1b c2 20 18 a5 23 69 01 00 85 23 a5 25 69 00 00
>1a1648		85 25 c8 c4 8f d0 e2 a9 00 00 97 16 c2 20 a5 16
>1a1658		85 23 a5 18 85 25 e2 20 a9 02 85 27 28 60 08 c2
>1a1668		30 20 8d 14 a5 23 c9 ff ff d0 05 20 df 04 80 03
>1a1678		20 f1 04 28 60 08 c2 30 20 8d 14 a5 23 c9 01 00
>1a1688		d0 05 20 df 04 80 03 20 f1 04 28 60 08 c2 30 20
>1a1698		8d 14 a5 23 c9 00 00 d0 05 20 df 04 80 03 20 f1
>1a16a8		04 28 60 08 c2 30 20 8d 14 a5 23 c9 00 00 f0 05
>1a16b8		20 df 04 80 03 20 f1 04 28 60 08 c2 30 20 8d 14
>1a16c8		a5 23 c9 ff ff f0 05 20 df 04 80 03 20 f1 04 28
>1a16d8		60 08 c2 30 20 8d 14 a5 23 c9 01 00 f0 05 20 df
>1a16e8		04 80 03 20 f1 04 28 60 48 5a 0b 08 08 c2 20 48
>1a16f8		a9 00 08 5b 68 28 c2 30 a9 00 00 85 00 85 1a a9
>1a1708		16 00 85 02 85 1c ad 8a 0f 30 20 a0 02 00 b7 1a
>1a1718		f0 0f c5 55 90 10 c5 59 f0 02 b0 05 20 52 17 80
>1a1728		e5 28 2b 7a 68 60 20 1b 20 80 db 08 c2 20 48 a9
>1a1738		00 08 5b 68 28 e2 20 a9 01 8f d3 08 00 c2 20 29
>1a1748		ff 00 20 7f 1c e2 20 dc d4 08 08 c2 30 85 23 64
>1a1758		25 20 ed 13 a5 16 1a 85 23 a5 18 85 25 20 67 43
>1a1768		18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02 e2
>1a1778		20 a9 20 20 18 00 c2 20 20 91 17 90 fb e2 20 a9
>1a1788		0d 20 18 00 20 1b 20 28 60 08 0b 8b 08 c2 20 48
>1a1798		a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>1a17a8		e2 20 c2 10 a7 00 f0 3a 30 05 20 18 00 80 29 c2
>1a17b8		20 29 7f 00 0a 0a 0a 18 69 b0 0b 85 08 a9 1a 00
>1a17c8		69 00 00 85 0a 08 e2 20 48 a9 1a 48 ab 68 28 a0
>1a17d8		02 00 b7 08 aa 20 16 03 c2 20 20 3e 1f ab 2b 28
>1a17e8		18 60 ab 2b 28 38 60 08 c2 20 a9 ff 6f 85 1f a9
>1a17f8		ff 7f 85 21 a9 ff ff 85 23 85 25 85 29 85 2b e2
>1a1808		20 85 27 85 2d 28 60 08 0b 8b 08 c2 20 48 a9 00
>1a1818		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>1a1828		5a a4 1f bd 00 00 99 00 00 bd 02 00 99 02 00 e2
>1a1838		20 bd 04 00 99 04 00 c2 20 38 98 e9 05 00 85 1f
>1a1848		7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>1a1858		68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a 18
>1a1868		a5 1f 69 05 00 85 1f a8 b9 00 00 9d 00 00 b9 02
>1a1878		00 9d 02 00 e2 20 b9 04 00 9d 04 00 bd 00 00 7a
>1a1888		ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>1a1898		28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a
>1a18a8		a4 21 99 00 00 88 84 21 7a ab 2b 28 60 08 0b 8b
>1a18b8		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>1a18c8		48 ab 68 28 e2 20 c2 10 5a a4 21 c8 84 21 b9 00
>1a18d8		00 c2 20 29 ff 00 7a ab 2b 28 60 08 e2 20 a9 01
>1a18e8		20 8c 18 28 60 5a 08 8b 08 e2 20 48 a9 00 48 ab
>1a18f8		68 28 e2 20 a4 21 b9 01 00 c9 01 d0 08 c2 20 e6
>1a1908		21 ab 28 7a 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a1918		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2
>1a1928		20 dc d4 08 48 08 0b 8b 08 c2 20 48 a9 00 08 5b
>1a1938		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 a4 21
>1a1948		c0 ff 7f f0 11 20 0f 0b 85 0c b9 01 00 20 0f 0b
>1a1958		c5 0c f0 02 90 08 c2 20 ab 2b 28 68 18 60 c2 20
>1a1968		ab 2b 28 68 38 60 4c 8a 07 08 e2 20 a9 00 8f 00
>1a1978		4d 00 a2 01 00 20 2d 1b 20 bf 05 c2 20 a5 23 9f
>1a1988		00 4d 00 e2 20 af 00 4d 00 1a 30 3e 8f 00 4d 00
>1a1998		e8 e8 20 5f 1f e2 20 a7 00 c9 90 f0 09 c9 2c d0
>1a19a8		0a 20 3e 1f 80 cf 20 3e 1f 28 60 08 c2 20 48 a9
>1a19b8		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>1a19c8		ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20 48 a9 00
>1a19d8		08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff
>1a19e8		00 20 7f 1c e2 20 dc d4 08 08 20 50 51 90 23 e2
>1a19f8		20 a5 ea 29 80 d0 06 20 51 4f 4c 18 1a e2 20 a9
>1a1a08		8f 20 4b 20 20 e3 18 20 71 19 20 a9 63 20 ed 18
>1a1a18		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a1a28		8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4
>1a1a38		08 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2
>1a1a48		10 20 3e 1f a0 00 00 b7 00 f0 24 c9 22 f0 03 c8
>1a1a58		80 f5 84 0c e2 20 a9 02 a6 0c e8 20 8e 13 a0 00
>1a1a68		00 c4 0c f0 29 a7 00 97 16 c8 20 3e 1f 80 f2 08
>1a1a78		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a1a88		00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 a9 00
>1a1a98		97 16 c2 20 a5 16 85 23 a5 18 85 25 a9 02 00 85
>1a1aa8		27 20 3e 1f 2b 28 60 08 e2 20 a7 00 c2 20 29 ff
>1a1ab8		00 20 39 0b 85 2f 20 e3 18 08 e2 20 48 a9 00 48
>1a1ac8		ab 68 28 20 d3 1a 20 ed 18 28 60 20 3e 1f 6c 2f
>1a1ad8		08 48 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a1ae8		30 20 b5 18 89 80 00 f0 37 48 20 39 0b 85 2f 68
>1a1af8		20 86 0b c9 01 00 f0 08 c2 30 a2 29 08 20 4d 18
>1a1b08		c2 30 a2 23 08 20 4d 18 08 e2 20 48 a9 00 48 ab
>1a1b18		68 28 20 2a 1b a2 23 08 20 0f 18 ab 2b 28 68 60
>1a1b28		00 ea 6c 2f 08 08 08 c2 20 48 a9 00 08 5b 68 28
>1a1b38		08 e2 20 48 a9 00 48 ab 68 28 c2 10 da e2 20 a7
>1a1b48		00 d0 03 4c f0 1b 30 33 c9 20 d0 03 4c ea 1b c9
>1a1b58		3a b0 04 c9 30 b0 56 c9 26 f0 52 c9 22 d0 03 4c
>1a1b68		03 1c c9 5b b0 07 c9 41 90 03 4c 0f 1c c9 7b b0
>1a1b78		07 c9 61 90 03 4c 0f 1c 4c f0 1b c9 8f f0 40 c9
>1a1b88		90 f0 41 20 5c 0b c9 30 d0 0c 20 af 1a a2 23 08
>1a1b98		20 0f 18 4c 45 1b c9 00 d0 4e a7 00 a6 21 e0 ff
>1a1ba8		7f f0 05 20 2c 19 b0 12 20 8c 18 80 35 c2 20 20
>1a1bb8		72 57 a2 23 08 20 0f 18 80 83 20 d9 1a 80 dd 20
>1a1bc8		8c 18 80 1e e2 20 a4 21 c0 ff 7f f0 46 a4 21 b9
>1a1bd8		01 00 c9 01 f0 3d c9 8f f0 05 20 d9 1a 80 ee 20
>1a1be8		b5 18 20 3e 1f 4c 45 1b a6 21 e0 ff 7f b0 24 bd
>1a1bf8		01 00 c9 01 f0 1d 20 d9 1a 80 ed 20 39 1a a2 23
>1a1c08		08 20 0f 18 4c 45 1b 20 f1 19 a2 23 08 20 0f 18
>1a1c18		4c 45 1b a2 23 08 20 4d 18 fa 28 60 08 0b 8b 08
>1a1c28		e2 20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08
>1a1c38		5b 68 28 c2 30 a9 fd 5f 85 33 ab 2b 28 60 08 0b
>1a1c48		08 c2 20 48 a9 00 08 5b 68 28 c2 30 92 33 c6 33
>1a1c58		c6 33 2b 28 60 08 c2 30 29 ff 00 20 46 1c 28 60
>1a1c68		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 e6 33
>1a1c78		e6 33 b2 33 2b 28 60 8b 0b 08 08 c2 20 48 a9 00
>1a1c88		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 20
>1a1c98		85 23 a9 00 00 85 25 e2 20 a9 00 85 27 85 ea a9
>1a1ca8		1a 85 e9 c2 20 a9 d9 1c 85 e7 20 b3 50 c2 20 a5
>1a1cb8		d7 85 23 a5 d9 85 25 e2 20 a9 00 85 27 85 ea a9
>1a1cc8		1a 85 e9 c2 20 a9 dd 1c 85 e7 20 b3 50 28 2b ab
>1a1cd8		60 45 52 52 00 45 52 4c 00 e2 20 c2 10 20 89 02
>1a1ce8		af d3 08 00 0a c2 20 29 ff 00 a8 08 e2 20 48 a9
>1a1cf8		1a 48 ab 68 28 be 33 1d 20 16 03 c2 20 a5 d7 f0
>1a1d08		27 a2 63 1d 20 16 03 08 e2 20 48 a9 00 48 ab 68
>1a1d18		28 c2 20 af d7 08 00 8f 23 08 00 a9 00 00 8f 25
>1a1d28		08 00 20 87 43 20 89 02 4c de 25 67 1d 6a 1d 70
>1a1d38		1d 7d 1d 8b 1d 99 1d ac 1d c2 1d d2 1d e1 1d ee
>1a1d48		1d ff 1d 0e 1e 1b 1e 29 1e 38 1e 49 1e 62 1e 76
>1a1d58		1e 8a 1e a0 1e b4 1e cf 1e e7 1e 20 61 74 00 4f
>1a1d68		4b 00 42 72 65 61 6b 00 53 79 6e 74 61 78 20 65
>1a1d78		72 72 6f 72 00 4f 75 74 20 6f 66 20 6d 65 6d 6f
>1a1d88		72 79 00 54 79 70 65 20 6d 69 73 6d 61 74 63 68
>1a1d98		00 56 61 72 69 61 62 6c 65 20 6e 6f 74 20 66 6f
>1a1da8		75 6e 64 00 4c 69 6e 65 20 6e 75 6d 62 65 72 20
>1a1db8		6e 6f 74 20 66 6f 75 6e 64 00 53 74 61 63 6b 20
>1a1dc8		75 6e 64 65 72 66 6c 6f 77 00 53 74 61 63 6b 20
>1a1dd8		6f 76 65 72 66 6c 6f 77 00 4f 75 74 20 6f 66 20
>1a1de8		72 61 6e 67 65 00 49 6c 6c 65 67 61 6c 20 61 72
>1a1df8		67 75 6d 65 6e 74 00 46 69 6c 65 20 6e 6f 74 20
>1a1e08		66 6f 75 6e 64 00 4e 6f 74 20 61 20 6e 75 6d 62
>1a1e18		65 72 00 4d 61 74 68 20 6f 76 65 72 66 6c 6f 77
>1a1e28		00 4d 61 74 68 20 75 6e 64 65 72 66 6c 6f 77 00
>1a1e38		44 69 76 69 73 69 6f 6e 20 62 79 20 7a 65 72 6f
>1a1e48		00 55 6e 61 62 6c 65 20 74 6f 20 72 65 61 64 20
>1a1e58		64 69 72 65 63 74 6f 72 79 00 55 6e 61 62 6c 65
>1a1e68		20 74 6f 20 6c 6f 61 64 20 66 69 6c 65 00 55 6e
>1a1e78		61 62 6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c
>1a1e88		65 00 55 6e 61 62 6c 65 20 74 6f 20 64 65 6c 65
>1a1e98		74 65 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f
>1a1ea8		74 20 66 69 6e 64 20 66 69 6c 65 00 43 6f 75 6c
>1a1eb8		64 20 6e 6f 74 20 75 70 64 61 74 65 20 64 69 72
>1a1ec8		65 63 74 6f 72 79 00 43 6f 75 6c 64 20 6e 6f 74
>1a1ed8		20 63 6f 70 79 20 74 68 65 20 66 69 6c 65 00 41
>1a1ee8		72 67 75 6d 65 6e 74 20 6f 75 74 73 69 64 65 20
>1a1ef8		64 6f 6d 61 69 6e 00 08 0b 08 c2 20 48 a9 00 08
>1a1f08		5b 68 28 e2 20 a9 00 85 d2 2b 28 60 0b 08 08 c2
>1a1f18		20 48 a9 00 08 5b 68 28 08 c2 20 a9 e1 1c 8f d4
>1a1f28		08 00 e2 20 a9 1a 8f d6 08 00 28 20 2c 42 20 6d
>1a1f38		3d 64 31 28 2b 60 08 0b 08 c2 20 48 a9 00 08 5b
>1a1f48		68 28 c2 20 18 a5 00 69 01 00 85 00 e2 20 a5 02
>1a1f58		69 00 85 02 2b 28 60 08 0b 08 c2 20 48 a9 00 08
>1a1f68		5b 68 28 e2 20 a7 00 f0 0f c9 20 f0 06 c9 09 f0
>1a1f78		02 80 05 20 3e 1f 80 ed 2b 28 60 08 e2 20 a7 00
>1a1f88		f0 09 c9 3a f0 05 20 3e 1f 80 f3 28 60 08 e2 20
>1a1f98		64 36 a7 00 f0 19 c5 37 f0 2c c9 9b f0 1e c9 9f
>1a1fa8		f0 1a c9 9e f0 1a c9 a0 f0 16 20 3e 1f 80 e3 20
>1a1fb8		1b 20 c2 20 a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea
>1a1fc8		c6 36 30 30 80 e4 a5 35 30 06 a5 36 f0 02 80 da
>1a1fd8		20 3e 1f 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a1fe8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2
>1a1ff8		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a2008		a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20
>1a2018		dc d4 08 08 c2 30 a0 00 00 b7 1a 85 0c 18 a5 1a
>1a2028		65 0c 85 1a a5 1c 69 00 00 85 1c a0 02 00 b7 1a
>1a2038		85 d7 18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85
>1a2048		02 28 60 08 e2 20 48 20 5f 1f 68 e2 20 c7 00 d0
>1a2058		08 20 3e 1f 20 5f 1f 28 60 08 c2 20 48 a9 00 08
>1a2068		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a2078		20 7f 1c e2 20 dc d4 08 08 e2 20 20 5f 1f e2 20
>1a2088		a7 00 f0 10 c9 3a f0 0c c5 37 f0 05 20 3e 1f 80
>1a2098		ef 28 38 60 28 18 60 5a 08 e2 20 a0 00 00 b7 00
>1a20a8		f0 0d c9 3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28
>1a20b8		7a 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20
>1a20c8		ef 17 e2 20 a9 00 85 dc ad 8a 0f 30 4b a7 00 c9
>1a20d8		3a d0 03 20 3e 1f 20 5f 1f a7 00 d0 03 4c 6a 21
>1a20e8		20 94 03 b0 52 a7 00 10 10 20 5c 0b 85 0c c9 20
>1a20f8		d0 03 4c 58 21 a5 d2 f0 51 08 c2 20 48 a9 00 08
>1a2108		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a2118		20 7f 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a2128		68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20
>1a2138		7f 1c e2 20 dc d4 08 20 36 42 4c 6a 21 08 e2 20
>1a2148		48 a9 00 48 ab 68 28 6c 2f 08 a5 0c c9 10 d0 a9
>1a2158		a7 00 20 39 0b c2 20 85 2f 20 ef 17 20 3e 1f 20
>1a2168		45 21 ab 2b 28 60 08 58 20 ff 1e 20 24 1c e2 20
>1a2178		9c 8a 0f c2 20 a5 1a 85 00 a5 1c 85 02 4c af 21
>1a2188		08 c2 20 a0 02 00 b7 1a 85 d7 20 85 13 e2 20 a5
>1a2198		dc c9 03 f0 12 c2 20 18 a5 1a 69 04 00 85 00 e2
>1a21a8		20 a5 1c 69 00 85 02 c2 20 20 ba 20 e2 20 a5 dc
>1a21b8		c9 03 f0 f3 c9 00 d0 31 e2 20 20 5f 1f a7 00 f0
>1a21c8		28 c9 3a f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a21d8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2
>1a21e8		20 dc d4 08 20 3e 1f 80 be 28 60 08 58 e2 20 a9
>1a21f8		80 85 d2 9c 8a 0f 20 24 1c c2 30 64 31 a0 02 00
>1a2208		b7 1a f0 29 20 88 21 e2 20 a5 dc c9 01 f0 1e c9
>1a2218		02 f0 ea c9 03 f0 e6 c2 20 a0 00 00 18 a5 1a 77
>1a2228		1a 85 1a e2 20 a5 1c 69 00 85 1c 80 d0 e2 20 a9
>1a2238		00 85 d2 28 60 08 c2 30 c2 20 a9 00 00 85 08 a9
>1a2248		16 00 85 0a c2 20 a0 02 00 b7 08 f0 31 c5 23 f0
>1a2258		1e b0 2b c2 20 a0 00 00 18 a5 08 77 08 85 0c e2
>1a2268		20 a5 0a 69 00 85 0a c2 20 a5 0c 85 08 80 d7 c2
>1a2278		20 a5 08 85 1a e2 20 a5 0a 85 1c 28 38 60 28 18
>1a2288		60 08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 08
>1a2298		e2 20 a5 0e c5 02 f0 26 c2 20 18 a5 0c 69 01 00
>1a22a8		85 0c e2 20 a5 0e 69 00 85 0e c2 20 18 a5 08 69
>1a22b8		01 00 85 08 e2 20 a5 0a 69 00 85 0a 80 c4 28 60
>1a22c8		08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 06 a5
>1a22d8		0e c5 02 f0 26 c2 20 38 a5 0c e9 01 00 85 0c e2
>1a22e8		20 a5 0e e9 00 85 0e c2 20 38 a5 08 e9 01 00 85
>1a22f8		08 e2 20 a5 0a e9 00 85 0a 80 c6 28 60 08 a0 00
>1a2308		00 c2 20 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00
>1a2318		85 0e c2 20 18 a5 d9 69 04 00 85 00 e2 20 a5 db
>1a2328		69 00 85 02 a0 00 00 c2 20 38 a5 d9 f7 08 85 d9
>1a2338		e2 20 a5 db e9 00 85 db 20 89 22 20 2c 42 28 60
>1a2348		08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a0 02 00
>1a2358		97 d9 18 a5 d9 69 04 00 85 08 e2 20 a5 db 69 00
>1a2368		85 0a e2 20 a0 00 00 b7 1a 97 08 f0 03 c8 80 f7
>1a2378		c2 20 98 18 69 05 00 85 0c c2 20 a0 00 00 a5 0c
>1a2388		97 d9 c2 20 18 a5 d9 65 0c 85 0c e2 20 a5 db 69
>1a2398		00 85 db c2 20 a5 0c 85 d9 c2 20 a0 00 00 a9 00
>1a23a8		00 97 d9 c8 c0 05 00 d0 f8 20 2c 42 28 60 0b 08
>1a23b8		08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 00 00 85
>1a23c8		08 a9 16 00 85 0a a0 02 00 b7 08 f0 1d c5 d7 f0
>1a23d8		25 b0 1d a0 00 00 18 a5 08 77 08 85 0c a5 0a 69
>1a23e8		00 00 85 0a a5 0c 85 08 80 dc a9 00 00 28 2b 60
>1a23f8		a9 01 00 28 2b 60 a9 02 00 28 2b 60 08 c2 30 a9
>1a2408		05 00 85 10 a0 00 00 e2 20 b7 1a f0 07 c2 20 e6
>1a2418		10 c8 80 f3 c2 20 a5 08 85 00 a5 0a 85 02 18 a5
>1a2428		d9 69 04 00 85 0c a5 db 69 00 00 85 0e 18 a5 d9
>1a2438		65 10 85 d9 a5 db 69 00 00 85 db 18 a5 d9 69 04
>1a2448		00 85 08 a5 db 69 00 00 85 0a 20 c8 22 c2 20 a5
>1a2458		10 a0 00 00 97 00 a5 d7 a0 02 00 97 00 18 a5 00
>1a2468		69 04 00 85 00 a5 02 69 00 00 85 02 a0 00 00 e2
>1a2478		20 b7 1a 97 00 f0 03 c8 80 f7 20 2c 42 28 60 08
>1a2488		c2 30 85 d7 20 b6 23 c9 00 00 f0 2c c9 01 00 f0
>1a2498		22 c2 20 a5 08 48 a5 0a 48 20 05 23 68 85 0a 68
>1a24a8		85 08 a5 1a 85 00 a5 1c 85 02 20 5f 1f e2 20 a7
>1a24b8		00 f0 0a 20 04 24 80 05 a5 d7 20 48 23 28 60 0b
>1a24c8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a2
>1a24d8		00 00 bd 00 4f f0 03 e8 80 f8 86 0c c2 30 8a c9
>1a24e8		02 00 90 12 3a 18 69 00 4f aa 18 65 8f a8 a5 0c
>1a24f8		3a 8b 44 00 00 ab c2 20 a6 55 a0 00 4f a5 8f 8b
>1a2508		54 00 1a ab e2 20 a5 0c c9 02 90 18 a6 8f a9 22
>1a2518		9d 00 4f e8 bd 00 4f d0 fa a9 22 9d 00 4f a9 00
>1a2528		e8 9d 00 4f 28 2b 60 da 5a 8b 0b 08 08 c2 20 48
>1a2538		a9 00 08 5b 68 28 e2 20 c2 10 ad 00 4f c9 23 f0
>1a2548		0a c9 7c f0 17 28 2b ab 7a fa 60 c2 20 a9 03 00
>1a2558		85 8f a9 75 25 85 55 20 c7 24 80 e9 c2 20 a9 04
>1a2568		00 85 8f a9 79 25 85 55 20 c7 24 80 d8 44 49 52
>1a2578		00 42 52 55 4e 00 8b 08 20 e4 00 08 e2 20 48 a9
>1a2588		1a 48 ab 68 28 a2 5b d2 20 16 03 28 ab 60 08 e2
>1a2598		30 a9 01 20 1c 00 20 db 00 f0 06 c9 0d f0 02 80
>1a25a8		f5 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a25b8		30 64 d7 a9 00 4f 85 1a a9 00 00 85 1c 20 4e 08
>1a25c8		c2 20 a5 d7 d0 05 20 6e 21 80 07 20 87 24 28 2b
>1a25d8		38 60 28 2b 18 60 c2 30 a2 ff fe 9a 20 7e 25 20
>1a25e8		08 00 20 0c 00 a9 00 00 20 1c 00 20 2f 25 20 ab
>1a25f8		25 b0 ec 80 e7 08 e2 20 20 55 07 c9 00 f0 2c c9
>1a2608		01 f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68
>1a2618		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f
>1a2628		1c e2 20 dc d4 08 20 de 14 80 08 20 a2 51 80 03
>1a2638		20 11 54 28 60 08 e2 20 20 07 07 c9 00 f0 23 c9
>1a2648		01 f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2658		04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>1a2668		d4 08 20 b4 51 80 03 20 06 54 28 60 08 e2 20 20
>1a2678		07 07 c9 00 f0 23 c9 01 f0 24 08 c2 20 48 a9 00
>1a2688		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a2698		00 20 7f 1c e2 20 dc d4 08 20 c6 51 80 03 20 a7
>1a26a8		54 28 60 20 71 06 20 a2 06 20 5c 54 60 a5 23 8f
>1a26b8		1a 01 00 a5 29 8f 18 01 00 af 1e 01 00 85 23 60
>1a26c8		08 20 03 05 20 34 05 c2 20 a5 23 25 29 85 23 a5
>1a26d8		25 25 2b 85 25 28 60 08 20 03 05 20 34 05 c2 20
>1a26e8		a5 23 05 29 85 23 a5 25 05 2b 85 25 28 60 08 20
>1a26f8		03 05 c2 20 a5 23 49 ff ff 85 23 a5 25 49 ff ff
>1a2708		85 25 28 60 08 e2 20 20 55 07 c9 00 f0 2c c9 01
>1a2718		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a2728		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>1a2738		e2 20 dc d4 08 20 66 16 80 08 20 c7 52 80 03 20
>1a2748		3c 5a 28 60 08 e2 20 20 55 07 c9 00 f0 2c c9 01
>1a2758		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a2768		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>1a2778		e2 20 dc d4 08 20 7d 16 80 08 20 e8 52 80 03 20
>1a2788		51 5a 28 60 08 e2 20 20 55 07 c9 00 f0 2c c9 01
>1a2798		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a27a8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>1a27b8		e2 20 dc d4 08 20 94 16 80 08 20 15 53 80 03 20
>1a27c8		66 5a 28 60 08 e2 20 20 55 07 c9 00 f0 2c c9 01
>1a27d8		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a27e8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>1a27f8		e2 20 dc d4 08 20 ab 16 80 08 20 33 53 80 03 20
>1a2808		a5 5a 28 60 08 e2 20 20 55 07 c9 00 f0 2c c9 01
>1a2818		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a2828		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>1a2838		e2 20 dc d4 08 20 c2 16 80 08 20 51 53 80 03 20
>1a2848		90 5a 28 60 08 e2 20 20 55 07 c9 00 f0 2c c9 01
>1a2858		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a2868		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>1a2878		e2 20 dc d4 08 20 d9 16 80 08 20 7e 53 80 03 20
>1a2888		7b 5a 28 60 08 e2 20 a5 27 c9 00 f0 2d c9 01 f0
>1a2898		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>1a28a8		d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08
>1a28b8		e2 20 a5 26 49 80 85 26 80 16 c2 20 a5 23 49 ff
>1a28c8		ff 85 23 a5 25 49 ff ff 85 25 e6 23 d0 02 e6 25
>1a28d8		28 60 08 e2 20 20 2d 1b 20 15 06 20 60 04 a5 23
>1a28e8		0a 0a 0a 0a 05 29 48 a9 2c 20 4b 20 20 2d 1b 20
>1a28f8		15 06 20 60 04 a5 23 0a 0a 0a 0a 05 29 48 a9 2c
>1a2908		20 4b 20 20 2d 1b 20 15 06 20 60 04 a5 23 0a 0a
>1a2918		0a 0a 05 29 48 af 0e 08 af 09 0c 8f 0e 08 af 68
>1a2928		8f 00 08 af 68 8f 02 08 af 68 8f 04 08 af af 0e
>1a2938		08 af 29 f7 8f 0e 08 af 20 83 1f 28 60 08 e2 20
>1a2948		20 2d 1b 20 15 06 20 60 04 a5 23 0a 0a 0a 0a 05
>1a2958		29 48 a9 2c 20 4b 20 20 2d 1b 20 15 06 20 60 04
>1a2968		a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 4b 20 20 2d
>1a2978		1b 20 03 05 20 96 04 c2 20 a5 23 85 92 a5 29 85
>1a2988		23 20 60 04 e2 20 a5 23 0a 0a 0a 0a 05 29 48 c2
>1a2998		20 a5 92 85 23 20 60 04 e2 20 a5 23 0a 0a 0a 0a
>1a29a8		05 29 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 0f
>1a29b8		08 af 68 8f 0a 08 af 68 8f 09 08 af 68 8f 06 08
>1a29c8		af af 0e 08 af 29 f7 8f 0e 08 af 20 83 1f 28 60
>1a29d8		08 e2 20 48 20 2d 1b 20 15 06 e2 20 a5 23 29 0f
>1a29e8		0a 0a 0a 0a 83 01 a9 2c 20 4b 20 20 2d 1b 20 15
>1a29f8		06 a5 23 29 0f 03 01 8f 1e 00 00 e2 20 68 28 60
>1a2a08		08 c2 20 f4 00 00 e2 20 20 2d 1b 20 15 06 a5 23
>1a2a18		83 01 a9 2c 20 4b 20 20 2d 1b 20 15 06 a5 23 83
>1a2a28		02 a9 2c 20 4b 20 20 2d 1b 20 15 06 a5 23 8f 0d
>1a2a38		00 af a3 02 8f 0e 00 af a3 01 8f 0f 00 af c2 20
>1a2a48		68 28 60 08 c2 20 f4 00 00 e2 20 20 2d 1b 20 03
>1a2a58		05 a5 23 f0 16 a9 01 8f 04 00 af a9 20 8f 08 00
>1a2a68		af 8f 09 00 af 22 2c 11 00 80 0a a9 00 8f 04 00
>1a2a78		af 22 2c 11 00 a9 2c 85 37 20 80 20 90 39 20 3e
>1a2a88		1f 20 2d 1b 20 15 06 a5 23 83 01 a9 2c 20 4b 20
>1a2a98		20 2d 1b 20 15 06 a5 23 83 02 a9 2c 20 4b 20 20
>1a2aa8		2d 1b 20 15 06 a5 23 8f 05 00 af a3 02 8f 06 00
>1a2ab8		af a3 01 8f 07 00 af c2 20 68 28 60 08 c2 20 3b
>1a2ac8		38 e9 05 00 1b e2 20 20 2d 1b 20 15 06 a5 23 c9
>1a2ad8		0a 90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2ae8		0a 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>1a2af8		d4 08 83 01 a9 2c 20 4b 20 20 2d 1b 20 15 06 a5
>1a2b08		23 83 02 a9 2c 20 4b 20 20 2d 1b 20 15 06 a5 23
>1a2b18		83 03 a9 2c 20 4b 20 20 2d 1b 20 15 06 a5 23 83
>1a2b28		04 a9 2c 20 4b 20 20 2d 1b 20 15 06 a5 23 83 05
>1a2b38		a9 af 85 a0 a3 01 0a c2 20 29 ff 00 aa bf 7c 2b
>1a2b48		1a 85 9e e2 20 a3 02 c2 20 29 ff 00 0a 0a 18 65
>1a2b58		9e 85 9e e2 20 a0 02 00 a3 03 97 9e a0 01 00 a3
>1a2b68		04 97 9e a0 00 00 a3 05 97 9e c2 20 3b 18 69 05
>1a2b78		00 1b 28 60 00 20 00 24 00 28 00 2c 00 30 00 34
>1a2b88		00 38 00 3c 40 1f 80 1f da 5a 08 20 2d 1b 20 03
>1a2b98		05 c2 20 a5 23 89 00 01 d0 17 af 00 00 af 89 00
>1a2ba8		01 f0 0e e2 20 a9 00 8f 01 00 af a9 01 8f 01 00
>1a2bb8		af c2 20 a5 23 8f 00 00 af e2 20 a5 24 c2 20 29
>1a2bc8		03 00 0a aa c2 20 bf 17 2c 1a 8f 10 f0 1a bf 1f
>1a2bd8		2c 1a 8f 12 f0 1a af 10 f0 1a 8f 08 01 00 af 12
>1a2be8		f0 1a 8f 0a 01 00 af 0c 01 00 8f 14 f0 1a e2 20
>1a2bf8		af 0e 01 00 8f 16 f0 1a 22 2c 11 00 c2 20 af 1a
>1a2c08		00 00 aa af 1c 00 00 a8 20 20 00 28 7a fa 60 80
>1a2c18		02 20 03 40 01 90 01 e0 01 58 02 f0 00 2c 01 50
>1a2c28		00 64 00 28 00 32 00 3c 00 4b 00 1e 00 32 00 48
>1a2c38		00 5c 00 20 00 2a 00 34 00 43 00 16 00 34 00 da
>1a2c48		08 c2 30 c9 02 00 b0 1c 0a 0a aa bf 00 f0 1a 85
>1a2c58		9e bf 02 f0 1a 85 a0 c9 f0 00 b0 08 c9 b0 00 90
>1a2c68		03 28 fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a2c78		a9 09 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20
>1a2c88		dc d4 08 da 08 c2 30 c9 02 00 b0 17 0a 0a aa bf
>1a2c98		08 f0 1a 85 9e bf 0a f0 1a 85 a0 c9 40 00 b0 03
>1a2ca8		28 fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2cb8		09 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>1a2cc8		d4 08 08 c2 30 3b 38 e9 07 00 1b 20 2d 1b 20 15
>1a2cd8		06 c2 20 a5 23 c9 02 00 b0 59 83 01 e2 20 a9 2c
>1a2ce8		20 4b 20 20 2d 1b 20 15 06 a5 23 83 03 a9 2c 20
>1a2cf8		4b 20 20 2d 1b 20 15 06 a3 01 0a 0a 0a aa a3 03
>1a2d08		d0 05 a5 23 0a 80 04 a5 23 38 2a 9f 00 01 af c2
>1a2d18		20 a9 2c 00 85 37 20 80 20 b0 37 c2 20 08 c2 20
>1a2d28		a9 00 00 85 23 a9 b0 00 85 25 e2 20 a9 00 85 27
>1a2d38		28 80 27 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2d48		09 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>1a2d58		d4 08 c2 20 20 3e 1f 20 2d 1b c2 20 a3 01 0a 0a
>1a2d68		aa a5 23 9f 00 f0 1a 9f 08 f0 1a 83 04 a5 25 9f
>1a2d78		02 f0 1a 38 e9 b0 00 9f 0a f0 1a 83 06 a3 01 0a
>1a2d88		0a 0a aa e2 20 a3 04 9f 01 01 af a3 05 9f 02 01
>1a2d98		af a3 06 9f 03 01 af a9 00 9f 04 01 af 9f 05 01
>1a2da8		af c2 30 3b 18 69 07 00 1b 28 60 08 c2 20 48 a9
>1a2db8		00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29
>1a2dc8		ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20 20 2d 1b
>1a2dd8		20 15 06 a5 23 20 8b 2c c2 20 a5 9e 8f 05 04 af
>1a2de8		af 14 f0 1a 8f 08 04 af e2 20 a5 a0 8f 07 04 af
>1a2df8		af 16 f0 1a 8f 0a 04 af a9 00 8f 01 04 af a9 85
>1a2e08		8f 00 04 af af 01 04 af 30 fa a9 00 8f 00 04 af
>1a2e18		28 60 08 c2 20 a5 5d 8f 08 01 00 af 10 f0 1a 8f
>1a2e28		0a 01 00 18 af 0c 01 00 65 59 85 0c af 0e 01 00
>1a2e38		69 00 00 85 0e 18 a5 0c 65 9e 85 0c a5 0e 65 a0
>1a2e48		85 0e e2 20 a5 55 87 0c 28 60 c2 20 a9 01 00 85
>1a2e58		dd 38 a5 61 e5 59 85 69 10 0b 49 ff ff 1a 85 69
>1a2e68		a9 ff ff 85 dd a9 01 00 85 df 38 a5 65 e5 5d 85
>1a2e78		6d 10 0b 49 ff ff 1a 85 6d a9 ff ff 85 df a5 6d
>1a2e88		c5 69 b0 04 a5 69 80 06 a5 6d 49 ff ff 1a 48 0a
>1a2e98		68 6a 85 71 20 1a 2e a5 59 c5 61 d0 06 a5 5d c5
>1a2ea8		65 f0 36 a5 71 85 75 a5 69 49 ff ff 1a c5 75 10
>1a2eb8		10 f0 0e 38 a5 71 e5 6d 85 71 18 a5 59 65 dd 85
>1a2ec8		59 a5 75 c5 6d 10 cd f0 cb 18 a5 71 65 69 85 71
>1a2ed8		18 a5 5d 65 df 85 5d 80 bb 60 08 c2 20 3b 38 e9
>1a2ee8		06 00 1b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>1a2ef8		48 a9 00 48 ab 68 28 c2 30 20 2d 1b 20 15 06 83
>1a2f08		01 a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23 83
>1a2f18		03 a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23 83
>1a2f28		05 a9 2c 00 20 4b 20 20 2d 1b 20 15 06 a5 23 85
>1a2f38		55 a3 03 85 59 a3 05 85 5d a3 01 20 47 2c 20 1a
>1a2f48		2e c2 20 3b 18 69 06 00 1b 28 60 08 c2 20 3b 38
>1a2f58		e9 0a 00 1b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>1a2f68		20 48 a9 00 48 ab 68 28 c2 30 20 2d 1b 20 15 06
>1a2f78		83 01 a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23
>1a2f88		83 03 a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23
>1a2f98		83 05 a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23
>1a2fa8		83 07 a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23
>1a2fb8		83 09 a9 2c 00 20 4b 20 20 2d 1b 20 15 06 a5 23
>1a2fc8		85 55 a3 03 85 59 a3 05 85 5d a3 07 85 61 a3 09
>1a2fd8		85 65 a3 01 20 47 2c 20 52 2e c2 20 3b 18 69 0a
>1a2fe8		00 1b 28 60 08 c2 20 3b 38 e9 0c 00 1b 08 c2 20
>1a2ff8		48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>1a3008		28 c2 30 20 2d 1b 20 15 06 83 01 a9 2c 00 20 4b
>1a3018		20 20 2d 1b 20 03 05 a5 23 83 03 a9 2c 00 20 4b
>1a3028		20 20 2d 1b 20 03 05 a5 23 83 05 a9 2c 00 20 4b
>1a3038		20 20 2d 1b 20 03 05 a5 23 83 07 a9 2c 00 20 4b
>1a3048		20 20 2d 1b 20 03 05 a5 23 83 09 a9 2c 00 20 4b
>1a3058		20 20 2d 1b 20 15 06 a5 23 83 0b a3 01 20 8b 2c
>1a3068		a9 07 00 8f 00 04 af c2 20 a3 05 8f 00 01 00 af
>1a3078		10 f0 1a 8f 02 01 00 18 af 04 01 00 63 03 85 0c
>1a3088		e2 20 af 06 01 00 69 00 85 0e c2 20 18 a5 9e 65
>1a3098		0c 8f 05 04 af e2 20 a5 a0 65 0e 8f 07 04 af c2
>1a30a8		20 38 a3 07 e3 03 85 0c 8f 08 04 af 38 af 10 f0
>1a30b8		1a 8f 0e 04 af 38 a3 09 e3 05 8f 0a 04 af e2 20
>1a30c8		a3 0b 8f 01 04 af af 00 04 af 09 80 8f 00 04 af
>1a30d8		af 01 04 af 30 fa a9 00 8f 00 04 af c2 20 3b 18
>1a30e8		69 0c 00 1b 28 60 08 c2 20 c9 40 00 b0 13 0a 0a
>1a30f8		0a 18 69 00 0c 85 9e a9 af 00 69 00 00 85 a0 28
>1a3108		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a3118		d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08
>1a3128		08 c2 20 3b 38 e9 03 00 1b c2 30 20 2d 1b 20 15
>1a3138		06 83 01 a9 2c 00 20 4b 20 e2 20 20 2d 1b 20 15
>1a3148		06 a5 23 c9 08 b0 56 83 03 a9 2c 20 4b 20 20 2d
>1a3158		1b 20 03 05 c2 20 38 a5 23 e9 00 00 85 23 a5 25
>1a3168		e9 b0 00 85 25 30 36 c2 20 a3 01 aa 20 ee 30 a5
>1a3178		23 a0 01 00 97 9e e2 20 a5 25 c8 c8 97 9e bf 18
>1a3188		f0 1a 29 f1 85 0c a3 03 0a 29 0e 05 0c 87 9e 9f
>1a3198		18 f0 1a c2 20 3b 18 69 03 00 1b 28 60 08 c2 20
>1a31a8		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>1a31b8		20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20 3b
>1a31c8		38 e9 04 00 1b c2 30 20 2d 1b 20 15 06 83 01 a9
>1a31d8		2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23 83 03 a9
>1a31e8		2c 00 20 4b 20 20 2d 1b 20 03 05 a3 01 20 ee 30
>1a31f8		a3 03 a0 04 00 97 9e a5 23 a0 06 00 97 9e c2 20
>1a3208		3b 18 69 04 00 1b 28 60 08 c2 20 3b 38 e9 03 00
>1a3218		1b c2 30 20 2d 1b 20 15 06 83 01 a9 2c 00 20 4b
>1a3228		20 e2 20 20 2d 1b 20 03 05 a5 23 d0 04 83 03 80
>1a3238		04 a9 01 83 03 a9 2c 85 37 20 80 20 b0 20 c2 30
>1a3248		a3 01 aa 20 ee 30 e2 20 bf 18 f0 1a 29 fe 85 0c
>1a3258		a3 03 29 01 05 0c 9f 18 f0 1a 87 9e 80 36 c2 30
>1a3268		20 3e 1f 20 2d 1b 20 15 06 a5 23 c9 08 00 b0 2e
>1a3278		0a 0a 0a 0a 85 0c a3 01 aa 20 ee 30 e2 20 a3 03
>1a3288		29 01 05 0c 85 0c bf 18 f0 1a 29 8e 05 0c 87 9e
>1a3298		9f 18 f0 1a c2 20 3b 18 69 03 00 1b 28 60 08 c2
>1a32a8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a32b8		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20
>1a32c8		c9 04 00 b0 19 8d 00 01 a9 04 00 8d 02 01 18 ad
>1a32d8		04 01 69 80 02 85 9e a9 af 00 85 a0 28 60 08 c2
>1a32e8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a32f8		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20
>1a3308		c9 04 00 b0 19 8d 00 01 a9 0c 00 8d 02 01 18 ad
>1a3318		04 01 69 00 02 85 9e a9 af 00 85 a0 28 60 08 c2
>1a3328		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a3338		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20
>1a3348		3b 38 e9 06 00 1b c2 20 20 2d 1b 20 15 06 a5 23
>1a3358		83 01 a9 2c 00 20 4b 20 20 2d 1b 20 15 06 a5 23
>1a3368		83 03 a9 2c 00 20 4b 20 20 2d 1b 20 15 06 a5 23
>1a3378		83 05 a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a3 01
>1a3388		20 c5 32 a5 23 87 9e e2 20 38 a5 25 e9 b0 a0 02
>1a3398		00 97 9e a3 05 d0 0d e2 20 a3 03 29 07 a0 03 00
>1a33a8		97 9e 80 0d e2 20 a3 03 29 07 09 08 a0 03 00 97
>1a33b8		9e c2 20 3b 18 69 06 00 1b 28 60 08 c2 20 3b 38
>1a33c8		e9 06 00 1b c2 20 20 2d 1b 20 15 06 a5 23 83 01
>1a33d8		a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23 83 03
>1a33e8		a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23 83 05
>1a33f8		a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a3 01 20 05
>1a3408		33 a5 23 a0 01 00 97 9e e2 20 38 a5 25 e9 b0 c8
>1a3418		c8 97 9e c2 20 a3 03 a0 04 00 97 9e a3 05 a0 06
>1a3428		00 97 9e c2 20 3b 18 69 06 00 1b 28 60 08 c2 20
>1a3438		f4 00 00 c2 20 20 2d 1b 20 15 06 a5 23 83 01 a9
>1a3448		2c 00 20 4b 20 20 2d 1b 20 03 05 a3 01 20 05 33
>1a3458		a5 23 d0 06 e2 20 a9 00 80 04 e2 20 a9 01 e2 20
>1a3468		a0 00 00 97 9e c2 20 68 28 60 08 c2 20 3b 38 e9
>1a3478		04 00 1b c2 20 20 2d 1b 20 15 06 a5 23 83 01 a9
>1a3488		2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23 83 03 a9
>1a3498		2c 00 20 4b 20 20 2d 1b 20 03 05 a3 01 20 05 33
>1a34a8		a5 23 a0 0a 00 97 9e a3 03 a0 08 00 97 9e c2 20
>1a34b8		3b 18 69 04 00 1b 28 60 0b 08 08 c2 20 48 a9 00
>1a34c8		08 5b 68 28 e2 20 a9 00 8f 58 f0 1a af 5c f0 1a
>1a34d8		c9 b0 b0 1c 8f 24 04 af af 5b f0 1a 8f 23 04 af
>1a34e8		af 5a f0 1a 8f 22 04 af a9 10 8f 58 f0 1a 80 17
>1a34f8		38 e9 b0 8f 04 04 af af 5b f0 1a 8f 03 04 af af
>1a3508		5a f0 1a 8f 02 04 af af 59 f0 1a d0 3c af 58 f0
>1a3518		1a f0 1b af 5d f0 1a 8f 28 04 af af 5e f0 1a 8f
>1a3528		29 04 af af 5f f0 1a 8f 2a 04 af 82 8b 00 af 5d
>1a3538		f0 1a 8f 08 04 af af 5e f0 1a 8f 09 04 af af 5f
>1a3548		f0 1a 8f 0a 04 af 82 70 00 af 58 f0 1a 09 01 8f
>1a3558		58 f0 1a 89 10 f0 32 af 60 f0 1a 8f 28 04 af af
>1a3568		61 f0 1a 8f 29 04 af af 62 f0 1a 8f 2a 04 af af
>1a3578		63 f0 1a 8f 2b 04 af af 64 f0 1a 8f 2c 04 af af
>1a3588		65 f0 1a 8f 2d 04 af 80 30 af 60 f0 1a 8f 08 04
>1a3598		af af 61 f0 1a 8f 09 04 af af 62 f0 1a 8f 0a 04
>1a35a8		af af 63 f0 1a 8f 0b 04 af af 64 f0 1a 8f 0c 04
>1a35b8		af af 65 f0 1a 8f 0d 04 af e2 20 af 69 f0 1a c9
>1a35c8		b0 b0 20 8f 27 04 af af 68 f0 1a 8f 26 04 af af
>1a35d8		67 f0 1a 8f 25 04 af af 58 f0 1a 09 20 8f 58 f0
>1a35e8		1a 80 17 38 e9 b0 8f 07 04 af af 68 f0 1a 8f 06
>1a35f8		04 af af 67 f0 1a 8f 05 04 af af 66 f0 1a d0 3e
>1a3608		af 58 f0 1a 89 20 f0 1b af 6a f0 1a 8f 28 04 af
>1a3618		af 6b f0 1a 8f 29 04 af af 6c f0 1a 8f 2a 04 af
>1a3628		82 8b 00 af 6a f0 1a 8f 08 04 af af 6b f0 1a 8f
>1a3638		09 04 af af 6c f0 1a 8f 0a 04 af 82 70 00 af 58
>1a3648		f0 1a 09 02 8f 58 f0 1a 89 20 f0 32 af 6d f0 1a
>1a3658		8f 28 04 af af 6e f0 1a 8f 29 04 af af 6f f0 1a
>1a3668		8f 2a 04 af af 70 f0 1a 8f 2b 04 af af 71 f0 1a
>1a3678		8f 2e 04 af af 72 f0 1a 8f 2f 04 af 80 30 af 6d
>1a3688		f0 1a 8f 08 04 af af 6e f0 1a 8f 09 04 af af 6f
>1a3698		f0 1a 8f 0a 04 af af 70 f0 1a 8f 0b 04 af af 71
>1a36a8		f0 1a 8f 0e 04 af af 72 f0 1a 8f 0f 04 af af 58
>1a36b8		f0 1a 29 30 f0 43 c9 10 f0 76 c9 20 d0 03 82 8a
>1a36c8		00 af 58 f0 1a 29 03 f0 23 c9 03 f0 23 08 c2 20
>1a36d8		48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2
>1a36e8		20 29 ff 00 20 7f 1c e2 20 dc d4 08 a9 01 80 02
>1a36f8		a9 03 8f 20 04 af 82 7d 00 af 58 f0 1a 29 03 f0
>1a3708		23 c9 03 f0 23 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a3718		20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2
>1a3728		20 dc d4 08 a9 01 80 02 a9 03 8f 00 04 af 80 34
>1a3738		af 58 f0 1a 29 01 0a 09 11 8f 20 04 af af 58 f0
>1a3748		1a 29 02 09 11 8f 00 04 af 80 19 af 58 f0 1a 29
>1a3758		02 09 21 8f 20 04 af af 58 f0 1a 29 01 0a 09 21
>1a3768		8f 00 04 af af 00 04 af 09 80 8f 00 04 af af 58
>1a3778		f0 1a 29 30 f0 0f af 20 04 af 09 80 8f 20 04 af
>1a3788		ea ea ea ea ea af 01 04 af 89 80 d0 f8 a9 00 8f
>1a3798		20 04 af 8f 00 04 af 28 2b 60 0b 08 e2 20 c2 10
>1a37a8		a9 00 a2 00 00 8f 59 f0 1a e8 e0 1a 00 d0 f6 20
>1a37b8		9f 20 c9 e6 f0 23 c9 e7 f0 5e 08 c2 20 48 a9 00
>1a37c8		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>1a37d8		00 20 7f 1c e2 20 dc d4 08 20 4b 20 20 2d 1b 20
>1a37e8		03 05 c2 20 a5 23 8f 5a f0 1a e2 20 a5 25 8f 5c
>1a37f8		f0 1a a9 2c 20 4b 20 20 2d 1b 20 03 05 c2 20 a5
>1a3808		23 8f 5d f0 1a e2 20 a5 25 8f 5f f0 1a e2 20 a9
>1a3818		00 8f 59 f0 1a 82 74 00 20 4b 20 20 2d 1b 20 03
>1a3828		05 c2 20 a5 23 8f 5a f0 1a e2 20 a5 25 8f 5c f0
>1a3838		1a a9 2c 20 4b 20 20 2d 1b 20 bf 05 c2 20 a5 23
>1a3848		8f 60 f0 1a 8d 00 01 a9 2c 00 20 4b 20 20 2d 1b
>1a3858		20 bf 05 c2 20 a5 23 8f 62 f0 1a 8d 02 01 a9 2c
>1a3868		00 20 4b 20 20 2d 1b 20 bf 05 c2 20 a5 23 8f 64
>1a3878		f0 1a c2 20 ad 04 01 8f 5d f0 1a e2 20 ad 06 01
>1a3888		8f 5f f0 1a e2 20 a9 01 8f 59 f0 1a e2 20 a9 9c
>1a3898		20 4b 20 20 9f 20 c9 e6 f0 23 c9 e7 f0 5e 08 c2
>1a38a8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a38b8		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 20 4b 20
>1a38c8		20 2d 1b 20 03 05 c2 20 a5 23 8f 67 f0 1a e2 20
>1a38d8		a5 25 8f 69 f0 1a a9 2c 20 4b 20 20 2d 1b 20 03
>1a38e8		05 c2 20 a5 23 8f 6a f0 1a e2 20 a5 25 8f 6c f0
>1a38f8		1a e2 20 a9 00 8f 66 f0 1a 82 74 00 20 4b 20 20
>1a3908		2d 1b 20 03 05 c2 20 a5 23 8f 67 f0 1a e2 20 a5
>1a3918		25 8f 69 f0 1a a9 2c 20 4b 20 20 2d 1b 20 bf 05
>1a3928		c2 20 a5 23 8f 6d f0 1a 8d 00 01 a9 2c 00 20 4b
>1a3938		20 20 2d 1b 20 bf 05 c2 20 a5 23 8f 6f f0 1a 8d
>1a3948		02 01 a9 2c 00 20 4b 20 20 2d 1b 20 bf 05 c2 20
>1a3958		a5 23 8f 71 f0 1a c2 20 ad 04 01 8f 6a f0 1a e2
>1a3968		20 ad 06 01 8f 6c f0 1a e2 20 a9 01 8f 66 f0 1a
>1a3978		c2 20 af 5d f0 1a cf 6a f0 1a d0 14 e2 20 af 5f
>1a3988		f0 1a cf 6c f0 1a d0 08 c2 20 20 c0 34 28 2b 60
>1a3998		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>1a39a8		08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08
>1a39b8		c2 30 20 2d 1b 20 15 06 a5 23 48 a9 2c 00 20 4b
>1a39c8		20 20 2d 1b 20 15 06 a4 23 fa 20 20 00 28 60 08
>1a39d8		20 5f 1f e2 20 a7 00 d0 03 4c 7c 3a c9 3a d0 03
>1a39e8		4c 7c 3a c9 22 d0 0b 20 39 1a 20 67 43 a9 3b 20
>1a39f8		4b 20 20 94 03 90 41 20 50 51 90 3c a9 3f 20 18
>1a3a08		00 a9 20 20 18 00 20 10 00 e2 20 a5 ea c9 02 f0
>1a3a18		46 c9 00 f0 62 c9 01 f0 5d 08 c2 20 48 a9 00 08
>1a3a28		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a3a38		20 7f 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a3a48		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>1a3a58		7f 1c e2 20 dc d4 08 c2 20 a9 00 4c 85 23 a9 00
>1a3a68		00 85 25 e2 20 a9 02 85 27 c2 20 20 b3 50 a9 0d
>1a3a78		00 20 18 00 28 60 ea c2 20 a5 00 85 40 a5 02 85
>1a3a88		42 a9 00 4c 85 00 a9 00 00 85 02 20 8a 07 c2 20
>1a3a98		a5 40 85 00 a5 42 85 02 80 cf 08 20 5f 1f e2 20
>1a3aa8		a7 00 f0 46 c9 3a f0 42 20 94 03 90 3f 20 50 51
>1a3ab8		90 3a 20 14 00 e2 20 8f 00 4e 00 a9 00 8f 01 4e
>1a3ac8		00 c2 20 a9 00 4e 85 23 a9 00 00 85 25 e2 20 a9
>1a3ad8		02 85 27 20 b3 50 20 5f 1f a7 00 f0 0d c9 3a f0
>1a3ae8		09 c9 2c d0 07 20 3e 1f 80 b1 28 60 08 c2 20 48
>1a3af8		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>1a3b08		29 ff 00 20 7f 1c e2 20 dc d4 08 08 20 2d 1b 20
>1a3b18		03 05 e2 20 a9 5c 85 a2 c2 20 a5 23 85 a3 e2 20
>1a3b28		a5 25 85 a5 e2 20 a9 2c 85 37 20 80 20 90 41 20
>1a3b38		3e 1f 20 2d 1b 20 bf 05 c2 20 a5 23 85 55 e2 20
>1a3b48		a9 2c 85 37 20 80 20 90 27 20 3e 1f 20 2d 1b 20
>1a3b58		bf 05 c2 20 a5 23 85 59 e2 20 a9 2c 85 37 20 80
>1a3b68		20 90 0d 20 3e 1f 20 2d 1b 20 bf 05 c2 20 a4 23
>1a3b78		a6 59 a5 55 0b 8b 08 22 a2 08 00 28 ab 2b 20 83
>1a3b88		1f 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a3b98		04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>1a3ba8		d4 08 08 e2 20 20 5f 1f 20 50 51 90 64 a9 8f 20
>1a3bb8		4b 20 a9 01 20 8c 18 a2 01 00 a9 00 8f 00 4d 00
>1a3bc8		20 2d 1b 20 bf 05 c2 20 a5 23 9f 00 4d 00 e2 20
>1a3bd8		af 00 4d 00 1a 8f 00 4d 00 30 55 e8 e8 20 5f 1f
>1a3be8		a7 00 c9 2c f0 25 c9 90 d0 27 20 3e 1f 20 70 61
>1a3bf8		c2 20 a5 c0 85 23 e2 20 a5 c2 85 25 64 26 a5 ea
>1a3c08		09 80 85 ea 85 27 20 b3 50 28 60 20 3e 1f 4c c8
>1a3c18		3b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a3c28		d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08
>1a3c38		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>1a3c48		08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08
>1a3c58		20 5f 1f e2 20 a7 00 f0 28 c9 3a f0 24 20 94 03
>1a3c68		90 21 20 50 51 90 1c 20 aa 3c 20 b3 50 20 5f 1f
>1a3c78		a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20 3e 1f 80
>1a3c88		cf 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a3c98		02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>1a3ca8		d4 08 08 a5 02 85 42 a5 00 85 40 a5 1c 85 46 a5
>1a3cb8		1a 85 44 c2 20 a5 3a d0 04 a5 38 f0 4e a5 38 85
>1a3cc8		00 a5 3a 85 02 a5 3c 85 1a a5 3e 85 1c e2 20 a7
>1a3cd8		00 f0 53 c9 3a f0 4f c9 2c d0 03 20 3e 1f 20 5f
>1a3ce8		1f a7 00 c9 22 f0 4e 20 ad 03 b0 4e 08 c2 20 48
>1a3cf8		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>1a3d08		29 ff 00 20 7f 1c e2 20 dc d4 08 c2 20 a9 00 00
>1a3d18		85 1a a9 16 00 85 1c 18 a5 1a 69 04 00 85 00 a5
>1a3d28		1c 69 00 00 85 02 e2 20 a9 80 85 35 a9 ab 85 37
>1a3d38		20 95 1f 80 a9 20 39 1a 80 03 20 6e 19 c2 20 a5
>1a3d48		00 85 38 a5 02 85 3a a5 1a 85 3c a5 1c 85 3e a5
>1a3d58		44 85 1a a5 46 85 1c a5 40 85 00 a5 42 85 02 28
>1a3d68		60 20 83 1f 60 64 38 64 3a 64 3c 64 3e 60 20 24
>1a3d78		00 60 20 2d 1b c2 20 a5 25 48 a5 23 48 e2 20 a7
>1a3d88		00 c9 2c d0 22 20 3e 1f 20 2d 1b c2 20 a5 26 d0
>1a3d98		35 68 85 08 68 85 0a c2 20 a5 23 87 08 e2 20 a0
>1a3da8		02 00 a5 25 97 08 60 08 c2 20 48 a9 00 08 5b 68
>1a3db8		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f
>1a3dc8		1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>1a3dd8		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>1a3de8		e2 20 dc d4 08 20 2d 1b c2 20 a5 25 48 a5 23 48
>1a3df8		e2 20 a7 00 c9 2c d0 19 20 3e 1f 20 2d 1b c2 20
>1a3e08		a5 25 d0 2c 68 85 08 68 85 0a c2 20 a5 23 87 08
>1a3e18		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a3e28		d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08
>1a3e38		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>1a3e48		08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 20
>1a3e58		2d 1b c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c
>1a3e68		d0 1f 20 3e 1f 20 2d 1b e2 20 a5 24 d0 32 c2 20
>1a3e78		a5 25 d0 2c 68 85 08 68 85 0a e2 20 a5 23 87 08
>1a3e88		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a3e98		d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08
>1a3ea8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>1a3eb8		08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08
>1a3ec8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f d3 08
>1a3ed8		00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 e2
>1a3ee8		20 a7 00 f0 05 20 3e 1f 80 f7 28 60 08 28 60 08
>1a3ef8		28 60 08 28 60 08 c2 20 a5 1c 20 46 1c a5 1a 20
>1a3f08		46 1c a5 02 48 a5 00 48 20 83 1f a5 02 20 46 1c
>1a3f18		a5 00 20 46 1c 68 85 00 68 85 02 20 5f 1f 20 50
>1a3f28		51 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a3f38		05 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>1a3f48		d4 08 e2 20 a5 ea 20 5d 1c a5 e9 20 5d 1c c2 20
>1a3f58		a5 e7 20 46 1c 20 5f 1f e2 20 a7 00 c9 8a d0 6a
>1a3f68		a5 ea c9 00 f0 04 c9 01 f0 00 20 3e 1f 20 2d 1b
>1a3f78		20 b3 50 e2 20 a9 9c 20 4b 20 20 2d 1b c2 20 a5
>1a3f88		27 20 46 1c a5 25 20 46 1c a5 23 20 46 1c e2 20
>1a3f98		a9 9d 85 37 20 80 20 90 1b 20 3e 1f 20 2d 1b e2
>1a3fa8		20 a5 27 20 46 1c c2 20 a5 25 20 46 1c a5 23 20
>1a3fb8		46 1c 80 14 c2 20 a9 00 00 20 46 1c a9 00 00 20
>1a3fc8		46 1c a9 01 00 20 46 1c 28 60 08 c2 20 48 a9 00
>1a3fd8		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>1a3fe8		00 20 7f 1c e2 20 dc d4 08 08 8b 08 e2 20 48 a9
>1a3ff8		00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a4008		30 a4 33 c8 c8 c2 20 b9 0c 00 85 e7 b9 0e 00 e2
>1a4018		20 85 e9 b9 10 00 85 ea c2 20 5a 20 51 4f 7a c2
>1a4028		20 b9 00 00 85 29 b9 02 00 85 2b e2 20 b9 04 00
>1a4038		85 2d c2 20 5a 20 fd 25 20 b3 50 7a c2 20 b9 06
>1a4048		00 85 29 b9 08 00 85 2b e2 20 b9 0a 00 85 2d c2
>1a4058		20 b9 02 00 30 0a 20 4c 28 20 cc 04 f0 28 80 08
>1a4068		20 0c 28 20 cc 04 f0 1e c2 20 b9 12 00 85 00 b9
>1a4078		14 00 85 02 b9 16 00 85 1a b9 18 00 85 1c e2 20
>1a4088		a9 03 85 dc 80 17 a2 23 08 20 4d 18 c2 20 18 a5
>1a4098		33 69 1a 00 85 33 a5 35 69 00 00 85 35 ab 28 60
>1a40a8		08 a5 1a 48 a5 1c 48 20 5f 1f 20 8a 07 a5 23 f0
>1a40b8		26 20 3d 22 90 42 e2 20 a9 02 85 dc 20 83 1f c2
>1a40c8		20 68 20 46 1c 68 20 46 1c a5 02 20 46 1c a5 00
>1a40d8		20 46 1c e6 31 28 60 68 68 08 c2 20 48 a9 00 08
>1a40e8		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a40f8		20 7f 1c e2 20 dc d4 08 68 68 08 c2 20 48 a9 00
>1a4108		08 5b 68 28 e2 20 a9 06 8f d3 08 00 c2 20 29 ff
>1a4118		00 20 7f 1c e2 20 dc d4 08 08 c2 30 a5 31 f0 1e
>1a4128		20 68 1c 85 00 20 68 1c 85 02 20 68 1c 85 1a 20
>1a4138		68 1c 85 1c c6 31 e2 20 a9 03 85 dc 28 60 08 c2
>1a4148		20 48 a9 00 08 5b 68 28 e2 20 a9 07 8f d3 08 00
>1a4158		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 20 2d
>1a4168		1b 20 cc 04 f0 1c e2 20 a9 97 20 4b 20 20 8a 07
>1a4178		20 cc 04 f0 12 20 3d 22 90 2c e2 20 a9 02 85 dc
>1a4188		80 03 20 83 1f 28 60 08 c2 20 48 a9 00 08 5b 68
>1a4198		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f
>1a41a8		1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>1a41b8		e2 20 a9 06 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>1a41c8		e2 20 dc d4 08 08 e2 20 a9 01 85 dc 28 60 08 20
>1a41d8		5f 1f 20 8a 07 a5 23 f0 0d 20 3d 22 90 27 e2 20
>1a41e8		a9 02 85 dc 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a41f8		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>1a4208		e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4218		20 a9 06 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2
>1a4228		20 dc d4 08 20 ef 17 20 38 0f 20 50 4e 60 08 a7
>1a4238		00 10 03 20 3e 1f 20 50 51 b0 03 4c ad 42 e2 20
>1a4248		20 9f 20 c9 8f d0 0e a9 8f 20 4b 20 a9 00 8f 00
>1a4258		4d 00 20 71 19 20 5f 1f e2 20 a7 00 c9 8a f0 03
>1a4268		4c ad 42 20 3e 1f a5 ea 48 a5 e9 48 a5 e8 48 a5
>1a4278		e7 48 20 2d 1b 68 85 e7 68 85 e8 68 85 e9 68 85
>1a4288		ea 29 80 f0 1b 20 c3 4e 90 3a c2 20 a0 09 00 b7
>1a4298		08 85 c0 e2 20 c8 c8 b7 08 85 c2 20 51 63 80 03
>1a42a8		20 b3 50 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a42b8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2
>1a42c8		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a42d8		a9 05 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20
>1a42e8		dc d4 08 08 e2 20 20 9f 20 c9 00 f0 6d 20 2d 1b
>1a42f8		e2 20 a5 27 c9 ff f0 1b c9 02 d0 05 20 67 43 80
>1a4308		12 c9 00 d0 05 20 87 43 80 09 c9 01 d0 4f 20 9a
>1a4318		43 80 00 20 5f 1f a7 00 f0 40 c9 3a f0 3c c9 2c
>1a4328		f0 23 c9 3b f0 24 08 c2 20 48 a9 00 08 5b 68 28
>1a4338		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>1a4348		e2 20 dc d4 08 a9 09 20 18 00 20 3e 1f 20 5f 1f
>1a4358		a7 00 f0 09 c9 3a f0 05 80 93 20 89 02 28 60 08
>1a4368		8b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a0
>1a4378		00 00 b7 23 f0 06 20 18 00 c8 80 f6 ab 28 60 08
>1a4388		c2 20 20 ed 13 a5 16 85 23 a5 18 85 25 20 67 43
>1a4398		28 60 08 20 19 5b c2 20 a5 16 85 23 a5 18 85 25
>1a43a8		20 67 43 28 60 08 e2 20 85 b5 4a 4a 4a 4a 29 0f
>1a43b8		18 69 30 97 16 c8 a5 b5 29 0f 18 69 30 97 16 c8
>1a43c8		28 60 e2 20 a9 8f 20 4b 20 08 20 2d 1b e2 20 c2
>1a43d8		10 af 0e 08 af 09 08 8f 0e 08 af 20 8e 13 a0 00
>1a43e8		00 af 06 08 af 20 ad 43 a9 2f 97 16 c8 af 09 08
>1a43f8		af 20 ad 43 a9 2f 97 16 c8 af 0f 08 af 20 ad 43
>1a4408		af 0a 08 af 20 ad 43 a9 00 97 16 af 0e 08 af 29
>1a4418		f7 8f 0e 08 af c2 20 a5 16 85 23 a5 18 85 25 e2
>1a4428		20 a9 02 85 27 28 e2 20 20 3e 1f 60 e2 20 a9 8f
>1a4438		20 4b 20 08 20 2d 1b e2 20 c2 10 af 0e 08 af 09
>1a4448		08 8f 0e 08 af 20 8e 13 a0 00 00 af 04 08 af 29
>1a4458		7f 20 ad 43 a9 3a 97 16 c8 af 02 08 af 20 ad 43
>1a4468		a9 3a 97 16 c8 af 00 08 af 20 ad 43 a9 00 97 16
>1a4478		af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5 16 85 23
>1a4488		a5 18 85 25 e2 20 a9 02 85 27 28 e2 20 20 3e 1f
>1a4498		60 e2 20 a9 8f 20 4b 20 08 20 2d 1b e2 20 a9 01
>1a44a8		85 27 a9 03 8f 00 e2 af a9 01 8f 01 e2 af c2 30
>1a44b8		af 84 e8 af 8f 08 e2 af af 84 e8 af 29 ff 7f 8f
>1a44c8		0a e2 af a9 ff ff 8f 0c e2 af a9 ff 7f 8f 0e e2
>1a44d8		af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25
>1a44e8		28 e2 20 20 3e 1f 60 e2 20 a9 8f 20 4b 20 08 c2
>1a44f8		30 20 2d 1b 20 95 05 c2 20 a5 25 48 a5 23 48 20
>1a4508		5f 1f e2 20 a7 00 c9 2c f0 03 4c 66 45 20 3e 1f
>1a4518		20 2d 1b 20 bf 05 c2 20 a5 23 48 20 5f 1f e2 20
>1a4528		a7 00 c9 2c f0 03 4c 66 45 20 3e 1f 20 2d 1b 20
>1a4538		bf 05 c2 20 a5 23 85 8f e2 20 a5 25 85 91 c2 20
>1a4548		68 85 29 a9 00 00 85 2b 68 85 23 68 85 25 e2 20
>1a4558		a9 02 85 27 20 e6 15 e2 20 20 3e 1f 28 60 08 c2
>1a4568		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a4578		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20
>1a4588		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>1a4598		20 29 ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f
>1a45a8		20 4b 20 08 c2 30 20 2d 1b e2 20 a5 27 c9 02 f0
>1a45b8		03 4c 28 46 c2 20 a5 25 48 a5 23 48 20 5f 1f e2
>1a45c8		20 a7 00 c9 2c f0 03 4c 47 46 20 3e 1f 20 2d 1b
>1a45d8		e2 20 a5 27 c9 00 d0 48 c2 20 a5 23 85 8f c2 20
>1a45e8		68 85 23 68 85 25 e2 20 a9 02 85 27 e2 20 a0 00
>1a45f8		00 b7 23 f0 03 c8 80 f9 c2 20 98 38 e5 8f 30 09
>1a4608		85 29 a9 00 00 85 2b 80 07 a9 00 00 85 29 85 2b
>1a4618		e2 20 a9 00 85 2d 20 e6 15 e2 20 20 3e 1f 28 60
>1a4628		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a4638		08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08
>1a4648		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a4658		00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 c2
>1a4668		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a4678		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9
>1a4688		8f 20 4b 20 08 c2 30 20 2d 1b e2 20 a5 27 c9 02
>1a4698		f0 03 4c f1 46 c2 20 a5 25 48 a5 23 48 20 5f 1f
>1a46a8		e2 20 a7 00 c9 2c f0 03 4c 10 47 20 3e 1f 20 2d
>1a46b8		1b e2 20 a5 27 c9 00 d0 30 c2 20 a5 23 85 8f c2
>1a46c8		20 a9 00 00 85 29 a9 00 00 85 2b e2 20 a9 00 85
>1a46d8		2d c2 20 68 85 23 68 85 25 e2 20 a9 02 85 27 20
>1a46e8		e6 15 e2 20 20 3e 1f 28 60 08 c2 20 48 a9 00 08
>1a46f8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a4708		20 7f 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a4718		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>1a4728		7f 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>1a4738		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 7f
>1a4748		1c e2 20 dc d4 08 e2 20 a9 8f 20 4b 20 20 2d 1b
>1a4758		c2 10 e2 20 a5 27 c9 02 d0 23 c2 20 a5 00 85 40
>1a4768		a5 02 85 42 a5 23 85 00 a5 25 85 02 20 8a 07 a5
>1a4778		40 85 00 a5 42 85 02 e2 20 20 3e 1f 60 08 c2 20
>1a4788		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a4798		20 29 ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f
>1a47a8		20 4b 20 08 20 2d 1b c2 10 e2 20 a5 27 c9 00 d0
>1a47b8		1a 20 ed 13 c2 20 a5 16 85 23 a5 18 85 25 e2 20
>1a47c8		a9 02 85 27 28 e2 20 20 3e 1f 60 08 c2 20 48 a9
>1a47d8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a47e8		ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f 20 4b
>1a47f8		20 08 20 2d 1b 20 95 05 c2 20 64 0c 64 0e e2 30
>1a4808		a0 00 b7 23 c9 20 f0 04 c9 24 d0 03 c8 80 f3 b7
>1a4818		23 20 be 03 90 1e c2 20 06 0c 26 0e 06 0c 26 0e
>1a4828		06 0c 26 0e 06 0c 26 0e e2 20 20 df 03 05 0c 85
>1a4838		0c c8 80 db c2 20 a5 0c 85 23 a5 0e 85 25 e2 20
>1a4848		a9 00 85 27 28 e2 20 20 3e 1f 60 e2 20 a9 8f 20
>1a4858		4b 20 08 20 2d 1b 20 03 05 20 8e 13 e2 30 a0 ff
>1a4868		a9 00 97 16 88 a5 23 29 0f aa bf 00 d0 1a 97 16
>1a4878		88 a5 23 29 f0 4a 4a 4a 4a aa bf 00 d0 1a 97 16
>1a4888		88 a5 24 85 23 a5 25 85 24 a5 26 85 25 a9 00 85
>1a4898		26 a5 23 d0 d0 a5 24 d0 cc a5 25 d0 c8 98 38 65
>1a48a8		16 85 23 a5 17 85 24 a5 18 85 25 a5 19 85 26 a9
>1a48b8		02 85 27 28 e2 20 20 3e 1f 60 08 c2 20 48 a9 00
>1a48c8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a48d8		00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f 20 4b 20
>1a48e8		20 2d 1b e2 20 a5 27 c9 02 d0 1f 8b a5 25 48 ab
>1a48f8		c2 10 a6 23 20 7a 14 ab 84 23 c2 20 64 25 e2 20
>1a4908		a9 00 85 27 e2 20 20 3e 1f 60 08 c2 20 48 a9 00
>1a4918		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a4928		00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f 20 4b 20
>1a4938		20 2d 1b e2 20 a5 27 c9 00 d0 12 e2 20 a7 23 85
>1a4948		23 64 24 64 25 64 30 e2 20 20 3e 1f 60 08 c2 20
>1a4958		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a4968		20 29 ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f
>1a4978		20 4b 20 20 2d 1b e2 20 a5 27 c9 00 d0 1d c2 20
>1a4988		a7 23 85 0c e2 20 a0 02 00 b7 23 85 25 64 26 c2
>1a4998		20 a5 0c 85 23 e2 20 20 3e 1f 60 08 c2 20 48 a9
>1a49a8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a49b8		ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f 20 4b
>1a49c8		20 20 2d 1b e2 20 a5 27 c9 00 d0 0e c2 20 a7 23
>1a49d8		85 23 64 25 e2 20 20 3e 1f 60 08 c2 20 48 a9 00
>1a49e8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a49f8		00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f 20 4b 20
>1a4a08		20 2d 1b e2 20 a5 27 c9 00 d0 24 20 8e 13 a5 23
>1a4a18		87 16 a9 00 a0 01 00 97 16 c2 20 a5 16 85 23 a5
>1a4a28		18 85 25 e2 20 a9 02 85 27 e2 20 20 3e 1f 60 08
>1a4a38		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a4a48		00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 e2 20
>1a4a58		a9 8f 20 4b 20 20 2d 1b e2 20 a5 27 c9 02 d0 14
>1a4a68		a7 23 85 23 64 24 64 25 64 26 a9 00 85 27 e2 20
>1a4a78		20 3e 1f 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4a88		a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20
>1a4a98		dc d4 08 e2 20 a9 8f 20 4b 20 20 2d 1b e2 20 a5
>1a4aa8		27 c9 00 d0 39 e2 20 a5 26 d0 52 a5 25 d0 4e a5
>1a4ab8		24 d0 4a c2 10 20 8e 13 a4 23 e2 20 a9 00 97 16
>1a4ac8		88 30 07 a9 20 97 16 88 10 fb a9 02 85 27 c2 20
>1a4ad8		a5 16 85 23 a5 18 85 25 e2 20 20 3e 1f 60 08 c2
>1a4ae8		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a4af8		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20
>1a4b08		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>1a4b18		20 29 ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f
>1a4b28		20 4b 20 20 2d 1b e2 20 a5 27 c9 00 d0 39 e2 20
>1a4b38		a5 26 d0 52 a5 25 d0 4e a5 24 d0 4a c2 10 20 8e
>1a4b48		13 a4 23 e2 20 a9 00 97 16 88 30 07 a9 09 97 16
>1a4b58		88 10 fb a9 02 85 27 c2 20 a5 16 85 23 a5 18 85
>1a4b68		25 e2 20 20 3e 1f 60 08 c2 20 48 a9 00 08 5b 68
>1a4b78		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f
>1a4b88		1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>1a4b98		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>1a4ba8		e2 20 dc d4 08 e2 20 a9 8f 20 4b 20 20 2d 1b e2
>1a4bb8		20 a5 27 c9 00 f0 23 c9 01 f0 3e 08 c2 20 48 a9
>1a4bc8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a4bd8		ff 00 20 7f 1c e2 20 dc d4 08 c2 20 a5 25 10 21
>1a4be8		49 ff ff 85 25 a5 23 49 ff ff 18 69 01 00 85 23
>1a4bf8		a5 25 69 00 00 85 25 80 08 e2 20 a5 26 29 7f 85
>1a4c08		26 e2 20 20 3e 1f 60 e2 20 a9 8f 20 4b 20 20 2d
>1a4c18		1b e2 20 a5 27 c9 00 d0 25 c2 20 a5 25 30 12 d0
>1a4c28		04 a5 23 f0 13 a9 00 00 85 25 a9 01 00 85 23 80
>1a4c38		07 a9 ff ff 85 25 85 23 e2 20 20 3e 1f 60 08 c2
>1a4c48		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a4c58		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9
>1a4c68		8f 20 4b 20 20 2d 1b 20 03 05 e2 20 20 3e 1f 60
>1a4c78		e2 20 a9 8f 20 4b 20 20 2d 1b 20 71 06 20 75 5f
>1a4c88		e2 20 20 3e 1f 60 08 c2 20 48 a9 00 08 5b 68 28
>1a4c98		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>1a4ca8		e2 20 dc d4 08 e2 20 a9 8f 20 4b 20 20 2d 1b 20
>1a4cb8		71 06 20 a4 5f e2 20 20 3e 1f 60 08 c2 20 48 a9
>1a4cc8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a4cd8		ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f 20 4b
>1a4ce8		20 20 2d 1b 20 71 06 20 d3 5f e2 20 20 3e 1f 60
>1a4cf8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a4d08		08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 e2
>1a4d18		20 a9 8f 20 4b 20 20 2d 1b 20 71 06 20 1e 5e e2
>1a4d28		20 20 3e 1f 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4d38		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2
>1a4d48		20 dc d4 08 e2 20 a9 8f 20 4b 20 20 2d 1b 20 71
>1a4d58		06 20 01 60 e2 20 20 3e 1f 60 08 c2 20 48 a9 00
>1a4d68		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a4d78		00 20 7f 1c e2 20 dc d4 08 00 ea 60 08 0b 08 c2
>1a4d88		20 48 a9 00 08 5b 68 28 c2 30 c2 20 a9 00 00 85
>1a4d98		d9 e2 20 a9 16 85 db c2 30 a9 00 00 a0 00 00 97
>1a4da8		d9 a0 02 00 97 d9 a0 04 00 97 d9 20 14 1f 2b 28
>1a4db8		60 8b 08 c2 20 a9 00 00 85 1a a9 16 00 85 1c 20
>1a4dc8		14 1f 20 f3 21 28 ab 60 08 c2 20 64 55 a9 ff 7f
>1a4dd8		85 59 20 89 02 20 9f 20 29 ff 00 c9 00 00 f0 2c
>1a4de8		c9 81 00 f0 1a 20 5f 1f 20 8a 07 a5 23 85 55 20
>1a4df8		9f 20 29 ff 00 c9 00 00 f0 12 c9 81 00 d0 2a 20
>1a4e08		4b 20 20 5f 1f 20 8a 07 a5 23 85 59 a5 1c 48 a5
>1a4e18		1a 48 a5 02 48 a5 00 48 20 f0 16 68 85 00 68 85
>1a4e28		02 68 85 1a 68 85 1c 28 60 08 c2 20 48 a9 00 08
>1a4e38		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a4e48		20 7f 1c e2 20 dc d4 08 08 08 c2 20 48 a9 00 08
>1a4e58		5b 68 28 c2 20 64 e4 64 e7 e2 20 64 e6 64 e9 64
>1a4e68		ea c2 20 38 a5 d9 69 04 00 85 e1 e2 20 a5 db 69
>1a4e78		00 85 e3 28 60 c9 5f f0 1a c9 3a b0 04 c9 30 b0
>1a4e88		12 c9 5b b0 04 c9 41 b0 0a c9 7b b0 04 c9 61 b0
>1a4e98		02 18 60 38 60 08 e2 20 c2 10 a0 00 00 b7 0c f0
>1a4ea8		0a d7 e7 d0 13 c8 c0 08 00 d0 f2 b7 e7 20 08 04
>1a4eb8		20 7d 4e b0 03 28 38 60 28 18 60 08 e2 20 c2 10
>1a4ec8		a0 00 00 a2 00 00 b7 e7 f0 0b 20 08 04 9f 00 4e
>1a4ed8		00 c8 e8 80 f1 a9 00 9f 00 4e 00 c2 20 a9 00 4e
>1a4ee8		85 e7 e2 20 a9 00 85 e9 c2 20 a5 e4 85 08 d0 06
>1a4ef8		e2 20 a5 e6 f0 4d e2 20 a5 e6 85 0a a5 ea a0 00
>1a4f08		00 d7 08 d0 17 c2 20 18 a5 08 69 01 00 85 0c e2
>1a4f18		20 a5 0a 69 00 85 0e 20 9d 4e b0 2a a0 0d 00 c2
>1a4f28		20 b7 08 85 0c c8 c8 e2 20 b7 08 85 0e d0 06 c2
>1a4f38		20 a5 0c f0 0e c2 20 a5 0c 85 08 e2 20 a5 0e 85
>1a4f48		0a 80 b9 28 18 60 28 38 60 08 20 c3 4e b0 1f 08
>1a4f58		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08
>1a4f68		00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 c2 30
>1a4f78		a0 09 00 b7 08 85 23 c8 c8 b7 08 85 25 e2 20 a0
>1a4f88		00 00 b7 08 85 27 28 60 08 c2 20 18 a5 e1 69 10
>1a4f98		00 85 08 e2 20 a5 e3 69 00 85 0a c5 bc 90 27 c2
>1a4fa8		20 a5 08 c5 ba 90 1f 08 c2 20 48 a9 00 08 5b 68
>1a4fb8		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 7f
>1a4fc8		1c e2 20 dc d4 08 c2 20 a5 e1 85 c0 e2 20 a5 e3
>1a4fd8		85 c2 c2 20 a5 08 85 e1 e2 20 a5 0a 85 e3 28 60
>1a4fe8		08 e2 20 a5 27 c5 ea f0 33 a5 ea c9 00 d0 05 20
>1a4ff8		03 05 80 2f c9 01 d0 05 20 71 06 80 26 08 c2 20
>1a5008		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a5018		20 29 ff 00 20 7f 1c e2 20 dc d4 08 c9 02 d0 03
>1a5028		20 80 15 c2 10 20 90 4f c2 30 18 a5 c0 69 01 00
>1a5038		85 08 e2 20 a5 c2 69 00 85 0a a0 00 00 a9 00 97
>1a5048		08 c8 c0 08 00 d0 f8 a0 00 00 b7 e7 f0 10 20 08
>1a5058		04 20 7d 4e 90 08 97 08 c8 c0 08 00 d0 ec c2 20
>1a5068		a0 09 00 a5 23 97 c0 a5 25 c8 c8 97 c0 a5 e4 a0
>1a5078		0d 00 97 c0 c8 c8 e2 20 a5 e6 97 c0 c2 20 a5 c0
>1a5088		85 e4 e2 20 a5 c2 85 e6 e2 20 a0 00 00 a5 27 97
>1a5098		c0 c9 02 f0 02 28 60 c2 20 a5 23 85 c0 e2 20 a5
>1a50a8		25 85 c2 20 9c 11 20 b1 11 80 ea 08 c2 30 a5 e4
>1a50b8		d0 06 e2 20 a5 e6 f0 05 20 c3 4e b0 05 20 e8 4f
>1a50c8		80 4e e2 20 a5 27 c5 ea f0 33 a5 ea c9 00 d0 05
>1a50d8		20 03 05 80 2c c9 01 d0 05 20 71 06 80 23 08 c2
>1a50e8		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a50f8		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 c9 02 f0
>1a5108		11 c2 30 a0 09 00 a5 23 97 08 c8 c8 a5 25 97 08
>1a5118		28 60 20 80 15 a0 09 00 b7 08 85 c0 c8 c8 e2 20
>1a5128		b7 08 85 c2 20 9c 11 20 d0 11 e2 20 a5 27 c9 02
>1a5138		f0 02 80 cd c2 20 a5 23 85 c0 e2 20 a5 25 85 c2
>1a5148		20 9c 11 20 b1 11 80 b9 08 20 5f 1f e2 20 a7 00
>1a5158		20 94 03 90 42 c2 20 a5 00 85 e7 e2 20 a5 02 85
>1a5168		e9 20 3e 1f a7 00 f0 0d c9 24 f0 14 c9 25 f0 09
>1a5178		20 7d 4e b0 ec a9 01 80 0c 20 3e 1f a9 00 80 05
>1a5188		20 3e 1f a9 02 85 ea 20 9f 20 c9 8f d0 06 a5 ea
>1a5198		09 80 85 ea 28 38 60 28 18 60 08 c2 20 18 a5 23
>1a51a8		65 29 85 23 a5 25 65 2b 85 25 28 60 08 c2 20 38
>1a51b8		a5 23 e5 29 85 23 a5 25 e5 2b 85 25 28 60 08 c2
>1a51c8		20 3b 38 e9 0a 00 1b c2 30 a9 00 00 83 01 83 03
>1a51d8		83 05 83 07 83 09 a5 25 10 18 a9 00 80 83 01 a5
>1a51e8		25 49 ff ff 85 25 a5 23 49 ff ff 1a 85 23 d0 02
>1a51f8		e6 25 a5 2b 10 1a a3 01 49 00 80 83 01 a5 2b 49
>1a5208		ff ff 85 2b a5 29 49 ff ff 1a 85 29 d0 02 e6 2b
>1a5218		a5 25 f0 04 a5 2b d0 5a a5 23 8f 00 01 00 a5 29
>1a5228		8f 02 01 00 af 04 01 00 83 03 af 06 01 00 83 05
>1a5238		a5 25 8f 00 01 00 a5 29 8f 02 01 00 18 af 04 01
>1a5248		00 63 05 83 05 af 06 01 00 63 07 83 07 a5 23 8f
>1a5258		00 01 00 a5 2b 8f 02 01 00 18 af 04 01 00 63 05
>1a5268		83 05 af 06 01 00 63 07 83 07 a3 07 f0 23 a3 09
>1a5278		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0d
>1a5288		8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4
>1a5298		08 c2 30 a3 01 10 16 a3 05 49 ff ff 83 05 a3 03
>1a52a8		49 ff ff 1a 83 03 d0 05 a3 05 1a 83 05 a3 03 85
>1a52b8		23 a3 05 85 25 c2 20 3b 18 69 0a 00 1b 28 60 08
>1a52c8		c2 20 a5 23 c5 29 a5 25 e5 2b 50 03 49 00 80 30
>1a52d8		06 64 23 64 25 80 07 a9 ff ff 85 23 85 25 28 60
>1a52e8		08 c2 20 a5 23 c5 29 d0 0c a5 25 c5 2b d0 06 64
>1a52f8		23 64 25 80 16 a5 29 c5 23 a5 2b e5 25 50 03 49
>1a5308		00 80 10 eb a9 ff ff 85 23 85 25 28 60 08 c2 20
>1a5318		a5 2b c5 25 d0 0f a5 29 c5 23 d0 09 a9 ff ff 85
>1a5328		23 85 25 80 04 64 23 64 25 28 60 08 c2 20 a5 2b
>1a5338		c5 25 d0 0c a5 29 c5 23 d0 06 64 23 64 25 80 07
>1a5348		a9 ff ff 85 23 85 25 28 60 08 c2 20 a5 23 c5 29
>1a5358		d0 0f a5 25 c5 2b d0 09 a9 ff ff 85 23 85 25 80
>1a5368		13 a5 29 c5 23 a5 2b e5 25 50 03 49 00 80 30 e8
>1a5378		64 23 64 25 28 60 08 c2 20 a5 23 c5 29 d0 0f a5
>1a5388		25 c5 2b d0 09 a9 ff ff 85 23 85 25 80 13 a5 23
>1a5398		c5 29 a5 25 e5 2b 50 03 49 00 80 30 e8 64 23 64
>1a53a8		25 28 60 08 c2 20 8f 12 01 00 8a 8f 10 01 00 af
>1a53b8		16 01 00 aa af 14 01 00 28 60 08 e2 20 a9 03 8f
>1a53c8		00 e2 af a9 00 8f 01 e2 af c2 20 a5 23 8f 08 e2
>1a53d8		af a5 25 8f 0a e2 af a9 00 00 8f 0c e2 af a9 00
>1a53e8		01 8f 0e e2 af ea ea ea ea ea ea af 08 e2 af 85
>1a53f8		23 af 0a e2 af 85 25 a9 01 00 85 27 28 60 08 e2
>1a5408		20 a9 40 8f 00 e2 af 80 09 08 e2 20 a9 48 8f 00
>1a5418		e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f 08 e2 af
>1a5428		a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e
>1a5438		e2 af ea ea ea e2 20 af 06 e2 af 29 07 d0 10 c2
>1a5448		20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60 20
>1a5458		f2 54 80 f9 08 e2 20 a9 01 8f 01 e2 af a9 00 8f
>1a5468		00 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2
>1a5478		af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af ea ea ea
>1a5488		e2 20 af 05 e2 af 29 17 d0 10 c2 20 af 08 e2 af
>1a5498		85 23 af 0a e2 af 85 25 28 60 20 f2 54 80 f9 08
>1a54a8		e2 20 a9 00 8f 01 e2 af a9 00 8f 00 e2 af c2 20
>1a54b8		a5 23 8f 08 e2 af a5 25 8f 0a e2 af a5 29 8f 0c
>1a54c8		e2 af a5 2b 8f 0e e2 af ea ea ea e2 20 af 04 e2
>1a54d8		af 29 07 d0 10 c2 20 af 08 e2 af 85 23 af 0a e2
>1a54e8		af 85 25 28 60 20 f2 54 80 f9 e2 20 89 01 f0 20
>1a54f8		00 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0c 8f
>1a5508		d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08
>1a5518		89 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a5528		a9 0d 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20
>1a5538		dc d4 08 89 04 f0 1f 08 c2 20 48 a9 00 08 5b 68
>1a5548		28 e2 20 a9 0e 8f d3 08 00 c2 20 29 ff 00 20 7f
>1a5558		1c e2 20 dc d4 08 60 08 e2 20 a9 00 8f 01 e2 af
>1a5568		a9 02 8f 00 e2 af c2 20 a9 00 a0 8f 0c e2 af a9
>1a5578		00 00 8f 0e e2 af a5 23 8f 08 e2 af a5 25 8f 0a
>1a5588		e2 af ea ea ea e2 20 af 04 e2 af 89 07 f0 01 00
>1a5598		c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60
>1a55a8		08 e2 20 a9 01 8f 01 e2 af a9 02 8f 00 e2 af c2
>1a55b8		20 a9 00 a0 8f 0c e2 af a9 00 00 8f 0e e2 af a5
>1a55c8		23 8f 08 e2 af a5 25 8f 0a e2 af ea ea ea af 08
>1a55d8		e2 af 85 23 af 0a e2 af 85 25 28 60 08 c2 20 a5
>1a55e8		23 d0 0a a5 25 29 ff 7f d0 03 28 38 60 28 18 60
>1a55f8		08 e2 20 38 e9 30 20 2c 04 c2 20 29 ff 00 18 65
>1a5608		23 85 23 a5 25 69 00 00 85 25 28 60 08 e2 20 c9
>1a5618		30 90 04 c9 3a 90 1c c9 61 90 04 c9 67 90 0a c9
>1a5628		41 90 04 c9 47 90 07 80 31 38 e9 57 80 08 38 e9
>1a5638		37 80 03 38 e9 30 06 23 26 24 26 25 26 26 06 23
>1a5648		26 24 26 25 26 26 06 23 26 24 26 25 26 26 06 23
>1a5658		26 24 26 25 26 26 05 23 85 23 28 60 08 e2 20 c9
>1a5668		30 f0 06 c9 31 f0 0a 80 0f c2 20 06 23 26 25 80
>1a5678		07 c2 20 38 26 23 26 25 28 60 08 e2 30 a5 61 f0
>1a5688		0d aa a5 69 d0 15 a9 00 8f 01 e2 af 80 15 e2 20
>1a5698		a9 03 8f 01 e2 af ea ea ea 80 62 e2 20 a9 01 8f
>1a56a8		01 e2 af e2 20 a9 43 8f 00 e2 af c2 20 a9 00 10
>1a56b8		8f 08 e2 af a9 00 00 8f 0a e2 af c2 20 a9 00 a0
>1a56c8		8f 0c e2 af a9 00 00 8f 0e e2 af ea ea ea ca f0
>1a56d8		2c af 08 e2 af 8f 0c 08 00 af 0a e2 af 8f 0e 08
>1a56e8		00 e2 20 a9 42 8f 00 e2 af c2 20 af 0c 08 00 8f
>1a56f8		08 e2 af af 0e 08 00 8f 0a e2 af 80 be c2 20 af
>1a5708		08 e2 af 85 23 af 0a e2 af 85 25 e2 20 a9 01 85
>1a5718		27 28 60 08 c2 20 a5 5d 85 23 a5 5f 85 25 20 34
>1a5728		59 c2 20 a5 23 85 29 a5 25 85 2b c2 20 a5 59 85
>1a5738		23 a5 5b 85 25 20 5c 54 c2 20 a5 55 85 29 a5 57
>1a5748		85 2b 20 11 54 c2 20 a5 23 85 29 a5 25 85 2b 20
>1a5758		82 56 20 a7 54 c2 20 a5 65 f0 07 a5 25 09 00 80
>1a5768		85 25 e2 20 a9 01 85 27 28 60 5a 08 c2 30 64 23
>1a5778		64 25 64 55 64 57 64 65 64 59 64 5b a9 01 00 85
>1a5788		5d 64 5f 64 61 64 63 64 69 e2 20 a0 00 00 b7 00
>1a5798		c9 2b f0 33 c9 2d f0 2b c9 26 f0 3a 20 ad 03 90
>1a57a8		03 82 ac 00 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a57b8		a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20
>1a57c8		dc d4 08 a9 01 85 65 c8 b7 00 c9 26 f0 08 20 ad
>1a57d8		03 90 d1 82 7a 00 c8 b7 00 c9 68 f0 0e c9 48 f0
>1a57e8		0a c9 62 f0 4c c9 42 f0 48 80 b9 c8 b7 00 20 be
>1a57f8		03 b0 02 80 af 20 14 56 c8 b7 00 20 be 03 b0 f5
>1a5808		e2 20 a5 65 f0 11 c2 20 38 a9 00 00 e5 23 85 23
>1a5818		a9 00 00 e5 25 85 25 e2 20 a9 00 85 27 c2 20 18
>1a5828		98 65 00 85 00 a5 02 69 00 00 85 02 e2 20 28 7a
>1a5838		60 c8 b7 00 c9 30 f0 07 c9 31 f0 03 82 65 ff 20
>1a5848		64 56 c8 b7 00 c9 30 f0 f6 c9 31 f0 f2 82 b0 ff
>1a5858		20 f8 55 c8 b7 00 c9 2e f0 08 20 ad 03 b0 f1 82
>1a5868		9e ff c2 20 20 34 59 c2 20 a5 23 85 55 a5 25 85
>1a5878		57 64 23 64 25 e2 20 80 36 20 f8 55 c2 20 a5 5f
>1a5888		8f 00 01 00 a9 0a 00 8f 02 01 00 af 04 01 00 85
>1a5898		5f a5 5d 8f 00 01 00 a9 0a 00 8f 02 01 00 af 04
>1a58a8		01 00 85 5d af 06 01 00 18 65 5f 85 5f e2 20 c8
>1a58b8		b7 00 c9 65 f0 24 c9 45 f0 20 20 ad 03 b0 ba c2
>1a58c8		20 20 34 59 c2 20 a5 23 85 59 a5 25 85 5b 64 23
>1a58d8		64 25 20 1b 57 e2 20 82 43 ff c2 20 20 34 59 c2
>1a58e8		20 a5 23 85 59 a5 25 85 5b 64 23 64 25 e2 20 c8
>1a58f8		b7 00 c9 2b f0 10 c9 2d f0 08 20 ad 03 b0 12 82
>1a5908		a2 fe a9 01 85 69 c8 b7 00 20 ad 03 b0 03 82 93
>1a5918		fe 20 f8 55 c8 b7 00 20 ad 03 b0 f5 c2 20 a5 23
>1a5928		85 61 a5 25 85 63 20 1b 57 82 f1 fe 08 20 c2 53
>1a5938		28 60 08 c2 20 a9 31 5c 85 29 a9 1a 00 85 2b e2
>1a5948		20 a9 01 85 2d c2 20 20 0d 5a c9 ff ff d0 0c a9
>1a5958		00 00 8d 23 08 8d 25 08 82 a1 00 f4 00 00 f4 00
>1a5968		00 f4 00 00 e2 20 ad 26 08 29 80 83 01 ad 25 08
>1a5978		2a ad 26 08 2a 83 02 a9 00 83 06 ad 25 08 09 80
>1a5988		83 05 ad 24 08 83 04 ad 23 08 83 03 a3 02 c9 96
>1a5998		f0 3a 90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a59a8		a9 0d 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20
>1a59b8		dc d4 08 c2 20 a3 05 4a 83 05 a3 03 6a 83 03 e2
>1a59c8		20 a3 02 1a 83 02 c9 96 f0 02 80 e7 a3 01 f0 1b
>1a59d8		c2 20 a3 03 49 ff ff 18 69 01 00 8d 23 08 a3 05
>1a59e8		49 ff ff 69 00 00 8d 25 08 80 0c c2 20 a3 03 8d
>1a59f8		23 08 a3 05 8d 25 08 c2 20 68 68 68 e2 20 a9 00
>1a5a08		8d 27 08 28 60 da 08 c2 20 a5 25 48 a5 23 48 20
>1a5a18		06 54 20 e4 55 b0 11 a5 25 89 00 80 d0 05 a9 01
>1a5a28		00 80 08 a9 ff ff 80 03 a9 00 00 fa 86 23 fa 86
>1a5a38		25 28 fa 60 08 c2 30 20 0d 5a c9 ff ff d0 05 20
>1a5a48		df 04 80 03 20 f1 04 28 60 08 c2 30 20 0d 5a c9
>1a5a58		01 00 d0 05 20 df 04 80 03 20 f1 04 28 60 08 c2
>1a5a68		30 20 0d 5a c9 00 00 d0 05 20 df 04 80 03 20 f1
>1a5a78		04 28 60 08 c2 30 20 0d 5a c9 01 00 f0 05 20 df
>1a5a88		04 80 03 20 f1 04 28 60 08 c2 30 20 0d 5a c9 ff
>1a5a98		ff f0 05 20 df 04 80 03 20 f1 04 28 60 08 c2 30
>1a5aa8		20 0d 5a c9 00 00 f0 05 20 df 04 80 03 20 f1 04
>1a5ab8		28 60 08 e2 20 97 23 c8 a9 00 97 23 28 60 da 08
>1a5ac8		e2 20 c9 80 90 0a 48 a9 2d 20 ba 5a 68 49 ff 1a
>1a5ad8		c2 30 29 ff 00 c9 64 00 90 0e a2 64 00 20 ab 53
>1a5ae8		18 69 30 00 20 ba 5a 8a a2 0a 00 20 ab 53 18 69
>1a5af8		30 00 20 ba 5a 8a 18 69 30 00 20 ba 5a 28 fa 60
>1a5b08		08 e2 20 c2 10 a0 00 00 b7 23 f0 03 c8 80 f9 28
>1a5b18		60 08 e2 20 c2 10 f4 00 00 f4 00 00 f4 00 00 20
>1a5b28		e4 55 90 19 20 8e 13 e2 20 a0 00 00 a9 20 97 16
>1a5b38		c8 a9 30 97 16 c8 a9 00 97 16 82 ce 00 e2 20 a5
>1a5b48		26 10 08 29 7f 85 26 a9 01 83 01 c2 20 a9 00 00
>1a5b58		83 03 c2 20 af 2d 5c 1a 85 29 af 2f 5c 1a 85 2b
>1a5b68		20 0d 5a 89 00 80 d0 12 20 a8 55 a3 03 1a 83 03
>1a5b78		20 0d 5a c9 ff ff f0 12 80 ee 20 5f 55 a3 03 3a
>1a5b88		83 03 20 0d 5a c9 ff ff f0 f0 e2 30 a5 25 0a a5
>1a5b98		26 2a 83 05 38 a9 96 e3 05 aa f0 0f a5 25 09 80
>1a5ba8		85 25 46 25 66 24 66 23 ca d0 f7 c2 10 e2 20 64
>1a5bb8		26 a9 00 85 27 a3 01 f0 11 c2 20 38 a9 00 00 e5
>1a5bc8		23 85 23 a9 00 00 e5 25 85 25 20 ed 13 c2 20 a5
>1a5bd8		16 85 23 a5 18 85 25 20 08 5b e2 20 c8 a9 00 97
>1a5be8		23 88 88 b7 23 c8 97 23 c0 02 00 d0 f4 a9 2e 97
>1a5bf8		23 e2 20 18 a3 03 69 05 83 06 f0 19 20 08 5b a9
>1a5c08		45 20 ba 5a a3 06 20 c6 5a 80 0a c2 20 a5 16 85
>1a5c18		23 a5 18 85 25 e2 20 a9 02 85 27 c2 20 3b 18 69
>1a5c28		06 00 1b 28 60 00 50 c3 47 00 00 80 3f f3 04 b5
>1a5c38		3f f3 04 35 3f 5a e2 20 a9 48 8f 00 e2 af c2 20
>1a5c48		bd 00 00 8f 08 e2 af bd 02 00 8f 0a e2 af a0 04
>1a5c58		00 e8 e8 e8 e8 e2 20 a9 00 8f 01 e2 af c2 20 af
>1a5c68		23 08 00 8f 0c e2 af af 25 08 00 8f 0e e2 af ea
>1a5c78		ea ea af 08 e2 af 48 af 0a e2 af 8f 0a e2 af 68
>1a5c88		8f 08 e2 af e2 20 a9 02 8f 01 e2 af c2 20 bd 00
>1a5c98		00 8f 0c e2 af bd 02 00 8f 0e e2 af ea ea ea 88
>1a5ca8		f0 14 af 08 e2 af 48 af 0a e2 af 8f 0a e2 af 68
>1a5cb8		8f 08 e2 af 80 9b af 08 e2 af 8f 23 08 00 af 0a
>1a5cc8		e2 af 8f 25 08 00 7a 60 e2 20 a9 00 8f 00 e2 af
>1a5cd8		a9 00 8f 01 e2 af c2 20 a5 23 8f 08 e2 af 8f 0c
>1a5ce8		e2 af af 25 08 00 8f 0a e2 af 8f 0e e2 af ea ea
>1a5cf8		ea af 08 e2 af 85 23 af 0a e2 af 85 25 60 e2 20
>1a5d08		a9 00 8f 00 e2 af a9 01 8f 01 e2 af c2 20 a5 23
>1a5d18		8f 0c e2 af af 25 08 00 8f 0e e2 af af 4c 61 1a
>1a5d28		8f 08 e2 af af 4e 61 1a 8f 0a e2 af ea ea ea af
>1a5d38		08 e2 af 85 23 af 0a e2 af 85 25 60 a2 00 00 a5
>1a5d48		23 c5 29 a5 25 e5 2b 90 1e a5 23 8f 08 e2 af a5
>1a5d58		25 8f 0a e2 af ea ea ea af 08 e2 af 85 23 af 0a
>1a5d68		e2 af 85 25 e8 80 d8 60 e2 20 a5 26 10 09 29 7f
>1a5d78		85 26 a9 01 48 80 03 a9 00 48 a9 40 8f 00 e2 af
>1a5d88		a9 02 8f 01 e2 af c2 30 af 60 61 1a 85 29 8f 0c
>1a5d98		e2 af af 62 61 1a 85 2b 8f 0e e2 af 20 44 5d e2
>1a5da8		20 68 c2 20 f0 1e a5 23 8f 08 e2 af a5 25 8f 0a
>1a5db8		e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af 29
>1a5dc8		ff 7f 85 25 60 5a a2 00 00 a0 00 00 a5 23 df 64
>1a5dd8		61 1a a5 25 ff 66 61 1a 90 2c bf 60 61 1a 8f 08
>1a5de8		e2 af bf 62 61 1a 8f 0a e2 af a5 23 8f 0c e2 af
>1a5df8		a5 25 8f 0e e2 af ea ea ea af 08 e2 af 85 23 af
>1a5e08		0a e2 af 85 25 38 98 2a a8 e8 e8 e8 e8 e0 0c 00
>1a5e18		d0 ba 98 aa 7a 60 08 c2 30 48 da 20 70 5d fa 7a
>1a5e28		28 60 08 c2 30 48 da 20 d0 5c 8b e2 20 a9 1a 48
>1a5e38		ab c2 20 a2 00 61 20 3d 5c a9 01 00 8f 27 08 00
>1a5e48		ab fa 68 28 60 08 c2 30 48 da a5 23 85 29 a5 25
>1a5e58		85 2b 20 d0 5c 8b e2 20 a9 1a 48 ab c2 20 a2 14
>1a5e68		61 20 3d 5c ab 20 a7 54 fa 68 28 60 08 c2 30 48
>1a5e78		da a5 23 85 29 a5 25 85 2b 20 d0 5c 8b e2 20 a9
>1a5e88		1a 48 ab c2 20 a2 28 61 20 3d 5c ab 20 a7 54 fa
>1a5e98		68 28 60 08 c2 30 48 da e2 20 a9 40 8f 00 e2 af
>1a5ea8		a9 02 8f 01 e2 af c2 20 a5 23 8f 08 e2 af a5 25
>1a5eb8		8f 0a e2 af af 4c 61 1a 8f 0c e2 af af 4e 61 1a
>1a5ec8		8f 0e e2 af ea ea ea af 08 e2 af 85 0c af 0a e2
>1a5ed8		af 85 0e e2 20 a9 48 8f 00 e2 af c2 20 ea ea ea
>1a5ee8		af 08 e2 af 85 10 af 0a e2 af 85 12 e2 20 a9 01
>1a5ef8		8f 01 e2 af c2 20 a5 0c 8f 08 e2 af a5 0e 8f 0a
>1a5f08		e2 af a5 10 8f 0c e2 af a5 12 8f 0e e2 af ea ea
>1a5f18		ea af 08 e2 af 85 23 af 0a e2 af 85 25 e2 20 a9
>1a5f28		08 8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f
>1a5f38		08 e2 af a5 25 8f 0a e2 af ea ea ea af 08 e2 af
>1a5f48		85 29 af 0a e2 af 85 2b 20 d0 5c 8b e2 20 a9 1a
>1a5f58		48 ab c2 20 a2 3c 61 20 3d 5c a9 01 00 8f 27 08
>1a5f68		00 8f 27 08 00 20 a7 54 ab fa 68 28 60 08 c2 30
>1a5f78		48 da 20 70 5d 20 cd 5d da 8a 29 01 00 d0 05 20
>1a5f88		4d 5e 80 03 20 2a 5e fa 8a 29 04 00 f0 0a e2 20
>1a5f98		a5 26 09 80 85 26 c2 20 fa 68 28 60 08 c2 30 48
>1a5fa8		da 20 70 5d 20 cd 5d da 8a 29 01 00 d0 05 20 2a
>1a5fb8		5e 80 03 20 4d 5e fa 8a 29 02 00 f0 0a e2 20 a5
>1a5fc8		26 09 80 85 26 c2 20 fa 68 28 60 08 c2 30 48 da
>1a5fd8		20 70 5d 20 cd 5d 20 74 5e 8a 29 01 00 f0 03 20
>1a5fe8		06 5d 8a e2 20 4a 4a 69 00 29 01 f0 06 a5 26 09
>1a5ff8		80 85 26 c2 20 fa 68 28 60 08 c2 30 48 da 5a a5
>1a6008		25 10 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a6018		17 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>1a6028		d4 08 c2 30 a5 23 cf 4c 61 1a a5 25 cf 4e 61 1a
>1a6038		b0 04 20 06 5d 18 a9 00 00 a8 2a 48 e2 20 a9 00
>1a6048		8f 00 e2 af a9 01 8f 01 e2 af c2 20 af 50 61 1a
>1a6058		85 29 8f 0c e2 af af 52 61 1a 85 2b 8f 0e e2 af
>1a6068		20 44 5d 8a f0 07 0a 0a 0a 0a 0a 0a a8 af 54 61
>1a6078		1a 85 29 8f 0c e2 af af 56 61 1a 85 2b 8f 0e e2
>1a6088		af 20 44 5d 8a f0 0b 0a 0a 0a 0a 85 29 18 98 65
>1a6098		29 a8 af 58 61 1a 85 29 8f 0c e2 af af 5a 61 1a
>1a60a8		85 2b 8f 0e e2 af 20 44 5d 8a f0 09 0a 0a 85 29
>1a60b8		18 98 65 29 a8 af 5c 61 1a 85 29 8f 0c e2 af af
>1a60c8		5e 61 1a 85 2b 8f 0e e2 af 20 44 5d 86 29 18 98
>1a60d8		65 29 a8 20 9b 5e a5 23 85 29 a5 25 85 2b 98 85
>1a60e8		23 64 25 20 34 59 20 11 54 68 d0 07 a5 25 09 00
>1a60f8		80 85 25 7a fa 68 28 60 01 0d d0 37 61 0b b6 ba
>1a6108		ab aa 2a 3d 00 00 00 bf 00 00 80 3f 1d ef 38 36
>1a6118		01 0d 50 b9 89 88 08 3c ab aa 2a be 00 00 80 3f
>1a6128		a4 27 b3 3c d1 0d 5d 3d 89 88 08 3e ab aa aa 3e
>1a6138		00 00 80 3f 39 8e e3 3d 25 49 12 3e cd cc 4c 3e
>1a6148		ab aa aa 3e 00 00 80 3f c1 2c a1 6d 5f 97 07 4b
>1a6158		81 64 5a 42 54 f8 2d 40 db 0f c9 40 db 0f 49 40
>1a6168		db 0f c9 3f db 0f 49 3f 08 20 9c 11 c2 20 a9 01
>1a6178		00 85 23 a9 00 00 85 25 e2 20 af 00 4d 00 c2 20
>1a6188		29 ff 00 85 8f a8 a2 01 00 c2 20 bf 00 4d 00 85
>1a6198		29 a9 00 00 85 2b 20 74 26 e8 e8 88 d0 eb c2 20
>1a61a8		a9 04 00 85 29 a9 00 00 85 2b 20 74 26 e2 20 af
>1a61b8		00 4d 00 85 0c a9 00 85 0d c2 20 06 0c 38 a5 23
>1a61c8		65 0c 85 23 a5 25 69 00 00 85 25 d0 29 e2 20 a5
>1a61d8		ea 09 80 a6 23 20 60 0f e2 20 af 00 4d 00 87 c0
>1a61e8		a0 01 00 a2 00 00 e2 20 bf 01 4d 00 97 c0 e4 8f
>1a61f8		f0 23 e8 c8 80 f0 08 c2 20 48 a9 00 08 5b 68 28
>1a6208		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>1a6218		e2 20 dc d4 08 e2 20 38 a5 c0 67 c0 85 08 a5 c1
>1a6228		69 00 85 09 a5 c2 69 00 85 0a 64 0b c2 20 a0 05
>1a6238		00 b7 c3 85 0c e2 20 c8 c8 b7 c3 85 0e 64 0f e2
>1a6248		20 a9 00 87 08 c2 20 18 a5 08 69 01 00 85 08 a5
>1a6258		0a 69 00 00 85 0a c5 0e d0 e5 a5 08 c5 0c d0 df
>1a6268		28 60 08 c2 20 64 08 64 0a e2 20 af 00 4d 00 85
>1a6278		8f 64 90 a2 01 00 e2 20 a7 c0 c5 8f f0 1f 08 c2
>1a6288		20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00
>1a6298		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 c9 01 f0
>1a62a8		3a a0 01 00 e2 20 bf 00 4d 00 85 23 64 24 64 25
>1a62b8		64 26 b7 c0 85 29 64 2a 64 2b 64 2c a5 23 c5 29
>1a62c8		b0 68 20 74 26 c2 20 18 a5 08 65 23 85 08 a5 0a
>1a62d8		65 25 85 0a e8 e8 c8 c4 8f d0 c9 e2 20 18 bf 00
>1a62e8		4d 00 85 90 65 08 85 08 a5 09 69 00 85 09 c2 20
>1a62f8		a5 0a 69 00 00 85 0a c2 20 06 08 26 0a 06 08 26
>1a6308		0a e2 20 38 a5 08 65 8f 85 08 a5 09 69 00 85 09
>1a6318		c2 20 a5 0a 69 00 00 85 0a 18 a5 08 65 c0 85 08
>1a6328		e2 20 a5 0a 65 c2 85 0a 28 60 08 c2 20 48 a9 00
>1a6338		08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff
>1a6348		00 20 7f 1c e2 20 dc d4 08 08 20 9c 11 e2 20 a0
>1a6358		00 00 b7 c3 29 7f c5 27 d0 28 a5 27 48 c2 20 a5
>1a6368		25 48 a5 23 48 20 6a 62 68 85 23 68 85 25 e2 20
>1a6378		68 85 27 c2 20 a5 23 87 08 a0 02 00 a5 25 97 08
>1a6388		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>1a6398		8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4
>1a63a8		08 08 20 9c 11 f4 00 00 f4 00 00 e2 20 48 20 6a
>1a63b8		62 e2 20 68 c2 20 68 68 c2 20 a7 08 85 23 a0 02
>1a63c8		00 b7 08 85 25 e2 20 a0 00 00 b7 c3 29 7f 85 27
>1a63d8		28 60 da 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a63e8		30 a5 25 89 f0 ff d0 29 89 0f 00 d0 0c a5 23 89
>1a63f8		00 fc d0 05 20 87 43 80 2e a2 0a 00 46 25 66 23
>1a6408		ca d0 f9 20 87 43 e2 20 a9 4b 20 18 00 c2 20 80
>1a6418		16 a2 14 00 46 25 66 23 ca d0 f9 20 87 43 e2 20
>1a6428		a9 4d 20 18 00 c2 20 28 2b fa 60 0b 08 c2 30 a9
>1a6438		00 00 8f b6 08 00 8f b8 08 00 e2 20 20 9f 20 c9
>1a6448		00 f0 08 20 2d 1b 20 95 05 80 11 c2 20 a9 00 00
>1a6458		85 23 85 25 e2 20 a9 02 85 27 c2 20 20 94 65 22
>1a6468		08 11 00 b0 22 20 45 66 08 c2 20 48 a9 00 08 5b
>1a6478		68 28 e2 20 a9 10 8f d3 08 00 c2 20 29 ff 00 20
>1a6488		7f 1c e2 20 dc d4 08 20 89 02 08 c2 20 48 a9 20
>1a6498		03 5b 68 28 e2 20 a0 00 00 b7 18 d0 03 82 a9 00
>1a64a8		c9 e5 d0 03 82 96 00 a0 0b 00 b7 18 89 08 f0 03
>1a64b8		82 a9 00 89 02 f0 03 82 83 00 29 0f c9 0f d0 03
>1a64c8		82 7a 00 a0 00 00 b7 18 20 18 00 c8 c0 08 00 d0
>1a64d8		f5 a9 20 20 18 00 a0 08 00 b7 18 20 18 00 c8 c0
>1a64e8		0b 00 d0 f5 a9 09 20 18 00 a0 0b 00 b7 18 89 10
>1a64f8		d0 1e c2 20 a0 1c 00 b7 18 8f 23 08 00 c8 c8 b7
>1a6508		18 8f 25 08 00 e2 20 a9 00 8f 27 08 00 20 da 63
>1a6518		a9 09 20 18 00 a0 0b 00 b7 18 89 08 d0 1c 89 01
>1a6528		f0 05 a9 52 20 18 00 89 04 f0 05 a9 53 20 18 00
>1a6538		89 10 f0 05 a9 44 20 18 00 ea 20 89 02 20 a0 02
>1a6548		22 0c 11 00 90 03 82 41 ff 20 45 66 08 c2 20 48
>1a6558		a9 00 08 5b 68 28 20 83 1f 28 2b 60 08 c2 20 48
>1a6568		a9 20 03 5b 68 28 e2 20 29 0f c9 0f f0 cf a9 5b
>1a6578		20 18 00 a0 00 00 b7 18 c9 20 f0 09 20 18 00 c8
>1a6588		c0 08 00 d0 f1 a9 5d 20 18 00 80 ae 0b 08 08 c2
>1a6598		20 48 a9 20 03 5b 68 28 c2 30 a9 73 f2 85 20 a9
>1a65a8		1a 00 85 22 a0 00 00 e2 20 a9 00 97 20 c8 c0 1e
>1a65b8		00 d0 f8 c2 20 a9 73 f0 8f 81 f2 1a a9 1a 00 8f
>1a65c8		83 f2 1a af 23 08 00 8f 75 f2 1a af 25 08 00 8f
>1a65d8		77 f2 1a 28 2b 60 08 c2 30 20 5f 1f 20 2d 1b 20
>1a65e8		95 05 20 94 65 e2 20 a9 2c 85 37 20 80 20 b0 0f
>1a65f8		c2 20 a9 ff ff 8f 54 03 00 8f 56 03 00 80 17 20
>1a6608		3e 1f 20 2d 1b 20 03 05 c2 20 a5 23 8f 54 03 00
>1a6618		a5 25 8f 56 03 00 22 18 11 00 b0 1f 08 c2 20 48
>1a6628		a9 00 08 5b 68 28 e2 20 a9 11 8f d3 08 00 c2 20
>1a6638		29 ff 00 20 7f 1c e2 20 dc d4 08 28 60 8b 0b 08
>1a6648		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>1a6658		48 ab 68 28 e2 20 af 2e 03 00 85 23 a9 00 85 24
>1a6668		85 25 85 26 a9 00 85 27 85 ea a9 1a 85 e9 c2 20
>1a6678		a9 a8 66 85 e7 20 b3 50 e2 20 af 20 03 00 85 23
>1a6688		a9 00 85 24 85 25 85 26 a9 00 85 27 85 ea a9 1a
>1a6698		85 e9 c2 20 a9 b0 66 85 e7 20 b3 50 28 2b ab 60
>1a66a8		44 4f 53 53 54 41 54 00 42 49 4f 53 53 54 41 54
>1a66b8		00 08 c2 30 20 5f 1f 20 2d 1b 20 95 05 a5 23 8f
>1a66c8		60 03 00 a5 25 8f 62 03 00 a9 ff ff 8f 54 03 00
>1a66d8		8f 56 03 00 22 24 11 00 b0 25 20 7f 1c 20 45 66
>1a66e8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d3
>1a66f8		08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 20
>1a6708		7f 1c 28 60 08 c2 30 20 5f 1f 20 2d 1b 20 95 05
>1a6718		20 94 65 a9 00 00 8f 54 03 00 a9 01 00 8f 56 03
>1a6728		00 20 84 4d 22 18 11 00 b0 22 20 45 66 08 c2 20
>1a6738		48 a9 00 08 5b 68 28 e2 20 a9 11 8f d3 08 00 c2
>1a6748		20 29 ff 00 20 7f 1c e2 20 dc d4 08 20 45 66 c2
>1a6758		20 a2 12 00 18 bf 73 f2 1a 69 00 00 85 92 bf 75
>1a6768		f2 1a 69 01 00 85 94 e2 20 a9 00 87 92 c2 20 a9
>1a6778		00 00 85 7a a9 01 00 85 7c a2 00 00 e2 20 a7 7a
>1a6788		f0 2a c9 0d f0 12 c9 0a f0 04 9d 00 4f e8 c2 20
>1a6798		e6 7a d0 e8 e6 7c 80 e4 e2 20 a9 00 9d 00 4f 20
>1a67a8		ab 25 c2 20 e6 7a d0 d1 e6 7c 80 cd e0 00 00 f0
>1a67b8		0a e2 20 a9 00 9d 00 4f 20 ab 25 28 60 08 c2 30
>1a67c8		20 5f 1f 20 2d 1b 20 95 05 20 94 65 e2 20 a9 2c
>1a67d8		20 4b 20 c2 20 20 2d 1b 20 03 05 a5 23 8f 50 03
>1a67e8		00 a5 25 8f 52 03 00 e2 20 a9 2c c2 20 20 4b 20
>1a67f8		20 2d 1b 20 03 05 a5 23 8f 58 03 00 a5 25 8f 5a
>1a6808		03 00 22 1c 11 00 b0 22 20 45 66 08 c2 20 48 a9
>1a6818		00 08 5b 68 28 e2 20 a9 12 8f d3 08 00 c2 20 29
>1a6828		ff 00 20 7f 1c e2 20 dc d4 08 20 45 66 28 60 da
>1a6838		5a 08 a2 00 00 a0 00 00 e2 20 b7 23 9d 00 04 f0
>1a6848		04 e8 c8 80 f5 28 7a fa 60 08 c2 30 20 5f 1f 20
>1a6858		2d 1b 20 95 05 20 94 65 a9 00 00 85 a6 e2 20 a9
>1a6868		01 85 a8 a9 20 85 b4 c2 20 a9 00 00 85 ab a9 ff
>1a6878		ff 85 a9 c2 20 a9 00 00 85 55 85 57 a9 ff ff 85
>1a6888		59 a9 ff 7f 85 5b 20 f0 16 e2 20 a9 80 85 b4 c2
>1a6898		20 c6 ab 18 a9 00 00 8f 50 03 00 65 ab 8f 58 03
>1a68a8		00 a9 01 00 8f 52 03 00 69 00 00 8f 5a 03 00 22
>1a68b8		1c 11 00 b0 22 20 45 66 08 c2 20 48 a9 00 08 5b
>1a68c8		68 28 e2 20 a9 12 8f d3 08 00 c2 20 29 ff 00 20
>1a68d8		7f 1c e2 20 dc d4 08 20 45 66 28 60 08 c2 30 20
>1a68e8		5f 1f 20 2d 1b 20 95 05 20 37 68 22 04 11 00 b0
>1a68f8		22 20 45 66 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a6908		a9 13 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20
>1a6918		dc d4 08 20 45 66 28 60 da 08 e2 20 c9 61 90 08
>1a6928		c9 7b b0 04 29 df 80 13 c9 20 90 13 a2 00 00 df
>1a6938		4b 69 1a f0 0a e8 e0 0f 00 d0 f4 28 38 fa 6b 28
>1a6948		18 fa 6b 2a 2b 2c 2f 3a 3b 3c 3d 3e 3f 5c 5b 5d
>1a6958		7c 22 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20
>1a6968		2d 1b 20 95 05 20 37 68 22 10 11 00 b0 22 20 45
>1a6978		66 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 14 8f
>1a6988		d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08
>1a6998		e2 20 a9 2c 20 4b 20 c2 20 20 2d 1b 20 95 05 ad
>1a69a8		38 03 85 08 ad 3a 03 85 0a e2 20 a2 00 00 a9 20
>1a69b8		95 7e e8 e0 0b 00 d0 f8 a2 00 00 a0 00 00 b7 23
>1a69c8		f0 76 c9 2e f0 39 22 20 69 1a b0 1f 08 c2 20 48
>1a69d8		a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20
>1a69e8		29 ff 00 20 7f 1c e2 20 dc d4 08 95 7e c8 e8 c0
>1a69f8		08 00 d0 ca b7 23 f0 40 c9 2e f0 03 c8 80 f5 c8
>1a6a08		a2 08 00 b7 23 f0 31 22 20 69 1a b0 22 20 45 66
>1a6a18		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>1a6a28		08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 95
>1a6a38		7e c8 e8 c0 0c 00 d0 cb a2 00 00 a0 00 00 b5 7e
>1a6a48		97 08 e8 c8 c0 0b 00 d0 f5 22 14 11 00 b0 22 20
>1a6a58		45 66 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 15
>1a6a68		8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4
>1a6a78		08 20 45 66 28 60 08 08 c2 20 48 a9 00 08 5b 68
>1a6a88		28 c2 30 20 2d 1b 20 95 05 a5 23 8f 64 03 00 a5
>1a6a98		25 8f 66 03 00 e2 20 a9 2c 20 4b 20 c2 20 20 2d
>1a6aa8		1b 20 95 05 a5 23 8f 68 03 00 a5 25 8f 6a 03 00
>1a6ab8		22 30 11 00 b0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a6ac8		e2 20 a9 16 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>1a6ad8		e2 20 dc d4 08 28 60 5c 9f 84 1a 5c f0 82 1a 5c
>1a6ae8		a0 84 1a 5c 1c 74 1a 5c 79 74 1a 5c ac 73 1a 5c
>1a6af8		32 73 1a 5c af 78 1a 5c 9d 6f 1a 5c ca 72 1a 5c
>1a6b08		85 72 1a 5c 0f 72 1a 5c ae 83 1a 5c ab 70 1a 5c
>1a6b18		fe 6e 1a 5c 29 84 1a 5c d9 6f 1a 5c a2 84 1a 5c
>1a6b28		9b 84 1a 5c c8 71 1a 5c a3 84 1a 18 fb c2 20 a9
>1a6b38		ff fe 1b 58 5c 40 6b 1a c2 30 22 fe 6e 1a 20 08
>1a6b48		00 20 0c 00 8b e2 20 a9 00 48 ab a2 00 4f 20 17
>1a6b58		04 ab 22 e3 6a 1a 22 eb 6a 1a 80 e2 08 8b e2 20
>1a6b68		a9 1a 48 ab c2 10 a2 77 6b 20 16 03 ab 28 6b 41
>1a6b78		20 3c 73 74 61 72 74 3e 20 3c 61 73 73 65 6d 62
>1a6b88		6c 79 3e 0d 20 20 41 73 73 65 6d 62 6c 65 20 61
>1a6b98		20 70 72 6f 67 72 61 6d 0d 0d 43 20 3c 73 74 61
>1a6ba8		72 74 31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c
>1a6bb8		65 6e 20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d
>1a6bc8		0d 20 20 43 6f 6d 70 61 72 65 20 74 6f 20 73 65
>1a6bd8		63 74 69 6f 6e 73 20 6f 66 20 6d 65 6d 6f 72 79
>1a6be8		0d 0d 44 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64
>1a6bf8		5d 0d 20 20 44 69 73 61 73 73 65 6d 62 6c 65 20
>1a6c08		61 20 70 72 6f 67 72 61 6d 0d 0d 46 20 3c 73 74
>1a6c18		61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65
>1a6c28		3e 0d 20 20 46 69 6c 6c 20 61 20 62 6c 6f 63 6b
>1a6c38		20 6f 66 20 6d 65 6d 6f 72 79 20 77 69 74 68 20
>1a6c48		61 20 62 79 74 65 0d 0d 47 20 5b 61 64 64 72 65
>1a6c58		73 73 5d 0d 20 20 53 74 61 72 74 20 65 78 65 63
>1a6c68		75 74 69 6f 6e 20 61 74 20 61 20 6c 6f 63 61 74
>1a6c78		69 6f 6e 0d 0d 4a 20 5b 61 64 64 72 65 73 73 5d
>1a6c88		20 2d 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63
>1a6c98		61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d
>1a6ca8		20 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63 61
>1a6cb8		74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>1a6cc8		48 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20
>1a6cd8		3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 0d
>1a6ce8		20 20 48 75 6e 74 20 66 6f 72 20 76 61 6c 75 65
>1a6cf8		73 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 4c 20 20
>1a6d08		20 20 20 4c 4f 41 44 20 20 20 20 20 20 20 20 20
>1a6d18		22 46 69 6c 65 22 20 5b 64 65 73 74 69 6e 61 74
>1a6d28		69 6f 6e 5d 0d 4d 20 3c 73 74 61 72 74 3e 20 5b
>1a6d38		65 6e 64 5d 0d 20 20 44 75 6d 70 20 74 68 65 20
>1a6d48		76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79 0d
>1a6d58		0d 52 20 2d 20 44 69 73 70 6c 61 79 20 74 68 65
>1a6d68		20 76 61 6c 75 65 73 20 6f 66 20 74 68 65 20 72
>1a6d78		65 67 69 73 74 65 72 73 0d 0d 3b 20 3c 50 43 3e
>1a6d88		20 3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50
>1a6d98		3e 20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56
>1a6da8		4d 58 44 49 5a 43 3e 0d 20 20 43 68 61 6e 67 65
>1a6db8		20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66
>1a6dc8		20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>1a6dd8		53 20 20 20 20 20 53 41 56 45 20 20 20 20 20 20
>1a6de8		20 20 20 22 46 69 6c 65 22 20 3c 73 74 61 72 74
>1a6df8		3e 20 3c 65 6e 64 3e 0d 54 20 3c 73 74 61 72 74
>1a6e08		3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61
>1a6e18		74 69 6f 6e 3e 0d 20 20 54 72 61 6e 73 66 65 72
>1a6e28		20 28 63 6f 70 79 29 20 64 61 74 61 20 77 69 74
>1a6e38		68 69 6e 20 6d 65 6d 6f 72 79 0d 0d 57 20 3c 62
>1a6e48		79 74 65 3e 0d 20 20 53 65 74 20 74 68 65 20 72
>1a6e58		65 67 69 73 74 65 72 20 77 69 64 74 68 20 66 6c
>1a6e68		61 67 73 20 66 6f 72 20 74 68 65 20 64 69 73 61
>1a6e78		73 73 65 6d 62 6c 65 72 0d 0d 58 20 2d 20 52 65
>1a6e88		74 75 72 6e 20 74 6f 20 42 41 53 49 43 0d 0d 3e
>1a6e98		20 3c 73 74 61 72 74 3e 20 3c 62 79 74 65 3e 20
>1a6ea8		5b 62 79 74 65 5d 2e 2e 2e 0d 20 20 45 64 69 74
>1a6eb8		20 64 61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d
>1a6ec8		0d 3f 20 2d 20 44 69 73 70 6c 61 79 20 61 20 73
>1a6ed8		68 6f 72 74 20 68 65 6c 70 20 73 63 72 65 65 6e
>1a6ee8		0d 0d 00 08 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>1a6ef8		a5 0d 85 4e 28 6b 20 e4 00 08 e2 20 48 a9 1a 48
>1a6f08		ab 68 28 a2 e0 84 20 16 03 e2 20 a9 3b 20 18 00
>1a6f18		a9 20 20 18 00 c2 30 08 e2 20 48 a9 00 48 ab 68
>1a6f28		28 a0 03 00 a2 42 02 20 99 02 c2 20 a9 20 00 20
>1a6f38		18 00 af 44 02 00 20 26 03 a9 20 00 20 18 00 af
>1a6f48		46 02 00 20 26 03 a9 20 00 20 18 00 af 48 02 00
>1a6f58		20 26 03 a9 20 00 20 18 00 af 4a 02 00 20 26 03
>1a6f68		a9 20 00 20 18 00 af 4e 02 00 20 40 03 a9 20 00
>1a6f78		20 18 00 20 18 00 af 4c 02 00 20 26 03 a9 20 00
>1a6f88		20 18 00 08 e2 20 ad 4f 02 22 f9 81 1a 28 20 89
>1a6f98		02 20 89 02 6b 08 0b 08 c2 20 48 a9 48 08 5b 68
>1a6fa8		28 e2 20 a5 15 87 0d e2 20 a5 0f c5 13 d0 0e c2
>1a6fb8		20 a5 0d c5 11 d0 06 20 89 02 2b 28 6b c2 20 18
>1a6fc8		a5 0d 69 01 00 85 0d e2 20 a5 0e 69 00 85 0e 80
>1a6fd8		d0 08 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5
>1a6fe8		0f c5 17 90 45 c2 20 a5 0d c5 15 90 3d e2 20 a7
>1a6ff8		0d 87 15 a5 0f c5 13 d0 0b c2 20 a5 0d c5 11 d0
>1a7008		03 4c 90 70 c2 20 18 a5 0d 69 01 00 85 0d e2 20
>1a7018		a5 0e 69 00 85 0e c2 20 18 a5 15 69 01 00 85 15
>1a7028		e2 20 a5 16 69 00 85 16 80 c3 c2 20 38 a5 11 e5
>1a7038		0d 85 19 e2 20 a5 13 e5 0f 85 1b c2 20 18 a5 19
>1a7048		65 15 85 15 e2 20 a5 1b 65 17 85 17 e2 20 a7 11
>1a7058		87 15 a5 13 c5 0f d0 0a c2 20 a5 11 c5 0d d0 02
>1a7068		80 26 c2 20 38 a5 11 e9 01 00 85 11 e2 20 a5 12
>1a7078		e9 00 85 12 c2 20 38 a5 15 e9 01 00 85 15 e2 20
>1a7088		a5 16 e9 00 85 16 80 c4 20 89 02 2b 28 6b 08 e2
>1a7098		20 c9 21 90 0b c9 7f 90 04 c9 a0 90 03 28 38 6b
>1a70a8		28 18 6b 08 8b 0b 08 c2 20 48 a9 48 08 5b 68 28
>1a70b8		e2 20 a9 00 8f b6 08 00 a5 31 c9 02 b0 16 c9 01
>1a70c8		90 20 c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f
>1a70d8		69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34
>1a70e8		80 12 c2 20 18 a5 32 69 00 01 85 11 e2 20 a5 34
>1a70f8		69 00 85 13 e2 20 a0 00 00 c2 20 a5 32 85 19 e2
>1a7108		20 a5 34 85 1b e2 20 a7 19 22 96 70 1a b0 02 a9
>1a7118		3f 99 7e 08 c2 20 18 a5 19 69 01 00 85 19 e2 20
>1a7128		a5 1b 69 00 85 1b c8 c0 08 00 90 db a9 00 99 7e
>1a7138		08 a9 3e 20 18 00 a9 20 20 18 00 e2 20 a5 34 20
>1a7148		40 03 a9 3a 20 18 00 c2 20 a5 32 20 26 03 c2 20
>1a7158		a9 08 00 85 47 e2 20 a9 20 20 18 00 a7 32 20 40
>1a7168		03 22 d8 81 1a e2 20 c6 47 d0 ea a9 20 20 18 00
>1a7178		a9 20 20 18 00 08 e2 20 48 a9 00 48 ab 68 28 a2
>1a7188		7e 08 20 16 03 20 89 02 20 a0 02 a5 34 c5 13 90
>1a7198		0f c2 20 a5 32 c5 11 90 07 20 89 02 2b ab 28 6b
>1a71a8		4c fc 70 08 8d 92 08 e2 20 bd 00 00 99 00 00 ad
>1a71b8		92 08 f0 0a c8 e8 e8 e8 e8 ce 92 08 80 eb 28 6b
>1a71c8		08 0b 8b 08 c2 20 48 a9 48 08 5b 68 28 08 e2 20
>1a71d8		48 a9 00 48 ab 68 28 c2 30 a5 0d 85 32 a5 0f 85
>1a71e8		34 e2 20 a5 31 3a 85 47 a2 59 08 a0 7e 08 22 ab
>1a71f8		71 1a a0 00 00 b9 7e 08 87 32 22 d8 81 1a c8 c4
>1a7208		47 d0 f2 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 48
>1a7218		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20
>1a7228		c2 10 a5 31 3a 3a 85 47 a2 5d 08 a0 7e 08 22 ab
>1a7238		71 1a c2 20 a5 0d 85 32 a5 0f 85 34 c2 20 a5 34
>1a7248		c5 13 d0 06 a5 32 c5 11 f0 2c e2 20 a0 00 00 b7
>1a7258		32 d9 7e 08 d0 1a c8 c4 47 d0 f4 c2 20 a5 32 85
>1a7268		4a a5 34 85 4c 22 82 7c 1a e2 20 a9 20 20 18 00
>1a7278		22 d8 81 1a 80 c6 20 89 02 ab 2b 28 6b 08 c2 20
>1a7288		48 a9 48 08 5b 68 28 e2 20 a5 31 f0 0e c2 30 a5
>1a7298		0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46 02 00 aa
>1a72a8		af 48 02 00 a8 af 4a 02 00 1b af 4c 02 00 5b e2
>1a72b8		20 a9 1a 48 a9 72 48 a9 c5 48 4c fc 72 ea 5c 04
>1a72c8		00 1a 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31
>1a72d8		f0 c9 c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00
>1a72e8		af 46 02 00 aa af 48 02 00 a8 af 4a 02 00 1b af
>1a72f8		4c 02 00 5b e2 20 af 4e 02 00 48 ab a9 5c 8f a2
>1a7308		08 00 af 42 02 00 8f a5 08 00 af 41 02 00 8f a4
>1a7318		08 00 af 40 02 00 8f a3 08 00 af 4f 02 00 48 c2
>1a7328		20 af 44 02 00 28 5c a2 08 00 08 0b 8b 08 e2 20
>1a7338		48 a9 1a 48 ab 68 28 08 c2 20 48 a9 48 08 5b 68
>1a7348		28 c2 10 e2 20 a5 31 c9 02 f0 0c c9 03 d0 11 c2
>1a7358		20 a5 15 85 47 80 11 c2 20 a9 01 00 85 47 80 08
>1a7368		a2 a4 84 20 16 03 80 35 a5 0d 85 4a a5 0f 85 4c
>1a7378		a0 00 00 e2 20 a7 4a d7 11 f0 09 22 82 7c 1a a9
>1a7388		20 20 18 00 c2 20 18 a5 4a 69 01 00 85 4a a5 4c
>1a7398		69 00 00 85 4c c8 c4 47 d0 d9 20 89 02 20 89 02
>1a73a8		ab 2b 28 6b 08 0b 8b 08 e2 20 48 a9 00 48 ab 68
>1a73b8		28 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0
>1a73c8		4f a6 0d 8e 40 02 a6 0f 8e 42 02 c9 01 f0 41 a6
>1a73d8		11 8e 44 02 c9 02 f0 38 a6 15 8e 46 02 c9 03 f0
>1a73e8		2f a6 19 8e 48 02 c9 04 f0 26 a6 1d 8e 4a 02 c9
>1a73f8		05 f0 1d e2 10 a6 21 8e 4e 02 c9 06 f0 12 c2 10
>1a7408		a6 25 8e 4c 02 c9 07 f0 07 e2 10 a6 29 8e 4f 02
>1a7418		ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b 68
>1a7428		28 e2 20 c2 10 a2 00 00 bf 11 85 1a f0 18 c7 08
>1a7438		f0 03 e8 80 f3 c2 20 8a 0a aa bf 52 74 1a 8f 2f
>1a7448		08 00 22 76 74 1a ab 2b 28 6b ef 6a f7 6a fb 6a
>1a7458		ff 6a 03 6b 07 6b 0b 6b 0f 6b 13 6b 17 6b f3 6a
>1a7468		1b 6b 1f 6b 23 6b eb 6e 27 6b 2b 6b 64 6b 6c 2f
>1a7478		08 08 8b 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>1a7488		a5 31 c9 02 b0 03 4c 1f 76 c2 20 a5 0d 85 32 a5
>1a7498		0f 85 34 c2 20 22 21 78 1a c9 ff ff f0 10 85 54
>1a74a8		e2 20 a5 31 c9 03 f0 36 a9 13 85 4f 80 4c 20 89
>1a74b8		02 08 e2 20 48 a9 1a 48 ab 68 28 c2 10 a2 56 76
>1a74c8		20 16 03 4c 1f 76 20 89 02 08 e2 20 48 a9 1a 48
>1a74d8		ab 68 28 c2 10 a2 65 76 20 16 03 4c 1f 76 e2 20
>1a74e8		22 57 78 1a c9 ff f0 de 85 4f c9 03 f0 62 c9 0b
>1a74f8		f0 5e c9 13 f0 04 c9 08 f0 00 22 4f 77 1a b0 03
>1a7508		4c e8 75 87 32 22 d8 81 1a 08 e2 20 48 a9 00 48
>1a7518		ab 68 28 c2 20 a5 32 85 56 a5 34 85 58 e2 20 a5
>1a7528		4f c9 12 f0 6c c9 16 f0 68 c9 14 f0 7c 29 3f c9
>1a7538		02 d0 03 4c 16 76 c2 20 29 ff 00 aa e2 20 bf 1e
>1a7548		81 1a c9 03 f0 57 c9 02 f0 5f c9 01 f0 67 80 71
>1a7558		c2 20 a5 54 c9 96 7d f0 26 c9 fa 7d f0 2a c9 7a
>1a7568		7d f0 1c c9 7e 7d f0 17 c9 86 7d f0 12 c9 6e 7d
>1a7578		f0 0d c9 82 7d f0 08 c9 6a 7d f0 03 4c 02 75 e2
>1a7588		20 a9 12 85 4f 4c 02 75 e2 20 a9 16 85 4f 4c 02
>1a7598		75 22 92 76 1a 90 60 c9 02 f0 0e 80 18 a0 02 00
>1a75a8		b9 98 08 97 56 22 d8 81 1a a0 01 00 b9 98 08 97
>1a75b8		56 22 d8 81 1a a0 00 00 b9 98 08 97 56 22 d8 81
>1a75c8		1a e2 20 a9 41 20 18 00 a9 20 20 18 00 a6 32 86
>1a75d8		4a a6 34 86 4c 22 82 7c 1a a9 20 20 18 00 80 37
>1a75e8		20 89 02 08 e2 20 48 a9 1a 48 ab 68 28 c2 10 a2
>1a75f8		23 76 20 16 03 80 20 20 89 02 08 e2 20 48 a9 1a
>1a7608		48 ab 68 28 c2 10 a2 73 76 20 16 03 80 09 a5 4f
>1a7618		29 c0 d0 95 4c bd 75 2b ab 28 6b 41 64 64 72 65
>1a7628		73 73 69 6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64
>1a7638		65 66 69 6e 65 64 20 66 6f 72 20 74 68 61 74 20
>1a7648		69 6e 73 74 72 75 63 74 69 6f 6e 2e 0d 00 42 61
>1a7658		64 20 6d 6e 65 6d 6f 6e 69 63 2e 0d 00 42 61 64
>1a7668		20 6f 70 65 72 61 6e 64 2e 0d 00 52 65 6c 61 74
>1a7678		69 76 65 20 6f 66 66 73 65 74 20 69 73 20 74 6f
>1a7688		6f 20 6c 61 72 67 65 2e 0d 00 08 0b 08 c2 20 48
>1a7698		a9 48 08 5b 68 28 e2 20 a5 4f c9 12 f0 0a c2 20
>1a76a8		18 a5 32 69 02 00 80 08 c2 20 18 a5 32 69 01 00
>1a76b8		85 4a a5 34 69 00 00 85 4c 38 a5 50 e5 4a 85 50
>1a76c8		a5 52 e5 4c 85 52 e2 20 a5 4f c9 16 f0 1e a5 50
>1a76d8		30 0c a5 51 d0 2a a5 52 d0 26 a9 01 80 26 a5 51
>1a76e8		c9 ff d0 1c a5 52 c9 ff d0 16 80 18 a5 51 30 06
>1a76f8		a5 52 d0 0c 80 0e a5 52 c9 ff d0 04 a9 02 80 04
>1a7708		2b 28 18 6b 2b 28 38 6b 08 0b c2 10 da 08 c2 20
>1a7718		48 a9 48 08 5b 68 28 e2 20 a2 00 00 df 00 d0 1a
>1a7728		f0 08 e8 e0 10 00 f0 1b 80 f2 c2 20 06 50 26 52
>1a7738		06 50 26 52 06 50 26 52 06 50 26 52 e2 20 8a 05
>1a7748		50 85 50 fa 2b 28 6b 0b 8b 08 c2 20 48 a9 48 08
>1a7758		5b 68 28 08 e2 20 48 a9 1a 48 ab 68 28 e2 20 a5
>1a7768		4f 29 3f 85 4a c2 30 a2 00 00 a0 00 00 bd 1c 7e
>1a7778		f0 1b c5 54 d0 0d e2 20 b9 1e 80 29 3f c5 4a f0
>1a7788		07 c2 20 e8 e8 c8 80 e5 98 38 ab 2b 6b 18 ab 2b
>1a7798		6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 c2
>1a77a8		10 a0 00 00 64 50 64 52 b7 03 f0 11 c9 64 f0 19
>1a77b8		48 b7 36 85 4a 68 c5 4a d0 0b c8 80 eb b7 36 d0
>1a77c8		04 2b 28 38 6b 2b 28 18 6b e2 20 b7 36 c9 3a b0
>1a77d8		04 c9 30 b0 14 c9 47 b0 04 c9 41 b0 0c c9 67 b0
>1a77e8		e4 c9 61 b0 02 80 de 29 df 22 10 77 1a 80 cb 0b
>1a77f8		08 c2 20 48 a9 48 08 5b 68 28 a0 00 00 e2 20 b7
>1a7808		03 f0 03 c8 80 f9 c2 20 c8 5a 68 18 65 03 85 03
>1a7818		a5 05 69 00 00 85 05 2b 6b 0b 08 c2 20 48 a9 48
>1a7828		08 5b 68 28 c2 20 a5 11 85 36 a5 13 85 38 a9 aa
>1a7838		7c 85 03 a9 1a 00 85 05 22 99 77 1a b0 0d 22 f7
>1a7848		77 1a a7 03 d0 f2 a9 ff ff 80 02 a5 03 2b 6b 08
>1a7858		0b 08 c2 20 48 a9 48 08 5b 68 28 c2 30 a5 15 85
>1a7868		36 a5 17 85 38 a9 36 81 85 03 a9 1a 00 85 05 22
>1a7878		99 77 1a b0 22 22 f7 77 1a c2 20 18 a5 03 69 01
>1a7888		00 85 03 a5 05 69 00 00 85 05 e2 20 a7 03 d0 df
>1a7898		c2 20 a9 ff ff 80 0d 22 f7 77 1a e2 20 a7 03 c2
>1a78a8		20 29 ff 00 2b 28 6b 08 8b 0b 08 c2 20 48 a9 48
>1a78b8		08 5b 68 28 e2 20 a9 00 8f b6 08 00 a5 31 c9 02
>1a78c8		b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11
>1a78d8		e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20
>1a78e8		a5 0f 85 34 80 12 c2 20 18 a5 32 69 00 01 85 11
>1a78f8		e2 20 a5 34 69 00 85 13 22 1b 79 1a e2 20 a5 34
>1a7908		c5 13 90 f4 c2 20 a5 32 c5 11 90 ec 20 89 02 2b
>1a7918		ab 28 6b 08 0b e2 20 a9 41 20 18 00 a9 20 20 18
>1a7928		00 08 c2 20 48 a9 7a 08 5b 68 28 c2 20 a5 00 85
>1a7938		18 e2 20 a5 02 85 1a 22 82 7c 1a a9 20 20 18 00
>1a7948		c2 20 18 a5 00 69 01 00 85 18 e2 20 a5 02 69 00
>1a7958		85 1a e2 20 c2 10 a7 00 c9 c2 d0 0b 48 a7 18 49
>1a7968		ff 2f 96 08 00 80 0b c9 e2 d0 0c 48 a7 18 0f 96
>1a7978		08 00 8f 96 08 00 68 c2 20 29 ff 00 0a aa bf 1c
>1a7988		7e 1a aa 22 fc 7b 1a e2 20 a7 00 aa bf 1e 80 1a
>1a7998		22 d8 81 1a 22 a9 79 1a 20 89 02 20 a0 02 2b 28
>1a79a8		6b 08 e2 20 48 29 3f 0a c2 10 aa 68 7c b7 79 e7
>1a79b8		79 02 7a 09 7a 2e 7a 35 7a 50 7a 72 7a 83 7a c0
>1a79c8		7a c8 7a d9 7a ea 7a f1 7a 16 7b 43 7b af 7a 94
>1a79d8		7a 61 7a 36 7b 40 7b 54 7b 83 7b 31 7b 94 7b a9
>1a79e8		28 20 18 00 22 ab 7b 1a a9 2c 20 18 00 a9 58 20
>1a79f8		18 00 a9 29 20 18 00 4c a5 7b 22 ab 7b 1a 4c a5
>1a7a08		7b e2 20 48 a9 23 20 18 00 68 29 c0 c9 00 f0 0f
>1a7a18		4a 4a 2f 96 08 00 d0 07 22 b5 7b 1a 4c a5 7b 22
>1a7a28		ab 7b 1a 4c a5 7b 22 b5 7b 1a 4c a5 7b a9 28 20
>1a7a38		18 00 22 ab 7b 1a a9 29 20 18 00 a9 2c 20 18 00
>1a7a48		a9 59 20 18 00 4c a5 7b 22 ab 7b 1a a9 2c 20 18
>1a7a58		00 a9 58 20 18 00 4c a5 7b 22 ab 7b 1a a9 2c 20
>1a7a68		18 00 a9 59 20 18 00 4c a5 7b 22 b5 7b 1a a9 2c
>1a7a78		20 18 00 a9 59 20 18 00 4c a5 7b 22 b5 7b 1a a9
>1a7a88		2c 20 18 00 a9 58 20 18 00 4c a5 7b a9 28 20 18
>1a7a98		00 22 b5 7b 1a a9 2c 20 18 00 a9 58 20 18 00 a9
>1a7aa8		29 20 18 00 4c a5 7b a9 28 20 18 00 22 ab 7b 1a
>1a7ab8		a9 29 20 18 00 4c a5 7b a9 41 20 18 00 4c a9 7b
>1a7ac8		22 ab 7b 1a a9 2c 20 18 00 a9 53 20 18 00 4c a5
>1a7ad8		7b a9 5b 20 18 00 22 ab 7b 1a a9 5d 20 18 00 4c
>1a7ae8		a5 7b 22 c3 7b 1a 4c a9 7b a9 28 20 18 00 22 ab
>1a7af8		7b 1a a9 2c 20 18 00 a9 53 20 18 00 a9 29 20 18
>1a7b08		00 a9 2c 20 18 00 a9 59 20 18 00 4c a5 7b a9 5b
>1a7b18		20 18 00 22 ab 7b 1a a9 5d 20 18 00 a9 2c 20 18
>1a7b28		00 a9 59 20 18 00 4c a5 7b a0 02 00 80 03 a0 01
>1a7b38		00 22 29 7c 1a 4c a9 7b 4c a9 7b 22 c3 7b 1a a9
>1a7b48		2c 20 18 00 a9 58 20 18 00 4c a9 7b a9 23 20 18
>1a7b58		00 8b a5 02 48 ab a6 00 e8 a0 01 00 22 99 02 1a
>1a7b68		a9 2c 20 18 00 a9 23 20 18 00 a6 00 a0 01 00 22
>1a7b78		99 02 1a ab 22 d8 81 1a 4c a5 7b a9 28 20 18 00
>1a7b88		22 b5 7b 1a a9 29 20 18 00 4c a5 7b a9 5b 20 18
>1a7b98		00 22 b5 7b 1a a9 5d 20 18 00 4c a5 7b 22 d8 81
>1a7ba8		1a 28 6b 08 e2 20 a7 00 20 40 03 28 6b 08 c2 30
>1a7bb8		a7 00 20 26 03 22 d8 81 1a 28 6b 08 8b 0b c2 30
>1a7bc8		5a 08 c2 20 48 a9 7a 08 5b 68 28 08 e2 20 48 a9
>1a7bd8		00 48 ab 68 28 e2 20 a0 00 00 a7 00 99 92 08 22
>1a7be8		d8 81 1a c8 c0 03 00 d0 f1 22 82 7c 1a c2 30 7a
>1a7bf8		2b ab 28 6b 08 8b e2 20 c2 10 08 e2 20 48 a9 1a
>1a7c08		48 ab 68 28 bd 00 00 20 18 00 e8 bd 00 00 20 18
>1a7c18		00 e8 bd 00 00 20 18 00 e8 a9 20 20 18 00 ab 28
>1a7c28		6b 08 0b 08 c2 20 48 a9 7a 08 5b 68 28 e2 20 c0
>1a7c38		02 00 f0 14 a7 00 85 18 30 06 64 19 64 1a 80 1e
>1a7c48		a9 ff 85 19 85 1a 80 16 a7 00 85 18 22 d8 81 1a
>1a7c58		a7 00 85 19 30 04 64 1a 80 04 a9 ff 85 1a c2 20
>1a7c68		38 a5 00 65 18 85 18 e2 20 a5 02 65 1a 85 1a 22
>1a7c78		82 7c 1a 22 d8 81 1a 2b 28 6b 08 0b c2 20 48 08
>1a7c88		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4c 20 40 03
>1a7c98		e2 20 a9 3a 20 18 00 c2 20 a5 4a 20 26 03 68 2b
>1a7ca8		28 6b 4f 52 41 00 41 4e 44 00 45 4f 52 00 41 44
>1a7cb8		43 00 53 54 41 00 4c 44 41 00 43 4d 50 00 53 42
>1a7cc8		43 00 41 53 4c 00 52 4f 4c 00 4c 53 52 00 52 4f
>1a7cd8		52 00 53 54 58 00 4c 44 58 00 44 45 43 00 49 4e
>1a7ce8		43 00 42 49 54 00 4a 4d 50 00 53 54 59 00 4c 44
>1a7cf8		59 00 43 50 59 00 43 50 58 00 42 52 4b 00 4a 53
>1a7d08		52 00 52 54 49 00 52 54 53 00 50 48 50 00 50 4c
>1a7d18		50 00 50 48 41 00 50 4c 41 00 44 45 59 00 54 41
>1a7d28		59 00 49 4e 59 00 49 4e 58 00 43 4c 43 00 53 45
>1a7d38		43 00 43 4c 49 00 53 45 49 00 54 59 41 00 43 4c
>1a7d48		56 00 43 4c 44 00 53 45 44 00 54 58 41 00 54 58
>1a7d58		53 00 54 41 58 00 54 53 58 00 44 45 58 00 4e 4f
>1a7d68		50 00 42 50 4c 00 42 4d 49 00 42 56 43 00 42 56
>1a7d78		53 00 42 43 43 00 42 43 53 00 42 4e 45 00 42 45
>1a7d88		51 00 54 53 42 00 54 52 42 00 53 54 5a 00 42 52
>1a7d98		41 00 50 48 59 00 50 4c 59 00 50 48 58 00 50 4c
>1a7da8		58 00 50 48 44 00 50 4c 44 00 50 48 4b 00 52 54
>1a7db8		4c 00 50 48 42 00 50 4c 42 00 57 41 49 00 58 42
>1a7dc8		41 00 54 43 53 00 54 53 43 00 54 43 44 00 54 44
>1a7dd8		43 00 54 58 59 00 54 59 58 00 53 54 50 00 58 43
>1a7de8		45 00 43 4f 50 00 4a 53 4c 00 57 44 4d 00 50 45
>1a7df8		52 00 42 52 4c 00 52 45 50 00 53 45 50 00 4d 56
>1a7e08		50 00 4d 56 4e 00 50 45 49 00 50 45 41 00 4a 4d
>1a7e18		4c 00 00 00 02 7d aa 7c ea 7d aa 7c 8a 7d aa 7c
>1a7e28		ca 7c aa 7c 12 7d aa 7c ca 7c aa 7d 8a 7d aa 7c
>1a7e38		ca 7c aa 7c 6a 7d aa 7c aa 7c aa 7c 8e 7d aa 7c
>1a7e48		ca 7c aa 7c 32 7d aa 7c e6 7c ca 7d 8e 7d aa 7c
>1a7e58		ca 7c aa 7c 06 7d ae 7c ee 7d ae 7c ea 7c ae 7c
>1a7e68		ce 7c ae 7c 16 7d ae 7c ce 7c ae 7d ea 7c ae 7c
>1a7e78		ce 7c ae 7c 6e 7d ae 7c ae 7c ae 7c ea 7c ae 7c
>1a7e88		ce 7c ae 7c 36 7d ae 7c e2 7c ce 7d ea 7c ae 7c
>1a7e98		ce 7c ae 7c 0a 7d b2 7c f2 7d b2 7c 06 7e b2 7c
>1a7ea8		d2 7c b2 7c 1a 7d b2 7c d2 7c b2 7d ee 7c b2 7c
>1a7eb8		d2 7c b2 7c 72 7d b2 7c b2 7c b2 7c 0a 7e b2 7c
>1a7ec8		d2 7c b2 7c 3a 7d b2 7c 9a 7d d2 7d 16 7e b2 7c
>1a7ed8		d2 7c b2 7c 0e 7d b6 7c f6 7d b6 7c 92 7d b6 7c
>1a7ee8		d6 7c b6 7c 1e 7d b6 7c d6 7c b6 7d ee 7c b6 7c
>1a7ef8		d6 7c b6 7c 76 7d b6 7c b6 7c b6 7c 92 7d b6 7c
>1a7f08		d6 7c b6 7c 3e 7d b6 7c 9e 7d d6 7d ee 7c b6 7c
>1a7f18		d6 7c b6 7c 96 7d ba 7c fa 7d ba 7c f2 7c ba 7c
>1a7f28		da 7c ba 7c 22 7d ea 7c 52 7d ba 7d f2 7c ba 7c
>1a7f38		da 7c ba 7c 7a 7d ba 7c ba 7c ba 7c f2 7c ba 7c
>1a7f48		da 7c ba 7c 42 7d ba 7c 56 7d da 7d 92 7d ba 7c
>1a7f58		92 7d ba 7c f6 7c be 7c de 7c be 7c f6 7c be 7c
>1a7f68		de 7c be 7c 26 7d be 7c 5a 7d be 7d f6 7c be 7c
>1a7f78		de 7c be 7c 7e 7d be 7c be 7c be 7c f6 7c be 7c
>1a7f88		de 7c be 7c 46 7d be 7c 5e 7d de 7d f6 7c be 7c
>1a7f98		de 7c be 7c fa 7c c2 7c fe 7d c2 7c fa 7c c2 7c
>1a7fa8		e2 7c c2 7c 2a 7d c2 7c 62 7d c2 7d fa 7c c2 7c
>1a7fb8		e2 7c c2 7c 82 7d c2 7c c2 7c c2 7c 0e 7e c2 7c
>1a7fc8		e2 7c c2 7c 4a 7d c2 7c a2 7d e2 7d 16 7e c2 7c
>1a7fd8		e2 7c c2 7c fe 7c c6 7c 02 7e c6 7c fe 7c c6 7c
>1a7fe8		e6 7c c6 7c 2e 7d c6 7c 66 7d c6 7d fe 7c c6 7c
>1a7ff8		e6 7c c6 7c 86 7d c6 7c c6 7c c6 7c 12 7e c6 7c
>1a8008		e6 7c c6 7c 4e 7d c6 7c a6 7d e6 7d 06 7d c6 7c
>1a8018		e6 7c c6 7c 00 00 13 00 02 09 01 01 01 0a 13 82
>1a8028		08 13 03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06
>1a8038		08 13 03 07 07 0e 03 00 0b 09 01 01 01 0a 13 82
>1a8048		08 13 03 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06
>1a8058		08 13 07 07 07 0e 13 00 13 09 14 01 01 0a 13 82
>1a8068		08 13 03 03 03 0b 12 04 0f 0c 14 05 05 0d 13 06
>1a8078		13 13 0b 07 07 0b 13 00 16 09 01 01 01 0a 13 82
>1a8088		08 13 15 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06
>1a8098		13 13 10 07 07 0e 12 00 16 09 01 01 01 0a 13 82
>1a80a8		13 13 03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06
>1a80b8		13 13 03 07 07 0e 82 00 42 09 01 01 01 0a 13 82
>1a80c8		13 13 03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06
>1a80d8		13 13 07 07 06 0e 42 00 02 09 01 01 01 0a 13 82
>1a80e8		13 13 03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06
>1a80f8		13 13 17 07 07 0e 42 00 02 09 01 01 01 0f 13 82
>1a8108		13 13 03 03 03 0b 12 04 0f 0c 03 05 05 0d 13 06
>1a8118		13 13 10 07 07 0e 01 01 01 02 01 01 02 02 00 01
>1a8128		01 03 01 01 03 01 02 01 01 00 02 02 02 02 41 00
>1a8138		08 64 64 3a 64 64 64 64 2c 58 00 0e 64 64 3a 64
>1a8148		64 64 64 00 0b 64 64 64 64 2c 58 00 07 64 64 64
>1a8158		64 2c 59 00 06 64 64 64 64 00 03 64 64 2c 58 00
>1a8168		05 64 64 2c 59 00 11 64 64 2c 53 00 09 64 64 00
>1a8178		01 23 64 64 64 64 00 c2 23 64 64 2c 23 64 64 00
>1a8188		14 23 64 64 00 02 28 64 64 2c 53 29 2c 59 00 0c
>1a8198		28 64 64 64 64 2c 58 29 00 10 28 64 64 64 64 29
>1a81a8		00 10 28 64 64 2c 58 29 00 00 28 64 64 29 2c 59
>1a81b8		00 04 28 64 64 29 00 0f 5b 64 64 64 64 5d 00 17
>1a81c8		5b 64 64 5d 2c 59 00 0d 5b 64 64 5d 00 0a 00 00
>1a81d8		08 c2 20 48 18 af 7a 08 00 69 01 00 8f 7a 08 00
>1a81e8		e2 20 af 7c 08 00 69 00 8f 7c 08 00 c2 20 68 28
>1a81f8		6b 08 c2 10 e2 20 da a2 08 00 0a b0 08 48 a9 30
>1a8208		20 18 00 80 06 48 a9 31 20 18 00 68 ca d0 eb fa
>1a8218		28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a7 32
>1a8228		f0 0a c9 20 d0 06 22 d8 81 1a 80 f2 6b 08 08 c2
>1a8238		20 48 a9 48 08 5b 68 28 22 d8 81 1a 22 1a 82 1a
>1a8248		c2 30 a5 31 c2 20 29 ff 00 0a 0a aa a5 32 95 0d
>1a8258		a5 34 95 0f e2 20 a7 32 f0 14 c9 22 f0 06 22 d8
>1a8268		81 1a 80 f2 a9 00 87 32 22 d8 81 1a e6 31 28 6b
>1a8278		08 c2 20 48 a9 48 08 5b 68 28 e2 20 64 4a c2 20
>1a8288		64 50 64 52 e2 20 a7 32 c9 3a f0 0d 20 be 03 90
>1a8298		0e 22 10 77 1a a9 01 85 4a 22 d8 81 1a 80 e5 a5
>1a82a8		4a f0 16 a5 31 c2 20 29 ff 00 0a 0a aa a5 50 95
>1a82b8		0d a5 52 95 0f e2 20 e6 31 6b e2 20 64 31 22 1a
>1a82c8		82 1a a7 32 f0 21 c9 22 d0 06 22 35 82 1a 80 0a
>1a82d8		22 78 82 1a a5 31 c9 09 b0 0d a7 32 f0 09 c9 20
>1a82e8		f0 dc 20 be 03 b0 d7 6b 08 0b 08 c2 20 48 a9 48
>1a82f8		08 5b 68 28 c2 10 e2 20 a2 31 00 74 00 ca d0 fb
>1a8308		a9 00 85 02 85 34 c2 20 a9 00 4f 85 00 85 32 e2
>1a8318		20 22 1a 82 1a c9 00 f0 38 c2 20 a5 32 85 08 e2
>1a8328		20 a5 34 85 0a a2 01 00 22 d8 81 1a a7 32 d0 06
>1a8338		86 0b 64 31 80 1b c9 20 f0 03 e8 80 eb 86 0b a9
>1a8348		00 87 32 22 d8 81 1a a7 08 c9 41 f0 07 22 c2 82
>1a8358		1a 2b 28 6b 22 1a 82 1a a7 32 f0 f5 22 78 82 1a
>1a8368		22 1a 82 1a a7 32 f0 e9 c2 20 a5 32 85 11 e2 20
>1a8378		a5 34 85 13 22 d8 81 1a a7 32 f0 26 c9 20 d0 f4
>1a8388		a9 00 87 32 e6 31 22 d8 81 1a 22 1a 82 1a a7 32
>1a8398		f0 bf c2 20 a5 32 85 15 e2 20 a5 34 85 17 e6 31
>1a83a8		80 af e6 31 80 ab 08 c2 10 e2 20 a5 31 d0 0f a2
>1a83b8		a4 84 a9 1a 48 ab 20 16 03 20 89 02 80 61 c2 20
>1a83c8		a5 0d 8f 23 08 00 a5 0f 8f 25 08 00 20 94 65 e2
>1a83d8		20 a5 31 c9 01 d0 0f c2 20 a9 ff ff 8f 54 03 00
>1a83e8		8f 56 03 00 80 0e c2 20 a5 11 8f 54 03 00 a5 13
>1a83f8		8f 56 03 00 22 18 11 00 b0 25 e2 20 a2 ca 84 a9
>1a8408		1a 48 ab 20 16 03 af 2e 03 00 20 40 03 a9 20 20
>1a8418		18 00 af 20 03 00 20 40 03 20 89 02 20 89 02 28
>1a8428		6b 8b 08 c2 10 e2 20 a5 31 c9 03 f0 0f a2 a4 84
>1a8438		a9 1a 48 ab 20 16 03 20 89 02 80 54 c2 20 a5 0d
>1a8448		8f 23 08 00 a5 0f 8f 25 08 00 20 94 65 a5 11 8f
>1a8458		50 03 00 a5 13 8f 52 03 00 a5 15 8f 58 03 00 a5
>1a8468		17 8f 5a 03 00 22 1c 11 00 b0 25 e2 20 a2 b4 84
>1a8478		a9 1a 48 ab 20 16 03 af 2e 03 00 20 40 03 a9 20
>1a8488		20 18 00 af 20 03 00 20 40 03 20 89 02 20 89 02
>1a8498		28 ab 6b 5c de 25 1a 6b 00 00 00 00 42 61 64 20
>1a84a8		61 72 67 75 6d 65 6e 74 73 0d 0d 00 55 6e 61 62
>1a84b8		6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c 65 3a
>1a84c8		20 00 55 6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64
>1a84d8		20 66 69 6c 65 3a 20 00 0d 20 20 50 43 20 20 20
>1a84e8		20 20 41 20 20 20 20 58 20 20 20 20 59 20 20 20
>1a84f8		20 53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e
>1a8508		56 4d 58 44 49 5a 43 0d 00 41 43 44 46 47 4a 48
>1a8518		4c 4d 52 3b 53 54 56 57 58 3e 3f 00 18 fb 08 c2
>1a8528		20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>1a8538		68 28 c2 30 20 63 85 a9 ff fe 1b 08 e2 20 48 a9
>1a8548		1a 48 ab 68 28 a2 63 d2 20 16 03 08 e2 20 48 a9
>1a8558		00 48 ab 68 28 4c de 25 4c 60 85 08 20 d0 01 20
>1a8568		84 4d 28 60 00 00 00 00 00 00 00 00 00 00 00 00
>1a8578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1191 times (19056 bytes)...
>1acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>1ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>1ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>1ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>1ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>1ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>1ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>1ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>1ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>1ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>1ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>1ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>1ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>1ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>1ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>1ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>1ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>1ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>1ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>1ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>1ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>1ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>1ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>1ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>1ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>1ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>1ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>1ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>1ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>1ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>1ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>1ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>1ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>1ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>1ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>1ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>1ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>1ad248		4f 53 00 54 41 4e 00 4c 4e 00 53 43 41 4c 45 54
>1ad258		41 55 00 0d 52 45 41 44 59 0d 00 43 32 35 36 20
>1ad268		46 6f 65 6e 69 78 20 42 41 53 49 43 38 31 36 20
>1ad278		76 30 2e 32 2e 30 2d 61 6c 70 68 61 2b 32 35 30
>1ad288		0d 00
>1b0000						.align 256
.1b0000						CREDITS_TEXT
>1b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>1b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>1b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>1b004f		20
>1b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>1b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>1b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>1b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>1b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>1b009f		20
>1b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b00ef		20
>1b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b013f		20
>1b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>1b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>1b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>1b0168		6e 79 20 41 6c 6c 61 69 72 65
>1b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>1b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b018a		20 20 20 20 20 20
>1b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>1b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>1b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>1b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b01da		20 20 20 20 20 20
>1b01e0		20				                .text " "
>1b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0229		20 20 20 20 20 20 20
>1b0230		20				                .text " "
>1b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0279		20 20 20 20 20 20 20
>1b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>1b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>1b0298		53 3a
>1b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>1b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>1b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>1b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>1b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>1b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b031d		20 20 20
>1b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>1b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>1b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>1b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>1b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>1b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>1b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>1b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>1b0398		75 73 68
>1b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>1b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>1b03c8		54 68 61 6e 6b 73 3a
>1b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>1b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0407		20 20 20 20 20 20 20 20 20
>1b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>1b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>1b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>1b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>1b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>1b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b045f		20
>1b0460		20				                .text " "
>1b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04a9		20 20 20 20 20 20 20
>1b04b0		20				                .text " "
>1b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04f9		20 20 20 20 20 20 20
>1b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>1b0508		45 53 20 41 55 54 48 4f 52 53 3a
>1b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>1b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b054b		20 20 20 20 20
>1b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>1b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>1b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>1b0578		63 6f 72 65 73 2e 6f 72 67
>1b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>1b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0599		20 20 20 20 20 20 20
>1b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>1b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>1b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>1b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>1b05d8		6d
>1b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>1b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>1b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>1b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>1b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>1b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>1b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>1b063b		20 20 20 20 20
>1b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>1b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>1b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>1b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>1b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b068b		20 20 20 20 20
>1b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>1b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>1b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>1b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>1b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06da		20 20 20 20 20 20
>1b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>1b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>1b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>1b0708		6a 61 64 61 20 47 6f 6d 65 7a
>1b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b072a		20 20 20 20 20 20
>1b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>1b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>1b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>1b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>1b0768		6f 6d
>1b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>1b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>1b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>1b0798		6e 69 78 20 55 29 3a 20 54 42 44
>1b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>1b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07cb		20 20 20 20 20
>1b07d0		20				                .text " "
>1b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0819		20 20 20 20 20 20 20
>1b0820		20				                .text " "
>1b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0869		20 20 20 20 20 20 20
>1b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>1b0878		54 48 41 4e 4b 53 3a
>1b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>1b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b08b7		20 20 20 20 20 20 20 20 20
>1b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>1b08c8		56 61 6e 68 61 72 65 6e
>1b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>1b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0908		20 20 20 20 20 20 20 20
>1b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>1b0918		65 77
>1b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>1b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>1b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>1b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>1b0988		65 66 65 72 65 6e 63 65 73 29
>1b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>1b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b09aa		20 20 20 20 20 20
>1b09b0		20				                .text " "
>1b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b09f9		20 20 20 20 20 20 20
>1b0a00		20				                .text " "
>1b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0a49		20 20 20 20 20 20 20
>1b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0a9f		20
>1b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>1b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>1b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>1b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>1b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>1b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>1b0aec		20 20 20 20
>1b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>1b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>1b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>1b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>1b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>1b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>1b0b3c		20 20 20 20
>1b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>1b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>1b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>1b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>1b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>1b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>1b0b8d		20 20 20
>1b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>1b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>1b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>1b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>1b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>1b0bdd		20 20 20
>1b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>1b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>1b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>1b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>1b0c2d		20 20 20
>1b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0c7f		20
>1b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>1b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c98		53 74 65 66 61 6e 79
>1b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>1b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cc7		20 20 20 20 20 20 20 20 20
>1b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>1b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>1b1768		20 20 20 20 20 20 20 20
>1b1770						.align 256
>1b1800		f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 80 * 60, $F3
>1b1808		f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;		...repeated 298 times (4768 bytes)...
>1b2ab8		f3 f3 f3 f3 f3 f3 f3 f3
=$000068					INTERRUPT_STATE  = $000068
=$000069					INTERRUPT_COUNT  = $000069
=$00006a					IRQ_COLOR_CHOICE = $00006A
.1e0000						BOOT_MENU
.1e0000						SplashScreenMain:
.1e0000		48		pha		                PHA             ; begin setdp macro
.1e0001		08		php		                PHP
.1e0002		c2 20		rep #$20	                REP #$20        ; set A long
.1e0004		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1e0007		5b		tcd		                TCD
.1e0008		28		plp		                PLP
.1e0009		68		pla		                PLA             ; end setdp macro
.1e000a		c2 10		rep #$10	                REP #$10        ; set X long
.1e000c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e000e		a9 00		lda #$00	                LDA #$00
.1e0010		85 68		sta $68		                STA INTERRUPT_STATE
.1e0012		85 69		sta $69		                STA INTERRUPT_COUNT
.1e0014		85 6a		sta $6a		                STA IRQ_COLOR_CHOICE
.1e0016		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.1e001a		29 04		and #$04	                AND #FNX0_INT02_TMR0
.1e001c		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.1e0020		20 e6 00	jsr $1e00e6	                JSR Splash_Get_Machine_ID
.1e0023		20 19 01	jsr $1e0119	                JSR Splash_Clear_Screen
.1e0026		20 03 01	jsr $1e0103	                JSR Splash_Load_FontSet
.1e0029		22 f8 02 1e	jsl $1e02f8	                JSL Splashscreen_BitMapSetup
.1e002d		20 0b 06	jsr $1e060b	                JSR Model_Update_Info_Field
.1e0030		20 ec 05	jsr $1e05ec	                JSR Set_Text_Color
.1e0033		a9 00		lda #$00	                LDA #$00
.1e0035		85 a6		sta $a6		                STA LINE_INDEX  ; Point to the first line to be displayed
.1e0037		85 a7		sta $a7		                STA LINE_INDEX + 1
.1e0039		20 93 08	jsr $1e0893	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e003c						HAVE_FUN:
.1e003c		22 33 01 1e	jsl $1e0133	                JSL Splash_Moniker_Color_Rolling  ; Go Move The Colors on the Logo
.1e0040		a6 a6		ldx $a6		                LDX LINE_INDEX
.1e0042		e0 17 00	cpx #$0017	                CPX #NumberOfEntry
.1e0045		f0 08		beq $1e004f	                BEQ ByPassCharDisplay           ; If Equal all Lines have been displayed
.1e0047		20 d0 08	jsr $1e08d0	                JSR Line_Display_1_Character    ; Go move the cursor one stop
.1e004a		90 21		bcc $1e006d	                BCC Still_Displaying_Char
.1e004c		20 93 08	jsr $1e0893	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e004f						ByPassCharDisplay:
.1e004f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0051		22 48 10 00	jsl $001048	                JSL GETCH               ; Try to get a character
.1e0055		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.1e0057		f0 14		beq $1e006d	                BEQ Still_Displaying_Char            ; No: keep waiting until timeout
.1e0059		c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.1e005b		f0 1f		beq $1e007c	                BEQ return              ; Yes: return it
.1e005d		c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.1e005f		f0 1b		beq $1e007c	                BEQ return              ; Yes: return it
.1e0061		c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.1e0063		f0 17		beq $1e007c	                BEQ return              ; Yes: return it
.1e0065		c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.1e0067		f0 13		beq $1e007c	                BEQ return              ; Yes: return it
.1e0069		c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.1e006b		f0 0d		beq $1e007a	                BEQ exitshere
.1e006d						Still_Displaying_Char:
.1e006d						WaitForNextSOF:
.1e006d		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0
.1e0071		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e0073		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.1e0075		d0 f6		bne $1e006d	                BNE WaitForNextSOF;
.1e0077		4c 3c 00	jmp $1e003c	                JMP HAVE_FUN
.1e007a						exitshere:
.1e007a						timeout
.1e007a		a9 00		lda #$00	                LDA #0                  ; Return 0 for a timeout / SPACE
.1e007c						return
.1e007c		8f 08 00 00	sta $000008	                STA @l KRNL_BOOT_MENU_K          ; Store ther Keyboard Value
.1e0080		a9 00		lda #$00	                LDA #$00
.1e0082		8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L         ; Disable Everything
.1e0086		22 2c 05 1e	jsl $1e052c	                JSL SS_VDMA_CLEAR_MEMORY_640_480 ; Clear the Bitmap Screen
.1e008a		20 9f 00	jsr $1e009f	                JSR VickyII_Registers_Clear      ; Reset All Vicky Registers
.1e008d		22 c0 10 00	jsl $0010c0	                JSL INITFONTSET ; Reload the Official FONT set
.1e0091		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR ; Reset the Cursor to its origin
.1e0095		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.1e0099		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE  ; Init VICKY TextMode now contains Hi-Res Dipswitch read and Automatic Text Size Parameter adjust
.1e009d		ea		nop		                NOP
.1e009e		6b		rtl		                RTL
.1e009f						VickyII_Registers_Clear:
.1e009f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00a1		c2 10		rep #$10	                REP #$10        ; set X long
.1e00a3		a2 00 00	ldx #$0000	                LDX #$0000
.1e00a6		a9 00		lda #$00	                LDA #$00
.1e00a8						ClearSpriteRegisters:
.1e00a8		9f 00 0c af	sta $af0c00,x	                STA @l SP00_CONTROL_REG, X
.1e00ac		e8		inx		                INX
.1e00ad		e0 00 02	cpx #$0200	                CPX #$0200
.1e00b0		d0 f6		bne $1e00a8	                BNE ClearSpriteRegisters
.1e00b2		a2 00 00	ldx #$0000	                LDX #$0000
.1e00b5		a9 00		lda #$00	                LDA #$00
.1e00b7						ClearTiles0Registers:
.1e00b7		9f 00 02 af	sta $af0200,x	                STA @l TL0_CONTROL_REG, X
.1e00bb		e8		inx		                INX
.1e00bc		e0 30 00	cpx #$0030	                CPX #$0030
.1e00bf		d0 f6		bne $1e00b7	                BNE ClearTiles0Registers
.1e00c1		ea		nop		                NOP
.1e00c2		a2 00 00	ldx #$0000	                LDX #$0000
.1e00c5		a9 00		lda #$00	                LDA #$00
.1e00c7						ClearTiles1Registers:
.1e00c7		9f 80 02 af	sta $af0280,x	                STA @l TILESET0_ADDY_L, X
.1e00cb		e8		inx		                INX
.1e00cc		e0 20 00	cpx #$0020	                CPX #$0020
.1e00cf		d0 f6		bne $1e00c7	                BNE ClearTiles1Registers
.1e00d1		ea		nop		                NOP
.1e00d2		a2 00 00	ldx #$0000	                LDX #$0000
.1e00d5		a9 00		lda #$00	                LDA #$00
.1e00d7						ClearBitmapRegisters:
.1e00d7		9f 00 01 af	sta $af0100,x	                STA @l BM0_CONTROL_REG, X
.1e00db		9f 08 01 af	sta $af0108,x	                STA @l BM1_CONTROL_REG, X
.1e00df		e8		inx		                INX
.1e00e0		e0 10 00	cpx #$0010	                CPX #$0010
.1e00e3		d0 f2		bne $1e00d7	                BNE ClearBitmapRegisters
.1e00e5		60		rts		                RTS
.1e00e6						Splash_Get_Machine_ID
.1e00e6		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00e8		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e00ec		29 03		and #$03	                AND #$03        ; Isolate the first 2 bits to know if it is a U or FMX
.1e00ee		85 b0		sta $b0		                STA MODEL
.1e00f0		c9 00		cmp #$00	                CMP #$00
.1e00f2		f0 0e		beq $1e0102	                BEQ DONE
.1e00f4		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e00f8		29 04		and #$04	                AND #GABE_SYS_STAT_MID2 ; High 4Meg, Low - 2Megs
.1e00fa		c9 04		cmp #$04	                CMP #GABE_SYS_STAT_MID2
.1e00fc		f0 04		beq $1e0102	                BEQ DONE
.1e00fe		a9 02		lda #$02	                LDA #$02
.1e0100		85 b0		sta $b0		                STA MODEL       ; In this Scheme 00 - FMX, 01 - U+, 02 - U
.1e0102						DONE:
.1e0102		60		rts		                RTS
.1e0103						Splash_Load_FontSet
.1e0103		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0105		c2 10		rep #$10	                REP #$10        ; set X long
.1e0107		a2 00 00	ldx #$0000	                LDX #$0000
.1e010a						DONE_LOADING_FONT:
.1e010a		bf 00 08 1f	lda $1f0800,x	                LDA @l FONT_4_SPLASH, X
.1e010e		9f 00 80 af	sta $af8000,x	                STA @l FONT_MEMORY_BANK0, X
.1e0112		e8		inx		                INX
.1e0113		e0 00 08	cpx #$0800	                CPX #2048
.1e0116		d0 f2		bne $1e010a	                BNE DONE_LOADING_FONT
.1e0118		60		rts		                RTS
.1e0119						Splash_Clear_Screen
.1e0119		e2 20		sep #$20	                SEP #$20        ; set A short
.1e011b		c2 10		rep #$10	                REP #$10        ; set X long
.1e011d		a2 00 00	ldx #$0000	                LDX #$0000
.1e0120						Branch_Clear:
.1e0120		a9 20		lda #$20	                LDA #$20
.1e0122		9f 00 a0 af	sta $afa000,x	                STA @l CS_TEXT_MEM_PTR,X
.1e0126		a9 f0		lda #$f0	                LDA #$F0
.1e0128		9f 00 c0 af	sta $afc000,x	                STA @l CS_COLOR_MEM_PTR,X
.1e012c		e8		inx		                INX
.1e012d		e0 00 20	cpx #$2000	                CPX #$2000
.1e0130		d0 ee		bne $1e0120	                BNE Branch_Clear
.1e0132		60		rts		                RTS
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
.1e0133						Splash_Moniker_Color_Rolling
.1e0133		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0135		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.1e0139		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e013b		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.1e013f		a5 68		lda $68		                LDA INTERRUPT_STATE
.1e0141		c9 00		cmp #$00	                CMP #IRQ_SOF_ST0
.1e0143		f0 0c		beq $1e0151	                BEQ SERVE_STATE0
.1e0145		c9 01		cmp #$01	                CMP #IRQ_SOF_ST1
.1e0147		f0 1a		beq $1e0163	                BEQ SERVE_STATE1
.1e0149		c9 02		cmp #$02	                CMP #IRQ_SOF_ST2
.1e014b		d0 03		bne $1e0150	                BNE NOT_SERVE_STATE2
.1e014d		82 39 01	brl $1e0289	                BRL SERVE_STATE2
.1e0150						NOT_SERVE_STATE2
.1e0150		6b		rtl		                RTL
.1e0151						SERVE_STATE0
.1e0151		a5 69		lda $69		                LDA INTERRUPT_COUNT
.1e0153		c9 04		cmp #$04	                CMP #$04
.1e0155		f0 03		beq $1e015a	                BEQ SERVE_NEXT_STATE
.1e0157		e6 69		inc $69		                INC INTERRUPT_COUNT
.1e0159		6b		rtl		                RTL
.1e015a						SERVE_NEXT_STATE
.1e015a		a9 00		lda #$00	                LDA #$00
.1e015c		85 69		sta $69		                STA INTERRUPT_COUNT
.1e015e		a9 01		lda #$01	                LDA #IRQ_SOF_ST1
.1e0160		85 68		sta $68		                STA INTERRUPT_STATE
.1e0162		6b		rtl		                RTL
.1e0163						SERVE_STATE1
.1e0163		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e0165		a9 00 00	lda #$0000	                LDA #$0000
.1e0168		a2 00 00	ldx #$0000	                LDX #$0000
.1e016b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1e016d		a6 6a		ldx $6a		                LDX IRQ_COLOR_CHOICE
.1e016f		bf b0 02 1e	lda $1e02b0,x	                LDA @lCOLOR_POINTER+0, X
.1e0173		aa		tax		                TAX
.1e0174		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e0178		8f e0 3f af	sta $af3fe0	                STA @lGRPH_LUT7_PTR+992
.1e017c		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e0180		8f e1 3f af	sta $af3fe1	                STA @lGRPH_LUT7_PTR+993
.1e0184		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e0188		8f e2 3f af	sta $af3fe2	                STA @lGRPH_LUT7_PTR+994
.1e018c		a6 6a		ldx $6a		                LDX IRQ_COLOR_CHOICE
.1e018e		bf b1 02 1e	lda $1e02b1,x	                LDA @lCOLOR_POINTER+1, X
.1e0192		aa		tax		                TAX
.1e0193		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e0197		8f e4 3f af	sta $af3fe4	                STA @lGRPH_LUT7_PTR+996
.1e019b		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e019f		8f e5 3f af	sta $af3fe5	                STA @lGRPH_LUT7_PTR+997
.1e01a3		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e01a7		8f e6 3f af	sta $af3fe6	                STA @lGRPH_LUT7_PTR+998
.1e01ab		a6 6a		ldx $6a		                LDX IRQ_COLOR_CHOICE
.1e01ad		bf b2 02 1e	lda $1e02b2,x	                LDA @lCOLOR_POINTER+2, X
.1e01b1		aa		tax		                TAX
.1e01b2		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e01b6		8f e8 3f af	sta $af3fe8	                STA @lGRPH_LUT7_PTR+1000
.1e01ba		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e01be		8f e9 3f af	sta $af3fe9	                STA @lGRPH_LUT7_PTR+1001
.1e01c2		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e01c6		8f ea 3f af	sta $af3fea	                STA @lGRPH_LUT7_PTR+1002
.1e01ca		a6 6a		ldx $6a		                LDX IRQ_COLOR_CHOICE
.1e01cc		bf b3 02 1e	lda $1e02b3,x	                LDA @lCOLOR_POINTER+3, X
.1e01d0		aa		tax		                TAX
.1e01d1		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e01d5		8f ec 3f af	sta $af3fec	                STA @lGRPH_LUT7_PTR+1004
.1e01d9		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e01dd		8f ed 3f af	sta $af3fed	                STA @lGRPH_LUT7_PTR+1005
.1e01e1		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e01e5		8f ee 3f af	sta $af3fee	                STA @lGRPH_LUT7_PTR+1006
.1e01e9		a6 6a		ldx $6a		                LDX IRQ_COLOR_CHOICE
.1e01eb		bf b4 02 1e	lda $1e02b4,x	                LDA @lCOLOR_POINTER+4, X
.1e01ef		aa		tax		                TAX
.1e01f0		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e01f4		8f f0 3f af	sta $af3ff0	                STA @lGRPH_LUT7_PTR+1008
.1e01f8		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e01fc		8f f1 3f af	sta $af3ff1	                STA @lGRPH_LUT7_PTR+1009
.1e0200		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e0204		8f f2 3f af	sta $af3ff2	                STA @lGRPH_LUT7_PTR+1010
.1e0208		a6 6a		ldx $6a		                LDX IRQ_COLOR_CHOICE
.1e020a		bf b5 02 1e	lda $1e02b5,x	                LDA @lCOLOR_POINTER+5, X
.1e020e		aa		tax		                TAX
.1e020f		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e0213		8f f4 3f af	sta $af3ff4	                STA @lGRPH_LUT7_PTR+1012
.1e0217		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e021b		8f f5 3f af	sta $af3ff5	                STA @lGRPH_LUT7_PTR+1013
.1e021f		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e0223		8f f6 3f af	sta $af3ff6	                STA @lGRPH_LUT7_PTR+1014
.1e0227		a6 6a		ldx $6a		                LDX IRQ_COLOR_CHOICE
.1e0229		bf b6 02 1e	lda $1e02b6,x	                LDA @lCOLOR_POINTER+6, X
.1e022d		aa		tax		                TAX
.1e022e		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e0232		8f f8 3f af	sta $af3ff8	                STA @lGRPH_LUT7_PTR+1016
.1e0236		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e023a		8f f9 3f af	sta $af3ff9	                STA @lGRPH_LUT7_PTR+1017
.1e023e		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e0242		8f fa 3f af	sta $af3ffa	                STA @lGRPH_LUT7_PTR+1018
.1e0246		a6 6a		ldx $6a		                LDX IRQ_COLOR_CHOICE
.1e0248		bf b7 02 1e	lda $1e02b7,x	                LDA @lCOLOR_POINTER+7, X
.1e024c		aa		tax		                TAX
.1e024d		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e0251		8f fc 3f af	sta $af3ffc	                STA @lGRPH_LUT7_PTR+1020
.1e0255		8f 50 1f af	sta $af1f50	                STA @lFG_CHAR_LUT_PTR + $10           ;
.1e0259		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e025d		8f fd 3f af	sta $af3ffd	                STA @lGRPH_LUT7_PTR+1021
.1e0261		8f 51 1f af	sta $af1f51	                STA @lFG_CHAR_LUT_PTR + $11            ;
.1e0265		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e0269		8f fe 3f af	sta $af3ffe	                STA @lGRPH_LUT7_PTR+1022
.1e026d		8f 52 1f af	sta $af1f52	                STA @lFG_CHAR_LUT_PTR + $12            ;
.1e0271						HERE
.1e0271		18		clc		                CLC
.1e0272		a5 6a		lda $6a		                LDA IRQ_COLOR_CHOICE
.1e0274		69 09		adc #$09	                ADC #$09
.1e0276		85 6a		sta $6a		                STA IRQ_COLOR_CHOICE
.1e0278		a5 6a		lda $6a		                LDA IRQ_COLOR_CHOICE
.1e027a		c9 48		cmp #$48	                CMP #$48
.1e027c		d0 04		bne $1e0282	                BNE EXIT_COLOR_CHANGE
.1e027e		a9 00		lda #$00	                LDA #$00
.1e0280		85 6a		sta $6a		                STA IRQ_COLOR_CHOICE
.1e0282						EXIT_COLOR_CHANGE
.1e0282		c2 10		rep #$10	                REP #$10        ; set X long
.1e0284		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e0286		85 68		sta $68		                STA INTERRUPT_STATE
.1e0288		6b		rtl		                RTL
.1e0289						SERVE_STATE2
.1e0289		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e028b		85 68		sta $68		                STA INTERRUPT_STATE
.1e028d		6b		rtl		                RTL
>1e028e						.align 16
>1e0290		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>1e0294		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>1e0298		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>1e029c		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>1e02a0		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>1e02a4		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>1e02a8		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>1e02ac		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>1e02b0		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>1e02b8		00
>1e02b9		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>1e02c1		00
>1e02c2		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>1e02ca		00
>1e02cb		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>1e02d3		00
>1e02d4		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>1e02dc		00
>1e02dd		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>1e02e5		00
>1e02e6		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>1e02ee		00
>1e02ef		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>1e02f7		00

;******  Processing file: src\SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480
.1e02f8						Splashscreen_BitMapSetup
.1e02f8		e2 20		sep #$20	                SEP #$20        ; set A short
.1e02fa		c2 10		rep #$10	                REP #$10        ; set X long
.1e02fc		a9 0f		lda #$0f	        LDA #( Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay );
.1e02fe		8f 00 00 af	sta $af0000	        STA @l MASTER_CTRL_REG_L
.1e0302		a9 00		lda #$00	        LDA #$00
.1e0304		8f 01 00 af	sta $af0001	        STA @l MASTER_CTRL_REG_H
.1e0308		a9 00		lda #$00	        LDA #$00
.1e030a		8f 00 01 af	sta $af0100	        STA @l BM0_CONTROL_REG
.1e030e		a9 0f		lda #$0f	        LDA #( BM_Enable | BM_LUT7)
.1e0310		8f 08 01 af	sta $af0108	        STA @l BM1_CONTROL_REG
.1e0314		a9 00		lda #$00	        LDA #$00
.1e0316		8f 09 01 af	sta $af0109	        STA @l BM1_START_ADDY_L
.1e031a		a9 00		lda #$00	        LDA #$00
.1e031c		8f 0a 01 af	sta $af010a	        STA @l BM1_START_ADDY_M
.1e0320		8f 0b 01 af	sta $af010b	        STA @l BM1_START_ADDY_H
.1e0324		a9 01		lda #$01	        LDA #$01
.1e0326		8f 04 00 af	sta $af0004	        STA BORDER_CTRL_REG
.1e032a		a9 08		lda #$08	        LDA #$08
.1e032c		8f 08 00 af	sta $af0008	        STA BORDER_X_SIZE
.1e0330		8f 09 00 af	sta $af0009	        STA BORDER_Y_SIZE
.1e0334		a9 80		lda #$80	        LDA #$80
.1e0336		8f 06 00 af	sta $af0006	        STA BORDER_COLOR_G
.1e033a		a9 00		lda #$00	        LDA #$00
.1e033c		8f 05 00 af	sta $af0005	        STA BORDER_COLOR_B
.1e0340		8f 07 00 af	sta $af0007	        STA BORDER_COLOR_R
.1e0344		a9 a0		lda #$a0	        LDA #$A0
.1e0346		8f 12 00 af	sta $af0012	        STA @l VKY_TXT_CURSOR_CHAR_REG
.1e034a		a9 10		lda #$10	        LDA #$10
.1e034c		8f 0e 00 af	sta $af000e	        STA @l BACKGROUND_COLOR_G
.1e0350		a9 10		lda #$10	        LDA #$10
.1e0352		8f 0f 00 af	sta $af000f	        STA @l BACKGROUND_COLOR_R
.1e0356		8f 0d 00 af	sta $af000d	        STA @l BACKGROUND_COLOR_B
.1e035a		e2 20		sep #$20	                SEP #$20        ; set A short
.1e035c		c2 10		rep #$10	                REP #$10        ; set X long
.1e035e		a2 00 00	ldx #$0000	        LDX #$0000
.1e0361						SS_LUT_BRANCH:
.1e0361		bf 00 0e 1e	lda $1e0e00,x	        LDA @l SS_MONIKER_LUT, X
.1e0365		ea		nop		        NOP
.1e0366		9f 00 3c af	sta $af3c00,x	        STA @l GRPH_LUT7_PTR, X
.1e036a		e8		inx		        INX
.1e036b		e0 00 04	cpx #$0400	        CPX #1024
.1e036e		d0 f1		bne $1e0361	        BNE SS_LUT_BRANCH
.1e0370		a9 00		lda #$00	        LDA #$00
.1e0372		8f 04 3c af	sta $af3c04	        STA @l GRPH_LUT7_PTR + 4
.1e0376		8f 05 3c af	sta $af3c05	        STA @l GRPH_LUT7_PTR + 5
.1e037a		8f 06 3c af	sta $af3c06	        STA @l GRPH_LUT7_PTR + 6
.1e037e		22 2c 05 1e	jsl $1e052c	        JSL SS_VDMA_CLEAR_MEMORY_640_480;
.1e0382		c2 20		rep #$20	                REP #$20        ; set A long
.1e0384		a9 00 12	lda #$1200	        LDA #<>SS_MONIKER      ; Set up the Source
.1e0387		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e038b		a9 00 50	lda #$5000	        LDA #<>( C256Moniker_SizeX * C256Moniker_SizeY )
.1e038e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e0392		a9 00 00	lda #$0000	        LDA #$0000
.1e0395		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0399		a9 a0 78	lda #$78a0	        LDA #<>( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)    ; Set up the Source
.1e039c		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e03a0		a9 40 01	lda #$0140	        LDA #C256Moniker_SizeX
.1e03a3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e03a7		a9 40 00	lda #$0040	        LDA #C256Moniker_SizeY
.1e03aa		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e03ae		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e03b1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e03b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03b7		a9 1e		lda #$1e	        LDA #`SS_MONIKER
.1e03b9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e03bd		a9 00		lda #$00	        LDA #`( C256Moniker_SizeX * C256Moniker_SizeY )
.1e03bf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e03c3		a9 00		lda #$00	        LDA #$00
.1e03c5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e03c9		a9 00		lda #$00	        LDA #`( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)
.1e03cb		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e03cf		22 e7 04 1e	jsl $1e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e03d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03d5		af b0 00 00	lda $0000b0	        LDA @lMODEL
.1e03d9		29 03		and #$03	        AND #$03
.1e03db		c9 00		cmp #$00	        CMP #$00
.1e03dd		f0 0b		beq $1e03ea	        BEQ DMA_FMX_Moniker
.1e03df		c9 01		cmp #$01	        CMP #$01
.1e03e1		f0 5b		beq $1e043e	        BEQ DMA_UPlus_Moniker
.1e03e3		c9 02		cmp #$02	        CMP #$02
.1e03e5		d0 03		bne $1e03ea	        BNE BAD_MODEL_NUMBER
.1e03e7		82 a8 00	brl $1e0492	        BRL DMA_U_Moniker
.1e03ea						 BAD_MODEL_NUMBER:
.1e03ea						DMA_FMX_Moniker:
.1e03ea		c2 20		rep #$20	                REP #$20        ; set A long
.1e03ec		a9 00 62	lda #$6200	        LDA #<>SS_FMX_TXT      ; Set up the Source
.1e03ef		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e03f3		a9 00 32	lda #$3200	        LDA #<>( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e03f6		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e03fa		a9 00 00	lda #$0000	        LDA #$0000
.1e03fd		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0401		a9 f0 13	lda #$13f0	        LDA #<>( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)    ; Set up the Source
.1e0404		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0408		a9 a0 00	lda #$00a0	        LDA #FMXMoniker_SizeX
.1e040b		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e040f		a9 50 00	lda #$0050	        LDA #FMXMoniker_SizeY
.1e0412		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e0416		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e0419		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e041d		e2 20		sep #$20	                SEP #$20        ; set A short
.1e041f		a9 1e		lda #$1e	        LDA #`SS_FMX_TXT
.1e0421		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0425		a9 00		lda #$00	        LDA #`( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e0427		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e042b		a9 00		lda #$00	        LDA #$00
.1e042d		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0431		a9 01		lda #$01	        LDA #`( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)
.1e0433		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e0437		22 e7 04 1e	jsl $1e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e043b		4c e6 04	jmp $1e04e6	        JMP Done_DMA_Model_Moniker
.1e043e						DMA_UPlus_Moniker:
.1e043e		c2 20		rep #$20	                REP #$20        ; set A long
.1e0440		a9 00 94	lda #$9400	        LDA #<>SS_UPlus_TXT      ; Set up the Source
.1e0443		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e0447		a9 00 18	lda #$1800	        LDA #<>( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e044a		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e044e		a9 00 00	lda #$0000	        LDA #$0000
.1e0451		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0455		a9 10 14	lda #$1410	        LDA #<>( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)    ; Set up the Source
.1e0458		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e045c		a9 60 00	lda #$0060	        LDA #UPlusMoniker_SizeX
.1e045f		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e0463		a9 40 00	lda #$0040	        LDA #UPlusMoniker_SizeY
.1e0466		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e046a		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e046d		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e0471		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0473		a9 1e		lda #$1e	        LDA #`SS_UPlus_TXT
.1e0475		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0479		a9 00		lda #$00	        LDA #`( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e047b		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e047f		a9 00		lda #$00	        LDA #$00
.1e0481		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0485		a9 01		lda #$01	        LDA #`( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)
.1e0487		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e048b		22 e7 04 1e	jsl $1e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e048f		4c e6 04	jmp $1e04e6	        JMP Done_DMA_Model_Moniker
.1e0492						DMA_U_Moniker:
.1e0492		c2 20		rep #$20	                REP #$20        ; set A long
.1e0494		a9 00 ac	lda #$ac00	        LDA #<>SS_U_TXT      ; Set up the Source
.1e0497		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e049b		a9 00 10	lda #$1000	        LDA #<>( UMoniker_SizeX *UMoniker_SizeY )
.1e049e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e04a2		a9 00 00	lda #$0000	        LDA #$0000
.1e04a5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e04a9		a9 20 14	lda #$1420	        LDA #<>( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)    ; Set up the Source
.1e04ac		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e04b0		a9 40 00	lda #$0040	        LDA #UMoniker_SizeX
.1e04b3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e04b7		a9 40 00	lda #$0040	        LDA #UMoniker_SizeY
.1e04ba		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e04be		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e04c1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e04c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04c7		a9 1e		lda #$1e	        LDA #`SS_U_TXT
.1e04c9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e04cd		a9 00		lda #$00	        LDA #`( UMoniker_SizeX * UMoniker_SizeY )
.1e04cf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e04d3		a9 00		lda #$00	        LDA #$00
.1e04d5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e04d9		a9 01		lda #$01	        LDA #`( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)
.1e04db		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e04df		22 e7 04 1e	jsl $1e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e04e3		4c e6 04	jmp $1e04e6	        JMP Done_DMA_Model_Moniker
.1e04e6						Done_DMA_Model_Moniker
.1e04e6		6b		rtl		        RTL
.1e04e7						SS_VDMA_SETUP_2_TRANSFER_IMAGE
.1e04e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04e9		a9 11		lda #$11	        LDA #( SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src )
.1e04eb		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e04ef		a9 13		lda #$13	        LDA #( VDMA_CTRL_Enable |  VDMA_CTRL_SysRAM_Src | VDMA_CTRL_1D_2D )
.1e04f1		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e04f5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04f7		af 00 04 af	lda $af0400	        LDA @l VDMA_CONTROL_REG
.1e04fb		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e04fd		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0501		af 20 04 af	lda $af0420	        LDA @l SDMA_CTRL_REG0
.1e0505		09 80		ora #$80	        ORA #SDMA_CTRL0_Start_TRF
.1e0507		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e050b		ea		nop		        NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e050c		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e050d		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e050e		ea		nop		        NOP
.1e050f		ea		nop		        NOP
.1e0510		ea		nop		        NOP
.1e0511		ea		nop		        NOP
.1e0512		ea		nop		        NOP
.1e0513		ea		nop		        NOP
.1e0514		ea		nop		        NOP
.1e0515		a9 00		lda #$00	        LDA #$00
.1e0517		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e051b						NOTFINISHED:
.1e051b		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e051f		29 80		and #$80	        AND #$80
.1e0521		c9 80		cmp #$80	        CMP #$80
.1e0523		f0 f6		beq $1e051b	        BEQ NOTFINISHED
.1e0525		a9 00		lda #$00	        LDA #$00
.1e0527		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e052b		6b		rtl		        RTL
.1e052c						SS_VDMA_CLEAR_MEMORY_640_480
.1e052c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e052e		a9 05		lda #$05	        LDA #( VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill )
.1e0530		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0534		a9 00		lda #$00	        LDA #$00
.1e0536		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e053a		c2 20		rep #$20	                REP #$20        ; set A long
.1e053c		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e053f		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0543		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0545		a9 00		lda #$00	        LDA #$00
.1e0547		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e054b		c2 20		rep #$20	                REP #$20        ; set A long
.1e054d		a9 00 b0	lda #$b000	        LDA #<>(640*480)
.1e0550		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e0554		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0556		a9 04		lda #$04	        LDA #`(640*480)
.1e0558		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e055c		a9 00		lda #$00	        LDA #$00
.1e055e		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0562		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e0566		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e0568		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e056c		ea		nop		         NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e056d		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e056e		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e056f		ea		nop		        NOP
.1e0570		ea		nop		        NOP
.1e0571		ea		nop		        NOP
.1e0572		ea		nop		        NOP
.1e0573		ea		nop		        NOP
.1e0574						SS_VDMA_CLR_LOOPA:
.1e0574		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e0578		29 80		and #$80	        AND #$80
.1e057a		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e057c		f0 f6		beq $1e0574	        BEQ SS_VDMA_CLR_LOOPA
.1e057e		ea		nop		        NOP
.1e057f		a9 00		lda #$00	        LDA #$00
.1e0581		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0585		6b		rtl		        RTL
.1e0586						SS_VDMA_TRANSFER_VRAM_2_VRAM
.1e0586		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0588		a9 01		lda #$01	        LDA #( VDMA_CTRL_Enable )
.1e058a		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e058e		a9 00		lda #$00	        LDA #$00
.1e0590		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e0594		c2 20		rep #$20	                REP #$20        ; set A long
.1e0596		a9 00 96	lda #$9600	        LDA #$9600      ; Set up the Source
.1e0599		8f 02 04 af	sta $af0402	        STA @l VDMA_SRC_ADDY_L
.1e059d		e2 20		sep #$20	                SEP #$20        ; set A short
.1e059f		a9 00		lda #$00	        LDA #$00
.1e05a1		8f 04 04 af	sta $af0404	        STA @l VDMA_SRC_ADDY_H
.1e05a5		c2 20		rep #$20	                REP #$20        ; set A long
.1e05a7		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e05aa		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e05ae		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05b0		a9 00		lda #$00	        LDA #$00
.1e05b2		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e05b6		c2 20		rep #$20	                REP #$20        ; set A long
.1e05b8		a9 00 14	lda #$1400	        LDA #<>(320*16)
.1e05bb		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e05bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05c1		a9 00		lda #$00	        LDA #`(320*16)
.1e05c3		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e05c7		a9 00		lda #$00	        LDA #$00
.1e05c9		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e05cd		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e05d1		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e05d3		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e05d7		ea		nop		        NOP
.1e05d8		ea		nop		        NOP
.1e05d9		ea		nop		        NOP
.1e05da						SS_VDMA_CLR_LOOPB:
.1e05da		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e05de		29 80		and #$80	        AND #$80
.1e05e0		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e05e2		f0 f6		beq $1e05da	        BEQ SS_VDMA_CLR_LOOPB
.1e05e4		ea		nop		        NOP
.1e05e5		a9 00		lda #$00	        LDA #$00
.1e05e7		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e05eb		6b		rtl		        RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/Splashscreen_Text_Display.asm

=$000098					TEXT_SRC_PTR_L      = $000098
=$00009a					TEXT_SRC_PTR_H      = $00009A
=$00009c					TEXT_DST_PTR_L      = $00009C
=$00009e					TEXT_DST_PTR_H      = $00009E
=$0000a0					TEXT_INDEX          = $0000A0
=$0000a0					MOD_SELECT_L        = $0000A0
=$0000a2					MOD_SELECT_H        = $0000A2
=$0000a2					TEXT_CURSOR_X       = $0000A2
=$0000a4					TEXT_CURSOR_Y       = $0000A4
=$0000a6					LINE_INDEX          = $0000A6
=$0000a8					COLOR_DST_PTR_L     = $0000A8
=$0000aa					COLOR_DST_PTR_H     = $0000AA
=$0000b0					MODEL               = $0000B0
=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
.1e05ec						Set_Text_Color:
.1e05ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e05ee		a9 00 00	lda #$0000	            LDA #00
.1e05f1		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e05f3		a9 30 00	lda #$0030	            LDA #48
.1e05f6		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e05f8		20 ec 08	jsr $1e08ec	            JSR Line_Display_Compute_Pointer
.1e05fb		a0 00 00	ldy #$0000	            LDY #$0000
.1e05fe		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0600		a9 40		lda #$40	            LDA #$40
.1e0602						SetColorBranch:
.1e0602		97 a8		sta [$a8],y	            STA [COLOR_DST_PTR_L],Y
.1e0604		c8		iny		            INY
.1e0605		c0 50 00	cpy #$0050	            CPY #80
.1e0608		d0 f8		bne $1e0602	            BNE SetColorBranch
.1e060a		60		rts		            RTS
.1e060b						Model_Update_Info_Field:
.1e060b		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e060d		a9 00 00	lda #$0000	            LDA #$0000
.1e0610		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0612		a5 b0		lda $b0		            LDA MODEL
.1e0614		0a		asl a		            ASL
.1e0615		0a		asl a		            ASL
.1e0616		aa		tax		            TAX
.1e0617		c2 20		rep #$20	                REP #$20        ; set A long
.1e0619		bf 9f 0c 1e	lda $1e0c9f,x	            LDA MODEL_TABLE, X
.1e061d		85 a0		sta $a0		            STA MOD_SELECT_L
.1e061f		bf a1 0c 1e	lda $1e0ca1,x	            LDA MODEL_TABLE + 2, X
.1e0623		85 a2		sta $a2		            STA MOD_SELECT_H
.1e0625		a0 00 00	ldy #$0000	            LDY #$0000
.1e0628		84 a6		sty $a6		            STY LINE_INDEX
.1e062a						Next_Change_Here:
.1e062a		c2 20		rep #$20	                REP #$20        ; set A long
.1e062c		a4 a6		ldy $a6		            LDY LINE_INDEX
.1e062e		bb		tyx		            TYX
.1e062f		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e0631		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e0633		bf ef 0c 1e	lda $1e0cef,x	            LDA LINE_MOD, X
.1e0637		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0639		c8		iny		            INY
.1e063a		c8		iny		            INY
.1e063b		bb		tyx		            TYX
.1e063c		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e063e		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e0640		bf ef 0c 1e	lda $1e0cef,x	            LDA LINE_MOD, X
.1e0644		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0646		c8		iny		            INY
.1e0647		c8		iny		            INY
.1e0648		84 a6		sty $a6		            STY LINE_INDEX
.1e064a		c0 10 00	cpy #$0010	            CPY #16
.1e064d		f0 10		beq $1e065f	            BEQ LetsMoveOn
.1e064f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0651		a0 00 00	ldy #$0000	            LDY #$0000
.1e0654						nextchar:
.1e0654		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e0656		c9 00		cmp #$00	            CMP #$00
.1e0658		f0 d0		beq $1e062a	            BEQ Next_Change_Here
.1e065a		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e065c		c8		iny		            INY
.1e065d		80 f5		bra $1e0654	            BRA nextchar
.1e065f						LetsMoveOn:
.1e065f		af fb 0c 1e	lda $1e0cfb	            LDA LINE_MOD + 12
.1e0663		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0665		a0 00 00	ldy #$0000	            LDY #$0000
.1e0668		e2 20		sep #$20	                SEP #$20        ; set A short
.1e066a		af 05 e8 af	lda $afe805	            LDA @lREVOFPCB_C
.1e066e		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0670		c8		iny		            INY
.1e0671		af 06 e8 af	lda $afe806	            LDA @lREVOFPCB_4
.1e0675		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0677		c8		iny		            INY
.1e0678		af 07 e8 af	lda $afe807	            LDA @lREVOFPCB_A
.1e067c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e067e		18		clc		            CLC
.1e067f		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR   ; it is in BCD
.1e0683		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e0686		8f ca 0a 1e	sta $1e0aca	            STA @lLINE8 + 56    ; FAT VICKY in U/U+ Model
.1e068a		8f 03 0b 1e	sta $1e0b03	            STA @lLINE9 + 47    ; GABE in FMX
.1e068e		8f 49 0b 1e	sta $1e0b49	            STA @lLINE10 + 51   ; VICKY II in FMX
.1e0692		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR
.1e0696		29 0f		and #$0f	            AND #$0F
.1e0698		69 30		adc #$30	            ADC #$30
.1e069a		8f cb 0a 1e	sta $1e0acb	            STA @lLINE8 + 57    ; FAT VICKY in U/U+ Model
.1e069e		8f 04 0b 1e	sta $1e0b04	            STA @lLINE9 + 48    ; GABE in FMX
.1e06a2		8f 4a 0b 1e	sta $1e0b4a	            STA @lLINE10 + 52   ; VICKY II in FMX
.1e06a6		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR   ; it is in BCD
.1e06aa		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e06ad		8f cd 0a 1e	sta $1e0acd	            STA @lLINE8 + 59    ; FAT VICKY in U/U+ Model
.1e06b1		8f 06 0b 1e	sta $1e0b06	            STA @lLINE9 + 50    ; GABE in FMX
.1e06b5		8f 4c 0b 1e	sta $1e0b4c	            STA @lLINE10 + 54   ; VICKY II in FMX
.1e06b9		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR
.1e06bd		29 0f		and #$0f	            AND #$0F
.1e06bf		69 30		adc #$30	            ADC #$30
.1e06c1		8f ce 0a 1e	sta $1e0ace	            STA @lLINE8 + 60    ; FAT VICKY in U/U+ Model
.1e06c5		8f 07 0b 1e	sta $1e0b07	            STA @lLINE9 + 51    ; GABE in FMX
.1e06c9		8f 4d 0b 1e	sta $1e0b4d	            STA @lLINE10 + 55   ; VICKY II in FMX
.1e06cd		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR   ; it is in BCD
.1e06d1		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e06d4		8f d0 0a 1e	sta $1e0ad0	            STA @lLINE8 + 62    ; FAT VICKY in U/U+ Model
.1e06d8		8f 09 0b 1e	sta $1e0b09	            STA @lLINE9 + 53    ; GABE in FMX
.1e06dc		8f 4f 0b 1e	sta $1e0b4f	            STA @lLINE10 + 57   ; VICKY II in FMX
.1e06e0		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR
.1e06e4		29 0f		and #$0f	            AND #$0F
.1e06e6		69 30		adc #$30	            ADC #$30
.1e06e8		8f d1 0a 1e	sta $1e0ad1	            STA @lLINE8 + 63    ; FAT VICKY in U/U+ Model
.1e06ec		8f 0a 0b 1e	sta $1e0b0a	            STA @lLINE9 + 54    ; GABE in FMX
.1e06f0		8f 50 0b 1e	sta $1e0b50	            STA @lLINE10 + 58   ; VICKY II in FMX
.1e06f4		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e06f8		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e06fb		8f c0 0a 1e	sta $1e0ac0	            STA @lLINE8 + 46    ; U/U+
.1e06ff		8f f9 0a 1e	sta $1e0af9	            STA @lLINE9 + 37    ; When FMX, this is the Info for GABE
.1e0703		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e0707		29 0f		and #$0f	            AND #$0F
.1e0709		69 30		adc #$30	            ADC #$30
.1e070b		8f c1 0a 1e	sta $1e0ac1	            STA @lLINE8 + 47
.1e070f		8f fa 0a 1e	sta $1e0afa	            STA @lLINE9 + 38    ; When FMX, this is the Info for GABE
.1e0713		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e0717		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e071a		8f 3f 0b 1e	sta $1e0b3f	            STA @lLINE10 + 41    ; When FMX, this is the Info for GABE
.1e071e		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e0722		29 0f		and #$0f	            AND #$0F
.1e0724		69 30		adc #$30	            ADC #$30
.1e0726		8f 40 0b 1e	sta $1e0b40	            STA @lLINE10 + 42    ; When FMX, this is the Info for GABE
.1e072a		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e072e		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e0731		8f c2 0a 1e	sta $1e0ac2	            STA @lLINE8 + 48
.1e0735		8f fb 0a 1e	sta $1e0afb	            STA @lLINE9 + 39    ; When FMX, this is the Info for GABE
.1e0739		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e073d		29 0f		and #$0f	            AND #$0F
.1e073f		69 30		adc #$30	            ADC #$30
.1e0741		8f c3 0a 1e	sta $1e0ac3	            STA @lLINE8 + 49
.1e0745		8f fc 0a 1e	sta $1e0afc	            STA @lLINE9 + 40    ; When FMX, this is the Info for GABE
.1e0749		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e074d		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e0750		8f 41 0b 1e	sta $1e0b41	            STA @lLINE10 + 43    ; When FMX, this is the Info for GABE
.1e0754		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e0758		29 0f		and #$0f	            AND #$0F
.1e075a		69 30		adc #$30	            ADC #$30
.1e075c		8f 42 0b 1e	sta $1e0b42	            STA @lLINE10 + 44    ; When FMX, this is the Info for GABE
.1e0760		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e0764		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e0767		8f b4 0a 1e	sta $1e0ab4	            STA @lLINE8 + 34
.1e076b		8f ed 0a 1e	sta $1e0aed	            STA @lLINE9 + 25    ; When FMX, this is the Info for GABE
.1e076f		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e0773		29 0f		and #$0f	            AND #$0F
.1e0775		69 30		adc #$30	            ADC #$30
.1e0777		8f b5 0a 1e	sta $1e0ab5	            STA @lLINE8 + 35
.1e077b		8f ee 0a 1e	sta $1e0aee	            STA @lLINE9 + 26    ; When FMX, this is the Info for GABE
.1e077f		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e0783		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e0786		8f 34 0b 1e	sta $1e0b34	            STA @lLINE10 + 30    ; When FMX, this is the Info for GABE
.1e078a		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e078e		29 0f		and #$0f	            AND #$0F
.1e0790		69 30		adc #$30	            ADC #$30
.1e0792		8f 35 0b 1e	sta $1e0b35	            STA @lLINE10 + 31    ; When FMX, this is the Info for GABE
.1e0796		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e079a		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e079d		8f b6 0a 1e	sta $1e0ab6	            STA @lLINE8 + 36
.1e07a1		8f ef 0a 1e	sta $1e0aef	            STA @lLINE9 + 27    ; When FMX, this is the Info for GABE
.1e07a5		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e07a9		29 0f		and #$0f	            AND #$0F
.1e07ab		69 30		adc #$30	            ADC #$30
.1e07ad		8f b7 0a 1e	sta $1e0ab7	            STA @lLINE8 + 37
.1e07b1		8f f0 0a 1e	sta $1e0af0	            STA @lLINE9 + 28    ; When FMX, this is the Info for GABE
.1e07b5		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e07b9		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e07bc		8f 36 0b 1e	sta $1e0b36	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e07c0		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e07c4		29 0f		and #$0f	            AND #$0F
.1e07c6		69 30		adc #$30	            ADC #$30
.1e07c8		8f 36 0b 1e	sta $1e0b36	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e07cc		20 3f 08	jsr $1e083f	            JSR GODETECTHIRES ; Dip-Switch and Change Text
.1e07cf		20 60 08	jsr $1e0860	            JSR GODETECTHDD   ; Dip-Switch and Change Text
.1e07d2		20 61 08	jsr $1e0861	            JSR GODETECTEXP   ; Go Check if there is a Card Change Text
.1e07d5		a5 b0		lda $b0		            LDA MODEL
.1e07d7		29 03		and #$03	            AND #$03
.1e07d9		c9 00		cmp #$00	            CMP #$00
.1e07db		f0 12		beq $1e07ef	            BEQ Erase_FATVicky_Line;
.1e07dd		c9 01		cmp #$01	            CMP #$01
.1e07df		f0 29		beq $1e080a	            BEQ Erase_2Lines;
.1e07e1		c9 02		cmp #$02	            CMP #$02
.1e07e3		f0 25		beq $1e080a	            BEQ Erase_2Lines;
.1e07e5		60		rts		            RTS
.1e07e6						HighNibblerBCD:
.1e07e6		29 f0		and #$f0	            AND #$F0
.1e07e8		4a		lsr a		            LSR A
.1e07e9		4a		lsr a		            LSR A
.1e07ea		4a		lsr a		            LSR A
.1e07eb		4a		lsr a		            LSR A
.1e07ec		69 30		adc #$30	            ADC #$30
.1e07ee		60		rts		            RTS
.1e07ef						Erase_FATVicky_Line:
.1e07ef		c2 20		rep #$20	                REP #$20        ; set A long
.1e07f1		a9 92 0a	lda #$0a92	            LDA #<>LINE8
.1e07f4		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e07f6		a9 1e 00	lda #$001e	            LDA #`LINE8
.1e07f9		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e07fb		e2 20		sep #$20	                SEP #$20        ; set A short
.1e07fd		a0 00 00	ldy #$0000	            LDY #$0000
.1e0800		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e0802		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0804		c8		iny		            INY
.1e0805		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e0807		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0809		60		rts		            RTS
.1e080a						Erase_2Lines
.1e080a		c2 20		rep #$20	                REP #$20        ; set A long
.1e080c		a9 d4 0a	lda #$0ad4	            LDA #<>LINE9
.1e080f		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0811		a9 1e 00	lda #$001e	            LDA #`LINE9
.1e0814		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0816		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0818		a0 00 00	ldy #$0000	            LDY #$0000
.1e081b		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e081d		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e081f		c8		iny		            INY
.1e0820		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e0822		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0824		c2 20		rep #$20	                REP #$20        ; set A long
.1e0826		a9 16 0b	lda #$0b16	            LDA #<>LINE10
.1e0829		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e082b		a9 1e 00	lda #$001e	            LDA #`LINE10
.1e082e		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0830		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0832		a0 00 00	ldy #$0000	            LDY #$0000
.1e0835		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e0837		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0839		c8		iny		            INY
.1e083a		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e083c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e083e		60		rts		            RTS
.1e083f						GODETECTHIRES
.1e083f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0841		af 02 00 af	lda $af0002	            LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.1e0845		29 10		and #$10	            AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.1e0847		c9 10		cmp #$10	            CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.1e0849		f0 14		beq $1e085f	            BEQ WeAreDone
.1e084b		c2 10		rep #$10	                REP #$10        ; set X long
.1e084d		a2 00 00	ldx #$0000	            LDX #$0000
.1e0850						ChangeNextChar
.1e0850		bf 4f 0d 1e	lda $1e0d4f,x	            LDA @l ON_TEXT, X
.1e0854		c9 00		cmp #$00	            CMP #$00
.1e0856		f0 07		beq $1e085f	            BEQ WeAreDone
.1e0858		9f 43 0c 1e	sta $1e0c43,x	            STA @l LINE17 +13, X
.1e085c		e8		inx		            INX
.1e085d		d0 f1		bne $1e0850	            BNE ChangeNextChar
.1e085f						WeAreDone
.1e085f						NoExpansionCardPresent
.1e085f		60		rts		            RTS
.1e0860						GODETECTHDD
.1e0860		60		rts		            RTS
.1e0861						GODETECTEXP
.1e0861		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0863		af 87 e8 af	lda $afe887	            LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.1e0867		29 10		and #$10	            AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.1e0869		c9 10		cmp #$10	            CMP #GABE_SYS_STAT_EXP
.1e086b		d0 25		bne $1e0892	            BNE NoExpansionCardPresent
.1e086d		c2 10		rep #$10	                REP #$10        ; set X long
.1e086f		a2 00 00	ldx #$0000	            LDX #$0000
.1e0872						ChangeNextChar
.1e0872		bf 53 0d 1e	lda $1e0d53,x	            LDA @l YES_TEXT, X
.1e0876		c9 00		cmp #$00	            CMP #$00
.1e0878		f0 07		beq $1e0881	            BEQ WeAreDone
.1e087a		9f 75 0c 1e	sta $1e0c75,x	            STA @l LINE19 +26, X
.1e087e		e8		inx		            INX
.1e087f		d0 f1		bne $1e0872	            BNE ChangeNextChar
.1e0881						WeAreDone
.1e0881		a2 00 00	ldx #$0000	            LDX #$0000
.1e0884						AddCardName
.1e0884		bf 00 00 ae	lda $ae0000,x	            LDA @l EVID_ID_NAME_ASCII, X
.1e0888		9f 79 0c 1e	sta $1e0c79,x	            STA @l LINE20, X
.1e088c		e8		inx		            INX
.1e088d		e0 10 00	cpx #$0010	            CPX #$10
.1e0890		d0 f2		bne $1e0884	            BNE AddCardName
.1e0892						NoExpansionCardPresent
.1e0892		60		rts		            RTS
.1e0893						Line_Setup_Before_Display
.1e0893		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e0895		a5 a6		lda $a6		            LDA LINE_INDEX
.1e0897		c9 17 00	cmp #$0017	            CMP #NumberOfEntry
.1e089a		f0 33		beq $1e08cf	            BEQ DONE
.1e089c		a5 a6		lda $a6		            LDA LINE_INDEX
.1e089e		0a		asl a		            ASL A
.1e089f		0a		asl a		            ASL A
.1e08a0		aa		tax		            TAX
.1e08a1		bf 14 09 1e	lda $1e0914,x	            LDA TEXT_TABLE, X
.1e08a5		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e08a7		bf 16 09 1e	lda $1e0916,x	            LDA TEXT_TABLE + 2, X
.1e08ab		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e08ad		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08af		0a		asl a		            ASL A
.1e08b0		aa		tax		            TAX
.1e08b1		bf 70 09 1e	lda $1e0970,x	            LDA TEXT_POSX, X
.1e08b5		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e08b7		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e08bb		bf 9e 09 1e	lda $1e099e,x	            LDA TEXT_POSY, X
.1e08bf		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e08c1		8f 16 00 af	sta $af0016	            STA @l VKY_TXT_CURSOR_Y_REG_L
.1e08c5		20 ec 08	jsr $1e08ec	            JSR Line_Display_Compute_Pointer
.1e08c8		a9 00 00	lda #$0000	            LDA #$0000
.1e08cb		85 a0		sta $a0		            STA TEXT_INDEX
.1e08cd		e6 a6		inc $a6		            INC LINE_INDEX
.1e08cf						DONE:
.1e08cf		60		rts		            RTS
.1e08d0						Line_Display_1_Character
.1e08d0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08d2		e6 a2		inc $a2		            INC TEXT_CURSOR_X       ; Always put the Cursor In Front of the "To be displayed Char"
.1e08d4		a5 a2		lda $a2		            LDA TEXT_CURSOR_X
.1e08d6		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e08da		e2 20		sep #$20	                SEP #$20        ; set A short
.1e08dc		38		sec		            SEC
.1e08dd		a4 a0		ldy $a0		            LDY TEXT_INDEX
.1e08df		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e08e1		c9 00		cmp #$00	            CMP #$00
.1e08e3		f0 06		beq $1e08eb	            BEQ WE_ARE_DONE;
.1e08e5		18		clc		            CLC
.1e08e6		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e08e8		c8		iny		            INY
.1e08e9		84 a0		sty $a0		            STY TEXT_INDEX
.1e08eb						WE_ARE_DONE:
.1e08eb		60		rts		            RTS
.1e08ec						Line_Display_Compute_Pointer
.1e08ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08ee		a5 a4		lda $a4		            LDA TEXT_CURSOR_Y
.1e08f0		8f 00 01 00	sta $000100	            STA @lUNSIGNED_MULT_A_LO
.1e08f4		a9 50 00	lda #$0050	            LDA #80
.1e08f7		8f 02 01 00	sta $000102	            STA @lUNSIGNED_MULT_B_LO
.1e08fb		18		clc		            CLC
.1e08fc		af 04 01 00	lda $000104	            LDA @lUNSIGNED_MULT_AL_LO
.1e0900		65 a2		adc $a2		            ADC TEXT_CURSOR_X
.1e0902		69 00 a0	adc #$a000	            ADC #$A000
.1e0905		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0907		69 00 20	adc #$2000	            ADC #$2000
.1e090a		85 a8		sta $a8		            STA COLOR_DST_PTR_L
.1e090c		a9 af 00	lda #$00af	            LDA #$00AF
.1e090f		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0911		85 aa		sta $aa		            STA COLOR_DST_PTR_H
.1e0913		60		rts		            RTS
>1e0914		cc 09 1e 00 ed 09 1e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>1e091c		03 0a 1e 00 11 0a 1e 00 29 0a 1e 00 4c 0a 1e 00
>1e092c		70 0a 1e 00 85 0a 1e 00
>1e0934		92 0a 1e 00 d4 0a 1e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>1e093c		16 0b 1e 00 58 0b 1e 00 62 0b 1e 00 8b 0b 1e 00
>1e094c		c2 0b 1e 00 e5 0b 1e 00
>1e0954		f7 0b 1e 00 36 0c 1e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>1e095c		48 0c 1e 00 5b 0c 1e 00 79 0c 1e 00 8a 0c 1e 00
>1e096c		9d 0c 1e 00
>1e0970		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>1e0978		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>1e0988		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>1e0998		2d 00 1e 00 48 00
>1e099e		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>1e09a6		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>1e09b6		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>1e09c6		35 00 39 00 39 00
=6						leftAlign = 6
>1e09cc		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>1e09d4		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>1e09e4		20 20 20 20 20 20 20 20 00
>1e09ed		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>1e09f5		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>1e0a03		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>1e0a0b		4e 46 4f 3a 20 00
>1e0a11		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>1e0a19		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>1e0a29		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>1e0a31		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>1e0a41		20 20 20 20 20 20 20 20 20 20 00
>1e0a4c		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>1e0a54		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>1e0a64		20 20 20 20 20 20 20 20 20 20 20 00
>1e0a70		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>1e0a78		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>1e0a85		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>1e0a8d		53 29 3a 20 00
>1e0a92		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>1e0a9a		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>1e0aaa		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>1e0aba		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>1e0aca		30 30 2f 30 30 2f 30 30 20 00
>1e0ad4		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533 - GABE - REV:0000 SUBREV:0000 DATE:00/00/00          ", $00
>1e0adc		35 33 33 20 2d 20 47 41 42 45 20 2d 20 52 45 56
>1e0aec		3a 30 30 30 30 20 53 55 42 52 45 56 3a 30 30 30
>1e0afc		30 20 44 41 54 45 3a 30 30 2f 30 30 2f 30 30 20
>1e0b0c		20 20 20 20 20 20 20 20 20 00
>1e0b16		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551 - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00      ", $00
>1e0b1e		35 35 31 20 2d 20 56 49 43 4b 59 20 49 49 20 2d
>1e0b2e		20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45 56
>1e0b3e		3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30 30
>1e0b4e		2f 30 30 20 20 20 20 20 20 00
>1e0b58		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>1e0b60		20 00
>1e0b62		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>1e0b6a		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>1e0b7a		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>1e0b8a		00
>1e0b8b		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>1e0b93		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>1e0ba3		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>1e0bb3		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>1e0bc2		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>1e0bca		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>1e0bda		4c 20 54 52 45 4d 42 4c 41 59 00
>1e0be5		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>1e0bed		20 4d 45 4e 55 2d 2d 2d 2d 00
>1e0bf7		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>1e0bff		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>1e0c0f		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>1e0c1f		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>1e0c2f		46 41 55 4c 54 20 00
>1e0c36		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>1e0c3e		4f 44 45 3a 20 4f 46 46 20 00
>1e0c48		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>1e0c50		41 4c 4c 45 44 3a 20 2d 2d 20 00
>1e0c5b		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>1e0c63		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>1e0c73		3a 20 4e 4f 20 00
>1e0c79		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1e0c81		00 00 00 00 00 00 00 00 00
>1e0c8a		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>1e0c92		46 4f 45 4e 49 58 2e 43 4f 4d 00
>1e0c9d		20 00				LINE22 .text " ", $00
>1e0c9f		af 0c 1e 00 bf 0c 1e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>1e0ca7		cf 0c 1e 00 df 0c 1e 00
>1e0caf		ff 0c 1e 00 3f 0d 1e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>1e0cb7		3f 0d 1e 00 00 00 00 00
>1e0cbf		0f 0d 1e 00 3f 0d 1e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>1e0cc7		2f 0d 1e 00 00 00 00 00
>1e0ccf		1f 0d 1e 00 2f 0d 1e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>1e0cd7		2f 0d 1e 00 00 00 00 00
>1e0cdf		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>1e0ce7		00 00 00 00 00 00 00 00
>1e0cef		dc 09 1e 00 3b 0a 1e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>1e0cf7		5f 0a 1e 00 7e 0a 1e 00
>1e0cff		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>1e0d07		4e 49 58 20 46 4d 58 00
>1e0d0f		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>1e0d17		4e 49 58 20 55 2b 20 00
>1e0d1f		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>1e0d27		4e 49 58 20 55 20 20 00
>1e0d2f		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>1e0d37		32 20 42 59 54 45 53 00
>1e0d3f		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>1e0d47		34 20 42 59 54 45 53 00
>1e0d4f		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>1e0d53		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src\kernel.asm

>1e0d57						.align 256
.1e0e00						SS_MONIKER_LUT
>1e0e00		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>1e0e08		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>1e0e18		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>1e0e28		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>1e0e38		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>1e0e48		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>1e0e58		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>1e0e68		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>1e0e78		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>1e0e88		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>1e0e98		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>1e0ea8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>1e0eb8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>1e0ec8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>1e0ed8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>1e0ee8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>1e0ef8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>1e0f08		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>1e0f18		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>1e0f28		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>1e0f38		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>1e0f48		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>1e0f58		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>1e0f68		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>1e0f78		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>1e0f88		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>1e0f98		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>1e0fa8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>1e0fb8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>1e0fc8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>1e0fd8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>1e0fe8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>1e0ff8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>1e1008		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>1e1018		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>1e1028		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>1e1038		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>1e1048		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>1e1058		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>1e1068		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>1e1078		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>1e1088		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>1e1098		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>1e10a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>1e10b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>1e10c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>1e10d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>1e10e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>1e10f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>1e1108		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>1e1118		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>1e1128		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>1e1138		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>1e1148		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>1e1158		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>1e1168		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>1e1178		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>1e1188		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>1e1198		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>1e11a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>1e11b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>1e11c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>1e11d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>1e11e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>1e11f8		ff ff ff 00 e5 80 80 00
.1e1200						SS_MONIKER
>1e1200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>1e1208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>1e1808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e1818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e1828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e1958		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e1968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1a98		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>1e1aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1bd8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1d08		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1d18		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>1e1d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1e48		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1e58		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1f88		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e1f98		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e20c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e20d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e20e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2128		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>1e2138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2208		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>1e2218		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e2228		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2268		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e2278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2348		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e2358		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e23a8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e23b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2488		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2498		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e24a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e24e8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e24f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e25c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e25d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e25e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2628		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>1e2638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2668		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>1e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e2708		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2718		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2738		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2768		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>1e2778		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e2788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2798		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>1e27a8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e27b8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e27c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e27d8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>1e27e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e2848		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2868		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e28a8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>1e28b8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>1e28c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e28d8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>1e28e8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>1e28f8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2918		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>1e2928		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e2938		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e2948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2958		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>1e2968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2978		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>1e2988		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>1e29b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>1e29e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>1e29f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1e2a08		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>1e2a18		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>1e2a28		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>1e2a38		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e2a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2a58		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>1e2a68		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>1e2a78		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>1e2a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2a98		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>1e2aa8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>1e2ac8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>1e2ad8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>1e2ae8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>1e2af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b18		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2b28		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>1e2b38		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e2b48		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2b58		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e2b68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2b78		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2b98		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ba8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>1e2bb8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>1e2bc8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>1e2bd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2be8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>1e2bf8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2c08		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c18		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>1e2c28		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>1e2c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c58		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2c68		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c78		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2c88		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2c98		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>1e2ca8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e2cb8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2cc8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>1e2cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ce8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>1e2cf8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e2d08		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>1e2d18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2d28		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>1e2d38		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2d48		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2d58		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>1e2d68		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>1e2d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2d98		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2da8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2db8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2dc8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e2dd8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e2de8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e2df8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2e08		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e28		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>1e2e38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e48		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e68		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2e78		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>1e2e88		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2e98		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2ea8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>1e2eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1e2ed8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ee8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2ef8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e2f08		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f18		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>1e2f28		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f38		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2f48		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>1e2f88		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f98		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2fa8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2fb8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>1e2fc8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2fd8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2fe8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>1e2ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3008		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>1e3018		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3028		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e3038		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e3048		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3058		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>1e3068		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>1e3078		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3088		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e3098		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e30a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>1e30b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>1e30c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e30d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>1e30e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>1e30f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e3108		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>1e3118		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>1e3128		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>1e3138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3148		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e3158		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e3168		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3178		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3198		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e31a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e31b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e31c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e31d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>1e31e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>1e31f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>1e3208		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e3218		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>1e3228		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3238		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3248		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3258		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>1e3268		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3288		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3298		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e32a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e32b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>1e32d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e32e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3308		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>1e3318		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>1e3328		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3338		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>1e3348		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3358		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e3368		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3378		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3388		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>1e3398		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>1e33a8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e33b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e33c8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e33d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e33e8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>1e33f8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3408		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>1e3418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3428		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3448		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>1e3458		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>1e3468		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>1e3478		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>1e3488		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3498		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e34a8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e34b8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e34c8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e34d8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>1e34e8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e34f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3508		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3518		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>1e3528		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>1e3538		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3548		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e3558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e3568		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3588		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e3598		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e35a8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e35b8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e35c8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e35d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e35e8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e35f8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>1e3608		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e3618		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>1e3628		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3648		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3658		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>1e3668		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>1e3678		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3688		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>1e3698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e36a8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e36b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e36c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e36d8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e36e8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e36f8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3708		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3728		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3738		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e3748		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3758		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3768		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e3778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3788		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3798		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>1e37a8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>1e37b8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e37c8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e37d8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e37e8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>1e37f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3808		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e3818		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e3828		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3838		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3848		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3858		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e3868		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3878		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3888		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3898		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e38a8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e38b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e38c8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e38d8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>1e38e8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>1e38f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3908		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3918		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3928		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>1e3938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3948		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3958		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>1e3968		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>1e3978		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3988		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3998		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e39a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e39b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>1e39c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e39d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e39e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>1e39f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a08		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3a18		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e3a28		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3a38		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>1e3a48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a58		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>1e3a68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a78		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a88		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3a98		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>1e3aa8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3ab8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3ac8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3ad8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>1e3ae8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3af8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3b08		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e3b18		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3b28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e3b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e3b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b68		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3b78		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>1e3b88		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3b98		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>1e3ba8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3bb8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3bc8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>1e3bd8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>1e3be8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3bf8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3c08		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3c18		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3c28		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e3c38		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>1e3c48		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3c58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3c68		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e3c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3c88		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>1e3c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ca8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e3cb8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3cc8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cd8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3ce8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cf8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3d08		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>1e3d18		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>1e3d28		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d38		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3d48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3d58		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>1e3d68		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3d78		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>1e3d88		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d98		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3da8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3dc8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>1e3dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3de8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3df8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3e08		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>1e3e18		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3e28		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e38		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e3e48		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e58		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>1e3e68		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3e78		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3e88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e98		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e3ea8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3eb8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3ec8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3ed8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3ee8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f08		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f28		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3f38		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e3f48		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>1e3f58		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>1e3f68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f78		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e3f88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f98		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>1e3fa8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3fd8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>1e3fe8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>1e3ff8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e4008		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e4018		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e4028		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4048		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4068		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e4078		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4088		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e4098		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e40a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>1e40b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>1e40c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e40d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e40e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e40f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>1e4108		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>1e4118		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4128		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>1e4138		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4148		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4158		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4188		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>1e41b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>1e41e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4208		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4218		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4228		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4238		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>1e4248		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1e4258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4268		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>1e4278		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>1e4288		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4298		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e42a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e42d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1e42f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4308		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e4318		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4328		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e4338		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4348		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e4358		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4368		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4378		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>1e4388		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e43a8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e43b8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e43c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e43d8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e43e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e43f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4408		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4428		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4448		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e4458		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e4478		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4488		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1e4498		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e44a8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e44b8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e44c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e44d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e44e8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e44f8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e4508		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1e4518		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4528		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4548		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4558		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4568		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1e4578		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>1e4588		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>1e4598		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e45a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e45b8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e45c8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e45d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e45e8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e45f8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e4608		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4618		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4628		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4638		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>1e4648		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4658		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4668		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4688		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4698		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>1e46a8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e46b8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>1e46c8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e46d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e46e8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e46f8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4708		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e4718		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4728		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>1e4738		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>1e4748		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1e4758		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>1e4768		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4778		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4788		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>1e4798		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e47a8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e47b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e47c8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e47d8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>1e47e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e47f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1e4808		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4818		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4828		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4848		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4868		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>1e4878		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>1e4888		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>1e4898		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>1e48a8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e48b8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>1e48c8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e48d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1e48e8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e48f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4908		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4918		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4928		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4938		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4948		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4958		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4968		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>1e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4988		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e49a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>1e49b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>1e49c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>1e49d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>1e49e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e49f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4a08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>1e4a18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>1e4a28		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4a48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4a58		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>1e4a88		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a98		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4aa8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ac8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4ae8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4af8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1e4b08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b28		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4b38		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4b48		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4b58		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>1e4b68		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4b88		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4b98		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ba8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>1e4bd8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4be8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4c08		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4c28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c38		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>1e4c48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c68		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4c88		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e4c98		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4ca8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4cc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>1e4cd8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ce8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4cf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4d18		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d48		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d68		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d78		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>1e4d88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d98		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>1e4da8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4db8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4dc8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4dd8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4de8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>1e4df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4e08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>1e4e18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>1e4e28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e38		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>1e4e58		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>1e4e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4e88		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ea8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4eb8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ec8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ed8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4ee8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ef8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e4f08		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4f18		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4f28		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4f38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f58		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>1e4f68		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f78		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>1e4f98		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>1e4fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fc8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e4fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fe8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4ff8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5018		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>1e5028		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5038		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>1e5048		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e5058		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5068		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e5078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5088		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5098		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>1e50a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>1e50b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e50c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>1e50d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e50e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>1e50f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5108		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5128		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5138		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5148		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>1e5158		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>1e5168		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>1e5178		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>1e5188		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>1e5198		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e51a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e51d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>1e51e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>1e51f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5208		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5218		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>1e5228		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e5238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5248		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5268		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>1e5278		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5288		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>1e5298		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>1e52a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e52b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>1e52c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>1e52d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e52e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e52f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5308		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5318		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>1e5328		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>1e5338		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>1e5348		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5358		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>1e5368		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5388		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>1e5398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53a8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e53b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e53c8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e53d8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>1e53e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53f8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>1e5408		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>1e5418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e5428		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5448		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5458		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5468		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e5478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>1e54a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54c8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>1e54d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e5508		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5518		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>1e5528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5538		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e5548		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>1e5558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e5568		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5588		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>1e5598		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55a8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e5608		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>1e5618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5658		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>1e5668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5678		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e5688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56a8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56c8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>1e56d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>1e5748		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5798		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e57a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e57c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57e8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e5888		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>1e5898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e58d8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>1e58e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5928		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e59c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e59d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5a18		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>1e5a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>1e5b08		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>1e5c48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>1e61f8		00 00 00 00 00 00 00 00
.1e6200						SS_FMX_TXT
>1e6200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>1e6208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>1e64b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e64c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6558		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e65f8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6698		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e66a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e66f8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e6708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6738		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e6748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e6798		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e67a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e67d8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e67e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6838		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6878		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e6888		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e68c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e68d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e68e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6918		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>1e6928		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6968		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>1e6978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e69b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e69c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6a08		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>1e6a18		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a48		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a58		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6a68		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6aa8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>1e6ab8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ae8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6af8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6b08		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b28		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b48		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>1e6b58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b88		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b98		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>1e6ba8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6bc8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6be8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>1e6bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e6c28		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>1e6c38		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>1e6c48		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>1e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>1e6c68		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>1e6c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c88		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>1e6c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6cb8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>1e6cc8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>1e6cd8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>1e6ce8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e6d08		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>1e6d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d28		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>1e6d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d58		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>1e6d68		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6d78		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6d88		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6d98		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>1e6da8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>1e6db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6dc8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>1e6dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6de8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e6df8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e08		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e18		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6e28		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6e38		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>1e6e48		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>1e6e58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e68		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e88		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>1e6e98		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ea8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6eb8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>1e6ec8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6ed8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e6ee8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6ef8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6f08		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6f28		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>1e6f38		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f48		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f58		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>1e6f68		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6f78		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e6f88		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6f98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e6fa8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>1e6fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6fc8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>1e6fd8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6fe8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ff8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>1e7008		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e7018		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7028		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e7038		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e7048		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>1e7058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7068		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>1e7078		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7088		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7098		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>1e70a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e70b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>1e70c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e70d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>1e70e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>1e70f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7108		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>1e7118		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7128		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>1e7138		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>1e7148		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7158		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>1e7168		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e7178		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>1e7188		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>1e7198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e71a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>1e71b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e71c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>1e71d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e71e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e71f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>1e7208		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7218		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e7228		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7248		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7258		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e7268		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>1e7278		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7288		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7298		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e72a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>1e72b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e72c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e72d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7308		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e7318		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7328		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7338		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7348		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7358		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7368		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e7378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7388		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7398		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e73a8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e73b8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73c8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e73d8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e73e8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73f8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e7408		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>1e7418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7438		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7448		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7458		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7468		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>1e7478		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7488		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7498		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e74a8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e74b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e74e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74f8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7508		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>1e7518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7528		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7548		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e7558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7578		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>1e7588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7598		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e75a8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>1e75b8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75c8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e75d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75e8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e75f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7618		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e7628		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7638		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7648		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>1e7658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7668		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7678		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7688		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76b8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e76c8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>1e76d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e76e8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e76f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7708		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e7718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7758		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7768		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7778		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e7788		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7798		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e77a8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e77b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e77c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e77f8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7808		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7818		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7828		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7838		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7848		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7858		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7888		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>1e7898		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e78b8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e78c8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e78e8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e78f8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7928		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>1e7938		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7948		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>1e7958		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7968		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7978		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7988		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7998		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e79a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e79d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e79e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e79f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7a08		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a18		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7a28		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e7a38		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e7a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7a68		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a78		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a88		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>1e7a98		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7aa8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7ab8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7ac8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>1e7ad8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7af8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7b08		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b18		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b28		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7b38		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7b48		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7b58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7b68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e7b78		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ba8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>1e7bb8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>1e7bc8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7bd8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7be8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7bf8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7c08		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e7c18		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c48		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e7c58		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7c78		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c88		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>1e7c98		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7ca8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e7cb8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e7cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ce8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>1e7cf8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7d18		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d28		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>1e7d38		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e7d58		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d88		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>1e7d98		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7db8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7dc8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>1e7dd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7de8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7df8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e28		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>1e7e38		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7e58		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e68		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>1e7e78		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e88		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7e98		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ec8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7ed8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7ef8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7f08		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>1e7f18		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7f28		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7f38		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f68		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7f78		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7f88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7f98		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7fb8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7fd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8008		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8018		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e8038		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e8048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8058		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>1e8068		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e8078		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e8088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e80a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e80b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>1e8108		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>1e8118		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e8128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8148		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8158		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8168		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8178		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8188		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8198		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e81a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>1e81b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e81c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e81f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8208		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8218		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8228		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8238		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e8248		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8258		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8288		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8298		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e82e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e82f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e8308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8328		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8338		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8348		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8358		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8368		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8378		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>1e8388		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e8398		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e83a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83c8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e83d8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e83e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e83f8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>1e8408		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8418		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e8428		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e8438		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e8448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8478		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8488		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8498		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e84a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e84b8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e84c8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e84d8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e84e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e84f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8508		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e8518		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8528		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8538		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8548		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8558		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e8568		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8578		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e8588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85a8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e85b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85c8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e85d8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85e8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e85f8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>1e8608		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8618		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>1e8628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8648		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8658		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8668		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>1e8678		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8688		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e8698		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>1e86a8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e86b8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e86c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86e8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e86f8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8708		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>1e8718		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8728		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8738		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>1e8748		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8758		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8788		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8798		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87a8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87c8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e87d8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>1e87e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87f8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>1e8808		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8828		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8848		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e8858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8868		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8878		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>1e8888		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8898		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>1e88a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88c8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>1e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e88f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8908		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8918		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>1e8928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8938		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>1e8948		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8968		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>1e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e89a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e89b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>1e89e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a08		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>1e8a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8a48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a78		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>1e8a88		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8aa8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>1e8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8ae8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>1e8af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b18		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>1e8b28		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b48		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>1e8b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8b88		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e8b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bb8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>1e8bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8be8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>1e8bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8c28		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>1e8c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c58		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>1e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c88		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>1e8c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8cc8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8cf8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>1e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d28		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>1e8d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8d68		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d98		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1e8da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8dc8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8e08		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e8e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e38		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>1e8e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8ea8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>1e8eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ed8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e8ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8f48		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>1e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f78		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>1e8f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8fe8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>1e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e9028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e9088		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>1e9098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e90c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9128		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e9138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e91c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e91d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e9268		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>1e93f8		00 00 00 00 00 00 00 00
.1e9400						SS_UPlus_TXT
>1e9400		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>1e9408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>1e94f8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9558		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e95b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e95c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9618		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9668		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>1e9678		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e96c8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>1e96d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9728		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>1e9738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9788		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>1e9798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e97e8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>1e97f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9848		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>1e9858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e98a8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>1e98b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e98e8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>1e98f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9908		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e9948		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>1e9958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9968		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e99a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>1e99b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e99d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>1e99e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a08		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>1e9a18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a28		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e9a38		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a68		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9a78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9a88		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9a98		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>1e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ac8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9ad8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9ae8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9af8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>1e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9b48		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9b58		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e9b68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b88		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9ba8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9bb8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e9bc8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9be8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e9bf8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c08		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c18		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c28		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c48		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1e9c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c68		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c78		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ca8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9cb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9cc8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9cd8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e9ce8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d08		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9d18		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9d28		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9d38		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e9d48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d68		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9d78		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9d88		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e9d98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9da8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9dc8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9dd8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9de8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e9df8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e28		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e38		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e9e48		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e9e58		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>1e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e88		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e98		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e9ea8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9eb8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>1e9ec8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>1e9ed8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ee8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9ef8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f08		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9f18		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e9f28		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>1e9f38		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9f48		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9f58		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e9f78		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e9f88		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>1e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fa8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e9fc8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fd8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e9fe8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea008		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1ea018		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1ea028		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>1ea038		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea048		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>1ea058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea068		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea078		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1ea088		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>1ea098		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea0a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>1ea0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea0c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea0d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1ea0e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>1ea0f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea108		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1ea118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea128		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea138		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1ea148		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea158		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea168		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea188		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea198		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1ea1a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>1ea1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea1e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea1f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea208		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea218		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea228		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>1ea238		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea248		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea258		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea268		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea278		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>1ea288		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea298		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea2a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea2b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea2c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea2d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>1ea2e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea308		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea318		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1ea328		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>1ea338		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1ea348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea368		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea378		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea388		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>1ea398		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea3a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea3b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1ea3c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1ea3d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea3e8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea3f8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea418		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea428		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>1ea438		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea458		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea478		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea488		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1ea498		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea4a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea4b8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea4c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea4d8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea4e8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>1ea4f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1ea508		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea518		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea538		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea548		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>1ea558		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1ea568		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea578		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea598		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea5a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1ea5b8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1ea5c8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1ea5d8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea608		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea618		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1ea628		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea638		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea658		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea668		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea678		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1ea688		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea698		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea6c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea6d8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>1ea6e8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>1ea6f8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea718		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea728		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea738		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>1ea748		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea758		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea778		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea788		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea798		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1ea7a8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea7b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea7e8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea7f8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1ea808		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea858		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea868		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1ea878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1ea8a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea8b8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8c8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>1ea8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea918		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea928		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea968		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>1ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea988		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea9c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>1ea9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea9e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaa28		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>1eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>1eabf8		00 00 00 00 00 00 00 00
.1eac00						SS_U_TXT
>1eac00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>1eac08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>1eacb8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eacc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eacf8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ead38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1ead78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eada8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>1eadb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eade8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>1eadf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae28		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>1eae38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae68		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>1eae78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaea8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>1eaeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaee8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>1eaef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaf28		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>1eaf38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf48		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>1eaf58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf68		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eaf78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf88		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>1eaf98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafa8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eafb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafc8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>1eafd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafe8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eaff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb008		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>1eb018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb028		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eb038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb048		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb068		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb088		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb0a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb0c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb0e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb108		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb128		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb148		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1eb158		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb168		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>1eb198		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb1a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb1c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb1d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb1e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb208		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb218		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb228		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb248		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb258		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb268		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1eb278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb288		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb298		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb2a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1eb2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb2c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb2d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1eb2e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1eb2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb308		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb318		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1eb328		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb348		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb358		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb368		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb388		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb398		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb3a8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb3c8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb3d8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb3e8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb408		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1eb418		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb428		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb448		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb458		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1eb468		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb488		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb498		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1eb4a8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb4c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb4d8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1eb4e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb508		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb518		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1eb528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb538		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb548		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb558		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb578		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb588		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb598		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb5c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb5d8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb608		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1eb618		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1eb628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb638		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb648		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1eb658		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb678		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1eb688		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>1eb698		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb6c8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1eb6d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb6e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb708		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>1eb718		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb738		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb748		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>1eb758		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1eb768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb778		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb788		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>1eb798		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1eb7a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb7c8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>1eb7d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1eb7e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb808		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb818		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1eb828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb838		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb848		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb858		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1eb868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb878		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb888		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb898		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>1eb8a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8b8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb8c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb8d8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1eb8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8f8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb918		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb938		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb948		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb958		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb978		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb988		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb998		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1eb9c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb9d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1eba08		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1eba18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eba48		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>1eba58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eba88		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>1eba98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ebac8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1ebad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1ebbf8		00 00 00 00 00 00 00 00
.1f0000						FONT_4_BANK0
>1f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>1f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>1f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>1f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>1f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>1f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>1f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>1f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>1f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>1f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>1f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>1f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>1f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>1f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>1f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>1f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>1f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>1f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>1f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>1f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>1f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>1f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>1f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>1f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>1f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>1f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>1f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>1f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>1f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>1f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>1f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>1f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>1f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>1f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>1f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>1f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>1f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>1f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>1f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>1f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>1f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>1f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>1f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>1f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>1f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>1f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>1f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>1f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>1f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>1f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>1f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>1f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>1f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>1f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>1f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>1f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>1f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>1f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>1f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>1f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>1f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>1f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>1f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>1f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>1f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>1f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>1f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>1f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>1f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>1f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>1f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>1f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>1f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>1f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>1f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>1f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>1f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>1f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>1f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>1f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>1f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>1f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>1f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>1f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>1f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>1f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>1f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>1f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>1f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>1f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>1f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>1f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>1f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>1f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>1f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>1f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>1f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>1f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>1f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>1f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>1f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>1f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>1f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>1f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>1f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>1f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>1f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>1f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>1f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>1f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>1f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>1f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>1f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>1f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>1f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>1f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>1f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>1f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>1f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>1f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>1f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>1f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>1f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>1f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>1f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>1f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>1f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>1f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>1f07f8		00 00 00 00 00 00 00 00
.1f0800						FONT_4_SPLASH
>1f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>1f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>1f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>1f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>1f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>1f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>1f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>1f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>1f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>1f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>1f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>1f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>1f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>1f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>1f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>1f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>1f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>1f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>1f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>1f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>1f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>1f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>1f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>1f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>1f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>1f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>1f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>1f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>1f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>1f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>1f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>1f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>1f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>1f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>1f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>1f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>1f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>1f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>1f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>1f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>1f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>1f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>1f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>1f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>1f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>1f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>1f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>1f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>1f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>1f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>1f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>1f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>1f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>1f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>1f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>1f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>1f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>1f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>1f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>1f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>1f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>1f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>1f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>1f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>1f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>1f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>1f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>1f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>1f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>1f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>1f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>1f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>1f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>1f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>1f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>1f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>1f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>1f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>1f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>1f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>1f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>1f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>1f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>1f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>1f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>1f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>1f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>1f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>1f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>1f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>1f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>1f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>1f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>1f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>1f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>1f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>1f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>1f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>1f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>1f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>1f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>1f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>1f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>1f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>1f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>1f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>1f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>1f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>1f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>1f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>1f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>1f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>1f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>1f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>1f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>1f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>1f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>1f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>1f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>1f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>1f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>1f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>1f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>1f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>1f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>1f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>1f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>1f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>1f0ff8		0f 0f 0f 0f f0 f0 f0 00
>1fffff		ff				                .byte $FF               ; Last byte of flash data

;******  End of listing
