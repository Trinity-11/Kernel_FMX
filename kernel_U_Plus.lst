
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 -D TARGET_SYS=3 --long-address --flat -b -o kernel_U_Plus.bin --list kernel_U_Plus.lst --labels=kernel_U_Plus.lbl src\kernel.asm
; Sat May 08 19:34:14 2021

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=1						TARGET=1
=3						TARGET_SYS=3

;******  Processing input file: src\kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$380000					  START_OF_FLASH := $380000                   ; The Foenix FMX Flash starts at $380000
=$390400					  START_OF_KERNEL := $390400                  ; The kernel itself starts at $390400
=$3a0000					  START_OF_BASIC := $3A0000                   ; The BASIC flash code starts at $3A0000
=$3b0000					  START_OF_CREDITS := $3B0000                 ; The credits screen starts at $3B0000
=$3e0000					  START_OF_SPLASH := $3E0000                  ; SplashScreen Code and Data $3E0000
=$3f0000					  START_OF_FONT := $3F0000                    ; The font starts at $3F0000

;******  Processing file: src\Includes/macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1b						CHAR_ESC = $1B      ; ESC
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81						CHAR_F1 = $81       ; Function keys
=$82						CHAR_F2 = $82
=$83						CHAR_F3 = $83
=$84						CHAR_F4 = $84
=$85						CHAR_F5 = $85
=$86						CHAR_F6 = $86
=$87						CHAR_F7 = $87
=$88						CHAR_F8 = $88
=$89						CHAR_F9 = $89
=$8a						CHAR_F10 = $8A
=$8b						CHAR_F11 = $8B
=$8c						CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					COLORBEGIN       = $000022 ;3 Byte, address of the color screen
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000063					EVID_COLS_VISIBLE     = $000063 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000065					EVID_COLS_PER_LINE    = $000065 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000067					EVID_LINES_VISIBLE    = $000067 ;2 Bytes The number of rows visible on the screen. Default=25
=$000069					EVID_LINES_MAX        = $000069 ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006b					EVID_CURSORPOS        = $00006B ;3 Bytes The next character written to the screen will be written in this location.
=$00006e					EVID_CURSORX          = $00006E ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000070					EVID_CURSORY          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURCOLOR         = $000072 ;1 Byte Color of next character to be printed to the screen.
=$000073					EVID_COLORBEGIN       = $000073 ;
=$000076					EVID_COLORPOS         = $000076 ;3 Byte address of cursor's position in the color matrix
=$000079					EVID_TMPPTR1          = $000079 ; 4 byte temporary pointer
=$00007d					EVID_PRESENT          = $00007D ;1 Byte: is the EVID present?
=$000098					TEXT_SRC_PTR_L   = $000098
=$00009a					TEXT_SRC_PTR_H   = $00009A
=$00009c					TEXT_DST_PTR_L   = $00009C
=$00009e					TEXT_DST_PTR_H   = $00009E
=$0000a0					TEXT_INDEX       = $0000A0
=$0000a0					MOD_SELECT_L     = $0000A0
=$0000a2					MOD_SELECT_H     = $0000A2
=$0000a2					TEXT_CURSOR_X    = $0000A2
=$0000a4					TEXT_CURSOR_Y    = $0000A4
=$0000a6					LINE_INDEX       = $0000A6
=$0000a8					COLOR_DST_PTR_L  = $0000A8
=$0000aa					COLOR_DST_PTR_H  = $0000AA
=$0000b0					MODEL            = $0000B0
=$0000e0					MOUSE_PTR        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$0000f0					INTERRUPT_STATE  = $0000F0      ; 1 byte: current state of the boot menu color cycler
=$0000f1					INTERRUPT_COUNT  = $0000F1      ; 1 byte: counter for the boot menu color cycler
=$0000f2					IRQ_COLOR_CHOICE = $0000F2      ; 1 byte: index of the color to cycle in the boot menu
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000370					DOS_BLOCK_SIZE   = $000370      ; 4 bytes - the size of a block to load (in bytes)
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KBD_VARS = $000F00
=$000f00					KBD_STATE           = $000F00   ; 1 byte - The state of the keyboard controller state machine
=$000f01					KBD_SC_BUF          = $000F01   ; 16 bytes - Buffer for keyboard scancodes read
=$000f11					KBD_SC_HEAD         = $000F11   ; 1 byte - Index of the first scancode cell to write to
=$000f12					KBD_CHAR_BUF        = $000F12   ; 16 bytes - Character buffer
=$000f22					KBD_CHAR_HEAD       = $000F22   ; 1 byte - Number of characters in the character buffer
=$000f23					KBD_MODIFIERS       = $000F23   ; 1 byte - State of the modifier keys
=$000f24					KBD_LOCKS           = $000F24   ; 1 byte - State of the lock keys: Caps, Num, Scroll
=$000f25					KBD_TBL_UNMOD       = $000F25   ; 4 bytes - Pointer to the scan code translation table for unmodified keys
=$000f29					KBD_TBL_SHIFT       = $000F29   ; 4 bytes - Pointer to the scan code translation table for shifted keys
=$000f2d					KBD_TBL_CTRL        = $000F2D   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL
=$000f31					KBD_TBL_LOCK        = $000F31   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
=$000f35					KBD_TBL_LOCK_SHIFT  = $000F35   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
=$000f39					KBD_TBL_CTRL_SHIFT  = $000F39   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL and SHIFT
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$38ff00					        ISR_BEGIN        = $38FF00 ; Byte  Beginning of CPU vectors in Direct page
=$38ff00					        HRESET           = $38FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$38ff10					        HCOP             = $38FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$38ff20					        HBRK             = $38FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$38ff30					        HABORT           = $38FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$38ff40					        HNMI             = $38FF40 ;32 Bytes Handle NMI
=$38ff60					        HIRQ             = $38FF60 ;32 Bytes Handle IRQ
=$38ff80					        Unused_FF80      = $38FF80 ;End of direct page Interrrupt handlers
=$38ffe0					        VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$38ffe0					        JMP_READY        = $38FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$38ffe4					        VECTOR_COP       = $38FFE4 ;2 Bytes Native COP Interrupt vector
=$38ffe6					        VECTOR_BRK       = $38FFE6 ;2 Bytes Native BRK Interrupt vector
=$38ffe8					        VECTOR_ABORT     = $38FFE8 ;2 Bytes Native ABORT Interrupt vector
=$38ffea					        VECTOR_NMI       = $38FFEA ;2 Bytes Native NMI Interrupt vector
=$38ffec					        VECTOR_RESET     = $38FFEC ;2 Bytes Unused (Native RESET vector)
=$38ffee					        VECTOR_IRQ       = $38FFEE ;2 Bytes Native IRQ Vector
=$38fff0					        RETURN           = $38FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$38fff4					        VECTOR_ECOP      = $38FFF4 ;2 Bytes Emulation mode interrupt handler
=$38fff6					        VECTOR_EBRK      = $38FFF6 ;2 Bytes Emulation mode interrupt handler
=$38fff8					        VECTOR_EABORT    = $38FFF8 ;2 Bytes Emulation mode interrupt handler
=$38fffa					        VECTOR_ENMI      = $38FFFA ;2 Bytes Emulation mode interrupt handler
=$38fffc					        VECTOR_ERESET    = $38FFFC ;2 Bytes Emulation mode interrupt handler
=$38fffe					        VECTOR_EIRQ      = $38FFFE ;2 Bytes Emulation mode interrupt handler
=$400000					        VECTORS_END      = $400000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_data.asm

>380000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_code.asm

.38ff00		18		clc		RHRESET         CLC
.38ff01		fb		xce		                XCE
.38ff02		5c 00 10 00	jmp $001000	                JML BOOT
.38ff10						RHCOP
.38ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff12		8b		phb		                PHB
.38ff13		0b		phd		                PHD
.38ff14		48		pha		                PHA
.38ff15		da		phx		                PHX
.38ff16		5a		phy		                PHY
.38ff17		5c 08 10 00	jmp $001008	                JML BREAK
.38ff20						RHBRK
.38ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff22		8b		phb		                PHB
.38ff23		0b		phd		                PHD
.38ff24		48		pha		                PHA
.38ff25		da		phx		                PHX
.38ff26		5a		phy		                PHY
.38ff27		5c 08 10 00	jmp $001008	                JML BREAK
.38ff30						RHABORT
.38ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff32		8b		phb		                PHB
.38ff33		0b		phd		                PHD
.38ff34		48		pha		                PHA
.38ff35		da		phx		                PHX
.38ff36		5a		phy		                PHY
.38ff37		5c 08 10 00	jmp $001008	                JML BREAK
.38ff40						 RHNMI
.38ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff42		8b		phb		                PHB
.38ff43		0b		phd		                PHD
.38ff44		48		pha		                PHA
.38ff45		da		phx		                PHX
.38ff46		5a		phy		                PHY
.38ff47		22 96 19 38	jsl $381996	                JSL NMI_HANDLER
.38ff4b		7a		ply		                PLY
.38ff4c		fa		plx		                PLX
.38ff4d		68		pla		                PLA
.38ff4e		2b		pld		                PLD
.38ff4f		ab		plb		                PLB
.38ff50		40		rti		                RTI
.38ff60						RHIRQ
.38ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff62		8b		phb		                PHB
.38ff63		0b		phd		                PHD
.38ff64		48		pha		                PHA
.38ff65		da		phx		                PHX
.38ff66		5a		phy		                PHY
.38ff67		22 c0 17 38	jsl $3817c0	                JSL IRQ_HANDLER
.38ff6b		7a		ply		                PLY
.38ff6c		fa		plx		                PLX
.38ff6d		68		pla		                PLA
.38ff6e		2b		pld		                PLD
.38ff6f		ab		plb		                PLB
.38ff70		40		rti		                RTI
.38ffe0		5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>38ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>38ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>38ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>38ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>38ffec		00 00				                .word $0000    ; FFEC
>38ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.38fff0		5c bb 06 39	jmp $3906bb	RRETURN         JML IRETURN
>38fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>38fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>38fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>38fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>38fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>38fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/fdc_inc.asm

=$af13f0					SIO_FDC  = $AF13F0
=$af13f0					SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1					SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2					SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3					SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4					SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4					SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5					SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7					SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7					SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/basic_inc.asm

=$3a0000					    BASIC = $3A0000
=3801092					    MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	1000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	1004	5c c6 05 39	jmp $3905c6	RESTORE         JML IRESTORE
.381008	1008	5c 5a 06 39	jmp $39065a	BREAK           JML IBREAK
.38100c	100c	5c a1 06 39	jmp $3906a1	READY           JML IREADY
.381010	1010	5c 7b 11 39	jmp $39117b	SCINIT          JML ISCINIT
.381014	1014	5c 7c 11 39	jmp $39117c	IOINIT          JML IIOINIT
.381018	1018	5c 5d 07 39	jmp $39075d	PUTC            JML IPUTC
.38101c	101c	5c 46 07 39	jmp $390746	PUTS            JML IPUTS
.381020	1020	5c 01 08 39	jmp $390801	PUTB            JML IPUTB
.381024	1024	5c 60 3c 39	jmp $393c60	PUTBLOCK        JML IPUTBLOCK
.381028	1028	5c 00 7b 39	jmp $397b00	GETSCANCODE     JML KBD_GET_SCANCODE    ; Get the next 8-bit scan code from the keyboard: A = 0 if no scancode present, contains the scancode otherwise
.38102c	102c	5c b6 7b 39	jmp $397bb6	GETLOCKS        JML KBD_GETLOCKS        ; Get the state of the lock keys on the keyboard
.381030	1030	5c 7f 11 39	jmp $39117f	OPEN            JML IOPEN
.381034	1034	5c 80 11 39	jmp $391180	CLOSE           JML ICLOSE
.381038	1038	5c bc 06 39	jmp $3906bc	SETIN           JML ISETIN
.38103c	103c	5c c5 06 39	jmp $3906c5	SETOUT          JML ISETOUT
.381040	1040	5c 81 11 39	jmp $391181	GETB            JML IGETB
.381044	1044	5c fd 3b 39	jmp $393bfd	GETBLOCK        JML IGETBLOCK
.381048	1048	5c 0a 07 39	jmp $39070a	GETCH           JML IGETCH
.38104c	104c	5c d7 06 39	jmp $3906d7	GETCHW          JML IGETCHW
.381050	1050	5c ce 06 39	jmp $3906ce	GETCHE          JML IGETCHE
.381054	1054	5c 82 11 39	jmp $391182	GETS            JML IGETS
.381058	1058	5c 83 11 39	jmp $391183	GETLINE         JML IGETLINE
.38105c	105c	5c 84 11 39	jmp $391184	GETFIELD        JML IGETFIELD
.381060	1060	5c 85 11 39	jmp $391185	TRIM            JML ITRIM
.381064	1064	5c 86 11 39	jmp $391186	PRINTC          JML IPRINTC
.381068	1068	5c 87 11 39	jmp $391187	PRINTS          JML IPRINTS
.38106c	106c	5c 02 08 39	jmp $390802	PRINTCR         JML IPRINTCR
.381070	1070	5c 88 11 39	jmp $391188	PRINTF          JML IPRINTF
.381074	1074	5c 89 11 39	jmp $391189	PRINTI          JML IPRINTI
.381078	1078	5c b6 08 39	jmp $3908b6	PRINTH          JML IPRINTH
.38107c	107c	5c 8a 11 39	jmp $39118a	PRINTAI         JML IPRINTAI
.381080	1080	5c d3 08 39	jmp $3908d3	PRINTAH         JML IPRINTAH
.381084	1084	5c 9a 08 39	jmp $39089a	LOCATE          JML ILOCATE
.381088	1088	5c 8b 11 39	jmp $39118b	PUSHKEY         JML IPUSHKEY
.38108c	108c	5c 8c 11 39	jmp $39118c	PUSHKEYS        JML IPUSHKEYS
.381090	1090	5c 62 08 39	jmp $390862	CSRRIGHT        JML ICSRRIGHT
.381094	1094	5c 71 08 39	jmp $390871	CSRLEFT         JML ICSRLEFT
.381098	1098	5c 80 08 39	jmp $390880	CSRUP           JML ICSRUP
.38109c	109c	5c 8f 08 39	jmp $39088f	CSRDOWN         JML ICSRDOWN
.3810a0	10a0	5c 51 08 39	jmp $390851	CSRHOME         JML ICSRHOME
.3810a4	10a4	5c a5 08 39	jmp $3908a5	SCROLLUP        JML ISCROLLUP
.3810a8	10a8	5c 21 09 39	jmp $390921	CLRSCREEN       JML ICLRSCREEN
.3810ac	10ac	5c cc 09 39	jmp $3909cc	INITCHLUT	    JML IINITCHLUT
.3810b0	10b0	5c 99 0c 39	jmp $390c99	INITSUPERIO	    JML IINITSUPERIO
.3810b4	10b4	5c 4c 78 39	jmp $39784c	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	10b8	5c 00 83 39	jmp $398300	INITMOUSE       JML IINITMOUSE
.3810bc	10bc	5c 7a 0c 39	jmp $390c7a	INITCURSOR      JML IINITCURSOR
.3810c0	10c0	5c 42 0c 39	jmp $390c42	INITFONTSET     JML IINITFONTSET
.3810c4	10c4	5c d9 09 39	jmp $3909d9	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	10c8	5c f9 09 39	jmp $3909f9	INITALLLUT      JML IINITALLLUT
.3810cc	10cc	5c bf 0a 39	jmp $390abf	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	10d0	5c f0 0b 39	jmp $390bf0	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	10d4	5c 41 0c 39	jmp $390c41	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.3810d8	10d8	5c 41 0c 39	jmp $390c41	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.3810dc	10dc	5c c9 0d 39	jmp $390dc9	INITCODEC       JML IINITCODEC
.3810e0	10e0	5c 58 0e 39	jmp $390e58	RESETCODEC      JML IRESETCODEC
.3810e4	10e4	5c c6 0e 39	jmp $390ec6	BMP_PARSER      JML IBMP_PARSER
.3810e8	10e8	5c 7b 0e 39	jmp $390e7b	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	10ec	5c 09 32 39	jmp $393209	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	10f0	5c e3 4e 39	jmp $394ee3	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	10f4	5c 76 4f 39	jmp $394f76	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	10f8	5c b0 4f 39	jmp $394fb0	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	10fc	5c 49 50 39	jmp $395049	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	1100	5c e4 4f 39	jmp $394fe4	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	1104	5c f3 50 39	jmp $3950f3	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	1108	5c b5 50 39	jmp $3950b5	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	110c	5c ef 50 39	jmp $3950ef	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	1110	5c 8c 51 39	jmp $39518c	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	1114	5c b3 51 39	jmp $3951b3	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	1118	5c b7 51 39	jmp $3951b7	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	111c	5c 12 55 39	jmp $395512	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	1120	5c d3 3b 39	jmp $393bd3	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	1124	5c ab 55 39	jmp $3955ab	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	1128	5c fe 3f 39	jmp $393ffe	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	112c	5c 3d 0b 39	jmp $390b3d	SETSIZES        JML ISETSIZES
.381130	1130	5c fa 56 39	jmp $3956fa	F_COPY          JML IF_COPY         ; Copy a file
.381134	1134	5c 44 56 39	jmp $395644	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	1138	5c 98 56 39	jmp $395698	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.38113c	113c	5c 61 7b 39	jmp $397b61	TESTBREAK       JML KBD_TEST_BREAK  ; Check if BREAK was pressed recently by the user (C is set if true, clear if false)
.381140	1140	5c 9a 7d 39	jmp $397d9a	SETTABLE        JML KBD_SETTABLE    ; Set the keyboard scan code -> character translation tables (B:X points to the new tables)
.381144	1144	5c 28 0c 39	jmp $390c28	READVRAM        JML IREADVRAM       ; Read a byte from video RAM at B:X
=$001700					VEC_INT_START = *                           ; Label for the start of the IRQ vectors
.381700	1700	5c 75 66 39	jmp $396675	VEC_INT00_SOF   JML FDC_TIME_HANDLE         ; IRQ 0, 0 --- Start Of Frame interrupt
.381704	1704	5c 8f 11 39	jmp $39118f	VEC_INT01_SOL   JML IRQHANDLESTUB           ; IRQ 0, 1 --- Start Of Line interrupt
.381708	1708	5c 8f 11 39	jmp $39118f	VEC_INT02_TMR0  JML IRQHANDLESTUB           ; IRQ 0, 2 --- Timer 0 interrupt
.38170c	170c	5c 8f 11 39	jmp $39118f	VEC_INT03_TMR1  JML IRQHANDLESTUB           ; IRQ 0, 3 --- Timer 1 interrupt
.381710	1710	5c 8f 11 39	jmp $39118f	VEC_INT04_TMR2  JML IRQHANDLESTUB           ; IRQ 0, 4 --- Timer 2 interrupt
.381714	1714	5c 8f 11 39	jmp $39118f	VEC_INT05_RTC   JML IRQHANDLESTUB           ; IRQ 0, 5 --- Real Time Clock interrupt
.381718	1718	5c 8f 11 39	jmp $39118f	VEC_INT06_FDC   JML IRQHANDLESTUB           ; IRQ 0, 6 --- Floppy Drive Controller interrupt
.38171c	171c	5c ac 83 39	jmp $3983ac	VEC_INT07_MOUSE JML MOUSE_INTERRUPT         ; IRQ 0, 7 --- Mouse interrupt
.381720	1720	5c b4 79 39	jmp $3979b4	VEC_INT10_KBD   JML KBD_PROCESS_BYTE        ; IRQ 1, 0 --- Keyboard interrupt
.381724	1724	5c 8f 11 39	jmp $39118f	VEC_INT11_COL0  JML IRQHANDLESTUB           ; IRQ 1, 1 --- VICKY_II (INT2) Sprite Collision
.381728	1728	5c 8f 11 39	jmp $39118f	VEC_INT12_COL1  JML IRQHANDLESTUB           ; IRQ 1, 2 --- VICKY_II (INT3) Bitmap Collision
.38172c	172c	5c 8f 11 39	jmp $39118f	VEC_INT13_COM2  JML IRQHANDLESTUB           ; IRQ 1, 3 --- Serial port #2 interrupt
.381730	1730	5c 8f 11 39	jmp $39118f	VEC_INT14_COM1  JML IRQHANDLESTUB           ; IRQ 1, 4 --- Serial port #1 interrupt
.381734	1734	5c 8f 11 39	jmp $39118f	VEC_INT15_MIDI  JML IRQHANDLESTUB           ; IRQ 1, 5 --- MIDI controller interrupt
.381738	1738	5c 8f 11 39	jmp $39118f	VEC_INT16_LPT   JML IRQHANDLESTUB           ; IRQ 1, 6 --- Parallel port interrupt
.38173c	173c	5c 8f 11 39	jmp $39118f	VEC_INT17_SDC   JML IRQHANDLESTUB           ; IRQ 1, 7 --- SD Card Controller interrupt (CH376S???)
.381740	1740	5c 8f 11 39	jmp $39118f	VEC_INT20_OPL   JML IRQHANDLESTUB           ; IRQ 2, 0 --- OPL3
.381744	1744	5c 8f 11 39	jmp $39118f	VEC_INT21_GABE0 JML IRQHANDLESTUB           ; IRQ 2, 1 --- GABE (INT0) - TBD
.381748	1748	5c 8f 11 39	jmp $39118f	VEC_INT22_GABE1 JML IRQHANDLESTUB           ; IRQ 2, 2 --- GABE (INT1) - TBD
.38174c	174c	5c 8f 11 39	jmp $39118f	VEC_INT23_VDMA  JML IRQHANDLESTUB           ; IRQ 2, 3 --- VICKY_II (INT4) - VDMA Interrupt
.381750	1750	5c 8f 11 39	jmp $39118f	VEC_INT24_COL2  JML IRQHANDLESTUB           ; IRQ 2, 4 --- VICKY_II (INT5) Tile Collision
.381754	1754	5c 8f 11 39	jmp $39118f	VEC_INT25_GABE2 JML IRQHANDLESTUB           ; IRQ 2, 5 --- GABE (INT2) - TBD
.381758	1758	5c 8f 11 39	jmp $39118f	VEC_INT26_EXT   JML IRQHANDLESTUB           ; IRQ 2, 6 --- External Expansion
.38175c	175c	5c 8f 11 39	jmp $39118f	VEC_INT17_SDINS JML IRQHANDLESTUB           ; IRQ 2, 7 --- SDCARD Insertion
.381760	1760	5c 8f 11 39	jmp $39118f	VEC_INT30_OPN2  JML IRQHANDLESTUB           ; IRQ 3, 0 --- OPN2
.381764	1764	5c 8f 11 39	jmp $39118f	VEC_INT31_OPM   JML IRQHANDLESTUB           ; IRQ 3, 1 --- OPM
.381768	1768	5c 8f 11 39	jmp $39118f	VEC_INT32_IDE   JML IRQHANDLESTUB           ; IRQ 3, 2 --- HDD IDE Interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.38176c						ISETHANDLER
.38176c		8b		phb		                PHB
.38176d		08		php		                PHP
.38176e		48		pha		                PHA             ; begin setdbr macro
.38176f		08		php		                PHP
.381770		e2 20		sep #$20	                SEP #$20        ; set A short
.381772		a9 00		lda #$00	                LDA #0
.381774		48		pha		                PHA
.381775		ab		plb		                PLB
.381776		28		plp		                PLP
.381777		68		pla		                PLA             ; end setdbr macro
.381778		e2 20		sep #$20	                SEP #$20        ; set A short
.38177a		c2 10		rep #$10	                REP #$10        ; set X long
.38177c		48		pha		                PHA                     ; Save the interrupt number
.38177d		5a		phy		                PHY                     ; Save the handler's bank
.38177e		da		phx		                PHX                     ; Save the handler's address
.38177f		f4 00 00	pea #$0000	                PEA #0                  ; Make room for the offset to the vector
.381782						LOCALS
>0001						l_vector        .word ?                 ; Address of vector in bank 0
>0003						l_handler       .dword ?                ; The address of the handler (only 24 bits, really)
>0007						l_number        .byte ?                 ; The interrupt number
.381782		29 30		and #$30	                AND #$30                ; Isolate the block #
.381784		0a		asl a		                ASL A                   ; Multiply by 2 to get the offset to the first vector of the block
.381785		83 01		sta $01,s	                STA l_vector
.381787		a3 07		lda $07,s	                LDA l_number            ; Get the number bank
.381789		29 07		and #$07	                AND #$07                ; Isolate the interrupt number
.38178b		0a		asl a		                ASL A                   ; Multiply by four to get the first byte of that interrupt's vector
.38178c		0a		asl a		                ASL A
.38178d		03 01		ora $01,s	                ORA l_vector            ; Add it to the offset to the block
.38178f		83 01		sta $01,s	                STA l_vector            ; Store back to the vector address
.381791		18		clc		                CLC                     ; Add the address of the start of the interrupt vector table
.381792		a9 00		lda #$00	                LDA #<VEC_INT_START
.381794		63 01		adc $01,s	                ADC l_vector
.381796		83 01		sta $01,s	                STA l_vector
.381798		a9 17		lda #$17	                LDA #>VEC_INT_START
.38179a		63 02		adc $02,s	                ADC l_vector+1
.38179c		83 02		sta $02,s	                STA l_vector+1
.38179e		78		sei		                SEI                     ; Disable the interrupts while we update the vector
.38179f		a0 00 00	ldy #$0000	                LDY #0
.3817a2		a9 5c		lda #$5c	                LDA #$5C                ; Opcode for JML
.3817a4		93 01		sta ($01,s),y	                STA (l_vector),Y        ; Make sure the first byte is a JML instruction
.3817a6		c8		iny		                INY                     ; Move to the low byte of the vector address
.3817a7		a3 03		lda $03,s	                LDA l_handler
.3817a9		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.3817ab		c8		iny		                INY                     ; Move to the high byte of the vector address
.3817ac		a3 04		lda $04,s	                LDA l_handler+1
.3817ae		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.3817b0		c8		iny		                INY                     ; Move to the bank of the vector address
.3817b1		a3 05		lda $05,s	                LDA l_handler+2
.3817b3		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.3817b5		c2 20		rep #$20	                REP #$20        ; set A long
.3817b7		18		clc		                CLC                     ; Clean up the locals off the stack
.3817b8		3b		tsc		                TSC
.3817b9		69 07 00	adc #$0007	                ADC #SIZE(LOCALS)
.3817bc		1b		tcs		                TCS
.3817bd		28		plp		                PLP
.3817be		ab		plb		                PLB
.3817bf		6b		rtl		                RTL
.3817c0						IRQ_HANDLER
.3817c0		08		php		                PHP
.3817c1		e2 20		sep #$20	                SEP #$20        ; set A short
.3817c3		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0     ; Get the block 0 pending interrupts
.3817c7		d0 03		bne $3817cc	                BNE process_reg0
.3817c9		82 80 00	brl $38184c	                BRL CHECK_PENDING_REG1      ; If nothing: skip to block 1
.3817cc						process_reg0
.3817cc		89 01		bit #$01	                BIT #FNX0_INT00_SOF           ; Check to see if the bit is set
.3817ce		f0 0c		beq $3817dc	                BEQ continue            ; If not: skip the rest of this macro
.3817d0		29 01		and #$01	                AND #FNX0_INT00_SOF           ; Mask out all other pending interrupts
.3817d2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.3817d6		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF            ; And call its handler
.3817da		e2 20		sep #$20	                SEP #$20        ; set A short
.3817dc						continue
.3817dc		89 02		bit #$02	                BIT #FNX0_INT01_SOL           ; Check to see if the bit is set
.3817de		f0 0c		beq $3817ec	                BEQ continue            ; If not: skip the rest of this macro
.3817e0		29 02		and #$02	                AND #FNX0_INT01_SOL           ; Mask out all other pending interrupts
.3817e2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.3817e6		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL            ; And call its handler
.3817ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3817ec						continue
.3817ec		89 04		bit #$04	                BIT #FNX0_INT02_TMR0           ; Check to see if the bit is set
.3817ee		f0 0c		beq $3817fc	                BEQ continue            ; If not: skip the rest of this macro
.3817f0		29 04		and #$04	                AND #FNX0_INT02_TMR0           ; Mask out all other pending interrupts
.3817f2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.3817f6		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0            ; And call its handler
.3817fa		e2 20		sep #$20	                SEP #$20        ; set A short
.3817fc						continue
.3817fc		89 08		bit #$08	                BIT #FNX0_INT03_TMR1           ; Check to see if the bit is set
.3817fe		f0 0c		beq $38180c	                BEQ continue            ; If not: skip the rest of this macro
.381800		29 08		and #$08	                AND #FNX0_INT03_TMR1           ; Mask out all other pending interrupts
.381802		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.381806		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1            ; And call its handler
.38180a		e2 20		sep #$20	                SEP #$20        ; set A short
.38180c						continue
.38180c		89 10		bit #$10	                BIT #FNX0_INT04_TMR2           ; Check to see if the bit is set
.38180e		f0 0c		beq $38181c	                BEQ continue            ; If not: skip the rest of this macro
.381810		29 10		and #$10	                AND #FNX0_INT04_TMR2           ; Mask out all other pending interrupts
.381812		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.381816		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2            ; And call its handler
.38181a		e2 20		sep #$20	                SEP #$20        ; set A short
.38181c						continue
.38181c		89 20		bit #$20	                BIT #FNX0_INT05_RTC           ; Check to see if the bit is set
.38181e		f0 0c		beq $38182c	                BEQ continue            ; If not: skip the rest of this macro
.381820		29 20		and #$20	                AND #FNX0_INT05_RTC           ; Mask out all other pending interrupts
.381822		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.381826		22 14 17 00	jsl $001714	                JSL VEC_INT05_RTC            ; And call its handler
.38182a		e2 20		sep #$20	                SEP #$20        ; set A short
.38182c						continue
.38182c		89 40		bit #$40	                BIT #FNX0_INT06_FDC           ; Check to see if the bit is set
.38182e		f0 0c		beq $38183c	                BEQ continue            ; If not: skip the rest of this macro
.381830		29 40		and #$40	                AND #FNX0_INT06_FDC           ; Mask out all other pending interrupts
.381832		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.381836		22 18 17 00	jsl $001718	                JSL VEC_INT06_FDC            ; And call its handler
.38183a		e2 20		sep #$20	                SEP #$20        ; set A short
.38183c						continue
.38183c		89 80		bit #$80	                BIT #FNX0_INT07_MOUSE           ; Check to see if the bit is set
.38183e		f0 0c		beq $38184c	                BEQ continue            ; If not: skip the rest of this macro
.381840		29 80		and #$80	                AND #FNX0_INT07_MOUSE           ; Mask out all other pending interrupts
.381842		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.381846		22 1c 17 00	jsl $00171c	                JSL VEC_INT07_MOUSE            ; And call its handler
.38184a		e2 20		sep #$20	                SEP #$20        ; set A short
.38184c						continue
.38184c						CHECK_PENDING_REG1
.38184c		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1
.381850		d0 03		bne $381855	                BNE process_reg1
.381852		82 80 00	brl $3818d5	                BRL CHECK_PENDING_REG2
.381855						process_reg1
.381855		89 01		bit #$01	                BIT #FNX1_INT00_KBD           ; Check to see if the bit is set
.381857		f0 0c		beq $381865	                BEQ continue            ; If not: skip the rest of this macro
.381859		29 01		and #$01	                AND #FNX1_INT00_KBD           ; Mask out all other pending interrupts
.38185b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38185f		22 20 17 00	jsl $001720	                JSL VEC_INT10_KBD            ; And call its handler
.381863		e2 20		sep #$20	                SEP #$20        ; set A short
.381865						continue
.381865		89 02		bit #$02	                BIT #FNX1_INT01_COL0           ; Check to see if the bit is set
.381867		f0 0c		beq $381875	                BEQ continue            ; If not: skip the rest of this macro
.381869		29 02		and #$02	                AND #FNX1_INT01_COL0           ; Mask out all other pending interrupts
.38186b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38186f		22 24 17 00	jsl $001724	                JSL VEC_INT11_COL0            ; And call its handler
.381873		e2 20		sep #$20	                SEP #$20        ; set A short
.381875						continue
.381875		89 04		bit #$04	                BIT #FNX1_INT02_COL1           ; Check to see if the bit is set
.381877		f0 0c		beq $381885	                BEQ continue            ; If not: skip the rest of this macro
.381879		29 04		and #$04	                AND #FNX1_INT02_COL1           ; Mask out all other pending interrupts
.38187b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38187f		22 28 17 00	jsl $001728	                JSL VEC_INT12_COL1            ; And call its handler
.381883		e2 20		sep #$20	                SEP #$20        ; set A short
.381885						continue
.381885		89 08		bit #$08	                BIT #FNX1_INT03_COM2           ; Check to see if the bit is set
.381887		f0 0c		beq $381895	                BEQ continue            ; If not: skip the rest of this macro
.381889		29 08		and #$08	                AND #FNX1_INT03_COM2           ; Mask out all other pending interrupts
.38188b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38188f		22 2c 17 00	jsl $00172c	                JSL VEC_INT13_COM2            ; And call its handler
.381893		e2 20		sep #$20	                SEP #$20        ; set A short
.381895						continue
.381895		89 10		bit #$10	                BIT #FNX1_INT04_COM1           ; Check to see if the bit is set
.381897		f0 0c		beq $3818a5	                BEQ continue            ; If not: skip the rest of this macro
.381899		29 10		and #$10	                AND #FNX1_INT04_COM1           ; Mask out all other pending interrupts
.38189b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38189f		22 30 17 00	jsl $001730	                JSL VEC_INT14_COM1            ; And call its handler
.3818a3		e2 20		sep #$20	                SEP #$20        ; set A short
.3818a5						continue
.3818a5		89 20		bit #$20	                BIT #FNX1_INT05_MPU401           ; Check to see if the bit is set
.3818a7		f0 0c		beq $3818b5	                BEQ continue            ; If not: skip the rest of this macro
.3818a9		29 20		and #$20	                AND #FNX1_INT05_MPU401           ; Mask out all other pending interrupts
.3818ab		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.3818af		22 34 17 00	jsl $001734	                JSL VEC_INT15_MIDI            ; And call its handler
.3818b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3818b5						continue
.3818b5		89 40		bit #$40	                BIT #FNX1_INT06_LPT           ; Check to see if the bit is set
.3818b7		f0 0c		beq $3818c5	                BEQ continue            ; If not: skip the rest of this macro
.3818b9		29 40		and #$40	                AND #FNX1_INT06_LPT           ; Mask out all other pending interrupts
.3818bb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.3818bf		22 38 17 00	jsl $001738	                JSL VEC_INT16_LPT            ; And call its handler
.3818c3		e2 20		sep #$20	                SEP #$20        ; set A short
.3818c5						continue
.3818c5		89 80		bit #$80	                BIT #FNX1_INT07_SDCARD           ; Check to see if the bit is set
.3818c7		f0 0c		beq $3818d5	                BEQ continue            ; If not: skip the rest of this macro
.3818c9		29 80		and #$80	                AND #FNX1_INT07_SDCARD           ; Mask out all other pending interrupts
.3818cb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.3818cf		22 3c 17 00	jsl $00173c	                JSL VEC_INT17_SDC            ; And call its handler
.3818d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3818d5						continue
.3818d5						CHECK_PENDING_REG2
.3818d5		af 42 01 00	lda $000142	                LDA @l INT_PENDING_REG2
.3818d9		d0 03		bne $3818de	                BNE process_reg2
.3818db		82 80 00	brl $38195e	                BRL CHECK_PENDING_REG3
.3818de						process_reg2
.3818de		89 01		bit #$01	                BIT #FNX2_INT00_OPL3           ; Check to see if the bit is set
.3818e0		f0 0c		beq $3818ee	                BEQ continue            ; If not: skip the rest of this macro
.3818e2		29 01		and #$01	                AND #FNX2_INT00_OPL3           ; Mask out all other pending interrupts
.3818e4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.3818e8		22 40 17 00	jsl $001740	                JSL VEC_INT20_OPL            ; And call its handler
.3818ec		e2 20		sep #$20	                SEP #$20        ; set A short
.3818ee						continue
.3818ee		89 02		bit #$02	                BIT #FNX2_INT01_GABE_INT0           ; Check to see if the bit is set
.3818f0		f0 0c		beq $3818fe	                BEQ continue            ; If not: skip the rest of this macro
.3818f2		29 02		and #$02	                AND #FNX2_INT01_GABE_INT0           ; Mask out all other pending interrupts
.3818f4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.3818f8		22 44 17 00	jsl $001744	                JSL VEC_INT21_GABE0            ; And call its handler
.3818fc		e2 20		sep #$20	                SEP #$20        ; set A short
.3818fe						continue
.3818fe		89 04		bit #$04	                BIT #FNX2_INT02_GABE_INT1           ; Check to see if the bit is set
.381900		f0 0c		beq $38190e	                BEQ continue            ; If not: skip the rest of this macro
.381902		29 04		and #$04	                AND #FNX2_INT02_GABE_INT1           ; Mask out all other pending interrupts
.381904		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381908		22 48 17 00	jsl $001748	                JSL VEC_INT22_GABE1            ; And call its handler
.38190c		e2 20		sep #$20	                SEP #$20        ; set A short
.38190e						continue
.38190e		89 08		bit #$08	                BIT #FNX2_INT03_VDMA           ; Check to see if the bit is set
.381910		f0 0c		beq $38191e	                BEQ continue            ; If not: skip the rest of this macro
.381912		29 08		and #$08	                AND #FNX2_INT03_VDMA           ; Mask out all other pending interrupts
.381914		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381918		22 4c 17 00	jsl $00174c	                JSL VEC_INT23_VDMA            ; And call its handler
.38191c		e2 20		sep #$20	                SEP #$20        ; set A short
.38191e						continue
.38191e		89 10		bit #$10	                BIT #FNX2_INT04_COL2           ; Check to see if the bit is set
.381920		f0 0c		beq $38192e	                BEQ continue            ; If not: skip the rest of this macro
.381922		29 10		and #$10	                AND #FNX2_INT04_COL2           ; Mask out all other pending interrupts
.381924		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381928		22 50 17 00	jsl $001750	                JSL VEC_INT24_COL2            ; And call its handler
.38192c		e2 20		sep #$20	                SEP #$20        ; set A short
.38192e						continue
.38192e		89 20		bit #$20	                BIT #FNX2_INT05_GABE_INT2           ; Check to see if the bit is set
.381930		f0 0c		beq $38193e	                BEQ continue            ; If not: skip the rest of this macro
.381932		29 20		and #$20	                AND #FNX2_INT05_GABE_INT2           ; Mask out all other pending interrupts
.381934		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381938		22 54 17 00	jsl $001754	                JSL VEC_INT25_GABE2            ; And call its handler
.38193c		e2 20		sep #$20	                SEP #$20        ; set A short
.38193e						continue
.38193e		89 40		bit #$40	                BIT #FNX2_INT06_EXT           ; Check to see if the bit is set
.381940		f0 0c		beq $38194e	                BEQ continue            ; If not: skip the rest of this macro
.381942		29 40		and #$40	                AND #FNX2_INT06_EXT           ; Mask out all other pending interrupts
.381944		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381948		22 58 17 00	jsl $001758	                JSL VEC_INT26_EXT            ; And call its handler
.38194c		e2 20		sep #$20	                SEP #$20        ; set A short
.38194e						continue
.38194e		89 80		bit #$80	                BIT #FNX2_INT07_SDCARD_INS           ; Check to see if the bit is set
.381950		f0 0c		beq $38195e	                BEQ continue            ; If not: skip the rest of this macro
.381952		29 80		and #$80	                AND #FNX2_INT07_SDCARD_INS           ; Mask out all other pending interrupts
.381954		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381958		22 5c 17 00	jsl $00175c	                JSL VEC_INT17_SDINS            ; And call its handler
.38195c		e2 20		sep #$20	                SEP #$20        ; set A short
.38195e						continue
.38195e						CHECK_PENDING_REG3
.38195e		af 43 01 00	lda $000143	                LDA @l INT_PENDING_REG3
.381962		f0 30		beq $381994	                BEQ EXIT_IRQ_HANDLE
.381964		89 01		bit #$01	                BIT #FNX3_INT00_OPN2           ; Check to see if the bit is set
.381966		f0 0c		beq $381974	                BEQ continue            ; If not: skip the rest of this macro
.381968		29 01		and #$01	                AND #FNX3_INT00_OPN2           ; Mask out all other pending interrupts
.38196a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38196e		22 60 17 00	jsl $001760	                JSL VEC_INT30_OPN2            ; And call its handler
.381972		e2 20		sep #$20	                SEP #$20        ; set A short
.381974						continue
.381974		89 02		bit #$02	                BIT #FNX3_INT01_OPM           ; Check to see if the bit is set
.381976		f0 0c		beq $381984	                BEQ continue            ; If not: skip the rest of this macro
.381978		29 02		and #$02	                AND #FNX3_INT01_OPM           ; Mask out all other pending interrupts
.38197a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38197e		22 64 17 00	jsl $001764	                JSL VEC_INT31_OPM            ; And call its handler
.381982		e2 20		sep #$20	                SEP #$20        ; set A short
.381984						continue
.381984		89 04		bit #$04	                BIT #FNX3_INT02_IDE           ; Check to see if the bit is set
.381986		f0 0c		beq $381994	                BEQ continue            ; If not: skip the rest of this macro
.381988		29 04		and #$04	                AND #FNX3_INT02_IDE           ; Mask out all other pending interrupts
.38198a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38198e		22 68 17 00	jsl $001768	                JSL VEC_INT32_IDE            ; And call its handler
.381992		e2 20		sep #$20	                SEP #$20        ; set A short
.381994						continue
.381994						EXIT_IRQ_HANDLE
.381994		28		plp		                PLP
.381995		6b		rtl		                RTL
.381996		6b		rtl		NMI_HANDLER     RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/super_io_def.asm

=$af1100					PME_STS_REG     = $AF1100
=$af1102					PME_EN_REG		  = $AF1102
=$af1104					PME_STS1_REG		= $AF1104
=$af1105					PME_STS2_REG		= $AF1105
=$af1106					PME_STS3_REG		= $AF1106
=$af1107					PME_STS4_REG		= $AF1107
=$af1108					PME_STS5_REG		= $AF1108
=$af110a					PME_EN1_REG     = $AF110A
=$af110b					PME_EN2_REG     = $AF110B
=$af110c					PME_EN3_REG     = $AF110C
=$af110d					PME_EN4_REG     = $AF110D
=$af110e					PME_EN5_REG     = $AF110E
=$af1110					SMI_STS1_REG		= $AF1110
=$af1111					SMI_STS2_REG		= $AF1111
=$af1112					SMI_STS3_REG		= $AF1112
=$af1113					SMI_STS4_REG		= $AF1113
=$af1114					SMI_STS5_REG		= $AF1114
=$af1116					SMI_EN1_REG     = $AF1116
=$af1117					SMI_EN2_REG     = $AF1117
=$af1118					SMI_EN3_REG     = $AF1118
=$af1119					SMI_EN4_REG     = $AF1119
=$af111a					SMI_EN5_REG     = $AF111A
=$af111c					MSC_ST_REG      = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		= $AF1123
=$af1124					GP11_REG    		= $AF1124
=$af1125					GP12_REG    		= $AF1125
=$af1126					GP13_REG    		= $AF1126
=$af1127					GP14_REG    		= $AF1127
=$af1128					GP15_REG    		= $AF1128
=$af1129					GP16_REG    		= $AF1129
=$af112a					GP17_REG    		= $AF112A
=$af112b					GP20_REG    		= $AF112B
=$af112c					GP21_REG    		= $AF112C
=$af112d					GP22_REG		= $AF112D
=$af112f					GP24_REG		= $AF112F
=$af1130					GP25_REG		= $AF1130
=$af1131					GP26_REG		= $AF1131
=$af1132					GP27_REG		= $AF1132
=$af1133					GP30_REG		= $AF1133
=$af1134					GP31_REG		= $AF1134
=$af1135					GP32_REG		= $AF1135
=$af1136					GP33_REG		= $AF1136
=$af1137					GP34_REG		= $AF1137
=$af1138					GP35_REG		= $AF1138
=$af1139					GP36_REG		= $AF1139
=$af113a					GP37_REG		= $AF113A
=$af113b					GP40_REG		= $AF113B
=$af113c					GP41_REG		= $AF113C
=$af113d					GP42_REG		= $AF113D
=$af113e					GP43_REG		= $AF113E
=$af113f					GP50_REG		= $AF113F
=$af1140					GP51_REG		= $AF1140
=$af1141					GP52_REG		= $AF1141
=$af1142					GP53_REG		= $AF1142
=$af1143					GP54_REG		= $AF1143
=$af1144					GP55_REG		= $AF1144
=$af1145					GP56_REG		= $AF1145
=$af1146					GP57_REG		= $AF1146
=$af1147					GP60_REG		= $AF1147
=$af1148					GP61_REG		= $AF1148
=$af114b					GP1_REG			= $AF114B
=$af114c					GP2_REG			= $AF114C
=$af114d					GP3_REG			= $AF114D
=$af114e					GP4_REG			= $AF114E
=$af114f					GP5_REG			= $AF114F
=$af1150					GP6_REG			= $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG            = $AF1157
=$af1158					FAN_CTRL_REG  	    = $AF1158
=$af1159					FAN1_TACH_REG       = $AF1159
=$af115a					FAN2_TACH_REG       = $AF115A
=$af115b					FAN1_PRELOAD_REG    = $AF115B
=$af115c					FAN2_PRELOAD_REG    = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/keyboard_def.asm

=$af1807					    STATUS_PORT 	= $AF1807
=$af1807					    KBD_STATUS      = $AF1807
=$af1807					    KBD_CMD_BUF		= $AF1807
=$af1803					    KBD_OUT_BUF 	= $AF1803
=$af1803					    KBD_INPT_BUF	= $AF1803
=$af1803					    KBD_DATA_BUF	= $AF1803
=$af180a					    PORT_A		    = $AF180A   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$af180b					    PORT_B			= $AF180B   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=4						CHAN_EVID     = 4           ; ID for the second video port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src\kernel.asm

.390400						IBOOT
.390400		18		clc		                CLC               ; clear the carry flag
.390401		fb		xce		                XCE               ; move carry to emulation flag.
.390402		78		sei		                SEI               ; Disable interrupts
.390403		c2 30		rep #$30	                REP #$30        ; set A&X long
.390405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408		1b		tcs		                TAS
.390409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.390412		54 00 38	mvn $38,$00	                MVN $38,$00       ; Or during soft loading of the kernel from the debug port
.390415		48		pha		                PHA             ; begin setdp macro
.390416		08		php		                PHP
.390417		c2 20		rep #$20	                REP #$20        ; set A long
.390419		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c		5b		tcd		                TCD
.39041d		28		plp		                PLP
.39041e		68		pla		                PLA             ; end setdp macro
.39041f		e2 20		sep #$20	                SEP #$20        ; set A short
.390421		a2 00 00	ldx #$0000	                LDX #$0000
.390424		a9 00		lda #$00	                LDA #$00
.390426						CLEAR_MEM_LOOP
.390426		95 00		sta $00,x	                STA $0000, X
.390428		e8		inx		                INX
.390429		e0 00 01	cpx #$0100	                CPX #$0100
.39042c		d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e		ea		nop		                NOP
.39042f		a9 ff		lda #$ff	                LDA #$FF
.390431		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451		22 ae 0d 39	jsl $390dae	                JSL INITRTC               ; Initialize the RTC
.390455		22 f3 6f 39	jsl $396ff3	                JSL ANSI_INIT             ; Initialize the ANSI screen driver
.390459		e2 20		sep #$20	                SEP #$20        ; set A short
.39045b		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.39045f		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.390461		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.390463		d0 1e		bne $390483	                BNE SkipInitExpC100C200
.390465		c2 20		rep #$20	                REP #$20        ; set A long
.390467		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.39046b		c9 64 00	cmp #$0064	                CMP #$0064
.39046e		f0 0f		beq $39047f	                BEQ InitC100ESID
.390470		c9 c8 00	cmp #$00c8	                CMP #$00C8
.390473		d0 0e		bne $390483	                BNE SkipInitExpC100C200
.390475		22 87 6a 39	jsl $396a87	                JSL SIMPLE_INIT_ETHERNET_CTRL
.390479		22 92 6e 39	jsl $396e92	                JSL INIT_EVID_VID_MODE
.39047d		80 04		bra $390483	                BRA SkipInitExpC100C200
.39047f						InitC100ESID:
.39047f		22 87 6a 39	jsl $396a87	                JSL SIMPLE_INIT_ETHERNET_CTRL
.390483						SkipInitExpC100C200:
.390483		c2 30		rep #$30	                REP #$30        ; set A&X long
.390485		a9 00 00	lda #$0000	                LDA #$00
.390488		8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG       ; Clear the Keyboard Flag
.39048b		a9 9f 00	lda #$009f	                LDA #$9F                  ; Channel Two - No Atteniation
.39048e		8f 00 f1 af	sta $aff100	                STA $AFF100
.390492		a9 bf 00	lda #$00bf	                LDA #$BF                  ; Channel Two - No Atteniation
.390495		8f 00 f1 af	sta $aff100	                STA $AFF100
.390499		a9 df 00	lda #$00df	                LDA #$DF                  ; Channel Two - No Atteniation
.39049c		8f 00 f1 af	sta $aff100	                STA $AFF100
.3904a0		a9 ff 00	lda #$00ff	                LDA #$FF                  ; Channel Two - No Atteniation
.3904a3		8f 00 f1 af	sta $aff100	                STA $AFF100
.3904a7		a9 70 00	lda #$0070	                LDA #$70                  ; Set the default text color to dim white on black
.3904aa		85 1e		sta $1e		                STA CURCOLOR
.3904ac		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.3904b0		29 01 00	and #$0001	                AND #$01
.3904b3		c9 01 00	cmp #$0001	                CMP #$01
.3904b6		d0 16		bne $3904ce	                BNE Alreadyin640480Mode
.3904b8		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904bc		29 fc 00	and #$00fc	                AND #$FC
.3904bf		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.3904c3		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904c7		09 01 00	ora #$0001	                ORA #$01
.3904ca		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.3904ce						Alreadyin640480Mode
.3904ce		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904d2		29 fc 00	and #$00fc	                AND #$FC
.3904d5		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.3904d9		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.3904dd		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.3904e1		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.3904e5		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT
.3904e9		22 5b 0c 39	jsl $390c5b	                JSL INITMOUSEPOINTER
.3904ed		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.3904f1		a9 00 00	lda #$0000	                LDA #0
.3904f4		22 38 10 00	jsl $001038	                JSL SETIN
.3904f8		22 3c 10 00	jsl $00103c	                JSL SETOUT
.3904fc		c2 20		rep #$20	                REP #$20        ; set A long
.3904fe		48		pha		                PHA             ; begin setdp macro
.3904ff		08		php		                PHP
.390500		c2 20		rep #$20	                REP #$20        ; set A long
.390502		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390505		5b		tcd		                TCD
.390506		28		plp		                PLP
.390507		68		pla		                PLA             ; end setdp macro
.390508		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD      ; INITKEYBOARD  ; KBD_INIT
.39050c		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE
.390510		e2 20		sep #$20	                SEP #$20        ; set A short
.390512		c2 10		rep #$10	                REP #$10        ; set X long
.390514		a9 9f		lda #$9f	                LDA #$9F              ; Channel Two - No Atteniation
.390516		8f 00 f1 af	sta $aff100	                STA $AFF100
.39051a		a9 bf		lda #$bf	                LDA #$BF              ; Channel Two - No Atteniation
.39051c		8f 00 f1 af	sta $aff100	                STA $AFF100
.390520		a9 df		lda #$df	                LDA #$DF              ; Channel Two - No Atteniation
.390522		8f 00 f1 af	sta $aff100	                STA $AFF100
.390526		a9 ff		lda #$ff	                LDA #$FF              ; Channel Two - No Atteniation
.390528		8f 00 f1 af	sta $aff100	                STA $AFF100
.39052c		a9 83		lda #$83	                LDA #$83              ; Channel Zero - No Atteniation
.39052e		8f 00 f1 af	sta $aff100	                STA $AFF100
.390532		a9 12		lda #$12	                LDA #$12              ; Channel Zero - No Atteniation
.390534		8f 00 f1 af	sta $aff100	                STA $AFF100
.390538		a9 90		lda #$90	                LDA #$90              ; Channel One - No Atteniation
.39053a		8f 00 f1 af	sta $aff100	                STA $AFF100
.39053e		a2 00 40	ldx #$4000	                LDX #16384            ; 400ms
.390541		22 c3 10 39	jsl $3910c3	                JSL ILOOP_MS
.390545		a9 9f		lda #$9f	                LDA #$9F              ; Channel Two - No Atteniation
.390547		8f 00 f1 af	sta $aff100	                STA $AFF100
.39054b		58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.39054c		e2 20		sep #$20	                SEP #$20        ; set A short
.39054e		c2 10		rep #$10	                REP #$10        ; set X long
.390550		48		pha		                PHA             ; begin setdbr macro
.390551		08		php		                PHP
.390552		e2 20		sep #$20	                SEP #$20        ; set A short
.390554		a9 39		lda #$39	                LDA #`greet_msg
.390556		48		pha		                PHA
.390557		ab		plb		                PLB
.390558		28		plp		                PLP
.390559		68		pla		                PLA             ; end setdbr macro
.39055a		a2 00 00	ldx #$0000	                LDX #0
.39055d		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.390561		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.390565		e8		inx		                INX
.390566		e0 00 10	cpx #$1000	                CPX #$1000
.390569		d0 f2		bne $39055d	                BNE jmpcopy
.39056b						retry_boot
.39056b		22 2c 3f 39	jsl $393f2c	                JSL DOS_INIT            ; Initialize the "disc operating system"
.39056f		22 00 00 3e	jsl $3e0000	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.390573		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN           ; Clear Screen and Set a standard color in Color Memory
.390577		c2 30		rep #$30	                REP #$30        ; set A&X long
.390579		22 a0 10 00	jsl $0010a0	                JSL CSRHOME             ; Move to the home position
.39057d						greet
.39057d		48		pha		                PHA             ; begin setdbr macro
.39057e		08		php		                PHP
.39057f		e2 20		sep #$20	                SEP #$20        ; set A short
.390581		a9 39		lda #$39	                LDA #`greet_msg
.390583		48		pha		                PHA
.390584		ab		plb		                PLB
.390585		28		plp		                PLP
.390586		68		pla		                PLA             ; end setdbr macro
.390587		a2 f0 83	ldx #$83f0	                LDX #<>greet_msg
.39058a		22 3d 07 39	jsl $39073d	                JSL IPRINT              ; print the first line
.39058e		22 4c 09 39	jsl $39094c	                JSL ICOLORFLAG          ; This is to set the color memory for the text logo
.390592		c2 30		rep #$30	                REP #$30        ; set A&X long
.390594		a9 ff fe	lda #$feff	                LDA #STACK_END          ; We are the root, let's make sure from now on, that we start clean
.390597		1b		tcs		                TAS
.390598		e2 20		sep #$20	                SEP #$20        ; set A short
.39059a		c2 10		rep #$10	                REP #$10        ; set X long
.39059c		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.3905a0		c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.3905a2		f0 10		beq $3905b4	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.3905a4		c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.3905a6		f0 1e		beq $3905c6	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.3905a8		c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.3905aa		f0 62		beq $39060e	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.3905ac		c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.3905ae		f0 1d		beq $3905cd	                BEQ BOOTSDC           ; Yes: boot via the SDC
.3905b0		c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.3905b2		f0 39		beq $3905ed	                BEQ BOOTIDE           ; Yes: boot via the IDE
.3905b4		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.3905b8		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.3905ba		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.3905bc		f0 2f		beq $3905ed	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.3905be		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.3905c0		f0 0b		beq $3905cd	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.3905c2		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.3905c4		f0 48		beq $39060e	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.3905c6						IRESTORE
.3905c6		5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.3905ca		ea		nop		CREDIT_LOCK     NOP
.3905cb		80 fd		bra $3905ca	                BRA CREDIT_LOCK
.3905cd		a2 4a 88	ldx #$884a	BOOTSDC         LDX #<>sdc_boot
.3905d0		22 3d 07 39	jsl $39073d	                JSL IPRINT
.3905d4		e2 20		sep #$20	                SEP #$20        ; set A short
.3905d6		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905d8		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905dc		22 fe 3f 39	jsl $393ffe	                JSL DOS_MOUNT         ; Mount the SDC
.3905e0		90 06		bcc $3905e8	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905e2		22 b9 41 39	jsl $3941b9	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905e6		80 de		bra $3905c6	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905e8		a2 ce 87	ldx #$87ce	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905eb		80 40		bra $39062d	                BRA PR_BOOT_ERROR
.3905ed		a2 61 88	ldx #$8861	BOOTIDE         LDX #<>ide_boot
.3905f0		22 3d 07 39	jsl $39073d	                JSL IPRINT
.3905f4		e2 20		sep #$20	                SEP #$20        ; set A short
.3905f6		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905f8		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905fc		22 fe 3f 39	jsl $393ffe	                JSL DOS_MOUNT         ; Mount the IDE drive
.390600		90 07		bcc $390609	                BCC hdc_error         ; Print an error message if couldn't get anything
.390602		22 b9 41 39	jsl $3941b9	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.390606		82 bd ff	brl $3905c6	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.390609		a2 ea 87	ldx #$87ea	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.39060c		80 1f		bra $39062d	                BRA PR_BOOT_ERROR
.39060e		a2 33 88	ldx #$8833	BOOTFLOPPY      LDX #<>fdc_boot
.390611		22 3d 07 39	jsl $39073d	                JSL IPRINT
.390615		e2 20		sep #$20	                SEP #$20        ; set A short
.390617		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.390619		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.39061d		22 0e 64 39	jsl $39640e	                JSL FDC_MOUNT         ; Mount the floppy drive
.390621		90 07		bcc $39062a	                BCC fdc_error         ; Print an error message if couldn't get anything
.390623		22 b9 41 39	jsl $3941b9	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.390627		82 9c ff	brl $3905c6	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.39062a		a2 0d 88	ldx #$880d	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.39062d		22 3d 07 39	jsl $39073d	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.390631		a2 a9 87	ldx #$87a9	                LDX #<>boot_retry     ; Print the boot retry prompt
.390634		22 3d 07 39	jsl $39073d	                JSL IPRINT
.390638		22 d7 06 39	jsl $3906d7	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.39063c		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.39063e		d0 03		bne $390643	                BNE chk_r_lc
.390640		82 28 ff	brl $39056b	                BRL retry_boot        ; Yes: retry the boot sequence
.390643		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.390645		d0 03		bne $39064a	                BNE chk_b_lc
.390647		82 21 ff	brl $39056b	                BRL retry_boot
.39064a		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.39064c		d0 03		bne $390651	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.39064e		82 75 ff	brl $3905c6	                BRL BOOTBASIC
.390651						chk_b_lc_not:
.390651		c9 42		cmp #$42	                CMP #'B'
.390653		d0 03		bne $390658	                BNE chk_b_lc_not0
.390655		82 6e ff	brl $3905c6	                BRL BOOTBASIC
.390658						chk_b_lc_not0:
.390658		80 de		bra $390638	                BRA boot_wait_key     ; No: keep waiting
.39065a						IBREAK
.39065a		48		pha		                PHA             ; begin setdp macro
.39065b		08		php		                PHP
.39065c		c2 20		rep #$20	                REP #$20        ; set A long
.39065e		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390661		5b		tcd		                TCD
.390662		28		plp		                PLP
.390663		68		pla		                PLA             ; end setdp macro
.390664		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.390665		8f 48 02 00	sta $000248	                STA CPUY
.390669		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.39066a		8f 46 02 00	sta $000246	                STA CPUX
.39066e		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.39066f		8f 44 02 00	sta $000244	                STA CPUA
.390673		68		pla		                PLA
.390674		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.390678		e2 20		sep #$20	                SEP #$20        ; set A short
.39067a		68		pla		                PLA             ; Pull Data Bank (8 bits)
.39067b		8f 4e 02 00	sta $00024e	                STA CPUDBR
.39067f		68		pla		                PLA             ; Pull Flags (8 bits)
.390680		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.390684		c2 20		rep #$20	                REP #$20        ; set A long
.390686		68		pla		                PLA             ; Pull Program Counter (16 bits)
.390687		8f 40 02 00	sta $000240	                STA CPUPC
.39068b		e2 20		sep #$20	                SEP #$20        ; set A short
.39068d		68		pla		                PLA             ; Pull Program Bank (8 bits)
.39068e		8f 42 02 00	sta $000242	                STA CPUPBR
.390692		c2 20		rep #$20	                REP #$20        ; set A long
.390694		3b		tsc		                TSA             ; Get the stack
.390695		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.390699		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.39069c		1b		tcs		                TAS
.39069d		5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3906a1						IREADY
.3906a1		48		pha		                PHA             ; begin setdbr macro
.3906a2		08		php		                PHP
.3906a3		e2 20		sep #$20	                SEP #$20        ; set A short
.3906a5		a9 39		lda #$39	                LDA #`ready_msg
.3906a7		48		pha		                PHA
.3906a8		ab		plb		                PLB
.3906a9		28		plp		                PLP
.3906aa		68		pla		                PLA             ; end setdbr macro
.3906ab		e2 20		sep #$20	                SEP #$20        ; set A short
.3906ad		a2 7c 88	ldx #$887c	                LDX #<>ready_msg
.3906b0		22 3d 07 39	jsl $39073d	                JSL IPRINT
.3906b4						IREADYWAIT
.3906b4		22 ce 06 39	jsl $3906ce	                JSL IGETCHE
.3906b8		80 fa		bra $3906b4	                BRA IREADYWAIT
.3906ba		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.3906bb		db		stp		IRETURN         STP
.3906bc		08		php		ISETIN          PHP
.3906bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3906bf		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.3906c3		28		plp		                PLP
.3906c4		6b		rtl		                RTL
.3906c5		08		php		ISETOUT         PHP
.3906c6		e2 20		sep #$20	                SEP #$20        ; set A short
.3906c8		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.3906cc		28		plp		                PLP
.3906cd		6b		rtl		                RTL
.3906ce		22 4c 10 00	jsl $00104c	IGETCHE         JSL GETCHW
.3906d2		22 18 10 00	jsl $001018	                JSL PUTC
.3906d6		6b		rtl		                RTL
.3906d7						IGETCHW
.3906d7		da		phx		                PHX
.3906d8		5a		phy		                PHY
.3906d9		8b		phb		                PHB
.3906da		0b		phd		                PHD
.3906db		08		php		                PHP
.3906dc		e2 20		sep #$20	                SEP #$20        ; set A short
.3906de		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.3906e2		f0 1b		beq $3906ff	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.3906e4		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3906e6		f0 0d		beq $3906f5	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906e8		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3906ea		f0 09		beq $3906f5	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906ec		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.3906ee		28		plp		                PLP
.3906ef		38		sec		                SEC                 ; And return carry set
.3906f0		2b		pld		                PLD
.3906f1		ab		plb		                PLB
.3906f2		7a		ply		                PLY
.3906f3		fa		plx		                PLX
.3906f4		6b		rtl		                RTL
.3906f5		22 12 58 39	jsl $395812	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.3906f9		22 c6 58 39	jsl $3958c6	                JSL UART_GETC       ; Get the charater from the COM port
.3906fd		80 04		bra $390703	                BRA done
.3906ff		22 02 7c 39	jsl $397c02	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.390703		28		plp		done            PLP
.390704		18		clc		                CLC                 ; Return carry clear for valid data
.390705		2b		pld		                PLD
.390706		ab		plb		                PLB
.390707		7a		ply		                PLY
.390708		fa		plx		                PLX
.390709		6b		rtl		                RTL
.39070a						IGETCH
.39070a		da		phx		                PHX
.39070b		5a		phy		                PHY
.39070c		8b		phb		                PHB
.39070d		0b		phd		                PHD
.39070e		08		php		                PHP
.39070f		e2 20		sep #$20	                SEP #$20        ; set A short
.390711		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390715		f0 1b		beq $390732	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390717		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390719		f0 0d		beq $390728	                BEQ getc_uart       ; Yes: handle reading from the UART
.39071b		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39071d		f0 09		beq $390728	                BEQ getc_uart       ; Yes: handle reading from the UART
.39071f		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390721		28		plp		                PLP
.390722		38		sec		                SEC                 ; And return carry set
.390723		2b		pld		                PLD
.390724		ab		plb		                PLB
.390725		7a		ply		                PLY
.390726		fa		plx		                PLX
.390727		6b		rtl		                RTL
.390728		22 12 58 39	jsl $395812	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.39072c		22 c6 58 39	jsl $3958c6	                JSL UART_GETC       ; Get the charater from the COM port
.390730		80 04		bra $390736	                BRA done
.390732		22 0e 7c 39	jsl $397c0e	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390736		28		plp		done            PLP
.390737		18		clc		                CLC                 ; Return carry clear for valid data
.390738		2b		pld		                PLD
.390739		ab		plb		                PLB
.39073a		7a		ply		                PLY
.39073b		fa		plx		                PLX
.39073c		6b		rtl		                RTL
.39073d		22 1c 10 00	jsl $00101c	IPRINT          JSL PUTS
.390741		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.390745		6b		rtl		                RTL
.390746		48		pha		IPUTS           PHA
.390747		08		php		                PHP
.390748		e2 20		sep #$20	                SEP #$20        ; set A short
.39074a		c2 10		rep #$10	                REP #$10        ; set X long
.39074c		bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.39074f		f0 08		beq $390759	                BEQ iputs_done
.390751		22 18 10 00	jsl $001018	iputs2          JSL PUTC
.390755		e8		inx		iputs3          INX
.390756		4c 4c 07	jmp $39074c	                JMP iputs1
.390759		e8		inx		iputs_done      INX
.39075a		28		plp		                PLP
.39075b		68		pla		                PLA
.39075c		6b		rtl		                RTL
.39075d						IPUTC
.39075d		da		phx		                PHX
.39075e		5a		phy		                PHY
.39075f		0b		phd		                PHD
.390760		8b		phb		                PHB
.390761		08		php		                PHP                 ; stash the flags (we'll be changing M)
.390762		48		pha		                PHA             ; begin setdp macro
.390763		08		php		                PHP
.390764		c2 20		rep #$20	                REP #$20        ; set A long
.390766		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390769		5b		tcd		                TCD
.39076a		28		plp		                PLP
.39076b		68		pla		                PLA             ; end setdp macro
.39076c		48		pha		                PHA             ; begin setdbr macro
.39076d		08		php		                PHP
.39076e		e2 20		sep #$20	                SEP #$20        ; set A short
.390770		a9 00		lda #$00	                LDA #0
.390772		48		pha		                PHA
.390773		ab		plb		                PLB
.390774		28		plp		                PLP
.390775		68		pla		                PLA             ; end setdbr macro
.390776		e2 20		sep #$20	                SEP #$20        ; set A short
.390778		c2 10		rep #$10	                REP #$10        ; set X long
.39077a		48		pha		                PHA                 ; Save the character to print
.39077b		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.39077f		f0 1a		beq $39079b	                BEQ putc_ansi       ; If it's 0: print to the screen
.390781		c9 04		cmp #$04	                CMP #CHAN_EVID      ; Check to see if it's the second video port
.390783		f0 16		beq $39079b	                BEQ putc_ansi       ; Yes: handle printing to the second video port
.390785		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390787		f0 07		beq $390790	                BEQ putc_uart       ; Yes: handle printing to the UART
.390789		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39078b		f0 03		beq $390790	                BEQ putc_uart       ; Yes: handle printing to the UART
.39078d		68		pla		                PLA                 ; Otherwise, just exit
.39078e		80 10		bra $3907a0	                BRA done
.390790		22 12 58 39	jsl $395812	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.390794		68		pla		                PLA                 ; Recover the character to send
.390795		22 e7 58 39	jsl $3958e7	                JSL UART_PUTC       ; Send the character
.390799		80 05		bra $3907a0	                BRA done
.39079b		68		pla		putc_ansi       PLA                 ; Recover the character to send
.39079c		22 25 72 39	jsl $397225	                JSL ANSI_PUTC       ; Print to the current selected ANSI screen
.3907a0		28		plp		done            PLP
.3907a1		ab		plb		                PLB
.3907a2		2b		pld		                PLD
.3907a3		7a		ply		                PLY
.3907a4		fa		plx		                PLX
.3907a5		6b		rtl		                RTL
.3907a6		da		phx		SCRSHIFTLL      PHX
.3907a7		5a		phy		                PHY
.3907a8		48		pha		                PHA
.3907a9		0b		phd		                PHD
.3907aa		08		php		                PHP
.3907ab		48		pha		                PHA             ; begin setdp macro
.3907ac		08		php		                PHP
.3907ad		c2 20		rep #$20	                REP #$20        ; set A long
.3907af		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907b2		5b		tcd		                TCD
.3907b3		28		plp		                PLP
.3907b4		68		pla		                PLA             ; end setdp macro
.3907b5		c2 30		rep #$30	                REP #$30        ; set A&X long
.3907b7		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3907b9		a8		tay		                TAY                 ; Set it as the destination
.3907ba		aa		tax		                TAX
.3907bb		e8		inx		                INX                 ; And set the next cell as the source
.3907bc		18		clc		                CLC                 ; Calculate the length of the block to move
.3907bd		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3907bf		e5 1a		sbc $1a		                SBC CURSORX
.3907c1		54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.3907c4		28		plp		                PLP
.3907c5		2b		pld		                PLD
.3907c6		68		pla		                PLA
.3907c7		7a		ply		                PLY
.3907c8		fa		plx		                PLX
.3907c9		6b		rtl		                RTL
.3907ca		da		phx		SCRSHIFTLR      PHX
.3907cb		48		pha		                PHA
.3907cc		0b		phd		                PHD
.3907cd		08		php		                PHP
.3907ce		48		pha		                PHA             ; begin setdp macro
.3907cf		08		php		                PHP
.3907d0		c2 20		rep #$20	                REP #$20        ; set A long
.3907d2		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907d5		5b		tcd		                TCD
.3907d6		28		plp		                PLP
.3907d7		68		pla		                PLA             ; end setdp macro
.3907d8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3907da		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.3907dc		1a		inc a		                INC A
.3907dd		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.3907df		b0 1b		bcs $3907fc	                BGE done            ; Yes: just skip the whole thing
.3907e1		38		sec		                SEC                 ; Calculate the length of the block to move
.3907e2		a5 0f		lda $0f		                LDA COLS_VISIBLE
.3907e4		e5 1a		sbc $1a		                SBC CURSORX
.3907e6		1a		inc a		                INC A
.3907e7		18		clc		                CLC
.3907e8		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.3907ea		3a		dec a		                DEC A
.3907eb		a8		tay		                TAY                 ; Make it the destination
.3907ec		3a		dec a		                DEC A               ; Move to the previous column
.3907ed		aa		tax		                TAX                 ; Make it the source
.3907ee		38		sec		                SEC                 ; Calculate the length of the block to move
.3907ef		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3907f1		e5 1a		sbc $1a		                SBC CURSORX
.3907f3		44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.3907f6		e2 20		sep #$20	                SEP #$20        ; set A short
.3907f8		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.3907fa		87 17		sta [$17]	                STA [CURSORPOS]
.3907fc		28		plp		done            PLP
.3907fd		2b		pld		                PLD
.3907fe		68		pla		                PLA
.3907ff		fa		plx		                PLX
.390800		6b		rtl		                RTL
.390801						IPUTB
.390801		6b		rtl		                RTL
.390802						IPRINTCR
.390802		da		phx		                PHX
.390803		5a		phy		                PHY
.390804		8b		phb		                PHB
.390805		0b		phd		                PHD
.390806		08		php		                PHP
.390807		48		pha		                PHA             ; begin setdbr macro
.390808		08		php		                PHP
.390809		e2 20		sep #$20	                SEP #$20        ; set A short
.39080b		a9 00		lda #$00	                LDA #0
.39080d		48		pha		                PHA
.39080e		ab		plb		                PLB
.39080f		28		plp		                PLP
.390810		68		pla		                PLA             ; end setdbr macro
.390811		48		pha		                PHA             ; begin setdp macro
.390812		08		php		                PHP
.390813		c2 20		rep #$20	                REP #$20        ; set A long
.390815		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390818		5b		tcd		                TCD
.390819		28		plp		                PLP
.39081a		68		pla		                PLA             ; end setdp macro
.39081b		e2 20		sep #$20	                SEP #$20        ; set A short
.39081d		c2 10		rep #$10	                REP #$10        ; set X long
.39081f		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.390823		f0 1c		beq $390841	                BEQ scr_printcr
.390825		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390827		f0 06		beq $39082f	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390829		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39082b		f0 02		beq $39082f	                BEQ uart_printcr    ; Yes: handle printing to the UART
.39082d		80 1c		bra $39084b	                BRA done
.39082f		22 12 58 39	jsl $395812	uart_printcr    JSL UART_SELECT
.390833		a9 0d		lda #$0d	                LDA #CHAR_CR
.390835		22 18 10 00	jsl $001018	                JSL PUTC
.390839		a9 0a		lda #$0a	                LDA #CHAR_LF
.39083b		22 18 10 00	jsl $001018	                JSL PUTC
.39083f		80 0a		bra $39084b	                BRA done
.390841		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390844		a4 1c		ldy $1c		                LDY CURSORY
.390846		c8		iny		                INY
.390847		22 84 10 00	jsl $001084	                JSL LOCATE
.39084b		28		plp		done            PLP
.39084c		2b		pld		                PLD
.39084d		ab		plb		                PLB
.39084e		7a		ply		                PLY
.39084f		fa		plx		                PLX
.390850		6b		rtl		                RTL
.390851		da		phx		ICSRHOME        PHX
.390852		5a		phy		                PHY
.390853		08		php		                PHP
.390854		a2 00 00	ldx #$0000	                LDX #0
.390857		a0 00 00	ldy #$0000	                LDY #0
.39085a		22 84 10 00	jsl $001084	                JSL LOCATE
.39085e		28		plp		                PLP
.39085f		7a		ply		                PLY
.390860		fa		plx		                PLX
.390861		6b		rtl		                RTL
.390862		da		phx		ICSRRIGHT       PHX
.390863		5a		phy		                PHY
.390864		48		pha		                PHA
.390865		0b		phd		                PHD
.390866		08		php		                PHP
.390867		22 9c 76 39	jsl $39769c	                JSL ANSI_CSRRIGHT
.39086b		28		plp		                PLP
.39086c		2b		pld		                PLD
.39086d		68		pla		                PLA
.39086e		7a		ply		                PLY
.39086f		fa		plx		                PLX
.390870		6b		rtl		                RTL
.390871						ICSRLEFT
.390871		da		phx		                PHX
.390872		5a		phy		                PHY
.390873		48		pha		                PHA
.390874		0b		phd		                PHD
.390875		08		php		                PHP
.390876		22 c7 76 39	jsl $3976c7	                JSL ANSI_CSRLEFT
.39087a		28		plp		                PLP
.39087b		2b		pld		                PLD
.39087c		68		pla		                PLA
.39087d		7a		ply		                PLY
.39087e		fa		plx		                PLX
.39087f		6b		rtl		                RTL
.390880						ICSRUP
.390880		da		phx		                PHX
.390881		5a		phy		                PHY
.390882		48		pha		                PHA
.390883		0b		phd		                PHD
.390884		08		php		                PHP
.390885		22 e5 76 39	jsl $3976e5	                JSL ANSI_CSRUP
.390889		28		plp		                PLP
.39088a		2b		pld		                PLD
.39088b		68		pla		                PLA
.39088c		7a		ply		                PLY
.39088d		fa		plx		                PLX
.39088e		6b		rtl		                RTL
.39088f		da		phx		ICSRDOWN        PHX
.390890		5a		phy		                PHY
.390891		0b		phd		                PHD
.390892		22 03 77 39	jsl $397703	                JSL ANSI_CSRDOWN
.390896		2b		pld		                PLD
.390897		7a		ply		                PLY
.390898		fa		plx		                PLX
.390899		6b		rtl		                RTL
.39089a		48		pha		ILOCATE         PHA
.39089b		0b		phd		                PHD
.39089c		08		php		                PHP
.39089d		22 26 77 39	jsl $397726	                JSL ANSI_LOCATE
.3908a1		28		plp		ilocate_done    PLP
.3908a2		2b		pld		                PLD
.3908a3		68		pla		                PLA
.3908a4		6b		rtl		                RTL
.3908a5						ISCROLLUP
.3908a5		48		pha		                PHA
.3908a6		da		phx		                PHX
.3908a7		5a		phy		                PHY
.3908a8		8b		phb		                PHB
.3908a9		0b		phd		                PHD
.3908aa		08		php		                PHP
.3908ab		22 8a 77 39	jsl $39778a	                JSL ANSI_SCROLLUP
.3908af		28		plp		                PLP
.3908b0		2b		pld		                PLD
.3908b1		ab		plb		                PLB
.3908b2		7a		ply		                PLY
.3908b3		fa		plx		                PLX
.3908b4		68		pla		                PLA
.3908b5		6b		rtl		                RTL
.3908b6		08		php		IPRINTH         PHP
.3908b7		48		pha		                PHA
.3908b8						iprinth1
.3908b8		e2 20		sep #$20	                SEP #$20        ; set A short
.3908ba		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.3908bd		4a		lsr a		                LSR
.3908be		4a		lsr a		                LSR
.3908bf		4a		lsr a		                LSR
.3908c0		4a		lsr a		                LSR
.3908c1		22 10 09 39	jsl $390910	                JSL iprint_digit
.3908c5		bd 00 00	lda $0000,x	                LDA #0,b,x
.3908c8		22 10 09 39	jsl $390910	                JSL iprint_digit
.3908cc		ca		dex		                DEX
.3908cd		88		dey		                DEY
.3908ce		d0 e8		bne $3908b8	                BNE iprinth1
.3908d0		68		pla		                PLA
.3908d1		28		plp		                PLP
.3908d2		6b		rtl		                RTL
.3908d3						IPRINTAH
.3908d3		48		pha		                PHA
.3908d4		08		php		                PHP
.3908d5		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.3908d9		08		php		                PHP                   ; Get the processor status into A
.3908da		e2 20		sep #$20	                SEP #$20        ; set A short
.3908dc		c2 10		rep #$10	                REP #$10        ; set X long
.3908de		68		pla		                PLA
.3908df		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.3908e1		c9 20		cmp #$20	                CMP #%00100000
.3908e3		f0 14		beq $3908f9	                BEQ eight_bit
.3908e5		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.3908e9		4a		lsr a		                LSR A
.3908ea		4a		lsr a		                LSR A
.3908eb		4a		lsr a		                LSR A
.3908ec		4a		lsr a		                LSR A
.3908ed		22 10 09 39	jsl $390910	                JSL iprint_digit      ; And print it
.3908f1		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.3908f5		22 10 09 39	jsl $390910	                JSL iprint_digit      ; And print it
.3908f9		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.3908fd		4a		lsr a		                LSR A
.3908fe		4a		lsr a		                LSR A
.3908ff		4a		lsr a		                LSR A
.390900		4a		lsr a		                LSR A
.390901		22 10 09 39	jsl $390910	                JSL iprint_digit      ; And print it
.390905		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390909		22 10 09 39	jsl $390910	                JSL iprint_digit      ; And print it
.39090d		28		plp		                PLP
.39090e		68		pla		                PLA
.39090f		6b		rtl		                RTL
.390910		da		phx		iprint_digit    PHX
.390911		c2 20		rep #$20	                REP #$20        ; set A long
.390913		29 0f 00	and #$000f	                AND #$0F
.390916		aa		tax		                TAX
.390917		bf 90 88 39	lda $398890,x	                LDA hex_digits,X
.39091b		22 5d 07 39	jsl $39075d	                JSL IPUTC       ; Print the digit
.39091f		fa		plx		                PLX
.390920		6b		rtl		                RTL
.390921		48		pha		ICLRSCREEN	    PHA
.390922		da		phx		                PHX
.390923		08		php		                PHP
.390924		22 1f 78 39	jsl $39781f	                JSL ANSI_CLRSCREEN
.390928		28		plp		                PLP
.390929		fa		plx		                PLX
.39092a		68		pla		                PLA
.39092b		6b		rtl		                RTL
.39092c						COPYBYTES42
.39092c		08		php		                PHP
.39092d		0b		phd		                PHD
.39092e		48		pha		                PHA             ; begin setdp macro
.39092f		08		php		                PHP
.390930		c2 20		rep #$20	                REP #$20        ; set A long
.390932		a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.390935		5b		tcd		                TCD
.390936		28		plp		                PLP
.390937		68		pla		                PLA             ; end setdp macro
.390938		e2 20		sep #$20	                SEP #$20        ; set A short
.39093a		c2 10		rep #$10	                REP #$10        ; set X long
.39093c		a0 00 00	ldy #$0000	                LDY #0
.39093f		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.390941		97 04		sta [$04],y	                STA [TMPPTR2],Y
.390943		c8		iny		                INY
.390944		c0 2a 00	cpy #$002a	                CPY #42
.390947		d0 f6		bne $39093f	                BNE copy_loop
.390949		2b		pld		                PLD
.39094a		28		plp		                PLP
.39094b		60		rts		                RTS
.39094c						ICOLORFLAG
.39094c		48		pha		                PHA
.39094d		da		phx		                PHX
.39094e		5a		phy		                PHY
.39094f		08		php		                PHP
.390950		8b		phb		                PHB
.390951		0b		phd		                PHD
.390952		48		pha		                PHA             ; begin setdp macro
.390953		08		php		                PHP
.390954		c2 20		rep #$20	                REP #$20        ; set A long
.390956		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390959		5b		tcd		                TCD
.39095a		28		plp		                PLP
.39095b		68		pla		                PLA             ; end setdp macro
.39095c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39095e		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.390961		85 04		sta $04		                STA TMPPTR2
.390963		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.390966		85 06		sta $06		                STA TMPPTR2+2
.390968		a9 ed 84	lda #$84ed	                LDA #<>greet_clr_line1
.39096b		85 00		sta $00		                STA TMPPTR1
.39096d		a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.390970		85 02		sta $02		                STA TMPPTR1+2
.390972		20 2c 09	jsr $39092c	                JSR COPYBYTES42
.390975		18		clc		                CLC
.390976		a5 04		lda $04		                LDA TMPPTR2
.390978		65 11		adc $11		                ADC COLS_PER_LINE
.39097a		85 04		sta $04		                STA TMPPTR2
.39097c		a9 17 85	lda #$8517	                LDA #<>greet_clr_line2
.39097f		85 00		sta $00		                STA TMPPTR1
.390981		a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.390984		85 02		sta $02		                STA TMPPTR1+2
.390986		20 2c 09	jsr $39092c	                JSR COPYBYTES42
.390989		18		clc		                CLC
.39098a		a5 04		lda $04		                LDA TMPPTR2
.39098c		65 11		adc $11		                ADC COLS_PER_LINE
.39098e		85 04		sta $04		                STA TMPPTR2
.390990		a9 41 85	lda #$8541	                LDA #<>greet_clr_line3
.390993		85 00		sta $00		                STA TMPPTR1
.390995		a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390998		85 02		sta $02		                STA TMPPTR1+2
.39099a		20 2c 09	jsr $39092c	                JSR COPYBYTES42
.39099d		18		clc		                CLC
.39099e		a5 04		lda $04		                LDA TMPPTR2
.3909a0		65 11		adc $11		                ADC COLS_PER_LINE
.3909a2		85 04		sta $04		                STA TMPPTR2
.3909a4		a9 6b 85	lda #$856b	                LDA #<>greet_clr_line4
.3909a7		85 00		sta $00		                STA TMPPTR1
.3909a9		a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.3909ac		85 02		sta $02		                STA TMPPTR1+2
.3909ae		20 2c 09	jsr $39092c	                JSR COPYBYTES42
.3909b1		18		clc		                CLC
.3909b2		a5 04		lda $04		                LDA TMPPTR2
.3909b4		65 11		adc $11		                ADC COLS_PER_LINE
.3909b6		85 04		sta $04		                STA TMPPTR2
.3909b8		a9 95 85	lda #$8595	                LDA #<>greet_clr_line5
.3909bb		85 00		sta $00		                STA TMPPTR1
.3909bd		a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.3909c0		85 02		sta $02		                STA TMPPTR1+2
.3909c2		20 2c 09	jsr $39092c	                JSR COPYBYTES42
.3909c5		2b		pld		                PLD
.3909c6		ab		plb		                PLB
.3909c7		28		plp		                PLP
.3909c8		7a		ply		                PLY
.3909c9		fa		plx		                PLX
.3909ca		68		pla		                PLA
.3909cb		6b		rtl		                RTL
.3909cc		0b		phd		IINITCHLUT		  PHD
.3909cd		08		php		                PHP
.3909ce		48		pha		                PHA
.3909cf		da		phx		                PHX
.3909d0		22 37 70 39	jsl $397037	                JSL ANSI_INIT_LUTS
.3909d4		fa		plx		                PLX
.3909d5		68		pla		                PLA
.3909d6		28		plp		                PLP
.3909d7		2b		pld		                PLD
.3909d8		6b		rtl		                RTL
.3909d9						IINITGAMMATABLE
.3909d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3909db		c2 10		rep #$10	                REP #$10        ; set X long
.3909dd		a2 00 00	ldx #$0000	                ldx #$0000
.3909e0		bf 00 8d 39	lda $398d00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.3909e4		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.3909e8		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.3909ec		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.3909f0		e8		inx		                inx
.3909f1		e0 00 01	cpx #$0100	                cpx #$0100
.3909f4		d0 ea		bne $3909e0	                bne initgammaloop
.3909f6		c2 30		rep #$30	                REP #$30        ; set A&X long
.3909f8		6b		rtl		                RTL
.3909f9		48		pha		IINITALLLUT     PHA
.3909fa		da		phx		                PHX
.3909fb		a2 00 00	ldx #$0000	                LDX #$0000
.3909fe		e2 20		sep #$20	                SEP #$20        ; set A short
.390a00		a9 00		lda #$00	                LDA #$00
.390a02		85 0a		sta $0a		                STA $0A     ; Temp Location
.390a04						iinit_lut_loop
.390a04		86 02		stx $02		                STX $02
.390a06		a6 0a		ldx $0a		                LDX $0A
.390a08		bf 00 8c 39	lda $398c00,x	                LDA GAMMA_2_2_Tbl, x
.390a0c		49 55		eor #$55	                EOR  #$55
.390a0e		a6 02		ldx $02		                LDX $02
.390a10		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a14		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a18		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a1c		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a20		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a24		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a28		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a2c		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a30		e8		inx		                inx
.390a31		86 02		stx $02		                STX $02
.390a33		a6 0a		ldx $0a		                LDX $0A
.390a35		bf 00 8e 39	lda $398e00,x	                LDA RANDOM_LUT_Tbl, x
.390a39		a6 02		ldx $02		                LDX $02
.390a3b		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a3f		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a43		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a47		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a4b		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a4f		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a53		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a57		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a5b		e8		inx		                inx
.390a5c		86 02		stx $02		                STX $02
.390a5e		a6 0a		ldx $0a		                LDX $0A
.390a60		bf 00 8d 39	lda $398d00,x	                LDA GAMMA_1_8_Tbl, x
.390a64		49 aa		eor #$aa	                EOR  #$AA
.390a66		a6 02		ldx $02		                LDX $02
.390a68		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a6c		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a70		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a74		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a78		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a7c		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a80		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a84		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a88		e8		inx		                inx
.390a89		a9 ff		lda #$ff	                LDA #$FF
.390a8b		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a8f		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a93		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a97		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a9b		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a9f		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390aa3		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390aa7		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390aab		e6 0a		inc $0a		                inc $0A
.390aad		e8		inx		                inx
.390aae		e0 00 04	cpx #$0400	                cpx #$0400
.390ab1		f0 03		beq $390ab6	                beq iinit_lut_exit
.390ab3		82 4e ff	brl $390a04	                brl iinit_lut_loop
.390ab6						iinit_lut_exit
.390ab6		c2 30		rep #$30	                REP #$30        ; set A&X long
.390ab8		fa		plx		                PLX
.390ab9		68		pla		                PLA
.390aba		6b		rtl		                RTL
.390abb						INITVKYTXTMODE_BYPASS_DPSW
.390abb		48		pha		                PHA
.390abc		08		php		                PHP
.390abd		80 24		bra $390ae3	                BRA WeNeed640480Here
.390abf						IINITVKYTXTMODE
.390abf		48		pha		                PHA
.390ac0		08		php		                PHP
.390ac1		e2 20		sep #$20	                SEP #$20        ; set A short
.390ac3		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.390ac7		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.390ac9		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.390acb		f0 16		beq $390ae3	                BEQ WeNeed640480Here
.390acd		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390ad1		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.390ad3		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.390ad5		f0 33		beq $390b0a	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.390ad7		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.390adb		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.390add		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390ae1		80 27		bra $390b0a	                BRA INITVICKYMODEHIRES
.390ae3						WeNeed640480Here:
.390ae3		e2 20		sep #$20	                SEP #$20        ; set A short
.390ae5		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390ae9		29 01		and #$01	                AND #$01
.390aeb		c9 01		cmp #$01	                CMP #$01
.390aed		d0 15		bne $390b04	                BNE INITVICKYMODE
.390aef		a9 00		lda #$00	                LDA #$00
.390af1		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390af5		ea		nop		                NOP
.390af6		ea		nop		                NOP
.390af7		ea		nop		                NOP
.390af8		ea		nop		                NOP
.390af9		ea		nop		                NOP
.390afa		a9 01		lda #$01	                LDA #$01
.390afc		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390b00		ea		nop		                NOP
.390b01		ea		nop		                NOP
.390b02		ea		nop		                NOP
.390b03		ea		nop		                NOP
.390b04						INITVICKYMODE
.390b04		a9 00		lda #$00	                LDA #$00
.390b06		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.390b0a						INITVICKYMODEHIRES
.390b0a		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390b0c		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390b10		e2 20		sep #$20	                SEP #$20        ; set A short
.390b12		a9 00		lda #$00	                LDA #$00
.390b14		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390b18		a9 54		lda #$54	                LDA #$54
.390b1a		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390b1e		a9 54		lda #$54	                LDA #$54
.390b20		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390b24		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390b26		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390b2a		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390b2c		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390b30		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390b34		c2 30		rep #$30	                REP #$30        ; set A&X long
.390b36		22 2c 11 00	jsl $00112c	                JSL SETSIZES                      ; Calculate the size of the text screen
.390b3a		28		plp		                PLP
.390b3b		68		pla		                PLA
.390b3c		6b		rtl		                RTL
.390b3d						ISETSIZES
.390b3d		48		pha		                PHA
.390b3e		da		phx		                PHX
.390b3f		5a		phy		                PHY
.390b40		8b		phb		                PHB
.390b41		0b		phd		                PHD
.390b42		08		php		                PHP
.390b43		48		pha		                PHA             ; begin setdp macro
.390b44		08		php		                PHP
.390b45		c2 20		rep #$20	                REP #$20        ; set A long
.390b47		a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.390b4a		5b		tcd		                TCD
.390b4b		28		plp		                PLP
.390b4c		68		pla		                PLA             ; end setdp macro
.390b4d		48		pha		                PHA             ; begin setdbr macro
.390b4e		08		php		                PHP
.390b4f		e2 20		sep #$20	                SEP #$20        ; set A short
.390b51		a9 00		lda #$00	                LDA #0
.390b53		48		pha		                PHA
.390b54		ab		plb		                PLB
.390b55		28		plp		                PLP
.390b56		68		pla		                PLA             ; end setdbr macro
.390b57		e2 30		sep #$30	                SEP #$30        ; set A&X short
.390b59		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390b5d		29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.390b5f		0a		asl a		                ASL A
.390b60		aa		tax		                TAX                         ; Index to the col/line count in X
.390b61		c2 20		rep #$20	                REP #$20        ; set A long
.390b63		bf e0 0b 39	lda $390be0,x	                LDA cols_by_res,X           ; Get the number of columns
.390b67		85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.390b69		85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.390b6b		bf e8 0b 39	lda $390be8,x	                LDA lines_by_res,X          ; Get the number of lines
.390b6f		85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.390b71		85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.390b73		e2 20		sep #$20	                SEP #$20        ; set A short
.390b75		af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.390b79		89 01		bit #$01	                BIT #Border_Ctrl_Enable
.390b7b		f0 5c		beq $390bd9	                BEQ done                    ; No border... the sizes are correct now
.390b7d		af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.390b81		29 3f		and #$3f	                AND #$3F
.390b83		89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390b85		d0 04		bne $390b8b	                BNE frac_width
.390b87		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390b88		4a		lsr a		                LSR A
.390b89		80 03		bra $390b8e	                BRA store_width
.390b8b		4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390b8c		4a		lsr a		                LSR A                       ; because a column is partially hidden
.390b8d		1a		inc a		                INC A
.390b8e		85 00		sta $00		store_width     STA TMPPTR1
.390b90		64 01		stz $01		                STZ TMPPTR1+1
.390b92		e2 20		sep #$20	                SEP #$20        ; set A short
.390b94		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390b98		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390b9a		f0 04		beq $390ba0	                BEQ adjust_width            ; No... just adjust the width of the screen
.390b9c		c2 20		rep #$20	                REP #$20        ; set A long
.390b9e		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390ba0						adjust_width
.390ba0		c2 20		rep #$20	                REP #$20        ; set A long
.390ba2		38		sec		                SEC
.390ba3		a5 11		lda $11		                LDA COLS_PER_LINE
.390ba5		e5 00		sbc $00		                SBC TMPPTR1
.390ba7		85 0f		sta $0f		                STA COLS_VISIBLE
.390ba9		af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.390bad		29 3f 00	and #$003f	                AND #$3F
.390bb0		89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390bb3		d0 04		bne $390bb9	                BNE frac_height
.390bb5		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390bb6		4a		lsr a		                LSR A
.390bb7		80 03		bra $390bbc	                BRA store_height
.390bb9		4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390bba		4a		lsr a		                LSR A                       ; because a column is partially hidden
.390bbb		1a		inc a		                INC A
.390bbc		85 00		sta $00		store_height    STA TMPPTR1
.390bbe		64 01		stz $01		                STZ TMPPTR1+1
.390bc0		e2 20		sep #$20	                SEP #$20        ; set A short
.390bc2		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390bc6		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390bc8		f0 04		beq $390bce	                BEQ adjust_height           ; No... just adjust the height of the screen
.390bca		c2 20		rep #$20	                REP #$20        ; set A long
.390bcc		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390bce						adjust_height
.390bce		c2 20		rep #$20	                REP #$20        ; set A long
.390bd0		38		sec		                SEC
.390bd1		a5 15		lda $15		                LDA LINES_MAX
.390bd3		e5 00		sbc $00		                SBC TMPPTR1
.390bd5		85 13		sta $13		                STA LINES_VISIBLE
.390bd7		c2 30		rep #$30	                REP #$30        ; set A&X long
.390bd9		28		plp		done            PLP
.390bda		2b		pld		                PLD
.390bdb		ab		plb		                PLB
.390bdc		7a		ply		                PLY
.390bdd		fa		plx		                PLX
.390bde		68		pla		                PLA
.390bdf		6b		rtl		                RTL
>390be0		50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>390be8		3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.390bf0						IINITVKYGRPMODE
.390bf0		48		pha		                PHA
.390bf1		e2 20		sep #$20	                SEP #$20        ; set A short
.390bf3		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390bf5		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390bf9		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390bfb		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390bff		a9 c0		lda #$c0	                LDA #$C0
.390c01		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390c05		a9 00		lda #$00	                LDA #$00
.390c07		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390c0b		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390c0d		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390c11		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390c13		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390c17		a9 c0		lda #$c0	                LDA #$C0
.390c19		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390c1d		a9 00		lda #$00	                LDA #$00
.390c1f		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390c23		c2 30		rep #$30	                REP #$30        ; set A&X long
.390c25		68		pla		                PLA
.390c26		6b		rtl		                RTL
.390c27						IINITTILEMODE
.390c27		6b		rtl		                RTL
.390c28						IREADVRAM
.390c28		08		php		                PHP
.390c29		e2 20		sep #$20	                SEP #$20        ; set A short
.390c2b		bd 00 00	lda $0000,x	                LDA #0,B,X                      ; Request the byte
.390c2e		c2 20		rep #$20	                REP #$20        ; set A long
.390c30		af 02 09 af	lda $af0902	wait_loop       LDA @l VMEM2CPU_Fifo_Count_LO   ; Wait for the FIFO to have data
.390c34		89 00 80	bit #$8000	                BIT #$8000
.390c37		d0 f7		bne $390c30	                BNE wait_loop
.390c39		e2 20		sep #$20	                SEP #$20        ; set A short
.390c3b		af 01 09 af	lda $af0901	                LDA @l VMEM2CPU_Data_Port
.390c3f		28		plp		                PLP
.390c40		6b		rtl		                RTL
.390c41		6b		rtl		INOP            RTL
.390c42						IINITFONTSET
.390c42		48		pha		                PHA
.390c43		da		phx		                PHX
.390c44		5a		phy		                PHY
.390c45		8b		phb		                PHB
.390c46		08		php		                PHP
.390c47		c2 30		rep #$30	                REP #$30        ; set A&X long
.390c49		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.390c4c		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.390c4f		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.390c52		54 af 3f	mvn $3f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.390c55		28		plp		                PLP
.390c56		ab		plb		                PLB
.390c57		7a		ply		                PLY
.390c58		fa		plx		                PLX
.390c59		68		pla		                PLA
.390c5a		6b		rtl		                RTL
.390c5b						INITMOUSEPOINTER
.390c5b		e2 20		sep #$20	                SEP #$20        ; set A short
.390c5d		c2 10		rep #$10	                REP #$10        ; set X long
.390c5f		a2 00 00	ldx #$0000	                LDX #$0000
.390c62						FILL_MOUSE_MARKER
.390c62		bf 00 8f 39	lda $398f00,x	                LDA @lMOUSE_POINTER_PTR,X
.390c66		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390c6a		e8		inx		                INX
.390c6b		e0 00 01	cpx #$0100	                CPX #$0100
.390c6e		d0 f2		bne $390c62	                BNE FILL_MOUSE_MARKER
.390c70		ea		nop		                nop
.390c71		a9 01		lda #$01	                LDA #$01
.390c73		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390c77		c2 30		rep #$30	                REP #$30        ; set A&X long
.390c79		6b		rtl		                RTL
.390c7a						IINITCURSOR
.390c7a		e2 20		sep #$20	                SEP #$20        ; set A short
.390c7c		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390c7e		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390c82		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390c84		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390c88		c2 30		rep #$30	                REP #$30        ; set A&X long
.390c8a		a9 00 00	lda #$0000	                LDA #$0000;
.390c8d		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390c91		a9 06 00	lda #$0006	                LDA #$0006;
.390c94		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390c98		6b		rtl		                RTL
.390c99		0b		phd		IINITSUPERIO	  PHD
.390c9a		08		php		                PHP
.390c9b		48		pha		                PHA
.390c9c		e2 20		sep #$20	                SEP #$20        ; set A short
.390c9e		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ca0		8f 23 11 af	sta $af1123	                STA GP10_REG
.390ca4		af 23 11 af	lda $af1123	                LDA GP10_REG
.390ca8		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390caa		8f 24 11 af	sta $af1124	                STA GP11_REG
.390cae		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cb0		8f 25 11 af	sta $af1125	                STA GP12_REG
.390cb4		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cb6		8f 26 11 af	sta $af1126	                STA GP13_REG
.390cba		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390cbc		8f 27 11 af	sta $af1127	                STA GP14_REG
.390cc0		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390cc2		8f 28 11 af	sta $af1128	                STA GP15_REG
.390cc6		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390cc8		8f 29 11 af	sta $af1129	                STA GP16_REG
.390ccc		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390cce		8f 2a 11 af	sta $af112a	                STA GP17_REG
.390cd2		a9 00		lda #$00	                LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390cd4		8f 2b 11 af	sta $af112b	                STA GP20_REG
.390cd8		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cda		8f 2f 11 af	sta $af112f	                STA GP24_REG
.390cde		a9 05		lda #$05	                LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390ce0		8f 30 11 af	sta $af1130	                STA GP25_REG
.390ce4		a9 84		lda #$84	                LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390ce6		8f 31 11 af	sta $af1131	                STA GP26_REG
.390cea		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390cec		8f 33 11 af	sta $af1133	                STA GP30_REG
.390cf0		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390cf2		8f 34 11 af	sta $af1134	                STA GP31_REG
.390cf6		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390cf8		8f 35 11 af	sta $af1135	                STA GP32_REG
.390cfc		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390cfe		8f 36 11 af	sta $af1136	                STA GP33_REG
.390d02		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390d04		8f 37 11 af	sta $af1137	                STA GP34_REG
.390d08		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390d0a		8f 38 11 af	sta $af1138	                STA GP35_REG
.390d0e		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390d10		8f 39 11 af	sta $af1139	                STA GP36_REG
.390d14		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390d16		8f 3a 11 af	sta $af113a	                STA GP37_REG
.390d1a		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d1c		8f 3d 11 af	sta $af113d	                STA GP42_REG
.390d20		a9 01		lda #$01	                LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390d22		8f 3e 11 af	sta $af113e	                STA GP43_REG
.390d26		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390d28		8f 3f 11 af	sta $af113f	                STA GP50_REG
.390d2c		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390d2e		8f 40 11 af	sta $af1140	                STA GP51_REG
.390d32		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390d34		8f 41 11 af	sta $af1141	                STA GP52_REG
.390d38		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390d3a		8f 42 11 af	sta $af1142	                STA GP53_REG
.390d3e		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390d40		8f 43 11 af	sta $af1143	                STA GP54_REG
.390d44		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390d46		8f 44 11 af	sta $af1144	                STA GP55_REG
.390d4a		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390d4c		8f 45 11 af	sta $af1145	                STA GP56_REG
.390d50		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390d52		8f 46 11 af	sta $af1146	                STA GP57_REG
.390d56		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.390d58		8f 47 11 af	sta $af1147	                STA GP60_REG
.390d5c		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.390d5e		8f 48 11 af	sta $af1148	                STA GP61_REG
.390d62		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390d64		8f 4b 11 af	sta $af114b	                STA GP1_REG
.390d68		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390d6a		8f 4c 11 af	sta $af114c	                STA GP2_REG
.390d6e		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390d70		8f 4d 11 af	sta $af114d	                STA GP3_REG
.390d74		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390d76		8f 4e 11 af	sta $af114e	                STA GP4_REG
.390d7a		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390d7c		8f 4f 11 af	sta $af114f	                STA GP5_REG
.390d80		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390d82		8f 50 11 af	sta $af1150	                STA GP6_REG
.390d86		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390d88		8f 5d 11 af	sta $af115d	                STA LED1_REG
.390d8c		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390d8e		8f 5e 11 af	sta $af115e	                STA LED2_REG
.390d92		c2 20		rep #$20	                REP #$20        ; set A long
.390d94		68		pla		                PLA
.390d95		28		plp			              PLP
.390d96		2b		pld				            PLD
.390d97		6b		rtl		                RTL
.390d98						Poll_Inbuf
.390d98		af 07 18 af	lda $af1807	                LDA STATUS_PORT		; Load Status Byte
.390d9c		29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.390d9e		c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.390da0		f0 f6		beq $390d98					        BEQ Poll_Inbuf
.390da2		60		rts		                RTS
.390da3						Poll_Outbuf
.390da3		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.390da7		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.390da9		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.390dab		d0 f6		bne $390da3	                BNE Poll_Outbuf
.390dad		60		rts		                RTS
.390dae		48		pha		INITRTC         PHA
.390daf		08		php		                PHP
.390db0		e2 20		sep #$20	                SEP #$20        ; set A short
.390db2		a9 00		lda #$00	                LDA #0
.390db4		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.390db8		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.390dbc		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.390dc0		09 04		ora #$04	                ORA #%00000100
.390dc2		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.390dc6		28		plp		                PLP
.390dc7		68		pla		                PLA
.390dc8		6b		rtl		                RTL
.390dc9		48		pha		IINITCODEC      PHA
.390dca		08		php		                PHP
.390dcb		c2 20		rep #$20	                REP #$20        ; set A long
.390dcd		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.390dd0		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390dd4		a9 01 00	lda #$0001	                LDA #$0001
.390dd7		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390ddb		20 6c 0e	jsr $390e6c	                JSR CODEC_TRF_FINISHED
.390dde		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.390de1		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390de5		a9 01 00	lda #$0001	                LDA #$0001
.390de8		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390dec		20 6c 0e	jsr $390e6c	                JSR CODEC_TRF_FINISHED
.390def		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.390df2		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390df6		a9 01 00	lda #$0001	                LDA #$0001
.390df9		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390dfd		20 6c 0e	jsr $390e6c	                JSR CODEC_TRF_FINISHED
.390e00		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.390e03		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390e07		a9 01 00	lda #$0001	                LDA #$0001
.390e0a		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390e0e		20 6c 0e	jsr $390e6c	                JSR CODEC_TRF_FINISHED
.390e11		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.390e14		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390e18		a9 01 00	lda #$0001	                LDA #$0001
.390e1b		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390e1f		20 6c 0e	jsr $390e6c	                JSR CODEC_TRF_FINISHED
.390e22		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.390e25		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390e29		a9 01 00	lda #$0001	                LDA #$0001
.390e2c		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390e30		20 6c 0e	jsr $390e6c	                JSR CODEC_TRF_FINISHED
.390e33		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.390e36		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390e3a		a9 01 00	lda #$0001	                LDA #$0001
.390e3d		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390e41		20 6c 0e	jsr $390e6c	                JSR CODEC_TRF_FINISHED
.390e44		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.390e47		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390e4b		a9 01 00	lda #$0001	                LDA #$0001
.390e4e		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390e52		20 6c 0e	jsr $390e6c	                JSR CODEC_TRF_FINISHED
.390e55		28		plp		                PLP
.390e56		68		pla		                PLA
.390e57		6b		rtl		                RTL
.390e58						IRESETCODEC
.390e58		c2 20		rep #$20	                REP #$20        ; set A long
.390e5a		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.390e5d		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390e61		a9 01 00	lda #$0001	                LDA #$0001
.390e64		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390e68		20 6c 0e	jsr $390e6c	                JSR CODEC_TRF_FINISHED
.390e6b		6b		rtl		                RTL
.390e6c						CODEC_TRF_FINISHED
.390e6c		e2 20		sep #$20	                SEP #$20        ; set A short
.390e6e		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.390e72		29 01		and #$01	                AND #$01
.390e74		c9 01		cmp #$01	                CMP #$01
.390e76		f0 f6		beq $390e6e	                BEQ CODEC_LOOP
.390e78		c2 20		rep #$20	                REP #$20        ; set A long
.390e7a		60		rts		                RTS
.390e7b						IBM_FILL_SCREEN
.390e7b		c2 30		rep #$30	                REP #$30        ; set A&X long
.390e7d		a9 00 00	lda #$0000	                LDA #$0000
.390e80		a2 00 00	ldx #$0000	                LDX #$0000
.390e83						BM_FILL_SCREEN_LOOPY
.390e83		a0 00 00	ldy #$0000	                LDY #$0000
.390e86		e2 20		sep #$20	                SEP #$20        ; set A short
.390e88						BM_FILL_SCREEN_LOOPX
.390e88		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.390e8a		c8		iny		                INY
.390e8b		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.390e8d		d0 f9		bne $390e88	                BNE BM_FILL_SCREEN_LOOPX
.390e8f		20 9a 0e	jsr $390e9a	                JSR BM_FILL_COMPUTE_Y_DST
.390e92		e8		inx		                INX
.390e93		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.390e95		d0 ec		bne $390e83	                BNE BM_FILL_SCREEN_LOOPY
.390e97		c2 30		rep #$30	                REP #$30        ; set A&X long
.390e99		6b		rtl		                RTL
.390e9a						BM_FILL_COMPUTE_Y_DST
.390e9a		c2 20		rep #$20	                REP #$20        ; set A long
.390e9c		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.390e9e		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390ea2		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.390ea4		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390ea8		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.390eab		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390eaf		a9 00 00	lda #$0000	                LDA #$0000
.390eb2		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390eb6		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390eba		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.390ebc		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390ec0		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.390ec2		a9 00 00	lda #$0000	                LDA #$0000
.390ec5		60		rts		                RTS
.390ec6						IBMP_PARSER
.390ec6		c2 30		rep #$30	                REP #$30        ; set A&X long
.390ec8		a0 00 00	ldy #$0000	                LDY #$0000
.390ecb		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.390ecd		c9 42 4d	cmp #$4d42	                CMP #$4D42
.390ed0		f0 03		beq $390ed5	                BEQ IBMP_PARSER_CONT
.390ed2		82 04 01	brl $390fd9	                BRL BMP_PARSER_END_WITH_ERROR
.390ed5						IBMP_PARSER_CONT
.390ed5		a0 02 00	ldy #$0002	                LDY #$0002
.390ed8		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.390eda		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390ede		a0 04 00	ldy #$0004	                LDY #$0004
.390ee1		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.390ee3		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390ee7		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.390eea		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390eee		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390ef2		18		clc		                CLC
.390ef3		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390ef7		85 50		sta $50		                STA BMP_FILE_SIZE
.390ef9		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390efd		85 52		sta $52		                STA BMP_FILE_SIZE+2
.390eff		a0 12 00	ldy #$0012	                LDY #$0012
.390f02		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390f04		85 40		sta $40		                STA BMP_X_SIZE
.390f06		a0 16 00	ldy #$0016	                LDY #$0016
.390f09		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390f0b		85 42		sta $42		                STA BMP_Y_SIZE
.390f0d		a0 2e 00	ldy #$002e	                LDY #$002E
.390f10		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390f12		0a		asl a		                ASL A; Multiply by 2
.390f13		0a		asl a		                ASL A; Multiply by 2
.390f14		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.390f16		e0 00 00	cpx #$0000	                CPX #$0000
.390f19		d0 05		bne $390f20	                BNE BMP_LUT1_PICK
.390f1b		20 e1 0f	jsr $390fe1	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.390f1e		80 08		bra $390f28	                BRA DONE_TRANSFER_LUT;
.390f20						  BMP_LUT1_PICK
.390f20		e0 01 00	cpx #$0001	                CPX #$0001
.390f23		d0 03		bne $390f28	                BNE BMP_LUT2_PICK
.390f25		20 11 10	jsr $391011	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.390f28						  BMP_LUT2_PICK
.390f28						  DONE_TRANSFER_LUT
.390f28		a5 56		lda $56		                LDA BMP_POSITION_Y
.390f2a		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.390f2e		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.390f30		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.390f34		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.390f38		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390f3c		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.390f40		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390f44		a5 54		lda $54		                LDA BMP_POSITION_X
.390f46		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.390f4a		a9 00 00	lda #$0000	                LDA #$0000
.390f4d		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390f51		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.390f55		85 f0		sta $f0		                STA USER_TEMP
.390f57		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.390f5b		85 f2		sta $f2		                STA USER_TEMP+2
.390f5d		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.390f5f		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390f63		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.390f65		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390f69		a5 f0		lda $f0		                LDA USER_TEMP
.390f6b		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.390f6f		a5 f2		lda $f2		                LDA USER_TEMP+2
.390f71		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.390f75		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.390f79		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.390f7b		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.390f7f		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.390f81		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.390f83		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390f87		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.390f89		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390f8d		a5 50		lda $50		                LDA BMP_FILE_SIZE
.390f8f		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390f93		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.390f95		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390f99		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390f9d		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.390f9f		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390fa3		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.390fa5		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.390fa7		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390fab		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.390fad		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390fb1		18		clc		                CLC
.390fb2		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.390fb4		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.390fb7		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.390fba		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.390fbe		a9 ff ff	lda #$ffff	                LDA #$FFFF
.390fc1		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.390fc5		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390fc9		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.390fcb		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390fcf		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.390fd1		20 41 10	jsr $391041	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.390fd4		a2 51 87	ldx #$8751	                LDX #<>bmp_parser_msg0
.390fd7		80 03		bra $390fdc	                BRA BMP_PARSER_END_NO_ERROR
.390fd9						BMP_PARSER_END_WITH_ERROR
.390fd9		a2 3d 87	ldx #$873d	                LDX #<>bmp_parser_err0
.390fdc						BMP_PARSER_END_NO_ERROR
.390fdc		22 3d 07 39	jsl $39073d	                JSL IPRINT       ; print the first line
.390fe0		6b		rtl		                RTL
.390fe1						BMP_PARSER_UPDATE_LUT0
.390fe1		38		sec		                SEC
.390fe2		a0 7a 00	ldy #$007a	                LDY #$007A
.390fe5		a2 00 00	ldx #$0000	                LDX #$0000
.390fe8		e2 20		sep #$20	                SEP #$20        ; set A short
.390fea						BMP_PARSER_UPDATE_LOOP
.390fea		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.390fec		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.390ff0		c8		iny		                INY
.390ff1		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.390ff3		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.390ff7		c8		iny		                INY
.390ff8		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.390ffa		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.390ffe		c8		iny		                INY
.390fff		a9 80		lda #$80	                LDA #$80
.391001		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.391005		c8		iny		                INY ; For the Alpha Value, nobody cares
.391006		e8		inx		                INX
.391007		e8		inx		                INX
.391008		e8		inx		                INX
.391009		e8		inx		                INX
.39100a		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39100c		d0 dc		bne $390fea	                BNE BMP_PARSER_UPDATE_LOOP
.39100e		c2 20		rep #$20	                REP #$20        ; set A long
.391010		60		rts		                RTS
.391011						BMP_PARSER_UPDATE_LUT1
.391011		38		sec		                SEC
.391012		a0 36 00	ldy #$0036	                LDY #$0036
.391015		a2 00 00	ldx #$0000	                LDX #$0000
.391018		e2 20		sep #$20	                SEP #$20        ; set A short
.39101a						PALETTE_LUT1_LOOP
.39101a		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39101c		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.391020		c8		iny		                INY
.391021		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391023		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.391027		c8		iny		                INY
.391028		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.39102a		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.39102e		c8		iny		                INY
.39102f		a9 80		lda #$80	                LDA #$80
.391031		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.391035		c8		iny		                INY ; For the Alpha Value, nobody cares
.391036		e8		inx		                INX
.391037		e8		inx		                INX
.391038		e8		inx		                INX
.391039		e8		inx		                INX
.39103a		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39103c		d0 dc		bne $39101a	                BNE PALETTE_LUT1_LOOP
.39103e		c2 20		rep #$20	                REP #$20        ; set A long
.391040		60		rts		                RTS
.391041						BMP_PARSER_DMA_SHIT_OUT
.391041		a2 00 00	ldx #$0000	                LDX #$0000
.391044						BMP_PARSER_LOOPY
.391044		a0 00 00	ldy #$0000	                LDY #$0000
.391047		e2 20		sep #$20	                SEP #$20        ; set A short
.391049						BMP_PARSER_LOOPX
.391049		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.39104b		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.39104d		c8		iny		                INY
.39104e		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.391050		d0 f7		bne $391049	                BNE BMP_PARSER_LOOPX
.391052		20 5e 10	jsr $39105e	                JSR BMP_PARSER_COMPUTE_Y_SRC
.391055		20 79 10	jsr $391079	                JSR BMP_PARSER_COMPUTE_Y_DST
.391058		e8		inx		                INX
.391059		e4 42		cpx $42		                CPX BMP_Y_SIZE
.39105b		d0 e7		bne $391044	                BNE BMP_PARSER_LOOPY
.39105d		60		rts		                RTS
.39105e						BMP_PARSER_COMPUTE_Y_SRC
.39105e		c2 20		rep #$20	                REP #$20        ; set A long
.391060		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391062		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391066		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391068		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39106c		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391070		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391072		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391076		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391078		60		rts		                RTS
.391079						BMP_PARSER_COMPUTE_Y_DST
.391079		c2 20		rep #$20	                REP #$20        ; set A long
.39107b		18		clc		                CLC
.39107c		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.39107e		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.391080		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391082		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391084		69 00 00	adc #$0000	                ADC #$0000
.391087		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391089		60		rts		                RTS
.39108a		ea		nop		ILOOP           NOP
.39108b		ea		nop		                NOP
.39108c		ea		nop		                NOP
.39108d		ea		nop		                NOP
.39108e		ea		nop		                NOP
.39108f		ea		nop		                NOP
.391090		ea		nop		                NOP
.391091		ea		nop		                NOP
.391092		ea		nop		                NOP
.391093		ea		nop		                NOP
.391094		6b		rtl		                RTL
.391095		22 8a 10 39	jsl $39108a	ILOOP_1         JSL ILOOP
.391099		22 8a 10 39	jsl $39108a	                JSL ILOOP
.39109d		22 8a 10 39	jsl $39108a	                JSL ILOOP
.3910a1		22 8a 10 39	jsl $39108a	                JSL ILOOP
.3910a5		22 8a 10 39	jsl $39108a	                JSL ILOOP
.3910a9		22 8a 10 39	jsl $39108a	                JSL ILOOP
.3910ad		22 8a 10 39	jsl $39108a	                JSL ILOOP
.3910b1		22 8a 10 39	jsl $39108a	                JSL ILOOP
.3910b5		22 8a 10 39	jsl $39108a	                JSL ILOOP
.3910b9		22 8a 10 39	jsl $39108a	                JSL ILOOP
.3910bd		6b		rtl		                RTL
.3910be		22 95 10 39	jsl $391095	ILOOP_1MS       JSL ILOOP_1
.3910c2		6b		rtl		                RTL
.3910c3		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.3910c6		f0 07		beq $3910cf	                BEQ LOOP_MS_END
.3910c8		22 be 10 39	jsl $3910be	                JSL ILOOP_1MS
.3910cc		ca		dex		                DEX
.3910cd		80 f4		bra $3910c3	                BRA ILOOP_MS
.3910cf		6b		rtl		LOOP_MS_END     RTL
.3910d0						IDELAY
.3910d0		8b		phb		                PHB
.3910d1		08		php		                PHP
.3910d2		48		pha		                PHA             ; begin setdbr macro
.3910d3		08		php		                PHP
.3910d4		e2 20		sep #$20	                SEP #$20        ; set A short
.3910d6		a9 00		lda #$00	                LDA #0
.3910d8		48		pha		                PHA
.3910d9		ab		plb		                PLB
.3910da		28		plp		                PLP
.3910db		68		pla		                PLA             ; end setdbr macro
.3910dc		e2 20		sep #$20	                SEP #$20        ; set A short
.3910de		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.3910e0		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.3910e4		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.3910e8		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.3910ea		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.3910ee		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.3910f0		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.3910f3		a9 00		lda #$00	                LDA #0
.3910f5		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.3910f9		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.3910fd		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.391101		c2 30		rep #$30	                REP #$30        ; set A&X long
.391103		8a		txa		                TXA
.391104		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.391108		98		tya		                TYA
.391109		e2 20		sep #$20	                SEP #$20        ; set A short
.39110b		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.39110f		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.391111		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391115		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.391117		cb		wai		loop            WAI                         ; Wait for an interrupt
.391118		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.39111b		f0 fa		beq $391117	                BEQ loop                    ; Keep checking until it's set
.39111d		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.39111f		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391123		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391125		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391128		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.39112c		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.39112e		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391132		28		plp		                PLP
.391133		ab		plb		                PLB
.391134		6b		rtl		                RTL
.391135						SHOW_CREDITS
.391135		48		pha		                PHA
.391136		da		phx		                PHX
.391137		5a		phy		                PHY
.391138		08		php		                PHP
.391139		e2 20		sep #$20	                SEP #$20        ; set A short
.39113b		c2 10		rep #$10	                REP #$10        ; set X long
.39113d		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.391141		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.391143		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391147		a2 00 00	ldx #$0000	                LDX #0
.39114a		bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.39114e		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.391152		bf 00 18 3b	lda $3b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.391156		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.39115a		e8		inx		                INX
.39115b		e0 00 20	cpx #$2000	                CPX #128 * 64
.39115e		d0 ea		bne $39114a	                BNE credit_loop
.391160		22 d7 06 39	jsl $3906d7	                JSL IGETCHW                     ; Wait for a keypress
.391164		22 21 09 39	jsl $390921	                JSL ICLRSCREEN                  ; Then clear the screen and return
.391168		22 51 08 39	jsl $390851	                JSL ICSRHOME                    ; Move cursor to the home position
.39116c		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.391170		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.391172		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391176		28		plp		                PLP
.391177		7a		ply		                PLY
.391178		fa		plx		                PLX
.391179		68		pla		                PLA
.39117a		6b		rtl		                RTL
.39117b		00		brk #		ISCINIT         BRK ;
.39117c		00		brk #		IIOINIT         BRK ;
.39117d		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.39117e		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.39117f		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.391180		00		brk #		ICLOSE          BRK ; Close a channel
.391181		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.391182		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.391183		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.391184		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.391185		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.391186		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.391187		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.391188		00		brk #		IPRINTF         BRK ; Print a float value
.391189		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.39118a		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.39118b		00		brk #		IPUSHKEY        BRK ;
.39118c		00		brk #		IPUSHKEYS       BRK ;
.39118d		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.39118e		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.39118f		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>391190		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>391198		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>3911a8		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>3911b0		12
>3911b1		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>3911b9		15
>3911ba		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>3911c0		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>3911c5		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Instruments.asm

>3911cb		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>3911d3		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>3911e1		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>3911e9		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>3911f7		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>3911ff		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>39120d		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>391215		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>391223		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>39122b		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>391239		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>391241		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>39124f		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>391257		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>391265		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>39126d		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>39127b		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>391283		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>391291		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>391299		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>3912a7		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>3912af		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>3912bd		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>3912c5		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>3912d3		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>3912db		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>3912e9		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>3912f1		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>3912ff		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>391307		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>391315		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>39131d		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>39132b		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>391333		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>391341		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>391349		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>391357		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>39135f		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>39136d		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>391375		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>391383		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>39138b		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>391399		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>3913a1		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>3913af		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>3913b7		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>3913c5		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>3913cd		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>3913db		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>3913e3		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>3913f1		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>3913f9		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>391407		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>39140f		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>39141d		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>391425		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>391433		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>39143b		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>391449		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>391451		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>39145f		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>391467		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>391475		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>39147d		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>39148b		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>391493		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>3914a1		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>3914a9		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>3914b7		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>3914bf		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>3914cd		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>3914d5		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>3914e3		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>3914eb		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>3914f9		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>391501		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>39150f		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>391517		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>391525		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>39152d		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>39153b		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>391543		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>391551		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>391559		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>391567		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>39156f		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>39157d		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>391585		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>391593		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>39159b		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>3915a9		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>3915b1		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>3915bf		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>3915c7		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>3915d5		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>3915dd		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>3915eb		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>3915f3		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>391601		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>391609		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>391617		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>39161f		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>39162d		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>391635		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>391643		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>39164b		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>391659		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391661		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>39166f		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>391677		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391685		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>39168d		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>39169b		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>3916a3		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>3916b1		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>3916b9		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>3916c7		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>3916cf		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>3916dd		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>3916e5		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>3916f3		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>3916fb		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>391709		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>391711		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>39171f		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>391727		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391735		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>39173d		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>39174b		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391753		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391761		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391769		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391777		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>39177f		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>39178d		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391795		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>3917a3		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>3917ab		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>3917b9		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>3917c1		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>3917cf		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>3917d7		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>3917e5		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>3917ed		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>3917fb		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391803		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391811		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391819		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391827		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>39182f		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>39183d		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391845		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391853		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>39185b		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391869		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391871		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>39187f		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391887		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391895		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>39189d		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>3918ab		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>3918b3		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>3918c1		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>3918c9		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>3918d7		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>3918df		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>3918ed		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>3918f5		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391903		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>39190b		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391919		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391921		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>39192f		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391937		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391945		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>39194d		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>39195b		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391963		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391971		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391979		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391987		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>39198f		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>39199d		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>3919a5		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>3919b3		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>3919bb		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>3919c9		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>3919d1		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>3919df		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>3919e7		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>3919f5		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>3919fd		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391a0b		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391a13		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391a21		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391a29		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391a37		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391a3f		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391a4d		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391a55		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391a63		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391a6b		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391a79		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391a81		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391a8f		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391a97		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391aa5		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>391aad		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>391abb		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>391ac3		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>391ad1		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>391ad9		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>391ae7		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>391aef		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>391afd		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>391b05		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>391b13		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>391b1b		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>391b29		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>391b31		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>391b3f		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>391b47		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>391b55		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>391b5d		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>391b6b		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>391b73		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>391b81		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>391b89		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>391b97		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>391b9f		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>391bad		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>391bb5		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>391bc3		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>391bcb		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>391bd9		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>391be1		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>391bef		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>391bf7		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>391c05		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>391c0d		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>391c1b		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>391c23		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>391c31		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>391c39		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>391c47		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>391c4f		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>391c5d		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>391c65		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>391c73		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>391c7b		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>391c89		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>391c91		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>391c9f		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>391ca7		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>391cb5		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>391cbd		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>391ccb		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>391cd3		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>391ce1		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>391ce9		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>391cf7		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>391cff		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>391d0d		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>391d15		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>391d23		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>391d2b		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>391d39		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>391d41		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>391d4f		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>391d57		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>391d65		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>391d6d		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>391d7b		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>391d83		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>391d91		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>391d99		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>391da7		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>391daf		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>391dbd		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>391dc5		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>391dd3		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>391ddb		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>391de9		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>391df1		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>391dff		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>391e07		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>391e15		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>391e1d		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>391e2b		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>391e33		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Drums.asm

>391e41		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>391e49		00 87 fa 00
>391e4d		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>391e55		00 88 98 03
>391e59		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>391e61		00 88 98 03
>391e65		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>391e6d		00 f9 69 00
>391e71		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>391e79		80 e8 4a 00
>391e7d		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>391e85		00 f6 9a 00
>391e89		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>391e91		1b f2 34 00
>391e95		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>391e9d		00 f7 8a 00
>391ea1		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>391ea9		00 f6 47 00
>391ead		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>391eb5		00 f9 69 00
>391eb9		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>391ec1		00 f7 a9 00
>391ec5		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>391ecd		00 87 fa 00
>391ed1		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>391ed9		00 f7 a9 00
>391edd		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391ee5		00 f5 f5 00
>391ee9		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>391ef1		06 b8 d8 03
>391ef5		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391efd		00 f5 f5 00
>391f01		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>391f09		06 b8 d8 03
>391f0d		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391f15		00 f5 f5 00
>391f19		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>391f21		10 74 f8 03
>391f25		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391f2d		00 f5 f5 00
>391f31		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391f39		00 f5 f5 00
>391f3d		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391f45		05 c5 d4 03
>391f49		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391f51		00 f5 f5 00
>391f55		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>391f5d		04 f9 44 03
>391f61		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391f69		05 c5 d4 03
>391f6d		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>391f75		04 f9 44 03
>391f79		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>391f81		03 87 f7 03
>391f85		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391f8d		05 c5 d4 03
>391f91		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>391f99		00 f6 28 00
>391f9d		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391fa5		05 c5 d4 03
>391fa9		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>391fb1		00 f5 f7 01
>391fb5		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>391fbd		04 f9 44 03
>391fc1		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>391fc9		00 99 f9 00
>391fcd		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>391fd5		00 a8 f7 00
>391fd9		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>391fe1		00 99 f9 00
>391fe5		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>391fed		00 a6 f6 00
>391ff1		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>391ff9		00 a6 f6 00
>391ffd		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392005		00 f6 36 02
>392009		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392011		00 f6 36 02
>392015		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>39201d		00 96 e8 01
>392021		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392029		00 96 e8 01
>39202d		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392035		02 79 77 03
>392039		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392041		02 79 77 03
>392045		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>39204d		00 a5 2b 02
>392051		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>392059		00 93 3b 02
>39205d		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>392065		01 89 3b 03
>392069		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>392071		0a 53 2b 02
>392075		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>39207d		00 f6 89 00
>392081		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392089		00 f6 9a 00
>39208d		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392095		00 f6 9a 00
>392099		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>3920a1		00 87 4b 01
>3920a5		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>3920ad		00 78 67 01
>3920b1		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>3920b9		02 f8 fc 00
>3920bd		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3920c5		40 f5 f5 00
>3920c9		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3920d1		02 79 77 03
>3920d5		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3920dd		40 f5 f5 00
>3920e1		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3920e9		40 f5 f5 00
>3920ed		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3920f5		00 f9 69 00
>3920f9		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392101		00 f9 69 00
>392105		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>39210d		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>392111		41 1e 39 00 4d 1e 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>392119		59 1e 39 00 65 1e 39 00
>392121		71 1e 39 00 7d 1e 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>392129		89 1e 39 00 95 1e 39 00
>392131		a1 1e 39 00 ad 1e 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>392139		b9 1e 39 00 c5 1e 39 00
>392141		d1 1e 39 00 dd 1e 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>392149		e9 1e 39 00 f5 1e 39 00
>392151		01 1f 39 00 0d 1f 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>392159		19 1f 39 00 25 1f 39 00
>392161		31 1f 39 00 3d 1f 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>392169		49 1f 39 00 55 1f 39 00
>392171		61 1f 39 00 6d 1f 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>392179		79 1f 39 00 85 1f 39 00
>392181		91 1f 39 00 9d 1f 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>392189		a9 1f 39 00 b5 1f 39 00
>392191		c1 1f 39 00 cd 1f 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>392199		d9 1f 39 00 e5 1f 39 00
>3921a1		f1 1f 39 00 fd 1f 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>3921a9		09 20 39 00 15 20 39 00
>3921b1		21 20 39 00 2d 20 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>3921b9		39 20 39 00 45 20 39 00
>3921c1		51 20 39 00 5d 20 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>3921c9		69 20 39 00 75 20 39 00
>3921d1		81 20 39 00 8d 20 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>3921d9		99 20 39 00 a5 20 39 00
>3921e1		b1 20 39 00 bd 20 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>3921e9		c9 20 39 00 d5 20 39 00
>3921f1		e1 20 39 00 ed 20 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>3921f9		f9 20 39 00 05 21 39 00

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments.asm

>392201		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>392209		00 b1 f5 01
>39220d		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>392215		03 f1 f5 00
>392219		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>392221		03 c1 f5 00
>392225		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>39222d		00 92 f5 01
>392231		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>392239		00 f1 f9 00
>39223d		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>392245		00 f1 f5 00
>392249		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>392251		02 81 f6 01
>392255		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>39225d		00 c2 b9 01
>392261		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>392269		05 b2 35 00
>39226d		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>392275		1b f2 34 00
>392279		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>392281		01 f5 74 00
>392285		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>39228d		00 61 e3 00
>392291		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>392299		00 a4 64 00
>39229d		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>3922a5		07 b5 f5 00
>3922a9		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>3922b1		00 f3 74 00
>3922b5		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>3922bd		00 c3 94 01
>3922c1		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>3922c9		00 f4 0d 01
>3922cd		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>3922d5		00 f5 0b 01
>3922d9		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>3922e1		00 bf 07 00
>3922e5		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>3922ed		00 6d 08 01
>3922f1		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>3922f9		00 51 17 01
>3922fd		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>392305		00 51 17 01
>392309		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>392311		00 53 08 01
>392315		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>39231d		00 53 06 01
>392321		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>392329		00 d2 f8 00
>39232d		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>392335		00 e2 c7 01
>392339		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>392341		00 f1 9c 00
>392345		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>39234d		02 f2 c9 01
>392351		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>392359		03 95 fb 00
>39235d		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>392365		04 a1 59 00
>392369		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>392371		03 91 fc 03
>392375		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>39237d		02 b4 ec 00
>392381		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>392389		00 93 f7 00
>39238d		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>392395		04 c1 58 00
>392399		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>3923a1		02 c3 6a 00
>3923a5		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>3923ad		00 62 87 00
>3923b1		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>3923b9		00 f3 97 00
>3923bd		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>3923c5		00 b3 97 00
>3923c9		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>3923d1		04 f3 cc 00
>3923d5		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>3923dd		00 93 aa 00
>3923e1		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>3923e9		00 78 08 01
>3923ed		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>3923f5		00 78 08 01
>3923f9		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>392401		00 54 27 01
>392405		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>39240d		00 61 56 00
>392411		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>392419		00 75 16 01
>39241d		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>392425		00 f5 f6 01
>392429		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>392431		80 f3 e3 00
>392435		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>39243d		00 b5 f5 00
>392441		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>392449		80 71 16 00
>39244d		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>392455		00 30 55 01
>392459		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>392461		00 62 36 01
>392465		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>39246d		02 51 07 00
>392471		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>392479		00 62 39 00
>39247d		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>392485		00 66 27 00
>392489		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>392491		00 73 46 00
>392495		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>39249d		00 74 76 01
>3924a1		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>3924a9		81 92 38 00
>3924ad		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>3924b5		02 71 19 00
>3924b9		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>3924c1		01 81 09 00
>3924c5		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>3924cd		00 83 4b 02
>3924d1		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>3924d9		05 71 59 00
>3924dd		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>3924e5		03 82 39 00
>3924e9		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>3924f1		82 84 17 00
>3924f5		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>3924fd		02 72 16 00
>392501		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>392509		00 7b 0a 00
>39250d		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>392515		00 85 0c 01
>392519		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>392521		00 7b 0a 01
>392525		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>39252d		00 79 18 01
>392531		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>392539		01 73 08 00
>39253d		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>392545		04 77 0a 00
>392549		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>392551		00 51 19 00
>392555		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>39255d		01 74 09 00
>392561		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>392569		01 63 28 00
>39256d		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>392575		00 65 0a 00
>392579		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>392581		00 67 29 00
>392585		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>39258d		00 67 09 00
>392591		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>392599		01 6a 28 00
>39259d		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>3925a5		00 55 27 00
>3925a9		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>3925b1		00 6f 08 00
>3925b5		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>3925bd		00 7a 07 00
>3925c1		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>3925c9		06 a2 0d 00
>3925cd		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>3925d5		00 a3 5f 00
>3925d9		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>3925e1		00 42 27 00
>3925e5		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>3925ed		05 b2 49 00
>3925f1		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>3925f9		00 b2 79 01
>3925fd		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>392605		00 7a 1a 00
>392609		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>392611		00 82 28 01
>392615		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>39261d		02 c3 5f 00
>392621		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>392629		86 c4 95 01
>39262d		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>392635		00 44 15 00
>392639		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>392641		00 d1 06 00
>392645		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>39264d		00 82 37 00
>392651		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>392659		00 41 35 00
>39265d		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392665		02 32 f5 01
>392669		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392671		00 61 26 00
>392675		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>39267d		84 3f 05 01
>392681		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>392689		01 d1 f6 00
>39268d		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392695		00 41 05 01
>392699		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>3926a1		05 f3 e4 00
>3926a5		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>3926ad		00 92 f5 01
>3926b1		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>3926b9		04 f2 e4 01
>3926bd		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>3926c5		00 45 25 00
>3926c9		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>3926d1		01 a3 36 00
>3926d5		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>3926dd		01 98 05 01
>3926e1		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>3926e9		02 a3 f6 01
>3926ed		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>3926f5		00 f6 f8 00
>3926f9		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>392701		00 f3 f5 00
>392705		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>39270d		00 94 e5 01
>392711		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>392719		00 84 44 00
>39271d		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>392725		03 83 18 01
>392729		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>392731		01 78 08 01
>392735		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>39273d		03 8e 08 01
>392741		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>392749		09 f2 46 00
>39274d		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392755		00 96 e8 01
>392759		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392761		00 f6 f6 01
>392765		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>39276d		00 f6 9a 00
>392771		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392779		00 c6 45 00
>39277d		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392785		00 f4 b4 00
>392789		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392791		00 d5 25 00
>392795		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>39279d		0e 21 2d 00
>3927a1		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>3927a9		00 55 87 02
>3927ad		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>3927b5		08 98 87 01
>3927b9		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>3927c1		04 17 04 03
>3927c5		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>3927cd		05 77 f9 02
>3927d1		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>3927d9		02 f4 08 00
>3927dd		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>3927e5		00 36 05 01
>3927e9		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>3927f1		05 32 55 03
>3927f5		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>3927fd		00 f3 df 00
>392801		01 22 39 00 0d 22 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392809		19 22 39 00 25 22 39 00 31 22 39 00 3d 22 39 00
>392819		49 22 39 00 55 22 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392821		61 22 39 00 6d 22 39 00 79 22 39 00 85 22 39 00
>392831		91 22 39 00 9d 22 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392839		a9 22 39 00 b5 22 39 00 c1 22 39 00 cd 22 39 00
>392849		d9 22 39 00 e5 22 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392851		f1 22 39 00 fd 22 39 00 09 23 39 00 15 23 39 00
>392861		21 23 39 00 2d 23 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392869		39 23 39 00 45 23 39 00 51 23 39 00 5d 23 39 00
>392879		69 23 39 00 75 23 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392881		81 23 39 00 8d 23 39 00 99 23 39 00 a5 23 39 00
>392891		b1 23 39 00 bd 23 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392899		c9 23 39 00 d5 23 39 00 e1 23 39 00 ed 23 39 00
>3928a9		f9 23 39 00 05 24 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>3928b1		11 24 39 00 1d 24 39 00 29 24 39 00 35 24 39 00
>3928c1		41 24 39 00 4d 24 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>3928c9		59 24 39 00 65 24 39 00 71 24 39 00 7d 24 39 00
>3928d9		89 24 39 00 95 24 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>3928e1		a1 24 39 00 ad 24 39 00 b9 24 39 00 c5 24 39 00
>3928f1		d1 24 39 00 dd 24 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>3928f9		e9 24 39 00 f5 24 39 00 01 25 39 00 0d 25 39 00
>392909		19 25 39 00 25 25 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392911		31 25 39 00 3d 25 39 00 49 25 39 00 55 25 39 00
>392921		61 25 39 00 6d 25 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392929		79 25 39 00 85 25 39 00 91 25 39 00 9d 25 39 00
>392939		a9 25 39 00 b5 25 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392941		c1 25 39 00 cd 25 39 00 d9 25 39 00 e5 25 39 00
>392951		f1 25 39 00 fd 25 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392959		09 26 39 00 15 26 39 00 21 26 39 00 2d 26 39 00
>392969		39 26 39 00 45 26 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392971		51 26 39 00 5d 26 39 00 69 26 39 00 75 26 39 00
>392981		81 26 39 00 8d 26 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392989		99 26 39 00 a5 26 39 00 b1 26 39 00 bd 26 39 00
>392999		c9 26 39 00 d5 26 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>3929a1		e1 26 39 00 ed 26 39 00 f9 26 39 00 05 27 39 00
>3929b1		11 27 39 00 1d 27 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>3929b9		29 27 39 00 35 27 39 00 41 27 39 00 4d 27 39 00
>3929c9		59 27 39 00 65 27 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>3929d1		71 27 39 00 7d 27 39 00 89 27 39 00 95 27 39 00
>3929e1		a1 27 39 00 ad 27 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>3929e9		b9 27 39 00 c5 27 39 00 d1 27 39 00 dd 27 39 00
>3929f9		e9 27 39 00 f5 27 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments_Win31.asm

>392a01		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392a09		0d f2 f7 00
>392a0d		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392a15		07 f2 f7 00
>392a19		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392a21		07 f2 f6 00
>392a25		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392a2d		07 f2 f7 00
>392a31		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392a39		07 f2 f7 00
>392a3d		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392a45		07 f2 f7 00
>392a49		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a51		00 00 00 00
>392a55		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a5d		00 00 00 00
>392a61		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a69		00 00 00 00
>392a6d		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392a75		87 f2 f1 00
>392a79		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392a81		07 f4 f4 00
>392a85		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392a8d		07 f2 f6 00
>392a91		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392a99		07 e7 f7 00
>392a9d		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392aa5		07 f6 f6 00
>392aa9		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>392ab1		87 a3 f3 00
>392ab5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392abd		00 00 00 00
>392ac1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ac9		00 00 00 00
>392acd		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ad5		00 00 00 00
>392ad9		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>392ae1		07 8a 08 00
>392ae5		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>392aed		07 55 14 00
>392af1		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>392af9		87 55 04 00
>392afd		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>392b05		07 46 1a 00
>392b09		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>392b11		07 61 07 00
>392b15		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>392b1d		90 61 07 00
>392b21		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b29		00 00 00 00
>392b2d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b35		00 00 00 00
>392b39		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b41		00 00 00 00
>392b45		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>392b4d		87 f3 f8 00
>392b51		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>392b59		07 f6 3a 00
>392b5d		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>392b65		0c 84 19 00
>392b69		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>392b71		07 94 19 00
>392b75		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>392b7d		87 d1 f8 00
>392b81		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>392b89		07 c3 a6 00
>392b8d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b95		00 00 00 00
>392b99		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ba1		00 00 00 00
>392ba5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392bad		00 00 00 00
>392bb1		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>392bb9		47 f2 df 00
>392bbd		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>392bc5		0f a1 df 00
>392bc9		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>392bd1		07 f1 78 00
>392bd5		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>392bdd		07 f1 18 00
>392be1		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>392be9		07 56 26 00
>392bed		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>392bf5		07 66 06 00
>392bf9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c01		00 00 00 00
>392c05		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c0d		00 00 00 00
>392c11		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c19		00 00 00 00
>392c1d		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>392c25		87 85 35 00
>392c29		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>392c31		87 f3 f4 00
>392c35		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>392c3d		07 f2 c3 00
>392c41		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>392c49		08 72 08 00
>392c4d		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>392c55		07 3f 07 01
>392c59		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>392c61		07 4f 05 00
>392c65		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c6d		00 00 00 00
>392c71		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c79		00 00 00 00
>392c7d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c85		00 00 00 00
>392c89		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>392c91		07 7a 05 00
>392c95		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>392c9d		07 a5 45 00
>392ca1		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>392ca9		08 8f 09 00
>392cad		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>392cb5		0c 8f 09 00
>392cb9		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>392cc1		07 82 37 00
>392cc5		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>392ccd		07 62 2c 01
>392cd1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392cd9		00 00 00 00
>392cdd		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ce5		00 00 00 00
>392ce9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392cf1		00 00 00 00
>392cf5		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>392cfd		07 a6 1c 00
>392d01		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>392d09		07 72 0b 00
>392d0d		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>392d15		07 72 09 00
>392d19		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>392d21		07 82 09 00
>392d25		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>392d2d		07 72 0f 00
>392d31		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>392d39		07 8f 0a 00
>392d3d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d45		00 00 00 00
>392d49		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d51		00 00 00 00
>392d55		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d5d		00 00 00 00
>392d61		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>392d69		07 65 1a 00
>392d6d		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>392d75		07 65 1a 00
>392d79		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>392d81		07 75 0a 00
>392d85		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>392d8d		07 65 1a 00
>392d91		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>392d99		07 65 26 00
>392d9d		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>392da5		07 55 36 00
>392da9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392db1		00 00 00 00
>392db5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dbd		00 00 00 00
>392dc1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dc9		00 00 00 00
>392dcd		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>392dd5		07 ff 0f 01
>392dd9		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>392de1		87 64 18 00
>392de5		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>392ded		07 96 0a 00
>392df1		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>392df9		07 91 2a 00
>392dfd		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>392e05		47 6f 07 00
>392e09		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>392e11		07 8f 06 02
>392e15		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e1d		00 00 00 00
>392e21		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e29		00 00 00 00
>392e2d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e35		00 00 00 00
>392e39		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>392e41		07 55 16 00
>392e45		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>392e4d		07 6a 03 00
>392e51		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>392e59		07 42 35 00
>392e5d		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>392e65		07 31 47 01
>392e69		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>392e71		0a 42 25 00
>392e75		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>392e7d		07 cf 07 00
>392e81		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e89		00 00 00 00
>392e8d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e95		00 00 00 00
>392e99		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ea1		00 00 00 00
>392ea5		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>392ead		8a f2 26 00
>392eb1		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>392eb9		07 f2 f5 00
>392ebd		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>392ec5		87 11 13 00
>392ec9		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>392ed1		87 1d 03 00
>392ed5		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>392edd		07 81 23 00
>392ee1		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>392ee9		0a f2 f6 01
>392eed		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ef5		00 00 00 00
>392ef9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f01		00 00 00 00
>392f05		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f0d		00 00 00 00
>392f11		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>392f19		07 c2 05 00
>392f1d		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>392f25		07 6f 0c 01
>392f29		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>392f31		07 56 16 00
>392f35		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>392f3d		88 8f 0b 00
>392f41		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>392f49		87 c3 e5 00
>392f4d		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>392f55		07 f8 16 00
>392f59		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f61		00 00 00 00
>392f65		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f6d		00 00 00 00
>392f71		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f79		00 00 00 00
>392f7d		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>392f85		0a f3 03 00
>392f89		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>392f91		07 f3 02 00
>392f95		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>392f9d		07 1f ff 03
>392fa1		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>392fa9		8f 56 84 02
>392fad		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>392fb5		0c 34 04 03
>392fb9		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>392fc1		07 1f 02 03
>392fc5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fcd		00 00 00 00
>392fd1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fd9		00 00 00 00
>392fdd		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fe5		00 00 00 00
>392fe9		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>392ff1		07 12 16 01
>392ff5		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>392ffd		07 f6 c9 02
>393001		01 2a 39 00 0d 2a 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>393009		19 2a 39 00 25 2a 39 00 31 2a 39 00 3d 2a 39 00
>393019		49 2a 39 00 55 2a 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>393021		61 2a 39 00 6d 2a 39 00 79 2a 39 00 85 2a 39 00
>393031		91 2a 39 00 9d 2a 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>393039		a9 2a 39 00 b5 2a 39 00 c1 2a 39 00 cd 2a 39 00
>393049		d9 2a 39 00 e5 2a 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>393051		f1 2a 39 00 fd 2a 39 00 09 2b 39 00 15 2b 39 00
>393061		21 2b 39 00 2d 2b 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>393069		39 2b 39 00 45 2b 39 00 51 2b 39 00 5d 2b 39 00
>393079		69 2b 39 00 75 2b 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>393081		81 2b 39 00 8d 2b 39 00 99 2b 39 00 a5 2b 39 00
>393091		b1 2b 39 00 bd 2b 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>393099		c9 2b 39 00 d5 2b 39 00 e1 2b 39 00 ed 2b 39 00
>3930a9		f9 2b 39 00 05 2c 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>3930b1		11 2c 39 00 1d 2c 39 00 29 2c 39 00 35 2c 39 00
>3930c1		41 2c 39 00 4d 2c 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>3930c9		59 2c 39 00 65 2c 39 00 71 2c 39 00 7d 2c 39 00
>3930d9		89 2c 39 00 95 2c 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>3930e1		a1 2c 39 00 ad 2c 39 00 b9 2c 39 00 c5 2c 39 00
>3930f1		d1 2c 39 00 dd 2c 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>3930f9		e9 2c 39 00 f5 2c 39 00 01 2d 39 00 0d 2d 39 00
>393109		19 2d 39 00 25 2d 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>393111		31 2d 39 00 3d 2d 39 00 49 2d 39 00 55 2d 39 00
>393121		61 2d 39 00 6d 2d 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>393129		79 2d 39 00 85 2d 39 00 91 2d 39 00 9d 2d 39 00
>393139		a9 2d 39 00 b5 2d 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>393141		c1 2d 39 00 cd 2d 39 00 d9 2d 39 00 e5 2d 39 00
>393151		f1 2d 39 00 fd 2d 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>393159		09 2e 39 00 15 2e 39 00 21 2e 39 00 2d 2e 39 00
>393169		39 2e 39 00 45 2e 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>393171		51 2e 39 00 5d 2e 39 00 69 2e 39 00 75 2e 39 00
>393181		81 2e 39 00 8d 2e 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>393189		99 2e 39 00 a5 2e 39 00 b1 2e 39 00 bd 2e 39 00
>393199		c9 2e 39 00 d5 2e 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>3931a1		e1 2e 39 00 ed 2e 39 00 f9 2e 39 00 05 2f 39 00
>3931b1		11 2f 39 00 1d 2f 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>3931b9		29 2f 39 00 35 2f 39 00 41 2f 39 00 4d 2f 39 00
>3931c9		59 2f 39 00 65 2f 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>3931d1		71 2f 39 00 7d 2f 39 00 89 2f 39 00 95 2f 39 00
>3931e1		a1 2f 39 00 ad 2f 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>3931e9		b9 2f 39 00 c5 2f 39 00 d1 2f 39 00 dd 2f 39 00
>3931f9		e9 2f 39 00 f5 2f 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm

>393201		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.393209						IOPL2_TONE_TEST
.393209		e2 20		sep #$20	                SEP #$20        ; set A short
.39320b		c2 10		rep #$10	                REP #$10        ; set X long
.39320d		a2 00 00	ldx #$0000	                LDX #0
.393210						OPL2_TONE_TESTING_L1
.393210		bf 01 32 39	lda $393201,x	                LDA NOTE_INTRO, X
.393214		29 0f		and #$0f	                AND #$F
.393216		85 30		sta $30		                STA OPL2_NOTE ; start at C
.393218		bf 01 32 39	lda $393201,x	                LDA NOTE_INTRO, X
.39321c		29 70		and #$70	                AND #$70
.39321e		4a		lsr a		                LSR A
.39321f		4a		lsr a		                LSR A
.393220		4a		lsr a		                LSR A
.393221		4a		lsr a		                LSR A
.393222		85 31		sta $31		                STA OPL2_OCTAVE
.393224		8a		txa		                TXA
.393225		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.393227		85 27		sta $27		                STA OPL2_CHANNEL
.393229		22 f9 33 39	jsl $3933f9	                JSL OPL2_PLAYNOTE
.39322d		a0 00 00	ldy #$0000	                LDY #$0000
.393230						OPL2_TONE_TESTING_L2
.393230		ea		nop		                NOP
.393231		ea		nop		                NOP
.393232		ea		nop		                NOP
.393233		ea		nop		                NOP
.393234		c8		iny		                INY
.393235		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.393238		d0 f6		bne $393230	                BNE OPL2_TONE_TESTING_L2
.39323a		e8		inx		                INX
.39323b		e0 08 00	cpx #$0008	                CPX #8
.39323e		d0 d0		bne $393210	                BNE OPL2_TONE_TESTING_L1
.393240		6b		rtl		                RTL
.393241						OPL2_INIT
.393241		c2 20		rep #$20	                REP #$20        ; set A long
.393243		a9 00 00	lda #$0000	                LDA #$0000
.393246		85 28		sta $28		                STA OPL2_REG_REGION
.393248		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39324a		85 30		sta $30		                STA OPL2_NOTE
.39324c		85 32		sta $32		                STA OPL2_PARAMETER0
.39324e		85 34		sta $34		                STA OPL2_PARAMETER2
.393250		a9 cb 11	lda #$11cb	                LDA #<>INSTRUMENT_ACCORDN
.393253		85 50		sta $50		                STA RAD_ADDR
.393255		a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.393258		85 52		sta $52		                STA RAD_ADDR + 2
.39325a		e2 20		sep #$20	                SEP #$20        ; set A short
.39325c		6b		rtl		                RTL
.39325d						OPL2_Reset
.39325d		6b		rtl		                RTL
.39325e						OPL2_Get_FrequencyBlock
.39325e		6b		rtl		                RTL
.39325f						OPL2_GET_REGISTER
.39325f		48		pha		                PHA             ; begin setdp macro
.393260		08		php		                PHP
.393261		c2 20		rep #$20	                REP #$20        ; set A long
.393263		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393266		5b		tcd		                TCD
.393267		28		plp		                PLP
.393268		68		pla		                PLA             ; end setdp macro
.393269		c2 20		rep #$20	                REP #$20        ; set A long
.39326b		18		clc		              CLC
.39326c		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39326f		65 32		adc $32		              ADC OPL2_PARAMETER0
.393271		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393273		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393276		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393278		e2 20		sep #$20	                SEP #$20        ; set A short
.39327a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39327c		6b		rtl		              RTL
.39327d						OPL2_GET_WAVEFORM_SELECT
.39327d		48		pha		                PHA             ; begin setdp macro
.39327e		08		php		                PHP
.39327f		c2 20		rep #$20	                REP #$20        ; set A long
.393281		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393284		5b		tcd		                TCD
.393285		28		plp		                PLP
.393286		68		pla		                PLA             ; end setdp macro
.393287		c2 20		rep #$20	                REP #$20        ; set A long
.393289		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39328c		69 01 00	adc #$0001	              ADC #$0001
.39328f		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393291		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393294		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393296		e2 20		sep #$20	                SEP #$20        ; set A short
.393298		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39329a		29 20		and #$20	              AND #$20
.39329c		6b		rtl		              RTL
.39329d						OPL2_GET_SCALINGLEVEL
.39329d		48		pha		                PHA             ; begin setdp macro
.39329e		08		php		                PHP
.39329f		c2 20		rep #$20	                REP #$20        ; set A long
.3932a1		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3932a4		5b		tcd		                TCD
.3932a5		28		plp		                PLP
.3932a6		68		pla		                PLA             ; end setdp macro
.3932a7		c2 20		rep #$20	                REP #$20        ; set A long
.3932a9		a9 40 00	lda #$0040	              LDA #$0040  ;
.3932ac		85 28		sta $28		              STA OPL2_REG_REGION
.3932ae		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.3932b1		e2 20		sep #$20	                SEP #$20        ; set A short
.3932b3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3932b5		29 c0		and #$c0	              AND #$C0
.3932b7		4a		lsr a		              LSR A
.3932b8		4a		lsr a		              LSR A
.3932b9		4a		lsr a		              LSR A
.3932ba		4a		lsr a		              LSR A
.3932bb		4a		lsr a		              LSR A
.3932bc		4a		lsr a		              LSR A
.3932bd		6b		rtl		              RTL
.3932be						OPL2_GET_BLOCK
.3932be		48		pha		                PHA             ; begin setdp macro
.3932bf		08		php		                PHP
.3932c0		c2 20		rep #$20	                REP #$20        ; set A long
.3932c2		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3932c5		5b		tcd		                TCD
.3932c6		28		plp		                PLP
.3932c7		68		pla		                PLA             ; end setdp macro
.3932c8		e2 20		sep #$20	                SEP #$20        ; set A short
.3932ca		18		clc		              CLC
.3932cb		a5 27		lda $27		              LDA OPL2_CHANNEL
.3932cd		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3932cf		69 b0		adc #$b0	              ADC #$B0
.3932d1		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3932d3		a9 00		lda #$00	              LDA #$00
.3932d5		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3932d7		c2 30		rep #$30	                REP #$30        ; set A&X long
.3932d9		18		clc		              CLC
.3932da		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3932dd		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3932df		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3932e1		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3932e4		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3932e6		e2 20		sep #$20	                SEP #$20        ; set A short
.3932e8		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3932ea		29 1c		and #$1c	              AND #$1C
.3932ec		4a		lsr a		              LSR A
.3932ed		4a		lsr a		              LSR A
.3932ee		6b		rtl		              RTL
.3932ef						OPL2_GET_KEYON
.3932ef		48		pha		                PHA             ; begin setdp macro
.3932f0		08		php		                PHP
.3932f1		c2 20		rep #$20	                REP #$20        ; set A long
.3932f3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3932f6		5b		tcd		                TCD
.3932f7		28		plp		                PLP
.3932f8		68		pla		                PLA             ; end setdp macro
.3932f9		e2 20		sep #$20	                SEP #$20        ; set A short
.3932fb		18		clc		              CLC
.3932fc		a5 27		lda $27		              LDA OPL2_CHANNEL
.3932fe		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393300		69 b0		adc #$b0	              ADC #$B0
.393302		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393304		a9 00		lda #$00	              LDA #$00
.393306		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393308		c2 30		rep #$30	                REP #$30        ; set A&X long
.39330a		18		clc		              CLC
.39330b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39330e		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393310		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393312		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393315		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393317		e2 20		sep #$20	                SEP #$20        ; set A short
.393319		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39331b		29 20		and #$20	              AND #$20
.39331d		6b		rtl		              RTL
.39331e						OPL2_GET_FEEDBACK
.39331e		48		pha		                PHA             ; begin setdp macro
.39331f		08		php		                PHP
.393320		c2 20		rep #$20	                REP #$20        ; set A long
.393322		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393325		5b		tcd		                TCD
.393326		28		plp		                PLP
.393327		68		pla		                PLA             ; end setdp macro
.393328		e2 20		sep #$20	                SEP #$20        ; set A short
.39332a		18		clc		              CLC
.39332b		a5 27		lda $27		              LDA OPL2_CHANNEL
.39332d		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39332f		69 c0		adc #$c0	              ADC #$C0
.393331		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393333		a9 00		lda #$00	              LDA #$00
.393335		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393337		c2 30		rep #$30	                REP #$30        ; set A&X long
.393339		18		clc		              CLC
.39333a		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39333d		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39333f		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393341		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393344		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393346		e2 20		sep #$20	                SEP #$20        ; set A short
.393348		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39334a		29 e0		and #$e0	              AND #$E0
.39334c		4a		lsr a		              LSR
.39334d		6b		rtl		              RTL
.39334e						OPL2_GET_SYNTHMODE
.39334e		48		pha		                PHA             ; begin setdp macro
.39334f		08		php		                PHP
.393350		c2 20		rep #$20	                REP #$20        ; set A long
.393352		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393355		5b		tcd		                TCD
.393356		28		plp		                PLP
.393357		68		pla		                PLA             ; end setdp macro
.393358		e2 20		sep #$20	                SEP #$20        ; set A short
.39335a		18		clc		              CLC
.39335b		a5 27		lda $27		              LDA OPL2_CHANNEL
.39335d		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39335f		69 c0		adc #$c0	              ADC #$C0
.393361		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393363		a9 00		lda #$00	              LDA #$00
.393365		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393367		c2 30		rep #$30	                REP #$30        ; set A&X long
.393369		18		clc		              CLC
.39336a		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39336d		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39336f		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393371		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393374		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393376		e2 20		sep #$20	                SEP #$20        ; set A short
.393378		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39337a		29 01		and #$01	              AND #$01
.39337c		6b		rtl		              RTL
.39337d						OPL2_GET_DEEPTREMOLO
.39337d		48		pha		                PHA             ; begin setdp macro
.39337e		08		php		                PHP
.39337f		c2 20		rep #$20	                REP #$20        ; set A long
.393381		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393384		5b		tcd		                TCD
.393385		28		plp		                PLP
.393386		68		pla		                PLA             ; end setdp macro
.393387		c2 20		rep #$20	                REP #$20        ; set A long
.393389		a9 bd 00	lda #$00bd	              LDA #$00BD;
.39338c		85 28		sta $28		              STA OPL2_REG_REGION
.39338e		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.393391		e2 20		sep #$20	                SEP #$20        ; set A short
.393393		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393395		29 80		and #$80	              AND #$80
.393397		6b		rtl		              RTL
.393398						OPL2_GET_DEEPVIBRATO
.393398		48		pha		                PHA             ; begin setdp macro
.393399		08		php		                PHP
.39339a		c2 20		rep #$20	                REP #$20        ; set A long
.39339c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39339f		5b		tcd		                TCD
.3933a0		28		plp		                PLP
.3933a1		68		pla		                PLA             ; end setdp macro
.3933a2		c2 20		rep #$20	                REP #$20        ; set A long
.3933a4		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3933a7		69 bd 00	adc #$00bd	              ADC #$00BD
.3933aa		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3933ac		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3933af		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3933b1		e2 20		sep #$20	                SEP #$20        ; set A short
.3933b3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3933b5		29 40		and #$40	              AND #$40
.3933b7		6b		rtl		              RTL
.3933b8						OPL2_GET_PERCUSSION
.3933b8		48		pha		                PHA             ; begin setdp macro
.3933b9		08		php		                PHP
.3933ba		c2 20		rep #$20	                REP #$20        ; set A long
.3933bc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3933bf		5b		tcd		                TCD
.3933c0		28		plp		                PLP
.3933c1		68		pla		                PLA             ; end setdp macro
.3933c2		c2 20		rep #$20	                REP #$20        ; set A long
.3933c4		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3933c7		69 bd 00	adc #$00bd	              ADC #$00BD
.3933ca		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3933cc		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3933cf		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3933d1		e2 20		sep #$20	                SEP #$20        ; set A short
.3933d3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3933d5		29 20		and #$20	              AND #$20
.3933d7		6b		rtl		              RTL
.3933d8						OPL2_GET_DRUMS
.3933d8		48		pha		                PHA             ; begin setdp macro
.3933d9		08		php		                PHP
.3933da		c2 20		rep #$20	                REP #$20        ; set A long
.3933dc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3933df		5b		tcd		                TCD
.3933e0		28		plp		                PLP
.3933e1		68		pla		                PLA             ; end setdp macro
.3933e2		c2 20		rep #$20	                REP #$20        ; set A long
.3933e4		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3933e7		69 bd 00	adc #$00bd	              ADC #$00BD
.3933ea		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3933ec		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3933ef		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3933f1		e2 20		sep #$20	                SEP #$20        ; set A short
.3933f3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3933f5		29 1f		and #$1f	              AND #$1F
.3933f7		6b		rtl		              RTL
.3933f8						OPL2_Get_WaveForm
.3933f8		6b		rtl		                RTL
.3933f9						OPL2_PLAYNOTE
.3933f9		48		pha		                PHA             ; begin setdp macro
.3933fa		08		php		                PHP
.3933fb		c2 20		rep #$20	                REP #$20        ; set A long
.3933fd		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393400		5b		tcd		                TCD
.393401		28		plp		                PLP
.393402		68		pla		                PLA             ; end setdp macro
.393403		e2 20		sep #$20	                SEP #$20        ; set A short
.393405		da		phx		                PHX
.393406		a9 00		lda #$00	                LDA #$00
.393408		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39340a		20 e1 39	jsr $3939e1	                JSR OPL2_SET_KEYON
.39340d		20 a6 39	jsr $3939a6	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.393410		e2 10		sep #$10	                SEP #$10        ; set X short
.393412		a5 30		lda $30		                LDA OPL2_NOTE
.393414		3a		dec a		                DEC A
.393415		0a		asl a		                ASL A
.393416		aa		tax		                TAX
.393417		bf 90 11 39	lda $391190,x	                LDA @lnoteFNumbers,X
.39341b		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.39341d		e8		inx		                INX
.39341e		bf 90 11 39	lda $391190,x	                LDA @lnoteFNumbers,X
.393422		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.393424		22 24 39 39	jsl $393924	                JSL OPL2_SET_FNUMBER
.393428		a9 01		lda #$01	                LDA #$01
.39342a		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39342c		20 e1 39	jsr $3939e1	                JSR OPL2_SET_KEYON
.39342f		c2 10		rep #$10	                REP #$10        ; set X long
.393431		fa		plx		                PLX
.393432		6b		rtl		                RTL
.393433						OPL2_PLAYDRUM
.393433		6b		rtl		                RTL
.393434						OPL2_SET_INSTRUMENT
.393434		48		pha		                PHA             ; begin setdp macro
.393435		08		php		                PHP
.393436		c2 20		rep #$20	                REP #$20        ; set A long
.393438		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39343b		5b		tcd		                TCD
.39343c		28		plp		                PLP
.39343d		68		pla		                PLA             ; end setdp macro
.39343e		38		sec		              SEC ; Set the WaveFormSelect to True
.39343f		22 22 36 39	jsl $393622	              JSL OPL2_SET_WAVEFORMSELECT;
.393443		e2 20		sep #$20	                SEP #$20        ; set A short
.393445		c2 10		rep #$10	                REP #$10        ; set X long
.393447		a0 00 00	ldy #$0000	              LDY #$0000
.39344a		a2 00 00	ldx #$0000	              LDX #$0000
.39344d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.39344f		85 35		sta $35		              STA OPL2_PARAMETER3
.393451		c8		iny		              INY
.393452		c9 06		cmp #$06	              CMP #$06
.393454		d0 03		bne $393459	              BNE PERCUSSION_NEXT07
.393456		82 70 01	brl $3935c9	              BRL Percussion_6
.393459						PERCUSSION_NEXT07
.393459		c9 07		cmp #$07	              CMP #$07
.39345b		d0 03		bne $393460	              BNE PERCUSSION_NEXT08
.39345d		82 44 01	brl $3935a4	              BRL Percussion_7
.393460						PERCUSSION_NEXT08
.393460		c9 08		cmp #$08	              CMP #$08
.393462		d0 03		bne $393467	              BNE PERCUSSION_NEXT09
.393464		82 18 01	brl $39357f	              BRL Percussion_8
.393467						PERCUSSION_NEXT09
.393467		c9 09		cmp #$09	              CMP #$09
.393469		d0 03		bne $39346e	              BNE PERCUSSION_NEXT0A
.39346b		82 ec 00	brl $39355a	              BRL Percussion_9
.39346e						PERCUSSION_NEXT0A
.39346e		c9 0a		cmp #$0a	              CMP #$0A
.393470		d0 03		bne $393475	              BNE Percussion_Default
.393472		82 c0 00	brl $393535	              BRL Percussion_A
.393475						Percussion_Default
.393475		a9 00		lda #$00	              LDA #$00
.393477		85 26		sta $26		              STA OPL2_OPERATOR
.393479		c2 20		rep #$20	                REP #$20        ; set A long
.39347b		a9 20 00	lda #$0020	              LDA #$0020;
.39347e		85 28		sta $28		              STA OPL2_REG_REGION
.393480		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.393483		e2 20		sep #$20	                SEP #$20        ; set A short
.393485		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393487		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393489		c8		iny		              INY
.39348a		c2 20		rep #$20	                REP #$20        ; set A long
.39348c		a9 40 00	lda #$0040	              LDA #$0040;
.39348f		85 28		sta $28		              STA OPL2_REG_REGION
.393491		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.393494		e2 20		sep #$20	                SEP #$20        ; set A short
.393496		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393498		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39349a		c8		iny		              INY
.39349b		c2 20		rep #$20	                REP #$20        ; set A long
.39349d		a9 60 00	lda #$0060	              LDA #$0060;
.3934a0		85 28		sta $28		              STA OPL2_REG_REGION
.3934a2		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.3934a5		e2 20		sep #$20	                SEP #$20        ; set A short
.3934a7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3934a9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3934ab		c8		iny		              INY
.3934ac		c2 20		rep #$20	                REP #$20        ; set A long
.3934ae		a9 80 00	lda #$0080	              LDA #$0080;
.3934b1		85 28		sta $28		              STA OPL2_REG_REGION
.3934b3		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.3934b6		e2 20		sep #$20	                SEP #$20        ; set A short
.3934b8		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3934ba		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3934bc		c8		iny		              INY
.3934bd		c2 20		rep #$20	                REP #$20        ; set A long
.3934bf		a9 e0 00	lda #$00e0	              LDA #$00E0;
.3934c2		85 28		sta $28		              STA OPL2_REG_REGION
.3934c4		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.3934c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3934c9		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3934cb		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3934cd		c8		iny		              INY
.3934ce		e2 10		sep #$10	                SEP #$10        ; set X short
.3934d0		a5 27		lda $27		              LDA OPL2_CHANNEL
.3934d2		29 0f		and #$0f	              AND #$0F
.3934d4		aa		tax		              TAX
.3934d5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.3934d7		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.3934db		c8		iny		              INY
.3934dc		a9 01		lda #$01	              LDA #$01
.3934de		85 26		sta $26		              STA OPL2_OPERATOR
.3934e0		c2 20		rep #$20	                REP #$20        ; set A long
.3934e2		a9 20 00	lda #$0020	              LDA #$0020;
.3934e5		85 28		sta $28		              STA OPL2_REG_REGION
.3934e7		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.3934ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3934ec		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.3934ee		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3934f0		c8		iny		              INY
.3934f1		c2 20		rep #$20	                REP #$20        ; set A long
.3934f3		a9 40 00	lda #$0040	              LDA #$0040;
.3934f6		85 28		sta $28		              STA OPL2_REG_REGION
.3934f8		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.3934fb		e2 20		sep #$20	                SEP #$20        ; set A short
.3934fd		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.3934ff		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393501		c8		iny		              INY
.393502		c2 20		rep #$20	                REP #$20        ; set A long
.393504		a9 60 00	lda #$0060	              LDA #$0060;
.393507		85 28		sta $28		              STA OPL2_REG_REGION
.393509		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.39350c		e2 20		sep #$20	                SEP #$20        ; set A short
.39350e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.393510		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393512		c8		iny		              INY
.393513		c2 20		rep #$20	                REP #$20        ; set A long
.393515		a9 80 00	lda #$0080	              LDA #$0080;
.393518		85 28		sta $28		              STA OPL2_REG_REGION
.39351a		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.39351d		e2 20		sep #$20	                SEP #$20        ; set A short
.39351f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.393521		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393523		c8		iny		              INY
.393524		c2 20		rep #$20	                REP #$20        ; set A long
.393526		a9 e0 00	lda #$00e0	              LDA #$00E0;
.393529		85 28		sta $28		              STA OPL2_REG_REGION
.39352b		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.39352e		e2 20		sep #$20	                SEP #$20        ; set A short
.393530		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.393532		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393534		6b		rtl		                RTL
.393535						Percussion_A
.393535		e2 20		sep #$20	                SEP #$20        ; set A short
.393537		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393539		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.39353d		c8		iny		              INY
.39353e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393540		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.393544		c8		iny		              INY
.393545		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393547		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.39354b		c8		iny		              INY
.39354c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39354e		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.393552		c8		iny		              INY
.393553		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393555		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.393559		6b		rtl		                RTL
.39355a						Percussion_9
.39355a		e2 20		sep #$20	                SEP #$20        ; set A short
.39355c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39355e		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.393562		c8		iny		              INY
.393563		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393565		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.393569		c8		iny		              INY
.39356a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39356c		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.393570		c8		iny		              INY
.393571		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393573		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.393577		c8		iny		              INY
.393578		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39357a		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.39357e		6b		rtl		              RTL
.39357f						Percussion_8
.39357f		e2 20		sep #$20	                SEP #$20        ; set A short
.393581		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393583		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.393587		c8		iny		              INY
.393588		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39358a		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.39358e		c8		iny		              INY
.39358f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393591		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.393595		c8		iny		              INY
.393596		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393598		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.39359c		c8		iny		              INY
.39359d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39359f		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.3935a3		6b		rtl		              RTL
.3935a4						Percussion_7
.3935a4		e2 20		sep #$20	                SEP #$20        ; set A short
.3935a6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3935a8		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.3935ac		c8		iny		              INY
.3935ad		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3935af		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.3935b3		c8		iny		              INY
.3935b4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3935b6		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.3935ba		c8		iny		              INY
.3935bb		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3935bd		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.3935c1		c8		iny		              INY
.3935c2		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3935c4		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.3935c8		6b		rtl		              RTL
.3935c9						Percussion_6
.3935c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3935cb		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3935cd		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.3935d1		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.3935d5		c8		iny		              INY
.3935d6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3935d8		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.3935dc		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.3935e0		c8		iny		              INY
.3935e1		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3935e3		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.3935e7		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.3935eb		c8		iny		              INY
.3935ec		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3935ee		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.3935f2		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.3935f6		c8		iny		              INY
.3935f7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3935f9		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.3935fd		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393601		6b		rtl		              RTL
.393602						OPL2_SET_REGISTER
.393602		48		pha		                PHA             ; begin setdp macro
.393603		08		php		                PHP
.393604		c2 20		rep #$20	                REP #$20        ; set A long
.393606		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393609		5b		tcd		                TCD
.39360a		28		plp		                PLP
.39360b		68		pla		                PLA             ; end setdp macro
.39360c		c2 20		rep #$20	                REP #$20        ; set A long
.39360e		18		clc		              CLC
.39360f		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393612		65 32		adc $32		              ADC OPL2_PARAMETER0
.393614		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393616		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393619		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39361b		e2 20		sep #$20	                SEP #$20        ; set A short
.39361d		a5 33		lda $33		              LDA OPL2_PARAMETER1
.39361f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393621		6b		rtl		              RTL
.393622						OPL2_SET_WAVEFORMSELECT
.393622		48		pha		                PHA             ; begin setdp macro
.393623		08		php		                PHP
.393624		c2 20		rep #$20	                REP #$20        ; set A long
.393626		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393629		5b		tcd		                TCD
.39362a		28		plp		                PLP
.39362b		68		pla		                PLA             ; end setdp macro
.39362c		c2 20		rep #$20	                REP #$20        ; set A long
.39362e		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.393631		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393633		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393636		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393638		e2 20		sep #$20	                SEP #$20        ; set A short
.39363a		b0 07		bcs $393643	              BCS OPL2_Set_WaveFormSelect_set
.39363c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39363e		29 df		and #$df	              AND #$DF
.393640		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393642		6b		rtl		              RTL
.393643						OPL2_Set_WaveFormSelect_set
.393643		48		pha		                PHA             ; begin setdp macro
.393644		08		php		                PHP
.393645		c2 20		rep #$20	                REP #$20        ; set A long
.393647		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39364a		5b		tcd		                TCD
.39364b		28		plp		                PLP
.39364c		68		pla		                PLA             ; end setdp macro
.39364d		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39364f		09 20 00	ora #$0020	              ORA #$20
.393652		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393654		6b		rtl		                RTL
.393655						OPL2_SET_TREMOLO
.393655		48		pha		                PHA             ; begin setdp macro
.393656		08		php		                PHP
.393657		c2 20		rep #$20	                REP #$20        ; set A long
.393659		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39365c		5b		tcd		                TCD
.39365d		28		plp		                PLP
.39365e		68		pla		                PLA             ; end setdp macro
.39365f		08		php		                PHP ; Push the Carry
.393660		c2 20		rep #$20	                REP #$20        ; set A long
.393662		18		clc		                CLC
.393663		a9 20 00	lda #$0020	                LDA #$0020 ;
.393666		85 28		sta $28		                STA OPL2_REG_REGION
.393668		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.39366b		28		plp		                PLP ; Pull the Carry out
.39366c		e2 20		sep #$20	                SEP #$20        ; set A short
.39366e		b0 08		bcs $393678	                BCS OPL2_Set_Tremolo_Set;
.393670		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393672		29 7f		and #$7f	                AND #$7F
.393674		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393676		80 06		bra $39367e	                BRA OPL2_Set_Tremolo_Exit
.393678						OPL2_Set_Tremolo_Set
.393678		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39367a		09 80		ora #$80	                ORA #$80
.39367c		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39367e						OPL2_Set_Tremolo_Exit
.39367e		6b		rtl		                RTL
.39367f						OPL2_GET_TREMOLO
.39367f		48		pha		                PHA             ; begin setdp macro
.393680		08		php		                PHP
.393681		c2 20		rep #$20	                REP #$20        ; set A long
.393683		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393686		5b		tcd		                TCD
.393687		28		plp		                PLP
.393688		68		pla		                PLA             ; end setdp macro
.393689		c2 20		rep #$20	                REP #$20        ; set A long
.39368b		a9 20 00	lda #$0020	                LDA #$0020;
.39368e		85 28		sta $28		                STA OPL2_REG_REGION
.393690		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.393693		e2 20		sep #$20	                SEP #$20        ; set A short
.393695		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393697		29 80		and #$80	                AND #$80
.393699		6b		rtl		                RTL
.39369a						OPL2_SET_VIBRATO
.39369a		48		pha		                PHA             ; begin setdp macro
.39369b		08		php		                PHP
.39369c		c2 20		rep #$20	                REP #$20        ; set A long
.39369e		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936a1		5b		tcd		                TCD
.3936a2		28		plp		                PLP
.3936a3		68		pla		                PLA             ; end setdp macro
.3936a4		08		php		                PHP ; Push the Carry
.3936a5		c2 20		rep #$20	                REP #$20        ; set A long
.3936a7		18		clc		                CLC
.3936a8		a9 20 00	lda #$0020	                LDA #$0020;
.3936ab		85 28		sta $28		                STA OPL2_REG_REGION
.3936ad		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.3936b0		28		plp		                PLP ; Pull the Carry out
.3936b1		e2 20		sep #$20	                SEP #$20        ; set A short
.3936b3		b0 08		bcs $3936bd	                BCS OPL2_Set_Vibrato_Set;
.3936b5		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3936b7		29 bf		and #$bf	                AND #$BF
.3936b9		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3936bb		80 06		bra $3936c3	                BRA OPL2_Set_Vibrato_Exit
.3936bd						OPL2_Set_Vibrato_Set
.3936bd		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3936bf		09 40		ora #$40	                ORA #$40
.3936c1		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3936c3						OPL2_Set_Vibrato_Exit
.3936c3		6b		rtl		                RTL
.3936c4						OPL2_GET_VIBRATO
.3936c4		48		pha		                PHA             ; begin setdp macro
.3936c5		08		php		                PHP
.3936c6		c2 20		rep #$20	                REP #$20        ; set A long
.3936c8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936cb		5b		tcd		                TCD
.3936cc		28		plp		                PLP
.3936cd		68		pla		                PLA             ; end setdp macro
.3936ce		c2 20		rep #$20	                REP #$20        ; set A long
.3936d0		a9 20 00	lda #$0020	                LDA #$0020;
.3936d3		85 28		sta $28		                STA OPL2_REG_REGION
.3936d5		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.3936d8		e2 20		sep #$20	                SEP #$20        ; set A short
.3936da		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3936dc		29 40		and #$40	                AND #$40
.3936de		6b		rtl		                RTL
.3936df						OPL2_SET_MAINTAINSUSTAIN
.3936df		48		pha		                PHA             ; begin setdp macro
.3936e0		08		php		                PHP
.3936e1		c2 20		rep #$20	                REP #$20        ; set A long
.3936e3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936e6		5b		tcd		                TCD
.3936e7		28		plp		                PLP
.3936e8		68		pla		                PLA             ; end setdp macro
.3936e9		08		php		              PHP ; Push the Carry
.3936ea		c2 20		rep #$20	                REP #$20        ; set A long
.3936ec		18		clc		              CLC
.3936ed		a9 20 00	lda #$0020	              LDA #$0020;
.3936f0		85 28		sta $28		              STA OPL2_REG_REGION
.3936f2		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.3936f5		28		plp		              PLP ; Pull the Carry out
.3936f6		e2 20		sep #$20	                SEP #$20        ; set A short
.3936f8		b0 08		bcs $393702	              BCS OPL2_Set_MaintainSustain_Set;
.3936fa		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936fc		29 df		and #$df	              AND #$DF
.3936fe		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393700		80 06		bra $393708	              BRA OPL2_Set_MaintainSustain_Exit
.393702						OPL2_Set_MaintainSustain_Set
.393702		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393704		09 20		ora #$20	              ORA #$20
.393706		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393708						OPL2_Set_MaintainSustain_Exit
.393708		6b		rtl		                RTL
.393709						OPL2_GET_MAINTAINSUSTAIN
.393709		48		pha		                PHA             ; begin setdp macro
.39370a		08		php		                PHP
.39370b		c2 20		rep #$20	                REP #$20        ; set A long
.39370d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393710		5b		tcd		                TCD
.393711		28		plp		                PLP
.393712		68		pla		                PLA             ; end setdp macro
.393713		c2 20		rep #$20	                REP #$20        ; set A long
.393715		a9 20 00	lda #$0020	              LDA #$0020;
.393718		85 28		sta $28		              STA OPL2_REG_REGION
.39371a		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.39371d		e2 20		sep #$20	                SEP #$20        ; set A short
.39371f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393721		29 20		and #$20	              AND #$20
.393723		6b		rtl		                RTL
.393724						OPL2_SET_ENVELOPESCALING
.393724		48		pha		                PHA             ; begin setdp macro
.393725		08		php		                PHP
.393726		c2 20		rep #$20	                REP #$20        ; set A long
.393728		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39372b		5b		tcd		                TCD
.39372c		28		plp		                PLP
.39372d		68		pla		                PLA             ; end setdp macro
.39372e		08		php		              PHP ; Push the Carry
.39372f		c2 20		rep #$20	                REP #$20        ; set A long
.393731		18		clc		              CLC
.393732		a9 20 00	lda #$0020	              LDA #$0020;
.393735		85 28		sta $28		              STA OPL2_REG_REGION
.393737		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.39373a		28		plp		              PLP ; Pull the Carry out
.39373b		e2 20		sep #$20	                SEP #$20        ; set A short
.39373d		b0 08		bcs $393747	              BCS OPL2_Set_EnvelopeScaling_Set;
.39373f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393741		29 ef		and #$ef	              AND #$EF
.393743		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393745		80 06		bra $39374d	              BRA OPL2_Set_EnvelopeScaling_Exit
.393747						OPL2_Set_EnvelopeScaling_Set
.393747		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393749		09 10		ora #$10	              ORA #$10
.39374b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39374d						OPL2_Set_EnvelopeScaling_Exit
.39374d		6b		rtl		                RTL
.39374e						OPL2_GET_ENVELOPESCALING
.39374e		48		pha		                PHA             ; begin setdp macro
.39374f		08		php		                PHP
.393750		c2 20		rep #$20	                REP #$20        ; set A long
.393752		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393755		5b		tcd		                TCD
.393756		28		plp		                PLP
.393757		68		pla		                PLA             ; end setdp macro
.393758		c2 20		rep #$20	                REP #$20        ; set A long
.39375a		a9 20 00	lda #$0020	              LDA #$0020;
.39375d		85 28		sta $28		              STA OPL2_REG_REGION
.39375f		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.393762		e2 20		sep #$20	                SEP #$20        ; set A short
.393764		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393766		29 10		and #$10	              AND #$10
.393768		6b		rtl		                RTL
.393769						OPL2_GET_MODFREQMULTIPLE
.393769		48		pha		                PHA             ; begin setdp macro
.39376a		08		php		                PHP
.39376b		c2 20		rep #$20	                REP #$20        ; set A long
.39376d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393770		5b		tcd		                TCD
.393771		28		plp		                PLP
.393772		68		pla		                PLA             ; end setdp macro
.393773		c2 20		rep #$20	                REP #$20        ; set A long
.393775		a9 20 00	lda #$0020	              LDA #$0020;
.393778		85 28		sta $28		              STA OPL2_REG_REGION
.39377a		20 60 3b	jsr $393b60	              JSR OPL2_GET_REG_OFFSET
.39377d		e2 20		sep #$20	                SEP #$20        ; set A short
.39377f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393781		29 0f		and #$0f	              AND #$0F
.393783		6b		rtl		              RTL
.393784						OPL2_SET_MODFREQMULTIPLE
.393784		48		pha		                PHA             ; begin setdp macro
.393785		08		php		                PHP
.393786		c2 20		rep #$20	                REP #$20        ; set A long
.393788		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39378b		5b		tcd		                TCD
.39378c		28		plp		                PLP
.39378d		68		pla		                PLA             ; end setdp macro
.39378e		c2 20		rep #$20	                REP #$20        ; set A long
.393790		a9 20 00	lda #$0020	                LDA #$0020;
.393793		85 28		sta $28		                STA OPL2_REG_REGION
.393795		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.393798		e2 20		sep #$20	                SEP #$20        ; set A short
.39379a		a5 32		lda $32		                LDA OPL2_PARAMETER0
.39379c		29 0f		and #$0f	                AND #$0F
.39379e		85 32		sta $32		                STA OPL2_PARAMETER0
.3937a0		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3937a2		29 f0		and #$f0	                AND #$F0
.3937a4		05 32		ora $32		                ORA OPL2_PARAMETER0
.3937a6		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3937a8		6b		rtl		                RTL
.3937a9						OPL2_SET_SCALINGLEVEL
.3937a9		48		pha		                PHA             ; begin setdp macro
.3937aa		08		php		                PHP
.3937ab		c2 20		rep #$20	                REP #$20        ; set A long
.3937ad		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937b0		5b		tcd		                TCD
.3937b1		28		plp		                PLP
.3937b2		68		pla		                PLA             ; end setdp macro
.3937b3		c2 20		rep #$20	                REP #$20        ; set A long
.3937b5		a9 40 00	lda #$0040	                LDA #$0040;
.3937b8		85 28		sta $28		                STA OPL2_REG_REGION
.3937ba		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.3937bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3937bf		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3937c1		29 03		and #$03	                AND #$03
.3937c3		0a		asl a		                ASL
.3937c4		0a		asl a		                ASL
.3937c5		0a		asl a		                ASL
.3937c6		0a		asl a		                ASL
.3937c7		0a		asl a		                ASL
.3937c8		0a		asl a		                ASL
.3937c9		85 32		sta $32		                STA OPL2_PARAMETER0
.3937cb		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3937cd		29 3f		and #$3f	                AND #$3F
.3937cf		05 32		ora $32		                ORA OPL2_PARAMETER0
.3937d1		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3937d3		6b		rtl		                RTL
.3937d4						OPL2_SET_VOLUME
.3937d4		48		pha		                PHA             ; begin setdp macro
.3937d5		08		php		                PHP
.3937d6		c2 20		rep #$20	                REP #$20        ; set A long
.3937d8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937db		5b		tcd		                TCD
.3937dc		28		plp		                PLP
.3937dd		68		pla		                PLA             ; end setdp macro
.3937de		c2 20		rep #$20	                REP #$20        ; set A long
.3937e0		a9 40 00	lda #$0040	                LDA #$0040  ;
.3937e3		85 28		sta $28		                STA OPL2_REG_REGION
.3937e5		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.3937e8		e2 20		sep #$20	                SEP #$20        ; set A short
.3937ea		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.3937ec		29 3f		and #$3f	                AND #$3F
.3937ee		85 32		sta $32		                STA OPL2_PARAMETER0
.3937f0		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3937f2		29 c0		and #$c0	                AND #$C0
.3937f4		05 32		ora $32		                ORA OPL2_PARAMETER0
.3937f6		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3937f8		6b		rtl		                RTL
.3937f9						OPL2_GET_VOLUME
.3937f9		48		pha		                PHA             ; begin setdp macro
.3937fa		08		php		                PHP
.3937fb		c2 20		rep #$20	                REP #$20        ; set A long
.3937fd		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393800		5b		tcd		                TCD
.393801		28		plp		                PLP
.393802		68		pla		                PLA             ; end setdp macro
.393803		c2 20		rep #$20	                REP #$20        ; set A long
.393805		a9 40 00	lda #$0040	                LDA #$0040  ;
.393808		85 28		sta $28		                STA OPL2_REG_REGION
.39380a		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.39380d		e2 20		sep #$20	                SEP #$20        ; set A short
.39380f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393811		29 3f		and #$3f	                AND #$3F
.393813		6b		rtl		                RTL
.393814						OPL2_SET_ATTACK
.393814		48		pha		                PHA             ; begin setdp macro
.393815		08		php		                PHP
.393816		c2 20		rep #$20	                REP #$20        ; set A long
.393818		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39381b		5b		tcd		                TCD
.39381c		28		plp		                PLP
.39381d		68		pla		                PLA             ; end setdp macro
.39381e		c2 20		rep #$20	                REP #$20        ; set A long
.393820		a9 60 00	lda #$0060	                LDA #$0060  ;
.393823		85 28		sta $28		                STA OPL2_REG_REGION
.393825		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.393828		e2 20		sep #$20	                SEP #$20        ; set A short
.39382a		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.39382c		29 0f		and #$0f	                AND #$0F
.39382e		0a		asl a		                ASL
.39382f		0a		asl a		                ASL
.393830		0a		asl a		                ASL
.393831		0a		asl a		                ASL
.393832		85 32		sta $32		                STA OPL2_PARAMETER0
.393834		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393836		29 0f		and #$0f	                AND #$0F
.393838		05 32		ora $32		                ORA OPL2_PARAMETER0
.39383a		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39383c		6b		rtl		                RTL
.39383d						OPL2_GET_ATTACK
.39383d		48		pha		                PHA             ; begin setdp macro
.39383e		08		php		                PHP
.39383f		c2 20		rep #$20	                REP #$20        ; set A long
.393841		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393844		5b		tcd		                TCD
.393845		28		plp		                PLP
.393846		68		pla		                PLA             ; end setdp macro
.393847		c2 20		rep #$20	                REP #$20        ; set A long
.393849		a9 60 00	lda #$0060	                LDA #$0060
.39384c		85 28		sta $28		                STA OPL2_REG_REGION
.39384e		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.393851		e2 20		sep #$20	                SEP #$20        ; set A short
.393853		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393855		29 f0		and #$f0	                AND #$F0
.393857		4a		lsr a		                LSR
.393858		4a		lsr a		                LSR
.393859		4a		lsr a		                LSR
.39385a		4a		lsr a		                LSR
.39385b		6b		rtl		                RTL
.39385c						OPL2_SET_DECAY
.39385c		48		pha		                PHA             ; begin setdp macro
.39385d		08		php		                PHP
.39385e		c2 20		rep #$20	                REP #$20        ; set A long
.393860		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393863		5b		tcd		                TCD
.393864		28		plp		                PLP
.393865		68		pla		                PLA             ; end setdp macro
.393866		c2 20		rep #$20	                REP #$20        ; set A long
.393868		a9 60 00	lda #$0060	                LDA #$0060;
.39386b		85 28		sta $28		                STA OPL2_REG_REGION
.39386d		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.393870		e2 20		sep #$20	                SEP #$20        ; set A short
.393872		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393874		29 0f		and #$0f	                AND #$0F
.393876		85 32		sta $32		                STA OPL2_PARAMETER0
.393878		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39387a		29 f0		and #$f0	                AND #$F0
.39387c		05 32		ora $32		                ORA OPL2_PARAMETER0
.39387e		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393880		6b		rtl		                RTL
.393881						OPL2_GET_DECAY
.393881		48		pha		                PHA             ; begin setdp macro
.393882		08		php		                PHP
.393883		c2 20		rep #$20	                REP #$20        ; set A long
.393885		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393888		5b		tcd		                TCD
.393889		28		plp		                PLP
.39388a		68		pla		                PLA             ; end setdp macro
.39388b		c2 20		rep #$20	                REP #$20        ; set A long
.39388d		a9 60 00	lda #$0060	                LDA #$0060
.393890		85 28		sta $28		                STA OPL2_REG_REGION
.393892		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.393895		e2 20		sep #$20	                SEP #$20        ; set A short
.393897		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393899		29 0f		and #$0f	                AND #$0F
.39389b		6b		rtl		                RTL
.39389c						OPL2_SET_SUSTAIN
.39389c		48		pha		                PHA             ; begin setdp macro
.39389d		08		php		                PHP
.39389e		c2 20		rep #$20	                REP #$20        ; set A long
.3938a0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938a3		5b		tcd		                TCD
.3938a4		28		plp		                PLP
.3938a5		68		pla		                PLA             ; end setdp macro
.3938a6		c2 20		rep #$20	                REP #$20        ; set A long
.3938a8		a9 80 00	lda #$0080	                LDA #$0080;
.3938ab		85 28		sta $28		                STA OPL2_REG_REGION
.3938ad		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.3938b0		e2 20		sep #$20	                SEP #$20        ; set A short
.3938b2		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3938b4		29 0f		and #$0f	                AND #$0F
.3938b6		0a		asl a		                ASL
.3938b7		0a		asl a		                ASL
.3938b8		0a		asl a		                ASL
.3938b9		0a		asl a		                ASL
.3938ba		85 32		sta $32		                STA OPL2_PARAMETER0
.3938bc		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938be		29 0f		and #$0f	                AND #$0F
.3938c0		05 32		ora $32		                ORA OPL2_PARAMETER0
.3938c2		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3938c4		6b		rtl		                RTL
.3938c5						OPL2_GET_SUSTAIN
.3938c5		48		pha		                PHA             ; begin setdp macro
.3938c6		08		php		                PHP
.3938c7		c2 20		rep #$20	                REP #$20        ; set A long
.3938c9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938cc		5b		tcd		                TCD
.3938cd		28		plp		                PLP
.3938ce		68		pla		                PLA             ; end setdp macro
.3938cf		c2 20		rep #$20	                REP #$20        ; set A long
.3938d1		a9 80 00	lda #$0080	                LDA #$0080
.3938d4		85 28		sta $28		                STA OPL2_REG_REGION
.3938d6		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.3938d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3938db		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938dd		29 f0		and #$f0	                AND #$F0
.3938df		4a		lsr a		                LSR
.3938e0		4a		lsr a		                LSR
.3938e1		4a		lsr a		                LSR
.3938e2		4a		lsr a		                LSR
.3938e3		6b		rtl		                RTL
.3938e4						OPL2_SET_RELEASE
.3938e4		48		pha		                PHA             ; begin setdp macro
.3938e5		08		php		                PHP
.3938e6		c2 20		rep #$20	                REP #$20        ; set A long
.3938e8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938eb		5b		tcd		                TCD
.3938ec		28		plp		                PLP
.3938ed		68		pla		                PLA             ; end setdp macro
.3938ee		c2 20		rep #$20	                REP #$20        ; set A long
.3938f0		a9 80 00	lda #$0080	                LDA #$0080;
.3938f3		85 28		sta $28		                STA OPL2_REG_REGION
.3938f5		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.3938f8		e2 20		sep #$20	                SEP #$20        ; set A short
.3938fa		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3938fc		29 0f		and #$0f	                AND #$0F
.3938fe		85 32		sta $32		                STA OPL2_PARAMETER0
.393900		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393902		29 f0		and #$f0	                AND #$F0
.393904		05 32		ora $32		                ORA OPL2_PARAMETER0
.393906		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393908		6b		rtl		                RTL
.393909						OPL2_GET_RELEASE
.393909		48		pha		                PHA             ; begin setdp macro
.39390a		08		php		                PHP
.39390b		c2 20		rep #$20	                REP #$20        ; set A long
.39390d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393910		5b		tcd		                TCD
.393911		28		plp		                PLP
.393912		68		pla		                PLA             ; end setdp macro
.393913		c2 20		rep #$20	                REP #$20        ; set A long
.393915		a9 80 00	lda #$0080	                LDA #$0080
.393918		85 28		sta $28		                STA OPL2_REG_REGION
.39391a		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.39391d		e2 20		sep #$20	                SEP #$20        ; set A short
.39391f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393921		29 0f		and #$0f	                AND #$0F
.393923		6b		rtl		                RTL
.393924						OPL2_SET_FNUMBER
.393924		48		pha		                PHA             ; begin setdp macro
.393925		08		php		                PHP
.393926		c2 20		rep #$20	                REP #$20        ; set A long
.393928		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39392b		5b		tcd		                TCD
.39392c		28		plp		                PLP
.39392d		68		pla		                PLA             ; end setdp macro
.39392e		e2 20		sep #$20	                SEP #$20        ; set A short
.393930		18		clc		                CLC
.393931		a5 27		lda $27		                LDA OPL2_CHANNEL
.393933		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393935		69 a0		adc #$a0	                ADC #$A0
.393937		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393939		a9 00		lda #$00	                LDA #$00
.39393b		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.39393d		c2 30		rep #$30	                REP #$30        ; set A&X long
.39393f		18		clc		                CLC
.393940		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393943		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393945		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393947		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.39394a		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39394c		e2 20		sep #$20	                SEP #$20        ; set A short
.39394e		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393950		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393952		18		clc		                CLC
.393953		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393955		69 10		adc #$10	                ADC #$10
.393957		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393959		a5 33		lda $33		                LDA OPL2_PARAMETER1
.39395b		29 03		and #$03	                AND #$03
.39395d		85 33		sta $33		                STA OPL2_PARAMETER1
.39395f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393961		29 fc		and #$fc	                AND #$FC
.393963		05 33		ora $33		                ORA OPL2_PARAMETER1
.393965		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393967		6b		rtl		                RTL
.393968						OPL2_GET_FNUMBER
.393968		48		pha		                PHA             ; begin setdp macro
.393969		08		php		                PHP
.39396a		c2 20		rep #$20	                REP #$20        ; set A long
.39396c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39396f		5b		tcd		                TCD
.393970		28		plp		                PLP
.393971		68		pla		                PLA             ; end setdp macro
.393972		e2 20		sep #$20	                SEP #$20        ; set A short
.393974		18		clc		                CLC
.393975		a5 27		lda $27		                LDA OPL2_CHANNEL
.393977		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393979		69 a0		adc #$a0	                ADC #$A0
.39397b		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39397d		a9 00		lda #$00	                LDA #$00
.39397f		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393981		c2 30		rep #$30	                REP #$30        ; set A&X long
.393983		18		clc		                CLC
.393984		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393987		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393989		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39398b		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.39398e		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393990		e2 20		sep #$20	                SEP #$20        ; set A short
.393992		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393994		85 32		sta $32		                STA OPL2_PARAMETER0
.393996		18		clc		                CLC
.393997		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393999		69 10		adc #$10	                ADC #$10
.39399b		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39399d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39399f		29 03		and #$03	                AND #$03
.3939a1		85 33		sta $33		                STA OPL2_PARAMETER1
.3939a3		6b		rtl		                RTL
.3939a4						OPL2_Set_Frequency
.3939a4		6b		rtl		                RTL
.3939a5						OPL2_Get_Frequency
.3939a5		6b		rtl		                RTL
.3939a6						OPL2_SET_BLOCK
.3939a6		48		pha		                PHA             ; begin setdp macro
.3939a7		08		php		                PHP
.3939a8		c2 20		rep #$20	                REP #$20        ; set A long
.3939aa		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939ad		5b		tcd		                TCD
.3939ae		28		plp		                PLP
.3939af		68		pla		                PLA             ; end setdp macro
.3939b0		e2 20		sep #$20	                SEP #$20        ; set A short
.3939b2		18		clc		                CLC
.3939b3		a5 27		lda $27		                LDA OPL2_CHANNEL
.3939b5		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.3939b7		69 b0		adc #$b0	                ADC #$B0
.3939b9		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3939bb		a9 00		lda #$00	                LDA #$00
.3939bd		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3939bf		c2 30		rep #$30	                REP #$30        ; set A&X long
.3939c1		18		clc		                CLC
.3939c2		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.3939c5		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3939c7		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3939c9		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3939cc		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3939ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3939d0		a5 31		lda $31		                LDA OPL2_OCTAVE
.3939d2		29 07		and #$07	                AND #$07
.3939d4		0a		asl a		                ASL
.3939d5		0a		asl a		                ASL
.3939d6		85 31		sta $31		                STA OPL2_OCTAVE
.3939d8		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3939da		29 e3		and #$e3	                AND #$E3
.3939dc		05 31		ora $31		                ORA OPL2_OCTAVE
.3939de		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3939e0		60		rts		                RTS
.3939e1						OPL2_SET_KEYON
.3939e1		48		pha		                PHA             ; begin setdp macro
.3939e2		08		php		                PHP
.3939e3		c2 20		rep #$20	                REP #$20        ; set A long
.3939e5		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939e8		5b		tcd		                TCD
.3939e9		28		plp		                PLP
.3939ea		68		pla		                PLA             ; end setdp macro
.3939eb		e2 20		sep #$20	                SEP #$20        ; set A short
.3939ed		18		clc		                CLC
.3939ee		a5 27		lda $27		                LDA OPL2_CHANNEL
.3939f0		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.3939f2		69 b0		adc #$b0	                ADC #$B0
.3939f4		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3939f6		a9 00		lda #$00	                LDA #$00
.3939f8		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3939fa		c2 30		rep #$30	                REP #$30        ; set A&X long
.3939fc		18		clc		                CLC
.3939fd		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393a00		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393a02		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393a04		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393a07		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393a09		e2 20		sep #$20	                SEP #$20        ; set A short
.393a0b		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393a0d		29 01		and #$01	                AND #$01
.393a0f		f0 02		beq $393a13	                BEQ SET_KEYON_OFF
.393a11		a9 20		lda #$20	                LDA #$20
.393a13						    SET_KEYON_OFF
.393a13		85 32		sta $32		                STA OPL2_PARAMETER0
.393a15		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a17		29 df		and #$df	                AND #$DF
.393a19		05 32		ora $32		                ORA OPL2_PARAMETER0
.393a1b		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a1d		60		rts		                RTS
.393a1e						OPL2_SET_FEEDBACK
.393a1e		48		pha		                PHA             ; begin setdp macro
.393a1f		08		php		                PHP
.393a20		c2 20		rep #$20	                REP #$20        ; set A long
.393a22		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a25		5b		tcd		                TCD
.393a26		28		plp		                PLP
.393a27		68		pla		                PLA             ; end setdp macro
.393a28		e2 20		sep #$20	                SEP #$20        ; set A short
.393a2a		18		clc		              CLC
.393a2b		a5 27		lda $27		              LDA OPL2_CHANNEL
.393a2d		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393a2f		69 c0		adc #$c0	              ADC #$C0
.393a31		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393a33		a9 00		lda #$00	              LDA #$00
.393a35		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393a37		c2 30		rep #$30	                REP #$30        ; set A&X long
.393a39		18		clc		              CLC
.393a3a		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393a3d		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393a3f		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393a41		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393a44		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393a46		e2 20		sep #$20	                SEP #$20        ; set A short
.393a48		a5 32		lda $32		              LDA OPL2_PARAMETER0
.393a4a		29 07		and #$07	              AND #$07
.393a4c		0a		asl a		              ASL
.393a4d		85 32		sta $32		              STA OPL2_PARAMETER0
.393a4f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a51		29 01		and #$01	              AND #$01
.393a53		05 32		ora $32		              ORA OPL2_PARAMETER0
.393a55		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a57		6b		rtl		                RTL
.393a58						OPL2_SET_SYNTHMODE
.393a58		48		pha		                PHA             ; begin setdp macro
.393a59		08		php		                PHP
.393a5a		c2 20		rep #$20	                REP #$20        ; set A long
.393a5c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a5f		5b		tcd		                TCD
.393a60		28		plp		                PLP
.393a61		68		pla		                PLA             ; end setdp macro
.393a62		08		php		              PHP ; Push the Carry
.393a63		e2 20		sep #$20	                SEP #$20        ; set A short
.393a65		18		clc		              CLC
.393a66		a5 27		lda $27		              LDA OPL2_CHANNEL
.393a68		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393a6a		69 c0		adc #$c0	              ADC #$C0
.393a6c		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393a6e		a9 00		lda #$00	              LDA #$00
.393a70		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393a72		c2 30		rep #$30	                REP #$30        ; set A&X long
.393a74		18		clc		              CLC
.393a75		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393a78		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393a7a		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393a7c		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393a7f		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393a81		28		plp		              PLP ; Pull the Carry out
.393a82		e2 20		sep #$20	                SEP #$20        ; set A short
.393a84		b0 08		bcs $393a8e	              BCS OPL2_Set_Synthmode_Set;
.393a86		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a88		29 fe		and #$fe	              AND #$FE
.393a8a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a8c		80 06		bra $393a94	              BRA OPL2_Set_Synthmode_Exit
.393a8e						OPL2_Set_Synthmode_Set
.393a8e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a90		09 01		ora #$01	              ORA #$01
.393a92		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a94						OPL2_Set_Synthmode_Exit
.393a94		6b		rtl		                RTL
.393a95						OPL2_SET_DEEPTREMOLO
.393a95		48		pha		                PHA             ; begin setdp macro
.393a96		08		php		                PHP
.393a97		c2 20		rep #$20	                REP #$20        ; set A long
.393a99		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a9c		5b		tcd		                TCD
.393a9d		28		plp		                PLP
.393a9e		68		pla		                PLA             ; end setdp macro
.393a9f		c2 20		rep #$20	                REP #$20        ; set A long
.393aa1		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393aa4		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393aa6		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393aa9		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393aab		e2 20		sep #$20	                SEP #$20        ; set A short
.393aad		b0 08		bcs $393ab7	              BCS OPL2_Set_DeepTremolo_Set;
.393aaf		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ab1		29 7f		and #$7f	              AND #$7F
.393ab3		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ab5		80 06		bra $393abd	              BRA OPL2_Set_DeepTremolo_Exit
.393ab7						OPL2_Set_DeepTremolo_Set
.393ab7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ab9		09 80		ora #$80	              ORA #$80
.393abb		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393abd						OPL2_Set_DeepTremolo_Exit
.393abd		6b		rtl		                RTL
.393abe						OPL2_SET_DEEPVIBRATO
.393abe		48		pha		                PHA             ; begin setdp macro
.393abf		08		php		                PHP
.393ac0		c2 20		rep #$20	                REP #$20        ; set A long
.393ac2		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ac5		5b		tcd		                TCD
.393ac6		28		plp		                PLP
.393ac7		68		pla		                PLA             ; end setdp macro
.393ac8		c2 20		rep #$20	                REP #$20        ; set A long
.393aca		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393acd		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393acf		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393ad2		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393ad4		e2 20		sep #$20	                SEP #$20        ; set A short
.393ad6		b0 08		bcs $393ae0	              BCS OPL2_Set_DeepVibrato_Set;
.393ad8		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ada		29 bf		and #$bf	              AND #$BF
.393adc		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ade		80 06		bra $393ae6	              BRA OPL2_Set_DeepVibrato_Exit
.393ae0						OPL2_Set_DeepVibrato_Set
.393ae0		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ae2		09 40		ora #$40	              ORA #$40
.393ae4		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ae6						OPL2_Set_DeepVibrato_Exit
.393ae6		6b		rtl		                RTL
.393ae7						OPL2_SET_PERCUSSION
.393ae7		48		pha		                PHA             ; begin setdp macro
.393ae8		08		php		                PHP
.393ae9		c2 20		rep #$20	                REP #$20        ; set A long
.393aeb		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393aee		5b		tcd		                TCD
.393aef		28		plp		                PLP
.393af0		68		pla		                PLA             ; end setdp macro
.393af1		c2 20		rep #$20	                REP #$20        ; set A long
.393af3		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393af6		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393af8		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393afb		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393afd		e2 20		sep #$20	                SEP #$20        ; set A short
.393aff		b0 08		bcs $393b09	                BCS OPL2_Set_Percussion_Set;
.393b01		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b03		29 df		and #$df	                AND #$DF
.393b05		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b07		80 06		bra $393b0f	                BRA OPL2_Set_Percussion_Exit
.393b09						OPL2_Set_Percussion_Set
.393b09		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b0b		09 20		ora #$20	                ORA #$20
.393b0d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b0f						OPL2_Set_Percussion_Exit
.393b0f		6b		rtl		                RTL
.393b10						OPL2_SET_DRUMS
.393b10		48		pha		                PHA             ; begin setdp macro
.393b11		08		php		                PHP
.393b12		c2 20		rep #$20	                REP #$20        ; set A long
.393b14		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b17		5b		tcd		                TCD
.393b18		28		plp		                PLP
.393b19		68		pla		                PLA             ; end setdp macro
.393b1a		c2 20		rep #$20	                REP #$20        ; set A long
.393b1c		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393b1f		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393b21		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393b24		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393b26		e2 20		sep #$20	                SEP #$20        ; set A short
.393b28		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393b2a		29 1f		and #$1f	                AND #$1F
.393b2c		85 32		sta $32		                STA OPL2_PARAMETER0
.393b2e		49 ff		eor #$ff	                EOR #$FF
.393b30		85 33		sta $33		                STA OPL2_PARAMETER1
.393b32		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b34		25 33		and $33		                AND OPL2_PARAMETER1
.393b36		05 32		ora $32		                ORA OPL2_PARAMETER0
.393b38		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b3a		6b		rtl		                RTL
.393b3b						OPL2_SET_WAVEFORM
.393b3b		48		pha		                PHA             ; begin setdp macro
.393b3c		08		php		                PHP
.393b3d		c2 20		rep #$20	                REP #$20        ; set A long
.393b3f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b42		5b		tcd		                TCD
.393b43		28		plp		                PLP
.393b44		68		pla		                PLA             ; end setdp macro
.393b45		c2 20		rep #$20	                REP #$20        ; set A long
.393b47		a9 e0 00	lda #$00e0	                LDA #$00E0;
.393b4a		85 28		sta $28		                STA OPL2_REG_REGION
.393b4c		20 60 3b	jsr $393b60	                JSR OPL2_GET_REG_OFFSET
.393b4f		e2 20		sep #$20	                SEP #$20        ; set A short
.393b51		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393b53		29 03		and #$03	                AND #$03
.393b55		85 32		sta $32		                STA OPL2_PARAMETER0
.393b57		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b59		29 fc		and #$fc	                AND #$FC
.393b5b		05 32		ora $32		                ORA OPL2_PARAMETER0
.393b5d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b5f		6b		rtl		                RTL
.393b60						OPL2_GET_REG_OFFSET
.393b60		e2 30		sep #$30	                SEP #$30        ; set A&X short
.393b62		a5 27		lda $27		                LDA OPL2_CHANNEL
.393b64		29 0f		and #$0f	                AND #$0F
.393b66		aa		tax		                TAX
.393b67		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.393b69		d0 06		bne $393b71	                BNE OPL2_Get_Register_Offset_l0
.393b6b		bf a8 11 39	lda $3911a8,x	                LDA @lregisterOffsets_operator0, X
.393b6f		80 04		bra $393b75	                BRA OPL2_Get_Register_Offset_exit
.393b71						OPL2_Get_Register_Offset_l0
.393b71		bf b1 11 39	lda $3911b1,x	                LDA @lregisterOffsets_operator1, X
.393b75						OPL2_Get_Register_Offset_exit
.393b75		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393b77		a9 00		lda #$00	                LDA #$00
.393b79		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393b7b		c2 30		rep #$30	                REP #$30        ; set A&X long
.393b7d		18		clc		                CLC
.393b7e		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393b81		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393b83		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.393b85		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393b87		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393b8a		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393b8c		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/sdcard_controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.393b8d						ITRACE
.393b8d		08		php		                PHP
.393b8e		c2 30		rep #$30	                REP #$30        ; set A&X long
.393b90		8b		phb		                PHB                 ; Print the text
.393b91		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.393b93		aa		tax		                TAX                 ; ... into X
.393b94		e2 20		sep #$20	                SEP #$20        ; set A short
.393b96		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.393b98		48		pha		                PHA
.393b99		ab		plb		                PLB                 ; ... into B
.393b9a		22 46 07 39	jsl $390746	                JSL IPUTS           ; Print the string
.393b9e		c2 20		rep #$20	                REP #$20        ; set A long
.393ba0		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.393ba2		83 08		sta $08,s	                STA #8,S
.393ba4		a3 02		lda $02,s	                LDA #2,S
.393ba6		83 06		sta $06,s	                STA #6,S
.393ba8		ab		plb		                PLB
.393ba9		68		pla		                PLA                 ; Clean up the stack
.393baa		68		pla		                PLA
.393bab		28		plp		                PLP
.393bac		6b		rtl		                RTL
.393bad						ISETTIMEOUT
.393bad		8b		phb		                PHB
.393bae		0b		phd		                PHD
.393baf		08		php		                PHP
.393bb0		48		pha		                PHA             ; begin setdbr macro
.393bb1		08		php		                PHP
.393bb2		e2 20		sep #$20	                SEP #$20        ; set A short
.393bb4		a9 00		lda #$00	                LDA #0
.393bb6		48		pha		                PHA
.393bb7		ab		plb		                PLB
.393bb8		28		plp		                PLP
.393bb9		68		pla		                PLA             ; end setdbr macro
.393bba		48		pha		                PHA             ; begin setdp macro
.393bbb		08		php		                PHP
.393bbc		c2 20		rep #$20	                REP #$20        ; set A long
.393bbe		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393bc1		5b		tcd		                TCD
.393bc2		28		plp		                PLP
.393bc3		68		pla		                PLA             ; end setdp macro
.393bc4		78		sei		                SEI                             ; We don't want to be interrupted
.393bc5		e2 20		sep #$20	                SEP #$20        ; set A short
.393bc7		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.393bc9		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.393bcb		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.393bcd		85 0c		sta $032c	                STA @b BIOS_FLAGS
.393bcf		28		plp		done            PLP
.393bd0		2b		pld		                PLD
.393bd1		ab		plb		                PLB
.393bd2		6b		rtl		                RTL
.393bd3						ICMDBLOCK
.393bd3		0b		phd		                PHD
.393bd4		08		php		                PHP
.393bd5		48		pha		                PHA             ; begin setdp macro
.393bd6		08		php		                PHP
.393bd7		c2 20		rep #$20	                REP #$20        ; set A long
.393bd9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393bdc		5b		tcd		                TCD
.393bdd		28		plp		                PLP
.393bde		68		pla		                PLA             ; end setdp macro
.393bdf		e2 20		sep #$20	                SEP #$20        ; set A short
.393be1		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.393be3		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.393be5		d0 06		bne $393bed	                BNE ret_success             ; No: just return
.393be7		22 38 65 39	jsl $396538	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.393beb		90 0c		bcc $393bf9	                BCC pass_failure
.393bed						ret_success
.393bed		e2 20		sep #$20	                SEP #$20        ; set A short
.393bef		64 00		stz $0320	                STZ BIOS_STATUS
.393bf1		28		plp		                PLP
.393bf2		2b		pld		                PLD
.393bf3		38		sec		                SEC
.393bf4		6b		rtl		                RTL
.393bf5						ret_failure
.393bf5		e2 20		sep #$20	                SEP #$20        ; set A short
.393bf7		85 00		sta $0320	                STA BIOS_STATUS
.393bf9		28		plp		pass_failure    PLP
.393bfa		2b		pld		                PLD
.393bfb		18		clc		                CLC
.393bfc		6b		rtl		                RTL
.393bfd						IGETBLOCK
.393bfd		5a		phy		                PHY
.393bfe		0b		phd		                PHD
.393bff		8b		phb		                PHB
.393c00		08		php		                PHP
.393c01		48		pha		                PHA             ; begin setdbr macro
.393c02		08		php		                PHP
.393c03		e2 20		sep #$20	                SEP #$20        ; set A short
.393c05		a9 00		lda #$00	                LDA #0
.393c07		48		pha		                PHA
.393c08		ab		plb		                PLB
.393c09		28		plp		                PLP
.393c0a		68		pla		                PLA             ; end setdbr macro
.393c0b		48		pha		                PHA             ; begin setdp macro
.393c0c		08		php		                PHP
.393c0d		c2 20		rep #$20	                REP #$20        ; set A long
.393c0f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393c12		5b		tcd		                TCD
.393c13		28		plp		                PLP
.393c14		68		pla		                PLA             ; end setdp macro
.393c15		e2 20		sep #$20	                SEP #$20        ; set A short
.393c17		a0 00 00	ldy #$0000	                LDY #0
.393c1a		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.393c1c		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.393c1e		c8		iny		                INY
.393c1f		c0 00 02	cpy #$0200	                CPY #512
.393c22		d0 f8		bne $393c1c	                BNE clr_loop
.393c24		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393c26		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393c28		f0 14		beq $393c3e	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.393c2a		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.393c2c		f0 18		beq $393c46	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.393c2e		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393c30		f0 1c		beq $393c4e	                BEQ hd_getblock
.393c32		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393c34						ret_failure
.393c34		e2 20		sep #$20	                SEP #$20        ; set A short
.393c36		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.393c38		28		plp		                PLP
.393c39		ab		plb		                PLB
.393c3a		2b		pld		                PLD
.393c3b		7a		ply		                PLY
.393c3c		38		sec		                SEC                                 ; Return failure
.393c3d		6b		rtl		                RTL
.393c3e		22 44 5a 39	jsl $395a44	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.393c42		b0 12		bcs $393c56	                BCS ret_success
.393c44		80 ee		bra $393c34	                BRA ret_failure
.393c46		22 3d 63 39	jsl $39633d	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.393c4a		b0 0a		bcs $393c56	                BCS ret_success
.393c4c		80 e6		bra $393c34	                BRA ret_failure
.393c4e		22 51 69 39	jsl $396951	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.393c52		b0 02		bcs $393c56	                BCS ret_success
.393c54		80 de		bra $393c34	                BRA ret_failure
.393c56						ret_success
.393c56		e2 20		sep #$20	                SEP #$20        ; set A short
.393c58		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393c5a		28		plp		                PLP
.393c5b		ab		plb		                PLB
.393c5c		2b		pld		                PLD
.393c5d		7a		ply		                PLY
.393c5e		38		sec		                SEC                                 ; Return success
.393c5f		6b		rtl		                RTL
.393c60						IPUTBLOCK
.393c60		0b		phd		                PHD
.393c61		8b		phb		                PHB
.393c62		08		php		                PHP
.393c63		48		pha		                PHA             ; begin setdbr macro
.393c64		08		php		                PHP
.393c65		e2 20		sep #$20	                SEP #$20        ; set A short
.393c67		a9 00		lda #$00	                LDA #0
.393c69		48		pha		                PHA
.393c6a		ab		plb		                PLB
.393c6b		28		plp		                PLP
.393c6c		68		pla		                PLA             ; end setdbr macro
.393c6d		48		pha		                PHA             ; begin setdp macro
.393c6e		08		php		                PHP
.393c6f		c2 20		rep #$20	                REP #$20        ; set A long
.393c71		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393c74		5b		tcd		                TCD
.393c75		28		plp		                PLP
.393c76		68		pla		                PLA             ; end setdp macro
.393c77		e2 20		sep #$20	                SEP #$20        ; set A short
.393c79		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393c7b		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393c7d		f0 13		beq $393c92	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.393c7f		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.393c81		f0 17		beq $393c9a	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.393c83		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393c85		f0 1b		beq $393ca2	                BEQ hd_putblock
.393c87		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393c89						ret_failure
.393c89		e2 20		sep #$20	                SEP #$20        ; set A short
.393c8b		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.393c8d		28		plp		                PLP
.393c8e		ab		plb		                PLB
.393c8f		2b		pld		                PLD
.393c90		18		clc		                CLC                                 ; Return failure
.393c91		6b		rtl		                RTL
.393c92		22 eb 5a 39	jsl $395aeb	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.393c96		90 f1		bcc $393c89	                BCC ret_failure
.393c98		80 10		bra $393caa	                BRA ret_success
.393c9a		22 a2 63 39	jsl $3963a2	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.393c9e		90 e9		bcc $393c89	                BCC ret_failure
.393ca0		80 08		bra $393caa	                BRA ret_success
.393ca2		22 dc 69 39	jsl $3969dc	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.393ca6		90 e1		bcc $393c89	                BCC ret_failure
.393ca8		80 00		bra $393caa	                BRA ret_success
.393caa						ret_success
.393caa		e2 20		sep #$20	                SEP #$20        ; set A short
.393cac		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393cae		28		plp		                PLP
.393caf		ab		plb		                PLB
.393cb0		2b		pld		                PLD
.393cb1		38		sec		                SEC                                 ; Return success
.393cb2		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.393cb3						DOS_DIROPEN
.393cb3		da		phx		                PHX
.393cb4		5a		phy		                PHY
.393cb5		0b		phd		                PHD
.393cb6		8b		phb		                PHB
.393cb7		08		php		                PHP
.393cb8		48		pha		                PHA             ; begin setdbr macro
.393cb9		08		php		                PHP
.393cba		e2 20		sep #$20	                SEP #$20        ; set A short
.393cbc		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393cbe		48		pha		                PHA
.393cbf		ab		plb		                PLB
.393cc0		28		plp		                PLP
.393cc1		68		pla		                PLA             ; end setdbr macro
.393cc2		48		pha		                PHA             ; begin setdp macro
.393cc3		08		php		                PHP
.393cc4		c2 20		rep #$20	                REP #$20        ; set A long
.393cc6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393cc9		5b		tcd		                TCD
.393cca		28		plp		                PLP
.393ccb		68		pla		                PLA             ; end setdp macro
.393ccc		ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.393ccf		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.393cd2		ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.393cd5		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393cd8		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.393cdb		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393cdd		85 18		sta $0338	                STA DOS_DIR_PTR
.393cdf		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393ce2		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393ce4		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393ce6		e2 20		sep #$20	                SEP #$20        ; set A short
.393ce8		ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.393ceb		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.393ced		d0 24		bne $393d13	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.393cef						fetch_fat12
.393cef		e2 20		sep #$20	                SEP #$20        ; set A short
.393cf1		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.393cf3		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.393cf6		c2 20		rep #$20	                REP #$20        ; set A long
.393cf8		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.393cfa		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393cfc		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.393cfe		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393d00		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.393d03		85 02		sta $0322	                STA BIOS_LBA
.393d05		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393d08		85 04		sta $0324	                STA BIOS_LBA+2
.393d0a		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.393d0e		b0 1f		bcs $393d2f	                BCS do_success              ; If sucessful, set the directory cursor
.393d10		82 84 18	brl $395597	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393d13						fetch_fat32
.393d13		e2 20		sep #$20	                SEP #$20        ; set A short
.393d15		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.393d17		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.393d1a		c2 20		rep #$20	                REP #$20        ; set A long
.393d1c		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.393d1f		85 10		sta $0330	                STA DOS_CLUS_ID
.393d21		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393d24		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393d26		22 96 42 39	jsl $394296	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.393d2a		b0 03		bcs $393d2f	                BCS do_success              ; If successful: set the directory cursor
.393d2c		82 68 18	brl $395597	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393d2f		82 6c 18	brl $39559e	do_success      BRL IF_SUCCESS
.393d32						DOS_DIRFIRST
.393d32		0b		phd		                PHD
.393d33		08		php		                PHP
.393d34		48		pha		                PHA             ; begin setdp macro
.393d35		08		php		                PHP
.393d36		c2 20		rep #$20	                REP #$20        ; set A long
.393d38		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393d3b		5b		tcd		                TCD
.393d3c		28		plp		                PLP
.393d3d		68		pla		                PLA             ; end setdp macro
.393d3e		c2 20		rep #$20	                REP #$20        ; set A long
.393d40		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.393d43		85 18		sta $0338	                STA DOS_DIR_PTR
.393d45		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393d48		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393d4a		28		plp		                PLP
.393d4b		2b		pld		                PLD
.393d4c		6b		rtl		                RTL
.393d4d						DOS_DIRNEXT
.393d4d		da		phx		                PHX
.393d4e		5a		phy		                PHY
.393d4f		0b		phd		                PHD
.393d50		8b		phb		                PHB
.393d51		08		php		                PHP
.393d52		48		pha		                PHA             ; begin setdbr macro
.393d53		08		php		                PHP
.393d54		e2 20		sep #$20	                SEP #$20        ; set A short
.393d56		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393d58		48		pha		                PHA
.393d59		ab		plb		                PLB
.393d5a		28		plp		                PLP
.393d5b		68		pla		                PLA             ; end setdbr macro
.393d5c		48		pha		                PHA             ; begin setdp macro
.393d5d		08		php		                PHP
.393d5e		c2 20		rep #$20	                REP #$20        ; set A long
.393d60		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393d63		5b		tcd		                TCD
.393d64		28		plp		                PLP
.393d65		68		pla		                PLA             ; end setdp macro
.393d66		c2 20		rep #$20	                REP #$20        ; set A long
.393d68		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.393d69		a5 18		lda $0338	                LDA DOS_DIR_PTR
.393d6b		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.393d6e		85 18		sta $0338	                STA DOS_DIR_PTR
.393d70		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.393d72		69 00 00	adc #$0000	                ADC #0
.393d75		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393d77		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.393d78		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.393d7b		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.393d7d		85 28		sta $0348	                STA DOS_TEMP
.393d7f		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.393d82		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.393d84		85 2a		sta $034a	                STA DOS_TEMP+2
.393d86		30 0c		bmi $393d94	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.393d88		f0 03		beq $393d8d	                BEQ check_lower
.393d8a		82 11 18	brl $39559e	                BRL IF_SUCCESS
.393d8d		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.393d8f		f0 03		beq $393d94	                BEQ get_next_block
.393d91		82 0a 18	brl $39559e	                BRL IF_SUCCESS
.393d94						get_next_block
.393d94		e2 20		sep #$20	                SEP #$20        ; set A short
.393d96		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.393d99		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.393d9b		f0 38		beq $393dd5	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.393d9d						next_sector
.393d9d		c2 20		rep #$20	                REP #$20        ; set A long
.393d9f		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.393da2		1a		inc a		                INC A
.393da3		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.393da6		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.393da9		d0 07		bne $393db2	                BNE read_sector
.393dab		e2 20		sep #$20	                SEP #$20        ; set A short
.393dad		a9 00		lda #$00	                LDA #0
.393daf		82 e1 17	brl $395593	                BRL IF_FAILURE
.393db2						read_sector
.393db2		c2 20		rep #$20	                REP #$20        ; set A long
.393db4		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.393db7		85 02		sta $0322	                STA BIOS_LBA
.393db9		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393dbc		85 04		sta $0324	                STA BIOS_LBA+2
.393dbe		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.393dc1		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393dc3		85 18		sta $0338	                STA DOS_DIR_PTR
.393dc5		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393dc8		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393dca		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393dcc		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.393dd0		b0 39		bcs $393e0b	                BCS do_success              ; If successful: set the directory cursor
.393dd2		82 c2 17	brl $395597	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393dd5						next_cluster
.393dd5		c2 20		rep #$20	                REP #$20        ; set A long
.393dd7		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.393dda		85 10		sta $0330	                STA DOS_CLUS_ID
.393ddc		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393ddf		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393de1		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.393de4		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393de6		85 18		sta $0338	                STA DOS_DIR_PTR
.393de8		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393deb		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393ded		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393def		22 aa 46 39	jsl $3946aa	                JSL NEXTCLUSTER             ; Try to find the next cluster
.393df3		b0 03		bcs $393df8	                BCS set_next
.393df5		82 9f 17	brl $395597	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.393df8		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.393dfa		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.393dfd		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.393dff		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393e02		22 96 42 39	jsl $394296	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.393e06		b0 03		bcs $393e0b	                BCS do_success              ; If successful: set the directory cursor
.393e08		82 8c 17	brl $395597	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393e0b		82 90 17	brl $39559e	do_success      BRL IF_SUCCESS
.393e0e						DOS_DIRFINDFREE
.393e0e		da		phx		                PHX
.393e0f		5a		phy		                PHY
.393e10		0b		phd		                PHD
.393e11		8b		phb		                PHB
.393e12		08		php		                PHP
.393e13		48		pha		                PHA             ; begin setdbr macro
.393e14		08		php		                PHP
.393e15		e2 20		sep #$20	                SEP #$20        ; set A short
.393e17		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393e19		48		pha		                PHA
.393e1a		ab		plb		                PLB
.393e1b		28		plp		                PLP
.393e1c		68		pla		                PLA             ; end setdbr macro
.393e1d		48		pha		                PHA             ; begin setdp macro
.393e1e		08		php		                PHP
.393e1f		c2 20		rep #$20	                REP #$20        ; set A long
.393e21		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393e24		5b		tcd		                TCD
.393e25		28		plp		                PLP
.393e26		68		pla		                PLA             ; end setdp macro
.393e27		22 b5 50 39	jsl $3950b5	                JSL IF_DIROPEN
.393e2b		b0 06		bcs $393e33	                BCS start_walk
.393e2d		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.393e30		82 28 00	brl $393e5b	                BRL ret_failure
.393e33		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.393e36						chk_entry
.393e36		e2 20		sep #$20	                SEP #$20        ; set A short
.393e38		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.393e3a		f0 1c		beq $393e58	                BEQ ret_success             ; If 0: we have a blank... return it
.393e3c		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.393e3e		f0 18		beq $393e58	                BEQ ret_success             ; Yes: return it
.393e40		22 ef 50 39	jsl $3950ef	                JSL IF_DIRNEXT              ; Go to the next directory entry
.393e44		b0 ed		bcs $393e33	                BCS start_walk              ; If we got one, start walking it
.393e46		22 5e 3e 39	jsl $393e5e	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.393e4a		90 0f		bcc $393e5b	                BCC ret_failure             ; If that didn't work, return the failure
.393e4c		c2 20		rep #$20	                REP #$20        ; set A long
.393e4e		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.393e51		85 18		sta $0338	                STA DOS_DIR_PTR
.393e53		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393e56		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393e58		82 43 17	brl $39559e	ret_success     BRL IF_SUCCESS
.393e5b		82 35 17	brl $395593	ret_failure     BRL IF_FAILURE
.393e5e						DOS_DIRAPPEND
.393e5e		da		phx		                PHX
.393e5f		8b		phb		                PHB
.393e60		0b		phd		                PHD
.393e61		08		php		                PHP
.393e62		48		pha		                PHA             ; begin setdbr macro
.393e63		08		php		                PHP
.393e64		e2 20		sep #$20	                SEP #$20        ; set A short
.393e66		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393e68		48		pha		                PHA
.393e69		ab		plb		                PLB
.393e6a		28		plp		                PLP
.393e6b		68		pla		                PLA             ; end setdbr macro
.393e6c		48		pha		                PHA             ; begin setdp macro
.393e6d		08		php		                PHP
.393e6e		c2 20		rep #$20	                REP #$20        ; set A long
.393e70		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393e73		5b		tcd		                TCD
.393e74		28		plp		                PLP
.393e75		68		pla		                PLA             ; end setdp macro
.393e76		e2 20		sep #$20	                SEP #$20        ; set A short
.393e78		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.393e7b		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.393e7d		f0 09		beq $393e88	                BEQ clr_sector                  ; Yes: clear out the directory data
.393e7f						ret_failure
.393e7f		e2 20		sep #$20	                SEP #$20        ; set A short
.393e81		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.393e83		85 0e		sta $032e	                STA DOS_STATUS
.393e85		82 3e 00	brl $393ec6	                BRL pass_failure
.393e88						clr_sector
.393e88		c2 20		rep #$20	                REP #$20        ; set A long
.393e8a		a9 00 00	lda #$0000	                LDA #0
.393e8d		a2 00 00	ldx #$0000	                LDX #0
.393e90		9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.393e93		e8		inx		                INX
.393e94		e8		inx		                INX
.393e95		e0 00 02	cpx #$0200	                CPX #512
.393e98		d0 f6		bne $393e90	                BNE clr_loop
.393e9a		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.393e9d		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393e9f		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393ea2		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393ea4		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.393ea7		85 10		sta $0330	                STA DOS_CLUS_ID
.393ea9		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393eac		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393eae		22 cb 4a 39	jsl $394acb	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.393eb2		90 12		bcc $393ec6	                BCC pass_failure                ; If there was an error, pass it up the chain
.393eb4		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.393eb7		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.393eba		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.393ebd		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393ec0		28		plp		ret_success     PLP
.393ec1		2b		pld		                PLD
.393ec2		ab		plb		                PLB
.393ec3		fa		plx		                PLX
.393ec4		38		sec		                SEC
.393ec5		6b		rtl		                RTL
.393ec6		28		plp		pass_failure    PLP
.393ec7		2b		pld		                PLD
.393ec8		ab		plb		                PLB
.393ec9		fa		plx		                PLX
.393eca		18		clc		                CLC
.393ecb		6b		rtl		                RTL
.393ecc						DOS_DIRWRITE
.393ecc		da		phx		                PHX
.393ecd		5a		phy		                PHY
.393ece		0b		phd		                PHD
.393ecf		8b		phb		                PHB
.393ed0		08		php		                PHP
.393ed1		48		pha		                PHA             ; begin setdbr macro
.393ed2		08		php		                PHP
.393ed3		e2 20		sep #$20	                SEP #$20        ; set A short
.393ed5		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393ed7		48		pha		                PHA
.393ed8		ab		plb		                PLB
.393ed9		28		plp		                PLP
.393eda		68		pla		                PLA             ; end setdbr macro
.393edb		48		pha		                PHA             ; begin setdp macro
.393edc		08		php		                PHP
.393edd		c2 20		rep #$20	                REP #$20        ; set A long
.393edf		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393ee2		5b		tcd		                TCD
.393ee3		28		plp		                PLP
.393ee4		68		pla		                PLA             ; end setdp macro
.393ee5		e2 20		sep #$20	                SEP #$20        ; set A short
.393ee7		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.393eea		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.393eec		f0 1f		beq $393f0d	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.393eee						write_sector
.393eee		c2 20		rep #$20	                REP #$20        ; set A long
.393ef0		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.393ef3		85 02		sta $0322	                STA BIOS_LBA
.393ef5		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393ef8		85 04		sta $0324	                STA BIOS_LBA+2
.393efa		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.393efd		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393eff		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393f02		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393f04		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.393f08		b0 1f		bcs $393f29	                BCS ret_success
.393f0a		82 86 16	brl $395593	ret_failure     BRL IF_FAILURE
.393f0d						write_cluster
.393f0d		c2 20		rep #$20	                REP #$20        ; set A long
.393f0f		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.393f12		85 10		sta $0330	                STA DOS_CLUS_ID
.393f14		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393f17		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393f19		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.393f1c		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393f1e		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393f21		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393f23		22 d3 42 39	jsl $3942d3	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.393f27		90 e1		bcc $393f0a	                BCC ret_failure
.393f29		82 72 16	brl $39559e	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=24						DOS_ERR_EOF = 24                        ; At end of file
=25						DOS_ERR_PGZSIG = 25                     ; File does not have the PGZ signature
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\Includes/sdos_fat_vars_user_inc.asm

=$38a000					    DOS_HIGH_VARIABLES      = $38A000
=$38a000					    DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001					    FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002					    PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003					    SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004					    FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008					    SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c					    NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e					    CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010					    SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014					    FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018					    FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c					    CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020					    ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024					    ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026					    VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a					    DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e					    DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032					    DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036					    DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a					    DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045					    DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046					    DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a					    DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e					    FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050					    DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100					    DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300					    DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300					    DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500					    DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500					    DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900					    DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900					    DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00					    DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00					    DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00					    DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00					    DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000					    DOS_FILE_BUFFS          = $38B000
=3719168					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.393f2c						DOS_INIT
.393f2c		8b		phb		                PHB
.393f2d		0b		phd		                PHD
.393f2e		08		php		                PHP
.393f2f		48		pha		                PHA             ; begin setdbr macro
.393f30		08		php		                PHP
.393f31		e2 20		sep #$20	                SEP #$20        ; set A short
.393f33		a9 00		lda #$00	                LDA #0
.393f35		48		pha		                PHA
.393f36		ab		plb		                PLB
.393f37		28		plp		                PLP
.393f38		68		pla		                PLA             ; end setdbr macro
.393f39		48		pha		                PHA             ; begin setdp macro
.393f3a		08		php		                PHP
.393f3b		c2 20		rep #$20	                REP #$20        ; set A long
.393f3d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393f40		5b		tcd		                TCD
.393f41		28		plp		                PLP
.393f42		68		pla		                PLA             ; end setdp macro
.393f43		e2 20		sep #$20	                SEP #$20        ; set A short
.393f45		c2 10		rep #$10	                REP #$10        ; set X long
.393f47		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.393f4a		a9 00		lda #$00	                LDA #0
.393f4c		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.393f4f		e8		inx		                INX
.393f50		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.393f53		d0 f7		bne $393f4c	                BNE b0_clr_loop
.393f55		48		pha		                PHA             ; begin setdbr macro
.393f56		08		php		                PHP
.393f57		e2 20		sep #$20	                SEP #$20        ; set A short
.393f59		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393f5b		48		pha		                PHA
.393f5c		ab		plb		                PLB
.393f5d		28		plp		                PLP
.393f5e		68		pla		                PLA             ; end setdbr macro
.393f5f		48		pha		                PHA             ; begin setdp macro
.393f60		08		php		                PHP
.393f61		c2 20		rep #$20	                REP #$20        ; set A long
.393f63		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393f66		5b		tcd		                TCD
.393f67		28		plp		                PLP
.393f68		68		pla		                PLA             ; end setdp macro
.393f69		e2 20		sep #$20	                SEP #$20        ; set A short
.393f6b		c2 10		rep #$10	                REP #$10        ; set X long
.393f6d		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.393f70		a9 00		lda #$00	                LDA #0
.393f72		9d 00 a0	sta $38a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.393f75		e8		inx		                INX
.393f76		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.393f79		d0 f7		bne $393f72	                BNE b38_clr_loop
.393f7b		c2 20		rep #$20	                REP #$20        ; set A long
.393f7d		a9 2b 43	lda #$432b	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.393f80		8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.393f84		a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.393f87		8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.393f8b		e2 20		sep #$20	                SEP #$20        ; set A short
.393f8d		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.393f8f		85 01		sta $0321	                STA BIOS_DEV
.393f91		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.393f93		8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.393f97		a9 00		lda #$00	                LDA #0
.393f99		a2 00 00	ldx #$0000	                LDX #0
.393f9c		9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.393f9f		e8		inx		                INX
.393fa0		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.393fa3		d0 f7		bne $393f9c	                BNE fd_zero_loop
.393fa5		a9 00		lda #$00	                LDA #0
.393fa7		a2 00 00	ldx #$0000	                LDX #0
.393faa		9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.393fad		e8		inx		                INX
.393fae		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.393fb1		d0 f7		bne $393faa	                BNE sect_zero_loop
.393fb3		c2 20		rep #$20	                REP #$20        ; set A long
.393fb5		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.393fb8		85 20		sta $0340	                STA @b DOS_FD_PTR
.393fba		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.393fbd		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.393fbf		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.393fc2		85 28		sta $0348	                STA @b DOS_TEMP
.393fc4		a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.393fc7		85 2a		sta $034a	                STA @b DOS_TEMP+2
.393fc9		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.393fcc		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.393fcf		a5 28		lda $0348	                LDA @b DOS_TEMP
.393fd1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.393fd3		c8		iny		                INY
.393fd4		c8		iny		                INY
.393fd5		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.393fd7		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.393fd9		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.393fda		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.393fdc		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.393fdf		85 20		sta $0340	                STA @b DOS_FD_PTR
.393fe1		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.393fe3		69 00 00	adc #$0000	                ADC #0
.393fe6		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.393fe8		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.393fe9		a5 28		lda $0348	                LDA @b DOS_TEMP
.393feb		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.393fee		85 28		sta $0348	                STA @b DOS_TEMP
.393ff0		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.393ff2		69 00 00	adc #$0000	                ADC #0
.393ff5		85 2a		sta $034a	                STA @b DOS_TEMP+2
.393ff7		ca		dex		                DEX                     ; Count down the descriptors...
.393ff8		d0 d2		bne $393fcc	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.393ffa		28		plp		                PLP
.393ffb		2b		pld		                PLD
.393ffc		ab		plb		                PLB
.393ffd		6b		rtl		                RTL
.393ffe						DOS_MOUNT
.393ffe		8b		phb		                PHB
.393fff		0b		phd		                PHD
.394000		08		php		                PHP
.394001		48		pha		                PHA             ; begin setdbr macro
.394002		08		php		                PHP
.394003		e2 20		sep #$20	                SEP #$20        ; set A short
.394005		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394007		48		pha		                PHA
.394008		ab		plb		                PLB
.394009		28		plp		                PLP
.39400a		68		pla		                PLA             ; end setdbr macro
.39400b		48		pha		                PHA             ; begin setdp macro
.39400c		08		php		                PHP
.39400d		c2 20		rep #$20	                REP #$20        ; set A long
.39400f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394012		5b		tcd		                TCD
.394013		28		plp		                PLP
.394014		68		pla		                PLA             ; end setdp macro
.394015		e2 20		sep #$20	                SEP #$20        ; set A short
.394017		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.394019		8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.39401d		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.39401f		f0 1f		beq $394040	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.394021		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.394023		f0 26		beq $39404b	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.394025		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.394027		f0 0b		beq $394034	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.394029		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.39402b		85 0e		sta $032e	                STA DOS_STATUS
.39402d		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.39402f		85 00		sta $0320	                STA BIOS_STATUS
.394031		82 7c 01	brl $3941b0	                BRL ret_failure
.394034		22 0e 64 39	jsl $39640e	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.394038		b0 03		bcs $39403d	                BCS fdc_success
.39403a		82 73 01	brl $3941b0	                BRL ret_failure
.39403d		82 67 01	brl $3941a7	fdc_success     BRL ret_success
.394040		22 f6 59 39	jsl $3959f6	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.394044		b0 10		bcs $394056	                BCS get_mbr             ; Continue if success
.394046		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394048		82 65 01	brl $3941b0	                BRL ret_failure
.39404b		22 56 68 39	jsl $396856	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.39404f		b0 05		bcs $394056	                BCS get_mbr             ; Continue if success
.394051		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394053		82 5a 01	brl $3941b0	                BRL ret_failure
.394056						get_mbr
.394056		c2 30		rep #$30	                REP #$30        ; set A&X long
.394058		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.39405a		64 04		stz $0324	                STZ BIOS_LBA+2
.39405c		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.39405f		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394061		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394064		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394066		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.39406a		b0 07		bcs $394073	                BCS chk_signature       ; If success, check the signature bytes
.39406c		e2 20		sep #$20	                SEP #$20        ; set A short
.39406e		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.394070		82 3d 01	brl $3941b0	                BRL ret_failure
.394073						chk_signature
.394073		e2 20		sep #$20	                SEP #$20        ; set A short
.394075		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.394078		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.39407a		d0 07		bne $394083	                BNE not_mbr             ; No: signal we could find the MBR
.39407c		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.39407f		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394081		f0 05		beq $394088	                BEQ chk_part_type       ; Yes: we have an MBR
.394083		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.394085		82 28 01	brl $3941b0	                BRL ret_failure
.394088		ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.39408b		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.39408d		f0 05		beq $394094	                BEQ get_LBA             ; Is FAT32 with LBA?
.39408f		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.394091		82 1c 01	brl $3941b0	                BRL ret_failure
.394094		8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.394097		c2 20		rep #$20	                REP #$20        ; set A long
.394099		ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.39409c		8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.39409f		ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.3940a2		8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.3940a5		ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.3940a8		8d 08 a0	sta $38a008	                STA SECTORCOUNT
.3940ab		ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.3940ae		8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.3940b1		e2 20		sep #$20	                SEP #$20        ; set A short
.3940b3		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.3940b5		8d 00 a0	sta $38a000	                STA DEVICE
.3940b8		a9 00		lda #$00	                LDA #0
.3940ba		8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.3940bd		c2 20		rep #$20	                REP #$20        ; set A long
.3940bf		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.3940c2		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3940c4		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3940c7		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3940c9		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.3940cc		85 02		sta $0322	                STA BIOS_LBA
.3940ce		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.3940d1		85 04		sta $0324	                STA BIOS_LBA+2
.3940d3		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.3940d7		b0 1c		bcs $3940f5	                BCS get_first_sec       ; Got it? Start parsing it
.3940d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3940db		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.3940dd		82 d0 00	brl $3941b0	                BRL ret_failure
.3940e0						chk_bpb_sig
.3940e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3940e2		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.3940e5		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.3940e7		d0 07		bne $3940f0	                BNE not_bpb             ; No: signal we could find the volume ID
.3940e9		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.3940ec		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.3940ee		f0 05		beq $3940f5	                BEQ get_first_sec       ; Yes: we have an volume ID
.3940f0		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.3940f2		82 bb 00	brl $3941b0	                BRL ret_failure
.3940f5						get_first_sec
.3940f5		c2 20		rep #$20	                REP #$20        ; set A long
.3940f7		ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.3940fa		8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.3940fd		ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.394100		8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.394103		ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.394106		8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.394109		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.39410a		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.39410d		6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.394110		8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.394113		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.394116		69 00 00	adc #$0000	                ADC #0
.394119		8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.39411c		e2 20		sep #$20	                SEP #$20        ; set A short
.39411e		a2 00 00	ldx #$0000	                LDX #0
.394121		bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.394125		9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.394129		e8		inx		                INX
.39412a		e0 04 00	cpx #$0004	                CPX #4
.39412d		d0 f2		bne $394121	                BNE cpy_secperfat
.39412f		ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.394132		0a		asl a		                ASL A
.394133		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.394136		ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.394139		2a		rol a		                ROL A
.39413a		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.39413d		ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.394140		2a		rol a		                ROL A
.394141		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.394144		ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.394147		2a		rol a		                ROL A
.394148		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.39414b		18		clc		                CLC
.39414c		ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.39414f		6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.394152		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.394155		ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.394158		6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.39415b		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.39415e		ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.394161		6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394164		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.394167		ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.39416a		6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.39416d		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.394170		e2 20		sep #$20	                SEP #$20        ; set A short
.394172		ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.394175		8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.394178		18		clc		                CLC
.394179		ad 14 a0	lda $38a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.39417c		6d 10 a0	adc $38a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.39417f		8d 18 a0	sta $38a018	                STA FAT2_BEGIN_LBA
.394182		ad 15 a0	lda $38a015	                LDA FAT_BEGIN_LBA+1
.394185		6d 11 a0	adc $38a011	                ADC SEC_PER_FAT+1
.394188		8d 19 a0	sta $38a019	                STA FAT2_BEGIN_LBA+1
.39418b		ad 16 a0	lda $38a016	                LDA FAT_BEGIN_LBA+2
.39418e		6d 12 a0	adc $38a012	                ADC SEC_PER_FAT+2
.394191		8d 1a a0	sta $38a01a	                STA FAT2_BEGIN_LBA+2
.394194		ad 17 a0	lda $38a017	                LDA FAT_BEGIN_LBA+3
.394197		6d 13 a0	adc $38a013	                ADC SEC_PER_FAT+3
.39419a		8d 1b a0	sta $38a01b	                STA FAT2_BEGIN_LBA+3
.39419d		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.39419f		8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.3941a2		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.3941a4		8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.3941a7						ret_success
.3941a7		e2 20		sep #$20	                SEP #$20        ; set A short
.3941a9		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.3941ab		28		plp		                PLP
.3941ac		2b		pld		                PLD
.3941ad		ab		plb		                PLB
.3941ae		38		sec		                SEC
.3941af		6b		rtl		                RTL
.3941b0						ret_failure
.3941b0		e2 20		sep #$20	                SEP #$20        ; set A short
.3941b2		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.3941b4		28		plp		                PLP
.3941b5		2b		pld		                PLD
.3941b6		ab		plb		                PLB
.3941b7		18		clc		                CLC
.3941b8		6b		rtl		                RTL
.3941b9						DOS_TESTBOOT
.3941b9		8b		phb		                PHB
.3941ba		0b		phd		                PHD
.3941bb		da		phx		                PHX
.3941bc		08		php		                PHP
.3941bd		48		pha		                PHA             ; begin setdbr macro
.3941be		08		php		                PHP
.3941bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3941c1		a9 00		lda #$00	                LDA #0
.3941c3		48		pha		                PHA
.3941c4		ab		plb		                PLB
.3941c5		28		plp		                PLP
.3941c6		68		pla		                PLA             ; end setdbr macro
.3941c7		48		pha		                PHA             ; begin setdp macro
.3941c8		08		php		                PHP
.3941c9		c2 20		rep #$20	                REP #$20        ; set A long
.3941cb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941ce		5b		tcd		                TCD
.3941cf		28		plp		                PLP
.3941d0		68		pla		                PLA             ; end setdp macro
.3941d1		c2 10		rep #$10	                REP #$10        ; set X long
.3941d3						chk_dev
.3941d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3941d5		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.3941d7		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.3941d9		f0 24		beq $3941ff	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.3941db		c2 30		rep #$30	                REP #$30        ; set A&X long
.3941dd		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.3941e0		85 02		sta $0322	                STA @b BIOS_LBA
.3941e2		85 04		sta $0324	                STA @b BIOS_LBA+2
.3941e4		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.3941e7		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.3941e9		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3941ec		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.3941ee		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.3941f2		b0 03		bcs $3941f7	                BCS chk_mbr_brl
.3941f4		82 47 00	brl $39423e	                BRL done                    ; If failed... just return
.3941f7						chk_mbr_brl
.3941f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3941f9		af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.3941fd		80 04		bra $394203	                BRA chk_brl
.3941ff		af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.394203		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.394205		f0 06		beq $39420d	                BEQ chk_magic               ; Yes: check for the magic text
.394207		c9 82		cmp #$82	                CMP #$82
.394209		f0 02		beq $39420d	                BEQ chk_magic
.39420b		80 31		bra $39423e	                BRA done                    ; No: just return
.39420d		a2 00 00	ldx #$0000	chk_magic       LDX #0
.394210		bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.394214		df 43 42 39	cmp $394243,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.394218		d0 24		bne $39423e	                BNE done                    ; If it's not equal, just return
.39421a		e8		inx		                INX                         ; Otherwise, check the next one
.39421b		e0 08 00	cpx #$0008	                CPX #8
.39421e		d0 f0		bne $394210	                BNE magic_loop              ; Until we've checked all 8 bytes
.394220		c2 30		rep #$30	                REP #$30        ; set A&X long
.394222		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.394225		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.394228		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.39422b		44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.39422e		e2 20		sep #$20	                SEP #$20        ; set A short
.394230		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.394232		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.394234		f0 04		beq $39423a	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.394236		5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.39423a		5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.39423e		28		plp		done            PLP
.39423f		2b		pld		                PLD
.394240		ab		plb		                PLB
.394241		fa		plx		                PLX
.394242		6b		rtl		                RTL
>394243		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.39424b						DOS_CALC_LBA
.39424b		8b		phb		                PHB
.39424c		0b		phd		                PHD
.39424d		08		php		                PHP
.39424e		48		pha		                PHA             ; begin setdbr macro
.39424f		08		php		                PHP
.394250		e2 20		sep #$20	                SEP #$20        ; set A short
.394252		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394254		48		pha		                PHA
.394255		ab		plb		                PLB
.394256		28		plp		                PLP
.394257		68		pla		                PLA             ; end setdbr macro
.394258		48		pha		                PHA             ; begin setdp macro
.394259		08		php		                PHP
.39425a		c2 20		rep #$20	                REP #$20        ; set A long
.39425c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39425f		5b		tcd		                TCD
.394260		28		plp		                PLP
.394261		68		pla		                PLA             ; end setdp macro
.394262		c2 20		rep #$20	                REP #$20        ; set A long
.394264		38		sec		                SEC
.394265		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.394267		e9 02 00	sbc #$0002	                SBC #2
.39426a		85 28		sta $0348	                STA DOS_TEMP
.39426c		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39426e		e9 00 00	sbc #$0000	                SBC #0
.394271		85 2a		sta $034a	                STA DOS_TEMP+2
.394273		e2 10		sep #$10	                SEP #$10        ; set X short
.394275		ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.394278		e0 01		cpx #$01	mult_loop       CPX #1
.39427a		f0 07		beq $394283	                BEQ add_offset
.39427c		06 28		asl $0348	                ASL DOS_TEMP
.39427e		26 28		rol $0348	                ROL DOS_TEMP
.394280		ca		dex		                DEX
.394281		80 f5		bra $394278	                BRA mult_loop
.394283		18		clc		add_offset      CLC
.394284		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.394286		6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.394289		85 02		sta $0322	                STA BIOS_LBA
.39428b		a5 2a		lda $034a	                LDA DOS_TEMP+2
.39428d		6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.394290		85 04		sta $0324	                STA BIOS_LBA+2
.394292		28		plp		                PLP
.394293		2b		pld		                PLD
.394294		ab		plb		                PLB
.394295		6b		rtl		                RTL
.394296						DOS_GETCLUSTER
.394296		8b		phb		                PHB
.394297		0b		phd		                PHD
.394298		08		php		                PHP
.394299		48		pha		                PHA             ; begin setdbr macro
.39429a		08		php		                PHP
.39429b		e2 20		sep #$20	                SEP #$20        ; set A short
.39429d		a9 00		lda #$00	                LDA #0
.39429f		48		pha		                PHA
.3942a0		ab		plb		                PLB
.3942a1		28		plp		                PLP
.3942a2		68		pla		                PLA             ; end setdbr macro
.3942a3		48		pha		                PHA             ; begin setdp macro
.3942a4		08		php		                PHP
.3942a5		c2 20		rep #$20	                REP #$20        ; set A long
.3942a7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3942aa		5b		tcd		                TCD
.3942ab		28		plp		                PLP
.3942ac		68		pla		                PLA             ; end setdp macro
.3942ad		c2 20		rep #$20	                REP #$20        ; set A long
.3942af		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.3942b1		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3942b3		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3942b5		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3942b7		22 4b 42 39	jsl $39424b	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.3942bb		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.3942bf		90 09		bcc $3942ca	                BCC ret_failure
.3942c1						ret_success
.3942c1		e2 20		sep #$20	                SEP #$20        ; set A short
.3942c3		64 0e		stz $032e	                STZ DOS_STATUS
.3942c5		28		plp		                PLP
.3942c6		2b		pld		                PLD
.3942c7		ab		plb		                PLB
.3942c8		38		sec		                SEC
.3942c9		6b		rtl		                RTL
.3942ca						ret_failure
.3942ca		e2 20		sep #$20	                SEP #$20        ; set A short
.3942cc		85 0e		sta $032e	                STA DOS_STATUS
.3942ce		28		plp		                PLP
.3942cf		2b		pld		                PLD
.3942d0		ab		plb		                PLB
.3942d1		18		clc		                CLC
.3942d2		6b		rtl		                RTL
.3942d3						DOS_PUTCLUSTER
.3942d3		8b		phb		                PHB
.3942d4		0b		phd		                PHD
.3942d5		08		php		                PHP
.3942d6		48		pha		                PHA             ; begin setdbr macro
.3942d7		08		php		                PHP
.3942d8		e2 20		sep #$20	                SEP #$20        ; set A short
.3942da		a9 00		lda #$00	                LDA #0
.3942dc		48		pha		                PHA
.3942dd		ab		plb		                PLB
.3942de		28		plp		                PLP
.3942df		68		pla		                PLA             ; end setdbr macro
.3942e0		48		pha		                PHA             ; begin setdp macro
.3942e1		08		php		                PHP
.3942e2		c2 20		rep #$20	                REP #$20        ; set A long
.3942e4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3942e7		5b		tcd		                TCD
.3942e8		28		plp		                PLP
.3942e9		68		pla		                PLA             ; end setdp macro
.3942ea		c2 20		rep #$20	                REP #$20        ; set A long
.3942ec		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.3942ee		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3942f0		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3942f2		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3942f4		22 4b 42 39	jsl $39424b	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.3942f8		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.3942fc		90 09		bcc $394307	                BCC ret_failure
.3942fe						ret_success
.3942fe		e2 20		sep #$20	                SEP #$20        ; set A short
.394300		64 0e		stz $032e	                STZ DOS_STATUS
.394302		28		plp		                PLP
.394303		2b		pld		                PLD
.394304		ab		plb		                PLB
.394305		38		sec		                SEC
.394306		6b		rtl		                RTL
.394307						ret_failure
.394307		e2 20		sep #$20	                SEP #$20        ; set A short
.394309		85 0e		sta $032e	                STA DOS_STATUS
.39430b		28		plp		                PLP
.39430c		2b		pld		                PLD
.39430d		ab		plb		                PLB
.39430e		18		clc		                CLC
.39430f		6b		rtl		                RTL
>394310		40 46 00			DOS_FDC_NAME    .null "@F"
.394313						DOS_FDC_DESC
>394313		10 43 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>394317		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>394318		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>39431c		40 53 00			DOS_SDC_NAME    .null "@S"
.39431f						DOS_SDC_DESC
>39431f		1c 43 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>394323		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>394324		13 43 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>394328		40 48 00			DOS_HDC_NAME    .null "@H"
.39432b						DOS_HD_DESC
>39432b		28 43 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>39432f		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>394330		1f 43 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.394334						DOS_PARSE_DEV
.394334		8b		phb		                PHB
.394335		0b		phd		                PHD
.394336		08		php		                PHP
.394337		48		pha		                PHA             ; begin setdbr macro
.394338		08		php		                PHP
.394339		e2 20		sep #$20	                SEP #$20        ; set A short
.39433b		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39433d		48		pha		                PHA
.39433e		ab		plb		                PLB
.39433f		28		plp		                PLP
.394340		68		pla		                PLA             ; end setdbr macro
.394341		48		pha		                PHA             ; begin setdp macro
.394342		08		php		                PHP
.394343		c2 20		rep #$20	                REP #$20        ; set A long
.394345		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394348		5b		tcd		                TCD
.394349		28		plp		                PLP
.39434a		68		pla		                PLA             ; end setdp macro
.39434b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39434d		af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.394351		85 28		sta $0348	                STA DOS_TEMP
.394353		af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.394357		85 2a		sta $034a	                STA DOS_TEMP+2
.394359		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.39435c		85 48		sta $0368	                STA DOS_STR2_PTR
.39435e		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.394361		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.394363		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.394366		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394368		85 44		sta $0364	                STA DOS_STR1_PTR
.39436a		c8		iny		                INY
.39436b		c8		iny		                INY
.39436c		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39436e		85 46		sta $0366	                STA DOS_STR1_PTR+2
.394370		e2 20		sep #$20	                SEP #$20        ; set A short
.394372		a0 00 00	ldy #$0000	                LDY #0
.394375		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.394377		f0 24		beq $39439d	                BEQ found                   ; If it's NULL, we found a match
.394379		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.39437b		d0 03		bne $394380	                BNE next_device             ; If no match, try to load the next device
.39437d		c8		iny		                INY                         ; Go to the next character
.39437e		80 f5		bra $394375	                BRA cmp_loop
.394380						next_device
.394380		c2 20		rep #$20	                REP #$20        ; set A long
.394382		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.394385		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394387		48		pha		                PHA
.394388		c8		iny		                INY
.394389		c8		iny		                INY
.39438a		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39438c		85 2a		sta $034a	                STA DOS_TEMP+2
.39438e		68		pla		                PLA
.39438f		85 28		sta $0348	                STA DOS_TEMP
.394391		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.394393		d0 ce		bne $394363	                BNE dev_loop                ; No: check this device
.394395		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394397		d0 ca		bne $394363	                BNE dev_loop
.394399		28		plp		done            PLP                         ; Otherwise, return having not found a match
.39439a		2b		pld		                PLD
.39439b		ab		plb		                PLB
.39439c		6b		rtl		                RTL
.39439d		22 ae 43 39	jsl $3943ae	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.3943a1		e2 20		sep #$20	                SEP #$20        ; set A short
.3943a3		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.3943a6		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3943a8		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3943ac		80 eb		bra $394399	                BRA done
.3943ae						DOS_ADJUSTPATH
.3943ae		da		phx		                PHX
.3943af		5a		phy		                PHY
.3943b0		8b		phb		                PHB
.3943b1		0b		phd		                PHD
.3943b2		08		php		                PHP
.3943b3		48		pha		                PHA             ; begin setdbr macro
.3943b4		08		php		                PHP
.3943b5		e2 20		sep #$20	                SEP #$20        ; set A short
.3943b7		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3943b9		48		pha		                PHA
.3943ba		ab		plb		                PLB
.3943bb		28		plp		                PLP
.3943bc		68		pla		                PLA             ; end setdbr macro
.3943bd		48		pha		                PHA             ; begin setdp macro
.3943be		08		php		                PHP
.3943bf		c2 20		rep #$20	                REP #$20        ; set A long
.3943c1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3943c4		5b		tcd		                TCD
.3943c5		28		plp		                PLP
.3943c6		68		pla		                PLA             ; end setdp macro
.3943c7		c2 30		rep #$30	                REP #$30        ; set A&X long
.3943c9		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.3943cb		98		tya		                TYA                             ; Compute the address of the first source byte
.3943cc		18		clc		                CLC
.3943cd		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.3943d0		aa		tax		                TAX
.3943d1		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.3943d4		a8		tay		                TAY
.3943d5		38		sec		                SEC                             ; Compute the number of bytes to copy
.3943d6		a9 00 01	lda #$0100	                LDA #256
.3943d9		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.3943db		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.3943de		28		plp		                PLP
.3943df		2b		pld		                PLD
.3943e0		ab		plb		                PLB
.3943e1		7a		ply		                PLY
.3943e2		fa		plx		                PLX
.3943e3		6b		rtl		                RTL
.3943e4						DOS_PARSE_PATH
.3943e4		8b		phb		                PHB
.3943e5		0b		phd		                PHD
.3943e6		08		php		                PHP
.3943e7		48		pha		                PHA             ; begin setdbr macro
.3943e8		08		php		                PHP
.3943e9		e2 20		sep #$20	                SEP #$20        ; set A short
.3943eb		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3943ed		48		pha		                PHA
.3943ee		ab		plb		                PLB
.3943ef		28		plp		                PLP
.3943f0		68		pla		                PLA             ; end setdbr macro
.3943f1		48		pha		                PHA             ; begin setdp macro
.3943f2		08		php		                PHP
.3943f3		c2 20		rep #$20	                REP #$20        ; set A long
.3943f5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3943f8		5b		tcd		                TCD
.3943f9		28		plp		                PLP
.3943fa		68		pla		                PLA             ; end setdp macro
.3943fb		c2 10		rep #$10	                REP #$10        ; set X long
.3943fd		e2 20		sep #$20	                SEP #$20        ; set A short
.3943ff		a2 00 00	ldx #$0000	                LDX #0
.394402		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.394404		f0 1b		beq $394421	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.394406		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.394408		b0 05		bcs $39440f	                BGE check_case          ; No: check the case
.39440a		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.39440c		82 64 00	brl $394473	                BRL ret_failure
.39440f		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.394411		90 08		bcc $39441b	                BLT next_char
.394413		c9 7b		cmp #$7b	                CMP #'z'+1
.394415		b0 04		bcs $39441b	                BGE next_char
.394417		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.394419		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.39441b		e8		inx		next_char       INX                     ; Move to the next character
.39441c		e0 00 01	cpx #$0100	                CPX #$100
.39441f		d0 e1		bne $394402	                BNE upcase_loop
.394421		22 34 43 39	jsl $394334	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.394425		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.394427		c9 3a		cmp #$3a	                CMP #':'
.394429		d0 07		bne $394432	                BNE clr_name            ; If not colon, treat it as a file name
.39442b		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.39442e		22 ae 43 39	jsl $3943ae	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.394432		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.394435		a9 20		lda #$20	                LDA #' '
.394437		99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.39443a		c8		iny		                INY
.39443b		c0 0b 00	cpy #$000b	                CPY #11
.39443e		d0 f7		bne $394437	                BNE clr_loop
.394440		a2 00 00	ldx #$0000	                LDX #0
.394443		a0 00 00	ldy #$0000	                LDY #0
.394446		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.394448		f0 20		beq $39446a	                BEQ ret_success         ; If NULL: we've finished parsing the path
.39444a		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.39444c		f0 0a		beq $394458	                BEQ cpy_ext             ; And move to the extension
.39444e		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.394451		e8		inx		                INX
.394452		c8		iny		                INY                     ; Move to the next character
.394453		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.394456		d0 ee		bne $394446	                BNE cpy_name_loop       ; No: process this one
.394458		e8		inx		cpy_ext         INX                     ; Skip the dot
.394459		a0 08 00	ldy #$0008	                LDY #8
.39445c		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.39445e		f0 0a		beq $39446a	                BEQ ret_success         ; If it's NULL, we've finished
.394460		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.394463		e8		inx		                INX
.394464		c8		iny		                INY                     ; Move to the next character
.394465		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.394468		d0 f2		bne $39445c	                BNE cpy_ext_loop        ; No: process this one
.39446a						ret_success
.39446a		e2 20		sep #$20	                SEP #$20        ; set A short
.39446c		64 0e		stz $032e	                STZ DOS_STATUS
.39446e		28		plp		                PLP
.39446f		2b		pld		                PLD
.394470		ab		plb		                PLB
.394471		38		sec		                SEC
.394472		6b		rtl		                RTL
.394473						ret_failure
.394473		e2 20		sep #$20	                SEP #$20        ; set A short
.394475		85 0e		sta $032e	                STA DOS_STATUS
.394477		28		plp		                PLP
.394478		2b		pld		                PLD
.394479		ab		plb		                PLB
.39447a		18		clc		                CLC
.39447b		6b		rtl		                RTL
.39447c						DOS_FINDFILE
.39447c		8b		phb		                PHB
.39447d		0b		phd		                PHD
.39447e		08		php		                PHP
.39447f		48		pha		                PHA             ; begin setdbr macro
.394480		08		php		                PHP
.394481		e2 20		sep #$20	                SEP #$20        ; set A short
.394483		a9 00		lda #$00	                LDA #0
.394485		48		pha		                PHA
.394486		ab		plb		                PLB
.394487		28		plp		                PLP
.394488		68		pla		                PLA             ; end setdbr macro
.394489		48		pha		                PHA             ; begin setdp macro
.39448a		08		php		                PHP
.39448b		c2 20		rep #$20	                REP #$20        ; set A long
.39448d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394490		5b		tcd		                TCD
.394491		28		plp		                PLP
.394492		68		pla		                PLA             ; end setdp macro
.394493		c2 30		rep #$30	                REP #$30        ; set A&X long
.394495		22 e4 43 39	jsl $3943e4	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.394499		b0 05		bcs $3944a0	                BCS mount                       ; If success: try to open the directory
.39449b		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.39449c		2b		pld		                PLD
.39449d		ab		plb		                PLB
.39449e		18		clc		                CLC
.39449f		6b		rtl		                RTL
.3944a0		22 fe 3f 39	jsl $393ffe	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.3944a4		b0 07		bcs $3944ad	                BCS get_directory
.3944a6		e2 20		sep #$20	                SEP #$20        ; set A short
.3944a8		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.3944aa		82 56 00	brl $394503	                BRL ret_failure
.3944ad						get_directory
.3944ad		c2 20		rep #$20	                REP #$20        ; set A long
.3944af		22 b3 3c 39	jsl $393cb3	                JSL DOS_DIROPEN                 ; Get the directory
.3944b3		b0 07		bcs $3944bc	                BCS scan_entries                ; If success: start scanning the directory entries
.3944b5		e2 20		sep #$20	                SEP #$20        ; set A short
.3944b7		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.3944b9		82 47 00	brl $394503	                BRL ret_failure
.3944bc		22 32 3d 39	jsl $393d32	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.3944c0						scan_loop
.3944c0		e2 20		sep #$20	                SEP #$20        ; set A short
.3944c2		a0 00 00	ldy #$0000	                LDY #0
.3944c5		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.3944c7		d0 05		bne $3944ce	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.3944c9		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.3944cb		82 35 00	brl $394503	                BRL ret_failure
.3944ce		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.3944d0		f0 26		beq $3944f8	                BEQ next_entry                  ; Go to the next entry
.3944d2		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.3944d5		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3944d7		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.3944d9		d0 1d		bne $3944f8	                BNE next_entry                  ; Yes: skip it!
.3944db		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.3944dd		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.3944df		f0 17		beq $3944f8	                BEQ next_entry                  ; Yes: skip it!
.3944e1		a2 00 00	ldx #$0000	                LDX #0
.3944e4		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.3944e7		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.3944e9		df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.3944ed		d0 09		bne $3944f8	                BNE next_entry                  ; If not equal: try the next entry
.3944ef		c8		iny		                INY                             ; Advance to the next character
.3944f0		e8		inx		                INX
.3944f1		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.3944f4		f0 16		beq $39450c	                BEQ match                       ; Yes: we have a match!
.3944f6		80 ef		bra $3944e7	                BRA scan_cmp_loop               ; No: keep checking
.3944f8		22 4d 3d 39	jsl $393d4d	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.3944fc		90 05		bcc $394503	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.3944fe		82 bf ff	brl $3944c0	                BRL scan_loop                   ; If found: keep scanning
.394501		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.394503						ret_failure
.394503		e2 20		sep #$20	                SEP #$20        ; set A short
.394505		85 0e		sta $032e	                STA DOS_STATUS
.394507		28		plp		                PLP
.394508		2b		pld		                PLD
.394509		ab		plb		                PLB
.39450a		18		clc		                CLC
.39450b		6b		rtl		                RTL
.39450c						match
.39450c		c2 20		rep #$20	                REP #$20        ; set A long
.39450e		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.394511		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394513		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.394515		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394518		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39451a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39451c						ret_success
.39451c		e2 20		sep #$20	                SEP #$20        ; set A short
.39451e		64 0e		stz $032e	                STZ DOS_STATUS
.394520		28		plp		                PLP
.394521		2b		pld		                PLD
.394522		ab		plb		                PLB
.394523		38		sec		                SEC
.394524		6b		rtl		                RTL
.394525						DOS_READFILE
.394525		8b		phb		                PHB
.394526		0b		phd		                PHD
.394527		08		php		                PHP
.394528		48		pha		                PHA             ; begin setdbr macro
.394529		08		php		                PHP
.39452a		e2 20		sep #$20	                SEP #$20        ; set A short
.39452c		a9 00		lda #$00	                LDA #0
.39452e		48		pha		                PHA
.39452f		ab		plb		                PLB
.394530		28		plp		                PLP
.394531		68		pla		                PLA             ; end setdbr macro
.394532		48		pha		                PHA             ; begin setdp macro
.394533		08		php		                PHP
.394534		c2 20		rep #$20	                REP #$20        ; set A long
.394536		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394539		5b		tcd		                TCD
.39453a		28		plp		                PLP
.39453b		68		pla		                PLA             ; end setdp macro
.39453c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39453e		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394540		48		pha		                PHA
.394541		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.394543		48		pha		                PHA
.394544		22 7c 44 39	jsl $39447c	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.394548		68		pla		                PLA
.394549		85 1c		sta $033c	                STA DOS_BUFF_PTR
.39454b		68		pla		                PLA
.39454c		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39454e		90 0f		bcc $39455f	                BCC pass_failure                    ; If found: try to load the cluster
.394550		22 96 42 39	jsl $394296	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.394554		90 09		bcc $39455f	                BCC pass_failure                    ; If there's an error... pass it up the chain
.394556						ret_success
.394556		e2 20		sep #$20	                SEP #$20        ; set A short
.394558		64 0e		stz $032e	                STZ DOS_STATUS
.39455a		28		plp		                PLP
.39455b		2b		pld		                PLD
.39455c		ab		plb		                PLB
.39455d		38		sec		                SEC
.39455e		6b		rtl		                RTL
.39455f		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.394560		2b		pld		                PLD
.394561		ab		plb		                PLB
.394562		18		clc		                CLC
.394563		6b		rtl		                RTL
.394564						ENTRYFORCLUS12
.394564		8b		phb		                PHB
.394565		0b		phd		                PHD
.394566		08		php		                PHP
.394567		48		pha		                PHA             ; begin setdbr macro
.394568		08		php		                PHP
.394569		e2 20		sep #$20	                SEP #$20        ; set A short
.39456b		a9 00		lda #$00	                LDA #0
.39456d		48		pha		                PHA
.39456e		ab		plb		                PLB
.39456f		28		plp		                PLP
.394570		68		pla		                PLA             ; end setdbr macro
.394571		48		pha		                PHA             ; begin setdp macro
.394572		08		php		                PHP
.394573		c2 20		rep #$20	                REP #$20        ; set A long
.394575		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394578		5b		tcd		                TCD
.394579		28		plp		                PLP
.39457a		68		pla		                PLA             ; end setdp macro
.39457b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39457d		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.39457f		0a		asl a		                ASL A
.394580		85 28		sta $0348	                STA DOS_TEMP
.394582		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394584		2a		rol a		                ROL A
.394585		85 2a		sta $034a	                STA DOS_TEMP+2
.394587		18		clc		                CLC
.394588		a5 10		lda $0330	                LDA DOS_CLUS_ID
.39458a		65 28		adc $0348	                ADC DOS_TEMP
.39458c		85 28		sta $0348	                STA DOS_TEMP
.39458e		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394590		65 2a		adc $034a	                ADC DOS_TEMP+2
.394592		85 2a		sta $034a	                STA DOS_TEMP+2
.394594		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.394596		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.394598		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.39459a		29 ff 03	and #$03ff	                AND #$003FF
.39459d		aa		tax		                TAX
.39459e		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3945a0		66 28		ror $0348	                ROR DOS_TEMP
.3945a2		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3945a4		66 28		ror $0348	                ROR DOS_TEMP
.3945a6		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3945a8		66 28		ror $0348	                ROR DOS_TEMP
.3945aa		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3945ac		66 28		ror $0348	                ROR DOS_TEMP
.3945ae		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3945b0		66 28		ror $0348	                ROR DOS_TEMP
.3945b2		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3945b4		66 28		ror $0348	                ROR DOS_TEMP
.3945b6		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3945b8		66 28		ror $0348	                ROR DOS_TEMP
.3945ba		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3945bc		66 28		ror $0348	                ROR DOS_TEMP
.3945be		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3945c0		66 28		ror $0348	                ROR DOS_TEMP
.3945c2		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.3945c3		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.3945c7		65 28		adc $0348	                ADC DOS_TEMP
.3945c9		85 24		sta $0344	                STA DOS_FAT_LBA
.3945cb		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.3945cf		65 2a		adc $034a	                ADC DOS_TEMP+2
.3945d1		85 26		sta $0346	                STA DOS_FAT_LBA+2
.3945d3		28		plp		                PLP
.3945d4		2b		pld		                PLD
.3945d5		ab		plb		                PLB
.3945d6		6b		rtl		                RTL
.3945d7						FATFORCLUSTER12
.3945d7		8b		phb		                PHB
.3945d8		0b		phd		                PHD
.3945d9		08		php		                PHP
.3945da		48		pha		                PHA             ; begin setdbr macro
.3945db		08		php		                PHP
.3945dc		e2 20		sep #$20	                SEP #$20        ; set A short
.3945de		a9 00		lda #$00	                LDA #0
.3945e0		48		pha		                PHA
.3945e1		ab		plb		                PLB
.3945e2		28		plp		                PLP
.3945e3		68		pla		                PLA             ; end setdbr macro
.3945e4		48		pha		                PHA             ; begin setdp macro
.3945e5		08		php		                PHP
.3945e6		c2 20		rep #$20	                REP #$20        ; set A long
.3945e8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3945eb		5b		tcd		                TCD
.3945ec		28		plp		                PLP
.3945ed		68		pla		                PLA             ; end setdp macro
.3945ee		c2 30		rep #$30	                REP #$30        ; set A&X long
.3945f0		a2 00 00	ldx #$0000	                LDX #0
.3945f3		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.3945f6		8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.3945fa		e8		inx		                INX
.3945fb		e8		inx		                INX
.3945fc		e0 00 04	cpx #$0400	                CPX #1024
.3945ff		d0 f5		bne $3945f6	                BNE clr_loop
.394601		22 64 45 39	jsl $394564	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.394605		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.394607		85 02		sta $0322	                STA BIOS_LBA
.394609		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.39460b		85 04		sta $0324	                STA BIOS_LBA+2
.39460d		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.394610		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394612		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394615		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394617		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.39461b		90 17		bcc $394634	                BCC error
.39461d		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.39461f		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.394622		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394624		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394627		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394629		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.39462d		90 05		bcc $394634	                BCC error
.39462f		28		plp		                PLP
.394630		2b		pld		                PLD
.394631		ab		plb		                PLB
.394632		38		sec		                SEC
.394633		6b		rtl		                RTL
.394634						error
.394634		e2 20		sep #$20	                SEP #$20        ; set A short
.394636		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394638		85 0e		sta $032e	                STA DOS_STATUS
.39463a		28		plp		                PLP
.39463b		2b		pld		                PLD
.39463c		ab		plb		                PLB
.39463d		18		clc		                CLC
.39463e		6b		rtl		                RTL
.39463f						FATFORCLUSTER32
.39463f		8b		phb		                PHB
.394640		0b		phd		                PHD
.394641		48		pha		                PHA             ; begin setdbr macro
.394642		08		php		                PHP
.394643		e2 20		sep #$20	                SEP #$20        ; set A short
.394645		a9 00		lda #$00	                LDA #0
.394647		48		pha		                PHA
.394648		ab		plb		                PLB
.394649		28		plp		                PLP
.39464a		68		pla		                PLA             ; end setdbr macro
.39464b		48		pha		                PHA             ; begin setdp macro
.39464c		08		php		                PHP
.39464d		c2 20		rep #$20	                REP #$20        ; set A long
.39464f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394652		5b		tcd		                TCD
.394653		28		plp		                PLP
.394654		68		pla		                PLA             ; end setdp macro
.394655		c2 30		rep #$30	                REP #$30        ; set A&X long
.394657		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394659		85 24		sta $0344	                STA DOS_FAT_LBA
.39465b		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39465d		85 26		sta $0346	                STA DOS_FAT_LBA+2
.39465f		a2 07 00	ldx #$0007	                LDX #7
.394662		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.394664		66 24		ror $0344	                ROR DOS_FAT_LBA
.394666		ca		dex		                DEX
.394667		d0 f9		bne $394662	                BNE div_loop
.394669		18		clc		                CLC
.39466a		a5 24		lda $0344	                LDA DOS_FAT_LBA
.39466c		6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.394670		85 24		sta $0344	                STA DOS_FAT_LBA
.394672		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394674		6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394678		85 26		sta $0346	                STA DOS_FAT_LBA+2
.39467a		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.39467c		85 02		sta $0322	                STA BIOS_LBA
.39467e		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394680		85 04		sta $0324	                STA BIOS_LBA+2
.394682		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.394685		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394687		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.39468a		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39468c		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.394690		b0 06		bcs $394698	                BCS find_entry
.394692		e2 20		sep #$20	                SEP #$20        ; set A short
.394694		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394696		80 0e		bra $3946a6	                BRA ret_failure
.394698						find_entry
.394698		c2 20		rep #$20	                REP #$20        ; set A long
.39469a		a5 10		lda $0330	                LDA DOS_CLUS_ID
.39469c		0a		asl a		                ASL A
.39469d		0a		asl a		                ASL A                           ; * 4
.39469e		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.3946a1		aa		tax		                TAX                             ; X should be the offset within the sector
.3946a2		2b		pld		ret_success     PLD
.3946a3		ab		plb		                PLB
.3946a4		38		sec		                SEC                             ; return success
.3946a5		6b		rtl		                RTL
.3946a6		2b		pld		ret_failure     PLD
.3946a7		ab		plb		                PLB
.3946a8		18		clc		                CLC                             ; Return failure
.3946a9		6b		rtl		                RTL
.3946aa						NEXTCLUSTER
.3946aa		08		php		                PHP
.3946ab		e2 20		sep #$20	                SEP #$20        ; set A short
.3946ad		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.3946b1		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.3946b3		d0 08		bne $3946bd	                BNE fat32                       ; No: assume it's FAT32
.3946b5		22 cb 46 39	jsl $3946cb	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.3946b9		90 0d		bcc $3946c8	                BCC pass_failure                ; If there was an error, pass it up the chain
.3946bb		80 06		bra $3946c3	                BRA ret_success
.3946bd		22 33 47 39	jsl $394733	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.3946c1		90 05		bcc $3946c8	                BCC pass_failure                ; If there was an error, pass it up the chain
.3946c3		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.3946c5		28		plp		                PLP
.3946c6		38		sec		                SEC
.3946c7		6b		rtl		                RTL
.3946c8		28		plp		pass_failure    PLP
.3946c9		18		clc		                CLC
.3946ca		6b		rtl		                RTL
.3946cb						NEXTCLUSTER12
.3946cb		8b		phb		                    PHB
.3946cc		0b		phd		                    PHD
.3946cd		08		php		                    PHP
.3946ce		48		pha		                PHA             ; begin setdbr macro
.3946cf		08		php		                PHP
.3946d0		e2 20		sep #$20	                SEP #$20        ; set A short
.3946d2		a9 00		lda #$00	                LDA #0
.3946d4		48		pha		                PHA
.3946d5		ab		plb		                PLB
.3946d6		28		plp		                PLP
.3946d7		68		pla		                PLA             ; end setdbr macro
.3946d8		48		pha		                PHA             ; begin setdp macro
.3946d9		08		php		                PHP
.3946da		c2 20		rep #$20	                REP #$20        ; set A long
.3946dc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3946df		5b		tcd		                TCD
.3946e0		28		plp		                PLP
.3946e1		68		pla		                PLA             ; end setdp macro
.3946e2		c2 30		rep #$30	                REP #$30        ; set A&X long
.3946e4		22 d7 45 39	jsl $3945d7	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.3946e8		b0 03		bcs $3946ed	                    BCS chk_clus_id
.3946ea		82 41 00	brl $39472e	                    BRL pass_failure
.3946ed		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.3946ef		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.3946f2		d0 0d		bne $394701	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.3946f4						is_even
.3946f4		c2 20		rep #$20	                REP #$20        ; set A long
.3946f6		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.3946fa		29 ff 0f	and #$0fff	                    AND #$0FFF
.3946fd		85 28		sta $0348	                    STA DOS_TEMP
.3946ff		80 0c		bra $39470d	                    BRA check_id
.394701						is_odd
.394701		c2 20		rep #$20	                REP #$20        ; set A long
.394703		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394707		4a		lsr a		                    LSR A
.394708		4a		lsr a		                    LSR A
.394709		4a		lsr a		                    LSR A
.39470a		4a		lsr a		                    LSR A
.39470b		85 28		sta $0348	                    STA DOS_TEMP
.39470d						check_id
.39470d		c2 20		rep #$20	                REP #$20        ; set A long
.39470f		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.394711		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394714		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.394717		f0 0f		beq $394728	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.394719		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.39471b		85 10		sta $0330	                    STA DOS_CLUS_ID
.39471d		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.39471f						ret_success
.39471f		e2 20		sep #$20	                SEP #$20        ; set A short
.394721		64 0e		stz $032e	                    STZ DOS_STATUS
.394723		28		plp		                    PLP
.394724		2b		pld		                    PLD
.394725		ab		plb		                    PLB
.394726		38		sec		                    SEC
.394727		6b		rtl		                    RTL
.394728						no_more
.394728		e2 20		sep #$20	                SEP #$20        ; set A short
.39472a		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.39472c		85 0e		sta $032e	                    STA DOS_STATUS
.39472e		28		plp		pass_failure        PLP
.39472f		2b		pld		                    PLD
.394730		ab		plb		                    PLB
.394731		18		clc		                    CLC
.394732		6b		rtl		                    RTL
.394733						NEXTCLUSTER32
.394733		8b		phb		                PHB
.394734		0b		phd		                PHD
.394735		08		php		                PHP
.394736		48		pha		                PHA             ; begin setdbr macro
.394737		08		php		                PHP
.394738		e2 20		sep #$20	                SEP #$20        ; set A short
.39473a		a9 00		lda #$00	                LDA #0
.39473c		48		pha		                PHA
.39473d		ab		plb		                PLB
.39473e		28		plp		                PLP
.39473f		68		pla		                PLA             ; end setdbr macro
.394740		48		pha		                PHA             ; begin setdp macro
.394741		08		php		                PHP
.394742		c2 20		rep #$20	                REP #$20        ; set A long
.394744		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394747		5b		tcd		                TCD
.394748		28		plp		                PLP
.394749		68		pla		                PLA             ; end setdp macro
.39474a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39474c		22 3f 46 39	jsl $39463f	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.394750		90 53		bcc $3947a5	                BCC ret_failure                 ; If it did not work, return the error
.394752		e2 20		sep #$20	                SEP #$20        ; set A short
.394754		bf 00 a5 38	lda $38a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.394758		85 28		sta $0348	                STA DOS_TEMP
.39475a		bf 01 a5 38	lda $38a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.39475e		85 29		sta $0349	                STA DOS_TEMP+1
.394760		bf 02 a5 38	lda $38a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.394764		85 2a		sta $034a	                STA DOS_TEMP+2
.394766		bf 03 a5 38	lda $38a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.39476a		85 2b		sta $034b	                STA DOS_TEMP+3
.39476c		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.39476e		c9 ff		cmp #$ff	                CMP #$FF
.394770		d0 18		bne $39478a	                BNE found_next
.394772		a5 29		lda $0349	                LDA DOS_TEMP+1
.394774		c9 ff		cmp #$ff	                CMP #$FF
.394776		d0 12		bne $39478a	                BNE found_next
.394778		a5 2a		lda $034a	                LDA DOS_TEMP+2
.39477a		c9 ff		cmp #$ff	                CMP #$FF
.39477c		d0 0c		bne $39478a	                BNE found_next
.39477e		a5 2b		lda $034b	                LDA DOS_TEMP+3
.394780		c9 0f		cmp #$0f	                CMP #$0F
.394782		d0 06		bne $39478a	                BNE found_next                  ; No: return this cluster as the next
.394784		e2 20		sep #$20	                SEP #$20        ; set A short
.394786		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.394788		80 1b		bra $3947a5	                BRA ret_failure
.39478a						found_next
.39478a		e2 20		sep #$20	                SEP #$20        ; set A short
.39478c		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.39478e		85 10		sta $0330	                STA DOS_CLUS_ID
.394790		a5 29		lda $0349	                LDA DOS_TEMP+1
.394792		85 11		sta $0331	                STA DOS_CLUS_ID+1
.394794		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394796		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394798		a5 2b		lda $034b	                LDA DOS_TEMP+3
.39479a		85 13		sta $0333	                STA DOS_CLUS_ID+3
.39479c						ret_success
.39479c		e2 20		sep #$20	                SEP #$20        ; set A short
.39479e		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.3947a0		28		plp		                PLP
.3947a1		2b		pld		                PLD
.3947a2		ab		plb		                PLB
.3947a3		38		sec		                SEC
.3947a4		6b		rtl		                RTL
.3947a5						ret_failure
.3947a5		e2 20		sep #$20	                SEP #$20        ; set A short
.3947a7		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.3947a9		28		plp		                PLP
.3947aa		2b		pld		                PLD
.3947ab		ab		plb		                PLB
.3947ac		18		clc		                CLC
.3947ad		6b		rtl		                RTL
.3947ae						DOS_READNEXT
.3947ae		08		php		                PHP
.3947af		c2 30		rep #$30	                REP #$30        ; set A&X long
.3947b1		22 aa 46 39	jsl $3946aa	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.3947b5		90 09		bcc $3947c0	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.3947b7		22 96 42 39	jsl $394296	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.3947bb		90 03		bcc $3947c0	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.3947bd		28		plp		ret_success     PLP
.3947be		38		sec		                SEC
.3947bf		6b		rtl		                RTL
.3947c0		28		plp		pass_failure    PLP
.3947c1		18		clc		                CLC
.3947c2		6b		rtl		                RTL
.3947c3						DOS_FREECLUS
.3947c3		08		php		                PHP
.3947c4		48		pha		                PHA             ; begin setdp macro
.3947c5		08		php		                PHP
.3947c6		c2 20		rep #$20	                REP #$20        ; set A long
.3947c8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947cb		5b		tcd		                TCD
.3947cc		28		plp		                PLP
.3947cd		68		pla		                PLA             ; end setdp macro
.3947ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3947d0		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.3947d4		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.3947d6		d0 08		bne $3947e0	                BNE fat32                       ; No: assume it's FAT32
.3947d8		22 54 48 39	jsl $394854	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.3947dc		90 0d		bcc $3947eb	                BCC pass_failure                ; If there was an error, pass it up the chain
.3947de		80 06		bra $3947e6	                BRA ret_success
.3947e0		22 2c 49 39	jsl $39492c	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.3947e4		90 05		bcc $3947eb	                BCC pass_failure                ; If there was an error, pass it up the chain
.3947e6		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.3947e8		28		plp		                PLP
.3947e9		38		sec		                SEC
.3947ea		6b		rtl		                RTL
.3947eb		28		plp		pass_failure    PLP
.3947ec		18		clc		                CLC
.3947ed		6b		rtl		                RTL
.3947ee						FDC_READ2FAT12
.3947ee		8b		phb		                    PHB
.3947ef		0b		phd		                    PHD
.3947f0		08		php		                    PHP
.3947f1		48		pha		                PHA             ; begin setdbr macro
.3947f2		08		php		                PHP
.3947f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3947f5		a9 00		lda #$00	                LDA #0
.3947f7		48		pha		                PHA
.3947f8		ab		plb		                PLB
.3947f9		28		plp		                PLP
.3947fa		68		pla		                PLA             ; end setdbr macro
.3947fb		48		pha		                PHA             ; begin setdp macro
.3947fc		08		php		                PHP
.3947fd		c2 20		rep #$20	                REP #$20        ; set A long
.3947ff		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394802		5b		tcd		                TCD
.394803		28		plp		                PLP
.394804		68		pla		                PLA             ; end setdp macro
.394805		c2 30		rep #$30	                REP #$30        ; set A&X long
.394807		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.39480a		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.39480c		a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.39480f		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394811		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394813		85 02		sta $0322	                    STA BIOS_LBA
.394815		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394817		85 04		sta $0324	                    STA BIOS_LBA+2
.394819		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.39481d		b0 07		bcs $394826	                    BCS inc_sect2                   ; If success: start getting the second sector
.39481f		e2 20		sep #$20	                SEP #$20        ; set A short
.394821		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394823		82 1c 00	brl $394842	                    BRL ret_failure
.394826						inc_sect2
.394826		c2 20		rep #$20	                REP #$20        ; set A long
.394828		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.39482a		d0 02		bne $39482e	                    BNE inc_buff_ptr
.39482c		e6 04		inc $0324	                    INC BIOS_LBA+2
.39482e		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394831		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394833		a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394836		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394838		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.39483c		b0 0d		bcs $39484b	                    BCS ret_success                 ; If success, return success
.39483e		e2 20		sep #$20	                SEP #$20        ; set A short
.394840		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394842						ret_failure
.394842		e2 20		sep #$20	                SEP #$20        ; set A short
.394844		85 00		sta $0320	                    STA BIOS_STATUS
.394846		28		plp		                    PLP
.394847		2b		pld		                    PLD
.394848		ab		plb		                    PLB
.394849		18		clc		                    CLC
.39484a		6b		rtl		                    RTL
.39484b						ret_success
.39484b		e2 20		sep #$20	                SEP #$20        ; set A short
.39484d		64 00		stz $0320	                    STZ BIOS_STATUS
.39484f		28		plp		                    PLP
.394850		2b		pld		                    PLD
.394851		ab		plb		                    PLB
.394852		38		sec		                    SEC
.394853		6b		rtl		                    RTL
.394854						DOS_FREECLUS12
.394854		da		phx		                PHX
.394855		8b		phb		                PHB
.394856		0b		phd		                PHD
.394857		08		php		                PHP
.394858		48		pha		                PHA             ; begin setdbr macro
.394859		08		php		                PHP
.39485a		e2 20		sep #$20	                SEP #$20        ; set A short
.39485c		a9 00		lda #$00	                LDA #0
.39485e		48		pha		                PHA
.39485f		ab		plb		                PLB
.394860		28		plp		                PLP
.394861		68		pla		                PLA             ; end setdbr macro
.394862		48		pha		                PHA             ; begin setdp macro
.394863		08		php		                PHP
.394864		c2 20		rep #$20	                REP #$20        ; set A long
.394866		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394869		5b		tcd		                TCD
.39486a		28		plp		                PLP
.39486b		68		pla		                PLA             ; end setdp macro
.39486c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39486e		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.394871		85 10		sta $0330	                STA DOS_CLUS_ID
.394873		a9 00 00	lda #$0000	                LDA #0
.394876		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394878		22 64 45 39	jsl $394564	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.39487c		22 ee 47 39	jsl $3947ee	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394880		b0 07		bcs $394889	                BCS start_of_fat                ; If success, move X to the start of the FAT
.394882		e2 20		sep #$20	                SEP #$20        ; set A short
.394884		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394886		82 99 00	brl $394922	                BRL ret_failure
.394889						start_of_fat
.394889		c2 30		rep #$30	                REP #$30        ; set A&X long
.39488b		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.39488d		89 01 00	bit #$0001	                BIT #1
.394890		d0 09		bne $39489b	                BNE is_odd
.394892		bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.394896		29 ff 0f	and #$0fff	                AND #$0FFF
.394899		80 08		bra $3948a3	                BRA chk_available
.39489b		bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.39489f		4a		lsr a		                LSR A
.3948a0		4a		lsr a		                LSR A
.3948a1		4a		lsr a		                LSR A
.3948a2		4a		lsr a		                LSR A
.3948a3						chk_available
.3948a3		85 28		sta $0348	                STA DOS_TEMP
.3948a5		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.3948a8		f0 03		beq $3948ad	                BEQ chk_found
.3948aa		82 39 00	brl $3948e6	                BRL next_cluster                ; No: advance to the next cluster
.3948ad		8a		txa		chk_found       TXA
.3948ae		85 2a		sta $034a	                STA DOS_TEMP+2
.3948b0		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.3948b2		89 01 00	bit #$0001	                BIT #1
.3948b5		d0 0d		bne $3948c4	                BNE is_odd2
.3948b7						is_even2
.3948b7		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.3948bb		09 ff 0f	ora #$0fff	                ORA #$0FFF
.3948be		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.3948c2		80 0b		bra $3948cf	                BRA write_fat
.3948c4						is_odd2
.3948c4		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.3948c8		09 f0 ff	ora #$fff0	                ORA #$FFF0
.3948cb		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.3948cf		22 f6 49 39	jsl $3949f6	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.3948d3		b0 07		bcs $3948dc	                BCS ret_success                 ; If success: return success
.3948d5		e2 20		sep #$20	                SEP #$20        ; set A short
.3948d7		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.3948d9		82 46 00	brl $394922	                BRL ret_failure
.3948dc						ret_success
.3948dc		e2 20		sep #$20	                SEP #$20        ; set A short
.3948de		64 0e		stz $032e	                STZ DOS_STATUS
.3948e0		28		plp		                PLP
.3948e1		2b		pld		                PLD
.3948e2		ab		plb		                PLB
.3948e3		fa		plx		                PLX
.3948e4		38		sec		                SEC
.3948e5		6b		rtl		                RTL
.3948e6						next_cluster
.3948e6		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.3948e8		d0 02		bne $3948ec	                BNE calc_entry
.3948ea		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.3948ec		22 64 45 39	jsl $394564	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.3948f0		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.3948f3		f0 03		beq $3948f8	                BEQ chk_end_of_fat
.3948f5		82 93 ff	brl $39488b	                BRL chk_cluster                 ; No: go back and check it too
.3948f8						chk_end_of_fat
.3948f8		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.3948fa		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.3948fe		d0 0f		bne $39490f	                BNE next_2
.394900		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394902		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394906		d0 07		bne $39490f	                BNE next_2                      ; No: get the next to sectors
.394908		e2 20		sep #$20	                SEP #$20        ; set A short
.39490a		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.39490c		82 13 00	brl $394922	                BRL ret_failure
.39490f						next_2
.39490f		22 ee 47 39	jsl $3947ee	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394913		90 06		bcc $39491b	                BCC fat_fail                    ; If failed: return error
.394915		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394918		82 70 ff	brl $39488b	                BRL chk_cluster                 ; And start checking from there
.39491b						fat_fail
.39491b		e2 20		sep #$20	                SEP #$20        ; set A short
.39491d		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.39491f		82 00 00	brl $394922	                BRL ret_failure
.394922						ret_failure
.394922		e2 20		sep #$20	                SEP #$20        ; set A short
.394924		85 0e		sta $032e	                STA DOS_STATUS
.394926		28		plp		                PLP
.394927		2b		pld		                PLD
.394928		ab		plb		                PLB
.394929		fa		plx		                PLX
.39492a		18		clc		                CLC
.39492b		6b		rtl		                RTL
.39492c						DOS_FREECLUS32
.39492c		8b		phb		                PHB
.39492d		0b		phd		                PHD
.39492e		08		php		                PHP
.39492f		48		pha		                PHA             ; begin setdbr macro
.394930		08		php		                PHP
.394931		e2 20		sep #$20	                SEP #$20        ; set A short
.394933		a9 00		lda #$00	                LDA #0
.394935		48		pha		                PHA
.394936		ab		plb		                PLB
.394937		28		plp		                PLP
.394938		68		pla		                PLA             ; end setdbr macro
.394939		48		pha		                PHA             ; begin setdp macro
.39493a		08		php		                PHP
.39493b		c2 20		rep #$20	                REP #$20        ; set A long
.39493d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394940		5b		tcd		                TCD
.394941		28		plp		                PLP
.394942		68		pla		                PLA             ; end setdp macro
.394943		c2 30		rep #$30	                REP #$30        ; set A&X long
.394945		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394948		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39494a		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39494d		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39494f		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394953		85 02		sta $0322	                STA BIOS_LBA
.394955		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394959		85 04		sta $0324	                STA BIOS_LBA+2
.39495b		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.39495f		b0 07		bcs $394968	                BCS initial_entry               ; If OK: set the initial entry to check
.394961		e2 20		sep #$20	                SEP #$20        ; set A short
.394963		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394965		82 6b 00	brl $3949d3	                BRL ret_failure
.394968						initial_entry
.394968		c2 20		rep #$20	                REP #$20        ; set A long
.39496a		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.39496d		85 10		sta $0330	                STA DOS_CLUS_ID
.39496f		a9 00 00	lda #$0000	                LDA #0
.394972		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394974		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394977		bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.39497b		d0 06		bne $394983	                BNE next_entry                  ; No: move to the next entry
.39497d		bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.394981		f0 36		beq $3949b9	                BEQ found_free                  ; Yes: go to allocate and return it
.394983		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394985		d0 02		bne $394989	                BNE inc_ptr
.394987		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394989		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.39498a		e8		inx		                INX
.39498b		e8		inx		                INX
.39498c		e8		inx		                INX
.39498d		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394990		90 e5		bcc $394977	                BLT chk_entry                   ; No: check this entry
.394992		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394994		d0 18		bne $3949ae	                BNE get_block
.394996		e6 04		inc $0324	                INC BIOS_LBA+2
.394998		a5 04		lda $0324	                LDA BIOS_LBA+2
.39499a		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.39499e		90 0e		bcc $3949ae	                BLT get_block
.3949a0		a5 02		lda $0322	                LDA BIOS_LBA
.3949a2		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA
.3949a6		90 06		bcc $3949ae	                BLT get_block
.3949a8		e2 20		sep #$20	                SEP #$20        ; set A short
.3949aa		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.3949ac		80 25		bra $3949d3	                BRA ret_failure
.3949ae		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.3949b2		90 1b		bcc $3949cf	                BCC ret_fat_error               ; If error: throw a FAT error
.3949b4		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.3949b7		80 be		bra $394977	                BRA chk_entry                   ; Check this entry
.3949b9						found_free
.3949b9		c2 20		rep #$20	                REP #$20        ; set A long
.3949bb		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.3949be		9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.3949c2		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.3949c5		9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.3949c9		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.3949cd		b0 0d		bcs $3949dc	                BCS ret_success                 ; If OK: return success
.3949cf						ret_fat_error
.3949cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3949d1		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.3949d3						ret_failure
.3949d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3949d5		85 0e		sta $032e	                STA DOS_STATUS
.3949d7		28		plp		                PLP
.3949d8		2b		pld		                PLD
.3949d9		ab		plb		                PLB
.3949da		18		clc		                CLC
.3949db		6b		rtl		                RTL
.3949dc						ret_success
.3949dc		e2 20		sep #$20	                SEP #$20        ; set A short
.3949de		64 0e		stz $032e	                STZ DOS_STATUS
.3949e0		28		plp		                PLP
.3949e1		2b		pld		                PLD
.3949e2		ab		plb		                PLB
.3949e3		38		sec		                SEC
.3949e4		6b		rtl		                RTL
.3949e5						DELCLUSTER
.3949e5		e2 20		sep #$20	                SEP #$20        ; set A short
.3949e7		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.3949eb		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.3949ed		d0 04		bne $3949f3	                BNE fat32                       ; No: assume it's FAT32
.3949ef		5c 3d 4a 39	jmp $394a3d	fat12           JML DELCLUSTER12
.3949f3		4c 8b 4a	jmp $394a8b	fat32           JMP DELCLUSTER32
.3949f6						WRITEFAT12
.3949f6		8b		phb		                PHB
.3949f7		0b		phd		                PHD
.3949f8		48		pha		                PHA             ; begin setdbr macro
.3949f9		08		php		                PHP
.3949fa		e2 20		sep #$20	                SEP #$20        ; set A short
.3949fc		a9 00		lda #$00	                LDA #0
.3949fe		48		pha		                PHA
.3949ff		ab		plb		                PLB
.394a00		28		plp		                PLP
.394a01		68		pla		                PLA             ; end setdbr macro
.394a02		48		pha		                PHA             ; begin setdp macro
.394a03		08		php		                PHP
.394a04		c2 20		rep #$20	                REP #$20        ; set A long
.394a06		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a09		5b		tcd		                TCD
.394a0a		28		plp		                PLP
.394a0b		68		pla		                PLA             ; end setdp macro
.394a0c		c2 30		rep #$30	                REP #$30        ; set A&X long
.394a0e		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394a11		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394a13		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394a16		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394a18		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394a1a		85 02		sta $0322	                STA BIOS_LBA
.394a1c		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394a1e		85 04		sta $0324	                STA BIOS_LBA+2
.394a20		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394a24		90 14		bcc $394a3a	                BCC done
.394a26		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394a29		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394a2b		a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394a2e		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394a30		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394a32		d0 02		bne $394a36	                BNE put_second
.394a34		e6 04		inc $0324	                INC BIOS_LBA+2
.394a36		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394a3a		2b		pld		done            PLD
.394a3b		ab		plb		                PLB
.394a3c		6b		rtl		                RTL
.394a3d						DELCLUSTER12
.394a3d		8b		phb		                PHB
.394a3e		0b		phd		                PHD
.394a3f		08		php		                PHP
.394a40		48		pha		                PHA             ; begin setdbr macro
.394a41		08		php		                PHP
.394a42		e2 20		sep #$20	                SEP #$20        ; set A short
.394a44		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394a46		48		pha		                PHA
.394a47		ab		plb		                PLB
.394a48		28		plp		                PLP
.394a49		68		pla		                PLA             ; end setdbr macro
.394a4a		48		pha		                PHA             ; begin setdp macro
.394a4b		08		php		                PHP
.394a4c		c2 20		rep #$20	                REP #$20        ; set A long
.394a4e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a51		5b		tcd		                TCD
.394a52		28		plp		                PLP
.394a53		68		pla		                PLA             ; end setdp macro
.394a54		c2 30		rep #$30	                REP #$30        ; set A&X long
.394a56		22 d7 45 39	jsl $3945d7	                JSL FATFORCLUSTER12
.394a5a		8a		txa		                TXA                             ; Check to see if the index is odd or even
.394a5b		89 01 00	bit #$0001	                BIT #1
.394a5e		d0 08		bne $394a68	                BNE is_odd
.394a60		bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394a63		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394a66		80 06		bra $394a6e	                BRA save_update
.394a68		bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394a6b		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.394a6e		9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.394a71		22 f6 49 39	jsl $3949f6	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394a75		b0 0b		bcs $394a82	                BCS ret_success
.394a77						ret_failure
.394a77		e2 20		sep #$20	                SEP #$20        ; set A short
.394a79		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394a7b		85 0e		sta $032e	                STA DOS_STATUS
.394a7d		28		plp		                PLP
.394a7e		2b		pld		                PLD
.394a7f		ab		plb		                PLB
.394a80		18		clc		                CLC
.394a81		6b		rtl		                RTL
.394a82						ret_success
.394a82		e2 20		sep #$20	                SEP #$20        ; set A short
.394a84		64 0e		stz $032e	                STZ DOS_STATUS
.394a86		28		plp		                PLP
.394a87		2b		pld		                PLD
.394a88		ab		plb		                PLB
.394a89		38		sec		                SEC
.394a8a		6b		rtl		                RTL
.394a8b						DELCLUSTER32
.394a8b		8b		phb		                PHB
.394a8c		0b		phd		                PHD
.394a8d		08		php		                PHP
.394a8e		c2 30		rep #$30	                REP #$30        ; set A&X long
.394a90		48		pha		                PHA             ; begin setdbr macro
.394a91		08		php		                PHP
.394a92		e2 20		sep #$20	                SEP #$20        ; set A short
.394a94		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394a96		48		pha		                PHA
.394a97		ab		plb		                PLB
.394a98		28		plp		                PLP
.394a99		68		pla		                PLA             ; end setdbr macro
.394a9a		48		pha		                PHA             ; begin setdp macro
.394a9b		08		php		                PHP
.394a9c		c2 20		rep #$20	                REP #$20        ; set A long
.394a9e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394aa1		5b		tcd		                TCD
.394aa2		28		plp		                PLP
.394aa3		68		pla		                PLA             ; end setdp macro
.394aa4		22 3f 46 39	jsl $39463f	                JSL FATFORCLUSTER32
.394aa8		a9 00 00	lda #$0000	                LDA #0
.394aab		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394aae		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394ab1		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394ab5		b0 0b		bcs $394ac2	                BCS ret_success
.394ab7						ret_failure
.394ab7		e2 20		sep #$20	                SEP #$20        ; set A short
.394ab9		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394abb		85 0e		sta $032e	                STA DOS_STATUS
.394abd		28		plp		                PLP
.394abe		2b		pld		                PLD
.394abf		ab		plb		                PLB
.394ac0		18		clc		                CLC
.394ac1		6b		rtl		                RTL
.394ac2						ret_success
.394ac2		e2 20		sep #$20	                SEP #$20        ; set A short
.394ac4		64 0e		stz $032e	                STZ DOS_STATUS
.394ac6		28		plp		                PLP
.394ac7		2b		pld		                PLD
.394ac8		ab		plb		                PLB
.394ac9		38		sec		                SEC
.394aca		6b		rtl		                RTL
.394acb						DOS_APPENDCLUS
.394acb		8b		phb		                PHB
.394acc		0b		phd		                PHD
.394acd		08		php		                PHP
.394ace		48		pha		                PHA             ; begin setdbr macro
.394acf		08		php		                PHP
.394ad0		e2 20		sep #$20	                SEP #$20        ; set A short
.394ad2		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394ad4		48		pha		                PHA
.394ad5		ab		plb		                PLB
.394ad6		28		plp		                PLP
.394ad7		68		pla		                PLA             ; end setdbr macro
.394ad8		48		pha		                PHA             ; begin setdp macro
.394ad9		08		php		                PHP
.394ada		c2 20		rep #$20	                REP #$20        ; set A long
.394adc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394adf		5b		tcd		                TCD
.394ae0		28		plp		                PLP
.394ae1		68		pla		                PLA             ; end setdp macro
.394ae2		c2 30		rep #$30	                REP #$30        ; set A&X long
.394ae4		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394ae6		48		pha		                PHA
.394ae7		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394ae9		48		pha		                PHA
.394aea		22 c3 47 39	jsl $3947c3	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.394aee		b0 09		bcs $394af9	                BCS save_cluster                ; If we got a cluster, write the data to it
.394af0		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.394af1		85 10		sta $0330	                STA DOS_CLUS_ID
.394af3		68		pla		                PLA
.394af4		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394af6		82 7d 00	brl $394b76	                BRL pass_failure                ; Pass the failure back up the chain
.394af9		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.394afb		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394afe		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394b00		8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.394b03		22 d3 42 39	jsl $3942d3	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394b07		90 e7		bcc $394af0	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.394b09		68		pla		                PLA                             ; Restore the cluster of the file
.394b0a		85 10		sta $0330	                STA DOS_CLUS_ID
.394b0c		68		pla		                PLA
.394b0d		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394b0f		22 aa 46 39	jsl $3946aa	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.394b13		b0 fa		bcs $394b0f	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.394b15		e2 20		sep #$20	                SEP #$20        ; set A short
.394b17		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394b1b		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394b1d		d0 3d		bne $394b5c	                BNE fat32                       ; No: assume it's FAT32
.394b1f						fat12
.394b1f		c2 20		rep #$20	                REP #$20        ; set A long
.394b21		22 64 45 39	jsl $394564	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.394b25		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.394b27		89 01 00	bit #$0001	                BIT #1
.394b2a		d0 11		bne $394b3d	                BNE is_odd
.394b2c		ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.394b2f		29 ff 0f	and #$0fff	                AND #$0FFF
.394b32		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394b35		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394b38		29 00 f0	and #$f000	                AND #$F000
.394b3b		80 10		bra $394b4d	                BRA update_fat12
.394b3d		ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.394b40		0a		asl a		                ASL A
.394b41		0a		asl a		                ASL A
.394b42		0a		asl a		                ASL A
.394b43		0a		asl a		                ASL A
.394b44		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394b47		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394b4a		29 0f 00	and #$000f	                AND #$000F
.394b4d		0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.394b50		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394b53		22 f6 49 39	jsl $3949f6	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394b57		b0 22		bcs $394b7b	                BCS ret_success
.394b59		82 1a 00	brl $394b76	                BRL pass_failure
.394b5c						fat32
.394b5c		c2 20		rep #$20	                REP #$20        ; set A long
.394b5e		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.394b61		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394b64		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394b67		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394b6a		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.394b6e		b0 0b		bcs $394b7b	                BCS ret_success
.394b70		e2 20		sep #$20	                SEP #$20        ; set A short
.394b72		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.394b74		85 0e		sta $032e	                STA DOS_STATUS
.394b76		28		plp		pass_failure    PLP
.394b77		2b		pld		                PLD
.394b78		ab		plb		                PLB
.394b79		18		clc		                CLC
.394b7a		6b		rtl		                RTL
.394b7b						ret_success
.394b7b		e2 20		sep #$20	                SEP #$20        ; set A short
.394b7d		64 0e		stz $032e	                STZ DOS_STATUS
.394b7f		28		plp		                PLP
.394b80		2b		pld		                PLD
.394b81		ab		plb		                PLB
.394b82		38		sec		                SEC
.394b83		6b		rtl		                RTL
.394b84						BCD2BIN
.394b84		8b		phb		                PHB
.394b85		0b		phd		                PHD
.394b86		08		php		                PHP
.394b87		48		pha		                PHA             ; begin setdbr macro
.394b88		08		php		                PHP
.394b89		e2 20		sep #$20	                SEP #$20        ; set A short
.394b8b		a9 00		lda #$00	                LDA #0
.394b8d		48		pha		                PHA
.394b8e		ab		plb		                PLB
.394b8f		28		plp		                PLP
.394b90		68		pla		                PLA             ; end setdbr macro
.394b91		48		pha		                PHA             ; begin setdp macro
.394b92		08		php		                PHP
.394b93		c2 20		rep #$20	                REP #$20        ; set A long
.394b95		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b98		5b		tcd		                TCD
.394b99		28		plp		                PLP
.394b9a		68		pla		                PLA             ; end setdp macro
.394b9b		c2 30		rep #$30	                REP #$30        ; set A&X long
.394b9d		85 28		sta $0348	                STA DOS_TEMP
.394b9f		29 0f 00	and #$000f	                AND #$000F
.394ba2		85 2a		sta $034a	                STA DOS_TEMP+2
.394ba4		a5 28		lda $0348	                LDA DOS_TEMP
.394ba6		4a		lsr a		                LSR A
.394ba7		4a		lsr a		                LSR A
.394ba8		4a		lsr a		                LSR A
.394ba9		4a		lsr a		                LSR A
.394baa		85 28		sta $0348	                STA DOS_TEMP
.394bac		29 0f 00	and #$000f	                AND #$000F
.394baf		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394bb3		a9 0a 00	lda #$000a	                LDA #10
.394bb6		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394bba		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394bbe		18		clc		                CLC
.394bbf		65 2a		adc $034a	                ADC DOS_TEMP+2
.394bc1		85 2a		sta $034a	                STA DOS_TEMP+2
.394bc3		a5 28		lda $0348	                LDA DOS_TEMP
.394bc5		4a		lsr a		                LSR A
.394bc6		4a		lsr a		                LSR A
.394bc7		4a		lsr a		                LSR A
.394bc8		4a		lsr a		                LSR A
.394bc9		85 28		sta $0348	                STA DOS_TEMP
.394bcb		29 0f 00	and #$000f	                AND #$000F
.394bce		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394bd2		a9 64 00	lda #$0064	                LDA #100
.394bd5		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394bd9		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394bdd		18		clc		                CLC
.394bde		65 2a		adc $034a	                ADC DOS_TEMP+2
.394be0		85 2a		sta $034a	                STA DOS_TEMP+2
.394be2		a5 28		lda $0348	                LDA DOS_TEMP
.394be4		4a		lsr a		                LSR A
.394be5		4a		lsr a		                LSR A
.394be6		4a		lsr a		                LSR A
.394be7		4a		lsr a		                LSR A
.394be8		29 0f 00	and #$000f	                AND #$000F
.394beb		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394bef		a9 e8 03	lda #$03e8	                LDA #1000
.394bf2		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394bf6		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394bfa		18		clc		                CLC
.394bfb		65 2a		adc $034a	                ADC DOS_TEMP+2
.394bfd		28		plp		                PLP
.394bfe		2b		pld		                PLD
.394bff		ab		plb		                PLB
.394c00		6b		rtl		                RTL
.394c01						DOS_RTCCREATE
.394c01		8b		phb		                PHB
.394c02		0b		phd		                PHD
.394c03		08		php		                PHP
.394c04		48		pha		                PHA             ; begin setdbr macro
.394c05		08		php		                PHP
.394c06		e2 20		sep #$20	                SEP #$20        ; set A short
.394c08		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394c0a		48		pha		                PHA
.394c0b		ab		plb		                PLB
.394c0c		28		plp		                PLP
.394c0d		68		pla		                PLA             ; end setdbr macro
.394c0e		48		pha		                PHA             ; begin setdp macro
.394c0f		08		php		                PHP
.394c10		c2 20		rep #$20	                REP #$20        ; set A long
.394c12		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c15		5b		tcd		                TCD
.394c16		28		plp		                PLP
.394c17		68		pla		                PLA             ; end setdp macro
.394c18		c2 10		rep #$10	                REP #$10        ; set X long
.394c1a		e2 20		sep #$20	                SEP #$20        ; set A short
.394c1c		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.394c20		09 08		ora #$08	                ORA #%00001000
.394c22		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394c26		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.394c2a		85 29		sta $0349	                STA DOS_TEMP+1
.394c2c		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.394c30		85 28		sta $0348	                STA DOS_TEMP
.394c32		c2 20		rep #$20	                REP #$20        ; set A long
.394c34		a5 28		lda $0348	                LDA DOS_TEMP
.394c36		22 84 4b 39	jsl $394b84	                JSL BCD2BIN                 ; Convert it to binary
.394c3a		85 28		sta $0348	                STA DOS_TEMP
.394c3c		38		sec		                SEC                         ; Year is relative to 1980
.394c3d		e9 bc 07	sbc #$07bc	                SBC #1980
.394c40		c2 20		rep #$20	                REP #$20        ; set A long
.394c42		0a		asl a		                ASL A
.394c43		0a		asl a		                ASL A
.394c44		0a		asl a		                ASL A
.394c45		0a		asl a		                ASL A
.394c46		0a		asl a		                ASL A
.394c47		0a		asl a		                ASL A
.394c48		0a		asl a		                ASL A
.394c49		0a		asl a		                ASL A
.394c4a		0a		asl a		                ASL A
.394c4b		29 00 fe	and #$fe00	                AND #$FE00
.394c4e		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394c51		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394c53		e2 20		sep #$20	                SEP #$20        ; set A short
.394c55		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.394c59		c2 20		rep #$20	                REP #$20        ; set A long
.394c5b		29 ff 00	and #$00ff	                AND #$00FF
.394c5e		22 84 4b 39	jsl $394b84	                JSL BCD2BIN                 ; Convert it to binary
.394c62		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.394c65		0a		asl a		                ASL A
.394c66		0a		asl a		                ASL A
.394c67		0a		asl a		                ASL A
.394c68		0a		asl a		                ASL A
.394c69		0a		asl a		                ASL A
.394c6a		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.394c6d		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394c70		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394c72		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394c74		e2 20		sep #$20	                SEP #$20        ; set A short
.394c76		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.394c7a		c2 20		rep #$20	                REP #$20        ; set A long
.394c7c		29 ff 00	and #$00ff	                AND #$00FF
.394c7f		22 84 4b 39	jsl $394b84	                JSL BCD2BIN                 ; Convert it to binary
.394c83		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.394c86		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394c89		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394c8b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394c8d		e2 20		sep #$20	                SEP #$20        ; set A short
.394c8f		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.394c93		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.394c95		c2 20		rep #$20	                REP #$20        ; set A long
.394c97		29 ff 00	and #$00ff	                AND #$00FF
.394c9a		22 84 4b 39	jsl $394b84	                JSL BCD2BIN                 ; Convert it to binary
.394c9e		c2 20		rep #$20	                REP #$20        ; set A long
.394ca0		0a		asl a		                ASL A
.394ca1		0a		asl a		                ASL A
.394ca2		0a		asl a		                ASL A
.394ca3		0a		asl a		                ASL A
.394ca4		0a		asl a		                ASL A
.394ca5		0a		asl a		                ASL A
.394ca6		0a		asl a		                ASL A
.394ca7		0a		asl a		                ASL A
.394ca8		0a		asl a		                ASL A
.394ca9		0a		asl a		                ASL A
.394caa		0a		asl a		                ASL A
.394cab		29 00 f8	and #$f800	                AND #$F800
.394cae		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394cb1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394cb3		e2 20		sep #$20	                SEP #$20        ; set A short
.394cb5		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.394cb9		c2 20		rep #$20	                REP #$20        ; set A long
.394cbb		29 ff 00	and #$00ff	                AND #$00FF
.394cbe		22 84 4b 39	jsl $394b84	                JSL BCD2BIN                 ; Convert it to binary
.394cc2		c2 20		rep #$20	                REP #$20        ; set A long
.394cc4		0a		asl a		                ASL A
.394cc5		0a		asl a		                ASL A
.394cc6		0a		asl a		                ASL A
.394cc7		0a		asl a		                ASL A
.394cc8		0a		asl a		                ASL A
.394cc9		29 e0 07	and #$07e0	                AND #$07E0
.394ccc		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394ccf		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394cd1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394cd3		e2 20		sep #$20	                SEP #$20        ; set A short
.394cd5		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.394cd9		c2 20		rep #$20	                REP #$20        ; set A long
.394cdb		29 ff 00	and #$00ff	                AND #$00FF
.394cde		22 84 4b 39	jsl $394b84	                JSL BCD2BIN                 ; Convert it to binary
.394ce2		c2 20		rep #$20	                REP #$20        ; set A long
.394ce4		29 1f 00	and #$001f	                AND #$001F
.394ce7		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394cea		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394cec		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394cee		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.394cf2		29 f7 00	and #$00f7	                AND #%11110111
.394cf5		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394cf9		28		plp		                PLP
.394cfa		2b		pld		                PLD
.394cfb		ab		plb		                PLB
.394cfc		6b		rtl		                RTL
.394cfd						DOS_CREATE
.394cfd		8b		phb		                PHB
.394cfe		0b		phd		                PHD
.394cff		08		php		                PHP
.394d00		48		pha		                PHA             ; begin setdbr macro
.394d01		08		php		                PHP
.394d02		e2 20		sep #$20	                SEP #$20        ; set A short
.394d04		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394d06		48		pha		                PHA
.394d07		ab		plb		                PLB
.394d08		28		plp		                PLP
.394d09		68		pla		                PLA             ; end setdbr macro
.394d0a		48		pha		                PHA             ; begin setdp macro
.394d0b		08		php		                PHP
.394d0c		c2 20		rep #$20	                REP #$20        ; set A long
.394d0e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d11		5b		tcd		                TCD
.394d12		28		plp		                PLP
.394d13		68		pla		                PLA             ; end setdp macro
.394d14		c2 30		rep #$30	                REP #$30        ; set A&X long
.394d16		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.394d19		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d1b		85 28		sta $0348	                STA DOS_TEMP
.394d1d		c8		iny		                INY
.394d1e		c8		iny		                INY
.394d1f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d21		85 2a		sta $034a	                STA DOS_TEMP+2
.394d23		e2 20		sep #$20	                SEP #$20        ; set A short
.394d25		a0 00 00	ldy #$0000	                LDY #0
.394d28		a2 00 00	ldx #$0000	                LDX #0
.394d2b		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.394d2d		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.394d2f		f0 04		beq $394d35	                BEQ find_file                   ; If it's NULL, we're done
.394d31		e8		inx		                INX
.394d32		c8		iny		                INY
.394d33		80 f6		bra $394d2b	                BRA path_loop
.394d35		22 e4 43 39	jsl $3943e4	find_file       JSL DOS_PARSE_PATH
.394d39		22 7c 44 39	jsl $39447c	                JSL DOS_FINDFILE
.394d3d		90 07		bcc $394d46	                BCC set_device
.394d3f		e2 20		sep #$20	                SEP #$20        ; set A short
.394d41		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.394d43		82 d2 00	brl $394e18	                BRL ret_failure
.394d46						set_device
.394d46		e2 20		sep #$20	                SEP #$20        ; set A short
.394d48		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.394d4b		a5 01		lda $0321	                LDA BIOS_DEV
.394d4d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394d4f						validate_name
.394d4f		22 c3 47 39	jsl $3947c3	                JSL DOS_FREECLUS
.394d53		b0 03		bcs $394d58	                BCS save_data
.394d55		82 c4 00	brl $394e1c	                BRL pass_failure
.394d58						save_data
.394d58		c2 20		rep #$20	                REP #$20        ; set A long
.394d5a		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.394d5d		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.394d5f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394d61		c8		iny		                INY
.394d62		c8		iny		                INY
.394d63		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394d65		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394d67		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.394d6a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d6c		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394d6e		c8		iny		                INY
.394d6f		c8		iny		                INY
.394d70		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d72		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394d74		22 d3 42 39	jsl $3942d3	                JSL DOS_PUTCLUSTER
.394d78		b0 00		bcs $394d7a	                BCS find_dir
.394d7a						find_dir
.394d7a		c2 20		rep #$20	                REP #$20        ; set A long
.394d7c		22 0e 3e 39	jsl $393e0e	                JSL DOS_DIRFINDFREE
.394d80		b0 1a		bcs $394d9c	                BCS set_entry
.394d82		c2 20		rep #$20	                REP #$20        ; set A long
.394d84		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.394d87		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.394d89		85 10		sta $0330	                STA DOS_CLUS_ID
.394d8b		c8		iny		                INY
.394d8c		c8		iny		                INY
.394d8d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d8f		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394d91		22 8b 4a 39	jsl $394a8b	                JSL DELCLUSTER32                ; Delete the cluster
.394d95		e2 20		sep #$20	                SEP #$20        ; set A short
.394d97		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.394d99		82 7c 00	brl $394e18	                BRL ret_failure
.394d9c						set_entry
.394d9c		e2 20		sep #$20	                SEP #$20        ; set A short
.394d9e		a0 00 00	ldy #$0000	                LDY #0
.394da1		a9 00		lda #$00	                LDA #0                          ; NULL
.394da3		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.394da5		c8		iny		                INY
.394da6		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.394da9		d0 f8		bne $394da3	                BNE copy_dir_loop
.394dab		a0 00 00	ldy #$0000	                LDY #0
.394dae		b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.394db1		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394db3		c8		iny		                INY
.394db4		c0 0b 00	cpy #$000b	                CPY #11
.394db7		d0 f5		bne $394dae	                BNE name_loop
.394db9		c2 20		rep #$20	                REP #$20        ; set A long
.394dbb		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.394dbe		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394dc0		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.394dc3		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394dc5		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.394dc8		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394dca		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394dcd		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394dcf		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.394dd2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394dd4		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.394dd7		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394dd9		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.394ddc		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394dde		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.394de1		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394de3		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.394de6		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.394de9		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394deb		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.394dee		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394df0		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.394df3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394df5		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.394df8		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394dfa		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.394dfd		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394dff		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.394e02		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e04		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.394e07		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394e09		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.394e0c		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394e0e		c2 20		rep #$20	                REP #$20        ; set A long
.394e10		22 cc 3e 39	jsl $393ecc	                JSL DOS_DIRWRITE
.394e14		b0 0b		bcs $394e21	                BCS ret_success
.394e16		80 04		bra $394e1c	                BRA pass_failure
.394e18						ret_failure
.394e18		e2 20		sep #$20	                SEP #$20        ; set A short
.394e1a		85 0e		sta $032e	                STA DOS_STATUS
.394e1c		28		plp		pass_failure    PLP
.394e1d		2b		pld		                PLD
.394e1e		ab		plb		                PLB
.394e1f		18		clc		                CLC
.394e20		6b		rtl		                RTL
.394e21						ret_success
.394e21		e2 20		sep #$20	                SEP #$20        ; set A short
.394e23		64 0e		stz $032e	                STZ DOS_STATUS
.394e25		28		plp		                PLP
.394e26		2b		pld		                PLD
.394e27		ab		plb		                PLB
.394e28		38		sec		                SEC
.394e29		6b		rtl		                RTL
.394e2a						DOS_COPYPATH
.394e2a		da		phx		                PHX
.394e2b		5a		phy		                PHY
.394e2c		8b		phb		                PHB
.394e2d		0b		phd		                PHD
.394e2e		08		php		                PHP
.394e2f		48		pha		                PHA             ; begin setdbr macro
.394e30		08		php		                PHP
.394e31		e2 20		sep #$20	                SEP #$20        ; set A short
.394e33		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e35		48		pha		                PHA
.394e36		ab		plb		                PLB
.394e37		28		plp		                PLP
.394e38		68		pla		                PLA             ; end setdbr macro
.394e39		48		pha		                PHA             ; begin setdp macro
.394e3a		08		php		                PHP
.394e3b		c2 20		rep #$20	                REP #$20        ; set A long
.394e3d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e40		5b		tcd		                TCD
.394e41		28		plp		                PLP
.394e42		68		pla		                PLA             ; end setdp macro
.394e43		c2 30		rep #$30	                REP #$30        ; set A&X long
.394e45		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.394e48		a2 00 00	ldx #$0000	                LDX #0
.394e4b		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.394e4d		e8		inx		                INX
.394e4e		e8		inx		                INX
.394e4f		e0 00 01	cpx #$0100	                CPX #256
.394e52		d0 f7		bne $394e4b	                BNE clr_loop
.394e54		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.394e56		d0 04		bne $394e5c	                BNE get_path            ; No: attempt to fetch the path
.394e58		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.394e5a		f0 27		beq $394e83	                BEQ done                ; Yes: return an empty buffer
.394e5c		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.394e5f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e61		85 28		sta $0348	                STA DOS_TEMP
.394e63		c8		iny		                INY
.394e64		c8		iny		                INY
.394e65		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e67		85 2a		sta $034a	                STA DOS_TEMP+2
.394e69		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.394e6b		d0 04		bne $394e71	                BNE start_copy          ; No: start copying it
.394e6d		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394e6f		f0 12		beq $394e83	                BEQ done                ; Yes: return an empty buffer
.394e71						start_copy
.394e71		e2 20		sep #$20	                SEP #$20        ; set A short
.394e73		a2 00 00	ldx #$0000	                LDX #0
.394e76		a0 00 00	ldy #$0000	                LDY #0
.394e79		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.394e7b		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.394e7d		f0 04		beq $394e83	                BEQ done
.394e7f		e8		inx		                INX
.394e80		c8		iny		                INY
.394e81		d0 f6		bne $394e79	                BNE loop
.394e83		28		plp		done            PLP
.394e84		2b		pld		                PLD
.394e85		ab		plb		                PLB
.394e86		7a		ply		                PLY
.394e87		fa		plx		                PLX
.394e88		6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.394e89						DOS_TEST
.394e89		8b		phb		                PHB
.394e8a		0b		phd		                PHD
.394e8b		08		php		                PHP
.394e8c		48		pha		                PHA             ; begin setdbr macro
.394e8d		08		php		                PHP
.394e8e		e2 20		sep #$20	                SEP #$20        ; set A short
.394e90		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e92		48		pha		                PHA
.394e93		ab		plb		                PLB
.394e94		28		plp		                PLP
.394e95		68		pla		                PLA             ; end setdbr macro
.394e96		48		pha		                PHA             ; begin setdp macro
.394e97		08		php		                PHP
.394e98		c2 20		rep #$20	                REP #$20        ; set A long
.394e9a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e9d		5b		tcd		                TCD
.394e9e		28		plp		                PLP
.394e9f		68		pla		                PLA             ; end setdp macro
.394ea0		c2 30		rep #$30	                REP #$30        ; set A&X long
.394ea2		a9 c8 4e	lda #$4ec8	                LDA #<>src_file
.394ea5		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.394ea9		a9 39 00	lda #$0039	                LDA #`src_file
.394eac		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.394eb0		a9 d5 4e	lda #$4ed5	                LDA #<>dst_file
.394eb3		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.394eb7		a9 39 00	lda #$0039	                LDA #`dst_file
.394eba		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.394ebe		22 fa 56 39	jsl $3956fa	                JSL IF_COPY
.394ec2		b0 00		bcs $394ec4	                BCS done
.394ec4		28		plp		done            PLP
.394ec5		2b		pld		                PLD
.394ec6		ab		plb		                PLB
.394ec7		6b		rtl		                RTL
>394ec8		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>394ed0		2e 62 61 73 00
>394ed5		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>394edd		32 2e 62 61 73 00
.394ee3						IF_OPEN
.394ee3		da		phx		                PHX
.394ee4		5a		phy		                PHY
.394ee5		0b		phd		                PHD
.394ee6		8b		phb		                PHB
.394ee7		08		php		                PHP
.394ee8		48		pha		                PHA             ; begin setdbr macro
.394ee9		08		php		                PHP
.394eea		e2 20		sep #$20	                SEP #$20        ; set A short
.394eec		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394eee		48		pha		                PHA
.394eef		ab		plb		                PLB
.394ef0		28		plp		                PLP
.394ef1		68		pla		                PLA             ; end setdbr macro
.394ef2		48		pha		                PHA             ; begin setdp macro
.394ef3		08		php		                PHP
.394ef4		c2 20		rep #$20	                REP #$20        ; set A long
.394ef6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ef9		5b		tcd		                TCD
.394efa		28		plp		                PLP
.394efb		68		pla		                PLA             ; end setdp macro
.394efc		e2 20		sep #$20	                SEP #$20        ; set A short
.394efe		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.394f01		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f03		89 20		bit #$20	                BIT #FD_STAT_OPEN
.394f05		f0 05		beq $394f0c	                BEQ ok_to_open
.394f07		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.394f09		82 87 06	brl $395593	                BRL IF_FAILURE
.394f0c		22 2a 4e 39	jsl $394e2a	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.394f10		22 7c 44 39	jsl $39447c	                JSL DOS_FINDFILE                ; Attempt to find the file
.394f14		b0 03		bcs $394f19	                BCS is_found                    ; If OK: we found the file
.394f16		82 7e 06	brl $395597	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.394f19						is_found
.394f19		e2 20		sep #$20	                SEP #$20        ; set A short
.394f1b		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.394f1e		a5 01		lda $0321	                LDA BIOS_DEV
.394f20		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f22		c2 20		rep #$20	                REP #$20        ; set A long
.394f24		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.394f27		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f29		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394f2b		c8		iny		                INY
.394f2c		c8		iny		                INY
.394f2d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f2f		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394f31		22 96 42 39	jsl $394296	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.394f35		b0 03		bcs $394f3a	                BCS read_cluster
.394f37		82 5d 06	brl $395597	                BRL IF_PASSFAILURE
.394f3a		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.394f3d		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394f3f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f41		c8		iny		                INY
.394f42		c8		iny		                INY
.394f43		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394f45		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f47		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.394f4a		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394f4c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f4e		c8		iny		                INY
.394f4f		c8		iny		                INY
.394f50		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394f52		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f54		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.394f57		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394f59		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.394f5c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f5e		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.394f61		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394f63		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.394f66		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f68		e2 20		sep #$20	                SEP #$20        ; set A short
.394f6a		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.394f6d		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.394f6f		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394f71		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f73		82 28 06	brl $39559e	                BRL IF_SUCCESS
.394f76						IF_CREATE
.394f76		da		phx		                PHX
.394f77		5a		phy		                PHY
.394f78		0b		phd		                PHD
.394f79		8b		phb		                PHB
.394f7a		08		php		                PHP
.394f7b		48		pha		                PHA             ; begin setdbr macro
.394f7c		08		php		                PHP
.394f7d		e2 20		sep #$20	                SEP #$20        ; set A short
.394f7f		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f81		48		pha		                PHA
.394f82		ab		plb		                PLB
.394f83		28		plp		                PLP
.394f84		68		pla		                PLA             ; end setdbr macro
.394f85		48		pha		                PHA             ; begin setdp macro
.394f86		08		php		                PHP
.394f87		c2 20		rep #$20	                REP #$20        ; set A long
.394f89		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f8c		5b		tcd		                TCD
.394f8d		28		plp		                PLP
.394f8e		68		pla		                PLA             ; end setdp macro
.394f8f		22 fd 4c 39	jsl $394cfd	                JSL DOS_CREATE                  ; Attempt to create the file
.394f93		90 18		bcc $394fad	                BCC pass_failure                ; If it fails: pass the failure up the chain
.394f95		c2 30		rep #$30	                REP #$30        ; set A&X long
.394f97		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.394f9a		a9 00 00	lda #$0000	                LDA #0
.394f9d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f9f		c8		iny		                INY
.394fa0		c8		iny		                INY
.394fa1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394fa3		e2 20		sep #$20	                SEP #$20        ; set A short
.394fa5		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.394fa8		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.394faa		82 f1 05	brl $39559e	                BRL IF_SUCCESS
.394fad		82 e3 05	brl $395593	pass_failure    BRL IF_FAILURE
.394fb0						IF_CLOSE
.394fb0		da		phx		                PHX
.394fb1		5a		phy		                PHY
.394fb2		0b		phd		                PHD
.394fb3		8b		phb		                PHB
.394fb4		08		php		                PHP
.394fb5		48		pha		                PHA             ; begin setdbr macro
.394fb6		08		php		                PHP
.394fb7		e2 20		sep #$20	                SEP #$20        ; set A short
.394fb9		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394fbb		48		pha		                PHA
.394fbc		ab		plb		                PLB
.394fbd		28		plp		                PLP
.394fbe		68		pla		                PLA             ; end setdbr macro
.394fbf		48		pha		                PHA             ; begin setdp macro
.394fc0		08		php		                PHP
.394fc1		c2 20		rep #$20	                REP #$20        ; set A long
.394fc3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394fc6		5b		tcd		                TCD
.394fc7		28		plp		                PLP
.394fc8		68		pla		                PLA             ; end setdp macro
.394fc9		e2 20		sep #$20	                SEP #$20        ; set A short
.394fcb		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.394fce		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394fd0		89 02		bit #$02	                BIT #FD_STAT_WRITE
.394fd2		f0 09		beq $394fdd	                BEQ set_flag                    ; No, just mark it closed
.394fd4		22 49 50 39	jsl $395049	                JSL IF_WRITE                    ; Attempt to write the cluster
.394fd8		b0 03		bcs $394fdd	                BCS set_flag
.394fda		82 ba 05	brl $395597	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.394fdd		22 98 56 39	jsl $395698	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.394fe1		82 ba 05	brl $39559e	                BRL IF_SUCCESS
.394fe4						IF_READ
.394fe4		da		phx		                PHX
.394fe5		5a		phy		                PHY
.394fe6		0b		phd		                PHD
.394fe7		8b		phb		                PHB
.394fe8		08		php		                PHP
.394fe9		48		pha		                PHA             ; begin setdbr macro
.394fea		08		php		                PHP
.394feb		e2 20		sep #$20	                SEP #$20        ; set A short
.394fed		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394fef		48		pha		                PHA
.394ff0		ab		plb		                PLB
.394ff1		28		plp		                PLP
.394ff2		68		pla		                PLA             ; end setdbr macro
.394ff3		48		pha		                PHA             ; begin setdp macro
.394ff4		08		php		                PHP
.394ff5		c2 20		rep #$20	                REP #$20        ; set A long
.394ff7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ffa		5b		tcd		                TCD
.394ffb		28		plp		                PLP
.394ffc		68		pla		                PLA             ; end setdp macro
.394ffd		c2 10		rep #$10	                REP #$10        ; set X long
.394fff		e2 20		sep #$20	                SEP #$20        ; set A short
.395001						get_dev
.395001		e2 20		sep #$20	                SEP #$20        ; set A short
.395003		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.395006		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395008		85 01		sta $0321	                STA BIOS_DEV
.39500a		22 fe 3f 39	jsl $393ffe	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.39500e		c2 20		rep #$20	                REP #$20        ; set A long
.395010		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395013		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395015		85 10		sta $0330	                STA DOS_CLUS_ID
.395017		c8		iny		                INY
.395018		c8		iny		                INY
.395019		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39501b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39501d		22 aa 46 39	jsl $3946aa	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.395021		90 13		bcc $395036	                BCC pass_failure                ; If not OK: pass the failure up the chain
.395023		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.395026		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395028		85 1c		sta $033c	                STA DOS_BUFF_PTR
.39502a		c8		iny		                INY
.39502b		c8		iny		                INY
.39502c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39502e		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395030		22 96 42 39	jsl $394296	                JSL DOS_GETCLUSTER              ; Get the cluster
.395034		b0 03		bcs $395039	                BCS ret_success                 ; If ok: return success
.395036						pass_failure
.395036		82 5e 05	brl $395597	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395039		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.39503c		a5 10		lda $0330	                LDA DOS_CLUS_ID
.39503e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395040		c8		iny		                INY
.395041		c8		iny		                INY
.395042		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395044		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395046		82 55 05	brl $39559e	                BRL IF_SUCCESS
.395049						IF_WRITE
.395049		da		phx		                PHX
.39504a		5a		phy		                PHY
.39504b		0b		phd		                PHD
.39504c		8b		phb		                PHB
.39504d		08		php		                PHP
.39504e		48		pha		                PHA             ; begin setdbr macro
.39504f		08		php		                PHP
.395050		e2 20		sep #$20	                SEP #$20        ; set A short
.395052		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395054		48		pha		                PHA
.395055		ab		plb		                PLB
.395056		28		plp		                PLP
.395057		68		pla		                PLA             ; end setdbr macro
.395058		48		pha		                PHA             ; begin setdp macro
.395059		08		php		                PHP
.39505a		c2 20		rep #$20	                REP #$20        ; set A long
.39505c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39505f		5b		tcd		                TCD
.395060		28		plp		                PLP
.395061		68		pla		                PLA             ; end setdp macro
.395062		c2 10		rep #$10	                REP #$10        ; set X long
.395064		e2 20		sep #$20	                SEP #$20        ; set A short
.395066		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.395069		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39506b		85 01		sta $0321	                STA BIOS_DEV
.39506d		22 fe 3f 39	jsl $393ffe	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.395071		c2 20		rep #$20	                REP #$20        ; set A long
.395073		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.395076		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395078		85 1c		sta $033c	                STA DOS_BUFF_PTR
.39507a		c8		iny		                INY
.39507b		c8		iny		                INY
.39507c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39507e		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395080		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395083		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395085		85 10		sta $0330	                STA DOS_CLUS_ID
.395087		c8		iny		                INY
.395088		c8		iny		                INY
.395089		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39508b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39508d		d0 1a		bne $3950a9	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.39508f		a5 10		lda $0330	                LDA DOS_CLUS_ID
.395091		d0 16		bne $3950a9	                BNE rewrite_cluster
.395093		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.395096		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395098		85 10		sta $0330	                STA DOS_CLUS_ID
.39509a		c8		iny		                INY
.39509b		c8		iny		                INY
.39509c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39509e		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3950a0		22 cb 4a 39	jsl $394acb	                JSL DOS_APPENDCLUS              ; Append the cluster
.3950a4		b0 0c		bcs $3950b2	                BCS ret_success                 ; If OK: return success
.3950a6		82 ee 04	brl $395597	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3950a9		22 d3 42 39	jsl $3942d3	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.3950ad		b0 03		bcs $3950b2	                BCS ret_success                 ; If ok: return success
.3950af		82 e5 04	brl $395597	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3950b2		82 e9 04	brl $39559e	ret_success     BRL IF_SUCCESS
.3950b5						IF_DIROPEN
.3950b5		da		phx		                PHX
.3950b6		5a		phy		                PHY
.3950b7		0b		phd		                PHD
.3950b8		8b		phb		                PHB
.3950b9		08		php		                PHP
.3950ba		48		pha		                PHA             ; begin setdbr macro
.3950bb		08		php		                PHP
.3950bc		e2 20		sep #$20	                SEP #$20        ; set A short
.3950be		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3950c0		48		pha		                PHA
.3950c1		ab		plb		                PLB
.3950c2		28		plp		                PLP
.3950c3		68		pla		                PLA             ; end setdbr macro
.3950c4		48		pha		                PHA             ; begin setdp macro
.3950c5		08		php		                PHP
.3950c6		c2 20		rep #$20	                REP #$20        ; set A long
.3950c8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3950cb		5b		tcd		                TCD
.3950cc		28		plp		                PLP
.3950cd		68		pla		                PLA             ; end setdp macro
.3950ce		c2 30		rep #$30	                REP #$30        ; set A&X long
.3950d0		22 2a 4e 39	jsl $394e2a	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.3950d4		22 e4 43 39	jsl $3943e4	                JSL DOS_PARSE_PATH          ; Parse the path
.3950d8		22 fe 3f 39	jsl $393ffe	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.3950dc		b0 03		bcs $3950e1	                BCS get_root_dir            ; If successful: get the root directory
.3950de		82 b6 04	brl $395597	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.3950e1						get_root_dir
.3950e1		c2 30		rep #$30	                REP #$30        ; set A&X long
.3950e3		22 b3 3c 39	jsl $393cb3	                JSL DOS_DIROPEN
.3950e7		b0 03		bcs $3950ec	                BCS success
.3950e9		82 ab 04	brl $395597	                BRL IF_PASSFAILURE
.3950ec		82 af 04	brl $39559e	success         BRL IF_SUCCESS
.3950ef						IF_DIRNEXT
.3950ef		5c 4d 3d 39	jmp $393d4d	                JML DOS_DIRNEXT
.3950f3						IF_DELETE
.3950f3		da		phx		                PHX
.3950f4		5a		phy		                PHY
.3950f5		0b		phd		                PHD
.3950f6		8b		phb		                PHB
.3950f7		08		php		                PHP
.3950f8		48		pha		                PHA             ; begin setdbr macro
.3950f9		08		php		                PHP
.3950fa		e2 20		sep #$20	                SEP #$20        ; set A short
.3950fc		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3950fe		48		pha		                PHA
.3950ff		ab		plb		                PLB
.395100		28		plp		                PLP
.395101		68		pla		                PLA             ; end setdbr macro
.395102		48		pha		                PHA             ; begin setdp macro
.395103		08		php		                PHP
.395104		c2 20		rep #$20	                REP #$20        ; set A long
.395106		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395109		5b		tcd		                TCD
.39510a		28		plp		                PLP
.39510b		68		pla		                PLA             ; end setdp macro
.39510c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39510e		22 7c 44 39	jsl $39447c	                JSL DOS_FINDFILE
.395112		b0 03		bcs $395117	                BCS get_first_clus
.395114		82 80 04	brl $395597	                BRL IF_PASSFAILURE
.395117						get_first_clus
.395117		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.39511a		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39511c		85 10		sta $0330	                STA DOS_CLUS_ID
.39511e		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395121		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395123		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395125		a5 10		lda $0330	                LDA DOS_CLUS_ID
.395127		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.39512a		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39512c		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.39512f		22 aa 46 39	jsl $3946aa	del_loop        JSL NEXTCLUSTER
.395133		90 2f		bcc $395164	                BCC del_one
.395135		a5 10		lda $0330	                LDA DOS_CLUS_ID
.395137		8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.39513a		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39513c		8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.39513f		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.395142		85 10		sta $0330	                STA DOS_CLUS_ID
.395144		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.395147		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395149		22 8b 4a 39	jsl $394a8b	                JSL DELCLUSTER32
.39514d		b0 03		bcs $395152	                BCS go_next
.39514f		82 45 04	brl $395597	                BRL IF_PASSFAILURE
.395152						go_next
.395152		ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.395155		85 10		sta $0330	                STA DOS_CLUS_ID
.395157		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.39515a		ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.39515d		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39515f		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.395162		80 cb		bra $39512f	                BRA del_loop
.395164						del_one
.395164		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.395167		85 10		sta $0330	                STA DOS_CLUS_ID
.395169		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.39516c		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39516e		22 e5 49 39	jsl $3949e5	                JSL DELCLUSTER
.395172		b0 03		bcs $395177	                BCS free_dir_entry
.395174		82 20 04	brl $395597	                BRL IF_PASSFAILURE
.395177						free_dir_entry
.395177		e2 20		sep #$20	                SEP #$20        ; set A short
.395179		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.39517c		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.39517e		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395180		22 cc 3e 39	jsl $393ecc	                JSL DOS_DIRWRITE                ; Write the directory entry back
.395184		b0 03		bcs $395189	                BCS ret_success
.395186		82 0e 04	brl $395597	                BRL IF_PASSFAILURE
.395189		82 12 04	brl $39559e	ret_success     BRL IF_SUCCESS
.39518c						IF_DIRREAD
.39518c		da		phx		                PHX
.39518d		5a		phy		                PHY
.39518e		0b		phd		                PHD
.39518f		8b		phb		                PHB
.395190		08		php		                PHP
.395191		48		pha		                PHA             ; begin setdbr macro
.395192		08		php		                PHP
.395193		e2 20		sep #$20	                SEP #$20        ; set A short
.395195		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395197		48		pha		                PHA
.395198		ab		plb		                PLB
.395199		28		plp		                PLP
.39519a		68		pla		                PLA             ; end setdbr macro
.39519b		48		pha		                PHA             ; begin setdp macro
.39519c		08		php		                PHP
.39519d		c2 20		rep #$20	                REP #$20        ; set A long
.39519f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3951a2		5b		tcd		                TCD
.3951a3		28		plp		                PLP
.3951a4		68		pla		                PLA             ; end setdp macro
.3951a5		c2 30		rep #$30	                REP #$30        ; set A&X long
.3951a7		22 7c 44 39	jsl $39447c	                JSL DOS_FINDFILE
.3951ab		b0 03		bcs $3951b0	                BCS success
.3951ad		82 e3 03	brl $395593	                BRL IF_FAILURE
.3951b0		82 eb 03	brl $39559e	success         BRL IF_SUCCESS
.3951b3						IF_DIRWRITE
.3951b3		5c cc 3e 39	jmp $393ecc	                JML DOS_DIRWRITE
.3951b7						IF_LOAD
.3951b7		da		phx		                PHX
.3951b8		5a		phy		                PHY
.3951b9		0b		phd		                PHD
.3951ba		8b		phb		                PHB
.3951bb		08		php		                PHP
.3951bc		48		pha		                PHA             ; begin setdbr macro
.3951bd		08		php		                PHP
.3951be		e2 20		sep #$20	                SEP #$20        ; set A short
.3951c0		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3951c2		48		pha		                PHA
.3951c3		ab		plb		                PLB
.3951c4		28		plp		                PLP
.3951c5		68		pla		                PLA             ; end setdbr macro
.3951c6		48		pha		                PHA             ; begin setdp macro
.3951c7		08		php		                PHP
.3951c8		c2 20		rep #$20	                REP #$20        ; set A long
.3951ca		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3951cd		5b		tcd		                TCD
.3951ce		28		plp		                PLP
.3951cf		68		pla		                PLA             ; end setdp macro
.3951d0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3951d2		22 e3 4e 39	jsl $394ee3	                JSL IF_OPEN
.3951d6		b0 03		bcs $3951db	                BCS setup                   ; If success: start setting things up
.3951d8		82 bc 03	brl $395597	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.3951db						setup
.3951db		c2 20		rep #$20	                REP #$20        ; set A long
.3951dd		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.3951e0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951e2		85 2c		sta $034c	                STA DOS_FILE_SIZE
.3951e4		c8		iny		                INY
.3951e5		c8		iny		                INY
.3951e6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951e8		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3951ea		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.3951ed		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951ef		85 30		sta $0350	                STA DOS_SRC_PTR
.3951f1		c8		iny		                INY
.3951f2		c8		iny		                INY
.3951f3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951f5		85 32		sta $0352	                STA DOS_SRC_PTR+2
.3951f7		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.3951f9		c9 40 00	cmp #$0040	                CMP #$0040
.3951fc		b0 04		bcs $395202	                BGE load_by_type            ; No: try to load it by type
.3951fe		5c 48 54 39	jmp $395448	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.395202		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.395205		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.395208						type_loop
.395208		e2 20		sep #$20	                SEP #$20        ; set A short
.39520a		bf 4e 52 39	lda $39524e,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.39520e		f0 37		beq $395247	                BEQ no_match                ; If NULL... we didn't get a match
.395210		d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.395213		d0 28		bne $39523d	                BNE next_entry              ; If they don't match, try the next entry
.395215		bf 4f 52 39	lda $39524f,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.395219		d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.39521c		d0 1f		bne $39523d	                BNE next_entry              ; If they don't match, try the next entry
.39521e		bf 50 52 39	lda $395250,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.395222		d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.395225		d0 16		bne $39523d	                BNE next_entry              ; If they don't match, try the next entry
.395227		c2 20		rep #$20	                REP #$20        ; set A long
.395229		bf 51 52 39	lda $395251,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.39522d		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.39522f		e2 20		sep #$20	                SEP #$20        ; set A short
.395231		bf 53 52 39	lda $395253,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.395235		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.395237		a2 00 00	ldx #$0000	                LDX #0
.39523a		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.39523d						next_entry
.39523d		c2 30		rep #$30	                REP #$30        ; set A&X long
.39523f		8a		txa		                TXA
.395240		18		clc		                CLC
.395241		69 06 00	adc #$0006	                ADC #6
.395244		aa		tax		                TAX
.395245		80 c1		bra $395208	                BRA type_loop               ; And check it against the file
.395247						no_match
.395247		e2 20		sep #$20	                SEP #$20        ; set A short
.395249		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.39524b		82 45 03	brl $395593	                BRL IF_FAILURE
>39524e		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>395251		5b 52				                .word <>IF_LOADPGX
>395253		39				                .byte `IF_LOADPGX
>395254		50 47 5a			                .text "PGZ"                 ; "PGZ" --> IF_LOADPGZ
>395257		e3 52				                .word <>IF_LOADPGZ
>395259		39				                .byte `IF_LOADPGZ
>39525a		00				                .byte 0
.39525b						IF_LOADPGX
.39525b		c2 10		rep #$10	                REP #$10        ; set X long
.39525d		e2 20		sep #$20	                SEP #$20        ; set A short
.39525f		a0 00 00	ldy #$0000	                LDY #0
.395262		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.395264		c9 50		cmp #$50	                CMP #'P'
.395266		d0 15		bne $39527d	                BNE fail_sig                        ; If not found, fail
.395268		c8		iny		                INY
.395269		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.39526b		c9 47		cmp #$47	                CMP #'G'
.39526d		d0 0e		bne $39527d	                BNE fail_sig
.39526f		c8		iny		                INY
.395270		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395272		c9 58		cmp #$58	                CMP #'X'
.395274		d0 07		bne $39527d	                BNE fail_sig
.395276		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.395277		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395279		c9 01		cmp #$01	                CMP #$01
.39527b		f0 17		beq $395294	                BEQ get_dest                        ; All passes: go to get the destination address
.39527d		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.39527f		22 93 55 39	jsl $395593	                JSL IF_FAILURE
.395283						adjust_size
.395283		c2 20		rep #$20	                REP #$20        ; set A long
.395285		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.395286		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395288		e9 08 00	sbc #$0008	                SBC #8
.39528b		85 2c		sta $034c	                STA DOS_FILE_SIZE
.39528d		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39528f		e9 00 00	sbc #$0000	                SBC #0
.395292		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395294						get_dest
.395294		c2 20		rep #$20	                REP #$20        ; set A long
.395296		c8		iny		                INY
.395297		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.395299		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.39529b		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.39529d		c8		iny		                INY
.39529e		c8		iny		                INY
.39529f		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.3952a1		85 36		sta $0356	                STA DOS_DST_PTR+2
.3952a3		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.3952a5		c8		iny		                INY                                 ; Point to the first data byte
.3952a6		c8		iny		                INY
.3952a7						copy_loop
.3952a7		e2 20		sep #$20	                SEP #$20        ; set A short
.3952a9		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.3952ab		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.3952ad		c2 20		rep #$20	                REP #$20        ; set A long
.3952af		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.3952b1		d0 02		bne $3952b5	                BNE dec_file_size
.3952b3		e6 36		inc $0356	                INC DOS_DST_PTR+2
.3952b5		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.3952b6		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3952b8		e9 01 00	sbc #$0001	                SBC #1
.3952bb		85 2c		sta $034c	                STA DOS_FILE_SIZE
.3952bd		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3952bf		e9 00 00	sbc #$0000	                SBC #0
.3952c2		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3952c4		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.3952c6		d0 04		bne $3952cc	                BNE next_byte
.3952c8		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3952ca		f0 14		beq $3952e0	                BEQ done                            ; Yes: we're done
.3952cc		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.3952cd		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.3952d0		d0 d5		bne $3952a7	                BNE copy_loop                       ; No: keep copying
.3952d2		22 ae 47 39	jsl $3947ae	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.3952d6		b0 03		bcs $3952db	                BCS next_cluster
.3952d8		82 bc 02	brl $395597	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.3952db		a0 00 00	ldy #$0000	next_cluster    LDY #0
.3952de		80 c7		bra $3952a7	                BRA copy_loop                       ; Go back to copying
.3952e0		82 bb 02	brl $39559e	done            BRL IF_SUCCESS
.3952e3						IF_LOADPGZ
.3952e3		48		pha		                PHA             ; begin setdbr macro
.3952e4		08		php		                PHP
.3952e5		e2 20		sep #$20	                SEP #$20        ; set A short
.3952e7		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3952e9		48		pha		                PHA
.3952ea		ab		plb		                PLB
.3952eb		28		plp		                PLP
.3952ec		68		pla		                PLA             ; end setdbr macro
.3952ed		48		pha		                PHA             ; begin setdp macro
.3952ee		08		php		                PHP
.3952ef		c2 20		rep #$20	                REP #$20        ; set A long
.3952f1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3952f4		5b		tcd		                TCD
.3952f5		28		plp		                PLP
.3952f6		68		pla		                PLA             ; end setdp macro
.3952f7		c2 30		rep #$30	                REP #$30        ; set A&X long
.3952f9		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE                  ; Get the file size
.3952fc		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952fe		85 2c		sta $034c	                STA DOS_FILE_SIZE                   ; And save it to DOS_FILE_SIZE
.395300		c8		iny		                INY
.395301		c8		iny		                INY
.395302		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395304		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395306		e2 20		sep #$20	                SEP #$20        ; set A short
.395308		a0 00 00	ldy #$0000	                LDY #0                              ; Starting at the beginning of the file
.39530b		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "Z" signature
.39530d		c9 5a		cmp #$5a	                CMP #'Z'
.39530f		f0 06		beq $395317	                BEQ start_block                     ; If found, get the starting address
.395311		a9 19		lda #$19	fail_sig        LDA #DOS_ERR_PGZSIG                 ; Fail with a PGZSIG error code
.395313		22 93 55 39	jsl $395593	                JSL IF_FAILURE
.395317		c8		iny		start_block     INY
.395318						get_addr
.395318		e2 20		sep #$20	                SEP #$20        ; set A short
.39531a		22 9d 53 39	jsl $39539d	                JSL IF_FILE_EOF                     ; Check if EOF
.39531e		90 03		bcc $395323	                BCC get_addr_lo
.395320		82 7b 02	brl $39559e	done            BRL IF_SUCCESS                      ; If so: we're done
.395323		22 db 53 39	jsl $3953db	get_addr_lo     JSL IF_READ_NEXT                    ; Get the next byte
.395327		90 47		bcc $395370	                BCC ret_failure                     ; Got an error: pass it on
.395329		85 34		sta $0354	                STA DOS_DST_PTR                     ; Save it as the low byte of the destination address
.39532b		22 db 53 39	jsl $3953db	                JSL IF_READ_NEXT                    ; Get the next byte
.39532f		90 3f		bcc $395370	                BCC ret_failure                     ; Got an error: pass it on
.395331		85 35		sta $0355	                STA DOS_DST_PTR+1                   ; Save it as the middle byte of the destination address
.395333		22 db 53 39	jsl $3953db	                JSL IF_READ_NEXT                    ; Get the next byte
.395337		90 37		bcc $395370	                BCC ret_failure                     ; Got an error: pass it on
.395339		85 36		sta $0356	                STA DOS_DST_PTR+2                   ; Save it as the high byte of the destination address
.39533b		22 db 53 39	jsl $3953db	                JSL IF_READ_NEXT                    ; Get the next byte
.39533f		90 2f		bcc $395370	                BCC ret_failure                     ; Got an error: pass it on
.395341		85 50		sta $0370	                STA DOS_BLOCK_SIZE                  ; Save it as the low byte of the block size
.395343		22 db 53 39	jsl $3953db	                JSL IF_READ_NEXT                    ; Get the next byte
.395347		90 27		bcc $395370	                BCC ret_failure                     ; Got an error: pass it on
.395349		85 51		sta $0371	                STA DOS_BLOCK_SIZE+1                ; Save it as the middle byte of the block size
.39534b		22 db 53 39	jsl $3953db	                JSL IF_READ_NEXT                    ; Get the next byte
.39534f		90 1f		bcc $395370	                BCC ret_failure                     ; Got an error: pass it on
.395351		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2                ; Save it as the high byte of the block size
.395353		64 53		stz $0373	                STZ DOS_BLOCK_SIZE+3                ; And MSB is 0
.395355		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; If DOS_BLOCK_SIZE <> 0, we have data to load
.395357		d0 1a		bne $395373	                BNE read_data
.395359		a5 51		lda $0371	                LDA DOS_BLOCK_SIZE+1
.39535b		d0 16		bne $395373	                BNE read_data
.39535d		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.39535f		d0 12		bne $395373	                BNE read_data
.395361		a5 34		lda $0354	                LDA DOS_DST_PTR                     ; If DOS_BLOCK_SIZE = 0, we have the run address
.395363		85 3c		sta $035c	                STA DOS_RUN_PTR
.395365		a5 35		lda $0355	                LDA DOS_DST_PTR+1
.395367		85 3d		sta $035d	                STA DOS_RUN_PTR+1
.395369		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.39536b		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.39536d		82 2e 02	brl $39559e	                BRL IF_SUCCESS                      ; And finish
.395370		82 20 02	brl $395593	ret_failure     BRL IF_FAILURE                      ; If there was an error, pass it up to the caller
.395373						read_data
.395373		e2 20		sep #$20	                SEP #$20        ; set A short
.395375		22 db 53 39	jsl $3953db	                JSL IF_READ_NEXT                    ; Get the next byte
.395379		90 f5		bcc $395370	                BCC ret_failure
.39537b		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Save it to the destination address
.39537d		c2 20		rep #$20	                REP #$20        ; set A long
.39537f		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Increment the destination pointer
.395381		d0 02		bne $395385	                BNE dec_block_size
.395383		e6 36		inc $0356	                INC DOS_DST_PTR+2
.395385		38		sec		dec_block_size  SEC
.395386		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE
.395388		e9 01 00	sbc #$0001	                SBC #1
.39538b		85 50		sta $0370	                STA DOS_BLOCK_SIZE
.39538d		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.39538f		e9 00 00	sbc #$0000	                SBC #0
.395392		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2
.395394		d0 dd		bne $395373	                BNE read_data
.395396		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; Is block size = 0?
.395398		d0 d9		bne $395373	                BNE read_data                       ; No: keep reading data
.39539a		82 7b ff	brl $395318	                BRL get_addr                        ; Yes: check for another block
.39539d						IF_FILE_EOF
.39539d		48		pha		                PHA
.39539e		5a		phy		                PHY
.39539f		8b		phb		                PHB
.3953a0		0b		phd		                PHD
.3953a1		08		php		                PHP
.3953a2		48		pha		                PHA             ; begin setdbr macro
.3953a3		08		php		                PHP
.3953a4		e2 20		sep #$20	                SEP #$20        ; set A short
.3953a6		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3953a8		48		pha		                PHA
.3953a9		ab		plb		                PLB
.3953aa		28		plp		                PLP
.3953ab		68		pla		                PLA             ; end setdbr macro
.3953ac		48		pha		                PHA             ; begin setdp macro
.3953ad		08		php		                PHP
.3953ae		c2 20		rep #$20	                REP #$20        ; set A long
.3953b0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3953b3		5b		tcd		                TCD
.3953b4		28		plp		                PLP
.3953b5		68		pla		                PLA             ; end setdp macro
.3953b6		e2 20		sep #$20	                SEP #$20        ; set A short
.3953b8		c2 10		rep #$10	                REP #$10        ; set X long
.3953ba		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.3953bd		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y                  ; Restore the index
.3953bf		89 80		bit #$80	                BIT #FD_STAT_EOF                    ; Check if the file is EOF
.3953c1		f0 07		beq $3953ca	                BEQ chk_file_size                   ; If not: check the file size
.3953c3		28		plp		ret_true        PLP                                 ; Return true
.3953c4		2b		pld		                PLD
.3953c5		ab		plb		                PLB
.3953c6		7a		ply		                PLY
.3953c7		68		pla		                PLA
.3953c8		38		sec		                SEC
.3953c9		6b		rtl		                RTL
.3953ca						chk_file_size
.3953ca		c2 20		rep #$20	                REP #$20        ; set A long
.3953cc		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; if DOS_FILE_SIZE = 0
.3953ce		d0 04		bne $3953d4	                BNE ret_false
.3953d0		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3953d2		f0 ef		beq $3953c3	                BEQ ret_true
.3953d4		28		plp		ret_false       PLP                                 ; Return false
.3953d5		2b		pld		                PLD
.3953d6		ab		plb		                PLB
.3953d7		7a		ply		                PLY
.3953d8		68		pla		                PLA
.3953d9		18		clc		                CLC
.3953da		6b		rtl		                RTL
.3953db						IF_READ_NEXT
.3953db		8b		phb		                PHB
.3953dc		0b		phd		                PHD
.3953dd		08		php		                PHP
.3953de		48		pha		                PHA             ; begin setdbr macro
.3953df		08		php		                PHP
.3953e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3953e2		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3953e4		48		pha		                PHA
.3953e5		ab		plb		                PLB
.3953e6		28		plp		                PLP
.3953e7		68		pla		                PLA             ; end setdbr macro
.3953e8		48		pha		                PHA             ; begin setdp macro
.3953e9		08		php		                PHP
.3953ea		c2 20		rep #$20	                REP #$20        ; set A long
.3953ec		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3953ef		5b		tcd		                TCD
.3953f0		28		plp		                PLP
.3953f1		68		pla		                PLA             ; end setdp macro
.3953f2		e2 20		sep #$20	                SEP #$20        ; set A short
.3953f4		c2 10		rep #$10	                REP #$10        ; set X long
.3953f6		22 9d 53 39	jsl $39539d	                JSL IF_FILE_EOF                     ; Check if the file is EOF
.3953fa		90 06		bcc $395402	                BCC get_byte                        ; If not: get the next byte
.3953fc		a9 18		lda #$18	                LDA #DOS_ERR_EOF                    ; If so: return an EOF error
.3953fe		85 0e		sta $032e	                STA DOS_STATUS
.395400		80 3f		bra $395441	                BRA ret_failure
.395402		b7 30		lda [$0350],y	get_byte        LDA [DOS_SRC_PTR],Y                 ; Read the byte...
.395404		48		pha		                PHA                                 ; And save it for the moment
.395405		c2 20		rep #$20	                REP #$20        ; set A long
.395407		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Decrement the file size...
.395409		d0 02		bne $39540d	                BNE dec_low
.39540b		c6 2e		dec $034e	                DEC DOS_FILE_SIZE+2
.39540d		c6 2c		dec $034c	dec_low         DEC DOS_FILE_SIZE
.39540f		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.395411		d0 04		bne $395417	                BNE next_byte
.395413		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395415		f0 1b		beq $395432	                BEQ ret_eof                         ; Yes: mark the file as EOF
.395417						next_byte
.395417		e2 20		sep #$20	                SEP #$20        ; set A short
.395419		c8		iny		                INY                                 ; Move to the next byte
.39541a		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE                ; Have we reached the end of the sector?
.39541d		90 0b		bcc $39542a	                BLT ret_success                     ; No: just return the byte
.39541f		22 ae 47 39	jsl $3947ae	                JSL DOS_READNEXT                    ; Yes: read the next sector
.395423		b0 02		bcs $395427	                BCS reset_index
.395425		80 1a		bra $395441	                BRA ret_failure                     ; If failure: pass the error up the chain
.395427		a0 00 00	ldy #$0000	reset_index     LDY #0                              ; Reset the index
.39542a						ret_success
.39542a		e2 20		sep #$20	                SEP #$20        ; set A short
.39542c		68		pla		                PLA                                 ; Return the byte retrieved
.39542d		28		plp		                PLP
.39542e		2b		pld		                PLD
.39542f		ab		plb		                PLB
.395430		38		sec		                SEC
.395431		6b		rtl		                RTL
.395432						ret_eof
.395432		e2 20		sep #$20	                SEP #$20        ; set A short
.395434		5a		phy		                PHY                                 ; Save the index
.395435		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.395438		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39543a		09 80		ora #$80	                ORA #FD_STAT_EOF                    ; Mark it EOF
.39543c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y                  ; And update the status
.39543e		7a		ply		                PLY                                 ; Restore the index
.39543f		80 e9		bra $39542a	                BRA ret_success
.395441						ret_failure
.395441		e2 20		sep #$20	                SEP #$20        ; set A short
.395443		28		plp		                PLP
.395444		2b		pld		                PLD
.395445		ab		plb		                PLB
.395446		18		clc		                CLC
.395447		6b		rtl		                RTL
.395448						IF_LOADRAW
.395448		c2 30		rep #$30	                REP #$30        ; set A&X long
.39544a		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.39544d						copy_loop
.39544d		e2 20		sep #$20	                SEP #$20        ; set A short
.39544f		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.395451		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395453		c2 20		rep #$20	                REP #$20        ; set A long
.395455		38		sec		                SEC                         ; Count down the number of bytes left
.395456		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395458		e9 01 00	sbc #$0001	                SBC #1
.39545b		85 2c		sta $034c	                STA DOS_FILE_SIZE
.39545d		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39545f		e9 00 00	sbc #$0000	                SBC #0
.395462		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395464		d0 04		bne $39546a	                BNE continue
.395466		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395468		f0 1b		beq $395485	                BEQ close_file              ; If not: we're done
.39546a		c8		iny		continue        INY
.39546b		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.39546e		d0 dd		bne $39544d	                BNE copy_loop               ; No: keep processing the bytes
.395470		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.395471		a5 34		lda $0354	                LDA DOS_DST_PTR
.395473		6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.395476		85 34		sta $0354	                STA DOS_DST_PTR
.395478		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.39547a		69 00 00	adc #$0000	                ADC #0
.39547d		85 36		sta $0356	                STA DOS_DST_PTR+2
.39547f		22 e4 4f 39	jsl $394fe4	                JSL IF_READ                 ; Yes: load the next cluster
.395483		b0 c5		bcs $39544a	                BCS copy_cluster            ; And start copying it
.395485						close_file
.395485		82 16 01	brl $39559e	ret_success     BRL IF_SUCCESS
.395488						IF_NULLBUFFER
.395488		5a		phy		                PHY
.395489		8b		phb		                PHB
.39548a		0b		phd		                PHD
.39548b		08		php		                PHP
.39548c		48		pha		                PHA             ; begin setdbr macro
.39548d		08		php		                PHP
.39548e		e2 20		sep #$20	                SEP #$20        ; set A short
.395490		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395492		48		pha		                PHA
.395493		ab		plb		                PLB
.395494		28		plp		                PLP
.395495		68		pla		                PLA             ; end setdbr macro
.395496		48		pha		                PHA             ; begin setdp macro
.395497		08		php		                PHP
.395498		c2 20		rep #$20	                REP #$20        ; set A long
.39549a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39549d		5b		tcd		                TCD
.39549e		28		plp		                PLP
.39549f		68		pla		                PLA             ; end setdp macro
.3954a0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3954a2		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3954a5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954a7		85 28		sta $0348	                STA DOS_TEMP
.3954a9		c8		iny		                INY
.3954aa		c8		iny		                INY
.3954ab		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954ad		85 2a		sta $034a	                STA DOS_TEMP+2
.3954af		a0 00 00	ldy #$0000	                LDY #0
.3954b2		a9 00 00	lda #$0000	                LDA #0
.3954b5		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.3954b7		c8		iny		                INY
.3954b8		c8		iny		                INY
.3954b9		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.3954bc		d0 f7		bne $3954b5	                BNE loop
.3954be		28		plp		                PLP
.3954bf		2b		pld		                PLD
.3954c0		ab		plb		                PLB
.3954c1		7a		ply		                PLY
.3954c2		6b		rtl		                RTL
.3954c3						IF_COPY2BUFF
.3954c3		5a		phy		                PHY
.3954c4		8b		phb		                PHB
.3954c5		0b		phd		                PHD
.3954c6		08		php		                PHP
.3954c7		48		pha		                PHA             ; begin setdbr macro
.3954c8		08		php		                PHP
.3954c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3954cb		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3954cd		48		pha		                PHA
.3954ce		ab		plb		                PLB
.3954cf		28		plp		                PLP
.3954d0		68		pla		                PLA             ; end setdbr macro
.3954d1		48		pha		                PHA             ; begin setdp macro
.3954d2		08		php		                PHP
.3954d3		c2 20		rep #$20	                REP #$20        ; set A long
.3954d5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3954d8		5b		tcd		                TCD
.3954d9		28		plp		                PLP
.3954da		68		pla		                PLA             ; end setdp macro
.3954db		c2 30		rep #$30	                REP #$30        ; set A&X long
.3954dd		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3954e0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954e2		85 28		sta $0348	                STA DOS_TEMP
.3954e4		c8		iny		                INY
.3954e5		c8		iny		                INY
.3954e6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954e8		85 2a		sta $034a	                STA DOS_TEMP+2
.3954ea		a0 00 00	ldy #$0000	                LDY #0
.3954ed						copy_loop
.3954ed		e2 20		sep #$20	                SEP #$20        ; set A short
.3954ef		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.3954f1		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.3954f3		c2 20		rep #$20	                REP #$20        ; set A long
.3954f5		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.3954f7		d0 02		bne $3954fb	                BNE adv_dest
.3954f9		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.3954fb		c8		iny		adv_dest        INY                         ; Count it
.3954fc		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.3954ff		f0 0c		beq $39550d	                BEQ done                    ; Yes: we're done
.395501		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.395503		c5 38		cmp $0358	                CMP DOS_END_PTR
.395505		d0 e6		bne $3954ed	                BNE copy_loop               ; No: keep copying
.395507		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395509		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.39550b		d0 e0		bne $3954ed	                BNE copy_loop
.39550d		28		plp		done            PLP
.39550e		2b		pld		                PLD
.39550f		ab		plb		                PLB
.395510		7a		ply		                PLY
.395511		6b		rtl		                RTL
.395512						IF_SAVE
.395512		da		phx		                PHX
.395513		5a		phy		                PHY
.395514		0b		phd		                PHD
.395515		8b		phb		                PHB
.395516		08		php		                PHP
.395517		48		pha		                PHA             ; begin setdbr macro
.395518		08		php		                PHP
.395519		e2 20		sep #$20	                SEP #$20        ; set A short
.39551b		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39551d		48		pha		                PHA
.39551e		ab		plb		                PLB
.39551f		28		plp		                PLP
.395520		68		pla		                PLA             ; end setdbr macro
.395521		48		pha		                PHA             ; begin setdp macro
.395522		08		php		                PHP
.395523		c2 20		rep #$20	                REP #$20        ; set A long
.395525		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395528		5b		tcd		                TCD
.395529		28		plp		                PLP
.39552a		68		pla		                PLA             ; end setdp macro
.39552b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39552d		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.395530		38		sec		                SEC
.395531		a5 38		lda $0358	                LDA DOS_END_PTR
.395533		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.395535		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395537		c8		iny		                INY
.395538		c8		iny		                INY
.395539		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.39553b		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.39553d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39553f		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.395542		18		clc		                CLC
.395543		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395545		69 01 00	adc #$0001	                ADC #1
.395548		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39554a		90 09		bcc $395555	                BCC first_block
.39554c		c8		iny		                INY
.39554d		c8		iny		                INY
.39554e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395550		69 00 00	adc #$0000	                ADC #0
.395553		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395555		22 88 54 39	jsl $395488	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395559		22 c3 54 39	jsl $3954c3	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.39555d		22 76 4f 39	jsl $394f76	                JSL IF_CREATE           ; Create file.
.395561		b0 03		bcs $395566	                BCS check_for_end
.395563		82 31 00	brl $395597	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.395566		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.395568		c5 38		cmp $0358	                CMP DOS_END_PTR
.39556a		d0 06		bne $395572	                BNE next_block
.39556c		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.39556e		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.395570		f0 1d		beq $39558f	                BEQ done                ; Yes: we're done
.395572		22 88 54 39	jsl $395488	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395576		22 c3 54 39	jsl $3954c3	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.39557a		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.39557d		a9 00 00	lda #$0000	                LDA #0
.395580		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395582		c8		iny		                INY
.395583		c8		iny		                INY
.395584		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395586		22 49 50 39	jsl $395049	                JSL IF_WRITE            ; Append to the file
.39558a		b0 da		bcs $395566	                BCS check_for_end       ; And try again
.39558c		82 08 00	brl $395597	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.39558f		5c 9e 55 39	jmp $39559e	done            JML IF_SUCCESS
.395593						IF_FAILURE
.395593		e2 20		sep #$20	                SEP #$20        ; set A short
.395595		85 0e		sta $032e	                STA DOS_STATUS
.395597		28		plp		IF_PASSFAILURE  PLP
.395598		18		clc		                CLC
.395599		ab		plb		                PLB
.39559a		2b		pld		                PLD
.39559b		7a		ply		                PLY
.39559c		fa		plx		                PLX
.39559d		6b		rtl		                RTL
.39559e						IF_SUCCESS
.39559e		e2 20		sep #$20	                SEP #$20        ; set A short
.3955a0		64 00		stz $0320	                STZ BIOS_STATUS
.3955a2		64 0e		stz $032e	                STZ DOS_STATUS
.3955a4		28		plp		                PLP
.3955a5		38		sec		                SEC
.3955a6		ab		plb		                PLB
.3955a7		2b		pld		                PLD
.3955a8		7a		ply		                PLY
.3955a9		fa		plx		                PLX
.3955aa		6b		rtl		                RTL
.3955ab						IF_RUN
.3955ab		da		phx		                PHX
.3955ac		5a		phy		                PHY
.3955ad		0b		phd		                PHD
.3955ae		8b		phb		                PHB
.3955af		08		php		                PHP
.3955b0		48		pha		                PHA             ; begin setdbr macro
.3955b1		08		php		                PHP
.3955b2		e2 20		sep #$20	                SEP #$20        ; set A short
.3955b4		a9 00		lda #$00	                LDA #0
.3955b6		48		pha		                PHA
.3955b7		ab		plb		                PLB
.3955b8		28		plp		                PLP
.3955b9		68		pla		                PLA             ; end setdbr macro
.3955ba		48		pha		                PHA             ; begin setdp macro
.3955bb		08		php		                PHP
.3955bc		c2 20		rep #$20	                REP #$20        ; set A long
.3955be		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3955c1		5b		tcd		                TCD
.3955c2		28		plp		                PLP
.3955c3		68		pla		                PLA             ; end setdp macro
.3955c4		e2 20		sep #$20	                SEP #$20        ; set A short
.3955c6		c2 10		rep #$10	                REP #$10        ; set X long
.3955c8		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.3955ca		a2 00 00	ldx #$0000	                LDX #0
.3955cd		9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.3955d1		e8		inx		                INX
.3955d2		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.3955d5		d0 f6		bne $3955cd	                BNE clr_fd_loop
.3955d7		c2 20		rep #$20	                REP #$20        ; set A long
.3955d9		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.3955dc		8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.3955e0		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.3955e3		8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.3955e7		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.3955e9		8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.3955ed		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.3955ef		8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.3955f3		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.3955f6		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.3955f8		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.3955fa		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.3955fd		85 20		sta $0340	                STA DOS_FD_PTR
.3955ff		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.395602		85 22		sta $0342	                STA DOS_FD_PTR+2
.395604		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.395607		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.39560b		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.39560f		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.395613		b0 03		bcs $395618	                BCS chk_execute
.395615		82 7f ff	brl $395597	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.395618						chk_execute
.395618		c2 20		rep #$20	                REP #$20        ; set A long
.39561a		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.39561c		d0 0b		bne $395629	                BNE try_execute                         ; If so: call it
.39561e		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.395620		d0 07		bne $395629	                BNE try_execute
.395622		e2 20		sep #$20	                SEP #$20        ; set A short
.395624		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.395626		82 6a ff	brl $395593	                BRL IF_FAILURE
.395629						try_execute
.395629		e2 20		sep #$20	                SEP #$20        ; set A short
.39562b		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.39562d		48		pha		                PHA
.39562e		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.395630		48		pha		                PHA
.395631		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.395633		48		pha		                PHA
.395634		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.395636		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.395638		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.39563c		e2 20		sep #$20	                SEP #$20        ; set A short
.39563e		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.39563f		68		pla		                PLA
.395640		68		pla		                PLA
.395641		82 5a ff	brl $39559e	                BRL IF_SUCCESS                          ; Return success
.395644						IF_ALLOCFD
.395644		da		phx		                PHX
.395645		5a		phy		                PHY
.395646		0b		phd		                PHD
.395647		8b		phb		                PHB
.395648		08		php		                PHP
.395649		48		pha		                PHA             ; begin setdbr macro
.39564a		08		php		                PHP
.39564b		e2 20		sep #$20	                SEP #$20        ; set A short
.39564d		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39564f		48		pha		                PHA
.395650		ab		plb		                PLB
.395651		28		plp		                PLP
.395652		68		pla		                PLA             ; end setdbr macro
.395653		48		pha		                PHA             ; begin setdp macro
.395654		08		php		                PHP
.395655		c2 20		rep #$20	                REP #$20        ; set A long
.395657		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39565a		5b		tcd		                TCD
.39565b		28		plp		                PLP
.39565c		68		pla		                PLA             ; end setdp macro
.39565d		c2 10		rep #$10	                REP #$10        ; set X long
.39565f		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.395662						chk_fd
.395662		e2 20		sep #$20	                SEP #$20        ; set A short
.395664		bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.395667		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.395669		f0 14		beq $39567f	                BEQ found                           ; No: flag and return the found descriptor
.39566b						next_fd
.39566b		c2 20		rep #$20	                REP #$20        ; set A long
.39566d		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.39566e		18		clc		                CLC
.39566f		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.395672		aa		tax		                TAX
.395673		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.395676		90 ea		bcc $395662	                BLT chk_fd                          ; No: check this new file descriptor
.395678		e2 20		sep #$20	                SEP #$20        ; set A short
.39567a		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.39567c		82 14 ff	brl $395593	                BRL IF_FAILURE
.39567f		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.395681		9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.395684		c2 20		rep #$20	                REP #$20        ; set A long
.395686		8a		txa		                TXA
.395687		18		clc		                CLC
.395688		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.39568b		85 20		sta $0340	                STA @b DOS_FD_PTR
.39568d		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.395690		69 00 00	adc #$0000	                ADC #0
.395693		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395695		82 06 ff	brl $39559e	                BRL IF_SUCCESS                      ; Return this file descriptor
.395698						IF_FREEFD
.395698		da		phx		                PHX
.395699		5a		phy		                PHY
.39569a		0b		phd		                PHD
.39569b		8b		phb		                PHB
.39569c		08		php		                PHP
.39569d		48		pha		                PHA             ; begin setdbr macro
.39569e		08		php		                PHP
.39569f		e2 20		sep #$20	                SEP #$20        ; set A short
.3956a1		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3956a3		48		pha		                PHA
.3956a4		ab		plb		                PLB
.3956a5		28		plp		                PLP
.3956a6		68		pla		                PLA             ; end setdbr macro
.3956a7		48		pha		                PHA             ; begin setdp macro
.3956a8		08		php		                PHP
.3956a9		c2 20		rep #$20	                REP #$20        ; set A long
.3956ab		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3956ae		5b		tcd		                TCD
.3956af		28		plp		                PLP
.3956b0		68		pla		                PLA             ; end setdp macro
.3956b1		e2 20		sep #$20	                SEP #$20        ; set A short
.3956b3		c2 10		rep #$10	                REP #$10        ; set X long
.3956b5		a9 00		lda #$00	                LDA #0
.3956b7		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.3956b9		82 e2 fe	brl $39559e	                BRL IF_SUCCESS
.3956bc						DOS_SRC2DST
.3956bc		da		phx		                PHX
.3956bd		5a		phy		                PHY
.3956be		0b		phd		                PHD
.3956bf		8b		phb		                PHB
.3956c0		08		php		                PHP
.3956c1		48		pha		                PHA             ; begin setdp macro
.3956c2		08		php		                PHP
.3956c3		c2 20		rep #$20	                REP #$20        ; set A long
.3956c5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3956c8		5b		tcd		                TCD
.3956c9		28		plp		                PLP
.3956ca		68		pla		                PLA             ; end setdp macro
.3956cb		c2 30		rep #$30	                REP #$30        ; set A&X long
.3956cd		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3956d0		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3956d2		aa		tax		                TAX                                     ; X := source buffer address
.3956d3		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.3956d5		a8		tay		                TAY                                     ; Y := destination buffer address
.3956d6		e2 20		sep #$20	                SEP #$20        ; set A short
.3956d8		a9 38		lda #$38	                LDA #`DOS_FILE_BUFFS
.3956da		48		pha		                PHA
.3956db		ab		plb		                PLB
.3956dc		c2 20		rep #$20	                REP #$20        ; set A long
.3956de		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.3956e1		f0 11		beq $3956f4	loop            BEQ done
.3956e3		48		pha		                PHA
.3956e4		e2 20		sep #$20	                SEP #$20        ; set A short
.3956e6		bd 00 00	lda $380000,x	                LDA #0,B,X
.3956e9		99 00 00	sta $380000,y	                STA #0,B,Y
.3956ec		c2 20		rep #$20	                REP #$20        ; set A long
.3956ee		68		pla		                PLA
.3956ef		3a		dec a		                DEC A
.3956f0		e8		inx		                INX
.3956f1		c8		iny		                INY
.3956f2		80 ed		bra $3956e1	                BRA loop
.3956f4		28		plp		done            PLP
.3956f5		ab		plb		                PLB
.3956f6		2b		pld		                PLD
.3956f7		7a		ply		                PLY
.3956f8		fa		plx		                PLX
.3956f9		6b		rtl		                RTL
.3956fa						IF_COPY
.3956fa		da		phx		                PHX
.3956fb		5a		phy		                PHY
.3956fc		0b		phd		                PHD
.3956fd		8b		phb		                PHB
.3956fe		08		php		                PHP
.3956ff		48		pha		                PHA             ; begin setdbr macro
.395700		08		php		                PHP
.395701		e2 20		sep #$20	                SEP #$20        ; set A short
.395703		a9 00		lda #$00	                LDA #0
.395705		48		pha		                PHA
.395706		ab		plb		                PLB
.395707		28		plp		                PLP
.395708		68		pla		                PLA             ; end setdbr macro
.395709		48		pha		                PHA             ; begin setdp macro
.39570a		08		php		                PHP
.39570b		c2 20		rep #$20	                REP #$20        ; set A long
.39570d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395710		5b		tcd		                TCD
.395711		28		plp		                PLP
.395712		68		pla		                PLA             ; end setdp macro
.395713		22 44 56 39	jsl $395644	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.395717		b0 03		bcs $39571c	                BCS set_src_path
.395719		82 7b fe	brl $395597	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.39571c						set_src_path
.39571c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39571e		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.395721		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.395723		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395725		c8		iny		                INY
.395726		c8		iny		                INY
.395727		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.395729		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39572b						alloc_dest
.39572b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39572d		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.39572f		85 30		sta $0350	                STA @b DOS_SRC_PTR
.395731		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395733		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.395735		22 44 56 39	jsl $395644	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.395739		b0 0f		bcs $39574a	                BCS set_paths                   ; If everything is ok... start setting the paths
.39573b		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.39573d		85 20		sta $0340	                STA @b DOS_FD_PTR
.39573f		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395741		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395743		22 98 56 39	jsl $395698	                JSL IF_FREEFD                   ; And free it
.395747		82 4d fe	brl $395597	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.39574a						set_paths
.39574a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39574c		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.39574e		85 34		sta $0354	                STA @b DOS_DST_PTR
.395750		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395752		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395754		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.395757		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.395759		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39575b		c8		iny		                INY
.39575c		c8		iny		                INY
.39575d		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.39575f		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395761		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395763		85 20		sta $0340	                STA @b DOS_FD_PTR
.395765		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395767		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395769		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.39576d		b0 10		bcs $39577f	                BCS src_open                    ; If success, work with the openned file
.39576f		00		brk #		                BRK
.395770		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395772		85 20		sta $0340	                STA @b DOS_FD_PTR
.395774		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395776		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395778		22 98 56 39	jsl $395698	                JSL IF_FREEFD                   ; And free it
.39577c		82 bc ff	brl $39573b	                BRL err_free_src_fd             ; Free the source file descriptor
.39577f		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.395782		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395784		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395786		c8		iny		                INY
.395787		c8		iny		                INY
.395788		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.39578a		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39578c		22 bc 56 39	jsl $3956bc	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.395790		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395792		85 20		sta $0340	                STA @b DOS_FD_PTR
.395794		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395796		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395798		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.39579c		b0 0f		bcs $3957ad	                BCS read_next                   ; If sucessful, try to get the next cluster
.39579e		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3957a0		85 20		sta $0340	                STA @b DOS_FD_PTR
.3957a2		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3957a4		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3957a6		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.3957aa		82 c3 ff	brl $395770	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.3957ad						read_next
.3957ad		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3957af		85 20		sta $0340	                STA @b DOS_FD_PTR
.3957b1		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3957b3		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3957b5		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.3957b9		b0 19		bcs $3957d4	                BCS copy2dest                   ; If successful, copy the sector
.3957bb		e2 20		sep #$20	                SEP #$20        ; set A short
.3957bd		a5 0e		lda $032e	                LDA @b DOS_STATUS
.3957bf		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.3957c1		f0 32		beq $3957f5	                BEQ file_copied                 ; Yes: we're done copying
.3957c3						err_dest_close
.3957c3		c2 20		rep #$20	                REP #$20        ; set A long
.3957c5		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3957c7		85 20		sta $0340	                STA @b DOS_FD_PTR
.3957c9		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3957cb		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3957cd		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.3957d1		82 ca ff	brl $39579e	                BRL err_src_close               ; Close the source and throw an error
.3957d4						copy2dest
.3957d4		22 bc 56 39	jsl $3956bc	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.3957d8		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.3957db		a9 00 00	lda #$0000	                LDA #0
.3957de		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3957e0		c8		iny		                INY
.3957e1		c8		iny		                INY
.3957e2		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3957e4		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3957e6		85 20		sta $0340	                STA @b DOS_FD_PTR
.3957e8		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3957ea		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3957ec		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.3957f0		90 d1		bcc $3957c3	                BCC err_dest_close              ; If error: close all files and throw the error
.3957f2		82 b8 ff	brl $3957ad	                BRL read_next                   ; Otherwise: repeat the loop
.3957f5						file_copied
.3957f5		c2 20		rep #$20	                REP #$20        ; set A long
.3957f7		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3957f9		85 20		sta $0340	                STA @b DOS_FD_PTR
.3957fb		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3957fd		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3957ff		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.395803		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395805		85 20		sta $0340	                STA @b DOS_FD_PTR
.395807		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395809		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39580b		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.39580f		82 8c fd	brl $39559e	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af18f8					    UART1_BASE = $AF18F8        ; Base address for UART 1 (COM1) in the C256 Foenix U (only 1 Serial port)
=$af18f8					    UART2_BASE = $AF18F8
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.395812						UART_SELECT
.395812		08		php		            PHP
.395813		c2 20		rep #$20	                REP #$20        ; set A long
.395815		c9 02 00	cmp #$0002	            CMP #2
.395818		f0 07		beq $395821	            BEQ is_COM2
.39581a		c2 20		rep #$20	                REP #$20        ; set A long
.39581c		a9 f8 18	lda #$18f8	            LDA #<>UART1_BASE
.39581f		80 05		bra $395826	            BRA setaddr
.395821						is_COM2
.395821		c2 20		rep #$20	                REP #$20        ; set A long
.395823		a9 f8 18	lda #$18f8	            LDA #<>UART2_BASE
.395826		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.39582a		e2 20		sep #$20	                SEP #$20        ; set A short
.39582c		a9 af		lda #$af	            LDA #`UART1_BASE
.39582e		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395832		28		plp		            PLP
.395833		6b		rtl		            RTL
.395834						UART_SETBPS
.395834		08		php		            PHP
.395835		0b		phd		            PHD
.395836		48		pha		                PHA             ; begin setdp macro
.395837		08		php		                PHP
.395838		c2 20		rep #$20	                REP #$20        ; set A long
.39583a		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.39583d		5b		tcd		                TCD
.39583e		28		plp		                PLP
.39583f		68		pla		                PLA             ; end setdp macro
.395840		c2 30		rep #$30	                REP #$30        ; set A&X long
.395842		48		pha		            PHA
.395843		e2 20		sep #$20	                SEP #$20        ; set A short
.395845		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395848		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.39584a		09 80		ora #$80	            ORA #LCR_DLB
.39584c		97 00		sta [$0700],y	            STA [CURRUART],Y
.39584e		c2 20		rep #$20	                REP #$20        ; set A long
.395850		68		pla		            PLA
.395851		a0 00 00	ldy #$0000	            LDY #UART_DLL
.395854		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.395856		e2 20		sep #$20	                SEP #$20        ; set A short
.395858		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.39585b		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.39585d		49 80		eor #$80	            EOR #LCR_DLB
.39585f		97 00		sta [$0700],y	            STA [CURRUART],Y
.395861		2b		pld		            PLD
.395862		28		plp		            PLP
.395863		6b		rtl		            RTL
.395864						UART_SETLCR
.395864		08		php		            PHP
.395865		0b		phd		            PHD
.395866		48		pha		                PHA             ; begin setdp macro
.395867		08		php		                PHP
.395868		c2 20		rep #$20	                REP #$20        ; set A long
.39586a		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.39586d		5b		tcd		                TCD
.39586e		28		plp		                PLP
.39586f		68		pla		                PLA             ; end setdp macro
.395870		e2 20		sep #$20	                SEP #$20        ; set A short
.395872		c2 10		rep #$10	                REP #$10        ; set X long
.395874		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.395876		a0 03 00	ldy #$0003	            LDY #UART_LCR
.395879		97 00		sta [$0700],y	            STA [CURRUART],Y
.39587b		2b		pld		            PLD
.39587c		28		plp		            PLP
.39587d		6b		rtl		            RTL
.39587e						UART_INIT
.39587e		08		php		            PHP
.39587f		0b		phd		            PHD
.395880		c2 30		rep #$30	                REP #$30        ; set A&X long
.395882		48		pha		                PHA             ; begin setdp macro
.395883		08		php		                PHP
.395884		c2 20		rep #$20	                REP #$20        ; set A long
.395886		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395889		5b		tcd		                TCD
.39588a		28		plp		                PLP
.39588b		68		pla		                PLA             ; end setdp macro
.39588c		a9 01 00	lda #$0001	            LDA #UART_115200
.39588f		22 34 58 39	jsl $395834	            JSL UART_SETBPS
.395893		e2 20		sep #$20	                SEP #$20        ; set A short
.395895		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.395897		22 64 58 39	jsl $395864	            JSL UART_SETLCR
.39589b		a9 e1		lda #$e1	            LDA #%11100001
.39589d		a0 02 00	ldy #$0002	            LDY #UART_FCR
.3958a0		97 00		sta [$0700],y	            STA [CURRUART],Y
.3958a2		2b		pld		            PLD
.3958a3		28		plp		            PLP
.3958a4		6b		rtl		            RTL
.3958a5						UART_HASBYT
.3958a5		08		php		            PHP
.3958a6		0b		phd		            PHD
.3958a7		c2 30		rep #$30	                REP #$30        ; set A&X long
.3958a9		48		pha		                PHA             ; begin setdp macro
.3958aa		08		php		                PHP
.3958ab		c2 20		rep #$20	                REP #$20        ; set A long
.3958ad		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3958b0		5b		tcd		                TCD
.3958b1		28		plp		                PLP
.3958b2		68		pla		                PLA             ; end setdp macro
.3958b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3958b5		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.3958b8		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.3958ba		29 01		and #$01	            AND #LSR_DATA_AVAIL
.3958bc		d0 04		bne $3958c2	            BNE ret_true            ; If flag is set, return true
.3958be		2b		pld		ret_false   PLD                     ; Return false
.3958bf		28		plp		            PLP
.3958c0		18		clc		            CLC
.3958c1		6b		rtl		            RTL
.3958c2		2b		pld		ret_true    PLD                     ; Return true
.3958c3		28		plp		            PLP
.3958c4		38		sec		            SEC
.3958c5		6b		rtl		            RTL
.3958c6						UART_GETC
.3958c6		08		php		            PHP
.3958c7		0b		phd		            PHD
.3958c8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3958ca		48		pha		                PHA             ; begin setdp macro
.3958cb		08		php		                PHP
.3958cc		c2 20		rep #$20	                REP #$20        ; set A long
.3958ce		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3958d1		5b		tcd		                TCD
.3958d2		28		plp		                PLP
.3958d3		68		pla		                PLA             ; end setdp macro
.3958d4		e2 20		sep #$20	                SEP #$20        ; set A short
.3958d6		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.3958d9		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.3958db		29 01		and #$01	            AND #LSR_DATA_AVAIL
.3958dd		f0 fa		beq $3958d9	            BEQ wait_getc           ; If the flag is clear, wait
.3958df		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.3958e2		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.3958e4		2b		pld		            PLD
.3958e5		28		plp		            PLP
.3958e6		6b		rtl		            RTL
.3958e7						UART_PUTC
.3958e7		08		php		            PHP
.3958e8		0b		phd		            PHD
.3958e9		c2 30		rep #$30	                REP #$30        ; set A&X long
.3958eb		48		pha		                PHA             ; begin setdp macro
.3958ec		08		php		                PHP
.3958ed		c2 20		rep #$20	                REP #$20        ; set A long
.3958ef		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3958f2		5b		tcd		                TCD
.3958f3		28		plp		                PLP
.3958f4		68		pla		                PLA             ; end setdp macro
.3958f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3958f7		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.3958f8		a0 05 00	ldy #$0005	            LDY #UART_LSR
.3958fb		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.3958fd		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.3958ff		f0 fa		beq $3958fb	            BEQ wait_putc
.395901		68		pla		            PLA
.395902		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.395905		97 00		sta [$0700],y	            STA [CURRUART],Y
.395907		2b		pld		            PLD
.395908		28		plp		            PLP
.395909		6b		rtl		            RTL
.39590a						UART_PUTS
.39590a		08		php		            PHP
.39590b		e2 20		sep #$20	                SEP #$20        ; set A short
.39590d		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.395910		f0 07		beq $395919	            BEQ done
.395912		22 e7 58 39	jsl $3958e7	            JSL UART_PUTC
.395916		e8		inx		            INX
.395917		80 f4		bra $39590d	            BRA put_loop
.395919		28		plp		done        PLP
.39591a		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.39591b						JOYSTICK_SET_NES_MODE
.39591b		e2 20		sep #$20	                SEP #$20        ; set A short
.39591d		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395921		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395923		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395927		6b		rtl		          RTL
.395928						JOYSTICK_SET_SNES_MODE
.395928		e2 20		sep #$20	                SEP #$20        ; set A short
.39592a		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39592e		29 fb		and #$fb	          AND #~NES_SNES_JOY
.395930		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395932		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395936		6b		rtl		          RTL
.395937						JOYSTICK_ENABLE_NES_SNES_PORT0
.395937		e2 20		sep #$20	                SEP #$20        ; set A short
.395939		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39593d		29 fe		and #$fe	          AND #~NES_SNES_EN0
.39593f		09 01		ora #$01	          ORA #NES_SNES_EN0
.395941		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395945		6b		rtl		          RTL
.395946						JOYSTICK_ENABLE_NES_SNES_PORT1
.395946		e2 20		sep #$20	                SEP #$20        ; set A short
.395948		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39594c		29 fd		and #$fd	          AND #~NES_SNES_EN1
.39594e		09 02		ora #$02	          ORA #NES_SNES_EN1
.395950		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395954		6b		rtl		          RTL
.395955						JOYSTICK_DISABLE_NES_SNES_PORT0
.395955		e2 20		sep #$20	                SEP #$20        ; set A short
.395957		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39595b		29 fe		and #$fe	          AND #~NES_SNES_EN0
.39595d		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395961		6b		rtl		          RTL
.395962						JOYSTICK_DISABLE_NES_SNES_PORT1
.395962		e2 20		sep #$20	                SEP #$20        ; set A short
.395964		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395968		29 fd		and #$fd	          AND #~NES_SNES_EN1
.39596a		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39596e		6b		rtl		          RTL
.39596f						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.39596f		e2 20		sep #$20	                SEP #$20        ; set A short
.395971		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395975		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395977		c9 00		cmp #$00	          CMP #$00
.395979		f0 14		beq $39598f	          BEQ END_OF_JOYSTICK_POLL
.39597b		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39597f		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395981		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395985						JOYSTICK_POLLING_ISNOTOVER
.395985		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395989		29 40		and #$40	          AND #NES_SNES_DONE
.39598b		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.39598d		d0 f6		bne $395985	          BNE JOYSTICK_POLLING_ISNOTOVER
.39598f						END_OF_JOYSTICK_POLL
.39598f		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/sdc_library.asm

.395990						SDC_TEST
.395990		8b		phb		                PHB
.395991		0b		phd		                PHD
.395992		08		php		                PHP
.395993		48		pha		                PHA             ; begin setdbr macro
.395994		08		php		                PHP
.395995		e2 20		sep #$20	                SEP #$20        ; set A short
.395997		a9 00		lda #$00	                LDA #0
.395999		48		pha		                PHA
.39599a		ab		plb		                PLB
.39599b		28		plp		                PLP
.39599c		68		pla		                PLA             ; end setdbr macro
.39599d		48		pha		                PHA             ; begin setdp macro
.39599e		08		php		                PHP
.39599f		c2 20		rep #$20	                REP #$20        ; set A long
.3959a1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3959a4		5b		tcd		                TCD
.3959a5		28		plp		                PLP
.3959a6		68		pla		                PLA             ; end setdp macro
.3959a7		e2 20		sep #$20	                SEP #$20        ; set A short
.3959a9		a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.3959ab		8d 1e 00	sta $001e	                STA @w CURCOLOR
.3959ae		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.3959b2		22 a0 10 00	jsl $0010a0	                JSL CSRHOME
.3959b6		22 f6 59 39	jsl $3959f6	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.3959ba		b0 03		bcs $3959bf	                BCS init_ok
.3959bc		82 15 00	brl $3959d4	                BRL done
.3959bf		a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.3959c1		85 01		sta $0321	                STA BIOS_DEV
.3959c3		22 fe 3f 39	jsl $393ffe	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.3959c7		b0 03		bcs $3959cc	                BCS mount_ok
.3959c9		82 08 00	brl $3959d4	                BRL done
.3959cc		22 b5 50 39	jsl $3950b5	mount_ok        JSL IF_DIROPEN
.3959d0		b0 02		bcs $3959d4	                BCS all_ok
.3959d2		80 00		bra $3959d4	                BRA done
.3959d4						all_ok
.3959d4		22 6c 10 00	jsl $00106c	done            JSL PRINTCR
.3959d8		28		plp		                PLP
.3959d9		2b		pld		                PLD
.3959da		ab		plb		                PLB
.3959db		6b		rtl		                RTL
.3959dc						SDC_WAITBUSY
.3959dc		08		php		                PHP
.3959dd		e2 20		sep #$20	                SEP #$20        ; set A short
.3959df		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.3959e3		29 01		and #$01	                AND #SDC_TRANS_BUSY
.3959e5		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.3959e7		f0 f6		beq $3959df	                BEQ wait_xact
.3959e9		28		plp		                PLP
.3959ea		6b		rtl		                RTL
.3959eb						SDC_RESET
.3959eb		08		php		                PHP
.3959ec		e2 20		sep #$20	                SEP #$20        ; set A short
.3959ee		a9 01		lda #$01	                LDA #1
.3959f0		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.3959f4		28		plp		                PLP
.3959f5		6b		rtl		                RTL
.3959f6						SDC_INIT
.3959f6		0b		phd		                PHD
.3959f7		8b		phb		                PHB
.3959f8		08		php		                PHP
.3959f9		48		pha		                PHA             ; begin setdbr macro
.3959fa		08		php		                PHP
.3959fb		e2 20		sep #$20	                SEP #$20        ; set A short
.3959fd		a9 00		lda #$00	                LDA #0
.3959ff		48		pha		                PHA
.395a00		ab		plb		                PLB
.395a01		28		plp		                PLP
.395a02		68		pla		                PLA             ; end setdbr macro
.395a03		48		pha		                PHA             ; begin setdp macro
.395a04		08		php		                PHP
.395a05		c2 20		rep #$20	                REP #$20        ; set A long
.395a07		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a0a		5b		tcd		                TCD
.395a0b		28		plp		                PLP
.395a0c		68		pla		                PLA             ; end setdp macro
.395a0d		e2 20		sep #$20	                SEP #$20        ; set A short
.395a0f		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.395a13		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.395a15		f0 04		beq $395a1b	                BEQ start_trans                     ; Yes: start the transaction
.395a17		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.395a19		80 22		bra $395a3d	                BRA set_error
.395a1b		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.395a1d		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.395a21		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395a23		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395a27		22 dc 59 39	jsl $3959dc	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.395a2b		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395a2f		d0 07		bne $395a38	                BNE ret_error                       ; Is there one? Process the error
.395a31		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.395a33		28		plp		                PLP
.395a34		ab		plb		                PLB
.395a35		2b		pld		                PLD
.395a36		38		sec		                SEC
.395a37		6b		rtl		                RTL
.395a38		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395a3b		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.395a3d		85 00		sta $0320	set_error       STA BIOS_STATUS
.395a3f		28		plp		                PLP
.395a40		ab		plb		                PLB
.395a41		2b		pld		                PLD
.395a42		18		clc		                CLC
.395a43		6b		rtl		                RTL
.395a44						SDC_GETBLOCK
.395a44		0b		phd		                PHD
.395a45		8b		phb		                PHB
.395a46		08		php		                PHP
.395a47		48		pha		                PHA             ; begin setdbr macro
.395a48		08		php		                PHP
.395a49		e2 20		sep #$20	                SEP #$20        ; set A short
.395a4b		a9 00		lda #$00	                LDA #0
.395a4d		48		pha		                PHA
.395a4e		ab		plb		                PLB
.395a4f		28		plp		                PLP
.395a50		68		pla		                PLA             ; end setdbr macro
.395a51		48		pha		                PHA             ; begin setdp macro
.395a52		08		php		                PHP
.395a53		c2 20		rep #$20	                REP #$20        ; set A long
.395a55		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a58		5b		tcd		                TCD
.395a59		28		plp		                PLP
.395a5a		68		pla		                PLA             ; end setdp macro
.395a5b		e2 20		sep #$20	                SEP #$20        ; set A short
.395a5d		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.395a61		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.395a63		f0 04		beq $395a69	                BEQ led_on                          ; Yes: turn on the LED
.395a65		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.395a67		80 71		bra $395ada	                BRA ret_error
.395a69		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395a6d		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395a6f		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395a73		a9 00		lda #$00	                LDA #0
.395a75		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395a79		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395a7b		0a		asl a		                ASL A
.395a7c		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395a80		a5 03		lda $0323	                LDA BIOS_LBA+1
.395a82		2a		rol a		                ROL A
.395a83		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395a87		a5 04		lda $0324	                LDA BIOS_LBA+2
.395a89		2a		rol a		                ROL A
.395a8a		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395a8e		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395a90		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395a94		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395a96		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395a9a		22 dc 59 39	jsl $3959dc	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395a9e		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395aa2		d0 36		bne $395ada	                BNE ret_error                       ; Is there one? Process the error
.395aa4		e2 20		sep #$20	                SEP #$20        ; set A short
.395aa6		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395aaa		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395aac		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395ab0		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395ab2		c2 10		rep #$10	                REP #$10        ; set X long
.395ab4		a0 00 00	ldy #$0000	                LDY #0
.395ab7		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395abb		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.395abd		c8		iny		                INY                                 ; Advance to the next byte
.395abe		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395ac1		d0 f4		bne $395ab7	                BNE loop_rd                         ; No: keep reading
.395ac3		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395ac7		d0 11		bne $395ada	                BNE ret_error                       ; Is there one? Process the error
.395ac9		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395acb		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395acf		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395ad1		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395ad5		28		plp		                PLP
.395ad6		ab		plb		                PLB
.395ad7		2b		pld		                PLD
.395ad8		38		sec		                SEC
.395ad9		6b		rtl		                RTL
.395ada		85 00		sta $0320	ret_error       STA BIOS_STATUS
.395adc		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395ae0		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395ae2		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395ae6		28		plp		                PLP
.395ae7		ab		plb		                PLB
.395ae8		2b		pld		                PLD
.395ae9		18		clc		                CLC
.395aea		6b		rtl		                RTL
.395aeb						SDC_PUTBLOCK
.395aeb		0b		phd		                PHD
.395aec		8b		phb		                PHB
.395aed		08		php		                PHP
.395aee		48		pha		                PHA             ; begin setdbr macro
.395aef		08		php		                PHP
.395af0		e2 20		sep #$20	                SEP #$20        ; set A short
.395af2		a9 00		lda #$00	                LDA #0
.395af4		48		pha		                PHA
.395af5		ab		plb		                PLB
.395af6		28		plp		                PLP
.395af7		68		pla		                PLA             ; end setdbr macro
.395af8		48		pha		                PHA             ; begin setdp macro
.395af9		08		php		                PHP
.395afa		c2 20		rep #$20	                REP #$20        ; set A long
.395afc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395aff		5b		tcd		                TCD
.395b00		28		plp		                PLP
.395b01		68		pla		                PLA             ; end setdp macro
.395b02		e2 20		sep #$20	                SEP #$20        ; set A short
.395b04		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.395b08		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.395b0a		f0 04		beq $395b10	                BEQ check_wp                        ; Yes: check for write protect
.395b0c		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.395b0e		80 65		bra $395b75	                BRA ret_error
.395b10		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.395b12		f0 04		beq $395b18	                BEQ led_on                          ; Yes: start the transaction
.395b14		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.395b16		80 5d		bra $395b75	                BRA ret_error
.395b18		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395b1c		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395b1e		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395b22		c2 10		rep #$10	                REP #$10        ; set X long
.395b24		a0 00 00	ldy #$0000	                LDY #0
.395b27		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.395b29		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.395b2d		c8		iny		                INY                                 ; Advance to the next byte
.395b2e		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395b31		d0 f4		bne $395b27	                BNE loop_wr                         ; No: keep writing
.395b33		a9 00		lda #$00	                LDA #0
.395b35		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395b39		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.395b3b		0a		asl a		                ASL A
.395b3c		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395b40		a5 03		lda $0323	                LDA BIOS_LBA+1
.395b42		2a		rol a		                ROL A
.395b43		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395b47		a5 04		lda $0324	                LDA BIOS_LBA+2
.395b49		2a		rol a		                ROL A
.395b4a		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395b4e		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.395b50		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395b54		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395b56		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395b5a		22 dc 59 39	jsl $3959dc	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395b5e		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395b62		d0 11		bne $395b75	                BNE ret_error                       ; Is there one? Process the error
.395b64		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395b66		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395b6a		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395b6c		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395b70		28		plp		                PLP
.395b71		ab		plb		                PLB
.395b72		2b		pld		                PLD
.395b73		38		sec		                SEC
.395b74		6b		rtl		                RTL
.395b75		85 00		sta $0320	ret_error       STA BIOS_STATUS
.395b77		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395b7b		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395b7d		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395b81		28		plp		                PLP
.395b82		ab		plb		                PLB
.395b83		2b		pld		                PLD
.395b84		18		clc		                CLC
.395b85		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395b86						FDC_TEST
.395b86		8b		phb		                    PHB
.395b87		0b		phd		                    PHD
.395b88		08		php		                    PHP
.395b89		48		pha		                PHA             ; begin setdbr macro
.395b8a		08		php		                PHP
.395b8b		e2 20		sep #$20	                SEP #$20        ; set A short
.395b8d		a9 00		lda #$00	                LDA #0
.395b8f		48		pha		                PHA
.395b90		ab		plb		                PLB
.395b91		28		plp		                PLP
.395b92		68		pla		                PLA             ; end setdbr macro
.395b93		48		pha		                PHA             ; begin setdp macro
.395b94		08		php		                PHP
.395b95		c2 20		rep #$20	                REP #$20        ; set A long
.395b97		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395b9a		5b		tcd		                TCD
.395b9b		28		plp		                PLP
.395b9c		68		pla		                PLA             ; end setdp macro
.395b9d		e2 20		sep #$20	                SEP #$20        ; set A short
.395b9f		a9 f0		lda #$f0	                    LDA #$F0
.395ba1		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395ba4		22 a8 10 00	jsl $0010a8	                    JSL CLRSCREEN
.395ba8		22 a0 10 00	jsl $0010a0	                    JSL CSRHOME
.395bac		c2 30		rep #$30	                REP #$30        ; set A&X long
.395bae		22 7c 5e 39	jsl $395e7c	                    JSL FDC_Init
.395bb2		b0 03		bcs $395bb7	                    BCS init_ok
.395bb4		82 20 00	brl $395bd7	                    BRL motor_off
.395bb7		22 7b 65 39	jsl $39657b	init_ok             JSL FDC_CHK_MEDIA
.395bbb		90 03		bcc $395bc0	                    BCC no_media
.395bbd		82 03 00	brl $395bc3	                    BRL is_ok1
.395bc0						no_media
.395bc0		82 14 00	brl $395bd7	                    BRL motor_off
.395bc3		22 0e 64 39	jsl $39640e	is_ok1              JSL FDC_MOUNT
.395bc7		90 03		bcc $395bcc	                    BCC mount_err
.395bc9		82 03 00	brl $395bcf	                    BRL is_ok2
.395bcc						mount_err
.395bcc		82 08 00	brl $395bd7	                    BRL motor_off
.395bcf		22 e3 5b 39	jsl $395be3	is_ok2              JSL FDC_TEST_PUTBLOCK
.395bd3		b0 02		bcs $395bd7	                    BCS all_ok
.395bd5		80 00		bra $395bd7	                    BRA motor_off
.395bd7						all_ok
.395bd7		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.395bdb		22 2c 5f 39	jsl $395f2c	                    JSL FDC_Motor_Off
.395bdf		28		plp		                    PLP
.395be0		2b		pld		                    PLD
.395be1		ab		plb		                    PLB
.395be2		6b		rtl		                    RTL
.395be3						FDC_TEST_PUTBLOCK
.395be3		e2 20		sep #$20	                SEP #$20        ; set A short
.395be5		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395be7		a2 00 00	ldx #$0000	                    LDX #0
.395bea		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395bee		1a		inc a		                    INC A
.395bef		e8		inx		                    INX
.395bf0		e0 00 02	cpx #$0200	                    CPX #512
.395bf3		d0 f5		bne $395bea	                    BNE init_loop
.395bf5		c2 20		rep #$20	                REP #$20        ; set A long
.395bf7		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.395bfa		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.395bfe		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.395c01		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.395c05		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.395c08		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.395c0c		a9 00 00	lda #$0000	                    LDA #0
.395c0f		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.395c13		22 a2 63 39	jsl $3963a2	                    JSL FDC_PUTBLOCK                ; Try to write the data
.395c17		6b		rtl		                    RTL
>395c18		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395c20		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>395c30		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.395c34						FDC_Check_RQM
.395c34		0b		phd		                    PHD
.395c35		08		php		                    PHP
.395c36		48		pha		                PHA             ; begin setdp macro
.395c37		08		php		                PHP
.395c38		c2 20		rep #$20	                REP #$20        ; set A long
.395c3a		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395c3d		5b		tcd		                TCD
.395c3e		28		plp		                PLP
.395c3f		68		pla		                PLA             ; end setdp macro
.395c40		e2 20		sep #$20	                SEP #$20        ; set A short
.395c42		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395c44		22 ad 3b 39	jsl $393bad	                    JSL ISETTIMEOUT
.395c48		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395c4a		30 12		bmi $395c5e	                    BMI time_out            ; If so: signal a time out
.395c4c		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395c50		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395c52		f0 f4		beq $395c48	                    BEQ loop
.395c54		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395c56		22 ad 3b 39	jsl $393bad	                    JSL ISETTIMEOUT
.395c5a		28		plp		                    PLP
.395c5b		2b		pld		                    PLD
.395c5c		38		sec		                    SEC
.395c5d		60		rts		                    RTS
.395c5e		28		plp		time_out            PLP
.395c5f		2b		pld		                    PLD
.395c60		18		clc		                    CLC
.395c61		60		rts		                    RTS
.395c62						FDC_Check_DRV0_BSY
.395c62		0b		phd		                    PHD
.395c63		08		php		                    PHP
.395c64		48		pha		                PHA             ; begin setdp macro
.395c65		08		php		                PHP
.395c66		c2 20		rep #$20	                REP #$20        ; set A long
.395c68		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395c6b		5b		tcd		                TCD
.395c6c		28		plp		                PLP
.395c6d		68		pla		                PLA             ; end setdp macro
.395c6e		e2 20		sep #$20	                SEP #$20        ; set A short
.395c70		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395c72		22 ad 3b 39	jsl $393bad	                    JSL ISETTIMEOUT
.395c76		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395c78		30 12		bmi $395c8c	                    BMI time_out            ; If so: signal a time out
.395c7a		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395c7e		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.395c80		d0 f4		bne $395c76	                    BNE loop
.395c82		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395c84		22 ad 3b 39	jsl $393bad	                    JSL ISETTIMEOUT
.395c88		28		plp		                    PLP
.395c89		2b		pld		                    PLD
.395c8a		38		sec		                    SEC
.395c8b		60		rts		                    RTS
.395c8c		28		plp		time_out            PLP
.395c8d		2b		pld		                    PLD
.395c8e		18		clc		                    CLC
.395c8f		60		rts		                    RTS
.395c90						FDC_Check_CMD_BSY
.395c90		0b		phd		                    PHD
.395c91		08		php		                    PHP
.395c92		48		pha		                PHA             ; begin setdp macro
.395c93		08		php		                PHP
.395c94		c2 20		rep #$20	                REP #$20        ; set A long
.395c96		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395c99		5b		tcd		                TCD
.395c9a		28		plp		                PLP
.395c9b		68		pla		                PLA             ; end setdp macro
.395c9c		e2 20		sep #$20	                SEP #$20        ; set A short
.395c9e		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395ca0		22 ad 3b 39	jsl $393bad	                    JSL ISETTIMEOUT
.395ca4		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395ca6		30 12		bmi $395cba	                    BMI time_out            ; If so: signal a time out
.395ca8		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395cac		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395cae		d0 f4		bne $395ca4	                    BNE loop
.395cb0		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395cb2		22 ad 3b 39	jsl $393bad	                    JSL ISETTIMEOUT
.395cb6		28		plp		                    PLP
.395cb7		2b		pld		                    PLD
.395cb8		38		sec		                    SEC
.395cb9		60		rts		                    RTS
.395cba		28		plp		time_out            PLP
.395cbb		2b		pld		                    PLD
.395cbc		18		clc		                    CLC
.395cbd		60		rts		                    RTS
.395cbe						FDC_Can_Read_Data
.395cbe		0b		phd		                    PHD
.395cbf		08		php		                    PHP
.395cc0		48		pha		                PHA             ; begin setdp macro
.395cc1		08		php		                PHP
.395cc2		c2 20		rep #$20	                REP #$20        ; set A long
.395cc4		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395cc7		5b		tcd		                TCD
.395cc8		28		plp		                PLP
.395cc9		68		pla		                PLA             ; end setdp macro
.395cca		e2 20		sep #$20	                SEP #$20        ; set A short
.395ccc		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395cce		22 ad 3b 39	jsl $393bad	                    JSL ISETTIMEOUT
.395cd2		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395cd4		30 14		bmi $395cea	                    BMI time_out            ; If so: signal a time out
.395cd6		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395cda		29 40		and #$40	                    AND #FDC_MSR_DIO
.395cdc		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.395cde		d0 f2		bne $395cd2	                    BNE loop
.395ce0		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395ce2		22 ad 3b 39	jsl $393bad	                    JSL ISETTIMEOUT
.395ce6		28		plp		                    PLP
.395ce7		2b		pld		                    PLD
.395ce8		38		sec		                    SEC
.395ce9		60		rts		                    RTS
.395cea		28		plp		time_out            PLP
.395ceb		2b		pld		                    PLD
.395cec		18		clc		                    CLC
.395ced		60		rts		                    RTS
.395cee						FDC_CAN_WRITE
.395cee		0b		phd		                    PHD
.395cef		08		php		                    PHP
.395cf0		48		pha		                PHA             ; begin setdp macro
.395cf1		08		php		                PHP
.395cf2		c2 20		rep #$20	                REP #$20        ; set A long
.395cf4		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395cf7		5b		tcd		                TCD
.395cf8		28		plp		                PLP
.395cf9		68		pla		                PLA             ; end setdp macro
.395cfa		e2 20		sep #$20	                SEP #$20        ; set A short
.395cfc		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395cfe		22 ad 3b 39	jsl $393bad	                    JSL ISETTIMEOUT
.395d02		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395d04		30 14		bmi $395d1a	                    BMI time_out            ; If so: signal a time out
.395d06		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395d0a		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395d0c		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395d0e		d0 f2		bne $395d02	                    BNE loop
.395d10		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395d12		22 ad 3b 39	jsl $393bad	                    JSL ISETTIMEOUT
.395d16		28		plp		                    PLP
.395d17		2b		pld		                    PLD
.395d18		38		sec		                    SEC
.395d19		60		rts		                    RTS
.395d1a		28		plp		time_out            PLP
.395d1b		2b		pld		                    PLD
.395d1c		18		clc		                    CLC
.395d1d		60		rts		                    RTS
.395d1e						FDC_DELAY_10MS
.395d1e		da		phx		                    PHX
.395d1f		08		php		                    PHP
.395d20		c2 10		rep #$10	                REP #$10        ; set X long
.395d22		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.395d25		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.395d26		ca		dex		                    DEX
.395d27		e0 00 00	cpx #$0000	                    CPX #0
.395d2a		d0 f9		bne $395d25	                    BNE loop
.395d2c		28		plp		                    PLP
.395d2d		fa		plx		                    PLX
.395d2e		6b		rtl		                    RTL
.395d2f						FDC_COMMAND
.395d2f		da		phx		                    PHX
.395d30		8b		phb		                    PHB
.395d31		0b		phd		                    PHD
.395d32		08		php		                    PHP
.395d33		48		pha		                PHA             ; begin setdbr macro
.395d34		08		php		                PHP
.395d35		e2 20		sep #$20	                SEP #$20        ; set A short
.395d37		a9 00		lda #$00	                LDA #0
.395d39		48		pha		                PHA
.395d3a		ab		plb		                PLB
.395d3b		28		plp		                PLP
.395d3c		68		pla		                PLA             ; end setdbr macro
.395d3d		48		pha		                PHA             ; begin setdp macro
.395d3e		08		php		                PHP
.395d3f		c2 20		rep #$20	                REP #$20        ; set A long
.395d41		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395d44		5b		tcd		                TCD
.395d45		28		plp		                PLP
.395d46		68		pla		                PLA             ; end setdp macro
.395d47		22 1e 5d 39	jsl $395d1e	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.395d4b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.395d4d		a2 00		ldx #$00	                    LDX #0
.395d4f		a9 00		lda #$00	                    LDA #0
.395d51		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.395d54		e8		inx		                    INX
.395d55		e0 10		cpx #$10	                    CPX #16
.395d57		d0 f8		bne $395d51	                    BNE clr_results
.395d59		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.395d5d		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395d5f		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395d61		f0 04		beq $395d67	                    BEQ start_send                          ; If so, start sending
.395d63		22 7c 5e 39	jsl $395e7c	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.395d67						start_send
.395d67		e2 10		sep #$10	                SEP #$10        ; set X short
.395d69		a2 00		ldx #$00	                    LDX #0
.395d6b		20 34 5c	jsr $395c34	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.395d6e		b0 03		bcs $395d73	                    BCS send_param
.395d70		82 5e 00	brl $395dd1	                    BRL time_out                            ; If there was a timeout, flag the time out
.395d73		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.395d76		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.395d7a		22 1e 5d 39	jsl $395d1e	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.395d7e		e8		inx		                    INX                                     ; Advance to the next byte
.395d7f		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.395d82		d0 e7		bne $395d6b	                    BNE send_loop                           ; Keep sending until we've sent them all
.395d84		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.395d87		d0 03		bne $395d8c	                    BNE chk_data_dir
.395d89		82 80 00	brl $395e0c	                    BRL result_phase                        ; If 0: we just want a result
.395d8c		10 3c		bpl $395dca	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.395d8e						wr_data
.395d8e		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395d90		30 03		bmi $395d95	                    BMI wr_chk_rqm
.395d92		82 3c 00	brl $395dd1	                    BRL time_out                            ; If not, raise an error
.395d95		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.395d99		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395d9b		f0 f1		beq $395d8e	                    BEQ wr_data_rdy
.395d9d		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.395d9f		d0 03		bne $395da4	                    BNE wr_data_phase                       ; If so: transfer the data
.395da1		82 68 00	brl $395e0c	                    BRL result_phase                          ; If not: it's an error
.395da4						wr_data_phase
.395da4		c2 10		rep #$10	                REP #$10        ; set X long
.395da6		a0 00 00	ldy #$0000	                    LDY #0
.395da9		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.395dab		30 03		bmi $395db0	                    BMI wr_chk_nondma
.395dad		82 21 00	brl $395dd1	                    BRL time_out                            ; If not, raise an error
.395db0		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395db4		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395db6		f0 54		beq $395e0c	                    BEQ result_phase                        ; If not: break out to result phase
.395db8		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.395dba		f0 ed		beq $395da9	                    BEQ wr_data_loop                        ; No: keep waiting
.395dbc		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.395dbe		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.395dc2		c8		iny		                    INY                                     ; Move to the next position
.395dc3		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395dc6		d0 e1		bne $395da9	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.395dc8		80 42		bra $395e0c	                    BRA result_phase                        ; ready for the result phase
.395dca		20 be 5c	jsr $395cbe	rd_data             JSR FDC_Can_Read_Data
.395dcd		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395dcf		30 07		bmi $395dd8	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.395dd1						time_out
.395dd1		e2 20		sep #$20	                SEP #$20        ; set A short
.395dd3		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.395dd5		82 9c 00	brl $395e74	                    BRL pass_error
.395dd8		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.395ddc		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395dde		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395de0		d0 eb		bne $395dcd	                    BNE rd_data_rdy
.395de2		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395de6		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395de8		d0 03		bne $395ded	                    BNE rd_data_phase                       ; If so: transfer the data
.395dea		82 83 00	brl $395e70	                    BRL error                               ; If not: it's an error
.395ded						rd_data_phase
.395ded		c2 10		rep #$10	                REP #$10        ; set X long
.395def		a0 00 00	ldy #$0000	                    LDY #0
.395df2		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.395df4		10 db		bpl $395dd1	                    BPL time_out                            ; If not: throw a timeout error
.395df6		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.395dfa		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395dfc		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395dfe		d0 f2		bne $395df2	                    BNE rd_data_loop
.395e00		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.395e04		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.395e06		c8		iny		                    INY                                     ; Move to the next position
.395e07		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395e0a		d0 e6		bne $395df2	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.395e0c		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.395e0f		f0 34		beq $395e45	                    BEQ chk_busy                            ; Then we're done
.395e11		e2 10		sep #$10	                SEP #$10        ; set X short
.395e13		a2 00		ldx #$00	                    LDX #0
.395e15		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.395e17		22 ad 3b 39	jsl $393bad	                    JSL ISETTIMEOUT
.395e1b		20 be 5c	jsr $395cbe	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.395e1e		90 b1		bcc $395dd1	                    BCC time_out                            ; If there was a time out, raise an error
.395e20		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395e24		20 be 5c	jsr $395cbe	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.395e27		90 a8		bcc $395dd1	                    BCC time_out                            ; If there was a time out, raise an error
.395e29		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395e2d		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.395e30		20 34 5c	jsr $395c34	                    JSR FDC_Check_RQM
.395e33		90 9c		bcc $395dd1	                    BCC time_out                            ; If there was a time out, flag the error
.395e35		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.395e39		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.395e3b		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.395e3d		d0 06		bne $395e45	                    BNE chk_busy
.395e3f		e8		inx		                    INX                                     ; Move to the next result positions
.395e40		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.395e43		d0 e4		bne $395e29	                    BNE read_result                         ; And keep looping until we've read all
.395e45						chk_busy
.395e45		c2 10		rep #$10	                REP #$10        ; set X long
.395e47		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.395e4a		22 c3 10 39	jsl $3910c3	                    JSL ILOOP_MS
.395e4e		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.395e52		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395e54		f0 12		beq $395e68	                    BEQ done                                ; If not set: we're done
.395e56		20 be 5c	jsr $395cbe	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.395e59		b0 03		bcs $395e5e	                    BCS get_result_byte
.395e5b		82 73 ff	brl $395dd1	                    BRL time_out                            ; If there was a time out, flag the error
.395e5e		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.395e62		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.395e65		e8		inx		                    INX
.395e66		80 dd		bra $395e45	                    BRA chk_busy                            ; And keep checking
.395e68						done
.395e68		64 20		stz $0320	                    STZ BIOS_STATUS
.395e6a		28		plp		                    PLP
.395e6b		2b		pld		                    PLD
.395e6c		ab		plb		                    PLB
.395e6d		fa		plx		                    PLX
.395e6e		38		sec		                    SEC
.395e6f		6b		rtl		                    RTL
.395e70						error
.395e70		e2 20		sep #$20	                SEP #$20        ; set A short
.395e72		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.395e74		85 20		sta $0320	pass_error          STA BIOS_STATUS
.395e76		28		plp		                    PLP
.395e77		2b		pld		                    PLD
.395e78		ab		plb		                    PLB
.395e79		fa		plx		                    PLX
.395e7a		18		clc		                    CLC
.395e7b		6b		rtl		                    RTL
.395e7c						FDC_Init
.395e7c		08		php		                    PHP
.395e7d		c2 10		rep #$10	                REP #$10        ; set X long
.395e7f		e2 20		sep #$20	                SEP #$20        ; set A short
.395e81		a9 00		lda #$00	                    LDA #0
.395e83		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395e87		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.395e8a		a0 00 00	ldy #$0000	                    LDY #0
.395e8d		22 d0 10 39	jsl $3910d0	                    JSL IDELAY
.395e91		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.395e93		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395e97		ea		nop		                    NOP
.395e98		ea		nop		                    NOP
.395e99		ea		nop		                    NOP
.395e9a		ea		nop		                    NOP
.395e9b		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.395e9d		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.395ea1		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.395ea3		8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.395ea7		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.395eaa		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.395ead		22 d0 10 39	jsl $3910d0	                    JSL IDELAY
.395eb1		22 8c 5f 39	jsl $395f8c	                    JSL FDC_Sense_Int_Status
.395eb5		90 25		bcc $395edc	                    BCC pass_failure
.395eb7		22 8c 5f 39	jsl $395f8c	                    JSL FDC_Sense_Int_Status
.395ebb		90 1f		bcc $395edc	                    BCC pass_failure
.395ebd		22 8c 5f 39	jsl $395f8c	                    JSL FDC_Sense_Int_Status
.395ec1		90 19		bcc $395edc	                    BCC pass_failure
.395ec3		22 8c 5f 39	jsl $395f8c	                    JSL FDC_Sense_Int_Status
.395ec7		90 13		bcc $395edc	                    BCC pass_failure
.395ec9		22 4e 60 39	jsl $39604e	                    JSL FDC_Configure_Command
.395ecd		90 0d		bcc $395edc	                    BCC pass_failure
.395ecf		22 f5 5f 39	jsl $395ff5	                    JSL FDC_Specify_Command
.395ed3		90 07		bcc $395edc	                    BCC pass_failure
.395ed5		22 f8 5e 39	jsl $395ef8	                    JSL FDC_Motor_On
.395ed9		28		plp		                    PLP
.395eda		38		sec		                    SEC
.395edb		6b		rtl		                    RTL
.395edc		28		plp		pass_failure        PLP
.395edd		18		clc		                    CLC
.395ede		6b		rtl		                    RTL
.395edf						FDC_MOTOR_NEEDED
.395edf		08		php		                    PHP
.395ee0		c2 20		rep #$20	                REP #$20        ; set A long
.395ee2		78		sei		                    SEI                         ; Turn off interrupts
.395ee3		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.395ee6		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.395eea		e2 20		sep #$20	                SEP #$20        ; set A short
.395eec		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.395ef0		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.395ef2		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.395ef6		28		plp		                    PLP
.395ef7		6b		rtl		                    RTL
.395ef8						FDC_Motor_On
.395ef8		08		php		                    PHP
.395ef9		22 df 5e 39	jsl $395edf	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.395efd		e2 20		sep #$20	                SEP #$20        ; set A short
.395eff		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.395f03		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.395f05		d0 1f		bne $395f26	                    BNE done                    ; If so: skip
.395f07		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.395f09		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395f0d		20 34 5c	jsr $395c34	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.395f10		90 17		bcc $395f29	                    BCC time_out
.395f12		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.395f15		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.395f18		22 d0 10 39	jsl $3910d0	                    JSL IDELAY
.395f1c		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.395f20		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.395f22		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.395f26		28		plp		done                PLP
.395f27		38		sec		                    SEC
.395f28		6b		rtl		                    RTL
.395f29		28		plp		time_out            PLP                         ; Return a timeout error
.395f2a		18		clc		                    CLC
.395f2b		6b		rtl		                    RTL
.395f2c						FDC_Motor_Off
.395f2c		08		php		                    PHP
.395f2d		e2 20		sep #$20	                SEP #$20        ; set A short
.395f2f		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.395f31		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.395f35		c2 20		rep #$20	                REP #$20        ; set A long
.395f37		78		sei		                    SEI                         ; Turn off interrupts
.395f38		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.395f3b		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.395f3f		e2 20		sep #$20	                SEP #$20        ; set A short
.395f41		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.395f45		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.395f47		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.395f4b		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.395f4f		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.395f51		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.395f55		28		plp		                    PLP
.395f56		6b		rtl		                    RTL
.395f57						FDC_Recalibrate_Command
.395f57		0b		phd		                    PHD
.395f58		08		php		                    PHP
.395f59		48		pha		                PHA             ; begin setdp macro
.395f5a		08		php		                PHP
.395f5b		c2 20		rep #$20	                REP #$20        ; set A long
.395f5d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f60		5b		tcd		                TCD
.395f61		28		plp		                PLP
.395f62		68		pla		                PLA             ; end setdp macro
.395f63		22 df 5e 39	jsl $395edf	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.395f67		e2 20		sep #$20	                SEP #$20        ; set A short
.395f69		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.395f6b		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395f6e		a5 00		lda $0300	                    LDA FDC_DRIVE
.395f70		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395f73		a9 02		lda #$02	                    LDA #2
.395f75		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.395f78		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.395f7b		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.395f7e		22 2f 5d 39	jsl $395d2f	                    JSL FDC_COMMAND             ; Issue the command
.395f82		90 04		bcc $395f88	                    BCC pass_failure            ; If failure, pass the failure up
.395f84		28		plp		                    PLP
.395f85		2b		pld		                    PLD
.395f86		38		sec		                    SEC
.395f87		6b		rtl		                    RTL
.395f88		28		plp		pass_failure        PLP
.395f89		2b		pld		                    PLD
.395f8a		18		clc		                    CLC
.395f8b		6b		rtl		                    RTL
.395f8c						FDC_Sense_Int_Status
.395f8c		8b		phb		                    PHB
.395f8d		0b		phd		                    PHD
.395f8e		08		php		                    PHP
.395f8f		48		pha		                PHA             ; begin setdbr macro
.395f90		08		php		                PHP
.395f91		e2 20		sep #$20	                SEP #$20        ; set A short
.395f93		a9 00		lda #$00	                LDA #0
.395f95		48		pha		                PHA
.395f96		ab		plb		                PLB
.395f97		28		plp		                PLP
.395f98		68		pla		                PLA             ; end setdbr macro
.395f99		48		pha		                PHA             ; begin setdp macro
.395f9a		08		php		                PHP
.395f9b		c2 20		rep #$20	                REP #$20        ; set A long
.395f9d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395fa0		5b		tcd		                TCD
.395fa1		28		plp		                PLP
.395fa2		68		pla		                PLA             ; end setdp macro
.395fa3		c2 30		rep #$30	                REP #$30        ; set A&X long
.395fa5		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.395fa8		22 c3 10 39	jsl $3910c3	                    JSL ILOOP_MS
.395fac		e2 20		sep #$20	                SEP #$20        ; set A short
.395fae		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.395fb0		a9 ff		lda #$ff	                    LDA #$FF
.395fb2		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.395fb4		20 90 5c	jsr $395c90	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.395fb7		90 30		bcc $395fe9	                    BCC time_out                        ; If there was a time out, raise an error
.395fb9		20 34 5c	jsr $395c34	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395fbc		90 2b		bcc $395fe9	                    BCC time_out                        ; If there was a time out, raise an error
.395fbe		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.395fc0		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395fc4		20 be 5c	jsr $395cbe	                    JSR FDC_Can_Read_Data
.395fc7		90 20		bcc $395fe9	                    BCC time_out                        ; If there was a time out, raise an error
.395fc9		20 34 5c	jsr $395c34	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395fcc		90 1b		bcc $395fe9	                    BCC time_out                        ; If there was a time out, raise an error
.395fce		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.395fd2		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.395fd4		20 34 5c	jsr $395c34	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395fd7		90 10		bcc $395fe9	                    BCC time_out                        ; If there was a time out, raise an error
.395fd9		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.395fdd		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.395fdf		e2 20		sep #$20	                SEP #$20        ; set A short
.395fe1		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.395fe4		28		plp		                    PLP
.395fe5		2b		pld		                    PLD
.395fe6		ab		plb		                    PLB
.395fe7		38		sec		                    SEC
.395fe8		6b		rtl		                    RTL
.395fe9						time_out
.395fe9		e2 20		sep #$20	                SEP #$20        ; set A short
.395feb		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.395fed		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395ff0		28		plp		                    PLP
.395ff1		2b		pld		                    PLD
.395ff2		ab		plb		                    PLB
.395ff3		18		clc		                    CLC
.395ff4		6b		rtl		                    RTL
.395ff5						FDC_Specify_Command
.395ff5		8b		phb		                    PHB
.395ff6		0b		phd		                    PHD
.395ff7		08		php		                    PHP
.395ff8		48		pha		                PHA             ; begin setdbr macro
.395ff9		08		php		                PHP
.395ffa		e2 20		sep #$20	                SEP #$20        ; set A short
.395ffc		a9 00		lda #$00	                LDA #0
.395ffe		48		pha		                PHA
.395fff		ab		plb		                PLB
.396000		28		plp		                PLP
.396001		68		pla		                PLA             ; end setdbr macro
.396002		48		pha		                PHA             ; begin setdp macro
.396003		08		php		                PHP
.396004		c2 20		rep #$20	                REP #$20        ; set A long
.396006		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396009		5b		tcd		                TCD
.39600a		28		plp		                PLP
.39600b		68		pla		                PLA             ; end setdp macro
.39600c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39600e		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.396011		22 c3 10 39	jsl $3910c3	                    JSL ILOOP_MS
.396015		e2 20		sep #$20	                SEP #$20        ; set A short
.396017		20 90 5c	jsr $395c90	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.39601a		90 26		bcc $396042	                    BCC time_out            ; If there was a time out, raise an error
.39601c		20 34 5c	jsr $395c34	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39601f		90 21		bcc $396042	                    BCC time_out            ; If there was a time out, raise an error
.396021		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.396023		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396027		20 34 5c	jsr $395c34	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39602a		90 16		bcc $396042	                    BCC time_out            ; If there was a time out, raise an error
.39602c		a9 cf		lda #$cf	                    LDA #$CF
.39602e		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396032		20 34 5c	jsr $395c34	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396035		90 0b		bcc $396042	                    BCC time_out            ; If there was a time out, raise an error
.396037		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.396039		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39603d		28		plp		                    PLP
.39603e		2b		pld		                    PLD
.39603f		ab		plb		                    PLB
.396040		38		sec		                    SEC
.396041		6b		rtl		                    RTL
.396042						time_out
.396042		e2 20		sep #$20	                SEP #$20        ; set A short
.396044		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.396046		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396049		28		plp		                    PLP
.39604a		2b		pld		                    PLD
.39604b		ab		plb		                    PLB
.39604c		18		clc		                    CLC
.39604d		6b		rtl		                    RTL
.39604e						FDC_Configure_Command
.39604e		8b		phb		                    PHB
.39604f		0b		phd		                    PHD
.396050		08		php		                    PHP
.396051		48		pha		                PHA             ; begin setdbr macro
.396052		08		php		                PHP
.396053		e2 20		sep #$20	                SEP #$20        ; set A short
.396055		a9 00		lda #$00	                LDA #0
.396057		48		pha		                PHA
.396058		ab		plb		                PLB
.396059		28		plp		                PLP
.39605a		68		pla		                PLA             ; end setdbr macro
.39605b		48		pha		                PHA             ; begin setdp macro
.39605c		08		php		                PHP
.39605d		c2 20		rep #$20	                REP #$20        ; set A long
.39605f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396062		5b		tcd		                TCD
.396063		28		plp		                PLP
.396064		68		pla		                PLA             ; end setdp macro
.396065		c2 30		rep #$30	                REP #$30        ; set A&X long
.396067		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.39606a		22 c3 10 39	jsl $3910c3	                    JSL ILOOP_MS
.39606e		e2 20		sep #$20	                SEP #$20        ; set A short
.396070		20 90 5c	jsr $395c90	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396073		90 36		bcc $3960ab	                    BCC time_out            ; If there was a time out, raise an error
.396075		20 34 5c	jsr $395c34	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396078		90 31		bcc $3960ab	                    BCC time_out            ; If there was a time out, raise an error
.39607a		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.39607c		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396080		20 34 5c	jsr $395c34	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396083		90 26		bcc $3960ab	                    BCC time_out            ; If there was a time out, raise an error
.396085		a9 00		lda #$00	                    LDA #$00
.396087		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39608b		20 34 5c	jsr $395c34	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39608e		90 1b		bcc $3960ab	                    BCC time_out            ; If there was a time out, raise an error
.396090		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.396092		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396096		20 34 5c	jsr $395c34	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396099		90 10		bcc $3960ab	                    BCC time_out            ; If there was a time out, raise an error
.39609b		a9 00		lda #$00	                    LDA #$00
.39609d		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3960a1		20 90 5c	jsr $395c90	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3960a4		90 05		bcc $3960ab	                    BCC time_out            ; If there was a time out, raise an error
.3960a6		28		plp		                    PLP
.3960a7		2b		pld		                    PLD
.3960a8		ab		plb		                    PLB
.3960a9		38		sec		                    SEC
.3960aa		6b		rtl		                    RTL
.3960ab						time_out
.3960ab		e2 20		sep #$20	                SEP #$20        ; set A short
.3960ad		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.3960af		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3960b2		28		plp		                    PLP
.3960b3		2b		pld		                    PLD
.3960b4		ab		plb		                    PLB
.3960b5		18		clc		                    CLC
.3960b6		6b		rtl		                    RTL
.3960b7						FDC_Read_ID_Command
.3960b7		8b		phb		                    PHB
.3960b8		0b		phd		                    PHD
.3960b9		08		php		                    PHP
.3960ba		48		pha		                PHA             ; begin setdbr macro
.3960bb		08		php		                PHP
.3960bc		e2 20		sep #$20	                SEP #$20        ; set A short
.3960be		a9 00		lda #$00	                LDA #0
.3960c0		48		pha		                PHA
.3960c1		ab		plb		                PLB
.3960c2		28		plp		                PLP
.3960c3		68		pla		                PLA             ; end setdbr macro
.3960c4		48		pha		                PHA             ; begin setdp macro
.3960c5		08		php		                PHP
.3960c6		c2 20		rep #$20	                REP #$20        ; set A long
.3960c8		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3960cb		5b		tcd		                TCD
.3960cc		28		plp		                PLP
.3960cd		68		pla		                PLA             ; end setdp macro
.3960ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3960d0		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.3960d2		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3960d5		a9 01		lda #$01	                    LDA #1
.3960d7		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.3960da		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3960dd		a9 07		lda #$07	                    LDA #7
.3960df		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.3960e2		22 2f 5d 39	jsl $395d2f	                    JSL FDC_COMMAND                     ; Issue the command
.3960e6		90 27		bcc $39610f	                    BCC pass_failure
.3960e8		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.3960eb		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.3960ed		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3960f0		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.3960f2		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3960f5		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.3960f7		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3960fa		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.3960fc		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3960ff		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.396101		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396104		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.396106		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396109		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.39610b		28		plp		                    PLP
.39610c		2b		pld		                    PLD
.39610d		ab		plb		                    PLB
.39610e		6b		rtl		                    RTL
.39610f		28		plp		pass_failure        PLP
.396110		2b		pld		                    PLD
.396111		ab		plb		                    PLB
.396112		18		clc		                    CLC
.396113		6b		rtl		                    RTL
.396114						FDC_DumpReg_Command
.396114		0b		phd		                    PHD
.396115		08		php		                    PHP
.396116		e2 20		sep #$20	                SEP #$20        ; set A short
.396118		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.39611a		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39611d		a9 01		lda #$01	                    LDA #1
.39611f		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.396122		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.396125		a9 0a		lda #$0a	                    LDA #10
.396127		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.39612a		22 2f 5d 39	jsl $395d2f	                    JSL FDC_COMMAND                     ; Issue the command
.39612e		90 03		bcc $396133	                    BCC pass_failure
.396130		28		plp		                    PLP
.396131		2b		pld		                    PLD
.396132		6b		rtl		                    RTL
.396133		28		plp		pass_failure        PLP
.396134		2b		pld		                    PLD
.396135		18		clc		                    CLC
.396136		6b		rtl		                    RTL
.396137						FDC_Seek_Track
.396137		8b		phb		                    PHB
.396138		0b		phd		                    PHD
.396139		08		php		                    PHP
.39613a		48		pha		                PHA             ; begin setdbr macro
.39613b		08		php		                PHP
.39613c		e2 20		sep #$20	                SEP #$20        ; set A short
.39613e		a9 00		lda #$00	                LDA #0
.396140		48		pha		                PHA
.396141		ab		plb		                PLB
.396142		28		plp		                PLP
.396143		68		pla		                PLA             ; end setdbr macro
.396144		48		pha		                PHA             ; begin setdp macro
.396145		08		php		                PHP
.396146		c2 20		rep #$20	                REP #$20        ; set A long
.396148		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39614b		5b		tcd		                TCD
.39614c		28		plp		                PLP
.39614d		68		pla		                PLA             ; end setdp macro
.39614e		22 df 5e 39	jsl $395edf	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396152		e2 20		sep #$20	                SEP #$20        ; set A short
.396154		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.396156		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396159		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.39615b		29 01		and #$01	                    AND #$01
.39615d		0a		asl a		                    ASL A
.39615e		0a		asl a		                    ASL A
.39615f		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396161		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396164		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.396166		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396169		a9 03		lda #$03	                    LDA #3
.39616b		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.39616e		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.396171		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.396174		22 2f 5d 39	jsl $395d2f	                    JSL FDC_COMMAND                     ; Issue the command
.396178		90 05		bcc $39617f	                    BCC pass_failure
.39617a		28		plp		                    PLP
.39617b		2b		pld		                    PLD
.39617c		ab		plb		                    PLB
.39617d		38		sec		                    SEC
.39617e		6b		rtl		                    RTL
.39617f		28		plp		pass_failure        PLP
.396180		2b		pld		                    PLD
.396181		ab		plb		                    PLB
.396182		18		clc		                    CLC
.396183		6b		rtl		                    RTL
.396184						FDC_Read_Sector
.396184		8b		phb		                    PHB
.396185		0b		phd		                    PHD
.396186		08		php		                    PHP
.396187		48		pha		                PHA             ; begin setdbr macro
.396188		08		php		                PHP
.396189		e2 20		sep #$20	                SEP #$20        ; set A short
.39618b		a9 00		lda #$00	                LDA #0
.39618d		48		pha		                PHA
.39618e		ab		plb		                PLB
.39618f		28		plp		                PLP
.396190		68		pla		                PLA             ; end setdbr macro
.396191		48		pha		                PHA             ; begin setdp macro
.396192		08		php		                PHP
.396193		c2 20		rep #$20	                REP #$20        ; set A long
.396195		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396198		5b		tcd		                TCD
.396199		28		plp		                PLP
.39619a		68		pla		                PLA             ; end setdp macro
.39619b		22 df 5e 39	jsl $395edf	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.39619f		e2 20		sep #$20	                SEP #$20        ; set A short
.3961a1		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.3961a3		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.3961a5		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3961a8		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3961aa		29 01		and #$01	                    AND #$01
.3961ac		0a		asl a		                    ASL A
.3961ad		0a		asl a		                    ASL A
.3961ae		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.3961b0		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3961b3		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.3961b5		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.3961b8		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.3961ba		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.3961bd		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.3961bf		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.3961c2		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.3961c4		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.3961c7		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.3961c9		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.3961cc		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.3961ce		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.3961d1		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.3961d3		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.3961d6		a9 09		lda #$09	                    LDA #9
.3961d8		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.3961db		a9 01		lda #$01	                    LDA #1
.3961dd		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.3961e0		a9 07		lda #$07	                    LDA #7
.3961e2		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.3961e5		22 2f 5d 39	jsl $395d2f	command             JSL FDC_COMMAND                     ; Issue the command
.3961e9		08		php		                    PHP
.3961ea		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.3961ed		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.3961ef		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3961f2		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.3961f4		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3961f7		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.3961f9		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3961fc		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.3961fe		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396201		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.396203		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396206		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.396208		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.39620b		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.39620d		28		plp		                    PLP
.39620e		90 04		bcc $396214	                    BCC pass_failure
.396210		28		plp		done                PLP
.396211		2b		pld		                    PLD
.396212		ab		plb		                    PLB
.396213		6b		rtl		                    RTL
.396214		28		plp		pass_failure        PLP
.396215		2b		pld		                    PLD
.396216		ab		plb		                    PLB
.396217		18		clc		                    CLC
.396218		6b		rtl		                    RTL
.396219						FDC_Write_Sector
.396219		8b		phb		                    PHB
.39621a		0b		phd		                    PHD
.39621b		08		php		                    PHP
.39621c		48		pha		                PHA             ; begin setdbr macro
.39621d		08		php		                PHP
.39621e		e2 20		sep #$20	                SEP #$20        ; set A short
.396220		a9 00		lda #$00	                LDA #0
.396222		48		pha		                PHA
.396223		ab		plb		                PLB
.396224		28		plp		                PLP
.396225		68		pla		                PLA             ; end setdbr macro
.396226		48		pha		                PHA             ; begin setdp macro
.396227		08		php		                PHP
.396228		c2 20		rep #$20	                REP #$20        ; set A long
.39622a		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39622d		5b		tcd		                TCD
.39622e		28		plp		                PLP
.39622f		68		pla		                PLA             ; end setdp macro
.396230		e2 20		sep #$20	                SEP #$20        ; set A short
.396232		22 df 5e 39	jsl $395edf	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396236		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.396238		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.39623a		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39623d		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.39623f		29 01		and #$01	                    AND #$01
.396241		0a		asl a		                    ASL A
.396242		0a		asl a		                    ASL A
.396243		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396245		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396248		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.39624a		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.39624d		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.39624f		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.396252		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.396254		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.396257		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.396259		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.39625c		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.39625e		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.396261		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.396263		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396266		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396268		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.39626b		a9 09		lda #$09	                    LDA #9
.39626d		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.396270		a9 ff		lda #$ff	                    LDA #$FF
.396272		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.396275		a9 07		lda #$07	                    LDA #7
.396277		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.39627a		22 2f 5d 39	jsl $395d2f	command             JSL FDC_COMMAND                     ; Issue the command
.39627e		08		php		                    PHP
.39627f		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.396282		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.396284		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396287		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.396289		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.39628c		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.39628e		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396291		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.396293		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396296		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.396298		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.39629b		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.39629d		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3962a0		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.3962a2		28		plp		check_status        PLP
.3962a3		90 04		bcc $3962a9	                    BCC pass_failure
.3962a5		28		plp		done                PLP
.3962a6		2b		pld		                    PLD
.3962a7		ab		plb		                    PLB
.3962a8		6b		rtl		                    RTL
.3962a9		28		plp		pass_failure        PLP
.3962aa		2b		pld		                    PLD
.3962ab		ab		plb		                    PLB
.3962ac		18		clc		                    CLC
.3962ad		6b		rtl		                    RTL
.3962ae						DIVIDE32
.3962ae		da		phx		                    PHX
.3962af		5a		phy		                    PHY
.3962b0		0b		phd		                    PHD
.3962b1		08		php		                    PHP
.3962b2		48		pha		                PHA             ; begin setdp macro
.3962b3		08		php		                PHP
.3962b4		c2 20		rep #$20	                REP #$20        ; set A long
.3962b6		a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.3962b9		5b		tcd		                TCD
.3962ba		28		plp		                PLP
.3962bb		68		pla		                PLA             ; end setdp macro
.3962bc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3962be		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.3962c0		64 0a		stz $0316	                    STZ REMAINDER+2
.3962c2		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.3962c5		06 00		asl $030c	loop                ASL DIVIDEND
.3962c7		26 02		rol $030e	                    ROL DIVIDEND+2
.3962c9		26 08		rol $0314	                    ROL REMAINDER
.3962cb		26 0a		rol $0316	                    ROL REMAINDER+2
.3962cd		a5 08		lda $0314	                    LDA REMAINDER
.3962cf		38		sec		                    SEC
.3962d0		e5 04		sbc $0310	                    SBC DIVISOR
.3962d2		a8		tay		                    TAY
.3962d3		a5 0a		lda $0316	                    LDA REMAINDER+2
.3962d5		e5 06		sbc $0312	                    SBC DIVISOR+2
.3962d7		90 06		bcc $3962df	                    BCC skip
.3962d9		85 0a		sta $0316	                    STA REMAINDER+2
.3962db		84 08		sty $0314	                    STY REMAINDER
.3962dd		e6 00		inc $030c	                    INC DIVIDEND
.3962df		ca		dex		skip                DEX
.3962e0		d0 e3		bne $3962c5	                    BNE loop
.3962e2		28		plp		                    PLP
.3962e3		2b		pld		                    PLD
.3962e4		7a		ply		                    PLY
.3962e5		fa		plx		                    PLX
.3962e6		60		rts		                    RTS
.3962e7						LBA2CHS
.3962e7		8b		phb		                    PHB
.3962e8		0b		phd		                    PHD
.3962e9		08		php		                    PHP
.3962ea		48		pha		                PHA             ; begin setdbr macro
.3962eb		08		php		                PHP
.3962ec		e2 20		sep #$20	                SEP #$20        ; set A short
.3962ee		a9 00		lda #$00	                LDA #0
.3962f0		48		pha		                PHA
.3962f1		ab		plb		                PLB
.3962f2		28		plp		                PLP
.3962f3		68		pla		                PLA             ; end setdbr macro
.3962f4		48		pha		                PHA             ; begin setdp macro
.3962f5		08		php		                PHP
.3962f6		c2 20		rep #$20	                REP #$20        ; set A long
.3962f8		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3962fb		5b		tcd		                TCD
.3962fc		28		plp		                PLP
.3962fd		68		pla		                PLA             ; end setdp macro
.3962fe		c2 30		rep #$30	                REP #$30        ; set A&X long
.396300		a5 22		lda $0322	                    LDA BIOS_LBA
.396302		85 0c		sta $030c	                    STA DIVIDEND
.396304		a5 24		lda $0324	                    LDA BIOS_LBA+2
.396306		85 0e		sta $030e	                    STA DIVIDEND+2
.396308		a9 24 00	lda #$0024	                    LDA #36
.39630b		85 10		sta $0310	                    STA DIVISOR
.39630d		64 12		stz $0312	                    STZ DIVISOR+2
.39630f		20 ae 62	jsr $3962ae	                    JSR DIVIDE32
.396312		e2 20		sep #$20	                SEP #$20        ; set A short
.396314		a5 0c		lda $030c	                    LDA DIVIDEND
.396316		85 02		sta $0302	                    STA FDC_CYLINDER
.396318		c2 20		rep #$20	                REP #$20        ; set A long
.39631a		a5 14		lda $0314	                    LDA REMAINDER
.39631c		85 0c		sta $030c	                    STA DIVIDEND
.39631e		a5 16		lda $0316	                    LDA REMAINDER+2
.396320		85 0e		sta $030e	                    STA DIVIDEND+2
.396322		a9 12 00	lda #$0012	                    LDA #18
.396325		85 10		sta $0310	                    STA DIVISOR
.396327		64 12		stz $0312	                    STZ DIVISOR+2
.396329		20 ae 62	jsr $3962ae	                    JSR DIVIDE32
.39632c		e2 20		sep #$20	                SEP #$20        ; set A short
.39632e		a5 0c		lda $030c	                    LDA DIVIDEND
.396330		29 01		and #$01	                    AND #$01
.396332		85 01		sta $0301	                    STA FDC_HEAD
.396334		a5 14		lda $0314	                    LDA REMAINDER
.396336		1a		inc a		                    INC A
.396337		85 03		sta $0303	                    STA FDC_SECTOR
.396339		28		plp		                    PLP
.39633a		2b		pld		                    PLD
.39633b		ab		plb		                    PLB
.39633c		6b		rtl		                    RTL
.39633d						FDC_GETBLOCK
.39633d		8b		phb		                    PHB
.39633e		0b		phd		                    PHD
.39633f		08		php		                    PHP
.396340		48		pha		                PHA             ; begin setdbr macro
.396341		08		php		                PHP
.396342		e2 20		sep #$20	                SEP #$20        ; set A short
.396344		a9 00		lda #$00	                LDA #0
.396346		48		pha		                PHA
.396347		ab		plb		                PLB
.396348		28		plp		                PLP
.396349		68		pla		                PLA             ; end setdbr macro
.39634a		48		pha		                PHA             ; begin setdp macro
.39634b		08		php		                PHP
.39634c		c2 20		rep #$20	                REP #$20        ; set A long
.39634e		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396351		5b		tcd		                TCD
.396352		28		plp		                PLP
.396353		68		pla		                PLA             ; end setdp macro
.396354		e2 20		sep #$20	                SEP #$20        ; set A short
.396356		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.396358		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.39635b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39635d		22 e7 62 39	jsl $3962e7	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.396361		e2 20		sep #$20	                SEP #$20        ; set A short
.396363		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.396365		f0 29		beq $396390	                    BEQ read_failure
.396367						try_read
.396367		c2 20		rep #$20	                REP #$20        ; set A long
.396369		22 84 61 39	jsl $396184	                    JSL FDC_Read_Sector         ; Read the sector
.39636d		90 14		bcc $396383	                    BCC retry
.39636f		e2 20		sep #$20	                SEP #$20        ; set A short
.396371		a5 06		lda $0306	                    LDA FDC_ST0
.396373		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396375		d0 19		bne $396390	                    BNE read_failure
.396377						ret_success
.396377		e2 20		sep #$20	                SEP #$20        ; set A short
.396379		a9 00		lda #$00	                    LDA #0
.39637b		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39637e		28		plp		                    PLP
.39637f		2b		pld		                    PLD
.396380		ab		plb		                    PLB
.396381		38		sec		                    SEC
.396382		6b		rtl		                    RTL
.396383						retry
.396383		e2 20		sep #$20	                SEP #$20        ; set A short
.396385		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.396388		30 13		bmi $39639d	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.39638a		22 7c 5e 39	jsl $395e7c	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.39638e		80 d7		bra $396367	                    BRA try_read                ; And try the read again
.396390						read_failure
.396390		e2 20		sep #$20	                SEP #$20        ; set A short
.396392		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.396394		80 04		bra $39639a	                    BRA ret_failure
.396396						seek_failure
.396396		e2 20		sep #$20	                SEP #$20        ; set A short
.396398		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.39639a		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.39639d		28		plp		pass_failure        PLP
.39639e		2b		pld		                    PLD
.39639f		ab		plb		                    PLB
.3963a0		18		clc		                    CLC
.3963a1		6b		rtl		                    RTL
.3963a2						FDC_PUTBLOCK
.3963a2		8b		phb		                    PHB
.3963a3		0b		phd		                    PHD
.3963a4		08		php		                    PHP
.3963a5		48		pha		                PHA             ; begin setdbr macro
.3963a6		08		php		                PHP
.3963a7		e2 20		sep #$20	                SEP #$20        ; set A short
.3963a9		a9 00		lda #$00	                LDA #0
.3963ab		48		pha		                PHA
.3963ac		ab		plb		                PLB
.3963ad		28		plp		                PLP
.3963ae		68		pla		                PLA             ; end setdbr macro
.3963af		48		pha		                PHA             ; begin setdp macro
.3963b0		08		php		                PHP
.3963b1		c2 20		rep #$20	                REP #$20        ; set A long
.3963b3		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3963b6		5b		tcd		                TCD
.3963b7		28		plp		                PLP
.3963b8		68		pla		                PLA             ; end setdp macro
.3963b9		e2 20		sep #$20	                SEP #$20        ; set A short
.3963bb		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.3963bd		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.3963c0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3963c2		22 e7 62 39	jsl $3962e7	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.3963c6		22 19 62 39	jsl $396219	retry               JSL FDC_Write_Sector        ; Write the sector
.3963ca		b0 03		bcs $3963cf	                    BCS chk_st0
.3963cc		82 28 00	brl $3963f7	                    BRL attempt_retry
.3963cf						chk_st0
.3963cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3963d1		a5 06		lda $0306	                    LDA FDC_ST0
.3963d3		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.3963d5		d0 0c		bne $3963e3	                    BNE write_failure
.3963d7						ret_success
.3963d7		e2 20		sep #$20	                SEP #$20        ; set A short
.3963d9		a9 00		lda #$00	                    LDA #0
.3963db		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3963de		28		plp		                    PLP
.3963df		2b		pld		                    PLD
.3963e0		ab		plb		                    PLB
.3963e1		38		sec		                    SEC
.3963e2		6b		rtl		                    RTL
.3963e3						write_failure
.3963e3		e2 20		sep #$20	                SEP #$20        ; set A short
.3963e5		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.3963e7		89 02		bit #$02	                    BIT #FDC_ST1_NW
.3963e9		f0 04		beq $3963ef	                    BEQ generic_err
.3963eb		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.3963ed		80 17		bra $396406	                    BRA ret_failure
.3963ef		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.3963f1		d0 e4		bne $3963d7	                    BNE ret_success
.3963f3		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.3963f5		d0 e0		bne $3963d7	                    BNE ret_success
.3963f7						attempt_retry
.3963f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3963f9		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.3963fc		d0 c8		bne $3963c6	                    BNE retry                           ; And retry unless we have none left
.3963fe		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.396400		80 04		bra $396406	                    BRA ret_failure
.396402						seek_failure
.396402		e2 20		sep #$20	                SEP #$20        ; set A short
.396404		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396406						ret_failure
.396406		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396409		28		plp		pass_failure        PLP
.39640a		2b		pld		                    PLD
.39640b		ab		plb		                    PLB
.39640c		18		clc		                    CLC
.39640d		6b		rtl		                    RTL
.39640e						FDC_MOUNT
.39640e		8b		phb		                    PHB
.39640f		0b		phd		                    PHD
.396410		08		php		                    PHP
.396411		48		pha		                PHA             ; begin setdbr macro
.396412		08		php		                PHP
.396413		e2 20		sep #$20	                SEP #$20        ; set A short
.396415		a9 00		lda #$00	                LDA #0
.396417		48		pha		                PHA
.396418		ab		plb		                PLB
.396419		28		plp		                PLP
.39641a		68		pla		                PLA             ; end setdbr macro
.39641b		48		pha		                PHA             ; begin setdp macro
.39641c		08		php		                PHP
.39641d		c2 20		rep #$20	                REP #$20        ; set A long
.39641f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396422		5b		tcd		                TCD
.396423		28		plp		                PLP
.396424		68		pla		                PLA             ; end setdp macro
.396425		22 7c 5e 39	jsl $395e7c	                    JSL FDC_INIT
.396429		e2 20		sep #$20	                SEP #$20        ; set A short
.39642b		c2 10		rep #$10	                REP #$10        ; set X long
.39642d		a9 00		lda #$00	                    LDA #0
.39642f		a2 00 00	ldx #$0000	                    LDX #0
.396432		9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.396436		e8		inx		                    INX
.396437		e0 00 02	cpx #$0200	                    CPX #512
.39643a		d0 f6		bne $396432	                    BNE zero_loop
.39643c		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.39643e		85 00		sta $0300	                    STA FDC_DRIVE
.396440		22 f8 5e 39	jsl $395ef8	                    JSL FDC_Motor_On                        ; Turn the motor on
.396444		c2 30		rep #$30	                REP #$30        ; set A&X long
.396446		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.396449		85 22		sta $0322	                    STA BIOS_LBA
.39644b		85 24		sta $0324	                    STA BIOS_LBA+2
.39644d		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.396450		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.396452		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396455		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.396457		22 3d 63 39	jsl $39633d	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.39645b		b0 03		bcs $396460	                    BCS parse_boot                          ; If ok: start parsing the boot record
.39645d		82 d3 00	brl $396533	                    BRL pass_failure                        ; Pass the error up the chain
.396460						parse_boot
.396460		e2 20		sep #$20	                SEP #$20        ; set A short
.396462		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.396464		8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.396468		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.39646a		8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.39646e		e2 20		sep #$20	                SEP #$20        ; set A short
.396470		af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.396474		8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.396478		c2 20		rep #$20	                REP #$20        ; set A long
.39647a		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.39647d		8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.396481		8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.396485		af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.396489		8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.39648d		a9 00 00	lda #$0000	                    LDA #0
.396490		8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.396494		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.396497		8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.39649b		18		clc		                    CLC
.39649c		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.3964a0		8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.3964a4		a9 00 00	lda #$0000	                    LDA #0
.3964a7		8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.3964ab		8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.3964af		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.3964b0		af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.3964b4		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.3964b8		8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.3964bc		a9 00 00	lda #$0000	                    LDA #0
.3964bf		8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.3964c3		af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.3964c7		8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.3964cb		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.3964cc		4a		lsr a		                    LSR A
.3964cd		4a		lsr a		                    LSR A
.3964ce		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.3964cf		18		clc		                    CLC
.3964d0		6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.3964d4		8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.3964d8		a9 00 00	lda #$0000	                    LDA #0
.3964db		8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.3964df		af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.3964e3		8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.3964e7		a9 00 00	lda #$0000	                    LDA #0
.3964ea		8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.3964ee		af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.3964f2		8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.3964f6		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.3964f9		8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.3964fd		e2 20		sep #$20	                SEP #$20        ; set A short
.3964ff		af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.396503		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.396505		80 14		bra $39651b	                    BRA no_volume_id                        ; No: there is no volume ID
.396507						is_extended
.396507		c2 20		rep #$20	                REP #$20        ; set A long
.396509		af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.39650d		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.396511		af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.396515		8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.396519		80 0d		bra $396528	                    BRA ret_success
.39651b						no_volume_id
.39651b		c2 20		rep #$20	                REP #$20        ; set A long
.39651d		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.396520		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.396524		8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.396528						ret_success
.396528		e2 20		sep #$20	                SEP #$20        ; set A short
.39652a		a9 00		lda #$00	                    LDA #0
.39652c		85 20		sta $0320	                    STA BIOS_STATUS
.39652e		28		plp		                    PLP
.39652f		2b		pld		                    PLD
.396530		ab		plb		                    PLB
.396531		38		sec		                    SEC
.396532		6b		rtl		                    RTL
.396533		28		plp		pass_failure        PLP
.396534		2b		pld		                    PLD
.396535		ab		plb		                    PLB
.396536		18		clc		                    CLC
.396537		6b		rtl		                    RTL
.396538						FDC_CMDBLOCK
.396538		8b		phb		                    PHB
.396539		0b		phd		                    PHD
.39653a		08		php		                    PHP
.39653b		48		pha		                PHA             ; begin setdbr macro
.39653c		08		php		                PHP
.39653d		e2 20		sep #$20	                SEP #$20        ; set A short
.39653f		a9 00		lda #$00	                LDA #0
.396541		48		pha		                PHA
.396542		ab		plb		                PLB
.396543		28		plp		                PLP
.396544		68		pla		                PLA             ; end setdbr macro
.396545		48		pha		                PHA             ; begin setdp macro
.396546		08		php		                PHP
.396547		c2 20		rep #$20	                REP #$20        ; set A long
.396549		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39654c		5b		tcd		                TCD
.39654d		28		plp		                PLP
.39654e		68		pla		                PLA             ; end setdp macro
.39654f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396551		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.396553		f0 0f		beq $396564	                    BEQ motor_on
.396555		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.396557		f0 11		beq $39656a	                    BEQ motor_off
.396559		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.39655b		f0 13		beq $396570	                    BEQ recalibrate
.39655d		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.39655f		28		plp		                    PLP
.396560		2b		pld		                    PLD
.396561		ab		plb		                    PLB
.396562		38		sec		                    SEC
.396563		6b		rtl		                    RTL
.396564		22 f8 5e 39	jsl $395ef8	motor_on            JSL FDC_Motor_On
.396568		80 f3		bra $39655d	                    BRA ret_success
.39656a		22 2c 5f 39	jsl $395f2c	motor_off           JSL FDC_Motor_Off
.39656e		80 ed		bra $39655d	                    BRA ret_success
.396570		22 57 5f 39	jsl $395f57	recalibrate         JSL FDC_Recalibrate_Command
.396574		b0 e7		bcs $39655d	                    BCS ret_success
.396576		28		plp		pass_failure        PLP
.396577		2b		pld		                    PLD
.396578		ab		plb		                    PLB
.396579		18		clc		                    CLC
.39657a		6b		rtl		                    RTL
.39657b						FDC_CHK_MEDIA
.39657b		0b		phd		                    PHD
.39657c		08		php		                    PHP
.39657d		48		pha		                PHA             ; begin setdp macro
.39657e		08		php		                PHP
.39657f		c2 20		rep #$20	                REP #$20        ; set A long
.396581		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396584		5b		tcd		                TCD
.396585		28		plp		                PLP
.396586		68		pla		                PLA             ; end setdp macro
.396587		22 f8 5e 39	jsl $395ef8	                    JSL FDC_Motor_On                ; Turn on the motor
.39658b		e2 20		sep #$20	                SEP #$20        ; set A short
.39658d		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.396591		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.396593		f0 42		beq $3965d7	                    BEQ ret_true                    ; If not: assume the disk is present
.396595		a9 00		lda #$00	                    LDA #0
.396597		85 00		sta $0300	                    STA FDC_DRIVE
.396599		a9 00		lda #$00	                    LDA #0
.39659b		85 01		sta $0301	                    STA FDC_HEAD
.39659d		a9 50		lda #$50	                    LDA #80
.39659f		85 02		sta $0302	                    STA FDC_CYLINDER
.3965a1		22 37 61 39	jsl $396137	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.3965a5		90 34		bcc $3965db	                    BCC ret_false                   ; If fail: return false
.3965a7		c2 10		rep #$10	                REP #$10        ; set X long
.3965a9		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3965ac		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3965af		22 d0 10 39	jsl $3910d0	                    JSL IDELAY
.3965b3		22 8c 5f 39	jsl $395f8c	                    JSL FDC_Sense_Int_Status
.3965b7		a5 06		lda $0306	                    LDA FDC_ST0
.3965b9		29 d0		and #$d0	                    AND #%11010000
.3965bb		d0 1e		bne $3965db	                    BNE ret_false
.3965bd		22 57 5f 39	jsl $395f57	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.3965c1		90 18		bcc $3965db	                    BCC ret_false                   ; If fail: return false
.3965c3		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3965c6		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3965c9		22 d0 10 39	jsl $3910d0	                    JSL IDELAY
.3965cd		22 8c 5f 39	jsl $395f8c	                    JSL FDC_Sense_Int_Status
.3965d1		a5 06		lda $0306	                    LDA FDC_ST0
.3965d3		29 d0		and #$d0	                    AND #%11010000
.3965d5		d0 04		bne $3965db	                    BNE ret_false
.3965d7						ret_true
.3965d7		28		plp		                    PLP
.3965d8		2b		pld		                    PLD
.3965d9		38		sec		                    SEC
.3965da		6b		rtl		                    RTL
.3965db						ret_false
.3965db		28		plp		                    PLP
.3965dc		2b		pld		                    PLD
.3965dd		18		clc		                    CLC
.3965de		6b		rtl		                    RTL
.3965df						FDC_WRITEVBR
.3965df		8b		phb		                    PHB
.3965e0		0b		phd		                    PHD
.3965e1		08		php		                    PHP
.3965e2		48		pha		                PHA             ; begin setdbr macro
.3965e3		08		php		                PHP
.3965e4		e2 20		sep #$20	                SEP #$20        ; set A short
.3965e6		a9 00		lda #$00	                LDA #0
.3965e8		48		pha		                PHA
.3965e9		ab		plb		                PLB
.3965ea		28		plp		                PLP
.3965eb		68		pla		                PLA             ; end setdbr macro
.3965ec		48		pha		                PHA             ; begin setdp macro
.3965ed		08		php		                PHP
.3965ee		c2 20		rep #$20	                REP #$20        ; set A long
.3965f0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3965f3		5b		tcd		                TCD
.3965f4		28		plp		                PLP
.3965f5		68		pla		                PLA             ; end setdp macro
.3965f6		22 0e 64 39	jsl $39640e	                    JSL FDC_MOUNT               ; Mount the floppy disk
.3965fa		c2 30		rep #$30	                REP #$30        ; set A&X long
.3965fc		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.3965ff		a2 00 00	ldx #$0000	                    LDX #0
.396602		9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.396606		e8		inx		                    INX
.396607		e8		inx		                    INX
.396608		e0 00 02	cpx #$0200	                    CPX #512
.39660b		d0 f5		bne $396602	                    BNE clr_loop
.39660d		e2 20		sep #$20	                SEP #$20        ; set A short
.39660f		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.396612		bf c7 66 39	lda $3966c7,x	copy_loop           LDA FDC_VBR_BEGIN,X
.396616		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.39661a		e8		inx		                    INX
.39661b		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.39661e		d0 f2		bne $396612	                    BNE copy_loop
.396620		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.396623		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.396626		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.396628		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.39662c		f0 07		beq $396635	                    BEQ path_copy_done
.39662e		e8		inx		                    INX
.39662f		c8		iny		                    INY
.396630		c0 80 00	cpy #$0080	                    CPY #128
.396633		d0 f1		bne $396626	                    BNE path_copy_loop
.396635						path_copy_done
.396635		c2 20		rep #$20	                REP #$20        ; set A long
.396637		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.39663a		8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.39663e		c2 20		rep #$20	                REP #$20        ; set A long
.396640		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.396643		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.396645		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396648		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.39664a		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.39664d		85 02		sta $0322	                    STA BIOS_LBA
.39664f		85 04		sta $0324	                    STA BIOS_LBA+2
.396651		e2 20		sep #$20	                SEP #$20        ; set A short
.396653		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.396655		85 01		sta $0321	                    STA BIOS_DEV
.396657		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.39665b		b0 09		bcs $396666	                    BCS ret_success
.39665d		22 2c 5f 39	jsl $395f2c	                    JSL FDC_Motor_Off
.396661		28		plp		                    PLP                         ; Return the failure
.396662		2b		pld		                    PLD
.396663		ab		plb		                    PLB
.396664		18		clc		                    CLC
.396665		6b		rtl		                    RTL
.396666		22 2c 5f 39	jsl $395f2c	ret_success         JSL FDC_Motor_Off
.39666a		e2 20		sep #$20	                SEP #$20        ; set A short
.39666c		a9 00		lda #$00	                    LDA #0
.39666e		85 00		sta $0320	                    STA BIOS_STATUS
.396670		28		plp		                    PLP
.396671		2b		pld		                    PLD
.396672		ab		plb		                    PLB
.396673		38		sec		                    SEC
.396674		6b		rtl		                    RTL
.396675						FDC_TIME_HANDLE
.396675		08		php		                    PHP
.396676		e2 20		sep #$20	                SEP #$20        ; set A short
.396678		af 4e a0 38	lda $38a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.39667c		d0 06		bne $396684	                    BNE dec_motor                   ; If not zero: decrement the timer
.39667e		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.396682		f0 28		beq $3966ac	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.396684		af 4e a0 38	lda $38a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.396688		3a		dec a		                    DEC A
.396689		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.39668d		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.39668f		d0 0b		bne $39669c	                    BNE chk_motor_end               ; No: check to see if we're a the end
.396691		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.396695		3a		dec a		                    DEC A
.396696		8f 4f a0 38	sta $38a04f	                    STA @l FDC_MOTOR_TIMER+1
.39669a		80 10		bra $3966ac	                    BRA sof_timeout                 ; And move on to the next timer
.39669c		af 4e a0 38	lda $38a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.3966a0		d0 0a		bne $3966ac	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.3966a2		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1
.3966a6		d0 04		bne $3966ac	                    BNE sof_timeout
.3966a8		22 2c 5f 39	jsl $395f2c	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.3966ac						sof_timeout
.3966ac		e2 20		sep #$20	                SEP #$20        ; set A short
.3966ae		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.3966b2		f0 11		beq $3966c5	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.3966b4		3a		dec a		                    DEC A                           ; Count down one tick
.3966b5		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.3966b9		d0 0a		bne $3966c5	                    BNE sof_int_done                ; If not 0, we're done
.3966bb		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.3966bf		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.3966c1		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.3966c5		28		plp		sof_int_done        PLP
.3966c6		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.3966c7						FDC_VBR_BEGIN
>3966c7		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>3966ca		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>3966d2		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>3966d4		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>3966d5		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>3966d7		02				num_fat             .byte 2                 ; Number of FATs
>3966d8		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>3966da		40 0b				total_sectors       .word 2880              ; Total sectors
>3966dc		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>3966dd		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>3966df		12 00				sec_per_track       .word 18                ; Sectors per track
>3966e1		02 00				num_head            .word 2                 ; Number of heads
>3966e3		00 00 00 00			ignore2             .dword 0
>3966e7		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>3966eb		00 00				ignore3             .word 0
>3966ed		29				boot_signature      .byte $29
>3966ee		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>3966f2		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>3966fa		20 20 20
>3966fd		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.396705		80 40		bra $396747	                    BRA vbr_start
>396707						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.396747						vbr_start
.396747		c2 20		rep #$20	                REP #$20        ; set A long
.396749		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.39674c		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.396750		a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396753		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.396757		22 24 11 00	jsl $001124	                    JSL F_RUN               ; And try to execute the binary file
.39675b		b0 0c		bcs $396769	                    BCS lock                ; If it returned success... lock up... I guess?
.39675d						error
.39675d		e2 20		sep #$20	                SEP #$20        ; set A short
.39675f		4b		phk		                    PHK                     ; Otherwise, print an error message
.396760		ab		plb		                    PLB
.396761		62 08 00	per $39676c	                    PER message
.396764		fa		plx		                    PLX
.396765		22 1c 10 00	jsl $00101c	                    JSL PUTS
.396769		ea		nop		lock                NOP                     ; And lock up
.39676a		80 fd		bra $396769	                    BRA lock
>39676c		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>396774		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>396784		65 20 62 69 6e 61 72 79 2e 0d 00
.39678f						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.39678f						IDE_TEST
.39678f		08		php		                PHP
.396790		c2 20		rep #$20	                REP #$20        ; set A long
.396792		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396795		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396799		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39679c		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.3967a0		22 c3 68 39	jsl $3968c3	                JSL IDE_IDENTIFY
.3967a4		b0 03		bcs $3967a9	                BCS id_ok
.3967a6		82 ab 00	brl $396854	                BRL done
.3967a9						id_ok
.3967a9		c2 10		rep #$10	                REP #$10        ; set X long
.3967ab		e2 20		sep #$20	                SEP #$20        ; set A short
.3967ad		a0 28 00	ldy #$0028	                LDY #40
.3967b0		a2 36 00	ldx #$0036	                LDX #27*2
.3967b3		bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.3967b7		22 18 10 00	jsl $001018	                JSL PUTC
.3967bb		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.3967bf		22 18 10 00	jsl $001018	                JSL PUTC
.3967c3		e8		inx		                INX
.3967c4		e8		inx		                INX
.3967c5		88		dey		                DEY
.3967c6		88		dey		                DEY
.3967c7		d0 ea		bne $3967b3	                BNE pr_model
.3967c9		c2 10		rep #$10	                REP #$10        ; set X long
.3967cb		e2 20		sep #$20	                SEP #$20        ; set A short
.3967cd		a0 14 00	ldy #$0014	                LDY #20
.3967d0		a2 14 00	ldx #$0014	                LDX #10*2
.3967d3		bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.3967d7		22 18 10 00	jsl $001018	                JSL PUTC
.3967db		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.3967df		22 18 10 00	jsl $001018	                JSL PUTC
.3967e3		e8		inx		                INX
.3967e4		e8		inx		                INX
.3967e5		88		dey		                DEY
.3967e6		88		dey		                DEY
.3967e7		d0 ea		bne $3967d3	                BNE pr_serial
.3967e9		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.3967ed		c2 30		rep #$30	                REP #$30        ; set A&X long
.3967ef		a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.3967f2		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.3967f6		a9 00 00	lda #$0000	                LDA #0
.3967f9		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.3967fd		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396800		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396804		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396807		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.39680b		a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.39680e		a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.396811		9f 00 a3 38	sta $38a300,x	init_loop       STA DOS_SECTOR,X
.396815		e8		inx		                INX
.396816		e8		inx		                INX
.396817		e0 00 02	cpx #$0200	                CPX #512
.39681a		d0 f5		bne $396811	                BNE init_loop
.39681c		22 dc 69 39	jsl $3969dc	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.396820		b0 06		bcs $396828	                BCS read_sect1
.396822		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396826		80 2c		bra $396854	                BRA done
.396828		a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.39682b		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.39682f		a9 00 00	lda #$0000	                LDA #0
.396832		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396836		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.396839		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.39683d		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.396840		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396844		22 51 69 39	jsl $396951	                JSL IDE_GETBLOCK        ; Attempt to read the block
.396848		b0 06		bcs $396850	                BCS all_ok
.39684a		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.39684e		80 04		bra $396854	                BRA done
.396850						all_ok
.396850		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396854		28		plp		done            PLP
.396855		6b		rtl		                RTL
.396856						IDE_INIT
.396856		e2 20		sep #$20	                SEP #$20        ; set A short
.396858		a9 00		lda #$00	              LDA #$00
.39685a		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.39685e		20 7f 68	jsr $39687f	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.396861		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.396863		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.396867		a9 01		lda #$01	              LDA #$01
.396869		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.39686d		a9 00		lda #$00	              LDA #$00
.39686f		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.396873		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.396877		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.39687b		20 9d 68	jsr $39689d	              JSR IDE_DRV_READY_NOTBUSY
.39687e		6b		rtl		              RTL
.39687f						IDE_DRIVE_BSY
.39687f		08		php		                PHP
.396880		e2 20		sep #$20	                SEP #$20        ; set A short
.396882		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396886		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.396888		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.39688a		f0 f6		beq $396882	                BEQ loop
.39688c		28		plp		                PLP
.39688d		60		rts		                RTS
.39688e						IDE_DRIVE_READY
.39688e		08		php		                PHP
.39688f		e2 20		sep #$20	                SEP #$20        ; set A short
.396891		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396895		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396897		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396899		d0 f6		bne $396891	                BNE loop
.39689b		28		plp		                PLP
.39689c		60		rts		                RTS
.39689d						IDE_DRV_READY_NOTBUSY
.39689d		08		php		                PHP
.39689e		e2 20		sep #$20	                SEP #$20        ; set A short
.3968a0		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.3968a4		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.3968a6		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.3968a8		d0 f6		bne $3968a0	                BNE loop                            ; No: keep waiting
.3968aa		28		plp		ret_success     PLP                                 ; Return success
.3968ab		38		sec		                SEC
.3968ac		60		rts		                RTS
.3968ad		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.3968b1		28		plp		                PLP                                 ; Return failure
.3968b2		18		clc		                CLC
.3968b3		60		rts		                RTS
.3968b4						IDE_NOT_DRQ
.3968b4		08		php		                PHP
.3968b5		e2 20		sep #$20	                SEP #$20        ; set A short
.3968b7		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.3968bb		29 08		and #$08	                AND #IDE_STAT_DRQ
.3968bd		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.3968bf		d0 f6		bne $3968b7	                BNE loop                ; No: keep waiting
.3968c1		28		plp		                PLP
.3968c2		60		rts		                RTS
.3968c3						IDE_IDENTIFY
.3968c3		5a		phy		                PHY
.3968c4		8b		phb		                PHB
.3968c5		0b		phd		                PHD
.3968c6		08		php		                PHP
.3968c7		48		pha		                PHA             ; begin setdbr macro
.3968c8		08		php		                PHP
.3968c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3968cb		a9 00		lda #$00	                LDA #0
.3968cd		48		pha		                PHA
.3968ce		ab		plb		                PLB
.3968cf		28		plp		                PLP
.3968d0		68		pla		                PLA             ; end setdbr macro
.3968d1		48		pha		                PHA             ; begin setdp macro
.3968d2		08		php		                PHP
.3968d3		c2 20		rep #$20	                REP #$20        ; set A long
.3968d5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3968d8		5b		tcd		                TCD
.3968d9		28		plp		                PLP
.3968da		68		pla		                PLA             ; end setdp macro
.3968db		e2 20		sep #$20	                SEP #$20        ; set A short
.3968dd		20 9d 68	jsr $39689d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.3968e0		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.3968e2		29 07		and #$07	                AND #$07
.3968e4		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.3968e6		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.3968ea		20 9d 68	jsr $39689d	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.3968ed		e2 20		sep #$20	                SEP #$20        ; set A short
.3968ef		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.3968f1		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.3968f5		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.3968f9		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.3968fd		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396901		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396903		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.396907		f0 29		beq $396932	                BEQ no_media                    ; If 0: there is no drive
.396909		20 7f 68	jsr $39687f	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.39690c		20 9d 68	jsr $39689d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.39690f		90 2d		bcc $39693e	                BCC ret_failure                 ; If an error occurred, return it
.396911		c2 30		rep #$30	                REP #$30        ; set A&X long
.396913		a0 00 00	ldy #$0000	                LDY #0
.396916		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.39691a		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.39691c		c8		iny		                INY                             ; Move to the next position
.39691d		c8		iny		                INY
.39691e		c0 00 02	cpy #$0200	                CPY #512
.396921		d0 f3		bne $396916	                BNE read_loop
.396923						ret_success
.396923		e2 20		sep #$20	                SEP #$20        ; set A short
.396925		a9 00		lda #$00	                LDA #0
.396927		85 00		sta $0320	                STA BIOS_STATUS
.396929		8d 06 03	sta $0306	                STA @w FDC_ST0
.39692c		28		plp		                PLP                             ; Return success
.39692d		2b		pld		                PLD
.39692e		ab		plb		                PLB
.39692f		7a		ply		                PLY
.396930		38		sec		                SEC
.396931		6b		rtl		                RTL
.396932						no_media
.396932		e2 20		sep #$20	                SEP #$20        ; set A short
.396934		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396936		80 0a		bra $396942	                BRA pass_failure
.396938						not_ata
.396938		e2 20		sep #$20	                SEP #$20        ; set A short
.39693a		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.39693c		80 04		bra $396942	                BRA pass_failure
.39693e						ret_failure
.39693e		e2 20		sep #$20	                SEP #$20        ; set A short
.396940		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396942		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396944		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396948		8d 06 03	sta $0306	                STA @w FDC_ST0
.39694b		28		plp		                PLP
.39694c		2b		pld		                PLD
.39694d		ab		plb		                PLB
.39694e		7a		ply		                PLY
.39694f		18		clc		                CLC
.396950		6b		rtl		                RTL
.396951						IDE_GETBLOCK
.396951		5a		phy		                PHY
.396952		8b		phb		                PHB
.396953		0b		phd		                PHD
.396954		08		php		                PHP
.396955		48		pha		                PHA             ; begin setdbr macro
.396956		08		php		                PHP
.396957		e2 20		sep #$20	                SEP #$20        ; set A short
.396959		a9 00		lda #$00	                LDA #0
.39695b		48		pha		                PHA
.39695c		ab		plb		                PLB
.39695d		28		plp		                PLP
.39695e		68		pla		                PLA             ; end setdbr macro
.39695f		48		pha		                PHA             ; begin setdp macro
.396960		08		php		                PHP
.396961		c2 20		rep #$20	                REP #$20        ; set A long
.396963		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396966		5b		tcd		                TCD
.396967		28		plp		                PLP
.396968		68		pla		                PLA             ; end setdp macro
.396969		e2 20		sep #$20	                SEP #$20        ; set A short
.39696b		20 9d 68	jsr $39689d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.39696e		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396970		29 07		and #$07	                AND #$07
.396972		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396974		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396978		20 9d 68	jsr $39689d	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.39697b		e2 20		sep #$20	                SEP #$20        ; set A short
.39697d		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.39697f		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396983		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396985		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396989		a5 03		lda $0323	                LDA BIOS_LBA+1
.39698b		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.39698f		a5 04		lda $0324	                LDA BIOS_LBA+2
.396991		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396995		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.396997		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.39699b		ea		nop		                NOP                             ; Wait about 500ns
.39699c		ea		nop		                NOP
.39699d		ea		nop		                NOP
.39699e		ea		nop		                NOP
.39699f		20 9d 68	jsr $39689d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.3969a2		90 25		bcc $3969c9	                BCC ret_failure                 ; If an error occurred, return it
.3969a4		a0 00 00	ldy #$0000	                LDY #0
.3969a7		c2 20		rep #$20	                REP #$20        ; set A long
.3969a9		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.3969ad		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.3969af		c8		iny		                INY                             ; Move to the next position
.3969b0		c8		iny		                INY
.3969b1		c0 00 02	cpy #$0200	                CPY #512
.3969b4		d0 f3		bne $3969a9	                BNE read_loop
.3969b6		ea		nop		                NOP                             ; Wait about 500ns
.3969b7		ea		nop		                NOP
.3969b8		ea		nop		                NOP
.3969b9		ea		nop		                NOP
.3969ba						ret_success
.3969ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3969bc		a9 00		lda #$00	                LDA #0
.3969be		85 00		sta $0320	                STA BIOS_STATUS
.3969c0		8d 06 03	sta $0306	                STA @w FDC_ST0
.3969c3		28		plp		                PLP                             ; Return success
.3969c4		2b		pld		                PLD
.3969c5		ab		plb		                PLB
.3969c6		7a		ply		                PLY
.3969c7		38		sec		                SEC
.3969c8		6b		rtl		                RTL
.3969c9						ret_failure
.3969c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3969cb		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.3969cf		8d 06 03	sta $0306	                STA @w FDC_ST0
.3969d2		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.3969d4		85 00		sta $0320	                STA BIOS_STATUS
.3969d6		28		plp		                PLP
.3969d7		2b		pld		                PLD
.3969d8		ab		plb		                PLB
.3969d9		7a		ply		                PLY
.3969da		18		clc		                CLC
.3969db		6b		rtl		                RTL
.3969dc						IDE_PUTBLOCK
.3969dc		5a		phy		                PHY
.3969dd		8b		phb		                PHB
.3969de		0b		phd		                PHD
.3969df		08		php		                PHP
.3969e0		48		pha		                PHA             ; begin setdbr macro
.3969e1		08		php		                PHP
.3969e2		e2 20		sep #$20	                SEP #$20        ; set A short
.3969e4		a9 00		lda #$00	                LDA #0
.3969e6		48		pha		                PHA
.3969e7		ab		plb		                PLB
.3969e8		28		plp		                PLP
.3969e9		68		pla		                PLA             ; end setdbr macro
.3969ea		48		pha		                PHA             ; begin setdp macro
.3969eb		08		php		                PHP
.3969ec		c2 20		rep #$20	                REP #$20        ; set A long
.3969ee		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3969f1		5b		tcd		                TCD
.3969f2		28		plp		                PLP
.3969f3		68		pla		                PLA             ; end setdp macro
.3969f4		e2 20		sep #$20	                SEP #$20        ; set A short
.3969f6		20 9d 68	jsr $39689d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.3969f9		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.3969fb		29 07		and #$07	                AND #$07
.3969fd		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.3969ff		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396a03		20 9d 68	jsr $39689d	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396a06		e2 20		sep #$20	                SEP #$20        ; set A short
.396a08		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396a0a		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396a0e		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396a10		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396a14		a5 03		lda $0323	                LDA BIOS_LBA+1
.396a16		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396a1a		a5 04		lda $0324	                LDA BIOS_LBA+2
.396a1c		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396a20		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396a22		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396a26		ea		nop		                NOP                             ; Wait about 500ns
.396a27		ea		nop		                NOP
.396a28		ea		nop		                NOP
.396a29		ea		nop		                NOP
.396a2a		20 9d 68	jsr $39689d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396a2d		90 37		bcc $396a66	                BCC ret_failure                 ; If an error occurred, return it
.396a2f		c2 30		rep #$30	                REP #$30        ; set A&X long
.396a31		a0 00 00	ldy #$0000	                LDY #0
.396a34		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.396a36		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.396a3a		c8		iny		                INY                             ; Move to the next position
.396a3b		c8		iny		                INY
.396a3c		c0 00 02	cpy #$0200	                CPY #512
.396a3f		d0 f3		bne $396a34	                BNE read_loop
.396a41		ea		nop		                NOP                             ; Wait about 500ns
.396a42		ea		nop		                NOP
.396a43		ea		nop		                NOP
.396a44		ea		nop		                NOP
.396a45		20 9d 68	jsr $39689d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396a48		90 1c		bcc $396a66	                BCC ret_failure                 ; If an error occurred, return it
.396a4a		ea		nop		                NOP                             ; Wait about 500ns
.396a4b		ea		nop		                NOP
.396a4c		ea		nop		                NOP
.396a4d		ea		nop		                NOP
.396a4e		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396a52		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.396a55		d0 0f		bne $396a66	                BNE ret_failure                 ; If error: return failure
.396a57						ret_success
.396a57		e2 20		sep #$20	                SEP #$20        ; set A short
.396a59		a9 00		lda #$00	                LDA #0
.396a5b		85 00		sta $0320	                STA BIOS_STATUS
.396a5d		8d 06 03	sta $0306	                STA @w FDC_ST0
.396a60		28		plp		                PLP                             ; Return success
.396a61		2b		pld		                PLD
.396a62		ab		plb		                PLB
.396a63		7a		ply		                PLY
.396a64		38		sec		                SEC
.396a65		6b		rtl		                RTL
.396a66		ea		nop		ret_failure     NOP                             ; Wait about 500ns
.396a67		ea		nop		                NOP
.396a68		ea		nop		                NOP
.396a69		ea		nop		                NOP
.396a6a		e2 20		sep #$20	                SEP #$20        ; set A short
.396a6c		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396a70		80 08		bra $396a7a	                BRA save_error
.396a72		ea		nop		                NOP
.396a73		ea		nop		                NOP
.396a74		ea		nop		                NOP
.396a75		ea		nop		                NOP
.396a76		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396a7a		8d 06 03	sta $0306	save_error      STA @w FDC_ST0
.396a7d		a9 83		lda #$83	                LDA #BIOS_ERR_WRITE
.396a7f		85 00		sta $0320	                STA BIOS_STATUS
.396a81		28		plp		                PLP
.396a82		2b		pld		                PLD
.396a83		ab		plb		                PLB
.396a84		7a		ply		                PLY
.396a85		18		clc		                CLC
.396a86		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/Ethernet_Init_library.asm

.396a87						SIMPLE_INIT_ETHERNET_CTRL
.396a87						WaitforittobeReady:
.396a87		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.396a8b		29 01 00	and #$0001	                AND #$0001
.396a8e		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.396a91		d0 f4		bne $396a87	                BNE WaitforittobeReady
.396a93		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.396a97		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.396a9b		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.396a9f		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.396aa3		a9 00 00	lda #$0000	                LDA #$0000
.396aa6		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.396aaa		a9 00 70	lda #$7000	                LDA #$7000
.396aad		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.396ab1		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.396ab4		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.396ab8		a9 0b 00	lda #$000b	                LDA #$000B
.396abb		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.396abf		a9 00 00	lda #$0000	                LDA #$0000
.396ac2		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.396ac6		20 fa 6a	jsr $396afa	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.396ac9		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.396acc		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.396ad0		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.396ad3		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.396ad7		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.396ada		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.396ade		20 fa 6a	jsr $396afa	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.396ae1		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.396ae4		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.396ae8		a9 0c 00	lda #$000c	                LDA #$000C
.396aeb		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.396aef		a9 04 00	lda #$0004	                LDA #$0004
.396af2		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.396af6		20 fa 6a	jsr $396afa	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.396af9		6b		rtl		                RTL
.396afa						MAC_ACCESS_WAIT_FOR_COMPLETION
.396afa		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.396afd		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.396b01						WaitForCompletion:
.396b01		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.396b05		29 00 80	and #$8000	                AND #$8000
.396b08		c9 00 80	cmp #$8000	                CMP #$8000
.396b0b		f0 f4		beq $396b01	                BEQ WaitForCompletion
.396b0d		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/EXP-C200_EVID_Library.asm

=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.396b0e						EVID_IPRINT
.396b0e		22 17 6b 39	jsl $396b17	                JSL EVID_IPUTS
.396b12		22 89 6c 39	jsl $396c89	                JSL EVID_IPRINTCR
.396b16		6b		rtl		                RTL
.396b17						EVID_IPUTS
.396b17		48		pha		                PHA
.396b18		08		php		                PHP
.396b19		e2 20		sep #$20	                SEP #$20        ; set A short
.396b1b		c2 10		rep #$10	                REP #$10        ; set X long
.396b1d		bd 00 00	lda $0000,x	iputs1          LDA $0,b,x      ; read from the string
.396b20		f0 08		beq $396b2a	                BEQ iputs_done
.396b22		22 2e 6b 39	jsl $396b2e	iputs2          JSL EVID_IPUTC
.396b26		e8		inx		iputs3          INX
.396b27		4c 1d 6b	jmp $396b1d	                JMP iputs1
.396b2a		e8		inx		iputs_done      INX
.396b2b		28		plp		                PLP
.396b2c		68		pla		                PLA
.396b2d		6b		rtl		                RTL
.396b2e						EVID_IPUTC
.396b2e		da		phx		                PHX
.396b2f		5a		phy		                PHY
.396b30		0b		phd		                PHD
.396b31		8b		phb		                PHB
.396b32		08		php		                PHP                 ; stash the flags (we'll be changing M)
.396b33		48		pha		                PHA             ; begin setdp macro
.396b34		08		php		                PHP
.396b35		c2 20		rep #$20	                REP #$20        ; set A long
.396b37		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396b3a		5b		tcd		                TCD
.396b3b		28		plp		                PLP
.396b3c		68		pla		                PLA             ; end setdp macro
.396b3d		48		pha		                PHA             ; begin setdbr macro
.396b3e		08		php		                PHP
.396b3f		e2 20		sep #$20	                SEP #$20        ; set A short
.396b41		a9 00		lda #$00	                LDA #0
.396b43		48		pha		                PHA
.396b44		ab		plb		                PLB
.396b45		28		plp		                PLP
.396b46		68		pla		                PLA             ; end setdbr macro
.396b47		e2 20		sep #$20	                SEP #$20        ; set A short
.396b49		c2 10		rep #$10	                REP #$10        ; set X long
.396b4b		c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.396b4d		f0 69		beq $396bb8	                BEQ go_down
.396b4f		c9 20		cmp #$20	                CMP #$20
.396b51		90 19		bcc $396b6c	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.396b53		c9 7f		cmp #$7f	                CMP #$7F
.396b55		f0 45		beq $396b9c	                BEQ do_del
.396b57		b0 02		bcs $396b5b	                BCS check_A0        ; [$20..$7E]: print it
.396b59		80 31		bra $396b8c	                BRA printc
.396b5b		c9 a0		cmp #$a0	check_A0        CMP #$A0
.396b5d		90 02		bcc $396b61	                BCC check_ctrl1
.396b5f		80 2b		bra $396b8c	                BRA printc          ; [$A0..$FF]: print it
.396b61		c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.396b63		f0 53		beq $396bb8	                BEQ go_down         ; ... move the cursor down one row
.396b65		c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.396b67		f0 61		beq $396bca	                BEQ go_left         ; ... move the cursor left one column
.396b69		4c 96 6b	jmp $396b96	                JMP done
.396b6c		c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.396b6e		f0 69		beq $396bd9	                BEQ do_TAB          ; ... move to the next TAB stop
.396b70		c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.396b72		f0 34		beq $396ba8	                BEQ backspace       ; ... move the cursor back and replace with a space
.396b74		c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.396b76		f0 3a		beq $396bb2	                BEQ do_cr           ; ... move cursor down and to the first column
.396b78		c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.396b7a		f0 42		beq $396bbe	                BEQ go_up           ; ... move the cursor up one row
.396b7c		c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.396b7e		f0 44		beq $396bc4	                BEQ go_right        ; ... move the cursor right one column
.396b80		c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.396b82		f0 1e		beq $396ba2	                BEQ do_ins          ; ... insert a space
.396b84		c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.396b86		f0 48		beq $396bd0	                BEQ go_sol          ; ... move the cursor to the start of the line
.396b88		c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.396b8a		f0 74		beq $396c00	                BEQ go_eol          ; ... move the cursor to the end of the line
.396b8c		87 6b		sta [$6b]	printc          STA [EVID_CURSORPOS]     ; Save the character on the screen
.396b8e		a5 72		lda $72		                LDA EVID_CURCOLOR        ; Set the color based on CURCOLOR
.396b90		87 76		sta [$76]	                STA [EVID_COLORPOS]
.396b92		22 c7 6c 39	jsl $396cc7	                JSL EVID_ICSRRIGHT       ; And advance the cursor
.396b96		28		plp		done            PLP
.396b97		ab		plb		                PLB
.396b98		2b		pld		                PLD
.396b99		7a		ply		                PLY
.396b9a		fa		plx		                PLX
.396b9b		6b		rtl		                RTL
.396b9c		22 2d 6c 39	jsl $396c2d	do_del          JSL EVID_SCRSHIFTLL      ; Shift the current line left one space into the cursor
.396ba0		80 f4		bra $396b96	                BRA done
.396ba2		22 51 6c 39	jsl $396c51	do_ins          JSL EVID_SCRSHIFTLR      ; Shift the current line right one space from the cursor
.396ba6		80 ee		bra $396b96	                BRA done
.396ba8		22 fa 6c 39	jsl $396cfa	backspace       JSL EVID_ICSRLEFT
.396bac		22 2d 6c 39	jsl $396c2d	                JSL EVID_SCRSHIFTLL      ; Shift the current line left one space into the cursor
.396bb0		80 e4		bra $396b96	                BRA done
.396bb2		22 89 6c 39	jsl $396c89	do_cr           JSL EVID_IPRINTCR        ; Move the cursor to the beginning of the next line
.396bb6		80 de		bra $396b96	                BRA done
.396bb8		22 46 6d 39	jsl $396d46	go_down         JSL EVID_ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.396bbc		80 d8		bra $396b96	                BRA done
.396bbe		22 20 6d 39	jsl $396d20	go_up           JSL EVID_ICSRUP          ; Move the cursor up one line
.396bc2		80 d2		bra $396b96	                BRA done
.396bc4		22 c7 6c 39	jsl $396cc7	go_right        JSL EVID_ICSRRIGHT       ; Move the cursor right one column
.396bc8		80 cc		bra $396b96	                BRA done
.396bca		22 fa 6c 39	jsl $396cfa	go_left         JSL EVID_ICSRLEFT        ; Move the cursor left one column
.396bce		80 c6		bra $396b96	                BRA done
.396bd0						go_sol
.396bd0		c2 20		rep #$20	                REP #$20        ; set A long
.396bd2		a2 00 00	ldx #$0000	                LDX #0
.396bd5		a4 70		ldy $70		                LDY EVID_CURSORY
.396bd7		80 21		bra $396bfa	                BRA do_locate
.396bd9						do_TAB
.396bd9		c2 20		rep #$20	                REP #$20        ; set A long
.396bdb		a5 6e		lda $6e		                LDA EVID_CURSORX         ; Get the current column
.396bdd		29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.396be0		18		clc		                CLC
.396be1		69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.396be4		aa		tax		                TAX
.396be5		a4 70		ldy $70		                LDY EVID_CURSORY
.396be7		e2 20		sep #$20	                SEP #$20        ; set A short
.396be9		e4 63		cpx $63		set_xy          CPX EVID_COLS_VISIBLE    ; Check if we're still on screen horizontally
.396beb		90 04		bcc $396bf1	                BCC check_row       ; Yes: check the row
.396bed		a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.396bf0		c8		iny		                INY                 ; ... and the next row
.396bf1		c4 67		cpy $67		check_row       CPY EVID_LINES_VISIBLE   ; Check if we're still on the screen vertically
.396bf3		90 05		bcc $396bfa	                BCC do_locate       ; Yes: reposition the cursor
.396bf5		22 b7 6d 39	jsl $396db7	                JSL EVID_ISCROLLUP       ; No: scroll the screen
.396bf9		88		dey		                DEY                 ; And set the row to the last one
.396bfa		22 6b 6d 39	jsl $396d6b	do_locate       JSL EVID_ILOCATE         ; Set the cursor position
.396bfe		80 96		bra $396b96	                BRA done
.396c00		a6 63		ldx $63		go_eol          LDX EVID_COLS_VISIBLE    ; Move the cursor to the right most column
.396c02		ca		dex		                DEX
.396c03		a4 70		ldy $70		                LDY EVID_CURSORY
.396c05		22 6b 6d 39	jsl $396d6b	                JSL EVID_ILOCATE
.396c09		e2 20		sep #$20	                SEP #$20        ; set A short
.396c0b		a7 6b		lda [$6b]	eol_loop        LDA [EVID_CURSORPOS]     ; Get the character under the cursor
.396c0d		c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.396c0f		d0 0b		bne $396c1c	                BNE eol_done        ; No: exit the loop
.396c11		22 fa 6c 39	jsl $396cfa	                JSL EVID_ICSRLEFT        ; Yes: move to the left
.396c15		a6 6e		ldx $6e		                LDX EVID_CURSORX         ; Are we at column 0?
.396c17		d0 f2		bne $396c0b	                BNE eol_loop        ; No: try again
.396c19		82 7a ff	brl $396b96	                BRL done            ; Yes: we're done
.396c1c		a6 6e		ldx $6e		eol_done        LDX EVID_CURSORX         ; Check the column
.396c1e		e8		inx		                INX
.396c1f		e4 63		cpx $63		                CPX EVID_COLS_VISIBLE    ; Is it the right most?
.396c21		d0 03		bne $396c26	                BNE eol_right
.396c23		82 70 ff	brl $396b96	                BRL done            ; Yes: we're done
.396c26		22 c7 6c 39	jsl $396cc7	eol_right       JSL EVID_ICSRRIGHT       ; No: move right one column
.396c2a		82 69 ff	brl $396b96	                BRL done
.396c2d						EVID_SCRSHIFTLL
.396c2d		da		phx		                PHX
.396c2e		5a		phy		                PHY
.396c2f		48		pha		                PHA
.396c30		0b		phd		                PHD
.396c31		08		php		                PHP
.396c32		48		pha		                PHA             ; begin setdp macro
.396c33		08		php		                PHP
.396c34		c2 20		rep #$20	                REP #$20        ; set A long
.396c36		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396c39		5b		tcd		                TCD
.396c3a		28		plp		                PLP
.396c3b		68		pla		                PLA             ; end setdp macro
.396c3c		c2 30		rep #$30	                REP #$30        ; set A&X long
.396c3e		a5 6b		lda $6b		                LDA EVID_CURSORPOS       ; Get the current cursor position
.396c40		a8		tay		                TAY                 ; Set it as the destination
.396c41		aa		tax		                TAX
.396c42		e8		inx		                INX                 ; And set the next cell as the source
.396c43		18		clc		                CLC                 ; Calculate the length of the block to move
.396c44		a5 63		lda $63		                LDA EVID_COLS_VISIBLE    ; as columns visible - X
.396c46		e5 6e		sbc $6e		                SBC EVID_CURSORX
.396c48		54 ae ae	mvn $ae,$ae	                MVN $AE, $AE        ; And move the block
.396c4b		28		plp		                PLP
.396c4c		2b		pld		                PLD
.396c4d		68		pla		                PLA
.396c4e		7a		ply		                PLY
.396c4f		fa		plx		                PLX
.396c50		6b		rtl		                RTL
.396c51						EVID_SCRSHIFTLR
.396c51		da		phx		                PHX
.396c52		48		pha		                PHA
.396c53		0b		phd		                PHD
.396c54		08		php		                PHP
.396c55		48		pha		                PHA             ; begin setdp macro
.396c56		08		php		                PHP
.396c57		c2 20		rep #$20	                REP #$20        ; set A long
.396c59		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396c5c		5b		tcd		                TCD
.396c5d		28		plp		                PLP
.396c5e		68		pla		                PLA             ; end setdp macro
.396c5f		c2 30		rep #$30	                REP #$30        ; set A&X long
.396c61		a5 6e		lda $6e		                LDA EVID_CURSORX         ; What column are we on
.396c63		1a		inc a		                INC A
.396c64		c5 63		cmp $63		                CMP EVID_COLS_VISIBLE    ; >= the # visible?
.396c66		b0 1b		bcs $396c83	                BGE done            ; Yes: just skip the whole thing
.396c68		38		sec		                SEC                 ; Calculate the length of the block to move
.396c69		a5 63		lda $63		                LDA EVID_COLS_VISIBLE
.396c6b		e5 6e		sbc $6e		                SBC EVID_CURSORX
.396c6d		1a		inc a		                INC A
.396c6e		18		clc		                CLC
.396c6f		65 6b		adc $6b		                ADC EVID_CURSORPOS       ; Add the current cursor position
.396c71		3a		dec a		                DEC A
.396c72		a8		tay		                TAY                 ; Make it the destination
.396c73		3a		dec a		                DEC A               ; Move to the previous column
.396c74		aa		tax		                TAX                 ; Make it the source
.396c75		38		sec		                SEC                 ; Calculate the length of the block to move
.396c76		a5 63		lda $63		                LDA EVID_COLS_VISIBLE    ; as columns visible - X
.396c78		e5 6e		sbc $6e		                SBC EVID_CURSORX
.396c7a		44 ae ae	mvp $ae,$ae	                MVP $AE, $AE        ; And move the block
.396c7d		e2 20		sep #$20	                SEP #$20        ; set A short
.396c7f		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.396c81		87 6b		sta [$6b]	                STA [EVID_CURSORPOS]
.396c83		28		plp		done            PLP
.396c84		2b		pld		                PLD
.396c85		68		pla		                PLA
.396c86		fa		plx		                PLX
.396c87		6b		rtl		                RTL
.396c88						EVID_IPUTB
.396c88		6b		rtl		                RTL
.396c89						EVID_IPRINTCR
.396c89		da		phx		                PHX
.396c8a		5a		phy		                PHY
.396c8b		8b		phb		                PHB
.396c8c		0b		phd		                PHD
.396c8d		08		php		                PHP
.396c8e		48		pha		                PHA             ; begin setdbr macro
.396c8f		08		php		                PHP
.396c90		e2 20		sep #$20	                SEP #$20        ; set A short
.396c92		a9 00		lda #$00	                LDA #0
.396c94		48		pha		                PHA
.396c95		ab		plb		                PLB
.396c96		28		plp		                PLP
.396c97		68		pla		                PLA             ; end setdbr macro
.396c98		48		pha		                PHA             ; begin setdp macro
.396c99		08		php		                PHP
.396c9a		c2 20		rep #$20	                REP #$20        ; set A long
.396c9c		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396c9f		5b		tcd		                TCD
.396ca0		28		plp		                PLP
.396ca1		68		pla		                PLA             ; end setdp macro
.396ca2		e2 20		sep #$20	                SEP #$20        ; set A short
.396ca4		c2 10		rep #$10	                REP #$10        ; set X long
.396ca6		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.396ca9		a4 70		ldy $70		                LDY EVID_CURSORY
.396cab		c8		iny		                INY
.396cac		22 6b 6d 39	jsl $396d6b	                JSL EVID_ILOCATE
.396cb0		28		plp		done            PLP
.396cb1		2b		pld		                PLD
.396cb2		ab		plb		                PLB
.396cb3		7a		ply		                PLY
.396cb4		fa		plx		                PLX
.396cb5		6b		rtl		                RTL
.396cb6						EVID_ICSRHOME
.396cb6		da		phx		                PHX
.396cb7		5a		phy		                PHY
.396cb8		08		php		                PHP
.396cb9		a2 00 00	ldx #$0000	                LDX #0
.396cbc		a0 00 00	ldy #$0000	                LDY #0
.396cbf		22 6b 6d 39	jsl $396d6b	                JSL EVID_ILOCATE
.396cc3		28		plp		                PLP
.396cc4		7a		ply		                PLY
.396cc5		fa		plx		                PLX
.396cc6		6b		rtl		                RTL
.396cc7						EVID_ICSRRIGHT
.396cc7		da		phx		                PHX
.396cc8		5a		phy		                PHY
.396cc9		48		pha		                PHA
.396cca		0b		phd		                PHD
.396ccb		08		php		                PHP
.396ccc		c2 20		rep #$20	                REP #$20        ; set A long
.396cce		c2 10		rep #$10	                REP #$10        ; set X long
.396cd0		48		pha		                PHA             ; begin setdp macro
.396cd1		08		php		                PHP
.396cd2		c2 20		rep #$20	                REP #$20        ; set A long
.396cd4		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.396cd7		5b		tcd		                TCD
.396cd8		28		plp		                PLP
.396cd9		68		pla		                PLA             ; end setdp macro
.396cda		a6 6e		ldx $6e		                LDX EVID_CURSORX           ; Get the new column
.396cdc		e8		inx		                INX
.396cdd		a4 70		ldy $70		                LDY EVID_CURSORY           ; Get the current row
.396cdf		e4 63		cpx $63		                CPX EVID_COLS_VISIBLE      ; Are we off screen?
.396ce1		90 0d		bcc $396cf0	                BCC icsrright_nowrap  ; No: just set the position
.396ce3		a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.396ce6		c8		iny		                INY                   ; And move to the next row
.396ce7		c4 67		cpy $67		                CPY EVID_LINES_VISIBLE     ; Are we still off screen?
.396ce9		90 05		bcc $396cf0	                BCC icsrright_nowrap  ; No: just set the position
.396ceb		88		dey		                DEY                   ; Yes: lock to the last row
.396cec		22 b7 6d 39	jsl $396db7	                JSL EVID_ISCROLLUP         ; But scroll the screen up
.396cf0						icsrright_nowrap
.396cf0		22 6b 6d 39	jsl $396d6b	                JSL EVID_ILOCATE           ; Set the cursor position
.396cf4		28		plp		                PLP
.396cf5		2b		pld		                PLD
.396cf6		68		pla		                PLA
.396cf7		7a		ply		                PLY
.396cf8		fa		plx		                PLX
.396cf9		6b		rtl		                RTL
.396cfa						EVID_ICSRLEFT
.396cfa		da		phx		                PHX
.396cfb		5a		phy		                PHY
.396cfc		48		pha		                PHA
.396cfd		0b		phd		                PHD
.396cfe		08		php		                PHP
.396cff		c2 30		rep #$30	                REP #$30        ; set A&X long
.396d01		48		pha		                PHA             ; begin setdp macro
.396d02		08		php		                PHP
.396d03		c2 20		rep #$20	                REP #$20        ; set A long
.396d05		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.396d08		5b		tcd		                TCD
.396d09		28		plp		                PLP
.396d0a		68		pla		                PLA             ; end setdp macro
.396d0b		a5 6e		lda $6e		                LDA EVID_CURSORX
.396d0d		f0 0b		beq $396d1a	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.396d0f		a6 6e		ldx $6e		                LDX EVID_CURSORX
.396d11		ca		dex		                DEX
.396d12		86 6e		stx $6e		                STX EVID_CURSORX
.396d14		a4 70		ldy $70		                LDY EVID_CURSORY
.396d16		22 6b 6d 39	jsl $396d6b	                JSL EVID_ILOCATE
.396d1a						icsrleft_done_already_zero
.396d1a		28		plp		                PLP
.396d1b		2b		pld		                PLD
.396d1c		68		pla		                PLA
.396d1d		7a		ply		                PLY
.396d1e		fa		plx		                PLX
.396d1f		6b		rtl		                RTL
.396d20						EVID_ICSRUP
.396d20		da		phx		                PHX
.396d21		5a		phy		                PHY
.396d22		48		pha		                PHA
.396d23		0b		phd		                PHD
.396d24		08		php		                PHP
.396d25		c2 30		rep #$30	                REP #$30        ; set A&X long
.396d27		48		pha		                PHA             ; begin setdp macro
.396d28		08		php		                PHP
.396d29		c2 20		rep #$20	                REP #$20        ; set A long
.396d2b		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.396d2e		5b		tcd		                TCD
.396d2f		28		plp		                PLP
.396d30		68		pla		                PLA             ; end setdp macro
.396d31		a5 70		lda $70		                LDA EVID_CURSORY
.396d33		f0 0b		beq $396d40	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.396d35		a4 70		ldy $70		                LDY EVID_CURSORY
.396d37		88		dey		                DEY
.396d38		84 70		sty $70		                STY EVID_CURSORY
.396d3a		a6 6e		ldx $6e		                LDX EVID_CURSORX
.396d3c		22 6b 6d 39	jsl $396d6b	                JSL EVID_ILOCATE
.396d40						isrup_done_already_zero
.396d40		28		plp		                PLP
.396d41		2b		pld		                PLD
.396d42		68		pla		                PLA
.396d43		7a		ply		                PLY
.396d44		fa		plx		                PLX
.396d45		6b		rtl		                RTL
.396d46						EVID_ICSRDOWN
.396d46		da		phx		                PHX
.396d47		5a		phy		                PHY
.396d48		0b		phd		                PHD
.396d49		c2 30		rep #$30	                REP #$30        ; set A&X long
.396d4b		48		pha		                PHA             ; begin setdp macro
.396d4c		08		php		                PHP
.396d4d		c2 20		rep #$20	                REP #$20        ; set A long
.396d4f		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.396d52		5b		tcd		                TCD
.396d53		28		plp		                PLP
.396d54		68		pla		                PLA             ; end setdp macro
.396d55		a6 6e		ldx $6e		                LDX EVID_CURSORX                 ; Get the current column
.396d57		a4 70		ldy $70		                LDY EVID_CURSORY                 ; Get the new row
.396d59		c8		iny		                INY
.396d5a		c4 67		cpy $67		                CPY EVID_LINES_VISIBLE           ; Check to see if we're off screen
.396d5c		90 05		bcc $396d63	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.396d5e		88		dey		                DEY                         ; Yes: go back to the last row
.396d5f		22 b7 6d 39	jsl $396db7	                JSL EVID_ISCROLLUP               ; But scroll the screen up
.396d63						icsrdown_noscroll
.396d63		22 6b 6d 39	jsl $396d6b	                JSL EVID_ILOCATE                 ; And set the cursor position
.396d67		2b		pld		                PLD
.396d68		7a		ply		                PLY
.396d69		fa		plx		                PLX
.396d6a		6b		rtl		                RTL
.396d6b						EVID_ILOCATE
.396d6b		48		pha		                PHA
.396d6c		0b		phd		                PHD
.396d6d		08		php		                PHP
.396d6e		48		pha		                PHA             ; begin setdp macro
.396d6f		08		php		                PHP
.396d70		c2 20		rep #$20	                REP #$20        ; set A long
.396d72		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396d75		5b		tcd		                TCD
.396d76		28		plp		                PLP
.396d77		68		pla		                PLA             ; end setdp macro
.396d78		c2 30		rep #$30	                REP #$30        ; set A&X long
.396d7a						ilocate_scroll
.396d7a		c4 67		cpy $67		                CPY EVID_LINES_VISIBLE
.396d7c		90 07		bcc $396d85	                BCC ilocate_scrolldone
.396d7e		22 b7 6d 39	jsl $396db7	                JSL EVID_ISCROLLUP
.396d82		88		dey		                DEY
.396d83		80 f5		bra $396d7a	                BRA ilocate_scroll
.396d85						ilocate_scrolldone
.396d85		86 6e		stx $6e		                STX EVID_CURSORX
.396d87		84 70		sty $70		                STY EVID_CURSORY
.396d89		a5 60		lda $60		                LDA EVID_SCREENBEGIN
.396d8b						ilocate_row
.396d8b		c0 00 00	cpy #$0000	                CPY #$0
.396d8e		f0 08		beq $396d98	                BEQ ilocate_right
.396d90		18		clc		ilocate_down    CLC
.396d91		65 65		adc $65		                ADC EVID_COLS_PER_LINE
.396d93		88		dey		                DEY
.396d94		f0 02		beq $396d98	                BEQ ilocate_right
.396d96		80 f8		bra $396d90	                BRA ilocate_down
.396d98		18		clc		ilocate_right   CLC
.396d99		65 6e		adc $6e		                ADC EVID_CURSORX             ; move the cursor right X columns
.396d9b		85 6b		sta $6b		                STA EVID_CURSORPOS
.396d9d		a4 70		ldy $70		                LDY EVID_CURSORY
.396d9f		98		tya		                TYA
.396da0		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.396da4		8a		txa		                TXA
.396da5		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.396da9		c2 20		rep #$20	                REP #$20        ; set A long
.396dab		18		clc		                CLC
.396dac		a5 6b		lda $6b		                LDA EVID_CURSORPOS
.396dae		69 00 20	adc #$2000	                ADC #<>(EVID_COLOR_MEM - EVID_TEXT_MEM)
.396db1		85 76		sta $76		                STA EVID_COLORPOS
.396db3		28		plp		ilocate_done    PLP
.396db4		2b		pld		                PLD
.396db5		68		pla		                PLA
.396db6		6b		rtl		                RTL
.396db7						EVID_ISCROLLUP
.396db7		48		pha		                PHA
.396db8		da		phx		                PHX
.396db9		5a		phy		                PHY
.396dba		8b		phb		                PHB
.396dbb		0b		phd		                PHD
.396dbc		08		php		                PHP
.396dbd		48		pha		                PHA             ; begin setdp macro
.396dbe		08		php		                PHP
.396dbf		c2 20		rep #$20	                REP #$20        ; set A long
.396dc1		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396dc4		5b		tcd		                TCD
.396dc5		28		plp		                PLP
.396dc6		68		pla		                PLA             ; end setdp macro
.396dc7		c2 30		rep #$30	                REP #$30        ; set A&X long
.396dc9		a5 65		lda $65		                LDA EVID_COLS_PER_LINE
.396dcb		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.396dcf		a5 67		lda $67		                LDA EVID_LINES_VISIBLE
.396dd1		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.396dd5		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.396dd9		85 79		sta $79		                STA EVID_TMPPTR1
.396ddb		18		clc		                CLC
.396ddc		a9 00 20	lda #$2000	                LDA #$2000
.396ddf		a8		tay		                TAY
.396de0		65 65		adc $65		                ADC EVID_COLS_PER_LINE
.396de2		aa		tax		                TAX
.396de3		a5 79		lda $79		                LDA EVID_TMPPTR1
.396de5		54 ae ae	mvn $ae,$ae	                MVN $AE,$AE
.396de8		c2 30		rep #$30	                REP #$30        ; set A&X long
.396dea		18		clc		                CLC
.396deb		a9 00 40	lda #$4000	                LDA #$4000
.396dee		a8		tay		                TAY
.396def		65 65		adc $65		                ADC EVID_COLS_PER_LINE
.396df1		aa		tax		                TAX
.396df2		a5 79		lda $79		                LDA EVID_TMPPTR1
.396df4		54 ae ae	mvn $ae,$ae	                MVN $AE,$AE
.396df7		a5 79		lda $79		                LDA EVID_TMPPTR1
.396df9		48		pha		                PHA
.396dfa		18		clc		                CLC
.396dfb		69 00 20	adc #$2000	                ADC #<>EVID_TEXT_MEM
.396dfe		85 79		sta $79		                STA EVID_TMPPTR1
.396e00		a0 00 00	ldy #$0000	                LDY #0
.396e03		a9 20 00	lda #$0020	                LDA #' '
.396e06		97 79		sta [$79],y	clr_text        STA [EVID_TMPPTR1],Y
.396e08		c8		iny		                INY
.396e09		c4 63		cpy $63		                CPY EVID_COLS_VISIBLE
.396e0b		d0 f9		bne $396e06	                BNE clr_text
.396e0d		68		pla		                PLA
.396e0e		18		clc		                CLC
.396e0f		69 00 40	adc #$4000	                ADC #<>EVID_COLOR_MEM
.396e12		85 79		sta $79		                STA EVID_TMPPTR1
.396e14		a0 00 00	ldy #$0000	                LDY #0
.396e17		a5 72		lda $72		                LDA EVID_CURCOLOR
.396e19		97 79		sta [$79],y	clr_color       STA [EVID_TMPPTR1],Y
.396e1b		c8		iny		                INY
.396e1c		c4 63		cpy $63		                CPY EVID_COLS_VISIBLE
.396e1e		d0 f9		bne $396e19	                BNE clr_color
.396e20		28		plp		                PLP
.396e21		2b		pld		                PLD
.396e22		ab		plb		                PLB
.396e23		7a		ply		                PLY
.396e24		fa		plx		                PLX
.396e25		68		pla		                PLA
.396e26		6b		rtl		                RTL
.396e27						EVID_IPRINTH
.396e27		08		php		                PHP
.396e28		48		pha		                PHA
.396e29						iprinth1
.396e29		e2 20		sep #$20	                SEP #$20        ; set A short
.396e2b		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.396e2e		4a		lsr a		                LSR
.396e2f		4a		lsr a		                LSR
.396e30		4a		lsr a		                LSR
.396e31		4a		lsr a		                LSR
.396e32		22 81 6e 39	jsl $396e81	                JSL EVID_iprint_digit
.396e36		bd 00 00	lda $0000,x	                LDA #0,b,x
.396e39		22 81 6e 39	jsl $396e81	                JSL EVID_iprint_digit
.396e3d		ca		dex		                DEX
.396e3e		88		dey		                DEY
.396e3f		d0 e8		bne $396e29	                BNE iprinth1
.396e41		68		pla		                PLA
.396e42		28		plp		                PLP
.396e43		6b		rtl		                RTL
.396e44						EVID_IPRINTAH
.396e44		48		pha		                PHA
.396e45		08		php		                PHP
.396e46		8f 44 02 00	sta $000244	                STA @lCPUA              ; Save A where we can use it multiple times
.396e4a		08		php		                PHP                     ; Get the processor status into A
.396e4b		e2 20		sep #$20	                SEP #$20        ; set A short
.396e4d		c2 10		rep #$10	                REP #$10        ; set X long
.396e4f		68		pla		                PLA
.396e50		29 20		and #$20	                AND #%00100000          ; Is M = 1?
.396e52		c9 20		cmp #$20	                CMP #%00100000
.396e54		f0 14		beq $396e6a	                BEQ eight_bit
.396e56		af 45 02 00	lda $000245	                LDA @lCPUA+1            ; Get nibble [15..12]
.396e5a		4a		lsr a		                LSR A
.396e5b		4a		lsr a		                LSR A
.396e5c		4a		lsr a		                LSR A
.396e5d		4a		lsr a		                LSR A
.396e5e		22 81 6e 39	jsl $396e81	                JSL EVID_iprint_digit   ; And print it
.396e62		af 45 02 00	lda $000245	                LDA @lCPUA+1            ; Get nibble [11..8]
.396e66		22 81 6e 39	jsl $396e81	                JSL EVID_iprint_digit   ; And print it
.396e6a		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA              ; Get nibble [7..4]
.396e6e		4a		lsr a		                LSR A
.396e6f		4a		lsr a		                LSR A
.396e70		4a		lsr a		                LSR A
.396e71		4a		lsr a		                LSR A
.396e72		22 81 6e 39	jsl $396e81	                JSL EVID_iprint_digit   ; And print it
.396e76		af 44 02 00	lda $000244	                LDA @lCPUA              ; Get nibble [3..0]
.396e7a		22 81 6e 39	jsl $396e81	                JSL EVID_iprint_digit   ; And print it
.396e7e		28		plp		                PLP
.396e7f		68		pla		                PLA
.396e80		6b		rtl		                RTL
.396e81						EVID_iprint_digit
.396e81		da		phx		                PHX
.396e82		c2 20		rep #$20	                REP #$20        ; set A long
.396e84		29 0f 00	and #$000f	                AND #$0F
.396e87		aa		tax		                TAX
.396e88		bf 90 88 39	lda $398890,x	                LDA hex_digits,X
.396e8c		22 2e 6b 39	jsl $396b2e	                JSL EVID_IPUTC       ; Print the digit
.396e90		fa		plx		                PLX
.396e91		6b		rtl		                RTL
.396e92						INIT_EVID_VID_MODE
.396e92		e2 20		sep #$20	                SEP #$20        ; set A short
.396e94		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable          ; 0 - 80x60, 1- 100x75
.396e96		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.396e9a		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable           ; Enable the Border
.396e9c		8f 04 1e ae	sta $ae1e04	                STA EVID_BORDER_CTRL_REG
.396ea0		a9 08		lda #$08	                LDA #8                           ; Set the border to the standard 8 pixels
.396ea2		8f 08 1e ae	sta $ae1e08	                STA EVID_BORDER_X_SIZE          ; Let's use maximum space
.396ea6		8f 09 1e ae	sta $ae1e09	                STA EVID_BORDER_Y_SIZE
.396eaa		a9 20		lda #$20	                LDA #$20
.396eac		8f 07 1e ae	sta $ae1e07	                STA EVID_BORDER_COLOR_R        ; R
.396eb0		a9 00		lda #$00	                LDA #$00
.396eb2		8f 06 1e ae	sta $ae1e06	                STA EVID_BORDER_COLOR_G        ; G
.396eb6		a9 20		lda #$20	                LDA #$20
.396eb8		8f 05 1e ae	sta $ae1e05	                STA EVID_BORDER_COLOR_B        ; B
.396ebc		22 8e 6f 39	jsl $396f8e	                JSL INIT_EVID_EVID_LUT
.396ec0		22 77 6f 39	jsl $396f77	                JSL INIT_EVID_EVID_FONTSET
.396ec4		22 b2 6f 39	jsl $396fb2	                JSL INIT_EVID_EVID_CURSOR
.396ec8		c2 30		rep #$30	                REP #$30        ; set A&X long
.396eca		a2 62 00	ldx #$0062	                LDX #(100-2)
.396ecd		86 63		stx $63		                STX EVID_COLS_VISIBLE
.396ecf		a0 49 00	ldy #$0049	                LDY #(75-2)
.396ed2		84 67		sty $67		                STY EVID_LINES_VISIBLE
.396ed4		a2 64 00	ldx #$0064	                LDX #100
.396ed7		86 65		stx $65		                STX EVID_COLS_PER_LINE
.396ed9		a0 4b 00	ldy #$004b	                LDY #75
.396edc		84 69		sty $69		                STY EVID_LINES_MAX
.396ede		a9 70 00	lda #$0070	                LDA #$70                  ; Set the default text color to light gray on dark gray
.396ee1		85 72		sta $72		                STA EVID_CURCOLOR
.396ee3		c2 30		rep #$30	                REP #$30        ; set A&X long
.396ee5		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM      ; store the initial screen buffer location
.396ee8		85 60		sta $60		                STA EVID_SCREENBEGIN
.396eea		85 6b		sta $6b		                STA EVID_CURSORPOS
.396eec		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM   ; Set the initial COLOR cursor position
.396eef		85 76		sta $76		                STA EVID_COLORPOS
.396ef1		e2 20		sep #$20	                SEP #$20        ; set A short
.396ef3		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.396ef5		85 0e		sta $0e		                STA SCREENBEGIN + 2
.396ef7		85 6d		sta $6d		                STA EVID_CURSORPOS+2
.396ef9		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM    ; Set the initial COLOR cursor position
.396efb		85 78		sta $78		                STA EVID_COLORPOS + 2
.396efd		22 d0 6f 39	jsl $396fd0	                JSL INIT_EVID_EVID_CLRSCREEN
.396f01		c2 10		rep #$10	                REP #$10        ; set X long
.396f03		0b		phd		                PHD
.396f04		48		pha		                PHA             ; begin setdbr macro
.396f05		08		php		                PHP
.396f06		e2 20		sep #$20	                SEP #$20        ; set A short
.396f08		a9 39		lda #$39	                LDA #`EVID_DEV_RDY0
.396f0a		48		pha		                PHA
.396f0b		ab		plb		                PLB
.396f0c		28		plp		                PLP
.396f0d		68		pla		                PLA             ; end setdbr macro
.396f0e		a2 2f 6f	ldx #$6f2f	                LDX #<>EVID_DEV_RDY0
.396f11		22 0e 6b 39	jsl $396b0e	                JSL EVID_IPRINT
.396f15		a2 5f 6f	ldx #$6f5f	                LDX #<>EVID_DEV_RDY1
.396f18		22 0e 6b 39	jsl $396b0e	                JSL EVID_IPRINT
.396f1c		2b		pld		                PLD
.396f1d		a2 00 00	ldx #$0000	                LDX #$0000
.396f20						LifeIsFullOfColors:
.396f20		bf 55 6f 39	lda $396f55,x	                LDA @l EVID_DEV_RDY0_CLR, X
.396f24		9f 00 40 ae	sta $ae4000,x	                STA @l EVID_COLOR_MEM, X
.396f28		e8		inx		                INX
.396f29		e0 0a 00	cpx #$000a	                CPX #10
.396f2c		d0 f2		bne $396f20	                BNE LifeIsFullOfColors
.396f2e		6b		rtl		                RTL
>396f2f		0b 0c 0b 0c 0b 0c 0b 0c		EVID_DEV_RDY0  .null $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "C256 Foenix EXP-C200-EVID", $0D
>396f37		0b 0c 20 43 32 35 36 20 46 6f 65 6e 69 78 20 45
>396f47		58 50 2d 43 32 30 30 2d 45 56 49 44 0d 00
>396f55		1d 1d 8d 8d 4d 4d 2d 2d		EVID_DEV_RDY0_CLR .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D
>396f5d		5d 5d
>396f5f		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1  .null "Your Device is Ready..."
>396f67		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
=100						TXTLINESIZE = 100
.396f77						INIT_EVID_EVID_FONTSET
.396f77		e2 20		sep #$20	                SEP #$20        ; set A short
.396f79		c2 10		rep #$10	                REP #$10        ; set X long
.396f7b		a2 00 00	ldx #$0000	                LDX #$0000
.396f7e						initFontsetbranch0
.396f7e		bf 00 00 3f	lda $3f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.396f82		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X ; Vicky FONT RAM Bank
.396f86		e8		inx		                INX
.396f87		e0 00 08	cpx #$0800	                CPX #$0800
.396f8a		d0 f2		bne $396f7e	                BNE initFontsetbranch0
.396f8c		ea		nop		                NOP
.396f8d		6b		rtl		                RTL
.396f8e						INIT_EVID_EVID_LUT
.396f8e		e2 20		sep #$20	                SEP #$20        ; set A short
.396f90		e2 10		sep #$10	                SEP #$10        ; set X short
.396f92		a2 00		ldx #$00					        LDX	#$00
.396f94		bf bf 85 39	lda $3985bf,x	lutinitloop0	LDA @lfg_color_lut,x		; get Local Data c64_character_Color_LUT_4_Txt
.396f98		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	; Write in LUT Memory
.396f9c		e8		inx		                inx
.396f9d		e0 40		cpx #$40	                cpx #$40
.396f9f		d0 f3		bne $396f94	                bne lutinitloop0
.396fa1		a2 00		ldx #$00	                LDX	#$00
.396fa3		bf ff 85 39	lda $3985ff,x	lutinitloop1	LDA @lbg_color_lut,x		; get Local Data
.396fa7		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	; Write in LUT Memory
.396fab		e8		inx		                INX
.396fac		e0 40		cpx #$40	                CPX #$40
.396fae		d0 f3		bne $396fa3	                bne lutinitloop1
.396fb0		ea		nop		                NOP
.396fb1		6b		rtl		                RTL
.396fb2						INIT_EVID_EVID_CURSOR
.396fb2		e2 20		sep #$20	                SEP #$20        ; set A short
.396fb4		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.396fb6		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.396fba		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0)      ;Set Cursor Enable And Flash Rate @1Hz
.396fbc		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG ;
.396fc0		c2 30		rep #$30	                REP #$30        ; set A&X long
.396fc2		a9 00 00	lda #$0000	                LDA #$0000;
.396fc5		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L ;; // Set the X to Position 1
.396fc9		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L ; // Set the Y to Position 6 (Below)
.396fcd		e2 20		sep #$20	                SEP #$20        ; set A short
.396fcf		6b		rtl		                RTL
.396fd0						INIT_EVID_EVID_CLRSCREEN
.396fd0		e2 20		sep #$20	                SEP #$20        ; set A short
.396fd2		c2 10		rep #$10	                REP #$10        ; set X long
.396fd4		a2 00 00	ldx #$0000	                LDX #$0000		; Only Use One Pointer
.396fd7		a9 20		lda #$20	                LDA #$20		; Fill the Entire Screen with Space
.396fd9		9f 00 20 ae	sta $ae2000,x	iclearloop0	    STA EVID_TEXT_MEM, x	;
.396fdd		e8		inx		                inx
.396fde		e0 00 20	cpx #$2000	                cpx #$2000
.396fe1		d0 f6		bne $396fd9	                bne iclearloop0
.396fe3		a2 00 00	ldx #$0000	                LDX	#$0000		; Only Use One Pointer
.396fe6		a9 f0		lda #$f0	                LDA #$F0		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.396fe8		9f 00 40 ae	sta $ae4000,x	iclearloop1	    STA EVID_COLOR_MEM, x	;
.396fec		e8		inx		                inx
.396fed		e0 00 20	cpx #$2000	                cpx #$2000
.396ff0		d0 f6		bne $396fe8	                bne iclearloop1
.396ff2		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/ansi_screens.asm

.0000						S_ANSI_VARS
>0000						SCREENBEGIN         .long ?     ; Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>0003						COLS_VISIBLE        .word ?     ; Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>0005						COLS_PER_LINE       .word ?     ; Columns in memory per screen line. A virtual line can be this long. Default=128
>0007						LINES_VISIBLE       .word ?     ; The number of rows visible on the screen. Default=25
>0009						LINES_MAX           .word ?     ; The number of rows in memory for the screen. Default=64
>000b						CURSORPOS           .long ?     ; The next character written to the screen will be written in this location.
>000e						CURSORX             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0010						CURSORY             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0012						CURCOLOR            .byte ?     ; Color of next character to be printed to the screen.
>0013						COLORPOS            .long ?     ; Address of cursor's position in the color matrix
>0016						COLORBEGIN          .long ?     ; Address of the first byte of the color matrix for this screen
>0019						TMPPTR1             .dword ?    ; Temporary pointer
>001d						STATE               .byte ?     ; State of the escape code parser
>001e						CONTROL             .byte ?     ; Control bit
>001f						ARGC                .byte ?     ; The number of arguments provided by the escape sequence (max 2)
>0020						ARG0                .byte ?     ; First ANSI code argument
>0021						ARG1                .byte ?     ; Second ANSI code argument
=0						ST_INIT = 0             ; Starting state for the ANSI code parser. Most characters just print
=1						ST_ESCAPE = 1           ; ESC has been seen
=2						ST_CSI = 2              ; Full CSI has been seen "ESC ["
=2						ANSI_MAX_ARG = 2        ; We'll limit ourselves to two arguments
=$70						ANSI_DEF_COLOR = $70    ; Default color (dim white on dim black)
=$80						CONTROL_INVERT = $80    ; Control bit: Colors are inverted
=$40						CONTROL_BOLD = $40      ; Control bit: Colors should be intense
.396ff3						ANSI_INIT
.396ff3		da		phx		                    PHX
.396ff4		5a		phy		                    PHY
.396ff5		8b		phb		                    PHB
.396ff6		0b		phd		                    PHD
.396ff7		08		php		                    PHP
.396ff8		c2 30		rep #$30	                REP #$30        ; set A&X long
.396ffa		a0 00 00	ldy #$0000	                    LDY #0
.396ffd		22 a6 70 39	jsl $3970a6	                    JSL INIT_SCREEN_Y               ; Set up the main screen
.397001		e2 20		sep #$20	                SEP #$20        ; set A short
.397003		af 87 e8 af	lda $afe887	                    LDA @l GABE_SYS_STAT            ; Let's check the Presence of an Expansion Card here
.397007		29 10		and #$10	                    AND #GABE_SYS_STAT_EXP          ; When there is a Card the Value is 1
.397009		c9 10		cmp #$10	                    CMP #GABE_SYS_STAT_EXP
.39700b		d0 1c		bne $397029	                    BNE no_evid
.39700d		c2 20		rep #$20	                REP #$20        ; set A long
.39700f		af 12 00 ae	lda $ae0012	                    LDA @l ESID_ID_CARD_ID_Lo       ; Load the Card ID and check for C100 or C200
.397013		c9 c8 00	cmp #$00c8	                    CMP #$00C8                      ; Is it the EVID card?
.397016		d0 11		bne $397029	                    BNE no_evid                     ; No: mark the EVID screen as not present
.397018		e2 20		sep #$20	                SEP #$20        ; set A short
.39701a		a9 01		lda #$01	                    LDA #1                          ; Otherwise: Mark that there is an EVID present
.39701c		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.397020		a0 01 00	ldy #$0001	                    LDY #1
.397023		22 a6 70 39	jsl $3970a6	                    JSL INIT_SCREEN_Y               ; Initialize the EVID screen variables
.397027		80 08		bra $397031	                    BRA done
.397029						no_evid
.397029		e2 20		sep #$20	                SEP #$20        ; set A short
.39702b		a9 00		lda #$00	                    LDA #0                          ; Mark that there is no EVID present
.39702d		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.397031		28		plp		done                PLP
.397032		2b		pld		                    PLD
.397033		ab		plb		                    PLB
.397034		7a		ply		                    PLY
.397035		fa		plx		                    PLX
.397036		6b		rtl		                    RTL
.397037						ANSI_INIT_LUTS
.397037		08		php		                    PHP
.397038		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39703a		a2 00		ldx #$00	                    LDX #0
.39703c		bd 66 70	lda $397066,x	vicky_loop          LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.39703f		9f 40 1f af	sta $af1f40,x	                    STA @l FG_CHAR_LUT_PTR,X        ; Set the corresponding foreground color component on Vicky
.397043		9f 80 1f af	sta $af1f80,x	                    STA @l BG_CHAR_LUT_PTR,X        ; Set the corresponding background color component on Vicky
.397047		e8		inx		                    INX
.397048		e0 40		cpx #$40	                    CPX #4*16
.39704a		d0 f0		bne $39703c	                    BNE vicky_loop
.39704c		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Check to see if EVID is present
.397050		f0 12		beq $397064	                    BEQ done                        ; If not, we're done
.397052		a2 00		ldx #$00	                    LDX #0
.397054		bd 66 70	lda $397066,x	evid_loop           LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.397057		9f 00 1b ae	sta $ae1b00,x	                    STA @l EVID_FG_LUT,X            ; Set the corresponding foreground color component on the EVID card
.39705b		9f 40 1b ae	sta $ae1b40,x	                    STA @l EVID_BG_LUT,X            ; Set the corresponding background color component on the EVID card
.39705f		e8		inx		                    INX
.397060		e0 40		cpx #$40	                    CPX #4*16
.397062		d0 f0		bne $397054	                    BNE evid_loop
.397064		28		plp		done                PLP
.397065		6b		rtl		                    RTL
.397066						ANSI_TEXT_LUT
>397066		00 00 00 00			                    .byte 0, 0, 0, 0
>39706a		00 00 80 00			                    .byte 0, 0, 128, 0
>39706e		00 80 00 00			                    .byte 0, 128, 0, 0
>397072		00 80 80 00			                    .byte 0, 128, 128, 0
>397076		80 00 00 00			                    .byte 128, 0, 0, 0
>39707a		80 00 80 00			                    .byte 128, 0, 128, 0
>39707e		80 80 00 00			                    .byte 128, 128, 0, 0
>397082		c0 c0 c0 00			                    .byte 192, 192, 192, 0
>397086		80 80 80 00			                    .byte 128, 128, 128, 0
>39708a		00 00 ff 00			                    .byte 0, 0, 255, 0
>39708e		00 ff 00 00			                    .byte 0, 255, 0, 0
>397092		00 ff ff 00			                    .byte 0, 255, 255, 0
>397096		ff 00 00 00			                    .byte 255, 0, 0, 0
>39709a		00 7f fc 00			                    .byte 0, 127, 252, 0
>39709e		ff ff 00 00			                    .byte 255, 255, 0, 0
>3970a2		ff ff ff 00			                    .byte 255, 255, 255, 0
.3970a6						INIT_SCREEN_Y
.3970a6		c2 30		rep #$30	                REP #$30        ; set A&X long
.3970a8		c0 00 00	cpy #$0000	                    CPY #0
.3970ab		f0 06		beq $3970b3	                    BEQ setdp_0
.3970ad		a9 60 00	lda #$0060	setdp_1             LDA #<>EVID_SCREENBEGIN         ; Set DP to the EVID variable block
.3970b0		5b		tcd		                    TCD
.3970b1		80 04		bra $3970b7	                    BRA set_addresses
.3970b3		a9 0c 00	lda #$000c	setdp_0             LDA #<>SCREENBEGIN              ; Set DP to the main screen variable block
.3970b6		5b		tcd		                    TCD
.3970b7		98		tya		set_addresses       TYA                             ; Compute offset to screen Y's addresses
.3970b8		0a		asl a		                    ASL A
.3970b9		0a		asl a		                    ASL A
.3970ba		aa		tax		                    TAX
.3970bb		bf f6 70 39	lda $3970f6,x	                    LDA @l text_address,X
.3970bf		85 00		sta $00		                    STA #S_ANSI_VARS.SCREENBEGIN,D  ; Set the address of the text matrix
.3970c1		85 0b		sta $0b		                    STA #S_ANSI_VARS.CURSORPOS,D    ; And the cursor pointer
.3970c3		e2 20		sep #$20	                SEP #$20        ; set A short
.3970c5		bf f8 70 39	lda $3970f8,x	                    LDA @l text_address+2,X
.3970c9		85 02		sta $02		                    STA #S_ANSI_VARS.SCREENBEGIN+2,D
.3970cb		85 0d		sta $0d		                    STA #S_ANSI_VARS.CURSORPOS+2,D
.3970cd		c2 20		rep #$20	                REP #$20        ; set A long
.3970cf		bf fe 70 39	lda $3970fe,x	                    LDA @l color_address,X
.3970d3		85 16		sta $16		                    STA #S_ANSI_VARS.COLORBEGIN,D   ; Set the address of the color matrix
.3970d5		85 13		sta $13		                    STA #S_ANSI_VARS.COLORPOS,D     ; And the color cursor pointer
.3970d7		e2 20		sep #$20	                SEP #$20        ; set A short
.3970d9		bf 00 71 39	lda $397100,x	                    LDA @l color_address+2,X
.3970dd		85 18		sta $18		                    STA #S_ANSI_VARS.COLORBEGIN+2,D
.3970df		85 15		sta $15		                    STA #S_ANSI_VARS.COLORPOS+2,D
.3970e1		c2 20		rep #$20	                REP #$20        ; set A long
.3970e3		64 0e		stz $0e		                    STZ #S_ANSI_VARS.CURSORX,D      ; Set the cursor position to 0, 0
.3970e5		64 10		stz $10		                    STZ #S_ANSI_VARS.CURSORY,D
.3970e7		e2 20		sep #$20	                SEP #$20        ; set A short
.3970e9		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D        ; Set the state of the ANSI parser to S0
.3970eb		64 1e		stz $1e		                    STZ #S_ANSI_VARS.CONTROL,D      ; Set the control bits to 0 (default)
.3970ed		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.3970ef		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D     ; Set the current color to the default
.3970f1		22 37 71 39	jsl $397137	                    JSL ANSI_SETSIZE_Y              ; Set the size variables for the main screen
.3970f5		6b		rtl		                    RTL
>3970f6		00 a0 af 00 00 20 ae 00		text_address        .dword CS_TEXT_MEM_PTR, EVID_TEXT_MEM
>3970fe		00 c0 af 00 00 40 ae 00		color_address       .dword CS_COLOR_MEM_PTR, EVID_COLOR_MEM
.397106						ANSI_SETSIZES
.397106		0b		phd		                    PHD
.397107						                    setasx
.397107		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Save the current output channel
.39710b		48		pha		                    PHA
.39710c		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; Set the sizes for the main screen
.39710e		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.397112		22 f8 71 39	jsl $3971f8	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.397116		a0 00 00	ldy #$0000	                    LDY #CHAN_CONSOLE
.397119		22 37 71 39	jsl $397137	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.39711d		a9 04		lda #$04	                    LDA #CHAN_EVID                  ; Set the sizes for the EVID screen
.39711f		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.397123		22 f8 71 39	jsl $3971f8	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.397127		b0 07		bcs $397130	                    BCS done                        ; Not present, just return
.397129		a0 04 00	ldy #$0004	                    LDY #CHAN_EVID
.39712c		22 37 71 39	jsl $397137	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.397130		68		pla		done                PLA
.397131		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT                 ; Restore the output channel
.397135		2b		pld		                    PLD
.397136		6b		rtl		                    RTL
.397137						ANSI_SETSIZE_Y
.397137		08		php		                    PHP
.397138		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39713a		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.39713c		f0 06		beq $397144	                    BEQ vky_master                      ; Yes: get the resolution from Vicky
.39713e		af 01 1e ae	lda $ae1e01	                    LDA @l EVID_MSTR_CTRL_REG_H         ; No: get the resolution from EVID
.397142		80 04		bra $397148	                    BRA resolution
.397144		af 01 00 af	lda $af0001	vky_master          LDA @l MASTER_CTRL_REG_H
.397148		29 03		and #$03	resolution          AND #$03                            ; Mask off the resolution bits
.39714a		0a		asl a		                    ASL A
.39714b		aa		tax		                    TAX                                 ; Index to the col/line count in X
.39714c		c2 20		rep #$20	                REP #$20        ; set A long
.39714e		bd e8 71	lda $3971e8,x	                    LDA cols_by_res,X                   ; Get the number of columns
.397151		85 05		sta $05		                    STA #S_ANSI_VARS.COLS_PER_LINE,D    ; This is how many columns there are per line in the memory
.397153		85 03		sta $03		                    STA #S_ANSI_VARS.COLS_VISIBLE,D     ; This is how many would be visible with no border
.397155		bd f0 71	lda $3971f0,x	                    LDA lines_by_res,X                  ; Get the number of lines
.397158		85 09		sta $09		                    STA #S_ANSI_VARS.LINES_MAX,D        ; This is the total number of lines in memory
.39715a		85 07		sta $07		                    STA #S_ANSI_VARS.LINES_VISIBLE,D    ; This is how many lines would be visible with no border
.39715c		e2 20		sep #$20	                SEP #$20        ; set A short
.39715e		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.397160		f0 06		beq $397168	                    BEQ vky_border                      ; Yes: get the border from Vicky
.397162		af 04 1e ae	lda $ae1e04	                    LDA @l EVID_BORDER_CTRL_REG         ; No: Check EVID to see if we have a border
.397166		80 04		bra $39716c	                    BRA border
.397168		af 04 00 af	lda $af0004	vky_border          LDA @l BORDER_CTRL_REG              ; Check Vicky to see if we have a border
.39716c		89 01		bit #$01	border              BIT #Border_Ctrl_Enable
.39716e		f0 76		beq $3971e6	                    BEQ done                            ; No border... the sizes are correct now
.397170		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.397172		f0 06		beq $39717a	                    BEQ vky_border_size                 ; Yes: get the border size from Vicky
.397174		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the horizontal border width from EVID
.397178		80 04		bra $39717e	                    BRA border_size
.39717a		af 08 00 af	lda $af0008	vky_border_size     LDA @l BORDER_X_SIZE                ; Get the horizontal border width from Vicky
.39717e		29 3f		and #$3f	border_size         AND #$3F
.397180		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.397182		d0 04		bne $397188	                    BNE frac_width
.397184		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.397185		4a		lsr a		                    LSR A
.397186		80 03		bra $39718b	                    BRA store_width
.397188		4a		lsr a		frac_width          LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.397189		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.39718a		1a		inc a		                    INC A
.39718b		85 19		sta $19		store_width         STA #S_ANSI_VARS.TMPPTR1,D
.39718d		64 1a		stz $1a		                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.39718f		e2 20		sep #$20	                SEP #$20        ; set A short
.397191		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.397193		f0 0c		beq $3971a1	                    BEQ adjust_width                    ; Yes: skip the pixel doubling check
.397195		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check Vucky if we're pixel doubling
.397199		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.39719b		f0 04		beq $3971a1	                    BEQ adjust_width                    ; No... just adjust the width of the screen
.39719d		c2 20		rep #$20	                REP #$20        ; set A long
.39719f		46 19		lsr $19		                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.3971a1						adjust_width
.3971a1		c2 20		rep #$20	                REP #$20        ; set A long
.3971a3		38		sec		                    SEC
.3971a4		a5 05		lda $05		                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.3971a6		e5 19		sbc $19		                    SBC #S_ANSI_VARS.TMPPTR1,D
.3971a8		85 03		sta $03		                    STA #S_ANSI_VARS.COLS_VISIBLE,D
.3971aa		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.3971ac		f0 06		beq $3971b4	                    BEQ vky_border_y_size               ; Yes: get the border Y size from Vicky
.3971ae		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the vertical border width from EVID
.3971b2		80 04		bra $3971b8	                    BRA border_y_size
.3971b4		af b8 71 39	lda $3971b8	vky_border_y_size   LDA @l BORDER_Y_SIZE                ; Get the vertical border width from Vicky
.3971b8		29 3f 00	and #$003f	border_y_size       AND #$3F
.3971bb		89 03 00	bit #$0003	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.3971be		d0 04		bne $3971c4	                    BNE frac_height
.3971c0		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.3971c1		4a		lsr a		                    LSR A
.3971c2		80 03		bra $3971c7	                    BRA store_height
.3971c4		4a		lsr a		frac_height         LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.3971c5		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.3971c6		1a		inc a		                    INC A
.3971c7		85 19		sta $19		store_height        STA #S_ANSI_VARS.TMPPTR1,D
.3971c9		64 1a		stz $1a		                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.3971cb		e2 20		sep #$20	                SEP #$20        ; set A short
.3971cd		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.3971cf		f0 0c		beq $3971dd	                    BEQ adjust_height                   ; Yes: skip the pixel doubling check
.3971d1		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check if we're pixel doubling
.3971d5		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.3971d7		f0 04		beq $3971dd	                    BEQ adjust_height                   ; No... just adjust the height of the screen
.3971d9		c2 20		rep #$20	                REP #$20        ; set A long
.3971db		46 19		lsr $19		                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.3971dd						adjust_height
.3971dd		c2 20		rep #$20	                REP #$20        ; set A long
.3971df		38		sec		                    SEC
.3971e0		a5 09		lda $09		                    LDA #S_ANSI_VARS.LINES_MAX,D
.3971e2		e5 19		sbc $19		                    SBC #S_ANSI_VARS.TMPPTR1,D
.3971e4		85 07		sta $07		                    STA #S_ANSI_VARS.LINES_VISIBLE,D
.3971e6		28		plp		done                PLP
.3971e7		6b		rtl		                    RTL
>3971e8		50 00 64 00 28 00 32 00		cols_by_res         .word 80,100,40,50
>3971f0		3c 00 4b 00 1e 00 25 00		lines_by_res        .word 60,75,30,37
.3971f8						ANSI_SETDEVICE
.3971f8		48		pha		                    PHA
.3971f9		08		php		                    PHP
.3971fa		e2 20		sep #$20	                SEP #$20        ; set A short
.3971fc		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check the current output channel
.397200		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE               ; Is it the console?
.397202		f0 08		beq $39720c	                    BEQ console                     ; Yes: point to the console
.397204		c9 04		cmp #$04	                    CMP #CHAN_EVID                  ; Is it the EVID?
.397206		f0 0b		beq $397213	                    BEQ evid                        ; Check to see if the EVID is present
.397208		28		plp		bad_device          PLP
.397209		68		pla		                    PLA
.39720a		38		sec		                    SEC
.39720b		6b		rtl		                    RTL
.39720c						console
.39720c		c2 20		rep #$20	                REP #$20        ; set A long
.39720e		a9 0c 00	lda #$000c	                    LDA #<>SCREENBEGIN              ; Point to the the main screen's variables
.397211		80 0d		bra $397220	                    BRA set_dp
.397213						evid
.397213		e2 20		sep #$20	                SEP #$20        ; set A short
.397215		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Is the EVID present?
.397219		f0 ed		beq $397208	                    BEQ bad_device                  ; No: return that the device is bad
.39721b		c2 20		rep #$20	                REP #$20        ; set A long
.39721d		a9 60 00	lda #$0060	                    LDA #<>EVID_SCREENBEGIN         ; Yes: point to the EVID's variables
.397220		5b		tcd		set_dp              TCD
.397221		28		plp		                    PLP
.397222		68		pla		                    PLA
.397223		18		clc		                    CLC
.397224		6b		rtl		                    RTL
.397225						ANSI_PUTC
.397225		da		phx		                    PHX
.397226		5a		phy		                    PHY
.397227		0b		phd		                    PHD
.397228		08		php		                    PHP
.397229		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39722b		22 f8 71 39	jsl $3971f8	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.39722f		90 03		bcc $397234	                    BCC get_state               ; If valid, check the current state
.397231		82 8a 00	brl $3972be	                    BRL done                    ; If invalid, just return
.397234		a6 1d		ldx $1d		get_state           LDX #S_ANSI_VARS.STATE,D    ; Get the current state
.397236		f0 0c		beq $397244	                    BEQ do_st_init              ; Dispatch to the correct code for the state
.397238		e0 01		cpx #$01	                    CPX #ST_ESCAPE
.39723a		f0 20		beq $39725c	                    BEQ do_st_escape
.39723c		e0 02		cpx #$02	                    CPX #ST_CSI
.39723e		f0 2c		beq $39726c	                    BEQ do_st_csi
.397240		64 1d		stz $1d		pr_and_reset        STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.397242		80 06		bra $39724a	                    BRA print_raw
.397244		c9 1b		cmp #$1b	do_st_init          CMP #CHAR_ESC               ; Is it ESC?
.397246		f0 08		beq $397250	                    BEQ go_escape               ; Yes, handle the ESC
.397248		90 0c		bcc $397256	                    BLT do_control              ; If less than, handle as a control code
.39724a		22 9f 73 39	jsl $39739f	print_raw           JSL ANSI_PUTRAWC            ; Otherwise: Just print the raw character
.39724e		80 6e		bra $3972be	                    BRA done
.397250		a9 01		lda #$01	go_escape           LDA #ST_ESCAPE
.397252		85 1d		sta $1d		                    STA #S_ANSI_VARS.STATE,D    ; Move to the ESCAPE state
.397254		80 68		bra $3972be	                    BRA done
.397256		22 56 73 39	jsl $397356	do_control          JSL ANSI_PR_CONTROL         ; Hand a single byte control code
.39725a		80 62		bra $3972be	                    BRA done
.39725c		c9 5b		cmp #$5b	do_st_escape        CMP #'['                    ; Have we gotten 'ESC['?
.39725e		d0 e0		bne $397240	                    BNE pr_and_reset            ; No: print this and return to ST_INIT
.397260		64 20		stz $20		                    STZ #S_ANSI_VARS.ARG0,D     ; Clear the arguments
.397262		64 21		stz $21		                    STZ #S_ANSI_VARS.ARG1,D
.397264		64 1f		stz $1f		                    STZ #S_ANSI_VARS.ARGC,D
.397266		a9 02		lda #$02	                    LDA #ST_CSI
.397268		85 1d		sta $1d		                    STA #S_ANSI_VARS.STATE,D    ; Move to the CSI state
.39726a		80 52		bra $3972be	                    BRA done
.39726c		c9 30		cmp #$30	do_st_csi           CMP #'0'                    ; Do we have a digit?
.39726e		90 1d		bcc $39728d	                    BLT csi_not_digit
.397270		c9 3a		cmp #$3a	                    CMP #'9'+1
.397272		b0 19		bcs $39728d	                    BGE csi_not_digit
.397274		38		sec		                    SEC                         ; Have digit... convert to a number
.397275		e9 30		sbc #$30	                    SBC #'0'
.397277		48		pha		                    PHA                         ; Save it
.397278		a6 1f		ldx $1f		                    LDX #S_ANSI_VARS.ARGC,D
.39727a		16 20		asl $20,x	                    ASL #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 2
.39727c		b5 20		lda $20,x	                    LDA #S_ANSI_VARS.ARG0,D,X
.39727e		0a		asl a		                    ASL A                       ; A := arg * 4
.39727f		0a		asl a		                    ASL A                       ; A := arg * 8
.397280		18		clc		                    CLC
.397281		75 20		adc $20,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10
.397283		95 20		sta $20,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := A
.397285		18		clc		                    CLC
.397286		68		pla		                    PLA                         ; Get the digit back
.397287		75 20		adc $20,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10 + digit
.397289		95 20		sta $20,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 10 + digit
.39728b		80 31		bra $3972be	                    BRA done                    ; And we're done with this particular character
.39728d		c9 3b		cmp #$3b	csi_not_digit       CMP #';'                    ; Is it an argument separator?
.39728f		d0 0e		bne $39729f	                    BNE csi_not_sep
.397291		a5 1f		lda $1f		                    LDA #S_ANSI_VARS.ARGC,D     ; Get the argument count
.397293		c9 02		cmp #$02	                    CMP #ANSI_MAX_ARG           ; Are we at the maximum argument count?
.397295		d0 03		bne $39729a	                    BNE csi_next_arg            ; No: move to the next argument
.397297		82 a6 ff	brl $397240	                    BRL pr_and_reset            ; Yes: print and reset state
.39729a		1a		inc a		csi_next_arg        INC A
.39729b		85 1f		sta $1f		                    STA #S_ANSI_VARS.ARGC,D     ; Set the new argument count
.39729d		80 1f		bra $3972be	                    BRA done                    ; And we're done with this character
.39729f		c9 40		cmp #$40	csi_not_sep         CMP #'@'
.3972a1		90 0a		bcc $3972ad	                    BLT csi_not_upper
.3972a3		c9 5b		cmp #$5b	                    CMP #'Z'+1
.3972a5		b0 06		bcs $3972ad	                    BGE csi_not_upper
.3972a7		22 ce 72 39	jsl $3972ce	                    JSL ANSI_ANSI_UPPER         ; Process an ANSI upper case code
.3972ab		80 11		bra $3972be	                    BRA done
.3972ad		c9 61		cmp #$61	csi_not_upper       CMP #'a'
.3972af		90 0a		bcc $3972bb	                    BLT csi_not_lower
.3972b1		c9 7b		cmp #$7b	                    CMP #'z'+1
.3972b3		b0 06		bcs $3972bb	                    BGE csi_not_lower
.3972b5		22 13 73 39	jsl $397313	                    JSL ANSI_ANSI_LOWER         ; Process an ANSI lower case code
.3972b9		80 03		bra $3972be	                    BRA done
.3972bb		82 82 ff	brl $397240	csi_not_lower       BRL pr_and_reset            ; Invalid sequence: print it and reset
.3972be		28		plp		done                PLP
.3972bf		2b		pld		                    PLD
.3972c0		7a		ply		                    PLY
.3972c1		fa		plx		                    PLX
.3972c2		6b		rtl		                    RTL
.3972c3						ANSI_INVALID
.3972c3		08		php		                    PHP
.3972c4		e2 20		sep #$20	                SEP #$20        ; set A short
.3972c6		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.3972c8		22 9f 73 39	jsl $39739f	                    JSL ANSI_PUTRAWC            ; Print the character
.3972cc		28		plp		                    PLP
.3972cd		6b		rtl		                    RTL
.3972ce						ANSI_ANSI_UPPER
.3972ce		08		php		                    PHP
.3972cf		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3972d1		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.3972d3		38		sec		                    SEC
.3972d4		e9 40		sbc #$40	                    SBC #'@'
.3972d6		0a		asl a		                    ASL A
.3972d7		aa		tax		                    TAX
.3972d8		fc dd 72	jsr ($3972dd,x)	                    JSR (ansi_table,X)
.3972db		28		plp		                    PLP
.3972dc		6b		rtl		                    RTL
>3972dd		13 76				ansi_table          .word <>ANSI_ICH        ; '@' -- ICH -- Insert Character
>3972df		ba 73				                    .word <>ANSI_CUU        ; 'A' -- CUU -- Cursor Up
>3972e1		cd 73				                    .word <>ANSI_CUD        ; 'B' -- CUD -- Cursor Down
>3972e3		de 73				                    .word <>ANSI_CUF        ; 'C' -- CUF -- Cursor Forward
>3972e5		ef 73				                    .word <>ANSI_CUB        ; 'D' -- CUB -- Cursor Back
>3972e7		c3 72				                    .word <>ANSI_INVALID    ; 'E' -- CNL -- Cursor Next Line
>3972e9		c3 72				                    .word <>ANSI_INVALID    ; 'F' -- CPL -- Cursor Previous Line
>3972eb		c3 72				                    .word <>ANSI_INVALID    ; 'G' -- CHA -- Cursor Horizontal Absolute
>3972ed		00 74				                    .word <>ANSI_CUP        ; 'H' -- CUP -- Cursor Position
>3972ef		c3 72				                    .word <>ANSI_INVALID    ; 'I'
>3972f1		7f 75				                    .word <>ANSI_ED         ; 'J' -- ED -- Erase In Display
>3972f3		c2 75				                    .word <>ANSI_EL         ; 'K' -- EL -- Erase In Line
>3972f5		c3 72				                    .word <>ANSI_INVALID    ; 'L'
>3972f7		c3 72				                    .word <>ANSI_INVALID    ; 'M'
>3972f9		c3 72				                    .word <>ANSI_INVALID    ; 'N'
>3972fb		c3 72				                    .word <>ANSI_INVALID    ; 'O'
>3972fd		57 76				                    .word <>ANSI_DCH        ; 'P' -- DCH -- Delete Character
>3972ff		c3 72				                    .word <>ANSI_INVALID    ; 'Q'
>397301		c3 72				                    .word <>ANSI_INVALID    ; 'R'
>397303		c3 72				                    .word <>ANSI_INVALID    ; 'S' -- SU -- Scroll Up
>397305		c3 72				                    .word <>ANSI_INVALID    ; 'T' -- SD -- Scroll Down
>397307		c3 72				                    .word <>ANSI_INVALID    ; 'U'
>397309		c3 72				                    .word <>ANSI_INVALID    ; 'V'
>39730b		c3 72				                    .word <>ANSI_INVALID    ; 'W'
>39730d		c3 72				                    .word <>ANSI_INVALID    ; 'X'
>39730f		c3 72				                    .word <>ANSI_INVALID    ; 'Y'
>397311		c3 72				                    .word <>ANSI_INVALID    ; 'Z'
.397313						ANSI_ANSI_LOWER
.397313		08		php		                    PHP
.397314		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397316		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.397318		38		sec		                    SEC
.397319		e9 61		sbc #$61	                    SBC #'a'
.39731b		0a		asl a		                    ASL A
.39731c		aa		tax		                    TAX
.39731d		fc 22 73	jsr ($397322,x)	                    JSR (ansi_table,X)
.397320		28		plp		                    PLP
.397321		6b		rtl		                    RTL
>397322		c3 72				ansi_table          .word <>ANSI_INVALID    ; 'a'
>397324		c3 72				                    .word <>ANSI_INVALID    ; 'b'
>397326		c3 72				                    .word <>ANSI_INVALID    ; 'c'
>397328		c3 72				                    .word <>ANSI_INVALID    ; 'd'
>39732a		c3 72				                    .word <>ANSI_INVALID    ; 'e'
>39732c		c3 72				                    .word <>ANSI_INVALID    ; 'f' -- HVP -- Horizontal Vertical Position
>39732e		c3 72				                    .word <>ANSI_INVALID    ; 'g'
>397330		19 74				                    .word <>ANSI_SET_MODE   ; 'h'
>397332		c3 72				                    .word <>ANSI_INVALID    ; 'i'
>397334		c3 72				                    .word <>ANSI_INVALID    ; 'j'
>397336		c3 72				                    .word <>ANSI_INVALID    ; 'k'
>397338		56 74				                    .word <>ANSI_RESET_MODE ; 'l'
>39733a		93 74				                    .word <>ANSI_SGR        ; 'm' -- SGR -- Select Graphics Rendition
>39733c		c3 72				                    .word <>ANSI_INVALID    ; 'n'
>39733e		c3 72				                    .word <>ANSI_INVALID    ; 'o'
>397340		c3 72				                    .word <>ANSI_INVALID    ; 'p'
>397342		c3 72				                    .word <>ANSI_INVALID    ; 'q'
>397344		c3 72				                    .word <>ANSI_INVALID    ; 'r'
>397346		c3 72				                    .word <>ANSI_INVALID    ; 's'
>397348		c3 72				                    .word <>ANSI_INVALID    ; 't'
>39734a		c3 72				                    .word <>ANSI_INVALID    ; 'u'
>39734c		c3 72				                    .word <>ANSI_INVALID    ; 'v'
>39734e		c3 72				                    .word <>ANSI_INVALID    ; 'w'
>397350		c3 72				                    .word <>ANSI_INVALID    ; 'x'
>397352		c3 72				                    .word <>ANSI_INVALID    ; 'y'
>397354		c3 72				                    .word <>ANSI_INVALID    ; 'z'
.397356						ANSI_PR_CONTROL
.397356		08		php		                    PHP
.397357		e2 20		sep #$20	                SEP #$20        ; set A short
.397359		c2 10		rep #$10	                REP #$10        ; set X long
.39735b		c9 0d		cmp #$0d	                    CMP #CHAR_CR                ; Handle carriage return
.39735d		f0 12		beq $397371	                    BEQ do_cr
.39735f		c9 0a		cmp #$0a	                    CMP #CHAR_LF                ; Handle line feed
.397361		f0 1a		beq $39737d	                    BEQ do_lf
.397363		c9 08		cmp #$08	                    CMP #CHAR_BS                ; Handle back space
.397365		f0 1c		beq $397383	                    BEQ do_bs
.397367		c9 09		cmp #$09	                    CMP #CHAR_TAB               ; Handle TAB
.397369		f0 1e		beq $397389	                    BEQ do_tab
.39736b		22 9f 73 39	jsl $39739f	                    JSL ANSI_PUTRAWC            ; Otherwise, just print it raw and wriggling!
.39736f		80 2c		bra $39739d	                    BRA done
.397371		a2 00 00	ldx #$0000	do_cr               LDX #0                      ; Move to the beginning of the next line
.397374		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.397376		c8		iny		                    INY
.397377		22 26 77 39	jsl $397726	                    JSL ANSI_LOCATE
.39737b		80 20		bra $39739d	                    BRA done
.39737d		22 03 77 39	jsl $397703	do_lf               JSL ANSI_CSRDOWN            ; Move the cursor down a line
.397381		80 1a		bra $39739d	                    BRA done
.397383		22 c7 76 39	jsl $3976c7	do_bs               JSL ANSI_CSRLEFT            ; Move the cursor to the left (TODO: delete to the left?)
.397387		80 14		bra $39739d	                    BRA done
.397389						do_tab
.397389		c2 30		rep #$30	                REP #$30        ; set A&X long
.39738b		a5 0e		lda $0e		                    LDA #S_ANSI_VARS.CURSORX,D  ; Move to the next power 8th column
.39738d		29 f8 ff	and #$fff8	                    AND #$FFF8
.397390		18		clc		                    CLC
.397391		69 08 00	adc #$0008	                    ADC #$0008
.397394		aa		tax		                    TAX
.397395		e2 20		sep #$20	                SEP #$20        ; set A short
.397397		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.397399		22 26 77 39	jsl $397726	                    JSL ANSI_LOCATE
.39739d		28		plp		done                PLP
.39739e		6b		rtl		                    RTL
.39739f						ANSI_PUTRAWC
.39739f		da		phx		                    PHX
.3973a0		5a		phy		                    PHY
.3973a1		0b		phd		                    PHD
.3973a2		08		php		                    PHP
.3973a3		e2 20		sep #$20	                SEP #$20        ; set A short
.3973a5		22 f8 71 39	jsl $3971f8	                    JSL ANSI_SETDEVICE              ; Look at the current output channel and point
.3973a9		b0 0a		bcs $3973b5	                    BCS done                        ; If invalid, just return
.3973ab		87 0b		sta [$0b]	                    STA [#S_ANSI_VARS.CURSORPOS,D]  ; Save the character on the screen
.3973ad		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Set the color based on CURCOLOR
.3973af		87 13		sta [$13]	                    STA [#S_ANSI_VARS.COLORPOS,D]
.3973b1		22 9c 76 39	jsl $39769c	                    JSL ANSI_CSRRIGHT              ; And advance the cursor
.3973b5		28		plp		done                PLP
.3973b6		2b		pld		                    PLD
.3973b7		7a		ply		                    PLY
.3973b8		fa		plx		                    PLX
.3973b9		6b		rtl		                    RTL
.3973ba						ANSI_CUU
.3973ba		08		php		                    PHP
.3973bb		e2 20		sep #$20	                SEP #$20        ; set A short
.3973bd		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.3973bf		1a		inc a		                    INC A
.3973c0		a9 01		lda #$01	default             LDA #1                          ; Otherwise: treat it as 1
.3973c2		48		pha		loop                PHA                             ; Save the count
.3973c3		22 e5 76 39	jsl $3976e5	                    JSL ANSI_CSRUP                  ; Cursor Up
.3973c7		68		pla		                    PLA                             ; Restore the count
.3973c8		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.3973c9		d0 f7		bne $3973c2	                    BNE loop
.3973cb		28		plp		                    PLP
.3973cc		60		rts		                    RTS
.3973cd						ANSI_CUD
.3973cd		08		php		                    PHP
.3973ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3973d0		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.3973d2		1a		inc a		                    INC A
.3973d3		48		pha		loop                PHA                             ; Save the count
.3973d4		22 03 77 39	jsl $397703	                    JSL ANSI_CSRDOWN                ; Cursor Down
.3973d8		68		pla		                    PLA                             ; Restore the count
.3973d9		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.3973da		d0 f7		bne $3973d3	                    BNE loop
.3973dc		28		plp		                    PLP
.3973dd		60		rts		                    RTS
.3973de						ANSI_CUF
.3973de		08		php		                    PHP
.3973df		e2 20		sep #$20	                SEP #$20        ; set A short
.3973e1		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.3973e3		1a		inc a		                    INC A
.3973e4		48		pha		loop                PHA                             ; Save the count
.3973e5		22 9c 76 39	jsl $39769c	                    JSL ANSI_CSRRIGHT               ; Cursor right
.3973e9		68		pla		                    PLA                             ; Restore the count
.3973ea		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.3973eb		d0 f7		bne $3973e4	                    BNE loop
.3973ed		28		plp		                    PLP
.3973ee		60		rts		                    RTS
.3973ef						ANSI_CUB
.3973ef		08		php		                    PHP
.3973f0		e2 20		sep #$20	                SEP #$20        ; set A short
.3973f2		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.3973f4		1a		inc a		                    INC A
.3973f5		48		pha		loop                PHA                             ; Save the count
.3973f6		22 c7 76 39	jsl $3976c7	                    JSL ANSI_CSRLEFT                ; Cursor left
.3973fa		68		pla		                    PLA                             ; Restore the count
.3973fb		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.3973fc		d0 f7		bne $3973f5	                    BNE loop
.3973fe		28		plp		                    PLP
.3973ff		60		rts		                    RTS
.397400						ANSI_CUP
.397400		08		php		                    PHP
.397401		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397403		a6 20		ldx $20		                    LDX #S_ANSI_VARS.ARG0,D         ; Get the first argument
.397405		d0 02		bne $397409	                    BNE get_row
.397407		a2 01		ldx #$01	                    LDX #1                          ; Default to 1
.397409		a4 21		ldy $21		get_row             LDY #S_ANSI_VARS.ARG1,D         ; Get the second argument
.39740b		d0 02		bne $39740f	                    BNE adjust_coords
.39740d		a0 01		ldy #$01	                    LDY #1                          ; Default to 1
.39740f		ca		dex		adjust_coords       DEX                             ; Translate from base 1 to base 0 coordinates
.397410		88		dey		                    DEY
.397411		c2 30		rep #$30	                REP #$30        ; set A&X long
.397413		22 26 77 39	jsl $397726	                    JSL ANSI_LOCATE                 ; Set the cursor position
.397417		28		plp		                    PLP
.397418		60		rts		                    RTS
.397419						ANSI_SET_MODE
.397419		08		php		                    PHP
.39741a		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39741c		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.39741e		c9 19		cmp #$19	                    CMP #25
.397420		d0 24		bne $397446	                    BNE chk_break
.397422		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.397426		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.397428		d0 0c		bne $397436	                    BNE check_evid
.39742a		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.39742e		09 01		ora #$01	                    ORA #Vky_Cursor_Enable
.397430		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.397434		80 1e		bra $397454	                    BRA done
.397436		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.397438		d0 1a		bne $397454	                    BNE done
.39743a		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.39743e		09 01		ora #$01	                    ORA #EVID_Cursor_Enable
.397440		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.397444		80 0e		bra $397454	                    BRA done
.397446		c9 1c		cmp #$1c	chk_break           CMP #28
.397448		d0 0a		bne $397454	                    BNE done
.39744a		22 dc 7b 39	jsl $397bdc	                    JSL KBD_GET_CONTROL
.39744e		09 80		ora #$80	                    ORA #KBD_CTRL_BREAK
.397450		22 ef 7b 39	jsl $397bef	                    JSL KBD_SET_CONTROL
.397454		28		plp		done                PLP
.397455		60		rts		                    RTS
.397456						ANSI_RESET_MODE
.397456		08		php		                    PHP
.397457		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397459		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.39745b		c9 19		cmp #$19	                    CMP #25
.39745d		d0 24		bne $397483	                    BNE chk_break
.39745f		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.397463		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.397465		d0 0c		bne $397473	                    BNE check_evid
.397467		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.39746b		29 fe		and #$fe	                    AND #~Vky_Cursor_Enable
.39746d		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.397471		80 1e		bra $397491	                    BRA done
.397473		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.397475		d0 1a		bne $397491	                    BNE done
.397477		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.39747b		29 fe		and #$fe	                    AND #~EVID_Cursor_Enable
.39747d		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.397481		80 0e		bra $397491	                    BRA done
.397483		c9 1c		cmp #$1c	chk_break           CMP #28
.397485		d0 0a		bne $397491	                    BNE done
.397487		22 dc 7b 39	jsl $397bdc	                    JSL KBD_GET_CONTROL
.39748b		29 7f		and #$7f	                    AND #~KBD_CTRL_BREAK
.39748d		22 ef 7b 39	jsl $397bef	                    JSL KBD_SET_CONTROL
.397491		28		plp		done                PLP
.397492		60		rts		                    RTS
.397493						ANSI_SGR
.397493		08		php		                    PHP
.397494		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397496		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.397498		d0 0d		bne $3974a7	                    BNE chk_1
.39749a		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR             ; 0 ==> Return to the default colors
.39749c		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.39749e		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Switch off inversion
.3974a0		29 3f		and #$3f	                    AND #~(CONTROL_INVERT | CONTROL_BOLD)
.3974a2		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.3974a4		82 d6 00	brl $39757d	                    BRL done
.3974a7		c9 01		cmp #$01	chk_1               CMP #1
.3974a9		d0 0f		bne $3974ba	                    BNE chk_2
.3974ab		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Make the current color bold
.3974ad		09 80		ora #$80	                    ORA #$80
.3974af		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.3974b1		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be bold
.3974b3		09 40		ora #$40	                    ORA #CONTROL_BOLD
.3974b5		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.3974b7		82 c3 00	brl $39757d	                    BRL done
.3974ba		c9 02		cmp #$02	chk_2               CMP #2
.3974bc		f0 04		beq $3974c2	                    BEQ normal_intensity
.3974be		c9 16		cmp #$16	chk_22              CMP #22
.3974c0		d0 0f		bne $3974d1	                    BNE chk_7
.3974c2		a5 12		lda $12		normal_intensity    LDA #S_ANSI_VARS.CURCOLOR,D     ; 2 ==> Set the foreground to normal intensity
.3974c4		29 7f		and #$7f	                    AND #~$80
.3974c6		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.3974c8		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be normal
.3974ca		29 bf		and #$bf	                    AND #~CONTROL_BOLD
.3974cc		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.3974ce		82 ac 00	brl $39757d	                    BRL done
.3974d1		c9 07		cmp #$07	chk_7               CMP #7
.3974d3		d0 2c		bne $397501	                    BNE chk_27
.3974d5		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors already inverted?
.3974d7		89 80		bit #$80	                    BIT #CONTROL_INVERT
.3974d9		f0 03		beq $3974de	                    BEQ invert_on
.3974db		82 9f 00	brl $39757d	                    BRL done                        ; Yes: just finish
.3974de		09 80		ora #$80	invert_on           ORA #CONTROL_INVERT             ; No: Mark that the colors are inverted
.3974e0		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.3974e2		a5 12		lda $12		swap_colors         LDA #S_ANSI_VARS.CURCOLOR,D     ; Exchange the upper and lower nibbles
.3974e4		0a		asl a		                    ASL  A
.3974e5		69 80		adc #$80	                    ADC  #$80
.3974e7		2a		rol a		                    ROL  A
.3974e8		0a		asl a		                    ASL  A
.3974e9		69 80		adc #$80	                    ADC  #$80
.3974eb		2a		rol a		                    ROL  A
.3974ec		29 f7		and #$f7	                    AND #%11110111                  ; Make sure the background is not bolded
.3974ee		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.3974f0		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.3974f2		89 40		bit #$40	                    BIT #CONTROL_BOLD
.3974f4		d0 03		bne $3974f9	                    BNE bold_on
.3974f6		82 84 00	brl $39757d	                    BRL done                        ; No: we're done
.3974f9		a5 12		lda $12		bold_on             LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.3974fb		09 80		ora #$80	                    ORA #$80
.3974fd		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.3974ff		80 7c		bra $39757d	                    BRA done
.397501		c9 1b		cmp #$1b	chk_27              CMP #27
.397503		d0 0c		bne $397511	                    BNE chk_39
.397505		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors inverted?
.397507		89 80		bit #$80	                    BIT #CONTROL_INVERT
.397509		f0 72		beq $39757d	                    BEQ done                        ; No: just finish
.39750b		29 7f		and #$7f	                    AND #~CONTROL_INVERT            ; Yes: Mark that the colors are back to normal
.39750d		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.39750f		80 d1		bra $3974e2	                    BRA swap_colors                 ; And go swap the colors
.397511		c9 27		cmp #$27	chk_39              CMP #39
.397513		d0 10		bne $397525	                    BNE chk_49
.397515		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.397517		29 0f		and #$0f	                    AND #$0F
.397519		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.39751b		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.39751d		29 f0		and #$f0	                    AND #$F0
.39751f		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.397521		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397523		80 58		bra $39757d	                    BRA done
.397525		c9 31		cmp #$31	chk_49              CMP #49
.397527		d0 10		bne $397539	                    BNE chk_foreground
.397529		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.39752b		29 f0		and #$f0	                    AND #$F0
.39752d		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.39752f		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.397531		29 0f		and #$0f	                    AND #$0F
.397533		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.397535		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397537		80 44		bra $39757d	                    BRA done
.397539		c9 1e		cmp #$1e	chk_foreground      CMP #30                         ; If [30..37], set the foreground color
.39753b		90 29		bcc $397566	                    BLT chk_background
.39753d		c9 26		cmp #$26	                    CMP #38
.39753f		b0 25		bcs $397566	                    BGE chk_background
.397541		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.397543		29 0f		and #$0f	                    AND #$0F
.397545		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397547		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D
.397549		38		sec		                    SEC
.39754a		e9 1e		sbc #$1e	                    SBC #30
.39754c		0a		asl a		                    ASL A
.39754d		0a		asl a		                    ASL A
.39754e		0a		asl a		                    ASL A
.39754f		0a		asl a		                    ASL A
.397550		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.397552		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397554		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.397556		89 40		bit #$40	                    BIT #CONTROL_BOLD
.397558		d0 03		bne $39755d	                    BNE bold_fore                   ; No: we're done
.39755a		82 20 00	brl $39757d	                    BRL done
.39755d		a5 12		lda $12		bold_fore           LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.39755f		09 80		ora #$80	                    ORA #$80
.397561		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397563		82 17 00	brl $39757d	                    BRL done
.397566		c9 28		cmp #$28	chk_background      CMP #40                         ; If [40..47], set the background color
.397568		90 13		bcc $39757d	                    BLT done
.39756a		c9 30		cmp #$30	                    CMP #48
.39756c		b0 0f		bcs $39757d	                    BGE done
.39756e		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.397570		29 f0		and #$f0	                    AND #$F0
.397572		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397574		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D
.397576		38		sec		                    SEC
.397577		e9 28		sbc #$28	                    SBC #40
.397579		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.39757b		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.39757d		28		plp		done                PLP
.39757e		60		rts		                    RTS
.39757f						ANSI_ED
.39757f		5a		phy		                    PHY
.397580		08		php		                    PHP
.397581		e2 20		sep #$20	                SEP #$20        ; set A short
.397583		c2 10		rep #$10	                REP #$10        ; set X long
.397585		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.397587		d0 0f		bne $397598	                    BNE not_0                       ; Is the code 0?
.397589						code_0
.397589		a9 20		lda #$20	                    LDA #' '
.39758b		a4 17		ldy $17		                    LDY #CURSORPOS,D                ; Start with the cursor's position
.39758d		97 0c		sta [$0c],y	code_0_loop         STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.39758f		c8		iny		                    INY                             ; Go to the next position
.397590		c0 00 20	cpy #$2000	                    CPY #$2000                      ; Have we reached the end?
.397593		d0 f8		bne $39758d	                    BNE code_0_loop                 ; No: keep going
.397595		82 27 00	brl $3975bf	                    BRL done
.397598		c9 01		cmp #$01	not_0               CMP #1                          ; Is the code 1?
.39759a		d0 0e		bne $3975aa	                    BNE not_1
.39759c						code_1
.39759c		a9 20		lda #$20	                    LDA #' '
.39759e		a4 17		ldy $17		                    LDY #CURSORPOS,D                ; Start with the cursor's position
.3975a0		97 0c		sta [$0c],y	code_1_loop         STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.3975a2		88		dey		                    DEY                             ; Go to the previous position
.3975a3		d0 fb		bne $3975a0	                    BNE code_1_loop
.3975a5		97 0c		sta [$0c],y	                    STA [#SCREENBEGIN,D],Y          ; Clear the first cell
.3975a7		82 15 00	brl $3975bf	                    BRL done
.3975aa		c9 02		cmp #$02	not_1               CMP #2                          ; Is the code 2 or 3?
.3975ac		f0 04		beq $3975b2	                    BEQ code_2_3
.3975ae		c9 03		cmp #$03	                    CMP #3
.3975b0		d0 0d		bne $3975bf	                    BNE done                        ; No: just ignore the sequence
.3975b2						code_2_3
.3975b2		a9 20		lda #$20	                    LDA #' '
.3975b4		a0 00 00	ldy #$0000	                    LDY #0                          ; Start with the cursor's position
.3975b7		97 0c		sta [$0c],y	code_2_3_loop       STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.3975b9		c8		iny		                    INY                             ; Go to the next position
.3975ba		c0 00 20	cpy #$2000	                    CPY #$2000                      ; Have we reached the end?
.3975bd		d0 ce		bne $39758d	                    BNE code_0_loop                 ; No: keep going
.3975bf		28		plp		done                PLP
.3975c0		7a		ply		                    PLY
.3975c1		60		rts		                    RTS
.3975c2						ANSI_EL
.3975c2		da		phx		                    PHX
.3975c3		5a		phy		                    PHY
.3975c4		08		php		                    PHP
.3975c5		c2 30		rep #$30	                REP #$30        ; set A&X long
.3975c7		38		sec		                    SEC
.3975c8		a5 0b		lda $0b		                    LDA #S_ANSI_VARS.CURSORPOS,D        ; Compute the address of the first character of the line
.3975ca		e5 0e		sbc $0e		                    SBC #S_ANSI_VARS.CURSORX,D
.3975cc		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.3975ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3975d0		a5 02		lda $02		                    LDA #S_ANSI_VARS.SCREENBEGIN+2,D    ; Get the bank of the screen
.3975d2		85 1b		sta $1b		                    STA #S_ANSI_VARS.TMPPTR1+2,D        ; And put it in the TMPPTR1
.3975d4		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.3975d6		d0 0e		bne $3975e6	                    BNE not_0                           ; Is the code 0?
.3975d8						code_0
.3975d8		a9 20		lda #$20	                    LDA #' '
.3975da		a4 0e		ldy $0e		                    LDY #S_ANSI_VARS.CURSORX,D          ; Start at the cursor position
.3975dc		97 19		sta [$19],y	code_0_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.3975de		c8		iny		                    INY
.3975df		c4 05		cpy $05		                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.3975e1		d0 f9		bne $3975dc	                    BNE code_0_loop                     ; No: keep looping
.3975e3		82 29 00	brl $39760f	                    BRL done
.3975e6		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.3975e8		d0 11		bne $3975fb	                    BNE not_1
.3975ea						code_1
.3975ea		a9 20		lda #$20	                    LDA #' '
.3975ec		a0 00 00	ldy #$0000	                    LDY #0
.3975ef		97 19		sta [$19],y	code_1_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.3975f1		c8		iny		                    INY
.3975f2		c4 0e		cpy $0e		                    CPY #S_ANSI_VARS.CURSORX,D          ; Have we reached the cursor?
.3975f4		d0 f9		bne $3975ef	                    BNE code_1_loop                     ; No: keep looping
.3975f6		97 19		sta [$19],y	                    STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; And clear under the cursor
.3975f8		82 14 00	brl $39760f	                    BRL done
.3975fb		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.3975fd		f0 04		beq $397603	                    BEQ code_2_3
.3975ff		c9 03		cmp #$03	                    CMP #3
.397601		d0 0c		bne $39760f	                    BNE done                            ; No: just ignore the sequence
.397603						code_2_3
.397603		a9 20		lda #$20	                    LDA #' '
.397605		a0 00 00	ldy #$0000	                    LDY #0
.397608		97 19		sta [$19],y	code_2_3_loop       STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.39760a		c8		iny		                    INY
.39760b		c4 05		cpy $05		                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.39760d		d0 f9		bne $397608	                    BNE code_2_3_loop                   ; No: keep looping
.39760f		28		plp		done                PLP
.397610		7a		ply		                    PLY
.397611		fa		plx		                    PLX
.397612		60		rts		                    RTS
.397613						ANSI_ICH
.397613		5a		phy		                    PHY
.397614		08		php		                    PHP
.397615		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397617		a5 1f		lda $1f		                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.397619		f0 04		beq $39761f	                    BEQ default_1                       ; If 0, default to 1
.39761b		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.39761d		d0 04		bne $397623	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.39761f		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.397621		85 20		sta $20		                    STA #S_ANSI_VARS.ARG0,D
.397623		38		sec		calc_src_dest       SEC
.397624		a5 03		lda $03		                    LDA #S_ANSI_VARS.COLS_VISIBLE,D     ; TMPPTR1 := COLS_VISIBLE - CURSORX (destination index)
.397626		e5 0e		sbc $0e		                    SBC #S_ANSI_VARS.CURSORX,D
.397628		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.39762a		38		sec		                    SEC
.39762b		e5 20		sbc $20		                    SBC #S_ANSI_VARS.ARG0,D             ; TMPPTR1+1 := TMPPTR1 - n (source index)
.39762d		85 1a		sta $1a		                    STA #S_ANSI_VARS.TMPPTR1+1,D
.39762f		a4 1a		ldy $1a		insert_loop         LDY #S_ANSI_VARS.TMPPTR1+1,D        ; text[dest] := text[source]
.397631		b7 0b		lda [$0b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.397633		a4 19		ldy $19		                    LDY #S_ANSI_VARS.TMPPTR1,D
.397635		97 0b		sta [$0b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.397637		a4 1a		ldy $1a		                    LDY #S_ANSI_VARS.TMPPTR1+1,D        ; color[dest] := color[source]
.397639		b7 13		lda [$13],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.39763b		a4 19		ldy $19		                    LDY #S_ANSI_VARS.TMPPTR1,D
.39763d		97 13		sta [$13],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.39763f		c6 19		dec $19		                    DEC #S_ANSI_VARS.TMPPTR1,D          ; Move to the previous position
.397641		c6 1a		dec $1a		                    DEC #S_ANSI_VARS.TMPPTR1+1,D
.397643		10 ea		bpl $39762f	                    BPL insert_loop                     ; Keep looping until we reach the end
.397645		a0 00		ldy #$00	                    LDY #0
.397647		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.397649		97 0b		sta [$0b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.39764b		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.39764d		97 13		sta [$13],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.39764f		c8		iny		                    INY                                 ; Move to the next byte
.397650		c4 20		cpy $20		                    CPY #S_ANSI_VARS.ARG0,D             ; Until we reach the end
.397652		d0 f3		bne $397647	                    BNE fill_loop
.397654		28		plp		                    PLP
.397655		7a		ply		                    PLY
.397656		60		rts		                    RTS
.397657						ANSI_DCH
.397657		5a		phy		                    PHY
.397658		08		php		                    PHP
.397659		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39765b		a5 1f		lda $1f		                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.39765d		f0 04		beq $397663	                    BEQ default_1                       ; If 0, default to 1
.39765f		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.397661		d0 04		bne $397667	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.397663		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.397665		85 20		sta $20		                    STA #S_ANSI_VARS.ARG0,D
.397667		a9 00		lda #$00	calc_src_dest       LDA #0
.397669		85 1a		sta $1a		                    STA #S_ANSI_VARS.TMPPTR1+1,D        ; TMPPTR+1 := 0 (destination)
.39766b		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D
.39766d		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D          ; TMPPTR+1 := n (source)
.39766f		a4 19		ldy $19		del_loop            LDY #S_ANSI_VARS.TMPPTR1,D          ; text[dest] := text[source]
.397671		b7 0b		lda [$0b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.397673		a4 1a		ldy $1a		                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.397675		97 0b		sta [$0b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.397677		a4 19		ldy $19		                    LDY #S_ANSI_VARS.TMPPTR1,D          ; color[dest] := color[source]
.397679		b7 13		lda [$13],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.39767b		a4 1a		ldy $1a		                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.39767d		97 13		sta [$13],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.39767f		e6 19		inc $19		                    INC #S_ANSI_VARS.TMPPTR1,D          ; Move to the next position
.397681		e6 1a		inc $1a		                    INC #S_ANSI_VARS.TMPPTR1+1,D
.397683		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.397685		c5 03		cmp $03		                    CMP #S_ANSI_VARS.COLS_VISIBLE,D
.397687		90 e6		bcc $39766f	                    BLT del_loop                        ; Keep looping until we reach the end
.397689		a4 1a		ldy $1a		                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.39768b		88		dey		                    DEY
.39768c		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.39768e		97 0b		sta [$0b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.397690		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.397692		97 13		sta [$13],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.397694		c8		iny		                    INY                                 ; Move to the next byte
.397695		c4 03		cpy $03		                    CPY #S_ANSI_VARS.COLS_VISIBLE,D     ; Until we reach the end
.397697		90 f3		bcc $39768c	                    BLT fill_loop
.397699		28		plp		                    PLP
.39769a		7a		ply		                    PLY
.39769b		60		rts		                    RTS
.39769c						ANSI_CSRRIGHT
.39769c		da		phx		                    PHX
.39769d		5a		phy		                    PHY
.39769e		0b		phd		                    PHD
.39769f		08		php		                    PHP
.3976a0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3976a2		22 f8 71 39	jsl $3971f8	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.3976a6		b0 1a		bcs $3976c2	                    BCS done                            ; If invalid, just return
.3976a8		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the new column
.3976aa		e8		inx		                    INX
.3976ab		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the current row
.3976ad		e4 03		cpx $03		                    CPX #S_ANSI_VARS.COLS_VISIBLE,D     ; Are we off screen?
.3976af		90 0d		bcc $3976be	                    BCC nowrap                          ; No: just set the position
.3976b1		a2 00 00	ldx #$0000	                    LDX #0                              ; Yes: move to the first column
.3976b4		c8		iny		                    INY                                 ; And move to the next row
.3976b5		c4 07		cpy $07		                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Are we still off screen?
.3976b7		90 05		bcc $3976be	                    BCC nowrap                          ; No: just set the position
.3976b9		88		dey		                    DEY                                 ; Yes: lock to the last row
.3976ba		22 8a 77 39	jsl $39778a	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.3976be		22 26 77 39	jsl $397726	nowrap              JSL ANSI_LOCATE                     ; Set the cursor position
.3976c2		28		plp		done                PLP
.3976c3		2b		pld		                    PLD
.3976c4		7a		ply		                    PLY
.3976c5		fa		plx		                    PLX
.3976c6		6b		rtl		                    RTL
.3976c7						ANSI_CSRLEFT
.3976c7		da		phx		                    PHX
.3976c8		5a		phy		                    PHY
.3976c9		0b		phd		                    PHD
.3976ca		08		php		                    PHP
.3976cb		c2 30		rep #$30	                REP #$30        ; set A&X long
.3976cd		22 f8 71 39	jsl $3971f8	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.3976d1		b0 0d		bcs $3976e0	                    BCS done                    ; If invalid, just return
.3976d3		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D  ; Check that we are not already @ Zero
.3976d5		f0 09		beq $3976e0	                    BEQ done                    ; If so, just ignore this call
.3976d7		ca		dex		                    DEX
.3976d8		86 0e		stx $0e		                    STX #S_ANSI_VARS.CURSORX,D
.3976da		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.3976dc		22 26 77 39	jsl $397726	                    JSL ANSI_LOCATE
.3976e0		28		plp		done                PLP
.3976e1		2b		pld		                    PLD
.3976e2		7a		ply		                    PLY
.3976e3		fa		plx		                    PLX
.3976e4		6b		rtl		                    RTL
.3976e5						ANSI_CSRUP
.3976e5		da		phx		                    PHX
.3976e6		5a		phy		                    PHY
.3976e7		0b		phd		                    PHD
.3976e8		08		php		                    PHP
.3976e9		c2 30		rep #$30	                REP #$30        ; set A&X long
.3976eb		22 f8 71 39	jsl $3971f8	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.3976ef		b0 0d		bcs $3976fe	                    BCS done                    ; If invalid, just return
.3976f1		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D  ; Check if we are not already @ Zero
.3976f3		f0 09		beq $3976fe	                    BEQ done                    ; If we are, just ignore the call
.3976f5		88		dey		                    DEY
.3976f6		84 10		sty $10		                    STY #S_ANSI_VARS.CURSORY,D
.3976f8		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D
.3976fa		22 26 77 39	jsl $397726	                    JSL ANSI_LOCATE
.3976fe		28		plp		done                PLP
.3976ff		2b		pld		                    PLD
.397700		7a		ply		                    PLY
.397701		fa		plx		                    PLX
.397702		6b		rtl		                    RTL
.397703						ANSI_CSRDOWN
.397703		da		phx		                    PHX
.397704		5a		phy		                    PHY
.397705		0b		phd		                    PHD
.397706		08		php		                    PHP
.397707		c2 30		rep #$30	                REP #$30        ; set A&X long
.397709		22 f8 71 39	jsl $3971f8	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.39770d		b0 12		bcs $397721	                    BCS done                            ; If invalid, just return
.39770f		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the current column
.397711		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the new row
.397713		c8		iny		                    INY
.397714		c4 07		cpy $07		                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Check to see if we're off screen
.397716		90 05		bcc $39771d	                    BCC noscroll                        ; No: go ahead and set the position
.397718		88		dey		                    DEY                                 ; Yes: go back to the last row
.397719		22 8a 77 39	jsl $39778a	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.39771d		22 26 77 39	jsl $397726	noscroll            JSL ANSI_LOCATE                     ; And set the cursor position
.397721		28		plp		done                PLP
.397722		2b		pld		                    PLD
.397723		7a		ply		                    PLY
.397724		fa		plx		                    PLX
.397725		6b		rtl		                    RTL
.397726						ANSI_LOCATE
.397726		da		phx		                    PHX
.397727		5a		phy		                    PHY
.397728		0b		phd		                    PHD
.397729		08		php		                    PHP
.39772a		22 f8 71 39	jsl $3971f8	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.39772e		b0 55		bcs $397785	                    BCS done                    ; If invalid, just return
.397730		c2 30		rep #$30	                REP #$30        ; set A&X long
.397732						locate_scroll
.397732		c4 07		cpy $07		                    CPY #S_ANSI_VARS.LINES_VISIBLE,D
.397734		90 07		bcc $39773d	                    BCC locate_scrolldone
.397736		22 8a 77 39	jsl $39778a	                    JSL ANSI_SCROLLUP
.39773a		88		dey		                    DEY
.39773b		80 f5		bra $397732	                    BRA locate_scroll
.39773d						locate_scrolldone
.39773d		86 0e		stx $0e		                    STX #S_ANSI_VARS.CURSORX,D
.39773f		84 10		sty $10		                    STY #S_ANSI_VARS.CURSORY,D
.397741		a5 00		lda $00		                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.397743						locate_row
.397743		c0 00 00	cpy #$0000	                    CPY #$0
.397746		f0 08		beq $397750	                    BEQ locate_right
.397748		18		clc		locate_down         CLC
.397749		65 05		adc $05		                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.39774b		88		dey		                    DEY
.39774c		f0 02		beq $397750	                    BEQ locate_right
.39774e		80 f8		bra $397748	                    BRA locate_down
.397750		18		clc		locate_right        CLC
.397751		65 0e		adc $0e		                    ADC #S_ANSI_VARS.CURSORX,D      ; move the cursor right X columns
.397753		85 0b		sta $0b		                    STA #S_ANSI_VARS.CURSORPOS,D
.397755		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.397757		e2 20		sep #$20	                SEP #$20        ; set A short
.397759		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT
.39775d		c9 04		cmp #$04	                    CMP #CHAN_EVID
.39775f		f0 0e		beq $39776f	                    beq locate_evid
.397761		c2 20		rep #$20	                REP #$20        ; set A long
.397763		98		tya		                    TYA
.397764		8f 16 00 af	sta $af0016	                    STA @l VKY_TXT_CURSOR_Y_REG_L
.397768		8a		txa		                    TXA
.397769		8f 14 00 af	sta $af0014	                    STA @l VKY_TXT_CURSOR_X_REG_L
.39776d		80 0c		bra $39777b	                    BRA update_colorpos
.39776f						locate_evid
.39776f		c2 20		rep #$20	                REP #$20        ; set A long
.397771		98		tya		                    TYA
.397772		8f 16 1e ae	sta $ae1e16	                    STA @l EVID_TXT_CURSOR_Y_REG_L
.397776		8a		txa		                    TXA
.397777		8f 14 1e ae	sta $ae1e14	                    STA @l EVID_TXT_CURSOR_X_REG_L
.39777b						update_colorpos
.39777b		c2 20		rep #$20	                REP #$20        ; set A long
.39777d		18		clc		                    CLC
.39777e		a5 0b		lda $0b		                    LDA #S_ANSI_VARS.CURSORPOS,D
.397780		69 00 20	adc #$2000	                    ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.397783		85 13		sta $13		                    STA #S_ANSI_VARS.COLORPOS,D
.397785		28		plp		done                PLP
.397786		2b		pld		                    PLD
.397787		7a		ply		                    PLY
.397788		fa		plx		                    PLX
.397789		6b		rtl		                    RTL
.39778a						ANSI_SCROLLUP
.39778a		da		phx		                    PHX
.39778b		5a		phy		                    PHY
.39778c		8b		phb		                    PHB
.39778d		0b		phd		                    PHD
.39778e		08		php		                    PHP
.39778f		22 f8 71 39	jsl $3971f8	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.397793		90 03		bcc $397798	                    BCC calc_size
.397795		82 81 00	brl $397819	                    BRL done                    ; If invalid, just return
.397798						calc_size
.397798		c2 30		rep #$30	                REP #$30        ; set A&X long
.39779a		a5 05		lda $05		                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.39779c		8f 00 01 00	sta $000100	                    STA @l UNSIGNED_MULT_A_LO
.3977a0		a5 07		lda $07		                    LDA #S_ANSI_VARS.LINES_VISIBLE,D
.3977a2		8f 02 01 00	sta $000102	                    STA @l UNSIGNED_MULT_B_LO
.3977a6		af 04 01 00	lda $000104	                    LDA @l UNSIGNED_MULT_AL_LO
.3977aa		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.3977ac		18		clc		                    CLC
.3977ad		a5 00		lda $00		                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.3977af		a8		tay		                    TAY
.3977b0		65 05		adc $05		                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.3977b2		aa		tax		                    TAX
.3977b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3977b5		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID
.3977b9		c9 04		cmp #$04	                    CMP #CHAN_EVID
.3977bb		f0 09		beq $3977c6	                    BEQ move_text_1                             ; Yes: do the move on the EVID memory
.3977bd						move_text_0
.3977bd		c2 20		rep #$20	                REP #$20        ; set A long
.3977bf		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.3977c1		54 af af	mvn $af,$af	                    MVN `CS_TEXT_MEM_PTR,`CS_TEXT_MEM_PTR       ; Move the data on the main screen
.3977c4		80 07		bra $3977cd	                    BRA scroll_color
.3977c6						move_text_1
.3977c6		c2 20		rep #$20	                REP #$20        ; set A long
.3977c8		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.3977ca		54 ae ae	mvn $ae,$ae	                    MVN `EVID_TEXT_MEM,`EVID_TEXT_MEM           ; Move the data on the EVID screen
.3977cd						scroll_color
.3977cd		c2 30		rep #$30	                REP #$30        ; set A&X long
.3977cf		18		clc		                    CLC
.3977d0		a5 16		lda $16		                    LDA #S_ANSI_VARS.COLORBEGIN,D
.3977d2		a8		tay		                    TAY
.3977d3		65 05		adc $05		                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.3977d5		aa		tax		                    TAX
.3977d6		e2 20		sep #$20	                SEP #$20        ; set A short
.3977d8		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID?
.3977dc		c9 04		cmp #$04	                    CMP #CHAN_EVID
.3977de		f0 09		beq $3977e9	                    BEQ move_color_1                            ; Yes: scroll the EVID color matrix
.3977e0						move_color_0
.3977e0		c2 20		rep #$20	                REP #$20        ; set A long
.3977e2		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.3977e4		54 af af	mvn $af,$af	                    MVN `CS_COLOR_MEM_PTR,`CS_COLOR_MEM_PTR     ; Move the data on the main screen
.3977e7		80 07		bra $3977f0	                    BRA vicky_lastline
.3977e9						move_color_1
.3977e9		c2 20		rep #$20	                REP #$20        ; set A long
.3977eb		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.3977ed		54 ae ae	mvn $ae,$ae	                    MVN `EVID_COLOR_MEM,`EVID_COLOR_MEM         ; Move the data on the EVID screen
.3977f0						vicky_lastline
.3977f0		c2 20		rep #$20	                REP #$20        ; set A long
.3977f2		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.3977f4		48		pha		                    PHA
.3977f5		18		clc		                    CLC
.3977f6		65 00		adc $00		                    ADC #S_ANSI_VARS.SCREENBEGIN,D
.3977f8		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.3977fa		a0 00 00	ldy #$0000	start_clear         LDY #0
.3977fd		a9 20 00	lda #$0020	                    LDA #' '
.397800		97 19		sta [$19],y	clr_text            STA [#S_ANSI_VARS.TMPPTR1,D],Y
.397802		c8		iny		                    INY
.397803		c4 0f		cpy $0f		                    CPY #COLS_VISIBLE,D
.397805		d0 f9		bne $397800	                    BNE clr_text
.397807		68		pla		vicky_lastcolor     PLA
.397808		18		clc		                    CLC
.397809		65 16		adc $16		                    ADC #S_ANSI_VARS.COLORBEGIN,D
.39780b		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.39780d		a0 00 00	ldy #$0000	start_color         LDY #0
.397810		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.397812		97 19		sta [$19],y	clr_color           STA [#S_ANSI_VARS.TMPPTR1,D],Y
.397814		c8		iny		                    INY
.397815		c4 05		cpy $05		                    CPY #S_ANSI_VARS.COLS_PER_LINE,D
.397817		d0 f9		bne $397812	                    BNE clr_color
.397819		28		plp		done                PLP
.39781a		2b		pld		                    PLD
.39781b		ab		plb		                    PLB
.39781c		7a		ply		                    PLY
.39781d		fa		plx		                    PLX
.39781e		6b		rtl		                    RTL
.39781f						ANSI_CLRSCREEN
.39781f		da		phx		                    PHX
.397820		5a		phy		                    PHY
.397821		0b		phd		                    PHD
.397822		08		php		                    PHP
.397823		22 f8 71 39	jsl $3971f8	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.397827		b0 1e		bcs $397847	                    BCS done                            ; If invalid, just return
.397829		e2 20		sep #$20	                SEP #$20        ; set A short
.39782b		c2 10		rep #$10	                REP #$10        ; set X long
.39782d		a0 00 00	ldy #$0000	                    LDY #0
.397830		a9 20		lda #$20	                    LDA #$20		                    ; Fill the Entire Screen with Space
.397832		97 00		sta [$00],y	iclearloop0	        STA [#S_ANSI_VARS.SCREENBEGIN,D],Y
.397834		c8		iny		                    INY
.397835		c0 00 20	cpy #$2000	                    CPY #$2000
.397838		d0 f8		bne $397832	                    BNE iclearloop0
.39783a		a0 00 00	ldy #$0000	                    LDY	#0
.39783d		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D         ; Fill the current color
.39783f		97 16		sta [$16],y	evid_clearloop1     STA [#S_ANSI_VARS.COLORBEGIN,D],Y
.397841		c8		iny		                    INY
.397842		c0 00 20	cpy #$2000	                    CPY #$2000
.397845		d0 f8		bne $39783f	                    BNE evid_clearloop1
.397847		28		plp		done                PLP
.397848		2b		pld		                    PLD
.397849		7a		ply		                    PLY
.39784a		fa		plx		                    PLX
.39784b		6b		rtl		                    RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/kbd_driver.asm

=16						KBD_INBUF_SIZE = 16         ; Number of scan codes that can be buffered
=0						KBD_STATE_IDLE = 0          ; Keyboard is IDLE
=1						KBD_STATE_E0 = 1            ; Keyboard has sent E0
=2						KBD_STATE_E02A = 2          ; Keybaord has sent E0 2A (leading to Print Screen E02AE037)
=3						KBD_STATE_E02AE0 = 3
=4						KBD_STATE_E1 = 4            ; Keyboard has sent E1 (leading to Pause/Break)
=5						KBD_STATE_E11D = 5
=6						KBD_STATE_E11D45 = 6
=7						KBD_STATE_E11D45E1 = 7
=8						KBD_STATE_E11D45E19D = 8
=9						KBD_STATE_E0B7 = 9          ; Keyboard has sent E0 B7 (leading to break of Print Screen E0 B7 E0 AA)
=10						KBD_STATE_E0B7E0 = 10
=0						KBD_ACTION_IGNORE = 0       ; State machine action: do nothing with the current byte
=1						KBD_ACTION_EMIT_BASE = 1    ; State machine action: translate scancode from base table and emit it
=2						KBD_ACTION_EMIT_E0 = 2      ; State machine action: translate scancode from E0 prefix table and emit it
=$01						KBD_STAT_OBF = $01          ; Keyboard status: Output Buffer is Full
=$02						KBD_STAT_IBF = $02          ; Keyboard status: Input Buffer is Full
=$a7						KBD_CTRL_CMD_DISABLE2 = $A7 ; Keybaord controller command: disable output device #2
=$a9						KBD_CTRL_CMD_ENABLE2 = $A9  ; Keybaord controller command: enable output device #2
=$aa						KBD_CTRL_CMD_SELFTEST = $AA ; Keyboard controller command: start self test
=$ab						KBD_CTRL_CMD_KBDTEST = $AB  ; Keyboard controller command: start keyboard test
=$ad						KBD_CTRL_CMD_DISABLE1 = $AD ; Keybaord controller command: disable output device #1
=$ae						KBD_CTRL_CMD_ENABLE1 = $AE  ; Keybaord controller command: enable output device #1
=$60						KBD_CTRL_CMD_WRITECMD = $60 ; Keyboard controller command: write to the command register
=$ff						KBD_CMD_RESET = $FF         ; Keyboard command: reset the keyboard
=$f4						KBD_CMD_ENABLE = $F4        ; Keyboard command: enable to keyboard
=$ed						KBD_CMD_SET_LED = $ED       ; Keyboard command: set the LEDs
=$55						KBD_RESP_OK = $55           ; Keyboard response: Command was OK
=$fa						KBD_RESP_ACK = $FA          ; Keyboard response: command acknowledged
=$01						KBD_LOCK_SCROLL = $01       ; LED/lock mask for Scroll Lock key
=$02						KBD_LOCK_NUMBER = $02       ; LED/lock mask for Num Lock key
=$04						KBD_LOCK_CAPS = $04         ; LED/lock mask for Caps Lock key
=$01						KBD_MOD_LSHIFT  = %00000001     ; Left shift is pressed
=$02						KBD_MOD_RSHIFT  = %00000010     ; Right shift is pressed
=$04						KBD_MOD_LCTRL   = %00000100     ; Left CTRL is pressed
=$08						KBD_MOD_RCTRL   = %00001000     ; Right CTRL is pressed
=$10						KBD_MOD_LALT    = %00010000     ; Left ALT is pressed
=$20						KBD_MOD_RALT    = %00100000     ; Right ALT is pressed
=$40						KBD_MOD_OS      = %01000000     ; OS key (e.g. Windows Key) is pressed
=$80						KBD_MOD_MENU    = %10000000     ; Menu key is pressed
=$80						KBD_CTRL_BREAK      = %10000000 ; CONTROL Flag to indicate if keyboard should capture BREAK
=$40						KBD_CTRL_MONITOR    = %01000000 ; CONTROL Flag to indicate if keyboard should trap ALT-BREAK to go to the monitor
=$80						KBD_STAT_BREAK  = %10000000     ; STATUS flag, BREAK has been pressed recently
=$01						KBD_STAT_SCAN   = %00000001     ; STATUS flag to indicate if there are scan codes in the queue
=$02						KBD_STAT_CHAR   = %00000010     ; STATUS flag to indicate if there are characters in the queue
=$61						KBD_SC_BREAK = $61              ; Scan code for the PAUSE/BREAK key
=$3a						KBD_SC_CAPSLOCK = $3A           ; Scan code for the CAPS lock key
=$45						KBD_SC_NUMLOCK = $45            ; Scan code for the NUM lock key
=$46						KBD_SC_SCROLL = $46             ; Scan code for the SCROLL lock key
=$2a						KBD_SC_LSHIFT = $2A             ; Scan code for the left SHIFT key
=$1d						KBD_SC_LCTRL = $1D              ; Scan code for the left CTLR key
=$38						KBD_SC_LALT = $38               ; Scan code for the left ALT key
=$36						KBD_SC_RSHIFT = $36             ; Scan code for the right SHIFT key
=$5e						KBD_SC_RCTRL = $5E              ; Scan code for the right CTRL key
=$5c						KBD_SC_RALT = $5C               ; Scan code for the right ALT key
=$38						KBD_SC_PIVOT = $38              ; Scan code we will use as a pivot for checking NUM lock
.0000						S_KBD_CONTROL
>0000						STATE               .byte ?                     ; The state of the keyboard controller state machine
>0001						CONTROL             .byte ?                     ; Control register
>0002						STATUS              .byte ?                     ; Status register
>0003						SC_BUF              .fill KBD_INBUF_SIZE        ; Buffer for keyboard scancodes read
>0013						SC_HEAD             .byte ?                     ; Index of the first scancode cell to write to
>0014						CHAR_BUF            .fill KBD_INBUF_SIZE        ; Character buffer
>0024						CHAR_HEAD           .byte ?                     ; Number of characters in the character buffer
>0025						MODIFIERS           .byte ?                     ; State of the modifier keys
>0026						LOCKS               .byte ?                     ; State of the lock keys: Caps, Num, Scroll
>0027						TBL_UNMOD           .dword ?                    ; Pointer to the scan code translation table for unmodified keys
>002b						TBL_SHIFT           .dword ?                    ; Pointer to the scan code translation table for shifted keys
>002f						TBL_CTRL            .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL
>0033						TBL_LOCK            .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
>0037						TBL_LOCK_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
>003b						TBL_CTRL_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL and SHIFT
.39784c						IINITKEYBOARD
.39784c		da		phx		                    PHX
.39784d		5a		phy		                    PHY
.39784e		0b		phd		                    PHD
.39784f		08		php		                    PHP
.397850		48		pha		                PHA             ; begin setdp macro
.397851		08		php		                PHP
.397852		c2 20		rep #$20	                REP #$20        ; set A long
.397854		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397857		5b		tcd		                TCD
.397858		28		plp		                PLP
.397859		68		pla		                PLA             ; end setdp macro
.39785a		e2 20		sep #$20	                SEP #$20        ; set A short
.39785c		c2 10		rep #$10	                REP #$10        ; set X long
.39785e		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1                        ; Disable the keyboard interrupts while we get things started
.397862		09 01		ora #$01	                    ORA #FNX1_INT00_KBD
.397864		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.397868		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                         ; Set the state machine to the starting IDLE state
.39786a		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.39786c		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D                ; Mark the scancode buffer as empty
.39786e		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D              ; Mark the character buffer as empty
.397870		64 25		stz $0f25	                    STZ #S_KBD_CONTROL.MODIFIERS,D              ; Default to modifiers being off
.397872		64 02		stz $0f02	                    STZ #S_KBD_CONTROL.STATUS,D                 ; Clear the status register
.397874		a9 80		lda #$80	                    LDA #KBD_CTRL_BREAK                         ; Enable BREAK processing
.397876		85 01		sta $0f01	                    STA #S_KBD_CONTROL.CONTROL,D
.397878		c2 20		rep #$20	                REP #$20        ; set A long
.39787a		a9 00 80	lda #$8000	                    LDA #<>SC_US_UNMOD
.39787d		85 27		sta $0f27	                    STA #S_KBD_CONTROL.TBL_UNMOD,D
.39787f		a9 80 80	lda #$8080	                    LDA #<>SC_US_SHFT
.397882		85 2b		sta $0f2b	                    STA #S_KBD_CONTROL.TBL_SHIFT,D
.397884		a9 00 81	lda #$8100	                    LDA #<>SC_US_CTRL
.397887		85 2f		sta $0f2f	                    STA #S_KBD_CONTROL.TBL_CTRL,D
.397889		a9 80 81	lda #$8180	                    LDA #<>SC_US_LOCK
.39788c		85 33		sta $0f33	                    STA #S_KBD_CONTROL.TBL_LOCK,D
.39788e		a9 00 82	lda #$8200	                    LDA #<>SC_US_LOCK_SHFT
.397891		85 37		sta $0f37	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.397893		a9 80 82	lda #$8280	                    LDA #<>SC_US_CTRL_SHFT
.397896		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.397898		e2 20		sep #$20	                SEP #$20        ; set A short
.39789a		a9 39		lda #$39	                    LDA #`SC_US_UNMOD
.39789c		85 29		sta $0f29	                    STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.39789e		a9 39		lda #$39	                    LDA #`SC_US_SHFT
.3978a0		85 2d		sta $0f2d	                    STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.3978a2		a9 39		lda #$39	                    LDA #`SC_US_CTRL
.3978a4		85 31		sta $0f31	                    STA #S_KBD_CONTROL.TBL_CTRL+2,D
.3978a6		a9 39		lda #$39	                    LDA #`SC_US_LOCK
.3978a8		85 35		sta $0f35	                    STA #S_KBD_CONTROL.TBL_LOCK+2,D
.3978aa		a9 39		lda #$39	                    LDA #`SC_US_LOCK_SHFT
.3978ac		85 39		sta $0f39	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.3978ae		a9 39		lda #$39	                    LDA #`SC_US_CTRL_SHFT
.3978b0		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.3978b2		a9 ad		lda #$ad	                    LDA #KBD_CTRL_CMD_DISABLE1  ; Disable the keyboard sending data
.3978b4		22 3d 79 39	jsl $39793d	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.3978b8		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.3978bc		af 03 18 af	lda $af1803	flush_output        LDA @l KBD_DATA_BUF         ; We just throw that away
.3978c0		a9 aa		lda #$aa	                    LDA #KBD_CTRL_CMD_SELFTEST  ; Send the self test command
.3978c2		22 48 79 39	jsl $397948	                    JSL KBD_CTRL_SND_CMD
.3978c6		c9 55		cmp #$55	                    CMP #KBD_RESP_OK            ; Did we get an OK?
.3978c8		f0 05		beq $3978cf	                    BEQ test_AB
.3978ca		a9 02		lda #$02	                    LDA #2                      ; Return error #2
.3978cc		82 5e 00	brl $39792d	                    BRL done
.3978cf		a9 ab		lda #$ab	test_AB             LDA #KBD_CTRL_CMD_KBDTEST   ; Send the keyboard test command
.3978d1		22 48 79 39	jsl $397948	                    JSL KBD_CTRL_SND_CMD
.3978d5		c9 00		cmp #$00	                    CMP #0                      ; Did we get a good response?
.3978d7		f0 05		beq $3978de	                    BEQ write_command
.3978d9		a9 03		lda #$03	                    LDA #3                      ; Return error #3
.3978db		82 4f 00	brl $39792d	                    BRL done
.3978de		a9 60		lda #$60	write_command       LDA #KBD_CTRL_CMD_WRITECMD
.3978e0		a2 43 00	ldx #$0043	                    LDX #%01000011              ; Translate to set 1, no interrupts
.3978e3		22 a2 79 39	jsl $3979a2	                    JSL KBD_CTRL_SND_CMD_P
.3978e7		a9 ae		lda #$ae	enable_dev1         LDA #KBD_CTRL_CMD_ENABLE1   ; Re-enable the keyboard sending data
.3978e9		22 3d 79 39	jsl $39793d	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.3978ed		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.3978f1		a9 ff		lda #$ff	reset_kbd           LDA #KBD_CMD_RESET          ; Send a reset command to the keyboard
.3978f3		a2 ff ff	ldx #$ffff	                    LDX #$FFFF                  ; And wait a while for it to complete the reset
.3978f6		22 59 79 39	jsl $397959	                    JSL KBD_SND_CMD
.3978fa		a0 80 00	ldy #$0080	                    LDY #128                    ; Attemp enabling the keyboard 128 times
.3978fd		a9 f4		lda #$f4	enable_loop         LDA #KBD_CMD_ENABLE         ; Try to enable the keyboard
.3978ff		a2 00 00	ldx #$0000	                    LDX #0
.397902		22 59 79 39	jsl $397959	                    JSL KBD_SND_CMD
.397906		c9 fa		cmp #$fa	                    CMP #KBD_RESP_ACK           ; Did the keyboard acknowledge the command?
.397908		f0 07		beq $397911	                    BEQ set_led                 ; Yes: try to set the LEDs
.39790a		88		dey		                    DEY                         ; No: try again... counting down
.39790b		d0 f0		bne $3978fd	                    BNE enable_loop             ; If we are out of attempts...
.39790d		a9 05		lda #$05	                    LDA #5                      ; Return error #5
.39790f		80 1c		bra $39792d	                    BRA done
.397911		a9 00		lda #$00	set_led             LDA #0                      ; Set the state of the locks
.397913		22 c9 7b 39	jsl $397bc9	                    JSL KBD_SETLOCKS
.397917		af 41 01 00	lda $000141	                    LDA @l INT_PENDING_REG1     ; Read the Pending Register &
.39791b		29 01		and #$01	                    AND #FNX1_INT00_KBD
.39791d		8f 41 01 00	sta $000141	                    STA @l INT_PENDING_REG1     ; Writing it back will clear the Active Bit
.397921		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.397925		29 fe		and #$fe	                    AND #~FNX1_INT00_KBD
.397927		8f 4d 01 00	sta $00014d	                    STA @l INT_MASK_REG1
.39792b		a9 00		lda #$00	return_0            LDA #0                      ; Return status code for success
.39792d		28		plp		done                PLP
.39792e		2b		pld		                    PLD
.39792f		7a		ply		                    PLY
.397930		fa		plx		                    PLX
.397931		6b		rtl		                    RTL
.397932						KBD_WAIT_OUT
.397932		48		pha		                    PHA
.397933		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.397937		89 01		bit #$01	                    BIT #KBD_STAT_OBF       ; Check to see if the output buffer is full
.397939		f0 f8		beq $397933	                    BEQ wait                ; If it isn't, keep waiting
.39793b		68		pla		                    PLA
.39793c		6b		rtl		                    RTL
.39793d						KBD_WAIT_IN
.39793d		48		pha		                    PHA
.39793e		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.397942		89 02		bit #$02	                    BIT #KBD_STAT_IBF       ; Check to see if the input buffer has data
.397944		d0 f8		bne $39793e	                    BNE wait                ; If not, wait for it to have something
.397946		68		pla		                    PLA
.397947		6b		rtl		                    RTL
.397948						KBD_CTRL_SND_CMD
.397948		22 3d 79 39	jsl $39793d	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.39794c		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.397950		22 32 79 39	jsl $397932	                    JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.397954		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.397958		6b		rtl		                    RTL
.397959						KBD_SND_CMD
.397959		22 3d 79 39	jsl $39793d	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.39795d		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.397961		c2 10		rep #$10	                REP #$10        ; set X long
.397963		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.397966		f0 0b		beq $397973	                    BEQ get_response        ; If 0, check for a response
.397968		ca		dex		                    DEX                     ; Count down
.397969		ea		nop		                    NOP                     ; And do a delay
.39796a		ea		nop		                    NOP
.39796b		ea		nop		                    NOP
.39796c		ea		nop		                    NOP
.39796d		ea		nop		                    NOP
.39796e		ea		nop		                    NOP
.39796f		ea		nop		                    NOP
.397970		ea		nop		                    NOP
.397971		80 f0		bra $397963	                    BRA delay
.397973		22 32 79 39	jsl $397932	get_response        JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.397977		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.39797b		6b		rtl		                    RTL
.39797c						KBD_SND_CMD_P
.39797c		22 3d 79 39	jsl $39793d	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.397980		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.397984		8a		txa		                    TXA                     ; Send the parameter to the keyboard
.397985		c2 10		rep #$10	                REP #$10        ; set X long
.397987		a2 e8 03	ldx #$03e8	                    LDX #1000
.39798a		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.39798d		f0 0a		beq $397999	                    BEQ send_data           ; If 0, check for a response
.39798f		ca		dex		                    DEX                     ; Count down
.397990		ea		nop		                    NOP                     ; And do a delay
.397991		ea		nop		                    NOP
.397992		ea		nop		                    NOP
.397993		ea		nop		                    NOP
.397994		ea		nop		                    NOP
.397995		ea		nop		                    NOP
.397996		ea		nop		                    NOP
.397997		80 f1		bra $39798a	                    BRA delay
.397999		22 3d 79 39	jsl $39793d	send_data           JSL KBD_WAIT_IN
.39799d		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.3979a1						get_response
.3979a1		6b		rtl		                    RTL
.3979a2						KBD_CTRL_SND_CMD_P
.3979a2		22 3d 79 39	jsl $39793d	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.3979a6		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.3979aa		8a		txa		                    TXA
.3979ab		22 3d 79 39	jsl $39793d	                    JSL KBD_WAIT_IN         ; Send the parameter to the controller
.3979af		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.3979b3		6b		rtl		                    RTL
.3979b4						KBD_PROCESS_BYTE
.3979b4		8b		phb		                    PHB
.3979b5		0b		phd		                    PHD
.3979b6		08		php		                    PHP
.3979b7		48		pha		                PHA             ; begin setdbr macro
.3979b8		08		php		                PHP
.3979b9		e2 20		sep #$20	                SEP #$20        ; set A short
.3979bb		a9 39		lda #$39	                LDA #`KBD_STATE_MACH
.3979bd		48		pha		                PHA
.3979be		ab		plb		                PLB
.3979bf		28		plp		                PLP
.3979c0		68		pla		                PLA             ; end setdbr macro
.3979c1		48		pha		                PHA             ; begin setdp macro
.3979c2		08		php		                PHP
.3979c3		c2 20		rep #$20	                REP #$20        ; set A long
.3979c5		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.3979c8		5b		tcd		                TCD
.3979c9		28		plp		                PLP
.3979ca		68		pla		                PLA             ; end setdp macro
.3979cb		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3979cd		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF                 ; Get the current scancode byte
.3979d1		d0 03		bne $3979d6	                    BNE save_scancode
.3979d3		82 67 00	brl $397a3d	                    BRL done                            ; If it's 0, just ignore it
.3979d6						LOCALS
>0001						l_break             .byte ?                             ; The make/break bit of the scancode
>0002						l_code              .byte ?                             ; The scancode
.3979d6		48		pha		save_scancode       PHA
.3979d7		48		pha		                    PHA
.3979d8		29 80		and #$80	                    AND #$80
.3979da		83 01		sta $01,s	                    STA l_break                         ; Save the make/break bit
.3979dc		a2 00		ldx #$00	                    LDX #0                              ; Start from the beginning
.3979de		bf 00 7f 39	lda $397f00,x	chk_transition      LDA @l KBD_STATE_MACH,X             ; Get the tranition's start state
.3979e2		c9 ff		cmp #$ff	                    CMP #$FF
.3979e4		d0 03		bne $3979e9	                    BNE compare_state
.3979e6		82 54 00	brl $397a3d	                    BRL done                            ; If $FF: we've reached the end... this is an error... just ignore it?
.3979e9		c5 00		cmp $0f00	compare_state       CMP #S_KBD_CONTROL.STATE,D          ; Compare it to the current state
.3979eb		d0 0e		bne $3979fb	                    BNE next_transition                 ; If they don't match, go to the next transition
.3979ed		bf 01 7f 39	lda $397f01,x	                    LDA @l KBD_STATE_MACH+1,X           ; Get the tranition's test byte
.3979f1		f0 0e		beq $397a01	                    BEQ apply                           ; Is it 0? Yes: the default applies
.3979f3		a3 02		lda $02,s	                    LDA l_code                          ; Otherwise: get the scan code back
.3979f5		df 01 7f 39	cmp $397f01,x	                    CMP @l KBD_STATE_MACH+1,X           ; Compare it to the transition's test byte
.3979f9		f0 06		beq $397a01	                    BEQ apply                           ; If equal: this matches, apply the transition
.3979fb		e8		inx		next_transition     INX                                 ; Move to the next transition
.3979fc		e8		inx		                    INX
.3979fd		e8		inx		                    INX
.3979fe		e8		inx		                    INX
.3979ff		80 dd		bra $3979de	                    BRA chk_transition                  ; Check to see if the next transition applies
.397a01		bf 02 7f 39	lda $397f02,x	apply               LDA @l KBD_STATE_MACH+2,X           ; Get the tranition's destination state
.397a05		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D          ; And save it as our new state
.397a07		bf 03 7f 39	lda $397f03,x	                    LDA @l KBD_STATE_MACH+3,X           ; Get the tranition's action
.397a0b		c9 00		cmp #$00	                    CMP #KBD_ACTION_IGNORE              ; Is it IGNORE?
.397a0d		f0 2e		beq $397a3d	                    BEQ done                            ; Yes: we're done for now
.397a0f		c9 01		cmp #$01	                    CMP #KBD_ACTION_EMIT_BASE           ; Is it EMIT_BASE?
.397a11		f0 06		beq $397a19	                    BEQ emit_base                       ; Yes: emit the translation of the base byte
.397a13		c9 02		cmp #$02	                    CMP #KBD_ACTION_EMIT_E0             ; Is it EMIT_E0?
.397a15		f0 0f		beq $397a26	                    BEQ emit_e0                         ; Yes: emit the translation of the E0 prefixed byte
.397a17		80 18		bra $397a31	                    BRA emit_A                          ; Otherwise: just emit the action byte as the new scan code
.397a19		a3 02		lda $02,s	emit_base           LDA l_code
.397a1b		29 7f		and #$7f	                    AND #$7F                            ; Strip off the make/break bit
.397a1d		aa		tax		                    TAX
.397a1e		bf 00 7e 39	lda $397e00,x	                    LDA @l TBL_SET1,X                   ; Get the translation of the base scan code
.397a22		03 01		ora $01,s	                    ORA l_break                         ; Add the make/break bit back
.397a24		80 0b		bra $397a31	                    BRA emit_A                          ; Emit the translation
.397a26		a3 02		lda $02,s	emit_e0             LDA l_code
.397a28		29 7f		and #$7f	                    AND #$7F                            ; Strip off any make/break bit
.397a2a		aa		tax		                    TAX
.397a2b		bf 80 7e 39	lda $397e80,x	                    LDA @l TBL_SET1_E0,X                ; Get the translation of the E0 prefixed scan code
.397a2f		03 01		ora $01,s	                    ORA l_break                         ; Add in the make/break flag
.397a31		c9 00		cmp #$00	emit_A              CMP #0                              ; Is the code NUL?
.397a33		f0 08		beq $397a3d	                    BEQ done                            ; If so, skip enqueuing it
.397a35		22 45 7a 39	jsl $397a45	enqueue             JSL KBD_SC_ENQUEUE                  ; Enqueue the scancode
.397a39		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                 ; Set the state machine to the initial state
.397a3b		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.397a3d						done
.397a3d		e2 20		sep #$20	                SEP #$20        ; set A short
.397a3f		68		pla		                    PLA                                 ; Clean the scan code byte from the stack
.397a40		68		pla		                    PLA
.397a41		28		plp		                    PLP
.397a42		2b		pld		                    PLD
.397a43		ab		plb		                    PLB
.397a44		6b		rtl		                    RTL
.397a45						KBD_SC_ENQUEUE
.397a45		0b		phd		                    PHD
.397a46		08		php		                    PHP
.397a47		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.397a48		48		pha		                PHA             ; begin setdp macro
.397a49		08		php		                PHP
.397a4a		c2 20		rep #$20	                REP #$20        ; set A long
.397a4c		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397a4f		5b		tcd		                TCD
.397a50		28		plp		                PLP
.397a51		68		pla		                PLA             ; end setdp macro
.397a52		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397a54		c9 00		cmp #$00	                    CMP #0                          ; Is the scan code a NUL?
.397a56		f0 2f		beq $397a87	                    BEQ done                        ; Yes: just ignore
.397a58		c9 61		cmp #$61	                    CMP #KBD_SC_BREAK               ; Is it the BREAK key?
.397a5a		d0 10		bne $397a6c	                    BNE chk_locks                   ; No: check the various lock keys
.397a5c		a5 01		lda $0f01	                    LDA #S_KBD_CONTROL.CONTROL,D
.397a5e		89 80		bit #$80	                    BIT #KBD_CTRL_BREAK                 ; Are we processing BREAK?
.397a60		f0 08		beq $397a6a	                    BEQ enqueue_break                   ; No: enqueue it as normal
.397a62		a9 80		lda #$80	                    LDA #KBD_STAT_BREAK                 ; Yes: turn on the BREAK bit
.397a64		05 02		ora $0f02	                    ORA #S_KBD_CONTROL.STATUS,D
.397a66		85 02		sta $0f02	                    STA #S_KBD_CONTROL.STATUS,D
.397a68		80 1d		bra $397a87	                    BRA done                            ; And we're done
.397a6a		a9 61		lda #$61	enqueue_break       LDA #KBD_SC_BREAK
.397a6c		c9 3a		cmp #$3a	chk_locks           CMP #KBD_SC_CAPSLOCK            ; Is it the CAPS lock?
.397a6e		f0 1a		beq $397a8a	                    BEQ toggle_caps                 ; Yes: toggle the CAPS lock bits
.397a70		c9 45		cmp #$45	                    CMP #KBD_SC_NUMLOCK             ; Is it the NUM lock?
.397a72		f0 20		beq $397a94	                    BEQ toggle_num                  ; Yes: toggle the NUM lock bits
.397a74		c9 46		cmp #$46	                    CMP #KBD_SC_SCROLL              ; Is it the SCROLL lock?
.397a76		f0 22		beq $397a9a	                    BEQ toggle_scroll               ; Yes: toggle the SCROLL lock bits
.397a78		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.397a7a		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.397a7c		f0 09		beq $397a87	                    BEQ done                        ; Yes: we're full... ignore the scancode
.397a7e		95 03		sta $0f03,x	                    STA #S_KBD_CONTROL.SC_BUF,D,X   ; No: we have room, write the scan code to the buffer
.397a80		e8		inx		                    INX                             ; Advance to the next location
.397a81		86 13		stx $0f13	                    STX #S_KBD_CONTROL.SC_HEAD,D
.397a83		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Set the KBD_STAT_SCAN bit
.397a85		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.397a87		28		plp		done                PLP
.397a88		2b		pld		                    PLD
.397a89		6b		rtl		                    RTL
.397a8a		a5 26		lda $0f26	toggle_caps         LDA #S_KBD_CONTROL.LOCKS,D
.397a8c		49 04		eor #$04	                    EOR #KBD_LOCK_CAPS              ; Toggle the CAPS lock
.397a8e		22 c9 7b 39	jsl $397bc9	save_locks          JSL KBD_SETLOCKS                ; Set the locks
.397a92		80 f3		bra $397a87	                    BRA done
.397a94		a5 26		lda $0f26	toggle_num          LDA #S_KBD_CONTROL.LOCKS,D
.397a96		49 02		eor #$02	                    EOR #KBD_LOCK_NUMBER            ; Toggle the NUM lock
.397a98		80 f4		bra $397a8e	                    BRA save_locks
.397a9a		a5 26		lda $0f26	toggle_scroll       LDA #S_KBD_CONTROL.LOCKS,D
.397a9c		49 01		eor #$01	                    EOR #KBD_LOCK_SCROLL            ; Toggle the SCROLL lock
.397a9e		80 ee		bra $397a8e	                    BRA save_locks
.397aa0						KBD_CHAR_ENQUEUE
.397aa0		0b		phd		                    PHD
.397aa1		08		php		                    PHP
.397aa2		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.397aa3		48		pha		                PHA             ; begin setdp macro
.397aa4		08		php		                PHP
.397aa5		c2 20		rep #$20	                REP #$20        ; set A long
.397aa7		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397aaa		5b		tcd		                TCD
.397aab		28		plp		                PLP
.397aac		68		pla		                PLA             ; end setdp macro
.397aad		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397aaf		c9 00		cmp #$00	                    CMP #0                          ; Is the character a NUL?
.397ab1		f0 0f		beq $397ac2	                    BEQ done                        ; Yes: just ignore
.397ab3		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D  ; Get the index of the next free spot
.397ab5		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.397ab7		f0 09		beq $397ac2	                    BEQ done                        ; Yes: we're full... ignore the scancode
.397ab9		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X ; No: we have room, write the scan code to the buffer
.397abb		e8		inx		                    INX                             ; Advance to the next location
.397abc		86 24		stx $0f24	                    STX #S_KBD_CONTROL.CHAR_HEAD,D
.397abe		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR              ; Set the KBD_STAT_CHAR bit
.397ac0		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.397ac2		28		plp		done                PLP
.397ac3		2b		pld		                    PLD
.397ac4		6b		rtl		                    RTL
.397ac5						KBD_CHAR_DEQUEUE
.397ac5		da		phx		                    PHX
.397ac6		0b		phd		                    PHD
.397ac7		08		php		                    PHP
.397ac8		48		pha		                PHA             ; begin setdp macro
.397ac9		08		php		                PHP
.397aca		c2 20		rep #$20	                REP #$20        ; set A long
.397acc		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397acf		5b		tcd		                TCD
.397ad0		28		plp		                PLP
.397ad1		68		pla		                PLA             ; end setdp macro
.397ad2		78		sei		                    SEI                                 ; Disable IRQ for the duration of this routine to avoid race conditions
.397ad3		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397ad5		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; Get the index of the next free spot
.397ad7		f0 21		beq $397afa	                    BEQ return_empty                    ; If it's 0, we have no data
.397ad9		a5 14		lda $0f14	                    LDA #S_KBD_CONTROL.CHAR_BUF,D       ; Get the character at the head of the queue
.397adb		48		pha		                    PHA                                 ; Save it
.397adc		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; How many bytes were there?
.397ade		e0 01		cpx #$01	                    CPX #1                              ; Is it one?
.397ae0		d0 08		bne $397aea	                    BNE copy_down                       ; No: we need to copy down the remaining bytes
.397ae2		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D      ; Yes: mark that we have no data in the queue now
.397ae4		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR                  ; Clear the KBD_STAT_CHAR bit
.397ae6		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.397ae8		80 0d		bra $397af7	                    BRA return_head                     ; And return the character we found
.397aea		a2 00		ldx #$00	copy_down           LDX #0                              ; Starting at the beginning of the buffer...
.397aec		b5 15		lda $0f15,x	loop                LDA #S_KBD_CONTROL.CHAR_BUF+1,D,X   ; Get the next byte
.397aee		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X     ; Move it down
.397af0		e8		inx		                    INX                                 ; And move to the next byte
.397af1		e4 24		cpx $0f24	                    CPX #S_KBD_CONTROL.CHAR_HEAD,D      ; Have we reached the end?
.397af3		d0 f7		bne $397aec	                    BNE loop                            ; No: keep copying bytes
.397af5		c6 24		dec $0f24	                    DEC #S_KBD_CONTROL.CHAR_HEAD,D      ; Decrement the index
.397af7		68		pla		return_head         PLA                                 ; Get the character back
.397af8		80 02		bra $397afc	                    BRA done                            ; And return it
.397afa		a9 00		lda #$00	return_empty        LDA #0                              ; Return: 0 for no character
.397afc		28		plp		done                PLP
.397afd		2b		pld		                    PLD
.397afe		fa		plx		                    PLX
.397aff		6b		rtl		                    RTL
.397b00						KBD_GET_SCANCODE
.397b00		da		phx		                    PHX
.397b01		0b		phd		                    PHD
.397b02		08		php		                    PHP
.397b03		48		pha		                PHA             ; begin setdp macro
.397b04		08		php		                PHP
.397b05		c2 20		rep #$20	                REP #$20        ; set A long
.397b07		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397b0a		5b		tcd		                TCD
.397b0b		28		plp		                PLP
.397b0c		68		pla		                PLA             ; end setdp macro
.397b0d		78		sei		                    SEI                             ; Disable IRQ for the duration of this routine to avoid race conditions
.397b0e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397b10		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.397b12		f0 21		beq $397b35	                    BEQ return_empty                ; If it's 0, we have no data
.397b14		a5 03		lda $0f03	                    LDA #S_KBD_CONTROL.SC_BUF,D     ; Get the scan code at the head of the queue
.397b16		48		pha		                    PHA                             ; Save it
.397b17		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; How many bytes were there?
.397b19		e0 01		cpx #$01	                    CPX #1                          ; Is it one?
.397b1b		d0 08		bne $397b25	                    BNE copy_down                   ; No: we need to copy down the remaining bytes
.397b1d		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D    ; Yes: mark that we have no data in the queue now
.397b1f		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Clear the KBD_STAT_SCAN bit
.397b21		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.397b23		80 0d		bra $397b32	                    BRA return_head                 ; And return the scan code we found
.397b25		a2 00		ldx #$00	copy_down           LDX #0                          ; Starting at the beginning of the buffer...
.397b27		b5 04		lda $0f04,x	loop                LDA #S_KBD_CONTROL.SC_BUF+1,D,X ; Get the next byte
.397b29		85 03		sta $0f03	                    STA #S_KBD_CONTROL.SC_BUF,D     ; Move it down
.397b2b		e8		inx		                    INX                             ; And move to the next byte
.397b2c		e4 13		cpx $0f13	                    CPX #S_KBD_CONTROL.SC_HEAD,D    ; Have we reached the end?
.397b2e		d0 f7		bne $397b27	                    BNE loop                        ; No: keep copying bytes
.397b30		c6 13		dec $0f13	                    DEC #S_KBD_CONTROL.SC_HEAD,D    ; Reduce the index to the next free byte
.397b32		68		pla		return_head         PLA                             ; Get the scan code back
.397b33		80 02		bra $397b37	                    BRA done                        ; And return it
.397b35		a9 00		lda #$00	return_empty        LDA #0                          ; Return: 0 for no scan code
.397b37		28		plp		done                PLP
.397b38		2b		pld		                    PLD
.397b39		fa		plx		                    PLX
.397b3a		6b		rtl		                    RTL
.397b3b						KBD_GETMODS
.397b3b		0b		phd		                PHD
.397b3c		08		php		                PHP
.397b3d		48		pha		                PHA             ; begin setdp macro
.397b3e		08		php		                PHP
.397b3f		c2 20		rep #$20	                REP #$20        ; set A long
.397b41		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397b44		5b		tcd		                TCD
.397b45		28		plp		                PLP
.397b46		68		pla		                PLA             ; end setdp macro
.397b47		e2 20		sep #$20	                SEP #$20        ; set A short
.397b49		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.397b4b		28		plp		                PLP
.397b4c		2b		pld		                PLD
.397b4d		6b		rtl		                RTL
.397b4e						KBD_GET_STAT
.397b4e		0b		phd		                PHD
.397b4f		08		php		                PHP
.397b50		48		pha		                PHA             ; begin setdp macro
.397b51		08		php		                PHP
.397b52		c2 20		rep #$20	                REP #$20        ; set A long
.397b54		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397b57		5b		tcd		                TCD
.397b58		28		plp		                PLP
.397b59		68		pla		                PLA             ; end setdp macro
.397b5a		e2 20		sep #$20	                SEP #$20        ; set A short
.397b5c		a5 02		lda $0f02	                LDA #S_KBD_CONTROL.STATUS,D
.397b5e		28		plp		                PLP
.397b5f		2b		pld		                PLD
.397b60		6b		rtl		                RTL
.397b61						KBD_TEST_BREAK
.397b61		0b		phd		                PHD
.397b62		08		php		                PHP
.397b63		48		pha		                PHA             ; begin setdp macro
.397b64		08		php		                PHP
.397b65		c2 20		rep #$20	                REP #$20        ; set A long
.397b67		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397b6a		5b		tcd		                TCD
.397b6b		28		plp		                PLP
.397b6c		68		pla		                PLA             ; end setdp macro
.397b6d		e2 20		sep #$20	                SEP #$20        ; set A short
.397b6f		a9 80		lda #$80	                LDA #KBD_STAT_BREAK             ; Check the BREAK bit in STATUS
.397b71		14 02		trb $0f02	                TRB #S_KBD_CONTROL.STATUS,D     ; ... and clear it
.397b73		d0 04		bne $397b79	                BNE ret_true                    ; If it was set, return TRUE
.397b75		28		plp		ret_false       PLP                             ; Otherwise, return false
.397b76		2b		pld		                PLD
.397b77		18		clc		                CLC
.397b78		6b		rtl		                RTL
.397b79		28		plp		ret_true        PLP
.397b7a		2b		pld		                PLD
.397b7b		38		sec		                SEC
.397b7c		6b		rtl		                RTL
.397b7d						KBD_GETMODS_ANSI
.397b7d		0b		phd		                    PHD
.397b7e		08		php		                    PHP
.397b7f		48		pha		                PHA             ; begin setdp macro
.397b80		08		php		                PHP
.397b81		c2 20		rep #$20	                REP #$20        ; set A long
.397b83		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397b86		5b		tcd		                TCD
.397b87		28		plp		                PLP
.397b88		68		pla		                PLA             ; end setdp macro
.397b89		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397b8b		a9 00		lda #$00	                    LDA #0                      ; Make space for the result code
.397b8d		48		pha		                    PHA
>0001						l_result            .byte ?
.397b8e		a5 25		lda $0f25	                    LDA #S_KBD_CONTROL.MODIFIERS,D
.397b90		89 03		bit #$03	                    BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT
.397b92		f0 06		beq $397b9a	                    BEQ check_alt
.397b94		a3 01		lda $01,s	                    LDA l_result
.397b96		09 02		ora #$02	                    ORA #%00000010
.397b98		83 01		sta $01,s	                    STA l_result
.397b9a		a5 25		lda $0f25	check_alt           LDA #S_KBD_CONTROL.MODIFIERS,D
.397b9c		89 30		bit #$30	                    BIT #KBD_MOD_LALT | KBD_MOD_RALT
.397b9e		f0 06		beq $397ba6	                    BEQ check_ctrl
.397ba0		a3 01		lda $01,s	                    LDA l_result
.397ba2		09 04		ora #$04	                    ORA #%00000100
.397ba4		83 01		sta $01,s	                    STA l_result
.397ba6		a5 25		lda $0f25	check_ctrl          LDA #S_KBD_CONTROL.MODIFIERS,D
.397ba8		89 0c		bit #$0c	                    BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL
.397baa		f0 06		beq $397bb2	                    BEQ return_result
.397bac		a3 01		lda $01,s	                    LDA l_result
.397bae		09 08		ora #$08	                    ORA #%00001000
.397bb0		83 01		sta $01,s	                    STA l_result
.397bb2		68		pla		return_result       PLA
.397bb3		28		plp		                    PLP
.397bb4		2b		pld		                    PLD
.397bb5		6b		rtl		                    RTL
.397bb6						KBD_GETLOCKS
.397bb6		0b		phd		                PHD
.397bb7		08		php		                PHP
.397bb8		48		pha		                PHA             ; begin setdp macro
.397bb9		08		php		                PHP
.397bba		c2 20		rep #$20	                REP #$20        ; set A long
.397bbc		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397bbf		5b		tcd		                TCD
.397bc0		28		plp		                PLP
.397bc1		68		pla		                PLA             ; end setdp macro
.397bc2		e2 20		sep #$20	                SEP #$20        ; set A short
.397bc4		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D
.397bc6		28		plp		                PLP
.397bc7		2b		pld		                PLD
.397bc8		6b		rtl		                RTL
.397bc9						KBD_SETLOCKS
.397bc9		0b		phd		                PHD
.397bca		08		php		                PHP
.397bcb		48		pha		                PHA             ; begin setdp macro
.397bcc		08		php		                PHP
.397bcd		c2 20		rep #$20	                REP #$20        ; set A long
.397bcf		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397bd2		5b		tcd		                TCD
.397bd3		28		plp		                PLP
.397bd4		68		pla		                PLA             ; end setdp macro
.397bd5		e2 20		sep #$20	                SEP #$20        ; set A short
.397bd7		85 26		sta $0f26	                STA #S_KBD_CONTROL.LOCKS,D
.397bd9		28		plp		                PLP
.397bda		2b		pld		                PLD
.397bdb		6b		rtl		                RTL
.397bdc						KBD_GET_CONTROL
.397bdc		0b		phd		                PHD
.397bdd		08		php		                PHP
.397bde		48		pha		                PHA             ; begin setdp macro
.397bdf		08		php		                PHP
.397be0		c2 20		rep #$20	                REP #$20        ; set A long
.397be2		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397be5		5b		tcd		                TCD
.397be6		28		plp		                PLP
.397be7		68		pla		                PLA             ; end setdp macro
.397be8		e2 20		sep #$20	                SEP #$20        ; set A short
.397bea		a5 01		lda $0f01	                LDA #S_KBD_CONTROL.CONTROL,D
.397bec		28		plp		                PLP
.397bed		2b		pld		                PLD
.397bee		6b		rtl		                RTL
.397bef						KBD_SET_CONTROL
.397bef		0b		phd		                PHD
.397bf0		08		php		                PHP
.397bf1		48		pha		                PHA             ; begin setdp macro
.397bf2		08		php		                PHP
.397bf3		c2 20		rep #$20	                REP #$20        ; set A long
.397bf5		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397bf8		5b		tcd		                TCD
.397bf9		28		plp		                PLP
.397bfa		68		pla		                PLA             ; end setdp macro
.397bfb		e2 20		sep #$20	                SEP #$20        ; set A short
.397bfd		85 01		sta $0f01	                STA #S_KBD_CONTROL.CONTROL,D
.397bff		28		plp		                PLP
.397c00		2b		pld		                PLD
.397c01		6b		rtl		                RTL
.397c02						KBD_GETCW
.397c02		22 0e 7c 39	jsl $397c0e	                JSL KBD_GETC
.397c06		c9 00		cmp #$00	                CMP #0
.397c08		f0 01		beq $397c0b	                BEQ wait
.397c0a		6b		rtl		                RTL
.397c0b		cb		wai		wait            WAI
.397c0c		80 f4		bra $397c02	                BRA KBD_GETCW
.397c0e						KBD_GETC
.397c0e		0b		phd		                PHD
.397c0f		08		php		                PHP
.397c10		48		pha		                PHA             ; begin setdp macro
.397c11		08		php		                PHP
.397c12		c2 20		rep #$20	                REP #$20        ; set A long
.397c14		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397c17		5b		tcd		                TCD
.397c18		28		plp		                PLP
.397c19		68		pla		                PLA             ; end setdp macro
.397c1a		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397c1c		22 c5 7a 39	jsl $397ac5	                JSL KBD_CHAR_DEQUEUE        ; Try to fetch a character from the character queue
.397c20		c9 00		cmp #$00	                CMP #0                      ; Did we get anything back?
.397c22		f0 03		beq $397c27	                BEQ get_scancode            ; No: try to get a scan code
.397c24		82 cb 00	brl $397cf2	                BRL done                    ; Yes: return the character we had queued
.397c27		22 00 7b 39	jsl $397b00	get_scancode    JSL KBD_GET_SCANCODE        ; Fetch the next scancode
.397c2b		c9 00		cmp #$00	                CMP #0                      ; Is it NUL?
.397c2d		d0 04		bne $397c33	                BNE chk_make_break
.397c2f		28		plp		                PLP                         ; Yes: return 0... we got nothin
.397c30		38		sec		                SEC
.397c31		2b		pld		                PLD
.397c32		6b		rtl		                RTL
.397c33		89 80		bit #$80	chk_make_break  BIT #$80                    ; Is it a break scan code?
.397c35		d0 08		bne $397c3f	                BNE handle_break            ; Yes: process the break
.397c37		c9 2a		cmp #$2a	handle_make     CMP #KBD_SC_LSHIFT          ; Is it a make LSHIFT?
.397c39		d0 0c		bne $397c47	                BNE not_make_ls
.397c3b		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.397c3d		80 4e		bra $397c8d	                BRA set_modifier
.397c3f		c9 aa		cmp #$aa	handle_break    CMP #KBD_SC_LSHIFT | $80    ; Is it a break LSHIFT?
.397c41		d0 0c		bne $397c4f	                BNE not_break_ls
.397c43		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.397c45		80 50		bra $397c97	                BRA clr_modifier
.397c47		c9 1d		cmp #$1d	not_make_ls     CMP #KBD_SC_LCTRL           ; Is it a make LCTRL?
.397c49		d0 0c		bne $397c57	                BNE not_make_lc
.397c4b		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.397c4d		80 3e		bra $397c8d	                BRA set_modifier
.397c4f		c9 9d		cmp #$9d	not_break_ls    CMP #KBD_SC_LCTRL | $80     ; Is it a break LCTRL?
.397c51		d0 0c		bne $397c5f	                BNE not_break_lc
.397c53		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.397c55		80 40		bra $397c97	                BRA clr_modifier
.397c57		c9 38		cmp #$38	not_make_lc     CMP #KBD_SC_LALT            ; Is it a make LALT?
.397c59		d0 0c		bne $397c67	                BNE not_make_la
.397c5b		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.397c5d		80 2e		bra $397c8d	                BRA set_modifier
.397c5f		c9 b8		cmp #$b8	not_break_lc    CMP #KBD_SC_LALT | $80      ; Is it a break LALT?
.397c61		d0 0c		bne $397c6f	                BNE not_break_la
.397c63		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.397c65		80 30		bra $397c97	                BRA clr_modifier
.397c67		c9 36		cmp #$36	not_make_la     CMP #KBD_SC_RSHIFT          ; Is it a make RSHIFT?
.397c69		d0 0c		bne $397c77	                BNE not_make_rs
.397c6b		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.397c6d		80 1e		bra $397c8d	                BRA set_modifier
.397c6f		c9 b6		cmp #$b6	not_break_la    CMP #KBD_SC_RSHIFT | $80    ; Is it a break RSHIFT?
.397c71		d0 0c		bne $397c7f	                BNE not_break_rs
.397c73		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.397c75		80 20		bra $397c97	                BRA clr_modifier
.397c77		c9 5e		cmp #$5e	not_make_rs     CMP #KBD_SC_RCTRL           ; Is it a make RCTRL?
.397c79		d0 0c		bne $397c87	                BNE not_make_rc
.397c7b		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.397c7d		80 0e		bra $397c8d	                BRA set_modifier
.397c7f		c9 de		cmp #$de	not_break_rs    CMP #KBD_SC_RCTRL | $80     ; Is it a break RCTRL?
.397c81		d0 0e		bne $397c91	                BNE not_break_rc
.397c83		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.397c85		80 10		bra $397c97	                BRA clr_modifier
.397c87		c9 5c		cmp #$5c	not_make_rc     CMP #KBD_SC_RALT            ; Is it a make RALT?
.397c89		d0 12		bne $397c9d	                BNE not_make_ra
.397c8b		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.397c8d		04 25		tsb $0f25	set_modifier    TSB #S_KBD_CONTROL.MODIFIERS,D  ; Set the indicated modifier bit
.397c8f		80 08		bra $397c99	                BRA return_null
.397c91		c9 dc		cmp #$dc	not_break_rc    CMP #KBD_SC_RALT | $80          ; Is it a break RALT?
.397c93		d0 04		bne $397c99	                BNE return_null                 ; No: we don't use any other break scan codes
.397c95		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.397c97		14 25		trb $0f25	clr_modifier    TRB #S_KBD_CONTROL.MODIFIERS,D  ; Clear the indicated modifier bit
.397c99		a9 00		lda #$00	return_null     LDA #0
.397c9b		80 55		bra $397cf2	                BRA done
.397c9d		a8		tay		not_make_ra     TAY                                     ; Use the scan code as an index...
.397c9e		c9 38		cmp #$38	                CMP #KBD_SC_PIVOT
.397ca0		90 0e		bcc $397cb0	                BLT below_38
.397ca2		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D              ; Check the NUM lock
.397ca4		89 02		bit #$02	                BIT #KBD_LOCK_NUMBER
.397ca6		f0 2a		beq $397cd2	                BEQ fetch_unmod                         ; No: translate the keys as unmodified
.397ca8		a5 25		lda $0f25	chk_num_shift   LDA #S_KBD_CONTROL.MODIFIERS,D
.397caa		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Check for a shift key being pressed
.397cac		d0 24		bne $397cd2	                BNE fetch_unmod                         ; If so: translate the keys as modified
.397cae		80 30		bra $397ce0	                BRA fetch_caps                          ; No: translate the key using the lock table
.397cb0		a5 25		lda $0f25	below_38        LDA #S_KBD_CONTROL.MODIFIERS,D
.397cb2		89 0c		bit #$0c	                BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL      ; Is either control key pressed?
.397cb4		f0 0c		beq $397cc2	                BEQ chk_capslock                        ; No: check for capslock
.397cb6		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.397cb8		f0 04		beq $397cbe	                BEQ fetch_control                       ; No: translate just based off of control
.397cba		b7 3b		lda [$0f3b],y	                LDA [#S_KBD_CONTROL.TBL_CTRL_SHIFT,D],Y ; Look up the key modfified by CTRL and SHIFT
.397cbc		80 26		bra $397ce4	                BRA chk_ansi
.397cbe		b7 2f		lda [$0f2f],y	fetch_control   LDA [#S_KBD_CONTROL.TBL_CTRL,D],Y       ; Look up the key modified by CONTROL
.397cc0		80 22		bra $397ce4	                BRA chk_ansi
.397cc2		a5 26		lda $0f26	chk_capslock    LDA #S_KBD_CONTROL.LOCKS,D              ; Check the CAPS lock
.397cc4		89 04		bit #$04	                BIT #KBD_LOCK_CAPS
.397cc6		d0 0e		bne $397cd6	                BNE chk_caps_shift                      ; Yes: check the state of the SHIFT key
.397cc8		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.397cca		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.397ccc		f0 04		beq $397cd2	                BEQ fetch_unmod                         ; No: translate just based off of control
.397cce		b7 2b		lda [$0f2b],y	fetch_shifted   LDA [#S_KBD_CONTROL.TBL_SHIFT,D],Y      ; Look up the key modified by SHIFT
.397cd0		80 12		bra $397ce4	                BRA chk_ansi
.397cd2		b7 27		lda [$0f27],y	fetch_unmod     LDA [#S_KBD_CONTROL.TBL_UNMOD,D],Y      ; Look up the unmodified key
.397cd4		80 0e		bra $397ce4	                BRA chk_ansi
.397cd6		a5 25		lda $0f25	chk_caps_shift  LDA #S_KBD_CONTROL.MODIFIERS,D
.397cd8		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.397cda		f0 04		beq $397ce0	                BEQ fetch_caps                          ; No: translate just based off of control
.397cdc		b7 37		lda [$0f37],y	                LDA [#S_KBD_CONTROL.TBL_LOCK_SHIFT,D],Y ; Look up the key modified by CAPS and SHIFT
.397cde		80 04		bra $397ce4	                BRA chk_ansi
.397ce0		b7 33		lda [$0f33],y	fetch_caps      LDA [#S_KBD_CONTROL.TBL_LOCK,D],Y       ; Look up the key modified by CAPSLOCK
.397ce2		80 00		bra $397ce4	                BRA chk_ansi
.397ce4		c9 80		cmp #$80	chk_ansi        CMP #$80                                ; Check to see if we have an ANSI escape sequence to send
.397ce6		90 0a		bcc $397cf2	                BLT done                                ; If not, just return the character
.397ce8		c9 96		cmp #$96	                CMP #$96
.397cea		b0 06		bcs $397cf2	                BGE done
.397cec		22 2e 7d 39	jsl $397d2e	                JSL KBD_ENQ_ANSI                        ; Expand and enqueue the ANSI sequence
.397cf0		a9 1b		lda #$1b	                LDA #CHAR_ESC                           ; And return the ESC key to start the sequence
.397cf2		28		plp		done            PLP
.397cf3		2b		pld		                PLD
.397cf4		18		clc		                CLC
.397cf5		6b		rtl		                RTL
.397cf6						KBD_ENQUEUE_BCD
.397cf6		08		php		                PHP
.397cf7		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397cf9		48		pha		                PHA                     ; Save the value
.397cfa		4a		lsr a		                LSR A                   ; Get the 10s digit
.397cfb		4a		lsr a		                LSR A
.397cfc		4a		lsr a		                LSR A
.397cfd		4a		lsr a		                LSR A
.397cfe		c9 00		cmp #$00	                CMP #0                  ; If it's 0, move to the 1s digit
.397d00		f0 0b		beq $397d0d	                BEQ enqueue_1
.397d02		c9 0a		cmp #$0a	                CMP #$0A                ; If it's out of range, ignore this whole call
.397d04		b0 13		bcs $397d19	                BGE done_A
.397d06		18		clc		                CLC                     ; Enqueue the tens digit
.397d07		69 30		adc #$30	                ADC #'0'
.397d09		22 a0 7a 39	jsl $397aa0	                JSL KBD_CHAR_ENQUEUE
.397d0d		68		pla		enqueue_1       PLA                     ; Enqueue the ones digit
.397d0e		29 0f		and #$0f	                AND #$0F
.397d10		18		clc		                CLC
.397d11		69 30		adc #$30	                ADC #'0'
.397d13		22 a0 7a 39	jsl $397aa0	                JSL KBD_CHAR_ENQUEUE
.397d17		28		plp		done            PLP
.397d18		6b		rtl		                RTL
.397d19		68		pla		done_A          PLA
.397d1a		80 fb		bra $397d17	                BRA done
.397d1c						KBD_BIN_TO_BCD
.397d1c		da		phx		                PHX
.397d1d		08		php		                PHP
.397d1e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397d20		aa		tax		                TAX
.397d21		a9 99		lda #$99	                LDA #$99                ; Start with -1 in BCD form
.397d23		f8		sed		                SED                     ; Switch to Decimal arithmetic
.397d24		18		clc		loop            CLC
.397d25		69 01		adc #$01	                ADC #1                  ; Add 1 with BCD arithmetic
.397d27		ca		dex		                DEX                     ; Decrement input value in X
.397d28		10 fa		bpl $397d24	                BPL loop                ; loop until input value < 0
.397d2a		d8		cld		                CLD                     ; Switch back to Binary arithmetic
.397d2b		28		plp		                PLP
.397d2c		fa		plx		                PLX
.397d2d		6b		rtl		                RTL
.397d2e						KBD_ENQ_ANSI
.397d2e		08		php		                PHP
.397d2f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397d31		c9 80		cmp #$80	                CMP #$80                        ; check to make sure the code is within range
.397d33		b0 03		bcs $397d38	                BGE chk_high_end
.397d35		82 4a 00	brl $397d82	                BRL done                        ; Out of range, just ignore it
.397d38		c9 96		cmp #$96	chk_high_end    CMP #$96
.397d3a		90 03		bcc $397d3f	                BLT save_value
.397d3c		82 43 00	brl $397d82	                BRL done                        ; Out of range, just ignore it
.397d3f		48		pha		save_value      PHA
.397d40		a9 5b		lda #$5b	                LDA #'['
.397d42		22 a0 7a 39	jsl $397aa0	                JSL KBD_CHAR_ENQUEUE
.397d46		68		pla		                PLA
.397d47		38		sec		                SEC
.397d48		e9 80		sbc #$80	                SBC #$80                ; Convert to an offset
.397d4a		aa		tax		                TAX                     ; And use it as an index to...
.397d4b		bf 84 7d 39	lda $397d84,x	                LDA @l ENCODE_CODE,X    ; Get the number
.397d4f		10 0b		bpl $397d5c	                BPL send_number         ; If MSB is not set, send the number as-is
.397d51		29 7f		and #$7f	                AND #$7F                ; Remove the MSB
.397d53		18		clc		                CLC
.397d54		69 41		adc #$41	                ADC #'A'                ; Convert to 'A' .. 'D'
.397d56		22 a0 7a 39	jsl $397aa0	                JSL KBD_CHAR_ENQUEUE    ; Enqueue the code
.397d5a		80 26		bra $397d82	                BRA done
.397d5c		22 1c 7d 39	jsl $397d1c	send_number     JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.397d60		22 f6 7c 39	jsl $397cf6	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.397d64		22 7d 7b 39	jsl $397b7d	chk_modifier    JSL KBD_GETMODS_ANSI    ; Get the modifiers
.397d68		c9 00		cmp #$00	                CMP #0                  ; Are there any?
.397d6a		f0 10		beq $397d7c	                BEQ close               ; No: close the sequence
.397d6c		48		pha		                PHA
.397d6d		a9 3b		lda #$3b	                LDA #';'                ; Enqueue the separator
.397d6f		22 a0 7a 39	jsl $397aa0	                JSL KBD_CHAR_ENQUEUE
.397d73		68		pla		                PLA
.397d74		22 1c 7d 39	jsl $397d1c	                JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.397d78		22 f6 7c 39	jsl $397cf6	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.397d7c		a9 7e		lda #$7e	close           LDA #'~'                ; Enqueue closing code
.397d7e		22 a0 7a 39	jsl $397aa0	                JSL KBD_CHAR_ENQUEUE
.397d82		28		plp		done            PLP
.397d83		6b		rtl		                RTL
>397d84		01 02 03 04 05 06		ENCODE_CODE     .byte 1, 2, 3, 4, 5, 6      ; Insert, etc...
>397d8a		80 81 82 83			                .byte $80, $81, $82, $83    ; Cursor keys
>397d8e		0b 0c 0d 0e 0f			                .byte 11, 12, 13, 14, 15    ; F1 - F5
>397d93		11 12 13 14 15			                .byte 17, 18, 19, 20, 21    ; F6 - F10
>397d98		17 18				                .byte 23, 24                ; F11 - F12
.397d9a						KBD_SETTABLE
.397d9a		48		pha		                PHA
.397d9b		8b		phb		                PHB
.397d9c		0b		phd		                PHD
.397d9d		08		php		                PHP
.397d9e		48		pha		                PHA             ; begin setdp macro
.397d9f		08		php		                PHP
.397da0		c2 20		rep #$20	                REP #$20        ; set A long
.397da2		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397da5		5b		tcd		                TCD
.397da6		28		plp		                PLP
.397da7		68		pla		                PLA             ; end setdp macro
.397da8		e2 20		sep #$20	                SEP #$20        ; set A short
.397daa		8b		phb		                PHB                 ; Get the data bank into A
.397dab		68		pla		                PLA
.397dac		c2 20		rep #$20	                REP #$20        ; set A long
.397dae		29 ff 00	and #$00ff	                AND #$00FF
.397db1		85 29		sta $0f29	                STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.397db3		85 2d		sta $0f2d	                STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.397db5		85 31		sta $0f31	                STA #S_KBD_CONTROL.TBL_CTRL+2,D
.397db7		85 35		sta $0f35	                STA #S_KBD_CONTROL.TBL_LOCK+2,D
.397db9		85 39		sta $0f39	                STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.397dbb		85 3d		sta $0f3d	                STA #S_KBD_CONTROL.TBL_CTRL_SHIFT+2,D
.397dbd		86 27		stx $0f27	                STX #S_KBD_CONTROL.TBL_UNMOD,D
.397dbf		86 2b		stx $0f2b	                STX #S_KBD_CONTROL.TBL_SHIFT,D
.397dc1		86 2f		stx $0f2f	                STX #S_KBD_CONTROL.TBL_CTRL,D
.397dc3		86 33		stx $0f33	                STX #S_KBD_CONTROL.TBL_LOCK,D
.397dc5		86 37		stx $0f37	                STX #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.397dc7		86 3b		stx $0f3b	                STX #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.397dc9		28		plp		                PLP
.397dca		2b		pld		                PLD
.397dcb		ab		plb		                PLB
.397dcc		68		pla		                PLA
.397dcd		6b		rtl		                RTL
>397dce						.align 256
>397e00		00 01 02 03 04 05 06 07		TBL_SET1        .byte $00, $01, $02, $03, $04, $05, $06, $07    ; $00 - $07
>397e08		08 09 0a 0b 0c 0d 0e 0f		                .byte $08, $09, $0A, $0B, $0C, $0D, $0E, $0F    ; $08 - $0F
>397e10		10 11 12 13 14 15 16 17		                .byte $10, $11, $12, $13, $14, $15, $16, $17    ; $10 - $17
>397e18		18 19 1a 1b 1c 1d 1e 1f		                .byte $18, $19, $1A, $1B, $1C, $1D, $1E, $1F    ; $18 - $1F
>397e20		20 21 22 23 24 25 26 27		                .byte $20, $21, $22, $23, $24, $25, $26, $27    ; $20 - $27
>397e28		28 29 2a 2b 2c 2d 2e 2f		                .byte $28, $29, $2A, $2B, $2C, $2D, $2E, $2F    ; $28 - $2F
>397e30		30 31 32 33 34 35 36 37		                .byte $30, $31, $32, $33, $34, $35, $36, $37    ; $30 - $37
>397e38		38 39 3a 3b 3c 3d 3e 3f		                .byte $38, $39, $3A, $3B, $3C, $3D, $3E, $3F    ; $38 - $3F
>397e40		40 41 42 43 44 45 46 47		                .byte $40, $41, $42, $43, $44, $45, $46, $47    ; $40 - $47
>397e48		48 49 4a 4b 4c 4d 4e 4f		                .byte $48, $49, $4A, $4B, $4C, $4D, $4E, $4F    ; $48 - $4F
>397e50		50 51 52 53 54 55 56 57		                .byte $50, $51, $52, $53, $54, $55, $56, $57    ; $50 - $57
>397e58		58 00 00 00 00 00 00 00		                .byte $58, $00, $00, $00, $00, $00, $00, $00    ; $58 - $5F
>397e60		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>397e68		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>397e70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>397e78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
>397e80		00 00 00 00 00 00 00 00		TBL_SET1_E0     .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $00 - $07
>397e88		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $08 - $0F
>397e90		70 00 00 00 00 00 00 00		                .byte $70, $00, $00, $00, $00, $00, $00, $00    ; $10 - $17
>397e98		00 71 00 00 6d 5e 00 00		                .byte $00, $71, $00, $00, $6D, $5E, $00, $00    ; $18 - $1F
>397ea0		72 00 6e 00 6f 00 00 00		                .byte $72, $00, $6E, $00, $6F, $00, $00, $00    ; $20 - $27
>397ea8		00 00 00 00 00 00 73 00		                .byte $00, $00, $00, $00, $00, $00, $73, $00    ; $28 - $2F
>397eb0		74 00 00 00 00 6c 00 00		                .byte $74, $00, $00, $00, $00, $6C, $00, $00    ; $30 - $37
>397eb8		5c 00 00 00 00 00 00 00		                .byte $5C, $00, $00, $00, $00, $00, $00, $00    ; $38 - $3F
>397ec0		00 00 00 00 00 00 61 63		                .byte $00, $00, $00, $00, $00, $00, $61, $63    ; $40 - $47
>397ec8		68 64 00 69 00 6b 00 66		                .byte $68, $64, $00, $69, $00, $6B, $00, $66    ; $48 - $4F
>397ed0		6a 67 62 65 00 00 00 00		                .byte $6A, $67, $62, $65, $00, $00, $00, $00    ; $50 - $57
>397ed8		00 00 00 00 00 5d 00 00		                .byte $00, $00, $00, $00, $00, $5D, $00, $00    ; $58 - $5F
>397ee0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>397ee8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>397ef0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>397ef8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
.397f00						KBD_STATE_MACH
>397f00		00 e0 01 00			                .byte KBD_STATE_IDLE, $E0, KBD_STATE_E0, 0                          ; IDLE =[E0]=> STATE_E0
>397f04		00 e1 04 00			                .byte KBD_STATE_IDLE, $E1, KBD_STATE_E1, 0                          ; IDLE =[E1]=> STATE_E1
>397f08		00 00 00 01			                .byte KBD_STATE_IDLE, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_BASE       ; IDLE =[default]=> IDLE / emit(TBL_SET1[x])
>397f0c		01 2a 02 00			                .byte KBD_STATE_E0, $2A, KBD_STATE_E02A, 0                          ; STATE_E0 =[2A]=> STATE_E02A
>397f10		01 b7 09 00			                .byte KBD_STATE_E0, $B7, KBD_STATE_E0B7, 0                          ; STATE_E0 =[B7]=> STATE_E0B7
>397f14		01 00 00 02			                .byte KBD_STATE_E0, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_E0           ; STATE_E0 =[default]=> IDLE, emit(TBL_SET1_E0[x])
>397f18		02 e0 03 00			                .byte KBD_STATE_E02A, $E0, KBD_STATE_E02AE0, 0                      ; STATE_E02A =[E0]=> STATE_E02AE0
>397f1c		02 00 00 00			                .byte KBD_STATE_E02A, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E02A =[default]=> IDLE, ignore(x)
>397f20		03 37 00 60			                .byte KBD_STATE_E02AE0, $37, KBD_STATE_IDLE, $60                    ; STATE_E02AE0 =[37]=> IDLE, emit(make{PrintScreen})
>397f24		03 00 00 00			                .byte KBD_STATE_E02AE0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E02AE0 =[default]=> IDLE, ignore(x)
>397f28		09 e0 0a 00			                .byte KBD_STATE_E0B7, $E0, KBD_STATE_E0B7E0, 0                      ; STATE_E0B7 =[E0]=> STATE_E0B7E0
>397f2c		09 00 00 00			                .byte KBD_STATE_E0B7, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E0B7 =[default]=> IDLE, ignore(x)
>397f30		0a aa 00 e0			                .byte KBD_STATE_E0B7E0, $AA, KBD_STATE_IDLE, $E0                    ; STATE_E0B7E0 =[AA]=> IDLE, emit(break{PrintScreen})
>397f34		0a 00 00 00			                .byte KBD_STATE_E0B7E0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E0B7E0 =[default]=> IDLE, ignore(x)
>397f38		04 1d 05 00			                .byte KBD_STATE_E1, $1D, KBD_STATE_E11D, 0                          ; STATE_E1 =[1D]=> STATE_E11D
>397f3c		04 00 00 00			                .byte KBD_STATE_E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE            ; STATE_E1 =[default]=> IDLE, ignore(x)
>397f40		05 45 06 00			                .byte KBD_STATE_E11D, $45, KBD_STATE_E11D45, 0                      ; STATE_E11D =[45]=> STATE_E11D45
>397f44		05 00 00 00			                .byte KBD_STATE_E11D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E11D =[default]=> IDLE, ignore(x)
>397f48		06 e1 07 00			                .byte KBD_STATE_E11D45, $E1, KBD_STATE_E11D45E1, 0                  ; STATE_E11D45 =[E1]=> STATE_E11D45E1
>397f4c		06 00 00 00			                .byte KBD_STATE_E11D45, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E11D45 =[default]=> IDLE, ignore(x)
>397f50		07 9d 08 00			                .byte KBD_STATE_E11D45E1, $9D, KBD_STATE_E11D45E19D, 0              ; STATE_E11D45E1 =[9D]=> STATE_E11D45E19D
>397f54		07 00 00 00			                .byte KBD_STATE_E11D45E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE      ; STATE_E11D45E1 =[default]=> IDLE, ignore(x)
>397f58		08 c5 00 61			                .byte KBD_STATE_E11D45E19D, $C5, KBD_STATE_IDLE, $61                ; STATE_E11D45E19D =[C5]=> IDLE, emit(make{Pause})
>397f5c		08 00 00 00			                .byte KBD_STATE_E11D45E19D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE    ; STATE_E11D45E19D =[default]=> IDLE, ignore(x)
>397f60		ff ff ff ff			                .byte $FF, $FF, $FF, $FF                                            ; End of state machine
>397f64						.align 256
>398000		00 1b 31 32 33 34 35 36		SC_US_UNMOD     .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>398008		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>398010		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>398018		6f 70 5b 5d 0d 00 61 73		                .byte 'o', 'p', '[', ']', $0D, $00, 'a', 's'                        ; $18 - $1F
>398020		64 66 67 68 6a 6b 6c 3b		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';'                        ; $20 - $27
>398028		27 60 00 5c 7a 78 63 76		                .byte $27, '`', $00, '\', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>398030		62 6e 6d 2c 2e 2f 00 2a		                .byte 'b', 'n', 'm', ',', '.', '/', $00, '*'                        ; $30 - $37
>398038		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>398040		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>398048		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>398050		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>398058		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>398060		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>398068		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>398070		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>398078		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>398080		00 1b 21 40 23 24 25 5e		SC_US_SHFT      .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>398088		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>398090		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>398098		4f 50 7b 7d 0a 00 41 53		                .byte 'O', 'P', '{', '}', $0A, $00, 'A', 'S'                        ; $18 - $1F
>3980a0		44 46 47 48 4a 4b 4c 3a		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':'                        ; $20 - $27
>3980a8		22 7e 00 7c 5a 58 43 56		                .byte $22, '~', $00, '|', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>3980b0		42 4e 4d 3c 3e 3f 00 00		                .byte 'B', 'N', 'M', '<', '>', '?', $00, $00                        ; $30 - $37
>3980b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>3980c0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>3980c8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>3980d0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>3980d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>3980e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>3980e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>3980f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>3980f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>398100		00 1b 31 32 33 34 35 1e		SC_US_CTRL      .byte $00, $1B, '1', '2', '3', '4', '5', $1E                        ; $00 - $07
>398108		37 38 39 30 1f 3d 08 09		                .byte '7', '8', '9', '0', $1F, '=', $08, $09                        ; $08 - $0F
>398110		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>398118		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>398120		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>398128		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>398130		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>398138		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>398140		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>398148		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>398150		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>398158		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>398160		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>398168		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>398170		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>398178		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>398180		00 1b 31 32 33 34 35 36		SC_US_LOCK      .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>398188		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>398190		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>398198		4f 50 5b 5d 0d 00 41 53		                .byte 'O', 'P', '[', ']', $0D, $00, 'A', 'S'                        ; $18 - $1F
>3981a0		44 46 47 48 4a 4b 4c 3b		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';'                        ; $20 - $27
>3981a8		27 60 00 5c 5a 58 43 56		                .byte $27, '`', $00, '\', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>3981b0		42 4e 4d 2c 2e 2f 00 00		                .byte 'B', 'N', 'M', ',', '.', '/', $00, $00                        ; $30 - $37
>3981b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>3981c0		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>3981c8		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>3981d0		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>3981d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>3981e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>3981e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>3981f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>3981f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>398200		00 1b 21 40 23 24 25 5e		SC_US_LOCK_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>398208		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>398210		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>398218		6f 70 7b 7d 0a 00 61 73		                .byte 'o', 'p', '{', '}', $0A, $00, 'a', 's'                        ; $18 - $1F
>398220		64 66 67 68 6a 6b 6c 3a		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ':'                        ; $20 - $27
>398228		22 7e 00 7c 7a 78 63 76		                .byte $22, '~', $00, '|', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>398230		62 6e 6d 3c 3e 3f 00 00		                .byte 'b', 'n', 'm', '<', '>', '?', $00, $00                        ; $30 - $37
>398238		00 20 00 00 00 00 00 00		                .byte $00, ' ', $00, $00, $00, $00, $00, $00                        ; $38 - $3F
>398240		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>398248		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>398250		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>398258		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>398260		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>398268		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>398270		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>398278		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>398280		00 1b 21 40 23 24 25 5e		SC_US_CTRL_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>398288		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>398290		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>398298		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>3982a0		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>3982a8		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>3982b0		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>3982b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>3982c0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>3982c8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>3982d0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>3982d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>3982e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>3982e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>3982f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>3982f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/mouse_driver.asm

.398300		48		pha		IINITMOUSE      PHA
.398301		da		phx		                PHX
.398302		0b		phd		                PHD
.398303		08		php		                PHP
.398304		e2 20		sep #$20	                SEP #$20        ; set A short
.398306		c2 10		rep #$10	                REP #$10        ; set X long
.398308		18		clc		                CLC
.398309		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.39830c						DO_CMD_A9_AGAIN
.39830c		20 98 0d	jsr $390d98	                JSR Poll_Inbuf
.39830f		a9 a9		lda #$a9	                LDA #$A9                ; Tests second PS2 Channel
.398311		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF
.398315		20 97 83	jsr $398397	                JSR Poll_Outbuf_Mouse_TimeOut ;
.398318		af 03 18 af	lda $af1803					LDA KBD_OUT_BUF		    ; Clear the Output buffer
.39831c		c9 00		cmp #$00	                CMP #$00
.39831e		d0 ec		bne $39830c	                BNE DO_CMD_A9_AGAIN
.398320		a9 f6		lda #$f6	                LDA #$F6                ;Tell the mouse to use default settings
.398322		20 6b 83	jsr $39836b	                JSR MOUSE_WRITE
.398325		20 80 83	jsr $398380	                JSR MOUSE_READ
.398328		a9 e8		lda #$e8	                LDA #$E8
.39832a		20 6b 83	jsr $39836b	                JSR MOUSE_WRITE
.39832d		20 80 83	jsr $398380	                JSR MOUSE_READ
.398330		a9 00		lda #$00	                LDA #$00
.398332		20 6b 83	jsr $39836b	                JSR MOUSE_WRITE
.398335		20 80 83	jsr $398380	                JSR MOUSE_READ
.398338		a9 f4		lda #$f4	                LDA #$F4                ; Enable the Mouse
.39833a		20 6b 83	jsr $39836b	                JSR MOUSE_WRITE
.39833d		20 80 83	jsr $398380	                JSR MOUSE_READ
.398340		a9 00		lda #$00	                LDA #$00
.398342		8f e0 00 00	sta $0000e0	                STA MOUSE_PTR
.398346		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.39834a		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.39834c		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.398350		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.398354		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.398356		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.39835a		c2 10		rep #$10	                REP #$10        ; set X long
.39835c		a2 cd 86	ldx #$86cd	                LDX #<>Success_ms_init
.39835f		80 03		bra $398364	                BRA InitMsSuccess
.398361		a2 04 87	ldx #$8704	initms_loop_out LDX #<>Failed_ms_init
.398364						InitMsSuccess
.398364		c2 20		rep #$20	                REP #$20        ; set A long
.398366		28		plp		                PLP
.398367		2b		pld		                PLD
.398368		fa		plx		                PLX
.398369		68		pla		                PLA
.39836a		6b		rtl		                RTL
.39836b						MOUSE_WRITE
.39836b		e2 20		sep #$20	                SEP #$20        ; set A short
.39836d		48		pha		                PHA
.39836e		20 98 0d	jsr $390d98	                JSR Poll_Inbuf          ; Test bit $01 (if 2, Full)
.398371		a9 d4		lda #$d4	                LDA #$D4
.398373		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF         ; KBD_CMD_BUF		= $AF1064
.398377		20 98 0d	jsr $390d98	                JSR Poll_Inbuf
.39837a		68		pla		                PLA
.39837b		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF        ; KBD_DATA_BUF	= $AF1060
.39837f		60		rts		                RTS
.398380						MOUSE_READ
.398380		e2 20		sep #$20	                SEP #$20        ; set A short
.398382		20 8a 83	jsr $39838a	                JSR Poll_Outbuf_Mouse   ; Test bit $01 (if 1, Full)
.398385		af 03 18 af	lda $af1803	                LDA KBD_INPT_BUF        ; KBD_INPT_BUF	= $AF1060
.398389		60		rts		                RTS
.39838a						Poll_Outbuf_Mouse
.39838a		e2 20		sep #$20	                SEP #$20        ; set A short
.39838c		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.398390		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.398392		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.398394		d0 f4		bne $39838a	                BNE Poll_Outbuf_Mouse
.398396		60		rts		                RTS
.398397						Poll_Outbuf_Mouse_TimeOut
.398397		e2 20		sep #$20	                SEP #$20        ; set A short
.398399		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.39839d		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.39839f		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.3983a1		f0 08		beq $3983ab	                BEQ Poll_OutbufWeAreDone
.3983a3		ca		dex		                DEX
.3983a4		e0 00 00	cpx #$0000	                CPX #$0000
.3983a7		d0 ee		bne $398397	                BNE Poll_Outbuf_Mouse_TimeOut
.3983a9		80 b6		bra $398361	                BRA initms_loop_out
.3983ab						Poll_OutbufWeAreDone:
.3983ab		60		rts		                RTS
.3983ac						MOUSE_INTERRUPT
.3983ac		08		php		                PHP
.3983ad						                setasx
.3983ad		af e0 00 00	lda $0000e0	                LDA @l MOUSE_PTR                ; Get the # of the mouse byte to write
.3983b1		c9 03		cmp #$03	                CMP #3                          ; Check that mouse pointer is in bounds
.3983b3		90 02		bcc $3983b7	                BLT mouse_ptr_ok                ; If it is: fetch the byte
.3983b5		a9 00		lda #$00	                LDA #0                          ; If not, reset it
.3983b7		aa		tax		mouse_ptr_ok    TAX                             ; into X
.3983b8		af 03 18 af	lda $af1803	                LDA @l KBD_INPT_BUF             ; Get the byte from the PS/2 interface
.3983bc		9f 06 07 af	sta $af0706,x	                STA @l MOUSE_PTR_BYTE0, X       ; Store it into the correct Vicky register
.3983c0		e8		inx		                INX                             ; Move to the next byte
.3983c1		e0 03 00	cpx #$0003	                CPX #$03                        ; Have we written 3 bytes?
.3983c4		d0 23		bne $3983e9	                BNE EXIT_FOR_NEXT_VALUE         ; No: return and wait for the next mouse interrupt
.3983c6		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.3983ca		8f e1 00 00	sta $0000e1	                STA @l MOUSE_POS_X_LO
.3983ce		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.3983d2		8f e2 00 00	sta $0000e2	                STA @l MOUSE_POS_X_HI
.3983d6		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.3983da		8f e3 00 00	sta $0000e3	                STA @l MOUSE_POS_Y_LO
.3983de		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.3983e2		8f e4 00 00	sta $0000e4	                STA @l MOUSE_POS_Y_HI
.3983e6		a2 00 00	ldx #$0000	                LDX #$00                        ; Reset our state machine to the beginning
.3983e9						EXIT_FOR_NEXT_VALUE
.3983e9		8a		txa		                TXA                             ; Save our next byte position (state)
.3983ea		8f e0 00 00	sta $0000e0	                STA @l MOUSE_PTR
.3983ee		28		plp		                PLP
.3983ef		6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.3983f0						    KERNEL_DATA
>3983f0		20 20 20 20 0b 0c 0b 0c		    greet_msg   .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " UU    UU   +" ,$0D
>3983f8		0b 0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 20
>398408		20 20 2b 0d
>39840c		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU   +",$0D
>398414		0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 20 20
>398424		20 2b 0d
>398427		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU +++++",$0D
>39842f		0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 20 2b 2b
>39843f		2b 2b 2b 0d
>398443		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU   +",$0D
>39844b		0c 0b 0c 20 55 55 20 20 20 20 55 55 20 20 20 2b
>39845b		0d
>39845c		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UUUUUUUU   +",$0D
>398464		0b 0c 20 55 55 55 55 55 55 55 55 20 20 20 2b 0d
>398474		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX U+ -- 3,670,016 Bytes Free", $0D
>39847c		45 4e 49 58 20 55 2b 20 2d 2d 20 33 2c 36 37 30
>39848c		2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65 0d
>39849c		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel Date: March 13th, 2021",$0D
>3984a4		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>3984b4		6e 65 6c 20 44 61 74 65 3a 20 4d 61 72 63 68 20
>3984c4		31 33 74 68 2c 20 32 30 32 31 0d

;******  Processing file: src\version.asm

>3984cf		76 30 2e 34 2e 30 2d 61		.text "v0.4.0-alpha+68 (2021-05-08)"
>3984d7		6c 70 68 61 2b 36 38 20 28 32 30 32 31 2d 30 35
>3984e7		2d 30 38 29

;******  Return to file: src\kernel.asm

>3984eb		0d 00				                .text $0D,$00
>3984ed		90 90 90 90 90 90 d0 d0		  greet_clr_line1 .text $90, $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>3984f5		b0 b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398505		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398515		f0 f0
>398517		90 90 90 90 90 d0 d0 b0		  greet_clr_line2 .text $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>39851f		b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>39852f		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>39853f		f0 f0
>398541		90 90 90 90 d0 d0 b0 b0		  greet_clr_line3 .text $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>398549		a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398559		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398569		f0 f0
>39856b		90 90 90 d0 d0 b0 b0 a0		  greet_clr_line4 .text $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>398573		a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398583		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398593		f0 f0
>398595		90 90 d0 d0 b0 b0 a0 a0		  greet_clr_line5 .text $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>39859d		e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>3985ad		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>3985bd		f0 f0
>3985bf		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>3985c3		00 00 80 ff			                .text $00, $00, $80, $FF
>3985c7		00 80 00 ff			                .text $00, $80, $00, $FF
>3985cb		80 00 00 ff			                .text $80, $00, $00, $FF
>3985cf		00 80 80 ff			                .text $00, $80, $80, $FF
>3985d3		80 80 00 ff			                .text $80, $80, $00, $FF
>3985d7		80 00 80 ff			                .text $80, $00, $80, $FF
>3985db		80 80 80 ff			                .text $80, $80, $80, $FF
>3985df		00 45 ff ff			                .text $00, $45, $FF, $FF
>3985e3		13 45 8b ff			                .text $13, $45, $8B, $FF
>3985e7		00 00 20 ff			                .text $00, $00, $20, $FF
>3985eb		00 20 00 ff			                .text $00, $20, $00, $FF
>3985ef		20 00 00 ff			                .text $20, $00, $00, $FF
>3985f3		20 20 20 ff			                .text $20, $20, $20, $FF
>3985f7		40 40 40 ff			                .text $40, $40, $40, $FF
>3985fb		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>3985ff		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>398603		00 00 80 ff			                .text $00, $00, $80, $FF
>398607		00 80 00 ff			                .text $00, $80, $00, $FF
>39860b		80 00 00 ff			                .text $80, $00, $00, $FF
>39860f		00 20 20 ff			                .text $00, $20, $20, $FF
>398613		20 20 00 ff			                .text $20, $20, $00, $FF
>398617		20 00 20 ff			                .text $20, $00, $20, $FF
>39861b		20 20 20 ff			                .text $20, $20, $20, $FF
>39861f		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>398623		13 45 8b ff			                .text $13, $45, $8B, $FF
>398627		00 00 20 ff			                .text $00, $00, $20, $FF
>39862b		00 20 00 ff			                .text $00, $20, $00, $FF
>39862f		40 00 00 ff			                .text $40, $00, $00, $FF
>398633		10 10 10 ff			                .text $10, $10, $10, $FF
>398637		40 40 40 ff			                .text $40, $40, $40, $FF
>39863b		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>39863f		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>398647		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>398657		00
>398658		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>398660		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>398670		00
>398671		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>398679		20 45 78 65 63 75 74 65 64 2e 0d 00
>398685		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>39868d		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>39869d		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>3986a5		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>3986b5		64 2e 2e 2e 0d 00
>3986bb		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>3986c3		20 50 72 65 73 65 6e 74 0d 00
>3986cd		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>3986d5		65 73 65 6e 74 0d 00
>3986dc		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>3986e4		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>3986f4		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>398704		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>39870c		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>39871c		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>398729		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>398731		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>39873d		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>398745		54 55 52 45 20 46 4f 55 4e 44 2e 00
>398751		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>398759		45 44 2e 00
>39875d		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>398765		47 20 42 4d 50 20 50 41 52 53 45 52 00
>398772		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>39877a		50 72 65 73 65 6e 74 3a 00
>398783		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>39878b		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>39879b		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>3987a9		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>3987b1		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>3987c1		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>3987ce		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>3987d6		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>3987e6		72 64 2e 00
>3987ea		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>3987f2		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>398802		49 44 45 20 64 72 69 76 65 2e 00
>39880d		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>398815		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>398825		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>398833		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>39883b		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>39884a		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>398852		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>398861		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>398869		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>398879		2e 2e 00
>39887c		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>398884		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>39888c		52 4f 52 00
>398890		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>398898		38 39 41 42 43 44 45 46 00
>3988a1						.align 256
>398900		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398908		37 38 39 30 2d 3d 08 09
>398910		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>398918		6f 70 5b 5d 0d 00 61 73
>398920		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>398928		27 60 00 5c 7a 78 63 76
>398930		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>398938		00 20 00 81 82 83 84 85
>398940		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>398948		11 00 00 9d 00 1d 00 00
>398950		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>398958		8c 00 00 00 00 00 00 00
>398960		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398968		00 00 00 00 00 00 00 00
>398970		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398978		00 00 00 00 00 00 00 00
>398980		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>398988		26 2a 28 29 5f 2b 08 09
>398990		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>398998		4f 50 7b 7d 0d 00 41 53
>3989a0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>3989a8		22 7e 00 7c 5a 58 43 56
>3989b0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3989b8		00 20 00 00 00 00 00 00
>3989c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3989c8		00 00 00 00 00 00 00 00
>3989d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3989d8		00 00 00 00 00 00 00 00
>3989e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3989e8		00 00 00 00 00 00 00 00
>3989f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3989f8		00 00 00 00 00 00 00 00
>398a00		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398a08		37 38 39 30 2d 3d 08 09
>398a10		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>398a18		0f 10 5b 5d 0d 00 01 13
>398a20		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>398a28		27 00 00 5c 1a 18 03 16
>398a30		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>398a38		00 20 00 00 00 00 00 00
>398a40		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>398a48		00 00 00 00 00 00 00 00
>398a50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398a58		00 00 00 00 00 00 00 00
>398a60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398a68		00 00 00 00 00 00 00 00
>398a70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398a78		00 00 00 00 00 00 00 00
>398a80		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398a88		37 38 39 30 2d 3d 08 09
>398a90		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>398a98		6f 70 5b 5d 0d 00 61 73
>398aa0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>398aa8		27 60 00 5c 7a 78 63 76
>398ab0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>398ab8		00 20 00 00 00 00 00 00
>398ac0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>398ac8		00 00 00 00 00 00 00 00
>398ad0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398ad8		00 00 00 00 00 00 00 00
>398ae0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398ae8		00 00 00 00 00 00 00 00
>398af0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398af8		00 00 00 00 00 00 00 00
>398b00		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398b08		37 38 39 30 2d 3d 08 09
>398b10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>398b18		6f 70 5b 5d 0d 00 61 73
>398b20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>398b28		27 60 00 5c 7a 78 63 76
>398b30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>398b38		00 20 00 00 00 00 00 00
>398b40		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>398b48		00 00 00 00 00 00 00 00
>398b50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398b58		00 00 00 00 00 00 00 00
>398b60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398b68		00 00 00 00 00 00 00 00
>398b70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398b78		00 00 00 00 00 00 00 00
>398b80		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>398b88		00 00 00 00 00 00 00 00
>398b90		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>398b98		00 00 00 00 00 00 00 00
>398ba0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>398ba8		00 00 00 00 00 00 00 00
>398bb0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>398bb8		00 00 00 00 00 00 00 00
>398bc0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>398bc8		11 00 00 9d 00 1d 00 05
>398bd0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398bd8		00 00 00 00 00 00 00 00
>398be0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398be8		00 00 00 00 00 00 00 00
>398bf0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398bf8		00 00 00 00 00 00 00 00
>398c00						.align 256
>398c00		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>398c08		34 37 3a 3d 3f 41 44 46
>398c10		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>398c18		57 58 5a 5b 5d 5e 60 61
>398c20		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>398c28		6d 6f 70 71 72 73 75 76
>398c30		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>398c38		80 81 82 83 84 85 86 87
>398c40		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>398c48		8f 90 91 92 93 93 94 95
>398c50		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>398c58		9d 9e 9e 9f a0 a1 a2 a2
>398c60		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>398c68		a9 aa ab ab ac ad ae ae
>398c70		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>398c78		b5 b5 b6 b7 b7 b8 b9 b9
>398c80		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>398c88		bf c0 c0 c1 c2 c2 c3 c4
>398c90		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>398c98		c9 ca ca cb cb cc cd cd
>398ca0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>398ca8		d2 d3 d4 d4 d5 d5 d6 d6
>398cb0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>398cb8		db dc dc dd de de df df
>398cc0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>398cc8		e4 e4 e5 e5 e6 e6 e7 e7
>398cd0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>398cd8		ec ec ed ed ee ee ef ef
>398ce0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>398ce8		f4 f4 f5 f5 f6 f6 f7 f7
>398cf0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>398cf8		fb fc fc fd fd fe fe ff
>398d00						.align 256
>398d00		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>398d08		25 27 2a 2c 2e 30 32 34
>398d10		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>398d18		44 46 47 49 4a 4c 4d 4f
>398d20		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>398d28		5b 5c 5d 5e 60 61 62 63
>398d30		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>398d38		6d 6e 70 71 72 73 74 75
>398d40		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>398d48		7e 7f 80 81 82 83 84 84
>398d50		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>398d58		8d 8e 8e 8f 90 91 92 93
>398d60		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>398d68		9a 9b 9c 9d 9e 9f 9f a0
>398d70		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>398d78		a7 a8 a9 aa aa ab ac ad
>398d80		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>398d88		b3 b4 b5 b6 b6 b7 b8 b8
>398d90		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>398d98		bf bf c0 c1 c2 c2 c3 c4
>398da0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>398da8		ca ca cb cc cc cd ce ce
>398db0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>398db8		d4 d5 d6 d6 d7 d7 d8 d9
>398dc0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>398dc8		de df e0 e0 e1 e1 e2 e3
>398dd0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>398dd8		e8 e9 e9 ea ea eb ec ec
>398de0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>398de8		f1 f2 f3 f3 f4 f4 f5 f5
>398df0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>398df8		fb fb fc fc fd fd fe ff
>398e00						.align 256
>398e00		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>398e08		83 dd ce 39 cd c5 3b 15
>398e10		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>398e18		87 12 31 65 89 27 88 42
>398e20		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>398e28		94 ce 56 ec fe da 58 c9
>398e30		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>398e38		d0 10 2c b2 4b ea 32 61
>398e40		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>398e48		a1 e6 ca 2d b3 ce b0 79
>398e50		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>398e58		5f e3 fb bd 15 2e be f5
>398e60		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>398e68		8d 8f 2c 80 0a 5e 99 36
>398e70		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>398e78		13 52 44 2f e3 ef 44 a2
>398e80		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>398e88		be 23 02 58 0a 52 5e b4
>398e90		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>398e98		d5 cf 3e df c4 9e da bb
>398ea0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>398ea8		77 7d b1 3b 4a 68 35 6e
>398eb0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>398eb8		b5 8f 44 63 55 6f e1 50
>398ec0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>398ec8		57 74 b9 bd 05 14 50 eb
>398ed0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>398ed8		44 bc ec db 22 58 fc be
>398ee0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>398ee8		24 aa 82 11 5c 9f 43 4d
>398ef0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>398ef8		3e 3d 66 7e 0a 1c 6b 74
>398f00						.align 16
>398f00		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>398f08		01 01 01 00 00 00 00 00
>398f10		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>398f18		ff ff ff 01 00 00 00 00
>398f20		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>398f28		01 55 ff ff 01 00 00 00
>398f30		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>398f38		ff ff ff ff 01 00 00 00
>398f40		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>398f48		ff ff 01 ff ff 01 00 00
>398f50		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>398f58		01 ff ff 01 ff 01 00 00
>398f60		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>398f68		ff 01 ff ff ff 01 00 00
>398f70		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>398f78		ff ff ff ff ff 01 01 00
>398f80		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>398f88		ff ff ff ff 01 ff ff 01
>398f90		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>398f98		ff ff ff ff ff ff ff 01
>398fa0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>398fa8		55 55 01 ff ff 55 01 00
>398fb0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>398fb8		01 01 55 ff 55 01 00 00
>398fc0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>398fc8		01 55 55 55 01 00 00 00
>398fd0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>398fd8		01 55 55 01 00 00 00 00
>398fe0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>398fe8		00 01 01 00 00 00 00 00
>398ff0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>398ff8		00 00 00 00 00 00 00 00
>3a0000		5c ba 88 3a 5c c9 6e 3a		        .binary "binaries/basic816_3A0000.bin"
>3a0008		5c 84 26 3a 5c 27 02 3a 5c 58 00 3a 5c b8 00 3a
>3a0018		5c 8d 03 3a 5c cb 01 3a 5c e6 01 3a 5c ed 01 3a
>3a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>3a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>3a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>3a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078		0d d0 03 4c b1 00 c9 08 d0 1a e0 00 00 f0 ed da
>3a0088		bf 01 4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0
>3a0098		fa ca 80 0e c9 20 90 d4 9f 00 4c 00 e8 20 18 00
>3a00a8		80 ca a9 08 20 18 00 80 c3 a9 00 20 1c 00 28 60
>3a00b8		22 4c 10 00 60 08 e2 30 48 a9 1b 20 18 00 a9 5b
>3a00c8		20 18 00 68 20 18 00 28 60 08 c2 20 3b 38 e9 04
>3a00d8		00 1b e2 20 a9 00 83 02 83 03 83 04 20 14 00 c9
>3a00e8		00 f0 f9 83 01 a3 02 d0 33 a3 01 c9 08 d0 0a 20
>3a00f8		18 00 a9 50 20 bd 00 80 e3 c9 0d f0 0a c9 1b d0
>3a0108		06 a9 01 83 02 80 d5 20 18 00 a3 01 85 0c c2 20
>3a0118		3b 18 69 04 00 1b e2 20 a5 0c 28 60 c9 01 d0 10
>3a0128		a3 01 c9 5b f0 03 82 ab ff a9 02 83 02 82 ac ff
>3a0138		c9 02 d0 29 a3 01 c9 41 90 0c c9 45 b0 08 a3 01
>3a0148		20 bd 00 82 8e ff c9 30 90 10 c9 3a b0 0c 38 e9
>3a0158		30 83 03 a9 03 83 02 82 82 ff 82 77 ff c9 03 d0
>3a0168		a9 a3 01 c9 30 90 1b c9 3a b0 17 a3 03 0a 85 0c
>3a0178		0a 0a 18 65 0c a3 01 38 e9 30 18 65 0c 83 03 82
>3a0188		5a ff c9 7e f0 03 82 4b ff a3 03 c9 02 f0 07 c9
>3a0198		03 f0 07 82 3e ff a9 40 80 02 a9 50 20 bd 00 82
>3a01a8		32 ff 08 e2 20 af 00 00 af 89 3c f0 08 09 03 8f
>3a01b8		00 00 af 80 0c 09 01 8f 00 00 af a9 00 22 3c 10
>3a01c8		00 28 60 08 e2 20 c9 00 f0 08 af 10 00 af 09 01
>3a01d8		80 06 af 10 00 af 29 fe 8f 10 00 af 28 60 08 22
>3a01e8		84 10 00 28 60 48 da 5a 0b 08 e2 20 c2 10 a2 00
>3a01f8		00 a9 20 9f 00 a0 af af 1e 00 00 9f 00 c0 af e8
>3a0208		e0 00 20 d0 ec 08 c2 20 48 a9 00 00 5b 68 28 a2
>3a0218		00 00 a0 00 00 22 84 10 00 28 2b 7a fa 68 60 da
>3a0228		5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 af
>3a0238		0c 00 00 85 08 e2 20 af 0e 00 00 c2 20 29 ff 00
>3a0248		85 0a af 11 00 00 8f 08 01 00 af 1c 00 00 3a 8f
>3a0258		0a 01 00 18 a5 08 6f 0c 01 00 85 08 a5 0a 69 00
>3a0268		00 85 0a e2 20 af 0f 00 00 85 8f a0 00 00 a2 00
>3a0278		00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0 f4 ca bf 00
>3a0288		4f 00 c9 20 d0 09 a9 00 9f 00 4f 00 ca 10 ef 28
>3a0298		2b 7a fa 60 e2 20 20 e7 02 a9 48 8f 0f 00 00 a9
>3a02a8		34 8f 13 00 00 a9 20 8f 08 00 af 8f 09 00 af a2
>3a02b8		00 00 a9 00 9f 18 f0 3a e8 e0 40 00 d0 f6 a9 80
>3a02c8		8f b4 08 00 e2 20 a9 00 8f 89 0f 00 a9 00 8f 00
>3a02d8		02 af 8f 0c 02 af 8f 18 02 af 8f 24 02 af 60 08
>3a02e8		e2 20 af 0e 08 af 09 08 8f 0e 08 af af 00 08 af
>3a02f8		8f 84 e8 af af 02 08 af 8f 85 e8 af a9 03 8f 86
>3a0308		e8 af af 0e 08 af 29 f7 8f 0e 08 af ea ea ea a9
>3a0318		01 8f 86 e8 af 28 60 08 e2 20 48 48 a9 00 22 3c
>3a0328		10 00 68 22 18 10 00 af 89 0f 00 29 01 d0 f8 68
>3a0338		28 60 08 e2 20 48 48 a9 01 22 3c 10 00 68 22 18
>3a0348		10 00 af 89 0f 00 29 01 d0 f8 68 28 60 08 c2 20
>3a0358		48 e2 20 a9 0d 20 18 00 c2 20 68 28 60 08 22 78
>3a0368		10 00 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a0378		e2 20 a5 b6 1a 85 b6 cf 13 00 00 90 05 20 14 00
>3a0388		64 b6 2b 28 60 da 5a 0b 08 08 c2 20 48 a9 00 08
>3a0398		5b 68 28 e2 20 c2 10 8f b5 08 00 af b4 08 00 29
>3a03a8		20 f0 07 af b5 08 00 20 28 00 af b4 08 00 29 80
>3a03b8		f0 07 af b5 08 00 20 1f 03 af b4 08 00 29 40 f0
>3a03c8		14 af b5 08 00 20 3a 03 af b5 08 00 c9 0d d0 05
>3a03d8		a9 0a 20 3a 03 28 2b 7a fa 60 08 e2 20 bd 00 00
>3a03e8		f0 06 20 18 00 e8 80 f5 28 60 08 c2 20 48 48 4a
>3a03f8		4a 4a 4a 4a 4a 4a 4a 20 0c 04 68 29 ff 00 20 0c
>3a0408		04 68 28 60 08 c2 20 48 e2 20 48 4a 4a 4a 4a 20
>3a0418		23 04 68 20 23 04 c2 20 68 28 60 08 c2 30 da 29
>3a0428		0f 00 aa bf 00 d0 3a 20 18 00 fa 28 60 08 c2 30
>3a0438		48 da 5a 8b 0b c2 30 a3 0b 18 69 03 00 aa e2 20
>3a0448		a9 3a 48 ab bd 00 00 f0 06 20 1f 03 e8 80 f5 c2
>3a0458		30 2b ab 7a fa 68 28 60 08 e2 20 c9 5b b0 04 c9
>3a0468		41 b0 0b c9 7b b0 04 c9 61 b0 03 28 18 60 28 38
>3a0478		60 08 e2 20 c9 3a b0 04 c9 30 b0 03 28 18 60 28
>3a0488		38 60 08 e2 20 c9 3a b0 04 c9 30 b0 13 c9 67 b0
>3a0498		04 c9 61 b0 0b c9 47 b0 04 c9 41 b0 03 28 18 60
>3a04a8		28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 12 c9 67
>3a04b8		b0 04 c9 61 b0 0f c9 47 b0 04 c9 41 b0 09 28 60
>3a04c8		38 e9 30 80 f9 29 df 38 e9 37 80 f2 08 e2 20 c9
>3a04d8		7b b0 06 c9 61 90 02 29 df 28 60 08 e2 20 c2 10
>3a04e8		bd 00 00 f0 09 20 d4 04 9d 00 00 e8 80 f2 28 60
>3a04f8		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 48 06
>3a0508		23 26 25 a5 23 85 0c a5 25 85 0e 06 0c 26 0e 06
>3a0518		0c 26 0e 18 a5 23 65 0c 85 23 a5 25 65 0e 85 25
>3a0528		68 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a0538		c2 20 a5 23 8f 1a 01 00 a9 0a 00 8f 18 01 00 af
>3a0548		1c 01 00 85 23 64 25 af 1e 01 00 85 29 64 2b e2
>3a0558		20 a9 00 85 27 85 2d 2b 28 60 08 0b 08 c2 20 48
>3a0568		a9 00 08 5b 68 28 c2 20 a5 23 8f 1a 01 00 a9 64
>3a0578		00 8f 18 01 00 af 1c 01 00 85 23 64 25 af 1e 01
>3a0588		00 85 29 64 2b e2 20 a9 00 85 27 85 2d 2b 28 60
>3a0598		08 c2 20 a5 23 d0 08 a5 25 d0 04 28 e2 02 60 28
>3a05a8		c2 02 60 08 c2 30 a9 ff ff 85 23 85 25 e2 20 a9
>3a05b8		00 85 27 28 60 08 c2 30 a9 00 00 85 23 85 25 e2
>3a05c8		20 a9 00 85 27 28 60 08 e2 20 a5 27 c9 00 f0 07
>3a05d8		c9 01 d0 05 20 72 5a 28 60 08 c2 20 48 a9 00 08
>3a05e8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a05f8		20 6c 1d e2 20 dc d4 08 08 e2 20 a5 2d c9 00 f0
>3a0608		37 c9 01 d0 35 c2 20 a5 25 48 a5 23 48 c2 20 a5
>3a0618		29 85 23 a5 2b 85 25 e2 20 a9 01 85 27 20 72 5a
>3a0628		c2 20 a5 23 85 29 a5 25 85 2b e2 20 a9 00 85 2d
>3a0638		c2 20 68 85 23 68 85 25 28 60 08 c2 20 48 a9 00
>3a0648		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a0658		00 20 6c 1d e2 20 dc d4 08 08 e2 20 a5 27 c9 02
>3a0668		d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a0678		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>3a0688		dc d4 08 08 e2 20 a5 27 c9 00 f0 07 c9 01 d0 0b
>3a0698		20 72 5a c2 20 a5 25 d0 21 28 60 08 c2 20 48 a9
>3a06a8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a06b8		ff 00 20 6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00
>3a06c8		08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff
>3a06d8		00 20 6c 1d e2 20 dc d4 08 08 e2 20 a5 27 c9 00
>3a06e8		f0 07 c9 01 d0 11 20 72 5a a5 26 d0 29 a5 25 d0
>3a06f8		25 a5 24 d0 21 28 60 08 c2 20 48 a9 00 08 5b 68
>3a0708		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c
>3a0718		1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>3a0728		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>3a0738		e2 20 dc d4 08 08 e2 20 a5 27 c9 01 f0 26 c9 00
>3a0748		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a0758		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>3a0768		08 20 6c 5a 28 60 08 e2 20 a5 2d c9 01 f0 26 c9
>3a0778		00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a0788		04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc
>3a0798		d4 08 20 9f 07 28 60 c2 20 a5 25 48 a5 23 48 c2
>3a07a8		20 a5 29 85 23 a5 2b 85 25 e2 20 a9 00 85 27 20
>3a07b8		6c 5a c2 20 a5 23 85 29 a5 25 85 2b e2 20 a9 01
>3a07c8		85 2d c2 20 68 85 23 68 85 25 60 08 e2 20 a5 27
>3a07d8		c9 00 f0 23 c9 01 f0 2e 08 c2 20 48 a9 00 08 5b
>3a07e8		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>3a07f8		6c 1d e2 20 dc d4 08 a5 2d c9 00 f0 16 c9 01 d0
>3a0808		d7 20 6c 5a 80 0d a5 2d c9 01 f0 07 c9 00 d0 c8
>3a0818		20 9f 07 e2 20 a5 27 28 60 08 e2 20 a5 27 c9 02
>3a0828		d0 25 a5 2d c9 02 f0 24 08 c2 20 48 a9 00 08 5b
>3a0838		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>3a0848		6c 1d e2 20 dc d4 08 20 d3 07 a5 27 28 60 08 0b
>3a0858		08 c2 20 48 a9 00 08 5b 68 28 c2 30 64 23 64 25
>3a0868		e2 20 64 27 a7 00 c9 26 f0 44 e2 20 a7 00 20 79
>3a0878		04 90 76 20 f8 04 38 e9 30 c2 20 29 ff 00 18 65
>3a0888		23 85 23 a5 25 69 00 00 85 25 20 2b 20 80 db 08
>3a0898		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a08a8		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 20 2b
>3a08b8		20 a7 00 c9 48 f0 04 c9 68 d0 d4 20 2b 20 e2 20
>3a08c8		a7 00 20 8a 04 90 22 20 ab 04 c2 20 06 23 26 25
>3a08d8		06 23 26 25 06 23 26 25 06 23 26 25 29 ff 00 18
>3a08e8		65 23 85 23 20 2b 20 80 d5 2b 28 60 08 c2 30 a5
>3a08f8		04 f0 1c 38 a5 04 e5 1a a8 e2 20 b7 1a f0 10 c9
>3a0908		20 f0 06 c9 09 f0 02 28 60 88 c0 ff ff d0 ec a9
>3a0918		00 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a0928		a5 1a 85 00 e2 20 a5 1c 85 02 20 4c 20 a7 00 20
>3a0938		79 04 90 0c 20 56 08 c2 20 a5 23 85 d7 20 4c 20
>3a0948		c2 20 a5 00 85 1a e2 20 a5 02 85 1c 20 68 09 e2
>3a0958		20 20 d9 09 c9 00 f0 05 20 87 0b 80 f4 2b 28 60
>3a0968		08 c2 20 a5 1a 85 00 a5 1c 85 02 a2 00 00 e2 20
>3a0978		a0 00 00 e0 00 00 f0 0d b7 00 f0 53 c9 3a f0 04
>3a0988		c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0 10 c9 72 d0
>3a0998		26 b7 00 f0 3a c9 52 f0 04 c9 72 d0 1a c8 b7 00
>3a09a8		f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7 00 f0 20 c9
>3a09b8		4d f0 0a c9 6d f0 06 e8 20 2b 20 80 b3 a7 00 c9
>3a09c8		3a d0 03 20 2b 20 a9 03 85 1e a9 91 20 87 0b 28
>3a09d8		60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a09e8		7f 85 1e c2 10 20 3c 0b a5 1e d0 03 4c 7c 0a c2
>3a09f8		20 a5 1a 85 00 e2 20 a5 1c 85 02 c2 20 64 04 64
>3a0a08		06 e2 30 a0 00 b7 00 f0 da c9 91 f0 d6 c8 c4 1e
>3a0a18		90 f3 c2 10 a7 00 c9 22 d0 05 20 9e 0a 80 28 a5
>3a0a28		1e c9 03 90 19 c2 20 a5 00 c5 1a d0 08 e2 20 a5
>3a0a38		02 c5 1c f0 09 e2 20 a7 04 20 b5 4f b0 09 e2 20
>3a0a48		20 ae 0a c9 00 d0 11 c2 20 a5 00 85 04 e2 20 a5
>3a0a58		02 85 06 20 2b 20 80 a9 c9 81 d0 18 20 f4 08 c9
>3a0a68		00 f0 14 89 80 10 0b 20 28 0c c9 30 f0 04 a9 af
>3a0a78		80 02 a9 81 2b 28 60 08 c2 20 48 a9 00 08 5b 68
>3a0a88		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 6c
>3a0a98		1d e2 20 dc d4 08 08 e2 20 20 2b 20 a7 00 f0 04
>3a0aa8		c9 22 d0 f5 28 60 da 5a 08 0b 08 c2 20 48 a9 00
>3a0ab8		08 5b 68 28 c2 20 a5 04 d0 0a e2 20 a5 04 d0 04
>3a0ac8		a9 00 80 0a e2 20 a7 04 20 b5 4f a9 00 2a 85 28
>3a0ad8		c2 30 a9 7c 0c 85 08 e2 20 a9 3a 85 0a a2 80 00
>3a0ae8		e2 20 a0 01 00 b7 08 f0 31 c5 1e d0 32 c2 30 a0
>3a0af8		02 00 b7 08 85 0c e2 20 a9 3a 85 0e a5 28 f0 07
>3a0b08		a7 0c 20 b5 4f b0 18 e2 10 a0 00 b7 00 20 d4 04
>3a0b18		d7 0c d0 0b c8 c4 1e 90 f2 8a 2b 28 7a fa 60 c2
>3a0b28		30 18 a5 08 69 08 00 85 08 e2 20 a5 0a 69 00 85
>3a0b38		0a e8 80 ac 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>3a0b48		28 c2 30 a9 7c 0c 85 08 a9 3a 00 85 0a 64 0c e2
>3a0b58		20 a0 01 00 b7 08 f0 1d c5 1e b0 06 c5 0c 90 02
>3a0b68		85 0c c2 20 18 a5 08 69 08 00 85 08 a5 0a 69 00
>3a0b78		00 85 0a 80 da e2 20 a5 0c 85 1e ab 2b 28 60 08
>3a0b88		0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 87 00 c2
>3a0b98		20 18 a5 00 69 01 00 85 08 a5 02 69 00 00 85 0a
>3a0ba8		e2 10 a4 1e 88 e2 20 b7 08 87 08 f0 13 c2 20 18
>3a0bb8		a5 08 69 01 00 85 08 a5 0a 69 00 00 85 0a 80 e5
>3a0bc8		2b 28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69 7c 0c
>3a0bd8		aa 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a0be8		08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 cb
>3a0bf8		0b bd 00 00 c2 20 29 0f 00 2b ab 28 60 08 8b 0b
>3a0c08		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 3a
>3a0c18		48 ab 68 28 c2 30 20 cb 0b bd 04 00 2b ab 28 60
>3a0c28		08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a0c38		48 a9 3a 48 ab 68 28 e2 20 c2 10 20 cb 0b bd 00
>3a0c48		00 c2 20 29 f0 00 2b ab 28 60 08 8b 0b 08 c2 20
>3a0c58		48 a9 00 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68
>3a0c68		28 e2 20 c2 10 20 cb 0b bd 06 00 c2 20 29 ff 00
>3a0c78		2b ab 28 60 03 01 10 d0 f1 26 02 00 03 01 12 d0
>3a0c88		31 27 02 00 02 01 14 d0 68 27 02 00 02 01 16 d0
>3a0c98		9f 27 02 00 02 03 18 d0 a9 27 02 00 00 01 1c d0
>3a0ca8		bc 27 02 00 04 02 1e d0 7a 29 02 00 04 02 21 d0
>3a0cb8		3a 29 02 00 04 02 24 d0 fa 28 02 00 04 01 27 d0
>3a0cc8		3a 28 02 00 04 01 29 d0 ba 28 02 00 04 01 2b d0
>3a0cd8		7a 28 02 00 05 03 2d d0 24 28 01 00 06 03 31 d0
>3a0ce8		f6 27 02 00 07 02 35 d0 0d 28 02 00 ff 01 38 d0
>3a0cf8		00 00 00 00 40 01 3a d0 00 00 00 00 20 03 3c d0
>3a0d08		40 40 00 00 20 05 40 d0 45 44 00 00 20 03 46 d0
>3a0d18		90 43 00 00 20 04 4a d0 30 43 00 00 20 03 4f d0
>3a0d28		27 43 00 00 20 02 53 d0 bf 42 00 00 50 04 56 d0
>3a0d38		00 00 00 00 50 04 5b d0 00 00 00 00 20 05 60 d0
>3a0d48		02 42 00 00 20 06 66 d0 7b 42 00 00 20 03 6d d0
>3a0d58		57 40 00 00 50 02 71 d0 00 00 00 00 50 04 74 d0
>3a0d68		00 00 00 00 20 04 79 d0 4b 41 00 00 20 02 7e d0
>3a0d78		51 40 00 00 20 04 81 d0 54 40 00 00 50 05 86 d0
>3a0d88		00 00 00 00 50 05 8c d0 00 00 00 00 20 04 92 d0
>3a0d98		4e 40 00 00 20 03 97 d0 86 43 00 00 20 04 9b d0
>3a0da8		21 40 00 00 20 04 a0 d0 b1 3f 00 00 20 05 a5 d0
>3a0db8		47 3f 00 00 20 05 ab d0 d4 3e 00 00 20 03 b1 d0
>3a0dc8		d0 3e 00 00 20 04 b5 d0 b1 3d 00 00 20 04 ba d0
>3a0dd8		c3 3e 00 00 20 07 bf d0 c7 3e 00 00 20 03 c7 d0
>3a0de8		04 3d 00 00 20 04 cb d0 6d 3c 00 00 00 01 d0 d0
>3a0df8		ba 29 01 00 30 03 d2 d0 3b 4a 00 00 30 04 d6 d0
>3a0e08		8b 4a 00 00 30 05 db d0 3d 4b 00 00 30 05 e1 d0
>3a0e18		ef 4a 00 00 30 04 e7 d0 7c 4b 00 00 30 03 ec d0
>3a0e28		d1 4b 00 00 30 03 f0 d0 16 4c 00 00 30 03 f4 d0
>3a0e38		9f 4c 00 00 30 03 f8 d0 28 4d 00 00 30 03 fc d0
>3a0e48		8a 4d 00 00 30 04 00 d1 ad 49 00 00 30 03 05 d1
>3a0e58		4c 49 00 00 30 04 09 d1 fe 48 00 00 30 03 0e d1
>3a0e68		a8 48 00 00 30 05 12 d1 df 47 00 00 30 06 18 d1
>3a0e78		fe 46 00 00 30 04 1f d1 49 46 00 00 10 03 24 d1
>3a0e88		f1 4e 00 00 10 03 28 d1 bc 4e 00 00 10 04 2c d1
>3a0e98		a2 6a 00 00 10 04 31 d1 08 4f 00 00 10 03 36 d1
>3a0ea8		c9 67 00 00 20 05 3a d1 74 69 00 00 10 04 40 d1
>3a0eb8		4f 6a 00 00 20 05 45 d1 5b 6b 00 00 20 03 4b d1
>3a0ec8		7a 6c 00 00 10 04 4f d1 e7 6b 00 00 20 06 54 d1
>3a0ed8		f0 6c 00 00 20 04 5b d1 14 6e 00 00 10 07 60 d1
>3a0ee8		b9 4e 00 00 20 03 68 d1 fb 3b 00 00 20 05 6c d1
>3a0ef8		0b 3b 00 00 20 09 72 d1 79 2b 00 00 20 09 7c d1
>3a0f08		06 2b 00 00 20 0a 86 d1 36 2b 00 00 20 07 91 d1
>3a0f18		73 2a 00 00 30 08 99 d1 24 45 00 00 20 07 a2 d1
>3a0f28		08 2a 00 00 30 08 aa d1 8e 45 00 00 20 08 b3 d1
>3a0f38		be 2c 00 00 20 08 bc d1 f2 2b 00 00 20 06 c5 d1
>3a0f48		f8 2d 00 00 20 09 cc d1 00 2f 00 00 20 04 d6 d1
>3a0f58		10 30 00 00 20 04 db d1 81 30 00 00 20 04 e0 d1
>3a0f68		1a 31 00 00 20 06 e5 d1 56 32 00 00 20 08 ec d1
>3a0f78		f4 32 00 00 20 0a f5 d1 42 33 00 00 20 07 00 d2
>3a0f88		79 34 00 00 20 07 08 d2 f7 34 00 00 20 08 10 d2
>3a0f98		69 35 00 00 20 06 19 d2 a6 35 00 00 20 07 20 d2
>3a0fa8		d6 38 00 00 50 06 28 d2 00 00 00 00 50 04 2f d2
>3a0fb8		00 00 00 00 20 06 34 d2 eb 3a 00 00 30 03 3b d2
>3a0fc8		e0 4d 00 00 30 03 3f d2 f3 45 00 00 30 03 43 d2
>3a0fd8		f3 4d 00 00 30 03 47 d2 09 4e 00 00 30 03 4b d2
>3a0fe8		1f 4e 00 00 30 02 4f d2 35 4e 00 00 30 04 52 d2
>3a0ff8		4b 4e 00 00 30 04 57 d2 61 4e 00 00 30 04 5c d2
>3a1008		77 4e 00 00 30 03 61 d2 8d 4e 00 00 30 03 65 d2
>3a1018		a3 4e 00 00 00 00 00 00 00 00 00 00 08 0b 08 c2
>3a1028		20 48 a9 00 08 5b 68 28 c2 30 a9 ff ff 85 ba e2
>3a1038		20 a9 37 85 bc c2 20 64 b7 64 bd e2 20 64 b9 64
>3a1048		bf 2b 28 60 5a 08 e2 20 85 ea c2 10 86 8f c2 20
>3a1058		a5 0e 48 a5 0c 48 a5 12 48 a5 10 48 20 fc 10 b0
>3a1068		03 20 80 10 20 88 12 c2 20 68 85 10 68 85 12 68
>3a1078		85 0c 68 85 0e 28 7a 60 08 0b 08 c2 20 48 a9 00
>3a1088		08 5b 68 28 e2 20 a6 8f ca 86 0c e8 c2 30 38 a5
>3a1098		ba e5 0c 85 c0 e2 20 a5 bc e9 00 85 c2 20 88 12
>3a10a8		e2 20 a5 ea a0 00 00 97 c3 a9 00 a0 01 00 97 c3
>3a10b8		a0 02 00 97 c3 c2 20 a9 00 00 97 c3 c2 20 18 a5
>3a10c8		ba 69 01 00 a0 05 00 97 c3 e2 20 c8 c8 a5 bc 69
>3a10d8		00 97 c3 c2 20 a5 c0 85 b7 e2 20 a5 c2 85 b9 c2
>3a10e8		20 38 a5 c3 e9 01 00 85 ba e2 20 a5 c5 e9 00 85
>3a10f8		bc 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a1108		c2 30 c2 20 a5 bd 85 c9 e2 20 a5 bf 85 cb a5 c9
>3a1118		d0 17 e2 20 a5 cb d0 11 c2 20 a9 00 00 85 cf e2
>3a1128		20 a9 00 85 d1 2b 28 18 60 c2 20 a0 05 00 b7 c9
>3a1138		85 cc e2 20 c8 c8 b7 c9 85 ce c2 20 18 a5 c9 65
>3a1148		8f 85 0c e2 20 a5 cb 69 00 85 0e c2 20 18 a5 0c
>3a1158		69 08 00 85 0c e2 20 a5 0e 69 00 85 0e c2 20 a5
>3a1168		0c c5 cc d0 28 e2 20 a5 0e c5 ce d0 20 c2 20 a5
>3a1178		cf d0 5d e2 20 a5 d1 d0 57 c2 20 a0 02 00 b7 c9
>3a1188		85 bd e2 20 c8 c8 b7 c9 85 bf 4c 39 12 c2 20 a5
>3a1198		0c 69 08 00 85 10 e2 20 a5 0e 69 00 85 12 e2 20
>3a11a8		a5 c6 c5 10 b0 3e 90 08 c2 20 a5 c6 c5 10 b0 34
>3a11b8		c2 20 a5 c9 85 cf e2 20 a5 cb 85 d1 c2 20 a0 02
>3a11c8		00 b7 cf 85 c9 e2 20 c8 c8 b7 cf 85 cb 4c 16 11
>3a11d8		c2 20 a0 02 00 b7 c9 97 cf e2 20 c8 c8 b7 c9 97
>3a11e8		cf 4c 39 12 c2 20 a0 05 00 b7 c9 97 0c e2 20 c8
>3a11f8		c8 b7 c9 97 0c c2 20 a0 02 00 b7 c9 97 0c e2 20
>3a1208		c8 c8 b7 c9 97 0c c2 20 a5 cf d0 14 e2 20 a5 cf
>3a1218		d0 0e c2 20 a5 0c 85 bd e2 20 a5 0e 85 bf 80 11
>3a1228		c2 20 a0 02 00 a5 0c 97 cf e2 20 c8 c8 a5 0e 97
>3a1238		cf c2 20 a5 c9 85 c3 e2 20 a5 cb 85 c5 c2 20 a5
>3a1248		c3 85 b7 e2 20 a5 c5 85 b9 c2 20 a0 05 00 a5 0c
>3a1258		97 c3 e2 20 c8 c8 a5 0e 97 c3 c2 20 a0 02 00 a9
>3a1268		00 00 97 c3 e2 20 c8 c8 97 c3 e2 20 a5 ea e2 20
>3a1278		a0 00 00 97 c3 a0 01 00 a9 00 97 c3 2b 28 38 60
>3a1288		08 c2 20 38 a5 c0 e9 08 00 85 c3 e2 20 a5 c2 e9
>3a1298		00 85 c5 28 60 08 e2 20 a5 c5 f0 04 c9 38 b0 12
>3a12a8		c2 20 a5 c3 f0 0c e2 20 a0 01 00 b7 c3 1a 97 c3
>3a12b8		28 60 00 ea 08 e2 20 a5 c5 f0 04 c9 38 b0 17 c2
>3a12c8		20 a5 c3 f0 11 e2 20 a0 01 00 b7 c3 3a 97 c3 d0
>3a12d8		03 20 e0 12 28 60 00 ea 08 c2 20 a5 bd d0 21 e2
>3a12e8		20 a5 bf d0 1b a5 c5 85 bf c2 20 a5 c3 85 bd a9
>3a12f8		00 00 a0 02 00 97 c3 c8 c8 e2 20 97 c3 4c c7 13
>3a1308		e2 20 a5 bf c5 c5 90 28 c2 20 a5 bd c5 c3 90 20
>3a1318		c2 20 a5 bd a0 02 00 97 c3 e2 20 c8 c8 a5 bf 97
>3a1328		c3 c2 20 a5 c3 85 bd e2 20 a5 c5 85 bf 4c c7 13
>3a1338		c2 20 a5 bd 85 08 e2 20 a5 bf 85 0a e2 20 a0 04
>3a1348		00 b7 08 c5 c8 90 32 d0 0b c2 20 a0 02 00 b7 08
>3a1358		c5 c6 90 25 c2 20 a0 02 00 b7 08 97 c3 e2 20 c8
>3a1368		c8 b7 08 97 c3 c2 20 a5 c3 a0 02 00 97 08 e2 20
>3a1378		a5 c5 c8 c8 97 08 4c c7 13 c2 20 a0 02 00 b7 08
>3a1388		d0 08 e2 20 c8 c8 b7 08 f0 19 c2 20 a0 02 00 b7
>3a1398		08 85 0c e2 20 c8 c8 b7 08 85 0a c2 20 a5 0c 85
>3a13a8		08 80 99 c2 20 a5 c3 a0 02 00 97 08 e2 20 c8 c8
>3a13b8		a5 c5 97 08 a9 00 97 c3 c2 20 a0 02 00 97 c3 20
>3a13c8		cc 13 28 60 08 c2 20 a5 bd 85 c3 e2 20 a5 bf 85
>3a13d8		c5 c2 20 a5 c3 d0 09 e2 20 a5 c5 d0 03 4c 6f 14
>3a13e8		c2 20 a0 02 00 b7 c3 85 0c e2 20 c8 c8 b7 c3 85
>3a13f8		0e c2 20 a0 05 00 b7 c3 85 10 e2 20 c8 c8 b7 c3
>3a1408		85 12 c2 20 a5 0c c5 10 d0 08 e2 20 a5 0e c5 12
>3a1418		f0 1f c2 20 a0 02 00 b7 c3 85 0c e2 20 c8 c8 b7
>3a1428		c3 85 0e c2 20 a5 0c 85 c3 e2 20 a5 0e 85 c5 80
>3a1438		a0 c2 20 a0 02 00 b7 c3 85 0c e2 20 c8 c8 b7 c3
>3a1448		85 0e c2 20 a0 02 00 b7 0c 97 c3 e2 20 c8 c8 b7
>3a1458		0c 97 c3 c2 20 a0 05 00 b7 0c 97 c3 e2 20 c8 c8
>3a1468		b7 0c 97 c3 4c e8 13 28 60 08 c2 20 64 16 64 18
>3a1478		28 60 08 c2 30 a5 16 d0 16 a5 18 d0 12 e2 20 64
>3a1488		16 a5 e2 1a 1a 85 17 a5 e3 85 18 64 19 80 07 c2
>3a1498		20 a5 17 1a 85 17 c2 20 a5 bb 3a c5 17 f0 02 b0
>3a14a8		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 03 8f
>3a14b8		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>3a14c8		28 60 c9 00 d0 05 c0 01 00 f0 05 09 30 97 16 c8
>3a14d8		60 08 c2 30 64 0c a5 25 10 1a 18 a5 23 49 ff ff
>3a14e8		69 01 00 85 23 a5 25 49 ff ff 69 00 00 85 25 a9
>3a14f8		ff ff 85 0c 64 10 64 12 64 14 a2 1f 00 f8 06 23
>3a1508		26 25 a5 10 65 10 85 10 a5 12 65 12 85 12 a5 14
>3a1518		65 14 85 14 ca 10 e7 d8 e2 20 20 7a 14 a0 00 00
>3a1528		a5 0c f0 04 a9 2d 80 02 a9 20 97 16 c8 a2 05 00
>3a1538		b5 10 29 f0 4a 4a 4a 4a 20 ca 14 b5 10 29 0f 20
>3a1548		ca 14 ca 10 eb c0 01 00 d0 0c a9 20 87 16 a0 01
>3a1558		00 a9 30 97 16 c8 a9 00 97 16 28 60 00 ea 08 e2
>3a1568		20 c2 10 a0 00 00 bd 00 00 f0 04 e8 c8 80 f7 28
>3a1578		60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2
>3a1588		10 a0 00 00 b7 23 d0 04 b7 29 f0 25 b7 23 d7 29
>3a1598		90 12 d0 03 c8 80 ed c2 20 a9 01 00 85 23 e2 20
>3a15a8		64 25 80 15 c2 20 a9 ff ff 85 23 e2 20 85 25 80
>3a15b8		08 c2 20 64 23 e2 20 64 25 e2 20 a9 00 85 27 2b
>3a15c8		28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a15d8		20 c2 10 08 c2 20 48 e2 20 a5 25 48 ab c2 20 68
>3a15e8		28 a6 23 20 66 15 84 0c 08 c2 20 48 e2 20 a5 2b
>3a15f8		48 ab c2 20 68 28 a6 29 20 66 15 c2 20 98 38 65
>3a1608		0c aa e2 20 a9 02 20 4c 10 c2 20 a5 b7 85 08 e2
>3a1618		20 a5 b9 85 0a a0 00 00 08 c2 20 48 e2 20 a5 25
>3a1628		48 ab c2 20 68 28 a6 23 bd 00 00 f0 06 97 08 e8
>3a1638		c8 80 f5 e2 20 08 c2 20 48 e2 20 a5 2b 48 ab c2
>3a1648		20 68 28 a6 29 bd 00 00 97 08 f0 04 e8 c8 80 f5
>3a1658		c2 20 a5 08 85 23 e2 20 a5 0a 85 25 a9 02 85 27
>3a1668		ab 2b 28 60 da 5a 08 0b 8b 08 c2 20 48 a9 00 08
>3a1678		5b 68 28 c2 20 a5 0a 48 a5 08 48 c2 30 08 c2 20
>3a1688		48 e2 20 a5 25 48 ab c2 20 68 28 a6 23 20 66 15
>3a1698		98 aa e8 e2 20 a9 02 20 4c 10 c2 20 a5 c0 85 08
>3a16a8		a5 c2 85 0a a0 00 00 e2 20 b7 23 97 08 f0 03 c8
>3a16b8		80 f7 c2 20 a5 08 85 23 a5 0a 85 25 c2 20 68 85
>3a16c8		08 68 85 0a ab 2b 28 7a fa 60 08 e2 20 c2 10 a0
>3a16d8		00 00 b7 23 f0 05 c8 80 f9 84 92 c2 30 c4 29 90
>3a16e8		13 f0 11 a5 8f 30 0d f0 0b c4 8f b0 12 a5 29 d0
>3a16f8		0e 4c 50 17 20 7a 14 e2 20 a9 00 87 16 80 39 20
>3a1708		7a 14 c2 30 18 a5 23 65 29 85 23 a5 25 69 00 00
>3a1718		85 25 a0 00 00 e2 20 a7 23 97 16 f0 1b c2 20 18
>3a1728		a5 23 69 01 00 85 23 a5 25 69 00 00 85 25 c8 c4
>3a1738		8f d0 e2 a9 00 00 97 16 c2 20 a5 16 85 23 a5 18
>3a1748		85 25 e2 20 a9 02 85 27 28 60 08 c2 30 20 79 15
>3a1758		a5 23 c9 ff ff d0 05 20 ab 05 80 03 20 bd 05 28
>3a1768		60 08 c2 30 20 79 15 a5 23 c9 01 00 d0 05 20 ab
>3a1778		05 80 03 20 bd 05 28 60 08 c2 30 20 79 15 a5 23
>3a1788		c9 00 00 d0 05 20 ab 05 80 03 20 bd 05 28 60 08
>3a1798		c2 30 20 79 15 a5 23 c9 00 00 f0 05 20 ab 05 80
>3a17a8		03 20 bd 05 28 60 08 c2 30 20 79 15 a5 23 c9 ff
>3a17b8		ff f0 05 20 ab 05 80 03 20 bd 05 28 60 08 c2 30
>3a17c8		20 79 15 a5 23 c9 01 00 f0 05 20 ab 05 80 03 20
>3a17d8		bd 05 28 60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b
>3a17e8		68 28 c2 30 a9 00 00 85 00 85 1a a9 36 00 85 02
>3a17f8		85 1c 22 3c 11 00 b0 20 a0 02 00 b7 1a f0 0f c5
>3a1808		55 90 10 c5 59 f0 02 b0 05 20 3f 18 80 e4 28 2b
>3a1818		7a 68 60 20 08 21 80 da 08 c2 20 48 a9 00 08 5b
>3a1828		68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20
>3a1838		6c 1d e2 20 dc d4 08 08 c2 30 85 23 64 25 20 d9
>3a1848		14 a5 16 1a 85 23 a5 18 85 25 20 c1 44 18 a5 1a
>3a1858		69 04 00 85 00 a5 1c 69 00 00 85 02 e2 20 a9 20
>3a1868		20 18 00 c2 20 20 7e 18 90 fb e2 20 a9 0d 20 18
>3a1878		00 20 08 21 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>3a1888		5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2
>3a1898		10 a7 00 f0 3a 30 05 20 18 00 80 29 c2 20 29 7f
>3a18a8		00 0a 0a 0a 18 69 7c 0c 85 08 a9 3a 00 69 00 00
>3a18b8		85 0a 08 e2 20 48 a9 3a 48 ab 68 28 a0 02 00 b7
>3a18c8		08 aa 20 e2 03 c2 20 20 2b 20 ab 2b 28 18 60 ab
>3a18d8		2b 28 38 60 08 c2 20 a9 ff 6f 85 1f a9 ff 7f 85
>3a18e8		21 a9 ff ff 85 23 85 25 85 29 85 2b e2 20 85 27
>3a18f8		85 2d 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>3a1908		28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a a4 1f
>3a1918		bd 00 00 99 00 00 bd 02 00 99 02 00 e2 20 bd 04
>3a1928		00 99 04 00 c2 20 38 98 e9 05 00 85 1f 7a ab 2b
>3a1938		28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a1948		e2 20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5 1f 69
>3a1958		05 00 85 1f a8 b9 00 00 9d 00 00 b9 02 00 9d 02
>3a1968		00 e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab 2b 28
>3a1978		60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a1988		20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 21 99
>3a1998		00 00 88 84 21 7a ab 2b 28 60 08 0b 8b 08 c2 20
>3a19a8		48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a19b8		28 e2 20 c2 10 5a a4 21 c8 84 21 b9 00 00 c2 20
>3a19c8		29 ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20 79 19
>3a19d8		28 60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68 28 e2
>3a19e8		20 a4 21 b9 01 00 c9 01 d0 08 c2 20 e6 21 ab 28
>3a19f8		7a 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a1a08		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>3a1a18		08 48 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a1a28		e2 20 48 a9 00 48 ab 68 28 e2 20 a4 21 c0 ff 7f
>3a1a38		f0 11 20 db 0b 85 0c b9 01 00 20 db 0b c5 0c f0
>3a1a48		02 90 08 c2 20 ab 2b 28 68 18 60 c2 20 ab 2b 28
>3a1a58		68 38 60 4c 56 08 08 e2 20 a9 00 8f 00 4d 00 a2
>3a1a68		01 00 20 1a 1c 20 8b 06 c2 20 a5 23 9f 00 4d 00
>3a1a78		e2 20 af 00 4d 00 1a 30 3e 8f 00 4d 00 e8 e8 20
>3a1a88		4c 20 e2 20 a7 00 c9 90 f0 09 c9 2c d0 0a 20 2b
>3a1a98		20 80 cf 20 2b 20 28 60 08 c2 20 48 a9 00 08 5b
>3a1aa8		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a1ab8		6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>3a1ac8		28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 6c
>3a1ad8		1d e2 20 dc d4 08 08 20 88 52 90 23 e2 20 a5 ea
>3a1ae8		29 80 d0 06 20 89 50 4c 05 1b e2 20 a9 8f 20 38
>3a1af8		21 20 d0 19 20 5e 1a 20 3f 67 20 da 19 28 60 08
>3a1b08		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a1b18		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 08 0b
>3a1b28		08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 20 2b
>3a1b38		20 a0 00 00 b7 00 f0 24 c9 22 f0 03 c8 80 f5 84
>3a1b48		0c e2 20 a9 02 a6 0c e8 20 7a 14 a0 00 00 c4 0c
>3a1b58		f0 29 a7 00 97 16 c8 20 2b 20 80 f2 08 c2 20 48
>3a1b68		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>3a1b78		29 ff 00 20 6c 1d e2 20 dc d4 08 a9 00 97 16 c2
>3a1b88		20 a5 16 85 23 a5 18 85 25 a9 02 00 85 27 20 2b
>3a1b98		20 2b 28 60 08 e2 20 a7 00 c2 20 29 ff 00 20 05
>3a1ba8		0c 85 2f 20 d0 19 08 e2 20 48 a9 00 48 ab 68 28
>3a1bb8		20 c0 1b 20 da 19 28 60 20 2b 20 6c 2f 08 48 08
>3a1bc8		0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20 a2
>3a1bd8		19 89 80 00 f0 37 48 20 05 0c 85 2f 68 20 52 0c
>3a1be8		c9 01 00 f0 08 c2 30 a2 29 08 20 3a 19 c2 30 a2
>3a1bf8		23 08 20 3a 19 08 e2 20 48 a9 00 48 ab 68 28 20
>3a1c08		17 1c a2 23 08 20 fc 18 ab 2b 28 68 60 00 ea 6c
>3a1c18		2f 08 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a1c28		48 a9 00 48 ab 68 28 c2 10 da e2 20 a7 00 d0 03
>3a1c38		4c dd 1c 30 33 c9 20 d0 03 4c d7 1c c9 3a b0 04
>3a1c48		c9 30 b0 56 c9 26 f0 52 c9 22 d0 03 4c f0 1c c9
>3a1c58		5b b0 07 c9 41 90 03 4c fc 1c c9 7b b0 07 c9 61
>3a1c68		90 03 4c fc 1c 4c dd 1c c9 8f f0 40 c9 90 f0 41
>3a1c78		20 28 0c c9 30 d0 0c 20 9c 1b a2 23 08 20 fc 18
>3a1c88		4c 32 1c c9 00 d0 4e a7 00 a6 21 e0 ff 7f f0 05
>3a1c98		20 19 1a b0 12 20 79 19 80 35 c2 20 20 aa 58 a2
>3a1ca8		23 08 20 fc 18 80 83 20 c6 1b 80 dd 20 79 19 80
>3a1cb8		1e e2 20 a4 21 c0 ff 7f f0 46 a4 21 b9 01 00 c9
>3a1cc8		01 f0 3d c9 8f f0 05 20 c6 1b 80 ee 20 a2 19 20
>3a1cd8		2b 20 4c 32 1c a6 21 e0 ff 7f b0 24 bd 01 00 c9
>3a1ce8		01 f0 1d 20 c6 1b 80 ed 20 26 1b a2 23 08 20 fc
>3a1cf8		18 4c 32 1c 20 de 1a a2 23 08 20 fc 18 4c 32 1c
>3a1d08		a2 23 08 20 3a 19 fa 28 60 08 0b 8b 08 e2 20 48
>3a1d18		a9 00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68 28
>3a1d28		c2 30 a9 fd 5f 85 33 ab 2b 28 60 08 0b 08 c2 20
>3a1d38		48 a9 00 08 5b 68 28 c2 30 92 33 c6 33 c6 33 2b
>3a1d48		28 60 08 c2 30 29 ff 00 20 33 1d 28 60 08 0b 08
>3a1d58		c2 20 48 a9 00 08 5b 68 28 c2 30 e6 33 e6 33 b2
>3a1d68		33 2b 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a1d78		28 08 e2 20 48 a9 00 48 ab 68 28 c2 20 85 23 a9
>3a1d88		00 00 85 25 e2 20 a9 00 85 27 85 ea a9 3a 85 e9
>3a1d98		c2 20 a9 c6 1d 85 e7 20 eb 51 c2 20 a5 d7 85 23
>3a1da8		a5 d9 85 25 e2 20 a9 00 85 27 85 ea a9 3a 85 e9
>3a1db8		c2 20 a9 ca 1d 85 e7 20 eb 51 28 2b ab 60 45 52
>3a1dc8		52 00 45 52 4c 00 e2 20 c2 10 20 55 03 af d3 08
>3a1dd8		00 0a c2 20 29 ff 00 a8 08 e2 20 48 a9 3a 48 ab
>3a1de8		68 28 be 20 1e 20 e2 03 c2 20 a5 d7 f0 27 a2 50
>3a1df8		1e 20 e2 03 08 e2 20 48 a9 00 48 ab 68 28 c2 20
>3a1e08		af d7 08 00 8f 23 08 00 a9 00 00 8f 25 08 00 20
>3a1e18		e1 44 20 55 03 4c ce 26 54 1e 57 1e 5d 1e 6a 1e
>3a1e28		78 1e 86 1e 99 1e af 1e bf 1e ce 1e db 1e ec 1e
>3a1e38		fb 1e 08 1f 16 1f 25 1f 36 1f 4f 1f 63 1f 77 1f
>3a1e48		8d 1f a1 1f bc 1f d4 1f 20 61 74 00 4f 4b 00 42
>3a1e58		72 65 61 6b 00 53 79 6e 74 61 78 20 65 72 72 6f
>3a1e68		72 00 4f 75 74 20 6f 66 20 6d 65 6d 6f 72 79 00
>3a1e78		54 79 70 65 20 6d 69 73 6d 61 74 63 68 00 56 61
>3a1e88		72 69 61 62 6c 65 20 6e 6f 74 20 66 6f 75 6e 64
>3a1e98		00 4c 69 6e 65 20 6e 75 6d 62 65 72 20 6e 6f 74
>3a1ea8		20 66 6f 75 6e 64 00 53 74 61 63 6b 20 75 6e 64
>3a1eb8		65 72 66 6c 6f 77 00 53 74 61 63 6b 20 6f 76 65
>3a1ec8		72 66 6c 6f 77 00 4f 75 74 20 6f 66 20 72 61 6e
>3a1ed8		67 65 00 49 6c 6c 65 67 61 6c 20 61 72 67 75 6d
>3a1ee8		65 6e 74 00 46 69 6c 65 20 6e 6f 74 20 66 6f 75
>3a1ef8		6e 64 00 4e 6f 74 20 61 20 6e 75 6d 62 65 72 00
>3a1f08		4d 61 74 68 20 6f 76 65 72 66 6c 6f 77 00 4d 61
>3a1f18		74 68 20 75 6e 64 65 72 66 6c 6f 77 00 44 69 76
>3a1f28		69 73 69 6f 6e 20 62 79 20 7a 65 72 6f 00 55 6e
>3a1f38		61 62 6c 65 20 74 6f 20 72 65 61 64 20 64 69 72
>3a1f48		65 63 74 6f 72 79 00 55 6e 61 62 6c 65 20 74 6f
>3a1f58		20 6c 6f 61 64 20 66 69 6c 65 00 55 6e 61 62 6c
>3a1f68		65 20 74 6f 20 73 61 76 65 20 66 69 6c 65 00 55
>3a1f78		6e 61 62 6c 65 20 74 6f 20 64 65 6c 65 74 65 20
>3a1f88		66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74 20 66
>3a1f98		69 6e 64 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e
>3a1fa8		6f 74 20 75 70 64 61 74 65 20 64 69 72 65 63 74
>3a1fb8		6f 72 79 00 43 6f 75 6c 64 20 6e 6f 74 20 63 6f
>3a1fc8		70 79 20 74 68 65 20 66 69 6c 65 00 41 72 67 75
>3a1fd8		6d 65 6e 74 20 6f 75 74 73 69 64 65 20 64 6f 6d
>3a1fe8		61 69 6e 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a1ff8		e2 20 a9 00 85 d2 2b 28 60 0b 08 08 c2 20 48 a9
>3a2008		00 08 5b 68 28 08 c2 20 a9 ce 1d 8f d4 08 00 e2
>3a2018		20 a9 3a 8f d6 08 00 28 20 86 43 20 c7 3e 64 31
>3a2028		28 2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a2038		20 18 a5 00 69 01 00 85 00 e2 20 a5 02 69 00 85
>3a2048		02 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a2058		e2 20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02 80 05
>3a2068		20 2b 20 80 ed 2b 28 60 08 e2 20 a7 00 f0 09 c9
>3a2078		3a f0 05 20 2b 20 80 f3 28 60 08 e2 20 64 36 a7
>3a2088		00 f0 19 c5 37 f0 2c c9 9b f0 1e c9 9f f0 1a c9
>3a2098		9e f0 1a c9 a0 f0 16 20 2b 20 80 e3 20 08 21 c2
>3a20a8		20 a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea c6 36 30
>3a20b8		30 80 e4 a5 35 30 06 a5 36 f0 02 80 da 20 2b 20
>3a20c8		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a20d8		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>3a20e8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a20f8		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>3a2108		08 c2 30 a0 00 00 b7 1a 85 0c 18 a5 1a 65 0c 85
>3a2118		1a a5 1c 69 00 00 85 1c a0 02 00 b7 1a 85 d7 18
>3a2128		a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02 28 60
>3a2138		08 e2 20 48 20 4c 20 68 e2 20 c7 00 d0 08 20 2b
>3a2148		20 20 4c 20 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a2158		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>3a2168		e2 20 dc d4 08 08 e2 20 20 4c 20 e2 20 a7 00 f0
>3a2178		10 c9 3a f0 0c c5 37 f0 05 20 2b 20 80 ef 28 38
>3a2188		60 28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0 0d c9
>3a2198		3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a 60 08
>3a21a8		0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20 dc 18 e2
>3a21b8		20 a9 00 85 dc 22 3c 11 00 b0 4b a7 00 c9 3a d0
>3a21c8		03 20 2b 20 20 4c 20 a7 00 d0 03 4c 58 22 20 60
>3a21d8		04 b0 52 a7 00 10 10 20 28 0c 85 0c c9 20 d0 03
>3a21e8		4c 46 22 a5 d2 f0 51 08 c2 20 48 a9 00 08 5b 68
>3a21f8		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 6c
>3a2208		1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>3a2218		e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>3a2228		e2 20 dc d4 08 20 90 43 4c 58 22 08 e2 20 48 a9
>3a2238		00 48 ab 68 28 6c 2f 08 a5 0c c9 10 d0 a9 a7 00
>3a2248		20 05 0c c2 20 85 2f 20 dc 18 20 2b 20 20 33 22
>3a2258		ab 2b 28 60 08 58 20 ec 1f 20 11 1d e2 20 9c 8a
>3a2268		0f c2 20 a5 1a 85 00 a5 1c 85 02 4c 9d 22 08 c2
>3a2278		20 a0 02 00 b7 1a 85 d7 20 71 14 e2 20 a5 dc c9
>3a2288		03 f0 12 c2 20 18 a5 1a 69 04 00 85 00 e2 20 a5
>3a2298		1c 69 00 85 02 c2 20 20 a7 21 e2 20 a5 dc c9 03
>3a22a8		f0 f3 c9 00 d0 31 e2 20 20 4c 20 a7 00 f0 28 c9
>3a22b8		3a f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a22c8		02 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc
>3a22d8		d4 08 20 2b 20 80 be 28 60 08 58 e2 20 a9 80 85
>3a22e8		d2 9c 8a 0f 20 11 1d c2 30 64 31 a0 02 00 b7 1a
>3a22f8		f0 29 20 76 22 e2 20 a5 dc c9 01 f0 1e c9 02 f0
>3a2308		ea c9 03 f0 e6 c2 20 a0 00 00 18 a5 1a 77 1a 85
>3a2318		1a e2 20 a5 1c 69 00 85 1c 80 d0 e2 20 a9 00 85
>3a2328		d2 28 60 08 c2 30 c2 20 a9 00 00 85 08 a9 36 00
>3a2338		85 0a c2 20 a0 02 00 b7 08 f0 31 c5 23 f0 1e b0
>3a2348		2b c2 20 a0 00 00 18 a5 08 77 08 85 0c e2 20 a5
>3a2358		0a 69 00 85 0a c2 20 a5 0c 85 08 80 d7 c2 20 a5
>3a2368		08 85 1a e2 20 a5 0a 85 1c 28 38 60 28 18 60 08
>3a2378		e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 08 e2 20
>3a2388		a5 0e c5 02 f0 26 c2 20 18 a5 0c 69 01 00 85 0c
>3a2398		e2 20 a5 0e 69 00 85 0e c2 20 18 a5 08 69 01 00
>3a23a8		85 08 e2 20 a5 0a 69 00 85 0a 80 c4 28 60 08 e2
>3a23b8		20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 06 a5 0e c5
>3a23c8		02 f0 26 c2 20 38 a5 0c e9 01 00 85 0c e2 20 a5
>3a23d8		0e e9 00 85 0e c2 20 38 a5 08 e9 01 00 85 08 e2
>3a23e8		20 a5 0a e9 00 85 0a 80 c6 28 60 08 a0 00 00 c2
>3a23f8		20 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00 85 0e
>3a2408		c2 20 18 a5 d9 69 04 00 85 00 e2 20 a5 db 69 00
>3a2418		85 02 a0 00 00 c2 20 38 a5 d9 f7 08 85 d9 e2 20
>3a2428		a5 db e9 00 85 db 20 77 23 20 86 43 28 60 08 08
>3a2438		c2 20 48 a9 00 08 5b 68 28 c2 30 a0 02 00 97 d9
>3a2448		18 a5 d9 69 04 00 85 08 e2 20 a5 db 69 00 85 0a
>3a2458		e2 20 a0 00 00 b7 1a 97 08 f0 03 c8 80 f7 c2 20
>3a2468		98 18 69 05 00 85 0c c2 20 a0 00 00 a5 0c 97 d9
>3a2478		c2 20 18 a5 d9 65 0c 85 0c e2 20 a5 db 69 00 85
>3a2488		db c2 20 a5 0c 85 d9 c2 20 a0 00 00 a9 00 00 97
>3a2498		d9 c8 c0 05 00 d0 f8 20 86 43 28 60 0b 08 08 c2
>3a24a8		20 48 a9 00 08 5b 68 28 c2 30 a9 00 00 85 08 a9
>3a24b8		36 00 85 0a a0 02 00 b7 08 f0 1d c5 d7 f0 25 b0
>3a24c8		1d a0 00 00 18 a5 08 77 08 85 0c a5 0a 69 00 00
>3a24d8		85 0a a5 0c 85 08 80 dc a9 00 00 28 2b 60 a9 01
>3a24e8		00 28 2b 60 a9 02 00 28 2b 60 08 c2 30 a9 05 00
>3a24f8		85 10 a0 00 00 e2 20 b7 1a f0 07 c2 20 e6 10 c8
>3a2508		80 f3 c2 20 a5 08 85 00 a5 0a 85 02 18 a5 d9 69
>3a2518		04 00 85 0c a5 db 69 00 00 85 0e 18 a5 d9 65 10
>3a2528		85 d9 a5 db 69 00 00 85 db 18 a5 d9 69 04 00 85
>3a2538		08 a5 db 69 00 00 85 0a 20 b6 23 c2 20 a5 10 a0
>3a2548		00 00 97 00 a5 d7 a0 02 00 97 00 18 a5 00 69 04
>3a2558		00 85 00 a5 02 69 00 00 85 02 a0 00 00 e2 20 b7
>3a2568		1a 97 00 f0 03 c8 80 f7 20 86 43 28 60 08 c2 30
>3a2578		85 d7 20 a4 24 c9 00 00 f0 2c c9 01 00 f0 22 c2
>3a2588		20 a5 08 48 a5 0a 48 20 f3 23 68 85 0a 68 85 08
>3a2598		a5 1a 85 00 a5 1c 85 02 20 4c 20 e2 20 a7 00 f0
>3a25a8		0a 20 f2 24 80 05 a5 d7 20 36 24 28 60 0b 08 08
>3a25b8		c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a2 00 00
>3a25c8		bd 00 4f f0 03 e8 80 f8 86 0c c2 30 8a c9 02 00
>3a25d8		90 12 3a 18 69 00 4f aa 18 65 8f a8 a5 0c 3a 8b
>3a25e8		44 00 00 ab c2 20 a6 55 a0 00 4f a5 8f 8b 54 00
>3a25f8		3a ab e2 20 a5 0c c9 02 90 18 a6 8f a9 22 9d 00
>3a2608		4f e8 bd 00 4f d0 fa a9 22 9d 00 4f a9 00 e8 9d
>3a2618		00 4f 28 2b 60 da 5a 8b 0b 08 08 c2 20 48 a9 00
>3a2628		08 5b 68 28 e2 20 c2 10 ad 00 4f c9 23 f0 0a c9
>3a2638		7c f0 17 28 2b ab 7a fa 60 c2 20 a9 03 00 85 8f
>3a2648		a9 63 26 85 55 20 b5 25 80 e9 c2 20 a9 04 00 85
>3a2658		8f a9 67 26 85 55 20 b5 25 80 d8 44 49 52 00 42
>3a2668		52 55 4e 00 8b 08 20 aa 01 08 e2 20 48 a9 3a 48
>3a2678		ab 68 28 a2 69 d2 20 e2 03 28 ab 60 08 e2 30 a9
>3a2688		01 20 1c 00 20 d1 00 c9 00 f0 f9 c9 0d f0 02 80
>3a2698		f3 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a26a8		30 64 d7 a9 00 4f 85 1a a9 00 00 85 1c 20 1a 09
>3a26b8		c2 20 a5 d7 d0 05 20 5c 22 80 07 20 75 25 28 2b
>3a26c8		38 60 28 2b 18 60 c2 30 a2 ff fe 9a 20 6c 26 20
>3a26d8		08 00 20 0c 00 22 3c 11 00 a9 00 00 20 1c 00 20
>3a26e8		1d 26 20 9b 26 b0 e8 80 e3 08 e2 20 20 21 08 c9
>3a26f8		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a2708		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2718		ff 00 20 6c 1d e2 20 dc d4 08 20 ca 15 80 08 20
>3a2728		da 52 80 03 20 49 55 28 60 08 e2 20 20 d3 07 c9
>3a2738		00 f0 23 c9 01 f0 24 08 c2 20 48 a9 00 08 5b 68
>3a2748		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c
>3a2758		1d e2 20 dc d4 08 20 ec 52 80 03 20 3e 55 28 60
>3a2768		08 e2 20 20 d3 07 c9 00 f0 23 c9 01 f0 24 08 c2
>3a2778		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>3a2788		c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 20 fe 52
>3a2798		80 03 20 df 55 28 60 20 3d 07 20 6e 07 20 94 55
>3a27a8		60 a5 23 8f 1a 01 00 a5 29 8f 18 01 00 af 1e 01
>3a27b8		00 85 23 60 08 c2 30 48 20 3d 07 a5 2d c9 00 00
>3a27c8		d0 0d a5 2b d0 09 da a6 29 20 b2 62 fa 80 1c 20
>3a27d8		6e 07 c2 20 a5 2b 48 a5 29 48 20 3d 61 c2 20 68
>3a27e8		85 29 68 85 2b 20 df 55 20 1c 63 68 28 60 08 20
>3a27f8		cf 05 20 00 06 c2 20 a5 23 25 29 85 23 a5 25 25
>3a2808		2b 85 25 28 60 08 20 cf 05 20 00 06 c2 20 a5 23
>3a2818		05 29 85 23 a5 25 05 2b 85 25 28 60 08 20 cf 05
>3a2828		c2 20 a5 23 49 ff ff 85 23 a5 25 49 ff ff 85 25
>3a2838		28 60 08 e2 20 20 21 08 c9 00 f0 2c c9 01 f0 2d
>3a2848		c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2858		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>3a2868		dc d4 08 20 52 17 80 08 20 ff 53 80 03 20 74 5b
>3a2878		28 60 08 e2 20 20 21 08 c9 00 f0 2c c9 01 f0 2d
>3a2888		c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2898		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>3a28a8		dc d4 08 20 69 17 80 08 20 20 54 80 03 20 89 5b
>3a28b8		28 60 08 e2 20 20 21 08 c9 00 f0 2c c9 01 f0 2d
>3a28c8		c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a28d8		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>3a28e8		dc d4 08 20 80 17 80 08 20 4d 54 80 03 20 9e 5b
>3a28f8		28 60 08 e2 20 20 21 08 c9 00 f0 2c c9 01 f0 2d
>3a2908		c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2918		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>3a2928		dc d4 08 20 97 17 80 08 20 6b 54 80 03 20 dd 5b
>3a2938		28 60 08 e2 20 20 21 08 c9 00 f0 2c c9 01 f0 2d
>3a2948		c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2958		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>3a2968		dc d4 08 20 ae 17 80 08 20 89 54 80 03 20 c8 5b
>3a2978		28 60 08 e2 20 20 21 08 c9 00 f0 2c c9 01 f0 2d
>3a2988		c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2998		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>3a29a8		dc d4 08 20 c5 17 80 08 20 b6 54 80 03 20 b3 5b
>3a29b8		28 60 08 e2 20 a5 27 c9 00 f0 2d c9 01 f0 1f 08
>3a29c8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>3a29d8		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 e2 20
>3a29e8		a5 26 49 80 85 26 80 16 c2 20 a5 23 49 ff ff 85
>3a29f8		23 a5 25 49 ff ff 85 25 e6 23 d0 02 e6 25 28 60
>3a2a08		08 e2 20 20 1a 1c 20 e1 06 20 2c 05 a5 23 0a 0a
>3a2a18		0a 0a 05 29 48 a9 2c 20 38 21 20 1a 1c 20 e1 06
>3a2a28		20 2c 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 38
>3a2a38		21 20 1a 1c 20 e1 06 20 2c 05 a5 23 0a 0a 0a 0a
>3a2a48		05 29 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 00
>3a2a58		08 af 68 8f 02 08 af 68 8f 04 08 af af 0e 08 af
>3a2a68		29 f7 8f 0e 08 af 20 70 20 28 60 08 e2 20 20 1a
>3a2a78		1c 20 e1 06 20 2c 05 a5 23 0a 0a 0a 0a 05 29 48
>3a2a88		a9 2c 20 38 21 20 1a 1c 20 e1 06 20 2c 05 a5 23
>3a2a98		0a 0a 0a 0a 05 29 48 a9 2c 20 38 21 20 1a 1c 20
>3a2aa8		cf 05 20 62 05 c2 20 a5 23 85 92 a5 29 85 23 20
>3a2ab8		2c 05 e2 20 a5 23 0a 0a 0a 0a 05 29 48 c2 20 a5
>3a2ac8		92 85 23 20 2c 05 e2 20 a5 23 0a 0a 0a 0a 05 29
>3a2ad8		48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 0f 08 af
>3a2ae8		68 8f 0a 08 af 68 8f 09 08 af 68 8f 06 08 af af
>3a2af8		0e 08 af 29 f7 8f 0e 08 af 20 70 20 28 60 08 e2
>3a2b08		20 48 20 1a 1c 20 e1 06 e2 20 a5 23 29 0f 0a 0a
>3a2b18		0a 0a 83 01 a9 2c 20 38 21 20 1a 1c 20 e1 06 a5
>3a2b28		23 29 0f 03 01 8f 1e 00 00 e2 20 68 28 60 08 c2
>3a2b38		20 f4 00 00 e2 20 20 1a 1c 20 e1 06 a5 23 83 01
>3a2b48		a9 2c 20 38 21 20 1a 1c 20 e1 06 a5 23 83 02 a9
>3a2b58		2c 20 38 21 20 1a 1c 20 e1 06 a5 23 8f 0d 00 af
>3a2b68		a3 02 8f 0e 00 af a3 01 8f 0f 00 af c2 20 68 28
>3a2b78		60 08 c2 20 f4 00 00 e2 20 20 1a 1c 20 cf 05 a5
>3a2b88		23 f0 16 a9 01 8f 04 00 af a9 20 8f 08 00 af 8f
>3a2b98		09 00 af 22 2c 11 00 80 0a a9 00 8f 04 00 af 22
>3a2ba8		2c 11 00 a9 2c 85 37 20 6d 21 90 39 20 2b 20 20
>3a2bb8		1a 1c 20 e1 06 a5 23 83 01 a9 2c 20 38 21 20 1a
>3a2bc8		1c 20 e1 06 a5 23 83 02 a9 2c 20 38 21 20 1a 1c
>3a2bd8		20 e1 06 a5 23 8f 05 00 af a3 02 8f 06 00 af a3
>3a2be8		01 8f 07 00 af c2 20 68 28 60 08 c2 20 3b 38 e9
>3a2bf8		05 00 1b e2 20 20 1a 1c 20 e1 06 a5 23 c9 0a 90
>3a2c08		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f
>3a2c18		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>3a2c28		83 01 a9 2c 20 38 21 20 1a 1c 20 e1 06 a5 23 83
>3a2c38		02 a9 2c 20 38 21 20 1a 1c 20 e1 06 a5 23 83 03
>3a2c48		a9 2c 20 38 21 20 1a 1c 20 e1 06 a5 23 83 04 a9
>3a2c58		2c 20 38 21 20 1a 1c 20 e1 06 a5 23 83 05 a9 af
>3a2c68		85 a0 a3 01 0a c2 20 29 ff 00 aa bf aa 2c 3a 85
>3a2c78		9e e2 20 a3 02 c2 20 29 ff 00 0a 0a 18 65 9e 85
>3a2c88		9e e2 20 a0 02 00 a3 03 97 9e a0 01 00 a3 04 97
>3a2c98		9e a0 00 00 a3 05 97 9e c2 20 3b 18 69 05 00 1b
>3a2ca8		28 60 00 20 00 24 00 28 00 2c 00 30 00 34 00 38
>3a2cb8		00 3c 40 1f 80 1f da 5a 08 20 1a 1c 20 cf 05 c2
>3a2cc8		20 a5 23 89 00 01 d0 17 af 00 00 af 89 00 01 f0
>3a2cd8		0e e2 20 a9 00 8f 01 00 af a9 01 8f 01 00 af c2
>3a2ce8		20 a5 23 8f 00 00 af e2 20 a5 24 c2 20 29 03 00
>3a2cf8		0a aa c2 20 bf 45 2d 3a 8f 10 f0 3a bf 4d 2d 3a
>3a2d08		8f 12 f0 3a af 10 f0 3a 8f 08 01 00 af 12 f0 3a
>3a2d18		8f 0a 01 00 af 0c 01 00 8f 14 f0 3a e2 20 af 0e
>3a2d28		01 00 8f 16 f0 3a 22 2c 11 00 c2 20 af 1a 00 00
>3a2d38		aa af 1c 00 00 a8 20 20 00 28 7a fa 60 80 02 20
>3a2d48		03 40 01 90 01 e0 01 58 02 f0 00 2c 01 50 00 64
>3a2d58		00 28 00 32 00 3c 00 4b 00 1e 00 32 00 48 00 5c
>3a2d68		00 20 00 2a 00 34 00 43 00 16 00 34 00 da 08 c2
>3a2d78		30 c9 02 00 b0 1c 0a 0a aa bf 00 f0 3a 85 9e bf
>3a2d88		02 f0 3a 85 a0 c9 f0 00 b0 08 c9 b0 00 90 03 28
>3a2d98		fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a2da8		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>3a2db8		08 da 08 c2 30 c9 02 00 b0 17 0a 0a aa bf 08 f0
>3a2dc8		3a 85 9e bf 0a f0 3a 85 a0 c9 40 00 b0 03 28 fa
>3a2dd8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a2de8		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>3a2df8		08 c2 30 3b 38 e9 07 00 1b 20 1a 1c 20 e1 06 c2
>3a2e08		20 a5 23 c9 02 00 b0 59 83 01 e2 20 a9 2c 20 38
>3a2e18		21 20 1a 1c 20 e1 06 a5 23 83 03 a9 2c 20 38 21
>3a2e28		20 1a 1c 20 e1 06 a3 01 0a 0a 0a aa a3 03 d0 05
>3a2e38		a5 23 0a 80 04 a5 23 38 2a 9f 00 01 af c2 20 a9
>3a2e48		2c 00 85 37 20 6d 21 b0 37 c2 20 08 c2 20 a9 00
>3a2e58		00 85 23 a9 b0 00 85 25 e2 20 a9 00 85 27 28 80
>3a2e68		27 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a2e78		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>3a2e88		c2 20 20 2b 20 20 1a 1c c2 20 a3 01 0a 0a aa a5
>3a2e98		23 9f 00 f0 3a 9f 08 f0 3a 83 04 a5 25 9f 02 f0
>3a2ea8		3a 38 e9 b0 00 9f 0a f0 3a 83 06 a3 01 0a 0a 0a
>3a2eb8		aa e2 20 a3 04 9f 01 01 af a3 05 9f 02 01 af a3
>3a2ec8		06 9f 03 01 af a9 00 9f 04 01 af 9f 05 01 af c2
>3a2ed8		30 3b 18 69 07 00 1b 28 60 08 c2 20 48 a9 00 08
>3a2ee8		5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00
>3a2ef8		20 6c 1d e2 20 dc d4 08 08 c2 20 20 1a 1c 20 e1
>3a2f08		06 a5 23 20 b9 2d c2 20 a5 9e 8f 05 04 af af 14
>3a2f18		f0 3a 8f 08 04 af e2 20 a5 a0 8f 07 04 af af 16
>3a2f28		f0 3a 8f 0a 04 af a9 00 8f 01 04 af a9 85 8f 00
>3a2f38		04 af af 01 04 af 30 fa a9 00 8f 00 04 af 28 60
>3a2f48		08 c2 20 a5 5d 8f 08 01 00 af 10 f0 3a 8f 0a 01
>3a2f58		00 18 af 0c 01 00 65 59 85 0c af 0e 01 00 69 00
>3a2f68		00 85 0e 18 a5 0c 65 9e 85 0c a5 0e 65 a0 85 0e
>3a2f78		e2 20 a5 55 87 0c 28 60 c2 20 a9 01 00 85 dd 38
>3a2f88		a5 61 e5 59 85 69 10 0b 49 ff ff 1a 85 69 a9 ff
>3a2f98		ff 85 dd a9 01 00 85 df 38 a5 65 e5 5d 85 6d 10
>3a2fa8		0b 49 ff ff 1a 85 6d a9 ff ff 85 df a5 6d c5 69
>3a2fb8		b0 04 a5 69 80 06 a5 6d 49 ff ff 1a 48 0a 68 6a
>3a2fc8		85 71 20 48 2f a5 59 c5 61 d0 06 a5 5d c5 65 f0
>3a2fd8		36 a5 71 85 75 a5 69 49 ff ff 1a c5 75 10 10 f0
>3a2fe8		0e 38 a5 71 e5 6d 85 71 18 a5 59 65 dd 85 59 a5
>3a2ff8		75 c5 6d 10 cd f0 cb 18 a5 71 65 69 85 71 18 a5
>3a3008		5d 65 df 85 5d 80 bb 60 08 c2 20 3b 38 e9 06 00
>3a3018		1b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a3028		00 48 ab 68 28 c2 30 20 1a 1c 20 e1 06 83 01 a9
>3a3038		2c 00 20 38 21 20 1a 1c 20 cf 05 a5 23 83 03 a9
>3a3048		2c 00 20 38 21 20 1a 1c 20 cf 05 a5 23 83 05 a9
>3a3058		2c 00 20 38 21 20 1a 1c 20 e1 06 a5 23 85 55 a3
>3a3068		03 85 59 a3 05 85 5d a3 01 20 75 2d 20 48 2f c2
>3a3078		20 3b 18 69 06 00 1b 28 60 08 c2 20 3b 38 e9 0a
>3a3088		00 1b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a3098		a9 00 48 ab 68 28 c2 30 20 1a 1c 20 e1 06 83 01
>3a30a8		a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a5 23 83 03
>3a30b8		a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a5 23 83 05
>3a30c8		a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a5 23 83 07
>3a30d8		a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a5 23 83 09
>3a30e8		a9 2c 00 20 38 21 20 1a 1c 20 e1 06 a5 23 85 55
>3a30f8		a3 03 85 59 a3 05 85 5d a3 07 85 61 a3 09 85 65
>3a3108		a3 01 20 75 2d 20 80 2f c2 20 3b 18 69 0a 00 1b
>3a3118		28 60 08 c2 20 3b 38 e9 0c 00 1b 08 c2 20 48 a9
>3a3128		00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2
>3a3138		30 20 1a 1c 20 e1 06 83 01 a9 2c 00 20 38 21 20
>3a3148		1a 1c 20 cf 05 a5 23 83 03 a9 2c 00 20 38 21 20
>3a3158		1a 1c 20 cf 05 a5 23 83 05 a9 2c 00 20 38 21 20
>3a3168		1a 1c 20 cf 05 a5 23 83 07 a9 2c 00 20 38 21 20
>3a3178		1a 1c 20 cf 05 a5 23 83 09 a9 2c 00 20 38 21 20
>3a3188		1a 1c 20 e1 06 a5 23 83 0b a3 01 20 b9 2d a9 07
>3a3198		00 8f 00 04 af c2 20 a3 05 8f 00 01 00 af 10 f0
>3a31a8		3a 8f 02 01 00 18 af 04 01 00 63 03 85 0c e2 20
>3a31b8		af 06 01 00 69 00 85 0e c2 20 18 a5 9e 65 0c 8f
>3a31c8		05 04 af e2 20 a5 a0 65 0e 8f 07 04 af c2 20 38
>3a31d8		a3 07 e3 03 85 0c 8f 08 04 af 38 af 10 f0 3a 8f
>3a31e8		0e 04 af 38 a3 09 e3 05 8f 0a 04 af e2 20 a3 0b
>3a31f8		8f 01 04 af af 00 04 af 09 80 8f 00 04 af af 01
>3a3208		04 af 30 fa a9 00 8f 00 04 af c2 20 3b 18 69 0c
>3a3218		00 1b 28 60 08 c2 20 c9 40 00 b0 13 0a 0a 0a 18
>3a3228		69 00 0c 85 9e a9 af 00 69 00 00 85 a0 28 60 08
>3a3238		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08
>3a3248		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 08 c2
>3a3258		20 3b 38 e9 03 00 1b c2 30 20 1a 1c 20 e1 06 a5
>3a3268		23 83 01 a9 2c 00 20 38 21 e2 20 20 1a 1c 20 e1
>3a3278		06 a5 23 c9 08 b0 56 83 03 a9 2c 20 38 21 20 1a
>3a3288		1c 20 cf 05 c2 20 38 a5 23 e9 00 00 85 23 a5 25
>3a3298		e9 b0 00 85 25 30 36 c2 20 a3 01 aa 20 1c 32 a5
>3a32a8		23 a0 01 00 97 9e e2 20 a5 25 c8 c8 97 9e bf 18
>3a32b8		f0 3a 29 f1 85 0c a3 03 0a 29 0e 05 0c 87 9e 9f
>3a32c8		18 f0 3a c2 20 3b 18 69 03 00 1b 28 60 08 c2 20
>3a32d8		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>3a32e8		20 29 ff 00 20 6c 1d e2 20 dc d4 08 08 c2 20 3b
>3a32f8		38 e9 04 00 1b c2 30 20 1a 1c 20 e1 06 a5 23 83
>3a3308		01 a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a5 23 83
>3a3318		03 a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a3 01 20
>3a3328		1c 32 a3 03 a0 04 00 97 9e a5 23 a0 06 00 97 9e
>3a3338		c2 20 3b 18 69 04 00 1b 28 60 08 c2 20 3b 38 e9
>3a3348		03 00 1b c2 30 20 1a 1c 20 e1 06 a5 23 83 01 a9
>3a3358		2c 00 20 38 21 e2 20 20 1a 1c 20 cf 05 a5 23 d0
>3a3368		04 83 03 80 04 a9 01 83 03 a9 2c 85 37 20 6d 21
>3a3378		b0 20 c2 30 a3 01 aa 20 1c 32 e2 20 bf 18 f0 3a
>3a3388		29 fe 85 0c a3 03 29 01 05 0c 9f 18 f0 3a 87 9e
>3a3398		80 36 c2 30 20 2b 20 20 1a 1c 20 e1 06 a5 23 c9
>3a33a8		08 00 b0 2e 0a 0a 0a 0a 85 0c a3 01 aa 20 1c 32
>3a33b8		e2 20 a3 03 29 01 05 0c 85 0c bf 18 f0 3a 29 8e
>3a33c8		05 0c 87 9e 9f 18 f0 3a c2 20 3b 18 69 03 00 1b
>3a33d8		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a33e8		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>3a33f8		08 08 c2 20 c9 04 00 b0 19 8d 00 01 a9 04 00 8d
>3a3408		02 01 18 ad 04 01 69 80 02 85 9e a9 af 00 85 a0
>3a3418		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a3428		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>3a3438		08 08 c2 20 c9 04 00 b0 19 8d 00 01 a9 0c 00 8d
>3a3448		02 01 18 ad 04 01 69 00 02 85 9e a9 af 00 85 a0
>3a3458		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a3468		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>3a3478		08 08 c2 20 3b 38 e9 06 00 1b c2 20 20 1a 1c 20
>3a3488		e1 06 a5 23 83 01 a9 2c 00 20 38 21 20 1a 1c 20
>3a3498		e1 06 a5 23 83 03 a9 2c 00 20 38 21 20 1a 1c 20
>3a34a8		e1 06 a5 23 83 05 a9 2c 00 20 38 21 20 1a 1c 20
>3a34b8		cf 05 a3 01 20 f9 33 a5 23 87 9e e2 20 38 a5 25
>3a34c8		e9 b0 a0 02 00 97 9e a3 05 d0 0d e2 20 a3 03 29
>3a34d8		07 a0 03 00 97 9e 80 0d e2 20 a3 03 29 07 09 08
>3a34e8		a0 03 00 97 9e c2 20 3b 18 69 06 00 1b 28 60 08
>3a34f8		c2 20 3b 38 e9 06 00 1b c2 20 20 1a 1c 20 e1 06
>3a3508		a5 23 83 01 a9 2c 00 20 38 21 20 1a 1c 20 cf 05
>3a3518		a5 23 83 03 a9 2c 00 20 38 21 20 1a 1c 20 cf 05
>3a3528		a5 23 83 05 a9 2c 00 20 38 21 20 1a 1c 20 cf 05
>3a3538		a3 01 20 39 34 a5 23 a0 01 00 97 9e e2 20 38 a5
>3a3548		25 e9 b0 c8 c8 97 9e c2 20 a3 03 a0 04 00 97 9e
>3a3558		a3 05 a0 06 00 97 9e c2 20 3b 18 69 06 00 1b 28
>3a3568		60 08 c2 20 f4 00 00 c2 20 20 1a 1c 20 e1 06 a5
>3a3578		23 83 01 a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a3
>3a3588		01 20 39 34 a5 23 d0 06 e2 20 a9 00 80 04 e2 20
>3a3598		a9 01 e2 20 a0 00 00 97 9e c2 20 68 28 60 08 c2
>3a35a8		20 3b 38 e9 04 00 1b c2 20 20 1a 1c 20 e1 06 a5
>3a35b8		23 83 01 a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a5
>3a35c8		23 83 03 a9 2c 00 20 38 21 20 1a 1c 20 cf 05 a3
>3a35d8		01 20 39 34 a5 23 a0 0a 00 97 9e a3 03 a0 08 00
>3a35e8		97 9e c2 20 3b 18 69 04 00 1b 28 60 0b 08 08 c2
>3a35f8		20 48 a9 00 08 5b 68 28 e2 20 a9 00 8f 58 f0 3a
>3a3608		af 5c f0 3a c9 b0 b0 1c 8f 24 04 af af 5b f0 3a
>3a3618		8f 23 04 af af 5a f0 3a 8f 22 04 af a9 10 8f 58
>3a3628		f0 3a 80 17 38 e9 b0 8f 04 04 af af 5b f0 3a 8f
>3a3638		03 04 af af 5a f0 3a 8f 02 04 af af 59 f0 3a d0
>3a3648		3c af 58 f0 3a f0 1b af 5d f0 3a 8f 28 04 af af
>3a3658		5e f0 3a 8f 29 04 af af 5f f0 3a 8f 2a 04 af 82
>3a3668		8b 00 af 5d f0 3a 8f 08 04 af af 5e f0 3a 8f 09
>3a3678		04 af af 5f f0 3a 8f 0a 04 af 82 70 00 af 58 f0
>3a3688		3a 09 01 8f 58 f0 3a 89 10 f0 32 af 60 f0 3a 8f
>3a3698		28 04 af af 61 f0 3a 8f 29 04 af af 62 f0 3a 8f
>3a36a8		2a 04 af af 63 f0 3a 8f 2b 04 af af 64 f0 3a 8f
>3a36b8		2c 04 af af 65 f0 3a 8f 2d 04 af 80 30 af 60 f0
>3a36c8		3a 8f 08 04 af af 61 f0 3a 8f 09 04 af af 62 f0
>3a36d8		3a 8f 0a 04 af af 63 f0 3a 8f 0b 04 af af 64 f0
>3a36e8		3a 8f 0c 04 af af 65 f0 3a 8f 0d 04 af e2 20 af
>3a36f8		69 f0 3a c9 b0 b0 20 8f 27 04 af af 68 f0 3a 8f
>3a3708		26 04 af af 67 f0 3a 8f 25 04 af af 58 f0 3a 09
>3a3718		20 8f 58 f0 3a 80 17 38 e9 b0 8f 07 04 af af 68
>3a3728		f0 3a 8f 06 04 af af 67 f0 3a 8f 05 04 af af 66
>3a3738		f0 3a d0 3e af 58 f0 3a 89 20 f0 1b af 6a f0 3a
>3a3748		8f 28 04 af af 6b f0 3a 8f 29 04 af af 6c f0 3a
>3a3758		8f 2a 04 af 82 8b 00 af 6a f0 3a 8f 08 04 af af
>3a3768		6b f0 3a 8f 09 04 af af 6c f0 3a 8f 0a 04 af 82
>3a3778		70 00 af 58 f0 3a 09 02 8f 58 f0 3a 89 20 f0 32
>3a3788		af 6d f0 3a 8f 28 04 af af 6e f0 3a 8f 29 04 af
>3a3798		af 6f f0 3a 8f 2a 04 af af 70 f0 3a 8f 2b 04 af
>3a37a8		af 71 f0 3a 8f 2e 04 af af 72 f0 3a 8f 2f 04 af
>3a37b8		80 30 af 6d f0 3a 8f 08 04 af af 6e f0 3a 8f 09
>3a37c8		04 af af 6f f0 3a 8f 0a 04 af af 70 f0 3a 8f 0b
>3a37d8		04 af af 71 f0 3a 8f 0e 04 af af 72 f0 3a 8f 0f
>3a37e8		04 af af 58 f0 3a 29 30 f0 43 c9 10 f0 76 c9 20
>3a37f8		d0 03 82 8a 00 af 58 f0 3a 29 03 f0 23 c9 03 f0
>3a3808		23 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f
>3a3818		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>3a3828		a9 01 80 02 a9 03 8f 20 04 af 82 7d 00 af 58 f0
>3a3838		3a 29 03 f0 23 c9 03 f0 23 08 c2 20 48 a9 00 08
>3a3848		5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00
>3a3858		20 6c 1d e2 20 dc d4 08 a9 01 80 02 a9 03 8f 00
>3a3868		04 af 80 34 af 58 f0 3a 29 01 0a 09 11 8f 20 04
>3a3878		af af 58 f0 3a 29 02 09 11 8f 00 04 af 80 19 af
>3a3888		58 f0 3a 29 02 09 21 8f 20 04 af af 58 f0 3a 29
>3a3898		01 0a 09 21 8f 00 04 af af 00 04 af 09 80 8f 00
>3a38a8		04 af af 58 f0 3a 29 30 f0 0f af 20 04 af 09 80
>3a38b8		8f 20 04 af ea ea ea ea ea af 01 04 af 89 80 d0
>3a38c8		f8 a9 00 8f 20 04 af 8f 00 04 af 28 2b 60 0b 08
>3a38d8		e2 20 c2 10 a9 00 a2 00 00 8f 59 f0 3a e8 e0 1a
>3a38e8		00 d0 f6 20 8c 21 c9 e6 f0 23 c9 e7 f0 5e 08 c2
>3a38f8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a3908		c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 20 38 21
>3a3918		20 1a 1c 20 cf 05 c2 20 a5 23 8f 5a f0 3a e2 20
>3a3928		a5 25 8f 5c f0 3a a9 2c 20 38 21 20 1a 1c 20 cf
>3a3938		05 c2 20 a5 23 8f 5d f0 3a e2 20 a5 25 8f 5f f0
>3a3948		3a e2 20 a9 00 8f 59 f0 3a 82 74 00 20 38 21 20
>3a3958		1a 1c 20 cf 05 c2 20 a5 23 8f 5a f0 3a e2 20 a5
>3a3968		25 8f 5c f0 3a a9 2c 20 38 21 20 1a 1c 20 8b 06
>3a3978		c2 20 a5 23 8f 60 f0 3a 8d 00 01 a9 2c 00 20 38
>3a3988		21 20 1a 1c 20 8b 06 c2 20 a5 23 8f 62 f0 3a 8d
>3a3998		02 01 a9 2c 00 20 38 21 20 1a 1c 20 8b 06 c2 20
>3a39a8		a5 23 8f 64 f0 3a c2 20 ad 04 01 8f 5d f0 3a e2
>3a39b8		20 ad 06 01 8f 5f f0 3a e2 20 a9 01 8f 59 f0 3a
>3a39c8		e2 20 a9 9c 20 38 21 20 8c 21 c9 e6 f0 23 c9 e7
>3a39d8		f0 5e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a39e8		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>3a39f8		08 20 38 21 20 1a 1c 20 cf 05 c2 20 a5 23 8f 67
>3a3a08		f0 3a e2 20 a5 25 8f 69 f0 3a a9 2c 20 38 21 20
>3a3a18		1a 1c 20 cf 05 c2 20 a5 23 8f 6a f0 3a e2 20 a5
>3a3a28		25 8f 6c f0 3a e2 20 a9 00 8f 66 f0 3a 82 74 00
>3a3a38		20 38 21 20 1a 1c 20 cf 05 c2 20 a5 23 8f 67 f0
>3a3a48		3a e2 20 a5 25 8f 69 f0 3a a9 2c 20 38 21 20 1a
>3a3a58		1c 20 8b 06 c2 20 a5 23 8f 6d f0 3a 8d 00 01 a9
>3a3a68		2c 00 20 38 21 20 1a 1c 20 8b 06 c2 20 a5 23 8f
>3a3a78		6f f0 3a 8d 02 01 a9 2c 00 20 38 21 20 1a 1c 20
>3a3a88		8b 06 c2 20 a5 23 8f 71 f0 3a c2 20 ad 04 01 8f
>3a3a98		6a f0 3a e2 20 ad 06 01 8f 6c f0 3a e2 20 a9 01
>3a3aa8		8f 66 f0 3a c2 20 af 5d f0 3a cf 6a f0 3a d0 14
>3a3ab8		e2 20 af 5f f0 3a cf 6c f0 3a d0 08 c2 20 20 f4
>3a3ac8		35 28 2b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3ad8		a9 0a 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>3a3ae8		dc d4 08 08 c2 30 20 1a 1c 20 e1 06 a5 23 48 a9
>3a3af8		2c 00 20 38 21 20 1a 1c 20 e1 06 a4 23 fa 20 20
>3a3b08		00 28 60 08 20 4c 20 e2 20 a7 00 d0 03 4c b3 3b
>3a3b18		c9 3a d0 03 4c b3 3b c9 22 d0 0b 20 26 1b 20 c1
>3a3b28		44 a9 3b 20 38 21 20 60 04 90 44 20 88 52 90 3f
>3a3b38		a9 3f 20 18 00 a9 20 20 18 00 20 10 00 e2 20 a5
>3a3b48		ea c9 02 f0 49 c9 00 d0 03 82 84 00 c9 01 f0 5d
>3a3b58		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a3b68		08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 08
>3a3b78		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a3b88		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 c2 20
>3a3b98		a9 00 4c 85 23 a9 00 00 85 25 e2 20 a9 02 85 27
>3a3ba8		c2 20 20 eb 51 a9 0d 00 20 18 00 28 60 c2 20 a5
>3a3bb8		00 85 40 a5 02 85 42 a9 00 4c 85 00 a9 00 00 85
>3a3bc8		02 20 aa 58 c2 20 a5 40 85 00 a5 42 85 02 80 d0
>3a3bd8		c2 20 a5 00 85 40 a5 02 85 42 a9 00 4c 85 00 a9
>3a3be8		00 00 85 02 20 56 08 c2 20 a5 40 85 00 a5 42 85
>3a3bf8		02 80 ad 08 20 4c 20 e2 20 a7 00 f0 47 c9 3a f0
>3a3c08		43 20 60 04 90 40 20 88 52 90 3b 20 7a 14 20 14
>3a3c18		00 e2 20 a0 00 00 97 16 a9 00 c8 97 16 c2 20 a5
>3a3c28		16 85 23 a5 18 85 25 e2 20 a9 02 85 27 20 eb 51
>3a3c38		20 4c 20 a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20
>3a3c48		2b 20 80 b0 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3c58		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>3a3c68		e2 20 dc d4 08 08 20 1a 1c 20 cf 05 e2 20 a9 5c
>3a3c78		85 a2 c2 20 a5 23 85 a3 e2 20 a5 25 85 a5 e2 20
>3a3c88		a9 2c 85 37 20 6d 21 90 41 20 2b 20 20 1a 1c 20
>3a3c98		8b 06 c2 20 a5 23 85 55 e2 20 a9 2c 85 37 20 6d
>3a3ca8		21 90 27 20 2b 20 20 1a 1c 20 8b 06 c2 20 a5 23
>3a3cb8		85 59 e2 20 a9 2c 85 37 20 6d 21 90 0d 20 2b 20
>3a3cc8		20 1a 1c 20 8b 06 c2 20 a4 23 a6 59 a5 55 0b 8b
>3a3cd8		08 22 a2 08 00 28 ab 2b 20 70 20 28 60 08 c2 20
>3a3ce8		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a3cf8		20 29 ff 00 20 6c 1d e2 20 dc d4 08 08 e2 20 20
>3a3d08		4c 20 20 88 52 90 64 a9 8f 20 38 21 a9 01 20 79
>3a3d18		19 a2 01 00 a9 00 8f 00 4d 00 20 1a 1c 20 8b 06
>3a3d28		c2 20 a5 23 9f 00 4d 00 e2 20 af 00 4d 00 1a 8f
>3a3d38		00 4d 00 30 55 e8 e8 20 4c 20 a7 00 c9 2c f0 25
>3a3d48		c9 90 d0 27 20 2b 20 20 06 65 c2 20 a5 c0 85 23
>3a3d58		e2 20 a5 c2 85 25 64 26 a5 ea 09 80 85 ea 85 27
>3a3d68		20 eb 51 28 60 20 2b 20 4c 22 3d 08 c2 20 48 a9
>3a3d78		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>3a3d88		ff 00 20 6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00
>3a3d98		08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff
>3a3da8		00 20 6c 1d e2 20 dc d4 08 08 20 4c 20 e2 20 a7
>3a3db8		00 f0 28 c9 3a f0 24 20 60 04 90 21 20 88 52 90
>3a3dc8		1c 20 04 3e 20 eb 51 20 4c 20 a7 00 f0 0d c9 3a
>3a3dd8		f0 09 c9 2c d0 07 20 2b 20 80 cf 28 60 08 c2 20
>3a3de8		48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2
>3a3df8		20 29 ff 00 20 6c 1d e2 20 dc d4 08 08 a5 02 85
>3a3e08		42 a5 00 85 40 a5 1c 85 46 a5 1a 85 44 c2 20 a5
>3a3e18		3a d0 04 a5 38 f0 4e a5 38 85 00 a5 3a 85 02 a5
>3a3e28		3c 85 1a a5 3e 85 1c e2 20 a7 00 f0 53 c9 3a f0
>3a3e38		4f c9 2c d0 03 20 2b 20 20 4c 20 a7 00 c9 22 f0
>3a3e48		4e 20 79 04 b0 4e 08 c2 20 48 a9 00 08 5b 68 28
>3a3e58		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>3a3e68		e2 20 dc d4 08 c2 20 a9 00 00 85 1a a9 36 00 85
>3a3e78		1c 18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02
>3a3e88		e2 20 a9 80 85 35 a9 ab 85 37 20 82 20 80 a9 20
>3a3e98		26 1b 80 03 20 5b 1a c2 20 a5 00 85 38 a5 02 85
>3a3ea8		3a a5 1a 85 3c a5 1c 85 3e a5 44 85 1a a5 46 85
>3a3eb8		1c a5 40 85 00 a5 42 85 02 28 60 20 70 20 60 64
>3a3ec8		38 64 3a 64 3c 64 3e 60 20 24 00 60 20 1a 1c c2
>3a3ed8		20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0 22 20
>3a3ee8		2b 20 20 1a 1c c2 20 a5 26 d0 35 68 85 08 68 85
>3a3ef8		0a c2 20 a5 23 87 08 e2 20 a0 02 00 a5 25 97 08
>3a3f08		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3f18		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>3a3f28		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>3a3f38		08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 20
>3a3f48		1a 1c c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c
>3a3f58		d0 19 20 2b 20 20 1a 1c c2 20 a5 25 d0 2c 68 85
>3a3f68		08 68 85 0a c2 20 a5 23 87 08 60 08 c2 20 48 a9
>3a3f78		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>3a3f88		ff 00 20 6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00
>3a3f98		08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff
>3a3fa8		00 20 6c 1d e2 20 dc d4 08 20 1a 1c c2 20 a5 25
>3a3fb8		48 a5 23 48 e2 20 a7 00 c9 2c d0 1f 20 2b 20 20
>3a3fc8		1a 1c e2 20 a5 24 d0 32 c2 20 a5 25 d0 2c 68 85
>3a3fd8		08 68 85 0a e2 20 a5 23 87 08 60 08 c2 20 48 a9
>3a3fe8		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>3a3ff8		ff 00 20 6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00
>3a4008		08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff
>3a4018		00 20 6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00 08
>3a4028		5b 68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00
>3a4038		20 6c 1d e2 20 dc d4 08 08 e2 20 a7 00 f0 05 20
>3a4048		2b 20 80 f7 28 60 08 28 60 08 28 60 08 28 60 08
>3a4058		c2 20 a5 1c 20 33 1d a5 1a 20 33 1d a5 02 48 a5
>3a4068		00 48 20 70 20 a5 02 20 33 1d a5 00 20 33 1d 68
>3a4078		85 00 68 85 02 20 4c 20 20 88 52 b0 1f 08 c2 20
>3a4088		48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00 c2
>3a4098		20 29 ff 00 20 6c 1d e2 20 dc d4 08 e2 20 a5 ea
>3a40a8		20 4a 1d a5 e9 20 4a 1d c2 20 a5 e7 20 33 1d 20
>3a40b8		4c 20 e2 20 a7 00 c9 8a d0 6a a5 ea c9 00 f0 04
>3a40c8		c9 01 f0 00 20 2b 20 20 1a 1c 20 eb 51 e2 20 a9
>3a40d8		9c 20 38 21 20 1a 1c c2 20 a5 27 20 33 1d a5 25
>3a40e8		20 33 1d a5 23 20 33 1d e2 20 a9 9d 85 37 20 6d
>3a40f8		21 90 1b 20 2b 20 20 1a 1c e2 20 a5 27 20 33 1d
>3a4108		c2 20 a5 25 20 33 1d a5 23 20 33 1d 80 14 c2 20
>3a4118		a9 00 00 20 33 1d a9 00 00 20 33 1d a9 01 00 20
>3a4128		33 1d 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4138		a9 02 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>3a4148		dc d4 08 08 8b 08 e2 20 48 a9 00 48 ab 68 28 08
>3a4158		c2 20 48 a9 00 08 5b 68 28 c2 30 a4 33 c8 c8 c2
>3a4168		20 b9 0c 00 85 e7 b9 0e 00 e2 20 85 e9 b9 10 00
>3a4178		85 ea c2 20 5a 20 89 50 7a c2 20 b9 00 00 85 29
>3a4188		b9 02 00 85 2b e2 20 b9 04 00 85 2d c2 20 5a 20
>3a4198		f1 26 20 eb 51 7a c2 20 b9 06 00 85 29 b9 08 00
>3a41a8		85 2b e2 20 b9 0a 00 85 2d c2 20 b9 02 00 30 0a
>3a41b8		20 7a 29 20 98 05 f0 28 80 08 20 3a 29 20 98 05
>3a41c8		f0 1e c2 20 b9 12 00 85 00 b9 14 00 85 02 b9 16
>3a41d8		00 85 1a b9 18 00 85 1c e2 20 a9 03 85 dc 80 17
>3a41e8		a2 23 08 20 3a 19 c2 20 18 a5 33 69 1a 00 85 33
>3a41f8		a5 35 69 00 00 85 35 ab 28 60 08 a5 1a 48 a5 1c
>3a4208		48 20 4c 20 20 56 08 a5 23 f0 26 20 2b 23 90 42
>3a4218		e2 20 a9 02 85 dc 20 70 20 c2 20 68 20 33 1d 68
>3a4228		20 33 1d a5 02 20 33 1d a5 00 20 33 1d e6 31 28
>3a4238		60 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4248		02 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc
>3a4258		d4 08 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4268		a9 06 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>3a4278		dc d4 08 08 c2 30 a5 31 f0 1e 20 55 1d 85 00 20
>3a4288		55 1d 85 02 20 55 1d 85 1a 20 55 1d 85 1c c6 31
>3a4298		e2 20 a9 03 85 dc 28 60 08 c2 20 48 a9 00 08 5b
>3a42a8		68 28 e2 20 a9 07 8f d3 08 00 c2 20 29 ff 00 20
>3a42b8		6c 1d e2 20 dc d4 08 08 20 1a 1c 20 98 05 f0 1c
>3a42c8		e2 20 a9 97 20 38 21 20 56 08 20 98 05 f0 12 20
>3a42d8		2b 23 90 2c e2 20 a9 02 85 dc 80 03 20 70 20 28
>3a42e8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a42f8		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>3a4308		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d3
>3a4318		08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 08
>3a4328		e2 20 a9 01 85 dc 28 60 08 20 4c 20 20 56 08 a5
>3a4338		23 f0 0d 20 2b 23 90 27 e2 20 a9 02 85 dc 28 60
>3a4348		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>3a4358		08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 08
>3a4368		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d3 08
>3a4378		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 20 dc
>3a4388		18 20 24 10 20 88 4f 60 08 a7 00 10 03 20 2b 20
>3a4398		20 88 52 b0 03 4c 07 44 e2 20 20 8c 21 c9 8f d0
>3a43a8		0e a9 8f 20 38 21 a9 00 8f 00 4d 00 20 5e 1a 20
>3a43b8		4c 20 e2 20 a7 00 c9 8a f0 03 4c 07 44 20 2b 20
>3a43c8		a5 ea 48 a5 e9 48 a5 e8 48 a5 e7 48 20 1a 1c 68
>3a43d8		85 e7 68 85 e8 68 85 e9 68 85 ea 29 80 f0 1b 20
>3a43e8		fb 4f 90 3a c2 20 a0 09 00 b7 08 85 c0 e2 20 c8
>3a43f8		c8 b7 08 85 c2 20 e7 66 80 03 20 eb 51 28 60 08
>3a4408		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a4418		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 08 c2
>3a4428		20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00
>3a4438		c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 08 e2 20
>3a4448		20 8c 21 c9 00 f0 6d 20 1a 1c e2 20 a5 27 c9 ff
>3a4458		f0 1b c9 02 d0 05 20 c1 44 80 12 c9 00 d0 05 20
>3a4468		e1 44 80 09 c9 01 d0 4f 20 f4 44 80 00 20 4c 20
>3a4478		a7 00 f0 40 c9 3a f0 3c c9 2c f0 23 c9 3b f0 24
>3a4488		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>3a4498		08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 a9
>3a44a8		09 20 18 00 20 2b 20 20 4c 20 a7 00 f0 09 c9 3a
>3a44b8		f0 05 80 93 20 55 03 28 60 08 8b 08 c2 20 48 a9
>3a44c8		00 08 5b 68 28 e2 20 c2 10 a0 00 00 b7 23 f0 06
>3a44d8		20 18 00 c8 80 f6 ab 28 60 08 c2 20 20 d9 14 a5
>3a44e8		16 85 23 a5 18 85 25 20 c1 44 28 60 08 20 51 5c
>3a44f8		c2 20 a5 16 85 23 a5 18 85 25 20 c1 44 28 60 08
>3a4508		e2 20 85 b5 4a 4a 4a 4a 29 0f 18 69 30 97 16 c8
>3a4518		a5 b5 29 0f 18 69 30 97 16 c8 28 60 e2 20 a9 8f
>3a4528		20 38 21 08 20 1a 1c e2 20 c2 10 af 0e 08 af 09
>3a4538		08 8f 0e 08 af 20 7a 14 a0 00 00 af 06 08 af 20
>3a4548		07 45 a9 2f 97 16 c8 af 09 08 af 20 07 45 a9 2f
>3a4558		97 16 c8 af 0f 08 af 20 07 45 af 0a 08 af 20 07
>3a4568		45 a9 00 97 16 af 0e 08 af 29 f7 8f 0e 08 af c2
>3a4578		20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28
>3a4588		e2 20 20 2b 20 60 e2 20 a9 8f 20 38 21 08 20 1a
>3a4598		1c e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08 af 20
>3a45a8		7a 14 a0 00 00 af 04 08 af 29 7f 20 07 45 a9 3a
>3a45b8		97 16 c8 af 02 08 af 20 07 45 a9 3a 97 16 c8 af
>3a45c8		00 08 af 20 07 45 a9 00 97 16 af 0e 08 af 29 f7
>3a45d8		8f 0e 08 af c2 20 a5 16 85 23 a5 18 85 25 e2 20
>3a45e8		a9 02 85 27 28 e2 20 20 2b 20 60 e2 20 a9 8f 20
>3a45f8		38 21 08 20 1a 1c e2 20 a9 01 85 27 a9 03 8f 00
>3a4608		e2 af a9 01 8f 01 e2 af c2 30 af 84 e8 af 8f 08
>3a4618		e2 af af 84 e8 af 29 ff 7f 8f 0a e2 af a9 ff ff
>3a4628		8f 0c e2 af a9 ff 7f 8f 0e e2 af ea ea ea af 08
>3a4638		e2 af 85 23 af 0a e2 af 85 25 28 e2 20 20 2b 20
>3a4648		60 e2 20 a9 8f 20 38 21 08 c2 30 20 1a 1c 20 61
>3a4658		06 c2 20 a5 25 48 a5 23 48 20 4c 20 e2 20 a7 00
>3a4668		c9 2c f0 03 4c c0 46 20 2b 20 20 1a 1c 20 8b 06
>3a4678		c2 20 a5 23 48 20 4c 20 e2 20 a7 00 c9 2c f0 03
>3a4688		4c c0 46 20 2b 20 20 1a 1c 20 8b 06 c2 20 a5 23
>3a4698		85 8f e2 20 a5 25 85 91 c2 20 68 85 29 a9 00 00
>3a46a8		85 2b 68 85 23 68 85 25 e2 20 a9 02 85 27 20 d2
>3a46b8		16 e2 20 20 2b 20 28 60 08 c2 20 48 a9 00 08 5b
>3a46c8		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a46d8		6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>3a46e8		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 6c
>3a46f8		1d e2 20 dc d4 08 e2 20 a9 8f 20 38 21 08 c2 30
>3a4708		20 1a 1c e2 20 a5 27 c9 02 f0 03 4c 82 47 c2 20
>3a4718		a5 25 48 a5 23 48 20 4c 20 e2 20 a7 00 c9 2c f0
>3a4728		03 4c a1 47 20 2b 20 20 1a 1c e2 20 a5 27 c9 00
>3a4738		d0 48 c2 20 a5 23 85 8f c2 20 68 85 23 68 85 25
>3a4748		e2 20 a9 02 85 27 e2 20 a0 00 00 b7 23 f0 03 c8
>3a4758		80 f9 c2 20 98 38 e5 8f 30 09 85 29 a9 00 00 85
>3a4768		2b 80 07 a9 00 00 85 29 85 2b e2 20 a9 00 85 2d
>3a4778		20 d2 16 e2 20 20 2b 20 28 60 08 c2 20 48 a9 00
>3a4788		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a4798		00 20 6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00 08
>3a47a8		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>3a47b8		20 6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a47c8		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a47d8		6c 1d e2 20 dc d4 08 e2 20 a9 8f 20 38 21 08 c2
>3a47e8		30 20 1a 1c e2 20 a5 27 c9 02 f0 03 4c 4b 48 c2
>3a47f8		20 a5 25 48 a5 23 48 20 4c 20 e2 20 a7 00 c9 2c
>3a4808		f0 03 4c 6a 48 20 2b 20 20 1a 1c e2 20 a5 27 c9
>3a4818		00 d0 30 c2 20 a5 23 85 8f c2 20 a9 00 00 85 29
>3a4828		a9 00 00 85 2b e2 20 a9 00 85 2d c2 20 68 85 23
>3a4838		68 85 25 e2 20 a9 02 85 27 20 d2 16 e2 20 20 2b
>3a4848		20 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4858		04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc
>3a4868		d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a4878		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>3a4888		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a4898		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>3a48a8		e2 20 a9 8f 20 38 21 20 1a 1c c2 10 e2 20 a5 27
>3a48b8		c9 02 d0 23 c2 20 a5 00 85 40 a5 02 85 42 a5 23
>3a48c8		85 00 a5 25 85 02 20 56 08 a5 40 85 00 a5 42 85
>3a48d8		02 e2 20 20 2b 20 60 08 c2 20 48 a9 00 08 5b 68
>3a48e8		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c
>3a48f8		1d e2 20 dc d4 08 e2 20 a9 8f 20 38 21 08 20 1a
>3a4908		1c c2 10 e2 20 a5 27 c9 00 d0 1a 20 d9 14 c2 20
>3a4918		a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28 e2
>3a4928		20 20 2b 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4938		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2
>3a4948		20 dc d4 08 e2 20 a9 8f 20 38 21 08 20 1a 1c 20
>3a4958		61 06 c2 20 64 0c 64 0e e2 30 a0 00 b7 23 c9 20
>3a4968		f0 04 c9 24 d0 03 c8 80 f3 b7 23 20 8a 04 90 1e
>3a4978		c2 20 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e 06 0c
>3a4988		26 0e e2 20 20 ab 04 05 0c 85 0c c8 80 db c2 20
>3a4998		a5 0c 85 23 a5 0e 85 25 e2 20 a9 00 85 27 28 e2
>3a49a8		20 20 2b 20 60 e2 20 a9 8f 20 38 21 08 20 1a 1c
>3a49b8		20 cf 05 20 7a 14 e2 30 a0 ff a9 00 97 16 88 a5
>3a49c8		23 29 0f aa bf 00 d0 3a 97 16 88 a5 23 29 f0 4a
>3a49d8		4a 4a 4a aa bf 00 d0 3a 97 16 88 a5 24 85 23 a5
>3a49e8		25 85 24 a5 26 85 25 a9 00 85 26 a5 23 d0 d0 a5
>3a49f8		24 d0 cc a5 25 d0 c8 98 38 65 16 85 23 a5 17 85
>3a4a08		24 a5 18 85 25 a5 19 85 26 a9 02 85 27 28 e2 20
>3a4a18		20 2b 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4a28		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>3a4a38		dc d4 08 e2 20 a9 8f 20 38 21 20 1a 1c e2 20 a5
>3a4a48		27 c9 02 d0 1f 8b a5 25 48 ab c2 10 a6 23 20 66
>3a4a58		15 ab 84 23 c2 20 64 25 e2 20 a9 00 85 27 e2 20
>3a4a68		20 2b 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4a78		a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>3a4a88		dc d4 08 e2 20 a9 8f 20 38 21 20 1a 1c e2 20 a5
>3a4a98		27 c9 00 d0 33 a5 25 c9 b0 90 1b c9 f0 b0 17 e2
>3a4aa8		20 a7 23 c2 20 af 02 09 af 89 00 80 d0 f7 e2 20
>3a4ab8		af 01 09 af 80 04 e2 20 a7 23 85 23 64 24 64 25
>3a4ac8		64 30 e2 20 20 2b 20 60 08 c2 20 48 a9 00 08 5b
>3a4ad8		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>3a4ae8		6c 1d e2 20 dc d4 08 e2 20 a9 8f 20 38 21 20 1a
>3a4af8		1c e2 20 a5 27 c9 00 d0 1d c2 20 a7 23 85 0c e2
>3a4b08		20 a0 02 00 b7 23 85 25 64 26 c2 20 a5 0c 85 23
>3a4b18		e2 20 20 2b 20 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4b28		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>3a4b38		e2 20 dc d4 08 e2 20 a9 8f 20 38 21 20 1a 1c e2
>3a4b48		20 a5 27 c9 00 d0 0e c2 20 a7 23 85 23 64 25 e2
>3a4b58		20 20 2b 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4b68		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2
>3a4b78		20 dc d4 08 e2 20 a9 8f 20 38 21 20 1a 1c e2 20
>3a4b88		a5 27 c9 00 d0 24 20 7a 14 a5 23 87 16 a9 00 a0
>3a4b98		01 00 97 16 c2 20 a5 16 85 23 a5 18 85 25 e2 20
>3a4ba8		a9 02 85 27 e2 20 20 2b 20 60 08 c2 20 48 a9 00
>3a4bb8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a4bc8		00 20 6c 1d e2 20 dc d4 08 e2 20 a9 8f 20 38 21
>3a4bd8		20 1a 1c e2 20 a5 27 c9 02 d0 14 a7 23 85 23 64
>3a4be8		24 64 25 64 26 a9 00 85 27 e2 20 20 2b 20 60 08
>3a4bf8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>3a4c08		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 e2 20
>3a4c18		a9 8f 20 38 21 20 1a 1c e2 20 a5 27 c9 00 d0 39
>3a4c28		e2 20 a5 26 d0 52 a5 25 d0 4e a5 24 d0 4a c2 10
>3a4c38		20 7a 14 a4 23 e2 20 a9 00 97 16 88 30 07 a9 20
>3a4c48		97 16 88 10 fb a9 02 85 27 c2 20 a5 16 85 23 a5
>3a4c58		18 85 25 e2 20 20 2b 20 60 08 c2 20 48 a9 00 08
>3a4c68		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a4c78		20 6c 1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a4c88		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a4c98		6c 1d e2 20 dc d4 08 e2 20 a9 8f 20 38 21 20 1a
>3a4ca8		1c e2 20 a5 27 c9 00 d0 39 e2 20 a5 26 d0 52 a5
>3a4cb8		25 d0 4e a5 24 d0 4a c2 10 20 7a 14 a4 23 e2 20
>3a4cc8		a9 00 97 16 88 30 07 a9 09 97 16 88 10 fb a9 02
>3a4cd8		85 27 c2 20 a5 16 85 23 a5 18 85 25 e2 20 20 2b
>3a4ce8		20 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a4cf8		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>3a4d08		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a4d18		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>3a4d28		e2 20 a9 8f 20 38 21 20 1a 1c e2 20 a5 27 c9 00
>3a4d38		f0 23 c9 01 f0 3e 08 c2 20 48 a9 00 08 5b 68 28
>3a4d48		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>3a4d58		e2 20 dc d4 08 c2 20 a5 25 10 21 49 ff ff 85 25
>3a4d68		a5 23 49 ff ff 18 69 01 00 85 23 a5 25 69 00 00
>3a4d78		85 25 80 08 e2 20 a5 26 29 7f 85 26 e2 20 20 2b
>3a4d88		20 60 e2 20 a9 8f 20 38 21 20 1a 1c e2 20 a5 27
>3a4d98		c9 00 d0 25 c2 20 a5 25 30 12 d0 04 a5 23 f0 13
>3a4da8		a9 00 00 85 25 a9 01 00 85 23 80 07 a9 ff ff 85
>3a4db8		25 85 23 e2 20 20 2b 20 60 08 c2 20 48 a9 00 08
>3a4dc8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a4dd8		20 6c 1d e2 20 dc d4 08 e2 20 a9 8f 20 38 21 20
>3a4de8		1a 1c 20 cf 05 e2 20 20 2b 20 60 e2 20 a9 8f 20
>3a4df8		38 21 20 1a 1c 20 3d 07 20 b1 60 e2 20 20 2b 20
>3a4e08		60 e2 20 a9 8f 20 38 21 20 1a 1c 20 3d 07 20 e0
>3a4e18		60 e2 20 20 2b 20 60 e2 20 a9 8f 20 38 21 20 1a
>3a4e28		1c 20 3d 07 20 0f 61 e2 20 20 2b 20 60 e2 20 a9
>3a4e38		8f 20 38 21 20 1a 1c 20 3d 07 20 3d 61 e2 20 20
>3a4e48		2b 20 60 e2 20 a9 8f 20 38 21 20 1a 1c 20 3d 07
>3a4e58		20 66 62 e2 20 20 2b 20 60 e2 20 a9 8f 20 38 21
>3a4e68		20 1a 1c 20 3d 07 20 3c 62 e2 20 20 2b 20 60 e2
>3a4e78		20 a9 8f 20 38 21 20 1a 1c 20 3d 07 20 88 62 e2
>3a4e88		20 20 2b 20 60 e2 20 a9 8f 20 38 21 20 1a 1c 20
>3a4e98		3d 07 20 1c 63 e2 20 20 2b 20 60 e2 20 a9 8f 20
>3a4ea8		38 21 20 1a 1c 20 3d 07 20 9e 63 e2 20 20 2b 20
>3a4eb8		60 00 ea 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a4ec8		c2 30 c2 20 a9 00 00 85 d9 e2 20 a9 36 85 db c2
>3a4ed8		30 a9 00 00 a0 00 00 97 d9 a0 02 00 97 d9 a0 04
>3a4ee8		00 97 d9 20 01 20 2b 28 60 8b 08 c2 20 a9 00 00
>3a4ef8		85 1a a9 36 00 85 1c 20 01 20 20 e1 22 28 ab 60
>3a4f08		08 c2 20 64 55 a9 ff 7f 85 59 20 55 03 20 8c 21
>3a4f18		29 ff 00 c9 00 00 f0 2c c9 81 00 f0 1a 20 4c 20
>3a4f28		20 56 08 a5 23 85 55 20 8c 21 29 ff 00 c9 00 00
>3a4f38		f0 12 c9 81 00 d0 2a 20 38 21 20 4c 20 20 56 08
>3a4f48		a5 23 85 59 a5 1c 48 a5 1a 48 a5 02 48 a5 00 48
>3a4f58		20 dc 17 68 85 00 68 85 02 68 85 1a 68 85 1c 28
>3a4f68		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a4f78		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>3a4f88		08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 64 e4 64
>3a4f98		e7 e2 20 64 e6 64 e9 64 ea c2 20 38 a5 d9 69 04
>3a4fa8		00 85 e1 e2 20 a5 db 69 00 85 e3 28 60 c9 5f f0
>3a4fb8		1a c9 3a b0 04 c9 30 b0 12 c9 5b b0 04 c9 41 b0
>3a4fc8		0a c9 7b b0 04 c9 61 b0 02 18 60 38 60 08 e2 20
>3a4fd8		c2 10 a0 00 00 b7 0c f0 0a d7 e7 d0 13 c8 c0 08
>3a4fe8		00 d0 f2 b7 e7 20 d4 04 20 b5 4f b0 03 28 38 60
>3a4ff8		28 18 60 08 e2 20 c2 10 a0 00 00 a2 00 00 b7 e7
>3a5008		f0 0b 20 d4 04 9f 00 4e 00 c8 e8 80 f1 a9 00 9f
>3a5018		00 4e 00 c2 20 a9 00 4e 85 e7 e2 20 a9 00 85 e9
>3a5028		c2 20 a5 e4 85 08 d0 06 e2 20 a5 e6 f0 4d e2 20
>3a5038		a5 e6 85 0a a5 ea a0 00 00 d7 08 d0 17 c2 20 18
>3a5048		a5 08 69 01 00 85 0c e2 20 a5 0a 69 00 85 0e 20
>3a5058		d5 4f b0 2a a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2
>3a5068		20 b7 08 85 0e d0 06 c2 20 a5 0c f0 0e c2 20 a5
>3a5078		0c 85 08 e2 20 a5 0e 85 0a 80 b9 28 18 60 28 38
>3a5088		60 08 20 fb 4f b0 1f 08 c2 20 48 a9 00 08 5b 68
>3a5098		28 e2 20 a9 05 8f d3 08 00 c2 20 29 ff 00 20 6c
>3a50a8		1d e2 20 dc d4 08 c2 30 a0 09 00 b7 08 85 23 c8
>3a50b8		c8 b7 08 85 25 e2 20 a0 00 00 b7 08 85 27 28 60
>3a50c8		08 c2 20 18 a5 e1 69 10 00 85 08 e2 20 a5 e3 69
>3a50d8		00 85 0a c5 bc 90 27 c2 20 a5 08 c5 ba 90 1f 08
>3a50e8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08
>3a50f8		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 c2 20
>3a5108		a5 e1 85 c0 e2 20 a5 e3 85 c2 c2 20 a5 08 85 e1
>3a5118		e2 20 a5 0a 85 e3 28 60 08 e2 20 a5 27 c5 ea f0
>3a5128		33 a5 ea c9 00 d0 05 20 cf 05 80 2f c9 01 d0 05
>3a5138		20 3d 07 80 26 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a5148		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2
>3a5158		20 dc d4 08 c9 02 d0 03 20 6c 16 c2 10 20 c8 50
>3a5168		c2 30 18 a5 c0 69 01 00 85 08 e2 20 a5 c2 69 00
>3a5178		85 0a a0 00 00 a9 00 97 08 c8 c0 08 00 d0 f8 a0
>3a5188		00 00 b7 e7 f0 10 20 d4 04 20 b5 4f 90 08 97 08
>3a5198		c8 c0 08 00 d0 ec c2 20 a0 09 00 a5 23 97 c0 a5
>3a51a8		25 c8 c8 97 c0 a5 e4 a0 0d 00 97 c0 c8 c8 e2 20
>3a51b8		a5 e6 97 c0 c2 20 a5 c0 85 e4 e2 20 a5 c2 85 e6
>3a51c8		e2 20 a0 00 00 a5 27 97 c0 c9 02 f0 02 28 60 c2
>3a51d8		20 a5 23 85 c0 e2 20 a5 25 85 c2 20 88 12 20 9d
>3a51e8		12 80 ea 08 c2 30 a5 e4 d0 06 e2 20 a5 e6 f0 05
>3a51f8		20 fb 4f b0 05 20 20 51 80 4e e2 20 a5 27 c5 ea
>3a5208		f0 33 a5 ea c9 00 d0 05 20 cf 05 80 2c c9 01 d0
>3a5218		05 20 3d 07 80 23 08 c2 20 48 a9 00 08 5b 68 28
>3a5228		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>3a5238		e2 20 dc d4 08 c9 02 f0 11 c2 30 a0 09 00 a5 23
>3a5248		97 08 c8 c8 a5 25 97 08 28 60 20 6c 16 a0 09 00
>3a5258		b7 08 85 c0 c8 c8 e2 20 b7 08 85 c2 20 88 12 20
>3a5268		bc 12 e2 20 a5 27 c9 02 f0 02 80 cd c2 20 a5 23
>3a5278		85 c0 e2 20 a5 25 85 c2 20 88 12 20 9d 12 80 b9
>3a5288		08 20 4c 20 e2 20 a7 00 20 60 04 90 42 c2 20 a5
>3a5298		00 85 e7 e2 20 a5 02 85 e9 20 2b 20 a7 00 f0 0d
>3a52a8		c9 24 f0 14 c9 25 f0 09 20 b5 4f b0 ec a9 01 80
>3a52b8		0c 20 2b 20 a9 00 80 05 20 2b 20 a9 02 85 ea 20
>3a52c8		8c 21 c9 8f d0 06 a5 ea 09 80 85 ea 28 38 60 28
>3a52d8		18 60 08 c2 20 18 a5 23 65 29 85 23 a5 25 65 2b
>3a52e8		85 25 28 60 08 c2 20 38 a5 23 e5 29 85 23 a5 25
>3a52f8		e5 2b 85 25 28 60 08 c2 20 3b 38 e9 0a 00 1b c2
>3a5308		30 a9 00 00 83 01 83 03 83 05 83 07 83 09 a5 25
>3a5318		10 18 a9 00 80 83 01 a5 25 49 ff ff 85 25 a5 23
>3a5328		49 ff ff 1a 85 23 d0 02 e6 25 a5 2b 10 1a a3 01
>3a5338		49 00 80 83 01 a5 2b 49 ff ff 85 2b a5 29 49 ff
>3a5348		ff 1a 85 29 d0 02 e6 2b a5 25 f0 04 a5 2b d0 5a
>3a5358		a5 23 8f 00 01 00 a5 29 8f 02 01 00 af 04 01 00
>3a5368		83 03 af 06 01 00 83 05 a5 25 8f 00 01 00 a5 29
>3a5378		8f 02 01 00 18 af 04 01 00 63 05 83 05 af 06 01
>3a5388		00 63 07 83 07 a5 23 8f 00 01 00 a5 2b 8f 02 01
>3a5398		00 18 af 04 01 00 63 05 83 05 af 06 01 00 63 07
>3a53a8		83 07 a3 07 f0 23 a3 09 f0 1f 08 c2 20 48 a9 00
>3a53b8		08 5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff
>3a53c8		00 20 6c 1d e2 20 dc d4 08 c2 30 a3 01 10 16 a3
>3a53d8		05 49 ff ff 83 05 a3 03 49 ff ff 1a 83 03 d0 05
>3a53e8		a3 05 1a 83 05 a3 03 85 23 a3 05 85 25 c2 20 3b
>3a53f8		18 69 0a 00 1b 28 60 08 c2 20 a5 23 c5 29 a5 25
>3a5408		e5 2b 50 03 49 00 80 30 06 64 23 64 25 80 07 a9
>3a5418		ff ff 85 23 85 25 28 60 08 c2 20 a5 23 c5 29 d0
>3a5428		0c a5 25 c5 2b d0 06 64 23 64 25 80 16 a5 29 c5
>3a5438		23 a5 2b e5 25 50 03 49 00 80 10 eb a9 ff ff 85
>3a5448		23 85 25 28 60 08 c2 20 a5 2b c5 25 d0 0f a5 29
>3a5458		c5 23 d0 09 a9 ff ff 85 23 85 25 80 04 64 23 64
>3a5468		25 28 60 08 c2 20 a5 2b c5 25 d0 0c a5 29 c5 23
>3a5478		d0 06 64 23 64 25 80 07 a9 ff ff 85 23 85 25 28
>3a5488		60 08 c2 20 a5 23 c5 29 d0 0f a5 25 c5 2b d0 09
>3a5498		a9 ff ff 85 23 85 25 80 13 a5 29 c5 23 a5 2b e5
>3a54a8		25 50 03 49 00 80 30 e8 64 23 64 25 28 60 08 c2
>3a54b8		20 a5 23 c5 29 d0 0f a5 25 c5 2b d0 09 a9 ff ff
>3a54c8		85 23 85 25 80 13 a5 23 c5 29 a5 25 e5 2b 50 03
>3a54d8		49 00 80 30 e8 64 23 64 25 28 60 08 c2 20 8f 12
>3a54e8		01 00 8a 8f 10 01 00 af 16 01 00 aa af 14 01 00
>3a54f8		28 60 08 e2 20 a9 03 8f 00 e2 af a9 00 8f 01 e2
>3a5508		af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af a9
>3a5518		00 00 8f 0c e2 af a9 00 01 8f 0e e2 af ea ea ea
>3a5528		ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 a9
>3a5538		01 00 85 27 28 60 08 e2 20 a9 40 8f 00 e2 af 80
>3a5548		09 08 e2 20 a9 48 8f 00 e2 af a9 02 8f 01 e2 af
>3a5558		c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af a5 29
>3a5568		8f 0c e2 af a5 2b 8f 0e e2 af ea ea ea e2 20 af
>3a5578		06 e2 af 29 07 d0 10 c2 20 af 08 e2 af 85 23 af
>3a5588		0a e2 af 85 25 28 60 20 2a 56 80 f9 08 e2 20 a9
>3a5598		01 8f 01 e2 af a9 00 8f 00 e2 af c2 20 a5 23 8f
>3a55a8		08 e2 af a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5
>3a55b8		2b 8f 0e e2 af ea ea ea e2 20 af 05 e2 af 29 17
>3a55c8		d0 10 c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25
>3a55d8		28 60 20 2a 56 80 f9 08 e2 20 a9 00 8f 01 e2 af
>3a55e8		a9 00 8f 00 e2 af c2 20 a5 23 8f 08 e2 af a5 25
>3a55f8		8f 0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af
>3a5608		ea ea ea e2 20 af 04 e2 af 29 07 d0 10 c2 20 af
>3a5618		08 e2 af 85 23 af 0a e2 af 85 25 28 60 20 2a 56
>3a5628		80 f9 e2 20 89 01 f0 20 00 08 c2 20 48 a9 00 08
>3a5638		5b 68 28 e2 20 a9 0c 8f d3 08 00 c2 20 29 ff 00
>3a5648		20 6c 1d e2 20 dc d4 08 89 02 f0 1f 08 c2 20 48
>3a5658		a9 00 08 5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20
>3a5668		29 ff 00 20 6c 1d e2 20 dc d4 08 89 04 f0 1f 08
>3a5678		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0e 8f d3 08
>3a5688		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 60 08
>3a5698		e2 20 a9 00 8f 01 e2 af a9 02 8f 00 e2 af c2 20
>3a56a8		a9 00 a0 8f 0c e2 af a9 00 00 8f 0e e2 af a5 23
>3a56b8		8f 08 e2 af a5 25 8f 0a e2 af ea ea ea e2 20 af
>3a56c8		04 e2 af 89 07 f0 01 00 c2 20 af 08 e2 af 85 23
>3a56d8		af 0a e2 af 85 25 28 60 08 e2 20 a9 01 8f 01 e2
>3a56e8		af a9 02 8f 00 e2 af c2 20 a9 00 a0 8f 0c e2 af
>3a56f8		a9 00 00 8f 0e e2 af a5 23 8f 08 e2 af a5 25 8f
>3a5708		0a e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af
>3a5718		85 25 28 60 08 c2 20 a5 23 d0 0a a5 25 29 ff 7f
>3a5728		d0 03 28 38 60 28 18 60 08 e2 20 38 e9 30 20 f8
>3a5738		04 c2 20 29 ff 00 18 65 23 85 23 a5 25 69 00 00
>3a5748		85 25 28 60 08 e2 20 c9 30 90 04 c9 3a 90 1c c9
>3a5758		61 90 04 c9 67 90 0a c9 41 90 04 c9 47 90 07 80
>3a5768		31 38 e9 57 80 08 38 e9 37 80 03 38 e9 30 06 23
>3a5778		26 24 26 25 26 26 06 23 26 24 26 25 26 26 06 23
>3a5788		26 24 26 25 26 26 06 23 26 24 26 25 26 26 05 23
>3a5798		85 23 28 60 08 e2 20 c9 30 f0 06 c9 31 f0 0a 80
>3a57a8		0f c2 20 06 23 26 25 80 07 c2 20 38 26 23 26 25
>3a57b8		28 60 08 e2 30 a5 61 f0 0d aa a5 69 d0 15 a9 00
>3a57c8		8f 01 e2 af 80 15 e2 20 a9 03 8f 01 e2 af ea ea
>3a57d8		ea 80 62 e2 20 a9 01 8f 01 e2 af e2 20 a9 43 8f
>3a57e8		00 e2 af c2 20 a9 00 10 8f 08 e2 af a9 00 00 8f
>3a57f8		0a e2 af c2 20 a9 00 a0 8f 0c e2 af a9 00 00 8f
>3a5808		0e e2 af ea ea ea ca f0 2c af 08 e2 af 8f 0c 08
>3a5818		00 af 0a e2 af 8f 0e 08 00 e2 20 a9 42 8f 00 e2
>3a5828		af c2 20 af 0c 08 00 8f 08 e2 af af 0e 08 00 8f
>3a5838		0a e2 af 80 be c2 20 af 08 e2 af 85 23 af 0a e2
>3a5848		af 85 25 e2 20 a9 01 85 27 28 60 08 c2 20 a5 5d
>3a5858		85 23 a5 5f 85 25 20 6c 5a c2 20 a5 23 85 29 a5
>3a5868		25 85 2b c2 20 a5 59 85 23 a5 5b 85 25 20 94 55
>3a5878		c2 20 a5 55 85 29 a5 57 85 2b 20 49 55 c2 20 a5
>3a5888		23 85 29 a5 25 85 2b 20 ba 57 20 df 55 c2 20 a5
>3a5898		65 f0 07 a5 25 09 00 80 85 25 e2 20 a9 01 85 27
>3a58a8		28 60 5a 08 c2 30 64 23 64 25 64 55 64 57 64 65
>3a58b8		64 59 64 5b a9 01 00 85 5d 64 5f 64 61 64 63 64
>3a58c8		69 e2 20 a0 00 00 b7 00 c9 2b f0 33 c9 2d f0 2b
>3a58d8		c9 26 f0 3a 20 79 04 90 03 82 ac 00 08 c2 20 48
>3a58e8		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>3a58f8		29 ff 00 20 6c 1d e2 20 dc d4 08 a9 01 85 65 c8
>3a5908		b7 00 c9 26 f0 08 20 79 04 90 d1 82 7a 00 c8 b7
>3a5918		00 c9 68 f0 0e c9 48 f0 0a c9 62 f0 4c c9 42 f0
>3a5928		48 80 b9 c8 b7 00 20 8a 04 b0 02 80 af 20 4c 57
>3a5938		c8 b7 00 20 8a 04 b0 f5 e2 20 a5 65 f0 11 c2 20
>3a5948		38 a9 00 00 e5 23 85 23 a9 00 00 e5 25 85 25 e2
>3a5958		20 a9 00 85 27 c2 20 18 98 65 00 85 00 a5 02 69
>3a5968		00 00 85 02 e2 20 28 7a 60 c8 b7 00 c9 30 f0 07
>3a5978		c9 31 f0 03 82 65 ff 20 9c 57 c8 b7 00 c9 30 f0
>3a5988		f6 c9 31 f0 f2 82 b0 ff 20 30 57 c8 b7 00 c9 2e
>3a5998		f0 08 20 79 04 b0 f1 82 9e ff c2 20 20 6c 5a c2
>3a59a8		20 a5 23 85 55 a5 25 85 57 64 23 64 25 e2 20 80
>3a59b8		36 20 30 57 c2 20 a5 5f 8f 00 01 00 a9 0a 00 8f
>3a59c8		02 01 00 af 04 01 00 85 5f a5 5d 8f 00 01 00 a9
>3a59d8		0a 00 8f 02 01 00 af 04 01 00 85 5d af 06 01 00
>3a59e8		18 65 5f 85 5f e2 20 c8 b7 00 c9 65 f0 24 c9 45
>3a59f8		f0 20 20 79 04 b0 ba c2 20 20 6c 5a c2 20 a5 23
>3a5a08		85 59 a5 25 85 5b 64 23 64 25 20 53 58 e2 20 82
>3a5a18		43 ff c2 20 20 6c 5a c2 20 a5 23 85 59 a5 25 85
>3a5a28		5b 64 23 64 25 e2 20 c8 b7 00 c9 2b f0 10 c9 2d
>3a5a38		f0 08 20 79 04 b0 12 82 a2 fe a9 01 85 69 c8 b7
>3a5a48		00 20 79 04 b0 03 82 93 fe 20 30 57 c8 b7 00 20
>3a5a58		79 04 b0 f5 c2 20 a5 23 85 61 a5 25 85 63 20 53
>3a5a68		58 82 f1 fe 08 20 fa 54 28 60 08 c2 20 a9 69 5d
>3a5a78		85 29 a9 3a 00 85 2b e2 20 a9 01 85 2d c2 20 20
>3a5a88		45 5b c9 ff ff d0 0c a9 00 00 8d 23 08 8d 25 08
>3a5a98		82 a1 00 f4 00 00 f4 00 00 f4 00 00 e2 20 ad 26
>3a5aa8		08 29 80 83 01 ad 25 08 2a ad 26 08 2a 83 02 a9
>3a5ab8		00 83 06 ad 25 08 09 80 83 05 ad 24 08 83 04 ad
>3a5ac8		23 08 83 03 a3 02 c9 96 f0 3a 90 1f 08 c2 20 48
>3a5ad8		a9 00 08 5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20
>3a5ae8		29 ff 00 20 6c 1d e2 20 dc d4 08 c2 20 a3 05 4a
>3a5af8		83 05 a3 03 6a 83 03 e2 20 a3 02 1a 83 02 c9 96
>3a5b08		f0 02 80 e7 a3 01 f0 1b c2 20 a3 03 49 ff ff 18
>3a5b18		69 01 00 8d 23 08 a3 05 49 ff ff 69 00 00 8d 25
>3a5b28		08 80 0c c2 20 a3 03 8d 23 08 a3 05 8d 25 08 c2
>3a5b38		20 68 68 68 e2 20 a9 00 8d 27 08 28 60 da 08 c2
>3a5b48		20 a5 25 48 a5 23 48 20 3e 55 20 1c 57 b0 11 a5
>3a5b58		25 89 00 80 d0 05 a9 01 00 80 08 a9 ff ff 80 03
>3a5b68		a9 00 00 fa 86 23 fa 86 25 28 fa 60 08 c2 30 20
>3a5b78		45 5b c9 ff ff d0 05 20 ab 05 80 03 20 bd 05 28
>3a5b88		60 08 c2 30 20 45 5b c9 01 00 d0 05 20 ab 05 80
>3a5b98		03 20 bd 05 28 60 08 c2 30 20 45 5b c9 00 00 d0
>3a5ba8		05 20 ab 05 80 03 20 bd 05 28 60 08 c2 30 20 45
>3a5bb8		5b c9 01 00 f0 05 20 ab 05 80 03 20 bd 05 28 60
>3a5bc8		08 c2 30 20 45 5b c9 ff ff f0 05 20 ab 05 80 03
>3a5bd8		20 bd 05 28 60 08 c2 30 20 45 5b c9 00 00 f0 05
>3a5be8		20 ab 05 80 03 20 bd 05 28 60 08 e2 20 97 23 c8
>3a5bf8		a9 00 97 23 28 60 da 08 e2 20 c9 80 90 0a 48 a9
>3a5c08		2d 20 f2 5b 68 49 ff 1a c2 30 29 ff 00 c9 64 00
>3a5c18		90 0e a2 64 00 20 e3 54 18 69 30 00 20 f2 5b 8a
>3a5c28		a2 0a 00 20 e3 54 18 69 30 00 20 f2 5b 8a 18 69
>3a5c38		30 00 20 f2 5b 28 fa 60 08 e2 20 c2 10 a0 00 00
>3a5c48		b7 23 f0 03 c8 80 f9 28 60 08 e2 20 c2 10 f4 00
>3a5c58		00 f4 00 00 f4 00 00 20 1c 57 90 19 20 7a 14 e2
>3a5c68		20 a0 00 00 a9 20 97 16 c8 a9 30 97 16 c8 a9 00
>3a5c78		97 16 82 ce 00 e2 20 a5 26 10 08 29 7f 85 26 a9
>3a5c88		01 83 01 c2 20 a9 00 00 83 03 c2 20 af 65 5d 3a
>3a5c98		85 29 af 67 5d 3a 85 2b 20 45 5b 89 00 80 d0 12
>3a5ca8		20 e0 56 a3 03 1a 83 03 20 45 5b c9 ff ff f0 12
>3a5cb8		80 ee 20 97 56 a3 03 3a 83 03 20 45 5b c9 ff ff
>3a5cc8		f0 f0 e2 30 a5 25 0a a5 26 2a 83 05 38 a9 96 e3
>3a5cd8		05 aa f0 0f a5 25 09 80 85 25 46 25 66 24 66 23
>3a5ce8		ca d0 f7 c2 10 e2 20 64 26 a9 00 85 27 a3 01 f0
>3a5cf8		11 c2 20 38 a9 00 00 e5 23 85 23 a9 00 00 e5 25
>3a5d08		85 25 20 d9 14 c2 20 a5 16 85 23 a5 18 85 25 20
>3a5d18		40 5c e2 20 c8 a9 00 97 23 88 88 b7 23 c8 97 23
>3a5d28		c0 02 00 d0 f4 a9 2e 97 23 e2 20 18 a3 03 69 05
>3a5d38		83 06 f0 19 20 40 5c a9 45 20 f2 5b a3 06 20 fe
>3a5d48		5b 80 0a c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9
>3a5d58		02 85 27 c2 20 3b 18 69 06 00 1b 28 60 00 50 c3
>3a5d68		47 00 00 80 3f f3 04 b5 3f f3 04 35 3f e2 20 a9
>3a5d78		48 8f 00 e2 af c2 20 bd 00 00 8f 08 e2 af bd 02
>3a5d88		00 8f 0a e2 af 88 e8 e8 e8 e8 e2 20 a9 00 8f 01
>3a5d98		e2 af c2 20 af 23 08 00 8f 0c e2 af af 25 08 00
>3a5da8		8f 0e e2 af ea ea ea af 08 e2 af 48 af 0a e2 af
>3a5db8		8f 0a e2 af 68 8f 08 e2 af e2 20 a9 02 8f 01 e2
>3a5dc8		af c2 20 bd 00 00 8f 0c e2 af bd 02 00 8f 0e e2
>3a5dd8		af ea ea ea 88 f0 14 af 08 e2 af 48 af 0a e2 af
>3a5de8		8f 0a e2 af 68 8f 08 e2 af 80 9b af 08 e2 af 8f
>3a5df8		23 08 00 af 0a e2 af 8f 25 08 00 60 e2 20 a9 00
>3a5e08		8f 00 e2 af a9 00 8f 01 e2 af c2 20 a5 23 8f 08
>3a5e18		e2 af 8f 0c e2 af af 25 08 00 8f 0a e2 af 8f 0e
>3a5e28		e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85
>3a5e38		25 60 e2 20 a9 00 8f 00 e2 af a9 01 8f 01 e2 af
>3a5e48		c2 20 a5 23 8f 0c e2 af af 25 08 00 8f 0e e2 af
>3a5e58		af 8e 64 3a 8f 08 e2 af af 90 64 3a 8f 0a e2 af
>3a5e68		ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 60
>3a5e78		a2 00 00 a5 23 c5 29 a5 25 e5 2b 90 1e a5 23 8f
>3a5e88		08 e2 af a5 25 8f 0a e2 af ea ea ea af 08 e2 af
>3a5e98		85 23 af 0a e2 af 85 25 e8 80 d8 60 e2 20 a5 26
>3a5ea8		10 09 29 7f 85 26 a9 01 48 80 03 a9 00 48 a9 40
>3a5eb8		8f 00 e2 af a9 02 8f 01 e2 af c2 30 af f6 64 3a
>3a5ec8		85 29 8f 0c e2 af af f8 64 3a 85 2b 8f 0e e2 af
>3a5ed8		20 78 5e e2 20 68 c2 20 f0 1e a5 23 8f 08 e2 af
>3a5ee8		a5 25 8f 0a e2 af ea ea ea af 08 e2 af 85 23 af
>3a5ef8		0a e2 af 29 ff 7f 85 25 60 5a a2 00 00 a0 00 00
>3a5f08		a5 23 df fa 64 3a a5 25 ff fc 64 3a 90 2c bf f6
>3a5f18		64 3a 8f 08 e2 af bf f8 64 3a 8f 0a e2 af a5 23
>3a5f28		8f 0c e2 af a5 25 8f 0e e2 af ea ea ea af 08 e2
>3a5f38		af 85 23 af 0a e2 af 85 25 38 98 2a a8 e8 e8 e8
>3a5f48		e8 e0 0c 00 d0 ba 98 aa 7a 60 08 c2 30 48 da 20
>3a5f58		04 5e 8b e2 20 a9 3a 48 ab c2 20 a2 36 64 5a a0
>3a5f68		05 00 20 75 5d 7a a9 01 00 8f 27 08 00 ab fa 68
>3a5f78		28 60 08 c2 30 48 da a5 23 85 29 a5 25 85 2b 20
>3a5f88		04 5e 8b e2 20 a9 3a 48 ab c2 20 a2 4a 64 5a a0
>3a5f98		05 00 20 75 5d 7a ab 20 df 55 fa 68 28 60 08 c2
>3a5fa8		30 48 da a5 23 85 29 a5 25 85 2b 20 04 5e 8b e2
>3a5fb8		20 a9 3a 48 ab c2 20 a2 5e 64 5a a0 05 00 20 75
>3a5fc8		5d 7a ab 20 df 55 fa 68 28 60 08 c2 30 48 da e2
>3a5fd8		20 a9 40 8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5
>3a5fe8		23 8f 08 e2 af a5 25 8f 0a e2 af af 8e 64 3a 8f
>3a5ff8		0c e2 af af 90 64 3a 8f 0e e2 af ea ea ea af 08
>3a6008		e2 af 85 0c af 0a e2 af 85 0e e2 20 a9 48 8f 00
>3a6018		e2 af c2 20 ea ea ea af 08 e2 af 85 10 af 0a e2
>3a6028		af 85 12 e2 20 a9 01 8f 01 e2 af c2 20 a5 0c 8f
>3a6038		08 e2 af a5 0e 8f 0a e2 af a5 10 8f 0c e2 af a5
>3a6048		12 8f 0e e2 af ea ea ea af 08 e2 af 85 23 af 0a
>3a6058		e2 af 85 25 e2 20 a9 08 8f 00 e2 af a9 02 8f 01
>3a6068		e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af
>3a6078		ea ea ea af 08 e2 af 85 29 af 0a e2 af 85 2b 20
>3a6088		04 5e 8b e2 20 a9 3a 48 ab c2 20 a2 72 64 5a a0
>3a6098		08 00 20 75 5d 7a a9 01 00 8f 27 08 00 8f 2d 08
>3a60a8		00 20 df 55 ab fa 68 28 60 08 c2 30 48 da 20 a4
>3a60b8		5e 20 01 5f da 8a 29 01 00 d0 05 20 7a 5f 80 03
>3a60c8		20 52 5f fa 8a 29 04 00 f0 0a e2 20 a5 26 09 80
>3a60d8		85 26 c2 20 fa 68 28 60 08 c2 30 48 da 20 a4 5e
>3a60e8		20 01 5f da 8a 29 01 00 d0 05 20 52 5f 80 03 20
>3a60f8		7a 5f fa 8a 29 02 00 f0 0a e2 20 a5 26 09 80 85
>3a6108		26 c2 20 fa 68 28 60 08 c2 30 48 da 20 a4 5e 20
>3a6118		01 5f 20 a6 5f 8a 29 01 00 f0 03 20 3a 5e 8a e2
>3a6128		20 4a 4a 69 00 29 01 f0 06 a5 26 09 80 85 26 c2
>3a6138		20 fa 68 28 60 08 c2 30 48 da 5a a5 25 10 1f 08
>3a6148		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 17 8f d3 08
>3a6158		00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 c2 30
>3a6168		a5 23 cf 8e 64 3a a5 25 cf 90 64 3a b0 04 20 3a
>3a6178		5e 18 a9 00 00 a8 2a 48 e2 20 a9 00 8f 00 e2 af
>3a6188		a9 01 8f 01 e2 af c2 20 af e6 64 3a 85 29 8f 0c
>3a6198		e2 af af e8 64 3a 85 2b 8f 0e e2 af 20 78 5e 8a
>3a61a8		f0 07 0a 0a 0a 0a 0a 0a a8 af ea 64 3a 85 29 8f
>3a61b8		0c e2 af af ec 64 3a 85 2b 8f 0e e2 af 20 78 5e
>3a61c8		8a f0 0b 0a 0a 0a 0a 85 29 18 98 65 29 a8 af ee
>3a61d8		64 3a 85 29 8f 0c e2 af af f0 64 3a 85 2b 8f 0e
>3a61e8		e2 af 20 78 5e 8a f0 09 0a 0a 85 29 18 98 65 29
>3a61f8		a8 af f2 64 3a 85 29 8f 0c e2 af af f4 64 3a 85
>3a6208		2b 8f 0e e2 af 20 78 5e 86 29 18 98 65 29 a8 20
>3a6218		d2 5f a5 23 85 29 a5 25 85 2b 98 85 23 64 25 20
>3a6228		6c 5a 20 49 55 68 d0 07 a5 25 09 00 80 85 25 7a
>3a6238		fa 68 28 60 08 c2 30 48 da a5 23 85 29 a5 25 85
>3a6248		2b 20 04 5e 8b e2 20 a9 3a 48 ab c2 20 a2 96 64
>3a6258		a0 05 00 20 75 5d ab 20 df 55 fa 68 28 60 08 c2
>3a6268		30 48 da 20 3c 62 af fe 64 3a 85 29 af 00 65 3a
>3a6278		85 2b 20 3e 55 a5 25 49 00 80 85 25 fa 68 28 60
>3a6288		08 c2 30 48 da a5 23 85 29 a5 25 85 2b 20 04 5e
>3a6298		8b e2 20 a9 3a 48 ab c2 20 a2 aa 64 a0 05 00 20
>3a62a8		75 5d ab 20 df 55 fa 68 28 60 c2 20 a5 23 85 29
>3a62b8		a5 25 85 2b c2 20 af 8e 64 3a 85 23 af 90 64 3a
>3a62c8		85 25 8a f0 30 4a aa 90 03 20 df 55 c2 20 a5 25
>3a62d8		48 a5 23 48 c2 20 a5 29 85 23 a5 2b 85 25 20 04
>3a62e8		5e c2 20 a5 23 85 29 a5 25 85 2b c2 20 68 85 23
>3a62f8		68 85 25 80 cd 60 08 c2 30 48 da 8b e2 20 a9 3a
>3a6308		48 ab c2 20 a2 be 64 5a a0 0a 00 20 75 5d 7a ab
>3a6318		fa 68 28 60 08 c2 30 48 da 5a a5 23 05 25 d0 10
>3a6328		c2 20 af 8e 64 3a 85 23 af 90 64 3a 85 25 80 61
>3a6338		a5 25 29 00 80 a8 f0 07 a5 25 29 ff 7f 85 25 c2
>3a6348		20 a5 25 48 a5 23 48 20 cf 05 a6 23 20 3d 07 c2
>3a6358		20 a5 23 85 29 a5 25 85 2b c2 20 68 85 23 68 85
>3a6368		25 20 3e 55 20 fe 62 c2 20 a5 25 48 a5 23 48 c2
>3a6378		20 af f2 64 3a 85 23 af f4 64 3a 85 25 20 b2 62
>3a6388		c2 20 68 85 29 68 85 2b 20 df 55 98 f0 03 20 3a
>3a6398		5e 7a fa 68 28 60 08 c2 30 48 a5 25 10 1f 08 c2
>3a63a8		20 48 a9 00 08 5b 68 28 e2 20 a9 17 8f d3 08 00
>3a63b8		c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 c2 30 05
>3a63c8		23 f0 68 c2 20 af 92 64 3a 85 29 af 94 64 3a 85
>3a63d8		2b e2 20 a9 01 85 2d c2 20 c2 20 a5 25 48 a5 23
>3a63e8		48 20 94 55 a5 25 c5 2b d0 09 a5 23 45 29 29 f8
>3a63f8		ff f0 30 20 49 55 c2 20 af 92 64 3a 85 29 af 94
>3a6408		64 3a 85 2b 20 94 55 c2 20 a5 23 85 29 a5 25 85
>3a6418		2b c2 20 68 85 23 68 85 25 c2 20 a5 25 48 a5 23
>3a6428		48 80 be c2 20 68 85 29 68 85 2b 68 28 60 01 0d
>3a6438		d0 37 61 0b b6 ba ab aa 2a 3d 00 00 00 bf 00 00
>3a6448		80 3f 1d ef 38 36 01 0d 50 b9 89 88 08 3c ab aa
>3a6458		2a be 00 00 80 3f a4 27 b3 3c d1 0d 5d 3d 89 88
>3a6468		08 3e ab aa aa 3e 00 00 80 3f 89 88 88 3d d9 89
>3a6478		9d 3d 8c 2e ba 3d 39 8e e3 3d 25 49 12 3e cd cc
>3a6488		4c 3e ab aa aa 3e 00 00 80 3f 00 00 00 40 8e e3
>3a6498		f8 3c 6e db 36 3d 9a 99 99 3d ab aa 2a 3e 00 00
>3a64a8		80 3f 39 8e e3 3d 25 49 12 be cd cc 4c 3e ab aa
>3a64b8		aa be 00 00 80 3f 1d ef 38 36 01 0d d0 37 01 0d
>3a64c8		50 39 61 0b b6 3a 89 88 08 3c ab aa 2a 3d ab aa
>3a64d8		2a 3e 00 00 00 3f 00 00 80 3f 00 00 80 3f c1 2c
>3a64e8		a1 6d 5f 97 07 4b 81 64 5a 42 54 f8 2d 40 db 0f
>3a64f8		c9 40 db 0f 49 40 db 0f c9 3f db 0f 49 3f 08 20
>3a6508		88 12 c2 20 a9 01 00 85 23 a9 00 00 85 25 e2 20
>3a6518		af 00 4d 00 c2 20 29 ff 00 85 8f a8 a2 01 00 c2
>3a6528		20 bf 00 4d 00 85 29 a9 00 00 85 2b 20 68 27 e8
>3a6538		e8 88 d0 eb c2 20 a9 04 00 85 29 a9 00 00 85 2b
>3a6548		20 68 27 e2 20 af 00 4d 00 85 0c a9 00 85 0d c2
>3a6558		20 06 0c 38 a5 23 65 0c 85 23 a5 25 69 00 00 85
>3a6568		25 d0 29 e2 20 a5 ea 09 80 a6 23 20 4c 10 e2 20
>3a6578		af 00 4d 00 87 c0 a0 01 00 a2 00 00 e2 20 bf 01
>3a6588		4d 00 97 c0 e4 8f f0 23 e8 c8 80 f0 08 c2 20 48
>3a6598		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>3a65a8		29 ff 00 20 6c 1d e2 20 dc d4 08 e2 20 38 a5 c0
>3a65b8		67 c0 85 08 a5 c1 69 00 85 09 a5 c2 69 00 85 0a
>3a65c8		64 0b c2 20 a0 05 00 b7 c3 85 0c e2 20 c8 c8 b7
>3a65d8		c3 85 0e 64 0f e2 20 a9 00 87 08 c2 20 18 a5 08
>3a65e8		69 01 00 85 08 a5 0a 69 00 00 85 0a c5 0e d0 e5
>3a65f8		a5 08 c5 0c d0 df 28 60 08 c2 20 64 08 64 0a e2
>3a6608		20 af 00 4d 00 85 8f 64 90 a2 01 00 e2 20 a7 c0
>3a6618		c5 8f f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a6628		a9 0a 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20
>3a6638		dc d4 08 c9 01 f0 3a a0 01 00 e2 20 bf 00 4d 00
>3a6648		85 23 64 24 64 25 64 26 b7 c0 85 29 64 2a 64 2b
>3a6658		64 2c a5 23 c5 29 b0 68 20 68 27 c2 20 18 a5 08
>3a6668		65 23 85 08 a5 0a 65 25 85 0a e8 e8 c8 c4 8f d0
>3a6678		c9 e2 20 18 bf 00 4d 00 85 90 65 08 85 08 a5 09
>3a6688		69 00 85 09 c2 20 a5 0a 69 00 00 85 0a c2 20 06
>3a6698		08 26 0a 06 08 26 0a e2 20 38 a5 08 65 8f 85 08
>3a66a8		a5 09 69 00 85 09 c2 20 a5 0a 69 00 00 85 0a 18
>3a66b8		a5 08 65 c0 85 08 e2 20 a5 0a 65 c2 85 0a 28 60
>3a66c8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>3a66d8		08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 08
>3a66e8		20 88 12 e2 20 a0 00 00 b7 c3 29 7f c5 27 d0 28
>3a66f8		a5 27 48 c2 20 a5 25 48 a5 23 48 20 00 66 68 85
>3a6708		23 68 85 25 e2 20 68 85 27 c2 20 a5 23 87 08 a0
>3a6718		02 00 a5 25 97 08 28 60 08 c2 20 48 a9 00 08 5b
>3a6728		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>3a6738		6c 1d e2 20 dc d4 08 08 20 88 12 f4 00 00 f4 00
>3a6748		00 e2 20 48 20 00 66 e2 20 68 c2 20 68 68 c2 20
>3a6758		a7 08 85 23 a0 02 00 b7 08 85 25 e2 20 a0 00 00
>3a6768		b7 c3 29 7f 85 27 28 60 da 0b 08 08 c2 20 48 a9
>3a6778		00 08 5b 68 28 c2 30 a5 25 89 f0 ff d0 29 89 0f
>3a6788		00 d0 0c a5 23 89 00 fc d0 05 20 e1 44 80 2e a2
>3a6798		0a 00 46 25 66 23 ca d0 f9 20 e1 44 e2 20 a9 4b
>3a67a8		20 18 00 c2 20 80 16 a2 14 00 46 25 66 23 ca d0
>3a67b8		f9 20 e1 44 e2 20 a9 4d 20 18 00 c2 20 28 2b fa
>3a67c8		60 0b 08 c2 30 a9 00 00 8f b6 08 00 8f b8 08 00
>3a67d8		e2 20 20 8c 21 c9 00 f0 08 20 1a 1c 20 61 06 80
>3a67e8		11 c2 20 a9 00 00 85 23 85 25 e2 20 a9 02 85 27
>3a67f8		c2 20 20 2a 69 22 08 11 00 b0 22 20 db 69 08 c2
>3a6808		20 48 a9 00 08 5b 68 28 e2 20 a9 10 8f d3 08 00
>3a6818		c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 20 55 03
>3a6828		08 c2 20 48 a9 20 03 5b 68 28 e2 20 a0 00 00 b7
>3a6838		18 d0 03 82 a9 00 c9 e5 d0 03 82 96 00 a0 0b 00
>3a6848		b7 18 89 08 f0 03 82 a9 00 89 02 f0 03 82 83 00
>3a6858		29 0f c9 0f d0 03 82 7a 00 a0 00 00 b7 18 20 18
>3a6868		00 c8 c0 08 00 d0 f5 a9 20 20 18 00 a0 08 00 b7
>3a6878		18 20 18 00 c8 c0 0b 00 d0 f5 a9 09 20 18 00 a0
>3a6888		0b 00 b7 18 89 10 d0 1e c2 20 a0 1c 00 b7 18 8f
>3a6898		23 08 00 c8 c8 b7 18 8f 25 08 00 e2 20 a9 00 8f
>3a68a8		27 08 00 20 70 67 a9 09 20 18 00 a0 0b 00 b7 18
>3a68b8		89 08 d0 1c 89 01 f0 05 a9 52 20 18 00 89 04 f0
>3a68c8		05 a9 53 20 18 00 89 10 f0 05 a9 44 20 18 00 ea
>3a68d8		20 55 03 20 6c 03 22 0c 11 00 90 03 82 41 ff 20
>3a68e8		db 69 08 c2 20 48 a9 00 08 5b 68 28 20 70 20 28
>3a68f8		2b 60 08 c2 20 48 a9 20 03 5b 68 28 e2 20 29 0f
>3a6908		c9 0f f0 cf a9 5b 20 18 00 a0 00 00 b7 18 c9 20
>3a6918		f0 09 20 18 00 c8 c0 08 00 d0 f1 a9 5d 20 18 00
>3a6928		80 ae 0b 08 08 c2 20 48 a9 20 03 5b 68 28 c2 30
>3a6938		a9 73 f2 85 20 a9 3a 00 85 22 a0 00 00 e2 20 a9
>3a6948		00 97 20 c8 c0 1e 00 d0 f8 c2 20 a9 73 f0 8f 81
>3a6958		f2 3a a9 3a 00 8f 83 f2 3a af 23 08 00 8f 75 f2
>3a6968		3a af 25 08 00 8f 77 f2 3a 28 2b 60 08 c2 30 20
>3a6978		4c 20 20 1a 1c 20 61 06 20 2a 69 e2 20 a9 2c 85
>3a6988		37 20 6d 21 b0 0f c2 20 a9 ff ff 8f 54 03 00 8f
>3a6998		56 03 00 80 17 20 2b 20 20 1a 1c 20 cf 05 c2 20
>3a69a8		a5 23 8f 54 03 00 a5 25 8f 56 03 00 22 18 11 00
>3a69b8		b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11
>3a69c8		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>3a69d8		08 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a69e8		08 e2 20 48 a9 00 48 ab 68 28 e2 20 af 2e 03 00
>3a69f8		85 23 a9 00 85 24 85 25 85 26 a9 00 85 27 85 ea
>3a6a08		a9 3a 85 e9 c2 20 a9 3e 6a 85 e7 20 eb 51 e2 20
>3a6a18		af 20 03 00 85 23 a9 00 85 24 85 25 85 26 a9 00
>3a6a28		85 27 85 ea a9 3a 85 e9 c2 20 a9 46 6a 85 e7 20
>3a6a38		eb 51 28 2b ab 60 44 4f 53 53 54 41 54 00 42 49
>3a6a48		4f 53 53 54 41 54 00 08 c2 30 20 4c 20 20 1a 1c
>3a6a58		20 61 06 a5 23 8f 60 03 00 a5 25 8f 62 03 00 a9
>3a6a68		ff ff 8f 54 03 00 8f 56 03 00 22 24 11 00 b0 25
>3a6a78		20 6c 1d 20 db 69 08 c2 20 48 a9 00 08 5b 68 28
>3a6a88		e2 20 a9 11 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>3a6a98		e2 20 dc d4 08 20 6c 1d 28 60 08 c2 30 20 4c 20
>3a6aa8		20 1a 1c 20 61 06 20 2a 69 a9 00 00 8f 54 03 00
>3a6ab8		a9 01 00 8f 56 03 00 20 bc 4e 22 18 11 00 b0 22
>3a6ac8		20 db 69 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a6ad8		11 8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc
>3a6ae8		d4 08 20 db 69 c2 20 a2 12 00 18 bf 73 f2 3a 69
>3a6af8		00 00 85 92 bf 75 f2 3a 69 01 00 85 94 e2 20 a9
>3a6b08		00 87 92 c2 20 a9 00 00 85 7a a9 01 00 85 7c a2
>3a6b18		00 00 e2 20 a7 7a f0 2a c9 0d f0 12 c9 0a f0 04
>3a6b28		9d 00 4f e8 c2 20 e6 7a d0 e8 e6 7c 80 e4 e2 20
>3a6b38		a9 00 9d 00 4f 20 9b 26 c2 20 e6 7a d0 d1 e6 7c
>3a6b48		80 cd e0 00 00 f0 0a e2 20 a9 00 9d 00 4f 20 9b
>3a6b58		26 28 60 08 c2 30 20 4c 20 20 1a 1c 20 61 06 20
>3a6b68		2a 69 e2 20 a9 2c 20 38 21 c2 20 20 1a 1c 20 cf
>3a6b78		05 a5 23 8f 50 03 00 a5 25 8f 52 03 00 e2 20 a9
>3a6b88		2c c2 20 20 38 21 20 1a 1c 20 cf 05 a5 23 8f 58
>3a6b98		03 00 a5 25 8f 5a 03 00 22 1c 11 00 b0 22 20 db
>3a6ba8		69 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f
>3a6bb8		d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08
>3a6bc8		20 db 69 28 60 da 5a 08 a2 00 00 a0 00 00 e2 20
>3a6bd8		b7 23 9d 00 04 f0 04 e8 c8 80 f5 28 7a fa 60 08
>3a6be8		c2 30 20 4c 20 20 1a 1c 20 61 06 20 2a 69 a9 00
>3a6bf8		00 85 a6 e2 20 a9 01 85 a8 a9 20 85 b4 c2 20 a9
>3a6c08		00 00 85 ab a9 ff ff 85 a9 c2 20 a9 00 00 85 55
>3a6c18		85 57 a9 ff ff 85 59 a9 ff 7f 85 5b 20 dc 17 e2
>3a6c28		20 a9 80 85 b4 c2 20 c6 ab 18 a9 00 00 8f 50 03
>3a6c38		00 65 ab 8f 58 03 00 a9 01 00 8f 52 03 00 69 00
>3a6c48		00 8f 5a 03 00 22 1c 11 00 b0 22 20 db 69 08 c2
>3a6c58		20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f d3 08 00
>3a6c68		c2 20 29 ff 00 20 6c 1d e2 20 dc d4 08 20 db 69
>3a6c78		28 60 08 c2 30 20 4c 20 20 1a 1c 20 61 06 20 cd
>3a6c88		6b 22 04 11 00 b0 22 20 db 69 08 c2 20 48 a9 00
>3a6c98		08 5b 68 28 e2 20 a9 13 8f d3 08 00 c2 20 29 ff
>3a6ca8		00 20 6c 1d e2 20 dc d4 08 20 db 69 28 60 da 08
>3a6cb8		e2 20 c9 61 90 08 c9 7b b0 04 29 df 80 13 c9 20
>3a6cc8		90 13 a2 00 00 df e1 6c 3a f0 0a e8 e0 0f 00 d0
>3a6cd8		f4 28 38 fa 6b 28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c
>3a6ce8		3d 3e 3f 5c 5b 5d 7c 22 08 08 c2 20 48 a9 00 08
>3a6cf8		5b 68 28 c2 30 20 1a 1c 20 61 06 20 cd 6b 22 10
>3a6d08		11 00 b0 22 20 db 69 08 c2 20 48 a9 00 08 5b 68
>3a6d18		28 e2 20 a9 14 8f d3 08 00 c2 20 29 ff 00 20 6c
>3a6d28		1d e2 20 dc d4 08 e2 20 a9 2c 20 38 21 c2 20 20
>3a6d38		1a 1c 20 61 06 ad 38 03 85 08 ad 3a 03 85 0a e2
>3a6d48		20 a2 00 00 a9 20 95 7e e8 e0 0b 00 d0 f8 a2 00
>3a6d58		00 a0 00 00 b7 23 f0 76 c9 2e f0 39 22 b6 6c 3a
>3a6d68		b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a6d78		8f d3 08 00 c2 20 29 ff 00 20 6c 1d e2 20 dc d4
>3a6d88		08 95 7e c8 e8 c0 08 00 d0 ca b7 23 f0 40 c9 2e
>3a6d98		f0 03 c8 80 f5 c8 a2 08 00 b7 23 f0 31 22 b6 6c
>3a6da8		3a b0 22 20 db 69 08 c2 20 48 a9 00 08 5b 68 28
>3a6db8		e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 6c 1d
>3a6dc8		e2 20 dc d4 08 95 7e c8 e8 c0 0c 00 d0 cb a2 00
>3a6dd8		00 a0 00 00 b5 7e 97 08 e8 c8 c0 0b 00 d0 f5 22
>3a6de8		14 11 00 b0 22 20 db 69 08 c2 20 48 a9 00 08 5b
>3a6df8		68 28 e2 20 a9 15 8f d3 08 00 c2 20 29 ff 00 20
>3a6e08		6c 1d e2 20 dc d4 08 20 db 69 28 60 08 08 c2 20
>3a6e18		48 a9 00 08 5b 68 28 c2 30 20 1a 1c 20 61 06 a5
>3a6e28		23 8f 64 03 00 a5 25 8f 66 03 00 e2 20 a9 2c 20
>3a6e38		38 21 c2 20 20 1a 1c 20 61 06 a5 23 8f 68 03 00
>3a6e48		a5 25 8f 6a 03 00 22 30 11 00 b0 1f 08 c2 20 48
>3a6e58		a9 00 08 5b 68 28 e2 20 a9 16 8f d3 08 00 c2 20
>3a6e68		29 ff 00 20 6c 1d e2 20 dc d4 08 28 60 5c 35 88
>3a6e78		3a 5c 86 86 3a 5c 36 88 3a 5c b2 77 3a 5c 0f 78
>3a6e88		3a 5c 42 77 3a 5c c8 76 3a 5c 45 7c 3a 5c 33 73
>3a6e98		3a 5c 60 76 3a 5c 1b 76 3a 5c a5 75 3a 5c 44 87
>3a6ea8		3a 5c 41 74 3a 5c 94 72 3a 5c bf 87 3a 5c 6f 73
>3a6eb8		3a 5c 38 88 3a 5c 31 88 3a 5c 5e 75 3a 5c 39 88
>3a6ec8		3a 18 fb c2 20 a9 ff fe 1b 58 5c d6 6e 3a c2 30
>3a6ed8		22 94 72 3a 20 08 00 20 0c 00 8b e2 20 a9 00 48
>3a6ee8		ab a2 00 4f 20 e3 04 ab 22 79 6e 3a 22 81 6e 3a
>3a6ef8		80 e2 08 8b e2 20 a9 3a 48 ab c2 10 a2 0d 6f 20
>3a6f08		e2 03 ab 28 6b 41 20 3c 73 74 61 72 74 3e 20 3c
>3a6f18		61 73 73 65 6d 62 6c 79 3e 0d 20 20 41 73 73 65
>3a6f28		6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d 0d
>3a6f38		43 20 3c 73 74 61 72 74 31 3e 20 3c 73 74 61 72
>3a6f48		74 32 3e 20 5b 6c 65 6e 20 28 31 20 69 66 20 62
>3a6f58		6c 61 6e 6b 29 5d 0d 20 20 43 6f 6d 70 61 72 65
>3a6f68		20 74 6f 20 73 65 63 74 69 6f 6e 73 20 6f 66 20
>3a6f78		6d 65 6d 6f 72 79 0d 0d 44 20 3c 73 74 61 72 74
>3a6f88		3e 20 5b 65 6e 64 5d 0d 20 20 44 69 73 61 73 73
>3a6f98		65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d
>3a6fa8		0d 46 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e
>3a6fb8		20 3c 62 79 74 65 3e 0d 20 20 46 69 6c 6c 20 61
>3a6fc8		20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f 72 79
>3a6fd8		20 77 69 74 68 20 61 20 62 79 74 65 0d 0d 47 20
>3a6fe8		5b 61 64 64 72 65 73 73 5d 0d 20 20 53 74 61 72
>3a6ff8		74 20 65 78 65 63 75 74 69 6f 6e 20 61 74 20 61
>3a7008		20 6c 6f 63 61 74 69 6f 6e 0d 0d 4a 20 5b 61 64
>3a7018		64 72 65 73 73 5d 20 2d 20 4a 75 6d 70 20 74 6f
>3a7028		20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d
>3a7038		65 6d 6f 72 79 0d 20 20 4a 75 6d 70 20 74 6f 20
>3a7048		61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d 65
>3a7058		6d 6f 72 79 0d 0d 48 20 3c 73 74 61 72 74 3e 20
>3a7068		3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20 5b 62 79
>3a7078		74 65 5d 2e 2e 0d 20 20 48 75 6e 74 20 66 6f 72
>3a7088		20 76 61 6c 75 65 73 20 69 6e 20 6d 65 6d 6f 72
>3a7098		79 0d 0d 4c 20 20 20 20 20 4c 4f 41 44 20 20 20
>3a70a8		20 20 20 20 20 20 22 46 69 6c 65 22 20 5b 64 65
>3a70b8		73 74 69 6e 61 74 69 6f 6e 5d 0d 4d 20 3c 73 74
>3a70c8		61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44 75 6d
>3a70d8		70 20 74 68 65 20 76 61 6c 75 65 20 69 6e 20 6d
>3a70e8		65 6d 6f 72 79 0d 0d 52 20 2d 20 44 69 73 70 6c
>3a70f8		61 79 20 74 68 65 20 76 61 6c 75 65 73 20 6f 66
>3a7108		20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>3a7118		3b 20 3c 50 43 3e 20 3c 41 3e 20 3c 58 3e 20 3c
>3a7128		59 3e 20 3c 53 50 3e 20 3c 44 42 52 3e 20 3c 44
>3a7138		50 3e 20 3c 4e 56 4d 58 44 49 5a 43 3e 0d 20 20
>3a7148		43 68 61 6e 67 65 20 74 68 65 20 63 6f 6e 74 65
>3a7158		6e 74 73 20 6f 66 20 74 68 65 20 72 65 67 69 73
>3a7168		74 65 72 73 0d 0d 53 20 20 20 20 20 53 41 56 45
>3a7178		20 20 20 20 20 20 20 20 20 22 46 69 6c 65 22 20
>3a7188		3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 0d 54 20
>3a7198		3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c 64
>3a71a8		65 73 74 69 6e 61 74 69 6f 6e 3e 0d 20 20 54 72
>3a71b8		61 6e 73 66 65 72 20 28 63 6f 70 79 29 20 64 61
>3a71c8		74 61 20 77 69 74 68 69 6e 20 6d 65 6d 6f 72 79
>3a71d8		0d 0d 57 20 3c 62 79 74 65 3e 0d 20 20 53 65 74
>3a71e8		20 74 68 65 20 72 65 67 69 73 74 65 72 20 77 69
>3a71f8		64 74 68 20 66 6c 61 67 73 20 66 6f 72 20 74 68
>3a7208		65 20 64 69 73 61 73 73 65 6d 62 6c 65 72 0d 0d
>3a7218		58 20 2d 20 52 65 74 75 72 6e 20 74 6f 20 42 41
>3a7228		53 49 43 0d 0d 3e 20 3c 73 74 61 72 74 3e 20 3c
>3a7238		62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 2e 0d
>3a7248		20 20 45 64 69 74 20 64 61 74 61 20 69 6e 20 6d
>3a7258		65 6d 6f 72 79 0d 0d 3f 20 2d 20 44 69 73 70 6c
>3a7268		61 79 20 61 20 73 68 6f 72 74 20 68 65 6c 70 20
>3a7278		73 63 72 65 65 6e 0d 0d 00 08 08 c2 20 48 a9 48
>3a7288		08 5b 68 28 e2 20 a5 0d 85 4e 28 6b 20 aa 01 08
>3a7298		e2 20 48 a9 3a 48 ab 68 28 a2 76 88 20 e2 03 e2
>3a72a8		20 a9 3b 20 18 00 a9 20 20 18 00 c2 30 08 e2 20
>3a72b8		48 a9 00 48 ab 68 28 a0 03 00 a2 42 02 20 65 03
>3a72c8		c2 20 a9 20 00 20 18 00 af 44 02 00 20 f2 03 a9
>3a72d8		20 00 20 18 00 af 46 02 00 20 f2 03 a9 20 00 20
>3a72e8		18 00 af 48 02 00 20 f2 03 a9 20 00 20 18 00 af
>3a72f8		4a 02 00 20 f2 03 a9 20 00 20 18 00 af 4e 02 00
>3a7308		20 0c 04 a9 20 00 20 18 00 20 18 00 af 4c 02 00
>3a7318		20 f2 03 a9 20 00 20 18 00 08 e2 20 ad 4f 02 22
>3a7328		8f 85 3a 28 20 55 03 20 55 03 6b 08 0b 08 c2 20
>3a7338		48 a9 48 08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5
>3a7348		0f c5 13 d0 0e c2 20 a5 0d c5 11 d0 06 20 55 03
>3a7358		2b 28 6b c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5
>3a7368		0e 69 00 85 0e 80 d0 08 0b 08 c2 20 48 a9 48 08
>3a7378		5b 68 28 e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5
>3a7388		15 90 3d e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2
>3a7398		20 a5 0d c5 11 d0 03 4c 26 74 c2 20 18 a5 0d 69
>3a73a8		01 00 85 0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5
>3a73b8		15 69 01 00 85 15 e2 20 a5 16 69 00 85 16 80 c3
>3a73c8		c2 20 38 a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85
>3a73d8		1b c2 20 18 a5 19 65 15 85 15 e2 20 a5 1b 65 17
>3a73e8		85 17 e2 20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20
>3a73f8		a5 11 c5 0d d0 02 80 26 c2 20 38 a5 11 e9 01 00
>3a7408		85 11 e2 20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9
>3a7418		01 00 85 15 e2 20 a5 16 e9 00 85 16 80 c4 20 55
>3a7428		03 2b 28 6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9
>3a7438		a0 90 03 28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48
>3a7448		a9 48 08 5b 68 28 e2 20 a9 00 8f b6 08 00 a5 31
>3a7458		c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00 01
>3a7468		85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32
>3a7478		e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69 00 01
>3a7488		85 11 e2 20 a5 34 69 00 85 13 e2 20 a0 00 00 c2
>3a7498		20 a5 32 85 19 e2 20 a5 34 85 1b e2 20 a7 19 22
>3a74a8		2c 74 3a b0 02 a9 3f 99 7e 08 c2 20 18 a5 19 69
>3a74b8		01 00 85 19 e2 20 a5 1b 69 00 85 1b c8 c0 08 00
>3a74c8		90 db a9 00 99 7e 08 a9 3e 20 18 00 a9 20 20 18
>3a74d8		00 e2 20 a5 34 20 0c 04 a9 3a 20 18 00 c2 20 a5
>3a74e8		32 20 f2 03 c2 20 a9 08 00 85 47 e2 20 a9 20 20
>3a74f8		18 00 a7 32 20 0c 04 22 6e 85 3a e2 20 c6 47 d0
>3a7508		ea a9 20 20 18 00 a9 20 20 18 00 08 e2 20 48 a9
>3a7518		00 48 ab 68 28 a2 7e 08 20 e2 03 20 55 03 20 6c
>3a7528		03 a5 34 c5 13 90 0f c2 20 a5 32 c5 11 90 07 20
>3a7538		55 03 2b ab 28 6b 4c 92 74 08 8d 92 08 e2 20 bd
>3a7548		00 00 99 00 00 ad 92 08 f0 0a c8 e8 e8 e8 e8 ce
>3a7558		92 08 80 eb 28 6b 08 0b 8b 08 c2 20 48 a9 48 08
>3a7568		5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 a5
>3a7578		0d 85 32 a5 0f 85 34 e2 20 a5 31 3a 85 47 a2 59
>3a7588		08 a0 7e 08 22 41 75 3a a0 00 00 b9 7e 08 87 32
>3a7598		22 6e 85 3a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b 8b
>3a75a8		08 c2 20 48 a9 48 08 5b 68 28 08 e2 20 48 a9 00
>3a75b8		48 ab 68 28 e2 20 c2 10 a5 31 3a 3a 85 47 a2 5d
>3a75c8		08 a0 7e 08 22 41 75 3a c2 20 a5 0d 85 32 a5 0f
>3a75d8		85 34 c2 20 a5 34 c5 13 d0 06 a5 32 c5 11 f0 2c
>3a75e8		e2 20 a0 00 00 b7 32 d9 7e 08 d0 1a c8 c4 47 d0
>3a75f8		f4 c2 20 a5 32 85 4a a5 34 85 4c 22 18 80 3a e2
>3a7608		20 a9 20 20 18 00 22 6e 85 3a 80 c6 20 55 03 ab
>3a7618		2b 28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5
>3a7628		31 f0 0e c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02
>3a7638		00 af 46 02 00 aa af 48 02 00 a8 af 4a 02 00 1b
>3a7648		af 4c 02 00 5b e2 20 a9 3a 48 a9 76 48 a9 5b 48
>3a7658		4c 92 76 ea 5c 04 00 3a 08 c2 20 48 a9 48 08 5b
>3a7668		68 28 e2 20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02 00
>3a7678		a5 0f 8f 42 02 00 af 46 02 00 aa af 48 02 00 a8
>3a7688		af 4a 02 00 1b af 4c 02 00 5b e2 20 af 4e 02 00
>3a7698		48 ab a9 5c 8f a2 08 00 af 42 02 00 8f a5 08 00
>3a76a8		af 41 02 00 8f a4 08 00 af 40 02 00 8f a3 08 00
>3a76b8		af 4f 02 00 48 c2 20 af 44 02 00 28 5c a2 08 00
>3a76c8		08 0b 8b 08 e2 20 48 a9 3a 48 ab 68 28 08 c2 20
>3a76d8		48 a9 48 08 5b 68 28 c2 10 e2 20 a5 31 c9 02 f0
>3a76e8		0c c9 03 d0 11 c2 20 a5 15 85 47 80 11 c2 20 a9
>3a76f8		01 00 85 47 80 08 a2 3a 88 20 e2 03 80 35 a5 0d
>3a7708		85 4a a5 0f 85 4c a0 00 00 e2 20 a7 4a d7 11 f0
>3a7718		09 22 18 80 3a a9 20 20 18 00 c2 20 18 a5 4a 69
>3a7728		01 00 85 4a a5 4c 69 00 00 85 4c c8 c4 47 d0 d9
>3a7738		20 55 03 20 55 03 ab 2b 28 6b 08 0b 8b 08 e2 20
>3a7748		48 a9 00 48 ab 68 28 08 c2 20 48 a9 48 08 5b 68
>3a7758		28 e2 20 a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e 42
>3a7768		02 c9 01 f0 41 a6 11 8e 44 02 c9 02 f0 38 a6 15
>3a7778		8e 46 02 c9 03 f0 2f a6 19 8e 48 02 c9 04 f0 26
>3a7788		a6 1d 8e 4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e 02
>3a7798		c9 06 f0 12 c2 10 a6 25 8e 4c 02 c9 07 f0 07 e2
>3a77a8		10 a6 29 8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2 20
>3a77b8		48 a9 48 08 5b 68 28 e2 20 c2 10 a2 00 00 bf a7
>3a77c8		88 3a f0 18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a aa
>3a77d8		bf e8 77 3a 8f 2f 08 00 22 0c 78 3a ab 2b 28 6b
>3a77e8		85 6e 8d 6e 91 6e 95 6e 99 6e 9d 6e a1 6e a5 6e
>3a77f8		a9 6e ad 6e 89 6e b1 6e b5 6e b9 6e 81 72 bd 6e
>3a7808		c1 6e fa 6e 6c 2f 08 08 8b 0b 08 c2 20 48 a9 48
>3a7818		08 5b 68 28 e2 20 a5 31 c9 02 b0 03 4c b5 79 c2
>3a7828		20 a5 0d 85 32 a5 0f 85 34 c2 20 22 b7 7b 3a c9
>3a7838		ff ff f0 10 85 54 e2 20 a5 31 c9 03 f0 36 a9 13
>3a7848		85 4f 80 4c 20 55 03 08 e2 20 48 a9 3a 48 ab 68
>3a7858		28 c2 10 a2 ec 79 20 e2 03 4c b5 79 20 55 03 08
>3a7868		e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 fb 79 20 e2
>3a7878		03 4c b5 79 e2 20 22 ed 7b 3a c9 ff f0 de 85 4f
>3a7888		c9 03 f0 62 c9 0b f0 5e c9 13 f0 04 c9 08 f0 00
>3a7898		22 e5 7a 3a b0 03 4c 7e 79 87 32 22 6e 85 3a 08
>3a78a8		e2 20 48 a9 00 48 ab 68 28 c2 20 a5 32 85 56 a5
>3a78b8		34 85 58 e2 20 a5 4f c9 12 f0 6c c9 16 f0 68 c9
>3a78c8		14 f0 7c 29 3f c9 02 d0 03 4c ac 79 c2 20 29 ff
>3a78d8		00 aa e2 20 bf b4 84 3a c9 03 f0 57 c9 02 f0 5f
>3a78e8		c9 01 f0 67 80 71 c2 20 a5 54 c9 2c 81 f0 26 c9
>3a78f8		90 81 f0 2a c9 10 81 f0 1c c9 14 81 f0 17 c9 1c
>3a7908		81 f0 12 c9 04 81 f0 0d c9 18 81 f0 08 c9 00 81
>3a7918		f0 03 4c 98 78 e2 20 a9 12 85 4f 4c 98 78 e2 20
>3a7928		a9 16 85 4f 4c 98 78 22 28 7a 3a 90 60 c9 02 f0
>3a7938		0e 80 18 a0 02 00 b9 98 08 97 56 22 6e 85 3a a0
>3a7948		01 00 b9 98 08 97 56 22 6e 85 3a a0 00 00 b9 98
>3a7958		08 97 56 22 6e 85 3a e2 20 a9 41 20 18 00 a9 20
>3a7968		20 18 00 a6 32 86 4a a6 34 86 4c 22 18 80 3a a9
>3a7978		20 20 18 00 80 37 20 55 03 08 e2 20 48 a9 3a 48
>3a7988		ab 68 28 c2 10 a2 b9 79 20 e2 03 80 20 20 55 03
>3a7998		08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 09 7a 20
>3a79a8		e2 03 80 09 a5 4f 29 c0 d0 95 4c 53 79 2b ab 28
>3a79b8		6b 41 64 64 72 65 73 73 69 6e 67 20 6d 6f 64 65
>3a79c8		20 6e 6f 74 20 64 65 66 69 6e 65 64 20 66 6f 72
>3a79d8		20 74 68 61 74 20 69 6e 73 74 72 75 63 74 69 6f
>3a79e8		6e 2e 0d 00 42 61 64 20 6d 6e 65 6d 6f 6e 69 63
>3a79f8		2e 0d 00 42 61 64 20 6f 70 65 72 61 6e 64 2e 0d
>3a7a08		00 52 65 6c 61 74 69 76 65 20 6f 66 66 73 65 74
>3a7a18		20 69 73 20 74 6f 6f 20 6c 61 72 67 65 2e 0d 00
>3a7a28		08 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4f
>3a7a38		c9 12 f0 0a c2 20 18 a5 32 69 02 00 80 08 c2 20
>3a7a48		18 a5 32 69 01 00 85 4a a5 34 69 00 00 85 4c 38
>3a7a58		a5 50 e5 4a 85 50 a5 52 e5 4c 85 52 e2 20 a5 4f
>3a7a68		c9 16 f0 1e a5 50 30 0c a5 51 d0 2a a5 52 d0 26
>3a7a78		a9 01 80 26 a5 51 c9 ff d0 1c a5 52 c9 ff d0 16
>3a7a88		80 18 a5 51 30 06 a5 52 d0 0c 80 0e a5 52 c9 ff
>3a7a98		d0 04 a9 02 80 04 2b 28 18 6b 2b 28 38 6b 08 0b
>3a7aa8		c2 10 da 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a2
>3a7ab8		00 00 df 00 d0 3a f0 08 e8 e0 10 00 f0 1b 80 f2
>3a7ac8		c2 20 06 50 26 52 06 50 26 52 06 50 26 52 06 50
>3a7ad8		26 52 e2 20 8a 05 50 85 50 fa 2b 28 6b 0b 8b 08
>3a7ae8		c2 20 48 a9 48 08 5b 68 28 08 e2 20 48 a9 3a 48
>3a7af8		ab 68 28 e2 20 a5 4f 29 3f 85 4a c2 30 a2 00 00
>3a7b08		a0 00 00 bd b2 81 f0 1b c5 54 d0 0d e2 20 b9 b4
>3a7b18		83 29 3f c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98 38
>3a7b28		ab 2b 6b 18 ab 2b 6b 08 0b 08 c2 20 48 a9 48 08
>3a7b38		5b 68 28 e2 20 c2 10 a0 00 00 64 50 64 52 b7 03
>3a7b48		f0 11 c9 64 f0 19 48 b7 36 85 4a 68 c5 4a d0 0b
>3a7b58		c8 80 eb b7 36 d0 04 2b 28 38 6b 2b 28 18 6b e2
>3a7b68		20 b7 36 c9 3a b0 04 c9 30 b0 14 c9 47 b0 04 c9
>3a7b78		41 b0 0c c9 67 b0 e4 c9 61 b0 02 80 de 29 df 22
>3a7b88		a6 7a 3a 80 cb 0b 08 c2 20 48 a9 48 08 5b 68 28
>3a7b98		a0 00 00 e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8 5a
>3a7ba8		68 18 65 03 85 03 a5 05 69 00 00 85 05 2b 6b 0b
>3a7bb8		08 c2 20 48 a9 48 08 5b 68 28 c2 20 a5 11 85 36
>3a7bc8		a5 13 85 38 a9 40 80 85 03 a9 3a 00 85 05 22 2f
>3a7bd8		7b 3a b0 0d 22 8d 7b 3a a7 03 d0 f2 a9 ff ff 80
>3a7be8		02 a5 03 2b 6b 08 0b 08 c2 20 48 a9 48 08 5b 68
>3a7bf8		28 c2 30 a5 15 85 36 a5 17 85 38 a9 cc 84 85 03
>3a7c08		a9 3a 00 85 05 22 2f 7b 3a b0 22 22 8d 7b 3a c2
>3a7c18		20 18 a5 03 69 01 00 85 03 a5 05 69 00 00 85 05
>3a7c28		e2 20 a7 03 d0 df c2 20 a9 ff ff 80 0d 22 8d 7b
>3a7c38		3a e2 20 a7 03 c2 20 29 ff 00 2b 28 6b 08 8b 0b
>3a7c48		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a9 00 8f b6
>3a7c58		08 00 a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5
>3a7c68		0d 69 00 01 85 11 e2 20 a5 0f 69 00 85 13 c2 20
>3a7c78		a5 0d 85 32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5
>3a7c88		32 69 00 01 85 11 e2 20 a5 34 69 00 85 13 22 b1
>3a7c98		7c 3a e2 20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11
>3a7ca8		90 ec 20 55 03 2b ab 28 6b 08 0b e2 20 a9 41 20
>3a7cb8		18 00 a9 20 20 18 00 08 c2 20 48 a9 7a 08 5b 68
>3a7cc8		28 c2 20 a5 00 85 18 e2 20 a5 02 85 1a 22 18 80
>3a7cd8		3a a9 20 20 18 00 c2 20 18 a5 00 69 01 00 85 18
>3a7ce8		e2 20 a5 02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2
>3a7cf8		d0 0b 48 a7 18 49 ff 2f 96 08 00 80 0b c9 e2 d0
>3a7d08		0c 48 a7 18 0f 96 08 00 8f 96 08 00 68 c2 20 29
>3a7d18		ff 00 0a aa bf b2 81 3a aa 22 92 7f 3a e2 20 a7
>3a7d28		00 aa bf b4 83 3a 22 6e 85 3a 22 3f 7d 3a 20 55
>3a7d38		03 20 6c 03 2b 28 6b 08 e2 20 48 29 3f 0a c2 10
>3a7d48		aa 68 7c 4d 7d 7d 7d 98 7d 9f 7d c4 7d cb 7d e6
>3a7d58		7d 08 7e 19 7e 56 7e 5e 7e 6f 7e 80 7e 87 7e ac
>3a7d68		7e d9 7e 45 7e 2a 7e f7 7d cc 7e d6 7e ea 7e 19
>3a7d78		7f c7 7e 2a 7f a9 28 20 18 00 22 41 7f 3a a9 2c
>3a7d88		20 18 00 a9 58 20 18 00 a9 29 20 18 00 4c 3b 7f
>3a7d98		22 41 7f 3a 4c 3b 7f e2 20 48 a9 23 20 18 00 68
>3a7da8		29 c0 c9 00 f0 0f 4a 4a 2f 96 08 00 d0 07 22 4b
>3a7db8		7f 3a 4c 3b 7f 22 41 7f 3a 4c 3b 7f 22 4b 7f 3a
>3a7dc8		4c 3b 7f a9 28 20 18 00 22 41 7f 3a a9 29 20 18
>3a7dd8		00 a9 2c 20 18 00 a9 59 20 18 00 4c 3b 7f 22 41
>3a7de8		7f 3a a9 2c 20 18 00 a9 58 20 18 00 4c 3b 7f 22
>3a7df8		41 7f 3a a9 2c 20 18 00 a9 59 20 18 00 4c 3b 7f
>3a7e08		22 4b 7f 3a a9 2c 20 18 00 a9 59 20 18 00 4c 3b
>3a7e18		7f 22 4b 7f 3a a9 2c 20 18 00 a9 58 20 18 00 4c
>3a7e28		3b 7f a9 28 20 18 00 22 4b 7f 3a a9 2c 20 18 00
>3a7e38		a9 58 20 18 00 a9 29 20 18 00 4c 3b 7f a9 28 20
>3a7e48		18 00 22 41 7f 3a a9 29 20 18 00 4c 3b 7f a9 41
>3a7e58		20 18 00 4c 3f 7f 22 41 7f 3a a9 2c 20 18 00 a9
>3a7e68		53 20 18 00 4c 3b 7f a9 5b 20 18 00 22 41 7f 3a
>3a7e78		a9 5d 20 18 00 4c 3b 7f 22 59 7f 3a 4c 3f 7f a9
>3a7e88		28 20 18 00 22 41 7f 3a a9 2c 20 18 00 a9 53 20
>3a7e98		18 00 a9 29 20 18 00 a9 2c 20 18 00 a9 59 20 18
>3a7ea8		00 4c 3b 7f a9 5b 20 18 00 22 41 7f 3a a9 5d 20
>3a7eb8		18 00 a9 2c 20 18 00 a9 59 20 18 00 4c 3b 7f a0
>3a7ec8		02 00 80 03 a0 01 00 22 bf 7f 3a 4c 3f 7f 4c 3f
>3a7ed8		7f 22 59 7f 3a a9 2c 20 18 00 a9 58 20 18 00 4c
>3a7ee8		3f 7f a9 23 20 18 00 8b a5 02 48 ab a6 00 e8 a0
>3a7ef8		01 00 22 65 03 3a a9 2c 20 18 00 a9 23 20 18 00
>3a7f08		a6 00 a0 01 00 22 65 03 3a ab 22 6e 85 3a 4c 3b
>3a7f18		7f a9 28 20 18 00 22 4b 7f 3a a9 29 20 18 00 4c
>3a7f28		3b 7f a9 5b 20 18 00 22 4b 7f 3a a9 5d 20 18 00
>3a7f38		4c 3b 7f 22 6e 85 3a 28 6b 08 e2 20 a7 00 20 0c
>3a7f48		04 28 6b 08 c2 30 a7 00 20 f2 03 22 6e 85 3a 28
>3a7f58		6b 08 8b 0b c2 30 5a 08 c2 20 48 a9 7a 08 5b 68
>3a7f68		28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 a0 00 00
>3a7f78		a7 00 99 92 08 22 6e 85 3a c8 c0 03 00 d0 f1 22
>3a7f88		18 80 3a c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10
>3a7f98		08 e2 20 48 a9 3a 48 ab 68 28 bd 00 00 20 18 00
>3a7fa8		e8 bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8 a9
>3a7fb8		20 20 18 00 ab 28 6b 08 0b 08 c2 20 48 a9 7a 08
>3a7fc8		5b 68 28 e2 20 c0 02 00 f0 14 a7 00 85 18 30 06
>3a7fd8		64 19 64 1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00
>3a7fe8		85 18 22 6e 85 3a a7 00 85 19 30 04 64 1a 80 04
>3a7ff8		a9 ff 85 1a c2 20 38 a5 00 65 18 85 18 e2 20 a5
>3a8008		02 65 1a 85 1a 22 18 80 3a 22 6e 85 3a 2b 28 6b
>3a8018		08 0b c2 20 48 08 c2 20 48 a9 48 08 5b 68 28 e2
>3a8028		20 a5 4c 20 0c 04 e2 20 a9 3a 20 18 00 c2 20 a5
>3a8038		4a 20 f2 03 68 2b 28 6b 4f 52 41 00 41 4e 44 00
>3a8048		45 4f 52 00 41 44 43 00 53 54 41 00 4c 44 41 00
>3a8058		43 4d 50 00 53 42 43 00 41 53 4c 00 52 4f 4c 00
>3a8068		4c 53 52 00 52 4f 52 00 53 54 58 00 4c 44 58 00
>3a8078		44 45 43 00 49 4e 43 00 42 49 54 00 4a 4d 50 00
>3a8088		53 54 59 00 4c 44 59 00 43 50 59 00 43 50 58 00
>3a8098		42 52 4b 00 4a 53 52 00 52 54 49 00 52 54 53 00
>3a80a8		50 48 50 00 50 4c 50 00 50 48 41 00 50 4c 41 00
>3a80b8		44 45 59 00 54 41 59 00 49 4e 59 00 49 4e 58 00
>3a80c8		43 4c 43 00 53 45 43 00 43 4c 49 00 53 45 49 00
>3a80d8		54 59 41 00 43 4c 56 00 43 4c 44 00 53 45 44 00
>3a80e8		54 58 41 00 54 58 53 00 54 41 58 00 54 53 58 00
>3a80f8		44 45 58 00 4e 4f 50 00 42 50 4c 00 42 4d 49 00
>3a8108		42 56 43 00 42 56 53 00 42 43 43 00 42 43 53 00
>3a8118		42 4e 45 00 42 45 51 00 54 53 42 00 54 52 42 00
>3a8128		53 54 5a 00 42 52 41 00 50 48 59 00 50 4c 59 00
>3a8138		50 48 58 00 50 4c 58 00 50 48 44 00 50 4c 44 00
>3a8148		50 48 4b 00 52 54 4c 00 50 48 42 00 50 4c 42 00
>3a8158		57 41 49 00 58 42 41 00 54 43 53 00 54 53 43 00
>3a8168		54 43 44 00 54 44 43 00 54 58 59 00 54 59 58 00
>3a8178		53 54 50 00 58 43 45 00 43 4f 50 00 4a 53 4c 00
>3a8188		57 44 4d 00 50 45 52 00 42 52 4c 00 52 45 50 00
>3a8198		53 45 50 00 4d 56 50 00 4d 56 4e 00 50 45 49 00
>3a81a8		50 45 41 00 4a 4d 4c 00 00 00 98 80 40 80 80 81
>3a81b8		40 80 20 81 40 80 60 80 40 80 a8 80 40 80 60 80
>3a81c8		40 81 20 81 40 80 60 80 40 80 00 81 40 80 40 80
>3a81d8		40 80 24 81 40 80 60 80 40 80 c8 80 40 80 7c 80
>3a81e8		60 81 24 81 40 80 60 80 40 80 9c 80 44 80 84 81
>3a81f8		44 80 80 80 44 80 64 80 44 80 ac 80 44 80 64 80
>3a8208		44 81 80 80 44 80 64 80 44 80 04 81 44 80 44 80
>3a8218		44 80 80 80 44 80 64 80 44 80 cc 80 44 80 78 80
>3a8228		64 81 80 80 44 80 64 80 44 80 a0 80 48 80 88 81
>3a8238		48 80 9c 81 48 80 68 80 48 80 b0 80 48 80 68 80
>3a8248		48 81 84 80 48 80 68 80 48 80 08 81 48 80 48 80
>3a8258		48 80 a0 81 48 80 68 80 48 80 d0 80 48 80 30 81
>3a8268		68 81 ac 81 48 80 68 80 48 80 a4 80 4c 80 8c 81
>3a8278		4c 80 28 81 4c 80 6c 80 4c 80 b4 80 4c 80 6c 80
>3a8288		4c 81 84 80 4c 80 6c 80 4c 80 0c 81 4c 80 4c 80
>3a8298		4c 80 28 81 4c 80 6c 80 4c 80 d4 80 4c 80 34 81
>3a82a8		6c 81 84 80 4c 80 6c 80 4c 80 2c 81 50 80 90 81
>3a82b8		50 80 88 80 50 80 70 80 50 80 b8 80 80 80 e8 80
>3a82c8		50 81 88 80 50 80 70 80 50 80 10 81 50 80 50 80
>3a82d8		50 80 88 80 50 80 70 80 50 80 d8 80 50 80 ec 80
>3a82e8		70 81 28 81 50 80 28 81 50 80 8c 80 54 80 74 80
>3a82f8		54 80 8c 80 54 80 74 80 54 80 bc 80 54 80 f0 80
>3a8308		54 81 8c 80 54 80 74 80 54 80 14 81 54 80 54 80
>3a8318		54 80 8c 80 54 80 74 80 54 80 dc 80 54 80 f4 80
>3a8328		74 81 8c 80 54 80 74 80 54 80 90 80 58 80 94 81
>3a8338		58 80 90 80 58 80 78 80 58 80 c0 80 58 80 f8 80
>3a8348		58 81 90 80 58 80 78 80 58 80 18 81 58 80 58 80
>3a8358		58 80 a4 81 58 80 78 80 58 80 e0 80 58 80 38 81
>3a8368		78 81 ac 81 58 80 78 80 58 80 94 80 5c 80 98 81
>3a8378		5c 80 94 80 5c 80 7c 80 5c 80 c4 80 5c 80 fc 80
>3a8388		5c 81 94 80 5c 80 7c 80 5c 80 1c 81 5c 80 5c 80
>3a8398		5c 80 a8 81 5c 80 7c 80 5c 80 e4 80 5c 80 3c 81
>3a83a8		7c 81 9c 80 5c 80 7c 80 5c 80 00 00 13 00 02 09
>3a83b8		01 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c
>3a83c8		01 05 05 0d 13 06 08 13 03 07 07 0e 03 00 0b 09
>3a83d8		01 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c
>3a83e8		05 05 05 0d 13 06 08 13 07 07 07 0e 13 00 13 09
>3a83f8		14 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c
>3a8408		14 05 05 0d 13 06 13 13 0b 07 07 0b 13 00 16 09
>3a8418		01 01 01 0a 13 82 08 13 15 03 03 0b 12 04 0f 0c
>3a8428		05 05 05 0d 13 06 13 13 10 07 07 0e 12 00 16 09
>3a8438		01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c
>3a8448		05 05 11 0d 13 06 13 13 03 07 07 0e 82 00 42 09
>3a8458		01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c
>3a8468		05 05 11 0d 13 06 13 13 07 07 06 0e 42 00 02 09
>3a8478		01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c
>3a8488		01 05 05 0d 13 06 13 13 17 07 07 0e 42 00 02 09
>3a8498		01 01 01 0f 13 82 13 13 03 03 03 0b 12 04 0f 0c
>3a84a8		03 05 05 0d 13 06 13 13 10 07 07 0e 01 01 01 02
>3a84b8		01 01 02 02 00 01 01 03 01 01 03 01 02 01 01 00
>3a84c8		02 02 02 02 41 00 08 64 64 3a 64 64 64 64 2c 58
>3a84d8		00 0e 64 64 3a 64 64 64 64 00 0b 64 64 64 64 2c
>3a84e8		58 00 07 64 64 64 64 2c 59 00 06 64 64 64 64 00
>3a84f8		03 64 64 2c 58 00 05 64 64 2c 59 00 11 64 64 2c
>3a8508		53 00 09 64 64 00 01 23 64 64 64 64 00 c2 23 64
>3a8518		64 2c 23 64 64 00 14 23 64 64 00 02 28 64 64 2c
>3a8528		53 29 2c 59 00 0c 28 64 64 64 64 2c 58 29 00 10
>3a8538		28 64 64 64 64 29 00 10 28 64 64 2c 58 29 00 00
>3a8548		28 64 64 29 2c 59 00 04 28 64 64 29 00 0f 5b 64
>3a8558		64 64 64 5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64
>3a8568		64 5d 00 0a 00 00 08 c2 20 48 18 af 7a 08 00 69
>3a8578		01 00 8f 7a 08 00 e2 20 af 7c 08 00 69 00 8f 7c
>3a8588		08 00 c2 20 68 28 6b 08 c2 10 e2 20 da a2 08 00
>3a8598		0a b0 08 48 a9 30 20 18 00 80 06 48 a9 31 20 18
>3a85a8		00 68 ca d0 eb fa 28 6b 08 c2 20 48 a9 48 08 5b
>3a85b8		68 28 e2 20 a7 32 f0 0a c9 20 d0 06 22 6e 85 3a
>3a85c8		80 f2 6b 08 08 c2 20 48 a9 48 08 5b 68 28 22 6e
>3a85d8		85 3a 22 b0 85 3a c2 30 a5 31 c2 20 29 ff 00 0a
>3a85e8		0a aa a5 32 95 0d a5 34 95 0f e2 20 a7 32 f0 14
>3a85f8		c9 22 f0 06 22 6e 85 3a 80 f2 a9 00 87 32 22 6e
>3a8608		85 3a e6 31 28 6b 08 c2 20 48 a9 48 08 5b 68 28
>3a8618		e2 20 64 4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a
>3a8628		f0 0d 20 8a 04 90 0e 22 a6 7a 3a a9 01 85 4a 22
>3a8638		6e 85 3a 80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00
>3a8648		0a 0a aa a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b
>3a8658		e2 20 64 31 22 b0 85 3a a7 32 f0 21 c9 22 d0 06
>3a8668		22 cb 85 3a 80 0a 22 0e 86 3a a5 31 c9 09 b0 0d
>3a8678		a7 32 f0 09 c9 20 f0 dc 20 8a 04 b0 d7 6b 08 0b
>3a8688		08 c2 20 48 a9 48 08 5b 68 28 c2 10 e2 20 a2 31
>3a8698		00 74 00 ca d0 fb a9 00 85 02 85 34 c2 20 a9 00
>3a86a8		4f 85 00 85 32 e2 20 22 b0 85 3a c9 00 f0 38 c2
>3a86b8		20 a5 32 85 08 e2 20 a5 34 85 0a a2 01 00 22 6e
>3a86c8		85 3a a7 32 d0 06 86 0b 64 31 80 1b c9 20 f0 03
>3a86d8		e8 80 eb 86 0b a9 00 87 32 22 6e 85 3a a7 08 c9
>3a86e8		41 f0 07 22 58 86 3a 2b 28 6b 22 b0 85 3a a7 32
>3a86f8		f0 f5 22 0e 86 3a 22 b0 85 3a a7 32 f0 e9 c2 20
>3a8708		a5 32 85 11 e2 20 a5 34 85 13 22 6e 85 3a a7 32
>3a8718		f0 26 c9 20 d0 f4 a9 00 87 32 e6 31 22 6e 85 3a
>3a8728		22 b0 85 3a a7 32 f0 bf c2 20 a5 32 85 15 e2 20
>3a8738		a5 34 85 17 e6 31 80 af e6 31 80 ab 08 c2 10 e2
>3a8748		20 a5 31 d0 0f a2 3a 88 a9 3a 48 ab 20 e2 03 20
>3a8758		55 03 80 61 c2 20 a5 0d 8f 23 08 00 a5 0f 8f 25
>3a8768		08 00 20 2a 69 e2 20 a5 31 c9 01 d0 0f c2 20 a9
>3a8778		ff ff 8f 54 03 00 8f 56 03 00 80 0e c2 20 a5 11
>3a8788		8f 54 03 00 a5 13 8f 56 03 00 22 18 11 00 b0 25
>3a8798		e2 20 a2 60 88 a9 3a 48 ab 20 e2 03 af 2e 03 00
>3a87a8		20 0c 04 a9 20 20 18 00 af 20 03 00 20 0c 04 20
>3a87b8		55 03 20 55 03 28 6b 8b 08 c2 10 e2 20 a5 31 c9
>3a87c8		03 f0 0f a2 3a 88 a9 3a 48 ab 20 e2 03 20 55 03
>3a87d8		80 54 c2 20 a5 0d 8f 23 08 00 a5 0f 8f 25 08 00
>3a87e8		20 2a 69 a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5
>3a87f8		15 8f 58 03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0
>3a8808		25 e2 20 a2 4a 88 a9 3a 48 ab 20 e2 03 af 2e 03
>3a8818		00 20 0c 04 a9 20 20 18 00 af 20 03 00 20 0c 04
>3a8828		20 55 03 20 55 03 28 ab 6b 5c ce 26 3a 6b 00 00
>3a8838		00 00 42 61 64 20 61 72 67 75 6d 65 6e 74 73 0d
>3a8848		0d 00 55 6e 61 62 6c 65 20 74 6f 20 73 61 76 65
>3a8858		20 66 69 6c 65 3a 20 00 55 6e 61 62 6c 65 20 74
>3a8868		6f 20 6c 6f 61 64 20 66 69 6c 65 3a 20 00 0d 20
>3a8878		20 50 43 20 20 20 20 20 41 20 20 20 20 58 20 20
>3a8888		20 20 59 20 20 20 20 53 50 20 20 20 44 42 52 20
>3a8898		44 50 20 20 20 4e 56 4d 58 44 49 5a 43 0d 00 41
>3a88a8		43 44 46 47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e
>3a88b8		3f 00 18 fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a88c8		20 48 a9 00 48 ab 68 28 c2 30 20 f9 88 a9 ff fe
>3a88d8		1b 08 e2 20 48 a9 3a 48 ab 68 28 a2 71 d2 20 e2
>3a88e8		03 08 e2 20 48 a9 00 48 ab 68 28 4c ce 26 4c f6
>3a88f8		88 08 20 9c 02 20 bc 4e 28 60 00 00 00 00 00 00
>3a8908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1134 times (18144 bytes)...
>3acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>3ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>3ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>3ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>3ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>3ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>3ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>3ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>3ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>3ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>3ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>3ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>3ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>3ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>3ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>3ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>3ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>3ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>3ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>3ad248		4f 53 00 54 41 4e 00 4c 4e 00 41 43 4f 53 00 41
>3ad258		53 49 4e 00 41 54 41 4e 00 45 58 50 00 53 51 52
>3ad268		00 0d 52 45 41 44 59 0d 00 43 32 35 36 20 46 6f
>3ad278		65 6e 69 78 20 42 41 53 49 43 38 31 36 20 76 30
>3ad288		2e 32 2e 30 2d 61 6c 70 68 61 2b 32 39 33 0d 00
>3b0000						.align 256
.3b0000						CREDITS_TEXT
>3b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>3b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>3b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>3b004f		20
>3b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>3b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>3b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>3b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>3b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>3b009f		20
>3b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b00ef		20
>3b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b013f		20
>3b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>3b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>3b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>3b0168		6e 79 20 41 6c 6c 61 69 72 65
>3b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>3b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b018a		20 20 20 20 20 20
>3b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>3b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>3b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>3b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b01da		20 20 20 20 20 20
>3b01e0		20				                .text " "
>3b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0229		20 20 20 20 20 20 20
>3b0230		20				                .text " "
>3b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0279		20 20 20 20 20 20 20
>3b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>3b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>3b0298		53 3a
>3b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>3b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>3b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>3b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>3b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>3b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b031d		20 20 20
>3b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>3b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>3b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>3b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>3b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>3b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>3b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>3b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>3b0398		75 73 68
>3b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>3b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>3b03c8		54 68 61 6e 6b 73 3a
>3b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>3b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0407		20 20 20 20 20 20 20 20 20
>3b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>3b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>3b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>3b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>3b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>3b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b045f		20
>3b0460		20				                .text " "
>3b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b04a9		20 20 20 20 20 20 20
>3b04b0		20				                .text " "
>3b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b04f9		20 20 20 20 20 20 20
>3b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>3b0508		45 53 20 41 55 54 48 4f 52 53 3a
>3b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>3b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b054b		20 20 20 20 20
>3b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>3b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>3b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>3b0578		63 6f 72 65 73 2e 6f 72 67
>3b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>3b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0599		20 20 20 20 20 20 20
>3b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>3b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>3b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>3b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>3b05d8		6d
>3b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>3b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>3b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>3b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>3b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>3b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>3b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>3b063b		20 20 20 20 20
>3b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>3b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>3b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>3b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>3b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>3b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b068b		20 20 20 20 20
>3b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>3b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>3b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>3b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>3b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b06da		20 20 20 20 20 20
>3b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>3b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>3b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>3b0708		6a 61 64 61 20 47 6f 6d 65 7a
>3b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>3b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b072a		20 20 20 20 20 20
>3b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>3b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>3b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>3b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>3b0768		6f 6d
>3b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>3b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>3b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>3b0798		6e 69 78 20 55 29 3a 20 54 42 44
>3b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>3b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b07cb		20 20 20 20 20
>3b07d0		20				                .text " "
>3b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0819		20 20 20 20 20 20 20
>3b0820		20				                .text " "
>3b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0869		20 20 20 20 20 20 20
>3b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>3b0878		54 48 41 4e 4b 53 3a
>3b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>3b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b08b7		20 20 20 20 20 20 20 20 20
>3b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>3b08c8		56 61 6e 68 61 72 65 6e
>3b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>3b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0908		20 20 20 20 20 20 20 20
>3b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>3b0918		65 77
>3b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>3b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>3b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>3b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>3b0988		65 66 65 72 65 6e 63 65 73 29
>3b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>3b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b09aa		20 20 20 20 20 20
>3b09b0		20				                .text " "
>3b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b09f9		20 20 20 20 20 20 20
>3b0a00		20				                .text " "
>3b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0a49		20 20 20 20 20 20 20
>3b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b0a9f		20
>3b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>3b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>3b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>3b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>3b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>3b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>3b0aec		20 20 20 20
>3b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>3b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>3b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>3b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>3b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>3b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>3b0b3c		20 20 20 20
>3b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>3b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>3b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>3b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>3b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>3b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>3b0b8d		20 20 20
>3b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>3b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>3b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>3b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>3b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>3b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>3b0bdd		20 20 20
>3b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>3b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>3b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>3b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>3b0c2d		20 20 20
>3b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b0c7f		20
>3b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>3b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c98		53 74 65 66 61 6e 79
>3b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>3b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0cc7		20 20 20 20 20 20 20 20 20
>3b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>3b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>3b1768		20 20 20 20 20 20 20 20
>3b1770						.align 256
>3b1800		f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 80 * 60, $F3
>3b1808		f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;		...repeated 298 times (4768 bytes)...
>3b2ab8		f3 f3 f3 f3 f3 f3 f3 f3
.3e0000						BOOT_MENU
.3e0000						SplashScreenMain:
.3e0000		48		pha		                PHA             ; begin setdp macro
.3e0001		08		php		                PHP
.3e0002		c2 20		rep #$20	                REP #$20        ; set A long
.3e0004		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3e0007		5b		tcd		                TCD
.3e0008		28		plp		                PLP
.3e0009		68		pla		                PLA             ; end setdp macro
.3e000a		c2 10		rep #$10	                REP #$10        ; set X long
.3e000c		e2 20		sep #$20	                SEP #$20        ; set A short
.3e000e		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.3e0012		a9 00		lda #$00	                LDA #$00
.3e0014		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e0016		85 f1		sta $f1		                STA INTERRUPT_COUNT
.3e0018		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e001a		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.3e001e		29 04		and #$04	                AND #FNX0_INT02_TMR0
.3e0020		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.3e0024		20 ea 00	jsr $3e00ea	                JSR Splash_Get_Machine_ID
.3e0027		20 1d 01	jsr $3e011d	                JSR Splash_Clear_Screen
.3e002a		20 07 01	jsr $3e0107	                JSR Splash_Load_FontSet
.3e002d		22 08 03 3e	jsl $3e0308	                JSL Splashscreen_BitMapSetup
.3e0031		20 1b 06	jsr $3e061b	                JSR Model_Update_Info_Field
.3e0034		20 fc 05	jsr $3e05fc	                JSR Set_Text_Color
.3e0037		a9 00		lda #$00	                LDA #$00
.3e0039		85 a6		sta $a6		                STA LINE_INDEX  ; Point to the first line to be displayed
.3e003b		85 a7		sta $a7		                STA LINE_INDEX + 1
.3e003d		20 a3 08	jsr $3e08a3	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.3e0040						HAVE_FUN:
.3e0040		22 37 01 3e	jsl $3e0137	                JSL Splash_Moniker_Color_Rolling  ; Go Move The Colors on the Logo
.3e0044		a6 a6		ldx $a6		                LDX LINE_INDEX
.3e0046		e0 17 00	cpx #$0017	                CPX #NumberOfEntry
.3e0049		f0 08		beq $3e0053	                BEQ ByPassCharDisplay           ; If Equal all Lines have been displayed
.3e004b		20 e0 08	jsr $3e08e0	                JSR Line_Display_1_Character    ; Go move the cursor one stop
.3e004e		90 21		bcc $3e0071	                BCC Still_Displaying_Char
.3e0050		20 a3 08	jsr $3e08a3	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.3e0053						ByPassCharDisplay:
.3e0053		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0055		22 48 10 00	jsl $001048	                JSL GETCH               ; Try to get a character
.3e0059		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.3e005b		f0 14		beq $3e0071	                BEQ Still_Displaying_Char            ; No: keep waiting until timeout
.3e005d		c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.3e005f		f0 1f		beq $3e0080	                BEQ return              ; Yes: return it
.3e0061		c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.3e0063		f0 1b		beq $3e0080	                BEQ return              ; Yes: return it
.3e0065		c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.3e0067		f0 17		beq $3e0080	                BEQ return              ; Yes: return it
.3e0069		c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.3e006b		f0 13		beq $3e0080	                BEQ return              ; Yes: return it
.3e006d		c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.3e006f		f0 0d		beq $3e007e	                BEQ exitshere
.3e0071						Still_Displaying_Char:
.3e0071						WaitForNextSOF:
.3e0071		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0
.3e0075		29 01		and #$01	                AND #FNX0_INT00_SOF
.3e0077		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.3e0079		d0 f6		bne $3e0071	                BNE WaitForNextSOF;
.3e007b		4c 40 00	jmp $3e0040	                JMP HAVE_FUN
.3e007e						exitshere:
.3e007e						timeout
.3e007e		a9 00		lda #$00	                LDA #0                  ; Return 0 for a timeout / SPACE
.3e0080						return
.3e0080		8f 08 00 00	sta $000008	                STA @l KRNL_BOOT_MENU_K          ; Store ther Keyboard Value
.3e0084		a9 00		lda #$00	                LDA #$00
.3e0086		8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L         ; Disable Everything
.3e008a		22 3c 05 3e	jsl $3e053c	                JSL SS_VDMA_CLEAR_MEMORY_640_480 ; Clear the Bitmap Screen
.3e008e		20 a3 00	jsr $3e00a3	                JSR VickyII_Registers_Clear      ; Reset All Vicky Registers
.3e0091		22 c0 10 00	jsl $0010c0	                JSL INITFONTSET ; Reload the Official FONT set
.3e0095		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR ; Reset the Cursor to its origin
.3e0099		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.3e009d		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE  ; Init VICKY TextMode now contains Hi-Res Dipswitch read and Automatic Text Size Parameter adjust
.3e00a1		ea		nop		                NOP
.3e00a2		6b		rtl		                RTL
.3e00a3						VickyII_Registers_Clear:
.3e00a3		e2 20		sep #$20	                SEP #$20        ; set A short
.3e00a5		c2 10		rep #$10	                REP #$10        ; set X long
.3e00a7		a2 00 00	ldx #$0000	                LDX #$0000
.3e00aa		a9 00		lda #$00	                LDA #$00
.3e00ac						ClearSpriteRegisters:
.3e00ac		9f 00 0c af	sta $af0c00,x	                STA @l SP00_CONTROL_REG, X
.3e00b0		e8		inx		                INX
.3e00b1		e0 00 02	cpx #$0200	                CPX #$0200
.3e00b4		d0 f6		bne $3e00ac	                BNE ClearSpriteRegisters
.3e00b6		a2 00 00	ldx #$0000	                LDX #$0000
.3e00b9		a9 00		lda #$00	                LDA #$00
.3e00bb						ClearTiles0Registers:
.3e00bb		9f 00 02 af	sta $af0200,x	                STA @l TL0_CONTROL_REG, X
.3e00bf		e8		inx		                INX
.3e00c0		e0 30 00	cpx #$0030	                CPX #$0030
.3e00c3		d0 f6		bne $3e00bb	                BNE ClearTiles0Registers
.3e00c5		ea		nop		                NOP
.3e00c6		a2 00 00	ldx #$0000	                LDX #$0000
.3e00c9		a9 00		lda #$00	                LDA #$00
.3e00cb						ClearTiles1Registers:
.3e00cb		9f 80 02 af	sta $af0280,x	                STA @l TILESET0_ADDY_L, X
.3e00cf		e8		inx		                INX
.3e00d0		e0 20 00	cpx #$0020	                CPX #$0020
.3e00d3		d0 f6		bne $3e00cb	                BNE ClearTiles1Registers
.3e00d5		ea		nop		                NOP
.3e00d6		a2 00 00	ldx #$0000	                LDX #$0000
.3e00d9		a9 00		lda #$00	                LDA #$00
.3e00db						ClearBitmapRegisters:
.3e00db		9f 00 01 af	sta $af0100,x	                STA @l BM0_CONTROL_REG, X
.3e00df		9f 08 01 af	sta $af0108,x	                STA @l BM1_CONTROL_REG, X
.3e00e3		e8		inx		                INX
.3e00e4		e0 10 00	cpx #$0010	                CPX #$0010
.3e00e7		d0 f2		bne $3e00db	                BNE ClearBitmapRegisters
.3e00e9		60		rts		                RTS
.3e00ea						Splash_Get_Machine_ID
.3e00ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3e00ec		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.3e00f0		29 03		and #$03	                AND #$03        ; Isolate the first 2 bits to know if it is a U or FMX
.3e00f2		85 b0		sta $b0		                STA MODEL
.3e00f4		c9 00		cmp #$00	                CMP #$00
.3e00f6		f0 0e		beq $3e0106	                BEQ DONE
.3e00f8		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.3e00fc		29 04		and #$04	                AND #GABE_SYS_STAT_MID2 ; High 4Meg, Low - 2Megs
.3e00fe		c9 04		cmp #$04	                CMP #GABE_SYS_STAT_MID2
.3e0100		f0 04		beq $3e0106	                BEQ DONE
.3e0102		a9 02		lda #$02	                LDA #$02
.3e0104		85 b0		sta $b0		                STA MODEL       ; In this Scheme 00 - FMX, 01 - U+, 02 - U
.3e0106						DONE:
.3e0106		60		rts		                RTS
.3e0107						Splash_Load_FontSet
.3e0107		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0109		c2 10		rep #$10	                REP #$10        ; set X long
.3e010b		a2 00 00	ldx #$0000	                LDX #$0000
.3e010e						DONE_LOADING_FONT:
.3e010e		bf 00 08 3f	lda $3f0800,x	                LDA @l FONT_4_SPLASH, X
.3e0112		9f 00 80 af	sta $af8000,x	                STA @l FONT_MEMORY_BANK0, X
.3e0116		e8		inx		                INX
.3e0117		e0 00 08	cpx #$0800	                CPX #2048
.3e011a		d0 f2		bne $3e010e	                BNE DONE_LOADING_FONT
.3e011c		60		rts		                RTS
.3e011d						Splash_Clear_Screen
.3e011d		e2 20		sep #$20	                SEP #$20        ; set A short
.3e011f		c2 10		rep #$10	                REP #$10        ; set X long
.3e0121		a2 00 00	ldx #$0000	                LDX #$0000
.3e0124						Branch_Clear:
.3e0124		a9 20		lda #$20	                LDA #$20
.3e0126		9f 00 a0 af	sta $afa000,x	                STA @l CS_TEXT_MEM_PTR,X
.3e012a		a9 f0		lda #$f0	                LDA #$F0
.3e012c		9f 00 c0 af	sta $afc000,x	                STA @l CS_COLOR_MEM_PTR,X
.3e0130		e8		inx		                INX
.3e0131		e0 00 20	cpx #$2000	                CPX #$2000
.3e0134		d0 ee		bne $3e0124	                BNE Branch_Clear
.3e0136		60		rts		                RTS
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
.3e0137						Splash_Moniker_Color_Rolling
.3e0137		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0139		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3e013d		29 01		and #$01	                AND #FNX0_INT00_SOF
.3e013f		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3e0143		a5 f0		lda $f0		                LDA INTERRUPT_STATE
.3e0145		c9 00		cmp #$00	                CMP #IRQ_SOF_ST0
.3e0147		f0 0c		beq $3e0155	                BEQ SERVE_STATE0
.3e0149		c9 01		cmp #$01	                CMP #IRQ_SOF_ST1
.3e014b		f0 1a		beq $3e0167	                BEQ SERVE_STATE1
.3e014d		c9 02		cmp #$02	                CMP #IRQ_SOF_ST2
.3e014f		d0 03		bne $3e0154	                BNE NOT_SERVE_STATE2
.3e0151		82 39 01	brl $3e028d	                BRL SERVE_STATE2
.3e0154						NOT_SERVE_STATE2
.3e0154		6b		rtl		                RTL
.3e0155						SERVE_STATE0
.3e0155		a5 f1		lda $f1		                LDA INTERRUPT_COUNT
.3e0157		c9 04		cmp #$04	                CMP #$04
.3e0159		f0 03		beq $3e015e	                BEQ SERVE_NEXT_STATE
.3e015b		e6 f1		inc $f1		                INC INTERRUPT_COUNT
.3e015d		6b		rtl		                RTL
.3e015e						SERVE_NEXT_STATE
.3e015e		a9 00		lda #$00	                LDA #$00
.3e0160		85 f1		sta $f1		                STA INTERRUPT_COUNT
.3e0162		a9 01		lda #$01	                LDA #IRQ_SOF_ST1
.3e0164		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e0166		6b		rtl		                RTL
.3e0167						SERVE_STATE1
.3e0167		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e0169		a9 00 00	lda #$0000	                LDA #$0000
.3e016c		a2 00 00	ldx #$0000	                LDX #$0000
.3e016f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3e0171		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e0173		bf c0 02 3e	lda $3e02c0,x	                LDA @lCOLOR_POINTER+0, X
.3e0177		aa		tax		                TAX
.3e0178		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e017c		8f e0 3f af	sta $af3fe0	                STA @lGRPH_LUT7_PTR+992
.3e0180		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e0184		8f e1 3f af	sta $af3fe1	                STA @lGRPH_LUT7_PTR+993
.3e0188		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e018c		8f e2 3f af	sta $af3fe2	                STA @lGRPH_LUT7_PTR+994
.3e0190		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e0192		bf c1 02 3e	lda $3e02c1,x	                LDA @lCOLOR_POINTER+1, X
.3e0196		aa		tax		                TAX
.3e0197		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e019b		8f e4 3f af	sta $af3fe4	                STA @lGRPH_LUT7_PTR+996
.3e019f		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e01a3		8f e5 3f af	sta $af3fe5	                STA @lGRPH_LUT7_PTR+997
.3e01a7		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e01ab		8f e6 3f af	sta $af3fe6	                STA @lGRPH_LUT7_PTR+998
.3e01af		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01b1		bf c2 02 3e	lda $3e02c2,x	                LDA @lCOLOR_POINTER+2, X
.3e01b5		aa		tax		                TAX
.3e01b6		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e01ba		8f e8 3f af	sta $af3fe8	                STA @lGRPH_LUT7_PTR+1000
.3e01be		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e01c2		8f e9 3f af	sta $af3fe9	                STA @lGRPH_LUT7_PTR+1001
.3e01c6		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e01ca		8f ea 3f af	sta $af3fea	                STA @lGRPH_LUT7_PTR+1002
.3e01ce		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01d0		bf c3 02 3e	lda $3e02c3,x	                LDA @lCOLOR_POINTER+3, X
.3e01d4		aa		tax		                TAX
.3e01d5		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e01d9		8f ec 3f af	sta $af3fec	                STA @lGRPH_LUT7_PTR+1004
.3e01dd		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e01e1		8f ed 3f af	sta $af3fed	                STA @lGRPH_LUT7_PTR+1005
.3e01e5		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e01e9		8f ee 3f af	sta $af3fee	                STA @lGRPH_LUT7_PTR+1006
.3e01ed		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01ef		bf c4 02 3e	lda $3e02c4,x	                LDA @lCOLOR_POINTER+4, X
.3e01f3		aa		tax		                TAX
.3e01f4		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e01f8		8f f0 3f af	sta $af3ff0	                STA @lGRPH_LUT7_PTR+1008
.3e01fc		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e0200		8f f1 3f af	sta $af3ff1	                STA @lGRPH_LUT7_PTR+1009
.3e0204		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e0208		8f f2 3f af	sta $af3ff2	                STA @lGRPH_LUT7_PTR+1010
.3e020c		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e020e		bf c5 02 3e	lda $3e02c5,x	                LDA @lCOLOR_POINTER+5, X
.3e0212		aa		tax		                TAX
.3e0213		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e0217		8f f4 3f af	sta $af3ff4	                STA @lGRPH_LUT7_PTR+1012
.3e021b		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e021f		8f f5 3f af	sta $af3ff5	                STA @lGRPH_LUT7_PTR+1013
.3e0223		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e0227		8f f6 3f af	sta $af3ff6	                STA @lGRPH_LUT7_PTR+1014
.3e022b		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e022d		bf c6 02 3e	lda $3e02c6,x	                LDA @lCOLOR_POINTER+6, X
.3e0231		aa		tax		                TAX
.3e0232		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e0236		8f f8 3f af	sta $af3ff8	                STA @lGRPH_LUT7_PTR+1016
.3e023a		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e023e		8f f9 3f af	sta $af3ff9	                STA @lGRPH_LUT7_PTR+1017
.3e0242		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e0246		8f fa 3f af	sta $af3ffa	                STA @lGRPH_LUT7_PTR+1018
.3e024a		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e024c		bf c7 02 3e	lda $3e02c7,x	                LDA @lCOLOR_POINTER+7, X
.3e0250		aa		tax		                TAX
.3e0251		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e0255		8f fc 3f af	sta $af3ffc	                STA @lGRPH_LUT7_PTR+1020
.3e0259		8f 50 1f af	sta $af1f50	                STA @lFG_CHAR_LUT_PTR + $10           ;
.3e025d		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e0261		8f fd 3f af	sta $af3ffd	                STA @lGRPH_LUT7_PTR+1021
.3e0265		8f 51 1f af	sta $af1f51	                STA @lFG_CHAR_LUT_PTR + $11            ;
.3e0269		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e026d		8f fe 3f af	sta $af3ffe	                STA @lGRPH_LUT7_PTR+1022
.3e0271		8f 52 1f af	sta $af1f52	                STA @lFG_CHAR_LUT_PTR + $12            ;
.3e0275						HERE
.3e0275		18		clc		                CLC
.3e0276		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.3e0278		69 09		adc #$09	                ADC #$09
.3e027a		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e027c		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.3e027e		c9 48		cmp #$48	                CMP #$48
.3e0280		d0 04		bne $3e0286	                BNE EXIT_COLOR_CHANGE
.3e0282		a9 00		lda #$00	                LDA #$00
.3e0284		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e0286						EXIT_COLOR_CHANGE
.3e0286		c2 10		rep #$10	                REP #$10        ; set X long
.3e0288		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.3e028a		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e028c		6b		rtl		                RTL
.3e028d						SERVE_STATE2
.3e028d		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.3e028f		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e0291		6b		rtl		                RTL
>3e0292						.align 16
>3e02a0		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>3e02a4		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>3e02a8		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>3e02ac		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>3e02b0		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>3e02b4		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>3e02b8		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>3e02bc		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>3e02c0		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>3e02c8		00
>3e02c9		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>3e02d1		00
>3e02d2		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>3e02da		00
>3e02db		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>3e02e3		00
>3e02e4		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>3e02ec		00
>3e02ed		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>3e02f5		00
>3e02f6		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>3e02fe		00
>3e02ff		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>3e0307		00

;******  Processing file: src\SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480
.3e0308						Splashscreen_BitMapSetup
.3e0308		e2 20		sep #$20	                SEP #$20        ; set A short
.3e030a		c2 10		rep #$10	                REP #$10        ; set X long
.3e030c		a9 0f		lda #$0f	        LDA #( Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay );
.3e030e		8f 00 00 af	sta $af0000	        STA @l MASTER_CTRL_REG_L
.3e0312		a9 00		lda #$00	        LDA #$00
.3e0314		8f 01 00 af	sta $af0001	        STA @l MASTER_CTRL_REG_H
.3e0318		a9 00		lda #$00	        LDA #$00
.3e031a		8f 00 01 af	sta $af0100	        STA @l BM0_CONTROL_REG
.3e031e		a9 0f		lda #$0f	        LDA #( BM_Enable | BM_LUT7)
.3e0320		8f 08 01 af	sta $af0108	        STA @l BM1_CONTROL_REG
.3e0324		a9 00		lda #$00	        LDA #$00
.3e0326		8f 09 01 af	sta $af0109	        STA @l BM1_START_ADDY_L
.3e032a		a9 00		lda #$00	        LDA #$00
.3e032c		8f 0a 01 af	sta $af010a	        STA @l BM1_START_ADDY_M
.3e0330		8f 0b 01 af	sta $af010b	        STA @l BM1_START_ADDY_H
.3e0334		a9 01		lda #$01	        LDA #$01
.3e0336		8f 04 00 af	sta $af0004	        STA BORDER_CTRL_REG
.3e033a		a9 08		lda #$08	        LDA #$08
.3e033c		8f 08 00 af	sta $af0008	        STA BORDER_X_SIZE
.3e0340		8f 09 00 af	sta $af0009	        STA BORDER_Y_SIZE
.3e0344		a9 80		lda #$80	        LDA #$80
.3e0346		8f 06 00 af	sta $af0006	        STA BORDER_COLOR_G
.3e034a		a9 00		lda #$00	        LDA #$00
.3e034c		8f 05 00 af	sta $af0005	        STA BORDER_COLOR_B
.3e0350		8f 07 00 af	sta $af0007	        STA BORDER_COLOR_R
.3e0354		a9 a0		lda #$a0	        LDA #$A0
.3e0356		8f 12 00 af	sta $af0012	        STA @l VKY_TXT_CURSOR_CHAR_REG
.3e035a		a9 10		lda #$10	        LDA #$10
.3e035c		8f 0e 00 af	sta $af000e	        STA @l BACKGROUND_COLOR_G
.3e0360		a9 10		lda #$10	        LDA #$10
.3e0362		8f 0f 00 af	sta $af000f	        STA @l BACKGROUND_COLOR_R
.3e0366		8f 0d 00 af	sta $af000d	        STA @l BACKGROUND_COLOR_B
.3e036a		e2 20		sep #$20	                SEP #$20        ; set A short
.3e036c		c2 10		rep #$10	                REP #$10        ; set X long
.3e036e		a2 00 00	ldx #$0000	        LDX #$0000
.3e0371						SS_LUT_BRANCH:
.3e0371		bf 00 0e 3e	lda $3e0e00,x	        LDA @l SS_MONIKER_LUT, X
.3e0375		ea		nop		        NOP
.3e0376		9f 00 3c af	sta $af3c00,x	        STA @l GRPH_LUT7_PTR, X
.3e037a		e8		inx		        INX
.3e037b		e0 00 04	cpx #$0400	        CPX #1024
.3e037e		d0 f1		bne $3e0371	        BNE SS_LUT_BRANCH
.3e0380		a9 00		lda #$00	        LDA #$00
.3e0382		8f 04 3c af	sta $af3c04	        STA @l GRPH_LUT7_PTR + 4
.3e0386		8f 05 3c af	sta $af3c05	        STA @l GRPH_LUT7_PTR + 5
.3e038a		8f 06 3c af	sta $af3c06	        STA @l GRPH_LUT7_PTR + 6
.3e038e		22 3c 05 3e	jsl $3e053c	        JSL SS_VDMA_CLEAR_MEMORY_640_480;
.3e0392		c2 20		rep #$20	                REP #$20        ; set A long
.3e0394		a9 00 12	lda #$1200	        LDA #<>SS_MONIKER      ; Set up the Source
.3e0397		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e039b		a9 00 50	lda #$5000	        LDA #<>( C256Moniker_SizeX * C256Moniker_SizeY )
.3e039e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e03a2		a9 00 00	lda #$0000	        LDA #$0000
.3e03a5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e03a9		a9 a0 78	lda #$78a0	        LDA #<>( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)    ; Set up the Source
.3e03ac		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e03b0		a9 40 01	lda #$0140	        LDA #C256Moniker_SizeX
.3e03b3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e03b7		a9 40 00	lda #$0040	        LDA #C256Moniker_SizeY
.3e03ba		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e03be		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e03c1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e03c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e03c7		a9 3e		lda #$3e	        LDA #`SS_MONIKER
.3e03c9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e03cd		a9 00		lda #$00	        LDA #`( C256Moniker_SizeX * C256Moniker_SizeY )
.3e03cf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e03d3		a9 00		lda #$00	        LDA #$00
.3e03d5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e03d9		a9 00		lda #$00	        LDA #`( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)
.3e03db		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e03df		22 f7 04 3e	jsl $3e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e03e3		e2 20		sep #$20	                SEP #$20        ; set A short
.3e03e5		af b0 00 00	lda $0000b0	        LDA @lMODEL
.3e03e9		29 03		and #$03	        AND #$03
.3e03eb		c9 00		cmp #$00	        CMP #$00
.3e03ed		f0 0b		beq $3e03fa	        BEQ DMA_FMX_Moniker
.3e03ef		c9 01		cmp #$01	        CMP #$01
.3e03f1		f0 5b		beq $3e044e	        BEQ DMA_UPlus_Moniker
.3e03f3		c9 02		cmp #$02	        CMP #$02
.3e03f5		d0 03		bne $3e03fa	        BNE BAD_MODEL_NUMBER
.3e03f7		82 a8 00	brl $3e04a2	        BRL DMA_U_Moniker
.3e03fa						 BAD_MODEL_NUMBER:
.3e03fa						DMA_FMX_Moniker:
.3e03fa		c2 20		rep #$20	                REP #$20        ; set A long
.3e03fc		a9 00 62	lda #$6200	        LDA #<>SS_FMX_TXT      ; Set up the Source
.3e03ff		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e0403		a9 00 32	lda #$3200	        LDA #<>( FMXMoniker_SizeX * FMXMoniker_SizeY )
.3e0406		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e040a		a9 00 00	lda #$0000	        LDA #$0000
.3e040d		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0411		a9 f0 13	lda #$13f0	        LDA #<>( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)    ; Set up the Source
.3e0414		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e0418		a9 a0 00	lda #$00a0	        LDA #FMXMoniker_SizeX
.3e041b		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e041f		a9 50 00	lda #$0050	        LDA #FMXMoniker_SizeY
.3e0422		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e0426		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e0429		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e042d		e2 20		sep #$20	                SEP #$20        ; set A short
.3e042f		a9 3e		lda #$3e	        LDA #`SS_FMX_TXT
.3e0431		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e0435		a9 00		lda #$00	        LDA #`( FMXMoniker_SizeX * FMXMoniker_SizeY )
.3e0437		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e043b		a9 00		lda #$00	        LDA #$00
.3e043d		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0441		a9 01		lda #$01	        LDA #`( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)
.3e0443		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e0447		22 f7 04 3e	jsl $3e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e044b		4c f6 04	jmp $3e04f6	        JMP Done_DMA_Model_Moniker
.3e044e						DMA_UPlus_Moniker:
.3e044e		c2 20		rep #$20	                REP #$20        ; set A long
.3e0450		a9 00 94	lda #$9400	        LDA #<>SS_UPlus_TXT      ; Set up the Source
.3e0453		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e0457		a9 00 18	lda #$1800	        LDA #<>( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.3e045a		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e045e		a9 00 00	lda #$0000	        LDA #$0000
.3e0461		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0465		a9 10 14	lda #$1410	        LDA #<>( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)    ; Set up the Source
.3e0468		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e046c		a9 60 00	lda #$0060	        LDA #UPlusMoniker_SizeX
.3e046f		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e0473		a9 40 00	lda #$0040	        LDA #UPlusMoniker_SizeY
.3e0476		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e047a		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e047d		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e0481		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0483		a9 3e		lda #$3e	        LDA #`SS_UPlus_TXT
.3e0485		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e0489		a9 00		lda #$00	        LDA #`( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.3e048b		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e048f		a9 00		lda #$00	        LDA #$00
.3e0491		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0495		a9 01		lda #$01	        LDA #`( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)
.3e0497		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e049b		22 f7 04 3e	jsl $3e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e049f		4c f6 04	jmp $3e04f6	        JMP Done_DMA_Model_Moniker
.3e04a2						DMA_U_Moniker:
.3e04a2		c2 20		rep #$20	                REP #$20        ; set A long
.3e04a4		a9 00 ac	lda #$ac00	        LDA #<>SS_U_TXT      ; Set up the Source
.3e04a7		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e04ab		a9 00 10	lda #$1000	        LDA #<>( UMoniker_SizeX *UMoniker_SizeY )
.3e04ae		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e04b2		a9 00 00	lda #$0000	        LDA #$0000
.3e04b5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e04b9		a9 20 14	lda #$1420	        LDA #<>( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)    ; Set up the Source
.3e04bc		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e04c0		a9 40 00	lda #$0040	        LDA #UMoniker_SizeX
.3e04c3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e04c7		a9 40 00	lda #$0040	        LDA #UMoniker_SizeY
.3e04ca		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e04ce		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e04d1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e04d5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04d7		a9 3e		lda #$3e	        LDA #`SS_U_TXT
.3e04d9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e04dd		a9 00		lda #$00	        LDA #`( UMoniker_SizeX * UMoniker_SizeY )
.3e04df		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e04e3		a9 00		lda #$00	        LDA #$00
.3e04e5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e04e9		a9 01		lda #$01	        LDA #`( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)
.3e04eb		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e04ef		22 f7 04 3e	jsl $3e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e04f3		4c f6 04	jmp $3e04f6	        JMP Done_DMA_Model_Moniker
.3e04f6						Done_DMA_Model_Moniker
.3e04f6		6b		rtl		        RTL
.3e04f7						SS_VDMA_SETUP_2_TRANSFER_IMAGE
.3e04f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04f9		a9 11		lda #$11	        LDA #( SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src )
.3e04fb		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e04ff		a9 13		lda #$13	        LDA #( VDMA_CTRL_Enable |  VDMA_CTRL_SysRAM_Src | VDMA_CTRL_1D_2D )
.3e0501		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0505		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0507		af 00 04 af	lda $af0400	        LDA @l VDMA_CONTROL_REG
.3e050b		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e050d		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0511		af 20 04 af	lda $af0420	        LDA @l SDMA_CTRL_REG0
.3e0515		09 80		ora #$80	        ORA #SDMA_CTRL0_Start_TRF
.3e0517		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e051b		ea		nop		        NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3e051c		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.3e051d		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.3e051e		ea		nop		        NOP
.3e051f		ea		nop		        NOP
.3e0520		ea		nop		        NOP
.3e0521		ea		nop		        NOP
.3e0522		ea		nop		        NOP
.3e0523		ea		nop		        NOP
.3e0524		ea		nop		        NOP
.3e0525		a9 00		lda #$00	        LDA #$00
.3e0527		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e052b						NOTFINISHED:
.3e052b		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e052f		29 80		and #$80	        AND #$80
.3e0531		c9 80		cmp #$80	        CMP #$80
.3e0533		f0 f6		beq $3e052b	        BEQ NOTFINISHED
.3e0535		a9 00		lda #$00	        LDA #$00
.3e0537		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e053b		6b		rtl		        RTL
.3e053c						SS_VDMA_CLEAR_MEMORY_640_480
.3e053c		e2 20		sep #$20	                SEP #$20        ; set A short
.3e053e		a9 05		lda #$05	        LDA #( VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill )
.3e0540		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0544		a9 00		lda #$00	        LDA #$00
.3e0546		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.3e054a		c2 20		rep #$20	                REP #$20        ; set A long
.3e054c		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.3e054f		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e0553		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0555		a9 00		lda #$00	        LDA #$00
.3e0557		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e055b		c2 20		rep #$20	                REP #$20        ; set A long
.3e055d		a9 00 b0	lda #$b000	        LDA #<>(640*480)
.3e0560		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.3e0564		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0566		a9 04		lda #$04	        LDA #`(640*480)
.3e0568		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.3e056c		a9 00		lda #$00	        LDA #$00
.3e056e		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0572		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.3e0576		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e0578		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e057c		ea		nop		         NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3e057d		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.3e057e		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.3e057f		ea		nop		        NOP
.3e0580		ea		nop		        NOP
.3e0581		ea		nop		        NOP
.3e0582		ea		nop		        NOP
.3e0583		ea		nop		        NOP
.3e0584						SS_VDMA_CLR_LOOPA:
.3e0584		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e0588		29 80		and #$80	        AND #$80
.3e058a		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.3e058c		f0 f6		beq $3e0584	        BEQ SS_VDMA_CLR_LOOPA
.3e058e		ea		nop		        NOP
.3e058f		a9 00		lda #$00	        LDA #$00
.3e0591		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0595		6b		rtl		        RTL
.3e0596						SS_VDMA_TRANSFER_VRAM_2_VRAM
.3e0596		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0598		a9 01		lda #$01	        LDA #( VDMA_CTRL_Enable )
.3e059a		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e059e		a9 00		lda #$00	        LDA #$00
.3e05a0		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.3e05a4		c2 20		rep #$20	                REP #$20        ; set A long
.3e05a6		a9 00 96	lda #$9600	        LDA #$9600      ; Set up the Source
.3e05a9		8f 02 04 af	sta $af0402	        STA @l VDMA_SRC_ADDY_L
.3e05ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05af		a9 00		lda #$00	        LDA #$00
.3e05b1		8f 04 04 af	sta $af0404	        STA @l VDMA_SRC_ADDY_H
.3e05b5		c2 20		rep #$20	                REP #$20        ; set A long
.3e05b7		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.3e05ba		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e05be		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05c0		a9 00		lda #$00	        LDA #$00
.3e05c2		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e05c6		c2 20		rep #$20	                REP #$20        ; set A long
.3e05c8		a9 00 14	lda #$1400	        LDA #<>(320*16)
.3e05cb		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.3e05cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05d1		a9 00		lda #$00	        LDA #`(320*16)
.3e05d3		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.3e05d7		a9 00		lda #$00	        LDA #$00
.3e05d9		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e05dd		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.3e05e1		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e05e3		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e05e7		ea		nop		        NOP
.3e05e8		ea		nop		        NOP
.3e05e9		ea		nop		        NOP
.3e05ea						SS_VDMA_CLR_LOOPB:
.3e05ea		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e05ee		29 80		and #$80	        AND #$80
.3e05f0		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.3e05f2		f0 f6		beq $3e05ea	        BEQ SS_VDMA_CLR_LOOPB
.3e05f4		ea		nop		        NOP
.3e05f5		a9 00		lda #$00	        LDA #$00
.3e05f7		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e05fb		6b		rtl		        RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/Splashscreen_Text_Display.asm

=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
.3e05fc						Set_Text_Color:
.3e05fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e05fe		a9 00 00	lda #$0000	            LDA #00
.3e0601		85 a2		sta $a2		            STA TEXT_CURSOR_X
.3e0603		a9 30 00	lda #$0030	            LDA #48
.3e0606		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.3e0608		20 fc 08	jsr $3e08fc	            JSR Line_Display_Compute_Pointer
.3e060b		a0 00 00	ldy #$0000	            LDY #$0000
.3e060e		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0610		a9 40		lda #$40	            LDA #$40
.3e0612						SetColorBranch:
.3e0612		97 a8		sta [$a8],y	            STA [COLOR_DST_PTR_L],Y
.3e0614		c8		iny		            INY
.3e0615		c0 50 00	cpy #$0050	            CPY #80
.3e0618		d0 f8		bne $3e0612	            BNE SetColorBranch
.3e061a		60		rts		            RTS
.3e061b						Model_Update_Info_Field:
.3e061b		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e061d		a9 00 00	lda #$0000	            LDA #$0000
.3e0620		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0622		a5 b0		lda $b0		            LDA MODEL
.3e0624		0a		asl a		            ASL
.3e0625		0a		asl a		            ASL
.3e0626		aa		tax		            TAX
.3e0627		c2 20		rep #$20	                REP #$20        ; set A long
.3e0629		bf af 0c 3e	lda $3e0caf,x	            LDA MODEL_TABLE, X
.3e062d		85 a0		sta $a0		            STA MOD_SELECT_L
.3e062f		bf b1 0c 3e	lda $3e0cb1,x	            LDA MODEL_TABLE + 2, X
.3e0633		85 a2		sta $a2		            STA MOD_SELECT_H
.3e0635		a0 00 00	ldy #$0000	            LDY #$0000
.3e0638		84 a6		sty $a6		            STY LINE_INDEX
.3e063a						Next_Change_Here:
.3e063a		c2 20		rep #$20	                REP #$20        ; set A long
.3e063c		a4 a6		ldy $a6		            LDY LINE_INDEX
.3e063e		bb		tyx		            TYX
.3e063f		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.3e0641		85 98		sta $98		            STA TEXT_SRC_PTR_L
.3e0643		bf ff 0c 3e	lda $3e0cff,x	            LDA LINE_MOD, X
.3e0647		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0649		c8		iny		            INY
.3e064a		c8		iny		            INY
.3e064b		bb		tyx		            TYX
.3e064c		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.3e064e		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.3e0650		bf ff 0c 3e	lda $3e0cff,x	            LDA LINE_MOD, X
.3e0654		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0656		c8		iny		            INY
.3e0657		c8		iny		            INY
.3e0658		84 a6		sty $a6		            STY LINE_INDEX
.3e065a		c0 10 00	cpy #$0010	            CPY #16
.3e065d		f0 10		beq $3e066f	            BEQ LetsMoveOn
.3e065f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0661		a0 00 00	ldy #$0000	            LDY #$0000
.3e0664						nextchar:
.3e0664		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.3e0666		c9 00		cmp #$00	            CMP #$00
.3e0668		f0 d0		beq $3e063a	            BEQ Next_Change_Here
.3e066a		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e066c		c8		iny		            INY
.3e066d		80 f5		bra $3e0664	            BRA nextchar
.3e066f						LetsMoveOn:
.3e066f		af 0b 0d 3e	lda $3e0d0b	            LDA LINE_MOD + 12
.3e0673		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0675		a0 00 00	ldy #$0000	            LDY #$0000
.3e0678		e2 20		sep #$20	                SEP #$20        ; set A short
.3e067a		af 05 e8 af	lda $afe805	            LDA @lREVOFPCB_C
.3e067e		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0680		c8		iny		            INY
.3e0681		af 06 e8 af	lda $afe806	            LDA @lREVOFPCB_4
.3e0685		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0687		c8		iny		            INY
.3e0688		af 07 e8 af	lda $afe807	            LDA @lREVOFPCB_A
.3e068c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e068e		18		clc		            CLC
.3e068f		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR   ; it is in BCD
.3e0693		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e0696		8f da 0a 3e	sta $3e0ada	            STA @lLINE8 + 56    ; FAT VICKY in U/U+ Model
.3e069a		8f 13 0b 3e	sta $3e0b13	            STA @lLINE9 + 47    ; GABE in FMX
.3e069e		8f 59 0b 3e	sta $3e0b59	            STA @lLINE10 + 51   ; VICKY II in FMX
.3e06a2		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR
.3e06a6		29 0f		and #$0f	            AND #$0F
.3e06a8		69 30		adc #$30	            ADC #$30
.3e06aa		8f db 0a 3e	sta $3e0adb	            STA @lLINE8 + 57    ; FAT VICKY in U/U+ Model
.3e06ae		8f 14 0b 3e	sta $3e0b14	            STA @lLINE9 + 48    ; GABE in FMX
.3e06b2		8f 5a 0b 3e	sta $3e0b5a	            STA @lLINE10 + 52   ; VICKY II in FMX
.3e06b6		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR   ; it is in BCD
.3e06ba		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e06bd		8f dd 0a 3e	sta $3e0add	            STA @lLINE8 + 59    ; FAT VICKY in U/U+ Model
.3e06c1		8f 16 0b 3e	sta $3e0b16	            STA @lLINE9 + 50    ; GABE in FMX
.3e06c5		8f 5c 0b 3e	sta $3e0b5c	            STA @lLINE10 + 54   ; VICKY II in FMX
.3e06c9		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR
.3e06cd		29 0f		and #$0f	            AND #$0F
.3e06cf		69 30		adc #$30	            ADC #$30
.3e06d1		8f de 0a 3e	sta $3e0ade	            STA @lLINE8 + 60    ; FAT VICKY in U/U+ Model
.3e06d5		8f 17 0b 3e	sta $3e0b17	            STA @lLINE9 + 51    ; GABE in FMX
.3e06d9		8f 5d 0b 3e	sta $3e0b5d	            STA @lLINE10 + 55   ; VICKY II in FMX
.3e06dd		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR   ; it is in BCD
.3e06e1		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e06e4		8f e0 0a 3e	sta $3e0ae0	            STA @lLINE8 + 62    ; FAT VICKY in U/U+ Model
.3e06e8		8f 19 0b 3e	sta $3e0b19	            STA @lLINE9 + 53    ; GABE in FMX
.3e06ec		8f 5f 0b 3e	sta $3e0b5f	            STA @lLINE10 + 57   ; VICKY II in FMX
.3e06f0		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR
.3e06f4		29 0f		and #$0f	            AND #$0F
.3e06f6		69 30		adc #$30	            ADC #$30
.3e06f8		8f e1 0a 3e	sta $3e0ae1	            STA @lLINE8 + 63    ; FAT VICKY in U/U+ Model
.3e06fc		8f 1a 0b 3e	sta $3e0b1a	            STA @lLINE9 + 54    ; GABE in FMX
.3e0700		8f 60 0b 3e	sta $3e0b60	            STA @lLINE10 + 58   ; VICKY II in FMX
.3e0704		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.3e0708		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e070b		8f d0 0a 3e	sta $3e0ad0	            STA @lLINE8 + 46    ; U/U+
.3e070f		8f 09 0b 3e	sta $3e0b09	            STA @lLINE9 + 37    ; When FMX, this is the Info for GABE
.3e0713		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.3e0717		29 0f		and #$0f	            AND #$0F
.3e0719		69 30		adc #$30	            ADC #$30
.3e071b		8f d1 0a 3e	sta $3e0ad1	            STA @lLINE8 + 47
.3e071f		8f 0a 0b 3e	sta $3e0b0a	            STA @lLINE9 + 38    ; When FMX, this is the Info for GABE
.3e0723		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.3e0727		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e072a		8f 4f 0b 3e	sta $3e0b4f	            STA @lLINE10 + 41    ; When FMX, this is the Info for GABE
.3e072e		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.3e0732		29 0f		and #$0f	            AND #$0F
.3e0734		69 30		adc #$30	            ADC #$30
.3e0736		8f 50 0b 3e	sta $3e0b50	            STA @lLINE10 + 42    ; When FMX, this is the Info for GABE
.3e073a		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.3e073e		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e0741		8f d2 0a 3e	sta $3e0ad2	            STA @lLINE8 + 48
.3e0745		8f 0b 0b 3e	sta $3e0b0b	            STA @lLINE9 + 39    ; When FMX, this is the Info for GABE
.3e0749		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.3e074d		29 0f		and #$0f	            AND #$0F
.3e074f		69 30		adc #$30	            ADC #$30
.3e0751		8f d3 0a 3e	sta $3e0ad3	            STA @lLINE8 + 49
.3e0755		8f 0c 0b 3e	sta $3e0b0c	            STA @lLINE9 + 40    ; When FMX, this is the Info for GABE
.3e0759		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.3e075d		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e0760		8f 51 0b 3e	sta $3e0b51	            STA @lLINE10 + 43    ; When FMX, this is the Info for GABE
.3e0764		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.3e0768		29 0f		and #$0f	            AND #$0F
.3e076a		69 30		adc #$30	            ADC #$30
.3e076c		8f 52 0b 3e	sta $3e0b52	            STA @lLINE10 + 44    ; When FMX, this is the Info for GABE
.3e0770		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.3e0774		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e0777		8f c4 0a 3e	sta $3e0ac4	            STA @lLINE8 + 34
.3e077b		8f fd 0a 3e	sta $3e0afd	            STA @lLINE9 + 25    ; When FMX, this is the Info for GABE
.3e077f		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.3e0783		29 0f		and #$0f	            AND #$0F
.3e0785		69 30		adc #$30	            ADC #$30
.3e0787		8f c5 0a 3e	sta $3e0ac5	            STA @lLINE8 + 35
.3e078b		8f fe 0a 3e	sta $3e0afe	            STA @lLINE9 + 26    ; When FMX, this is the Info for GABE
.3e078f		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.3e0793		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e0796		8f 44 0b 3e	sta $3e0b44	            STA @lLINE10 + 30    ; When FMX, this is the Info for GABE
.3e079a		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.3e079e		29 0f		and #$0f	            AND #$0F
.3e07a0		69 30		adc #$30	            ADC #$30
.3e07a2		8f 45 0b 3e	sta $3e0b45	            STA @lLINE10 + 31    ; When FMX, this is the Info for GABE
.3e07a6		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.3e07aa		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e07ad		8f c6 0a 3e	sta $3e0ac6	            STA @lLINE8 + 36
.3e07b1		8f ff 0a 3e	sta $3e0aff	            STA @lLINE9 + 27    ; When FMX, this is the Info for GABE
.3e07b5		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.3e07b9		29 0f		and #$0f	            AND #$0F
.3e07bb		69 30		adc #$30	            ADC #$30
.3e07bd		8f c7 0a 3e	sta $3e0ac7	            STA @lLINE8 + 37
.3e07c1		8f 00 0b 3e	sta $3e0b00	            STA @lLINE9 + 28    ; When FMX, this is the Info for GABE
.3e07c5		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.3e07c9		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e07cc		8f 46 0b 3e	sta $3e0b46	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.3e07d0		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.3e07d4		29 0f		and #$0f	            AND #$0F
.3e07d6		69 30		adc #$30	            ADC #$30
.3e07d8		8f 46 0b 3e	sta $3e0b46	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.3e07dc		20 4f 08	jsr $3e084f	            JSR GODETECTHIRES ; Dip-Switch and Change Text
.3e07df		20 70 08	jsr $3e0870	            JSR GODETECTHDD   ; Dip-Switch and Change Text
.3e07e2		20 71 08	jsr $3e0871	            JSR GODETECTEXP   ; Go Check if there is a Card Change Text
.3e07e5		a5 b0		lda $b0		            LDA MODEL
.3e07e7		29 03		and #$03	            AND #$03
.3e07e9		c9 00		cmp #$00	            CMP #$00
.3e07eb		f0 12		beq $3e07ff	            BEQ Erase_FATVicky_Line;
.3e07ed		c9 01		cmp #$01	            CMP #$01
.3e07ef		f0 29		beq $3e081a	            BEQ Erase_2Lines;
.3e07f1		c9 02		cmp #$02	            CMP #$02
.3e07f3		f0 25		beq $3e081a	            BEQ Erase_2Lines;
.3e07f5		60		rts		            RTS
.3e07f6						HighNibblerBCD:
.3e07f6		29 f0		and #$f0	            AND #$F0
.3e07f8		4a		lsr a		            LSR A
.3e07f9		4a		lsr a		            LSR A
.3e07fa		4a		lsr a		            LSR A
.3e07fb		4a		lsr a		            LSR A
.3e07fc		69 30		adc #$30	            ADC #$30
.3e07fe		60		rts		            RTS
.3e07ff						Erase_FATVicky_Line:
.3e07ff		c2 20		rep #$20	                REP #$20        ; set A long
.3e0801		a9 a2 0a	lda #$0aa2	            LDA #<>LINE8
.3e0804		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0806		a9 3e 00	lda #$003e	            LDA #`LINE8
.3e0809		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e080b		e2 20		sep #$20	                SEP #$20        ; set A short
.3e080d		a0 00 00	ldy #$0000	            LDY #$0000
.3e0810		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e0812		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0814		c8		iny		            INY
.3e0815		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e0817		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0819		60		rts		            RTS
.3e081a						Erase_2Lines
.3e081a		c2 20		rep #$20	                REP #$20        ; set A long
.3e081c		a9 e4 0a	lda #$0ae4	            LDA #<>LINE9
.3e081f		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0821		a9 3e 00	lda #$003e	            LDA #`LINE9
.3e0824		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0826		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0828		a0 00 00	ldy #$0000	            LDY #$0000
.3e082b		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e082d		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e082f		c8		iny		            INY
.3e0830		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e0832		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0834		c2 20		rep #$20	                REP #$20        ; set A long
.3e0836		a9 26 0b	lda #$0b26	            LDA #<>LINE10
.3e0839		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e083b		a9 3e 00	lda #$003e	            LDA #`LINE10
.3e083e		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0840		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0842		a0 00 00	ldy #$0000	            LDY #$0000
.3e0845		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e0847		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0849		c8		iny		            INY
.3e084a		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e084c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e084e		60		rts		            RTS
.3e084f						GODETECTHIRES
.3e084f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0851		af 02 00 af	lda $af0002	            LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.3e0855		29 10		and #$10	            AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.3e0857		c9 10		cmp #$10	            CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.3e0859		f0 14		beq $3e086f	            BEQ WeAreDone
.3e085b		c2 10		rep #$10	                REP #$10        ; set X long
.3e085d		a2 00 00	ldx #$0000	            LDX #$0000
.3e0860						ChangeNextChar
.3e0860		bf 5f 0d 3e	lda $3e0d5f,x	            LDA @l ON_TEXT, X
.3e0864		c9 00		cmp #$00	            CMP #$00
.3e0866		f0 07		beq $3e086f	            BEQ WeAreDone
.3e0868		9f 53 0c 3e	sta $3e0c53,x	            STA @l LINE17 +13, X
.3e086c		e8		inx		            INX
.3e086d		d0 f1		bne $3e0860	            BNE ChangeNextChar
.3e086f						WeAreDone
.3e086f						NoExpansionCardPresent
.3e086f		60		rts		            RTS
.3e0870						GODETECTHDD
.3e0870		60		rts		            RTS
.3e0871						GODETECTEXP
.3e0871		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0873		af 87 e8 af	lda $afe887	            LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.3e0877		29 10		and #$10	            AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.3e0879		c9 10		cmp #$10	            CMP #GABE_SYS_STAT_EXP
.3e087b		d0 25		bne $3e08a2	            BNE NoExpansionCardPresent
.3e087d		c2 10		rep #$10	                REP #$10        ; set X long
.3e087f		a2 00 00	ldx #$0000	            LDX #$0000
.3e0882						ChangeNextChar
.3e0882		bf 63 0d 3e	lda $3e0d63,x	            LDA @l YES_TEXT, X
.3e0886		c9 00		cmp #$00	            CMP #$00
.3e0888		f0 07		beq $3e0891	            BEQ WeAreDone
.3e088a		9f 85 0c 3e	sta $3e0c85,x	            STA @l LINE19 +26, X
.3e088e		e8		inx		            INX
.3e088f		d0 f1		bne $3e0882	            BNE ChangeNextChar
.3e0891						WeAreDone
.3e0891		a2 00 00	ldx #$0000	            LDX #$0000
.3e0894						AddCardName
.3e0894		bf 00 00 ae	lda $ae0000,x	            LDA @l EVID_ID_NAME_ASCII, X
.3e0898		9f 89 0c 3e	sta $3e0c89,x	            STA @l LINE20, X
.3e089c		e8		inx		            INX
.3e089d		e0 10 00	cpx #$0010	            CPX #$10
.3e08a0		d0 f2		bne $3e0894	            BNE AddCardName
.3e08a2						NoExpansionCardPresent
.3e08a2		60		rts		            RTS
.3e08a3						Line_Setup_Before_Display
.3e08a3		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08a5		a5 a6		lda $a6		            LDA LINE_INDEX
.3e08a7		c9 17 00	cmp #$0017	            CMP #NumberOfEntry
.3e08aa		f0 33		beq $3e08df	            BEQ DONE
.3e08ac		a5 a6		lda $a6		            LDA LINE_INDEX
.3e08ae		0a		asl a		            ASL A
.3e08af		0a		asl a		            ASL A
.3e08b0		aa		tax		            TAX
.3e08b1		bf 24 09 3e	lda $3e0924,x	            LDA TEXT_TABLE, X
.3e08b5		85 98		sta $98		            STA TEXT_SRC_PTR_L
.3e08b7		bf 26 09 3e	lda $3e0926,x	            LDA TEXT_TABLE + 2, X
.3e08bb		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.3e08bd		a5 a6		lda $a6		            LDA LINE_INDEX
.3e08bf		0a		asl a		            ASL A
.3e08c0		aa		tax		            TAX
.3e08c1		bf 80 09 3e	lda $3e0980,x	            LDA TEXT_POSX, X
.3e08c5		85 a2		sta $a2		            STA TEXT_CURSOR_X
.3e08c7		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.3e08cb		bf ae 09 3e	lda $3e09ae,x	            LDA TEXT_POSY, X
.3e08cf		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.3e08d1		8f 16 00 af	sta $af0016	            STA @l VKY_TXT_CURSOR_Y_REG_L
.3e08d5		20 fc 08	jsr $3e08fc	            JSR Line_Display_Compute_Pointer
.3e08d8		a9 00 00	lda #$0000	            LDA #$0000
.3e08db		85 a0		sta $a0		            STA TEXT_INDEX
.3e08dd		e6 a6		inc $a6		            INC LINE_INDEX
.3e08df						DONE:
.3e08df		60		rts		            RTS
.3e08e0						Line_Display_1_Character
.3e08e0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08e2		e6 a2		inc $a2		            INC TEXT_CURSOR_X       ; Always put the Cursor In Front of the "To be displayed Char"
.3e08e4		a5 a2		lda $a2		            LDA TEXT_CURSOR_X
.3e08e6		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.3e08ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3e08ec		38		sec		            SEC
.3e08ed		a4 a0		ldy $a0		            LDY TEXT_INDEX
.3e08ef		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.3e08f1		c9 00		cmp #$00	            CMP #$00
.3e08f3		f0 06		beq $3e08fb	            BEQ WE_ARE_DONE;
.3e08f5		18		clc		            CLC
.3e08f6		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e08f8		c8		iny		            INY
.3e08f9		84 a0		sty $a0		            STY TEXT_INDEX
.3e08fb						WE_ARE_DONE:
.3e08fb		60		rts		            RTS
.3e08fc						Line_Display_Compute_Pointer
.3e08fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08fe		a5 a4		lda $a4		            LDA TEXT_CURSOR_Y
.3e0900		8f 00 01 00	sta $000100	            STA @lUNSIGNED_MULT_A_LO
.3e0904		a9 50 00	lda #$0050	            LDA #80
.3e0907		8f 02 01 00	sta $000102	            STA @lUNSIGNED_MULT_B_LO
.3e090b		18		clc		            CLC
.3e090c		af 04 01 00	lda $000104	            LDA @lUNSIGNED_MULT_AL_LO
.3e0910		65 a2		adc $a2		            ADC TEXT_CURSOR_X
.3e0912		69 00 a0	adc #$a000	            ADC #$A000
.3e0915		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0917		69 00 20	adc #$2000	            ADC #$2000
.3e091a		85 a8		sta $a8		            STA COLOR_DST_PTR_L
.3e091c		a9 af 00	lda #$00af	            LDA #$00AF
.3e091f		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0921		85 aa		sta $aa		            STA COLOR_DST_PTR_H
.3e0923		60		rts		            RTS
>3e0924		dc 09 3e 00 fd 09 3e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>3e092c		13 0a 3e 00 21 0a 3e 00 39 0a 3e 00 5c 0a 3e 00
>3e093c		80 0a 3e 00 95 0a 3e 00
>3e0944		a2 0a 3e 00 e4 0a 3e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>3e094c		26 0b 3e 00 68 0b 3e 00 72 0b 3e 00 9b 0b 3e 00
>3e095c		d2 0b 3e 00 f5 0b 3e 00
>3e0964		07 0c 3e 00 46 0c 3e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>3e096c		58 0c 3e 00 6b 0c 3e 00 89 0c 3e 00 9a 0c 3e 00
>3e097c		ad 0c 3e 00
>3e0980		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>3e0988		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>3e0998		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>3e09a8		2d 00 1e 00 48 00
>3e09ae		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>3e09b6		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>3e09c6		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>3e09d6		35 00 39 00 39 00
=6						leftAlign = 6
>3e09dc		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>3e09e4		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>3e09f4		20 20 20 20 20 20 20 20 00
>3e09fd		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>3e0a05		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>3e0a13		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>3e0a1b		4e 46 4f 3a 20 00
>3e0a21		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>3e0a29		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>3e0a39		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>3e0a41		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>3e0a51		20 20 20 20 20 20 20 20 20 20 00
>3e0a5c		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>3e0a64		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>3e0a74		20 20 20 20 20 20 20 20 20 20 20 00
>3e0a80		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>3e0a88		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>3e0a95		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>3e0a9d		53 29 3a 20 00
>3e0aa2		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>3e0aaa		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>3e0aba		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>3e0aca		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>3e0ada		30 30 2f 30 30 2f 30 30 20 00
>3e0ae4		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533 - GABE - REV:0000 SUBREV:0000 DATE:00/00/00          ", $00
>3e0aec		35 33 33 20 2d 20 47 41 42 45 20 2d 20 52 45 56
>3e0afc		3a 30 30 30 30 20 53 55 42 52 45 56 3a 30 30 30
>3e0b0c		30 20 44 41 54 45 3a 30 30 2f 30 30 2f 30 30 20
>3e0b1c		20 20 20 20 20 20 20 20 20 00
>3e0b26		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551 - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00      ", $00
>3e0b2e		35 35 31 20 2d 20 56 49 43 4b 59 20 49 49 20 2d
>3e0b3e		20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45 56
>3e0b4e		3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30 30
>3e0b5e		2f 30 30 20 20 20 20 20 20 00
>3e0b68		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>3e0b70		20 00
>3e0b72		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>3e0b7a		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>3e0b8a		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>3e0b9a		00
>3e0b9b		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>3e0ba3		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>3e0bb3		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>3e0bc3		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>3e0bd2		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>3e0bda		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>3e0bea		4c 20 54 52 45 4d 42 4c 41 59 00
>3e0bf5		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>3e0bfd		20 4d 45 4e 55 2d 2d 2d 2d 00
>3e0c07		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>3e0c0f		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>3e0c1f		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>3e0c2f		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>3e0c3f		46 41 55 4c 54 20 00
>3e0c46		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>3e0c4e		4f 44 45 3a 20 4f 46 46 20 00
>3e0c58		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>3e0c60		41 4c 4c 45 44 3a 20 2d 2d 20 00
>3e0c6b		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>3e0c73		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>3e0c83		3a 20 4e 4f 20 00
>3e0c89		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3e0c91		00 00 00 00 00 00 00 00 00
>3e0c9a		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>3e0ca2		46 4f 45 4e 49 58 2e 43 4f 4d 00
>3e0cad		20 00				LINE22 .text " ", $00
>3e0caf		bf 0c 3e 00 cf 0c 3e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>3e0cb7		df 0c 3e 00 ef 0c 3e 00
>3e0cbf		0f 0d 3e 00 4f 0d 3e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>3e0cc7		4f 0d 3e 00 00 00 00 00
>3e0ccf		1f 0d 3e 00 4f 0d 3e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>3e0cd7		3f 0d 3e 00 00 00 00 00
>3e0cdf		2f 0d 3e 00 3f 0d 3e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>3e0ce7		3f 0d 3e 00 00 00 00 00
>3e0cef		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>3e0cf7		00 00 00 00 00 00 00 00
>3e0cff		ec 09 3e 00 4b 0a 3e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>3e0d07		6f 0a 3e 00 8e 0a 3e 00
>3e0d0f		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>3e0d17		4e 49 58 20 46 4d 58 00
>3e0d1f		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>3e0d27		4e 49 58 20 55 2b 20 00
>3e0d2f		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>3e0d37		4e 49 58 20 55 20 20 00
>3e0d3f		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>3e0d47		32 20 42 59 54 45 53 00
>3e0d4f		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>3e0d57		34 20 42 59 54 45 53 00
>3e0d5f		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>3e0d63		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src\kernel.asm

>3e0d67						.align 256
.3e0e00						SS_MONIKER_LUT
>3e0e00		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>3e0e08		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>3e0e18		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>3e0e28		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>3e0e38		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>3e0e48		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>3e0e58		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>3e0e68		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>3e0e78		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>3e0e88		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>3e0e98		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>3e0ea8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>3e0eb8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>3e0ec8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>3e0ed8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>3e0ee8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>3e0ef8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>3e0f08		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>3e0f18		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>3e0f28		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>3e0f38		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>3e0f48		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>3e0f58		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>3e0f68		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>3e0f78		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>3e0f88		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>3e0f98		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>3e0fa8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>3e0fb8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>3e0fc8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>3e0fd8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>3e0fe8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>3e0ff8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>3e1008		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>3e1018		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>3e1028		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>3e1038		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>3e1048		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>3e1058		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>3e1068		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>3e1078		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>3e1088		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>3e1098		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>3e10a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>3e10b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>3e10c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>3e10d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>3e10e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>3e10f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>3e1108		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>3e1118		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>3e1128		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>3e1138		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>3e1148		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>3e1158		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>3e1168		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>3e1178		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>3e1188		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>3e1198		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>3e11a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>3e11b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>3e11c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>3e11d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>3e11e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>3e11f8		ff ff ff 00 e5 80 80 00
.3e1200						SS_MONIKER
>3e1200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>3e1208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>3e1808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e1818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>3e1958		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e1968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>3e1a98		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>3e1aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>3e1bd8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1d08		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e1d18		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>3e1d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1e48		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e1e58		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1f88		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>3e1f98		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e20c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>3e20d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e20e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2128		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>3e2138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>3e2208		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>3e2218		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e2228		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2268		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>3e2278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>3e2348		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e2358		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e2368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e23a8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e23b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>3e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2488		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2498		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e24a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e24e8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e24f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>3e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e25c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e25d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e25e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2628		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>3e2638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2668		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>3e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e2708		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2718		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2738		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2768		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>3e2778		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e2788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2798		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>3e27a8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e27b8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e27c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e27d8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>3e27e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>3e2848		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2868		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e28a8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>3e28b8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>3e28c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e28d8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>3e28e8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>3e28f8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e2908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2918		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>3e2928		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>3e2938		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>3e2948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2958		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>3e2968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2978		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>3e2988		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>3e29b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>3e29e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>3e29f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3e2a08		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>3e2a18		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>3e2a28		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>3e2a38		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>3e2a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2a58		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>3e2a68		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>3e2a78		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>3e2a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2a98		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>3e2aa8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>3e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>3e2ac8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>3e2ad8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>3e2ae8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>3e2af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b18		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>3e2b28		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>3e2b38		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e2b48		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e2b58		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e2b68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2b78		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2b98		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ba8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>3e2bb8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>3e2bc8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>3e2bd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2be8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>3e2bf8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>3e2c08		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2c18		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>3e2c28		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>3e2c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2c58		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2c68		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2c78		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e2c88		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>3e2c98		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>3e2ca8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>3e2cb8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2cc8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>3e2cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ce8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>3e2cf8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e2d08		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>3e2d18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2d28		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>3e2d38		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>3e2d48		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2d58		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>3e2d68		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>3e2d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2d98		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2da8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2db8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e2dc8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e2dd8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e2de8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e2df8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2e08		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>3e2e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e28		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>3e2e38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e48		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e68		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2e78		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>3e2e88		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e2e98		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>3e2ea8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>3e2eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3e2ed8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ee8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e2ef8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e2f08		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2f18		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>3e2f28		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e2f38		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2f48		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2f58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>3e2f88		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>3e2f98		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2fa8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>3e2fb8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>3e2fc8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e2fd8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>3e2fe8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>3e2ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3008		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>3e3018		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e3028		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e3038		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e3048		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e3058		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>3e3068		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>3e3078		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3088		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e3098		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e30a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>3e30b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>3e30c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e30d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>3e30e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>3e30f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e3108		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>3e3118		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>3e3128		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>3e3138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3148		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e3158		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e3168		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3178		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e3188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e3198		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e31a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>3e31b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e31c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>3e31d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>3e31e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>3e31f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>3e3208		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>3e3218		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>3e3228		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3238		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3248		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3258		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>3e3268		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e3278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3288		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3298		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e32a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e32b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e32c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>3e32d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e32e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e32f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3308		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>3e3318		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>3e3328		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3338		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>3e3348		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3358		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>3e3368		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3378		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3388		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>3e3398		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>3e33a8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e33b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e33c8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e33d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e33e8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>3e33f8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3408		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>3e3418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3428		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3448		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>3e3458		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>3e3468		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>3e3478		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>3e3488		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3498		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e34a8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e34b8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e34c8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e34d8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>3e34e8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e34f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3508		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3518		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>3e3528		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>3e3538		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3548		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e3558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e3568		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3588		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e3598		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3e35a8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e35b8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e35c8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e35d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e35e8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e35f8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>3e3608		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e3618		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>3e3628		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3648		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3658		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>3e3668		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>3e3678		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3688		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>3e3698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e36a8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e36b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e36c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e36d8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3e36e8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e36f8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3708		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>3e3718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3728		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e3738		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e3748		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>3e3758		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e3768		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>3e3778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3788		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3798		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>3e37a8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>3e37b8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e37c8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e37d8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e37e8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>3e37f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3808		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e3818		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3e3828		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3838		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3848		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3858		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>3e3868		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e3878		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>3e3888		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>3e3898		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e38a8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e38b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e38c8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e38d8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>3e38e8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>3e38f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e3908		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3918		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3928		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>3e3938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3948		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3958		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>3e3968		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>3e3978		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3988		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3998		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e39a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e39b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>3e39c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e39d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e39e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>3e39f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a08		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3a18		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e3a28		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3a38		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>3e3a48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3a58		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>3e3a68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3a78		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a88		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e3a98		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>3e3aa8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>3e3ab8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3ac8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3ad8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>3e3ae8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3af8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>3e3b08		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e3b18		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3b28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3e3b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3b48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>3e3b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3b68		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e3b78		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>3e3b88		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3b98		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>3e3ba8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3bb8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3bc8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>3e3bd8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>3e3be8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e3bf8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3c08		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3c18		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3c28		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>3e3c38		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>3e3c48		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3c58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3c68		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e3c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3c88		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>3e3c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3ca8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>3e3cb8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e3cc8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3cd8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>3e3ce8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3cf8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3d08		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>3e3d18		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>3e3d28		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3d38		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3d48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3d58		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>3e3d68		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>3e3d78		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>3e3d88		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3d98		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3da8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3dc8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>3e3dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3de8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3df8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e3e08		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>3e3e18		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>3e3e28		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e38		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e3e48		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e58		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>3e3e68		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3e78		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e3e88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e98		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e3ea8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>3e3eb8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e3ec8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3ed8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3ee8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3f08		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3f28		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3f38		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e3f48		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>3e3f58		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>3e3f68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3f78		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>3e3f88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3f98		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>3e3fa8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e3fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e3fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3fd8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>3e3fe8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>3e3ff8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e4008		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e4018		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e4028		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4048		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4068		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>3e4078		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e4088		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e4098		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>3e40a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>3e40b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>3e40c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e40d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>3e40e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e40f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>3e4108		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>3e4118		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4128		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>3e4138		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4148		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4158		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e4168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4188		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e41a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>3e41b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e41c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e41d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>3e41e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e41f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4208		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e4218		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4228		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4238		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>3e4248		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>3e4258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4268		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>3e4278		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>3e4288		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4298		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e42a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e42d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>3e42f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4308		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e4318		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4328		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e4338		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4348		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e4358		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4368		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4378		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>3e4388		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e43a8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e43b8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>3e43c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e43d8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e43e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e43f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4408		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e4428		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e4438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4448		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>3e4458		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e4468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e4478		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e4488		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>3e4498		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e44a8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e44b8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e44c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e44d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e44e8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e44f8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>3e4508		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>3e4518		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4528		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4548		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4558		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e4568		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>3e4578		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>3e4588		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>3e4598		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e45a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e45b8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e45c8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>3e45d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e45e8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e45f8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e4608		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4618		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e4628		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>3e4638		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>3e4648		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>3e4658		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4668		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4688		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4698		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>3e46a8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e46b8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>3e46c8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>3e46d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e46e8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e46f8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4708		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>3e4718		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4728		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>3e4738		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>3e4748		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>3e4758		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>3e4768		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>3e4778		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>3e4788		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>3e4798		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e47a8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e47b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e47c8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e47d8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>3e47e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e47f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3e4808		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4818		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4828		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e4838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4848		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4868		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>3e4878		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>3e4888		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>3e4898		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>3e48a8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e48b8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>3e48c8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e48d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>3e48e8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e48f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4908		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4918		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e4928		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4938		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e4948		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4958		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4968		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>3e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4988		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e49a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>3e49b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>3e49c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>3e49d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>3e49e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e49f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3e4a08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>3e4a18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>3e4a28		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4a48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4a58		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>3e4a88		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a98		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4aa8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ac8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4ae8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4af8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>3e4b08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4b18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4b28		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4b38		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3e4b48		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>3e4b58		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>3e4b68		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4b88		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4b98		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ba8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>3e4bd8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4be8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4c08		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4c28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c38		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>3e4c48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c68		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e4c88		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>3e4c98		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>3e4ca8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4cc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>3e4cd8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ce8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4cf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4d18		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4d48		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4d68		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d78		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>3e4d88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d98		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>3e4da8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e4db8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e4dc8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e4dd8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>3e4de8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>3e4df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4e08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>3e4e18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>3e4e28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e38		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>3e4e58		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>3e4e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4e88		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e4e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ea8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4eb8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>3e4ec8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ed8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>3e4ee8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e4ef8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e4f08		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e4f18		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4f28		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e4f38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f58		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>3e4f68		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f78		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>3e4f98		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e4fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>3e4fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4fc8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>3e4fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4fe8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4ff8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3e5018		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>3e5028		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e5038		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>3e5048		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e5058		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5068		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>3e5078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5088		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5098		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>3e50a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>3e50b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e50c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>3e50d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e50e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>3e50f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5108		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e5118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5128		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3e5138		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5148		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>3e5158		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>3e5168		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>3e5178		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>3e5188		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>3e5198		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e51a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e51b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e51c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e51d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>3e51e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>3e51f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5208		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>3e5218		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>3e5228		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>3e5238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5248		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e5258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5268		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>3e5278		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e5288		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>3e5298		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>3e52a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e52b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>3e52c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>3e52d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e52e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e52f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5308		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5318		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>3e5328		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>3e5338		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>3e5348		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e5358		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>3e5368		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5388		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>3e5398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e53a8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>3e53b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e53c8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>3e53d8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>3e53e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e53f8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>3e5408		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>3e5418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e5428		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5448		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5458		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e5468		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e5478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>3e54a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e54b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e54c8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>3e54d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e5508		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5518		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>3e5528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5538		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3e5548		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>3e5558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e5568		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5588		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>3e5598		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e55a8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e55b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e5608		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>3e5618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5658		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>3e5668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5678		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e5688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56a8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56c8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>3e56d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>3e5748		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>3e5758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5798		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>3e57a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e57c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57e8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e5888		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>3e5898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e58d8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>3e58e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5928		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e59c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e59d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5a18		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>3e5a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>3e5b08		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>3e5c48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>3e61f8		00 00 00 00 00 00 00 00
.3e6200						SS_FMX_TXT
>3e6200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>3e6208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>3e64b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e64c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e6558		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e6568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e65f8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e6608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e6698		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e66a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e66f8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>3e6708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6738		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e6748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e6798		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e67a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e67d8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>3e67e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6838		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6878		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>3e6888		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e68c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>3e68d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e68e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6918		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>3e6928		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6968		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>3e6978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e69b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e69c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6a08		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>3e6a18		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a48		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a58		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e6a68		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6aa8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>3e6ab8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ae8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6af8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e6b08		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b28		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b48		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>3e6b58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b88		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b98		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>3e6ba8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6bc8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6be8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>3e6bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e6c28		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>3e6c38		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>3e6c48		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>3e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>3e6c68		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>3e6c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c88		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>3e6c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6cb8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>3e6cc8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>3e6cd8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>3e6ce8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e6d08		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>3e6d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d28		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>3e6d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d58		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>3e6d68		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6d78		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>3e6d88		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e6d98		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>3e6da8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>3e6db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6dc8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>3e6dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6de8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e6df8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6e08		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6e18		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>3e6e28		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e6e38		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>3e6e48		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>3e6e58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e68		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>3e6e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e88		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>3e6e98		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6ea8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6eb8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>3e6ec8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>3e6ed8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>3e6ee8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e6ef8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6f08		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>3e6f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6f28		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>3e6f38		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6f48		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6f58		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>3e6f68		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>3e6f78		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>3e6f88		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e6f98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e6fa8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>3e6fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6fc8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>3e6fd8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6fe8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6ff8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>3e7008		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>3e7018		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>3e7028		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e7038		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>3e7048		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>3e7058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7068		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>3e7078		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7088		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7098		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>3e70a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>3e70b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>3e70c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>3e70d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>3e70e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>3e70f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7108		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>3e7118		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7128		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>3e7138		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>3e7148		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e7158		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>3e7168		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>3e7178		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>3e7188		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>3e7198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e71a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>3e71b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e71c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>3e71d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>3e71e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e71f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>3e7208		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>3e7218		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>3e7228		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e7238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7248		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e7258		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>3e7268		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>3e7278		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7288		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e7298		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e72a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>3e72b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>3e72c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e72d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e72e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e72f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7308		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e7318		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e7328		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e7338		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7348		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e7358		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7368		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e7378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7388		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7398		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e73a8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e73b8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e73c8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e73d8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e73e8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e73f8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e7408		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>3e7418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7438		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7448		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7458		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7468		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>3e7478		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7488		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7498		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e74a8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>3e74b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e74e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74f8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7508		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>3e7518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7528		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7548		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e7558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7578		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>3e7588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7598		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e75a8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>3e75b8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e75c8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e75d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e75e8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e75f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7618		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e7628		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e7638		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7648		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>3e7658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7668		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7678		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7688		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e76b8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e76c8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>3e76d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e76e8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e76f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7708		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e7718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7758		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7768		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7778		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e7788		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7798		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e77a8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e77b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>3e77c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e77d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e77e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e77f8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7808		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e7818		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e7828		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7838		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e7848		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e7858		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7888		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>3e7898		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e78a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e78b8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e78c8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e78d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e78e8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e78f8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e7908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7928		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>3e7938		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7948		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>3e7958		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>3e7968		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7978		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e7988		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e7998		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e79a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e79b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e79c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>3e79d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e79e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e79f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7a08		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a18		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3e7a28		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e7a38		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>3e7a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7a68		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a78		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a88		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>3e7a98		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7aa8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7ab8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3e7ac8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>3e7ad8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7af8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e7b08		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e7b18		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7b28		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e7b38		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>3e7b48		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>3e7b58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7b68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e7b78		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ba8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>3e7bb8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>3e7bc8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7bd8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>3e7be8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7bf8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7c08		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>3e7c18		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c48		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e7c58		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7c78		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7c88		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>3e7c98		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7ca8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e7cb8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e7cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ce8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>3e7cf8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7d18		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d28		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>3e7d38		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e7d58		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d88		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>3e7d98		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7db8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7dc8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>3e7dd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7de8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7df8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e28		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>3e7e38		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3e7e58		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7e68		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>3e7e78		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7e88		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7e98		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ec8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7ed8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3e7ef8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7f08		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>3e7f18		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>3e7f28		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7f38		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f68		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7f78		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7f88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e7f98		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e7fb8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>3e7fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7fd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8008		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e8018		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e8038		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e8048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e8058		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>3e8068		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>3e8078		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e8088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e80a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e80b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e80c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e80d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e80e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e80f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>3e8108		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>3e8118		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e8128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8148		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8158		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e8168		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e8178		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e8188		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e8198		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e81a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>3e81b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e81c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e81d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e81e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e81f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8208		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8218		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8228		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8238		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>3e8248		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e8258		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e8268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8288		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8298		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e82a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e82b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e82c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e82d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>3e82e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e82f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e8308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8328		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8338		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8348		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8358		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8368		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8378		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>3e8388		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e8398		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3e83a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e83b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e83c8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e83d8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e83e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e83f8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>3e8408		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8418		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>3e8428		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e8438		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3e8448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8478		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e8488		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8498		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e84a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e84b8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>3e84c8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e84d8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e84e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e84f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8508		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e8518		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8528		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8538		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8548		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8558		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>3e8568		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8578		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e8588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85a8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e85b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85c8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>3e85d8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85e8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e85f8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>3e8608		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8618		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>3e8628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8648		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e8658		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8668		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>3e8678		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8688		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>3e8698		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>3e86a8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e86b8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e86c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e86d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e86e8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e86f8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8708		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>3e8718		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8728		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e8738		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>3e8748		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8758		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8788		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8798		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87a8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87c8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e87d8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>3e87e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87f8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>3e8808		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8828		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8848		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e8858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8868		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8878		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>3e8888		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8898		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>3e88a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88c8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>3e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3e88f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8908		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8918		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>3e8928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8938		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>3e8948		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8968		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>3e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e89a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e89b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>3e89e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a08		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>3e8a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8a48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a78		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>3e8a88		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8aa8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>3e8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8ae8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>3e8af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b18		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>3e8b28		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b48		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>3e8b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8b88		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e8b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8bb8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>3e8bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8be8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>3e8bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8c28		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>3e8c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c58		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>3e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c88		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>3e8c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8cc8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>3e8cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8cf8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>3e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d28		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>3e8d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8d68		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>3e8d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d98		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>3e8da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8dc8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8e08		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e8e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8e38		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>3e8e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8ea8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>3e8eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ed8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>3e8ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8f48		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>3e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8f78		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>3e8f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8fe8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>3e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e9028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e9088		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>3e9098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e90c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9128		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e9138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e91c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e91d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e9268		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>3e93f8		00 00 00 00 00 00 00 00
.3e9400						SS_UPlus_TXT
>3e9400		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>3e9408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>3e94f8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9558		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e95b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e95c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e9608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9618		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e9668		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>3e9678		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e96c8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>3e96d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9728		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>3e9738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9788		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>3e9798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e97e8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>3e97f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9848		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>3e9858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e98a8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>3e98b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e98e8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>3e98f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9908		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e9918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e9948		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>3e9958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9968		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e9978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e99a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>3e99b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e99c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e99d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>3e99e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a08		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>3e9a18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a28		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e9a38		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>3e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a68		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e9a78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9a88		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e9a98		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>3e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ac8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e9ad8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9ae8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e9af8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>3e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e9b48		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e9b58		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e9b68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b88		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e9ba8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e9bb8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e9bc8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9be8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e9bf8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e9c08		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e9c18		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e9c28		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c48		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3e9c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e9c68		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e9c78		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e9c88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ca8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3e9cb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e9cc8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3e9cd8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e9ce8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d08		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3e9d18		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e9d28		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3e9d38		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e9d48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d68		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e9d78		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e9d88		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e9d98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9da8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9dc8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e9dd8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e9de8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3e9df8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e28		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>3e9e38		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>3e9e48		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e9e58		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>3e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e88		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>3e9e98		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e9ea8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e9eb8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>3e9ec8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>3e9ed8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ee8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9ef8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e9f08		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e9f18		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>3e9f28		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>3e9f38		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9f48		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9f58		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e9f68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3e9f78		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e9f88		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>3e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9fa8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e9fc8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9fd8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e9fe8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea008		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3ea018		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3ea028		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>3ea038		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea048		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>3ea058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea068		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3ea078		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3ea088		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>3ea098		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea0a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>3ea0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea0c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3ea0d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3ea0e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>3ea0f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea108		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3ea118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea128		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea138		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>3ea148		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>3ea158		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea168		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea188		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea198		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3ea1a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea1b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea1c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>3ea1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea1e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea1f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea208		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea218		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea228		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>3ea238		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea248		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea258		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea268		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea278		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>3ea288		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea298		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea2a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea2b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea2c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>3ea2d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>3ea2e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea308		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea318		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3ea328		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>3ea338		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>3ea348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea368		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea378		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3ea388		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>3ea398		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea3a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea3b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3ea3c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>3ea3d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3ea3e8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea3f8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea418		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea428		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>3ea438		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>3ea458		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea478		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea488		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>3ea498		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3ea4a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>3ea4b8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea4c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea4d8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea4e8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>3ea4f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3ea508		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea518		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea538		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea548		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>3ea558		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3ea568		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea578		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea598		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea5a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>3ea5b8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>3ea5c8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3ea5d8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea608		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea618		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>3ea628		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>3ea638		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea658		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea668		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea678		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3ea688		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>3ea698		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>3ea6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea6c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea6d8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>3ea6e8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>3ea6f8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>3ea708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea718		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3ea728		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea738		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>3ea748		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea758		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea778		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3ea788		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea798		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>3ea7a8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea7b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea7c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3ea7e8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea7f8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>3ea808		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3ea848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea858		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea868		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>3ea878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3ea8a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea8b8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8c8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>3ea8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea918		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea928		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea968		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>3ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea988		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3ea998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea9c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>3ea9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea9e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaa28		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>3eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>3eabf8		00 00 00 00 00 00 00 00
.3eac00						SS_U_TXT
>3eac00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>3eac08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>3eacb8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eacc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eacf8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ead38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3ead78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eada8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>3eadb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eade8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>3eadf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eae28		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>3eae38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eae68		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>3eae78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaea8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>3eaeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaee8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>3eaef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaf28		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>3eaf38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf48		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>3eaf58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf68		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3eaf78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf88		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>3eaf98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafa8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3eafb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafc8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>3eafd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafe8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3eaff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb008		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>3eb018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb028		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3eb038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb048		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>3eb058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3eb068		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3eb078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb088		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>3eb098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3eb0a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb0c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3eb0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3eb0e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb108		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3eb128		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb148		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3eb158		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3eb168		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3eb178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>3eb198		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3eb1a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3eb1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb1c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3eb1d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3eb1e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3eb1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb208		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3eb218		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3eb228		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3eb238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb248		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3eb258		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3eb268		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3eb278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb288		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3eb298		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3eb2a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3eb2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb2c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3eb2d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3eb2e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3eb2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb308		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3eb318		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3eb328		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3eb338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb348		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb358		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3eb368		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3eb378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb388		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb398		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3eb3a8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3eb3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb3c8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb3d8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3eb3e8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb408		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3eb418		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3eb428		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb448		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3eb458		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3eb468		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb488		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3eb498		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3eb4a8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb4c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb4d8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3eb4e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb508		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb518		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>3eb528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb538		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb548		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb558		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb578		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb588		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3eb598		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb5a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb5b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb5c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3eb5d8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb608		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3eb618		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3eb628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb638		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb648		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>3eb658		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3eb668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb678		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3eb688		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>3eb698		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3eb6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb6b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb6c8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3eb6d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3eb6e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb6f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb708		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>3eb718		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3eb728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb738		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb748		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>3eb758		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3eb768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb778		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb788		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>3eb798		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>3eb7a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb7b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb7c8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>3eb7d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>3eb7e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb7f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb808		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb818		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3eb828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb838		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb848		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb858		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3eb868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb878		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb888		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb898		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>3eb8a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb8b8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>3eb8c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb8d8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>3eb8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb8f8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>3eb908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb918		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>3eb928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb938		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3eb948		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb958		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb978		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3eb988		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb998		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3eb9c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb9d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3eba08		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3eba18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eba28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eba38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eba48		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>3eba58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eba88		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>3eba98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ebac8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>3ebad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3ebbf8		00 00 00 00 00 00 00 00
.3f0000						FONT_4_BANK0
>3f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3f07f8		00 00 00 00 00 00 00 00
.3f0800						FONT_4_SPLASH
>3f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>3f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>3f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>3f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>3f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>3f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>3f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>3f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>3f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>3f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>3f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>3f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>3f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>3f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>3f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>3f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>3f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>3f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>3f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>3f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>3f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>3f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>3f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>3f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>3f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>3f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>3f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>3f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>3f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>3f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>3f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>3f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>3f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>3f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>3f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>3f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>3f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>3f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>3f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>3f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>3f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>3f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>3f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>3f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>3f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>3f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>3f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>3f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>3f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>3f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>3f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>3f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>3f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>3f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>3f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>3f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>3f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>3f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>3f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>3f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>3f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>3f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>3f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>3f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>3f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>3f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>3f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>3f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>3f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>3f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>3f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>3f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>3f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>3f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>3f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>3f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>3f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>3f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>3f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>3f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>3f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>3f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>3f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>3f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>3f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>3f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>3f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>3f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>3f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>3f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>3f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>3f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>3f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>3f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>3f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>3f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>3f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>3f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>3f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>3f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>3f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>3f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>3f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>3f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>3f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>3f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>3f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>3f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>3f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>3f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>3f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>3f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>3f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>3f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>3f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>3f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>3f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>3f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>3f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>3f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>3f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>3f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>3f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>3f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>3f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>3f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>3f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>3f0ff8		0f 0f 0f 0f f0 f0 f0 00
>3fffff		ff				                .byte $FF               ; Last byte of flash data

;******  End of listing
