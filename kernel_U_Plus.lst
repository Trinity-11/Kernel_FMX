
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 -D TARGET_SYS=3 --long-address --flat -b -o kernel_U_Plus.bin --list kernel_U_Plus.lst --labels=kernel_U_Plus.lbl src\kernel.asm
; Wed Jul 19 12:55:46 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=1						TARGET=1
=3						TARGET_SYS=3

;******  Processing input file: src\kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$aee000					LAN = ESID_ETHERNET_REG
=$380000					  START_OF_FLASH := $380000                   ; The Foenix FMX Flash starts at $380000
=$390400					  START_OF_KERNEL := $390400                  ; The kernel itself starts at $390400
=$3a0000					  START_OF_BASIC := $3A0000                   ; The BASIC flash code starts at $3A0000
=$3b0000					  START_OF_CREDITS := $3B0000                 ; The credits screen starts at $3B0000
=$3c0000					  PACKETS := $3C0000                          ; RAM for IP Stack packet buffers
=$3e0000					  START_OF_SPLASH := $3E0000                  ; SplashScreen Code and Data $3E0000
=$3f0000					  START_OF_FONT := $3F0000                    ; The font starts at $3F0000

;******  Processing file: src\Includes/macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1b						CHAR_ESC = $1B      ; ESC
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$3b						CHAR_F1 = $3B       ; Function key scan codes
=$3c						CHAR_F2 = $3C
=$3d						CHAR_F3 = $3D
=$3e						CHAR_F4 = $3E
=$3f						CHAR_F5 = $3F
=$40						CHAR_F6 = $40
=$41						CHAR_F7 = $41
=$42						CHAR_F8 = $42
=$43						CHAR_F9 = $43
=$44						CHAR_F10 = $44
=$57						CHAR_F11 = $57
=$58						CHAR_F12 = $58
=$39						SCAN_SP = $39
=$1c						SCAN_CR = $1C

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					COLORBEGIN       = $000022 ;3 Byte, address of the color screen
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000063					EVID_COLS_VISIBLE     = $000063 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000065					EVID_COLS_PER_LINE    = $000065 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000067					EVID_LINES_VISIBLE    = $000067 ;2 Bytes The number of rows visible on the screen. Default=25
=$000069					EVID_LINES_MAX        = $000069 ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006b					EVID_CURSORPOS        = $00006B ;3 Bytes The next character written to the screen will be written in this location.
=$00006e					EVID_CURSORX          = $00006E ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000070					EVID_CURSORY          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURCOLOR         = $000072 ;1 Byte Color of next character to be printed to the screen.
=$000073					EVID_COLORBEGIN       = $000073 ;
=$000076					EVID_COLORPOS         = $000076 ;3 Byte address of cursor's position in the color matrix
=$000079					EVID_TMPPTR1          = $000079 ; 4 byte temporary pointer
=$00007d					EVID_PRESENT          = $00007D ;1 Byte: is the EVID present?
=$000098					TEXT_SRC_PTR_L   = $000098
=$00009a					TEXT_SRC_PTR_H   = $00009A
=$00009c					TEXT_DST_PTR_L   = $00009C
=$00009e					TEXT_DST_PTR_H   = $00009E
=$0000a0					TEXT_INDEX       = $0000A0
=$0000a0					MOD_SELECT_L     = $0000A0
=$0000a2					MOD_SELECT_H     = $0000A2
=$0000a2					TEXT_CURSOR_X    = $0000A2
=$0000a4					TEXT_CURSOR_Y    = $0000A4
=$0000a6					LINE_INDEX       = $0000A6
=$0000a8					COLOR_DST_PTR_L  = $0000A8
=$0000aa					COLOR_DST_PTR_H  = $0000AA
=$0000b0					MODEL            = $0000B0
=$0000e0					MOUSE_IDX        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000e6					MOUSE_BUTTONS    = $0000E6
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$0000f0					INTERRUPT_STATE  = $0000F0      ; 1 byte: current state of the boot menu color cycler
=$0000f1					INTERRUPT_COUNT  = $0000F1      ; 1 byte: counter for the boot menu color cycler
=$0000f2					IRQ_COLOR_CHOICE = $0000F2      ; 1 byte: index of the color to cycle in the boot menu
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000370					DOS_BLOCK_SIZE   = $000370      ; 4 bytes - the size of a block to load (in bytes)
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KBD_VARS = $000F00
=$000f00					KBD_STATE           = $000F00   ; 1 byte - The state of the keyboard controller state machine
=$000f01					KBD_SC_BUF          = $000F01   ; 16 bytes - Buffer for keyboard scancodes read
=$000f11					KBD_SC_HEAD         = $000F11   ; 1 byte - Index of the first scancode cell to write to
=$000f12					KBD_CHAR_BUF        = $000F12   ; 16 bytes - Character buffer
=$000f22					KBD_CHAR_HEAD       = $000F22   ; 1 byte - Number of characters in the character buffer
=$000f23					KBD_MODIFIERS       = $000F23   ; 1 byte - State of the modifier keys
=$000f24					KBD_LOCKS           = $000F24   ; 1 byte - State of the lock keys: Caps, Num, Scroll
=$000f25					KBD_TBL_UNMOD       = $000F25   ; 4 bytes - Pointer to the scan code translation table for unmodified keys
=$000f29					KBD_TBL_SHIFT       = $000F29   ; 4 bytes - Pointer to the scan code translation table for shifted keys
=$000f2d					KBD_TBL_CTRL        = $000F2D   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL
=$000f31					KBD_TBL_LOCK        = $000F31   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
=$000f35					KBD_TBL_LOCK_SHIFT  = $000F35   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
=$000f39					KBD_TBL_CTRL_SHIFT  = $000F39   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL and SHIFT
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$38ff00					        ISR_BEGIN        = $38FF00 ; Byte  Beginning of CPU vectors in Direct page
=$38ff00					        HRESET           = $38FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$38ff10					        HCOP             = $38FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$38ff20					        HBRK             = $38FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$38ff30					        HABORT           = $38FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$38ff40					        HNMI             = $38FF40 ;32 Bytes Handle NMI
=$38ff60					        HIRQ             = $38FF60 ;32 Bytes Handle IRQ
=$38ff80					        Unused_FF80      = $38FF80 ;End of direct page Interrrupt handlers
=$38ffe0					        VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$38ffe0					        JMP_READY        = $38FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$38ffe4					        VECTOR_COP       = $38FFE4 ;2 Bytes Native COP Interrupt vector
=$38ffe6					        VECTOR_BRK       = $38FFE6 ;2 Bytes Native BRK Interrupt vector
=$38ffe8					        VECTOR_ABORT     = $38FFE8 ;2 Bytes Native ABORT Interrupt vector
=$38ffea					        VECTOR_NMI       = $38FFEA ;2 Bytes Native NMI Interrupt vector
=$38ffec					        VECTOR_RESET     = $38FFEC ;2 Bytes Unused (Native RESET vector)
=$38ffee					        VECTOR_IRQ       = $38FFEE ;2 Bytes Native IRQ Vector
=$38fff0					        RETURN           = $38FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$38fff4					        VECTOR_ECOP      = $38FFF4 ;2 Bytes Emulation mode interrupt handler
=$38fff6					        VECTOR_EBRK      = $38FFF6 ;2 Bytes Emulation mode interrupt handler
=$38fff8					        VECTOR_EABORT    = $38FFF8 ;2 Bytes Emulation mode interrupt handler
=$38fffa					        VECTOR_ENMI      = $38FFFA ;2 Bytes Emulation mode interrupt handler
=$38fffc					        VECTOR_ERESET    = $38FFFC ;2 Bytes Emulation mode interrupt handler
=$38fffe					        VECTOR_EIRQ      = $38FFFE ;2 Bytes Emulation mode interrupt handler
=$400000					        VECTORS_END      = $400000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_data.asm

>380000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_code.asm

.38ff00		18		clc		RHRESET         CLC
.38ff01		fb		xce		                XCE
.38ff02		5c 00 10 00	jmp $001000	                JML BOOT
.38ff10						RHCOP
.38ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff12		8b		phb		                PHB
.38ff13		0b		phd		                PHD
.38ff14		48		pha		                PHA
.38ff15		da		phx		                PHX
.38ff16		5a		phy		                PHY
.38ff17		5c 08 10 00	jmp $001008	                JML BREAK
.38ff20						RHBRK
.38ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff22		8b		phb		                PHB
.38ff23		0b		phd		                PHD
.38ff24		48		pha		                PHA
.38ff25		da		phx		                PHX
.38ff26		5a		phy		                PHY
.38ff27		5c 08 10 00	jmp $001008	                JML BREAK
.38ff30						RHABORT
.38ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff32		8b		phb		                PHB
.38ff33		0b		phd		                PHD
.38ff34		48		pha		                PHA
.38ff35		da		phx		                PHX
.38ff36		5a		phy		                PHY
.38ff37		5c 08 10 00	jmp $001008	                JML BREAK
.38ff40						 RHNMI
.38ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff42		8b		phb		                PHB
.38ff43		0b		phd		                PHD
.38ff44		48		pha		                PHA
.38ff45		da		phx		                PHX
.38ff46		5a		phy		                PHY
.38ff47		22 27 19 38	jsl $381927	                JSL NMI_HANDLER
.38ff4b		7a		ply		                PLY
.38ff4c		fa		plx		                PLX
.38ff4d		68		pla		                PLA
.38ff4e		2b		pld		                PLD
.38ff4f		ab		plb		                PLB
.38ff50		40		rti		                RTI
.38ff60						RHIRQ
.38ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff62		8b		phb		                PHB
.38ff63		0b		phd		                PHD
.38ff64		48		pha		                PHA
.38ff65		da		phx		                PHX
.38ff66		5a		phy		                PHY
.38ff67		22 bb 17 38	jsl $3817bb	                JSL IRQ_HANDLER
.38ff6b		7a		ply		                PLY
.38ff6c		fa		plx		                PLX
.38ff6d		68		pla		                PLA
.38ff6e		2b		pld		                PLD
.38ff6f		ab		plb		                PLB
.38ff70		40		rti		                RTI
.38ffe0		5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>38ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>38ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>38ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>38ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>38ffec		00 00				                .word $0000    ; FFEC
>38ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.38fff0		5c 5e 06 39	jmp $39065e	RRETURN         JML IRETURN
>38fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>38fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>38fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>38fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>38fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>38fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/fdc_inc.asm

=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/basic_inc.asm

=$3a0000					    BASIC = $3A0000
=3801092					    MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	1000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	1004	5c 74 05 39	jmp $390574	RESTORE         JML IRESTORE
.381008	1008	5c 08 06 39	jmp $390608	BREAK           JML IBREAK
.38100c	100c	5c 49 06 39	jmp $390649	READY           JML IREADY
.381010	1010	5c 46 10 39	jmp $391046	SCINIT          JML ISCINIT
.381014	1014	5c 47 10 39	jmp $391047	IOINIT          JML IIOINIT
.381018	1018	5c 00 07 39	jmp $390700	PUTC            JML IPUTC
.38101c	101c	5c e9 06 39	jmp $3906e9	PUTS            JML IPUTS
.381020	1020	5c 8d 07 39	jmp $39078d	PUTB            JML IPUTB
.381024	1024	5c ea 39 39	jmp $3939ea	PUTBLOCK        JML IPUTBLOCK
.381028	1028	5c c1 71 39	jmp $3971c1	GETSCANCODE     JML KBD_GET_SCANCODE    ; Get the next 8-bit scan code from the keyboard: A = 0 if no scancode present, contains the scancode otherwise
.38102c	102c	5c 59 72 39	jmp $397259	GETLOCKS        JML KBD_GETLOCKS        ; Get the state of the lock keys on the keyboard
.381030	1030	5c 4a 10 39	jmp $39104a	OPEN            JML IOPEN
.381034	1034	5c 4b 10 39	jmp $39104b	CLOSE           JML ICLOSE
.381038	1038	5c 5f 06 39	jmp $39065f	SETIN           JML ISETIN
.38103c	103c	5c 68 06 39	jmp $390668	SETOUT          JML ISETOUT
.381040	1040	5c 4c 10 39	jmp $39104c	GETB            JML IGETB
.381044	1044	5c 96 39 39	jmp $393996	GETBLOCK        JML IGETBLOCK
.381048	1048	5c ad 06 39	jmp $3906ad	GETCH           JML IGETCH
.38104c	104c	5c 7a 06 39	jmp $39067a	GETCHW          JML IGETCHW
.381050	1050	5c 71 06 39	jmp $390671	GETCHE          JML IGETCHE
.381054	1054	5c 4d 10 39	jmp $39104d	GETS            JML IGETS
.381058	1058	5c 4e 10 39	jmp $39104e	GETLINE         JML IGETLINE
.38105c	105c	5c 4f 10 39	jmp $39104f	GETFIELD        JML IGETFIELD
.381060	1060	5c 50 10 39	jmp $391050	TRIM            JML ITRIM
.381064	1064	5c 51 10 39	jmp $391051	PRINTC          JML IPRINTC
.381068	1068	5c 52 10 39	jmp $391052	PRINTS          JML IPRINTS
.38106c	106c	5c 8e 07 39	jmp $39078e	PRINTCR         JML IPRINTCR
.381070	1070	5c 53 10 39	jmp $391053	PRINTF          JML IPRINTF
.381074	1074	5c 54 10 39	jmp $391054	PRINTI          JML IPRINTI
.381078	1078	5c 37 08 39	jmp $390837	PRINTH          JML IPRINTH
.38107c	107c	5c 55 10 39	jmp $391055	PRINTAI         JML IPRINTAI
.381080	1080	5c 54 08 39	jmp $390854	PRINTAH         JML IPRINTAH
.381084	1084	5c 1b 08 39	jmp $39081b	LOCATE          JML ILOCATE
.381088	1088	5c 56 10 39	jmp $391056	PUSHKEY         JML IPUSHKEY
.38108c	108c	5c 57 10 39	jmp $391057	PUSHKEYS        JML IPUSHKEYS
.381090	1090	5c e3 07 39	jmp $3907e3	CSRRIGHT        JML ICSRRIGHT
.381094	1094	5c f2 07 39	jmp $3907f2	CSRLEFT         JML ICSRLEFT
.381098	1098	5c 01 08 39	jmp $390801	CSRUP           JML ICSRUP
.38109c	109c	5c 10 08 39	jmp $390810	CSRDOWN         JML ICSRDOWN
.3810a0	10a0	5c d2 07 39	jmp $3907d2	CSRHOME         JML ICSRHOME
.3810a4	10a4	5c 26 08 39	jmp $390826	SCROLLUP        JML ISCROLLUP
.3810a8	10a8	5c a2 08 39	jmp $3908a2	CLRSCREEN       JML ICLRSCREEN
.3810ac	10ac	5c 41 09 39	jmp $390941	INITCHLUT	    JML IINITCHLUT
.3810b0	10b0	5c 6a 0b 39	jmp $390b6a	INITSUPERIO	    JML IINITSUPERIO
.3810b4	10b4	5c 2f 6f 39	jmp $396f2f	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	10b8	5c 00 7a 39	jmp $397a00	INITMOUSE       JML IINITMOUSE
.3810bc	10bc	5c 4b 0b 39	jmp $390b4b	INITCURSOR      JML IINITCURSOR
.3810c0	10c0	5c 13 0b 39	jmp $390b13	INITFONTSET     JML IINITFONTSET
.3810c4	10c4	5c 4e 09 39	jmp $39094e	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	10c8	5c 6e 09 39	jmp $39096e	INITALLLUT      JML IINITALLLUT
.3810cc	10cc	5c 34 0a 39	jmp $390a34	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	10d0	5c b7 0a 39	jmp $390ab7	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	10d4	5c 12 0b 39	jmp $390b12	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.3810d8	10d8	5c 12 0b 39	jmp $390b12	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.3810dc	10dc	5c 84 0c 39	jmp $390c84	INITCODEC       JML IINITCODEC
.3810e0	10e0	5c 13 0d 39	jmp $390d13	RESETCODEC      JML IRESETCODEC
.3810e4	10e4	5c 81 0d 39	jmp $390d81	BMP_PARSER      JML IBMP_PARSER
.3810e8	10e8	5c 36 0d 39	jmp $390d36	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	10ec	5c d4 30 39	jmp $3930d4	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	10f0	5c de 4a 39	jmp $394ade	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	10f4	5c 66 4b 39	jmp $394b66	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	10f8	5c 95 4b 39	jmp $394b95	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	10fc	5c 18 4c 39	jmp $394c18	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	1100	5c be 4b 39	jmp $394bbe	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	1104	5c ac 4c 39	jmp $394cac	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	1108	5c 79 4c 39	jmp $394c79	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	110c	5c a8 4c 39	jmp $394ca8	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	1110	5c 3a 4d 39	jmp $394d3a	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	1114	5c 56 4d 39	jmp $394d56	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	1118	5c 5a 4d 39	jmp $394d5a	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	111c	5c 73 50 39	jmp $395073	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	1120	5c 72 39 39	jmp $393972	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	1124	5c 01 51 39	jmp $395101	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	1128	5c 28 3d 39	jmp $393d28	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	112c	5c b2 0a 39	jmp $390ab2	SETSIZES        JML ISETSIZES       ; Set the size information in the kernel's text screen routines based on the screen configuration
.381130	1130	5c 29 52 39	jmp $395229	F_COPY          JML IF_COPY         ; Copy a file
.381134	1134	5c 8f 51 39	jmp $39518f	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	1138	5c d8 51 39	jmp $3951d8	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.38113c	113c	5c 10 72 39	jmp $397210	TESTBREAK       JML KBD_TEST_BREAK  ; Check if BREAK was pressed recently by the user (C is set if true, clear if false)
.381140	1140	5c 1f 74 39	jmp $39741f	SETTABLE        JML KBD_SETTABLE    ; Set the keyboard scan code -> character translation tables (B:X points to the new tables)
.381144	1144	5c ef 0a 39	jmp $390aef	READVRAM        JML IREADVRAM       ; Read a byte from video RAM at B:X
.381148	1148	5c 6c 17 38	jmp $38176c	SETHANDLER      JML ISETHANDLER     ; Set the handler for the interrupt # in A to the FAR routine at Y:X
.38114c	114c	5c 8b 0f 39	jmp $390f8b	DELAY           JML IDELAY          ; Wait at least Y:X ticks of the system clock.
.381150	1150	5c 00 80 39	jmp $398000	IP_INIT         JML kernel.net.user.init        ; Initialize the network stack; B:Y->ip_info
.381154	1154	5c 06 80 39	jmp $398006	UDP_SEND        JML kernel.net.user.udp_send    ; Send a UDP packet; 0:X->udp_info
.381158	1158	5c 0c 80 39	jmp $39800c	UDP_RECV        JML kernel.net.user.udp_recv    ; Recv a UDP packet; 0:X->udp_info
=$001700					VEC_INT_START = *                           ; Label for the start of the IRQ vectors
.381700	1700	5c 1d 60 39	jmp $39601d	VEC_INT00_SOF   JML FDC_TIME_HANDLE         ; IRQ 0, 0 --- Start Of Frame interrupt
.381704	1704	5c 5a 10 39	jmp $39105a	VEC_INT01_SOL   JML IRQHANDLESTUB           ; IRQ 0, 1 --- Start Of Line interrupt
.381708	1708	5c 5a 10 39	jmp $39105a	VEC_INT02_TMR0  JML IRQHANDLESTUB           ; IRQ 0, 2 --- Timer 0 interrupt
.38170c	170c	5c 5a 10 39	jmp $39105a	VEC_INT03_TMR1  JML IRQHANDLESTUB           ; IRQ 0, 3 --- Timer 1 interrupt
.381710	1710	5c 5a 10 39	jmp $39105a	VEC_INT04_TMR2  JML IRQHANDLESTUB           ; IRQ 0, 4 --- Timer 2 interrupt
.381714	1714	5c 5a 10 39	jmp $39105a	VEC_INT05_RTC   JML IRQHANDLESTUB           ; IRQ 0, 5 --- Real Time Clock interrupt
.381718	1718	5c 5a 10 39	jmp $39105a	VEC_INT06_FDC   JML IRQHANDLESTUB           ; IRQ 0, 6 --- Floppy Drive Controller interrupt
.38171c	171c	5c 1d 7b 39	jmp $397b1d	VEC_INT07_MOUSE JML MOUSE_INTERRUPT         ; IRQ 0, 7 --- Mouse interrupt
.381720	1720	5c 8c 70 39	jmp $39708c	VEC_INT10_KBD   JML KBD_PROCESS_BYTE        ; IRQ 1, 0 --- Keyboard interrupt
.381724	1724	5c 5a 10 39	jmp $39105a	VEC_INT11_COL0  JML IRQHANDLESTUB           ; IRQ 1, 1 --- VICKY_II (INT2) Sprite Collision
.381728	1728	5c 5a 10 39	jmp $39105a	VEC_INT12_COL1  JML IRQHANDLESTUB           ; IRQ 1, 2 --- VICKY_II (INT3) Bitmap Collision
.38172c	172c	5c 5a 10 39	jmp $39105a	VEC_INT13_COM2  JML IRQHANDLESTUB           ; IRQ 1, 3 --- Serial port #2 interrupt
.381730	1730	5c 5a 10 39	jmp $39105a	VEC_INT14_COM1  JML IRQHANDLESTUB           ; IRQ 1, 4 --- Serial port #1 interrupt
.381734	1734	5c 5a 10 39	jmp $39105a	VEC_INT15_MIDI  JML IRQHANDLESTUB           ; IRQ 1, 5 --- MIDI controller interrupt
.381738	1738	5c 5a 10 39	jmp $39105a	VEC_INT16_LPT   JML IRQHANDLESTUB           ; IRQ 1, 6 --- Parallel port interrupt
.38173c	173c	5c 5a 10 39	jmp $39105a	VEC_INT17_SDC   JML IRQHANDLESTUB           ; IRQ 1, 7 --- SD Card Controller interrupt (CH376S???)
.381740	1740	5c 5a 10 39	jmp $39105a	VEC_INT20_OPL   JML IRQHANDLESTUB           ; IRQ 2, 0 --- OPL3
.381744	1744	5c 5a 10 39	jmp $39105a	VEC_INT21_GABE0 JML IRQHANDLESTUB           ; IRQ 2, 1 --- GABE (INT0) - TBD
.381748	1748	5c 5a 10 39	jmp $39105a	VEC_INT22_GABE1 JML IRQHANDLESTUB           ; IRQ 2, 2 --- GABE (INT1) - TBD
.38174c	174c	5c 5a 10 39	jmp $39105a	VEC_INT23_VDMA  JML IRQHANDLESTUB           ; IRQ 2, 3 --- VICKY_II (INT4) - VDMA Interrupt
.381750	1750	5c 5a 10 39	jmp $39105a	VEC_INT24_COL2  JML IRQHANDLESTUB           ; IRQ 2, 4 --- VICKY_II (INT5) Tile Collision
.381754	1754	5c 5a 10 39	jmp $39105a	VEC_INT25_GABE2 JML IRQHANDLESTUB           ; IRQ 2, 5 --- GABE (INT2) - TBD
.381758	1758	5c 5a 10 39	jmp $39105a	VEC_INT26_EXT   JML IRQHANDLESTUB           ; IRQ 2, 6 --- External Expansion
.38175c	175c	5c 5a 10 39	jmp $39105a	VEC_INT17_SDINS JML IRQHANDLESTUB           ; IRQ 2, 7 --- SDCARD Insertion
.381760	1760	5c 5a 10 39	jmp $39105a	VEC_INT30_OPN2  JML IRQHANDLESTUB           ; IRQ 3, 0 --- OPN2
.381764	1764	5c 5a 10 39	jmp $39105a	VEC_INT31_OPM   JML IRQHANDLESTUB           ; IRQ 3, 1 --- OPM
.381768	1768	5c 5a 10 39	jmp $39105a	VEC_INT32_IDE   JML IRQHANDLESTUB           ; IRQ 3, 2 --- HDD IDE Interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.38176c						ISETHANDLER
.38176c		8b		phb		                PHB
.38176d		08		php		                PHP
.38176e		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.381771		ab		plb		                PLB
.381772		ab		plb		                PLB
.381773		e2 20		sep #$20	                SEP #$20        ; set A short
.381775		c2 10		rep #$10	                REP #$10        ; set X long
.381777		48		pha		                PHA                     ; Save the interrupt number
.381778		5a		phy		                PHY                     ; Save the handler's bank
.381779		da		phx		                PHX                     ; Save the handler's address
.38177a		f4 00 00	pea #$0000	                PEA #0                  ; Make room for the offset to the vector
.38177d						LOCALS
>0001						l_vector        .word ?                 ; Address of vector in bank 0
>0003						l_handler       .dword ?                ; The address of the handler (only 24 bits, really)
>0007						l_number        .byte ?                 ; The interrupt number
.38177d		29 30		and #$30	                AND #$30                ; Isolate the block #
.38177f		0a		asl a		                ASL A                   ; Multiply by 2 to get the offset to the first vector of the block
.381780		83 01		sta $01,s	                STA l_vector
.381782		a3 07		lda $07,s	                LDA l_number            ; Get the number bank
.381784		29 07		and #$07	                AND #$07                ; Isolate the interrupt number
.381786		0a		asl a		                ASL A                   ; Multiply by four to get the first byte of that interrupt's vector
.381787		0a		asl a		                ASL A
.381788		03 01		ora $01,s	                ORA l_vector            ; Add it to the offset to the block
.38178a		83 01		sta $01,s	                STA l_vector            ; Store back to the vector address
.38178c		18		clc		                CLC                     ; Add the address of the start of the interrupt vector table
.38178d		a9 00		lda #$00	                LDA #<VEC_INT_START
.38178f		63 01		adc $01,s	                ADC l_vector
.381791		83 01		sta $01,s	                STA l_vector
.381793		a9 17		lda #$17	                LDA #>VEC_INT_START
.381795		63 02		adc $02,s	                ADC l_vector+1
.381797		83 02		sta $02,s	                STA l_vector+1
.381799		78		sei		                SEI                     ; Disable the interrupts while we update the vector
.38179a		a0 00 00	ldy #$0000	                LDY #0
.38179d		a9 5c		lda #$5c	                LDA #$5C                ; Opcode for JML
.38179f		93 01		sta ($01,s),y	                STA (l_vector),Y        ; Make sure the first byte is a JML instruction
.3817a1		c8		iny		                INY                     ; Move to the low byte of the vector address
.3817a2		a3 03		lda $03,s	                LDA l_handler
.3817a4		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.3817a6		c8		iny		                INY                     ; Move to the high byte of the vector address
.3817a7		a3 04		lda $04,s	                LDA l_handler+1
.3817a9		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.3817ab		c8		iny		                INY                     ; Move to the bank of the vector address
.3817ac		a3 05		lda $05,s	                LDA l_handler+2
.3817ae		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.3817b0		c2 20		rep #$20	                REP #$20        ; set A long
.3817b2		18		clc		                CLC                     ; Clean up the locals off the stack
.3817b3		3b		tsc		                TSC
.3817b4		69 07 00	adc #$0007	                ADC #SIZE(LOCALS)
.3817b7		1b		tcs		                TCS
.3817b8		28		plp		                PLP
.3817b9		ab		plb		                PLB
.3817ba		6b		rtl		                RTL
.3817bb						IRQ_HANDLER
.3817bb		08		php		                PHP
.3817bc		e2 20		sep #$20	                SEP #$20        ; set A short
.3817be		af 4c 01 00	lda $00014c					LDA @l INT_MASK_REG0
.3817c2		49 ff		eor #$ff					EOR #$FF
.3817c4		48		pha						PHA			; 1,s
.3817c5		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0     ; Get the block 0 pending interrupts
.3817c9		23 01		and $01,s					AND 1,s
.3817cb		d0 03		bne $3817d0	                BNE process_reg0
.3817cd		4c 24 18	jmp $381824	                JMP skip_block0      ; If nothing: skip to block 1
.3817d0		8f 40 01 00	sta $000140	process_reg0    STA @l INT_PENDING_REG0
.3817d4		89 01		bit #$01	                BIT #FNX0_INT00_SOF           ; Check to see if the bit is set
.3817d6		f0 06		beq $3817de	                BEQ continue            ; If not: skip the rest of this macro
.3817d8		48		pha						PHA
.3817d9		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF            ; And call its handler
.3817dd		68		pla						PLA
.3817de						continue
.3817de		89 02		bit #$02	                BIT #FNX0_INT01_SOL           ; Check to see if the bit is set
.3817e0		f0 06		beq $3817e8	                BEQ continue            ; If not: skip the rest of this macro
.3817e2		48		pha						PHA
.3817e3		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL            ; And call its handler
.3817e7		68		pla						PLA
.3817e8						continue
.3817e8		89 04		bit #$04	                BIT #FNX0_INT02_TMR0           ; Check to see if the bit is set
.3817ea		f0 06		beq $3817f2	                BEQ continue            ; If not: skip the rest of this macro
.3817ec		48		pha						PHA
.3817ed		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0            ; And call its handler
.3817f1		68		pla						PLA
.3817f2						continue
.3817f2		89 08		bit #$08	                BIT #FNX0_INT03_TMR1           ; Check to see if the bit is set
.3817f4		f0 06		beq $3817fc	                BEQ continue            ; If not: skip the rest of this macro
.3817f6		48		pha						PHA
.3817f7		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1            ; And call its handler
.3817fb		68		pla						PLA
.3817fc						continue
.3817fc		89 10		bit #$10	                BIT #FNX0_INT04_TMR2           ; Check to see if the bit is set
.3817fe		f0 06		beq $381806	                BEQ continue            ; If not: skip the rest of this macro
.381800		48		pha						PHA
.381801		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2            ; And call its handler
.381805		68		pla						PLA
.381806						continue
.381806		89 20		bit #$20	                BIT #FNX0_INT05_RTC           ; Check to see if the bit is set
.381808		f0 06		beq $381810	                BEQ continue            ; If not: skip the rest of this macro
.38180a		48		pha						PHA
.38180b		22 14 17 00	jsl $001714	                JSL VEC_INT05_RTC            ; And call its handler
.38180f		68		pla						PLA
.381810						continue
.381810		89 40		bit #$40	                BIT #FNX0_INT06_FDC           ; Check to see if the bit is set
.381812		f0 06		beq $38181a	                BEQ continue            ; If not: skip the rest of this macro
.381814		48		pha						PHA
.381815		22 18 17 00	jsl $001718	                JSL VEC_INT06_FDC            ; And call its handler
.381819		68		pla						PLA
.38181a						continue
.38181a		89 80		bit #$80	                BIT #FNX0_INT07_MOUSE           ; Check to see if the bit is set
.38181c		f0 06		beq $381824	                BEQ continue            ; If not: skip the rest of this macro
.38181e		48		pha						PHA
.38181f		22 1c 17 00	jsl $00171c	                JSL VEC_INT07_MOUSE            ; And call its handler
.381823		68		pla						PLA
.381824						continue
.381824		68		pla		skip_block0     PLA
.381825						CHECK_PENDING_REG1
.381825		af 4d 01 00	lda $00014d					LDA @l INT_MASK_REG1
.381829		49 ff		eor #$ff					EOR #$FF
.38182b		48		pha						PHA			; 1,s
.38182c		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1
.381830		23 01		and $01,s					AND 1,s
.381832		d0 03		bne $381837	                BNE process_reg1
.381834		4c 8b 18	jmp $38188b	                JMP skip_block1
.381837		8f 41 01 00	sta $000141	process_reg1    STA @l INT_PENDING_REG1
.38183b		89 01		bit #$01	                BIT #FNX1_INT00_KBD           ; Check to see if the bit is set
.38183d		f0 06		beq $381845	                BEQ continue            ; If not: skip the rest of this macro
.38183f		48		pha						PHA
.381840		22 20 17 00	jsl $001720	                JSL VEC_INT10_KBD            ; And call its handler
.381844		68		pla						PLA
.381845						continue
.381845		89 02		bit #$02	                BIT #FNX1_INT01_COL0           ; Check to see if the bit is set
.381847		f0 06		beq $38184f	                BEQ continue            ; If not: skip the rest of this macro
.381849		48		pha						PHA
.38184a		22 24 17 00	jsl $001724	                JSL VEC_INT11_COL0            ; And call its handler
.38184e		68		pla						PLA
.38184f						continue
.38184f		89 04		bit #$04	                BIT #FNX1_INT02_COL1           ; Check to see if the bit is set
.381851		f0 06		beq $381859	                BEQ continue            ; If not: skip the rest of this macro
.381853		48		pha						PHA
.381854		22 28 17 00	jsl $001728	                JSL VEC_INT12_COL1            ; And call its handler
.381858		68		pla						PLA
.381859						continue
.381859		89 08		bit #$08	                BIT #FNX1_INT03_COM2           ; Check to see if the bit is set
.38185b		f0 06		beq $381863	                BEQ continue            ; If not: skip the rest of this macro
.38185d		48		pha						PHA
.38185e		22 2c 17 00	jsl $00172c	                JSL VEC_INT13_COM2            ; And call its handler
.381862		68		pla						PLA
.381863						continue
.381863		89 10		bit #$10	                BIT #FNX1_INT04_COM1           ; Check to see if the bit is set
.381865		f0 06		beq $38186d	                BEQ continue            ; If not: skip the rest of this macro
.381867		48		pha						PHA
.381868		22 30 17 00	jsl $001730	                JSL VEC_INT14_COM1            ; And call its handler
.38186c		68		pla						PLA
.38186d						continue
.38186d		89 20		bit #$20	                BIT #FNX1_INT05_MPU401           ; Check to see if the bit is set
.38186f		f0 06		beq $381877	                BEQ continue            ; If not: skip the rest of this macro
.381871		48		pha						PHA
.381872		22 34 17 00	jsl $001734	                JSL VEC_INT15_MIDI            ; And call its handler
.381876		68		pla						PLA
.381877						continue
.381877		89 40		bit #$40	                BIT #FNX1_INT06_LPT           ; Check to see if the bit is set
.381879		f0 06		beq $381881	                BEQ continue            ; If not: skip the rest of this macro
.38187b		48		pha						PHA
.38187c		22 38 17 00	jsl $001738	                JSL VEC_INT16_LPT            ; And call its handler
.381880		68		pla						PLA
.381881						continue
.381881		89 80		bit #$80	                BIT #FNX1_INT07_SDCARD           ; Check to see if the bit is set
.381883		f0 06		beq $38188b	                BEQ continue            ; If not: skip the rest of this macro
.381885		48		pha						PHA
.381886		22 3c 17 00	jsl $00173c	                JSL VEC_INT17_SDC            ; And call its handler
.38188a		68		pla						PLA
.38188b						continue
.38188b		68		pla		skip_block1     PLA
.38188c						CHECK_PENDING_REG2
.38188c		af 4e 01 00	lda $00014e					LDA @l INT_MASK_REG2
.381890		49 ff		eor #$ff					EOR #$FF
.381892		48		pha						PHA			; 1,s
.381893		af 42 01 00	lda $000142	                LDA @l INT_PENDING_REG2
.381897		23 01		and $01,s					AND 1,s
.381899		d0 03		bne $38189e	                BNE process_reg2
.38189b		4c f2 18	jmp $3818f2	                JMP skip_block2
.38189e		8f 42 01 00	sta $000142	process_reg2    STA @l INT_PENDING_REG2
.3818a2		89 01		bit #$01	                BIT #FNX2_INT00_OPL3           ; Check to see if the bit is set
.3818a4		f0 06		beq $3818ac	                BEQ continue            ; If not: skip the rest of this macro
.3818a6		48		pha						PHA
.3818a7		22 40 17 00	jsl $001740	                JSL VEC_INT20_OPL            ; And call its handler
.3818ab		68		pla						PLA
.3818ac						continue
.3818ac		89 02		bit #$02	                BIT #FNX2_INT01_GABE_INT0           ; Check to see if the bit is set
.3818ae		f0 06		beq $3818b6	                BEQ continue            ; If not: skip the rest of this macro
.3818b0		48		pha						PHA
.3818b1		22 44 17 00	jsl $001744	                JSL VEC_INT21_GABE0            ; And call its handler
.3818b5		68		pla						PLA
.3818b6						continue
.3818b6		89 04		bit #$04	                BIT #FNX2_INT02_GABE_INT1           ; Check to see if the bit is set
.3818b8		f0 06		beq $3818c0	                BEQ continue            ; If not: skip the rest of this macro
.3818ba		48		pha						PHA
.3818bb		22 48 17 00	jsl $001748	                JSL VEC_INT22_GABE1            ; And call its handler
.3818bf		68		pla						PLA
.3818c0						continue
.3818c0		89 08		bit #$08	                BIT #FNX2_INT03_VDMA           ; Check to see if the bit is set
.3818c2		f0 06		beq $3818ca	                BEQ continue            ; If not: skip the rest of this macro
.3818c4		48		pha						PHA
.3818c5		22 4c 17 00	jsl $00174c	                JSL VEC_INT23_VDMA            ; And call its handler
.3818c9		68		pla						PLA
.3818ca						continue
.3818ca		89 10		bit #$10	                BIT #FNX2_INT04_COL2           ; Check to see if the bit is set
.3818cc		f0 06		beq $3818d4	                BEQ continue            ; If not: skip the rest of this macro
.3818ce		48		pha						PHA
.3818cf		22 50 17 00	jsl $001750	                JSL VEC_INT24_COL2            ; And call its handler
.3818d3		68		pla						PLA
.3818d4						continue
.3818d4		89 20		bit #$20	                BIT #FNX2_INT05_GABE_INT2           ; Check to see if the bit is set
.3818d6		f0 06		beq $3818de	                BEQ continue            ; If not: skip the rest of this macro
.3818d8		48		pha						PHA
.3818d9		22 54 17 00	jsl $001754	                JSL VEC_INT25_GABE2            ; And call its handler
.3818dd		68		pla						PLA
.3818de						continue
.3818de		89 40		bit #$40	                BIT #FNX2_INT06_EXT           ; Check to see if the bit is set
.3818e0		f0 06		beq $3818e8	                BEQ continue            ; If not: skip the rest of this macro
.3818e2		48		pha						PHA
.3818e3		22 58 17 00	jsl $001758	                JSL VEC_INT26_EXT            ; And call its handler
.3818e7		68		pla						PLA
.3818e8						continue
.3818e8		89 80		bit #$80	                BIT #FNX2_INT07_SDCARD_INS           ; Check to see if the bit is set
.3818ea		f0 06		beq $3818f2	                BEQ continue            ; If not: skip the rest of this macro
.3818ec		48		pha						PHA
.3818ed		22 5c 17 00	jsl $00175c	                JSL VEC_INT17_SDINS            ; And call its handler
.3818f1		68		pla						PLA
.3818f2						continue
.3818f2		68		pla		skip_block2     PLA
.3818f3						CHECK_PENDING_REG3
.3818f3		af 4f 01 00	lda $00014f					LDA @l INT_MASK_REG3
.3818f7		49 ff		eor #$ff					EOR #$FF
.3818f9		48		pha						PHA			; 1,s
.3818fa		af 43 01 00	lda $000143	                LDA @l INT_PENDING_REG3
.3818fe		23 01		and $01,s					AND 1,s
.381900		f0 22		beq $381924	                BEQ skip_block3
.381902		8f 43 01 00	sta $000143					STA @l INT_PENDING_REG3
.381906		89 01		bit #$01	                BIT #FNX3_INT00_OPN2           ; Check to see if the bit is set
.381908		f0 06		beq $381910	                BEQ continue            ; If not: skip the rest of this macro
.38190a		48		pha						PHA
.38190b		22 60 17 00	jsl $001760	                JSL VEC_INT30_OPN2            ; And call its handler
.38190f		68		pla						PLA
.381910						continue
.381910		89 02		bit #$02	                BIT #FNX3_INT01_OPM           ; Check to see if the bit is set
.381912		f0 06		beq $38191a	                BEQ continue            ; If not: skip the rest of this macro
.381914		48		pha						PHA
.381915		22 64 17 00	jsl $001764	                JSL VEC_INT31_OPM            ; And call its handler
.381919		68		pla						PLA
.38191a						continue
.38191a		89 04		bit #$04	                BIT #FNX3_INT02_IDE           ; Check to see if the bit is set
.38191c		f0 06		beq $381924	                BEQ continue            ; If not: skip the rest of this macro
.38191e		48		pha						PHA
.38191f		22 68 17 00	jsl $001768	                JSL VEC_INT32_IDE            ; And call its handler
.381923		68		pla						PLA
.381924						continue
.381924		68		pla		skip_block3     PLA
.381925						EXIT_IRQ_HANDLE
.381925		28		plp		                PLP
.381926		6b		rtl		                RTL
.381927		6b		rtl		NMI_HANDLER     RTL
.381928						HANDLE_TIMER0
.381928		48		pha		                PHA
.381929		08		php		                PHP
.38192a		e2 20		sep #$20	                SEP #$20        ; set A short
.38192c		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381930		09 80		ora #$80	                ORA #TIMER0TRIGGER
.381932		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381936		28		plp		                PLP
.381937		68		pla		                PLA
.381938		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/super_io_def.asm

=$af1060					SIO_KB                  = $AF1060
=$af1100					PME_STS_REG             = $AF1100
=$af1102					PME_EN_REG		        = $AF1102
=$af1104					PME_STS1_REG		    = $AF1104
=$af1105					PME_STS2_REG		    = $AF1105
=$af1106					PME_STS3_REG		    = $AF1106
=$af1107					PME_STS4_REG		    = $AF1107
=$af1108					PME_STS5_REG		    = $AF1108
=$af110a					PME_EN1_REG             = $AF110A
=$af110b					PME_EN2_REG             = $AF110B
=$af110c					PME_EN3_REG             = $AF110C
=$af110d					PME_EN4_REG             = $AF110D
=$af110e					PME_EN5_REG             = $AF110E
=$af1110					SMI_STS1_REG		    = $AF1110
=$af1111					SMI_STS2_REG		    = $AF1111
=$af1112					SMI_STS3_REG		    = $AF1112
=$af1113					SMI_STS4_REG		    = $AF1113
=$af1114					SMI_STS5_REG		    = $AF1114
=$af1116					SMI_EN1_REG             = $AF1116
=$af1117					SMI_EN2_REG             = $AF1117
=$af1118					SMI_EN3_REG             = $AF1118
=$af1119					SMI_EN4_REG             = $AF1119
=$af111a					SMI_EN5_REG             = $AF111A
=$af111c					MSC_ST_REG              = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		    = $AF1123
=$af1124					GP11_REG    		    = $AF1124
=$af1125					GP12_REG    		    = $AF1125
=$af1126					GP13_REG    		    = $AF1126
=$af1127					GP14_REG    		    = $AF1127
=$af1128					GP15_REG    		    = $AF1128
=$af1129					GP16_REG    		    = $AF1129
=$af112a					GP17_REG    		    = $AF112A
=$af112b					GP20_REG    		    = $AF112B
=$af112c					GP21_REG    		    = $AF112C
=$af112d					GP22_REG		        = $AF112D
=$af112f					GP24_REG		        = $AF112F
=$af1130					GP25_REG		        = $AF1130
=$af1131					GP26_REG		        = $AF1131
=$af1132					GP27_REG		        = $AF1132
=$af1133					GP30_REG		        = $AF1133
=$af1134					GP31_REG		        = $AF1134
=$af1135					GP32_REG		        = $AF1135
=$af1136					GP33_REG		        = $AF1136
=$af1137					GP34_REG		        = $AF1137
=$af1138					GP35_REG		        = $AF1138
=$af1139					GP36_REG		        = $AF1139
=$af113a					GP37_REG		        = $AF113A
=$af113b					GP40_REG		        = $AF113B
=$af113c					GP41_REG		        = $AF113C
=$af113d					GP42_REG		        = $AF113D
=$af113e					GP43_REG		        = $AF113E
=$af113f					GP50_REG		        = $AF113F
=$af1140					GP51_REG		        = $AF1140
=$af1141					GP52_REG		        = $AF1141
=$af1142					GP53_REG		        = $AF1142
=$af1143					GP54_REG		        = $AF1143
=$af1144					GP55_REG		        = $AF1144
=$af1145					GP56_REG		        = $AF1145
=$af1146					GP57_REG		        = $AF1146
=$af1147					GP60_REG		        = $AF1147
=$af1148					GP61_REG		        = $AF1148
=$af114b					GP1_REG			        = $AF114B
=$af114c					GP2_REG			        = $AF114C
=$af114d					GP3_REG			        = $AF114D
=$af114e					GP4_REG			        = $AF114E
=$af114f					GP5_REG			        = $AF114F
=$af1150					GP6_REG			        = $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG                = $AF1157
=$af1158					FAN_CTRL_REG  	        = $AF1158
=$af1159					FAN1_TACH_REG           = $AF1159
=$af115a					FAN2_TACH_REG           = $AF115A
=$af115b					FAN1_PRELOAD_REG        = $AF115B
=$af115c					FAN2_PRELOAD_REG        = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE      = $AF115F
=$af1200					SIO_JOY                 = $AF1200
=$af12f8					SIO_COM1                = $AF12F8
=$af1330					SIO_MPU                 = $AF1330
=$af1378					SIO_LPT0                = $AF1378
=$af13f0					SIO_FDC                 = $AF13F0
=$af13f0					SIO_FDC_SRA             = $AF13F0 ; Read Only - Status Register A
=$af13f1					SIO_FDC_SRB             = $AF13F1 ; Read Only - Status Register B
=$af13f2					SIO_FDC_DOR             = $AF13F2 ; Read/Write - Digital Output Register
=$af13f3					SIO_FDC_TSR             = $AF13F3 ; Read/Write - Tape Drive Status
=$af13f4					SIO_FDC_MSR             = $AF13F4 ; Read - Main Status Register
=$af13f4					SIO_FDC_DSR             = $AF13F4 ; Write - Data Select Register
=$af13f5					SIO_FDC_DTA             = $AF13F5 ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV             = $AF13F6 ; Reserved
=$af13f7					SIO_FDC_DIR             = $AF13F7 ; Read - Digital Input Register
=$af13f8					SIO_FDC_CCR             = $AF13F8 ; Write - Configuration Control Register
=$af13f8					SIO_COM0                = $AF13F8

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/keyboard_def.asm

=$af1807					    STATUS_PORT 	= $AF1807
=$af1807					    KBD_STATUS      = $AF1807
=$af1807					    KBD_CMD_BUF		= $AF1807
=$af1803					    KBD_OUT_BUF 	= $AF1803
=$af1803					    KBD_INPT_BUF	= $AF1803
=$af1803					    KBD_DATA_BUF	= $AF1803
=$af180a					    PORT_A		    = $AF180A   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$af180b					    PORT_B			= $AF180B   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=4						CHAN_EVID     = 4           ; ID for the second video port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$04						SYNC_Turn_Off           = $04 ; 0 = Normal Operation, 1 = Turn Off Sync to get sleep mode from Monitor
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select, Bit[6] - Collision On
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Pos: [13-4] Scroll: [3:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Pos: [13:4] Scroll: [3:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ;  Direction: [14] Pos: [13-4] Scroll: [3:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Pos: [13:4] Scroll: [3:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ;  Direction: [14] Pos: [13-4] Scroll: [3:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Pos: [13:4] Scroll: [3:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ;  Direction: [14] Pos: [13-4] Scroll: [3:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Pos: [13:4] Scroll: [3:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src\kernel.asm

.390400						IBOOT
.390400		18		clc		                CLC               ; clear the carry flag
.390401		fb		xce		                XCE               ; move carry to emulation flag.
.390402		78		sei		                SEI               ; Disable interrupts
.390403		c2 30		rep #$30	                REP #$30        ; set A&X long
.390405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408		1b		tcs		                TAS
.390409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.390412		54 00 38	mvn $38,$00	                MVN $38,$00       ; Or during soft loading of the kernel from the debug port
.390415		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.390418		2b		pld		                PLD
.390419		e2 20		sep #$20	                SEP #$20        ; set A short
.39041b		a2 00 00	ldx #$0000	                LDX #$0000
.39041e		a9 00		lda #$00	                LDA #$00
.390420						CLEAR_MEM_LOOP
.390420		95 00		sta $00,x	                STA $0000, X
.390422		e8		inx		                INX
.390423		e0 00 01	cpx #$0100	                CPX #$0100
.390426		d0 f8		bne $390420	                BNE CLEAR_MEM_LOOP
.390428		ea		nop		                NOP
.390429		a9 ff		lda #$ff	                LDA #$FF
.39042b		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.39042f		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390433		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.390437		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.39043b		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.39043f		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390443		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.390447		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.39044b		22 69 0c 39	jsl $390c69	                JSL INITRTC               ; Initialize the RTC
.39044f		e2 20		sep #$20	                SEP #$20        ; set A short
.390451		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.390455		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.390457		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.390459		d0 1e		bne $390479	                BNE SkipInitExpC100C200
.39045b		c2 20		rep #$20	                REP #$20        ; set A long
.39045d		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.390461		c9 64 00	cmp #$0064	                CMP #$0064
.390464		f0 0f		beq $390475	                BEQ InitC100ESID
.390466		c9 c8 00	cmp #$00c8	                CMP #$00C8
.390469		d0 0e		bne $390479	                BNE SkipInitExpC100C200
.39046b		22 e4 63 39	jsl $3963e4	                JSL SIMPLE_INIT_ETHERNET_CTRL
.39046f		22 f5 64 39	jsl $3964f5	                JSL INIT_EVID_VID_MODE
.390473		80 04		bra $390479	                BRA SkipInitExpC100C200
.390475						InitC100ESID:
.390475		22 e4 63 39	jsl $3963e4	                JSL SIMPLE_INIT_ETHERNET_CTRL
.390479						SkipInitExpC100C200:
.390479		e2 20		sep #$20	                SEP #$20        ; set A short
.39047b		c2 10		rep #$10	                REP #$10        ; set X long
.39047d		a9 9f		lda #$9f	                LDA #$9F              ; Channel 1 - Full Atteniation
.39047f		8f 00 f1 af	sta $aff100	                STA $AFF100
.390483		a9 bf		lda #$bf	                LDA #$BF              ; Channel 2 - Full Atteniation
.390485		8f 00 f1 af	sta $aff100	                STA $AFF100
.390489		a9 df		lda #$df	                LDA #$DF              ; Channel 3 - No Atteniation
.39048b		8f 00 f1 af	sta $aff100	                STA $AFF100
.39048f		a9 ff		lda #$ff	                LDA #$FF              ; Channel 4 - No Atteniation
.390491		8f 00 f1 af	sta $aff100	                STA $AFF100
.390495		a9 70		lda #$70	                LDA #$70                  ; Set the default text color to dim white on black
.390497		85 1e		sta $1e		                STA CURCOLOR
.390499		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.39049d		29 01		and #$01	                AND #$01
.39049f		c9 01		cmp #$01	                CMP #$01
.3904a1		d0 14		bne $3904b7	                BNE Alreadyin640480Mode
.3904a3		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904a7		29 fc		and #$fc	                AND #$FC
.3904a9		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.3904ad		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904b1		09 01		ora #$01	                ORA #$01
.3904b3		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.3904b7						Alreadyin640480Mode
.3904b7		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904bb		29 fc		and #$fc	                AND #$FC
.3904bd		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.3904c1		a9 00		lda #$00	                LDA #0
.3904c3		22 38 10 00	jsl $001038	                JSL SETIN
.3904c7		22 3c 10 00	jsl $00103c	                JSL SETOUT
.3904cb		22 88 66 39	jsl $396688	                JSL ANSI_INIT
.3904cf		22 2c 11 00	jsl $00112c	                JSL SETSIZES
.3904d3		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.3904d7		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.3904db		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.3904df		22 2c 0b 39	jsl $390b2c	                JSL INITMOUSEPOINTER
.3904e3		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.3904e7		c2 20		rep #$20	                REP #$20        ; set A long
.3904e9		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.3904ec		2b		pld		                PLD
.3904ed		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD        ; Initialize the keyboard
.3904f1		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE           ; Initialize the mouse
.3904f5		58		cli		                CLI
.3904f6		e2 20		sep #$20	                SEP #$20        ; set A short
.3904f8		c2 10		rep #$10	                REP #$10        ; set X long
.3904fa		f4 39 39	pea #$3939	                PEA #((`greet_msg) * 256) + (`greet_msg)
.3904fd		ab		plb		                PLB
.3904fe		ab		plb		                PLB
.3904ff		a2 00 00	ldx #$0000	                LDX #0
.390502		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.390506		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.39050a		e8		inx		                INX
.39050b		e0 00 10	cpx #$1000	                CPX #$1000
.39050e		d0 f2		bne $390502	                BNE jmpcopy
.390510						retry_boot
.390510		22 6c 3c 39	jsl $393c6c	                JSL DOS_INIT            ; Initialize the "disc operating system"
.390514		22 5d 7b 39	jsl $397b5d	                JSL BOOT_SOUND          ; Play the boot sound
.390518		a9 00		lda #$00	                LDA #0
.39051a		8f e0 00 00	sta $0000e0	                STA @l MOUSE_IDX
.39051e		22 00 00 3e	jsl $3e0000	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.390522		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN           ; Clear Screen and Set a standard color in Color Memory
.390526		22 a0 10 00	jsl $0010a0	                JSL CSRHOME             ; Move to the home position
.39052a						greet
.39052a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39052c		f4 39 39	pea #$3939	                PEA #((`greet_msg) * 256) + (`greet_msg)
.39052f		ab		plb		                PLB
.390530		ab		plb		                PLB
.390531		a2 1b 88	ldx #$881b	                LDX #<>greet_msg
.390534		22 e0 06 39	jsl $3906e0	                JSL IPRINT              ; print the first line
.390538		22 c7 08 39	jsl $3908c7	                JSL ICOLORFLAG          ; This is to set the color memory for the text logo
.39053c		22 d5 65 39	jsl $3965d5	                JSL EVID_GREET          ; Print the EVID greeting, if the EVID card is installed
.390540		c2 30		rep #$30	                REP #$30        ; set A&X long
.390542		a9 ff fe	lda #$feff	                LDA #STACK_END          ; We are the root, let's make sure from now on, that we start clean
.390545		1b		tcs		                TAS
.390546		e2 20		sep #$20	                SEP #$20        ; set A short
.390548		c2 10		rep #$10	                REP #$10        ; set X long
.39054a		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.39054e		c9 39		cmp #$39	                CMP #SCAN_SP          ; Did the user press SPACE?
.390550		f0 10		beq $390562	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.390552		c9 1c		cmp #$1c	                CMP #SCAN_CR          ; Did the user press RETURN?
.390554		f0 1e		beq $390574	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.390556		c9 3b		cmp #$3b	                CMP #CHAR_F1          ; Did the user press F1?
.390558		f0 62		beq $3905bc	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.39055a		c9 3c		cmp #$3c	                CMP #CHAR_F2          ; Did the user press F2?
.39055c		f0 1d		beq $39057b	                BEQ BOOTSDC           ; Yes: boot via the SDC
.39055e		c9 3d		cmp #$3d	                CMP #CHAR_F3          ; Did the user press F3?
.390560		f0 39		beq $39059b	                BEQ BOOTIDE           ; Yes: boot via the IDE
.390562		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.390566		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.390568		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.39056a		f0 2f		beq $39059b	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.39056c		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.39056e		f0 0b		beq $39057b	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.390570		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.390572		f0 48		beq $3905bc	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.390574						IRESTORE
.390574		5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.390578		ea		nop		CREDIT_LOCK     NOP
.390579		80 fd		bra $390578	                BRA CREDIT_LOCK
.39057b		a2 5f 8c	ldx #$8c5f	BOOTSDC         LDX #<>sdc_boot
.39057e		22 e0 06 39	jsl $3906e0	                JSL IPRINT
.390582		e2 20		sep #$20	                SEP #$20        ; set A short
.390584		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.390586		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.39058a		22 28 3d 39	jsl $393d28	                JSL DOS_MOUNT         ; Mount the SDC
.39058e		90 06		bcc $390596	                BCC sdc_error         ; Print an error message if couldn't get anything
.390590		22 d8 3e 39	jsl $393ed8	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.390594		80 de		bra $390574	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.390596		a2 e3 8b	ldx #$8be3	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.390599		80 40		bra $3905db	                BRA PR_BOOT_ERROR
.39059b		a2 76 8c	ldx #$8c76	BOOTIDE         LDX #<>ide_boot
.39059e		22 e0 06 39	jsl $3906e0	                JSL IPRINT
.3905a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3905a4		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905a6		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905aa		22 28 3d 39	jsl $393d28	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905ae		90 07		bcc $3905b7	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905b0		22 d8 3e 39	jsl $393ed8	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905b4		82 bd ff	brl $390574	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905b7		a2 ff 8b	ldx #$8bff	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905ba		80 1f		bra $3905db	                BRA PR_BOOT_ERROR
.3905bc		a2 48 8c	ldx #$8c48	BOOTFLOPPY      LDX #<>fdc_boot
.3905bf		22 e0 06 39	jsl $3906e0	                JSL IPRINT
.3905c3		e2 20		sep #$20	                SEP #$20        ; set A short
.3905c5		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905c7		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905cb		22 dd 5d 39	jsl $395ddd	                JSL FDC_MOUNT         ; Mount the floppy drive
.3905cf		90 07		bcc $3905d8	                BCC fdc_error         ; Print an error message if couldn't get anything
.3905d1		22 d8 3e 39	jsl $393ed8	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.3905d5		82 9c ff	brl $390574	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.3905d8		a2 22 8c	ldx #$8c22	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905db		22 e0 06 39	jsl $3906e0	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.3905df		a2 be 8b	ldx #$8bbe	                LDX #<>boot_retry     ; Print the boot retry prompt
.3905e2		22 e0 06 39	jsl $3906e0	                JSL IPRINT
.3905e6		22 7a 06 39	jsl $39067a	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.3905ea		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.3905ec		d0 03		bne $3905f1	                BNE chk_r_lc
.3905ee		82 1f ff	brl $390510	                BRL retry_boot        ; Yes: retry the boot sequence
.3905f1		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.3905f3		d0 03		bne $3905f8	                BNE chk_b_lc
.3905f5		82 18 ff	brl $390510	                BRL retry_boot
.3905f8		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.3905fa		d0 03		bne $3905ff	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.3905fc		82 75 ff	brl $390574	                BRL BOOTBASIC
.3905ff						chk_b_lc_not:
.3905ff		c9 42		cmp #$42	                CMP #'B'
.390601		d0 03		bne $390606	                BNE chk_b_lc_not0
.390603		82 6e ff	brl $390574	                BRL BOOTBASIC
.390606						chk_b_lc_not0:
.390606		80 de		bra $3905e6	                BRA boot_wait_key     ; No: keep waiting
.390608						IBREAK
.390608		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.39060b		2b		pld		                PLD
.39060c		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.39060d		8f 48 02 00	sta $000248	                STA CPUY
.390611		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.390612		8f 46 02 00	sta $000246	                STA CPUX
.390616		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.390617		8f 44 02 00	sta $000244	                STA CPUA
.39061b		68		pla		                PLA
.39061c		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.390620		e2 20		sep #$20	                SEP #$20        ; set A short
.390622		68		pla		                PLA             ; Pull Data Bank (8 bits)
.390623		8f 4e 02 00	sta $00024e	                STA CPUDBR
.390627		68		pla		                PLA             ; Pull Flags (8 bits)
.390628		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.39062c		c2 20		rep #$20	                REP #$20        ; set A long
.39062e		68		pla		                PLA             ; Pull Program Counter (16 bits)
.39062f		8f 40 02 00	sta $000240	                STA CPUPC
.390633		e2 20		sep #$20	                SEP #$20        ; set A short
.390635		68		pla		                PLA             ; Pull Program Bank (8 bits)
.390636		8f 42 02 00	sta $000242	                STA CPUPBR
.39063a		c2 20		rep #$20	                REP #$20        ; set A long
.39063c		3b		tsc		                TSA             ; Get the stack
.39063d		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.390641		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.390644		1b		tcs		                TAS
.390645		5c 04 00 3a	jmp $3a0004	                JML MONITOR
.390649						IREADY
.390649		f4 39 39	pea #$3939	                PEA #((`ready_msg) * 256) + (`ready_msg)
.39064c		ab		plb		                PLB
.39064d		ab		plb		                PLB
.39064e		e2 20		sep #$20	                SEP #$20        ; set A short
.390650		a2 91 8c	ldx #$8c91	                LDX #<>ready_msg
.390653		22 e0 06 39	jsl $3906e0	                JSL IPRINT
.390657						IREADYWAIT
.390657		22 71 06 39	jsl $390671	                JSL IGETCHE
.39065b		80 fa		bra $390657	                BRA IREADYWAIT
.39065d		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.39065e		db		stp		IRETURN         STP
.39065f		08		php		ISETIN          PHP
.390660		e2 20		sep #$20	                SEP #$20        ; set A short
.390662		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.390666		28		plp		                PLP
.390667		6b		rtl		                RTL
.390668		08		php		ISETOUT         PHP
.390669		e2 20		sep #$20	                SEP #$20        ; set A short
.39066b		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.39066f		28		plp		                PLP
.390670		6b		rtl		                RTL
.390671		22 4c 10 00	jsl $00104c	IGETCHE         JSL GETCHW
.390675		22 18 10 00	jsl $001018	                JSL PUTC
.390679		6b		rtl		                RTL
.39067a						IGETCHW
.39067a		da		phx		                PHX
.39067b		5a		phy		                PHY
.39067c		8b		phb		                PHB
.39067d		0b		phd		                PHD
.39067e		08		php		                PHP
.39067f		e2 20		sep #$20	                SEP #$20        ; set A short
.390681		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390685		f0 1b		beq $3906a2	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390687		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390689		f0 0d		beq $390698	                BEQ getc_uart       ; Yes: handle reading from the UART
.39068b		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39068d		f0 09		beq $390698	                BEQ getc_uart       ; Yes: handle reading from the UART
.39068f		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390691		28		plp		                PLP
.390692		38		sec		                SEC                 ; And return carry set
.390693		2b		pld		                PLD
.390694		ab		plb		                PLB
.390695		7a		ply		                PLY
.390696		fa		plx		                PLX
.390697		6b		rtl		                RTL
.390698		22 36 53 39	jsl $395336	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.39069c		22 d2 53 39	jsl $3953d2	                JSL UART_GETC       ; Get the charater from the COM port
.3906a0		80 04		bra $3906a6	                BRA done
.3906a2		22 8d 72 39	jsl $39728d	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.3906a6		28		plp		done            PLP
.3906a7		18		clc		                CLC                 ; Return carry clear for valid data
.3906a8		2b		pld		                PLD
.3906a9		ab		plb		                PLB
.3906aa		7a		ply		                PLY
.3906ab		fa		plx		                PLX
.3906ac		6b		rtl		                RTL
.3906ad						IGETCH
.3906ad		da		phx		                PHX
.3906ae		5a		phy		                PHY
.3906af		8b		phb		                PHB
.3906b0		0b		phd		                PHD
.3906b1		08		php		                PHP
.3906b2		e2 20		sep #$20	                SEP #$20        ; set A short
.3906b4		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.3906b8		f0 1b		beq $3906d5	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.3906ba		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3906bc		f0 0d		beq $3906cb	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906be		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3906c0		f0 09		beq $3906cb	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906c2		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.3906c4		28		plp		                PLP
.3906c5		38		sec		                SEC                 ; And return carry set
.3906c6		2b		pld		                PLD
.3906c7		ab		plb		                PLB
.3906c8		7a		ply		                PLY
.3906c9		fa		plx		                PLX
.3906ca		6b		rtl		                RTL
.3906cb		22 36 53 39	jsl $395336	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.3906cf		22 d2 53 39	jsl $3953d2	                JSL UART_GETC       ; Get the charater from the COM port
.3906d3		80 04		bra $3906d9	                BRA done
.3906d5		22 99 72 39	jsl $397299	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.3906d9		28		plp		done            PLP
.3906da		18		clc		                CLC                 ; Return carry clear for valid data
.3906db		2b		pld		                PLD
.3906dc		ab		plb		                PLB
.3906dd		7a		ply		                PLY
.3906de		fa		plx		                PLX
.3906df		6b		rtl		                RTL
.3906e0		22 1c 10 00	jsl $00101c	IPRINT          JSL PUTS
.3906e4		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.3906e8		6b		rtl		                RTL
.3906e9		48		pha		IPUTS           PHA
.3906ea		08		php		                PHP
.3906eb		e2 20		sep #$20	                SEP #$20        ; set A short
.3906ed		c2 10		rep #$10	                REP #$10        ; set X long
.3906ef		bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.3906f2		f0 08		beq $3906fc	                BEQ iputs_done
.3906f4		22 18 10 00	jsl $001018	iputs2          JSL PUTC
.3906f8		e8		inx		iputs3          INX
.3906f9		4c ef 06	jmp $3906ef	                JMP iputs1
.3906fc		e8		inx		iputs_done      INX
.3906fd		28		plp		                PLP
.3906fe		68		pla		                PLA
.3906ff		6b		rtl		                RTL
.390700						IPUTC
.390700		da		phx		                PHX
.390701		5a		phy		                PHY
.390702		0b		phd		                PHD
.390703		8b		phb		                PHB
.390704		08		php		                PHP                 ; stash the flags (we'll be changing M)
.390705		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.390708		2b		pld		                PLD
.390709		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.39070c		ab		plb		                PLB
.39070d		ab		plb		                PLB
.39070e		e2 20		sep #$20	                SEP #$20        ; set A short
.390710		c2 10		rep #$10	                REP #$10        ; set X long
.390712		48		pha		                PHA                 ; Save the character to print
.390713		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.390717		f0 1a		beq $390733	                BEQ putc_ansi       ; If it's 0: print to the screen
.390719		c9 04		cmp #$04	                CMP #CHAN_EVID      ; Check to see if it's the second video port
.39071b		f0 16		beq $390733	                BEQ putc_ansi       ; Yes: handle printing to the second video port
.39071d		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39071f		f0 07		beq $390728	                BEQ putc_uart       ; Yes: handle printing to the UART
.390721		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390723		f0 03		beq $390728	                BEQ putc_uart       ; Yes: handle printing to the UART
.390725		68		pla		                PLA                 ; Otherwise, just exit
.390726		80 10		bra $390738	                BRA done
.390728		22 36 53 39	jsl $395336	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.39072c		68		pla		                PLA                 ; Recover the character to send
.39072d		22 ed 53 39	jsl $3953ed	                JSL UART_PUTC       ; Send the character
.390731		80 05		bra $390738	                BRA done
.390733		68		pla		putc_ansi       PLA                 ; Recover the character to send
.390734		22 c7 68 39	jsl $3968c7	                JSL ANSI_PUTC       ; Print to the current selected ANSI screen
.390738		28		plp		done            PLP
.390739		ab		plb		                PLB
.39073a		2b		pld		                PLD
.39073b		7a		ply		                PLY
.39073c		fa		plx		                PLX
.39073d		6b		rtl		                RTL
.39073e		da		phx		SCRSHIFTLL      PHX
.39073f		5a		phy		                PHY
.390740		48		pha		                PHA
.390741		0b		phd		                PHD
.390742		08		php		                PHP
.390743		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.390746		2b		pld		                PLD
.390747		c2 30		rep #$30	                REP #$30        ; set A&X long
.390749		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.39074b		a8		tay		                TAY                 ; Set it as the destination
.39074c		aa		tax		                TAX
.39074d		e8		inx		                INX                 ; And set the next cell as the source
.39074e		18		clc		                CLC                 ; Calculate the length of the block to move
.39074f		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.390751		e5 1a		sbc $1a		                SBC CURSORX
.390753		54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.390756		28		plp		                PLP
.390757		2b		pld		                PLD
.390758		68		pla		                PLA
.390759		7a		ply		                PLY
.39075a		fa		plx		                PLX
.39075b		6b		rtl		                RTL
.39075c		da		phx		SCRSHIFTLR      PHX
.39075d		48		pha		                PHA
.39075e		0b		phd		                PHD
.39075f		08		php		                PHP
.390760		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.390763		2b		pld		                PLD
.390764		c2 30		rep #$30	                REP #$30        ; set A&X long
.390766		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.390768		1a		inc a		                INC A
.390769		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.39076b		b0 1b		bcs $390788	                BGE done            ; Yes: just skip the whole thing
.39076d		38		sec		                SEC                 ; Calculate the length of the block to move
.39076e		a5 0f		lda $0f		                LDA COLS_VISIBLE
.390770		e5 1a		sbc $1a		                SBC CURSORX
.390772		1a		inc a		                INC A
.390773		18		clc		                CLC
.390774		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.390776		3a		dec a		                DEC A
.390777		a8		tay		                TAY                 ; Make it the destination
.390778		3a		dec a		                DEC A               ; Move to the previous column
.390779		aa		tax		                TAX                 ; Make it the source
.39077a		38		sec		                SEC                 ; Calculate the length of the block to move
.39077b		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.39077d		e5 1a		sbc $1a		                SBC CURSORX
.39077f		44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.390782		e2 20		sep #$20	                SEP #$20        ; set A short
.390784		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.390786		87 17		sta [$17]	                STA [CURSORPOS]
.390788		28		plp		done            PLP
.390789		2b		pld		                PLD
.39078a		68		pla		                PLA
.39078b		fa		plx		                PLX
.39078c		6b		rtl		                RTL
.39078d						IPUTB
.39078d		6b		rtl		                RTL
.39078e						IPRINTCR
.39078e		da		phx		                PHX
.39078f		5a		phy		                PHY
.390790		8b		phb		                PHB
.390791		0b		phd		                PHD
.390792		08		php		                PHP
.390793		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.390796		ab		plb		                PLB
.390797		ab		plb		                PLB
.390798		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.39079b		2b		pld		                PLD
.39079c		e2 20		sep #$20	                SEP #$20        ; set A short
.39079e		c2 10		rep #$10	                REP #$10        ; set X long
.3907a0		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.3907a4		f0 1c		beq $3907c2	                BEQ scr_printcr
.3907a6		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907a8		f0 06		beq $3907b0	                BEQ uart_printcr    ; Yes: handle printing to the UART
.3907aa		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907ac		f0 02		beq $3907b0	                BEQ uart_printcr    ; Yes: handle printing to the UART
.3907ae		80 1c		bra $3907cc	                BRA done
.3907b0		22 36 53 39	jsl $395336	uart_printcr    JSL UART_SELECT
.3907b4		a9 0d		lda #$0d	                LDA #CHAR_CR
.3907b6		22 18 10 00	jsl $001018	                JSL PUTC
.3907ba		a9 0a		lda #$0a	                LDA #CHAR_LF
.3907bc		22 18 10 00	jsl $001018	                JSL PUTC
.3907c0		80 0a		bra $3907cc	                BRA done
.3907c2		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.3907c5		a4 1c		ldy $1c		                LDY CURSORY
.3907c7		c8		iny		                INY
.3907c8		22 84 10 00	jsl $001084	                JSL LOCATE
.3907cc		28		plp		done            PLP
.3907cd		2b		pld		                PLD
.3907ce		ab		plb		                PLB
.3907cf		7a		ply		                PLY
.3907d0		fa		plx		                PLX
.3907d1		6b		rtl		                RTL
.3907d2		da		phx		ICSRHOME        PHX
.3907d3		5a		phy		                PHY
.3907d4		08		php		                PHP
.3907d5		a2 00 00	ldx #$0000	                LDX #0
.3907d8		a0 00 00	ldy #$0000	                LDY #0
.3907db		22 84 10 00	jsl $001084	                JSL LOCATE
.3907df		28		plp		                PLP
.3907e0		7a		ply		                PLY
.3907e1		fa		plx		                PLX
.3907e2		6b		rtl		                RTL
.3907e3		da		phx		ICSRRIGHT       PHX
.3907e4		5a		phy		                PHY
.3907e5		48		pha		                PHA
.3907e6		0b		phd		                PHD
.3907e7		08		php		                PHP
.3907e8		22 7f 6d 39	jsl $396d7f	                JSL ANSI_CSRRIGHT
.3907ec		28		plp		                PLP
.3907ed		2b		pld		                PLD
.3907ee		68		pla		                PLA
.3907ef		7a		ply		                PLY
.3907f0		fa		plx		                PLX
.3907f1		6b		rtl		                RTL
.3907f2						ICSRLEFT
.3907f2		da		phx		                PHX
.3907f3		5a		phy		                PHY
.3907f4		48		pha		                PHA
.3907f5		0b		phd		                PHD
.3907f6		08		php		                PHP
.3907f7		22 aa 6d 39	jsl $396daa	                JSL ANSI_CSRLEFT
.3907fb		28		plp		                PLP
.3907fc		2b		pld		                PLD
.3907fd		68		pla		                PLA
.3907fe		7a		ply		                PLY
.3907ff		fa		plx		                PLX
.390800		6b		rtl		                RTL
.390801						ICSRUP
.390801		da		phx		                PHX
.390802		5a		phy		                PHY
.390803		48		pha		                PHA
.390804		0b		phd		                PHD
.390805		08		php		                PHP
.390806		22 c8 6d 39	jsl $396dc8	                JSL ANSI_CSRUP
.39080a		28		plp		                PLP
.39080b		2b		pld		                PLD
.39080c		68		pla		                PLA
.39080d		7a		ply		                PLY
.39080e		fa		plx		                PLX
.39080f		6b		rtl		                RTL
.390810		da		phx		ICSRDOWN        PHX
.390811		5a		phy		                PHY
.390812		0b		phd		                PHD
.390813		22 e6 6d 39	jsl $396de6	                JSL ANSI_CSRDOWN
.390817		2b		pld		                PLD
.390818		7a		ply		                PLY
.390819		fa		plx		                PLX
.39081a		6b		rtl		                RTL
.39081b		48		pha		ILOCATE         PHA
.39081c		0b		phd		                PHD
.39081d		08		php		                PHP
.39081e		22 09 6e 39	jsl $396e09	                JSL ANSI_LOCATE
.390822		28		plp		ilocate_done    PLP
.390823		2b		pld		                PLD
.390824		68		pla		                PLA
.390825		6b		rtl		                RTL
.390826						ISCROLLUP
.390826		48		pha		                PHA
.390827		da		phx		                PHX
.390828		5a		phy		                PHY
.390829		8b		phb		                PHB
.39082a		0b		phd		                PHD
.39082b		08		php		                PHP
.39082c		22 6d 6e 39	jsl $396e6d	                JSL ANSI_SCROLLUP
.390830		28		plp		                PLP
.390831		2b		pld		                PLD
.390832		ab		plb		                PLB
.390833		7a		ply		                PLY
.390834		fa		plx		                PLX
.390835		68		pla		                PLA
.390836		6b		rtl		                RTL
.390837		08		php		IPRINTH         PHP
.390838		48		pha		                PHA
.390839						iprinth1
.390839		e2 20		sep #$20	                SEP #$20        ; set A short
.39083b		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.39083e		4a		lsr a		                LSR
.39083f		4a		lsr a		                LSR
.390840		4a		lsr a		                LSR
.390841		4a		lsr a		                LSR
.390842		22 91 08 39	jsl $390891	                JSL iprint_digit
.390846		bd 00 00	lda $0000,x	                LDA #0,b,x
.390849		22 91 08 39	jsl $390891	                JSL iprint_digit
.39084d		ca		dex		                DEX
.39084e		88		dey		                DEY
.39084f		d0 e8		bne $390839	                BNE iprinth1
.390851		68		pla		                PLA
.390852		28		plp		                PLP
.390853		6b		rtl		                RTL
.390854						IPRINTAH
.390854		48		pha		                PHA
.390855		08		php		                PHP
.390856		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.39085a		08		php		                PHP                   ; Get the processor status into A
.39085b		e2 20		sep #$20	                SEP #$20        ; set A short
.39085d		c2 10		rep #$10	                REP #$10        ; set X long
.39085f		68		pla		                PLA
.390860		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390862		c9 20		cmp #$20	                CMP #%00100000
.390864		f0 14		beq $39087a	                BEQ eight_bit
.390866		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.39086a		4a		lsr a		                LSR A
.39086b		4a		lsr a		                LSR A
.39086c		4a		lsr a		                LSR A
.39086d		4a		lsr a		                LSR A
.39086e		22 91 08 39	jsl $390891	                JSL iprint_digit      ; And print it
.390872		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.390876		22 91 08 39	jsl $390891	                JSL iprint_digit      ; And print it
.39087a		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.39087e		4a		lsr a		                LSR A
.39087f		4a		lsr a		                LSR A
.390880		4a		lsr a		                LSR A
.390881		4a		lsr a		                LSR A
.390882		22 91 08 39	jsl $390891	                JSL iprint_digit      ; And print it
.390886		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.39088a		22 91 08 39	jsl $390891	                JSL iprint_digit      ; And print it
.39088e		28		plp		                PLP
.39088f		68		pla		                PLA
.390890		6b		rtl		                RTL
.390891		da		phx		iprint_digit    PHX
.390892		c2 20		rep #$20	                REP #$20        ; set A long
.390894		29 0f 00	and #$000f	                AND #$0F
.390897		aa		tax		                TAX
.390898		bf a5 8c 39	lda $398ca5,x	                LDA hex_digits,X
.39089c		22 00 07 39	jsl $390700	                JSL IPUTC       ; Print the digit
.3908a0		fa		plx		                PLX
.3908a1		6b		rtl		                RTL
.3908a2		48		pha		ICLRSCREEN	    PHA
.3908a3		da		phx		                PHX
.3908a4		08		php		                PHP
.3908a5		22 02 6f 39	jsl $396f02	                JSL ANSI_CLRSCREEN
.3908a9		28		plp		                PLP
.3908aa		fa		plx		                PLX
.3908ab		68		pla		                PLA
.3908ac		6b		rtl		                RTL
.3908ad						COPYBYTES42
.3908ad		08		php		                PHP
.3908ae		0b		phd		                PHD
.3908af		f4 00 00	pea #$0000	                PEA #TMPPTR1         ; set DP to page 0
.3908b2		2b		pld		                PLD
.3908b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3908b5		c2 10		rep #$10	                REP #$10        ; set X long
.3908b7		a0 00 00	ldy #$0000	                LDY #0
.3908ba		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.3908bc		97 04		sta [$04],y	                STA [TMPPTR2],Y
.3908be		c8		iny		                INY
.3908bf		c0 2a 00	cpy #$002a	                CPY #42
.3908c2		d0 f6		bne $3908ba	                BNE copy_loop
.3908c4		2b		pld		                PLD
.3908c5		28		plp		                PLP
.3908c6		60		rts		                RTS
.3908c7						ICOLORFLAG
.3908c7		48		pha		                PHA
.3908c8		da		phx		                PHX
.3908c9		5a		phy		                PHY
.3908ca		08		php		                PHP
.3908cb		8b		phb		                PHB
.3908cc		0b		phd		                PHD
.3908cd		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.3908d0		2b		pld		                PLD
.3908d1		c2 30		rep #$30	                REP #$30        ; set A&X long
.3908d3		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.3908d6		85 04		sta $04		                STA TMPPTR2
.3908d8		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.3908db		85 06		sta $06		                STA TMPPTR2+2
.3908dd		a9 02 89	lda #$8902	                LDA #<>greet_clr_line1
.3908e0		85 00		sta $00		                STA TMPPTR1
.3908e2		a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.3908e5		85 02		sta $02		                STA TMPPTR1+2
.3908e7		20 ad 08	jsr $3908ad	                JSR COPYBYTES42
.3908ea		18		clc		                CLC
.3908eb		a5 04		lda $04		                LDA TMPPTR2
.3908ed		65 11		adc $11		                ADC COLS_PER_LINE
.3908ef		85 04		sta $04		                STA TMPPTR2
.3908f1		a9 2c 89	lda #$892c	                LDA #<>greet_clr_line2
.3908f4		85 00		sta $00		                STA TMPPTR1
.3908f6		a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.3908f9		85 02		sta $02		                STA TMPPTR1+2
.3908fb		20 ad 08	jsr $3908ad	                JSR COPYBYTES42
.3908fe		18		clc		                CLC
.3908ff		a5 04		lda $04		                LDA TMPPTR2
.390901		65 11		adc $11		                ADC COLS_PER_LINE
.390903		85 04		sta $04		                STA TMPPTR2
.390905		a9 56 89	lda #$8956	                LDA #<>greet_clr_line3
.390908		85 00		sta $00		                STA TMPPTR1
.39090a		a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.39090d		85 02		sta $02		                STA TMPPTR1+2
.39090f		20 ad 08	jsr $3908ad	                JSR COPYBYTES42
.390912		18		clc		                CLC
.390913		a5 04		lda $04		                LDA TMPPTR2
.390915		65 11		adc $11		                ADC COLS_PER_LINE
.390917		85 04		sta $04		                STA TMPPTR2
.390919		a9 80 89	lda #$8980	                LDA #<>greet_clr_line4
.39091c		85 00		sta $00		                STA TMPPTR1
.39091e		a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390921		85 02		sta $02		                STA TMPPTR1+2
.390923		20 ad 08	jsr $3908ad	                JSR COPYBYTES42
.390926		18		clc		                CLC
.390927		a5 04		lda $04		                LDA TMPPTR2
.390929		65 11		adc $11		                ADC COLS_PER_LINE
.39092b		85 04		sta $04		                STA TMPPTR2
.39092d		a9 aa 89	lda #$89aa	                LDA #<>greet_clr_line5
.390930		85 00		sta $00		                STA TMPPTR1
.390932		a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390935		85 02		sta $02		                STA TMPPTR1+2
.390937		20 ad 08	jsr $3908ad	                JSR COPYBYTES42
.39093a		2b		pld		                PLD
.39093b		ab		plb		                PLB
.39093c		28		plp		                PLP
.39093d		7a		ply		                PLY
.39093e		fa		plx		                PLX
.39093f		68		pla		                PLA
.390940		6b		rtl		                RTL
.390941		0b		phd		IINITCHLUT		PHD
.390942		08		php		                PHP
.390943		48		pha		                PHA
.390944		da		phx		                PHX
.390945		22 cd 66 39	jsl $3966cd	                JSL ANSI_INIT_LUTS
.390949		fa		plx		                PLX
.39094a		68		pla		                PLA
.39094b		28		plp		                PLP
.39094c		2b		pld		                PLD
.39094d		6b		rtl		                RTL
.39094e						IINITGAMMATABLE
.39094e		e2 20		sep #$20	                SEP #$20        ; set A short
.390950		c2 10		rep #$10	                REP #$10        ; set X long
.390952		a2 00 00	ldx #$0000	                ldx #$0000
.390955		bf 00 91 39	lda $399100,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390959		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.39095d		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390961		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390965		e8		inx		                inx
.390966		e0 00 01	cpx #$0100	                cpx #$0100
.390969		d0 ea		bne $390955	                bne initgammaloop
.39096b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39096d		6b		rtl		                RTL
.39096e		48		pha		IINITALLLUT     PHA
.39096f		da		phx		                PHX
.390970		a2 00 00	ldx #$0000	                LDX #$0000
.390973		e2 20		sep #$20	                SEP #$20        ; set A short
.390975		a9 00		lda #$00	                LDA #$00
.390977		85 0a		sta $0a		                STA $0A     ; Temp Location
.390979						iinit_lut_loop
.390979		86 02		stx $02		                STX $02
.39097b		a6 0a		ldx $0a		                LDX $0A
.39097d		bf 00 90 39	lda $399000,x	                LDA GAMMA_2_2_Tbl, x
.390981		49 55		eor #$55	                EOR  #$55
.390983		a6 02		ldx $02		                LDX $02
.390985		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390989		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.39098d		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390991		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390995		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390999		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.39099d		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.3909a1		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.3909a5		e8		inx		                inx
.3909a6		86 02		stx $02		                STX $02
.3909a8		a6 0a		ldx $0a		                LDX $0A
.3909aa		bf 00 92 39	lda $399200,x	                LDA RANDOM_LUT_Tbl, x
.3909ae		a6 02		ldx $02		                LDX $02
.3909b0		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.3909b4		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.3909b8		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.3909bc		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.3909c0		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.3909c4		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.3909c8		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.3909cc		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.3909d0		e8		inx		                inx
.3909d1		86 02		stx $02		                STX $02
.3909d3		a6 0a		ldx $0a		                LDX $0A
.3909d5		bf 00 91 39	lda $399100,x	                LDA GAMMA_1_8_Tbl, x
.3909d9		49 aa		eor #$aa	                EOR  #$AA
.3909db		a6 02		ldx $02		                LDX $02
.3909dd		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.3909e1		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.3909e5		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.3909e9		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.3909ed		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.3909f1		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.3909f5		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.3909f9		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.3909fd		e8		inx		                inx
.3909fe		a9 ff		lda #$ff	                LDA #$FF
.390a00		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a04		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a08		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a0c		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a10		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a14		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a18		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a1c		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a20		e6 0a		inc $0a		                inc $0A
.390a22		e8		inx		                inx
.390a23		e0 00 04	cpx #$0400	                cpx #$0400
.390a26		f0 03		beq $390a2b	                beq iinit_lut_exit
.390a28		82 4e ff	brl $390979	                brl iinit_lut_loop
.390a2b						iinit_lut_exit
.390a2b		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a2d		fa		plx		                PLX
.390a2e		68		pla		                PLA
.390a2f		6b		rtl		                RTL
.390a30						INITVKYTXTMODE_BYPASS_DPSW
.390a30		48		pha		                PHA
.390a31		08		php		                PHP
.390a32		80 24		bra $390a58	                BRA WeNeed640480Here
.390a34						IINITVKYTXTMODE
.390a34		48		pha		                PHA
.390a35		08		php		                PHP
.390a36		e2 20		sep #$20	                SEP #$20        ; set A short
.390a38		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.390a3c		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.390a3e		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.390a40		f0 16		beq $390a58	                BEQ WeNeed640480Here
.390a42		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390a46		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.390a48		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.390a4a		f0 33		beq $390a7f	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.390a4c		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.390a50		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.390a52		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390a56		80 27		bra $390a7f	                BRA INITVICKYMODEHIRES
.390a58						WeNeed640480Here:
.390a58		e2 20		sep #$20	                SEP #$20        ; set A short
.390a5a		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390a5e		29 01		and #$01	                AND #$01
.390a60		c9 01		cmp #$01	                CMP #$01
.390a62		d0 15		bne $390a79	                BNE INITVICKYMODE
.390a64		a9 00		lda #$00	                LDA #$00
.390a66		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390a6a		ea		nop		                NOP
.390a6b		ea		nop		                NOP
.390a6c		ea		nop		                NOP
.390a6d		ea		nop		                NOP
.390a6e		ea		nop		                NOP
.390a6f		a9 01		lda #$01	                LDA #$01
.390a71		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390a75		ea		nop		                NOP
.390a76		ea		nop		                NOP
.390a77		ea		nop		                NOP
.390a78		ea		nop		                NOP
.390a79						INITVICKYMODE
.390a79		a9 00		lda #$00	                LDA #$00
.390a7b		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.390a7f						INITVICKYMODEHIRES
.390a7f		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390a81		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390a85		e2 20		sep #$20	                SEP #$20        ; set A short
.390a87		a9 00		lda #$00	                LDA #$00
.390a89		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390a8d		a9 54		lda #$54	                LDA #$54
.390a8f		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390a93		a9 54		lda #$54	                LDA #$54
.390a95		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390a99		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390a9b		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390a9f		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390aa1		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390aa5		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390aa9		c2 30		rep #$30	                REP #$30        ; set A&X long
.390aab		22 2c 11 00	jsl $00112c	                JSL SETSIZES                      ; Calculate the size of the text screen
.390aaf		28		plp		                PLP
.390ab0		68		pla		                PLA
.390ab1		6b		rtl		                RTL
.390ab2						ISETSIZES
.390ab2		22 9e 67 39	jsl $39679e	                JSL ANSI_SETSIZES
.390ab6		6b		rtl		                RTL
.390ab7						IINITVKYGRPMODE
.390ab7		48		pha		                PHA
.390ab8		e2 20		sep #$20	                SEP #$20        ; set A short
.390aba		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390abc		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390ac0		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390ac2		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390ac6		a9 c0		lda #$c0	                LDA #$C0
.390ac8		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390acc		a9 00		lda #$00	                LDA #$00
.390ace		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390ad2		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390ad4		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390ad8		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390ada		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390ade		a9 c0		lda #$c0	                LDA #$C0
.390ae0		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390ae4		a9 00		lda #$00	                LDA #$00
.390ae6		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390aea		c2 30		rep #$30	                REP #$30        ; set A&X long
.390aec		68		pla		                PLA
.390aed		6b		rtl		                RTL
.390aee						IINITTILEMODE
.390aee		6b		rtl		                RTL
.390aef						IREADVRAM
.390aef		08		php		                PHP
.390af0		e2 20		sep #$20	                SEP #$20        ; set A short
.390af2		bd 00 00	lda $000000,x	                LDA #0,B,X                      ; Request the byte
.390af5		c2 20		rep #$20	                REP #$20        ; set A long
.390af7		a2 64 00	ldx #$0064	                LDX #100
.390afa		af 02 09 af	lda $af0902	wait_loop       LDA @l VMEM2CPU_Fifo_Count_LO   ; Wait for the FIFO to have data
.390afe		89 00 80	bit #$8000	                BIT #$8000
.390b01		f0 06		beq $390b09	                BEQ read_byte                   ; If it has data, go read the byte
.390b03		ca		dex		                DEX                             ; Otherwise, decrement timeout counter
.390b04		d0 f4		bne $390afa	                BNE wait_loop                   ; Keep waiting so long as it's not 0
.390b06		28		plp		ret_failure     PLP                             ; Return failure
.390b07		18		clc		                CLC
.390b08		6b		rtl		                RTL
.390b09						read_byte
.390b09		e2 20		sep #$20	                SEP #$20        ; set A short
.390b0b		af 01 09 af	lda $af0901	                LDA @l VMEM2CPU_Data_Port       ; Get the byte from Vicky
.390b0f		28		plp		ret_success     PLP                             ; Return success
.390b10		18		clc		                CLC
.390b11		6b		rtl		                RTL
.390b12		6b		rtl		INOP            RTL
.390b13						IINITFONTSET
.390b13		48		pha		                PHA
.390b14		da		phx		                PHX
.390b15		5a		phy		                PHY
.390b16		8b		phb		                PHB
.390b17		08		php		                PHP
.390b18		c2 30		rep #$30	                REP #$30        ; set A&X long
.390b1a		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.390b1d		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.390b20		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.390b23		54 af 3f	mvn $3f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.390b26		28		plp		                PLP
.390b27		ab		plb		                PLB
.390b28		7a		ply		                PLY
.390b29		fa		plx		                PLX
.390b2a		68		pla		                PLA
.390b2b		6b		rtl		                RTL
.390b2c						INITMOUSEPOINTER
.390b2c		e2 20		sep #$20	                SEP #$20        ; set A short
.390b2e		c2 10		rep #$10	                REP #$10        ; set X long
.390b30		a2 00 00	ldx #$0000	                LDX #$0000
.390b33						FILL_MOUSE_MARKER
.390b33		bf 00 93 39	lda $399300,x	                LDA @lMOUSE_POINTER_PTR,X
.390b37		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390b3b		e8		inx		                INX
.390b3c		e0 00 01	cpx #$0100	                CPX #$0100
.390b3f		d0 f2		bne $390b33	                BNE FILL_MOUSE_MARKER
.390b41		ea		nop		                nop
.390b42		a9 01		lda #$01	                LDA #$01
.390b44		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390b48		c2 30		rep #$30	                REP #$30        ; set A&X long
.390b4a		6b		rtl		                RTL
.390b4b						IINITCURSOR
.390b4b		e2 20		sep #$20	                SEP #$20        ; set A short
.390b4d		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390b4f		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390b53		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390b55		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390b59		c2 30		rep #$30	                REP #$30        ; set A&X long
.390b5b		a9 00 00	lda #$0000	                LDA #$0000;
.390b5e		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390b62		a9 06 00	lda #$0006	                LDA #$0006;
.390b65		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390b69		6b		rtl		                RTL
.390b6a		0b		phd		IINITSUPERIO	PHD
.390b6b		08		php		                PHP
.390b6c		48		pha		                PHA
.390b6d		e2 20		sep #$20	                SEP #$20        ; set A short
.390b6f		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390b71		8f 23 11 af	sta $af1123	                STA GP10_REG
.390b75		af 23 11 af	lda $af1123	                LDA GP10_REG
.390b79		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390b7b		8f 24 11 af	sta $af1124	                STA GP11_REG
.390b7f		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390b81		8f 25 11 af	sta $af1125	                STA GP12_REG
.390b85		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390b87		8f 26 11 af	sta $af1126	                STA GP13_REG
.390b8b		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390b8d		8f 27 11 af	sta $af1127	                STA GP14_REG
.390b91		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390b93		8f 28 11 af	sta $af1128	                STA GP15_REG
.390b97		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390b99		8f 29 11 af	sta $af1129	                STA GP16_REG
.390b9d		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390b9f		8f 2a 11 af	sta $af112a	                STA GP17_REG
.390ba3		a9 00		lda #$00	                LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390ba5		8f 2b 11 af	sta $af112b	                STA GP20_REG
.390ba9		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390bab		8f 2f 11 af	sta $af112f	                STA GP24_REG
.390baf		a9 05		lda #$05	                LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390bb1		8f 30 11 af	sta $af1130	                STA GP25_REG
.390bb5		a9 84		lda #$84	                LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390bb7		8f 31 11 af	sta $af1131	                STA GP26_REG
.390bbb		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390bbd		8f 33 11 af	sta $af1133	                STA GP30_REG
.390bc1		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390bc3		8f 34 11 af	sta $af1134	                STA GP31_REG
.390bc7		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390bc9		8f 35 11 af	sta $af1135	                STA GP32_REG
.390bcd		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390bcf		8f 36 11 af	sta $af1136	                STA GP33_REG
.390bd3		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390bd5		8f 37 11 af	sta $af1137	                STA GP34_REG
.390bd9		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390bdb		8f 38 11 af	sta $af1138	                STA GP35_REG
.390bdf		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390be1		8f 39 11 af	sta $af1139	                STA GP36_REG
.390be5		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390be7		8f 3a 11 af	sta $af113a	                STA GP37_REG
.390beb		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390bed		8f 3d 11 af	sta $af113d	                STA GP42_REG
.390bf1		a9 01		lda #$01	                LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390bf3		8f 3e 11 af	sta $af113e	                STA GP43_REG
.390bf7		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390bf9		8f 3f 11 af	sta $af113f	                STA GP50_REG
.390bfd		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390bff		8f 40 11 af	sta $af1140	                STA GP51_REG
.390c03		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390c05		8f 41 11 af	sta $af1141	                STA GP52_REG
.390c09		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390c0b		8f 42 11 af	sta $af1142	                STA GP53_REG
.390c0f		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390c11		8f 43 11 af	sta $af1143	                STA GP54_REG
.390c15		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390c17		8f 44 11 af	sta $af1144	                STA GP55_REG
.390c1b		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390c1d		8f 45 11 af	sta $af1145	                STA GP56_REG
.390c21		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390c23		8f 46 11 af	sta $af1146	                STA GP57_REG
.390c27		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.390c29		8f 47 11 af	sta $af1147	                STA GP60_REG
.390c2d		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.390c2f		8f 48 11 af	sta $af1148	                STA GP61_REG
.390c33		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390c35		8f 4b 11 af	sta $af114b	                STA GP1_REG
.390c39		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390c3b		8f 4c 11 af	sta $af114c	                STA GP2_REG
.390c3f		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390c41		8f 4d 11 af	sta $af114d	                STA GP3_REG
.390c45		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390c47		8f 4e 11 af	sta $af114e	                STA GP4_REG
.390c4b		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390c4d		8f 4f 11 af	sta $af114f	                STA GP5_REG
.390c51		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390c53		8f 50 11 af	sta $af1150	                STA GP6_REG
.390c57		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390c59		8f 5d 11 af	sta $af115d	                STA LED1_REG
.390c5d		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390c5f		8f 5e 11 af	sta $af115e	                STA LED2_REG
.390c63		c2 20		rep #$20	                REP #$20        ; set A long
.390c65		68		pla		                PLA
.390c66		28		plp			              PLP
.390c67		2b		pld				            PLD
.390c68		6b		rtl		                RTL
.390c69		48		pha		INITRTC         PHA
.390c6a		08		php		                PHP
.390c6b		e2 20		sep #$20	                SEP #$20        ; set A short
.390c6d		a9 00		lda #$00	                LDA #0
.390c6f		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.390c73		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.390c77		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.390c7b		09 04		ora #$04	                ORA #%00000100
.390c7d		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.390c81		28		plp		                PLP
.390c82		68		pla		                PLA
.390c83		6b		rtl		                RTL
.390c84		48		pha		IINITCODEC      PHA
.390c85		08		php		                PHP
.390c86		c2 20		rep #$20	                REP #$20        ; set A long
.390c88		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.390c8b		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390c8f		a9 01 00	lda #$0001	                LDA #$0001
.390c92		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390c96		20 27 0d	jsr $390d27	                JSR CODEC_TRF_FINISHED
.390c99		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.390c9c		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390ca0		a9 01 00	lda #$0001	                LDA #$0001
.390ca3		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390ca7		20 27 0d	jsr $390d27	                JSR CODEC_TRF_FINISHED
.390caa		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.390cad		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390cb1		a9 01 00	lda #$0001	                LDA #$0001
.390cb4		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390cb8		20 27 0d	jsr $390d27	                JSR CODEC_TRF_FINISHED
.390cbb		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.390cbe		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390cc2		a9 01 00	lda #$0001	                LDA #$0001
.390cc5		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390cc9		20 27 0d	jsr $390d27	                JSR CODEC_TRF_FINISHED
.390ccc		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.390ccf		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390cd3		a9 01 00	lda #$0001	                LDA #$0001
.390cd6		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390cda		20 27 0d	jsr $390d27	                JSR CODEC_TRF_FINISHED
.390cdd		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.390ce0		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390ce4		a9 01 00	lda #$0001	                LDA #$0001
.390ce7		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390ceb		20 27 0d	jsr $390d27	                JSR CODEC_TRF_FINISHED
.390cee		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.390cf1		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390cf5		a9 01 00	lda #$0001	                LDA #$0001
.390cf8		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390cfc		20 27 0d	jsr $390d27	                JSR CODEC_TRF_FINISHED
.390cff		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.390d02		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390d06		a9 01 00	lda #$0001	                LDA #$0001
.390d09		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d0d		20 27 0d	jsr $390d27	                JSR CODEC_TRF_FINISHED
.390d10		28		plp		                PLP
.390d11		68		pla		                PLA
.390d12		6b		rtl		                RTL
.390d13						IRESETCODEC
.390d13		c2 20		rep #$20	                REP #$20        ; set A long
.390d15		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.390d18		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390d1c		a9 01 00	lda #$0001	                LDA #$0001
.390d1f		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d23		20 27 0d	jsr $390d27	                JSR CODEC_TRF_FINISHED
.390d26		6b		rtl		                RTL
.390d27						CODEC_TRF_FINISHED
.390d27		e2 20		sep #$20	                SEP #$20        ; set A short
.390d29		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.390d2d		29 01		and #$01	                AND #$01
.390d2f		c9 01		cmp #$01	                CMP #$01
.390d31		f0 f6		beq $390d29	                BEQ CODEC_LOOP
.390d33		c2 20		rep #$20	                REP #$20        ; set A long
.390d35		60		rts		                RTS
.390d36						IBM_FILL_SCREEN
.390d36		c2 30		rep #$30	                REP #$30        ; set A&X long
.390d38		a9 00 00	lda #$0000	                LDA #$0000
.390d3b		a2 00 00	ldx #$0000	                LDX #$0000
.390d3e						BM_FILL_SCREEN_LOOPY
.390d3e		a0 00 00	ldy #$0000	                LDY #$0000
.390d41		e2 20		sep #$20	                SEP #$20        ; set A short
.390d43						BM_FILL_SCREEN_LOOPX
.390d43		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.390d45		c8		iny		                INY
.390d46		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.390d48		d0 f9		bne $390d43	                BNE BM_FILL_SCREEN_LOOPX
.390d4a		20 55 0d	jsr $390d55	                JSR BM_FILL_COMPUTE_Y_DST
.390d4d		e8		inx		                INX
.390d4e		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.390d50		d0 ec		bne $390d3e	                BNE BM_FILL_SCREEN_LOOPY
.390d52		c2 30		rep #$30	                REP #$30        ; set A&X long
.390d54		6b		rtl		                RTL
.390d55						BM_FILL_COMPUTE_Y_DST
.390d55		c2 20		rep #$20	                REP #$20        ; set A long
.390d57		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.390d59		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390d5d		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.390d5f		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390d63		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.390d66		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390d6a		a9 00 00	lda #$0000	                LDA #$0000
.390d6d		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390d71		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390d75		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.390d77		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390d7b		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.390d7d		a9 00 00	lda #$0000	                LDA #$0000
.390d80		60		rts		                RTS
.390d81						IBMP_PARSER
.390d81		c2 30		rep #$30	                REP #$30        ; set A&X long
.390d83		a0 00 00	ldy #$0000	                LDY #$0000
.390d86		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.390d88		c9 42 4d	cmp #$4d42	                CMP #$4D42
.390d8b		f0 03		beq $390d90	                BEQ IBMP_PARSER_CONT
.390d8d		82 04 01	brl $390e94	                BRL BMP_PARSER_END_WITH_ERROR
.390d90						IBMP_PARSER_CONT
.390d90		a0 02 00	ldy #$0002	                LDY #$0002
.390d93		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.390d95		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390d99		a0 04 00	ldy #$0004	                LDY #$0004
.390d9c		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.390d9e		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390da2		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.390da5		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390da9		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390dad		18		clc		                CLC
.390dae		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390db2		85 50		sta $50		                STA BMP_FILE_SIZE
.390db4		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390db8		85 52		sta $52		                STA BMP_FILE_SIZE+2
.390dba		a0 12 00	ldy #$0012	                LDY #$0012
.390dbd		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390dbf		85 40		sta $40		                STA BMP_X_SIZE
.390dc1		a0 16 00	ldy #$0016	                LDY #$0016
.390dc4		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390dc6		85 42		sta $42		                STA BMP_Y_SIZE
.390dc8		a0 2e 00	ldy #$002e	                LDY #$002E
.390dcb		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390dcd		0a		asl a		                ASL A; Multiply by 2
.390dce		0a		asl a		                ASL A; Multiply by 2
.390dcf		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.390dd1		e0 00 00	cpx #$0000	                CPX #$0000
.390dd4		d0 05		bne $390ddb	                BNE BMP_LUT1_PICK
.390dd6		20 9c 0e	jsr $390e9c	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.390dd9		80 08		bra $390de3	                BRA DONE_TRANSFER_LUT;
.390ddb						  BMP_LUT1_PICK
.390ddb		e0 01 00	cpx #$0001	                CPX #$0001
.390dde		d0 03		bne $390de3	                BNE BMP_LUT2_PICK
.390de0		20 cc 0e	jsr $390ecc	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.390de3						  BMP_LUT2_PICK
.390de3						  DONE_TRANSFER_LUT
.390de3		a5 56		lda $56		                LDA BMP_POSITION_Y
.390de5		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.390de9		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.390deb		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.390def		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.390df3		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390df7		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.390dfb		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390dff		a5 54		lda $54		                LDA BMP_POSITION_X
.390e01		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.390e05		a9 00 00	lda #$0000	                LDA #$0000
.390e08		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390e0c		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.390e10		85 f0		sta $f0		                STA USER_TEMP
.390e12		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.390e16		85 f2		sta $f2		                STA USER_TEMP+2
.390e18		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.390e1a		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390e1e		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.390e20		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390e24		a5 f0		lda $f0		                LDA USER_TEMP
.390e26		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.390e2a		a5 f2		lda $f2		                LDA USER_TEMP+2
.390e2c		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.390e30		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.390e34		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.390e36		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.390e3a		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.390e3c		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.390e3e		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390e42		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.390e44		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390e48		a5 50		lda $50		                LDA BMP_FILE_SIZE
.390e4a		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390e4e		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.390e50		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390e54		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390e58		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.390e5a		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390e5e		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.390e60		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.390e62		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390e66		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.390e68		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390e6c		18		clc		                CLC
.390e6d		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.390e6f		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.390e72		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.390e75		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.390e79		a9 ff ff	lda #$ffff	                LDA #$FFFF
.390e7c		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.390e80		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390e84		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.390e86		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390e8a		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.390e8c		20 fc 0e	jsr $390efc	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.390e8f		a2 66 8b	ldx #$8b66	                LDX #<>bmp_parser_msg0
.390e92		80 03		bra $390e97	                BRA BMP_PARSER_END_NO_ERROR
.390e94						BMP_PARSER_END_WITH_ERROR
.390e94		a2 52 8b	ldx #$8b52	                LDX #<>bmp_parser_err0
.390e97						BMP_PARSER_END_NO_ERROR
.390e97		22 e0 06 39	jsl $3906e0	                JSL IPRINT       ; print the first line
.390e9b		6b		rtl		                RTL
.390e9c						BMP_PARSER_UPDATE_LUT0
.390e9c		38		sec		                SEC
.390e9d		a0 7a 00	ldy #$007a	                LDY #$007A
.390ea0		a2 00 00	ldx #$0000	                LDX #$0000
.390ea3		e2 20		sep #$20	                SEP #$20        ; set A short
.390ea5						BMP_PARSER_UPDATE_LOOP
.390ea5		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.390ea7		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.390eab		c8		iny		                INY
.390eac		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.390eae		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.390eb2		c8		iny		                INY
.390eb3		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.390eb5		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.390eb9		c8		iny		                INY
.390eba		a9 80		lda #$80	                LDA #$80
.390ebc		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.390ec0		c8		iny		                INY ; For the Alpha Value, nobody cares
.390ec1		e8		inx		                INX
.390ec2		e8		inx		                INX
.390ec3		e8		inx		                INX
.390ec4		e8		inx		                INX
.390ec5		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.390ec7		d0 dc		bne $390ea5	                BNE BMP_PARSER_UPDATE_LOOP
.390ec9		c2 20		rep #$20	                REP #$20        ; set A long
.390ecb		60		rts		                RTS
.390ecc						BMP_PARSER_UPDATE_LUT1
.390ecc		38		sec		                SEC
.390ecd		a0 36 00	ldy #$0036	                LDY #$0036
.390ed0		a2 00 00	ldx #$0000	                LDX #$0000
.390ed3		e2 20		sep #$20	                SEP #$20        ; set A short
.390ed5						PALETTE_LUT1_LOOP
.390ed5		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.390ed7		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.390edb		c8		iny		                INY
.390edc		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.390ede		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.390ee2		c8		iny		                INY
.390ee3		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.390ee5		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.390ee9		c8		iny		                INY
.390eea		a9 80		lda #$80	                LDA #$80
.390eec		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.390ef0		c8		iny		                INY ; For the Alpha Value, nobody cares
.390ef1		e8		inx		                INX
.390ef2		e8		inx		                INX
.390ef3		e8		inx		                INX
.390ef4		e8		inx		                INX
.390ef5		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.390ef7		d0 dc		bne $390ed5	                BNE PALETTE_LUT1_LOOP
.390ef9		c2 20		rep #$20	                REP #$20        ; set A long
.390efb		60		rts		                RTS
.390efc						BMP_PARSER_DMA_SHIT_OUT
.390efc		a2 00 00	ldx #$0000	                LDX #$0000
.390eff						BMP_PARSER_LOOPY
.390eff		a0 00 00	ldy #$0000	                LDY #$0000
.390f02		e2 20		sep #$20	                SEP #$20        ; set A short
.390f04						BMP_PARSER_LOOPX
.390f04		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.390f06		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.390f08		c8		iny		                INY
.390f09		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.390f0b		d0 f7		bne $390f04	                BNE BMP_PARSER_LOOPX
.390f0d		20 19 0f	jsr $390f19	                JSR BMP_PARSER_COMPUTE_Y_SRC
.390f10		20 34 0f	jsr $390f34	                JSR BMP_PARSER_COMPUTE_Y_DST
.390f13		e8		inx		                INX
.390f14		e4 42		cpx $42		                CPX BMP_Y_SIZE
.390f16		d0 e7		bne $390eff	                BNE BMP_PARSER_LOOPY
.390f18		60		rts		                RTS
.390f19						BMP_PARSER_COMPUTE_Y_SRC
.390f19		c2 20		rep #$20	                REP #$20        ; set A long
.390f1b		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.390f1d		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390f21		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.390f23		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390f27		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390f2b		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.390f2d		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390f31		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.390f33		60		rts		                RTS
.390f34						BMP_PARSER_COMPUTE_Y_DST
.390f34		c2 20		rep #$20	                REP #$20        ; set A long
.390f36		18		clc		                CLC
.390f37		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.390f39		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.390f3b		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.390f3d		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.390f3f		69 00 00	adc #$0000	                ADC #$0000
.390f42		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.390f44		60		rts		                RTS
.390f45		ea		nop		ILOOP           NOP
.390f46		ea		nop		                NOP
.390f47		ea		nop		                NOP
.390f48		ea		nop		                NOP
.390f49		ea		nop		                NOP
.390f4a		ea		nop		                NOP
.390f4b		ea		nop		                NOP
.390f4c		ea		nop		                NOP
.390f4d		ea		nop		                NOP
.390f4e		ea		nop		                NOP
.390f4f		6b		rtl		                RTL
.390f50		22 45 0f 39	jsl $390f45	ILOOP_1         JSL ILOOP
.390f54		22 45 0f 39	jsl $390f45	                JSL ILOOP
.390f58		22 45 0f 39	jsl $390f45	                JSL ILOOP
.390f5c		22 45 0f 39	jsl $390f45	                JSL ILOOP
.390f60		22 45 0f 39	jsl $390f45	                JSL ILOOP
.390f64		22 45 0f 39	jsl $390f45	                JSL ILOOP
.390f68		22 45 0f 39	jsl $390f45	                JSL ILOOP
.390f6c		22 45 0f 39	jsl $390f45	                JSL ILOOP
.390f70		22 45 0f 39	jsl $390f45	                JSL ILOOP
.390f74		22 45 0f 39	jsl $390f45	                JSL ILOOP
.390f78		6b		rtl		                RTL
.390f79		22 50 0f 39	jsl $390f50	ILOOP_1MS       JSL ILOOP_1
.390f7d		6b		rtl		                RTL
.390f7e		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.390f81		f0 07		beq $390f8a	                BEQ LOOP_MS_END
.390f83		22 79 0f 39	jsl $390f79	                JSL ILOOP_1MS
.390f87		ca		dex		                DEX
.390f88		80 f4		bra $390f7e	                BRA ILOOP_MS
.390f8a		6b		rtl		LOOP_MS_END     RTL
.390f8b						IDELAY
.390f8b		48		pha		                PHA
.390f8c		8b		phb		                PHB
.390f8d		08		php		                PHP
.390f8e		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.390f91		ab		plb		                PLB
.390f92		ab		plb		                PLB
.390f93		c2 30		rep #$30	                REP #$30        ; set A&X long
.390f95		da		phx		                PHX                         ; Save the delay amount
.390f96		5a		phy		                PHY
.390f97		a9 02 00	lda #$0002	                LDA #$02                    ; Set the handler for TIMER0 interrupts
.390f9a		a0 38 00	ldy #$0038	                LDY #`HANDLE_TIMER0
.390f9d		a2 28 19	ldx #$1928	                LDX #<>HANDLE_TIMER0
.390fa0		22 48 11 00	jsl $001148	                JSL SETHANDLER
.390fa4		7a		ply		                PLY                         ; Restore the delay amount
.390fa5		fa		plx		                PLX
.390fa6		e2 20		sep #$20	                SEP #$20        ; set A short
.390fa8		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.390faa		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.390fae		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.390fb2		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.390fb4		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.390fb8		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.390fba		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.390fbd		a9 00		lda #$00	                LDA #0
.390fbf		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.390fc3		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.390fc7		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.390fcb		c2 30		rep #$30	                REP #$30        ; set A&X long
.390fcd		8a		txa		                TXA
.390fce		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.390fd2		98		tya		                TYA
.390fd3		e2 20		sep #$20	                SEP #$20        ; set A short
.390fd5		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.390fd9		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.390fdb		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.390fdf		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.390fe1		cb		wai		loop            WAI                         ; Wait for an interrupt
.390fe2		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.390fe5		f0 fa		beq $390fe1	                BEQ loop                    ; Keep checking until it's set
.390fe7		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.390fe9		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.390fed		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.390fef		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.390ff2		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.390ff6		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.390ff8		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.390ffc		28		plp		                PLP
.390ffd		ab		plb		                PLB
.390ffe		68		pla		                PLA
.390fff		6b		rtl		                RTL
.391000						SHOW_CREDITS
.391000		48		pha		                PHA
.391001		da		phx		                PHX
.391002		5a		phy		                PHY
.391003		08		php		                PHP
.391004		e2 20		sep #$20	                SEP #$20        ; set A short
.391006		c2 10		rep #$10	                REP #$10        ; set X long
.391008		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.39100c		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.39100e		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391012		a2 00 00	ldx #$0000	                LDX #0
.391015		bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.391019		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.39101d		bf 00 18 3b	lda $3b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.391021		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.391025		e8		inx		                INX
.391026		e0 00 20	cpx #$2000	                CPX #128 * 64
.391029		d0 ea		bne $391015	                BNE credit_loop
.39102b		22 7a 06 39	jsl $39067a	                JSL IGETCHW                     ; Wait for a keypress
.39102f		22 a2 08 39	jsl $3908a2	                JSL ICLRSCREEN                  ; Then clear the screen and return
.391033		22 d2 07 39	jsl $3907d2	                JSL ICSRHOME                    ; Move cursor to the home position
.391037		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.39103b		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.39103d		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391041		28		plp		                PLP
.391042		7a		ply		                PLY
.391043		fa		plx		                PLX
.391044		68		pla		                PLA
.391045		6b		rtl		                RTL
.391046		00		brk #		ISCINIT         BRK ;
.391047		00		brk #		IIOINIT         BRK ;
.391048		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.391049		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.39104a		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.39104b		00		brk #		ICLOSE          BRK ; Close a channel
.39104c		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.39104d		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.39104e		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.39104f		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.391050		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.391051		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.391052		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.391053		00		brk #		IPRINTF         BRK ; Print a float value
.391054		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.391055		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.391056		00		brk #		IPUSHKEY        BRK ;
.391057		00		brk #		IPUSHKEYS       BRK ;
.391058		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.391059		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.39105a		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>39105b		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>391063		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>391073		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>39107b		12
>39107c		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>391084		15
>391085		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>39108b		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>391090		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Instruments.asm

>391096		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>39109e		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>3910ac		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>3910b4		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>3910c2		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>3910ca		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>3910d8		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>3910e0		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>3910ee		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>3910f6		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>391104		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>39110c		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>39111a		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>391122		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>391130		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>391138		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>391146		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>39114e		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>39115c		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>391164		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>391172		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>39117a		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>391188		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>391190		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>39119e		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>3911a6		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>3911b4		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>3911bc		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>3911ca		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>3911d2		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>3911e0		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>3911e8		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>3911f6		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>3911fe		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>39120c		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>391214		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>391222		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>39122a		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>391238		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>391240		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>39124e		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>391256		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>391264		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>39126c		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>39127a		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>391282		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>391290		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>391298		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>3912a6		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>3912ae		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>3912bc		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>3912c4		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>3912d2		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>3912da		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>3912e8		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>3912f0		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>3912fe		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>391306		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>391314		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>39131c		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>39132a		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>391332		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>391340		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>391348		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>391356		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>39135e		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>39136c		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>391374		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>391382		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>39138a		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>391398		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>3913a0		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>3913ae		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>3913b6		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>3913c4		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>3913cc		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>3913da		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>3913e2		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>3913f0		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>3913f8		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>391406		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>39140e		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>39141c		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>391424		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>391432		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>39143a		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>391448		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>391450		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>39145e		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>391466		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>391474		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>39147c		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>39148a		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>391492		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>3914a0		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>3914a8		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>3914b6		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>3914be		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>3914cc		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>3914d4		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>3914e2		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>3914ea		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>3914f8		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>391500		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>39150e		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>391516		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>391524		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>39152c		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>39153a		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>391542		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391550		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391558		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>391566		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>39156e		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>39157c		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>391584		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>391592		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>39159a		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>3915a8		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>3915b0		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>3915be		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>3915c6		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>3915d4		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>3915dc		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>3915ea		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>3915f2		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391600		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>391608		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>391616		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>39161e		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>39162c		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391634		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391642		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>39164a		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391658		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391660		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>39166e		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391676		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391684		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>39168c		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>39169a		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>3916a2		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>3916b0		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>3916b8		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>3916c6		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>3916ce		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>3916dc		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>3916e4		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>3916f2		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>3916fa		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391708		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391710		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>39171e		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391726		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391734		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>39173c		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>39174a		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391752		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391760		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391768		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391776		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>39177e		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>39178c		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391794		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>3917a2		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>3917aa		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>3917b8		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>3917c0		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>3917ce		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>3917d6		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>3917e4		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>3917ec		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>3917fa		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391802		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391810		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391818		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391826		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>39182e		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>39183c		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391844		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391852		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>39185a		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391868		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391870		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>39187e		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391886		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391894		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>39189c		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>3918aa		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>3918b2		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>3918c0		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>3918c8		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>3918d6		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>3918de		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>3918ec		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>3918f4		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391902		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>39190a		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391918		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391920		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>39192e		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391936		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391944		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>39194c		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>39195a		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391962		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391970		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>391978		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>391986		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>39198e		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>39199c		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>3919a4		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>3919b2		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>3919ba		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>3919c8		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>3919d0		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>3919de		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>3919e6		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>3919f4		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>3919fc		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>391a0a		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>391a12		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>391a20		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>391a28		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>391a36		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>391a3e		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>391a4c		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>391a54		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>391a62		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>391a6a		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>391a78		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>391a80		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>391a8e		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>391a96		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>391aa4		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>391aac		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>391aba		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>391ac2		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>391ad0		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>391ad8		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>391ae6		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>391aee		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>391afc		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>391b04		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>391b12		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>391b1a		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>391b28		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>391b30		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>391b3e		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>391b46		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>391b54		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>391b5c		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>391b6a		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>391b72		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>391b80		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>391b88		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>391b96		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>391b9e		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>391bac		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>391bb4		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>391bc2		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>391bca		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>391bd8		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>391be0		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>391bee		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>391bf6		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>391c04		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>391c0c		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>391c1a		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>391c22		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>391c30		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>391c38		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>391c46		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>391c4e		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>391c5c		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>391c64		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>391c72		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>391c7a		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>391c88		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>391c90		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>391c9e		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>391ca6		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>391cb4		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>391cbc		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>391cca		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>391cd2		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>391ce0		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>391ce8		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>391cf6		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>391cfe		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Drums.asm

>391d0c		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>391d14		00 87 fa 00
>391d18		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>391d20		00 88 98 03
>391d24		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>391d2c		00 88 98 03
>391d30		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>391d38		00 f9 69 00
>391d3c		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>391d44		80 e8 4a 00
>391d48		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>391d50		00 f6 9a 00
>391d54		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>391d5c		1b f2 34 00
>391d60		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>391d68		00 f7 8a 00
>391d6c		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>391d74		00 f6 47 00
>391d78		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>391d80		00 f9 69 00
>391d84		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>391d8c		00 f7 a9 00
>391d90		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>391d98		00 87 fa 00
>391d9c		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>391da4		00 f7 a9 00
>391da8		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391db0		00 f5 f5 00
>391db4		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>391dbc		06 b8 d8 03
>391dc0		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391dc8		00 f5 f5 00
>391dcc		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>391dd4		06 b8 d8 03
>391dd8		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391de0		00 f5 f5 00
>391de4		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>391dec		10 74 f8 03
>391df0		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391df8		00 f5 f5 00
>391dfc		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391e04		00 f5 f5 00
>391e08		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391e10		05 c5 d4 03
>391e14		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391e1c		00 f5 f5 00
>391e20		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>391e28		04 f9 44 03
>391e2c		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391e34		05 c5 d4 03
>391e38		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>391e40		04 f9 44 03
>391e44		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>391e4c		03 87 f7 03
>391e50		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391e58		05 c5 d4 03
>391e5c		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>391e64		00 f6 28 00
>391e68		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391e70		05 c5 d4 03
>391e74		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>391e7c		00 f5 f7 01
>391e80		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>391e88		04 f9 44 03
>391e8c		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>391e94		00 99 f9 00
>391e98		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>391ea0		00 a8 f7 00
>391ea4		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>391eac		00 99 f9 00
>391eb0		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>391eb8		00 a6 f6 00
>391ebc		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>391ec4		00 a6 f6 00
>391ec8		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>391ed0		00 f6 36 02
>391ed4		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>391edc		00 f6 36 02
>391ee0		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>391ee8		00 96 e8 01
>391eec		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>391ef4		00 96 e8 01
>391ef8		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>391f00		02 79 77 03
>391f04		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>391f0c		02 79 77 03
>391f10		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>391f18		00 a5 2b 02
>391f1c		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>391f24		00 93 3b 02
>391f28		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>391f30		01 89 3b 03
>391f34		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>391f3c		0a 53 2b 02
>391f40		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>391f48		00 f6 89 00
>391f4c		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>391f54		00 f6 9a 00
>391f58		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>391f60		00 f6 9a 00
>391f64		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>391f6c		00 87 4b 01
>391f70		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>391f78		00 78 67 01
>391f7c		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>391f84		02 f8 fc 00
>391f88		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>391f90		40 f5 f5 00
>391f94		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>391f9c		02 79 77 03
>391fa0		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>391fa8		40 f5 f5 00
>391fac		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>391fb4		40 f5 f5 00
>391fb8		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>391fc0		00 f9 69 00
>391fc4		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>391fcc		00 f9 69 00
>391fd0		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>391fd8		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>391fdc		0c 1d 39 00 18 1d 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>391fe4		24 1d 39 00 30 1d 39 00
>391fec		3c 1d 39 00 48 1d 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>391ff4		54 1d 39 00 60 1d 39 00
>391ffc		6c 1d 39 00 78 1d 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>392004		84 1d 39 00 90 1d 39 00
>39200c		9c 1d 39 00 a8 1d 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>392014		b4 1d 39 00 c0 1d 39 00
>39201c		cc 1d 39 00 d8 1d 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>392024		e4 1d 39 00 f0 1d 39 00
>39202c		fc 1d 39 00 08 1e 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>392034		14 1e 39 00 20 1e 39 00
>39203c		2c 1e 39 00 38 1e 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>392044		44 1e 39 00 50 1e 39 00
>39204c		5c 1e 39 00 68 1e 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>392054		74 1e 39 00 80 1e 39 00
>39205c		8c 1e 39 00 98 1e 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>392064		a4 1e 39 00 b0 1e 39 00
>39206c		bc 1e 39 00 c8 1e 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>392074		d4 1e 39 00 e0 1e 39 00
>39207c		ec 1e 39 00 f8 1e 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>392084		04 1f 39 00 10 1f 39 00
>39208c		1c 1f 39 00 28 1f 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>392094		34 1f 39 00 40 1f 39 00
>39209c		4c 1f 39 00 58 1f 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>3920a4		64 1f 39 00 70 1f 39 00
>3920ac		7c 1f 39 00 88 1f 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>3920b4		94 1f 39 00 a0 1f 39 00
>3920bc		ac 1f 39 00 b8 1f 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>3920c4		c4 1f 39 00 d0 1f 39 00

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments.asm

>3920cc		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>3920d4		00 b1 f5 01
>3920d8		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>3920e0		03 f1 f5 00
>3920e4		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>3920ec		03 c1 f5 00
>3920f0		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>3920f8		00 92 f5 01
>3920fc		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>392104		00 f1 f9 00
>392108		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>392110		00 f1 f5 00
>392114		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>39211c		02 81 f6 01
>392120		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>392128		00 c2 b9 01
>39212c		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>392134		05 b2 35 00
>392138		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>392140		1b f2 34 00
>392144		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>39214c		01 f5 74 00
>392150		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>392158		00 61 e3 00
>39215c		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>392164		00 a4 64 00
>392168		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>392170		07 b5 f5 00
>392174		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>39217c		00 f3 74 00
>392180		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>392188		00 c3 94 01
>39218c		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>392194		00 f4 0d 01
>392198		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>3921a0		00 f5 0b 01
>3921a4		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>3921ac		00 bf 07 00
>3921b0		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>3921b8		00 6d 08 01
>3921bc		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>3921c4		00 51 17 01
>3921c8		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>3921d0		00 51 17 01
>3921d4		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>3921dc		00 53 08 01
>3921e0		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>3921e8		00 53 06 01
>3921ec		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>3921f4		00 d2 f8 00
>3921f8		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>392200		00 e2 c7 01
>392204		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>39220c		00 f1 9c 00
>392210		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>392218		02 f2 c9 01
>39221c		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>392224		03 95 fb 00
>392228		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>392230		04 a1 59 00
>392234		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>39223c		03 91 fc 03
>392240		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>392248		02 b4 ec 00
>39224c		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>392254		00 93 f7 00
>392258		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>392260		04 c1 58 00
>392264		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>39226c		02 c3 6a 00
>392270		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>392278		00 62 87 00
>39227c		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>392284		00 f3 97 00
>392288		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>392290		00 b3 97 00
>392294		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>39229c		04 f3 cc 00
>3922a0		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>3922a8		00 93 aa 00
>3922ac		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>3922b4		00 78 08 01
>3922b8		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>3922c0		00 78 08 01
>3922c4		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>3922cc		00 54 27 01
>3922d0		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>3922d8		00 61 56 00
>3922dc		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>3922e4		00 75 16 01
>3922e8		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>3922f0		00 f5 f6 01
>3922f4		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>3922fc		80 f3 e3 00
>392300		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>392308		00 b5 f5 00
>39230c		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>392314		80 71 16 00
>392318		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>392320		00 30 55 01
>392324		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>39232c		00 62 36 01
>392330		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>392338		02 51 07 00
>39233c		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>392344		00 62 39 00
>392348		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>392350		00 66 27 00
>392354		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>39235c		00 73 46 00
>392360		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>392368		00 74 76 01
>39236c		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>392374		81 92 38 00
>392378		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>392380		02 71 19 00
>392384		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>39238c		01 81 09 00
>392390		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>392398		00 83 4b 02
>39239c		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>3923a4		05 71 59 00
>3923a8		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>3923b0		03 82 39 00
>3923b4		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>3923bc		82 84 17 00
>3923c0		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>3923c8		02 72 16 00
>3923cc		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>3923d4		00 7b 0a 00
>3923d8		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>3923e0		00 85 0c 01
>3923e4		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>3923ec		00 7b 0a 01
>3923f0		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>3923f8		00 79 18 01
>3923fc		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>392404		01 73 08 00
>392408		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>392410		04 77 0a 00
>392414		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>39241c		00 51 19 00
>392420		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>392428		01 74 09 00
>39242c		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>392434		01 63 28 00
>392438		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>392440		00 65 0a 00
>392444		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>39244c		00 67 29 00
>392450		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>392458		00 67 09 00
>39245c		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>392464		01 6a 28 00
>392468		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>392470		00 55 27 00
>392474		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>39247c		00 6f 08 00
>392480		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>392488		00 7a 07 00
>39248c		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>392494		06 a2 0d 00
>392498		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>3924a0		00 a3 5f 00
>3924a4		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>3924ac		00 42 27 00
>3924b0		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>3924b8		05 b2 49 00
>3924bc		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>3924c4		00 b2 79 01
>3924c8		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>3924d0		00 7a 1a 00
>3924d4		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>3924dc		00 82 28 01
>3924e0		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>3924e8		02 c3 5f 00
>3924ec		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>3924f4		86 c4 95 01
>3924f8		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>392500		00 44 15 00
>392504		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>39250c		00 d1 06 00
>392510		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>392518		00 82 37 00
>39251c		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>392524		00 41 35 00
>392528		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392530		02 32 f5 01
>392534		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>39253c		00 61 26 00
>392540		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>392548		84 3f 05 01
>39254c		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>392554		01 d1 f6 00
>392558		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392560		00 41 05 01
>392564		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>39256c		05 f3 e4 00
>392570		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392578		00 92 f5 01
>39257c		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>392584		04 f2 e4 01
>392588		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392590		00 45 25 00
>392594		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>39259c		01 a3 36 00
>3925a0		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>3925a8		01 98 05 01
>3925ac		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>3925b4		02 a3 f6 01
>3925b8		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>3925c0		00 f6 f8 00
>3925c4		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>3925cc		00 f3 f5 00
>3925d0		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>3925d8		00 94 e5 01
>3925dc		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>3925e4		00 84 44 00
>3925e8		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>3925f0		03 83 18 01
>3925f4		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>3925fc		01 78 08 01
>392600		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>392608		03 8e 08 01
>39260c		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>392614		09 f2 46 00
>392618		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392620		00 96 e8 01
>392624		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>39262c		00 f6 f6 01
>392630		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392638		00 f6 9a 00
>39263c		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392644		00 c6 45 00
>392648		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392650		00 f4 b4 00
>392654		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>39265c		00 d5 25 00
>392660		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392668		0e 21 2d 00
>39266c		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392674		00 55 87 02
>392678		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392680		08 98 87 01
>392684		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>39268c		04 17 04 03
>392690		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>392698		05 77 f9 02
>39269c		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>3926a4		02 f4 08 00
>3926a8		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>3926b0		00 36 05 01
>3926b4		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>3926bc		05 32 55 03
>3926c0		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>3926c8		00 f3 df 00
>3926cc		cc 20 39 00 d8 20 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>3926d4		e4 20 39 00 f0 20 39 00 fc 20 39 00 08 21 39 00
>3926e4		14 21 39 00 20 21 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>3926ec		2c 21 39 00 38 21 39 00 44 21 39 00 50 21 39 00
>3926fc		5c 21 39 00 68 21 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392704		74 21 39 00 80 21 39 00 8c 21 39 00 98 21 39 00
>392714		a4 21 39 00 b0 21 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>39271c		bc 21 39 00 c8 21 39 00 d4 21 39 00 e0 21 39 00
>39272c		ec 21 39 00 f8 21 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392734		04 22 39 00 10 22 39 00 1c 22 39 00 28 22 39 00
>392744		34 22 39 00 40 22 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>39274c		4c 22 39 00 58 22 39 00 64 22 39 00 70 22 39 00
>39275c		7c 22 39 00 88 22 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392764		94 22 39 00 a0 22 39 00 ac 22 39 00 b8 22 39 00
>392774		c4 22 39 00 d0 22 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>39277c		dc 22 39 00 e8 22 39 00 f4 22 39 00 00 23 39 00
>39278c		0c 23 39 00 18 23 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392794		24 23 39 00 30 23 39 00 3c 23 39 00 48 23 39 00
>3927a4		54 23 39 00 60 23 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>3927ac		6c 23 39 00 78 23 39 00 84 23 39 00 90 23 39 00
>3927bc		9c 23 39 00 a8 23 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>3927c4		b4 23 39 00 c0 23 39 00 cc 23 39 00 d8 23 39 00
>3927d4		e4 23 39 00 f0 23 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>3927dc		fc 23 39 00 08 24 39 00 14 24 39 00 20 24 39 00
>3927ec		2c 24 39 00 38 24 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>3927f4		44 24 39 00 50 24 39 00 5c 24 39 00 68 24 39 00
>392804		74 24 39 00 80 24 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>39280c		8c 24 39 00 98 24 39 00 a4 24 39 00 b0 24 39 00
>39281c		bc 24 39 00 c8 24 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392824		d4 24 39 00 e0 24 39 00 ec 24 39 00 f8 24 39 00
>392834		04 25 39 00 10 25 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>39283c		1c 25 39 00 28 25 39 00 34 25 39 00 40 25 39 00
>39284c		4c 25 39 00 58 25 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392854		64 25 39 00 70 25 39 00 7c 25 39 00 88 25 39 00
>392864		94 25 39 00 a0 25 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>39286c		ac 25 39 00 b8 25 39 00 c4 25 39 00 d0 25 39 00
>39287c		dc 25 39 00 e8 25 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392884		f4 25 39 00 00 26 39 00 0c 26 39 00 18 26 39 00
>392894		24 26 39 00 30 26 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>39289c		3c 26 39 00 48 26 39 00 54 26 39 00 60 26 39 00
>3928ac		6c 26 39 00 78 26 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>3928b4		84 26 39 00 90 26 39 00 9c 26 39 00 a8 26 39 00
>3928c4		b4 26 39 00 c0 26 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments_Win31.asm

>3928cc		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>3928d4		0d f2 f7 00
>3928d8		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>3928e0		07 f2 f7 00
>3928e4		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>3928ec		07 f2 f6 00
>3928f0		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>3928f8		07 f2 f7 00
>3928fc		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392904		07 f2 f7 00
>392908		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392910		07 f2 f7 00
>392914		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39291c		00 00 00 00
>392920		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392928		00 00 00 00
>39292c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392934		00 00 00 00
>392938		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392940		87 f2 f1 00
>392944		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>39294c		07 f4 f4 00
>392950		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392958		07 f2 f6 00
>39295c		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392964		07 e7 f7 00
>392968		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392970		07 f6 f6 00
>392974		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>39297c		87 a3 f3 00
>392980		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392988		00 00 00 00
>39298c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392994		00 00 00 00
>392998		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3929a0		00 00 00 00
>3929a4		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>3929ac		07 8a 08 00
>3929b0		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>3929b8		07 55 14 00
>3929bc		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>3929c4		87 55 04 00
>3929c8		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>3929d0		07 46 1a 00
>3929d4		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>3929dc		07 61 07 00
>3929e0		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>3929e8		90 61 07 00
>3929ec		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3929f4		00 00 00 00
>3929f8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a00		00 00 00 00
>392a04		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a0c		00 00 00 00
>392a10		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>392a18		87 f3 f8 00
>392a1c		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>392a24		07 f6 3a 00
>392a28		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>392a30		0c 84 19 00
>392a34		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>392a3c		07 94 19 00
>392a40		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>392a48		87 d1 f8 00
>392a4c		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>392a54		07 c3 a6 00
>392a58		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a60		00 00 00 00
>392a64		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a6c		00 00 00 00
>392a70		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a78		00 00 00 00
>392a7c		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>392a84		47 f2 df 00
>392a88		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>392a90		0f a1 df 00
>392a94		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>392a9c		07 f1 78 00
>392aa0		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>392aa8		07 f1 18 00
>392aac		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>392ab4		07 56 26 00
>392ab8		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>392ac0		07 66 06 00
>392ac4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392acc		00 00 00 00
>392ad0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ad8		00 00 00 00
>392adc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ae4		00 00 00 00
>392ae8		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>392af0		87 85 35 00
>392af4		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>392afc		87 f3 f4 00
>392b00		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>392b08		07 f2 c3 00
>392b0c		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>392b14		08 72 08 00
>392b18		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>392b20		07 3f 07 01
>392b24		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>392b2c		07 4f 05 00
>392b30		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b38		00 00 00 00
>392b3c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b44		00 00 00 00
>392b48		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b50		00 00 00 00
>392b54		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>392b5c		07 7a 05 00
>392b60		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>392b68		07 a5 45 00
>392b6c		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>392b74		08 8f 09 00
>392b78		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>392b80		0c 8f 09 00
>392b84		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>392b8c		07 82 37 00
>392b90		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>392b98		07 62 2c 01
>392b9c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ba4		00 00 00 00
>392ba8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392bb0		00 00 00 00
>392bb4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392bbc		00 00 00 00
>392bc0		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>392bc8		07 a6 1c 00
>392bcc		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>392bd4		07 72 0b 00
>392bd8		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>392be0		07 72 09 00
>392be4		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>392bec		07 82 09 00
>392bf0		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>392bf8		07 72 0f 00
>392bfc		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>392c04		07 8f 0a 00
>392c08		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c10		00 00 00 00
>392c14		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c1c		00 00 00 00
>392c20		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c28		00 00 00 00
>392c2c		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>392c34		07 65 1a 00
>392c38		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>392c40		07 65 1a 00
>392c44		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>392c4c		07 75 0a 00
>392c50		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>392c58		07 65 1a 00
>392c5c		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>392c64		07 65 26 00
>392c68		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>392c70		07 55 36 00
>392c74		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c7c		00 00 00 00
>392c80		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c88		00 00 00 00
>392c8c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c94		00 00 00 00
>392c98		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>392ca0		07 ff 0f 01
>392ca4		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>392cac		87 64 18 00
>392cb0		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>392cb8		07 96 0a 00
>392cbc		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>392cc4		07 91 2a 00
>392cc8		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>392cd0		47 6f 07 00
>392cd4		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>392cdc		07 8f 06 02
>392ce0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ce8		00 00 00 00
>392cec		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392cf4		00 00 00 00
>392cf8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d00		00 00 00 00
>392d04		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>392d0c		07 55 16 00
>392d10		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>392d18		07 6a 03 00
>392d1c		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>392d24		07 42 35 00
>392d28		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>392d30		07 31 47 01
>392d34		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>392d3c		0a 42 25 00
>392d40		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>392d48		07 cf 07 00
>392d4c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d54		00 00 00 00
>392d58		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d60		00 00 00 00
>392d64		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d6c		00 00 00 00
>392d70		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>392d78		8a f2 26 00
>392d7c		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>392d84		07 f2 f5 00
>392d88		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>392d90		87 11 13 00
>392d94		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>392d9c		87 1d 03 00
>392da0		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>392da8		07 81 23 00
>392dac		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>392db4		0a f2 f6 01
>392db8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dc0		00 00 00 00
>392dc4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dcc		00 00 00 00
>392dd0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dd8		00 00 00 00
>392ddc		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>392de4		07 c2 05 00
>392de8		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>392df0		07 6f 0c 01
>392df4		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>392dfc		07 56 16 00
>392e00		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>392e08		88 8f 0b 00
>392e0c		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>392e14		87 c3 e5 00
>392e18		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>392e20		07 f8 16 00
>392e24		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e2c		00 00 00 00
>392e30		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e38		00 00 00 00
>392e3c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e44		00 00 00 00
>392e48		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>392e50		0a f3 03 00
>392e54		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>392e5c		07 f3 02 00
>392e60		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>392e68		07 1f ff 03
>392e6c		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>392e74		8f 56 84 02
>392e78		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>392e80		0c 34 04 03
>392e84		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>392e8c		07 1f 02 03
>392e90		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e98		00 00 00 00
>392e9c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ea4		00 00 00 00
>392ea8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392eb0		00 00 00 00
>392eb4		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>392ebc		07 12 16 01
>392ec0		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>392ec8		07 f6 c9 02
>392ecc		cc 28 39 00 d8 28 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>392ed4		e4 28 39 00 f0 28 39 00 fc 28 39 00 08 29 39 00
>392ee4		14 29 39 00 20 29 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>392eec		2c 29 39 00 38 29 39 00 44 29 39 00 50 29 39 00
>392efc		5c 29 39 00 68 29 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>392f04		74 29 39 00 80 29 39 00 8c 29 39 00 98 29 39 00
>392f14		a4 29 39 00 b0 29 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>392f1c		bc 29 39 00 c8 29 39 00 d4 29 39 00 e0 29 39 00
>392f2c		ec 29 39 00 f8 29 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>392f34		04 2a 39 00 10 2a 39 00 1c 2a 39 00 28 2a 39 00
>392f44		34 2a 39 00 40 2a 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>392f4c		4c 2a 39 00 58 2a 39 00 64 2a 39 00 70 2a 39 00
>392f5c		7c 2a 39 00 88 2a 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>392f64		94 2a 39 00 a0 2a 39 00 ac 2a 39 00 b8 2a 39 00
>392f74		c4 2a 39 00 d0 2a 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>392f7c		dc 2a 39 00 e8 2a 39 00 f4 2a 39 00 00 2b 39 00
>392f8c		0c 2b 39 00 18 2b 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>392f94		24 2b 39 00 30 2b 39 00 3c 2b 39 00 48 2b 39 00
>392fa4		54 2b 39 00 60 2b 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>392fac		6c 2b 39 00 78 2b 39 00 84 2b 39 00 90 2b 39 00
>392fbc		9c 2b 39 00 a8 2b 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>392fc4		b4 2b 39 00 c0 2b 39 00 cc 2b 39 00 d8 2b 39 00
>392fd4		e4 2b 39 00 f0 2b 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>392fdc		fc 2b 39 00 08 2c 39 00 14 2c 39 00 20 2c 39 00
>392fec		2c 2c 39 00 38 2c 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>392ff4		44 2c 39 00 50 2c 39 00 5c 2c 39 00 68 2c 39 00
>393004		74 2c 39 00 80 2c 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>39300c		8c 2c 39 00 98 2c 39 00 a4 2c 39 00 b0 2c 39 00
>39301c		bc 2c 39 00 c8 2c 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>393024		d4 2c 39 00 e0 2c 39 00 ec 2c 39 00 f8 2c 39 00
>393034		04 2d 39 00 10 2d 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>39303c		1c 2d 39 00 28 2d 39 00 34 2d 39 00 40 2d 39 00
>39304c		4c 2d 39 00 58 2d 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>393054		64 2d 39 00 70 2d 39 00 7c 2d 39 00 88 2d 39 00
>393064		94 2d 39 00 a0 2d 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>39306c		ac 2d 39 00 b8 2d 39 00 c4 2d 39 00 d0 2d 39 00
>39307c		dc 2d 39 00 e8 2d 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>393084		f4 2d 39 00 00 2e 39 00 0c 2e 39 00 18 2e 39 00
>393094		24 2e 39 00 30 2e 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>39309c		3c 2e 39 00 48 2e 39 00 54 2e 39 00 60 2e 39 00
>3930ac		6c 2e 39 00 78 2e 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>3930b4		84 2e 39 00 90 2e 39 00 9c 2e 39 00 a8 2e 39 00
>3930c4		b4 2e 39 00 c0 2e 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm

>3930cc		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.3930d4						IOPL2_TONE_TEST
.3930d4		e2 20		sep #$20	                SEP #$20        ; set A short
.3930d6		c2 10		rep #$10	                REP #$10        ; set X long
.3930d8		a2 00 00	ldx #$0000	                LDX #0
.3930db						OPL2_TONE_TESTING_L1
.3930db		bf cc 30 39	lda $3930cc,x	                LDA NOTE_INTRO, X
.3930df		29 0f		and #$0f	                AND #$F
.3930e1		85 30		sta $30		                STA OPL2_NOTE ; start at C
.3930e3		bf cc 30 39	lda $3930cc,x	                LDA NOTE_INTRO, X
.3930e7		29 70		and #$70	                AND #$70
.3930e9		4a		lsr a		                LSR A
.3930ea		4a		lsr a		                LSR A
.3930eb		4a		lsr a		                LSR A
.3930ec		4a		lsr a		                LSR A
.3930ed		85 31		sta $31		                STA OPL2_OCTAVE
.3930ef		8a		txa		                TXA
.3930f0		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.3930f2		85 27		sta $27		                STA OPL2_CHANNEL
.3930f4		22 82 32 39	jsl $393282	                JSL OPL2_PLAYNOTE
.3930f8		a0 00 00	ldy #$0000	                LDY #$0000
.3930fb						OPL2_TONE_TESTING_L2
.3930fb		ea		nop		                NOP
.3930fc		ea		nop		                NOP
.3930fd		ea		nop		                NOP
.3930fe		ea		nop		                NOP
.3930ff		c8		iny		                INY
.393100		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.393103		d0 f6		bne $3930fb	                BNE OPL2_TONE_TESTING_L2
.393105		e8		inx		                INX
.393106		e0 08 00	cpx #$0008	                CPX #8
.393109		d0 d0		bne $3930db	                BNE OPL2_TONE_TESTING_L1
.39310b		6b		rtl		                RTL
.39310c						OPL2_INIT
.39310c		c2 20		rep #$20	                REP #$20        ; set A long
.39310e		a9 00 00	lda #$0000	                LDA #$0000
.393111		85 28		sta $28		                STA OPL2_REG_REGION
.393113		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393115		85 30		sta $30		                STA OPL2_NOTE
.393117		85 32		sta $32		                STA OPL2_PARAMETER0
.393119		85 34		sta $34		                STA OPL2_PARAMETER2
.39311b		a9 96 10	lda #$1096	                LDA #<>INSTRUMENT_ACCORDN
.39311e		85 50		sta $50		                STA RAD_ADDR
.393120		a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.393123		85 52		sta $52		                STA RAD_ADDR + 2
.393125		e2 20		sep #$20	                SEP #$20        ; set A short
.393127		6b		rtl		                RTL
.393128						OPL2_Reset
.393128		6b		rtl		                RTL
.393129						OPL2_Get_FrequencyBlock
.393129		6b		rtl		                RTL
.39312a						OPL2_GET_REGISTER
.39312a		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39312d		2b		pld		                PLD
.39312e		c2 20		rep #$20	                REP #$20        ; set A long
.393130		18		clc		              CLC
.393131		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393134		65 32		adc $32		              ADC OPL2_PARAMETER0
.393136		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393138		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39313b		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39313d		e2 20		sep #$20	                SEP #$20        ; set A short
.39313f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393141		6b		rtl		              RTL
.393142						OPL2_GET_WAVEFORM_SELECT
.393142		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393145		2b		pld		                PLD
.393146		c2 20		rep #$20	                REP #$20        ; set A long
.393148		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39314b		69 01 00	adc #$0001	              ADC #$0001
.39314e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393150		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393153		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393155		e2 20		sep #$20	                SEP #$20        ; set A short
.393157		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393159		29 20		and #$20	              AND #$20
.39315b		6b		rtl		              RTL
.39315c						OPL2_GET_SCALINGLEVEL
.39315c		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39315f		2b		pld		                PLD
.393160		c2 20		rep #$20	                REP #$20        ; set A long
.393162		a9 40 00	lda #$0040	              LDA #$0040  ;
.393165		85 28		sta $28		              STA OPL2_REG_REGION
.393167		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.39316a		e2 20		sep #$20	                SEP #$20        ; set A short
.39316c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39316e		29 c0		and #$c0	              AND #$C0
.393170		4a		lsr a		              LSR A
.393171		4a		lsr a		              LSR A
.393172		4a		lsr a		              LSR A
.393173		4a		lsr a		              LSR A
.393174		4a		lsr a		              LSR A
.393175		4a		lsr a		              LSR A
.393176		6b		rtl		              RTL
.393177						OPL2_GET_BLOCK
.393177		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39317a		2b		pld		                PLD
.39317b		e2 20		sep #$20	                SEP #$20        ; set A short
.39317d		18		clc		              CLC
.39317e		a5 27		lda $27		              LDA OPL2_CHANNEL
.393180		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393182		69 b0		adc #$b0	              ADC #$B0
.393184		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393186		a9 00		lda #$00	              LDA #$00
.393188		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39318a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39318c		18		clc		              CLC
.39318d		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393190		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393192		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393194		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393197		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393199		e2 20		sep #$20	                SEP #$20        ; set A short
.39319b		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39319d		29 1c		and #$1c	              AND #$1C
.39319f		4a		lsr a		              LSR A
.3931a0		4a		lsr a		              LSR A
.3931a1		6b		rtl		              RTL
.3931a2						OPL2_GET_KEYON
.3931a2		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3931a5		2b		pld		                PLD
.3931a6		e2 20		sep #$20	                SEP #$20        ; set A short
.3931a8		18		clc		              CLC
.3931a9		a5 27		lda $27		              LDA OPL2_CHANNEL
.3931ab		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3931ad		69 b0		adc #$b0	              ADC #$B0
.3931af		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3931b1		a9 00		lda #$00	              LDA #$00
.3931b3		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3931b5		c2 30		rep #$30	                REP #$30        ; set A&X long
.3931b7		18		clc		              CLC
.3931b8		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3931bb		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3931bd		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3931bf		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3931c2		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3931c4		e2 20		sep #$20	                SEP #$20        ; set A short
.3931c6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3931c8		29 20		and #$20	              AND #$20
.3931ca		6b		rtl		              RTL
.3931cb						OPL2_GET_FEEDBACK
.3931cb		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3931ce		2b		pld		                PLD
.3931cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3931d1		18		clc		              CLC
.3931d2		a5 27		lda $27		              LDA OPL2_CHANNEL
.3931d4		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3931d6		69 c0		adc #$c0	              ADC #$C0
.3931d8		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3931da		a9 00		lda #$00	              LDA #$00
.3931dc		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3931de		c2 30		rep #$30	                REP #$30        ; set A&X long
.3931e0		18		clc		              CLC
.3931e1		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3931e4		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3931e6		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3931e8		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3931eb		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3931ed		e2 20		sep #$20	                SEP #$20        ; set A short
.3931ef		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3931f1		29 e0		and #$e0	              AND #$E0
.3931f3		4a		lsr a		              LSR
.3931f4		6b		rtl		              RTL
.3931f5						OPL2_GET_SYNTHMODE
.3931f5		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3931f8		2b		pld		                PLD
.3931f9		e2 20		sep #$20	                SEP #$20        ; set A short
.3931fb		18		clc		              CLC
.3931fc		a5 27		lda $27		              LDA OPL2_CHANNEL
.3931fe		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393200		69 c0		adc #$c0	              ADC #$C0
.393202		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393204		a9 00		lda #$00	              LDA #$00
.393206		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393208		c2 30		rep #$30	                REP #$30        ; set A&X long
.39320a		18		clc		              CLC
.39320b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39320e		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393210		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393212		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393215		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393217		e2 20		sep #$20	                SEP #$20        ; set A short
.393219		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39321b		29 01		and #$01	              AND #$01
.39321d		6b		rtl		              RTL
.39321e						OPL2_GET_DEEPTREMOLO
.39321e		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393221		2b		pld		                PLD
.393222		c2 20		rep #$20	                REP #$20        ; set A long
.393224		a9 bd 00	lda #$00bd	              LDA #$00BD;
.393227		85 28		sta $28		              STA OPL2_REG_REGION
.393229		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.39322c		e2 20		sep #$20	                SEP #$20        ; set A short
.39322e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393230		29 80		and #$80	              AND #$80
.393232		6b		rtl		              RTL
.393233						OPL2_GET_DEEPVIBRATO
.393233		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393236		2b		pld		                PLD
.393237		c2 20		rep #$20	                REP #$20        ; set A long
.393239		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39323c		69 bd 00	adc #$00bd	              ADC #$00BD
.39323f		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393241		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393244		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393246		e2 20		sep #$20	                SEP #$20        ; set A short
.393248		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39324a		29 40		and #$40	              AND #$40
.39324c		6b		rtl		              RTL
.39324d						OPL2_GET_PERCUSSION
.39324d		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393250		2b		pld		                PLD
.393251		c2 20		rep #$20	                REP #$20        ; set A long
.393253		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393256		69 bd 00	adc #$00bd	              ADC #$00BD
.393259		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39325b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39325e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393260		e2 20		sep #$20	                SEP #$20        ; set A short
.393262		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393264		29 20		and #$20	              AND #$20
.393266		6b		rtl		              RTL
.393267						OPL2_GET_DRUMS
.393267		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39326a		2b		pld		                PLD
.39326b		c2 20		rep #$20	                REP #$20        ; set A long
.39326d		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393270		69 bd 00	adc #$00bd	              ADC #$00BD
.393273		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393275		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393278		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39327a		e2 20		sep #$20	                SEP #$20        ; set A short
.39327c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39327e		29 1f		and #$1f	              AND #$1F
.393280		6b		rtl		              RTL
.393281						OPL2_Get_WaveForm
.393281		6b		rtl		                RTL
.393282						OPL2_PLAYNOTE
.393282		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393285		2b		pld		                PLD
.393286		e2 20		sep #$20	                SEP #$20        ; set A short
.393288		da		phx		                PHX
.393289		a9 00		lda #$00	                LDA #$00
.39328b		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39328d		20 bb 37	jsr $3937bb	                JSR OPL2_SET_KEYON
.393290		20 86 37	jsr $393786	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.393293		e2 10		sep #$10	                SEP #$10        ; set X short
.393295		a5 30		lda $30		                LDA OPL2_NOTE
.393297		3a		dec a		                DEC A
.393298		0a		asl a		                ASL A
.393299		aa		tax		                TAX
.39329a		bf 5b 10 39	lda $39105b,x	                LDA @lnoteFNumbers,X
.39329e		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.3932a0		e8		inx		                INX
.3932a1		bf 5b 10 39	lda $39105b,x	                LDA @lnoteFNumbers,X
.3932a5		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.3932a7		22 10 37 39	jsl $393710	                JSL OPL2_SET_FNUMBER
.3932ab		a9 01		lda #$01	                LDA #$01
.3932ad		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3932af		20 bb 37	jsr $3937bb	                JSR OPL2_SET_KEYON
.3932b2		c2 10		rep #$10	                REP #$10        ; set X long
.3932b4		fa		plx		                PLX
.3932b5		6b		rtl		                RTL
.3932b6						OPL2_PLAYDRUM
.3932b6		6b		rtl		                RTL
.3932b7						OPL2_SET_INSTRUMENT
.3932b7		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3932ba		2b		pld		                PLD
.3932bb		38		sec		              SEC ; Set the WaveFormSelect to True
.3932bc		22 99 34 39	jsl $393499	              JSL OPL2_SET_WAVEFORMSELECT;
.3932c0		e2 20		sep #$20	                SEP #$20        ; set A short
.3932c2		c2 10		rep #$10	                REP #$10        ; set X long
.3932c4		a0 00 00	ldy #$0000	              LDY #$0000
.3932c7		a2 00 00	ldx #$0000	              LDX #$0000
.3932ca		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.3932cc		85 35		sta $35		              STA OPL2_PARAMETER3
.3932ce		c8		iny		              INY
.3932cf		c9 06		cmp #$06	              CMP #$06
.3932d1		d0 03		bne $3932d6	              BNE PERCUSSION_NEXT07
.3932d3		82 70 01	brl $393446	              BRL Percussion_6
.3932d6						PERCUSSION_NEXT07
.3932d6		c9 07		cmp #$07	              CMP #$07
.3932d8		d0 03		bne $3932dd	              BNE PERCUSSION_NEXT08
.3932da		82 44 01	brl $393421	              BRL Percussion_7
.3932dd						PERCUSSION_NEXT08
.3932dd		c9 08		cmp #$08	              CMP #$08
.3932df		d0 03		bne $3932e4	              BNE PERCUSSION_NEXT09
.3932e1		82 18 01	brl $3933fc	              BRL Percussion_8
.3932e4						PERCUSSION_NEXT09
.3932e4		c9 09		cmp #$09	              CMP #$09
.3932e6		d0 03		bne $3932eb	              BNE PERCUSSION_NEXT0A
.3932e8		82 ec 00	brl $3933d7	              BRL Percussion_9
.3932eb						PERCUSSION_NEXT0A
.3932eb		c9 0a		cmp #$0a	              CMP #$0A
.3932ed		d0 03		bne $3932f2	              BNE Percussion_Default
.3932ef		82 c0 00	brl $3933b2	              BRL Percussion_A
.3932f2						Percussion_Default
.3932f2		a9 00		lda #$00	              LDA #$00
.3932f4		85 26		sta $26		              STA OPL2_OPERATOR
.3932f6		c2 20		rep #$20	                REP #$20        ; set A long
.3932f8		a9 20 00	lda #$0020	              LDA #$0020;
.3932fb		85 28		sta $28		              STA OPL2_REG_REGION
.3932fd		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.393300		e2 20		sep #$20	                SEP #$20        ; set A short
.393302		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393304		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393306		c8		iny		              INY
.393307		c2 20		rep #$20	                REP #$20        ; set A long
.393309		a9 40 00	lda #$0040	              LDA #$0040;
.39330c		85 28		sta $28		              STA OPL2_REG_REGION
.39330e		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.393311		e2 20		sep #$20	                SEP #$20        ; set A short
.393313		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393315		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393317		c8		iny		              INY
.393318		c2 20		rep #$20	                REP #$20        ; set A long
.39331a		a9 60 00	lda #$0060	              LDA #$0060;
.39331d		85 28		sta $28		              STA OPL2_REG_REGION
.39331f		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.393322		e2 20		sep #$20	                SEP #$20        ; set A short
.393324		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393326		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393328		c8		iny		              INY
.393329		c2 20		rep #$20	                REP #$20        ; set A long
.39332b		a9 80 00	lda #$0080	              LDA #$0080;
.39332e		85 28		sta $28		              STA OPL2_REG_REGION
.393330		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.393333		e2 20		sep #$20	                SEP #$20        ; set A short
.393335		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393337		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393339		c8		iny		              INY
.39333a		c2 20		rep #$20	                REP #$20        ; set A long
.39333c		a9 e0 00	lda #$00e0	              LDA #$00E0;
.39333f		85 28		sta $28		              STA OPL2_REG_REGION
.393341		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.393344		e2 20		sep #$20	                SEP #$20        ; set A short
.393346		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393348		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39334a		c8		iny		              INY
.39334b		e2 10		sep #$10	                SEP #$10        ; set X short
.39334d		a5 27		lda $27		              LDA OPL2_CHANNEL
.39334f		29 0f		and #$0f	              AND #$0F
.393351		aa		tax		              TAX
.393352		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.393354		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.393358		c8		iny		              INY
.393359		a9 01		lda #$01	              LDA #$01
.39335b		85 26		sta $26		              STA OPL2_OPERATOR
.39335d		c2 20		rep #$20	                REP #$20        ; set A long
.39335f		a9 20 00	lda #$0020	              LDA #$0020;
.393362		85 28		sta $28		              STA OPL2_REG_REGION
.393364		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.393367		e2 20		sep #$20	                SEP #$20        ; set A short
.393369		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.39336b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39336d		c8		iny		              INY
.39336e		c2 20		rep #$20	                REP #$20        ; set A long
.393370		a9 40 00	lda #$0040	              LDA #$0040;
.393373		85 28		sta $28		              STA OPL2_REG_REGION
.393375		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.393378		e2 20		sep #$20	                SEP #$20        ; set A short
.39337a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.39337c		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39337e		c8		iny		              INY
.39337f		c2 20		rep #$20	                REP #$20        ; set A long
.393381		a9 60 00	lda #$0060	              LDA #$0060;
.393384		85 28		sta $28		              STA OPL2_REG_REGION
.393386		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.393389		e2 20		sep #$20	                SEP #$20        ; set A short
.39338b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.39338d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39338f		c8		iny		              INY
.393390		c2 20		rep #$20	                REP #$20        ; set A long
.393392		a9 80 00	lda #$0080	              LDA #$0080;
.393395		85 28		sta $28		              STA OPL2_REG_REGION
.393397		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.39339a		e2 20		sep #$20	                SEP #$20        ; set A short
.39339c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.39339e		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3933a0		c8		iny		              INY
.3933a1		c2 20		rep #$20	                REP #$20        ; set A long
.3933a3		a9 e0 00	lda #$00e0	              LDA #$00E0;
.3933a6		85 28		sta $28		              STA OPL2_REG_REGION
.3933a8		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.3933ab		e2 20		sep #$20	                SEP #$20        ; set A short
.3933ad		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.3933af		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3933b1		6b		rtl		                RTL
.3933b2						Percussion_A
.3933b2		e2 20		sep #$20	                SEP #$20        ; set A short
.3933b4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3933b6		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.3933ba		c8		iny		              INY
.3933bb		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3933bd		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.3933c1		c8		iny		              INY
.3933c2		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3933c4		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.3933c8		c8		iny		              INY
.3933c9		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3933cb		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.3933cf		c8		iny		              INY
.3933d0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3933d2		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.3933d6		6b		rtl		                RTL
.3933d7						Percussion_9
.3933d7		e2 20		sep #$20	                SEP #$20        ; set A short
.3933d9		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3933db		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.3933df		c8		iny		              INY
.3933e0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3933e2		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.3933e6		c8		iny		              INY
.3933e7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3933e9		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.3933ed		c8		iny		              INY
.3933ee		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3933f0		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.3933f4		c8		iny		              INY
.3933f5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3933f7		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.3933fb		6b		rtl		              RTL
.3933fc						Percussion_8
.3933fc		e2 20		sep #$20	                SEP #$20        ; set A short
.3933fe		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393400		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.393404		c8		iny		              INY
.393405		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393407		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.39340b		c8		iny		              INY
.39340c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39340e		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.393412		c8		iny		              INY
.393413		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393415		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.393419		c8		iny		              INY
.39341a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39341c		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.393420		6b		rtl		              RTL
.393421						Percussion_7
.393421		e2 20		sep #$20	                SEP #$20        ; set A short
.393423		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393425		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.393429		c8		iny		              INY
.39342a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39342c		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.393430		c8		iny		              INY
.393431		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393433		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.393437		c8		iny		              INY
.393438		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39343a		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.39343e		c8		iny		              INY
.39343f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393441		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.393445		6b		rtl		              RTL
.393446						Percussion_6
.393446		e2 20		sep #$20	                SEP #$20        ; set A short
.393448		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39344a		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.39344e		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.393452		c8		iny		              INY
.393453		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393455		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.393459		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.39345d		c8		iny		              INY
.39345e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393460		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.393464		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.393468		c8		iny		              INY
.393469		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39346b		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.39346f		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.393473		c8		iny		              INY
.393474		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393476		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.39347a		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.39347e		6b		rtl		              RTL
.39347f						OPL2_SET_REGISTER
.39347f		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393482		2b		pld		                PLD
.393483		c2 20		rep #$20	                REP #$20        ; set A long
.393485		18		clc		              CLC
.393486		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393489		65 32		adc $32		              ADC OPL2_PARAMETER0
.39348b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39348d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393490		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393492		e2 20		sep #$20	                SEP #$20        ; set A short
.393494		a5 33		lda $33		              LDA OPL2_PARAMETER1
.393496		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393498		6b		rtl		              RTL
.393499						OPL2_SET_WAVEFORMSELECT
.393499		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39349c		2b		pld		                PLD
.39349d		c2 20		rep #$20	                REP #$20        ; set A long
.39349f		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.3934a2		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3934a4		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3934a7		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3934a9		e2 20		sep #$20	                SEP #$20        ; set A short
.3934ab		b0 07		bcs $3934b4	              BCS OPL2_Set_WaveFormSelect_set
.3934ad		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3934af		29 df		and #$df	              AND #$DF
.3934b1		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3934b3		6b		rtl		              RTL
.3934b4						OPL2_Set_WaveFormSelect_set
.3934b4		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3934b7		2b		pld		                PLD
.3934b8		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3934ba		09 20		ora #$20	              ORA #$20
.3934bc		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3934be		6b		rtl		                RTL
.3934bf						OPL2_SET_TREMOLO
.3934bf		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3934c2		2b		pld		                PLD
.3934c3		08		php		                PHP ; Push the Carry
.3934c4		c2 20		rep #$20	                REP #$20        ; set A long
.3934c6		18		clc		                CLC
.3934c7		a9 20 00	lda #$0020	                LDA #$0020 ;
.3934ca		85 28		sta $28		                STA OPL2_REG_REGION
.3934cc		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.3934cf		28		plp		                PLP ; Pull the Carry out
.3934d0		e2 20		sep #$20	                SEP #$20        ; set A short
.3934d2		b0 08		bcs $3934dc	                BCS OPL2_Set_Tremolo_Set;
.3934d4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3934d6		29 7f		and #$7f	                AND #$7F
.3934d8		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3934da		80 06		bra $3934e2	                BRA OPL2_Set_Tremolo_Exit
.3934dc						OPL2_Set_Tremolo_Set
.3934dc		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3934de		09 80		ora #$80	                ORA #$80
.3934e0		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3934e2						OPL2_Set_Tremolo_Exit
.3934e2		6b		rtl		                RTL
.3934e3						OPL2_GET_TREMOLO
.3934e3		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3934e6		2b		pld		                PLD
.3934e7		c2 20		rep #$20	                REP #$20        ; set A long
.3934e9		a9 20 00	lda #$0020	                LDA #$0020;
.3934ec		85 28		sta $28		                STA OPL2_REG_REGION
.3934ee		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.3934f1		e2 20		sep #$20	                SEP #$20        ; set A short
.3934f3		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3934f5		29 80		and #$80	                AND #$80
.3934f7		6b		rtl		                RTL
.3934f8						OPL2_SET_VIBRATO
.3934f8		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3934fb		2b		pld		                PLD
.3934fc		08		php		                PHP ; Push the Carry
.3934fd		c2 20		rep #$20	                REP #$20        ; set A long
.3934ff		18		clc		                CLC
.393500		a9 20 00	lda #$0020	                LDA #$0020;
.393503		85 28		sta $28		                STA OPL2_REG_REGION
.393505		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.393508		28		plp		                PLP ; Pull the Carry out
.393509		e2 20		sep #$20	                SEP #$20        ; set A short
.39350b		b0 08		bcs $393515	                BCS OPL2_Set_Vibrato_Set;
.39350d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39350f		29 bf		and #$bf	                AND #$BF
.393511		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393513		80 06		bra $39351b	                BRA OPL2_Set_Vibrato_Exit
.393515						OPL2_Set_Vibrato_Set
.393515		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393517		09 40		ora #$40	                ORA #$40
.393519		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39351b						OPL2_Set_Vibrato_Exit
.39351b		6b		rtl		                RTL
.39351c						OPL2_GET_VIBRATO
.39351c		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39351f		2b		pld		                PLD
.393520		c2 20		rep #$20	                REP #$20        ; set A long
.393522		a9 20 00	lda #$0020	                LDA #$0020;
.393525		85 28		sta $28		                STA OPL2_REG_REGION
.393527		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.39352a		e2 20		sep #$20	                SEP #$20        ; set A short
.39352c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39352e		29 40		and #$40	                AND #$40
.393530		6b		rtl		                RTL
.393531						OPL2_SET_MAINTAINSUSTAIN
.393531		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393534		2b		pld		                PLD
.393535		08		php		              PHP ; Push the Carry
.393536		c2 20		rep #$20	                REP #$20        ; set A long
.393538		18		clc		              CLC
.393539		a9 20 00	lda #$0020	              LDA #$0020;
.39353c		85 28		sta $28		              STA OPL2_REG_REGION
.39353e		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.393541		28		plp		              PLP ; Pull the Carry out
.393542		e2 20		sep #$20	                SEP #$20        ; set A short
.393544		b0 08		bcs $39354e	              BCS OPL2_Set_MaintainSustain_Set;
.393546		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393548		29 df		and #$df	              AND #$DF
.39354a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39354c		80 06		bra $393554	              BRA OPL2_Set_MaintainSustain_Exit
.39354e						OPL2_Set_MaintainSustain_Set
.39354e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393550		09 20		ora #$20	              ORA #$20
.393552		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393554						OPL2_Set_MaintainSustain_Exit
.393554		6b		rtl		                RTL
.393555						OPL2_GET_MAINTAINSUSTAIN
.393555		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393558		2b		pld		                PLD
.393559		c2 20		rep #$20	                REP #$20        ; set A long
.39355b		a9 20 00	lda #$0020	              LDA #$0020;
.39355e		85 28		sta $28		              STA OPL2_REG_REGION
.393560		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.393563		e2 20		sep #$20	                SEP #$20        ; set A short
.393565		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393567		29 20		and #$20	              AND #$20
.393569		6b		rtl		                RTL
.39356a						OPL2_SET_ENVELOPESCALING
.39356a		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39356d		2b		pld		                PLD
.39356e		08		php		              PHP ; Push the Carry
.39356f		c2 20		rep #$20	                REP #$20        ; set A long
.393571		18		clc		              CLC
.393572		a9 20 00	lda #$0020	              LDA #$0020;
.393575		85 28		sta $28		              STA OPL2_REG_REGION
.393577		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.39357a		28		plp		              PLP ; Pull the Carry out
.39357b		e2 20		sep #$20	                SEP #$20        ; set A short
.39357d		b0 08		bcs $393587	              BCS OPL2_Set_EnvelopeScaling_Set;
.39357f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393581		29 ef		and #$ef	              AND #$EF
.393583		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393585		80 06		bra $39358d	              BRA OPL2_Set_EnvelopeScaling_Exit
.393587						OPL2_Set_EnvelopeScaling_Set
.393587		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393589		09 10		ora #$10	              ORA #$10
.39358b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39358d						OPL2_Set_EnvelopeScaling_Exit
.39358d		6b		rtl		                RTL
.39358e						OPL2_GET_ENVELOPESCALING
.39358e		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393591		2b		pld		                PLD
.393592		c2 20		rep #$20	                REP #$20        ; set A long
.393594		a9 20 00	lda #$0020	              LDA #$0020;
.393597		85 28		sta $28		              STA OPL2_REG_REGION
.393599		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.39359c		e2 20		sep #$20	                SEP #$20        ; set A short
.39359e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3935a0		29 10		and #$10	              AND #$10
.3935a2		6b		rtl		                RTL
.3935a3						OPL2_GET_MODFREQMULTIPLE
.3935a3		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3935a6		2b		pld		                PLD
.3935a7		c2 20		rep #$20	                REP #$20        ; set A long
.3935a9		a9 20 00	lda #$0020	              LDA #$0020;
.3935ac		85 28		sta $28		              STA OPL2_REG_REGION
.3935ae		20 0a 39	jsr $39390a	              JSR OPL2_GET_REG_OFFSET
.3935b1		e2 20		sep #$20	                SEP #$20        ; set A short
.3935b3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3935b5		29 0f		and #$0f	              AND #$0F
.3935b7		6b		rtl		              RTL
.3935b8						OPL2_SET_MODFREQMULTIPLE
.3935b8		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3935bb		2b		pld		                PLD
.3935bc		c2 20		rep #$20	                REP #$20        ; set A long
.3935be		a9 20 00	lda #$0020	                LDA #$0020;
.3935c1		85 28		sta $28		                STA OPL2_REG_REGION
.3935c3		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.3935c6		e2 20		sep #$20	                SEP #$20        ; set A short
.3935c8		a5 32		lda $32		                LDA OPL2_PARAMETER0
.3935ca		29 0f		and #$0f	                AND #$0F
.3935cc		85 32		sta $32		                STA OPL2_PARAMETER0
.3935ce		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3935d0		29 f0		and #$f0	                AND #$F0
.3935d2		05 32		ora $32		                ORA OPL2_PARAMETER0
.3935d4		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3935d6		6b		rtl		                RTL
.3935d7						OPL2_SET_SCALINGLEVEL
.3935d7		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3935da		2b		pld		                PLD
.3935db		c2 20		rep #$20	                REP #$20        ; set A long
.3935dd		a9 40 00	lda #$0040	                LDA #$0040;
.3935e0		85 28		sta $28		                STA OPL2_REG_REGION
.3935e2		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.3935e5		e2 20		sep #$20	                SEP #$20        ; set A short
.3935e7		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3935e9		29 03		and #$03	                AND #$03
.3935eb		0a		asl a		                ASL
.3935ec		0a		asl a		                ASL
.3935ed		0a		asl a		                ASL
.3935ee		0a		asl a		                ASL
.3935ef		0a		asl a		                ASL
.3935f0		0a		asl a		                ASL
.3935f1		85 32		sta $32		                STA OPL2_PARAMETER0
.3935f3		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3935f5		29 3f		and #$3f	                AND #$3F
.3935f7		05 32		ora $32		                ORA OPL2_PARAMETER0
.3935f9		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3935fb		6b		rtl		                RTL
.3935fc						OPL2_SET_VOLUME
.3935fc		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3935ff		2b		pld		                PLD
.393600		c2 20		rep #$20	                REP #$20        ; set A long
.393602		a9 40 00	lda #$0040	                LDA #$0040  ;
.393605		85 28		sta $28		                STA OPL2_REG_REGION
.393607		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.39360a		e2 20		sep #$20	                SEP #$20        ; set A short
.39360c		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.39360e		29 3f		and #$3f	                AND #$3F
.393610		85 32		sta $32		                STA OPL2_PARAMETER0
.393612		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393614		29 c0		and #$c0	                AND #$C0
.393616		05 32		ora $32		                ORA OPL2_PARAMETER0
.393618		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39361a		6b		rtl		                RTL
.39361b						OPL2_GET_VOLUME
.39361b		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39361e		2b		pld		                PLD
.39361f		c2 20		rep #$20	                REP #$20        ; set A long
.393621		a9 40 00	lda #$0040	                LDA #$0040  ;
.393624		85 28		sta $28		                STA OPL2_REG_REGION
.393626		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.393629		e2 20		sep #$20	                SEP #$20        ; set A short
.39362b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39362d		29 3f		and #$3f	                AND #$3F
.39362f		6b		rtl		                RTL
.393630						OPL2_SET_ATTACK
.393630		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393633		2b		pld		                PLD
.393634		c2 20		rep #$20	                REP #$20        ; set A long
.393636		a9 60 00	lda #$0060	                LDA #$0060  ;
.393639		85 28		sta $28		                STA OPL2_REG_REGION
.39363b		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.39363e		e2 20		sep #$20	                SEP #$20        ; set A short
.393640		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393642		29 0f		and #$0f	                AND #$0F
.393644		0a		asl a		                ASL
.393645		0a		asl a		                ASL
.393646		0a		asl a		                ASL
.393647		0a		asl a		                ASL
.393648		85 32		sta $32		                STA OPL2_PARAMETER0
.39364a		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39364c		29 0f		and #$0f	                AND #$0F
.39364e		05 32		ora $32		                ORA OPL2_PARAMETER0
.393650		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393652		6b		rtl		                RTL
.393653						OPL2_GET_ATTACK
.393653		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393656		2b		pld		                PLD
.393657		c2 20		rep #$20	                REP #$20        ; set A long
.393659		a9 60 00	lda #$0060	                LDA #$0060
.39365c		85 28		sta $28		                STA OPL2_REG_REGION
.39365e		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.393661		e2 20		sep #$20	                SEP #$20        ; set A short
.393663		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393665		29 f0		and #$f0	                AND #$F0
.393667		4a		lsr a		                LSR
.393668		4a		lsr a		                LSR
.393669		4a		lsr a		                LSR
.39366a		4a		lsr a		                LSR
.39366b		6b		rtl		                RTL
.39366c						OPL2_SET_DECAY
.39366c		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39366f		2b		pld		                PLD
.393670		c2 20		rep #$20	                REP #$20        ; set A long
.393672		a9 60 00	lda #$0060	                LDA #$0060;
.393675		85 28		sta $28		                STA OPL2_REG_REGION
.393677		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.39367a		e2 20		sep #$20	                SEP #$20        ; set A short
.39367c		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.39367e		29 0f		and #$0f	                AND #$0F
.393680		85 32		sta $32		                STA OPL2_PARAMETER0
.393682		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393684		29 f0		and #$f0	                AND #$F0
.393686		05 32		ora $32		                ORA OPL2_PARAMETER0
.393688		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39368a		6b		rtl		                RTL
.39368b						OPL2_GET_DECAY
.39368b		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39368e		2b		pld		                PLD
.39368f		c2 20		rep #$20	                REP #$20        ; set A long
.393691		a9 60 00	lda #$0060	                LDA #$0060
.393694		85 28		sta $28		                STA OPL2_REG_REGION
.393696		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.393699		e2 20		sep #$20	                SEP #$20        ; set A short
.39369b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39369d		29 0f		and #$0f	                AND #$0F
.39369f		6b		rtl		                RTL
.3936a0						OPL2_SET_SUSTAIN
.3936a0		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3936a3		2b		pld		                PLD
.3936a4		c2 20		rep #$20	                REP #$20        ; set A long
.3936a6		a9 80 00	lda #$0080	                LDA #$0080;
.3936a9		85 28		sta $28		                STA OPL2_REG_REGION
.3936ab		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.3936ae		e2 20		sep #$20	                SEP #$20        ; set A short
.3936b0		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3936b2		29 0f		and #$0f	                AND #$0F
.3936b4		0a		asl a		                ASL
.3936b5		0a		asl a		                ASL
.3936b6		0a		asl a		                ASL
.3936b7		0a		asl a		                ASL
.3936b8		85 32		sta $32		                STA OPL2_PARAMETER0
.3936ba		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3936bc		29 0f		and #$0f	                AND #$0F
.3936be		05 32		ora $32		                ORA OPL2_PARAMETER0
.3936c0		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3936c2		6b		rtl		                RTL
.3936c3						OPL2_GET_SUSTAIN
.3936c3		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3936c6		2b		pld		                PLD
.3936c7		c2 20		rep #$20	                REP #$20        ; set A long
.3936c9		a9 80 00	lda #$0080	                LDA #$0080
.3936cc		85 28		sta $28		                STA OPL2_REG_REGION
.3936ce		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.3936d1		e2 20		sep #$20	                SEP #$20        ; set A short
.3936d3		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3936d5		29 f0		and #$f0	                AND #$F0
.3936d7		4a		lsr a		                LSR
.3936d8		4a		lsr a		                LSR
.3936d9		4a		lsr a		                LSR
.3936da		4a		lsr a		                LSR
.3936db		6b		rtl		                RTL
.3936dc						OPL2_SET_RELEASE
.3936dc		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3936df		2b		pld		                PLD
.3936e0		c2 20		rep #$20	                REP #$20        ; set A long
.3936e2		a9 80 00	lda #$0080	                LDA #$0080;
.3936e5		85 28		sta $28		                STA OPL2_REG_REGION
.3936e7		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.3936ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3936ec		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3936ee		29 0f		and #$0f	                AND #$0F
.3936f0		85 32		sta $32		                STA OPL2_PARAMETER0
.3936f2		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3936f4		29 f0		and #$f0	                AND #$F0
.3936f6		05 32		ora $32		                ORA OPL2_PARAMETER0
.3936f8		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3936fa		6b		rtl		                RTL
.3936fb						OPL2_GET_RELEASE
.3936fb		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3936fe		2b		pld		                PLD
.3936ff		c2 20		rep #$20	                REP #$20        ; set A long
.393701		a9 80 00	lda #$0080	                LDA #$0080
.393704		85 28		sta $28		                STA OPL2_REG_REGION
.393706		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.393709		e2 20		sep #$20	                SEP #$20        ; set A short
.39370b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39370d		29 0f		and #$0f	                AND #$0F
.39370f		6b		rtl		                RTL
.393710						OPL2_SET_FNUMBER
.393710		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393713		2b		pld		                PLD
.393714		e2 20		sep #$20	                SEP #$20        ; set A short
.393716		18		clc		                CLC
.393717		a5 27		lda $27		                LDA OPL2_CHANNEL
.393719		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.39371b		69 a0		adc #$a0	                ADC #$A0
.39371d		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39371f		a9 00		lda #$00	                LDA #$00
.393721		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393723		c2 30		rep #$30	                REP #$30        ; set A&X long
.393725		18		clc		                CLC
.393726		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393729		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.39372b		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39372d		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393730		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393732		e2 20		sep #$20	                SEP #$20        ; set A short
.393734		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393736		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393738		18		clc		                CLC
.393739		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.39373b		69 10		adc #$10	                ADC #$10
.39373d		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39373f		a5 33		lda $33		                LDA OPL2_PARAMETER1
.393741		29 03		and #$03	                AND #$03
.393743		85 33		sta $33		                STA OPL2_PARAMETER1
.393745		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393747		29 fc		and #$fc	                AND #$FC
.393749		05 33		ora $33		                ORA OPL2_PARAMETER1
.39374b		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39374d		6b		rtl		                RTL
.39374e						OPL2_GET_FNUMBER
.39374e		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393751		2b		pld		                PLD
.393752		e2 20		sep #$20	                SEP #$20        ; set A short
.393754		18		clc		                CLC
.393755		a5 27		lda $27		                LDA OPL2_CHANNEL
.393757		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393759		69 a0		adc #$a0	                ADC #$A0
.39375b		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39375d		a9 00		lda #$00	                LDA #$00
.39375f		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393761		c2 30		rep #$30	                REP #$30        ; set A&X long
.393763		18		clc		                CLC
.393764		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393767		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393769		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39376b		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.39376e		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393770		e2 20		sep #$20	                SEP #$20        ; set A short
.393772		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393774		85 32		sta $32		                STA OPL2_PARAMETER0
.393776		18		clc		                CLC
.393777		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393779		69 10		adc #$10	                ADC #$10
.39377b		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39377d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39377f		29 03		and #$03	                AND #$03
.393781		85 33		sta $33		                STA OPL2_PARAMETER1
.393783		6b		rtl		                RTL
.393784						OPL2_Set_Frequency
.393784		6b		rtl		                RTL
.393785						OPL2_Get_Frequency
.393785		6b		rtl		                RTL
.393786						OPL2_SET_BLOCK
.393786		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393789		2b		pld		                PLD
.39378a		e2 20		sep #$20	                SEP #$20        ; set A short
.39378c		18		clc		                CLC
.39378d		a5 27		lda $27		                LDA OPL2_CHANNEL
.39378f		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393791		69 b0		adc #$b0	                ADC #$B0
.393793		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393795		a9 00		lda #$00	                LDA #$00
.393797		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393799		c2 30		rep #$30	                REP #$30        ; set A&X long
.39379b		18		clc		                CLC
.39379c		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.39379f		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3937a1		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3937a3		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3937a6		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3937a8		e2 20		sep #$20	                SEP #$20        ; set A short
.3937aa		a5 31		lda $31		                LDA OPL2_OCTAVE
.3937ac		29 07		and #$07	                AND #$07
.3937ae		0a		asl a		                ASL
.3937af		0a		asl a		                ASL
.3937b0		85 31		sta $31		                STA OPL2_OCTAVE
.3937b2		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3937b4		29 e3		and #$e3	                AND #$E3
.3937b6		05 31		ora $31		                ORA OPL2_OCTAVE
.3937b8		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3937ba		60		rts		                RTS
.3937bb						OPL2_SET_KEYON
.3937bb		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3937be		2b		pld		                PLD
.3937bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3937c1		18		clc		                CLC
.3937c2		a5 27		lda $27		                LDA OPL2_CHANNEL
.3937c4		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.3937c6		69 b0		adc #$b0	                ADC #$B0
.3937c8		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3937ca		a9 00		lda #$00	                LDA #$00
.3937cc		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3937ce		c2 30		rep #$30	                REP #$30        ; set A&X long
.3937d0		18		clc		                CLC
.3937d1		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.3937d4		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3937d6		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3937d8		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3937db		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3937dd		e2 20		sep #$20	                SEP #$20        ; set A short
.3937df		a5 32		lda $32		                LDA OPL2_PARAMETER0
.3937e1		29 01		and #$01	                AND #$01
.3937e3		f0 02		beq $3937e7	                BEQ SET_KEYON_OFF
.3937e5		a9 20		lda #$20	                LDA #$20
.3937e7						    SET_KEYON_OFF
.3937e7		85 32		sta $32		                STA OPL2_PARAMETER0
.3937e9		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3937eb		29 df		and #$df	                AND #$DF
.3937ed		05 32		ora $32		                ORA OPL2_PARAMETER0
.3937ef		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3937f1		60		rts		                RTS
.3937f2						OPL2_SET_FEEDBACK
.3937f2		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3937f5		2b		pld		                PLD
.3937f6		e2 20		sep #$20	                SEP #$20        ; set A short
.3937f8		18		clc		              CLC
.3937f9		a5 27		lda $27		              LDA OPL2_CHANNEL
.3937fb		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3937fd		69 c0		adc #$c0	              ADC #$C0
.3937ff		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393801		a9 00		lda #$00	              LDA #$00
.393803		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393805		c2 30		rep #$30	                REP #$30        ; set A&X long
.393807		18		clc		              CLC
.393808		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39380b		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39380d		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39380f		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393812		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393814		e2 20		sep #$20	                SEP #$20        ; set A short
.393816		a5 32		lda $32		              LDA OPL2_PARAMETER0
.393818		29 07		and #$07	              AND #$07
.39381a		0a		asl a		              ASL
.39381b		85 32		sta $32		              STA OPL2_PARAMETER0
.39381d		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39381f		29 01		and #$01	              AND #$01
.393821		05 32		ora $32		              ORA OPL2_PARAMETER0
.393823		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393825		6b		rtl		                RTL
.393826						OPL2_SET_SYNTHMODE
.393826		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393829		2b		pld		                PLD
.39382a		08		php		              PHP ; Push the Carry
.39382b		e2 20		sep #$20	                SEP #$20        ; set A short
.39382d		18		clc		              CLC
.39382e		a5 27		lda $27		              LDA OPL2_CHANNEL
.393830		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393832		69 c0		adc #$c0	              ADC #$C0
.393834		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393836		a9 00		lda #$00	              LDA #$00
.393838		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39383a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39383c		18		clc		              CLC
.39383d		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393840		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393842		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393844		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393847		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393849		28		plp		              PLP ; Pull the Carry out
.39384a		e2 20		sep #$20	                SEP #$20        ; set A short
.39384c		b0 08		bcs $393856	              BCS OPL2_Set_Synthmode_Set;
.39384e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393850		29 fe		and #$fe	              AND #$FE
.393852		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393854		80 06		bra $39385c	              BRA OPL2_Set_Synthmode_Exit
.393856						OPL2_Set_Synthmode_Set
.393856		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393858		09 01		ora #$01	              ORA #$01
.39385a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39385c						OPL2_Set_Synthmode_Exit
.39385c		6b		rtl		                RTL
.39385d						OPL2_SET_DEEPTREMOLO
.39385d		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393860		2b		pld		                PLD
.393861		c2 20		rep #$20	                REP #$20        ; set A long
.393863		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393866		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393868		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39386b		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39386d		e2 20		sep #$20	                SEP #$20        ; set A short
.39386f		b0 08		bcs $393879	              BCS OPL2_Set_DeepTremolo_Set;
.393871		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393873		29 7f		and #$7f	              AND #$7F
.393875		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393877		80 06		bra $39387f	              BRA OPL2_Set_DeepTremolo_Exit
.393879						OPL2_Set_DeepTremolo_Set
.393879		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39387b		09 80		ora #$80	              ORA #$80
.39387d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39387f						OPL2_Set_DeepTremolo_Exit
.39387f		6b		rtl		                RTL
.393880						OPL2_SET_DEEPVIBRATO
.393880		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393883		2b		pld		                PLD
.393884		c2 20		rep #$20	                REP #$20        ; set A long
.393886		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393889		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39388b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39388e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393890		e2 20		sep #$20	                SEP #$20        ; set A short
.393892		b0 08		bcs $39389c	              BCS OPL2_Set_DeepVibrato_Set;
.393894		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393896		29 bf		and #$bf	              AND #$BF
.393898		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39389a		80 06		bra $3938a2	              BRA OPL2_Set_DeepVibrato_Exit
.39389c						OPL2_Set_DeepVibrato_Set
.39389c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39389e		09 40		ora #$40	              ORA #$40
.3938a0		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938a2						OPL2_Set_DeepVibrato_Exit
.3938a2		6b		rtl		                RTL
.3938a3						OPL2_SET_PERCUSSION
.3938a3		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3938a6		2b		pld		                PLD
.3938a7		c2 20		rep #$20	                REP #$20        ; set A long
.3938a9		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.3938ac		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3938ae		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3938b1		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3938b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3938b5		b0 08		bcs $3938bf	                BCS OPL2_Set_Percussion_Set;
.3938b7		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938b9		29 df		and #$df	                AND #$DF
.3938bb		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3938bd		80 06		bra $3938c5	                BRA OPL2_Set_Percussion_Exit
.3938bf						OPL2_Set_Percussion_Set
.3938bf		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938c1		09 20		ora #$20	                ORA #$20
.3938c3		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3938c5						OPL2_Set_Percussion_Exit
.3938c5		6b		rtl		                RTL
.3938c6						OPL2_SET_DRUMS
.3938c6		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3938c9		2b		pld		                PLD
.3938ca		c2 20		rep #$20	                REP #$20        ; set A long
.3938cc		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.3938cf		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3938d1		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3938d4		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3938d6		e2 20		sep #$20	                SEP #$20        ; set A short
.3938d8		a5 32		lda $32		                LDA OPL2_PARAMETER0
.3938da		29 1f		and #$1f	                AND #$1F
.3938dc		85 32		sta $32		                STA OPL2_PARAMETER0
.3938de		49 ff		eor #$ff	                EOR #$FF
.3938e0		85 33		sta $33		                STA OPL2_PARAMETER1
.3938e2		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938e4		25 33		and $33		                AND OPL2_PARAMETER1
.3938e6		05 32		ora $32		                ORA OPL2_PARAMETER0
.3938e8		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3938ea		6b		rtl		                RTL
.3938eb						OPL2_SET_WAVEFORM
.3938eb		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3938ee		2b		pld		                PLD
.3938ef		c2 20		rep #$20	                REP #$20        ; set A long
.3938f1		a9 e0 00	lda #$00e0	                LDA #$00E0;
.3938f4		85 28		sta $28		                STA OPL2_REG_REGION
.3938f6		20 0a 39	jsr $39390a	                JSR OPL2_GET_REG_OFFSET
.3938f9		e2 20		sep #$20	                SEP #$20        ; set A short
.3938fb		a5 32		lda $32		                LDA OPL2_PARAMETER0
.3938fd		29 03		and #$03	                AND #$03
.3938ff		85 32		sta $32		                STA OPL2_PARAMETER0
.393901		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393903		29 fc		and #$fc	                AND #$FC
.393905		05 32		ora $32		                ORA OPL2_PARAMETER0
.393907		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393909		6b		rtl		                RTL
.39390a						OPL2_GET_REG_OFFSET
.39390a		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39390c		a5 27		lda $27		                LDA OPL2_CHANNEL
.39390e		29 0f		and #$0f	                AND #$0F
.393910		aa		tax		                TAX
.393911		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.393913		d0 06		bne $39391b	                BNE OPL2_Get_Register_Offset_l0
.393915		bf 73 10 39	lda $391073,x	                LDA @lregisterOffsets_operator0, X
.393919		80 04		bra $39391f	                BRA OPL2_Get_Register_Offset_exit
.39391b						OPL2_Get_Register_Offset_l0
.39391b		bf 7c 10 39	lda $39107c,x	                LDA @lregisterOffsets_operator1, X
.39391f						OPL2_Get_Register_Offset_exit
.39391f		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393921		a9 00		lda #$00	                LDA #$00
.393923		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393925		c2 30		rep #$30	                REP #$30        ; set A&X long
.393927		18		clc		                CLC
.393928		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.39392b		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.39392d		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.39392f		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393931		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393934		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393936		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SDCard_Controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\SDOS.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.393937						ITRACE
.393937		08		php		                PHP
.393938		c2 30		rep #$30	                REP #$30        ; set A&X long
.39393a		8b		phb		                PHB                 ; Print the text
.39393b		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.39393d		aa		tax		                TAX                 ; ... into X
.39393e		e2 20		sep #$20	                SEP #$20        ; set A short
.393940		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.393942		48		pha		                PHA
.393943		ab		plb		                PLB                 ; ... into B
.393944		22 e9 06 39	jsl $3906e9	                JSL IPUTS           ; Print the string
.393948		c2 20		rep #$20	                REP #$20        ; set A long
.39394a		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.39394c		83 08		sta $08,s	                STA #8,S
.39394e		a3 02		lda $02,s	                LDA #2,S
.393950		83 06		sta $06,s	                STA #6,S
.393952		ab		plb		                PLB
.393953		68		pla		                PLA                 ; Clean up the stack
.393954		68		pla		                PLA
.393955		28		plp		                PLP
.393956		6b		rtl		                RTL
.393957						ISETTIMEOUT
.393957		8b		phb		                PHB
.393958		0b		phd		                PHD
.393959		08		php		                PHP
.39395a		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.39395d		ab		plb		                PLB
.39395e		ab		plb		                PLB
.39395f		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393962		2b		pld		                PLD
.393963		78		sei		                SEI                             ; We don't want to be interrupted
.393964		e2 20		sep #$20	                SEP #$20        ; set A short
.393966		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.393968		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.39396a		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.39396c		85 0c		sta $032c	                STA @b BIOS_FLAGS
.39396e		28		plp		done            PLP
.39396f		2b		pld		                PLD
.393970		ab		plb		                PLB
.393971		6b		rtl		                RTL
.393972						ICMDBLOCK
.393972		0b		phd		                PHD
.393973		08		php		                PHP
.393974		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393977		2b		pld		                PLD
.393978		e2 20		sep #$20	                SEP #$20        ; set A short
.39397a		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.39397c		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.39397e		d0 06		bne $393986	                BNE ret_success             ; No: just return
.393980		22 fc 5e 39	jsl $395efc	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.393984		90 0c		bcc $393992	                BCC pass_failure
.393986						ret_success
.393986		e2 20		sep #$20	                SEP #$20        ; set A short
.393988		64 00		stz $0320	                STZ BIOS_STATUS
.39398a		28		plp		                PLP
.39398b		2b		pld		                PLD
.39398c		38		sec		                SEC
.39398d		6b		rtl		                RTL
.39398e						ret_failure
.39398e		e2 20		sep #$20	                SEP #$20        ; set A short
.393990		85 00		sta $0320	                STA BIOS_STATUS
.393992		28		plp		pass_failure    PLP
.393993		2b		pld		                PLD
.393994		18		clc		                CLC
.393995		6b		rtl		                RTL
.393996						IGETBLOCK
.393996		5a		phy		                PHY
.393997		0b		phd		                PHD
.393998		8b		phb		                PHB
.393999		08		php		                PHP
.39399a		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.39399d		ab		plb		                PLB
.39399e		ab		plb		                PLB
.39399f		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3939a2		2b		pld		                PLD
.3939a3		e2 20		sep #$20	                SEP #$20        ; set A short
.3939a5		a0 00 00	ldy #$0000	                LDY #0
.3939a8		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.3939aa		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.3939ac		c8		iny		                INY
.3939ad		c0 00 02	cpy #$0200	                CPY #512
.3939b0		d0 f8		bne $3939aa	                BNE clr_loop
.3939b2		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.3939b4		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.3939b6		f0 10		beq $3939c8	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.3939b8		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.3939ba		f0 14		beq $3939d0	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.3939bc		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.3939be		f0 18		beq $3939d8	                BEQ hd_getblock
.3939c0		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.3939c2		28		plp		ret_failure     PLP
.3939c3		ab		plb		                PLB
.3939c4		2b		pld		                PLD
.3939c5		7a		ply		                PLY
.3939c6		38		sec		                SEC                                 ; Return failure
.3939c7		6b		rtl		                RTL
.3939c8		22 e1 54 39	jsl $3954e1	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.3939cc		b0 12		bcs $3939e0	                BCS ret_success
.3939ce		80 f2		bra $3939c2	                BRA ret_failure
.3939d0		22 22 5d 39	jsl $395d22	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.3939d4		b0 0a		bcs $3939e0	                BCS ret_success
.3939d6		80 ea		bra $3939c2	                BRA ret_failure
.3939d8		22 b6 62 39	jsl $3962b6	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.3939dc		b0 02		bcs $3939e0	                BCS ret_success
.3939de		80 e2		bra $3939c2	                BRA ret_failure
.3939e0						ret_success
.3939e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3939e2		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.3939e4		28		plp		                PLP
.3939e5		ab		plb		                PLB
.3939e6		2b		pld		                PLD
.3939e7		7a		ply		                PLY
.3939e8		38		sec		                SEC                                 ; Return success
.3939e9		6b		rtl		                RTL
.3939ea						IPUTBLOCK
.3939ea		0b		phd		                PHD
.3939eb		8b		phb		                PHB
.3939ec		08		php		                PHP
.3939ed		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3939f0		ab		plb		                PLB
.3939f1		ab		plb		                PLB
.3939f2		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3939f5		2b		pld		                PLD
.3939f6		e2 20		sep #$20	                SEP #$20        ; set A short
.3939f8		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.3939fa		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.3939fc		f0 0f		beq $393a0d	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.3939fe		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.393a00		f0 13		beq $393a15	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.393a02		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393a04		f0 17		beq $393a1d	                BEQ hd_putblock
.393a06		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393a08		28		plp		ret_failure     PLP
.393a09		ab		plb		                PLB
.393a0a		2b		pld		                PLD
.393a0b		18		clc		                CLC                                 ; Return failure
.393a0c		6b		rtl		                RTL
.393a0d		22 73 55 39	jsl $395573	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.393a11		90 f5		bcc $393a08	                BCC ret_failure
.393a13		80 10		bra $393a25	                BRA ret_success
.393a15		22 7c 5d 39	jsl $395d7c	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.393a19		90 ed		bcc $393a08	                BCC ret_failure
.393a1b		80 08		bra $393a25	                BRA ret_success
.393a1d		22 36 63 39	jsl $396336	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.393a21		90 e5		bcc $393a08	                BCC ret_failure
.393a23		80 00		bra $393a25	                BRA ret_success
.393a25						ret_success
.393a25		e2 20		sep #$20	                SEP #$20        ; set A short
.393a27		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393a29		28		plp		                PLP
.393a2a		ab		plb		                PLB
.393a2b		2b		pld		                PLD
.393a2c		38		sec		                SEC                                 ; Return success
.393a2d		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.393a2e						DOS_DIROPEN
.393a2e		da		phx		                PHX
.393a2f		5a		phy		                PHY
.393a30		0b		phd		                PHD
.393a31		8b		phb		                PHB
.393a32		08		php		                PHP
.393a33		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.393a36		ab		plb		                PLB
.393a37		ab		plb		                PLB
.393a38		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393a3b		2b		pld		                PLD
.393a3c		c2 20		rep #$20	                REP #$20        ; set A long
.393a3e		ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.393a41		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.393a44		ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.393a47		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393a4a		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.393a4d		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393a4f		85 18		sta $0338	                STA DOS_DIR_PTR
.393a51		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393a54		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393a56		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393a58		e2 20		sep #$20	                SEP #$20        ; set A short
.393a5a		ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.393a5d		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.393a5f		d0 24		bne $393a85	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.393a61						fetch_fat12
.393a61		e2 20		sep #$20	                SEP #$20        ; set A short
.393a63		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.393a65		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.393a68		c2 20		rep #$20	                REP #$20        ; set A long
.393a6a		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.393a6c		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393a6e		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.393a70		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393a72		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.393a75		85 02		sta $0322	                STA BIOS_LBA
.393a77		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393a7a		85 04		sta $0324	                STA BIOS_LBA+2
.393a7c		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.393a80		b0 1f		bcs $393aa1	                BCS do_success              ; If sucessful, set the directory cursor
.393a82		82 68 16	brl $3950ed	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393a85						fetch_fat32
.393a85		e2 20		sep #$20	                SEP #$20        ; set A short
.393a87		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.393a89		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.393a8c		c2 20		rep #$20	                REP #$20        ; set A long
.393a8e		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.393a91		85 10		sta $0330	                STA DOS_CLUS_ID
.393a93		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393a96		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393a98		22 9f 3f 39	jsl $393f9f	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.393a9c		b0 03		bcs $393aa1	                BCS do_success              ; If successful: set the directory cursor
.393a9e		82 4c 16	brl $3950ed	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393aa1		82 50 16	brl $3950f4	do_success      BRL IF_SUCCESS
.393aa4						DOS_DIRFIRST
.393aa4		0b		phd		                PHD
.393aa5		08		php		                PHP
.393aa6		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393aa9		2b		pld		                PLD
.393aaa		c2 20		rep #$20	                REP #$20        ; set A long
.393aac		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.393aaf		85 18		sta $0338	                STA DOS_DIR_PTR
.393ab1		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393ab4		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393ab6		28		plp		                PLP
.393ab7		2b		pld		                PLD
.393ab8		6b		rtl		                RTL
.393ab9						DOS_DIRNEXT
.393ab9		da		phx		                PHX
.393aba		5a		phy		                PHY
.393abb		0b		phd		                PHD
.393abc		8b		phb		                PHB
.393abd		08		php		                PHP
.393abe		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.393ac1		ab		plb		                PLB
.393ac2		ab		plb		                PLB
.393ac3		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393ac6		2b		pld		                PLD
.393ac7		c2 20		rep #$20	                REP #$20        ; set A long
.393ac9		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.393aca		a5 18		lda $0338	                LDA DOS_DIR_PTR
.393acc		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.393acf		85 18		sta $0338	                STA DOS_DIR_PTR
.393ad1		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.393ad3		69 00 00	adc #$0000	                ADC #0
.393ad6		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393ad8		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.393ad9		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.393adc		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.393ade		85 28		sta $0348	                STA DOS_TEMP
.393ae0		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.393ae3		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.393ae5		85 2a		sta $034a	                STA DOS_TEMP+2
.393ae7		30 0c		bmi $393af5	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.393ae9		f0 03		beq $393aee	                BEQ check_lower
.393aeb		82 06 16	brl $3950f4	                BRL IF_SUCCESS
.393aee		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.393af0		f0 03		beq $393af5	                BEQ get_next_block
.393af2		82 ff 15	brl $3950f4	                BRL IF_SUCCESS
.393af5						get_next_block
.393af5		e2 20		sep #$20	                SEP #$20        ; set A short
.393af7		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.393afa		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.393afc		f0 38		beq $393b36	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.393afe						next_sector
.393afe		c2 20		rep #$20	                REP #$20        ; set A long
.393b00		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.393b03		1a		inc a		                INC A
.393b04		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.393b07		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.393b0a		d0 07		bne $393b13	                BNE read_sector
.393b0c		e2 20		sep #$20	                SEP #$20        ; set A short
.393b0e		a9 00		lda #$00	                LDA #0
.393b10		82 d6 15	brl $3950e9	                BRL IF_FAILURE
.393b13						read_sector
.393b13		c2 20		rep #$20	                REP #$20        ; set A long
.393b15		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.393b18		85 02		sta $0322	                STA BIOS_LBA
.393b1a		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393b1d		85 04		sta $0324	                STA BIOS_LBA+2
.393b1f		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.393b22		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393b24		85 18		sta $0338	                STA DOS_DIR_PTR
.393b26		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393b29		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393b2b		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393b2d		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.393b31		b0 39		bcs $393b6c	                BCS do_success              ; If successful: set the directory cursor
.393b33		82 b7 15	brl $3950ed	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393b36						next_cluster
.393b36		c2 20		rep #$20	                REP #$20        ; set A long
.393b38		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.393b3b		85 10		sta $0330	                STA DOS_CLUS_ID
.393b3d		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393b40		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393b42		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.393b45		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393b47		85 18		sta $0338	                STA DOS_DIR_PTR
.393b49		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393b4c		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393b4e		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393b50		22 45 43 39	jsl $394345	                JSL NEXTCLUSTER             ; Try to find the next cluster
.393b54		b0 03		bcs $393b59	                BCS set_next
.393b56		82 94 15	brl $3950ed	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.393b59		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.393b5b		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.393b5e		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.393b60		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393b63		22 9f 3f 39	jsl $393f9f	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.393b67		b0 03		bcs $393b6c	                BCS do_success              ; If successful: set the directory cursor
.393b69		82 81 15	brl $3950ed	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393b6c		82 85 15	brl $3950f4	do_success      BRL IF_SUCCESS
.393b6f						DOS_DIRFINDFREE
.393b6f		da		phx		                PHX
.393b70		5a		phy		                PHY
.393b71		0b		phd		                PHD
.393b72		8b		phb		                PHB
.393b73		08		php		                PHP
.393b74		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.393b77		ab		plb		                PLB
.393b78		ab		plb		                PLB
.393b79		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393b7c		2b		pld		                PLD
.393b7d		22 79 4c 39	jsl $394c79	                JSL IF_DIROPEN
.393b81		b0 06		bcs $393b89	                BCS start_walk
.393b83		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.393b86		82 28 00	brl $393bb1	                BRL ret_failure
.393b89		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.393b8c						chk_entry
.393b8c		e2 20		sep #$20	                SEP #$20        ; set A short
.393b8e		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.393b90		f0 1c		beq $393bae	                BEQ ret_success             ; If 0: we have a blank... return it
.393b92		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.393b94		f0 18		beq $393bae	                BEQ ret_success             ; Yes: return it
.393b96		22 a8 4c 39	jsl $394ca8	                JSL IF_DIRNEXT              ; Go to the next directory entry
.393b9a		b0 ed		bcs $393b89	                BCS start_walk              ; If we got one, start walking it
.393b9c		22 b4 3b 39	jsl $393bb4	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.393ba0		90 0f		bcc $393bb1	                BCC ret_failure             ; If that didn't work, return the failure
.393ba2		c2 20		rep #$20	                REP #$20        ; set A long
.393ba4		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.393ba7		85 18		sta $0338	                STA DOS_DIR_PTR
.393ba9		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393bac		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393bae		82 43 15	brl $3950f4	ret_success     BRL IF_SUCCESS
.393bb1		82 35 15	brl $3950e9	ret_failure     BRL IF_FAILURE
.393bb4						DOS_DIRAPPEND
.393bb4		da		phx		                PHX
.393bb5		8b		phb		                PHB
.393bb6		0b		phd		                PHD
.393bb7		08		php		                PHP
.393bb8		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.393bbb		ab		plb		                PLB
.393bbc		ab		plb		                PLB
.393bbd		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393bc0		2b		pld		                PLD
.393bc1		e2 20		sep #$20	                SEP #$20        ; set A short
.393bc3		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.393bc6		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.393bc8		f0 09		beq $393bd3	                BEQ clr_sector                  ; Yes: clear out the directory data
.393bca						ret_failure
.393bca		e2 20		sep #$20	                SEP #$20        ; set A short
.393bcc		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.393bce		85 0e		sta $032e	                STA DOS_STATUS
.393bd0		82 3e 00	brl $393c11	                BRL pass_failure
.393bd3						clr_sector
.393bd3		c2 20		rep #$20	                REP #$20        ; set A long
.393bd5		a9 00 00	lda #$0000	                LDA #0
.393bd8		a2 00 00	ldx #$0000	                LDX #0
.393bdb		9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.393bde		e8		inx		                INX
.393bdf		e8		inx		                INX
.393be0		e0 00 02	cpx #$0200	                CPX #512
.393be3		d0 f6		bne $393bdb	                BNE clr_loop
.393be5		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.393be8		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393bea		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393bed		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393bef		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.393bf2		85 10		sta $0330	                STA DOS_CLUS_ID
.393bf4		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393bf7		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393bf9		22 08 47 39	jsl $394708	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.393bfd		90 12		bcc $393c11	                BCC pass_failure                ; If there was an error, pass it up the chain
.393bff		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.393c02		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.393c05		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.393c08		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393c0b		28		plp		ret_success     PLP
.393c0c		2b		pld		                PLD
.393c0d		ab		plb		                PLB
.393c0e		fa		plx		                PLX
.393c0f		38		sec		                SEC
.393c10		6b		rtl		                RTL
.393c11		28		plp		pass_failure    PLP
.393c12		2b		pld		                PLD
.393c13		ab		plb		                PLB
.393c14		fa		plx		                PLX
.393c15		18		clc		                CLC
.393c16		6b		rtl		                RTL
.393c17						DOS_DIRWRITE
.393c17		da		phx		                PHX
.393c18		5a		phy		                PHY
.393c19		0b		phd		                PHD
.393c1a		8b		phb		                PHB
.393c1b		08		php		                PHP
.393c1c		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.393c1f		ab		plb		                PLB
.393c20		ab		plb		                PLB
.393c21		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393c24		2b		pld		                PLD
.393c25		e2 20		sep #$20	                SEP #$20        ; set A short
.393c27		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.393c2a		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.393c2c		f0 1f		beq $393c4d	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.393c2e						write_sector
.393c2e		c2 20		rep #$20	                REP #$20        ; set A long
.393c30		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.393c33		85 02		sta $0322	                STA BIOS_LBA
.393c35		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393c38		85 04		sta $0324	                STA BIOS_LBA+2
.393c3a		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.393c3d		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393c3f		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393c42		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393c44		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.393c48		b0 1f		bcs $393c69	                BCS ret_success
.393c4a		82 9c 14	brl $3950e9	ret_failure     BRL IF_FAILURE
.393c4d						write_cluster
.393c4d		c2 20		rep #$20	                REP #$20        ; set A long
.393c4f		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.393c52		85 10		sta $0330	                STA DOS_CLUS_ID
.393c54		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393c57		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393c59		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.393c5c		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393c5e		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393c61		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393c63		22 d1 3f 39	jsl $393fd1	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.393c67		90 e1		bcc $393c4a	                BCC ret_failure
.393c69		82 88 14	brl $3950f4	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=24						DOS_ERR_EOF = 24                        ; At end of file
=25						DOS_ERR_PGZSIG = 25                     ; File does not have the PGZ signature
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\Includes/sdos_fat_vars_user_inc.asm

=$38a000					    DOS_HIGH_VARIABLES      = $38A000
=$38a000					    DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001					    FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002					    PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003					    SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004					    FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008					    SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c					    NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e					    CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010					    SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014					    FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018					    FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c					    CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020					    ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024					    ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026					    VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a					    DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e					    DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032					    DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036					    DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a					    DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045					    DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046					    DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a					    DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e					    FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050					    DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100					    DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300					    DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300					    DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500					    DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500					    DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900					    DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900					    DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00					    DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00					    DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00					    DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00					    DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000					    DOS_FILE_BUFFS          = $38B000
=3719168					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.393c6c						DOS_INIT
.393c6c		8b		phb		                PHB
.393c6d		0b		phd		                PHD
.393c6e		08		php		                PHP
.393c6f		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.393c72		ab		plb		                PLB
.393c73		ab		plb		                PLB
.393c74		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393c77		2b		pld		                PLD
.393c78		e2 20		sep #$20	                SEP #$20        ; set A short
.393c7a		c2 10		rep #$10	                REP #$10        ; set X long
.393c7c		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.393c7f		a9 00		lda #$00	                LDA #0
.393c81		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.393c84		e8		inx		                INX
.393c85		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.393c88		d0 f7		bne $393c81	                BNE b0_clr_loop
.393c8a		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.393c8d		ab		plb		                PLB
.393c8e		ab		plb		                PLB
.393c8f		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393c92		2b		pld		                PLD
.393c93		e2 20		sep #$20	                SEP #$20        ; set A short
.393c95		c2 10		rep #$10	                REP #$10        ; set X long
.393c97		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.393c9a		a9 00		lda #$00	                LDA #0
.393c9c		9d 00 a0	sta $38a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.393c9f		e8		inx		                INX
.393ca0		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.393ca3		d0 f7		bne $393c9c	                BNE b38_clr_loop
.393ca5		c2 20		rep #$20	                REP #$20        ; set A long
.393ca7		a9 1e 40	lda #$401e	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.393caa		8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.393cae		a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.393cb1		8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.393cb5		e2 20		sep #$20	                SEP #$20        ; set A short
.393cb7		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.393cb9		85 01		sta $0321	                STA BIOS_DEV
.393cbb		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.393cbd		8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.393cc1		a9 00		lda #$00	                LDA #0
.393cc3		a2 00 00	ldx #$0000	                LDX #0
.393cc6		9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.393cc9		e8		inx		                INX
.393cca		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.393ccd		d0 f7		bne $393cc6	                BNE fd_zero_loop
.393ccf		a9 00		lda #$00	                LDA #0
.393cd1		a2 00 00	ldx #$0000	                LDX #0
.393cd4		9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.393cd7		e8		inx		                INX
.393cd8		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.393cdb		d0 f7		bne $393cd4	                BNE sect_zero_loop
.393cdd		c2 20		rep #$20	                REP #$20        ; set A long
.393cdf		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.393ce2		85 20		sta $0340	                STA @b DOS_FD_PTR
.393ce4		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.393ce7		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.393ce9		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.393cec		85 28		sta $0348	                STA @b DOS_TEMP
.393cee		a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.393cf1		85 2a		sta $034a	                STA @b DOS_TEMP+2
.393cf3		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.393cf6		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.393cf9		a5 28		lda $0348	                LDA @b DOS_TEMP
.393cfb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.393cfd		c8		iny		                INY
.393cfe		c8		iny		                INY
.393cff		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.393d01		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.393d03		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.393d04		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.393d06		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.393d09		85 20		sta $0340	                STA @b DOS_FD_PTR
.393d0b		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.393d0d		69 00 00	adc #$0000	                ADC #0
.393d10		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.393d12		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.393d13		a5 28		lda $0348	                LDA @b DOS_TEMP
.393d15		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.393d18		85 28		sta $0348	                STA @b DOS_TEMP
.393d1a		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.393d1c		69 00 00	adc #$0000	                ADC #0
.393d1f		85 2a		sta $034a	                STA @b DOS_TEMP+2
.393d21		ca		dex		                DEX                     ; Count down the descriptors...
.393d22		d0 d2		bne $393cf6	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.393d24		28		plp		                PLP
.393d25		2b		pld		                PLD
.393d26		ab		plb		                PLB
.393d27		6b		rtl		                RTL
.393d28						DOS_MOUNT
.393d28		8b		phb		                PHB
.393d29		0b		phd		                PHD
.393d2a		08		php		                PHP
.393d2b		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.393d2e		ab		plb		                PLB
.393d2f		ab		plb		                PLB
.393d30		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393d33		2b		pld		                PLD
.393d34		e2 20		sep #$20	                SEP #$20        ; set A short
.393d36		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.393d38		8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.393d3c		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.393d3e		f0 1f		beq $393d5f	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.393d40		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.393d42		f0 26		beq $393d6a	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.393d44		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.393d46		f0 0b		beq $393d53	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.393d48		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.393d4a		85 0e		sta $032e	                STA DOS_STATUS
.393d4c		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.393d4e		85 00		sta $0320	                STA BIOS_STATUS
.393d50		82 7c 01	brl $393ecf	                BRL ret_failure
.393d53		22 dd 5d 39	jsl $395ddd	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.393d57		b0 03		bcs $393d5c	                BCS fdc_success
.393d59		82 73 01	brl $393ecf	                BRL ret_failure
.393d5c		82 67 01	brl $393ec6	fdc_success     BRL ret_success
.393d5f		22 aa 54 39	jsl $3954aa	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.393d63		b0 10		bcs $393d75	                BCS get_mbr             ; Continue if success
.393d65		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.393d67		82 65 01	brl $393ecf	                BRL ret_failure
.393d6a		22 c6 61 39	jsl $3961c6	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.393d6e		b0 05		bcs $393d75	                BCS get_mbr             ; Continue if success
.393d70		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.393d72		82 5a 01	brl $393ecf	                BRL ret_failure
.393d75						get_mbr
.393d75		c2 30		rep #$30	                REP #$30        ; set A&X long
.393d77		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.393d79		64 04		stz $0324	                STZ BIOS_LBA+2
.393d7b		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.393d7e		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393d80		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.393d83		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393d85		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.393d89		b0 07		bcs $393d92	                BCS chk_signature       ; If success, check the signature bytes
.393d8b		e2 20		sep #$20	                SEP #$20        ; set A short
.393d8d		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.393d8f		82 3d 01	brl $393ecf	                BRL ret_failure
.393d92						chk_signature
.393d92		e2 20		sep #$20	                SEP #$20        ; set A short
.393d94		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.393d97		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.393d99		d0 07		bne $393da2	                BNE not_mbr             ; No: signal we could find the MBR
.393d9b		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.393d9e		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.393da0		f0 05		beq $393da7	                BEQ chk_part_type       ; Yes: we have an MBR
.393da2		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.393da4		82 28 01	brl $393ecf	                BRL ret_failure
.393da7		ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.393daa		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.393dac		f0 05		beq $393db3	                BEQ get_LBA             ; Is FAT32 with LBA?
.393dae		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.393db0		82 1c 01	brl $393ecf	                BRL ret_failure
.393db3		8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.393db6		c2 20		rep #$20	                REP #$20        ; set A long
.393db8		ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.393dbb		8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.393dbe		ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.393dc1		8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.393dc4		ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.393dc7		8d 08 a0	sta $38a008	                STA SECTORCOUNT
.393dca		ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.393dcd		8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.393dd0		e2 20		sep #$20	                SEP #$20        ; set A short
.393dd2		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.393dd4		8d 00 a0	sta $38a000	                STA DEVICE
.393dd7		a9 00		lda #$00	                LDA #0
.393dd9		8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.393ddc		c2 20		rep #$20	                REP #$20        ; set A long
.393dde		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.393de1		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393de3		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.393de6		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393de8		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.393deb		85 02		sta $0322	                STA BIOS_LBA
.393ded		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.393df0		85 04		sta $0324	                STA BIOS_LBA+2
.393df2		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.393df6		b0 1c		bcs $393e14	                BCS get_first_sec       ; Got it? Start parsing it
.393df8		e2 20		sep #$20	                SEP #$20        ; set A short
.393dfa		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.393dfc		82 d0 00	brl $393ecf	                BRL ret_failure
.393dff						chk_bpb_sig
.393dff		e2 20		sep #$20	                SEP #$20        ; set A short
.393e01		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.393e04		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.393e06		d0 07		bne $393e0f	                BNE not_bpb             ; No: signal we could find the volume ID
.393e08		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.393e0b		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.393e0d		f0 05		beq $393e14	                BEQ get_first_sec       ; Yes: we have an volume ID
.393e0f		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.393e11		82 bb 00	brl $393ecf	                BRL ret_failure
.393e14						get_first_sec
.393e14		c2 20		rep #$20	                REP #$20        ; set A long
.393e16		ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.393e19		8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.393e1c		ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.393e1f		8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.393e22		ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.393e25		8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.393e28		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.393e29		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.393e2c		6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.393e2f		8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.393e32		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.393e35		69 00 00	adc #$0000	                ADC #0
.393e38		8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.393e3b		e2 20		sep #$20	                SEP #$20        ; set A short
.393e3d		a2 00 00	ldx #$0000	                LDX #0
.393e40		bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.393e44		9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.393e48		e8		inx		                INX
.393e49		e0 04 00	cpx #$0004	                CPX #4
.393e4c		d0 f2		bne $393e40	                BNE cpy_secperfat
.393e4e		ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.393e51		0a		asl a		                ASL A
.393e52		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.393e55		ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.393e58		2a		rol a		                ROL A
.393e59		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.393e5c		ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.393e5f		2a		rol a		                ROL A
.393e60		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.393e63		ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.393e66		2a		rol a		                ROL A
.393e67		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.393e6a		18		clc		                CLC
.393e6b		ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.393e6e		6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.393e71		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.393e74		ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.393e77		6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.393e7a		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.393e7d		ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.393e80		6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.393e83		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.393e86		ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.393e89		6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.393e8c		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.393e8f		e2 20		sep #$20	                SEP #$20        ; set A short
.393e91		ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.393e94		8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.393e97		18		clc		                CLC
.393e98		ad 14 a0	lda $38a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.393e9b		6d 10 a0	adc $38a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.393e9e		8d 18 a0	sta $38a018	                STA FAT2_BEGIN_LBA
.393ea1		ad 15 a0	lda $38a015	                LDA FAT_BEGIN_LBA+1
.393ea4		6d 11 a0	adc $38a011	                ADC SEC_PER_FAT+1
.393ea7		8d 19 a0	sta $38a019	                STA FAT2_BEGIN_LBA+1
.393eaa		ad 16 a0	lda $38a016	                LDA FAT_BEGIN_LBA+2
.393ead		6d 12 a0	adc $38a012	                ADC SEC_PER_FAT+2
.393eb0		8d 1a a0	sta $38a01a	                STA FAT2_BEGIN_LBA+2
.393eb3		ad 17 a0	lda $38a017	                LDA FAT_BEGIN_LBA+3
.393eb6		6d 13 a0	adc $38a013	                ADC SEC_PER_FAT+3
.393eb9		8d 1b a0	sta $38a01b	                STA FAT2_BEGIN_LBA+3
.393ebc		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.393ebe		8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.393ec1		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.393ec3		8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.393ec6						ret_success
.393ec6		e2 20		sep #$20	                SEP #$20        ; set A short
.393ec8		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.393eca		28		plp		                PLP
.393ecb		2b		pld		                PLD
.393ecc		ab		plb		                PLB
.393ecd		38		sec		                SEC
.393ece		6b		rtl		                RTL
.393ecf						ret_failure
.393ecf		e2 20		sep #$20	                SEP #$20        ; set A short
.393ed1		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.393ed3		28		plp		                PLP
.393ed4		2b		pld		                PLD
.393ed5		ab		plb		                PLB
.393ed6		18		clc		                CLC
.393ed7		6b		rtl		                RTL
.393ed8						DOS_TESTBOOT
.393ed8		8b		phb		                PHB
.393ed9		0b		phd		                PHD
.393eda		da		phx		                PHX
.393edb		08		php		                PHP
.393edc		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.393edf		ab		plb		                PLB
.393ee0		ab		plb		                PLB
.393ee1		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393ee4		2b		pld		                PLD
.393ee5		c2 10		rep #$10	                REP #$10        ; set X long
.393ee7						chk_dev
.393ee7		e2 20		sep #$20	                SEP #$20        ; set A short
.393ee9		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.393eeb		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.393eed		f0 24		beq $393f13	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.393eef		c2 30		rep #$30	                REP #$30        ; set A&X long
.393ef1		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.393ef4		85 02		sta $0322	                STA @b BIOS_LBA
.393ef6		85 04		sta $0324	                STA @b BIOS_LBA+2
.393ef8		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.393efb		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.393efd		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.393f00		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.393f02		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.393f06		b0 03		bcs $393f0b	                BCS chk_mbr_brl
.393f08		82 47 00	brl $393f52	                BRL done                    ; If failed... just return
.393f0b						chk_mbr_brl
.393f0b		e2 20		sep #$20	                SEP #$20        ; set A short
.393f0d		af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.393f11		80 04		bra $393f17	                BRA chk_brl
.393f13		af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.393f17		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.393f19		f0 06		beq $393f21	                BEQ chk_magic               ; Yes: check for the magic text
.393f1b		c9 82		cmp #$82	                CMP #$82
.393f1d		f0 02		beq $393f21	                BEQ chk_magic
.393f1f		80 31		bra $393f52	                BRA done                    ; No: just return
.393f21		a2 00 00	ldx #$0000	chk_magic       LDX #0
.393f24		bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.393f28		df 57 3f 39	cmp $393f57,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.393f2c		d0 24		bne $393f52	                BNE done                    ; If it's not equal, just return
.393f2e		e8		inx		                INX                         ; Otherwise, check the next one
.393f2f		e0 08 00	cpx #$0008	                CPX #8
.393f32		d0 f0		bne $393f24	                BNE magic_loop              ; Until we've checked all 8 bytes
.393f34		c2 30		rep #$30	                REP #$30        ; set A&X long
.393f36		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.393f39		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.393f3c		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.393f3f		44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.393f42		e2 20		sep #$20	                SEP #$20        ; set A short
.393f44		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.393f46		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.393f48		f0 04		beq $393f4e	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.393f4a		5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.393f4e		5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.393f52		28		plp		done            PLP
.393f53		2b		pld		                PLD
.393f54		ab		plb		                PLB
.393f55		fa		plx		                PLX
.393f56		6b		rtl		                RTL
>393f57		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.393f5f						DOS_CALC_LBA
.393f5f		8b		phb		                PHB
.393f60		0b		phd		                PHD
.393f61		08		php		                PHP
.393f62		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.393f65		ab		plb		                PLB
.393f66		ab		plb		                PLB
.393f67		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393f6a		2b		pld		                PLD
.393f6b		c2 20		rep #$20	                REP #$20        ; set A long
.393f6d		38		sec		                SEC
.393f6e		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.393f70		e9 02 00	sbc #$0002	                SBC #2
.393f73		85 28		sta $0348	                STA DOS_TEMP
.393f75		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.393f77		e9 00 00	sbc #$0000	                SBC #0
.393f7a		85 2a		sta $034a	                STA DOS_TEMP+2
.393f7c		e2 10		sep #$10	                SEP #$10        ; set X short
.393f7e		ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.393f81		e0 01		cpx #$01	mult_loop       CPX #1
.393f83		f0 07		beq $393f8c	                BEQ add_offset
.393f85		06 28		asl $0348	                ASL DOS_TEMP
.393f87		26 28		rol $0348	                ROL DOS_TEMP
.393f89		ca		dex		                DEX
.393f8a		80 f5		bra $393f81	                BRA mult_loop
.393f8c		18		clc		add_offset      CLC
.393f8d		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.393f8f		6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.393f92		85 02		sta $0322	                STA BIOS_LBA
.393f94		a5 2a		lda $034a	                LDA DOS_TEMP+2
.393f96		6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.393f99		85 04		sta $0324	                STA BIOS_LBA+2
.393f9b		28		plp		                PLP
.393f9c		2b		pld		                PLD
.393f9d		ab		plb		                PLB
.393f9e		6b		rtl		                RTL
.393f9f						DOS_GETCLUSTER
.393f9f		8b		phb		                PHB
.393fa0		0b		phd		                PHD
.393fa1		08		php		                PHP
.393fa2		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.393fa5		ab		plb		                PLB
.393fa6		ab		plb		                PLB
.393fa7		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393faa		2b		pld		                PLD
.393fab		c2 20		rep #$20	                REP #$20        ; set A long
.393fad		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.393faf		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393fb1		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.393fb3		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393fb5		22 5f 3f 39	jsl $393f5f	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.393fb9		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.393fbd		90 09		bcc $393fc8	                BCC ret_failure
.393fbf						ret_success
.393fbf		e2 20		sep #$20	                SEP #$20        ; set A short
.393fc1		64 0e		stz $032e	                STZ DOS_STATUS
.393fc3		28		plp		                PLP
.393fc4		2b		pld		                PLD
.393fc5		ab		plb		                PLB
.393fc6		38		sec		                SEC
.393fc7		6b		rtl		                RTL
.393fc8						ret_failure
.393fc8		e2 20		sep #$20	                SEP #$20        ; set A short
.393fca		85 0e		sta $032e	                STA DOS_STATUS
.393fcc		28		plp		                PLP
.393fcd		2b		pld		                PLD
.393fce		ab		plb		                PLB
.393fcf		18		clc		                CLC
.393fd0		6b		rtl		                RTL
.393fd1						DOS_PUTCLUSTER
.393fd1		8b		phb		                PHB
.393fd2		0b		phd		                PHD
.393fd3		08		php		                PHP
.393fd4		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.393fd7		ab		plb		                PLB
.393fd8		ab		plb		                PLB
.393fd9		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393fdc		2b		pld		                PLD
.393fdd		c2 20		rep #$20	                REP #$20        ; set A long
.393fdf		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.393fe1		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393fe3		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.393fe5		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393fe7		22 5f 3f 39	jsl $393f5f	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.393feb		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.393fef		90 09		bcc $393ffa	                BCC ret_failure
.393ff1						ret_success
.393ff1		e2 20		sep #$20	                SEP #$20        ; set A short
.393ff3		64 0e		stz $032e	                STZ DOS_STATUS
.393ff5		28		plp		                PLP
.393ff6		2b		pld		                PLD
.393ff7		ab		plb		                PLB
.393ff8		38		sec		                SEC
.393ff9		6b		rtl		                RTL
.393ffa						ret_failure
.393ffa		e2 20		sep #$20	                SEP #$20        ; set A short
.393ffc		85 0e		sta $032e	                STA DOS_STATUS
.393ffe		28		plp		                PLP
.393fff		2b		pld		                PLD
.394000		ab		plb		                PLB
.394001		18		clc		                CLC
.394002		6b		rtl		                RTL
>394003		40 46 00			DOS_FDC_NAME    .null "@F"
.394006						DOS_FDC_DESC
>394006		03 40 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>39400a		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>39400b		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>39400f		40 53 00			DOS_SDC_NAME    .null "@S"
.394012						DOS_SDC_DESC
>394012		0f 40 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>394016		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>394017		06 40 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>39401b		40 48 00			DOS_HDC_NAME    .null "@H"
.39401e						DOS_HD_DESC
>39401e		1b 40 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>394022		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>394023		12 40 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.394027						DOS_PARSE_DEV
.394027		8b		phb		                PHB
.394028		0b		phd		                PHD
.394029		08		php		                PHP
.39402a		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.39402d		ab		plb		                PLB
.39402e		ab		plb		                PLB
.39402f		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394032		2b		pld		                PLD
.394033		c2 30		rep #$30	                REP #$30        ; set A&X long
.394035		af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.394039		85 28		sta $0348	                STA DOS_TEMP
.39403b		af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.39403f		85 2a		sta $034a	                STA DOS_TEMP+2
.394041		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.394044		85 48		sta $0368	                STA DOS_STR2_PTR
.394046		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.394049		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.39404b		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.39404e		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394050		85 44		sta $0364	                STA DOS_STR1_PTR
.394052		c8		iny		                INY
.394053		c8		iny		                INY
.394054		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394056		85 46		sta $0366	                STA DOS_STR1_PTR+2
.394058		e2 20		sep #$20	                SEP #$20        ; set A short
.39405a		a0 00 00	ldy #$0000	                LDY #0
.39405d		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.39405f		f0 24		beq $394085	                BEQ found                   ; If it's NULL, we found a match
.394061		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.394063		d0 03		bne $394068	                BNE next_device             ; If no match, try to load the next device
.394065		c8		iny		                INY                         ; Go to the next character
.394066		80 f5		bra $39405d	                BRA cmp_loop
.394068						next_device
.394068		c2 20		rep #$20	                REP #$20        ; set A long
.39406a		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.39406d		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39406f		48		pha		                PHA
.394070		c8		iny		                INY
.394071		c8		iny		                INY
.394072		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394074		85 2a		sta $034a	                STA DOS_TEMP+2
.394076		68		pla		                PLA
.394077		85 28		sta $0348	                STA DOS_TEMP
.394079		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.39407b		d0 ce		bne $39404b	                BNE dev_loop                ; No: check this device
.39407d		a5 2a		lda $034a	                LDA DOS_TEMP+2
.39407f		d0 ca		bne $39404b	                BNE dev_loop
.394081		28		plp		done            PLP                         ; Otherwise, return having not found a match
.394082		2b		pld		                PLD
.394083		ab		plb		                PLB
.394084		6b		rtl		                RTL
.394085		22 96 40 39	jsl $394096	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.394089		e2 20		sep #$20	                SEP #$20        ; set A short
.39408b		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.39408e		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394090		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.394094		80 eb		bra $394081	                BRA done
.394096						DOS_ADJUSTPATH
.394096		da		phx		                PHX
.394097		5a		phy		                PHY
.394098		8b		phb		                PHB
.394099		0b		phd		                PHD
.39409a		08		php		                PHP
.39409b		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.39409e		ab		plb		                PLB
.39409f		ab		plb		                PLB
.3940a0		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3940a3		2b		pld		                PLD
.3940a4		c2 30		rep #$30	                REP #$30        ; set A&X long
.3940a6		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.3940a8		98		tya		                TYA                             ; Compute the address of the first source byte
.3940a9		18		clc		                CLC
.3940aa		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.3940ad		aa		tax		                TAX
.3940ae		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.3940b1		a8		tay		                TAY
.3940b2		38		sec		                SEC                             ; Compute the number of bytes to copy
.3940b3		a9 00 01	lda #$0100	                LDA #256
.3940b6		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.3940b8		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.3940bb		28		plp		                PLP
.3940bc		2b		pld		                PLD
.3940bd		ab		plb		                PLB
.3940be		7a		ply		                PLY
.3940bf		fa		plx		                PLX
.3940c0		6b		rtl		                RTL
.3940c1						DOS_PARSE_PATH
.3940c1		8b		phb		                PHB
.3940c2		0b		phd		                PHD
.3940c3		08		php		                PHP
.3940c4		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.3940c7		ab		plb		                PLB
.3940c8		ab		plb		                PLB
.3940c9		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3940cc		2b		pld		                PLD
.3940cd		c2 10		rep #$10	                REP #$10        ; set X long
.3940cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3940d1		a2 00 00	ldx #$0000	                LDX #0
.3940d4		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.3940d6		f0 1b		beq $3940f3	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.3940d8		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.3940da		b0 05		bcs $3940e1	                BGE check_case          ; No: check the case
.3940dc		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.3940de		82 64 00	brl $394145	                BRL ret_failure
.3940e1		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.3940e3		90 08		bcc $3940ed	                BLT next_char
.3940e5		c9 7b		cmp #$7b	                CMP #'z'+1
.3940e7		b0 04		bcs $3940ed	                BGE next_char
.3940e9		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.3940eb		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3940ed		e8		inx		next_char       INX                     ; Move to the next character
.3940ee		e0 00 01	cpx #$0100	                CPX #$100
.3940f1		d0 e1		bne $3940d4	                BNE upcase_loop
.3940f3		22 27 40 39	jsl $394027	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.3940f7		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.3940f9		c9 3a		cmp #$3a	                CMP #':'
.3940fb		d0 07		bne $394104	                BNE clr_name            ; If not colon, treat it as a file name
.3940fd		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.394100		22 96 40 39	jsl $394096	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.394104		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.394107		a9 20		lda #$20	                LDA #' '
.394109		99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.39410c		c8		iny		                INY
.39410d		c0 0b 00	cpy #$000b	                CPY #11
.394110		d0 f7		bne $394109	                BNE clr_loop
.394112		a2 00 00	ldx #$0000	                LDX #0
.394115		a0 00 00	ldy #$0000	                LDY #0
.394118		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.39411a		f0 20		beq $39413c	                BEQ ret_success         ; If NULL: we've finished parsing the path
.39411c		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.39411e		f0 0a		beq $39412a	                BEQ cpy_ext             ; And move to the extension
.394120		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.394123		e8		inx		                INX
.394124		c8		iny		                INY                     ; Move to the next character
.394125		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.394128		d0 ee		bne $394118	                BNE cpy_name_loop       ; No: process this one
.39412a		e8		inx		cpy_ext         INX                     ; Skip the dot
.39412b		a0 08 00	ldy #$0008	                LDY #8
.39412e		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.394130		f0 0a		beq $39413c	                BEQ ret_success         ; If it's NULL, we've finished
.394132		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.394135		e8		inx		                INX
.394136		c8		iny		                INY                     ; Move to the next character
.394137		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.39413a		d0 f2		bne $39412e	                BNE cpy_ext_loop        ; No: process this one
.39413c						ret_success
.39413c		e2 20		sep #$20	                SEP #$20        ; set A short
.39413e		64 0e		stz $032e	                STZ DOS_STATUS
.394140		28		plp		                PLP
.394141		2b		pld		                PLD
.394142		ab		plb		                PLB
.394143		38		sec		                SEC
.394144		6b		rtl		                RTL
.394145						ret_failure
.394145		e2 20		sep #$20	                SEP #$20        ; set A short
.394147		85 0e		sta $032e	                STA DOS_STATUS
.394149		28		plp		                PLP
.39414a		2b		pld		                PLD
.39414b		ab		plb		                PLB
.39414c		18		clc		                CLC
.39414d		6b		rtl		                RTL
.39414e						DOS_FINDFILE
.39414e		8b		phb		                PHB
.39414f		0b		phd		                PHD
.394150		08		php		                PHP
.394151		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.394154		ab		plb		                PLB
.394155		ab		plb		                PLB
.394156		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394159		2b		pld		                PLD
.39415a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39415c		22 c1 40 39	jsl $3940c1	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.394160		b0 05		bcs $394167	                BCS mount                       ; If success: try to open the directory
.394162		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.394163		2b		pld		                PLD
.394164		ab		plb		                PLB
.394165		18		clc		                CLC
.394166		6b		rtl		                RTL
.394167		22 28 3d 39	jsl $393d28	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.39416b		b0 07		bcs $394174	                BCS get_directory
.39416d		e2 20		sep #$20	                SEP #$20        ; set A short
.39416f		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.394171		82 56 00	brl $3941ca	                BRL ret_failure
.394174						get_directory
.394174		c2 20		rep #$20	                REP #$20        ; set A long
.394176		22 2e 3a 39	jsl $393a2e	                JSL DOS_DIROPEN                 ; Get the directory
.39417a		b0 07		bcs $394183	                BCS scan_entries                ; If success: start scanning the directory entries
.39417c		e2 20		sep #$20	                SEP #$20        ; set A short
.39417e		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.394180		82 47 00	brl $3941ca	                BRL ret_failure
.394183		22 a4 3a 39	jsl $393aa4	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.394187						scan_loop
.394187		e2 20		sep #$20	                SEP #$20        ; set A short
.394189		a0 00 00	ldy #$0000	                LDY #0
.39418c		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.39418e		d0 05		bne $394195	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.394190		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.394192		82 35 00	brl $3941ca	                BRL ret_failure
.394195		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.394197		f0 26		beq $3941bf	                BEQ next_entry                  ; Go to the next entry
.394199		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.39419c		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39419e		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.3941a0		d0 1d		bne $3941bf	                BNE next_entry                  ; Yes: skip it!
.3941a2		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.3941a4		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.3941a6		f0 17		beq $3941bf	                BEQ next_entry                  ; Yes: skip it!
.3941a8		a2 00 00	ldx #$0000	                LDX #0
.3941ab		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.3941ae		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.3941b0		df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.3941b4		d0 09		bne $3941bf	                BNE next_entry                  ; If not equal: try the next entry
.3941b6		c8		iny		                INY                             ; Advance to the next character
.3941b7		e8		inx		                INX
.3941b8		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.3941bb		f0 16		beq $3941d3	                BEQ match                       ; Yes: we have a match!
.3941bd		80 ef		bra $3941ae	                BRA scan_cmp_loop               ; No: keep checking
.3941bf		22 b9 3a 39	jsl $393ab9	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.3941c3		90 05		bcc $3941ca	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.3941c5		82 bf ff	brl $394187	                BRL scan_loop                   ; If found: keep scanning
.3941c8		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.3941ca						ret_failure
.3941ca		e2 20		sep #$20	                SEP #$20        ; set A short
.3941cc		85 0e		sta $032e	                STA DOS_STATUS
.3941ce		28		plp		                PLP
.3941cf		2b		pld		                PLD
.3941d0		ab		plb		                PLB
.3941d1		18		clc		                CLC
.3941d2		6b		rtl		                RTL
.3941d3						match
.3941d3		c2 20		rep #$20	                REP #$20        ; set A long
.3941d5		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.3941d8		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3941da		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.3941dc		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3941df		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3941e1		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3941e3						ret_success
.3941e3		e2 20		sep #$20	                SEP #$20        ; set A short
.3941e5		64 0e		stz $032e	                STZ DOS_STATUS
.3941e7		28		plp		                PLP
.3941e8		2b		pld		                PLD
.3941e9		ab		plb		                PLB
.3941ea		38		sec		                SEC
.3941eb		6b		rtl		                RTL
.3941ec						DOS_READFILE
.3941ec		8b		phb		                PHB
.3941ed		0b		phd		                PHD
.3941ee		08		php		                PHP
.3941ef		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3941f2		ab		plb		                PLB
.3941f3		ab		plb		                PLB
.3941f4		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3941f7		2b		pld		                PLD
.3941f8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3941fa		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3941fc		48		pha		                PHA
.3941fd		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.3941ff		48		pha		                PHA
.394200		22 4e 41 39	jsl $39414e	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.394204		68		pla		                PLA
.394205		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394207		68		pla		                PLA
.394208		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39420a		90 0f		bcc $39421b	                BCC pass_failure                    ; If found: try to load the cluster
.39420c		22 9f 3f 39	jsl $393f9f	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.394210		90 09		bcc $39421b	                BCC pass_failure                    ; If there's an error... pass it up the chain
.394212						ret_success
.394212		e2 20		sep #$20	                SEP #$20        ; set A short
.394214		64 0e		stz $032e	                STZ DOS_STATUS
.394216		28		plp		                PLP
.394217		2b		pld		                PLD
.394218		ab		plb		                PLB
.394219		38		sec		                SEC
.39421a		6b		rtl		                RTL
.39421b		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.39421c		2b		pld		                PLD
.39421d		ab		plb		                PLB
.39421e		18		clc		                CLC
.39421f		6b		rtl		                RTL
.394220						ENTRYFORCLUS12
.394220		8b		phb		                PHB
.394221		0b		phd		                PHD
.394222		08		php		                PHP
.394223		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.394226		ab		plb		                PLB
.394227		ab		plb		                PLB
.394228		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39422b		2b		pld		                PLD
.39422c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39422e		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.394230		0a		asl a		                ASL A
.394231		85 28		sta $0348	                STA DOS_TEMP
.394233		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394235		2a		rol a		                ROL A
.394236		85 2a		sta $034a	                STA DOS_TEMP+2
.394238		18		clc		                CLC
.394239		a5 10		lda $0330	                LDA DOS_CLUS_ID
.39423b		65 28		adc $0348	                ADC DOS_TEMP
.39423d		85 28		sta $0348	                STA DOS_TEMP
.39423f		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394241		65 2a		adc $034a	                ADC DOS_TEMP+2
.394243		85 2a		sta $034a	                STA DOS_TEMP+2
.394245		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.394247		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.394249		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.39424b		29 ff 03	and #$03ff	                AND #$003FF
.39424e		aa		tax		                TAX
.39424f		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394251		66 28		ror $0348	                ROR DOS_TEMP
.394253		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394255		66 28		ror $0348	                ROR DOS_TEMP
.394257		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394259		66 28		ror $0348	                ROR DOS_TEMP
.39425b		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39425d		66 28		ror $0348	                ROR DOS_TEMP
.39425f		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394261		66 28		ror $0348	                ROR DOS_TEMP
.394263		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394265		66 28		ror $0348	                ROR DOS_TEMP
.394267		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394269		66 28		ror $0348	                ROR DOS_TEMP
.39426b		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39426d		66 28		ror $0348	                ROR DOS_TEMP
.39426f		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394271		66 28		ror $0348	                ROR DOS_TEMP
.394273		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.394274		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.394278		65 28		adc $0348	                ADC DOS_TEMP
.39427a		85 24		sta $0344	                STA DOS_FAT_LBA
.39427c		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394280		65 2a		adc $034a	                ADC DOS_TEMP+2
.394282		85 26		sta $0346	                STA DOS_FAT_LBA+2
.394284		28		plp		                PLP
.394285		2b		pld		                PLD
.394286		ab		plb		                PLB
.394287		6b		rtl		                RTL
.394288						FATFORCLUSTER12
.394288		8b		phb		                PHB
.394289		0b		phd		                PHD
.39428a		08		php		                PHP
.39428b		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.39428e		ab		plb		                PLB
.39428f		ab		plb		                PLB
.394290		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394293		2b		pld		                PLD
.394294		c2 30		rep #$30	                REP #$30        ; set A&X long
.394296		a2 00 00	ldx #$0000	                LDX #0
.394299		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.39429c		8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.3942a0		e8		inx		                INX
.3942a1		e8		inx		                INX
.3942a2		e0 00 04	cpx #$0400	                CPX #1024
.3942a5		d0 f5		bne $39429c	                BNE clr_loop
.3942a7		22 20 42 39	jsl $394220	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.3942ab		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.3942ad		85 02		sta $0322	                STA BIOS_LBA
.3942af		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.3942b1		85 04		sta $0324	                STA BIOS_LBA+2
.3942b3		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.3942b6		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3942b8		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3942bb		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3942bd		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.3942c1		90 17		bcc $3942da	                BCC error
.3942c3		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.3942c5		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.3942c8		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3942ca		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3942cd		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3942cf		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.3942d3		90 05		bcc $3942da	                BCC error
.3942d5		28		plp		                PLP
.3942d6		2b		pld		                PLD
.3942d7		ab		plb		                PLB
.3942d8		38		sec		                SEC
.3942d9		6b		rtl		                RTL
.3942da						error
.3942da		e2 20		sep #$20	                SEP #$20        ; set A short
.3942dc		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3942de		85 0e		sta $032e	                STA DOS_STATUS
.3942e0		28		plp		                PLP
.3942e1		2b		pld		                PLD
.3942e2		ab		plb		                PLB
.3942e3		18		clc		                CLC
.3942e4		6b		rtl		                RTL
.3942e5						FATFORCLUSTER32
.3942e5		8b		phb		                PHB
.3942e6		0b		phd		                PHD
.3942e7		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3942ea		ab		plb		                PLB
.3942eb		ab		plb		                PLB
.3942ec		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3942ef		2b		pld		                PLD
.3942f0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3942f2		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3942f4		85 24		sta $0344	                STA DOS_FAT_LBA
.3942f6		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3942f8		85 26		sta $0346	                STA DOS_FAT_LBA+2
.3942fa		a2 07 00	ldx #$0007	                LDX #7
.3942fd		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.3942ff		66 24		ror $0344	                ROR DOS_FAT_LBA
.394301		ca		dex		                DEX
.394302		d0 f9		bne $3942fd	                BNE div_loop
.394304		18		clc		                CLC
.394305		a5 24		lda $0344	                LDA DOS_FAT_LBA
.394307		6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.39430b		85 24		sta $0344	                STA DOS_FAT_LBA
.39430d		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.39430f		6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394313		85 26		sta $0346	                STA DOS_FAT_LBA+2
.394315		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.394317		85 02		sta $0322	                STA BIOS_LBA
.394319		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.39431b		85 04		sta $0324	                STA BIOS_LBA+2
.39431d		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.394320		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394322		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394325		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394327		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.39432b		b0 06		bcs $394333	                BCS find_entry
.39432d		e2 20		sep #$20	                SEP #$20        ; set A short
.39432f		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394331		80 0e		bra $394341	                BRA ret_failure
.394333						find_entry
.394333		c2 20		rep #$20	                REP #$20        ; set A long
.394335		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394337		0a		asl a		                ASL A
.394338		0a		asl a		                ASL A                           ; * 4
.394339		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.39433c		aa		tax		                TAX                             ; X should be the offset within the sector
.39433d		2b		pld		ret_success     PLD
.39433e		ab		plb		                PLB
.39433f		38		sec		                SEC                             ; return success
.394340		6b		rtl		                RTL
.394341		2b		pld		ret_failure     PLD
.394342		ab		plb		                PLB
.394343		18		clc		                CLC                             ; Return failure
.394344		6b		rtl		                RTL
.394345						NEXTCLUSTER
.394345		08		php		                PHP
.394346		e2 20		sep #$20	                SEP #$20        ; set A short
.394348		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.39434c		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.39434e		d0 08		bne $394358	                BNE fat32                       ; No: assume it's FAT32
.394350		22 66 43 39	jsl $394366	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.394354		90 0d		bcc $394363	                BCC pass_failure                ; If there was an error, pass it up the chain
.394356		80 06		bra $39435e	                BRA ret_success
.394358		22 c3 43 39	jsl $3943c3	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.39435c		90 05		bcc $394363	                BCC pass_failure                ; If there was an error, pass it up the chain
.39435e		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394360		28		plp		                PLP
.394361		38		sec		                SEC
.394362		6b		rtl		                RTL
.394363		28		plp		pass_failure    PLP
.394364		18		clc		                CLC
.394365		6b		rtl		                RTL
.394366						NEXTCLUSTER12
.394366		8b		phb		                    PHB
.394367		0b		phd		                    PHD
.394368		08		php		                    PHP
.394369		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.39436c		ab		plb		                PLB
.39436d		ab		plb		                PLB
.39436e		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394371		2b		pld		                PLD
.394372		c2 30		rep #$30	                REP #$30        ; set A&X long
.394374		22 88 42 39	jsl $394288	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394378		b0 03		bcs $39437d	                    BCS chk_clus_id
.39437a		82 41 00	brl $3943be	                    BRL pass_failure
.39437d		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.39437f		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394382		d0 0d		bne $394391	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394384						is_even
.394384		c2 20		rep #$20	                REP #$20        ; set A long
.394386		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.39438a		29 ff 0f	and #$0fff	                    AND #$0FFF
.39438d		85 28		sta $0348	                    STA DOS_TEMP
.39438f		80 0c		bra $39439d	                    BRA check_id
.394391						is_odd
.394391		c2 20		rep #$20	                REP #$20        ; set A long
.394393		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394397		4a		lsr a		                    LSR A
.394398		4a		lsr a		                    LSR A
.394399		4a		lsr a		                    LSR A
.39439a		4a		lsr a		                    LSR A
.39439b		85 28		sta $0348	                    STA DOS_TEMP
.39439d						check_id
.39439d		c2 20		rep #$20	                REP #$20        ; set A long
.39439f		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.3943a1		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.3943a4		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.3943a7		f0 0f		beq $3943b8	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.3943a9		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.3943ab		85 10		sta $0330	                    STA DOS_CLUS_ID
.3943ad		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.3943af						ret_success
.3943af		e2 20		sep #$20	                SEP #$20        ; set A short
.3943b1		64 0e		stz $032e	                    STZ DOS_STATUS
.3943b3		28		plp		                    PLP
.3943b4		2b		pld		                    PLD
.3943b5		ab		plb		                    PLB
.3943b6		38		sec		                    SEC
.3943b7		6b		rtl		                    RTL
.3943b8						no_more
.3943b8		e2 20		sep #$20	                SEP #$20        ; set A short
.3943ba		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.3943bc		85 0e		sta $032e	                    STA DOS_STATUS
.3943be		28		plp		pass_failure        PLP
.3943bf		2b		pld		                    PLD
.3943c0		ab		plb		                    PLB
.3943c1		18		clc		                    CLC
.3943c2		6b		rtl		                    RTL
.3943c3						NEXTCLUSTER32
.3943c3		8b		phb		                PHB
.3943c4		0b		phd		                PHD
.3943c5		08		php		                PHP
.3943c6		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3943c9		ab		plb		                PLB
.3943ca		ab		plb		                PLB
.3943cb		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3943ce		2b		pld		                PLD
.3943cf		c2 30		rep #$30	                REP #$30        ; set A&X long
.3943d1		22 e5 42 39	jsl $3942e5	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.3943d5		90 53		bcc $39442a	                BCC ret_failure                 ; If it did not work, return the error
.3943d7		e2 20		sep #$20	                SEP #$20        ; set A short
.3943d9		bf 00 a5 38	lda $38a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.3943dd		85 28		sta $0348	                STA DOS_TEMP
.3943df		bf 01 a5 38	lda $38a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.3943e3		85 29		sta $0349	                STA DOS_TEMP+1
.3943e5		bf 02 a5 38	lda $38a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.3943e9		85 2a		sta $034a	                STA DOS_TEMP+2
.3943eb		bf 03 a5 38	lda $38a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.3943ef		85 2b		sta $034b	                STA DOS_TEMP+3
.3943f1		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.3943f3		c9 ff		cmp #$ff	                CMP #$FF
.3943f5		d0 18		bne $39440f	                BNE found_next
.3943f7		a5 29		lda $0349	                LDA DOS_TEMP+1
.3943f9		c9 ff		cmp #$ff	                CMP #$FF
.3943fb		d0 12		bne $39440f	                BNE found_next
.3943fd		a5 2a		lda $034a	                LDA DOS_TEMP+2
.3943ff		c9 ff		cmp #$ff	                CMP #$FF
.394401		d0 0c		bne $39440f	                BNE found_next
.394403		a5 2b		lda $034b	                LDA DOS_TEMP+3
.394405		c9 0f		cmp #$0f	                CMP #$0F
.394407		d0 06		bne $39440f	                BNE found_next                  ; No: return this cluster as the next
.394409		e2 20		sep #$20	                SEP #$20        ; set A short
.39440b		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.39440d		80 1b		bra $39442a	                BRA ret_failure
.39440f						found_next
.39440f		e2 20		sep #$20	                SEP #$20        ; set A short
.394411		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.394413		85 10		sta $0330	                STA DOS_CLUS_ID
.394415		a5 29		lda $0349	                LDA DOS_TEMP+1
.394417		85 11		sta $0331	                STA DOS_CLUS_ID+1
.394419		a5 2a		lda $034a	                LDA DOS_TEMP+2
.39441b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39441d		a5 2b		lda $034b	                LDA DOS_TEMP+3
.39441f		85 13		sta $0333	                STA DOS_CLUS_ID+3
.394421						ret_success
.394421		e2 20		sep #$20	                SEP #$20        ; set A short
.394423		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.394425		28		plp		                PLP
.394426		2b		pld		                PLD
.394427		ab		plb		                PLB
.394428		38		sec		                SEC
.394429		6b		rtl		                RTL
.39442a						ret_failure
.39442a		e2 20		sep #$20	                SEP #$20        ; set A short
.39442c		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.39442e		28		plp		                PLP
.39442f		2b		pld		                PLD
.394430		ab		plb		                PLB
.394431		18		clc		                CLC
.394432		6b		rtl		                RTL
.394433						DOS_READNEXT
.394433		08		php		                PHP
.394434		c2 30		rep #$30	                REP #$30        ; set A&X long
.394436		22 45 43 39	jsl $394345	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.39443a		90 09		bcc $394445	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.39443c		22 9f 3f 39	jsl $393f9f	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.394440		90 03		bcc $394445	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.394442		28		plp		ret_success     PLP
.394443		38		sec		                SEC
.394444		6b		rtl		                RTL
.394445		28		plp		pass_failure    PLP
.394446		18		clc		                CLC
.394447		6b		rtl		                RTL
.394448						DOS_FREECLUS
.394448		08		php		                PHP
.394449		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39444c		2b		pld		                PLD
.39444d		e2 20		sep #$20	                SEP #$20        ; set A short
.39444f		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394453		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394455		d0 08		bne $39445f	                BNE fat32                       ; No: assume it's FAT32
.394457		22 c8 44 39	jsl $3944c8	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.39445b		90 0d		bcc $39446a	                BCC pass_failure                ; If there was an error, pass it up the chain
.39445d		80 06		bra $394465	                BRA ret_success
.39445f		22 95 45 39	jsl $394595	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394463		90 05		bcc $39446a	                BCC pass_failure                ; If there was an error, pass it up the chain
.394465		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394467		28		plp		                PLP
.394468		38		sec		                SEC
.394469		6b		rtl		                RTL
.39446a		28		plp		pass_failure    PLP
.39446b		18		clc		                CLC
.39446c		6b		rtl		                RTL
.39446d						FDC_READ2FAT12
.39446d		8b		phb		                    PHB
.39446e		0b		phd		                    PHD
.39446f		08		php		                    PHP
.394470		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.394473		ab		plb		                PLB
.394474		ab		plb		                PLB
.394475		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394478		2b		pld		                PLD
.394479		c2 30		rep #$30	                REP #$30        ; set A&X long
.39447b		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.39447e		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394480		a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.394483		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394485		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394487		85 02		sta $0322	                    STA BIOS_LBA
.394489		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.39448b		85 04		sta $0324	                    STA BIOS_LBA+2
.39448d		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.394491		b0 07		bcs $39449a	                    BCS inc_sect2                   ; If success: start getting the second sector
.394493		e2 20		sep #$20	                SEP #$20        ; set A short
.394495		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394497		82 1c 00	brl $3944b6	                    BRL ret_failure
.39449a						inc_sect2
.39449a		c2 20		rep #$20	                REP #$20        ; set A long
.39449c		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.39449e		d0 02		bne $3944a2	                    BNE inc_buff_ptr
.3944a0		e6 04		inc $0324	                    INC BIOS_LBA+2
.3944a2		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.3944a5		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.3944a7		a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.3944aa		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.3944ac		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.3944b0		b0 0d		bcs $3944bf	                    BCS ret_success                 ; If success, return success
.3944b2		e2 20		sep #$20	                SEP #$20        ; set A short
.3944b4		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.3944b6						ret_failure
.3944b6		e2 20		sep #$20	                SEP #$20        ; set A short
.3944b8		85 0e		sta $032e	                    STA DOS_STATUS
.3944ba		28		plp		                    PLP
.3944bb		2b		pld		                    PLD
.3944bc		ab		plb		                    PLB
.3944bd		18		clc		                    CLC
.3944be		6b		rtl		                    RTL
.3944bf						ret_success
.3944bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3944c1		64 0e		stz $032e	                    STZ DOS_STATUS
.3944c3		28		plp		                    PLP
.3944c4		2b		pld		                    PLD
.3944c5		ab		plb		                    PLB
.3944c6		38		sec		                    SEC
.3944c7		6b		rtl		                    RTL
.3944c8						DOS_FREECLUS12
.3944c8		da		phx		                PHX
.3944c9		8b		phb		                PHB
.3944ca		0b		phd		                PHD
.3944cb		08		php		                PHP
.3944cc		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3944cf		ab		plb		                PLB
.3944d0		ab		plb		                PLB
.3944d1		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3944d4		2b		pld		                PLD
.3944d5		c2 30		rep #$30	                REP #$30        ; set A&X long
.3944d7		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.3944da		85 10		sta $0330	                STA DOS_CLUS_ID
.3944dc		a9 00 00	lda #$0000	                LDA #0
.3944df		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3944e1		22 20 42 39	jsl $394220	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.3944e5		22 6d 44 39	jsl $39446d	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.3944e9		b0 07		bcs $3944f2	                BCS start_of_fat                ; If success, move X to the start of the FAT
.3944eb		e2 20		sep #$20	                SEP #$20        ; set A short
.3944ed		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3944ef		82 99 00	brl $39458b	                BRL ret_failure
.3944f2						start_of_fat
.3944f2		c2 30		rep #$30	                REP #$30        ; set A&X long
.3944f4		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.3944f6		89 01 00	bit #$0001	                BIT #1
.3944f9		d0 09		bne $394504	                BNE is_odd
.3944fb		bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.3944ff		29 ff 0f	and #$0fff	                AND #$0FFF
.394502		80 08		bra $39450c	                BRA chk_available
.394504		bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.394508		4a		lsr a		                LSR A
.394509		4a		lsr a		                LSR A
.39450a		4a		lsr a		                LSR A
.39450b		4a		lsr a		                LSR A
.39450c						chk_available
.39450c		85 28		sta $0348	                STA DOS_TEMP
.39450e		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.394511		f0 03		beq $394516	                BEQ chk_found
.394513		82 39 00	brl $39454f	                BRL next_cluster                ; No: advance to the next cluster
.394516		8a		txa		chk_found       TXA
.394517		85 2a		sta $034a	                STA DOS_TEMP+2
.394519		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.39451b		89 01 00	bit #$0001	                BIT #1
.39451e		d0 0d		bne $39452d	                BNE is_odd2
.394520						is_even2
.394520		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.394524		09 ff 0f	ora #$0fff	                ORA #$0FFF
.394527		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.39452b		80 0b		bra $394538	                BRA write_fat
.39452d						is_odd2
.39452d		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.394531		09 f0 ff	ora #$fff0	                ORA #$FFF0
.394534		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394538		22 54 46 39	jsl $394654	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.39453c		b0 07		bcs $394545	                BCS ret_success                 ; If success: return success
.39453e		e2 20		sep #$20	                SEP #$20        ; set A short
.394540		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.394542		82 46 00	brl $39458b	                BRL ret_failure
.394545						ret_success
.394545		e2 20		sep #$20	                SEP #$20        ; set A short
.394547		64 0e		stz $032e	                STZ DOS_STATUS
.394549		28		plp		                PLP
.39454a		2b		pld		                PLD
.39454b		ab		plb		                PLB
.39454c		fa		plx		                PLX
.39454d		38		sec		                SEC
.39454e		6b		rtl		                RTL
.39454f						next_cluster
.39454f		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394551		d0 02		bne $394555	                BNE calc_entry
.394553		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394555		22 20 42 39	jsl $394220	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394559		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.39455c		f0 03		beq $394561	                BEQ chk_end_of_fat
.39455e		82 93 ff	brl $3944f4	                BRL chk_cluster                 ; No: go back and check it too
.394561						chk_end_of_fat
.394561		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394563		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394567		d0 0f		bne $394578	                BNE next_2
.394569		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.39456b		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.39456f		d0 07		bne $394578	                BNE next_2                      ; No: get the next to sectors
.394571		e2 20		sep #$20	                SEP #$20        ; set A short
.394573		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394575		82 13 00	brl $39458b	                BRL ret_failure
.394578						next_2
.394578		22 6d 44 39	jsl $39446d	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.39457c		90 06		bcc $394584	                BCC fat_fail                    ; If failed: return error
.39457e		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394581		82 70 ff	brl $3944f4	                BRL chk_cluster                 ; And start checking from there
.394584						fat_fail
.394584		e2 20		sep #$20	                SEP #$20        ; set A short
.394586		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394588		82 00 00	brl $39458b	                BRL ret_failure
.39458b						ret_failure
.39458b		e2 20		sep #$20	                SEP #$20        ; set A short
.39458d		85 0e		sta $032e	                STA DOS_STATUS
.39458f		28		plp		                PLP
.394590		2b		pld		                PLD
.394591		ab		plb		                PLB
.394592		fa		plx		                PLX
.394593		18		clc		                CLC
.394594		6b		rtl		                RTL
.394595						DOS_FREECLUS32
.394595		8b		phb		                PHB
.394596		0b		phd		                PHD
.394597		08		php		                PHP
.394598		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.39459b		ab		plb		                PLB
.39459c		ab		plb		                PLB
.39459d		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3945a0		2b		pld		                PLD
.3945a1		c2 30		rep #$30	                REP #$30        ; set A&X long
.3945a3		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.3945a6		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3945a8		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3945ab		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3945ad		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.3945b1		85 02		sta $0322	                STA BIOS_LBA
.3945b3		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.3945b7		85 04		sta $0324	                STA BIOS_LBA+2
.3945b9		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.3945bd		b0 07		bcs $3945c6	                BCS initial_entry               ; If OK: set the initial entry to check
.3945bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3945c1		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.3945c3		82 6b 00	brl $394631	                BRL ret_failure
.3945c6						initial_entry
.3945c6		c2 20		rep #$20	                REP #$20        ; set A long
.3945c8		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.3945cb		85 10		sta $0330	                STA DOS_CLUS_ID
.3945cd		a9 00 00	lda #$0000	                LDA #0
.3945d0		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3945d2		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.3945d5		bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.3945d9		d0 06		bne $3945e1	                BNE next_entry                  ; No: move to the next entry
.3945db		bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.3945df		f0 36		beq $394617	                BEQ found_free                  ; Yes: go to allocate and return it
.3945e1		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.3945e3		d0 02		bne $3945e7	                BNE inc_ptr
.3945e5		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.3945e7		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.3945e8		e8		inx		                INX
.3945e9		e8		inx		                INX
.3945ea		e8		inx		                INX
.3945eb		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.3945ee		90 e5		bcc $3945d5	                BLT chk_entry                   ; No: check this entry
.3945f0		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.3945f2		d0 18		bne $39460c	                BNE get_block
.3945f4		e6 04		inc $0324	                INC BIOS_LBA+2
.3945f6		a5 04		lda $0324	                LDA BIOS_LBA+2
.3945f8		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.3945fc		90 0e		bcc $39460c	                BLT get_block
.3945fe		a5 02		lda $0322	                LDA BIOS_LBA
.394600		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA
.394604		90 06		bcc $39460c	                BLT get_block
.394606		e2 20		sep #$20	                SEP #$20        ; set A short
.394608		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.39460a		80 25		bra $394631	                BRA ret_failure
.39460c		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.394610		90 1b		bcc $39462d	                BCC ret_fat_error               ; If error: throw a FAT error
.394612		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394615		80 be		bra $3945d5	                BRA chk_entry                   ; Check this entry
.394617						found_free
.394617		c2 20		rep #$20	                REP #$20        ; set A long
.394619		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.39461c		9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.394620		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394623		9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.394627		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.39462b		b0 0d		bcs $39463a	                BCS ret_success                 ; If OK: return success
.39462d						ret_fat_error
.39462d		e2 20		sep #$20	                SEP #$20        ; set A short
.39462f		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394631						ret_failure
.394631		e2 20		sep #$20	                SEP #$20        ; set A short
.394633		85 0e		sta $032e	                STA DOS_STATUS
.394635		28		plp		                PLP
.394636		2b		pld		                PLD
.394637		ab		plb		                PLB
.394638		18		clc		                CLC
.394639		6b		rtl		                RTL
.39463a						ret_success
.39463a		e2 20		sep #$20	                SEP #$20        ; set A short
.39463c		64 0e		stz $032e	                STZ DOS_STATUS
.39463e		28		plp		                PLP
.39463f		2b		pld		                PLD
.394640		ab		plb		                PLB
.394641		38		sec		                SEC
.394642		6b		rtl		                RTL
.394643						DELCLUSTER
.394643		e2 20		sep #$20	                SEP #$20        ; set A short
.394645		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394649		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.39464b		d0 04		bne $394651	                BNE fat32                       ; No: assume it's FAT32
.39464d		5c 90 46 39	jmp $394690	fat12           JML DELCLUSTER12
.394651		4c d3 46	jmp $3946d3	fat32           JMP DELCLUSTER32
.394654						WRITEFAT12
.394654		8b		phb		                PHB
.394655		0b		phd		                PHD
.394656		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.394659		ab		plb		                PLB
.39465a		ab		plb		                PLB
.39465b		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39465e		2b		pld		                PLD
.39465f		c2 30		rep #$30	                REP #$30        ; set A&X long
.394661		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394664		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394666		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394669		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39466b		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.39466d		85 02		sta $0322	                STA BIOS_LBA
.39466f		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394671		85 04		sta $0324	                STA BIOS_LBA+2
.394673		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394677		90 14		bcc $39468d	                BCC done
.394679		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.39467c		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39467e		a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394681		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394683		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394685		d0 02		bne $394689	                BNE put_second
.394687		e6 04		inc $0324	                INC BIOS_LBA+2
.394689		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.39468d		2b		pld		done            PLD
.39468e		ab		plb		                PLB
.39468f		6b		rtl		                RTL
.394690						DELCLUSTER12
.394690		8b		phb		                PHB
.394691		0b		phd		                PHD
.394692		08		php		                PHP
.394693		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394696		ab		plb		                PLB
.394697		ab		plb		                PLB
.394698		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39469b		2b		pld		                PLD
.39469c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39469e		22 88 42 39	jsl $394288	                JSL FATFORCLUSTER12
.3946a2		8a		txa		                TXA                             ; Check to see if the index is odd or even
.3946a3		89 01 00	bit #$0001	                BIT #1
.3946a6		d0 08		bne $3946b0	                BNE is_odd
.3946a8		bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.3946ab		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.3946ae		80 06		bra $3946b6	                BRA save_update
.3946b0		bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.3946b3		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.3946b6		9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.3946b9		22 54 46 39	jsl $394654	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.3946bd		b0 0b		bcs $3946ca	                BCS ret_success
.3946bf						ret_failure
.3946bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3946c1		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3946c3		85 0e		sta $032e	                STA DOS_STATUS
.3946c5		28		plp		                PLP
.3946c6		2b		pld		                PLD
.3946c7		ab		plb		                PLB
.3946c8		18		clc		                CLC
.3946c9		6b		rtl		                RTL
.3946ca						ret_success
.3946ca		e2 20		sep #$20	                SEP #$20        ; set A short
.3946cc		64 0e		stz $032e	                STZ DOS_STATUS
.3946ce		28		plp		                PLP
.3946cf		2b		pld		                PLD
.3946d0		ab		plb		                PLB
.3946d1		38		sec		                SEC
.3946d2		6b		rtl		                RTL
.3946d3						DELCLUSTER32
.3946d3		8b		phb		                PHB
.3946d4		0b		phd		                PHD
.3946d5		08		php		                PHP
.3946d6		c2 30		rep #$30	                REP #$30        ; set A&X long
.3946d8		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.3946db		ab		plb		                PLB
.3946dc		ab		plb		                PLB
.3946dd		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3946e0		2b		pld		                PLD
.3946e1		22 e5 42 39	jsl $3942e5	                JSL FATFORCLUSTER32
.3946e5		a9 00 00	lda #$0000	                LDA #0
.3946e8		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.3946eb		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.3946ee		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.3946f2		b0 0b		bcs $3946ff	                BCS ret_success
.3946f4						ret_failure
.3946f4		e2 20		sep #$20	                SEP #$20        ; set A short
.3946f6		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3946f8		85 0e		sta $032e	                STA DOS_STATUS
.3946fa		28		plp		                PLP
.3946fb		2b		pld		                PLD
.3946fc		ab		plb		                PLB
.3946fd		18		clc		                CLC
.3946fe		6b		rtl		                RTL
.3946ff						ret_success
.3946ff		e2 20		sep #$20	                SEP #$20        ; set A short
.394701		64 0e		stz $032e	                STZ DOS_STATUS
.394703		28		plp		                PLP
.394704		2b		pld		                PLD
.394705		ab		plb		                PLB
.394706		38		sec		                SEC
.394707		6b		rtl		                RTL
.394708						DOS_APPENDCLUS
.394708		8b		phb		                PHB
.394709		0b		phd		                PHD
.39470a		08		php		                PHP
.39470b		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.39470e		ab		plb		                PLB
.39470f		ab		plb		                PLB
.394710		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394713		2b		pld		                PLD
.394714		c2 30		rep #$30	                REP #$30        ; set A&X long
.394716		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394718		48		pha		                PHA
.394719		a5 10		lda $0330	                LDA DOS_CLUS_ID
.39471b		48		pha		                PHA
.39471c		22 48 44 39	jsl $394448	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.394720		b0 09		bcs $39472b	                BCS save_cluster                ; If we got a cluster, write the data to it
.394722		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.394723		85 10		sta $0330	                STA DOS_CLUS_ID
.394725		68		pla		                PLA
.394726		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394728		82 7d 00	brl $3947a8	                BRL pass_failure                ; Pass the failure back up the chain
.39472b		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.39472d		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394730		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394732		8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.394735		22 d1 3f 39	jsl $393fd1	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394739		90 e7		bcc $394722	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.39473b		68		pla		                PLA                             ; Restore the cluster of the file
.39473c		85 10		sta $0330	                STA DOS_CLUS_ID
.39473e		68		pla		                PLA
.39473f		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394741		22 45 43 39	jsl $394345	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.394745		b0 fa		bcs $394741	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.394747		e2 20		sep #$20	                SEP #$20        ; set A short
.394749		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.39474d		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.39474f		d0 3d		bne $39478e	                BNE fat32                       ; No: assume it's FAT32
.394751						fat12
.394751		c2 20		rep #$20	                REP #$20        ; set A long
.394753		22 20 42 39	jsl $394220	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.394757		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.394759		89 01 00	bit #$0001	                BIT #1
.39475c		d0 11		bne $39476f	                BNE is_odd
.39475e		ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.394761		29 ff 0f	and #$0fff	                AND #$0FFF
.394764		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394767		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.39476a		29 00 f0	and #$f000	                AND #$F000
.39476d		80 10		bra $39477f	                BRA update_fat12
.39476f		ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.394772		0a		asl a		                ASL A
.394773		0a		asl a		                ASL A
.394774		0a		asl a		                ASL A
.394775		0a		asl a		                ASL A
.394776		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394779		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.39477c		29 0f 00	and #$000f	                AND #$000F
.39477f		0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.394782		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394785		22 54 46 39	jsl $394654	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394789		b0 22		bcs $3947ad	                BCS ret_success
.39478b		82 1a 00	brl $3947a8	                BRL pass_failure
.39478e						fat32
.39478e		c2 20		rep #$20	                REP #$20        ; set A long
.394790		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.394793		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394796		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394799		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.39479c		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.3947a0		b0 0b		bcs $3947ad	                BCS ret_success
.3947a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3947a4		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.3947a6		85 0e		sta $032e	                STA DOS_STATUS
.3947a8		28		plp		pass_failure    PLP
.3947a9		2b		pld		                PLD
.3947aa		ab		plb		                PLB
.3947ab		18		clc		                CLC
.3947ac		6b		rtl		                RTL
.3947ad						ret_success
.3947ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3947af		64 0e		stz $032e	                STZ DOS_STATUS
.3947b1		28		plp		                PLP
.3947b2		2b		pld		                PLD
.3947b3		ab		plb		                PLB
.3947b4		38		sec		                SEC
.3947b5		6b		rtl		                RTL
.3947b6						BCD2BIN
.3947b6		8b		phb		                PHB
.3947b7		0b		phd		                PHD
.3947b8		08		php		                PHP
.3947b9		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3947bc		ab		plb		                PLB
.3947bd		ab		plb		                PLB
.3947be		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3947c1		2b		pld		                PLD
.3947c2		c2 30		rep #$30	                REP #$30        ; set A&X long
.3947c4		85 28		sta $0348	                STA DOS_TEMP
.3947c6		29 0f 00	and #$000f	                AND #$000F
.3947c9		85 2a		sta $034a	                STA DOS_TEMP+2
.3947cb		a5 28		lda $0348	                LDA DOS_TEMP
.3947cd		4a		lsr a		                LSR A
.3947ce		4a		lsr a		                LSR A
.3947cf		4a		lsr a		                LSR A
.3947d0		4a		lsr a		                LSR A
.3947d1		85 28		sta $0348	                STA DOS_TEMP
.3947d3		29 0f 00	and #$000f	                AND #$000F
.3947d6		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.3947da		a9 0a 00	lda #$000a	                LDA #10
.3947dd		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.3947e1		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.3947e5		18		clc		                CLC
.3947e6		65 2a		adc $034a	                ADC DOS_TEMP+2
.3947e8		85 2a		sta $034a	                STA DOS_TEMP+2
.3947ea		a5 28		lda $0348	                LDA DOS_TEMP
.3947ec		4a		lsr a		                LSR A
.3947ed		4a		lsr a		                LSR A
.3947ee		4a		lsr a		                LSR A
.3947ef		4a		lsr a		                LSR A
.3947f0		85 28		sta $0348	                STA DOS_TEMP
.3947f2		29 0f 00	and #$000f	                AND #$000F
.3947f5		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.3947f9		a9 64 00	lda #$0064	                LDA #100
.3947fc		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394800		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394804		18		clc		                CLC
.394805		65 2a		adc $034a	                ADC DOS_TEMP+2
.394807		85 2a		sta $034a	                STA DOS_TEMP+2
.394809		a5 28		lda $0348	                LDA DOS_TEMP
.39480b		4a		lsr a		                LSR A
.39480c		4a		lsr a		                LSR A
.39480d		4a		lsr a		                LSR A
.39480e		4a		lsr a		                LSR A
.39480f		29 0f 00	and #$000f	                AND #$000F
.394812		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394816		a9 e8 03	lda #$03e8	                LDA #1000
.394819		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39481d		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394821		18		clc		                CLC
.394822		65 2a		adc $034a	                ADC DOS_TEMP+2
.394824		28		plp		                PLP
.394825		2b		pld		                PLD
.394826		ab		plb		                PLB
.394827		6b		rtl		                RTL
.394828						DOS_RTCCREATE
.394828		8b		phb		                PHB
.394829		0b		phd		                PHD
.39482a		08		php		                PHP
.39482b		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.39482e		ab		plb		                PLB
.39482f		ab		plb		                PLB
.394830		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394833		2b		pld		                PLD
.394834		c2 10		rep #$10	                REP #$10        ; set X long
.394836		e2 20		sep #$20	                SEP #$20        ; set A short
.394838		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.39483c		09 08		ora #$08	                ORA #%00001000
.39483e		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394842		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.394846		85 29		sta $0349	                STA DOS_TEMP+1
.394848		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.39484c		85 28		sta $0348	                STA DOS_TEMP
.39484e		c2 20		rep #$20	                REP #$20        ; set A long
.394850		a5 28		lda $0348	                LDA DOS_TEMP
.394852		22 b6 47 39	jsl $3947b6	                JSL BCD2BIN                 ; Convert it to binary
.394856		85 28		sta $0348	                STA DOS_TEMP
.394858		38		sec		                SEC                         ; Year is relative to 1980
.394859		e9 bc 07	sbc #$07bc	                SBC #1980
.39485c		c2 20		rep #$20	                REP #$20        ; set A long
.39485e		0a		asl a		                ASL A
.39485f		0a		asl a		                ASL A
.394860		0a		asl a		                ASL A
.394861		0a		asl a		                ASL A
.394862		0a		asl a		                ASL A
.394863		0a		asl a		                ASL A
.394864		0a		asl a		                ASL A
.394865		0a		asl a		                ASL A
.394866		0a		asl a		                ASL A
.394867		29 00 fe	and #$fe00	                AND #$FE00
.39486a		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.39486d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39486f		e2 20		sep #$20	                SEP #$20        ; set A short
.394871		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.394875		c2 20		rep #$20	                REP #$20        ; set A long
.394877		29 ff 00	and #$00ff	                AND #$00FF
.39487a		22 b6 47 39	jsl $3947b6	                JSL BCD2BIN                 ; Convert it to binary
.39487e		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.394881		0a		asl a		                ASL A
.394882		0a		asl a		                ASL A
.394883		0a		asl a		                ASL A
.394884		0a		asl a		                ASL A
.394885		0a		asl a		                ASL A
.394886		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.394889		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.39488c		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.39488e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394890		e2 20		sep #$20	                SEP #$20        ; set A short
.394892		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.394896		c2 20		rep #$20	                REP #$20        ; set A long
.394898		29 ff 00	and #$00ff	                AND #$00FF
.39489b		22 b6 47 39	jsl $3947b6	                JSL BCD2BIN                 ; Convert it to binary
.39489f		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.3948a2		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3948a5		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3948a7		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3948a9		e2 20		sep #$20	                SEP #$20        ; set A short
.3948ab		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.3948af		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.3948b1		c2 20		rep #$20	                REP #$20        ; set A long
.3948b3		29 ff 00	and #$00ff	                AND #$00FF
.3948b6		22 b6 47 39	jsl $3947b6	                JSL BCD2BIN                 ; Convert it to binary
.3948ba		c2 20		rep #$20	                REP #$20        ; set A long
.3948bc		0a		asl a		                ASL A
.3948bd		0a		asl a		                ASL A
.3948be		0a		asl a		                ASL A
.3948bf		0a		asl a		                ASL A
.3948c0		0a		asl a		                ASL A
.3948c1		0a		asl a		                ASL A
.3948c2		0a		asl a		                ASL A
.3948c3		0a		asl a		                ASL A
.3948c4		0a		asl a		                ASL A
.3948c5		0a		asl a		                ASL A
.3948c6		0a		asl a		                ASL A
.3948c7		29 00 f8	and #$f800	                AND #$F800
.3948ca		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.3948cd		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3948cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3948d1		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.3948d5		c2 20		rep #$20	                REP #$20        ; set A long
.3948d7		29 ff 00	and #$00ff	                AND #$00FF
.3948da		22 b6 47 39	jsl $3947b6	                JSL BCD2BIN                 ; Convert it to binary
.3948de		c2 20		rep #$20	                REP #$20        ; set A long
.3948e0		0a		asl a		                ASL A
.3948e1		0a		asl a		                ASL A
.3948e2		0a		asl a		                ASL A
.3948e3		0a		asl a		                ASL A
.3948e4		0a		asl a		                ASL A
.3948e5		29 e0 07	and #$07e0	                AND #$07E0
.3948e8		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.3948eb		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3948ed		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3948ef		e2 20		sep #$20	                SEP #$20        ; set A short
.3948f1		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.3948f5		c2 20		rep #$20	                REP #$20        ; set A long
.3948f7		29 ff 00	and #$00ff	                AND #$00FF
.3948fa		22 b6 47 39	jsl $3947b6	                JSL BCD2BIN                 ; Convert it to binary
.3948fe		c2 20		rep #$20	                REP #$20        ; set A long
.394900		29 1f 00	and #$001f	                AND #$001F
.394903		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394906		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394908		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39490a		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.39490e		29 f7 00	and #$00f7	                AND #%11110111
.394911		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394915		28		plp		                PLP
.394916		2b		pld		                PLD
.394917		ab		plb		                PLB
.394918		6b		rtl		                RTL
.394919						DOS_CREATE
.394919		8b		phb		                PHB
.39491a		0b		phd		                PHD
.39491b		08		php		                PHP
.39491c		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.39491f		ab		plb		                PLB
.394920		ab		plb		                PLB
.394921		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394924		2b		pld		                PLD
.394925		c2 30		rep #$30	                REP #$30        ; set A&X long
.394927		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.39492a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39492c		85 28		sta $0348	                STA DOS_TEMP
.39492e		c8		iny		                INY
.39492f		c8		iny		                INY
.394930		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394932		85 2a		sta $034a	                STA DOS_TEMP+2
.394934		e2 20		sep #$20	                SEP #$20        ; set A short
.394936		a0 00 00	ldy #$0000	                LDY #0
.394939		a2 00 00	ldx #$0000	                LDX #0
.39493c		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.39493e		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.394940		f0 04		beq $394946	                BEQ find_file                   ; If it's NULL, we're done
.394942		e8		inx		                INX
.394943		c8		iny		                INY
.394944		80 f6		bra $39493c	                BRA path_loop
.394946		22 c1 40 39	jsl $3940c1	find_file       JSL DOS_PARSE_PATH
.39494a		22 4e 41 39	jsl $39414e	                JSL DOS_FINDFILE
.39494e		90 07		bcc $394957	                BCC set_device
.394950		e2 20		sep #$20	                SEP #$20        ; set A short
.394952		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.394954		82 d2 00	brl $394a29	                BRL ret_failure
.394957						set_device
.394957		e2 20		sep #$20	                SEP #$20        ; set A short
.394959		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.39495c		a5 01		lda $0321	                LDA BIOS_DEV
.39495e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394960						validate_name
.394960		22 48 44 39	jsl $394448	                JSL DOS_FREECLUS
.394964		b0 03		bcs $394969	                BCS save_data
.394966		82 c4 00	brl $394a2d	                BRL pass_failure
.394969						save_data
.394969		c2 20		rep #$20	                REP #$20        ; set A long
.39496b		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.39496e		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.394970		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394972		c8		iny		                INY
.394973		c8		iny		                INY
.394974		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394976		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394978		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.39497b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39497d		85 1c		sta $033c	                STA DOS_BUFF_PTR
.39497f		c8		iny		                INY
.394980		c8		iny		                INY
.394981		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394983		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394985		22 d1 3f 39	jsl $393fd1	                JSL DOS_PUTCLUSTER
.394989		b0 00		bcs $39498b	                BCS find_dir
.39498b						find_dir
.39498b		c2 20		rep #$20	                REP #$20        ; set A long
.39498d		22 6f 3b 39	jsl $393b6f	                JSL DOS_DIRFINDFREE
.394991		b0 1a		bcs $3949ad	                BCS set_entry
.394993		c2 20		rep #$20	                REP #$20        ; set A long
.394995		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.394998		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.39499a		85 10		sta $0330	                STA DOS_CLUS_ID
.39499c		c8		iny		                INY
.39499d		c8		iny		                INY
.39499e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3949a0		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3949a2		22 d3 46 39	jsl $3946d3	                JSL DELCLUSTER32                ; Delete the cluster
.3949a6		e2 20		sep #$20	                SEP #$20        ; set A short
.3949a8		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.3949aa		82 7c 00	brl $394a29	                BRL ret_failure
.3949ad						set_entry
.3949ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3949af		a0 00 00	ldy #$0000	                LDY #0
.3949b2		a9 00		lda #$00	                LDA #0                          ; NULL
.3949b4		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.3949b6		c8		iny		                INY
.3949b7		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.3949ba		d0 f8		bne $3949b4	                BNE copy_dir_loop
.3949bc		a0 00 00	ldy #$0000	                LDY #0
.3949bf		b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.3949c2		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3949c4		c8		iny		                INY
.3949c5		c0 0b 00	cpy #$000b	                CPY #11
.3949c8		d0 f5		bne $3949bf	                BNE name_loop
.3949ca		c2 20		rep #$20	                REP #$20        ; set A long
.3949cc		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.3949cf		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3949d1		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.3949d4		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3949d6		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.3949d9		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3949db		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3949de		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3949e0		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.3949e3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3949e5		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.3949e8		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3949ea		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.3949ed		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3949ef		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.3949f2		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3949f4		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.3949f7		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.3949fa		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3949fc		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.3949ff		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394a01		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.394a04		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394a06		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.394a09		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394a0b		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.394a0e		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394a10		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.394a13		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394a15		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.394a18		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394a1a		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.394a1d		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394a1f		c2 20		rep #$20	                REP #$20        ; set A long
.394a21		22 17 3c 39	jsl $393c17	                JSL DOS_DIRWRITE
.394a25		b0 0b		bcs $394a32	                BCS ret_success
.394a27		80 04		bra $394a2d	                BRA pass_failure
.394a29						ret_failure
.394a29		e2 20		sep #$20	                SEP #$20        ; set A short
.394a2b		85 0e		sta $032e	                STA DOS_STATUS
.394a2d		28		plp		pass_failure    PLP
.394a2e		2b		pld		                PLD
.394a2f		ab		plb		                PLB
.394a30		18		clc		                CLC
.394a31		6b		rtl		                RTL
.394a32						ret_success
.394a32		e2 20		sep #$20	                SEP #$20        ; set A short
.394a34		64 0e		stz $032e	                STZ DOS_STATUS
.394a36		28		plp		                PLP
.394a37		2b		pld		                PLD
.394a38		ab		plb		                PLB
.394a39		38		sec		                SEC
.394a3a		6b		rtl		                RTL
.394a3b						DOS_COPYPATH
.394a3b		da		phx		                PHX
.394a3c		5a		phy		                PHY
.394a3d		8b		phb		                PHB
.394a3e		0b		phd		                PHD
.394a3f		08		php		                PHP
.394a40		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394a43		ab		plb		                PLB
.394a44		ab		plb		                PLB
.394a45		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394a48		2b		pld		                PLD
.394a49		c2 30		rep #$30	                REP #$30        ; set A&X long
.394a4b		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.394a4e		a2 00 00	ldx #$0000	                LDX #0
.394a51		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.394a53		e8		inx		                INX
.394a54		e8		inx		                INX
.394a55		e0 00 01	cpx #$0100	                CPX #256
.394a58		d0 f7		bne $394a51	                BNE clr_loop
.394a5a		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.394a5c		d0 04		bne $394a62	                BNE get_path            ; No: attempt to fetch the path
.394a5e		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.394a60		f0 27		beq $394a89	                BEQ done                ; Yes: return an empty buffer
.394a62		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.394a65		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394a67		85 28		sta $0348	                STA DOS_TEMP
.394a69		c8		iny		                INY
.394a6a		c8		iny		                INY
.394a6b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394a6d		85 2a		sta $034a	                STA DOS_TEMP+2
.394a6f		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.394a71		d0 04		bne $394a77	                BNE start_copy          ; No: start copying it
.394a73		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394a75		f0 12		beq $394a89	                BEQ done                ; Yes: return an empty buffer
.394a77						start_copy
.394a77		e2 20		sep #$20	                SEP #$20        ; set A short
.394a79		a2 00 00	ldx #$0000	                LDX #0
.394a7c		a0 00 00	ldy #$0000	                LDY #0
.394a7f		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.394a81		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.394a83		f0 04		beq $394a89	                BEQ done
.394a85		e8		inx		                INX
.394a86		c8		iny		                INY
.394a87		d0 f6		bne $394a7f	                BNE loop
.394a89		28		plp		done            PLP
.394a8a		2b		pld		                PLD
.394a8b		ab		plb		                PLB
.394a8c		7a		ply		                PLY
.394a8d		fa		plx		                PLX
.394a8e		6b		rtl		                RTL

;******  Return to file: src\SDOS.asm

.394a8f						DOS_TEST
.394a8f		8b		phb		                PHB
.394a90		0b		phd		                PHD
.394a91		08		php		                PHP
.394a92		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394a95		ab		plb		                PLB
.394a96		ab		plb		                PLB
.394a97		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394a9a		2b		pld		                PLD
.394a9b		c2 30		rep #$30	                REP #$30        ; set A&X long
.394a9d		a9 c3 4a	lda #$4ac3	                LDA #<>src_file
.394aa0		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.394aa4		a9 39 00	lda #$0039	                LDA #`src_file
.394aa7		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.394aab		a9 d0 4a	lda #$4ad0	                LDA #<>dst_file
.394aae		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.394ab2		a9 39 00	lda #$0039	                LDA #`dst_file
.394ab5		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.394ab9		22 29 52 39	jsl $395229	                JSL IF_COPY
.394abd		b0 00		bcs $394abf	                BCS done
.394abf		28		plp		done            PLP
.394ac0		2b		pld		                PLD
.394ac1		ab		plb		                PLB
.394ac2		6b		rtl		                RTL
>394ac3		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>394acb		2e 62 61 73 00
>394ad0		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>394ad8		32 2e 62 61 73 00
.394ade						IF_OPEN
.394ade		da		phx		                PHX
.394adf		5a		phy		                PHY
.394ae0		0b		phd		                PHD
.394ae1		8b		phb		                PHB
.394ae2		08		php		                PHP
.394ae3		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394ae6		ab		plb		                PLB
.394ae7		ab		plb		                PLB
.394ae8		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394aeb		2b		pld		                PLD
.394aec		e2 20		sep #$20	                SEP #$20        ; set A short
.394aee		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.394af1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394af3		89 20		bit #$20	                BIT #FD_STAT_OPEN
.394af5		f0 05		beq $394afc	                BEQ ok_to_open
.394af7		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.394af9		82 ed 05	brl $3950e9	                BRL IF_FAILURE
.394afc		22 3b 4a 39	jsl $394a3b	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.394b00		22 4e 41 39	jsl $39414e	                JSL DOS_FINDFILE                ; Attempt to find the file
.394b04		b0 03		bcs $394b09	                BCS is_found                    ; If OK: we found the file
.394b06		82 e4 05	brl $3950ed	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.394b09						is_found
.394b09		e2 20		sep #$20	                SEP #$20        ; set A short
.394b0b		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.394b0e		a5 01		lda $0321	                LDA BIOS_DEV
.394b10		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b12		c2 20		rep #$20	                REP #$20        ; set A long
.394b14		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.394b17		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394b19		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394b1b		c8		iny		                INY
.394b1c		c8		iny		                INY
.394b1d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394b1f		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394b21		22 9f 3f 39	jsl $393f9f	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.394b25		b0 03		bcs $394b2a	                BCS read_cluster
.394b27		82 c3 05	brl $3950ed	                BRL IF_PASSFAILURE
.394b2a		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.394b2d		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394b2f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b31		c8		iny		                INY
.394b32		c8		iny		                INY
.394b33		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394b35		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b37		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.394b3a		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394b3c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b3e		c8		iny		                INY
.394b3f		c8		iny		                INY
.394b40		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394b42		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b44		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.394b47		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394b49		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.394b4c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b4e		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.394b51		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394b53		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.394b56		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b58		e2 20		sep #$20	                SEP #$20        ; set A short
.394b5a		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.394b5d		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.394b5f		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394b61		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b63		82 8e 05	brl $3950f4	                BRL IF_SUCCESS
.394b66						IF_CREATE
.394b66		da		phx		                PHX
.394b67		5a		phy		                PHY
.394b68		0b		phd		                PHD
.394b69		8b		phb		                PHB
.394b6a		08		php		                PHP
.394b6b		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394b6e		ab		plb		                PLB
.394b6f		ab		plb		                PLB
.394b70		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394b73		2b		pld		                PLD
.394b74		22 19 49 39	jsl $394919	                JSL DOS_CREATE                  ; Attempt to create the file
.394b78		90 18		bcc $394b92	                BCC pass_failure                ; If it fails: pass the failure up the chain
.394b7a		c2 30		rep #$30	                REP #$30        ; set A&X long
.394b7c		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.394b7f		a9 00 00	lda #$0000	                LDA #0
.394b82		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b84		c8		iny		                INY
.394b85		c8		iny		                INY
.394b86		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b88		e2 20		sep #$20	                SEP #$20        ; set A short
.394b8a		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.394b8d		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.394b8f		82 62 05	brl $3950f4	                BRL IF_SUCCESS
.394b92		82 54 05	brl $3950e9	pass_failure    BRL IF_FAILURE
.394b95						IF_CLOSE
.394b95		da		phx		                PHX
.394b96		5a		phy		                PHY
.394b97		0b		phd		                PHD
.394b98		8b		phb		                PHB
.394b99		08		php		                PHP
.394b9a		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394b9d		ab		plb		                PLB
.394b9e		ab		plb		                PLB
.394b9f		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394ba2		2b		pld		                PLD
.394ba3		e2 20		sep #$20	                SEP #$20        ; set A short
.394ba5		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.394ba8		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394baa		89 02		bit #$02	                BIT #FD_STAT_WRITE
.394bac		f0 09		beq $394bb7	                BEQ set_flag                    ; No, just mark it closed
.394bae		22 18 4c 39	jsl $394c18	                JSL IF_WRITE                    ; Attempt to write the cluster
.394bb2		b0 03		bcs $394bb7	                BCS set_flag
.394bb4		82 36 05	brl $3950ed	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.394bb7		22 d8 51 39	jsl $3951d8	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.394bbb		82 36 05	brl $3950f4	                BRL IF_SUCCESS
.394bbe						IF_READ
.394bbe		da		phx		                PHX
.394bbf		5a		phy		                PHY
.394bc0		0b		phd		                PHD
.394bc1		8b		phb		                PHB
.394bc2		08		php		                PHP
.394bc3		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394bc6		ab		plb		                PLB
.394bc7		ab		plb		                PLB
.394bc8		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394bcb		2b		pld		                PLD
.394bcc		c2 10		rep #$10	                REP #$10        ; set X long
.394bce		e2 20		sep #$20	                SEP #$20        ; set A short
.394bd0						get_dev
.394bd0		e2 20		sep #$20	                SEP #$20        ; set A short
.394bd2		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.394bd5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394bd7		85 01		sta $0321	                STA BIOS_DEV
.394bd9		22 28 3d 39	jsl $393d28	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.394bdd		c2 20		rep #$20	                REP #$20        ; set A long
.394bdf		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.394be2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394be4		85 10		sta $0330	                STA DOS_CLUS_ID
.394be6		c8		iny		                INY
.394be7		c8		iny		                INY
.394be8		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394bea		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394bec		22 45 43 39	jsl $394345	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.394bf0		90 13		bcc $394c05	                BCC pass_failure                ; If not OK: pass the failure up the chain
.394bf2		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.394bf5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394bf7		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394bf9		c8		iny		                INY
.394bfa		c8		iny		                INY
.394bfb		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394bfd		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394bff		22 9f 3f 39	jsl $393f9f	                JSL DOS_GETCLUSTER              ; Get the cluster
.394c03		b0 03		bcs $394c08	                BCS ret_success                 ; If ok: return success
.394c05						pass_failure
.394c05		82 e5 04	brl $3950ed	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.394c08		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.394c0b		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394c0d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394c0f		c8		iny		                INY
.394c10		c8		iny		                INY
.394c11		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394c13		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394c15		82 dc 04	brl $3950f4	                BRL IF_SUCCESS
.394c18						IF_WRITE
.394c18		da		phx		                PHX
.394c19		5a		phy		                PHY
.394c1a		0b		phd		                PHD
.394c1b		8b		phb		                PHB
.394c1c		08		php		                PHP
.394c1d		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394c20		ab		plb		                PLB
.394c21		ab		plb		                PLB
.394c22		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394c25		2b		pld		                PLD
.394c26		c2 10		rep #$10	                REP #$10        ; set X long
.394c28		e2 20		sep #$20	                SEP #$20        ; set A short
.394c2a		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.394c2d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c2f		85 01		sta $0321	                STA BIOS_DEV
.394c31		22 28 3d 39	jsl $393d28	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.394c35		c2 20		rep #$20	                REP #$20        ; set A long
.394c37		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.394c3a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c3c		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394c3e		c8		iny		                INY
.394c3f		c8		iny		                INY
.394c40		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c42		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394c44		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.394c47		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c49		85 10		sta $0330	                STA DOS_CLUS_ID
.394c4b		c8		iny		                INY
.394c4c		c8		iny		                INY
.394c4d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c4f		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c51		d0 1a		bne $394c6d	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.394c53		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394c55		d0 16		bne $394c6d	                BNE rewrite_cluster
.394c57		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.394c5a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c5c		85 10		sta $0330	                STA DOS_CLUS_ID
.394c5e		c8		iny		                INY
.394c5f		c8		iny		                INY
.394c60		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c62		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c64		22 08 47 39	jsl $394708	                JSL DOS_APPENDCLUS              ; Append the cluster
.394c68		b0 0c		bcs $394c76	                BCS ret_success                 ; If OK: return success
.394c6a		82 80 04	brl $3950ed	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.394c6d		22 d1 3f 39	jsl $393fd1	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.394c71		b0 03		bcs $394c76	                BCS ret_success                 ; If ok: return success
.394c73		82 77 04	brl $3950ed	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.394c76		82 7b 04	brl $3950f4	ret_success     BRL IF_SUCCESS
.394c79						IF_DIROPEN
.394c79		da		phx		                PHX
.394c7a		5a		phy		                PHY
.394c7b		0b		phd		                PHD
.394c7c		8b		phb		                PHB
.394c7d		08		php		                PHP
.394c7e		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394c81		ab		plb		                PLB
.394c82		ab		plb		                PLB
.394c83		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394c86		2b		pld		                PLD
.394c87		c2 30		rep #$30	                REP #$30        ; set A&X long
.394c89		22 3b 4a 39	jsl $394a3b	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.394c8d		22 c1 40 39	jsl $3940c1	                JSL DOS_PARSE_PATH          ; Parse the path
.394c91		22 28 3d 39	jsl $393d28	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.394c95		b0 03		bcs $394c9a	                BCS get_root_dir            ; If successful: get the root directory
.394c97		82 53 04	brl $3950ed	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.394c9a						get_root_dir
.394c9a		c2 30		rep #$30	                REP #$30        ; set A&X long
.394c9c		22 2e 3a 39	jsl $393a2e	                JSL DOS_DIROPEN
.394ca0		b0 03		bcs $394ca5	                BCS success
.394ca2		82 48 04	brl $3950ed	                BRL IF_PASSFAILURE
.394ca5		82 4c 04	brl $3950f4	success         BRL IF_SUCCESS
.394ca8						IF_DIRNEXT
.394ca8		5c b9 3a 39	jmp $393ab9	                JML DOS_DIRNEXT
.394cac						IF_DELETE
.394cac		da		phx		                PHX
.394cad		5a		phy		                PHY
.394cae		0b		phd		                PHD
.394caf		8b		phb		                PHB
.394cb0		08		php		                PHP
.394cb1		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394cb4		ab		plb		                PLB
.394cb5		ab		plb		                PLB
.394cb6		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394cb9		2b		pld		                PLD
.394cba		c2 30		rep #$30	                REP #$30        ; set A&X long
.394cbc		22 4e 41 39	jsl $39414e	                JSL DOS_FINDFILE
.394cc0		b0 03		bcs $394cc5	                BCS get_first_clus
.394cc2		82 28 04	brl $3950ed	                BRL IF_PASSFAILURE
.394cc5						get_first_clus
.394cc5		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.394cc8		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394cca		85 10		sta $0330	                STA DOS_CLUS_ID
.394ccc		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394ccf		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394cd1		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394cd3		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394cd5		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.394cd8		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394cda		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.394cdd		22 45 43 39	jsl $394345	del_loop        JSL NEXTCLUSTER
.394ce1		90 2f		bcc $394d12	                BCC del_one
.394ce3		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394ce5		8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.394ce8		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394cea		8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.394ced		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.394cf0		85 10		sta $0330	                STA DOS_CLUS_ID
.394cf2		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.394cf5		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394cf7		22 d3 46 39	jsl $3946d3	                JSL DELCLUSTER32
.394cfb		b0 03		bcs $394d00	                BCS go_next
.394cfd		82 ed 03	brl $3950ed	                BRL IF_PASSFAILURE
.394d00						go_next
.394d00		ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.394d03		85 10		sta $0330	                STA DOS_CLUS_ID
.394d05		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.394d08		ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.394d0b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394d0d		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.394d10		80 cb		bra $394cdd	                BRA del_loop
.394d12						del_one
.394d12		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.394d15		85 10		sta $0330	                STA DOS_CLUS_ID
.394d17		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.394d1a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394d1c		22 43 46 39	jsl $394643	                JSL DELCLUSTER
.394d20		b0 03		bcs $394d25	                BCS free_dir_entry
.394d22		82 c8 03	brl $3950ed	                BRL IF_PASSFAILURE
.394d25						free_dir_entry
.394d25		e2 20		sep #$20	                SEP #$20        ; set A short
.394d27		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.394d2a		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.394d2c		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394d2e		22 17 3c 39	jsl $393c17	                JSL DOS_DIRWRITE                ; Write the directory entry back
.394d32		b0 03		bcs $394d37	                BCS ret_success
.394d34		82 b6 03	brl $3950ed	                BRL IF_PASSFAILURE
.394d37		82 ba 03	brl $3950f4	ret_success     BRL IF_SUCCESS
.394d3a						IF_DIRREAD
.394d3a		da		phx		                PHX
.394d3b		5a		phy		                PHY
.394d3c		0b		phd		                PHD
.394d3d		8b		phb		                PHB
.394d3e		08		php		                PHP
.394d3f		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394d42		ab		plb		                PLB
.394d43		ab		plb		                PLB
.394d44		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394d47		2b		pld		                PLD
.394d48		c2 30		rep #$30	                REP #$30        ; set A&X long
.394d4a		22 4e 41 39	jsl $39414e	                JSL DOS_FINDFILE
.394d4e		b0 03		bcs $394d53	                BCS success
.394d50		82 96 03	brl $3950e9	                BRL IF_FAILURE
.394d53		82 9e 03	brl $3950f4	success         BRL IF_SUCCESS
.394d56						IF_DIRWRITE
.394d56		5c 17 3c 39	jmp $393c17	                JML DOS_DIRWRITE
.394d5a						IF_LOAD
.394d5a		da		phx		                PHX
.394d5b		5a		phy		                PHY
.394d5c		0b		phd		                PHD
.394d5d		8b		phb		                PHB
.394d5e		08		php		                PHP
.394d5f		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394d62		ab		plb		                PLB
.394d63		ab		plb		                PLB
.394d64		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394d67		2b		pld		                PLD
.394d68		c2 30		rep #$30	                REP #$30        ; set A&X long
.394d6a		22 de 4a 39	jsl $394ade	                JSL IF_OPEN
.394d6e		b0 03		bcs $394d73	                BCS setup                   ; If success: start setting things up
.394d70		82 7a 03	brl $3950ed	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.394d73						setup
.394d73		c2 20		rep #$20	                REP #$20        ; set A long
.394d75		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.394d78		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d7a		85 2c		sta $034c	                STA DOS_FILE_SIZE
.394d7c		c8		iny		                INY
.394d7d		c8		iny		                INY
.394d7e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d80		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.394d82		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.394d85		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d87		85 30		sta $0350	                STA DOS_SRC_PTR
.394d89		c8		iny		                INY
.394d8a		c8		iny		                INY
.394d8b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d8d		85 32		sta $0352	                STA DOS_SRC_PTR+2
.394d8f		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.394d91		c9 40 00	cmp #$0040	                CMP #$0040
.394d94		b0 04		bcs $394d9a	                BGE load_by_type            ; No: try to load it by type
.394d96		5c bf 4f 39	jmp $394fbf	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.394d9a		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.394d9d		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.394da0						type_loop
.394da0		e2 20		sep #$20	                SEP #$20        ; set A short
.394da2		bf e6 4d 39	lda $394de6,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.394da6		f0 37		beq $394ddf	                BEQ no_match                ; If NULL... we didn't get a match
.394da8		d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.394dab		d0 28		bne $394dd5	                BNE next_entry              ; If they don't match, try the next entry
.394dad		bf e7 4d 39	lda $394de7,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.394db1		d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.394db4		d0 1f		bne $394dd5	                BNE next_entry              ; If they don't match, try the next entry
.394db6		bf e8 4d 39	lda $394de8,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.394dba		d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.394dbd		d0 16		bne $394dd5	                BNE next_entry              ; If they don't match, try the next entry
.394dbf		c2 20		rep #$20	                REP #$20        ; set A long
.394dc1		bf e9 4d 39	lda $394de9,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.394dc5		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.394dc7		e2 20		sep #$20	                SEP #$20        ; set A short
.394dc9		bf eb 4d 39	lda $394deb,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.394dcd		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.394dcf		a2 00 00	ldx #$0000	                LDX #0
.394dd2		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.394dd5						next_entry
.394dd5		c2 30		rep #$30	                REP #$30        ; set A&X long
.394dd7		8a		txa		                TXA
.394dd8		18		clc		                CLC
.394dd9		69 06 00	adc #$0006	                ADC #6
.394ddc		aa		tax		                TAX
.394ddd		80 c1		bra $394da0	                BRA type_loop               ; And check it against the file
.394ddf						no_match
.394ddf		e2 20		sep #$20	                SEP #$20        ; set A short
.394de1		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.394de3		82 03 03	brl $3950e9	                BRL IF_FAILURE
>394de6		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>394de9		f3 4d				                .word <>IF_LOADPGX
>394deb		39				                .byte `IF_LOADPGX
>394dec		50 47 5a			                .text "PGZ"                 ; "PGZ" --> IF_LOADPGZ
>394def		7b 4e				                .word <>IF_LOADPGZ
>394df1		39				                .byte `IF_LOADPGZ
>394df2		00				                .byte 0
.394df3						IF_LOADPGX
.394df3		c2 10		rep #$10	                REP #$10        ; set X long
.394df5		e2 20		sep #$20	                SEP #$20        ; set A short
.394df7		a0 00 00	ldy #$0000	                LDY #0
.394dfa		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.394dfc		c9 50		cmp #$50	                CMP #'P'
.394dfe		d0 15		bne $394e15	                BNE fail_sig                        ; If not found, fail
.394e00		c8		iny		                INY
.394e01		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.394e03		c9 47		cmp #$47	                CMP #'G'
.394e05		d0 0e		bne $394e15	                BNE fail_sig
.394e07		c8		iny		                INY
.394e08		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.394e0a		c9 58		cmp #$58	                CMP #'X'
.394e0c		d0 07		bne $394e15	                BNE fail_sig
.394e0e		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.394e0f		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.394e11		c9 01		cmp #$01	                CMP #$01
.394e13		f0 17		beq $394e2c	                BEQ get_dest                        ; All passes: go to get the destination address
.394e15		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.394e17		22 e9 50 39	jsl $3950e9	                JSL IF_FAILURE
.394e1b						adjust_size
.394e1b		c2 20		rep #$20	                REP #$20        ; set A long
.394e1d		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.394e1e		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.394e20		e9 08 00	sbc #$0008	                SBC #8
.394e23		85 2c		sta $034c	                STA DOS_FILE_SIZE
.394e25		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.394e27		e9 00 00	sbc #$0000	                SBC #0
.394e2a		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.394e2c						get_dest
.394e2c		c2 20		rep #$20	                REP #$20        ; set A long
.394e2e		c8		iny		                INY
.394e2f		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.394e31		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.394e33		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.394e35		c8		iny		                INY
.394e36		c8		iny		                INY
.394e37		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.394e39		85 36		sta $0356	                STA DOS_DST_PTR+2
.394e3b		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.394e3d		c8		iny		                INY                                 ; Point to the first data byte
.394e3e		c8		iny		                INY
.394e3f						copy_loop
.394e3f		e2 20		sep #$20	                SEP #$20        ; set A short
.394e41		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.394e43		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.394e45		c2 20		rep #$20	                REP #$20        ; set A long
.394e47		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.394e49		d0 02		bne $394e4d	                BNE dec_file_size
.394e4b		e6 36		inc $0356	                INC DOS_DST_PTR+2
.394e4d		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.394e4e		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.394e50		e9 01 00	sbc #$0001	                SBC #1
.394e53		85 2c		sta $034c	                STA DOS_FILE_SIZE
.394e55		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.394e57		e9 00 00	sbc #$0000	                SBC #0
.394e5a		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.394e5c		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.394e5e		d0 04		bne $394e64	                BNE next_byte
.394e60		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.394e62		f0 14		beq $394e78	                BEQ done                            ; Yes: we're done
.394e64		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.394e65		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.394e68		d0 d5		bne $394e3f	                BNE copy_loop                       ; No: keep copying
.394e6a		22 33 44 39	jsl $394433	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.394e6e		b0 03		bcs $394e73	                BCS next_cluster
.394e70		82 7a 02	brl $3950ed	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.394e73		a0 00 00	ldy #$0000	next_cluster    LDY #0
.394e76		80 c7		bra $394e3f	                BRA copy_loop                       ; Go back to copying
.394e78		82 79 02	brl $3950f4	done            BRL IF_SUCCESS
.394e7b						IF_LOADPGZ
.394e7b		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394e7e		ab		plb		                PLB
.394e7f		ab		plb		                PLB
.394e80		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394e83		2b		pld		                PLD
.394e84		c2 30		rep #$30	                REP #$30        ; set A&X long
.394e86		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE                  ; Get the file size
.394e89		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e8b		85 2c		sta $034c	                STA DOS_FILE_SIZE                   ; And save it to DOS_FILE_SIZE
.394e8d		c8		iny		                INY
.394e8e		c8		iny		                INY
.394e8f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e91		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.394e93		e2 20		sep #$20	                SEP #$20        ; set A short
.394e95		a0 00 00	ldy #$0000	                LDY #0                              ; Starting at the beginning of the file
.394e98		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "Z" signature
.394e9a		c9 5a		cmp #$5a	                CMP #'Z'
.394e9c		f0 06		beq $394ea4	                BEQ start_block                     ; If found, get the starting address
.394e9e		a9 19		lda #$19	fail_sig        LDA #DOS_ERR_PGZSIG                 ; Fail with a PGZSIG error code
.394ea0		22 e9 50 39	jsl $3950e9	                JSL IF_FAILURE
.394ea4		c8		iny		start_block     INY
.394ea5						get_addr
.394ea5		e2 20		sep #$20	                SEP #$20        ; set A short
.394ea7		22 2a 4f 39	jsl $394f2a	                JSL IF_FILE_EOF                     ; Check if EOF
.394eab		90 03		bcc $394eb0	                BCC get_addr_lo
.394ead		82 44 02	brl $3950f4	done            BRL IF_SUCCESS                      ; If so: we're done
.394eb0		22 5d 4f 39	jsl $394f5d	get_addr_lo     JSL IF_READ_NEXT                    ; Get the next byte
.394eb4		90 47		bcc $394efd	                BCC ret_failure                     ; Got an error: pass it on
.394eb6		85 34		sta $0354	                STA DOS_DST_PTR                     ; Save it as the low byte of the destination address
.394eb8		22 5d 4f 39	jsl $394f5d	                JSL IF_READ_NEXT                    ; Get the next byte
.394ebc		90 3f		bcc $394efd	                BCC ret_failure                     ; Got an error: pass it on
.394ebe		85 35		sta $0355	                STA DOS_DST_PTR+1                   ; Save it as the middle byte of the destination address
.394ec0		22 5d 4f 39	jsl $394f5d	                JSL IF_READ_NEXT                    ; Get the next byte
.394ec4		90 37		bcc $394efd	                BCC ret_failure                     ; Got an error: pass it on
.394ec6		85 36		sta $0356	                STA DOS_DST_PTR+2                   ; Save it as the high byte of the destination address
.394ec8		22 5d 4f 39	jsl $394f5d	                JSL IF_READ_NEXT                    ; Get the next byte
.394ecc		90 2f		bcc $394efd	                BCC ret_failure                     ; Got an error: pass it on
.394ece		85 50		sta $0370	                STA DOS_BLOCK_SIZE                  ; Save it as the low byte of the block size
.394ed0		22 5d 4f 39	jsl $394f5d	                JSL IF_READ_NEXT                    ; Get the next byte
.394ed4		90 27		bcc $394efd	                BCC ret_failure                     ; Got an error: pass it on
.394ed6		85 51		sta $0371	                STA DOS_BLOCK_SIZE+1                ; Save it as the middle byte of the block size
.394ed8		22 5d 4f 39	jsl $394f5d	                JSL IF_READ_NEXT                    ; Get the next byte
.394edc		90 1f		bcc $394efd	                BCC ret_failure                     ; Got an error: pass it on
.394ede		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2                ; Save it as the high byte of the block size
.394ee0		64 53		stz $0373	                STZ DOS_BLOCK_SIZE+3                ; And MSB is 0
.394ee2		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; If DOS_BLOCK_SIZE <> 0, we have data to load
.394ee4		d0 1a		bne $394f00	                BNE read_data
.394ee6		a5 51		lda $0371	                LDA DOS_BLOCK_SIZE+1
.394ee8		d0 16		bne $394f00	                BNE read_data
.394eea		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.394eec		d0 12		bne $394f00	                BNE read_data
.394eee		a5 34		lda $0354	                LDA DOS_DST_PTR                     ; If DOS_BLOCK_SIZE = 0, we have the run address
.394ef0		85 3c		sta $035c	                STA DOS_RUN_PTR
.394ef2		a5 35		lda $0355	                LDA DOS_DST_PTR+1
.394ef4		85 3d		sta $035d	                STA DOS_RUN_PTR+1
.394ef6		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.394ef8		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.394efa		82 f7 01	brl $3950f4	                BRL IF_SUCCESS                      ; And finish
.394efd		82 e9 01	brl $3950e9	ret_failure     BRL IF_FAILURE                      ; If there was an error, pass it up to the caller
.394f00						read_data
.394f00		e2 20		sep #$20	                SEP #$20        ; set A short
.394f02		22 5d 4f 39	jsl $394f5d	                JSL IF_READ_NEXT                    ; Get the next byte
.394f06		90 f5		bcc $394efd	                BCC ret_failure
.394f08		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Save it to the destination address
.394f0a		c2 20		rep #$20	                REP #$20        ; set A long
.394f0c		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Increment the destination pointer
.394f0e		d0 02		bne $394f12	                BNE dec_block_size
.394f10		e6 36		inc $0356	                INC DOS_DST_PTR+2
.394f12		38		sec		dec_block_size  SEC
.394f13		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE
.394f15		e9 01 00	sbc #$0001	                SBC #1
.394f18		85 50		sta $0370	                STA DOS_BLOCK_SIZE
.394f1a		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.394f1c		e9 00 00	sbc #$0000	                SBC #0
.394f1f		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2
.394f21		d0 dd		bne $394f00	                BNE read_data
.394f23		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; Is block size = 0?
.394f25		d0 d9		bne $394f00	                BNE read_data                       ; No: keep reading data
.394f27		82 7b ff	brl $394ea5	                BRL get_addr                        ; Yes: check for another block
.394f2a						IF_FILE_EOF
.394f2a		48		pha		                PHA
.394f2b		5a		phy		                PHY
.394f2c		8b		phb		                PHB
.394f2d		0b		phd		                PHD
.394f2e		08		php		                PHP
.394f2f		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394f32		ab		plb		                PLB
.394f33		ab		plb		                PLB
.394f34		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394f37		2b		pld		                PLD
.394f38		e2 20		sep #$20	                SEP #$20        ; set A short
.394f3a		c2 10		rep #$10	                REP #$10        ; set X long
.394f3c		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.394f3f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y                  ; Restore the index
.394f41		89 80		bit #$80	                BIT #FD_STAT_EOF                    ; Check if the file is EOF
.394f43		f0 07		beq $394f4c	                BEQ chk_file_size                   ; If not: check the file size
.394f45		28		plp		ret_true        PLP                                 ; Return true
.394f46		2b		pld		                PLD
.394f47		ab		plb		                PLB
.394f48		7a		ply		                PLY
.394f49		68		pla		                PLA
.394f4a		38		sec		                SEC
.394f4b		6b		rtl		                RTL
.394f4c						chk_file_size
.394f4c		c2 20		rep #$20	                REP #$20        ; set A long
.394f4e		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; if DOS_FILE_SIZE = 0
.394f50		d0 04		bne $394f56	                BNE ret_false
.394f52		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.394f54		f0 ef		beq $394f45	                BEQ ret_true
.394f56		28		plp		ret_false       PLP                                 ; Return false
.394f57		2b		pld		                PLD
.394f58		ab		plb		                PLB
.394f59		7a		ply		                PLY
.394f5a		68		pla		                PLA
.394f5b		18		clc		                CLC
.394f5c		6b		rtl		                RTL
.394f5d						IF_READ_NEXT
.394f5d		8b		phb		                PHB
.394f5e		0b		phd		                PHD
.394f5f		08		php		                PHP
.394f60		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394f63		ab		plb		                PLB
.394f64		ab		plb		                PLB
.394f65		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394f68		2b		pld		                PLD
.394f69		e2 20		sep #$20	                SEP #$20        ; set A short
.394f6b		c2 10		rep #$10	                REP #$10        ; set X long
.394f6d		22 2a 4f 39	jsl $394f2a	                JSL IF_FILE_EOF                     ; Check if the file is EOF
.394f71		90 06		bcc $394f79	                BCC get_byte                        ; If not: get the next byte
.394f73		a9 18		lda #$18	                LDA #DOS_ERR_EOF                    ; If so: return an EOF error
.394f75		85 0e		sta $032e	                STA DOS_STATUS
.394f77		80 3f		bra $394fb8	                BRA ret_failure
.394f79		b7 30		lda [$0350],y	get_byte        LDA [DOS_SRC_PTR],Y                 ; Read the byte...
.394f7b		48		pha		                PHA                                 ; And save it for the moment
.394f7c		c2 20		rep #$20	                REP #$20        ; set A long
.394f7e		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Decrement the file size...
.394f80		d0 02		bne $394f84	                BNE dec_low
.394f82		c6 2e		dec $034e	                DEC DOS_FILE_SIZE+2
.394f84		c6 2c		dec $034c	dec_low         DEC DOS_FILE_SIZE
.394f86		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.394f88		d0 04		bne $394f8e	                BNE next_byte
.394f8a		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.394f8c		f0 1b		beq $394fa9	                BEQ ret_eof                         ; Yes: mark the file as EOF
.394f8e						next_byte
.394f8e		e2 20		sep #$20	                SEP #$20        ; set A short
.394f90		c8		iny		                INY                                 ; Move to the next byte
.394f91		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE                ; Have we reached the end of the sector?
.394f94		90 0b		bcc $394fa1	                BLT ret_success                     ; No: just return the byte
.394f96		22 33 44 39	jsl $394433	                JSL DOS_READNEXT                    ; Yes: read the next sector
.394f9a		b0 02		bcs $394f9e	                BCS reset_index
.394f9c		80 1a		bra $394fb8	                BRA ret_failure                     ; If failure: pass the error up the chain
.394f9e		a0 00 00	ldy #$0000	reset_index     LDY #0                              ; Reset the index
.394fa1						ret_success
.394fa1		e2 20		sep #$20	                SEP #$20        ; set A short
.394fa3		68		pla		                PLA                                 ; Return the byte retrieved
.394fa4		28		plp		                PLP
.394fa5		2b		pld		                PLD
.394fa6		ab		plb		                PLB
.394fa7		38		sec		                SEC
.394fa8		6b		rtl		                RTL
.394fa9						ret_eof
.394fa9		e2 20		sep #$20	                SEP #$20        ; set A short
.394fab		5a		phy		                PHY                                 ; Save the index
.394fac		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.394faf		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394fb1		09 80		ora #$80	                ORA #FD_STAT_EOF                    ; Mark it EOF
.394fb3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y                  ; And update the status
.394fb5		7a		ply		                PLY                                 ; Restore the index
.394fb6		80 e9		bra $394fa1	                BRA ret_success
.394fb8						ret_failure
.394fb8		e2 20		sep #$20	                SEP #$20        ; set A short
.394fba		28		plp		                PLP
.394fbb		2b		pld		                PLD
.394fbc		ab		plb		                PLB
.394fbd		18		clc		                CLC
.394fbe		6b		rtl		                RTL
.394fbf						IF_LOADRAW
.394fbf		c2 30		rep #$30	                REP #$30        ; set A&X long
.394fc1		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.394fc4						copy_loop
.394fc4		e2 20		sep #$20	                SEP #$20        ; set A short
.394fc6		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.394fc8		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.394fca		c2 20		rep #$20	                REP #$20        ; set A long
.394fcc		38		sec		                SEC                         ; Count down the number of bytes left
.394fcd		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.394fcf		e9 01 00	sbc #$0001	                SBC #1
.394fd2		85 2c		sta $034c	                STA DOS_FILE_SIZE
.394fd4		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.394fd6		e9 00 00	sbc #$0000	                SBC #0
.394fd9		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.394fdb		d0 04		bne $394fe1	                BNE continue
.394fdd		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.394fdf		f0 1b		beq $394ffc	                BEQ close_file              ; If not: we're done
.394fe1		c8		iny		continue        INY
.394fe2		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.394fe5		d0 dd		bne $394fc4	                BNE copy_loop               ; No: keep processing the bytes
.394fe7		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.394fe8		a5 34		lda $0354	                LDA DOS_DST_PTR
.394fea		6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.394fed		85 34		sta $0354	                STA DOS_DST_PTR
.394fef		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.394ff1		69 00 00	adc #$0000	                ADC #0
.394ff4		85 36		sta $0356	                STA DOS_DST_PTR+2
.394ff6		22 be 4b 39	jsl $394bbe	                JSL IF_READ                 ; Yes: load the next cluster
.394ffa		b0 c5		bcs $394fc1	                BCS copy_cluster            ; And start copying it
.394ffc						close_file
.394ffc		82 f5 00	brl $3950f4	ret_success     BRL IF_SUCCESS
.394fff						IF_NULLBUFFER
.394fff		5a		phy		                PHY
.395000		8b		phb		                PHB
.395001		0b		phd		                PHD
.395002		08		php		                PHP
.395003		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.395006		ab		plb		                PLB
.395007		ab		plb		                PLB
.395008		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39500b		2b		pld		                PLD
.39500c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39500e		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395011		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395013		85 28		sta $0348	                STA DOS_TEMP
.395015		c8		iny		                INY
.395016		c8		iny		                INY
.395017		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395019		85 2a		sta $034a	                STA DOS_TEMP+2
.39501b		a0 00 00	ldy #$0000	                LDY #0
.39501e		a9 00 00	lda #$0000	                LDA #0
.395021		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.395023		c8		iny		                INY
.395024		c8		iny		                INY
.395025		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.395028		d0 f7		bne $395021	                BNE loop
.39502a		28		plp		                PLP
.39502b		2b		pld		                PLD
.39502c		ab		plb		                PLB
.39502d		7a		ply		                PLY
.39502e		6b		rtl		                RTL
.39502f						IF_COPY2BUFF
.39502f		5a		phy		                PHY
.395030		8b		phb		                PHB
.395031		0b		phd		                PHD
.395032		08		php		                PHP
.395033		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.395036		ab		plb		                PLB
.395037		ab		plb		                PLB
.395038		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39503b		2b		pld		                PLD
.39503c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39503e		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395041		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395043		85 28		sta $0348	                STA DOS_TEMP
.395045		c8		iny		                INY
.395046		c8		iny		                INY
.395047		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395049		85 2a		sta $034a	                STA DOS_TEMP+2
.39504b		a0 00 00	ldy #$0000	                LDY #0
.39504e						copy_loop
.39504e		e2 20		sep #$20	                SEP #$20        ; set A short
.395050		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.395052		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.395054		c2 20		rep #$20	                REP #$20        ; set A long
.395056		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.395058		d0 02		bne $39505c	                BNE adv_dest
.39505a		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.39505c		c8		iny		adv_dest        INY                         ; Count it
.39505d		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.395060		f0 0c		beq $39506e	                BEQ done                    ; Yes: we're done
.395062		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.395064		c5 38		cmp $0358	                CMP DOS_END_PTR
.395066		d0 e6		bne $39504e	                BNE copy_loop               ; No: keep copying
.395068		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.39506a		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.39506c		d0 e0		bne $39504e	                BNE copy_loop
.39506e		28		plp		done            PLP
.39506f		2b		pld		                PLD
.395070		ab		plb		                PLB
.395071		7a		ply		                PLY
.395072		6b		rtl		                RTL
.395073						IF_SAVE
.395073		da		phx		                PHX
.395074		5a		phy		                PHY
.395075		0b		phd		                PHD
.395076		8b		phb		                PHB
.395077		08		php		                PHP
.395078		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.39507b		ab		plb		                PLB
.39507c		ab		plb		                PLB
.39507d		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.395080		2b		pld		                PLD
.395081		c2 30		rep #$30	                REP #$30        ; set A&X long
.395083		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.395086		38		sec		                SEC
.395087		a5 38		lda $0358	                LDA DOS_END_PTR
.395089		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.39508b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39508d		c8		iny		                INY
.39508e		c8		iny		                INY
.39508f		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.395091		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.395093		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395095		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.395098		18		clc		                CLC
.395099		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39509b		69 01 00	adc #$0001	                ADC #1
.39509e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950a0		90 09		bcc $3950ab	                BCC first_block
.3950a2		c8		iny		                INY
.3950a3		c8		iny		                INY
.3950a4		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950a6		69 00 00	adc #$0000	                ADC #0
.3950a9		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950ab		22 ff 4f 39	jsl $394fff	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.3950af		22 2f 50 39	jsl $39502f	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.3950b3		22 66 4b 39	jsl $394b66	                JSL IF_CREATE           ; Create file.
.3950b7		b0 03		bcs $3950bc	                BCS check_for_end
.3950b9		82 31 00	brl $3950ed	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.3950bc		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.3950be		c5 38		cmp $0358	                CMP DOS_END_PTR
.3950c0		d0 06		bne $3950c8	                BNE next_block
.3950c2		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.3950c4		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.3950c6		f0 1d		beq $3950e5	                BEQ done                ; Yes: we're done
.3950c8		22 ff 4f 39	jsl $394fff	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.3950cc		22 2f 50 39	jsl $39502f	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.3950d0		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.3950d3		a9 00 00	lda #$0000	                LDA #0
.3950d6		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950d8		c8		iny		                INY
.3950d9		c8		iny		                INY
.3950da		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950dc		22 18 4c 39	jsl $394c18	                JSL IF_WRITE            ; Append to the file
.3950e0		b0 da		bcs $3950bc	                BCS check_for_end       ; And try again
.3950e2		82 08 00	brl $3950ed	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.3950e5		5c f4 50 39	jmp $3950f4	done            JML IF_SUCCESS
.3950e9						IF_FAILURE
.3950e9		e2 20		sep #$20	                SEP #$20        ; set A short
.3950eb		85 0e		sta $032e	                STA DOS_STATUS
.3950ed		28		plp		IF_PASSFAILURE  PLP
.3950ee		18		clc		                CLC
.3950ef		ab		plb		                PLB
.3950f0		2b		pld		                PLD
.3950f1		7a		ply		                PLY
.3950f2		fa		plx		                PLX
.3950f3		6b		rtl		                RTL
.3950f4						IF_SUCCESS
.3950f4		e2 20		sep #$20	                SEP #$20        ; set A short
.3950f6		64 00		stz $0320	                STZ BIOS_STATUS
.3950f8		64 0e		stz $032e	                STZ DOS_STATUS
.3950fa		28		plp		                PLP
.3950fb		38		sec		                SEC
.3950fc		ab		plb		                PLB
.3950fd		2b		pld		                PLD
.3950fe		7a		ply		                PLY
.3950ff		fa		plx		                PLX
.395100		6b		rtl		                RTL
.395101						IF_RUN
.395101		da		phx		                PHX
.395102		5a		phy		                PHY
.395103		0b		phd		                PHD
.395104		8b		phb		                PHB
.395105		08		php		                PHP
.395106		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395109		ab		plb		                PLB
.39510a		ab		plb		                PLB
.39510b		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39510e		2b		pld		                PLD
.39510f		e2 20		sep #$20	                SEP #$20        ; set A short
.395111		c2 10		rep #$10	                REP #$10        ; set X long
.395113		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.395115		a2 00 00	ldx #$0000	                LDX #0
.395118		9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.39511c		e8		inx		                INX
.39511d		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.395120		d0 f6		bne $395118	                BNE clr_fd_loop
.395122		c2 20		rep #$20	                REP #$20        ; set A long
.395124		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.395127		8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.39512b		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.39512e		8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.395132		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.395134		8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.395138		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.39513a		8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.39513e		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.395141		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.395143		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.395145		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.395148		85 20		sta $0340	                STA DOS_FD_PTR
.39514a		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.39514d		85 22		sta $0342	                STA DOS_FD_PTR+2
.39514f		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.395152		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.395156		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.39515a		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.39515e		b0 03		bcs $395163	                BCS chk_execute
.395160		82 8a ff	brl $3950ed	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.395163						chk_execute
.395163		c2 20		rep #$20	                REP #$20        ; set A long
.395165		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.395167		d0 0b		bne $395174	                BNE try_execute                         ; If so: call it
.395169		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.39516b		d0 07		bne $395174	                BNE try_execute
.39516d		e2 20		sep #$20	                SEP #$20        ; set A short
.39516f		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.395171		82 75 ff	brl $3950e9	                BRL IF_FAILURE
.395174						try_execute
.395174		e2 20		sep #$20	                SEP #$20        ; set A short
.395176		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.395178		48		pha		                PHA
.395179		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.39517b		48		pha		                PHA
.39517c		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.39517e		48		pha		                PHA
.39517f		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.395181		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.395183		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.395187		e2 20		sep #$20	                SEP #$20        ; set A short
.395189		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.39518a		68		pla		                PLA
.39518b		68		pla		                PLA
.39518c		82 65 ff	brl $3950f4	                BRL IF_SUCCESS                          ; Return success
.39518f						IF_ALLOCFD
.39518f		da		phx		                PHX
.395190		5a		phy		                PHY
.395191		0b		phd		                PHD
.395192		8b		phb		                PHB
.395193		08		php		                PHP
.395194		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.395197		ab		plb		                PLB
.395198		ab		plb		                PLB
.395199		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39519c		2b		pld		                PLD
.39519d		c2 10		rep #$10	                REP #$10        ; set X long
.39519f		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.3951a2						chk_fd
.3951a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3951a4		bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.3951a7		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.3951a9		f0 14		beq $3951bf	                BEQ found                           ; No: flag and return the found descriptor
.3951ab						next_fd
.3951ab		c2 20		rep #$20	                REP #$20        ; set A long
.3951ad		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.3951ae		18		clc		                CLC
.3951af		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.3951b2		aa		tax		                TAX
.3951b3		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.3951b6		90 ea		bcc $3951a2	                BLT chk_fd                          ; No: check this new file descriptor
.3951b8		e2 20		sep #$20	                SEP #$20        ; set A short
.3951ba		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.3951bc		82 2a ff	brl $3950e9	                BRL IF_FAILURE
.3951bf		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.3951c1		9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.3951c4		c2 20		rep #$20	                REP #$20        ; set A long
.3951c6		8a		txa		                TXA
.3951c7		18		clc		                CLC
.3951c8		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.3951cb		85 20		sta $0340	                STA @b DOS_FD_PTR
.3951cd		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.3951d0		69 00 00	adc #$0000	                ADC #0
.3951d3		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3951d5		82 1c ff	brl $3950f4	                BRL IF_SUCCESS                      ; Return this file descriptor
.3951d8						IF_FREEFD
.3951d8		da		phx		                PHX
.3951d9		5a		phy		                PHY
.3951da		0b		phd		                PHD
.3951db		8b		phb		                PHB
.3951dc		08		php		                PHP
.3951dd		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.3951e0		ab		plb		                PLB
.3951e1		ab		plb		                PLB
.3951e2		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3951e5		2b		pld		                PLD
.3951e6		e2 20		sep #$20	                SEP #$20        ; set A short
.3951e8		c2 10		rep #$10	                REP #$10        ; set X long
.3951ea		a9 00		lda #$00	                LDA #0
.3951ec		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.3951ee		82 03 ff	brl $3950f4	                BRL IF_SUCCESS
.3951f1						DOS_SRC2DST
.3951f1		da		phx		                PHX
.3951f2		5a		phy		                PHY
.3951f3		0b		phd		                PHD
.3951f4		8b		phb		                PHB
.3951f5		08		php		                PHP
.3951f6		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3951f9		2b		pld		                PLD
.3951fa		c2 30		rep #$30	                REP #$30        ; set A&X long
.3951fc		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3951ff		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395201		aa		tax		                TAX                                     ; X := source buffer address
.395202		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.395204		a8		tay		                TAY                                     ; Y := destination buffer address
.395205		e2 20		sep #$20	                SEP #$20        ; set A short
.395207		a9 38		lda #$38	                LDA #`DOS_FILE_BUFFS
.395209		48		pha		                PHA
.39520a		ab		plb		                PLB
.39520b		c2 20		rep #$20	                REP #$20        ; set A long
.39520d		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.395210		f0 11		beq $395223	loop            BEQ done
.395212		48		pha		                PHA
.395213		e2 20		sep #$20	                SEP #$20        ; set A short
.395215		bd 00 00	lda $380000,x	                LDA #0,B,X
.395218		99 00 00	sta $380000,y	                STA #0,B,Y
.39521b		c2 20		rep #$20	                REP #$20        ; set A long
.39521d		68		pla		                PLA
.39521e		3a		dec a		                DEC A
.39521f		e8		inx		                INX
.395220		c8		iny		                INY
.395221		80 ed		bra $395210	                BRA loop
.395223		28		plp		done            PLP
.395224		ab		plb		                PLB
.395225		2b		pld		                PLD
.395226		7a		ply		                PLY
.395227		fa		plx		                PLX
.395228		6b		rtl		                RTL
.395229						IF_COPY
.395229		da		phx		                PHX
.39522a		5a		phy		                PHY
.39522b		0b		phd		                PHD
.39522c		8b		phb		                PHB
.39522d		08		php		                PHP
.39522e		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395231		ab		plb		                PLB
.395232		ab		plb		                PLB
.395233		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.395236		2b		pld		                PLD
.395237		22 8f 51 39	jsl $39518f	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.39523b		b0 03		bcs $395240	                BCS set_src_path
.39523d		82 ad fe	brl $3950ed	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.395240						set_src_path
.395240		c2 30		rep #$30	                REP #$30        ; set A&X long
.395242		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.395245		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.395247		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395249		c8		iny		                INY
.39524a		c8		iny		                INY
.39524b		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.39524d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39524f						alloc_dest
.39524f		c2 30		rep #$30	                REP #$30        ; set A&X long
.395251		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.395253		85 30		sta $0350	                STA @b DOS_SRC_PTR
.395255		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395257		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.395259		22 8f 51 39	jsl $39518f	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.39525d		b0 0f		bcs $39526e	                BCS set_paths                   ; If everything is ok... start setting the paths
.39525f		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395261		85 20		sta $0340	                STA @b DOS_FD_PTR
.395263		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395265		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395267		22 d8 51 39	jsl $3951d8	                JSL IF_FREEFD                   ; And free it
.39526b		82 7f fe	brl $3950ed	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.39526e						set_paths
.39526e		c2 30		rep #$30	                REP #$30        ; set A&X long
.395270		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.395272		85 34		sta $0354	                STA @b DOS_DST_PTR
.395274		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395276		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395278		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.39527b		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.39527d		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39527f		c8		iny		                INY
.395280		c8		iny		                INY
.395281		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.395283		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395285		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395287		85 20		sta $0340	                STA @b DOS_FD_PTR
.395289		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.39528b		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39528d		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.395291		b0 10		bcs $3952a3	                BCS src_open                    ; If success, work with the openned file
.395293		00		brk #		                BRK
.395294		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395296		85 20		sta $0340	                STA @b DOS_FD_PTR
.395298		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.39529a		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39529c		22 d8 51 39	jsl $3951d8	                JSL IF_FREEFD                   ; And free it
.3952a0		82 bc ff	brl $39525f	                BRL err_free_src_fd             ; Free the source file descriptor
.3952a3		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.3952a6		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3952a8		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3952aa		c8		iny		                INY
.3952ab		c8		iny		                INY
.3952ac		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3952ae		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3952b0		22 f1 51 39	jsl $3951f1	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.3952b4		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3952b6		85 20		sta $0340	                STA @b DOS_FD_PTR
.3952b8		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3952ba		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3952bc		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.3952c0		b0 0f		bcs $3952d1	                BCS read_next                   ; If sucessful, try to get the next cluster
.3952c2		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3952c4		85 20		sta $0340	                STA @b DOS_FD_PTR
.3952c6		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3952c8		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3952ca		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.3952ce		82 c3 ff	brl $395294	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.3952d1						read_next
.3952d1		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3952d3		85 20		sta $0340	                STA @b DOS_FD_PTR
.3952d5		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3952d7		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3952d9		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.3952dd		b0 19		bcs $3952f8	                BCS copy2dest                   ; If successful, copy the sector
.3952df		e2 20		sep #$20	                SEP #$20        ; set A short
.3952e1		a5 0e		lda $032e	                LDA @b DOS_STATUS
.3952e3		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.3952e5		f0 32		beq $395319	                BEQ file_copied                 ; Yes: we're done copying
.3952e7						err_dest_close
.3952e7		c2 20		rep #$20	                REP #$20        ; set A long
.3952e9		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3952eb		85 20		sta $0340	                STA @b DOS_FD_PTR
.3952ed		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3952ef		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3952f1		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.3952f5		82 ca ff	brl $3952c2	                BRL err_src_close               ; Close the source and throw an error
.3952f8						copy2dest
.3952f8		22 f1 51 39	jsl $3951f1	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.3952fc		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.3952ff		a9 00 00	lda #$0000	                LDA #0
.395302		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395304		c8		iny		                INY
.395305		c8		iny		                INY
.395306		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395308		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.39530a		85 20		sta $0340	                STA @b DOS_FD_PTR
.39530c		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.39530e		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395310		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.395314		90 d1		bcc $3952e7	                BCC err_dest_close              ; If error: close all files and throw the error
.395316		82 b8 ff	brl $3952d1	                BRL read_next                   ; Otherwise: repeat the loop
.395319						file_copied
.395319		c2 20		rep #$20	                REP #$20        ; set A long
.39531b		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.39531d		85 20		sta $0340	                STA @b DOS_FD_PTR
.39531f		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395321		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395323		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.395327		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395329		85 20		sta $0340	                STA @b DOS_FD_PTR
.39532b		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.39532d		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39532f		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.395333		82 be fd	brl $3950f4	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/uart.asm

=$af18f8					    UART1_BASE = $AF18F8        ; Base address for UART 1 (COM1) in the C256 Foenix U (only 1 Serial port)
=$af18f8					    UART2_BASE = $AF18F8
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.395336						UART_SELECT
.395336		08		php		            PHP
.395337		c2 20		rep #$20	                REP #$20        ; set A long
.395339		c9 02 00	cmp #$0002	            CMP #2
.39533c		f0 07		beq $395345	            BEQ is_COM2
.39533e		c2 20		rep #$20	                REP #$20        ; set A long
.395340		a9 f8 18	lda #$18f8	            LDA #<>UART1_BASE
.395343		80 05		bra $39534a	            BRA setaddr
.395345						is_COM2
.395345		c2 20		rep #$20	                REP #$20        ; set A long
.395347		a9 f8 18	lda #$18f8	            LDA #<>UART2_BASE
.39534a		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.39534e		e2 20		sep #$20	                SEP #$20        ; set A short
.395350		a9 af		lda #$af	            LDA #`UART1_BASE
.395352		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395356		28		plp		            PLP
.395357		6b		rtl		            RTL
.395358						UART_SETBPS
.395358		08		php		            PHP
.395359		0b		phd		            PHD
.39535a		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.39535d		2b		pld		                PLD
.39535e		c2 30		rep #$30	                REP #$30        ; set A&X long
.395360		48		pha		            PHA
.395361		e2 20		sep #$20	                SEP #$20        ; set A short
.395363		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395366		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395368		09 80		ora #$80	            ORA #LCR_DLB
.39536a		97 00		sta [$0700],y	            STA [CURRUART],Y
.39536c		c2 20		rep #$20	                REP #$20        ; set A long
.39536e		68		pla		            PLA
.39536f		a0 00 00	ldy #$0000	            LDY #UART_DLL
.395372		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.395374		e2 20		sep #$20	                SEP #$20        ; set A short
.395376		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395379		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.39537b		49 80		eor #$80	            EOR #LCR_DLB
.39537d		97 00		sta [$0700],y	            STA [CURRUART],Y
.39537f		2b		pld		            PLD
.395380		28		plp		            PLP
.395381		6b		rtl		            RTL
.395382						UART_SETLCR
.395382		08		php		            PHP
.395383		0b		phd		            PHD
.395384		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.395387		2b		pld		                PLD
.395388		e2 20		sep #$20	                SEP #$20        ; set A short
.39538a		c2 10		rep #$10	                REP #$10        ; set X long
.39538c		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.39538e		a0 03 00	ldy #$0003	            LDY #UART_LCR
.395391		97 00		sta [$0700],y	            STA [CURRUART],Y
.395393		2b		pld		            PLD
.395394		28		plp		            PLP
.395395		6b		rtl		            RTL
.395396						UART_INIT
.395396		08		php		            PHP
.395397		0b		phd		            PHD
.395398		c2 30		rep #$30	                REP #$30        ; set A&X long
.39539a		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.39539d		2b		pld		                PLD
.39539e		a9 01 00	lda #$0001	            LDA #UART_115200
.3953a1		22 58 53 39	jsl $395358	            JSL UART_SETBPS
.3953a5		e2 20		sep #$20	                SEP #$20        ; set A short
.3953a7		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.3953a9		22 82 53 39	jsl $395382	            JSL UART_SETLCR
.3953ad		a9 e1		lda #$e1	            LDA #%11100001
.3953af		a0 02 00	ldy #$0002	            LDY #UART_FCR
.3953b2		97 00		sta [$0700],y	            STA [CURRUART],Y
.3953b4		2b		pld		            PLD
.3953b5		28		plp		            PLP
.3953b6		6b		rtl		            RTL
.3953b7						UART_HASBYT
.3953b7		08		php		            PHP
.3953b8		0b		phd		            PHD
.3953b9		c2 30		rep #$30	                REP #$30        ; set A&X long
.3953bb		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.3953be		2b		pld		                PLD
.3953bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3953c1		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.3953c4		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.3953c6		29 01		and #$01	            AND #LSR_DATA_AVAIL
.3953c8		d0 04		bne $3953ce	            BNE ret_true            ; If flag is set, return true
.3953ca		2b		pld		ret_false   PLD                     ; Return false
.3953cb		28		plp		            PLP
.3953cc		18		clc		            CLC
.3953cd		6b		rtl		            RTL
.3953ce		2b		pld		ret_true    PLD                     ; Return true
.3953cf		28		plp		            PLP
.3953d0		38		sec		            SEC
.3953d1		6b		rtl		            RTL
.3953d2						UART_GETC
.3953d2		08		php		            PHP
.3953d3		0b		phd		            PHD
.3953d4		c2 30		rep #$30	                REP #$30        ; set A&X long
.3953d6		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.3953d9		2b		pld		                PLD
.3953da		e2 20		sep #$20	                SEP #$20        ; set A short
.3953dc		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.3953df		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.3953e1		29 01		and #$01	            AND #LSR_DATA_AVAIL
.3953e3		f0 fa		beq $3953df	            BEQ wait_getc           ; If the flag is clear, wait
.3953e5		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.3953e8		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.3953ea		2b		pld		            PLD
.3953eb		28		plp		            PLP
.3953ec		6b		rtl		            RTL
.3953ed						UART_PUTC
.3953ed		08		php		            PHP
.3953ee		0b		phd		            PHD
.3953ef		c2 30		rep #$30	                REP #$30        ; set A&X long
.3953f1		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.3953f4		2b		pld		                PLD
.3953f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3953f7		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.3953f8		a0 05 00	ldy #$0005	            LDY #UART_LSR
.3953fb		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.3953fd		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.3953ff		f0 fa		beq $3953fb	            BEQ wait_putc
.395401		68		pla		            PLA
.395402		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.395405		97 00		sta [$0700],y	            STA [CURRUART],Y
.395407		2b		pld		            PLD
.395408		28		plp		            PLP
.395409		6b		rtl		            RTL
.39540a						UART_PUTS
.39540a		08		php		            PHP
.39540b		e2 20		sep #$20	                SEP #$20        ; set A short
.39540d		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.395410		f0 07		beq $395419	            BEQ done
.395412		22 ed 53 39	jsl $3953ed	            JSL UART_PUTC
.395416		e8		inx		            INX
.395417		80 f4		bra $39540d	            BRA put_loop
.395419		28		plp		done        PLP
.39541a		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Joystick.asm

.39541b						JOYSTICK_SET_NES_MODE
.39541b		e2 20		sep #$20	                SEP #$20        ; set A short
.39541d		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395421		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395423		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395427		6b		rtl		          RTL
.395428						JOYSTICK_SET_SNES_MODE
.395428		e2 20		sep #$20	                SEP #$20        ; set A short
.39542a		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39542e		29 fb		and #$fb	          AND #~NES_SNES_JOY
.395430		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395432		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395436		6b		rtl		          RTL
.395437						JOYSTICK_ENABLE_NES_SNES_PORT0
.395437		e2 20		sep #$20	                SEP #$20        ; set A short
.395439		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39543d		29 fe		and #$fe	          AND #~NES_SNES_EN0
.39543f		09 01		ora #$01	          ORA #NES_SNES_EN0
.395441		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395445		6b		rtl		          RTL
.395446						JOYSTICK_ENABLE_NES_SNES_PORT1
.395446		e2 20		sep #$20	                SEP #$20        ; set A short
.395448		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39544c		29 fd		and #$fd	          AND #~NES_SNES_EN1
.39544e		09 02		ora #$02	          ORA #NES_SNES_EN1
.395450		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395454		6b		rtl		          RTL
.395455						JOYSTICK_DISABLE_NES_SNES_PORT0
.395455		e2 20		sep #$20	                SEP #$20        ; set A short
.395457		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39545b		29 fe		and #$fe	          AND #~NES_SNES_EN0
.39545d		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395461		6b		rtl		          RTL
.395462						JOYSTICK_DISABLE_NES_SNES_PORT1
.395462		e2 20		sep #$20	                SEP #$20        ; set A short
.395464		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395468		29 fd		and #$fd	          AND #~NES_SNES_EN1
.39546a		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39546e		6b		rtl		          RTL
.39546f						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.39546f		e2 20		sep #$20	                SEP #$20        ; set A short
.395471		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395475		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395477		c9 00		cmp #$00	          CMP #$00
.395479		f0 14		beq $39548f	          BEQ END_OF_JOYSTICK_POLL
.39547b		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39547f		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395481		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395485						JOYSTICK_POLLING_ISNOTOVER
.395485		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395489		29 40		and #$40	          AND #NES_SNES_DONE
.39548b		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.39548d		d0 f6		bne $395485	          BNE JOYSTICK_POLLING_ISNOTOVER
.39548f						END_OF_JOYSTICK_POLL
.39548f		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/sdc_library.asm

.395490						SDC_WAITBUSY
.395490		08		php		                PHP
.395491		e2 20		sep #$20	                SEP #$20        ; set A short
.395493		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.395497		29 01		and #$01	                AND #SDC_TRANS_BUSY
.395499		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.39549b		f0 f6		beq $395493	                BEQ wait_xact
.39549d		28		plp		                PLP
.39549e		6b		rtl		                RTL
.39549f						SDC_RESET
.39549f		08		php		                PHP
.3954a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3954a2		a9 01		lda #$01	                LDA #1
.3954a4		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.3954a8		28		plp		                PLP
.3954a9		6b		rtl		                RTL
.3954aa						SDC_INIT
.3954aa		0b		phd		                PHD
.3954ab		8b		phb		                PHB
.3954ac		08		php		                PHP
.3954ad		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3954b0		ab		plb		                PLB
.3954b1		ab		plb		                PLB
.3954b2		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3954b5		2b		pld		                PLD
.3954b6		e2 20		sep #$20	                SEP #$20        ; set A short
.3954b8		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.3954ba		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.3954be		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.3954c0		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.3954c4		22 90 54 39	jsl $395490	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.3954c8		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.3954cc		d0 07		bne $3954d5	                BNE ret_error                       ; Is there one? Process the error
.3954ce		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.3954d0		28		plp		                PLP
.3954d1		ab		plb		                PLB
.3954d2		2b		pld		                PLD
.3954d3		38		sec		                SEC
.3954d4		6b		rtl		                RTL
.3954d5		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.3954d8		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.3954da		85 00		sta $0320	set_error       STA BIOS_STATUS
.3954dc		28		plp		                PLP
.3954dd		ab		plb		                PLB
.3954de		2b		pld		                PLD
.3954df		18		clc		                CLC
.3954e0		6b		rtl		                RTL
.3954e1						SDC_GETBLOCK
.3954e1		0b		phd		                PHD
.3954e2		8b		phb		                PHB
.3954e3		08		php		                PHP
.3954e4		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3954e7		ab		plb		                PLB
.3954e8		ab		plb		                PLB
.3954e9		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3954ec		2b		pld		                PLD
.3954ed		e2 20		sep #$20	                SEP #$20        ; set A short
.3954ef		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.3954f3		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.3954f5		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.3954f9		a9 00		lda #$00	                LDA #0
.3954fb		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.3954ff		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395501		0a		asl a		                ASL A
.395502		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395506		a5 03		lda $0323	                LDA BIOS_LBA+1
.395508		2a		rol a		                ROL A
.395509		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.39550d		a5 04		lda $0324	                LDA BIOS_LBA+2
.39550f		2a		rol a		                ROL A
.395510		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395514		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395516		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.39551a		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.39551c		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395520		22 90 54 39	jsl $395490	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395524		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395528		d0 36		bne $395560	                BNE ret_error                       ; Is there one? Process the error
.39552a		e2 20		sep #$20	                SEP #$20        ; set A short
.39552c		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395530		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395532		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395536		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395538		c2 10		rep #$10	                REP #$10        ; set X long
.39553a		a0 00 00	ldy #$0000	                LDY #0
.39553d		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395541		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.395543		c8		iny		                INY                                 ; Advance to the next byte
.395544		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395547		d0 f4		bne $39553d	                BNE loop_rd                         ; No: keep reading
.395549		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.39554d		d0 11		bne $395560	                BNE ret_error                       ; Is there one? Process the error
.39554f		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395551		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395555		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395557		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.39555b		28		plp		                PLP
.39555c		ab		plb		                PLB
.39555d		2b		pld		                PLD
.39555e		38		sec		                SEC
.39555f		6b		rtl		                RTL
.395560		a9 82		lda #$82	ret_error       LDA #BIOS_ERR_READ                  ; Return a read error
.395562		85 00		sta $0320	                STA BIOS_STATUS
.395564		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395568		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.39556a		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.39556e		28		plp		                PLP
.39556f		ab		plb		                PLB
.395570		2b		pld		                PLD
.395571		18		clc		                CLC
.395572		6b		rtl		                RTL
.395573						SDC_PUTBLOCK
.395573		0b		phd		                PHD
.395574		8b		phb		                PHB
.395575		08		php		                PHP
.395576		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395579		ab		plb		                PLB
.39557a		ab		plb		                PLB
.39557b		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39557e		2b		pld		                PLD
.39557f		e2 20		sep #$20	                SEP #$20        ; set A short
.395581		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.395585		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.395587		f0 04		beq $39558d	                BEQ led_on                          ; Yes: start the transaction
.395589		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.39558b		80 65		bra $3955f2	                BRA save_error
.39558d		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395591		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395593		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395597		c2 10		rep #$10	                REP #$10        ; set X long
.395599		a0 00 00	ldy #$0000	                LDY #0
.39559c		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.39559e		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.3955a2		c8		iny		                INY                                 ; Advance to the next byte
.3955a3		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.3955a6		d0 f4		bne $39559c	                BNE loop_wr                         ; No: keep writing
.3955a8		a9 00		lda #$00	                LDA #0
.3955aa		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.3955ae		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.3955b0		0a		asl a		                ASL A
.3955b1		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.3955b5		a5 03		lda $0323	                LDA BIOS_LBA+1
.3955b7		2a		rol a		                ROL A
.3955b8		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.3955bc		a5 04		lda $0324	                LDA BIOS_LBA+2
.3955be		2a		rol a		                ROL A
.3955bf		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.3955c3		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.3955c5		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.3955c9		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.3955cb		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.3955cf		22 90 54 39	jsl $395490	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.3955d3		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.3955d7		8d 06 03	sta $0306	                STA FDC_ST0                         ; Save any to the hardware status byte
.3955da		d0 14		bne $3955f0	                BNE ret_error                       ; Is there one? Process the error
.3955dc		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.3955de		9c 06 03	stz $0306	                STZ FDC_ST0
.3955e1		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.3955e5		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.3955e7		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.3955eb		28		plp		                PLP
.3955ec		ab		plb		                PLB
.3955ed		2b		pld		                PLD
.3955ee		38		sec		                SEC
.3955ef		6b		rtl		                RTL
.3955f0		a9 83		lda #$83	ret_error       LDA #BIOS_ERR_WRITE                 ; Return a write error
.3955f2		85 00		sta $0320	save_error      STA BIOS_STATUS
.3955f4		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.3955f8		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.3955fa		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.3955fe		28		plp		                PLP
.3955ff		ab		plb		                PLB
.395600		2b		pld		                PLD
.395601		18		clc		                CLC
.395602		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395603						FDC_TEST
.395603		8b		phb		                    PHB
.395604		0b		phd		                    PHD
.395605		08		php		                    PHP
.395606		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395609		ab		plb		                PLB
.39560a		ab		plb		                PLB
.39560b		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.39560e		2b		pld		                PLD
.39560f		e2 20		sep #$20	                SEP #$20        ; set A short
.395611		a9 f0		lda #$f0	                    LDA #$F0
.395613		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395616		22 a8 10 00	jsl $0010a8	                    JSL CLRSCREEN
.39561a		22 a0 10 00	jsl $0010a0	                    JSL CSRHOME
.39561e		c2 30		rep #$30	                REP #$30        ; set A&X long
.395620		22 c5 58 39	jsl $3958c5	                    JSL FDC_Init
.395624		b0 03		bcs $395629	                    BCS init_ok
.395626		82 20 00	brl $395649	                    BRL motor_off
.395629		22 34 5f 39	jsl $395f34	init_ok             JSL FDC_CHK_MEDIA
.39562d		90 03		bcc $395632	                    BCC no_media
.39562f		82 03 00	brl $395635	                    BRL is_ok1
.395632						no_media
.395632		82 14 00	brl $395649	                    BRL motor_off
.395635		22 dd 5d 39	jsl $395ddd	is_ok1              JSL FDC_MOUNT
.395639		90 03		bcc $39563e	                    BCC mount_err
.39563b		82 03 00	brl $395641	                    BRL is_ok2
.39563e						mount_err
.39563e		82 08 00	brl $395649	                    BRL motor_off
.395641		22 55 56 39	jsl $395655	is_ok2              JSL FDC_TEST_PUTBLOCK
.395645		b0 02		bcs $395649	                    BCS all_ok
.395647		80 00		bra $395649	                    BRA motor_off
.395649						all_ok
.395649		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.39564d		22 75 59 39	jsl $395975	                    JSL FDC_Motor_Off
.395651		28		plp		                    PLP
.395652		2b		pld		                    PLD
.395653		ab		plb		                    PLB
.395654		6b		rtl		                    RTL
.395655						FDC_TEST_PUTBLOCK
.395655		e2 20		sep #$20	                SEP #$20        ; set A short
.395657		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395659		a2 00 00	ldx #$0000	                    LDX #0
.39565c		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395660		1a		inc a		                    INC A
.395661		e8		inx		                    INX
.395662		e0 00 02	cpx #$0200	                    CPX #512
.395665		d0 f5		bne $39565c	                    BNE init_loop
.395667		c2 20		rep #$20	                REP #$20        ; set A long
.395669		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.39566c		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.395670		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.395673		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.395677		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.39567a		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.39567e		a9 00 00	lda #$0000	                    LDA #0
.395681		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.395685		22 7c 5d 39	jsl $395d7c	                    JSL FDC_PUTBLOCK                ; Try to write the data
.395689		6b		rtl		                    RTL
>39568a		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395692		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>3956a2		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.3956a6						FDC_Check_RQM
.3956a6		0b		phd		                    PHD
.3956a7		08		php		                    PHP
.3956a8		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.3956ab		2b		pld		                PLD
.3956ac		e2 20		sep #$20	                SEP #$20        ; set A short
.3956ae		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.3956b0		22 57 39 39	jsl $393957	                    JSL ISETTIMEOUT
.3956b4		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.3956b6		30 12		bmi $3956ca	                    BMI time_out            ; If so: signal a time out
.3956b8		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.3956bc		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.3956be		f0 f4		beq $3956b4	                    BEQ loop
.3956c0		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.3956c2		22 57 39 39	jsl $393957	                    JSL ISETTIMEOUT
.3956c6		28		plp		                    PLP
.3956c7		2b		pld		                    PLD
.3956c8		38		sec		                    SEC
.3956c9		60		rts		                    RTS
.3956ca		28		plp		time_out            PLP
.3956cb		2b		pld		                    PLD
.3956cc		18		clc		                    CLC
.3956cd		60		rts		                    RTS
.3956ce						FDC_Check_DRV0_BSY
.3956ce		0b		phd		                    PHD
.3956cf		08		php		                    PHP
.3956d0		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.3956d3		2b		pld		                PLD
.3956d4		e2 20		sep #$20	                SEP #$20        ; set A short
.3956d6		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.3956d8		22 57 39 39	jsl $393957	                    JSL ISETTIMEOUT
.3956dc		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.3956de		30 12		bmi $3956f2	                    BMI time_out            ; If so: signal a time out
.3956e0		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.3956e4		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.3956e6		d0 f4		bne $3956dc	                    BNE loop
.3956e8		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.3956ea		22 57 39 39	jsl $393957	                    JSL ISETTIMEOUT
.3956ee		28		plp		                    PLP
.3956ef		2b		pld		                    PLD
.3956f0		38		sec		                    SEC
.3956f1		60		rts		                    RTS
.3956f2		28		plp		time_out            PLP
.3956f3		2b		pld		                    PLD
.3956f4		18		clc		                    CLC
.3956f5		60		rts		                    RTS
.3956f6						FDC_Check_CMD_BSY
.3956f6		0b		phd		                    PHD
.3956f7		08		php		                    PHP
.3956f8		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.3956fb		2b		pld		                PLD
.3956fc		e2 20		sep #$20	                SEP #$20        ; set A short
.3956fe		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395700		22 57 39 39	jsl $393957	                    JSL ISETTIMEOUT
.395704		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395706		30 12		bmi $39571a	                    BMI time_out            ; If so: signal a time out
.395708		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.39570c		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.39570e		d0 f4		bne $395704	                    BNE loop
.395710		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395712		22 57 39 39	jsl $393957	                    JSL ISETTIMEOUT
.395716		28		plp		                    PLP
.395717		2b		pld		                    PLD
.395718		38		sec		                    SEC
.395719		60		rts		                    RTS
.39571a		28		plp		time_out            PLP
.39571b		2b		pld		                    PLD
.39571c		18		clc		                    CLC
.39571d		60		rts		                    RTS
.39571e						FDC_Can_Read_Data
.39571e		0b		phd		                    PHD
.39571f		08		php		                    PHP
.395720		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395723		2b		pld		                PLD
.395724		e2 20		sep #$20	                SEP #$20        ; set A short
.395726		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395728		22 57 39 39	jsl $393957	                    JSL ISETTIMEOUT
.39572c		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.39572e		30 14		bmi $395744	                    BMI time_out            ; If so: signal a time out
.395730		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395734		29 40		and #$40	                    AND #FDC_MSR_DIO
.395736		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.395738		d0 f2		bne $39572c	                    BNE loop
.39573a		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.39573c		22 57 39 39	jsl $393957	                    JSL ISETTIMEOUT
.395740		28		plp		                    PLP
.395741		2b		pld		                    PLD
.395742		38		sec		                    SEC
.395743		60		rts		                    RTS
.395744		28		plp		time_out            PLP
.395745		2b		pld		                    PLD
.395746		18		clc		                    CLC
.395747		60		rts		                    RTS
.395748						FDC_CAN_WRITE
.395748		0b		phd		                    PHD
.395749		08		php		                    PHP
.39574a		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.39574d		2b		pld		                PLD
.39574e		e2 20		sep #$20	                SEP #$20        ; set A short
.395750		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395752		22 57 39 39	jsl $393957	                    JSL ISETTIMEOUT
.395756		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395758		30 14		bmi $39576e	                    BMI time_out            ; If so: signal a time out
.39575a		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.39575e		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395760		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395762		d0 f2		bne $395756	                    BNE loop
.395764		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395766		22 57 39 39	jsl $393957	                    JSL ISETTIMEOUT
.39576a		28		plp		                    PLP
.39576b		2b		pld		                    PLD
.39576c		38		sec		                    SEC
.39576d		60		rts		                    RTS
.39576e		28		plp		time_out            PLP
.39576f		2b		pld		                    PLD
.395770		18		clc		                    CLC
.395771		60		rts		                    RTS
.395772						FDC_DELAY_10MS
.395772		da		phx		                    PHX
.395773		08		php		                    PHP
.395774		c2 10		rep #$10	                REP #$10        ; set X long
.395776		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.395779		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.39577a		ca		dex		                    DEX
.39577b		e0 00 00	cpx #$0000	                    CPX #0
.39577e		d0 f9		bne $395779	                    BNE loop
.395780		28		plp		                    PLP
.395781		fa		plx		                    PLX
.395782		6b		rtl		                    RTL
.395783						FDC_COMMAND
.395783		da		phx		                    PHX
.395784		8b		phb		                    PHB
.395785		0b		phd		                    PHD
.395786		08		php		                    PHP
.395787		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.39578a		ab		plb		                PLB
.39578b		ab		plb		                PLB
.39578c		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.39578f		2b		pld		                PLD
.395790		22 72 57 39	jsl $395772	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.395794		e2 30		sep #$30	                SEP #$30        ; set A&X short
.395796		a2 00		ldx #$00	                    LDX #0
.395798		a9 00		lda #$00	                    LDA #0
.39579a		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.39579d		e8		inx		                    INX
.39579e		e0 10		cpx #$10	                    CPX #16
.3957a0		d0 f8		bne $39579a	                    BNE clr_results
.3957a2		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.3957a6		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.3957a8		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.3957aa		f0 04		beq $3957b0	                    BEQ start_send                          ; If so, start sending
.3957ac		22 c5 58 39	jsl $3958c5	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.3957b0						start_send
.3957b0		e2 10		sep #$10	                SEP #$10        ; set X short
.3957b2		a2 00		ldx #$00	                    LDX #0
.3957b4		20 a6 56	jsr $3956a6	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.3957b7		b0 03		bcs $3957bc	                    BCS send_param
.3957b9		82 5e 00	brl $39581a	                    BRL time_out                            ; If there was a timeout, flag the time out
.3957bc		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.3957bf		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.3957c3		22 72 57 39	jsl $395772	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.3957c7		e8		inx		                    INX                                     ; Advance to the next byte
.3957c8		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.3957cb		d0 e7		bne $3957b4	                    BNE send_loop                           ; Keep sending until we've sent them all
.3957cd		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.3957d0		d0 03		bne $3957d5	                    BNE chk_data_dir
.3957d2		82 80 00	brl $395855	                    BRL result_phase                        ; If 0: we just want a result
.3957d5		10 3c		bpl $395813	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.3957d7						wr_data
.3957d7		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.3957d9		30 03		bmi $3957de	                    BMI wr_chk_rqm
.3957db		82 3c 00	brl $39581a	                    BRL time_out                            ; If not, raise an error
.3957de		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.3957e2		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.3957e4		f0 f1		beq $3957d7	                    BEQ wr_data_rdy
.3957e6		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.3957e8		d0 03		bne $3957ed	                    BNE wr_data_phase                       ; If so: transfer the data
.3957ea		82 68 00	brl $395855	                    BRL result_phase                          ; If not: it's an error
.3957ed						wr_data_phase
.3957ed		c2 10		rep #$10	                REP #$10        ; set X long
.3957ef		a0 00 00	ldy #$0000	                    LDY #0
.3957f2		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.3957f4		30 03		bmi $3957f9	                    BMI wr_chk_nondma
.3957f6		82 21 00	brl $39581a	                    BRL time_out                            ; If not, raise an error
.3957f9		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.3957fd		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.3957ff		f0 54		beq $395855	                    BEQ result_phase                        ; If not: break out to result phase
.395801		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.395803		f0 ed		beq $3957f2	                    BEQ wr_data_loop                        ; No: keep waiting
.395805		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.395807		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.39580b		c8		iny		                    INY                                     ; Move to the next position
.39580c		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.39580f		d0 e1		bne $3957f2	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.395811		80 42		bra $395855	                    BRA result_phase                        ; ready for the result phase
.395813		20 1e 57	jsr $39571e	rd_data             JSR FDC_Can_Read_Data
.395816		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395818		30 07		bmi $395821	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.39581a						time_out
.39581a		e2 20		sep #$20	                SEP #$20        ; set A short
.39581c		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.39581e		82 9c 00	brl $3958bd	                    BRL pass_error
.395821		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.395825		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395827		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395829		d0 eb		bne $395816	                    BNE rd_data_rdy
.39582b		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.39582f		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395831		d0 03		bne $395836	                    BNE rd_data_phase                       ; If so: transfer the data
.395833		82 83 00	brl $3958b9	                    BRL error                               ; If not: it's an error
.395836						rd_data_phase
.395836		c2 10		rep #$10	                REP #$10        ; set X long
.395838		a0 00 00	ldy #$0000	                    LDY #0
.39583b		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.39583d		10 db		bpl $39581a	                    BPL time_out                            ; If not: throw a timeout error
.39583f		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.395843		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395845		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395847		d0 f2		bne $39583b	                    BNE rd_data_loop
.395849		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.39584d		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.39584f		c8		iny		                    INY                                     ; Move to the next position
.395850		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395853		d0 e6		bne $39583b	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.395855		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.395858		f0 34		beq $39588e	                    BEQ chk_busy                            ; Then we're done
.39585a		e2 10		sep #$10	                SEP #$10        ; set X short
.39585c		a2 00		ldx #$00	                    LDX #0
.39585e		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.395860		22 57 39 39	jsl $393957	                    JSL ISETTIMEOUT
.395864		20 1e 57	jsr $39571e	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.395867		90 b1		bcc $39581a	                    BCC time_out                            ; If there was a time out, raise an error
.395869		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.39586d		20 1e 57	jsr $39571e	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.395870		90 a8		bcc $39581a	                    BCC time_out                            ; If there was a time out, raise an error
.395872		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395876		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.395879		20 a6 56	jsr $3956a6	                    JSR FDC_Check_RQM
.39587c		90 9c		bcc $39581a	                    BCC time_out                            ; If there was a time out, flag the error
.39587e		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.395882		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.395884		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.395886		d0 06		bne $39588e	                    BNE chk_busy
.395888		e8		inx		                    INX                                     ; Move to the next result positions
.395889		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.39588c		d0 e4		bne $395872	                    BNE read_result                         ; And keep looping until we've read all
.39588e						chk_busy
.39588e		c2 10		rep #$10	                REP #$10        ; set X long
.395890		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.395893		22 7e 0f 39	jsl $390f7e	                    JSL ILOOP_MS
.395897		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.39589b		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.39589d		f0 12		beq $3958b1	                    BEQ done                                ; If not set: we're done
.39589f		20 1e 57	jsr $39571e	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.3958a2		b0 03		bcs $3958a7	                    BCS get_result_byte
.3958a4		82 73 ff	brl $39581a	                    BRL time_out                            ; If there was a time out, flag the error
.3958a7		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.3958ab		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.3958ae		e8		inx		                    INX
.3958af		80 dd		bra $39588e	                    BRA chk_busy                            ; And keep checking
.3958b1						done
.3958b1		64 20		stz $0320	                    STZ BIOS_STATUS
.3958b3		28		plp		                    PLP
.3958b4		2b		pld		                    PLD
.3958b5		ab		plb		                    PLB
.3958b6		fa		plx		                    PLX
.3958b7		38		sec		                    SEC
.3958b8		6b		rtl		                    RTL
.3958b9						error
.3958b9		e2 20		sep #$20	                SEP #$20        ; set A short
.3958bb		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.3958bd		85 20		sta $0320	pass_error          STA BIOS_STATUS
.3958bf		28		plp		                    PLP
.3958c0		2b		pld		                    PLD
.3958c1		ab		plb		                    PLB
.3958c2		fa		plx		                    PLX
.3958c3		18		clc		                    CLC
.3958c4		6b		rtl		                    RTL
.3958c5						FDC_Init
.3958c5		08		php		                    PHP
.3958c6		c2 10		rep #$10	                REP #$10        ; set X long
.3958c8		e2 20		sep #$20	                SEP #$20        ; set A short
.3958ca		a9 00		lda #$00	                    LDA #0
.3958cc		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3958d0		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.3958d3		a0 00 00	ldy #$0000	                    LDY #0
.3958d6		22 8b 0f 39	jsl $390f8b	                    JSL IDELAY
.3958da		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.3958dc		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3958e0		ea		nop		                    NOP
.3958e1		ea		nop		                    NOP
.3958e2		ea		nop		                    NOP
.3958e3		ea		nop		                    NOP
.3958e4		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.3958e6		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.3958ea		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.3958ec		8f f8 13 af	sta $af13f8	                    STA @l SIO_FDC_CCR
.3958f0		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.3958f3		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.3958f6		22 8b 0f 39	jsl $390f8b	                    JSL IDELAY
.3958fa		22 cf 59 39	jsl $3959cf	                    JSL FDC_Sense_Int_Status
.3958fe		90 25		bcc $395925	                    BCC pass_failure
.395900		22 cf 59 39	jsl $3959cf	                    JSL FDC_Sense_Int_Status
.395904		90 1f		bcc $395925	                    BCC pass_failure
.395906		22 cf 59 39	jsl $3959cf	                    JSL FDC_Sense_Int_Status
.39590a		90 19		bcc $395925	                    BCC pass_failure
.39590c		22 cf 59 39	jsl $3959cf	                    JSL FDC_Sense_Int_Status
.395910		90 13		bcc $395925	                    BCC pass_failure
.395912		22 7b 5a 39	jsl $395a7b	                    JSL FDC_Configure_Command
.395916		90 0d		bcc $395925	                    BCC pass_failure
.395918		22 2d 5a 39	jsl $395a2d	                    JSL FDC_Specify_Command
.39591c		90 07		bcc $395925	                    BCC pass_failure
.39591e		22 41 59 39	jsl $395941	                    JSL FDC_Motor_On
.395922		28		plp		                    PLP
.395923		38		sec		                    SEC
.395924		6b		rtl		                    RTL
.395925		28		plp		pass_failure        PLP
.395926		18		clc		                    CLC
.395927		6b		rtl		                    RTL
.395928						FDC_MOTOR_NEEDED
.395928		08		php		                    PHP
.395929		c2 20		rep #$20	                REP #$20        ; set A long
.39592b		78		sei		                    SEI                         ; Turn off interrupts
.39592c		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.39592f		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.395933		e2 20		sep #$20	                SEP #$20        ; set A short
.395935		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.395939		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.39593b		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.39593f		28		plp		                    PLP
.395940		6b		rtl		                    RTL
.395941						FDC_Motor_On
.395941		08		php		                    PHP
.395942		22 28 59 39	jsl $395928	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.395946		e2 20		sep #$20	                SEP #$20        ; set A short
.395948		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.39594c		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.39594e		d0 1f		bne $39596f	                    BNE done                    ; If so: skip
.395950		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.395952		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395956		20 a6 56	jsr $3956a6	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.395959		90 17		bcc $395972	                    BCC time_out
.39595b		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.39595e		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.395961		22 8b 0f 39	jsl $390f8b	                    JSL IDELAY
.395965		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.395969		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.39596b		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.39596f		28		plp		done                PLP
.395970		38		sec		                    SEC
.395971		6b		rtl		                    RTL
.395972		28		plp		time_out            PLP                         ; Return a timeout error
.395973		18		clc		                    CLC
.395974		6b		rtl		                    RTL
.395975						FDC_Motor_Off
.395975		08		php		                    PHP
.395976		e2 20		sep #$20	                SEP #$20        ; set A short
.395978		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.39597a		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.39597e		c2 20		rep #$20	                REP #$20        ; set A long
.395980		78		sei		                    SEI                         ; Turn off interrupts
.395981		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.395984		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.395988		e2 20		sep #$20	                SEP #$20        ; set A short
.39598a		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.39598e		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.395990		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.395994		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.395998		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.39599a		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.39599e		28		plp		                    PLP
.39599f		6b		rtl		                    RTL
.3959a0						FDC_Recalibrate_Command
.3959a0		0b		phd		                    PHD
.3959a1		08		php		                    PHP
.3959a2		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.3959a5		2b		pld		                PLD
.3959a6		22 28 59 39	jsl $395928	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.3959aa		e2 20		sep #$20	                SEP #$20        ; set A short
.3959ac		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.3959ae		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3959b1		a5 00		lda $0300	                    LDA FDC_DRIVE
.3959b3		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3959b6		a9 02		lda #$02	                    LDA #2
.3959b8		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.3959bb		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.3959be		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.3959c1		22 83 57 39	jsl $395783	                    JSL FDC_COMMAND             ; Issue the command
.3959c5		90 04		bcc $3959cb	                    BCC pass_failure            ; If failure, pass the failure up
.3959c7		28		plp		                    PLP
.3959c8		2b		pld		                    PLD
.3959c9		38		sec		                    SEC
.3959ca		6b		rtl		                    RTL
.3959cb		28		plp		pass_failure        PLP
.3959cc		2b		pld		                    PLD
.3959cd		18		clc		                    CLC
.3959ce		6b		rtl		                    RTL
.3959cf						FDC_Sense_Int_Status
.3959cf		8b		phb		                    PHB
.3959d0		0b		phd		                    PHD
.3959d1		08		php		                    PHP
.3959d2		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3959d5		ab		plb		                PLB
.3959d6		ab		plb		                PLB
.3959d7		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.3959da		2b		pld		                PLD
.3959db		c2 30		rep #$30	                REP #$30        ; set A&X long
.3959dd		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.3959e0		22 7e 0f 39	jsl $390f7e	                    JSL ILOOP_MS
.3959e4		e2 20		sep #$20	                SEP #$20        ; set A short
.3959e6		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.3959e8		a9 ff		lda #$ff	                    LDA #$FF
.3959ea		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.3959ec		20 f6 56	jsr $3956f6	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.3959ef		90 30		bcc $395a21	                    BCC time_out                        ; If there was a time out, raise an error
.3959f1		20 a6 56	jsr $3956a6	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.3959f4		90 2b		bcc $395a21	                    BCC time_out                        ; If there was a time out, raise an error
.3959f6		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.3959f8		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3959fc		20 1e 57	jsr $39571e	                    JSR FDC_Can_Read_Data
.3959ff		90 20		bcc $395a21	                    BCC time_out                        ; If there was a time out, raise an error
.395a01		20 a6 56	jsr $3956a6	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395a04		90 1b		bcc $395a21	                    BCC time_out                        ; If there was a time out, raise an error
.395a06		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.395a0a		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.395a0c		20 a6 56	jsr $3956a6	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395a0f		90 10		bcc $395a21	                    BCC time_out                        ; If there was a time out, raise an error
.395a11		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.395a15		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.395a17		e2 20		sep #$20	                SEP #$20        ; set A short
.395a19		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.395a1c		28		plp		                    PLP
.395a1d		2b		pld		                    PLD
.395a1e		ab		plb		                    PLB
.395a1f		38		sec		                    SEC
.395a20		6b		rtl		                    RTL
.395a21						time_out
.395a21		e2 20		sep #$20	                SEP #$20        ; set A short
.395a23		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.395a25		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395a28		28		plp		                    PLP
.395a29		2b		pld		                    PLD
.395a2a		ab		plb		                    PLB
.395a2b		18		clc		                    CLC
.395a2c		6b		rtl		                    RTL
.395a2d						FDC_Specify_Command
.395a2d		8b		phb		                    PHB
.395a2e		0b		phd		                    PHD
.395a2f		08		php		                    PHP
.395a30		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395a33		ab		plb		                PLB
.395a34		ab		plb		                PLB
.395a35		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395a38		2b		pld		                PLD
.395a39		c2 30		rep #$30	                REP #$30        ; set A&X long
.395a3b		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.395a3e		22 7e 0f 39	jsl $390f7e	                    JSL ILOOP_MS
.395a42		e2 20		sep #$20	                SEP #$20        ; set A short
.395a44		20 f6 56	jsr $3956f6	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395a47		90 26		bcc $395a6f	                    BCC time_out            ; If there was a time out, raise an error
.395a49		20 a6 56	jsr $3956a6	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395a4c		90 21		bcc $395a6f	                    BCC time_out            ; If there was a time out, raise an error
.395a4e		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.395a50		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395a54		20 a6 56	jsr $3956a6	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395a57		90 16		bcc $395a6f	                    BCC time_out            ; If there was a time out, raise an error
.395a59		a9 cf		lda #$cf	                    LDA #$CF
.395a5b		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395a5f		20 a6 56	jsr $3956a6	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395a62		90 0b		bcc $395a6f	                    BCC time_out            ; If there was a time out, raise an error
.395a64		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.395a66		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395a6a		28		plp		                    PLP
.395a6b		2b		pld		                    PLD
.395a6c		ab		plb		                    PLB
.395a6d		38		sec		                    SEC
.395a6e		6b		rtl		                    RTL
.395a6f						time_out
.395a6f		e2 20		sep #$20	                SEP #$20        ; set A short
.395a71		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.395a73		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395a76		28		plp		                    PLP
.395a77		2b		pld		                    PLD
.395a78		ab		plb		                    PLB
.395a79		18		clc		                    CLC
.395a7a		6b		rtl		                    RTL
.395a7b						FDC_Configure_Command
.395a7b		8b		phb		                    PHB
.395a7c		0b		phd		                    PHD
.395a7d		08		php		                    PHP
.395a7e		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395a81		ab		plb		                PLB
.395a82		ab		plb		                PLB
.395a83		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395a86		2b		pld		                PLD
.395a87		c2 30		rep #$30	                REP #$30        ; set A&X long
.395a89		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.395a8c		22 7e 0f 39	jsl $390f7e	                    JSL ILOOP_MS
.395a90		e2 20		sep #$20	                SEP #$20        ; set A short
.395a92		20 f6 56	jsr $3956f6	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395a95		90 36		bcc $395acd	                    BCC time_out            ; If there was a time out, raise an error
.395a97		20 a6 56	jsr $3956a6	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395a9a		90 31		bcc $395acd	                    BCC time_out            ; If there was a time out, raise an error
.395a9c		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.395a9e		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395aa2		20 a6 56	jsr $3956a6	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395aa5		90 26		bcc $395acd	                    BCC time_out            ; If there was a time out, raise an error
.395aa7		a9 00		lda #$00	                    LDA #$00
.395aa9		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395aad		20 a6 56	jsr $3956a6	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395ab0		90 1b		bcc $395acd	                    BCC time_out            ; If there was a time out, raise an error
.395ab2		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.395ab4		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395ab8		20 a6 56	jsr $3956a6	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395abb		90 10		bcc $395acd	                    BCC time_out            ; If there was a time out, raise an error
.395abd		a9 00		lda #$00	                    LDA #$00
.395abf		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395ac3		20 f6 56	jsr $3956f6	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395ac6		90 05		bcc $395acd	                    BCC time_out            ; If there was a time out, raise an error
.395ac8		28		plp		                    PLP
.395ac9		2b		pld		                    PLD
.395aca		ab		plb		                    PLB
.395acb		38		sec		                    SEC
.395acc		6b		rtl		                    RTL
.395acd						time_out
.395acd		e2 20		sep #$20	                SEP #$20        ; set A short
.395acf		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.395ad1		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395ad4		28		plp		                    PLP
.395ad5		2b		pld		                    PLD
.395ad6		ab		plb		                    PLB
.395ad7		18		clc		                    CLC
.395ad8		6b		rtl		                    RTL
.395ad9						FDC_Read_ID_Command
.395ad9		8b		phb		                    PHB
.395ada		0b		phd		                    PHD
.395adb		08		php		                    PHP
.395adc		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395adf		ab		plb		                PLB
.395ae0		ab		plb		                PLB
.395ae1		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395ae4		2b		pld		                PLD
.395ae5		e2 20		sep #$20	                SEP #$20        ; set A short
.395ae7		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.395ae9		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395aec		a9 01		lda #$01	                    LDA #1
.395aee		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.395af1		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395af4		a9 07		lda #$07	                    LDA #7
.395af6		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395af9		22 83 57 39	jsl $395783	                    JSL FDC_COMMAND                     ; Issue the command
.395afd		90 27		bcc $395b26	                    BCC pass_failure
.395aff		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.395b02		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.395b04		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.395b07		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.395b09		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.395b0c		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.395b0e		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.395b11		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.395b13		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.395b16		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.395b18		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.395b1b		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.395b1d		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.395b20		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.395b22		28		plp		                    PLP
.395b23		2b		pld		                    PLD
.395b24		ab		plb		                    PLB
.395b25		6b		rtl		                    RTL
.395b26		28		plp		pass_failure        PLP
.395b27		2b		pld		                    PLD
.395b28		ab		plb		                    PLB
.395b29		18		clc		                    CLC
.395b2a		6b		rtl		                    RTL
.395b2b						FDC_DumpReg_Command
.395b2b		0b		phd		                    PHD
.395b2c		08		php		                    PHP
.395b2d		e2 20		sep #$20	                SEP #$20        ; set A short
.395b2f		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.395b31		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395b34		a9 01		lda #$01	                    LDA #1
.395b36		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.395b39		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395b3c		a9 0a		lda #$0a	                    LDA #10
.395b3e		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.395b41		22 83 57 39	jsl $395783	                    JSL FDC_COMMAND                     ; Issue the command
.395b45		90 03		bcc $395b4a	                    BCC pass_failure
.395b47		28		plp		                    PLP
.395b48		2b		pld		                    PLD
.395b49		6b		rtl		                    RTL
.395b4a		28		plp		pass_failure        PLP
.395b4b		2b		pld		                    PLD
.395b4c		18		clc		                    CLC
.395b4d		6b		rtl		                    RTL
.395b4e						FDC_Seek_Track
.395b4e		8b		phb		                    PHB
.395b4f		0b		phd		                    PHD
.395b50		08		php		                    PHP
.395b51		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395b54		ab		plb		                PLB
.395b55		ab		plb		                PLB
.395b56		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395b59		2b		pld		                PLD
.395b5a		22 28 59 39	jsl $395928	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395b5e		e2 20		sep #$20	                SEP #$20        ; set A short
.395b60		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.395b62		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395b65		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.395b67		29 01		and #$01	                    AND #$01
.395b69		0a		asl a		                    ASL A
.395b6a		0a		asl a		                    ASL A
.395b6b		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395b6d		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395b70		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.395b72		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395b75		a9 03		lda #$03	                    LDA #3
.395b77		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.395b7a		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395b7d		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.395b80		22 83 57 39	jsl $395783	                    JSL FDC_COMMAND                     ; Issue the command
.395b84		90 05		bcc $395b8b	                    BCC pass_failure
.395b86		28		plp		                    PLP
.395b87		2b		pld		                    PLD
.395b88		ab		plb		                    PLB
.395b89		38		sec		                    SEC
.395b8a		6b		rtl		                    RTL
.395b8b		28		plp		pass_failure        PLP
.395b8c		2b		pld		                    PLD
.395b8d		ab		plb		                    PLB
.395b8e		18		clc		                    CLC
.395b8f		6b		rtl		                    RTL
.395b90						FDC_Read_Sector
.395b90		8b		phb		                    PHB
.395b91		0b		phd		                    PHD
.395b92		08		php		                    PHP
.395b93		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395b96		ab		plb		                PLB
.395b97		ab		plb		                PLB
.395b98		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395b9b		2b		pld		                PLD
.395b9c		22 28 59 39	jsl $395928	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395ba0		e2 20		sep #$20	                SEP #$20        ; set A short
.395ba2		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.395ba4		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.395ba6		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395ba9		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.395bab		29 01		and #$01	                    AND #$01
.395bad		0a		asl a		                    ASL A
.395bae		0a		asl a		                    ASL A
.395baf		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395bb1		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395bb4		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.395bb6		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395bb9		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.395bbb		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.395bbe		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.395bc0		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.395bc3		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.395bc5		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.395bc8		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.395bca		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.395bcd		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.395bcf		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.395bd2		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.395bd4		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.395bd7		a9 09		lda #$09	                    LDA #9
.395bd9		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.395bdc		a9 01		lda #$01	                    LDA #1
.395bde		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.395be1		a9 07		lda #$07	                    LDA #7
.395be3		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395be6		22 83 57 39	jsl $395783	command             JSL FDC_COMMAND                     ; Issue the command
.395bea		08		php		                    PHP
.395beb		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.395bee		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.395bf0		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.395bf3		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.395bf5		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.395bf8		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.395bfa		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.395bfd		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.395bff		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.395c02		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.395c04		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.395c07		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.395c09		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.395c0c		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.395c0e		28		plp		                    PLP
.395c0f		90 04		bcc $395c15	                    BCC pass_failure
.395c11		28		plp		done                PLP
.395c12		2b		pld		                    PLD
.395c13		ab		plb		                    PLB
.395c14		6b		rtl		                    RTL
.395c15		28		plp		pass_failure        PLP
.395c16		2b		pld		                    PLD
.395c17		ab		plb		                    PLB
.395c18		18		clc		                    CLC
.395c19		6b		rtl		                    RTL
.395c1a						FDC_Write_Sector
.395c1a		8b		phb		                    PHB
.395c1b		0b		phd		                    PHD
.395c1c		08		php		                    PHP
.395c1d		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395c20		ab		plb		                PLB
.395c21		ab		plb		                PLB
.395c22		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395c25		2b		pld		                PLD
.395c26		e2 20		sep #$20	                SEP #$20        ; set A short
.395c28		22 28 59 39	jsl $395928	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395c2c		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.395c2e		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.395c30		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395c33		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.395c35		29 01		and #$01	                    AND #$01
.395c37		0a		asl a		                    ASL A
.395c38		0a		asl a		                    ASL A
.395c39		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395c3b		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395c3e		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.395c40		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395c43		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.395c45		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.395c48		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.395c4a		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.395c4d		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.395c4f		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.395c52		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.395c54		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.395c57		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.395c59		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.395c5c		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.395c5e		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.395c61		a9 09		lda #$09	                    LDA #9
.395c63		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.395c66		a9 ff		lda #$ff	                    LDA #$FF
.395c68		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.395c6b		a9 07		lda #$07	                    LDA #7
.395c6d		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395c70		22 83 57 39	jsl $395783	command             JSL FDC_COMMAND                     ; Issue the command
.395c74		08		php		                    PHP
.395c75		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.395c78		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.395c7a		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.395c7d		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.395c7f		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.395c82		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.395c84		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.395c87		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.395c89		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.395c8c		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.395c8e		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.395c91		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.395c93		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.395c96		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.395c98		28		plp		check_status        PLP
.395c99		90 04		bcc $395c9f	                    BCC pass_failure
.395c9b		28		plp		done                PLP
.395c9c		2b		pld		                    PLD
.395c9d		ab		plb		                    PLB
.395c9e		6b		rtl		                    RTL
.395c9f		28		plp		pass_failure        PLP
.395ca0		2b		pld		                    PLD
.395ca1		ab		plb		                    PLB
.395ca2		18		clc		                    CLC
.395ca3		6b		rtl		                    RTL
.395ca4						DIVIDE32
.395ca4		da		phx		                    PHX
.395ca5		5a		phy		                    PHY
.395ca6		0b		phd		                    PHD
.395ca7		08		php		                    PHP
.395ca8		f4 0c 03	pea #$030c	                PEA #DIVIDEND         ; set DP to page 0
.395cab		2b		pld		                PLD
.395cac		c2 30		rep #$30	                REP #$30        ; set A&X long
.395cae		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.395cb0		64 0a		stz $0316	                    STZ REMAINDER+2
.395cb2		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.395cb5		06 00		asl $030c	loop                ASL DIVIDEND
.395cb7		26 02		rol $030e	                    ROL DIVIDEND+2
.395cb9		26 08		rol $0314	                    ROL REMAINDER
.395cbb		26 0a		rol $0316	                    ROL REMAINDER+2
.395cbd		a5 08		lda $0314	                    LDA REMAINDER
.395cbf		38		sec		                    SEC
.395cc0		e5 04		sbc $0310	                    SBC DIVISOR
.395cc2		a8		tay		                    TAY
.395cc3		a5 0a		lda $0316	                    LDA REMAINDER+2
.395cc5		e5 06		sbc $0312	                    SBC DIVISOR+2
.395cc7		90 06		bcc $395ccf	                    BCC skip
.395cc9		85 0a		sta $0316	                    STA REMAINDER+2
.395ccb		84 08		sty $0314	                    STY REMAINDER
.395ccd		e6 00		inc $030c	                    INC DIVIDEND
.395ccf		ca		dex		skip                DEX
.395cd0		d0 e3		bne $395cb5	                    BNE loop
.395cd2		28		plp		                    PLP
.395cd3		2b		pld		                    PLD
.395cd4		7a		ply		                    PLY
.395cd5		fa		plx		                    PLX
.395cd6		60		rts		                    RTS
.395cd7						LBA2CHS
.395cd7		8b		phb		                    PHB
.395cd8		0b		phd		                    PHD
.395cd9		08		php		                    PHP
.395cda		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395cdd		ab		plb		                PLB
.395cde		ab		plb		                PLB
.395cdf		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395ce2		2b		pld		                PLD
.395ce3		c2 30		rep #$30	                REP #$30        ; set A&X long
.395ce5		a5 22		lda $0322	                    LDA BIOS_LBA
.395ce7		85 0c		sta $030c	                    STA DIVIDEND
.395ce9		a5 24		lda $0324	                    LDA BIOS_LBA+2
.395ceb		85 0e		sta $030e	                    STA DIVIDEND+2
.395ced		a9 24 00	lda #$0024	                    LDA #36
.395cf0		85 10		sta $0310	                    STA DIVISOR
.395cf2		64 12		stz $0312	                    STZ DIVISOR+2
.395cf4		20 a4 5c	jsr $395ca4	                    JSR DIVIDE32
.395cf7		e2 20		sep #$20	                SEP #$20        ; set A short
.395cf9		a5 0c		lda $030c	                    LDA DIVIDEND
.395cfb		85 02		sta $0302	                    STA FDC_CYLINDER
.395cfd		c2 20		rep #$20	                REP #$20        ; set A long
.395cff		a5 14		lda $0314	                    LDA REMAINDER
.395d01		85 0c		sta $030c	                    STA DIVIDEND
.395d03		a5 16		lda $0316	                    LDA REMAINDER+2
.395d05		85 0e		sta $030e	                    STA DIVIDEND+2
.395d07		a9 12 00	lda #$0012	                    LDA #18
.395d0a		85 10		sta $0310	                    STA DIVISOR
.395d0c		64 12		stz $0312	                    STZ DIVISOR+2
.395d0e		20 a4 5c	jsr $395ca4	                    JSR DIVIDE32
.395d11		e2 20		sep #$20	                SEP #$20        ; set A short
.395d13		a5 0c		lda $030c	                    LDA DIVIDEND
.395d15		29 01		and #$01	                    AND #$01
.395d17		85 01		sta $0301	                    STA FDC_HEAD
.395d19		a5 14		lda $0314	                    LDA REMAINDER
.395d1b		1a		inc a		                    INC A
.395d1c		85 03		sta $0303	                    STA FDC_SECTOR
.395d1e		28		plp		                    PLP
.395d1f		2b		pld		                    PLD
.395d20		ab		plb		                    PLB
.395d21		6b		rtl		                    RTL
.395d22						FDC_GETBLOCK
.395d22		8b		phb		                    PHB
.395d23		0b		phd		                    PHD
.395d24		08		php		                    PHP
.395d25		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395d28		ab		plb		                PLB
.395d29		ab		plb		                PLB
.395d2a		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395d2d		2b		pld		                PLD
.395d2e		e2 20		sep #$20	                SEP #$20        ; set A short
.395d30		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.395d32		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.395d35		c2 30		rep #$30	                REP #$30        ; set A&X long
.395d37		22 d7 5c 39	jsl $395cd7	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.395d3b		e2 20		sep #$20	                SEP #$20        ; set A short
.395d3d		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.395d3f		f0 29		beq $395d6a	                    BEQ read_failure
.395d41						try_read
.395d41		c2 20		rep #$20	                REP #$20        ; set A long
.395d43		22 90 5b 39	jsl $395b90	                    JSL FDC_Read_Sector         ; Read the sector
.395d47		90 14		bcc $395d5d	                    BCC retry
.395d49		e2 20		sep #$20	                SEP #$20        ; set A short
.395d4b		a5 06		lda $0306	                    LDA FDC_ST0
.395d4d		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.395d4f		d0 19		bne $395d6a	                    BNE read_failure
.395d51						ret_success
.395d51		e2 20		sep #$20	                SEP #$20        ; set A short
.395d53		a9 00		lda #$00	                    LDA #0
.395d55		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395d58		28		plp		                    PLP
.395d59		2b		pld		                    PLD
.395d5a		ab		plb		                    PLB
.395d5b		38		sec		                    SEC
.395d5c		6b		rtl		                    RTL
.395d5d						retry
.395d5d		e2 20		sep #$20	                SEP #$20        ; set A short
.395d5f		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.395d62		30 13		bmi $395d77	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.395d64		22 c5 58 39	jsl $3958c5	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.395d68		80 d7		bra $395d41	                    BRA try_read                ; And try the read again
.395d6a						read_failure
.395d6a		e2 20		sep #$20	                SEP #$20        ; set A short
.395d6c		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.395d6e		80 04		bra $395d74	                    BRA ret_failure
.395d70						seek_failure
.395d70		e2 20		sep #$20	                SEP #$20        ; set A short
.395d72		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.395d74		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.395d77		28		plp		pass_failure        PLP
.395d78		2b		pld		                    PLD
.395d79		ab		plb		                    PLB
.395d7a		18		clc		                    CLC
.395d7b		6b		rtl		                    RTL
.395d7c						FDC_PUTBLOCK
.395d7c		8b		phb		                    PHB
.395d7d		0b		phd		                    PHD
.395d7e		08		php		                    PHP
.395d7f		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395d82		ab		plb		                PLB
.395d83		ab		plb		                PLB
.395d84		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395d87		2b		pld		                PLD
.395d88		e2 20		sep #$20	                SEP #$20        ; set A short
.395d8a		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.395d8c		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.395d8f		c2 30		rep #$30	                REP #$30        ; set A&X long
.395d91		22 d7 5c 39	jsl $395cd7	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.395d95		22 1a 5c 39	jsl $395c1a	retry               JSL FDC_Write_Sector        ; Write the sector
.395d99		b0 03		bcs $395d9e	                    BCS chk_st0
.395d9b		82 28 00	brl $395dc6	                    BRL attempt_retry
.395d9e						chk_st0
.395d9e		e2 20		sep #$20	                SEP #$20        ; set A short
.395da0		a5 06		lda $0306	                    LDA FDC_ST0
.395da2		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.395da4		d0 0c		bne $395db2	                    BNE write_failure
.395da6						ret_success
.395da6		e2 20		sep #$20	                SEP #$20        ; set A short
.395da8		a9 00		lda #$00	                    LDA #0
.395daa		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395dad		28		plp		                    PLP
.395dae		2b		pld		                    PLD
.395daf		ab		plb		                    PLB
.395db0		38		sec		                    SEC
.395db1		6b		rtl		                    RTL
.395db2						write_failure
.395db2		e2 20		sep #$20	                SEP #$20        ; set A short
.395db4		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.395db6		89 02		bit #$02	                    BIT #FDC_ST1_NW
.395db8		f0 04		beq $395dbe	                    BEQ generic_err
.395dba		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.395dbc		80 17		bra $395dd5	                    BRA ret_failure
.395dbe		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.395dc0		d0 e4		bne $395da6	                    BNE ret_success
.395dc2		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.395dc4		d0 e0		bne $395da6	                    BNE ret_success
.395dc6						attempt_retry
.395dc6		e2 20		sep #$20	                SEP #$20        ; set A short
.395dc8		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.395dcb		d0 c8		bne $395d95	                    BNE retry                           ; And retry unless we have none left
.395dcd		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.395dcf		80 04		bra $395dd5	                    BRA ret_failure
.395dd1						seek_failure
.395dd1		e2 20		sep #$20	                SEP #$20        ; set A short
.395dd3		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.395dd5						ret_failure
.395dd5		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395dd8		28		plp		pass_failure        PLP
.395dd9		2b		pld		                    PLD
.395dda		ab		plb		                    PLB
.395ddb		18		clc		                    CLC
.395ddc		6b		rtl		                    RTL
.395ddd						FDC_MOUNT
.395ddd		8b		phb		                    PHB
.395dde		0b		phd		                    PHD
.395ddf		08		php		                    PHP
.395de0		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395de3		ab		plb		                PLB
.395de4		ab		plb		                PLB
.395de5		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395de8		2b		pld		                PLD
.395de9		22 c5 58 39	jsl $3958c5	                    JSL FDC_INIT
.395ded		e2 20		sep #$20	                SEP #$20        ; set A short
.395def		c2 10		rep #$10	                REP #$10        ; set X long
.395df1		a9 00		lda #$00	                    LDA #0
.395df3		a2 00 00	ldx #$0000	                    LDX #0
.395df6		9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.395dfa		e8		inx		                    INX
.395dfb		e0 00 02	cpx #$0200	                    CPX #512
.395dfe		d0 f6		bne $395df6	                    BNE zero_loop
.395e00		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.395e02		85 00		sta $0300	                    STA FDC_DRIVE
.395e04		22 41 59 39	jsl $395941	                    JSL FDC_Motor_On                        ; Turn the motor on
.395e08		c2 30		rep #$30	                REP #$30        ; set A&X long
.395e0a		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.395e0d		85 22		sta $0322	                    STA BIOS_LBA
.395e0f		85 24		sta $0324	                    STA BIOS_LBA+2
.395e11		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.395e14		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.395e16		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.395e19		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.395e1b		22 22 5d 39	jsl $395d22	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.395e1f		b0 03		bcs $395e24	                    BCS parse_boot                          ; If ok: start parsing the boot record
.395e21		82 d3 00	brl $395ef7	                    BRL pass_failure                        ; Pass the error up the chain
.395e24						parse_boot
.395e24		e2 20		sep #$20	                SEP #$20        ; set A short
.395e26		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.395e28		8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.395e2c		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.395e2e		8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.395e32		e2 20		sep #$20	                SEP #$20        ; set A short
.395e34		af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.395e38		8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.395e3c		c2 20		rep #$20	                REP #$20        ; set A long
.395e3e		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.395e41		8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.395e45		8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.395e49		af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.395e4d		8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.395e51		a9 00 00	lda #$0000	                    LDA #0
.395e54		8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.395e58		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.395e5b		8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.395e5f		18		clc		                    CLC
.395e60		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.395e64		8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.395e68		a9 00 00	lda #$0000	                    LDA #0
.395e6b		8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.395e6f		8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.395e73		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.395e74		af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.395e78		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.395e7c		8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.395e80		a9 00 00	lda #$0000	                    LDA #0
.395e83		8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.395e87		af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.395e8b		8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.395e8f		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.395e90		4a		lsr a		                    LSR A
.395e91		4a		lsr a		                    LSR A
.395e92		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.395e93		18		clc		                    CLC
.395e94		6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.395e98		8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.395e9c		a9 00 00	lda #$0000	                    LDA #0
.395e9f		8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.395ea3		af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.395ea7		8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.395eab		a9 00 00	lda #$0000	                    LDA #0
.395eae		8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.395eb2		af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.395eb6		8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.395eba		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.395ebd		8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.395ec1		e2 20		sep #$20	                SEP #$20        ; set A short
.395ec3		af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.395ec7		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.395ec9		80 14		bra $395edf	                    BRA no_volume_id                        ; No: there is no volume ID
.395ecb						is_extended
.395ecb		c2 20		rep #$20	                REP #$20        ; set A long
.395ecd		af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.395ed1		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.395ed5		af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.395ed9		8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.395edd		80 0d		bra $395eec	                    BRA ret_success
.395edf						no_volume_id
.395edf		c2 20		rep #$20	                REP #$20        ; set A long
.395ee1		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.395ee4		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.395ee8		8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.395eec						ret_success
.395eec		e2 20		sep #$20	                SEP #$20        ; set A short
.395eee		a9 00		lda #$00	                    LDA #0
.395ef0		85 20		sta $0320	                    STA BIOS_STATUS
.395ef2		28		plp		                    PLP
.395ef3		2b		pld		                    PLD
.395ef4		ab		plb		                    PLB
.395ef5		38		sec		                    SEC
.395ef6		6b		rtl		                    RTL
.395ef7		28		plp		pass_failure        PLP
.395ef8		2b		pld		                    PLD
.395ef9		ab		plb		                    PLB
.395efa		18		clc		                    CLC
.395efb		6b		rtl		                    RTL
.395efc						FDC_CMDBLOCK
.395efc		8b		phb		                    PHB
.395efd		0b		phd		                    PHD
.395efe		08		php		                    PHP
.395eff		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395f02		ab		plb		                PLB
.395f03		ab		plb		                PLB
.395f04		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395f07		2b		pld		                PLD
.395f08		e2 30		sep #$30	                SEP #$30        ; set A&X short
.395f0a		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.395f0c		f0 0f		beq $395f1d	                    BEQ motor_on
.395f0e		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.395f10		f0 11		beq $395f23	                    BEQ motor_off
.395f12		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.395f14		f0 13		beq $395f29	                    BEQ recalibrate
.395f16		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.395f18		28		plp		                    PLP
.395f19		2b		pld		                    PLD
.395f1a		ab		plb		                    PLB
.395f1b		38		sec		                    SEC
.395f1c		6b		rtl		                    RTL
.395f1d		22 41 59 39	jsl $395941	motor_on            JSL FDC_Motor_On
.395f21		80 f3		bra $395f16	                    BRA ret_success
.395f23		22 75 59 39	jsl $395975	motor_off           JSL FDC_Motor_Off
.395f27		80 ed		bra $395f16	                    BRA ret_success
.395f29		22 a0 59 39	jsl $3959a0	recalibrate         JSL FDC_Recalibrate_Command
.395f2d		b0 e7		bcs $395f16	                    BCS ret_success
.395f2f		28		plp		pass_failure        PLP
.395f30		2b		pld		                    PLD
.395f31		ab		plb		                    PLB
.395f32		18		clc		                    CLC
.395f33		6b		rtl		                    RTL
.395f34						FDC_CHK_MEDIA
.395f34		0b		phd		                    PHD
.395f35		08		php		                    PHP
.395f36		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395f39		2b		pld		                PLD
.395f3a		22 41 59 39	jsl $395941	                    JSL FDC_Motor_On                ; Turn on the motor
.395f3e		e2 20		sep #$20	                SEP #$20        ; set A short
.395f40		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.395f44		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.395f46		f0 42		beq $395f8a	                    BEQ ret_true                    ; If not: assume the disk is present
.395f48		a9 00		lda #$00	                    LDA #0
.395f4a		85 00		sta $0300	                    STA FDC_DRIVE
.395f4c		a9 00		lda #$00	                    LDA #0
.395f4e		85 01		sta $0301	                    STA FDC_HEAD
.395f50		a9 50		lda #$50	                    LDA #80
.395f52		85 02		sta $0302	                    STA FDC_CYLINDER
.395f54		22 4e 5b 39	jsl $395b4e	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.395f58		90 34		bcc $395f8e	                    BCC ret_false                   ; If fail: return false
.395f5a		c2 10		rep #$10	                REP #$10        ; set X long
.395f5c		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.395f5f		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.395f62		22 8b 0f 39	jsl $390f8b	                    JSL IDELAY
.395f66		22 cf 59 39	jsl $3959cf	                    JSL FDC_Sense_Int_Status
.395f6a		a5 06		lda $0306	                    LDA FDC_ST0
.395f6c		29 d0		and #$d0	                    AND #%11010000
.395f6e		d0 1e		bne $395f8e	                    BNE ret_false
.395f70		22 a0 59 39	jsl $3959a0	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.395f74		90 18		bcc $395f8e	                    BCC ret_false                   ; If fail: return false
.395f76		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.395f79		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.395f7c		22 8b 0f 39	jsl $390f8b	                    JSL IDELAY
.395f80		22 cf 59 39	jsl $3959cf	                    JSL FDC_Sense_Int_Status
.395f84		a5 06		lda $0306	                    LDA FDC_ST0
.395f86		29 d0		and #$d0	                    AND #%11010000
.395f88		d0 04		bne $395f8e	                    BNE ret_false
.395f8a						ret_true
.395f8a		28		plp		                    PLP
.395f8b		2b		pld		                    PLD
.395f8c		38		sec		                    SEC
.395f8d		6b		rtl		                    RTL
.395f8e						ret_false
.395f8e		28		plp		                    PLP
.395f8f		2b		pld		                    PLD
.395f90		18		clc		                    CLC
.395f91		6b		rtl		                    RTL
.395f92						FDC_WRITEVBR
.395f92		8b		phb		                    PHB
.395f93		0b		phd		                    PHD
.395f94		08		php		                    PHP
.395f95		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395f98		ab		plb		                PLB
.395f99		ab		plb		                PLB
.395f9a		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.395f9d		2b		pld		                PLD
.395f9e		22 dd 5d 39	jsl $395ddd	                    JSL FDC_MOUNT               ; Mount the floppy disk
.395fa2		c2 30		rep #$30	                REP #$30        ; set A&X long
.395fa4		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.395fa7		a2 00 00	ldx #$0000	                    LDX #0
.395faa		9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.395fae		e8		inx		                    INX
.395faf		e8		inx		                    INX
.395fb0		e0 00 02	cpx #$0200	                    CPX #512
.395fb3		d0 f5		bne $395faa	                    BNE clr_loop
.395fb5		e2 20		sep #$20	                SEP #$20        ; set A short
.395fb7		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.395fba		bf 6f 60 39	lda $39606f,x	copy_loop           LDA FDC_VBR_BEGIN,X
.395fbe		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.395fc2		e8		inx		                    INX
.395fc3		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.395fc6		d0 f2		bne $395fba	                    BNE copy_loop
.395fc8		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.395fcb		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.395fce		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.395fd0		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.395fd4		f0 07		beq $395fdd	                    BEQ path_copy_done
.395fd6		e8		inx		                    INX
.395fd7		c8		iny		                    INY
.395fd8		c0 80 00	cpy #$0080	                    CPY #128
.395fdb		d0 f1		bne $395fce	                    BNE path_copy_loop
.395fdd						path_copy_done
.395fdd		c2 20		rep #$20	                REP #$20        ; set A long
.395fdf		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.395fe2		8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.395fe6		c2 20		rep #$20	                REP #$20        ; set A long
.395fe8		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.395feb		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.395fed		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.395ff0		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.395ff2		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.395ff5		85 02		sta $0322	                    STA BIOS_LBA
.395ff7		85 04		sta $0324	                    STA BIOS_LBA+2
.395ff9		e2 20		sep #$20	                SEP #$20        ; set A short
.395ffb		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.395ffd		85 01		sta $0321	                    STA BIOS_DEV
.395fff		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.396003		b0 09		bcs $39600e	                    BCS ret_success
.396005		22 75 59 39	jsl $395975	                    JSL FDC_Motor_Off
.396009		28		plp		                    PLP                         ; Return the failure
.39600a		2b		pld		                    PLD
.39600b		ab		plb		                    PLB
.39600c		18		clc		                    CLC
.39600d		6b		rtl		                    RTL
.39600e		22 75 59 39	jsl $395975	ret_success         JSL FDC_Motor_Off
.396012		e2 20		sep #$20	                SEP #$20        ; set A short
.396014		a9 00		lda #$00	                    LDA #0
.396016		85 00		sta $0320	                    STA BIOS_STATUS
.396018		28		plp		                    PLP
.396019		2b		pld		                    PLD
.39601a		ab		plb		                    PLB
.39601b		38		sec		                    SEC
.39601c		6b		rtl		                    RTL
.39601d						FDC_TIME_HANDLE
.39601d		08		php		                    PHP
.39601e		e2 20		sep #$20	                SEP #$20        ; set A short
.396020		af 4e a0 38	lda $38a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.396024		d0 06		bne $39602c	                    BNE dec_motor                   ; If not zero: decrement the timer
.396026		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.39602a		f0 28		beq $396054	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.39602c		af 4e a0 38	lda $38a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.396030		3a		dec a		                    DEC A
.396031		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.396035		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.396037		d0 0b		bne $396044	                    BNE chk_motor_end               ; No: check to see if we're a the end
.396039		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.39603d		3a		dec a		                    DEC A
.39603e		8f 4f a0 38	sta $38a04f	                    STA @l FDC_MOTOR_TIMER+1
.396042		80 10		bra $396054	                    BRA sof_timeout                 ; And move on to the next timer
.396044		af 4e a0 38	lda $38a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.396048		d0 0a		bne $396054	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.39604a		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1
.39604e		d0 04		bne $396054	                    BNE sof_timeout
.396050		22 75 59 39	jsl $395975	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.396054						sof_timeout
.396054		e2 20		sep #$20	                SEP #$20        ; set A short
.396056		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.39605a		f0 11		beq $39606d	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.39605c		3a		dec a		                    DEC A                           ; Count down one tick
.39605d		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.396061		d0 0a		bne $39606d	                    BNE sof_int_done                ; If not 0, we're done
.396063		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.396067		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.396069		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.39606d		28		plp		sof_int_done        PLP
.39606e		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.39606f						FDC_VBR_BEGIN
>39606f		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>396072		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>39607a		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>39607c		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>39607d		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>39607f		02				num_fat             .byte 2                 ; Number of FATs
>396080		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>396082		40 0b				total_sectors       .word 2880              ; Total sectors
>396084		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>396085		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>396087		12 00				sec_per_track       .word 18                ; Sectors per track
>396089		02 00				num_head            .word 2                 ; Number of heads
>39608b		00 00 00 00			ignore2             .dword 0
>39608f		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>396093		00 00				ignore3             .word 0
>396095		29				boot_signature      .byte $29
>396096		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>39609a		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>3960a2		20 20 20
>3960a5		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.3960ad		80 40		bra $3960ef	                    BRA vbr_start
>3960af						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.3960ef						vbr_start
.3960ef		c2 20		rep #$20	                REP #$20        ; set A long
.3960f1		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.3960f4		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.3960f8		a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.3960fb		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.3960ff		22 24 11 00	jsl $001124	                    JSL F_RUN               ; And try to execute the binary file
.396103		b0 0c		bcs $396111	                    BCS lock                ; If it returned success... lock up... I guess?
.396105						error
.396105		e2 20		sep #$20	                SEP #$20        ; set A short
.396107		4b		phk		                    PHK                     ; Otherwise, print an error message
.396108		ab		plb		                    PLB
.396109		62 08 00	per $396114	                    PER message
.39610c		fa		plx		                    PLX
.39610d		22 1c 10 00	jsl $00101c	                    JSL PUTS
.396111		ea		nop		lock                NOP                     ; And lock up
.396112		80 fd		bra $396111	                    BRA lock
>396114		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>39611c		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>39612c		65 20 62 69 6e 61 72 79 2e 0d 00
.396137						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.396137						IDE_TEST
.396137		08		php		                PHP
.396138		c2 20		rep #$20	                REP #$20        ; set A long
.39613a		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.39613d		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396141		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396144		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396148		22 33 62 39	jsl $396233	                JSL IDE_IDENTIFY
.39614c		b0 03		bcs $396151	                BCS id_ok
.39614e		82 73 00	brl $3961c4	                BRL done
.396151						id_ok
.396151		c2 10		rep #$10	                REP #$10        ; set X long
.396153		e2 20		sep #$20	                SEP #$20        ; set A short
.396155		a0 28 00	ldy #$0028	                LDY #40
.396158		a2 36 00	ldx #$0036	                LDX #27*2
.39615b		bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.39615f		22 18 10 00	jsl $001018	                JSL PUTC
.396163		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396167		22 18 10 00	jsl $001018	                JSL PUTC
.39616b		e8		inx		                INX
.39616c		e8		inx		                INX
.39616d		88		dey		                DEY
.39616e		88		dey		                DEY
.39616f		d0 ea		bne $39615b	                BNE pr_model
.396171		c2 10		rep #$10	                REP #$10        ; set X long
.396173		e2 20		sep #$20	                SEP #$20        ; set A short
.396175		a0 14 00	ldy #$0014	                LDY #20
.396178		a2 14 00	ldx #$0014	                LDX #10*2
.39617b		bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.39617f		22 18 10 00	jsl $001018	                JSL PUTC
.396183		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396187		22 18 10 00	jsl $001018	                JSL PUTC
.39618b		e8		inx		                INX
.39618c		e8		inx		                INX
.39618d		88		dey		                DEY
.39618e		88		dey		                DEY
.39618f		d0 ea		bne $39617b	                BNE pr_serial
.396191		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396195						read_sect1
.396195		c2 20		rep #$20	                REP #$20        ; set A long
.396197		a9 00 00	lda #$0000	                LDA #0                 ; Set LBA = 0
.39619a		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.39619e		a9 00 00	lda #$0000	                LDA #0
.3961a1		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.3961a5		a9 00 a9	lda #$a900	                LDA #<>DOS_BOOT_SECTOR
.3961a8		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.3961ac		a9 38 00	lda #$0038	                LDA #`DOS_BOOT_SECTOR
.3961af		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.3961b3		22 b6 62 39	jsl $3962b6	                JSL IDE_GETBLOCK        ; Attempt to read the block
.3961b7		b0 06		bcs $3961bf	                BCS all_ok
.3961b9		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.3961bd		80 05		bra $3961c4	                BRA done
.3961bf						all_ok
.3961bf		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.3961c3		00		brk #		                BRK
.3961c4		28		plp		done            PLP
.3961c5		6b		rtl		                RTL
.3961c6						IDE_INIT
.3961c6		e2 20		sep #$20	                SEP #$20        ; set A short
.3961c8		a9 00		lda #$00	              LDA #$00
.3961ca		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.3961ce		20 ef 61	jsr $3961ef	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.3961d1		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.3961d3		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.3961d7		a9 01		lda #$01	              LDA #$01
.3961d9		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.3961dd		a9 00		lda #$00	              LDA #$00
.3961df		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.3961e3		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.3961e7		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.3961eb		20 0d 62	jsr $39620d	              JSR IDE_DRV_READY_NOTBUSY
.3961ee		6b		rtl		              RTL
.3961ef						IDE_DRIVE_BSY
.3961ef		08		php		                PHP
.3961f0		e2 20		sep #$20	                SEP #$20        ; set A short
.3961f2		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.3961f6		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.3961f8		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.3961fa		f0 f6		beq $3961f2	                BEQ loop
.3961fc		28		plp		                PLP
.3961fd		60		rts		                RTS
.3961fe						IDE_DRIVE_READY
.3961fe		08		php		                PHP
.3961ff		e2 20		sep #$20	                SEP #$20        ; set A short
.396201		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396205		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396207		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396209		d0 f6		bne $396201	                BNE loop
.39620b		28		plp		                PLP
.39620c		60		rts		                RTS
.39620d						IDE_DRV_READY_NOTBUSY
.39620d		08		php		                PHP
.39620e		e2 20		sep #$20	                SEP #$20        ; set A short
.396210		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.396214		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.396216		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.396218		d0 f6		bne $396210	                BNE loop                            ; No: keep waiting
.39621a		28		plp		ret_success     PLP                                 ; Return success
.39621b		38		sec		                SEC
.39621c		60		rts		                RTS
.39621d		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.396221		28		plp		                PLP                                 ; Return failure
.396222		18		clc		                CLC
.396223		60		rts		                RTS
.396224						IDE_NOT_DRQ
.396224		08		php		                PHP
.396225		e2 20		sep #$20	                SEP #$20        ; set A short
.396227		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.39622b		29 08		and #$08	                AND #IDE_STAT_DRQ
.39622d		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.39622f		d0 f6		bne $396227	                BNE loop                ; No: keep waiting
.396231		28		plp		                PLP
.396232		60		rts		                RTS
.396233						IDE_IDENTIFY
.396233		5a		phy		                PHY
.396234		8b		phb		                PHB
.396235		0b		phd		                PHD
.396236		08		php		                PHP
.396237		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.39623a		ab		plb		                PLB
.39623b		ab		plb		                PLB
.39623c		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39623f		2b		pld		                PLD
.396240		e2 20		sep #$20	                SEP #$20        ; set A short
.396242		20 0d 62	jsr $39620d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396245		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396247		29 07		and #$07	                AND #$07
.396249		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.39624b		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.39624f		20 0d 62	jsr $39620d	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396252		e2 20		sep #$20	                SEP #$20        ; set A short
.396254		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396256		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.39625a		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.39625e		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396262		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396266		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396268		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.39626c		f0 29		beq $396297	                BEQ no_media                    ; If 0: there is no drive
.39626e		20 ef 61	jsr $3961ef	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.396271		20 0d 62	jsr $39620d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396274		90 2d		bcc $3962a3	                BCC ret_failure                 ; If an error occurred, return it
.396276		c2 30		rep #$30	                REP #$30        ; set A&X long
.396278		a0 00 00	ldy #$0000	                LDY #0
.39627b		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.39627f		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396281		c8		iny		                INY                             ; Move to the next position
.396282		c8		iny		                INY
.396283		c0 00 02	cpy #$0200	                CPY #512
.396286		d0 f3		bne $39627b	                BNE read_loop
.396288						ret_success
.396288		e2 20		sep #$20	                SEP #$20        ; set A short
.39628a		a9 00		lda #$00	                LDA #0
.39628c		85 00		sta $0320	                STA BIOS_STATUS
.39628e		8d 06 03	sta $0306	                STA @w FDC_ST0
.396291		28		plp		                PLP                             ; Return success
.396292		2b		pld		                PLD
.396293		ab		plb		                PLB
.396294		7a		ply		                PLY
.396295		38		sec		                SEC
.396296		6b		rtl		                RTL
.396297						no_media
.396297		e2 20		sep #$20	                SEP #$20        ; set A short
.396299		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.39629b		80 0a		bra $3962a7	                BRA pass_failure
.39629d						not_ata
.39629d		e2 20		sep #$20	                SEP #$20        ; set A short
.39629f		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.3962a1		80 04		bra $3962a7	                BRA pass_failure
.3962a3						ret_failure
.3962a3		e2 20		sep #$20	                SEP #$20        ; set A short
.3962a5		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.3962a7		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.3962a9		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.3962ad		8d 06 03	sta $0306	                STA @w FDC_ST0
.3962b0		28		plp		                PLP
.3962b1		2b		pld		                PLD
.3962b2		ab		plb		                PLB
.3962b3		7a		ply		                PLY
.3962b4		18		clc		                CLC
.3962b5		6b		rtl		                RTL
.3962b6						IDE_GETBLOCK
.3962b6		5a		phy		                PHY
.3962b7		8b		phb		                PHB
.3962b8		0b		phd		                PHD
.3962b9		08		php		                PHP
.3962ba		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3962bd		ab		plb		                PLB
.3962be		ab		plb		                PLB
.3962bf		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3962c2		2b		pld		                PLD
.3962c3		e2 20		sep #$20	                SEP #$20        ; set A short
.3962c5		20 0d 62	jsr $39620d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.3962c8		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.3962ca		29 07		and #$07	                AND #$07
.3962cc		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.3962ce		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.3962d2		20 0d 62	jsr $39620d	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.3962d5		e2 20		sep #$20	                SEP #$20        ; set A short
.3962d7		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.3962d9		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.3962dd		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.3962df		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.3962e3		a5 03		lda $0323	                LDA BIOS_LBA+1
.3962e5		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.3962e9		a5 04		lda $0324	                LDA BIOS_LBA+2
.3962eb		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.3962ef		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.3962f1		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.3962f5		ea		nop		                NOP                             ; Wait about 500ns
.3962f6		ea		nop		                NOP
.3962f7		ea		nop		                NOP
.3962f8		ea		nop		                NOP
.3962f9		20 0d 62	jsr $39620d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.3962fc		90 25		bcc $396323	                BCC ret_failure                 ; If an error occurred, return it
.3962fe		a0 00 00	ldy #$0000	                LDY #0
.396301		c2 30		rep #$30	                REP #$30        ; set A&X long
.396303		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396307		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396309		c8		iny		                INY                             ; Move to the next position
.39630a		c8		iny		                INY
.39630b		c0 00 02	cpy #$0200	                CPY #512
.39630e		d0 f3		bne $396303	                BNE read_loop
.396310		ea		nop		                NOP                             ; Wait about 500ns
.396311		ea		nop		                NOP
.396312		ea		nop		                NOP
.396313		ea		nop		                NOP
.396314						ret_success
.396314		e2 20		sep #$20	                SEP #$20        ; set A short
.396316		a9 00		lda #$00	                LDA #0
.396318		85 00		sta $0320	                STA BIOS_STATUS
.39631a		8d 06 03	sta $0306	                STA @w FDC_ST0
.39631d		28		plp		                PLP                             ; Return success
.39631e		2b		pld		                PLD
.39631f		ab		plb		                PLB
.396320		7a		ply		                PLY
.396321		38		sec		                SEC
.396322		6b		rtl		                RTL
.396323						ret_failure
.396323		e2 20		sep #$20	                SEP #$20        ; set A short
.396325		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396329		8d 06 03	sta $0306	                STA @w FDC_ST0
.39632c		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.39632e		85 00		sta $0320	                STA BIOS_STATUS
.396330		28		plp		                PLP
.396331		2b		pld		                PLD
.396332		ab		plb		                PLB
.396333		7a		ply		                PLY
.396334		18		clc		                CLC
.396335		6b		rtl		                RTL
.396336						IDE_PUTBLOCK
.396336		5a		phy		                PHY
.396337		8b		phb		                PHB
.396338		0b		phd		                PHD
.396339		08		php		                PHP
.39633a		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.39633d		ab		plb		                PLB
.39633e		ab		plb		                PLB
.39633f		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.396342		2b		pld		                PLD
.396343		e2 20		sep #$20	                SEP #$20        ; set A short
.396345		20 0d 62	jsr $39620d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396348		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.39634a		29 07		and #$07	                AND #$07
.39634c		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.39634e		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396352		20 0d 62	jsr $39620d	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396355		e2 20		sep #$20	                SEP #$20        ; set A short
.396357		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396359		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.39635d		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.39635f		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396363		a5 03		lda $0323	                LDA BIOS_LBA+1
.396365		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396369		a5 04		lda $0324	                LDA BIOS_LBA+2
.39636b		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.39636f		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396371		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396375		ea		nop		                NOP                             ; Wait about 500ns
.396376		ea		nop		                NOP
.396377		ea		nop		                NOP
.396378		ea		nop		                NOP
.396379		20 0d 62	jsr $39620d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.39637c		90 37		bcc $3963b5	                BCC ret_failure                 ; If an error occurred, return it
.39637e		c2 30		rep #$30	                REP #$30        ; set A&X long
.396380		a0 00 00	ldy #$0000	                LDY #0
.396383		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.396385		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.396389		c8		iny		                INY                             ; Move to the next position
.39638a		c8		iny		                INY
.39638b		c0 00 02	cpy #$0200	                CPY #512
.39638e		d0 f3		bne $396383	                BNE read_loop
.396390		ea		nop		                NOP                             ; Wait about 500ns
.396391		ea		nop		                NOP
.396392		ea		nop		                NOP
.396393		ea		nop		                NOP
.396394		20 0d 62	jsr $39620d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396397		90 1c		bcc $3963b5	                BCC ret_failure                 ; If an error occurred, return it
.396399		ea		nop		                NOP                             ; Wait about 500ns
.39639a		ea		nop		                NOP
.39639b		ea		nop		                NOP
.39639c		ea		nop		                NOP
.39639d		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.3963a1		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.3963a4		d0 0f		bne $3963b5	                BNE ret_failure                 ; If error: return failure
.3963a6						ret_success
.3963a6		e2 20		sep #$20	                SEP #$20        ; set A short
.3963a8		a9 00		lda #$00	                LDA #0
.3963aa		85 00		sta $0320	                STA BIOS_STATUS
.3963ac		8d 06 03	sta $0306	                STA @w FDC_ST0
.3963af		28		plp		                PLP                             ; Return success
.3963b0		2b		pld		                PLD
.3963b1		ab		plb		                PLB
.3963b2		7a		ply		                PLY
.3963b3		38		sec		                SEC
.3963b4		6b		rtl		                RTL
.3963b5		ea		nop		ret_failure     NOP                             ; Wait about 500ns
.3963b6		ea		nop		                NOP
.3963b7		ea		nop		                NOP
.3963b8		ea		nop		                NOP
.3963b9		e2 20		sep #$20	                SEP #$20        ; set A short
.3963bb		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.3963bf		80 08		bra $3963c9	                BRA save_error
.3963c1		ea		nop		                NOP
.3963c2		ea		nop		                NOP
.3963c3		ea		nop		                NOP
.3963c4		ea		nop		                NOP
.3963c5		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.3963c9		8d 06 03	sta $0306	save_error      STA @w FDC_ST0
.3963cc		a9 83		lda #$83	                LDA #BIOS_ERR_WRITE
.3963ce		85 00		sta $0320	                STA BIOS_STATUS
.3963d0		28		plp		                PLP
.3963d1		2b		pld		                PLD
.3963d2		ab		plb		                PLB
.3963d3		7a		ply		                PLY
.3963d4		18		clc		                CLC
.3963d5		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/Ethernet_Init_library.asm

.3963d6						ip_info
>3963d6		c0 a8 01 7a			        .byte   192, 168, 1, 122
>3963da		ff ff ff 00			        .byte   255,255,255,0
>3963de		c0 a8 01 01			        .byte   192,168,1,1
>3963e2		00 00				HAS_ETHERNET    .word   0
.3963e4						SIMPLE_INIT_ETHERNET_CTRL
.3963e4		af e2 63 39	lda $3963e2	        lda     HAS_ETHERNET
.3963e8		1a		inc a		        inc     a
.3963e9		8f e2 63 39	sta $3963e2	        sta     HAS_ETHERNET
.3963ed		6b		rtl		        rtl
.3963ee		08		php		        php
.3963ef		e2 30		sep #$30	        sep     #$30
.3963f1		af 80 e8 af	lda $afe880	        lda     GABE_MSTR_CTRL
.3963f5		09 01		ora #$01	        ora     #GABE_CTRL_PWR_LED
.3963f7		8f 80 e8 af	sta $afe880	        sta     GABE_MSTR_CTRL
.3963fb		c2 30		rep #$30	        rep     #$30
.3963fd		8b		phb		        phb
.3963fe		4b		phk		        phk
.3963ff		ab		plb		        plb
.396400		a0 d6 63	ldy #$63d6	        ldy     #<>ip_info
.396403		22 00 80 39	jsl $398000	        jsl     kernel.net.user.init
.396407		ab		plb		        plb
.396408		b0 5c		bcs $396466	        bcs     _done
.39640a		e2 30		sep #$30	        sep     #$30
.39640c		af 80 e8 af	lda $afe880	        lda     GABE_MSTR_CTRL
.396410		29 fe		and #$fe	        and     #~GABE_CTRL_PWR_LED
.396412		8f 80 e8 af	sta $afe880	        sta     GABE_MSTR_CTRL
.396416		c2 30		rep #$30	        rep     #$30
.396418		3b		tsc		        tsc
.396419		38		sec		        sec
.39641a		e9 10 00	sbc #$0010	        sbc     #kernel.net.user.udp_info.size
.39641d		1b		tcs		        tcs
.39641e		1a		inc a		        inc     a
.39641f		aa		tax		        tax
.396420		a9 00 a1	lda #$a100	        lda     #$a100
.396423		95 08		sta $0328,x	        sta     kernel.net.user.udp_info.buffer+0,d,x
.396425		a9 af 00	lda #$00af	        lda     #$af
.396428		95 0a		sta $032a,x	        sta     kernel.net.user.udp_info.buffer+2,d,x
.39642a		a9 05 00	lda #$0005	        lda     #5
.39642d		95 0c		sta $032c,x	        sta     kernel.net.user.udp_info.buflen,d,x
.39642f		af 68 64 39	lda $396468	        lda     _ip+0
.396433		95 02		sta $0322,x	        sta     kernel.net.user.udp_info.remote_ip+0,d,x
.396435		af 6a 64 39	lda $39646a	        lda     _ip+2
.396439		95 04		sta $0324,x	        sta     kernel.net.user.udp_info.remote_ip+2,d,x
.39643b		af 6c 64 39	lda $39646c	        lda     _port
.39643f		95 00		sta $0320,x	        sta     kernel.net.user.udp_info.local_port,d,x
.396441		95 06		sta $0326,x	        sta     kernel.net.user.udp_info.remote_port,d,x
.396443		a9 06 00	lda #$0006	        lda     #6
.396446		95 0c		sta $032c,x	        sta     kernel.net.user.udp_info.buflen,d,x
.396448		22 06 80 39	jsl $398006	_retry  jsl     kernel.net.user.udp_send
.39644c		b0 fa		bcs $396448	        bcs     _retry
.39644e						_loop
.39644e		a9 14 00	lda #$0014	        lda     #20
.396451		95 0c		sta $032c,x	        sta     kernel.net.user.udp_info.buflen,d,x
.396453		22 0c 80 39	jsl $39800c	        jsl     kernel.net.user.udp_recv
.396457		b5 0e		lda $032e,x	        lda     kernel.net.user.udp_info.copied,d,x
.396459		f0 f3		beq $39644e	        beq     _loop
.39645b		b5 0e		lda $032e,x	        lda     kernel.net.user.udp_info.copied,d,x
.39645d		95 0c		sta $032c,x	        sta     kernel.net.user.udp_info.buflen,d,x
.39645f		22 06 80 39	jsl $398006	        jsl     kernel.net.user.udp_send
.396463		4c 4e 64	jmp $39644e	        jmp     _loop
.396466		28		plp		_done   plp
.396467		6b		rtl		        rtl
.396468						_ip
>396468		c0 a8 01 05			        .byte   192, 168, 1, 5
>39646c		39 30				_port   .word   12345
.39646e						WaitforittobeReady:
.39646e		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.396472		29 01 00	and #$0001	                AND #$0001
.396475		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.396478		d0 f4		bne $39646e	                BNE WaitforittobeReady
.39647a		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.39647e		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.396482		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.396486		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.39648a		a9 00 00	lda #$0000	                LDA #$0000
.39648d		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.396491		a9 00 70	lda #$7000	                LDA #$7000
.396494		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.396498		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.39649b		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.39649f		a9 0b 00	lda #$000b	                LDA #$000B
.3964a2		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.3964a6		a9 00 00	lda #$0000	                LDA #$0000
.3964a9		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.3964ad		20 e1 64	jsr $3964e1	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.3964b0		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.3964b3		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.3964b7		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.3964ba		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.3964be		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.3964c1		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.3964c5		20 e1 64	jsr $3964e1	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.3964c8		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.3964cb		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.3964cf		a9 0c 00	lda #$000c	                LDA #$000C
.3964d2		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.3964d6		a9 04 00	lda #$0004	                LDA #$0004
.3964d9		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.3964dd		20 e1 64	jsr $3964e1	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.3964e0		6b		rtl		                RTL
.3964e1						MAC_ACCESS_WAIT_FOR_COMPLETION
.3964e1		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.3964e4		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.3964e8						WaitForCompletion:
.3964e8		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.3964ec		29 00 80	and #$8000	                AND #$8000
.3964ef		c9 00 80	cmp #$8000	                CMP #$8000
.3964f2		f0 f4		beq $3964e8	                BEQ WaitForCompletion
.3964f4		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/EXP-C200_EVID_Library.asm

=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.3964f5						INIT_EVID_VID_MODE
.3964f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3964f7		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable     ; 0 - 80x60, 1- 100x75
.3964f9		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.3964fd		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable    ; Enable the Border
.3964ff		8f 04 1e ae	sta $ae1e04	                STA @l EVID_BORDER_CTRL_REG
.396503		a9 08		lda #$08	                LDA #8                          ; Set the border to the standard 8 pixels
.396505		8f 08 1e ae	sta $ae1e08	                STA @l EVID_BORDER_X_SIZE       ; Let's use maximum space
.396509		8f 09 1e ae	sta $ae1e09	                STA @l EVID_BORDER_Y_SIZE
.39650d		a9 20		lda #$20	                LDA #$20
.39650f		8f 07 1e ae	sta $ae1e07	                STA @l EVID_BORDER_COLOR_R      ; R
.396513		a9 00		lda #$00	                LDA #$00
.396515		8f 06 1e ae	sta $ae1e06	                STA @l EVID_BORDER_COLOR_G      ; G
.396519		a9 20		lda #$20	                LDA #$20
.39651b		8f 05 1e ae	sta $ae1e05	                STA @l EVID_BORDER_COLOR_B      ; B
.39651f		22 21 66 39	jsl $396621	                JSL INIT_EVID_LUT
.396523		22 0a 66 39	jsl $39660a	                JSL INIT_EVID_FONTSET
.396527		22 45 66 39	jsl $396645	                JSL INIT_EVID_CURSOR
.39652b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39652d		a9 62 00	lda #$0062	                LDA #(100-2)
.396530		8f 63 00 00	sta $000063	                STA @l EVID_COLS_VISIBLE
.396534		a9 49 00	lda #$0049	                LDA #(75-2)
.396537		8f 67 00 00	sta $000067	                STA @l EVID_LINES_VISIBLE
.39653b		a9 64 00	lda #$0064	                LDA #100
.39653e		8f 65 00 00	sta $000065	                STA @l EVID_COLS_PER_LINE
.396542		a9 4b 00	lda #$004b	                LDA #75
.396545		8f 69 00 00	sta $000069	                STA @l EVID_LINES_MAX
.396549		a9 70 00	lda #$0070	                LDA #$70                        ; Set the default text color to light gray on dark gray
.39654c		8f 72 00 00	sta $000072	                STA @l EVID_CURCOLOR
.396550		c2 30		rep #$30	                REP #$30        ; set A&X long
.396552		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM            ; store the initial screen buffer location
.396555		8f 60 00 00	sta $000060	                STA @l EVID_SCREENBEGIN
.396559		8f 6b 00 00	sta $00006b	                STA @l EVID_CURSORPOS
.39655d		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM           ; Set the initial COLOR cursor position
.396560		8d 76 00	sta $0076	                STA EVID_COLORPOS
.396563		e2 20		sep #$20	                SEP #$20        ; set A short
.396565		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.396567		8f 62 00 00	sta $000062	                STA @l EVID_SCREENBEGIN + 2
.39656b		8f 6d 00 00	sta $00006d	                STA @l EVID_CURSORPOS+2
.39656f		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM            ; Set the initial COLOR cursor position
.396571		8f 78 00 00	sta $000078	                STA @l EVID_COLORPOS + 2
.396575		6b		rtl		                RTL
>396576		1b 5b 31 6d 1b 5b 33 31		EVID_DEV_RDY0   .text $1B, "[1m", $1B, "[31m", $0B, $0C, $1B, "[35m", $0B, $0C, $1B, "[33m", $0B, $0C, $1B
>39657e		6d 0b 0c 1b 5b 33 35 6d 0b 0c 1b 5b 33 33 6d 0b
>39658e		0c 1b
>396590		5b 33 32 6d 0b 0c 1b 5b		                .null "[32m", $0B, $0C, $1B, "[34m", $0B, $0C, $1B, "[0m", $20, "C256 Foenix EXP-C200-EVID", $0D
>396598		33 34 6d 0b 0c 1b 5b 30 6d 20 43 32 35 36 20 46
>3965a8		6f 65 6e 69 78 20 45 58 50 2d 43 32 30 30 2d 45
>3965b8		56 49 44 0d 00
>3965bd		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1   .null "Your Device is Ready..."
>3965c5		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
.3965d5						EVID_GREET
.3965d5		48		pha		                PHA
.3965d6		da		phx		                PHX
.3965d7		08		php		                PHP
.3965d8		e2 20		sep #$20	                SEP #$20        ; set A short
.3965da		af 7d 00 00	lda $00007d	                LDA @l EVID_PRESENT             ; Check if the EVID screen is present
.3965de		f0 26		beq $396606	                BEQ done                        ; If not, skip this routine
.3965e0		a9 04		lda #$04	                LDA #CHAN_EVID                  ; Switch to the EVID screen
.3965e2		22 3c 10 00	jsl $00103c	                JSL SETOUT
.3965e6		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN                   ; Clear the screen
.3965ea		c2 10		rep #$10	                REP #$10        ; set X long
.3965ec		8b		phb		                PHB                             ; Print the messages
.3965ed		a9 39		lda #$39	                LDA #`EVID_DEV_RDY0
.3965ef		48		pha		                PHA
.3965f0		ab		plb		                PLB
.3965f1		a2 76 65	ldx #$6576	                LDX #<>EVID_DEV_RDY0
.3965f4		22 e0 06 39	jsl $3906e0	                JSL IPRINT
.3965f8		a2 bd 65	ldx #$65bd	                LDX #<>EVID_DEV_RDY1
.3965fb		22 e0 06 39	jsl $3906e0	                JSL IPRINT
.3965ff		ab		plb		                PLB
.396600		a9 00		lda #$00	                LDA #CHAN_CONSOLE               ; Go back to the main console
.396602		22 3c 10 00	jsl $00103c	                JSL SETOUT
.396606		28		plp		done            PLP
.396607		fa		plx		                PLX
.396608		68		pla		                PLA
.396609		6b		rtl		                RTL
.39660a						INIT_EVID_FONTSET
.39660a		e2 20		sep #$20	                SEP #$20        ; set A short
.39660c		c2 10		rep #$10	                REP #$10        ; set X long
.39660e		a2 00 00	ldx #$0000	                LDX #$0000
.396611						initFontsetbranch0
.396611		bf 00 00 3f	lda $3f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.396615		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X   ; Vicky FONT RAM Bank
.396619		e8		inx		                INX
.39661a		e0 00 08	cpx #$0800	                CPX #$0800
.39661d		d0 f2		bne $396611	                BNE initFontsetbranch0
.39661f		ea		nop		                NOP
.396620		6b		rtl		                RTL
.396621						INIT_EVID_LUT
.396621		e2 20		sep #$20	                SEP #$20        ; set A short
.396623		e2 10		sep #$10	                SEP #$10        ; set X short
.396625		a2 00		ldx #$00	                LDX	#$00
.396627		bf d4 89 39	lda $3989d4,x	lutinitloop0	LDA @lfg_color_lut,x    ; get Local Data c64_character_Color_LUT_4_Txt
.39662b		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	    ; Write in LUT Memory
.39662f		e8		inx		                inx
.396630		e0 40		cpx #$40	                cpx #$40
.396632		d0 f3		bne $396627	                bne lutinitloop0
.396634		a2 00		ldx #$00	                LDX	#$00
.396636		bf 14 8a 39	lda $398a14,x	lutinitloop1	LDA @lbg_color_lut,x    ; get Local Data
.39663a		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	    ; Write in LUT Memory
.39663e		e8		inx		                INX
.39663f		e0 40		cpx #$40	                CPX #$40
.396641		d0 f3		bne $396636	                bne lutinitloop1
.396643		ea		nop		                NOP
.396644		6b		rtl		                RTL
.396645						INIT_EVID_CURSOR
.396645		08		php		                PHP
.396646		e2 20		sep #$20	                SEP #$20        ; set A short
.396648		a9 b1		lda #$b1	                LDA #$B1                                            ; The Cursor Character will be a Fully Filled Block
.39664a		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.39664e		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0) ; Set Cursor Enable And Flash Rate @1Hz
.396650		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG
.396654		c2 30		rep #$30	                REP #$30        ; set A&X long
.396656		a9 00 00	lda #$0000	                LDA #$0000;
.396659		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L   ; Set the X to Position 1
.39665d		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L   ; Set the Y to Position 6 (Below)
.396661		28		plp		                PLP
.396662		6b		rtl		                RTL
.396663						INIT_EVID_CLRSCREEN
.396663		08		php		                PHP
.396664		e2 20		sep #$20	                SEP #$20        ; set A short
.396666		c2 10		rep #$10	                REP #$10        ; set X long
.396668		a2 00 00	ldx #$0000	                LDX #$0000		        ; Only Use One Pointer
.39666b		a9 20		lda #$20	                LDA #$20		        ; Fill the Entire Screen with Space
.39666d		9f 00 20 ae	sta $ae2000,x	iclearloop0	    STA @l EVID_TEXT_MEM,X
.396671		e8		inx		                inx
.396672		e0 00 20	cpx #$2000	                cpx #$2000
.396675		d0 f6		bne $39666d	                bne iclearloop0
.396677		a2 00 00	ldx #$0000	                LDX	#$0000		        ; Only Use One Pointer
.39667a		a9 f0		lda #$f0	                LDA #$F0		        ; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.39667c		9f 00 40 ae	sta $ae4000,x	iclearloop1	    STA @l EVID_COLOR_MEM,X
.396680		e8		inx		                inx
.396681		e0 00 20	cpx #$2000	                cpx #$2000
.396684		d0 f6		bne $39667c	                bne iclearloop1
.396686		28		plp		                PLP
.396687		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ansi_screens.asm

.0000						S_ANSI_VARS
>0000						SCREENBEGIN         .long ?     ; Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>0003						COLS_VISIBLE        .word ?     ; Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>0005						COLS_PER_LINE       .word ?     ; Columns in memory per screen line. A virtual line can be this long. Default=128
>0007						LINES_VISIBLE       .word ?     ; The number of rows visible on the screen. Default=25
>0009						LINES_MAX           .word ?     ; The number of rows in memory for the screen. Default=64
>000b						CURSORPOS           .long ?     ; The next character written to the screen will be written in this location.
>000e						CURSORX             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0010						CURSORY             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0012						CURCOLOR            .byte ?     ; Color of next character to be printed to the screen.
>0013						COLORPOS            .long ?     ; Address of cursor's position in the color matrix
>0016						COLORBEGIN          .long ?     ; Address of the first byte of the color matrix for this screen
>0019						TMPPTR1             .dword ?    ; Temporary pointer
>001d						PRESENT             .byte ?     ; Screen is present on the machine (EVID only)
>001e						STATE               .byte ?     ; State of the escape code parser
>001f						CONTROL             .byte ?     ; Control bit
>0020						ARGC                .byte ?     ; The number of arguments provided by the escape sequence (max 2)
>0021						ARG0                .byte ?     ; First ANSI code argument
>0022						ARG1                .byte ?     ; Second ANSI code argument
=0						ST_INIT = 0             ; Starting state for the ANSI code parser. Most characters just print
=1						ST_ESCAPE = 1           ; ESC has been seen
=2						ST_CSI = 2              ; Full CSI has been seen "ESC ["
=2						ANSI_MAX_ARG = 2        ; We'll limit ourselves to two arguments
=$70						ANSI_DEF_COLOR = $70    ; Default color (dim white on dim black)
=$80						CONTROL_INVERT = $80    ; Control bit: Colors are inverted
=$40						CONTROL_BOLD = $40      ; Control bit: Colors should be intense
.396688						ANSI_INIT
.396688		da		phx		                    PHX
.396689		5a		phy		                    PHY
.39668a		8b		phb		                    PHB
.39668b		0b		phd		                    PHD
.39668c		08		php		                    PHP
.39668d		c2 30		rep #$30	                REP #$30        ; set A&X long
.39668f		a0 00 00	ldy #$0000	                    LDY #0
.396692		22 3e 67 39	jsl $39673e	                    JSL INIT_SCREEN_Y               ; Set up the main screen
.396696		e2 20		sep #$20	                SEP #$20        ; set A short
.396698		af 87 e8 af	lda $afe887	                    LDA @l GABE_SYS_STAT            ; Let's check the Presence of an Expansion Card here
.39669c		29 10		and #$10	                    AND #GABE_SYS_STAT_EXP          ; When there is a Card the Value is 1
.39669e		c9 10		cmp #$10	                    CMP #GABE_SYS_STAT_EXP
.3966a0		d0 1d		bne $3966bf	                    BNE no_evid
.3966a2		c2 20		rep #$20	                REP #$20        ; set A long
.3966a4		af 12 00 ae	lda $ae0012	                    LDA @l ESID_ID_CARD_ID_Lo       ; Load the Card ID and check for C100 or C200
.3966a8		c9 c8 00	cmp #$00c8	                    CMP #$00C8                      ; Is it the EVID card?
.3966ab		d0 12		bne $3966bf	                    BNE no_evid                     ; No: mark the EVID screen as not present
.3966ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3966af		a9 01		lda #$01	                    LDA #1                          ; Otherwise: Mark that there is an EVID present
.3966b1		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.3966b5		a0 01 00	ldy #$0001	                    LDY #1
.3966b8		22 3e 67 39	jsl $39673e	                    JSL INIT_SCREEN_Y               ; Initialize the EVID screen variables
.3966bc		80 09		bra $3966c7	                    BRA done
.3966be		00		brk #		                    BRK
.3966bf						no_evid
.3966bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3966c1		a9 00		lda #$00	                    LDA #0                          ; Mark that there is no EVID present
.3966c3		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.3966c7		28		plp		done                PLP
.3966c8		2b		pld		                    PLD
.3966c9		ab		plb		                    PLB
.3966ca		7a		ply		                    PLY
.3966cb		fa		plx		                    PLX
.3966cc		6b		rtl		                    RTL
.3966cd						ANSI_INIT_LUTS
.3966cd		08		php		                    PHP
.3966ce		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3966d0		a2 00		ldx #$00	                    LDX #0
.3966d2		bf fe 66 39	lda $3966fe,x	vicky_loop          LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.3966d6		9f 40 1f af	sta $af1f40,x	                    STA @l FG_CHAR_LUT_PTR,X        ; Set the corresponding foreground color component on Vicky
.3966da		9f 80 1f af	sta $af1f80,x	                    STA @l BG_CHAR_LUT_PTR,X        ; Set the corresponding background color component on Vicky
.3966de		e8		inx		                    INX
.3966df		e0 40		cpx #$40	                    CPX #4*16
.3966e1		d0 ef		bne $3966d2	                    BNE vicky_loop
.3966e3		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Check to see if EVID is present
.3966e7		f0 13		beq $3966fc	                    BEQ done                        ; If not, we're done
.3966e9		a2 00		ldx #$00	                    LDX #0
.3966eb		bf fe 66 39	lda $3966fe,x	evid_loop           LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.3966ef		9f 00 1b ae	sta $ae1b00,x	                    STA @l EVID_FG_LUT,X            ; Set the corresponding foreground color component on the EVID card
.3966f3		9f 40 1b ae	sta $ae1b40,x	                    STA @l EVID_BG_LUT,X            ; Set the corresponding background color component on the EVID card
.3966f7		e8		inx		                    INX
.3966f8		e0 40		cpx #$40	                    CPX #4*16
.3966fa		d0 ef		bne $3966eb	                    BNE evid_loop
.3966fc		28		plp		done                PLP
.3966fd		6b		rtl		                    RTL
.3966fe						ANSI_TEXT_LUT
>3966fe		00 00 00 00			                    .byte 0, 0, 0, 0
>396702		00 00 80 00			                    .byte 0, 0, 128, 0
>396706		00 80 00 00			                    .byte 0, 128, 0, 0
>39670a		00 80 80 00			                    .byte 0, 128, 128, 0
>39670e		80 00 00 00			                    .byte 128, 0, 0, 0
>396712		80 00 80 00			                    .byte 128, 0, 128, 0
>396716		80 80 00 00			                    .byte 128, 128, 0, 0
>39671a		c0 c0 c0 00			                    .byte 192, 192, 192, 0
>39671e		80 80 80 00			                    .byte 128, 128, 128, 0
>396722		00 00 ff 00			                    .byte 0, 0, 255, 0
>396726		00 ff 00 00			                    .byte 0, 255, 0, 0
>39672a		00 ff ff 00			                    .byte 0, 255, 255, 0
>39672e		ff 00 00 00			                    .byte 255, 0, 0, 0
>396732		00 7f fc 00			                    .byte 0, 127, 252, 0
>396736		ff ff 00 00			                    .byte 255, 255, 0, 0
>39673a		ff ff ff 00			                    .byte 255, 255, 255, 0
.39673e						INIT_SCREEN_Y
.39673e		c2 30		rep #$30	                REP #$30        ; set A&X long
.396740		c0 00 00	cpy #$0000	                    CPY #0
.396743		f0 06		beq $39674b	                    BEQ setdp_0
.396745		a9 60 00	lda #$0060	setdp_1             LDA #<>EVID_SCREENBEGIN         ; Set DP to the EVID variable block
.396748		5b		tcd		                    TCD
.396749		80 04		bra $39674f	                    BRA set_addresses
.39674b		a9 0c 00	lda #$000c	setdp_0             LDA #<>SCREENBEGIN              ; Set DP to the main screen variable block
.39674e		5b		tcd		                    TCD
.39674f		98		tya		set_addresses       TYA                             ; Compute offset to screen Y's addresses
.396750		0a		asl a		                    ASL A
.396751		0a		asl a		                    ASL A
.396752		aa		tax		                    TAX
.396753		bf 8e 67 39	lda $39678e,x	                    LDA @l text_address,X
.396757		85 00		sta $0320	                    STA #S_ANSI_VARS.SCREENBEGIN,D  ; Set the address of the text matrix
.396759		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D    ; And the cursor pointer
.39675b		e2 20		sep #$20	                SEP #$20        ; set A short
.39675d		bf 90 67 39	lda $396790,x	                    LDA @l text_address+2,X
.396761		85 02		sta $0322	                    STA #S_ANSI_VARS.SCREENBEGIN+2,D
.396763		85 0d		sta $032d	                    STA #S_ANSI_VARS.CURSORPOS+2,D
.396765		c2 20		rep #$20	                REP #$20        ; set A long
.396767		bf 96 67 39	lda $396796,x	                    LDA @l color_address,X
.39676b		85 16		sta $0336	                    STA #S_ANSI_VARS.COLORBEGIN,D   ; Set the address of the color matrix
.39676d		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D     ; And the color cursor pointer
.39676f		e2 20		sep #$20	                SEP #$20        ; set A short
.396771		bf 98 67 39	lda $396798,x	                    LDA @l color_address+2,X
.396775		85 18		sta $0338	                    STA #S_ANSI_VARS.COLORBEGIN+2,D
.396777		85 15		sta $0335	                    STA #S_ANSI_VARS.COLORPOS+2,D
.396779		c2 20		rep #$20	                REP #$20        ; set A long
.39677b		64 0e		stz $032e	                    STZ #S_ANSI_VARS.CURSORX,D      ; Set the cursor position to 0, 0
.39677d		64 10		stz $0330	                    STZ #S_ANSI_VARS.CURSORY,D
.39677f		e2 20		sep #$20	                SEP #$20        ; set A short
.396781		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D        ; Set the state of the ANSI parser to S0
.396783		64 1f		stz $033f	                    STZ #S_ANSI_VARS.CONTROL,D      ; Set the control bits to 0 (default)
.396785		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.396787		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D     ; Set the current color to the default
.396789		22 d7 67 39	jsl $3967d7	                    JSL ANSI_SETSIZE_Y              ; Set the size variables for the main screen
.39678d		6b		rtl		                    RTL
>39678e		00 a0 af 00 00 20 ae 00		text_address        .dword CS_TEXT_MEM_PTR, EVID_TEXT_MEM
>396796		00 c0 af 00 00 40 ae 00		color_address       .dword CS_COLOR_MEM_PTR, EVID_COLOR_MEM
.39679e						ANSI_SETSIZES
.39679e		48		pha		                    PHA
.39679f		da		phx		                    PHX
.3967a0		5a		phy		                    PHY
.3967a1		0b		phd		                    PHD
.3967a2		08		php		                    PHP
.3967a3		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3967a5		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Save the current output channel
.3967a9		48		pha		                    PHA
.3967aa		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; Set the sizes for the main screen
.3967ac		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.3967b0		22 9a 68 39	jsl $39689a	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.3967b4		a0 00		ldy #$00	                    LDY #0
.3967b6		22 d7 67 39	jsl $3967d7	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.3967ba		a9 04		lda #$04	                    LDA #CHAN_EVID                  ; Set the sizes for the EVID screen
.3967bc		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.3967c0		22 9a 68 39	jsl $39689a	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.3967c4		b0 06		bcs $3967cc	                    BCS done                        ; Not present, just return
.3967c6		a0 01		ldy #$01	                    LDY #1
.3967c8		22 d7 67 39	jsl $3967d7	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.3967cc		68		pla		done                PLA
.3967cd		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT                 ; Restore the output channel
.3967d1		28		plp		                    PLP
.3967d2		2b		pld		                    PLD
.3967d3		7a		ply		                    PLY
.3967d4		fa		plx		                    PLX
.3967d5		68		pla		                    PLA
.3967d6		6b		rtl		                    RTL
.3967d7						ANSI_SETSIZE_Y
.3967d7		08		php		                    PHP
.3967d8		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3967da		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.3967dc		f0 06		beq $3967e4	                    BEQ vky_master                      ; Yes: get the resolution from Vicky
.3967de		af 01 1e ae	lda $ae1e01	                    LDA @l EVID_MSTR_CTRL_REG_H         ; No: get the resolution from EVID
.3967e2		80 04		bra $3967e8	                    BRA resolution
.3967e4		af 01 00 af	lda $af0001	vky_master          LDA @l MASTER_CTRL_REG_H
.3967e8		29 03		and #$03	resolution          AND #$03                            ; Mask off the resolution bits
.3967ea		0a		asl a		                    ASL A
.3967eb		aa		tax		                    TAX                                 ; Index to the col/line count in X
.3967ec		c2 20		rep #$20	                REP #$20        ; set A long
.3967ee		bf 8a 68 39	lda $39688a,x	                    LDA @l cols_by_res,X                ; Get the number of columns
.3967f2		85 05		sta $0325	                    STA #S_ANSI_VARS.COLS_PER_LINE,D    ; This is how many columns there are per line in the memory
.3967f4		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D     ; This is how many would be visible with no border
.3967f6		bf 92 68 39	lda $396892,x	                    LDA @l lines_by_res,X               ; Get the number of lines
.3967fa		85 09		sta $0329	                    STA #S_ANSI_VARS.LINES_MAX,D        ; This is the total number of lines in memory
.3967fc		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D    ; This is how many lines would be visible with no border
.3967fe		e2 20		sep #$20	                SEP #$20        ; set A short
.396800		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.396802		f0 06		beq $39680a	                    BEQ vky_border                      ; Yes: get the border from Vicky
.396804		af 04 1e ae	lda $ae1e04	                    LDA @l EVID_BORDER_CTRL_REG         ; No: Check EVID to see if we have a border
.396808		80 04		bra $39680e	                    BRA border
.39680a		af 04 00 af	lda $af0004	vky_border          LDA @l BORDER_CTRL_REG              ; Check Vicky to see if we have a border
.39680e		89 01		bit #$01	border              BIT #Border_Ctrl_Enable
.396810		f0 76		beq $396888	                    BEQ done                            ; No border... the sizes are correct now
.396812		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.396814		f0 06		beq $39681c	                    BEQ vky_border_size                 ; Yes: get the border size from Vicky
.396816		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the horizontal border width from EVID
.39681a		80 04		bra $396820	                    BRA get_border_x_size
.39681c		af 08 00 af	lda $af0008	vky_border_size     LDA @l BORDER_X_SIZE                ; Get the horizontal border width from Vicky
.396820		29 3f		and #$3f	get_border_x_size   AND #$3F
.396822		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.396824		d0 04		bne $39682a	                    BNE frac_width
.396826		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.396827		4a		lsr a		                    LSR A
.396828		80 03		bra $39682d	                    BRA store_width
.39682a		4a		lsr a		frac_width          LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.39682b		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.39682c		1a		inc a		                    INC A
.39682d		85 19		sta $0339	store_width         STA #S_ANSI_VARS.TMPPTR1,D
.39682f		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.396831		e2 20		sep #$20	                SEP #$20        ; set A short
.396833		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.396835		f0 0c		beq $396843	                    BEQ adjust_width                    ; Yes: skip the pixel doubling check
.396837		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check Vucky if we're pixel doubling
.39683b		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.39683d		f0 04		beq $396843	                    BEQ adjust_width                    ; No... just adjust the width of the screen
.39683f		c2 20		rep #$20	                REP #$20        ; set A long
.396841		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.396843						adjust_width
.396843		c2 20		rep #$20	                REP #$20        ; set A long
.396845		38		sec		                    SEC
.396846		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.396848		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.39684a		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D
.39684c		e2 20		sep #$20	                SEP #$20        ; set A short
.39684e		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.396850		f0 06		beq $396858	                    BEQ vky_border_y_size               ; Yes: get the border Y size from Vicky
.396852		af 09 1e ae	lda $ae1e09	                    LDA @l EVID_BORDER_Y_SIZE           ; No: Get the vertical border width from EVID
.396856		80 04		bra $39685c	                    BRA get_border_y_size
.396858		af 09 00 af	lda $af0009	vky_border_y_size   LDA @l BORDER_Y_SIZE                ; Get the vertical border width from Vicky
.39685c		29 3f		and #$3f	get_border_y_size   AND #$3F
.39685e		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.396860		d0 04		bne $396866	                    BNE frac_height
.396862		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.396863		4a		lsr a		                    LSR A
.396864		80 03		bra $396869	                    BRA store_height
.396866		4a		lsr a		frac_height         LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.396867		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.396868		1a		inc a		                    INC A
.396869		85 19		sta $0339	store_height        STA #S_ANSI_VARS.TMPPTR1,D
.39686b		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.39686d		e2 20		sep #$20	                SEP #$20        ; set A short
.39686f		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.396871		f0 0c		beq $39687f	                    BEQ adjust_height                   ; Yes: skip the pixel doubling check
.396873		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check if we're pixel doubling
.396877		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.396879		f0 04		beq $39687f	                    BEQ adjust_height                   ; No... just adjust the height of the screen
.39687b		c2 20		rep #$20	                REP #$20        ; set A long
.39687d		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.39687f						adjust_height
.39687f		c2 20		rep #$20	                REP #$20        ; set A long
.396881		38		sec		                    SEC
.396882		a5 09		lda $0329	                    LDA #S_ANSI_VARS.LINES_MAX,D
.396884		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.396886		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D
.396888		28		plp		done                PLP
.396889		6b		rtl		                    RTL
>39688a		50 00 64 00 28 00 32 00		cols_by_res         .word 80,100,40,50
>396892		3c 00 4b 00 1e 00 25 00		lines_by_res        .word 60,75,30,37
.39689a						ANSI_SETDEVICE
.39689a		48		pha		                    PHA
.39689b		08		php		                    PHP
.39689c		e2 20		sep #$20	                SEP #$20        ; set A short
.39689e		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check the current output channel
.3968a2		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE               ; Is it the console?
.3968a4		f0 08		beq $3968ae	                    BEQ console                     ; Yes: point to the console
.3968a6		c9 04		cmp #$04	                    CMP #CHAN_EVID                  ; Is it the EVID?
.3968a8		f0 0b		beq $3968b5	                    BEQ evid                        ; Check to see if the EVID is present
.3968aa		28		plp		bad_device          PLP
.3968ab		68		pla		                    PLA
.3968ac		38		sec		                    SEC
.3968ad		6b		rtl		                    RTL
.3968ae						console
.3968ae		c2 20		rep #$20	                REP #$20        ; set A long
.3968b0		a9 0c 00	lda #$000c	                    LDA #<>SCREENBEGIN              ; Point to the the main screen's variables
.3968b3		80 0d		bra $3968c2	                    BRA set_dp
.3968b5						evid
.3968b5		e2 20		sep #$20	                SEP #$20        ; set A short
.3968b7		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Is the EVID present?
.3968bb		f0 ed		beq $3968aa	                    BEQ bad_device                  ; No: return that the device is bad
.3968bd		c2 20		rep #$20	                REP #$20        ; set A long
.3968bf		a9 60 00	lda #$0060	                    LDA #<>EVID_SCREENBEGIN         ; Yes: point to the EVID's variables
.3968c2		5b		tcd		set_dp              TCD
.3968c3		28		plp		                    PLP
.3968c4		68		pla		                    PLA
.3968c5		18		clc		                    CLC
.3968c6		6b		rtl		                    RTL
.3968c7						ANSI_PUTC
.3968c7		da		phx		                    PHX
.3968c8		5a		phy		                    PHY
.3968c9		0b		phd		                    PHD
.3968ca		08		php		                    PHP
.3968cb		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3968cd		22 9a 68 39	jsl $39689a	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.3968d1		90 03		bcc $3968d6	                    BCC get_state               ; If valid, check the current state
.3968d3		82 9d 00	brl $396973	                    BRL done                    ; If invalid, just return
.3968d6		a6 1e		ldx $033e	get_state           LDX #S_ANSI_VARS.STATE,D    ; Get the current state
.3968d8		f0 0c		beq $3968e6	                    BEQ do_st_init              ; Dispatch to the correct code for the state
.3968da		e0 01		cpx #$01	                    CPX #ST_ESCAPE
.3968dc		f0 21		beq $3968ff	                    BEQ do_st_escape
.3968de		e0 02		cpx #$02	                    CPX #ST_CSI
.3968e0		f0 3f		beq $396921	                    BEQ do_st_csi
.3968e2		64 1e		stz $033e	pr_and_reset        STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.3968e4		80 06		bra $3968ec	                    BRA print_raw
.3968e6		c9 1b		cmp #$1b	do_st_init          CMP #CHAR_ESC               ; Is it ESC?
.3968e8		f0 09		beq $3968f3	                    BEQ go_escape               ; Yes, handle the ESC
.3968ea		90 0d		bcc $3968f9	                    BLT do_control              ; If less than, handle as a control code
.3968ec		22 54 6a 39	jsl $396a54	print_raw           JSL ANSI_PUTRAWC            ; Otherwise: Just print the raw character
.3968f0		82 80 00	brl $396973	                    BRL done
.3968f3		a9 01		lda #$01	go_escape           LDA #ST_ESCAPE
.3968f5		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the ESCAPE state
.3968f7		80 7a		bra $396973	                    BRA done
.3968f9		22 0b 6a 39	jsl $396a0b	do_control          JSL ANSI_PR_CONTROL         ; Hand a single byte control code
.3968fd		80 74		bra $396973	                    BRA done
.3968ff		c9 5c		cmp #$5c	do_st_escape        CMP #'\'                    ; Have we gotten 'ESC\' (String terminator)?
.396901		f0 08		beq $39690b	                    BEQ go_init                 ; Yes: go back to the init state (we do nothing with this)
.396903		c9 5f		cmp #$5f	chk_apc             CMP #'_'                    ; Have we gotten 'ESC_' (Application Program Command)?
.396905		d0 0a		bne $396911	                    BNE chk_csi                 ; No: check to see if we have a CSI
.396907		22 00 10 39	jsl $391000	                    JSL SHOW_CREDITS            ; Yes: show the credits
.39690b		a9 00		lda #$00	go_init             LDA #ST_INIT
.39690d		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the INIT state
.39690f		80 62		bra $396973	                    BRA done
.396911		c9 5b		cmp #$5b	chk_csi             CMP #'['                    ; Have we gotten 'ESC['?
.396913		d0 cd		bne $3968e2	                    BNE pr_and_reset            ; No: print this and return to ST_INIT
.396915		64 21		stz $0341	                    STZ #S_ANSI_VARS.ARG0,D     ; Clear the arguments
.396917		64 22		stz $0342	                    STZ #S_ANSI_VARS.ARG1,D
.396919		64 20		stz $0340	                    STZ #S_ANSI_VARS.ARGC,D
.39691b		a9 02		lda #$02	                    LDA #ST_CSI
.39691d		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the CSI state
.39691f		80 52		bra $396973	                    BRA done
.396921		c9 30		cmp #$30	do_st_csi           CMP #'0'                    ; Do we have a digit?
.396923		90 1d		bcc $396942	                    BLT csi_not_digit
.396925		c9 3a		cmp #$3a	                    CMP #'9'+1
.396927		b0 19		bcs $396942	                    BGE csi_not_digit
.396929		38		sec		                    SEC                         ; Have digit... convert to a number
.39692a		e9 30		sbc #$30	                    SBC #'0'
.39692c		48		pha		                    PHA                         ; Save it
.39692d		a6 20		ldx $0340	                    LDX #S_ANSI_VARS.ARGC,D
.39692f		16 21		asl $0341,x	                    ASL #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 2
.396931		b5 21		lda $0341,x	                    LDA #S_ANSI_VARS.ARG0,D,X
.396933		0a		asl a		                    ASL A                       ; A := arg * 4
.396934		0a		asl a		                    ASL A                       ; A := arg * 8
.396935		18		clc		                    CLC
.396936		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10
.396938		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := A
.39693a		18		clc		                    CLC
.39693b		68		pla		                    PLA                         ; Get the digit back
.39693c		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10 + digit
.39693e		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 10 + digit
.396940		80 31		bra $396973	                    BRA done                    ; And we're done with this particular character
.396942		c9 3b		cmp #$3b	csi_not_digit       CMP #';'                    ; Is it an argument separator?
.396944		d0 0e		bne $396954	                    BNE csi_not_sep
.396946		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D     ; Get the argument count
.396948		c9 02		cmp #$02	                    CMP #ANSI_MAX_ARG           ; Are we at the maximum argument count?
.39694a		d0 03		bne $39694f	                    BNE csi_next_arg            ; No: move to the next argument
.39694c		82 93 ff	brl $3968e2	                    BRL pr_and_reset            ; Yes: print and reset state
.39694f		1a		inc a		csi_next_arg        INC A
.396950		85 20		sta $0340	                    STA #S_ANSI_VARS.ARGC,D     ; Set the new argument count
.396952		80 1f		bra $396973	                    BRA done                    ; And we're done with this character
.396954		c9 40		cmp #$40	csi_not_sep         CMP #'@'
.396956		90 0a		bcc $396962	                    BLT csi_not_upper
.396958		c9 5b		cmp #$5b	                    CMP #'Z'+1
.39695a		b0 06		bcs $396962	                    BGE csi_not_upper
.39695c		22 83 69 39	jsl $396983	                    JSL ANSI_ANSI_UPPER         ; Process an ANSI upper case code
.396960		80 11		bra $396973	                    BRA done
.396962		c9 61		cmp #$61	csi_not_upper       CMP #'a'
.396964		90 0a		bcc $396970	                    BLT csi_not_lower
.396966		c9 7b		cmp #$7b	                    CMP #'z'+1
.396968		b0 06		bcs $396970	                    BGE csi_not_lower
.39696a		22 c8 69 39	jsl $3969c8	                    JSL ANSI_ANSI_LOWER         ; Process an ANSI lower case code
.39696e		80 03		bra $396973	                    BRA done
.396970		82 6f ff	brl $3968e2	csi_not_lower       BRL pr_and_reset            ; Invalid sequence: print it and reset
.396973		28		plp		done                PLP
.396974		2b		pld		                    PLD
.396975		7a		ply		                    PLY
.396976		fa		plx		                    PLX
.396977		6b		rtl		                    RTL
.396978						ANSI_INVALID
.396978		08		php		                    PHP
.396979		e2 20		sep #$20	                SEP #$20        ; set A short
.39697b		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.39697d		22 54 6a 39	jsl $396a54	                    JSL ANSI_PUTRAWC            ; Print the character
.396981		28		plp		                    PLP
.396982		6b		rtl		                    RTL
.396983						ANSI_ANSI_UPPER
.396983		08		php		                    PHP
.396984		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396986		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.396988		38		sec		                    SEC
.396989		e9 40		sbc #$40	                    SBC #'@'
.39698b		0a		asl a		                    ASL A
.39698c		aa		tax		                    TAX
.39698d		fc 92 69	jsr ($396992,x)	                    JSR (ansi_table,X)
.396990		28		plp		                    PLP
.396991		6b		rtl		                    RTL
>396992		ec 6c				ansi_table          .word <>ANSI_ICH        ; '@' -- ICH -- Insert Character
>396994		6f 6a				                    .word <>ANSI_CUU        ; 'A' -- CUU -- Cursor Up
>396996		83 6a				                    .word <>ANSI_CUD        ; 'B' -- CUD -- Cursor Down
>396998		97 6a				                    .word <>ANSI_CUF        ; 'C' -- CUF -- Cursor Forward
>39699a		ab 6a				                    .word <>ANSI_CUB        ; 'D' -- CUB -- Cursor Back
>39699c		78 69				                    .word <>ANSI_INVALID    ; 'E' -- CNL -- Cursor Next Line
>39699e		78 69				                    .word <>ANSI_INVALID    ; 'F' -- CPL -- Cursor Previous Line
>3969a0		78 69				                    .word <>ANSI_INVALID    ; 'G' -- CHA -- Cursor Horizontal Absolute
>3969a2		bf 6a				                    .word <>ANSI_CUP        ; 'H' -- CUP -- Cursor Position
>3969a4		78 69				                    .word <>ANSI_INVALID    ; 'I'
>3969a6		3e 6c				                    .word <>ANSI_ED         ; 'J' -- ED -- Erase In Display
>3969a8		9b 6c				                    .word <>ANSI_EL         ; 'K' -- EL -- Erase In Line
>3969aa		78 69				                    .word <>ANSI_INVALID    ; 'L'
>3969ac		78 69				                    .word <>ANSI_INVALID    ; 'M'
>3969ae		78 69				                    .word <>ANSI_INVALID    ; 'N'
>3969b0		78 69				                    .word <>ANSI_INVALID    ; 'O'
>3969b2		30 6d				                    .word <>ANSI_DCH        ; 'P' -- DCH -- Delete Character
>3969b4		78 69				                    .word <>ANSI_INVALID    ; 'Q'
>3969b6		78 69				                    .word <>ANSI_INVALID    ; 'R'
>3969b8		78 69				                    .word <>ANSI_INVALID    ; 'S' -- SU -- Scroll Up
>3969ba		78 69				                    .word <>ANSI_INVALID    ; 'T' -- SD -- Scroll Down
>3969bc		78 69				                    .word <>ANSI_INVALID    ; 'U'
>3969be		78 69				                    .word <>ANSI_INVALID    ; 'V'
>3969c0		78 69				                    .word <>ANSI_INVALID    ; 'W'
>3969c2		78 69				                    .word <>ANSI_INVALID    ; 'X'
>3969c4		78 69				                    .word <>ANSI_INVALID    ; 'Y'
>3969c6		78 69				                    .word <>ANSI_INVALID    ; 'Z'
.3969c8						ANSI_ANSI_LOWER
.3969c8		08		php		                    PHP
.3969c9		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3969cb		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.3969cd		38		sec		                    SEC
.3969ce		e9 61		sbc #$61	                    SBC #'a'
.3969d0		0a		asl a		                    ASL A
.3969d1		aa		tax		                    TAX
.3969d2		fc d7 69	jsr ($3969d7,x)	                    JSR (ansi_table,X)
.3969d5		28		plp		                    PLP
.3969d6		6b		rtl		                    RTL
>3969d7		78 69				ansi_table          .word <>ANSI_INVALID    ; 'a'
>3969d9		78 69				                    .word <>ANSI_INVALID    ; 'b'
>3969db		78 69				                    .word <>ANSI_INVALID    ; 'c'
>3969dd		78 69				                    .word <>ANSI_INVALID    ; 'd'
>3969df		78 69				                    .word <>ANSI_INVALID    ; 'e'
>3969e1		78 69				                    .word <>ANSI_INVALID    ; 'f' -- HVP -- Horizontal Vertical Position
>3969e3		78 69				                    .word <>ANSI_INVALID    ; 'g'
>3969e5		d8 6a				                    .word <>ANSI_SET_MODE   ; 'h'
>3969e7		78 69				                    .word <>ANSI_INVALID    ; 'i'
>3969e9		78 69				                    .word <>ANSI_INVALID    ; 'j'
>3969eb		78 69				                    .word <>ANSI_INVALID    ; 'k'
>3969ed		15 6b				                    .word <>ANSI_RESET_MODE ; 'l'
>3969ef		52 6b				                    .word <>ANSI_SGR        ; 'm' -- SGR -- Select Graphics Rendition
>3969f1		78 69				                    .word <>ANSI_INVALID    ; 'n'
>3969f3		78 69				                    .word <>ANSI_INVALID    ; 'o'
>3969f5		78 69				                    .word <>ANSI_INVALID    ; 'p'
>3969f7		78 69				                    .word <>ANSI_INVALID    ; 'q'
>3969f9		78 69				                    .word <>ANSI_INVALID    ; 'r'
>3969fb		78 69				                    .word <>ANSI_INVALID    ; 's'
>3969fd		78 69				                    .word <>ANSI_INVALID    ; 't'
>3969ff		78 69				                    .word <>ANSI_INVALID    ; 'u'
>396a01		78 69				                    .word <>ANSI_INVALID    ; 'v'
>396a03		78 69				                    .word <>ANSI_INVALID    ; 'w'
>396a05		78 69				                    .word <>ANSI_INVALID    ; 'x'
>396a07		78 69				                    .word <>ANSI_INVALID    ; 'y'
>396a09		78 69				                    .word <>ANSI_INVALID    ; 'z'
.396a0b						ANSI_PR_CONTROL
.396a0b		08		php		                    PHP
.396a0c		e2 20		sep #$20	                SEP #$20        ; set A short
.396a0e		c2 10		rep #$10	                REP #$10        ; set X long
.396a10		c9 0d		cmp #$0d	                    CMP #CHAR_CR                ; Handle carriage return
.396a12		f0 12		beq $396a26	                    BEQ do_cr
.396a14		c9 0a		cmp #$0a	                    CMP #CHAR_LF                ; Handle line feed
.396a16		f0 1a		beq $396a32	                    BEQ do_lf
.396a18		c9 08		cmp #$08	                    CMP #CHAR_BS                ; Handle back space
.396a1a		f0 1c		beq $396a38	                    BEQ do_bs
.396a1c		c9 09		cmp #$09	                    CMP #CHAR_TAB               ; Handle TAB
.396a1e		f0 1e		beq $396a3e	                    BEQ do_tab
.396a20		22 54 6a 39	jsl $396a54	                    JSL ANSI_PUTRAWC            ; Otherwise, just print it raw and wriggling!
.396a24		80 2c		bra $396a52	                    BRA done
.396a26		a2 00 00	ldx #$0000	do_cr               LDX #0                      ; Move to the beginning of the next line
.396a29		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.396a2b		c8		iny		                    INY
.396a2c		22 09 6e 39	jsl $396e09	                    JSL ANSI_LOCATE
.396a30		80 20		bra $396a52	                    BRA done
.396a32		22 e6 6d 39	jsl $396de6	do_lf               JSL ANSI_CSRDOWN            ; Move the cursor down a line
.396a36		80 1a		bra $396a52	                    BRA done
.396a38		22 aa 6d 39	jsl $396daa	do_bs               JSL ANSI_CSRLEFT            ; Move the cursor to the left (TODO: delete to the left?)
.396a3c		80 14		bra $396a52	                    BRA done
.396a3e						do_tab
.396a3e		c2 30		rep #$30	                REP #$30        ; set A&X long
.396a40		a5 0e		lda $032e	                    LDA #S_ANSI_VARS.CURSORX,D  ; Move to the next power 8th column
.396a42		29 f8 ff	and #$fff8	                    AND #$FFF8
.396a45		18		clc		                    CLC
.396a46		69 08 00	adc #$0008	                    ADC #$0008
.396a49		aa		tax		                    TAX
.396a4a		e2 20		sep #$20	                SEP #$20        ; set A short
.396a4c		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.396a4e		22 09 6e 39	jsl $396e09	                    JSL ANSI_LOCATE
.396a52		28		plp		done                PLP
.396a53		6b		rtl		                    RTL
.396a54						ANSI_PUTRAWC
.396a54		da		phx		                    PHX
.396a55		5a		phy		                    PHY
.396a56		0b		phd		                    PHD
.396a57		08		php		                    PHP
.396a58		e2 20		sep #$20	                SEP #$20        ; set A short
.396a5a		22 9a 68 39	jsl $39689a	                    JSL ANSI_SETDEVICE              ; Look at the current output channel and point
.396a5e		b0 0a		bcs $396a6a	                    BCS done                        ; If invalid, just return
.396a60		87 0b		sta [$032b]	                    STA [#S_ANSI_VARS.CURSORPOS,D]  ; Save the character on the screen
.396a62		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Set the color based on CURCOLOR
.396a64		87 13		sta [$0333]	                    STA [#S_ANSI_VARS.COLORPOS,D]
.396a66		22 7f 6d 39	jsl $396d7f	                    JSL ANSI_CSRRIGHT              ; And advance the cursor
.396a6a		28		plp		done                PLP
.396a6b		2b		pld		                    PLD
.396a6c		7a		ply		                    PLY
.396a6d		fa		plx		                    PLX
.396a6e		6b		rtl		                    RTL
.396a6f						ANSI_CUU
.396a6f		08		php		                    PHP
.396a70		e2 20		sep #$20	                SEP #$20        ; set A short
.396a72		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396a74		d0 02		bne $396a78	                    BNE loop                        ; Move so long as not 0
.396a76		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.396a78		48		pha		loop                PHA                             ; Save the count
.396a79		22 c8 6d 39	jsl $396dc8	                    JSL ANSI_CSRUP                  ; Cursor Up
.396a7d		68		pla		                    PLA                             ; Restore the count
.396a7e		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.396a7f		d0 f7		bne $396a78	                    BNE loop
.396a81		28		plp		                    PLP
.396a82		60		rts		                    RTS
.396a83						ANSI_CUD
.396a83		08		php		                    PHP
.396a84		e2 20		sep #$20	                SEP #$20        ; set A short
.396a86		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396a88		d0 02		bne $396a8c	                    BNE loop                        ; Move so long as not 0
.396a8a		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.396a8c		48		pha		loop                PHA                             ; Save the count
.396a8d		22 e6 6d 39	jsl $396de6	                    JSL ANSI_CSRDOWN                ; Cursor Down
.396a91		68		pla		                    PLA                             ; Restore the count
.396a92		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.396a93		d0 f7		bne $396a8c	                    BNE loop
.396a95		28		plp		                    PLP
.396a96		60		rts		                    RTS
.396a97						ANSI_CUF
.396a97		08		php		                    PHP
.396a98		e2 20		sep #$20	                SEP #$20        ; set A short
.396a9a		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396a9c		d0 02		bne $396aa0	                    BNE loop                        ; Move so long as not 0
.396a9e		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.396aa0		48		pha		loop                PHA                             ; Save the count
.396aa1		22 7f 6d 39	jsl $396d7f	                    JSL ANSI_CSRRIGHT               ; Cursor right
.396aa5		68		pla		                    PLA                             ; Restore the count
.396aa6		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.396aa7		d0 f7		bne $396aa0	                    BNE loop
.396aa9		28		plp		                    PLP
.396aaa		60		rts		                    RTS
.396aab						ANSI_CUB
.396aab		08		php		                    PHP
.396aac		e2 20		sep #$20	                SEP #$20        ; set A short
.396aae		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396ab0		d0 02		bne $396ab4	                    BNE loop                        ; Move so long as not 0
.396ab2		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.396ab4		48		pha		loop                PHA                             ; Save the count
.396ab5		22 aa 6d 39	jsl $396daa	                    JSL ANSI_CSRLEFT                ; Cursor left
.396ab9		68		pla		                    PLA                             ; Restore the count
.396aba		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.396abb		d0 f7		bne $396ab4	                    BNE loop
.396abd		28		plp		                    PLP
.396abe		60		rts		                    RTS
.396abf						ANSI_CUP
.396abf		08		php		                    PHP
.396ac0		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396ac2		a6 21		ldx $0341	                    LDX #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396ac4		d0 02		bne $396ac8	                    BNE get_row
.396ac6		a2 01		ldx #$01	                    LDX #1                          ; Default to 1
.396ac8		a4 22		ldy $0342	get_row             LDY #S_ANSI_VARS.ARG1,D         ; Get the second argument
.396aca		d0 02		bne $396ace	                    BNE adjust_coords
.396acc		a0 01		ldy #$01	                    LDY #1                          ; Default to 1
.396ace		ca		dex		adjust_coords       DEX                             ; Translate from base 1 to base 0 coordinates
.396acf		88		dey		                    DEY
.396ad0		c2 30		rep #$30	                REP #$30        ; set A&X long
.396ad2		22 09 6e 39	jsl $396e09	                    JSL ANSI_LOCATE                 ; Set the cursor position
.396ad6		28		plp		                    PLP
.396ad7		60		rts		                    RTS
.396ad8						ANSI_SET_MODE
.396ad8		08		php		                    PHP
.396ad9		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396adb		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396add		c9 19		cmp #$19	                    CMP #25
.396adf		d0 24		bne $396b05	                    BNE chk_break
.396ae1		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.396ae5		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.396ae7		d0 0c		bne $396af5	                    BNE check_evid
.396ae9		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.396aed		09 01		ora #$01	                    ORA #Vky_Cursor_Enable
.396aef		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.396af3		80 1e		bra $396b13	                    BRA done
.396af5		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.396af7		d0 1a		bne $396b13	                    BNE done
.396af9		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.396afd		09 01		ora #$01	                    ORA #EVID_Cursor_Enable
.396aff		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.396b03		80 0e		bra $396b13	                    BRA done
.396b05		c9 1c		cmp #$1c	chk_break           CMP #28
.396b07		d0 0a		bne $396b13	                    BNE done
.396b09		22 73 72 39	jsl $397273	                    JSL KBD_GET_CONTROL
.396b0d		09 80		ora #$80	                    ORA #KBD_CTRL_BREAK
.396b0f		22 80 72 39	jsl $397280	                    JSL KBD_SET_CONTROL
.396b13		28		plp		done                PLP
.396b14		60		rts		                    RTS
.396b15						ANSI_RESET_MODE
.396b15		08		php		                    PHP
.396b16		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396b18		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396b1a		c9 19		cmp #$19	                    CMP #25
.396b1c		d0 24		bne $396b42	                    BNE chk_break
.396b1e		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.396b22		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.396b24		d0 0c		bne $396b32	                    BNE check_evid
.396b26		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.396b2a		29 fe		and #$fe	                    AND #~Vky_Cursor_Enable
.396b2c		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.396b30		80 1e		bra $396b50	                    BRA done
.396b32		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.396b34		d0 1a		bne $396b50	                    BNE done
.396b36		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.396b3a		29 fe		and #$fe	                    AND #~EVID_Cursor_Enable
.396b3c		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.396b40		80 0e		bra $396b50	                    BRA done
.396b42		c9 1c		cmp #$1c	chk_break           CMP #28
.396b44		d0 0a		bne $396b50	                    BNE done
.396b46		22 73 72 39	jsl $397273	                    JSL KBD_GET_CONTROL
.396b4a		29 7f		and #$7f	                    AND #~KBD_CTRL_BREAK
.396b4c		22 80 72 39	jsl $397280	                    JSL KBD_SET_CONTROL
.396b50		28		plp		done                PLP
.396b51		60		rts		                    RTS
.396b52						ANSI_SGR
.396b52		08		php		                    PHP
.396b53		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396b55		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396b57		d0 0d		bne $396b66	                    BNE chk_1
.396b59		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR             ; 0 ==> Return to the default colors
.396b5b		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396b5d		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Switch off inversion
.396b5f		29 3f		and #$3f	                    AND #~(CONTROL_INVERT | CONTROL_BOLD)
.396b61		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.396b63		82 d6 00	brl $396c3c	                    BRL done
.396b66		c9 01		cmp #$01	chk_1               CMP #1
.396b68		d0 0f		bne $396b79	                    BNE chk_2
.396b6a		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Make the current color bold
.396b6c		09 80		ora #$80	                    ORA #$80
.396b6e		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396b70		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be bold
.396b72		09 40		ora #$40	                    ORA #CONTROL_BOLD
.396b74		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.396b76		82 c3 00	brl $396c3c	                    BRL done
.396b79		c9 02		cmp #$02	chk_2               CMP #2
.396b7b		f0 04		beq $396b81	                    BEQ normal_intensity
.396b7d		c9 16		cmp #$16	chk_22              CMP #22
.396b7f		d0 0f		bne $396b90	                    BNE chk_7
.396b81		a5 12		lda $0332	normal_intensity    LDA #S_ANSI_VARS.CURCOLOR,D     ; 2 ==> Set the foreground to normal intensity
.396b83		29 7f		and #$7f	                    AND #~$80
.396b85		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396b87		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be normal
.396b89		29 bf		and #$bf	                    AND #~CONTROL_BOLD
.396b8b		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.396b8d		82 ac 00	brl $396c3c	                    BRL done
.396b90		c9 07		cmp #$07	chk_7               CMP #7
.396b92		d0 2c		bne $396bc0	                    BNE chk_27
.396b94		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors already inverted?
.396b96		89 80		bit #$80	                    BIT #CONTROL_INVERT
.396b98		f0 03		beq $396b9d	                    BEQ invert_on
.396b9a		82 9f 00	brl $396c3c	                    BRL done                        ; Yes: just finish
.396b9d		09 80		ora #$80	invert_on           ORA #CONTROL_INVERT             ; No: Mark that the colors are inverted
.396b9f		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.396ba1		a5 12		lda $0332	swap_colors         LDA #S_ANSI_VARS.CURCOLOR,D     ; Exchange the upper and lower nibbles
.396ba3		0a		asl a		                    ASL  A
.396ba4		69 80		adc #$80	                    ADC  #$80
.396ba6		2a		rol a		                    ROL  A
.396ba7		0a		asl a		                    ASL  A
.396ba8		69 80		adc #$80	                    ADC  #$80
.396baa		2a		rol a		                    ROL  A
.396bab		29 f7		and #$f7	                    AND #%11110111                  ; Make sure the background is not bolded
.396bad		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396baf		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.396bb1		89 40		bit #$40	                    BIT #CONTROL_BOLD
.396bb3		d0 03		bne $396bb8	                    BNE bold_on
.396bb5		82 84 00	brl $396c3c	                    BRL done                        ; No: we're done
.396bb8		a5 12		lda $0332	bold_on             LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.396bba		09 80		ora #$80	                    ORA #$80
.396bbc		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396bbe		80 7c		bra $396c3c	                    BRA done
.396bc0		c9 1b		cmp #$1b	chk_27              CMP #27
.396bc2		d0 0c		bne $396bd0	                    BNE chk_39
.396bc4		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors inverted?
.396bc6		89 80		bit #$80	                    BIT #CONTROL_INVERT
.396bc8		f0 72		beq $396c3c	                    BEQ done                        ; No: just finish
.396bca		29 7f		and #$7f	                    AND #~CONTROL_INVERT            ; Yes: Mark that the colors are back to normal
.396bcc		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.396bce		80 d1		bra $396ba1	                    BRA swap_colors                 ; And go swap the colors
.396bd0		c9 27		cmp #$27	chk_39              CMP #39
.396bd2		d0 10		bne $396be4	                    BNE chk_49
.396bd4		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396bd6		29 0f		and #$0f	                    AND #$0F
.396bd8		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396bda		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.396bdc		29 f0		and #$f0	                    AND #$F0
.396bde		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.396be0		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396be2		80 58		bra $396c3c	                    BRA done
.396be4		c9 31		cmp #$31	chk_49              CMP #49
.396be6		d0 10		bne $396bf8	                    BNE chk_foreground
.396be8		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396bea		29 f0		and #$f0	                    AND #$F0
.396bec		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396bee		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.396bf0		29 0f		and #$0f	                    AND #$0F
.396bf2		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.396bf4		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396bf6		80 44		bra $396c3c	                    BRA done
.396bf8		c9 1e		cmp #$1e	chk_foreground      CMP #30                         ; If [30..37], set the foreground color
.396bfa		90 29		bcc $396c25	                    BLT chk_background
.396bfc		c9 26		cmp #$26	                    CMP #38
.396bfe		b0 25		bcs $396c25	                    BGE chk_background
.396c00		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396c02		29 0f		and #$0f	                    AND #$0F
.396c04		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396c06		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.396c08		38		sec		                    SEC
.396c09		e9 1e		sbc #$1e	                    SBC #30
.396c0b		0a		asl a		                    ASL A
.396c0c		0a		asl a		                    ASL A
.396c0d		0a		asl a		                    ASL A
.396c0e		0a		asl a		                    ASL A
.396c0f		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.396c11		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396c13		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.396c15		89 40		bit #$40	                    BIT #CONTROL_BOLD
.396c17		d0 03		bne $396c1c	                    BNE bold_fore                   ; No: we're done
.396c19		82 20 00	brl $396c3c	                    BRL done
.396c1c		a5 12		lda $0332	bold_fore           LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.396c1e		09 80		ora #$80	                    ORA #$80
.396c20		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396c22		82 17 00	brl $396c3c	                    BRL done
.396c25		c9 28		cmp #$28	chk_background      CMP #40                         ; If [40..47], set the background color
.396c27		90 13		bcc $396c3c	                    BLT done
.396c29		c9 30		cmp #$30	                    CMP #48
.396c2b		b0 0f		bcs $396c3c	                    BGE done
.396c2d		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396c2f		29 f0		and #$f0	                    AND #$F0
.396c31		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396c33		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.396c35		38		sec		                    SEC
.396c36		e9 28		sbc #$28	                    SBC #40
.396c38		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.396c3a		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396c3c		28		plp		done                PLP
.396c3d		60		rts		                    RTS
.396c3e						ANSI_ED
.396c3e		5a		phy		                    PHY
.396c3f		08		php		                    PHP
.396c40		e2 20		sep #$20	                SEP #$20        ; set A short
.396c42		c2 10		rep #$10	                REP #$10        ; set X long
.396c44		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.396c46		d0 1b		bne $396c63	                    BNE not_0                           ; Is the code 0?
.396c48						code_0
.396c48		c2 20		rep #$20	                REP #$20        ; set A long
.396c4a		38		sec		                    SEC                                 ; Calculate min index to erase
.396c4b		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.396c4d		e5 00		sbc $0320	                    SBC #S_ANSI_VARS.SCREENBEGIN,D
.396c4f		a8		tay		                    TAY
.396c50		e2 20		sep #$20	                SEP #$20        ; set A short
.396c52		a9 20		lda #$20	code_2_loop         LDA #' '
.396c54		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.396c56		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396c58		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.396c5a		c8		iny		                    INY
.396c5b		c0 00 20	cpy #$2000	                    CPY #$2000
.396c5e		d0 f2		bne $396c52	                    BNE code_2_loop
.396c60		82 35 00	brl $396c98	                    BRL done
.396c63		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.396c65		d0 18		bne $396c7f	                    BNE not_1
.396c67						code_1
.396c67		c2 20		rep #$20	                REP #$20        ; set A long
.396c69		38		sec		                    SEC                                 ; Calculate max index to erase
.396c6a		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.396c6c		e5 00		sbc $0320	                    SBC #S_ANSI_VARS.SCREENBEGIN,D
.396c6e		a8		tay		                    TAY
.396c6f		e2 20		sep #$20	                SEP #$20        ; set A short
.396c71		a9 20		lda #$20	code_1_loop         LDA #' '
.396c73		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.396c75		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396c77		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.396c79		88		dey		                    DEY                                 ; Move to the previous index
.396c7a		10 f5		bpl $396c71	                    BPL code_1_loop                     ; And loop until we're done
.396c7c		82 19 00	brl $396c98	                    BRL done
.396c7f		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.396c81		f0 04		beq $396c87	                    BEQ cls_all
.396c83		c9 03		cmp #$03	                    CMP #3
.396c85		d0 11		bne $396c98	                    BNE done                            ; No: just ignore the sequence
.396c87		a0 00 00	ldy #$0000	cls_all             LDY #0                              ; Start with the cursor's position
.396c8a		a9 20		lda #$20	cls_all_loop        LDA #' '
.396c8c		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.396c8e		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396c90		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.396c92		c8		iny		                    INY                                 ; Go to the next position
.396c93		c0 00 20	cpy #$2000	                    CPY #$2000                          ; Have we reached the end?
.396c96		d0 f2		bne $396c8a	                    BNE cls_all_loop                    ; No: keep going
.396c98		28		plp		done                PLP
.396c99		7a		ply		                    PLY
.396c9a		60		rts		                    RTS
.396c9b						ANSI_EL
.396c9b		da		phx		                    PHX
.396c9c		5a		phy		                    PHY
.396c9d		08		php		                    PHP
.396c9e		c2 30		rep #$30	                REP #$30        ; set A&X long
.396ca0		38		sec		                    SEC
.396ca1		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D        ; Compute the address of the first character of the line
.396ca3		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.396ca5		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.396ca7		e2 20		sep #$20	                SEP #$20        ; set A short
.396ca9		a5 02		lda $0322	                    LDA #S_ANSI_VARS.SCREENBEGIN+2,D    ; Get the bank of the screen
.396cab		85 1b		sta $033b	                    STA #S_ANSI_VARS.TMPPTR1+2,D        ; And put it in the TMPPTR1
.396cad		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.396caf		d0 0e		bne $396cbf	                    BNE not_0                           ; Is the code 0?
.396cb1						code_0
.396cb1		a9 20		lda #$20	                    LDA #' '
.396cb3		a4 0e		ldy $032e	                    LDY #S_ANSI_VARS.CURSORX,D          ; Start at the cursor position
.396cb5		97 19		sta [$0339],y	code_0_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.396cb7		c8		iny		                    INY
.396cb8		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.396cba		d0 f9		bne $396cb5	                    BNE code_0_loop                     ; No: keep looping
.396cbc		82 29 00	brl $396ce8	                    BRL done
.396cbf		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.396cc1		d0 11		bne $396cd4	                    BNE not_1
.396cc3						code_1
.396cc3		a9 20		lda #$20	                    LDA #' '
.396cc5		a0 00 00	ldy #$0000	                    LDY #0
.396cc8		97 19		sta [$0339],y	code_1_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.396cca		c8		iny		                    INY
.396ccb		c4 0e		cpy $032e	                    CPY #S_ANSI_VARS.CURSORX,D          ; Have we reached the cursor?
.396ccd		d0 f9		bne $396cc8	                    BNE code_1_loop                     ; No: keep looping
.396ccf		97 19		sta [$0339],y	                    STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; And clear under the cursor
.396cd1		82 14 00	brl $396ce8	                    BRL done
.396cd4		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.396cd6		f0 04		beq $396cdc	                    BEQ code_2_3
.396cd8		c9 03		cmp #$03	                    CMP #3
.396cda		d0 0c		bne $396ce8	                    BNE done                            ; No: just ignore the sequence
.396cdc						code_2_3
.396cdc		a9 20		lda #$20	                    LDA #' '
.396cde		a0 00 00	ldy #$0000	                    LDY #0
.396ce1		97 19		sta [$0339],y	code_2_3_loop       STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.396ce3		c8		iny		                    INY
.396ce4		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.396ce6		d0 f9		bne $396ce1	                    BNE code_2_3_loop                   ; No: keep looping
.396ce8		28		plp		done                PLP
.396ce9		7a		ply		                    PLY
.396cea		fa		plx		                    PLX
.396ceb		60		rts		                    RTS
.396cec						ANSI_ICH
.396cec		5a		phy		                    PHY
.396ced		08		php		                    PHP
.396cee		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396cf0		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.396cf2		f0 04		beq $396cf8	                    BEQ default_1                       ; If 0, default to 1
.396cf4		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.396cf6		d0 04		bne $396cfc	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.396cf8		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.396cfa		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.396cfc		38		sec		calc_src_dest       SEC
.396cfd		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D     ; TMPPTR1 := COLS_VISIBLE - CURSORX (destination index)
.396cff		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.396d01		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.396d03		38		sec		                    SEC
.396d04		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D             ; TMPPTR1+1 := TMPPTR1 - n (source index)
.396d06		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D
.396d08		a4 1a		ldy $033a	insert_loop         LDY #S_ANSI_VARS.TMPPTR1+1,D        ; text[dest] := text[source]
.396d0a		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.396d0c		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.396d0e		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.396d10		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D        ; color[dest] := color[source]
.396d12		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.396d14		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.396d16		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.396d18		c6 19		dec $0339	                    DEC #S_ANSI_VARS.TMPPTR1,D          ; Move to the previous position
.396d1a		c6 1a		dec $033a	                    DEC #S_ANSI_VARS.TMPPTR1+1,D
.396d1c		10 ea		bpl $396d08	                    BPL insert_loop                     ; Keep looping until we reach the end
.396d1e		a0 00		ldy #$00	                    LDY #0
.396d20		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.396d22		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.396d24		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396d26		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.396d28		c8		iny		                    INY                                 ; Move to the next byte
.396d29		c4 21		cpy $0341	                    CPY #S_ANSI_VARS.ARG0,D             ; Until we reach the end
.396d2b		d0 f3		bne $396d20	                    BNE fill_loop
.396d2d		28		plp		                    PLP
.396d2e		7a		ply		                    PLY
.396d2f		60		rts		                    RTS
.396d30						ANSI_DCH
.396d30		5a		phy		                    PHY
.396d31		08		php		                    PHP
.396d32		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396d34		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.396d36		f0 04		beq $396d3c	                    BEQ default_1                       ; If 0, default to 1
.396d38		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.396d3a		d0 04		bne $396d40	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.396d3c		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.396d3e		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.396d40		a9 00		lda #$00	calc_src_dest       LDA #0
.396d42		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D        ; TMPPTR+1 := 0 (destination)
.396d44		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.396d46		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D          ; TMPPTR+1 := n (source)
.396d48		38		sec		                    SEC                                 ; Calculate end offset
.396d49		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D
.396d4b		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.396d4d		85 22		sta $0342	                    STA #S_ANSI_VARS.ARG1,D
.396d4f		a4 19		ldy $0339	del_loop            LDY #S_ANSI_VARS.TMPPTR1,D          ; text[dest] := text[source]
.396d51		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.396d53		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.396d55		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.396d57		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D          ; color[dest] := color[source]
.396d59		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.396d5b		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.396d5d		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.396d5f		e6 19		inc $0339	                    INC #S_ANSI_VARS.TMPPTR1,D          ; Move to the next position
.396d61		e6 1a		inc $033a	                    INC #S_ANSI_VARS.TMPPTR1+1,D
.396d63		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396d65		c5 22		cmp $0342	                    CMP #S_ANSI_VARS.ARG1,D
.396d67		90 e6		bcc $396d4f	                    BLT del_loop                        ; Keep looping until we reach the end
.396d69		38		sec		                    SEC                                 ; Calculate the starting point to fill with blanks
.396d6a		a5 1a		lda $033a	                    LDA #S_ANSI_VARS.TMPPTR1+1,D
.396d6c		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D
.396d6e		a8		tay		                    TAY
.396d6f		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.396d71		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.396d73		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396d75		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.396d77		c8		iny		                    INY                                 ; Move to the next byte
.396d78		c4 22		cpy $0342	                    CPY #S_ANSI_VARS.ARG1,D             ; Until we reach the end
.396d7a		90 f3		bcc $396d6f	                    BLT fill_loop
.396d7c		28		plp		                    PLP
.396d7d		7a		ply		                    PLY
.396d7e		60		rts		                    RTS
.396d7f						ANSI_CSRRIGHT
.396d7f		da		phx		                    PHX
.396d80		5a		phy		                    PHY
.396d81		0b		phd		                    PHD
.396d82		08		php		                    PHP
.396d83		c2 30		rep #$30	                REP #$30        ; set A&X long
.396d85		22 9a 68 39	jsl $39689a	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.396d89		b0 1a		bcs $396da5	                    BCS done                            ; If invalid, just return
.396d8b		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the new column
.396d8d		e8		inx		                    INX
.396d8e		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the current row
.396d90		e4 03		cpx $0323	                    CPX #S_ANSI_VARS.COLS_VISIBLE,D     ; Are we off screen?
.396d92		90 0d		bcc $396da1	                    BCC nowrap                          ; No: just set the position
.396d94		a2 00 00	ldx #$0000	                    LDX #0                              ; Yes: move to the first column
.396d97		c8		iny		                    INY                                 ; And move to the next row
.396d98		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Are we still off screen?
.396d9a		90 05		bcc $396da1	                    BCC nowrap                          ; No: just set the position
.396d9c		88		dey		                    DEY                                 ; Yes: lock to the last row
.396d9d		22 6d 6e 39	jsl $396e6d	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.396da1		22 09 6e 39	jsl $396e09	nowrap              JSL ANSI_LOCATE                     ; Set the cursor position
.396da5		28		plp		done                PLP
.396da6		2b		pld		                    PLD
.396da7		7a		ply		                    PLY
.396da8		fa		plx		                    PLX
.396da9		6b		rtl		                    RTL
.396daa						ANSI_CSRLEFT
.396daa		da		phx		                    PHX
.396dab		5a		phy		                    PHY
.396dac		0b		phd		                    PHD
.396dad		08		php		                    PHP
.396dae		c2 30		rep #$30	                REP #$30        ; set A&X long
.396db0		22 9a 68 39	jsl $39689a	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.396db4		b0 0d		bcs $396dc3	                    BCS done                    ; If invalid, just return
.396db6		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D  ; Check that we are not already @ Zero
.396db8		f0 09		beq $396dc3	                    BEQ done                    ; If so, just ignore this call
.396dba		ca		dex		                    DEX
.396dbb		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.396dbd		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.396dbf		22 09 6e 39	jsl $396e09	                    JSL ANSI_LOCATE
.396dc3		28		plp		done                PLP
.396dc4		2b		pld		                    PLD
.396dc5		7a		ply		                    PLY
.396dc6		fa		plx		                    PLX
.396dc7		6b		rtl		                    RTL
.396dc8						ANSI_CSRUP
.396dc8		da		phx		                    PHX
.396dc9		5a		phy		                    PHY
.396dca		0b		phd		                    PHD
.396dcb		08		php		                    PHP
.396dcc		c2 30		rep #$30	                REP #$30        ; set A&X long
.396dce		22 9a 68 39	jsl $39689a	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.396dd2		b0 0d		bcs $396de1	                    BCS done                    ; If invalid, just return
.396dd4		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D  ; Check if we are not already @ Zero
.396dd6		f0 09		beq $396de1	                    BEQ done                    ; If we are, just ignore the call
.396dd8		88		dey		                    DEY
.396dd9		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.396ddb		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D
.396ddd		22 09 6e 39	jsl $396e09	                    JSL ANSI_LOCATE
.396de1		28		plp		done                PLP
.396de2		2b		pld		                    PLD
.396de3		7a		ply		                    PLY
.396de4		fa		plx		                    PLX
.396de5		6b		rtl		                    RTL
.396de6						ANSI_CSRDOWN
.396de6		da		phx		                    PHX
.396de7		5a		phy		                    PHY
.396de8		0b		phd		                    PHD
.396de9		08		php		                    PHP
.396dea		c2 30		rep #$30	                REP #$30        ; set A&X long
.396dec		22 9a 68 39	jsl $39689a	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.396df0		b0 12		bcs $396e04	                    BCS done                            ; If invalid, just return
.396df2		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the current column
.396df4		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the new row
.396df6		c8		iny		                    INY
.396df7		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Check to see if we're off screen
.396df9		90 05		bcc $396e00	                    BCC noscroll                        ; No: go ahead and set the position
.396dfb		88		dey		                    DEY                                 ; Yes: go back to the last row
.396dfc		22 6d 6e 39	jsl $396e6d	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.396e00		22 09 6e 39	jsl $396e09	noscroll            JSL ANSI_LOCATE                     ; And set the cursor position
.396e04		28		plp		done                PLP
.396e05		2b		pld		                    PLD
.396e06		7a		ply		                    PLY
.396e07		fa		plx		                    PLX
.396e08		6b		rtl		                    RTL
.396e09						ANSI_LOCATE
.396e09		da		phx		                    PHX
.396e0a		5a		phy		                    PHY
.396e0b		0b		phd		                    PHD
.396e0c		08		php		                    PHP
.396e0d		22 9a 68 39	jsl $39689a	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.396e11		b0 55		bcs $396e68	                    BCS done                    ; If invalid, just return
.396e13		c2 30		rep #$30	                REP #$30        ; set A&X long
.396e15						locate_scroll
.396e15		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D
.396e17		90 07		bcc $396e20	                    BCC locate_scrolldone
.396e19		22 6d 6e 39	jsl $396e6d	                    JSL ANSI_SCROLLUP
.396e1d		88		dey		                    DEY
.396e1e		80 f5		bra $396e15	                    BRA locate_scroll
.396e20						locate_scrolldone
.396e20		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.396e22		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.396e24		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.396e26						locate_row
.396e26		c0 00 00	cpy #$0000	                    CPY #$0
.396e29		f0 08		beq $396e33	                    BEQ locate_right
.396e2b		18		clc		locate_down         CLC
.396e2c		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.396e2e		88		dey		                    DEY
.396e2f		f0 02		beq $396e33	                    BEQ locate_right
.396e31		80 f8		bra $396e2b	                    BRA locate_down
.396e33		18		clc		locate_right        CLC
.396e34		65 0e		adc $032e	                    ADC #S_ANSI_VARS.CURSORX,D      ; move the cursor right X columns
.396e36		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D
.396e38		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.396e3a		e2 20		sep #$20	                SEP #$20        ; set A short
.396e3c		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT
.396e40		c9 04		cmp #$04	                    CMP #CHAN_EVID
.396e42		f0 0e		beq $396e52	                    beq locate_evid
.396e44		c2 20		rep #$20	                REP #$20        ; set A long
.396e46		98		tya		                    TYA
.396e47		8f 16 00 af	sta $af0016	                    STA @l VKY_TXT_CURSOR_Y_REG_L
.396e4b		8a		txa		                    TXA
.396e4c		8f 14 00 af	sta $af0014	                    STA @l VKY_TXT_CURSOR_X_REG_L
.396e50		80 0c		bra $396e5e	                    BRA update_colorpos
.396e52						locate_evid
.396e52		c2 20		rep #$20	                REP #$20        ; set A long
.396e54		98		tya		                    TYA
.396e55		8f 16 1e ae	sta $ae1e16	                    STA @l EVID_TXT_CURSOR_Y_REG_L
.396e59		8a		txa		                    TXA
.396e5a		8f 14 1e ae	sta $ae1e14	                    STA @l EVID_TXT_CURSOR_X_REG_L
.396e5e						update_colorpos
.396e5e		c2 20		rep #$20	                REP #$20        ; set A long
.396e60		18		clc		                    CLC
.396e61		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.396e63		69 00 20	adc #$2000	                    ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.396e66		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D
.396e68		28		plp		done                PLP
.396e69		2b		pld		                    PLD
.396e6a		7a		ply		                    PLY
.396e6b		fa		plx		                    PLX
.396e6c		6b		rtl		                    RTL
.396e6d						ANSI_SCROLLUP
.396e6d		da		phx		                    PHX
.396e6e		5a		phy		                    PHY
.396e6f		8b		phb		                    PHB
.396e70		0b		phd		                    PHD
.396e71		08		php		                    PHP
.396e72		22 9a 68 39	jsl $39689a	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.396e76		90 03		bcc $396e7b	                    BCC calc_size
.396e78		82 81 00	brl $396efc	                    BRL done                    ; If invalid, just return
.396e7b						calc_size
.396e7b		c2 30		rep #$30	                REP #$30        ; set A&X long
.396e7d		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.396e7f		8f 00 01 00	sta $000100	                    STA @l UNSIGNED_MULT_A_LO
.396e83		a5 07		lda $0327	                    LDA #S_ANSI_VARS.LINES_VISIBLE,D
.396e85		8f 02 01 00	sta $000102	                    STA @l UNSIGNED_MULT_B_LO
.396e89		af 04 01 00	lda $000104	                    LDA @l UNSIGNED_MULT_AL_LO
.396e8d		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.396e8f		18		clc		                    CLC
.396e90		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.396e92		a8		tay		                    TAY
.396e93		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.396e95		aa		tax		                    TAX
.396e96		e2 20		sep #$20	                SEP #$20        ; set A short
.396e98		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID
.396e9c		c9 04		cmp #$04	                    CMP #CHAN_EVID
.396e9e		f0 09		beq $396ea9	                    BEQ move_text_1                             ; Yes: do the move on the EVID memory
.396ea0						move_text_0
.396ea0		c2 20		rep #$20	                REP #$20        ; set A long
.396ea2		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396ea4		54 af af	mvn $af,$af	                    MVN `CS_TEXT_MEM_PTR,`CS_TEXT_MEM_PTR       ; Move the data on the main screen
.396ea7		80 07		bra $396eb0	                    BRA scroll_color
.396ea9						move_text_1
.396ea9		c2 20		rep #$20	                REP #$20        ; set A long
.396eab		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396ead		54 ae ae	mvn $ae,$ae	                    MVN `EVID_TEXT_MEM,`EVID_TEXT_MEM           ; Move the data on the EVID screen
.396eb0						scroll_color
.396eb0		c2 30		rep #$30	                REP #$30        ; set A&X long
.396eb2		18		clc		                    CLC
.396eb3		a5 16		lda $0336	                    LDA #S_ANSI_VARS.COLORBEGIN,D
.396eb5		a8		tay		                    TAY
.396eb6		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.396eb8		aa		tax		                    TAX
.396eb9		e2 20		sep #$20	                SEP #$20        ; set A short
.396ebb		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID?
.396ebf		c9 04		cmp #$04	                    CMP #CHAN_EVID
.396ec1		f0 09		beq $396ecc	                    BEQ move_color_1                            ; Yes: scroll the EVID color matrix
.396ec3						move_color_0
.396ec3		c2 20		rep #$20	                REP #$20        ; set A long
.396ec5		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396ec7		54 af af	mvn $af,$af	                    MVN `CS_COLOR_MEM_PTR,`CS_COLOR_MEM_PTR     ; Move the data on the main screen
.396eca		80 07		bra $396ed3	                    BRA vicky_lastline
.396ecc						move_color_1
.396ecc		c2 20		rep #$20	                REP #$20        ; set A long
.396ece		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396ed0		54 ae ae	mvn $ae,$ae	                    MVN `EVID_COLOR_MEM,`EVID_COLOR_MEM         ; Move the data on the EVID screen
.396ed3						vicky_lastline
.396ed3		c2 20		rep #$20	                REP #$20        ; set A long
.396ed5		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396ed7		48		pha		                    PHA
.396ed8		18		clc		                    CLC
.396ed9		65 00		adc $0320	                    ADC #S_ANSI_VARS.SCREENBEGIN,D
.396edb		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.396edd		a0 00 00	ldy #$0000	start_clear         LDY #0
.396ee0		a9 20 00	lda #$0020	                    LDA #' '
.396ee3		97 19		sta [$0339],y	clr_text            STA [#S_ANSI_VARS.TMPPTR1,D],Y
.396ee5		c8		iny		                    INY
.396ee6		c4 0f		cpy $032f	                    CPY #COLS_VISIBLE,D
.396ee8		d0 f9		bne $396ee3	                    BNE clr_text
.396eea		68		pla		vicky_lastcolor     PLA
.396eeb		18		clc		                    CLC
.396eec		65 16		adc $0336	                    ADC #S_ANSI_VARS.COLORBEGIN,D
.396eee		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.396ef0		a0 00 00	ldy #$0000	start_color         LDY #0
.396ef3		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396ef5		97 19		sta [$0339],y	clr_color           STA [#S_ANSI_VARS.TMPPTR1,D],Y
.396ef7		c8		iny		                    INY
.396ef8		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D
.396efa		d0 f9		bne $396ef5	                    BNE clr_color
.396efc		28		plp		done                PLP
.396efd		2b		pld		                    PLD
.396efe		ab		plb		                    PLB
.396eff		7a		ply		                    PLY
.396f00		fa		plx		                    PLX
.396f01		6b		rtl		                    RTL
.396f02						ANSI_CLRSCREEN
.396f02		da		phx		                    PHX
.396f03		5a		phy		                    PHY
.396f04		0b		phd		                    PHD
.396f05		08		php		                    PHP
.396f06		22 9a 68 39	jsl $39689a	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.396f0a		b0 1e		bcs $396f2a	                    BCS done                            ; If invalid, just return
.396f0c		e2 20		sep #$20	                SEP #$20        ; set A short
.396f0e		c2 10		rep #$10	                REP #$10        ; set X long
.396f10		a0 00 00	ldy #$0000	                    LDY #0
.396f13		a9 20		lda #$20	                    LDA #$20		                    ; Fill the Entire Screen with Space
.396f15		97 00		sta [$0320],y	iclearloop0	        STA [#S_ANSI_VARS.SCREENBEGIN,D],Y
.396f17		c8		iny		                    INY
.396f18		c0 00 20	cpy #$2000	                    CPY #$2000
.396f1b		d0 f8		bne $396f15	                    BNE iclearloop0
.396f1d		a0 00 00	ldy #$0000	                    LDY	#0
.396f20		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D         ; Fill the current color
.396f22		97 16		sta [$0336],y	evid_clearloop1     STA [#S_ANSI_VARS.COLORBEGIN,D],Y
.396f24		c8		iny		                    INY
.396f25		c0 00 20	cpy #$2000	                    CPY #$2000
.396f28		d0 f8		bne $396f22	                    BNE evid_clearloop1
.396f2a		28		plp		done                PLP
.396f2b		2b		pld		                    PLD
.396f2c		7a		ply		                    PLY
.396f2d		fa		plx		                    PLX
.396f2e		6b		rtl		                    RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/kbd_driver.asm

=16						KBD_INBUF_SIZE = 16         ; Number of scan codes that can be buffered
=0						KBD_STATE_IDLE = 0          ; Keyboard is IDLE
=1						KBD_STATE_E0 = 1            ; Keyboard has sent E0
=2						KBD_STATE_E02A = 2          ; Keyboard has sent E0 2A (leading to Print Screen E02AE037)
=3						KBD_STATE_E02AE0 = 3
=4						KBD_STATE_E1 = 4            ; Keyboard has sent E1 (leading to Pause/Break)
=5						KBD_STATE_E11D = 5
=6						KBD_STATE_E11D45 = 6
=7						KBD_STATE_E11D45E1 = 7
=8						KBD_STATE_E11D45E19D = 8
=9						KBD_STATE_E0B7 = 9          ; Keyboard has sent E0 B7 (leading to break of Print Screen E0 B7 E0 AA)
=10						KBD_STATE_E0B7E0 = 10
=0						KBD_ACTION_IGNORE = 0       ; State machine action: do nothing with the current byte
=1						KBD_ACTION_EMIT_BASE = 1    ; State machine action: translate scancode from base table and emit it
=2						KBD_ACTION_EMIT_E0 = 2      ; State machine action: translate scancode from E0 prefix table and emit it
=$01						KBD_STAT_OBF = $01          ; Keyboard status: Output Buffer is Full
=$02						KBD_STAT_IBF = $02          ; Keyboard status: Input Buffer is Full
=$a7						KBD_CTRL_CMD_DISABLE2 = $A7 ; Keyboard controller command: disable output device #2
=$a9						KBD_CTRL_CMD_ENABLE2 = $A9  ; Keyboard controller command: enable output device #2
=$aa						KBD_CTRL_CMD_SELFTEST = $AA ; Keyboard controller command: start self test
=$ab						KBD_CTRL_CMD_KBDTEST = $AB  ; Keyboard controller command: start keyboard test
=$ad						KBD_CTRL_CMD_DISABLE1 = $AD ; Keyboard controller command: disable output device #1
=$ae						KBD_CTRL_CMD_ENABLE1 = $AE  ; Keyboard controller command: enable output device #1
=$60						KBD_CTRL_CMD_WRITECMD = $60 ; Keyboard controller command: write to the command register
=$ff						KBD_CMD_RESET = $FF         ; Keyboard command: reset the keyboard
=$f4						KBD_CMD_ENABLE = $F4        ; Keyboard command: enable to keyboard
=$ed						KBD_CMD_SET_LED = $ED       ; Keyboard command: set the LEDs
=$55						KBD_RESP_OK = $55           ; Keyboard response: Command was OK
=$fa						KBD_RESP_ACK = $FA          ; Keyboard response: command acknowledged
=$01						KBD_LOCK_SCROLL = $01       ; LED/lock mask for Scroll Lock key
=$02						KBD_LOCK_NUMBER = $02       ; LED/lock mask for Num Lock key
=$04						KBD_LOCK_CAPS = $04         ; LED/lock mask for Caps Lock key
=$01						KBD_MOD_LSHIFT  = %00000001     ; Left shift is pressed
=$02						KBD_MOD_RSHIFT  = %00000010     ; Right shift is pressed
=$04						KBD_MOD_LCTRL   = %00000100     ; Left CTRL is pressed
=$08						KBD_MOD_RCTRL   = %00001000     ; Right CTRL is pressed
=$10						KBD_MOD_LALT    = %00010000     ; Left ALT is pressed
=$20						KBD_MOD_RALT    = %00100000     ; Right ALT is pressed
=$40						KBD_MOD_OS      = %01000000     ; OS key (e.g. Windows Key) is pressed
=$80						KBD_MOD_MENU    = %10000000     ; Menu key is pressed
=$80						KBD_CTRL_BREAK      = %10000000 ; CONTROL Flag to indicate if keyboard should capture BREAK
=$40						KBD_CTRL_MONITOR    = %01000000 ; CONTROL Flag to indicate if keyboard should trap ALT-BREAK to go to the monitor
=$80						KBD_STAT_BREAK  = %10000000     ; STATUS flag, BREAK has been pressed recently
=$01						KBD_STAT_SCAN   = %00000001     ; STATUS flag to indicate if there are scan codes in the queue
=$02						KBD_STAT_CHAR   = %00000010     ; STATUS flag to indicate if there are characters in the queue
=$61						KBD_SC_BREAK = $61              ; Scan code for the PAUSE/BREAK key
=$3a						KBD_SC_CAPSLOCK = $3A           ; Scan code for the CAPS lock key
=$45						KBD_SC_NUMLOCK = $45            ; Scan code for the NUM lock key
=$46						KBD_SC_SCROLL = $46             ; Scan code for the SCROLL lock key
=$2a						KBD_SC_LSHIFT = $2A             ; Scan code for the left SHIFT key
=$1d						KBD_SC_LCTRL = $1D              ; Scan code for the left CTLR key
=$38						KBD_SC_LALT = $38               ; Scan code for the left ALT key
=$36						KBD_SC_RSHIFT = $36             ; Scan code for the right SHIFT key
=$5e						KBD_SC_RCTRL = $5E              ; Scan code for the right CTRL key
=$5c						KBD_SC_RALT = $5C               ; Scan code for the right ALT key
=$38						KBD_SC_PIVOT = $38              ; Scan code we will use as a pivot for checking NUM lock
.0000						S_KBD_CONTROL
>0000						STATE               .byte ?                     ; The state of the keyboard controller state machine
>0001						CONTROL             .byte ?                     ; Control register
>0002						STATUS              .byte ?                     ; Status register
>0003						SC_BUF              .fill KBD_INBUF_SIZE        ; Buffer for keyboard scancodes read
>0013						SC_HEAD             .byte ?                     ; Index of the first scancode cell to write to
>0014						CHAR_BUF            .fill KBD_INBUF_SIZE        ; Character buffer
>0024						CHAR_HEAD           .byte ?                     ; Number of characters in the character buffer
>0025						MODIFIERS           .byte ?                     ; State of the modifier keys
>0026						LOCKS               .byte ?                     ; State of the lock keys: Caps, Num, Scroll
>0027						TBL_UNMOD           .dword ?                    ; Pointer to the scan code translation table for unmodified keys
>002b						TBL_SHIFT           .dword ?                    ; Pointer to the scan code translation table for shifted keys
>002f						TBL_CTRL            .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL
>0033						TBL_LOCK            .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
>0037						TBL_LOCK_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
>003b						TBL_CTRL_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL and SHIFT
.396f2f						IINITKEYBOARD
.396f2f		da		phx		                    PHX
.396f30		5a		phy		                    PHY
.396f31		0b		phd		                    PHD
.396f32		08		php		                    PHP
.396f33		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.396f36		2b		pld		                PLD
.396f37		e2 20		sep #$20	                SEP #$20        ; set A short
.396f39		c2 10		rep #$10	                REP #$10        ; set X long
.396f3b		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1                        ; Disable the keyboard interrupts while we get things started
.396f3f		09 01		ora #$01	                    ORA #FNX1_INT00_KBD
.396f41		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.396f45		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                         ; Set the state machine to the starting IDLE state
.396f47		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.396f49		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D                ; Mark the scancode buffer as empty
.396f4b		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D              ; Mark the character buffer as empty
.396f4d		64 25		stz $0f25	                    STZ #S_KBD_CONTROL.MODIFIERS,D              ; Default to modifiers being off
.396f4f		64 02		stz $0f02	                    STZ #S_KBD_CONTROL.STATUS,D                 ; Clear the status register
.396f51		a9 80		lda #$80	                    LDA #KBD_CTRL_BREAK                         ; Enable BREAK processing
.396f53		85 01		sta $0f01	                    STA #S_KBD_CONTROL.CONTROL,D
.396f55		c2 20		rep #$20	                REP #$20        ; set A long
.396f57		a9 00 77	lda #$7700	                    LDA #<>SC_US_UNMOD
.396f5a		85 27		sta $0f27	                    STA #S_KBD_CONTROL.TBL_UNMOD,D
.396f5c		a9 80 77	lda #$7780	                    LDA #<>SC_US_SHFT
.396f5f		85 2b		sta $0f2b	                    STA #S_KBD_CONTROL.TBL_SHIFT,D
.396f61		a9 00 78	lda #$7800	                    LDA #<>SC_US_CTRL
.396f64		85 2f		sta $0f2f	                    STA #S_KBD_CONTROL.TBL_CTRL,D
.396f66		a9 80 78	lda #$7880	                    LDA #<>SC_US_LOCK
.396f69		85 33		sta $0f33	                    STA #S_KBD_CONTROL.TBL_LOCK,D
.396f6b		a9 00 79	lda #$7900	                    LDA #<>SC_US_LOCK_SHFT
.396f6e		85 37		sta $0f37	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.396f70		a9 80 79	lda #$7980	                    LDA #<>SC_US_CTRL_SHFT
.396f73		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.396f75		e2 20		sep #$20	                SEP #$20        ; set A short
.396f77		a9 39		lda #$39	                    LDA #`SC_US_UNMOD
.396f79		85 29		sta $0f29	                    STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.396f7b		a9 39		lda #$39	                    LDA #`SC_US_SHFT
.396f7d		85 2d		sta $0f2d	                    STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.396f7f		a9 39		lda #$39	                    LDA #`SC_US_CTRL
.396f81		85 31		sta $0f31	                    STA #S_KBD_CONTROL.TBL_CTRL+2,D
.396f83		a9 39		lda #$39	                    LDA #`SC_US_LOCK
.396f85		85 35		sta $0f35	                    STA #S_KBD_CONTROL.TBL_LOCK+2,D
.396f87		a9 39		lda #$39	                    LDA #`SC_US_LOCK_SHFT
.396f89		85 39		sta $0f39	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.396f8b		a9 39		lda #$39	                    LDA #`SC_US_CTRL_SHFT
.396f8d		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.396f8f		a9 ad		lda #$ad	                    LDA #KBD_CTRL_CMD_DISABLE1  ; Disable the keyboard sending data
.396f91		22 15 70 39	jsl $397015	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.396f95		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.396f99		af 03 18 af	lda $af1803	flush_output        LDA @l KBD_DATA_BUF         ; We just throw that away
.396f9d		a9 aa		lda #$aa	                    LDA #KBD_CTRL_CMD_SELFTEST  ; Send the self test command
.396f9f		22 20 70 39	jsl $397020	                    JSL KBD_CTRL_SND_CMD
.396fa3		c9 55		cmp #$55	                    CMP #KBD_RESP_OK            ; Did we get an OK?
.396fa5		f0 05		beq $396fac	                    BEQ test_AB
.396fa7		a9 02		lda #$02	                    LDA #2                      ; Return error #2
.396fa9		82 59 00	brl $397005	                    BRL done
.396fac		a9 ab		lda #$ab	test_AB             LDA #KBD_CTRL_CMD_KBDTEST   ; Send the keyboard test command
.396fae		22 20 70 39	jsl $397020	                    JSL KBD_CTRL_SND_CMD
.396fb2		c9 00		cmp #$00	                    CMP #0                      ; Did we get a good response?
.396fb4		f0 05		beq $396fbb	                    BEQ write_command
.396fb6		a9 03		lda #$03	                    LDA #3                      ; Return error #3
.396fb8		82 4a 00	brl $397005	                    BRL done
.396fbb		a9 60		lda #$60	write_command       LDA #KBD_CTRL_CMD_WRITECMD
.396fbd		a2 43 00	ldx #$0043	                    LDX #%01000011              ; Translate to set 1, no interrupts
.396fc0		22 7a 70 39	jsl $39707a	                    JSL KBD_CTRL_SND_CMD_P
.396fc4		a9 ae		lda #$ae	enable_dev1         LDA #KBD_CTRL_CMD_ENABLE1   ; Re-enable the keyboard sending data
.396fc6		22 15 70 39	jsl $397015	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.396fca		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.396fce		a9 ff		lda #$ff	reset_kbd           LDA #KBD_CMD_RESET          ; Send a reset command to the keyboard
.396fd0		a2 ff ff	ldx #$ffff	                    LDX #$FFFF                  ; And wait a while for it to complete the reset
.396fd3		22 31 70 39	jsl $397031	                    JSL KBD_SND_CMD
.396fd7		a0 80 00	ldy #$0080	                    LDY #128                    ; Attemp enabling the keyboard 128 times
.396fda		a9 f4		lda #$f4	enable_loop         LDA #KBD_CMD_ENABLE         ; Try to enable the keyboard
.396fdc		a2 00 00	ldx #$0000	                    LDX #0
.396fdf		22 31 70 39	jsl $397031	                    JSL KBD_SND_CMD
.396fe3		a9 36		lda #$36	set_led             LDA #"6"
.396fe5		22 18 10 00	jsl $001018	                    JSL PUTC
.396fe9		a9 00		lda #$00	                    LDA #0                      ; Set the state of the locks
.396feb		22 66 72 39	jsl $397266	                    JSL KBD_SETLOCKS
.396fef		af 41 01 00	lda $000141	                    LDA @l INT_PENDING_REG1     ; Read the Pending Register &
.396ff3		29 01		and #$01	                    AND #FNX1_INT00_KBD
.396ff5		8f 41 01 00	sta $000141	                    STA @l INT_PENDING_REG1     ; Writing it back will clear the Active Bit
.396ff9		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.396ffd		29 fe		and #$fe	                    AND #~FNX1_INT00_KBD
.396fff		8f 4d 01 00	sta $00014d	                    STA @l INT_MASK_REG1
.397003		a9 00		lda #$00	return_0            LDA #0                      ; Return status code for success
.397005		28		plp		done                PLP
.397006		2b		pld		                    PLD
.397007		7a		ply		                    PLY
.397008		fa		plx		                    PLX
.397009		6b		rtl		                    RTL
.39700a						KBD_WAIT_OUT
.39700a		48		pha		                    PHA
.39700b		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.39700f		89 01		bit #$01	                    BIT #KBD_STAT_OBF       ; Check to see if the output buffer is full
.397011		f0 f8		beq $39700b	                    BEQ wait                ; If it isn't, keep waiting
.397013		68		pla		                    PLA
.397014		6b		rtl		                    RTL
.397015						KBD_WAIT_IN
.397015		48		pha		                    PHA
.397016		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.39701a		89 02		bit #$02	                    BIT #KBD_STAT_IBF       ; Check to see if the input buffer has data
.39701c		d0 f8		bne $397016	                    BNE wait                ; If not, wait for it to have something
.39701e		68		pla		                    PLA
.39701f		6b		rtl		                    RTL
.397020						KBD_CTRL_SND_CMD
.397020		22 15 70 39	jsl $397015	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.397024		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.397028		22 0a 70 39	jsl $39700a	                    JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.39702c		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.397030		6b		rtl		                    RTL
.397031						KBD_SND_CMD
.397031		22 15 70 39	jsl $397015	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.397035		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.397039		c2 10		rep #$10	                REP #$10        ; set X long
.39703b		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.39703e		f0 0b		beq $39704b	                    BEQ get_response        ; If 0, check for a response
.397040		ca		dex		                    DEX                     ; Count down
.397041		ea		nop		                    NOP                     ; And do a delay
.397042		ea		nop		                    NOP
.397043		ea		nop		                    NOP
.397044		ea		nop		                    NOP
.397045		ea		nop		                    NOP
.397046		ea		nop		                    NOP
.397047		ea		nop		                    NOP
.397048		ea		nop		                    NOP
.397049		80 f0		bra $39703b	                    BRA delay
.39704b		22 0a 70 39	jsl $39700a	get_response        JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.39704f		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.397053		6b		rtl		                    RTL
.397054						KBD_SND_CMD_P
.397054		22 15 70 39	jsl $397015	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.397058		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.39705c		8a		txa		                    TXA                     ; Send the parameter to the keyboard
.39705d		c2 10		rep #$10	                REP #$10        ; set X long
.39705f		a2 e8 03	ldx #$03e8	                    LDX #1000
.397062		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.397065		f0 0a		beq $397071	                    BEQ send_data           ; If 0, check for a response
.397067		ca		dex		                    DEX                     ; Count down
.397068		ea		nop		                    NOP                     ; And do a delay
.397069		ea		nop		                    NOP
.39706a		ea		nop		                    NOP
.39706b		ea		nop		                    NOP
.39706c		ea		nop		                    NOP
.39706d		ea		nop		                    NOP
.39706e		ea		nop		                    NOP
.39706f		80 f1		bra $397062	                    BRA delay
.397071		22 15 70 39	jsl $397015	send_data           JSL KBD_WAIT_IN
.397075		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.397079						get_response
.397079		6b		rtl		                    RTL
.39707a						KBD_CTRL_SND_CMD_P
.39707a		22 15 70 39	jsl $397015	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.39707e		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.397082		8a		txa		                    TXA
.397083		22 15 70 39	jsl $397015	                    JSL KBD_WAIT_IN         ; Send the parameter to the controller
.397087		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.39708b		6b		rtl		                    RTL
.39708c						KBD_PROCESS_BYTE
.39708c		8b		phb		                    PHB
.39708d		0b		phd		                    PHD
.39708e		08		php		                    PHP
.39708f		f4 39 39	pea #$3939	                PEA #((`KBD_STATE_MACH) * 256) + (`KBD_STATE_MACH)
.397092		ab		plb		                PLB
.397093		ab		plb		                PLB
.397094		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.397097		2b		pld		                PLD
.397098		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39709a		a9 00		lda #$00	                    LDA #0
.39709c		8f e0 00 00	sta $0000e0	                    STA @l MOUSE_IDX                    ; A bit of a hack to try to stabilize the mouse
.3970a0		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF                 ; Get the current scancode byte
.3970a4		d0 03		bne $3970a9	                    BNE save_scancode
.3970a6		82 67 00	brl $397110	                    BRL done                            ; If it's 0, just ignore it
.3970a9						LOCALS
>0001						l_break             .byte ?                             ; The make/break bit of the scancode
>0002						l_code              .byte ?                             ; The scancode
.3970a9		48		pha		save_scancode       PHA
.3970aa		48		pha		                    PHA
.3970ab		29 80		and #$80	                    AND #$80
.3970ad		83 01		sta $01,s	                    STA l_break                         ; Save the make/break bit
.3970af		a2 00		ldx #$00	                    LDX #0                              ; Start from the beginning
.3970b1		bf 00 76 39	lda $397600,x	chk_transition      LDA @l KBD_STATE_MACH,X             ; Get the tranition's start state
.3970b5		c9 ff		cmp #$ff	                    CMP #$FF
.3970b7		d0 03		bne $3970bc	                    BNE compare_state
.3970b9		82 54 00	brl $397110	                    BRL done                            ; If $FF: we've reached the end... this is an error... just ignore it?
.3970bc		c5 00		cmp $0f00	compare_state       CMP #S_KBD_CONTROL.STATE,D          ; Compare it to the current state
.3970be		d0 0e		bne $3970ce	                    BNE next_transition                 ; If they don't match, go to the next transition
.3970c0		bf 01 76 39	lda $397601,x	                    LDA @l KBD_STATE_MACH+1,X           ; Get the tranition's test byte
.3970c4		f0 0e		beq $3970d4	                    BEQ apply                           ; Is it 0? Yes: the default applies
.3970c6		a3 02		lda $02,s	                    LDA l_code                          ; Otherwise: get the scan code back
.3970c8		df 01 76 39	cmp $397601,x	                    CMP @l KBD_STATE_MACH+1,X           ; Compare it to the transition's test byte
.3970cc		f0 06		beq $3970d4	                    BEQ apply                           ; If equal: this matches, apply the transition
.3970ce		e8		inx		next_transition     INX                                 ; Move to the next transition
.3970cf		e8		inx		                    INX
.3970d0		e8		inx		                    INX
.3970d1		e8		inx		                    INX
.3970d2		80 dd		bra $3970b1	                    BRA chk_transition                  ; Check to see if the next transition applies
.3970d4		bf 02 76 39	lda $397602,x	apply               LDA @l KBD_STATE_MACH+2,X           ; Get the tranition's destination state
.3970d8		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D          ; And save it as our new state
.3970da		bf 03 76 39	lda $397603,x	                    LDA @l KBD_STATE_MACH+3,X           ; Get the tranition's action
.3970de		c9 00		cmp #$00	                    CMP #KBD_ACTION_IGNORE              ; Is it IGNORE?
.3970e0		f0 2e		beq $397110	                    BEQ done                            ; Yes: we're done for now
.3970e2		c9 01		cmp #$01	                    CMP #KBD_ACTION_EMIT_BASE           ; Is it EMIT_BASE?
.3970e4		f0 06		beq $3970ec	                    BEQ emit_base                       ; Yes: emit the translation of the base byte
.3970e6		c9 02		cmp #$02	                    CMP #KBD_ACTION_EMIT_E0             ; Is it EMIT_E0?
.3970e8		f0 0f		beq $3970f9	                    BEQ emit_e0                         ; Yes: emit the translation of the E0 prefixed byte
.3970ea		80 18		bra $397104	                    BRA emit_A                          ; Otherwise: just emit the action byte as the new scan code
.3970ec		a3 02		lda $02,s	emit_base           LDA l_code
.3970ee		29 7f		and #$7f	                    AND #$7F                            ; Strip off the make/break bit
.3970f0		aa		tax		                    TAX
.3970f1		bf 00 75 39	lda $397500,x	                    LDA @l TBL_SET1,X                   ; Get the translation of the base scan code
.3970f5		03 01		ora $01,s	                    ORA l_break                         ; Add the make/break bit back
.3970f7		80 0b		bra $397104	                    BRA emit_A                          ; Emit the translation
.3970f9		a3 02		lda $02,s	emit_e0             LDA l_code
.3970fb		29 7f		and #$7f	                    AND #$7F                            ; Strip off any make/break bit
.3970fd		aa		tax		                    TAX
.3970fe		bf 80 75 39	lda $397580,x	                    LDA @l TBL_SET1_E0,X                ; Get the translation of the E0 prefixed scan code
.397102		03 01		ora $01,s	                    ORA l_break                         ; Add in the make/break flag
.397104		c9 00		cmp #$00	emit_A              CMP #0                              ; Is the code NUL?
.397106		f0 08		beq $397110	                    BEQ done                            ; If so, skip enqueuing it
.397108		22 18 71 39	jsl $397118	enqueue             JSL KBD_SC_ENQUEUE                  ; Enqueue the scancode
.39710c		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                 ; Set the state machine to the initial state
.39710e		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.397110						done
.397110		e2 20		sep #$20	                SEP #$20        ; set A short
.397112		68		pla		                    PLA                                 ; Clean the scan code byte from the stack
.397113		68		pla		                    PLA
.397114		28		plp		                    PLP
.397115		2b		pld		                    PLD
.397116		ab		plb		                    PLB
.397117		6b		rtl		                    RTL
.397118						KBD_SC_ENQUEUE
.397118		0b		phd		                    PHD
.397119		08		php		                    PHP
.39711a		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.39711b		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.39711e		2b		pld		                PLD
.39711f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397121		c9 00		cmp #$00	                    CMP #0                          ; Is the scan code a NUL?
.397123		f0 2f		beq $397154	                    BEQ done                        ; Yes: just ignore
.397125		c9 61		cmp #$61	                    CMP #KBD_SC_BREAK               ; Is it the BREAK key?
.397127		d0 10		bne $397139	                    BNE chk_locks                   ; No: check the various lock keys
.397129		a5 01		lda $0f01	                    LDA #S_KBD_CONTROL.CONTROL,D
.39712b		89 80		bit #$80	                    BIT #KBD_CTRL_BREAK                 ; Are we processing BREAK?
.39712d		f0 08		beq $397137	                    BEQ enqueue_break                   ; No: enqueue it as normal
.39712f		a9 80		lda #$80	                    LDA #KBD_STAT_BREAK                 ; Yes: turn on the BREAK bit
.397131		05 02		ora $0f02	                    ORA #S_KBD_CONTROL.STATUS,D
.397133		85 02		sta $0f02	                    STA #S_KBD_CONTROL.STATUS,D
.397135		80 1d		bra $397154	                    BRA done                            ; And we're done
.397137		a9 61		lda #$61	enqueue_break       LDA #KBD_SC_BREAK
.397139		c9 3a		cmp #$3a	chk_locks           CMP #KBD_SC_CAPSLOCK            ; Is it the CAPS lock?
.39713b		f0 1a		beq $397157	                    BEQ toggle_caps                 ; Yes: toggle the CAPS lock bits
.39713d		c9 45		cmp #$45	                    CMP #KBD_SC_NUMLOCK             ; Is it the NUM lock?
.39713f		f0 20		beq $397161	                    BEQ toggle_num                  ; Yes: toggle the NUM lock bits
.397141		c9 46		cmp #$46	                    CMP #KBD_SC_SCROLL              ; Is it the SCROLL lock?
.397143		f0 22		beq $397167	                    BEQ toggle_scroll               ; Yes: toggle the SCROLL lock bits
.397145		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.397147		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.397149		f0 09		beq $397154	                    BEQ done                        ; Yes: we're full... ignore the scancode
.39714b		95 03		sta $0f03,x	                    STA #S_KBD_CONTROL.SC_BUF,D,X   ; No: we have room, write the scan code to the buffer
.39714d		e8		inx		                    INX                             ; Advance to the next location
.39714e		86 13		stx $0f13	                    STX #S_KBD_CONTROL.SC_HEAD,D
.397150		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Set the KBD_STAT_SCAN bit
.397152		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.397154		28		plp		done                PLP
.397155		2b		pld		                    PLD
.397156		6b		rtl		                    RTL
.397157		a5 26		lda $0f26	toggle_caps         LDA #S_KBD_CONTROL.LOCKS,D
.397159		49 04		eor #$04	                    EOR #KBD_LOCK_CAPS              ; Toggle the CAPS lock
.39715b		22 66 72 39	jsl $397266	save_locks          JSL KBD_SETLOCKS                ; Set the locks
.39715f		80 f3		bra $397154	                    BRA done
.397161		a5 26		lda $0f26	toggle_num          LDA #S_KBD_CONTROL.LOCKS,D
.397163		49 02		eor #$02	                    EOR #KBD_LOCK_NUMBER            ; Toggle the NUM lock
.397165		80 f4		bra $39715b	                    BRA save_locks
.397167		a5 26		lda $0f26	toggle_scroll       LDA #S_KBD_CONTROL.LOCKS,D
.397169		49 01		eor #$01	                    EOR #KBD_LOCK_SCROLL            ; Toggle the SCROLL lock
.39716b		80 ee		bra $39715b	                    BRA save_locks
.39716d						KBD_CHAR_ENQUEUE
.39716d		0b		phd		                    PHD
.39716e		08		php		                    PHP
.39716f		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.397170		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.397173		2b		pld		                PLD
.397174		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397176		c9 00		cmp #$00	                    CMP #0                          ; Is the character a NUL?
.397178		f0 0f		beq $397189	                    BEQ done                        ; Yes: just ignore
.39717a		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D  ; Get the index of the next free spot
.39717c		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.39717e		f0 09		beq $397189	                    BEQ done                        ; Yes: we're full... ignore the scancode
.397180		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X ; No: we have room, write the scan code to the buffer
.397182		e8		inx		                    INX                             ; Advance to the next location
.397183		86 24		stx $0f24	                    STX #S_KBD_CONTROL.CHAR_HEAD,D
.397185		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR              ; Set the KBD_STAT_CHAR bit
.397187		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.397189		28		plp		done                PLP
.39718a		2b		pld		                    PLD
.39718b		6b		rtl		                    RTL
.39718c						KBD_CHAR_DEQUEUE
.39718c		da		phx		                    PHX
.39718d		0b		phd		                    PHD
.39718e		08		php		                    PHP
.39718f		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.397192		2b		pld		                PLD
.397193		78		sei		                    SEI                                 ; Disable IRQ for the duration of this routine to avoid race conditions
.397194		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397196		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; Get the index of the next free spot
.397198		f0 21		beq $3971bb	                    BEQ return_empty                    ; If it's 0, we have no data
.39719a		a5 14		lda $0f14	                    LDA #S_KBD_CONTROL.CHAR_BUF,D       ; Get the character at the head of the queue
.39719c		48		pha		                    PHA                                 ; Save it
.39719d		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; How many bytes were there?
.39719f		e0 01		cpx #$01	                    CPX #1                              ; Is it one?
.3971a1		d0 08		bne $3971ab	                    BNE copy_down                       ; No: we need to copy down the remaining bytes
.3971a3		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D      ; Yes: mark that we have no data in the queue now
.3971a5		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR                  ; Clear the KBD_STAT_CHAR bit
.3971a7		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.3971a9		80 0d		bra $3971b8	                    BRA return_head                     ; And return the character we found
.3971ab		a2 00		ldx #$00	copy_down           LDX #0                              ; Starting at the beginning of the buffer...
.3971ad		b5 15		lda $0f15,x	loop                LDA #S_KBD_CONTROL.CHAR_BUF+1,D,X   ; Get the next byte
.3971af		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X     ; Move it down
.3971b1		e8		inx		                    INX                                 ; And move to the next byte
.3971b2		e4 24		cpx $0f24	                    CPX #S_KBD_CONTROL.CHAR_HEAD,D      ; Have we reached the end?
.3971b4		d0 f7		bne $3971ad	                    BNE loop                            ; No: keep copying bytes
.3971b6		c6 24		dec $0f24	                    DEC #S_KBD_CONTROL.CHAR_HEAD,D      ; Decrement the index
.3971b8		68		pla		return_head         PLA                                 ; Get the character back
.3971b9		80 02		bra $3971bd	                    BRA done                            ; And return it
.3971bb		a9 00		lda #$00	return_empty        LDA #0                              ; Return: 0 for no character
.3971bd		28		plp		done                PLP
.3971be		2b		pld		                    PLD
.3971bf		fa		plx		                    PLX
.3971c0		6b		rtl		                    RTL
.3971c1						KBD_GET_SCANCODE
.3971c1		da		phx		                    PHX
.3971c2		0b		phd		                    PHD
.3971c3		08		php		                    PHP
.3971c4		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.3971c7		2b		pld		                PLD
.3971c8		78		sei		                    SEI                             ; Disable IRQ for the duration of this routine to avoid race conditions
.3971c9		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3971cb		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.3971cd		f0 21		beq $3971f0	                    BEQ return_empty                ; If it's 0, we have no data
.3971cf		a5 03		lda $0f03	                    LDA #S_KBD_CONTROL.SC_BUF,D     ; Get the scan code at the head of the queue
.3971d1		48		pha		                    PHA                             ; Save it
.3971d2		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; How many bytes were there?
.3971d4		e0 01		cpx #$01	                    CPX #1                          ; Is it one?
.3971d6		d0 08		bne $3971e0	                    BNE copy_down                   ; No: we need to copy down the remaining bytes
.3971d8		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D    ; Yes: mark that we have no data in the queue now
.3971da		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Clear the KBD_STAT_SCAN bit
.3971dc		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.3971de		80 0d		bra $3971ed	                    BRA return_head                 ; And return the scan code we found
.3971e0		a2 00		ldx #$00	copy_down           LDX #0                          ; Starting at the beginning of the buffer...
.3971e2		b5 04		lda $0f04,x	loop                LDA #S_KBD_CONTROL.SC_BUF+1,D,X ; Get the next byte
.3971e4		95 03		sta $0f03,x	                    STA #S_KBD_CONTROL.SC_BUF,D,X   ; Move it down
.3971e6		e8		inx		                    INX                             ; And move to the next byte
.3971e7		e4 13		cpx $0f13	                    CPX #S_KBD_CONTROL.SC_HEAD,D    ; Have we reached the end?
.3971e9		d0 f7		bne $3971e2	                    BNE loop                        ; No: keep copying bytes
.3971eb		c6 13		dec $0f13	                    DEC #S_KBD_CONTROL.SC_HEAD,D    ; Reduce the index to the next free byte
.3971ed		68		pla		return_head         PLA                             ; Get the scan code back
.3971ee		80 02		bra $3971f2	                    BRA done                        ; And return it
.3971f0		a9 00		lda #$00	return_empty        LDA #0                          ; Return: 0 for no scan code
.3971f2		28		plp		done                PLP
.3971f3		2b		pld		                    PLD
.3971f4		fa		plx		                    PLX
.3971f5		6b		rtl		                    RTL
.3971f6						KBD_GETMODS
.3971f6		0b		phd		                PHD
.3971f7		08		php		                PHP
.3971f8		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.3971fb		2b		pld		                PLD
.3971fc		e2 20		sep #$20	                SEP #$20        ; set A short
.3971fe		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.397200		28		plp		                PLP
.397201		2b		pld		                PLD
.397202		6b		rtl		                RTL
.397203						KBD_GET_STAT
.397203		0b		phd		                PHD
.397204		08		php		                PHP
.397205		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.397208		2b		pld		                PLD
.397209		e2 20		sep #$20	                SEP #$20        ; set A short
.39720b		a5 02		lda $0f02	                LDA #S_KBD_CONTROL.STATUS,D
.39720d		28		plp		                PLP
.39720e		2b		pld		                PLD
.39720f		6b		rtl		                RTL
.397210						KBD_TEST_BREAK
.397210		0b		phd		                PHD
.397211		08		php		                PHP
.397212		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.397215		2b		pld		                PLD
.397216		e2 20		sep #$20	                SEP #$20        ; set A short
.397218		a9 80		lda #$80	                LDA #KBD_STAT_BREAK             ; Check the BREAK bit in STATUS
.39721a		14 02		trb $0f02	                TRB #S_KBD_CONTROL.STATUS,D     ; ... and clear it
.39721c		d0 04		bne $397222	                BNE ret_true                    ; If it was set, return TRUE
.39721e		28		plp		ret_false       PLP                             ; Otherwise, return false
.39721f		2b		pld		                PLD
.397220		18		clc		                CLC
.397221		6b		rtl		                RTL
.397222		28		plp		ret_true        PLP
.397223		2b		pld		                PLD
.397224		38		sec		                SEC
.397225		6b		rtl		                RTL
.397226						KBD_GETMODS_ANSI
.397226		0b		phd		                    PHD
.397227		08		php		                    PHP
.397228		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.39722b		2b		pld		                PLD
.39722c		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39722e		a9 00		lda #$00	                    LDA #0                      ; Make space for the result code
.397230		48		pha		                    PHA
>0001						l_result            .byte ?
.397231		a5 25		lda $0f25	                    LDA #S_KBD_CONTROL.MODIFIERS,D
.397233		89 03		bit #$03	                    BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT
.397235		f0 06		beq $39723d	                    BEQ check_alt
.397237		a3 01		lda $01,s	                    LDA l_result
.397239		09 02		ora #$02	                    ORA #%00000010
.39723b		83 01		sta $01,s	                    STA l_result
.39723d		a5 25		lda $0f25	check_alt           LDA #S_KBD_CONTROL.MODIFIERS,D
.39723f		89 30		bit #$30	                    BIT #KBD_MOD_LALT | KBD_MOD_RALT
.397241		f0 06		beq $397249	                    BEQ check_ctrl
.397243		a3 01		lda $01,s	                    LDA l_result
.397245		09 04		ora #$04	                    ORA #%00000100
.397247		83 01		sta $01,s	                    STA l_result
.397249		a5 25		lda $0f25	check_ctrl          LDA #S_KBD_CONTROL.MODIFIERS,D
.39724b		89 0c		bit #$0c	                    BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL
.39724d		f0 06		beq $397255	                    BEQ return_result
.39724f		a3 01		lda $01,s	                    LDA l_result
.397251		09 08		ora #$08	                    ORA #%00001000
.397253		83 01		sta $01,s	                    STA l_result
.397255		68		pla		return_result       PLA
.397256		28		plp		                    PLP
.397257		2b		pld		                    PLD
.397258		6b		rtl		                    RTL
.397259						KBD_GETLOCKS
.397259		0b		phd		                PHD
.39725a		08		php		                PHP
.39725b		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.39725e		2b		pld		                PLD
.39725f		e2 20		sep #$20	                SEP #$20        ; set A short
.397261		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D
.397263		28		plp		                PLP
.397264		2b		pld		                PLD
.397265		6b		rtl		                RTL
.397266						KBD_SETLOCKS
.397266		0b		phd		                PHD
.397267		08		php		                PHP
.397268		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.39726b		2b		pld		                PLD
.39726c		e2 20		sep #$20	                SEP #$20        ; set A short
.39726e		85 26		sta $0f26	                STA #S_KBD_CONTROL.LOCKS,D
.397270		28		plp		                PLP
.397271		2b		pld		                PLD
.397272		6b		rtl		                RTL
.397273						KBD_GET_CONTROL
.397273		0b		phd		                PHD
.397274		08		php		                PHP
.397275		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.397278		2b		pld		                PLD
.397279		e2 20		sep #$20	                SEP #$20        ; set A short
.39727b		a5 01		lda $0f01	                LDA #S_KBD_CONTROL.CONTROL,D
.39727d		28		plp		                PLP
.39727e		2b		pld		                PLD
.39727f		6b		rtl		                RTL
.397280						KBD_SET_CONTROL
.397280		0b		phd		                PHD
.397281		08		php		                PHP
.397282		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.397285		2b		pld		                PLD
.397286		e2 20		sep #$20	                SEP #$20        ; set A short
.397288		85 01		sta $0f01	                STA #S_KBD_CONTROL.CONTROL,D
.39728a		28		plp		                PLP
.39728b		2b		pld		                PLD
.39728c		6b		rtl		                RTL
.39728d						KBD_GETCW
.39728d		22 99 72 39	jsl $397299	                JSL KBD_GETC
.397291		c9 00		cmp #$00	                CMP #0
.397293		f0 01		beq $397296	                BEQ wait
.397295		6b		rtl		                RTL
.397296		cb		wai		wait            WAI
.397297		80 f4		bra $39728d	                BRA KBD_GETCW
.397299						KBD_GETC
.397299		0b		phd		                PHD
.39729a		08		php		                PHP
.39729b		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.39729e		2b		pld		                PLD
.39729f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3972a1		22 8c 71 39	jsl $39718c	                JSL KBD_CHAR_DEQUEUE        ; Try to fetch a character from the character queue
.3972a5		c9 00		cmp #$00	                CMP #0                      ; Did we get anything back?
.3972a7		f0 03		beq $3972ac	                BEQ get_scancode            ; No: try to get a scan code
.3972a9		82 cb 00	brl $397377	                BRL done                    ; Yes: return the character we had queued
.3972ac		22 c1 71 39	jsl $3971c1	get_scancode    JSL KBD_GET_SCANCODE        ; Fetch the next scancode
.3972b0		c9 00		cmp #$00	                CMP #0                      ; Is it NUL?
.3972b2		d0 04		bne $3972b8	                BNE chk_make_break
.3972b4		28		plp		                PLP                         ; Yes: return 0... we got nothin
.3972b5		38		sec		                SEC
.3972b6		2b		pld		                PLD
.3972b7		6b		rtl		                RTL
.3972b8		89 80		bit #$80	chk_make_break  BIT #$80                    ; Is it a break scan code?
.3972ba		d0 08		bne $3972c4	                BNE handle_break            ; Yes: process the break
.3972bc		c9 2a		cmp #$2a	handle_make     CMP #KBD_SC_LSHIFT          ; Is it a make LSHIFT?
.3972be		d0 0c		bne $3972cc	                BNE not_make_ls
.3972c0		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.3972c2		80 4e		bra $397312	                BRA set_modifier
.3972c4		c9 aa		cmp #$aa	handle_break    CMP #KBD_SC_LSHIFT | $80    ; Is it a break LSHIFT?
.3972c6		d0 0c		bne $3972d4	                BNE not_break_ls
.3972c8		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.3972ca		80 50		bra $39731c	                BRA clr_modifier
.3972cc		c9 1d		cmp #$1d	not_make_ls     CMP #KBD_SC_LCTRL           ; Is it a make LCTRL?
.3972ce		d0 0c		bne $3972dc	                BNE not_make_lc
.3972d0		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.3972d2		80 3e		bra $397312	                BRA set_modifier
.3972d4		c9 9d		cmp #$9d	not_break_ls    CMP #KBD_SC_LCTRL | $80     ; Is it a break LCTRL?
.3972d6		d0 0c		bne $3972e4	                BNE not_break_lc
.3972d8		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.3972da		80 40		bra $39731c	                BRA clr_modifier
.3972dc		c9 38		cmp #$38	not_make_lc     CMP #KBD_SC_LALT            ; Is it a make LALT?
.3972de		d0 0c		bne $3972ec	                BNE not_make_la
.3972e0		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.3972e2		80 2e		bra $397312	                BRA set_modifier
.3972e4		c9 b8		cmp #$b8	not_break_lc    CMP #KBD_SC_LALT | $80      ; Is it a break LALT?
.3972e6		d0 0c		bne $3972f4	                BNE not_break_la
.3972e8		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.3972ea		80 30		bra $39731c	                BRA clr_modifier
.3972ec		c9 36		cmp #$36	not_make_la     CMP #KBD_SC_RSHIFT          ; Is it a make RSHIFT?
.3972ee		d0 0c		bne $3972fc	                BNE not_make_rs
.3972f0		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.3972f2		80 1e		bra $397312	                BRA set_modifier
.3972f4		c9 b6		cmp #$b6	not_break_la    CMP #KBD_SC_RSHIFT | $80    ; Is it a break RSHIFT?
.3972f6		d0 0c		bne $397304	                BNE not_break_rs
.3972f8		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.3972fa		80 20		bra $39731c	                BRA clr_modifier
.3972fc		c9 5e		cmp #$5e	not_make_rs     CMP #KBD_SC_RCTRL           ; Is it a make RCTRL?
.3972fe		d0 0c		bne $39730c	                BNE not_make_rc
.397300		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.397302		80 0e		bra $397312	                BRA set_modifier
.397304		c9 de		cmp #$de	not_break_rs    CMP #KBD_SC_RCTRL | $80     ; Is it a break RCTRL?
.397306		d0 0e		bne $397316	                BNE not_break_rc
.397308		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.39730a		80 10		bra $39731c	                BRA clr_modifier
.39730c		c9 5c		cmp #$5c	not_make_rc     CMP #KBD_SC_RALT            ; Is it a make RALT?
.39730e		d0 12		bne $397322	                BNE not_make_ra
.397310		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.397312		04 25		tsb $0f25	set_modifier    TSB #S_KBD_CONTROL.MODIFIERS,D  ; Set the indicated modifier bit
.397314		80 08		bra $39731e	                BRA return_null
.397316		c9 dc		cmp #$dc	not_break_rc    CMP #KBD_SC_RALT | $80          ; Is it a break RALT?
.397318		d0 04		bne $39731e	                BNE return_null                 ; No: we don't use any other break scan codes
.39731a		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.39731c		14 25		trb $0f25	clr_modifier    TRB #S_KBD_CONTROL.MODIFIERS,D  ; Clear the indicated modifier bit
.39731e		a9 00		lda #$00	return_null     LDA #0
.397320		80 55		bra $397377	                BRA done
.397322		a8		tay		not_make_ra     TAY                                     ; Use the scan code as an index...
.397323		c9 38		cmp #$38	                CMP #KBD_SC_PIVOT
.397325		90 0e		bcc $397335	                BLT below_38
.397327		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D              ; Check the NUM lock
.397329		89 02		bit #$02	                BIT #KBD_LOCK_NUMBER
.39732b		f0 2a		beq $397357	                BEQ fetch_unmod                         ; No: translate the keys as unmodified
.39732d		a5 25		lda $0f25	chk_num_shift   LDA #S_KBD_CONTROL.MODIFIERS,D
.39732f		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Check for a shift key being pressed
.397331		d0 24		bne $397357	                BNE fetch_unmod                         ; If so: translate the keys as modified
.397333		80 30		bra $397365	                BRA fetch_caps                          ; No: translate the key using the lock table
.397335		a5 25		lda $0f25	below_38        LDA #S_KBD_CONTROL.MODIFIERS,D
.397337		89 0c		bit #$0c	                BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL      ; Is either control key pressed?
.397339		f0 0c		beq $397347	                BEQ chk_capslock                        ; No: check for capslock
.39733b		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.39733d		f0 04		beq $397343	                BEQ fetch_control                       ; No: translate just based off of control
.39733f		b7 3b		lda [$0f3b],y	                LDA [#S_KBD_CONTROL.TBL_CTRL_SHIFT,D],Y ; Look up the key modfified by CTRL and SHIFT
.397341		80 26		bra $397369	                BRA chk_ansi
.397343		b7 2f		lda [$0f2f],y	fetch_control   LDA [#S_KBD_CONTROL.TBL_CTRL,D],Y       ; Look up the key modified by CONTROL
.397345		80 22		bra $397369	                BRA chk_ansi
.397347		a5 26		lda $0f26	chk_capslock    LDA #S_KBD_CONTROL.LOCKS,D              ; Check the CAPS lock
.397349		89 04		bit #$04	                BIT #KBD_LOCK_CAPS
.39734b		d0 0e		bne $39735b	                BNE chk_caps_shift                      ; Yes: check the state of the SHIFT key
.39734d		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.39734f		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.397351		f0 04		beq $397357	                BEQ fetch_unmod                         ; No: translate just based off of control
.397353		b7 2b		lda [$0f2b],y	fetch_shifted   LDA [#S_KBD_CONTROL.TBL_SHIFT,D],Y      ; Look up the key modified by SHIFT
.397355		80 12		bra $397369	                BRA chk_ansi
.397357		b7 27		lda [$0f27],y	fetch_unmod     LDA [#S_KBD_CONTROL.TBL_UNMOD,D],Y      ; Look up the unmodified key
.397359		80 0e		bra $397369	                BRA chk_ansi
.39735b		a5 25		lda $0f25	chk_caps_shift  LDA #S_KBD_CONTROL.MODIFIERS,D
.39735d		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.39735f		f0 04		beq $397365	                BEQ fetch_caps                          ; No: translate just based off of control
.397361		b7 37		lda [$0f37],y	                LDA [#S_KBD_CONTROL.TBL_LOCK_SHIFT,D],Y ; Look up the key modified by CAPS and SHIFT
.397363		80 04		bra $397369	                BRA chk_ansi
.397365		b7 33		lda [$0f33],y	fetch_caps      LDA [#S_KBD_CONTROL.TBL_LOCK,D],Y       ; Look up the key modified by CAPSLOCK
.397367		80 00		bra $397369	                BRA chk_ansi
.397369		c9 80		cmp #$80	chk_ansi        CMP #$80                                ; Check to see if we have an ANSI escape sequence to send
.39736b		90 0a		bcc $397377	                BLT done                                ; If not, just return the character
.39736d		c9 96		cmp #$96	                CMP #$96
.39736f		b0 06		bcs $397377	                BGE done
.397371		22 b3 73 39	jsl $3973b3	                JSL KBD_ENQ_ANSI                        ; Expand and enqueue the ANSI sequence
.397375		a9 1b		lda #$1b	                LDA #CHAR_ESC                           ; And return the ESC key to start the sequence
.397377		28		plp		done            PLP
.397378		2b		pld		                PLD
.397379		18		clc		                CLC
.39737a		6b		rtl		                RTL
.39737b						KBD_ENQUEUE_BCD
.39737b		08		php		                PHP
.39737c		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39737e		48		pha		                PHA                     ; Save the value
.39737f		4a		lsr a		                LSR A                   ; Get the 10s digit
.397380		4a		lsr a		                LSR A
.397381		4a		lsr a		                LSR A
.397382		4a		lsr a		                LSR A
.397383		c9 00		cmp #$00	                CMP #0                  ; If it's 0, move to the 1s digit
.397385		f0 0b		beq $397392	                BEQ enqueue_1
.397387		c9 0a		cmp #$0a	                CMP #$0A                ; If it's out of range, ignore this whole call
.397389		b0 13		bcs $39739e	                BGE done_A
.39738b		18		clc		                CLC                     ; Enqueue the tens digit
.39738c		69 30		adc #$30	                ADC #'0'
.39738e		22 6d 71 39	jsl $39716d	                JSL KBD_CHAR_ENQUEUE
.397392		68		pla		enqueue_1       PLA                     ; Enqueue the ones digit
.397393		29 0f		and #$0f	                AND #$0F
.397395		18		clc		                CLC
.397396		69 30		adc #$30	                ADC #'0'
.397398		22 6d 71 39	jsl $39716d	                JSL KBD_CHAR_ENQUEUE
.39739c		28		plp		done            PLP
.39739d		6b		rtl		                RTL
.39739e		68		pla		done_A          PLA
.39739f		80 fb		bra $39739c	                BRA done
.3973a1						KBD_BIN_TO_BCD
.3973a1		da		phx		                PHX
.3973a2		08		php		                PHP
.3973a3		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3973a5		aa		tax		                TAX
.3973a6		a9 99		lda #$99	                LDA #$99                ; Start with -1 in BCD form
.3973a8		f8		sed		                SED                     ; Switch to Decimal arithmetic
.3973a9		18		clc		loop            CLC
.3973aa		69 01		adc #$01	                ADC #1                  ; Add 1 with BCD arithmetic
.3973ac		ca		dex		                DEX                     ; Decrement input value in X
.3973ad		10 fa		bpl $3973a9	                BPL loop                ; loop until input value < 0
.3973af		d8		cld		                CLD                     ; Switch back to Binary arithmetic
.3973b0		28		plp		                PLP
.3973b1		fa		plx		                PLX
.3973b2		6b		rtl		                RTL
.3973b3						KBD_ENQ_ANSI
.3973b3		08		php		                PHP
.3973b4		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3973b6		c9 80		cmp #$80	                CMP #$80                        ; check to make sure the code is within range
.3973b8		b0 03		bcs $3973bd	                BGE chk_high_end
.3973ba		82 4a 00	brl $397407	                BRL done                        ; Out of range, just ignore it
.3973bd		c9 96		cmp #$96	chk_high_end    CMP #$96
.3973bf		90 03		bcc $3973c4	                BLT save_value
.3973c1		82 43 00	brl $397407	                BRL done                        ; Out of range, just ignore it
.3973c4		48		pha		save_value      PHA
.3973c5		a9 5b		lda #$5b	                LDA #'['
.3973c7		22 6d 71 39	jsl $39716d	                JSL KBD_CHAR_ENQUEUE
.3973cb		68		pla		                PLA
.3973cc		38		sec		                SEC
.3973cd		e9 80		sbc #$80	                SBC #$80                ; Convert to an offset
.3973cf		aa		tax		                TAX                     ; And use it as an index to...
.3973d0		bf 09 74 39	lda $397409,x	                LDA @l ENCODE_CODE,X    ; Get the number
.3973d4		10 0b		bpl $3973e1	                BPL send_number         ; If MSB is not set, send the number as-is
.3973d6		29 7f		and #$7f	                AND #$7F                ; Remove the MSB
.3973d8		18		clc		                CLC
.3973d9		69 41		adc #$41	                ADC #'A'                ; Convert to 'A' .. 'D'
.3973db		22 6d 71 39	jsl $39716d	                JSL KBD_CHAR_ENQUEUE    ; Enqueue the code
.3973df		80 26		bra $397407	                BRA done
.3973e1		22 a1 73 39	jsl $3973a1	send_number     JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.3973e5		22 7b 73 39	jsl $39737b	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.3973e9		22 26 72 39	jsl $397226	chk_modifier    JSL KBD_GETMODS_ANSI    ; Get the modifiers
.3973ed		c9 00		cmp #$00	                CMP #0                  ; Are there any?
.3973ef		f0 10		beq $397401	                BEQ close               ; No: close the sequence
.3973f1		48		pha		                PHA
.3973f2		a9 3b		lda #$3b	                LDA #';'                ; Enqueue the separator
.3973f4		22 6d 71 39	jsl $39716d	                JSL KBD_CHAR_ENQUEUE
.3973f8		68		pla		                PLA
.3973f9		22 a1 73 39	jsl $3973a1	                JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.3973fd		22 7b 73 39	jsl $39737b	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.397401		a9 7e		lda #$7e	close           LDA #'~'                ; Enqueue closing code
.397403		22 6d 71 39	jsl $39716d	                JSL KBD_CHAR_ENQUEUE
.397407		28		plp		done            PLP
.397408		6b		rtl		                RTL
>397409		01 02 03 04 05 06		ENCODE_CODE     .byte 1, 2, 3, 4, 5, 6      ; Insert, etc...
>39740f		80 81 82 83			                .byte $80, $81, $82, $83    ; Cursor keys
>397413		0b 0c 0d 0e 0f			                .byte 11, 12, 13, 14, 15    ; F1 - F5
>397418		11 12 13 14 15			                .byte 17, 18, 19, 20, 21    ; F6 - F10
>39741d		17 18				                .byte 23, 24                ; F11 - F12
.39741f						KBD_SETTABLE
.39741f		48		pha		                PHA
.397420		8b		phb		                PHB
.397421		0b		phd		                PHD
.397422		08		php		                PHP
.397423		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.397426		2b		pld		                PLD
.397427		e2 20		sep #$20	                SEP #$20        ; set A short
.397429		8b		phb		                PHB                 ; Get the data bank into A
.39742a		68		pla		                PLA
.39742b		c2 20		rep #$20	                REP #$20        ; set A long
.39742d		29 ff 00	and #$00ff	                AND #$00FF
.397430		85 29		sta $0f29	                STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.397432		85 2d		sta $0f2d	                STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.397434		85 31		sta $0f31	                STA #S_KBD_CONTROL.TBL_CTRL+2,D
.397436		85 35		sta $0f35	                STA #S_KBD_CONTROL.TBL_LOCK+2,D
.397438		85 39		sta $0f39	                STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.39743a		85 3d		sta $0f3d	                STA #S_KBD_CONTROL.TBL_CTRL_SHIFT+2,D
.39743c		86 27		stx $0f27	                STX #S_KBD_CONTROL.TBL_UNMOD,D
.39743e		86 2b		stx $0f2b	                STX #S_KBD_CONTROL.TBL_SHIFT,D
.397440		86 2f		stx $0f2f	                STX #S_KBD_CONTROL.TBL_CTRL,D
.397442		86 33		stx $0f33	                STX #S_KBD_CONTROL.TBL_LOCK,D
.397444		86 37		stx $0f37	                STX #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.397446		86 3b		stx $0f3b	                STX #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.397448		28		plp		                PLP
.397449		2b		pld		                PLD
.39744a		ab		plb		                PLB
.39744b		68		pla		                PLA
.39744c		6b		rtl		                RTL
>39744d						.align 256
>397500		00 01 02 03 04 05 06 07		TBL_SET1        .byte $00, $01, $02, $03, $04, $05, $06, $07    ; $00 - $07
>397508		08 09 0a 0b 0c 0d 0e 0f		                .byte $08, $09, $0A, $0B, $0C, $0D, $0E, $0F    ; $08 - $0F
>397510		10 11 12 13 14 15 16 17		                .byte $10, $11, $12, $13, $14, $15, $16, $17    ; $10 - $17
>397518		18 19 1a 1b 1c 1d 1e 1f		                .byte $18, $19, $1A, $1B, $1C, $1D, $1E, $1F    ; $18 - $1F
>397520		20 21 22 23 24 25 26 27		                .byte $20, $21, $22, $23, $24, $25, $26, $27    ; $20 - $27
>397528		28 29 2a 2b 2c 2d 2e 2f		                .byte $28, $29, $2A, $2B, $2C, $2D, $2E, $2F    ; $28 - $2F
>397530		30 31 32 33 34 35 36 37		                .byte $30, $31, $32, $33, $34, $35, $36, $37    ; $30 - $37
>397538		38 39 3a 3b 3c 3d 3e 3f		                .byte $38, $39, $3A, $3B, $3C, $3D, $3E, $3F    ; $38 - $3F
>397540		40 41 42 43 44 45 46 47		                .byte $40, $41, $42, $43, $44, $45, $46, $47    ; $40 - $47
>397548		48 49 4a 4b 4c 4d 4e 4f		                .byte $48, $49, $4A, $4B, $4C, $4D, $4E, $4F    ; $48 - $4F
>397550		50 51 52 53 54 55 56 57		                .byte $50, $51, $52, $53, $54, $55, $56, $57    ; $50 - $57
>397558		58 00 00 00 00 00 00 00		                .byte $58, $00, $00, $00, $00, $00, $00, $00    ; $58 - $5F
>397560		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>397568		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>397570		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>397578		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
>397580		00 00 00 00 00 00 00 00		TBL_SET1_E0     .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $00 - $07
>397588		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $08 - $0F
>397590		70 00 00 00 00 00 00 00		                .byte $70, $00, $00, $00, $00, $00, $00, $00    ; $10 - $17
>397598		00 71 00 00 6d 5e 00 00		                .byte $00, $71, $00, $00, $6D, $5E, $00, $00    ; $18 - $1F
>3975a0		72 00 6e 00 6f 00 00 00		                .byte $72, $00, $6E, $00, $6F, $00, $00, $00    ; $20 - $27
>3975a8		00 00 00 00 00 00 73 00		                .byte $00, $00, $00, $00, $00, $00, $73, $00    ; $28 - $2F
>3975b0		74 00 00 00 00 6c 00 00		                .byte $74, $00, $00, $00, $00, $6C, $00, $00    ; $30 - $37
>3975b8		5c 00 00 00 00 00 00 00		                .byte $5C, $00, $00, $00, $00, $00, $00, $00    ; $38 - $3F
>3975c0		00 00 00 00 00 00 61 63		                .byte $00, $00, $00, $00, $00, $00, $61, $63    ; $40 - $47
>3975c8		68 64 00 69 00 6b 00 66		                .byte $68, $64, $00, $69, $00, $6B, $00, $66    ; $48 - $4F
>3975d0		6a 67 62 65 00 00 00 00		                .byte $6A, $67, $62, $65, $00, $00, $00, $00    ; $50 - $57
>3975d8		00 00 00 00 00 5d 00 00		                .byte $00, $00, $00, $00, $00, $5D, $00, $00    ; $58 - $5F
>3975e0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>3975e8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>3975f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>3975f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
.397600						KBD_STATE_MACH
>397600		00 e0 01 00			                .byte KBD_STATE_IDLE, $E0, KBD_STATE_E0, 0                          ; IDLE =[E0]=> STATE_E0
>397604		00 e1 04 00			                .byte KBD_STATE_IDLE, $E1, KBD_STATE_E1, 0                          ; IDLE =[E1]=> STATE_E1
>397608		00 00 00 01			                .byte KBD_STATE_IDLE, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_BASE       ; IDLE =[default]=> IDLE / emit(TBL_SET1[x])
>39760c		01 2a 02 00			                .byte KBD_STATE_E0, $2A, KBD_STATE_E02A, 0                          ; STATE_E0 =[2A]=> STATE_E02A
>397610		01 b7 09 00			                .byte KBD_STATE_E0, $B7, KBD_STATE_E0B7, 0                          ; STATE_E0 =[B7]=> STATE_E0B7
>397614		01 00 00 02			                .byte KBD_STATE_E0, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_E0           ; STATE_E0 =[default]=> IDLE, emit(TBL_SET1_E0[x])
>397618		02 e0 03 00			                .byte KBD_STATE_E02A, $E0, KBD_STATE_E02AE0, 0                      ; STATE_E02A =[E0]=> STATE_E02AE0
>39761c		02 00 00 00			                .byte KBD_STATE_E02A, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E02A =[default]=> IDLE, ignore(x)
>397620		03 37 00 60			                .byte KBD_STATE_E02AE0, $37, KBD_STATE_IDLE, $60                    ; STATE_E02AE0 =[37]=> IDLE, emit(make{PrintScreen})
>397624		03 00 00 00			                .byte KBD_STATE_E02AE0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E02AE0 =[default]=> IDLE, ignore(x)
>397628		09 e0 0a 00			                .byte KBD_STATE_E0B7, $E0, KBD_STATE_E0B7E0, 0                      ; STATE_E0B7 =[E0]=> STATE_E0B7E0
>39762c		09 00 00 00			                .byte KBD_STATE_E0B7, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E0B7 =[default]=> IDLE, ignore(x)
>397630		0a aa 00 e0			                .byte KBD_STATE_E0B7E0, $AA, KBD_STATE_IDLE, $E0                    ; STATE_E0B7E0 =[AA]=> IDLE, emit(break{PrintScreen})
>397634		0a 00 00 00			                .byte KBD_STATE_E0B7E0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E0B7E0 =[default]=> IDLE, ignore(x)
>397638		04 1d 05 00			                .byte KBD_STATE_E1, $1D, KBD_STATE_E11D, 0                          ; STATE_E1 =[1D]=> STATE_E11D
>39763c		04 00 00 00			                .byte KBD_STATE_E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE            ; STATE_E1 =[default]=> IDLE, ignore(x)
>397640		05 45 06 00			                .byte KBD_STATE_E11D, $45, KBD_STATE_E11D45, 0                      ; STATE_E11D =[45]=> STATE_E11D45
>397644		05 00 00 00			                .byte KBD_STATE_E11D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E11D =[default]=> IDLE, ignore(x)
>397648		06 e1 07 00			                .byte KBD_STATE_E11D45, $E1, KBD_STATE_E11D45E1, 0                  ; STATE_E11D45 =[E1]=> STATE_E11D45E1
>39764c		06 00 00 00			                .byte KBD_STATE_E11D45, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E11D45 =[default]=> IDLE, ignore(x)
>397650		07 9d 08 00			                .byte KBD_STATE_E11D45E1, $9D, KBD_STATE_E11D45E19D, 0              ; STATE_E11D45E1 =[9D]=> STATE_E11D45E19D
>397654		07 00 00 00			                .byte KBD_STATE_E11D45E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE      ; STATE_E11D45E1 =[default]=> IDLE, ignore(x)
>397658		08 c5 00 61			                .byte KBD_STATE_E11D45E19D, $C5, KBD_STATE_IDLE, $61                ; STATE_E11D45E19D =[C5]=> IDLE, emit(make{Pause})
>39765c		08 00 00 00			                .byte KBD_STATE_E11D45E19D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE    ; STATE_E11D45E19D =[default]=> IDLE, ignore(x)
>397660		ff ff ff ff			                .byte $FF, $FF, $FF, $FF                                            ; End of state machine
>397664						.align 256
>397700		00 1b 31 32 33 34 35 36		SC_US_UNMOD     .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>397708		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>397710		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>397718		6f 70 5b 5d 0d 00 61 73		                .byte 'o', 'p', '[', ']', $0D, $00, 'a', 's'                        ; $18 - $1F
>397720		64 66 67 68 6a 6b 6c 3b		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';'                        ; $20 - $27
>397728		27 60 00 5c 7a 78 63 76		                .byte $27, '`', $00, '\', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>397730		62 6e 6d 2c 2e 2f 00 2a		                .byte 'b', 'n', 'm', ',', '.', '/', $00, '*'                        ; $30 - $37
>397738		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>397740		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>397748		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>397750		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>397758		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>397760		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>397768		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>397770		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>397778		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397780		00 1b 21 40 23 24 25 5e		SC_US_SHFT      .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>397788		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>397790		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>397798		4f 50 7b 7d 0a 00 41 53		                .byte 'O', 'P', '{', '}', $0A, $00, 'A', 'S'                        ; $18 - $1F
>3977a0		44 46 47 48 4a 4b 4c 3a		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':'                        ; $20 - $27
>3977a8		22 7e 00 7c 5a 58 43 56		                .byte $22, '~', $00, '|', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>3977b0		42 4e 4d 3c 3e 3f 00 00		                .byte 'B', 'N', 'M', '<', '>', '?', $00, $00                        ; $30 - $37
>3977b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>3977c0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>3977c8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>3977d0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>3977d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>3977e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>3977e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>3977f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>3977f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397800		00 1b 31 32 33 34 35 1e		SC_US_CTRL      .byte $00, $1B, '1', '2', '3', '4', '5', $1E                        ; $00 - $07
>397808		37 38 39 30 1f 3d 08 09		                .byte '7', '8', '9', '0', $1F, '=', $08, $09                        ; $08 - $0F
>397810		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>397818		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>397820		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>397828		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>397830		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>397838		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>397840		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>397848		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>397850		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>397858		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>397860		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>397868		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>397870		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>397878		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397880		00 1b 31 32 33 34 35 36		SC_US_LOCK      .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>397888		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>397890		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>397898		4f 50 5b 5d 0d 00 41 53		                .byte 'O', 'P', '[', ']', $0D, $00, 'A', 'S'                        ; $18 - $1F
>3978a0		44 46 47 48 4a 4b 4c 3b		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';'                        ; $20 - $27
>3978a8		27 60 00 5c 5a 58 43 56		                .byte $27, '`', $00, '\', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>3978b0		42 4e 4d 2c 2e 2f 00 00		                .byte 'B', 'N', 'M', ',', '.', '/', $00, $00                        ; $30 - $37
>3978b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>3978c0		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>3978c8		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>3978d0		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>3978d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>3978e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>3978e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>3978f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>3978f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397900		00 1b 21 40 23 24 25 5e		SC_US_LOCK_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>397908		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>397910		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>397918		6f 70 7b 7d 0a 00 61 73		                .byte 'o', 'p', '{', '}', $0A, $00, 'a', 's'                        ; $18 - $1F
>397920		64 66 67 68 6a 6b 6c 3a		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ':'                        ; $20 - $27
>397928		22 7e 00 7c 7a 78 63 76		                .byte $22, '~', $00, '|', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>397930		62 6e 6d 3c 3e 3f 00 00		                .byte 'b', 'n', 'm', '<', '>', '?', $00, $00                        ; $30 - $37
>397938		00 20 00 00 00 00 00 00		                .byte $00, ' ', $00, $00, $00, $00, $00, $00                        ; $38 - $3F
>397940		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>397948		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>397950		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>397958		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>397960		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>397968		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>397970		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>397978		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397980		00 1b 21 40 23 24 25 5e		SC_US_CTRL_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>397988		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>397990		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>397998		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>3979a0		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>3979a8		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>3979b0		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>3979b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>3979c0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>3979c8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>3979d0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>3979d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>3979e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>3979e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>3979f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>3979f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/mouse_driver.asm

.397a00						IINITMOUSE
.397a00		48		pha		                PHA
.397a01		da		phx		                PHX
.397a02		8b		phb		                PHB
.397a03		0b		phd		                PHD
.397a04		08		php		                PHP
.397a05		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.397a08		ab		plb		                PLB
.397a09		ab		plb		                PLB
.397a0a		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.397a0d		2b		pld		                PLD
.397a0e		78		sei		                SEI
.397a0f		e2 20		sep #$20	                SEP #$20        ; set A short
.397a11		c2 10		rep #$10	                REP #$10        ; set X long
.397a13		18		clc		                CLC
.397a14		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.397a17		20 02 7b	jsr $397b02	DO_CMD_A9_AGAIN JSR Poll_Inbuf_Mouse_TimeOut
.397a1a		b0 0b		bcs $397a27	                BCS mouse_init_fail
.397a1c		a9 a9		lda #$a9	                LDA #$A9                        ; Tests second PS2 Channel
.397a1e		8f 07 18 af	sta $af1807	                STA @l KBD_CMD_BUF
.397a22		20 da 7a	jsr $397ada	                JSR Poll_Outbuf_Mouse_TimeOut
.397a25		90 2b		bcc $397a52	                BCC mouse_found
.397a27		a9 00		lda #$00	mouse_init_fail LDA #0                          ; Disable the mouse pointer
.397a29		8f 00 07 af	sta $af0700	                STA @l MOUSE_PTR_CTRL_REG_L
.397a2d		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Make sure the mouse interrupt is disabled
.397a31		09 80		ora #$80	                ORA #FNX0_INT07_MOUSE
.397a33		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.397a37		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1         ; Read the Pending Register &
.397a3b		29 01		and #$01	                AND #FNX1_INT00_KBD
.397a3d		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1         ; Writing it back will clear the Active Bit
.397a41		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.397a45		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.397a47		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.397a4b		28		plp		                PLP                             ; Return failure
.397a4c		2b		pld		                PLD
.397a4d		ab		plb		                PLB
.397a4e		fa		plx		                PLX
.397a4f		68		pla		                PLA
.397a50		38		sec		                SEC
.397a51		6b		rtl		                RTL
.397a52		af 03 18 af	lda $af1803	mouse_found     LDA @l KBD_OUT_BUF              ; Clear the Output buffer
.397a56		c9 00		cmp #$00	                CMP #$00
.397a58		d0 bd		bne $397a17	                BNE DO_CMD_A9_AGAIN
.397a5a		a9 f5		lda #$f5	                LDA #$F5                        ; Disable the mouse
.397a5c		20 ac 7a	jsr $397aac	                JSR MOUSE_WRITE
.397a5f		20 c1 7a	jsr $397ac1	                JSR MOUSE_READ
.397a62		b0 c3		bcs $397a27	                BCS mouse_init_fail
.397a64		a9 f6		lda #$f6	                LDA #$F6                        ;Tell the mouse to use default settings
.397a66		20 ac 7a	jsr $397aac	                JSR MOUSE_WRITE
.397a69		20 c1 7a	jsr $397ac1	                JSR MOUSE_READ
.397a6c		b0 b9		bcs $397a27	                BCS mouse_init_fail
.397a6e		a9 e8		lda #$e8	                LDA #$E8
.397a70		20 ac 7a	jsr $397aac	                JSR MOUSE_WRITE
.397a73		20 c1 7a	jsr $397ac1	                JSR MOUSE_READ
.397a76		b0 af		bcs $397a27	                BCS mouse_init_fail
.397a78		a9 00		lda #$00	                LDA #$00
.397a7a		20 ac 7a	jsr $397aac	                JSR MOUSE_WRITE
.397a7d		20 c1 7a	jsr $397ac1	                JSR MOUSE_READ
.397a80		b0 a5		bcs $397a27	                BCS mouse_init_fail
.397a82		a9 f4		lda #$f4	                LDA #$F4                        ; Enable the Mouse
.397a84		20 ac 7a	jsr $397aac	                JSR MOUSE_WRITE
.397a87		20 c1 7a	jsr $397ac1	                JSR MOUSE_READ
.397a8a		b0 9b		bcs $397a27	                BCS mouse_init_fail
.397a8c		a9 00		lda #$00	                LDA #$00
.397a8e		8d e0 00	sta $00e0	                STA @w MOUSE_IDX
.397a91		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.397a95		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.397a97		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.397a9b		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Enable the mouse interrupt
.397a9f		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.397aa1		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.397aa5		28		plp		mouse_init_ok   PLP
.397aa6		2b		pld		                PLD
.397aa7		ab		plb		                PLB
.397aa8		fa		plx		                PLX
.397aa9		68		pla		                PLA
.397aaa		18		clc		                CLC
.397aab		6b		rtl		                RTL
.397aac						MOUSE_WRITE
.397aac		e2 20		sep #$20	                SEP #$20        ; set A short
.397aae		48		pha		                PHA
.397aaf		20 f5 7a	jsr $397af5	                JSR Poll_Inbuf          ; Test bit $01 (if 2, Full)
.397ab2		a9 d4		lda #$d4	                LDA #$D4
.397ab4		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF         ; KBD_CMD_BUF		= $AF1064
.397ab8		20 f5 7a	jsr $397af5	                JSR Poll_Inbuf
.397abb		68		pla		                PLA
.397abc		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF        ; KBD_DATA_BUF	= $AF1060
.397ac0		60		rts		                RTS
.397ac1						MOUSE_READ
.397ac1		e2 20		sep #$20	                SEP #$20        ; set A short
.397ac3		20 da 7a	jsr $397ada	                JSR Poll_Outbuf_Mouse_TimeOut   ; Test bit $01 (if 1, Full)
.397ac6		b0 04		bcs $397acc	                BCS done
.397ac8		af 03 18 af	lda $af1803	                LDA KBD_INPT_BUF        ; KBD_INPT_BUF	= $AF1060
.397acc		60		rts		done            RTS
.397acd						Poll_Outbuf_Mouse
.397acd		e2 20		sep #$20	                SEP #$20        ; set A short
.397acf		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.397ad3		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.397ad5		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.397ad7		d0 f6		bne $397acf	                BNE wait
.397ad9		60		rts		                RTS
.397ada						Poll_Outbuf_Mouse_TimeOut
.397ada		e2 20		sep #$20	                SEP #$20        ; set A short
.397adc		c2 10		rep #$10	                REP #$10        ; set X long
.397ade		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.397ae1		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.397ae5		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.397ae7		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.397ae9		f0 08		beq $397af3	                BEQ ret_success
.397aeb		ca		dex		                DEX
.397aec		e0 00 00	cpx #$0000	                CPX #$0000
.397aef		d0 f0		bne $397ae1	                BNE wait
.397af1		38		sec		                SEC                     ; Return timeout error
.397af2		60		rts		                RTS
.397af3		18		clc		ret_success     CLC                     ; Return success
.397af4		60		rts		                RTS
.397af5						Poll_Inbuf
.397af5		e2 20		sep #$20	                SEP #$20        ; set A short
.397af7		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT         ; Load Status Byte
.397afb		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.397afd		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.397aff		f0 f6		beq $397af7	                BEQ wait
.397b01		60		rts		                RTS
.397b02						Poll_Inbuf_Mouse_TimeOut
.397b02		e2 20		sep #$20	                SEP #$20        ; set A short
.397b04		c2 10		rep #$10	                REP #$10        ; set X long
.397b06		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.397b09		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.397b0d		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.397b0f		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.397b11		d0 08		bne $397b1b	                BNE ret_success
.397b13		ca		dex		                DEX
.397b14		e0 00 00	cpx #$0000	                CPX #$0000
.397b17		d0 f0		bne $397b09	                BNE wait
.397b19		38		sec		                SEC                     ; Return timeout error
.397b1a		60		rts		                RTS
.397b1b		18		clc		ret_success     CLC                     ; Return success
.397b1c		60		rts		                RTS
.397b1d						MOUSE_INTERRUPT
.397b1d		8b		phb		                PHB
.397b1e		0b		phd		                PHD
.397b1f		08		php		                PHP
.397b20						                setasx
.397b20		78		sei		                SEI
.397b21		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.397b24		ab		plb		                PLB
.397b25		ab		plb		                PLB
.397b26		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.397b29		2b		pld		                PLD
.397b2a		ae e0 00	ldx $00e0	                LDX @w MOUSE_IDX                ; Get the # of the mouse byte to write
.397b2d		af 03 18 af	lda $af1803	                LDA @l KBD_INPT_BUF             ; Get the byte from the PS/2 interface
.397b31		9f 06 07 af	sta $af0706,x	                STA @l MOUSE_PTR_BYTE0,X        ; Store it into the correct Vicky register
.397b35		e8		inx		next_byte       INX                             ; Move to the next byte
.397b36		e0 03 00	cpx #$0003	                CPX #$03                        ; Have we written 3 bytes?
.397b39		d0 1b		bne $397b56	                BNE save_ptr                    ; No: return and wait for the next mouse interrupt
.397b3b		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.397b3f		85 e1		sta $e1		                STA @b MOUSE_POS_X_LO
.397b41		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.397b45		85 e2		sta $e2		                STA @b MOUSE_POS_X_HI
.397b47		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.397b4b		85 e3		sta $e3		                STA @b MOUSE_POS_Y_LO
.397b4d		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.397b51		85 e4		sta $e4		                STA @b MOUSE_POS_Y_HI
.397b53		a2 00 00	ldx #$0000	                LDX #0                          ; Reset our state machine to the beginning
.397b56		8e e0 00	stx $00e0	save_ptr        STX @w MOUSE_IDX                ; Save our next byte position (state)
.397b59		28		plp		                PLP
.397b5a		2b		pld		                PLD
.397b5b		ab		plb		                PLB
.397b5c		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/boot_sound.asm

.397b5d						BOOT_SOUND
.397b5d		48		pha		                PHA
.397b5e		da		phx		                PHX
.397b5f		08		php		                PHP
.397b60		e2 20		sep #$20	                SEP #$20        ; set A short
.397b62		a9 00		lda #$00	                LDA #0
.397b64		a2 00 00	ldx #$0000	                LDX #0
.397b67		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.397b6b		e8		inx		                INX                             ; Move to the next SID register
.397b6c		e0 18 00	cpx #$0018	                CPX #24
.397b6f		d0 f6		bne $397b67	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.397b71		a9 29		lda #$29	                LDA #$29                        ; Attack = 2, Decay = 9
.397b73		8f 05 e4 af	sta $afe405	                STA @l SID0_V1_ATCK_DECY
.397b77		8f 0c e4 af	sta $afe40c	                STA @l SID0_V2_ATCK_DECY
.397b7b		8f 13 e4 af	sta $afe413	                STA @l SID0_V3_ATCK_DECY
.397b7f		a9 1f		lda #$1f	                LDA #$1F                        ; Sustain = 1, Release = 5
.397b81		8f 06 e4 af	sta $afe406	                STA @l SID0_V1_SSTN_RLSE
.397b85		8f 0d e4 af	sta $afe40d	                STA @l SID0_V2_SSTN_RLSE
.397b89		8f 14 e4 af	sta $afe414	                STA @l SID0_V3_SSTN_RLSE
.397b8d		a9 0f		lda #$0f	                LDA #15                         ; Set the volume to max
.397b8f		8f 18 e4 af	sta $afe418	                STA @l SID0_MODE_VOL
.397b93		a9 60		lda #$60	                LDA #96                         ; Set voice 1 to F-3
.397b95		8f 00 e4 af	sta $afe400	                STA @l SID0_V1_FREQ_LO
.397b99		a9 16		lda #$16	                LDA #22
.397b9b		8f 01 e4 af	sta $afe401	                STA @l SID0_V1_FREQ_HI
.397b9f		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.397ba1		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.397ba5		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.397ba8		22 7e 0f 39	jsl $390f7e	                JSL ILOOP_MS
.397bac		a9 31		lda #$31	                LDA #49                         ; Set voice 2 to A-3
.397bae		8f 07 e4 af	sta $afe407	                STA @l SID0_V2_FREQ_LO
.397bb2		a9 08		lda #$08	                LDA #8
.397bb4		8f 08 e4 af	sta $afe408	                STA @l SID0_V2_FREQ_HI
.397bb8		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.397bba		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.397bbe		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.397bc1		22 7e 0f 39	jsl $390f7e	                JSL ILOOP_MS
.397bc5		a9 87		lda #$87	                LDA #135                        ; Set voice 3 to C-3
.397bc7		8f 0e e4 af	sta $afe40e	                STA @l SID0_V3_FREQ_LO
.397bcb		a9 21		lda #$21	                LDA #33
.397bcd		8f 0f e4 af	sta $afe40f	                STA @l SID0_V3_FREQ_HI
.397bd1		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.397bd3		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.397bd7		a2 20 4e	ldx #$4e20	                LDX #20000                      ; Hold down the keys, so to speak... for a while
.397bda		22 7e 0f 39	jsl $390f7e	                JSL ILOOP_MS
.397bde		a9 10		lda #$10	                LDA #$10                        ; Release the keys...
.397be0		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.397be4		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.397be8		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.397bec		a9 0e		lda #$0e	                LDA #14
.397bee		8f 18 e4 af	sta $afe418	dampen          STA @l SID0_MODE_VOL
.397bf2		a2 64 00	ldx #$0064	                LDX #100
.397bf5		22 7e 0f 39	jsl $390f7e	                JSL ILOOP_MS
.397bf9		3a		dec a		                DEC A
.397bfa		d0 f2		bne $397bee	                BNE dampen
.397bfc		28		plp		                PLP
.397bfd		fa		plx		                PLX
.397bfe		68		pla		                PLA
.397bff		6b		rtl		                RTL
.397c00						BOOT_SOUND_OFF
.397c00		48		pha		                PHA
.397c01		da		phx		                PHX
.397c02		08		php		                PHP
.397c03		a2 00 00	ldx #$0000	                LDX #0
.397c06		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.397c0a		e8		inx		                INX                             ; Move to the next SID register
.397c0b		e0 18 00	cpx #$0018	                CPX #24
.397c0e		d0 f6		bne $397c06	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.397c10		28		plp		                PLP
.397c11		fa		plx		                PLX
.397c12		68		pla		                PLA
.397c13		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\networking/net.asm


;******  Processing file: src\networking/lib_deque.asm

.0000						deque_t
>0000		00 00				head    .word   0
>0002		00 00				tail    .word   0
.0004						end
.0000						link_t
>0000						next    .word   ?
.0002						size

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/lan9221.asm

>397c14						        .align 512
.397e00						eth_read:
.397e00		da		phx		        phx
.397e01		bb		tyx		        tyx
.397e02		08		php		        php
.397e03		78		sei		        sei
.397e04		bf 02 e0 ae	lda $aee002,x	        lda @l  LAN + 2,x
.397e08		a8		tay		        tay
.397e09		bf 00 e0 ae	lda $aee000,x	        lda @l  LAN + 0,x
.397e0d		28		plp		        plp
.397e0e		fa		plx		        plx
.397e0f		60		rts		        rts
.397e10						eth_write:
.397e10		da		phx		        phx
.397e11		48		pha		        pha                     ; MSB in y, LSB on stack.
.397e12		a3 07		lda $07,s	        lda     7,s
.397e14		aa		tax		        tax
.397e15		68		pla		        pla
.397e16		08		php		        php
.397e17		78		sei		        sei
.397e18		9f 00 e0 ae	sta $aee000,x	        sta @l  LAN + 0,x
.397e1c		98		tya		        tya
.397e1d		9f 02 e0 ae	sta $aee002,x	        sta @l  LAN + 2,x
.397e21		28		plp		        plp
.397e22		fa		plx		        plx
.397e23		a3 01		lda $01,s	        lda     1,s     ; load the return address
.397e25		83 03		sta $03,s	        sta     3,s     ; store it atop the register arg
.397e27		68		pla		        pla             ; drop the return address
.397e28		60		rts		        rts
.397e29						rx_status:
.397e29		08		php		        php
.397e2a		78		sei		        sei
.397e2b		af 40 e0 ae	lda $aee040	        lda @l  LAN + hardware.lan9221.RX_STATUS_FIFO + 0
.397e2f		a8		tay		        tay
.397e30		af 42 e0 ae	lda $aee042	        lda @l  LAN + hardware.lan9221.RX_STATUS_FIFO + 2
.397e34		28		plp		        plp
.397e35		60		rts		        rts
.397e36						copy_buffer
.397e36		da		phx		        phx
.397e37		20 5d 80	jsr $39805d	        jsr     kernel.net.pbuf_alloc_x
.397e3a		20 29 7e	jsr $397e29	        jsr     rx_status   ; Already local
.397e3d		29 ff 3f	and #$3fff	        and     #$3fff
.397e40		9f 04 00 3c	sta $3c0004,x	        sta @l  kernel.net.pbuf.length,x
.397e44		18		clc		        clc
.397e45		69 03 00	adc #$0003	        adc     #3
.397e48		4a		lsr a		        lsr     a
.397e49		4a		lsr a		        lsr     a
.397e4a		18		clc		        clc
.397e4b		a8		tay		        tay
.397e4c		da		phx		        phx
.397e4d		af 00 e0 ae	lda $aee000	_loop   lda     LAN + hardware.lan9221.RX_DATA_FIFO + 0
.397e51		9f 06 00 3c	sta $3c0006,x	        sta @l  kernel.net.pbuf.eth,x
.397e55		e8		inx		        inx
.397e56		e8		inx		        inx
.397e57		af 02 e0 ae	lda $aee002	        lda     LAN + hardware.lan9221.RX_DATA_FIFO + 2
.397e5b		9f 06 00 3c	sta $3c0006,x	        sta @l  kernel.net.pbuf.eth,x
.397e5f		e8		inx		        inx
.397e60		e8		inx		        inx
.397e61		88		dey		        dey
.397e62		d0 e9		bne $397e4d	        bne     _loop
.397e64		68		pla		        pla
.397e65		fa		plx		        plx
.397e66		60		rts		        rts
.397e67						send_buffer:
.397e67		bf 04 00 3c	lda $3c0004,x	        lda     kernel.net.pbuf.length,x
.397e6b		09 00 30	ora #$3000	        ora     #4096+8192  ; first and last segment.
.397e6e		8f 20 e0 ae	sta $aee020	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 0
.397e72		a9 00 00	lda #$0000	        lda     #0
.397e75		8f 22 e0 ae	sta $aee022	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 2
.397e79		bf 04 00 3c	lda $3c0004,x	        lda     kernel.net.pbuf.length,x
.397e7d		8f 20 e0 ae	sta $aee020	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 0
.397e81		a9 00 00	lda #$0000	        lda     #0
.397e84		8f 22 e0 ae	sta $aee022	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 2
.397e88		bf 04 00 3c	lda $3c0004,x	        lda     kernel.net.pbuf.length,x
.397e8c		18		clc		        clc
.397e8d		69 03 00	adc #$0003	        adc     #3
.397e90		4a		lsr a		        lsr     a
.397e91		4a		lsr a		        lsr     a
.397e92		a8		tay		        tay
.397e93		da		phx		        phx
.397e94		bf 06 00 3c	lda $3c0006,x	_loop   lda     kernel.net.pbuf.eth,x
.397e98		8f 20 e0 ae	sta $aee020	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 0
.397e9c		e8		inx		        inx
.397e9d		e8		inx		        inx
.397e9e		bf 06 00 3c	lda $3c0006,x	        lda     kernel.net.pbuf.eth,x
.397ea2		8f 22 e0 ae	sta $aee022	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 2
.397ea6		e8		inx		        inx
.397ea7		e8		inx		        inx
.397ea8		88		dey		        dey
.397ea9		d0 e9		bne $397e94	        bne     _loop
.397eab		fa		plx		        plx     ; Packet
.397eac		60		rts		        rts
.397ead						eth_open:
.397ead		20 36 7f	jsr $397f36	        jsr     eth_is_up
.397eb0		b0 49		bcs $397efb	        bcs     _out
.397eb2		20 27 7f	jsr $397f27	        jsr     eth_reset
.397eb5		a0 50 00	ldy #$0050	        ldy     #ETH_ID_REV
.397eb8		20 00 7e	jsr $397e00	        jsr     eth_read
.397ebb		c9 21 92	cmp #$9221	        cmp     #$9221
.397ebe		a0 64 00	ldy #$0064	        ldy     #ETH_BYTE_TEST
.397ec1		20 00 7e	jsr $397e00	        jsr     eth_read
.397ec4		a0 00 77	ldy #$7700	        ldy     #$7700  ; was 7000
.397ec7		a9 00 00	lda #$0000	        lda     #$0000
.397eca		f4 88 00	pea #$0088	        pea     #ETH_GPIO_CFG
.397ecd		20 10 7e	jsr $397e10	        jsr     eth_write
.397ed0		20 71 7f	jsr $397f71	        jsr     set_mac
.397ed3		a0 10 00	ldy #$0010	        ldy     #$0010  ; full-duplex (broadcast on by default)
.397ed6		a9 0c 00	lda #$000c	        lda     #$000c  ; rx+tx
.397ed9		f4 01 00	pea #$0001	        pea     #1  ; MAC CONTROL REGISTER
.397edc		20 db 7f	jsr $397fdb	        jsr     mac_write
.397edf		a0 08 00	ldy #$0008	        ldy     #$0008
.397ee2		a9 00 00	lda #$0000	        lda     #$0000
.397ee5		f4 5c 00	pea #$005c	        pea     #ETH_INT_EN
.397ee8		20 10 7e	jsr $397e10	        jsr     eth_write
.397eeb		20 1a 7f	jsr $397f1a	        jsr     eth_timer_reset
.397eee		a0 00 00	ldy #$0000	        ldy     #0
.397ef1		a9 06 00	lda #$0006	        lda     #6  ; tx enabled, allow status overrun.
.397ef4		f4 70 00	pea #$0070	        pea     #ETH_TX_CFG
.397ef7		20 10 7e	jsr $397e10	        jsr     eth_write
.397efa		18		clc		        clc
.397efb		60		rts		_out    rts
.397efc		38		sec		_err    sec
.397efd		4c fb 7e	jmp $397efb	        jmp     _out
.397f00						eth_tick:
.397f00		a0 58 00	ldy #$0058	        ldy     #ETH_INT_STS
.397f03		20 00 7e	jsr $397e00	        jsr     eth_read
.397f06		98		tya		        tya
.397f07		29 08 00	and #$0008	        and     #$0008
.397f0a		f0 0d		beq $397f19	        beq     _out
.397f0c		a8		tay		        tay
.397f0d		a9 00 00	lda #$0000	        lda     #0
.397f10		f4 58 00	pea #$0058	        pea     #ETH_INT_STS
.397f13		20 10 7e	jsr $397e10	        jsr     eth_write
.397f16		20 1a 7f	jsr $397f1a	        jsr     eth_timer_reset
.397f19		60		rts		_out    rts
.397f1a						eth_timer_reset
.397f1a		a0 00 20	ldy #$2000	        ldy     #$2000
.397f1d		a9 e8 03	lda #$03e8	        lda     #1000   ; 100ms
.397f20		f4 8c 00	pea #$008c	        pea     #ETH_GPT_CFG
.397f23		20 10 7e	jsr $397e10	        jsr     eth_write
.397f26		60		rts		        rts
.397f27						eth_reset:
.397f27		a0 00 00	ldy #$0000	        ldy     #$0000
.397f2a		a9 01 00	lda #$0001	        lda     #$0001
.397f2d		f4 74 00	pea #$0074	        pea     #ETH_HW_CFG
.397f30		20 10 7e	jsr $397e10	        jsr     eth_write
.397f33		4c 36 7f	jmp $397f36	        jmp     eth_is_up
.397f36						eth_is_up:
.397f36		a2 64 00	ldx #$0064	        ldx     #100    ; ms ish
.397f39		a0 84 00	ldy #$0084	_loop   ldy     #ETH_PMT_CTRL
.397f3c		20 00 7e	jsr $397e00	        jsr     eth_read
.397f3f		29 01 00	and #$0001	        and     #1
.397f42		f0 02		beq $397f46	        beq     _retry
.397f44		18		clc		        clc
.397f45		60		rts		_out    rts
.397f46		38		sec		_retry  sec
.397f47		ca		dex		        dex
.397f48		f0 fb		beq $397f45	        beq     _out
.397f4a		a9 10 27	lda #$2710	        lda     #10000
.397f4d		ea		nop		_delay  nop
.397f4e		ea		nop		        nop
.397f4f		ea		nop		        nop
.397f50		ea		nop		        nop
.397f51		3a		dec a		        dec     a
.397f52		d0 f9		bne $397f4d	        bne     _delay
.397f54		4c 39 7f	jmp $397f39	        jmp     _loop
.397f57						eth_packet_send
.397f57		20 67 7e	jsr $397e67	        jsr     send_buffer
.397f5a		4c 6e 80	jmp $39806e	        jmp     kernel.net.pbuf_free_x
.397f5d						eth_packet_recv
.397f5d		20 66 7f	jsr $397f66	        jsr     get_rx_count
.397f60		f0 03		beq $397f65	        beq     _done
.397f62		20 36 7e	jsr $397e36	        jsr     copy_buffer
.397f65		60		rts		_done   rts
.397f66						get_rx_count
.397f66		a0 7c 00	ldy #$007c	        ldy     #ETH_RX_FIFO_INF
.397f69		20 00 7e	jsr $397e00	        jsr     eth_read
.397f6c		98		tya		        tya
.397f6d		29 ff 00	and #$00ff	        and     #$ff
.397f70		60		rts		        rts
.397f71						set_mac:
.397f71		a0 00 00	ldy #$0000	        ldy     #0
.397f74		af 87 86 39	lda $398687	        lda     kernel.net.conf.eth_mac+4
.397f78		f4 02 00	pea #$0002	        pea     #ETH_MAC_ADDRH
.397f7b		20 db 7f	jsr $397fdb	        jsr     mac_write
.397f7e		af 85 86 39	lda $398685	        lda     kernel.net.conf.eth_mac+2
.397f82		a8		tay		        tay
.397f83		af 83 86 39	lda $398683	        lda     kernel.net.conf.eth_mac+0
.397f87		f4 03 00	pea #$0003	        pea     #ETH_MAC_ADDRL
.397f8a		20 db 7f	jsr $397fdb	        jsr     mac_write
.397f8d		60		rts		        rts
=31						ETH_PHY_SPECIAL = 31
.397f8e						get_phy_speed:
.397f8e		a0 1f 00	ldy #$001f	        ldy     #ETH_PHY_SPECIAL
.397f91		20 9b 7f	jsr $397f9b	        jsr     phy_read
.397f94		4a		lsr a		        lsr     a
.397f95		4a		lsr a		        lsr     a
.397f96		18		clc		        clc
.397f97		29 07 00	and #$0007	        and     #7
.397f9a		60		rts		        rts
.397f9b						phy_read:
.397f9b		20 ba 7f	jsr $397fba	        jsr     phy_wait
.397f9e		98		tya		        tya
.397f9f		a0 00 00	ldy #$0000	        ldy     #0              ; MSB
.397fa2		29 1f 00	and #$001f	        and     #31
.397fa5		eb		xba		        xba
.397fa6		4a		lsr a		        lsr     a
.397fa7		4a		lsr a		        lsr     a
.397fa8		09 01 08	ora #$0801	        ora     #2049           ; LSB: PHY #1 + MIIBZY
.397fab		f4 06 00	pea #$0006	        pea     #ETH_MAC_MII_ACC
.397fae		20 db 7f	jsr $397fdb	        jsr     mac_write       ; Request the read.
.397fb1		20 ba 7f	jsr $397fba	        jsr     phy_wait        ; Data should now be in MAC's MII_DATA.
.397fb4		a0 07 00	ldy #$0007	        ldy     #ETH_MAC_MII_DATA
.397fb7		4c c8 7f	jmp $397fc8	        jmp     mac_read
.397fba						phy_wait:
.397fba		5a		phy		        phy
.397fbb		a0 06 00	ldy #$0006	_loop   ldy     #ETH_MAC_MII_ACC
.397fbe		20 c8 7f	jsr $397fc8	        jsr     mac_read
.397fc1		29 01 00	and #$0001	        and     #1
.397fc4		d0 f5		bne $397fbb	        bne     _loop
.397fc6		7a		ply		        ply
.397fc7		60		rts		        rts
.397fc8						mac_read:
.397fc8		98		tya		        tya             ; Register.
.397fc9		a0 00 c0	ldy #$c000	        ldy     #$c000  ; Read operation.
.397fcc		f4 a4 00	pea #$00a4	        pea     #ETH_MAC_CSR_CMD
.397fcf		20 10 7e	jsr $397e10	        jsr     eth_write
.397fd2		20 f4 7f	jsr $397ff4	        jsr     mac_wait
.397fd5		a0 a8 00	ldy #$00a8	        ldy     #ETH_MAC_CSR_DATA
.397fd8		4c 00 7e	jmp $397e00	        jmp     eth_read
.397fdb						mac_write:
.397fdb		f4 a8 00	pea #$00a8	        pea     #ETH_MAC_CSR_DATA
.397fde		20 10 7e	jsr $397e10	        jsr     eth_write
.397fe1		a3 03		lda $03,s	        lda     3,s     ; Register to write
.397fe3		a0 00 80	ldy #$8000	        ldy     #$8000  ; Write operation
.397fe6		f4 a4 00	pea #$00a4	        pea     #ETH_MAC_CSR_CMD
.397fe9		20 10 7e	jsr $397e10	        jsr     eth_write
.397fec		a3 01		lda $01,s	        lda     1,s
.397fee		83 03		sta $03,s	        sta     3,s
.397ff0		68		pla		        pla
.397ff1		4c f4 7f	jmp $397ff4	        jmp     mac_wait
.397ff4						mac_wait:
.397ff4		a0 a4 00	ldy #$00a4	_loop   ldy     #ETH_MAC_CSR_CMD
.397ff7		20 00 7e	jsr $397e00	        jsr     eth_read
.397ffa		c0 00 80	cpy #$8000	        cpy     #$8000
.397ffd		10 f5		bpl $397ff4	        bpl     _loop
.397fff		60		rts		        rts
=$00						RX_DATA_FIFO    = $00   ; Through $1f
=$20						TX_DATA_FIFO    = $20   ; Through $3f
=$40						RX_STATUS_FIFO  = $40
=$48						TX_STATIS_FIFO  = $48
=$50						ETH_ID_REV      = $50
=$54						ETH_IRQ_CFG     = $54
=$58						ETH_INT_STS     = $58
=$5c						ETH_INT_EN      = $5c
=$64						ETH_BYTE_TEST   = $64
=$68						ETH_FIFO_INT    = $68
=$6c						ETH_RX_CFG      = $6c
=$70						ETH_TX_CFG      = $70
=$74						ETH_HW_CFG      = $74
=$78						ETH_RX_DP_CTL   = $78
=$7c						ETH_RX_FIFO_INF = $7c
=$80						ETH_TX_FIFO_INF = $80
=$84						ETH_PMT_CTRL    = $84
=$88						ETH_GPIO_CFG    = $88
=$8c						ETH_GPT_CFG     = $8c
=$90						ETH_GPT_CNT     = $90
=$98						ETH_WORD_SWAP   = $98
=$9c						ETH_FREE_RUN    = $9c
=$a0						ETH_RX_DROP     = $a0
=$a4						ETH_MAC_CSR_CMD = $a4
=$a8						ETH_MAC_CSR_DATA= $a8
=$ac						ETH_AFC_CFG     = $ac
=$b0						ETH_E2P_CMD     = $b0
=$b4						ETH_E2P_DATA    = $b4
=$1						ETH_MAC_MAC_CR  = $1
=$2						ETH_MAC_ADDRH   = $2
=$3						ETH_MAC_ADDRL   = $3
=$4						ETH_MAC_HASHH   = $4
=$5						ETH_MAC_HASHL   = $5
=$6						ETH_MAC_MII_ACC = $6
=$7						ETH_MAC_MII_DATA= $7
=$8						ETH_MAC_FLOW    = $8
=$9						ETH_MAC_VLAN1   = $9
=$a						ETH_MAC_VLAN2   = $a
=$b						ETH_MAC_WUFF    = $b
=$c						ETH_MAC_WUCSR   = $c
=$d						ETH_MAC_COE_CR  = $d
=$e						ETH_MAC_MAX     = $e

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/user.asm


;******  Processing file: src\networking/../Libraries/networking.asm

.0000						ip_info
>0000						ip          .fill   4   ; Local ipv4 address in network order
>0004						mask        .fill   4   ; Local ipv4 netmask in network order
>0008						default     .fill   4   ; Default ipv4 route in network order
.000c						size
.0000						udp_info
>0000						local_port  .word   ?   ; local port #, little-endian
>0002						remote_ip   .fill   4   ; ipv4 address of remote machine, network order
>0006						remote_port .word   ?   ; remote port #, little endian
>0008						buffer      .dword  ?   ; 24-bit address of your data
>000c						buflen      .word   ?   ; length of the above buffer in bytes
>000e						copied      .word   ?   ; number of bytes copied in/out of the above buffer
.0010						size

;******  Return to file: src\networking/user.asm

.398000						init
.398000		20 12 80	jsr $398012	            jsr     call
.398003		6b		rtl		            rtl
>398004		97 86				            .word   <>net.init
.398006						udp_send
.398006		20 12 80	jsr $398012	            jsr     call
.398009		6b		rtl		            rtl
>39800a		62 87				            .word   <>net.udp_send
.39800c						udp_recv
.39800c		20 12 80	jsr $398012	            jsr     call
.39800f		6b		rtl		            rtl
>398010		9a 87				            .word   <>net.udp_recv
.398012						call
=195						        czvn = 1+2+64+128
.398012		c2 c3		rep #$c3	        rep     #czvn       ; Clear czvn
.398014		08		php		        php
.398015		c2 f7		rep #$f7	        rep     #255-8      ; Clear all but i
.398017		5a		phy		        phy
.398018		da		phx		        phx
.398019		0b		phd		        phd
.39801a		8b		phb		        phb
.39801b		48		pha		        pha                 ; [a:b:d:x:y:p:rts:rtl]
.39801c		a3 0b		lda $0b,s	        lda     11,s        ; return vector
.39801e		aa		tax		        tax
.39801f		a3 06		lda $06,s	        lda     6,s         ; X (new D)
.398021		5b		tcd		        tcd
>398022		fc 02 00			        .byte   $fc,2,0   ; jsr (2,x), but the assembler won't let me...
.398025		08		php		        php
.398026		e2 20		sep #$20	        sep     #$20
.398028		a3 01		lda $01,s	        lda     1,s
.39802a		29 c3		and #$c3	        and     #czvn
.39802c		03 0b		ora $0b,s	        ora     11,s
.39802e		83 0b		sta $0b,s	        sta     11,s
.398030		28		plp		        plp
.398031		68		pla		        pla
.398032		ab		plb		        plb
.398033		2b		pld		        pld
.398034		fa		plx		        plx
.398035		7a		ply		        ply
.398036		28		plp		        plp
.398037		60		rts		        rts

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/packet.asm

.0000						udp_t
>0000						sport   .word   ?
>0002						dport   .word   ?
>0004						length  .word   ?
>0006						check   .word   ?
.0008						data
.0008						size
.0000						icmp_t
>0000						type    .byte   ?
>0001						code    .byte   ?
>0002						check   .fill   2
>0004						ident   .word   ?
>0006						seq     .fill   2
.0000						ip_t
>0000						ihl     .fill   1
>0001						tos     .byte   ?
>0002						len     .fill   2
>0004						id      .fill   2
>0006						flags   .fill   2
>0008						ttl     .byte   ?
>0009						proto   .byte   ?
>000a						check   .fill   2
>000c						src     .fill   4
>0010						dest    .fill   4
.0014						size
>0014						sport       .word   ?
>0016						dport       .word   ?
.0014						udp
>0014						sport   .word   ?
>0016						dport   .word   ?
>0018						length  .word   ?
>001a						check   .word   ?
.001c						data
.001c						size
.0014						icmp
>0014						type    .byte   ?
>0015						code    .byte   ?
>0016						check   .fill   2
>0018						ident   .word   ?
>001a						seq     .fill   2
.0000						arp_t
>0000						htype   .word   ?
>0002						ptype   .word   ?
>0004						hlen    .byte   ?
>0005						plen    .byte   ?
>0006						oper    .word   ?
>0008						sha     .fill   6
>000e						spa     .fill   4
>0012						tha     .fill   6
>0018						tpa     .fill   4
.001c						size
.0000						eth_t
>0000						d_mac   .fill   6
>0006						s_mac   .fill   6
>000c						type    .word   ?
.000e						size
.000e						arp
>000e						htype   .word   ?
>0010						ptype   .word   ?
>0012						hlen    .byte   ?
>0013						plen    .byte   ?
>0014						oper    .word   ?
>0016						sha     .fill   6
>001c						spa     .fill   4
>0020						tha     .fill   6
>0026						tpa     .fill   4
.002a						size
.000e						ipv4
>000e						ihl     .fill   1
>000f						tos     .byte   ?
>0010						len     .fill   2
>0012						id      .fill   2
>0014						flags   .fill   2
>0016						ttl     .byte   ?
>0017						proto   .byte   ?
>0018						check   .fill   2
>001a						src     .fill   4
>001e						dest    .fill   4
.0022						size
>0022						sport       .word   ?
>0024						dport       .word   ?
.0022						udp
>0022						sport   .word   ?
>0024						dport   .word   ?
>0026						length  .word   ?
>0028						check   .word   ?
.002a						data
.002a						size
.0022						icmp
>0022						type    .byte   ?
>0023						code    .byte   ?
>0024						check   .fill   2
>0026						ident   .word   ?
>0028						seq     .fill   2
.0000						pbuf_t
.0000						stack
.0000						deque
>0000		00 00				head    .word   0
>0002		00 00				tail    .word   0
.0004						end
>0004						length  .word   ?
.0006						eth
>0006						d_mac   .fill   6
>000c						s_mac   .fill   6
>0012						type    .word   ?
.0014						size
.0014						arp
>0014						htype   .word   ?
>0016						ptype   .word   ?
>0018						hlen    .byte   ?
>0019						plen    .byte   ?
>001a						oper    .word   ?
>001c						sha     .fill   6
>0022						spa     .fill   4
>0026						tha     .fill   6
>002c						tpa     .fill   4
.0030						size
.0014						ipv4
>0014						ihl     .fill   1
>0015						tos     .byte   ?
>0016						len     .fill   2
>0018						id      .fill   2
>001a						flags   .fill   2
>001c						ttl     .byte   ?
>001d						proto   .byte   ?
>001e						check   .fill   2
>0020						src     .fill   4
>0024						dest    .fill   4
.0028						size
>0028						sport       .word   ?
>002a						dport       .word   ?
.0028						udp
>0028						sport   .word   ?
>002a						dport   .word   ?
>002c						length  .word   ?
>002e						check   .word   ?
.0030						data
.0030						size
.0028						icmp
>0028						type    .byte   ?
>0029						code    .byte   ?
>002a						check   .fill   2
>002c						ident   .word   ?
>002e						seq     .fill   2
>0006						        .fill       14      ; ethernet header
.0014						ipv4
>0014						ihl     .fill   1
>0015						tos     .byte   ?
>0016						len     .fill   2
>0018						id      .fill   2
>001a						flags   .fill   2
>001c						ttl     .byte   ?
>001d						proto   .byte   ?
>001e						check   .fill   2
>0020						src     .fill   4
>0024						dest    .fill   4
.0028						size
>0028						sport       .word   ?
>002a						dport       .word   ?
.0028						udp
>0028						sport   .word   ?
>002a						dport   .word   ?
>002c						length  .word   ?
>002e						check   .word   ?
.0030						data
.0030						size
.0028						icmp
>0028						type    .byte   ?
>0029						code    .byte   ?
>002a						check   .fill   2
>002c						ident   .word   ?
>002e						seq     .fill   2
.3c0000						pbuf
.3c0000						stack
.3c0000						deque
>3c0000		00 00				head    .word   0
>3c0002		00 00				tail    .word   0
.3c0004						end
>3c0004						length  .word   ?
.3c0006						eth
>3c0006						d_mac   .fill   6
>3c000c						s_mac   .fill   6
>3c0012						type    .word   ?
.3c0014						size
.3c0014						arp
>3c0014						htype   .word   ?
>3c0016						ptype   .word   ?
>3c0018						hlen    .byte   ?
>3c0019						plen    .byte   ?
>3c001a						oper    .word   ?
>3c001c						sha     .fill   6
>3c0022						spa     .fill   4
>3c0026						tha     .fill   6
>3c002c						tpa     .fill   4
.3c0030						size
.3c0014						ipv4
>3c0014						ihl     .fill   1
>3c0015						tos     .byte   ?
>3c0016						len     .fill   2
>3c0018						id      .fill   2
>3c001a						flags   .fill   2
>3c001c						ttl     .byte   ?
>3c001d						proto   .byte   ?
>3c001e						check   .fill   2
>3c0020						src     .fill   4
>3c0024						dest    .fill   4
.3c0028						size
>3c0028						sport       .word   ?
>3c002a						dport       .word   ?
.3c0028						udp
>3c0028						sport   .word   ?
>3c002a						dport   .word   ?
>3c002c						length  .word   ?
>3c002e						check   .word   ?
.3c0030						data
.3c0030						size
.3c0028						icmp
>3c0028						type    .byte   ?
>3c0029						code    .byte   ?
>3c002a						check   .fill   2
>3c002c						ident   .word   ?
>3c002e						seq     .fill   2
>3c0006						        .fill       14      ; ethernet header
.3c0014						ipv4
>3c0014						ihl     .fill   1
>3c0015						tos     .byte   ?
>3c0016						len     .fill   2
>3c0018						id      .fill   2
>3c001a						flags   .fill   2
>3c001c						ttl     .byte   ?
>3c001d						proto   .byte   ?
>3c001e						check   .fill   2
>3c0020						src     .fill   4
>3c0024						dest    .fill   4
.3c0028						size
>3c0028						sport       .word   ?
>3c002a						dport       .word   ?
.3c0028						udp
>3c0028						sport   .word   ?
>3c002a						dport   .word   ?
>3c002c						length  .word   ?
>3c002e						check   .word   ?
.3c0030						data
.3c0030						size
.3c0028						icmp
>3c0028						type    .byte   ?
>3c0029						code    .byte   ?
>3c002a						check   .fill   2
>3c002c						ident   .word   ?
>3c002e						seq     .fill   2
>398038		00 00				pbufs   .word   0   ; Free-pbufs stack.
.39803a						pbuf_init
.39803a		20 4c 80	jsr $39804c	        jsr     pbank_init
.39803d		18		clc		        clc
.39803e		a9 00 08	lda #$0800	        lda     #2048       ; 1st 2k normally reserved for socket descriptors...
.398041		aa		tax		_loop   tax
.398042		20 6e 80	jsr $39806e	        jsr     pbuf_free_x
.398045		8a		txa		        txa
.398046		69 00 08	adc #$0800	        adc     #2048
.398049		d0 f6		bne $398041	        bne     _loop
.39804b		60		rts		_done   rts
.39804c						pbank_init
.39804c		a9 00 00	lda #$0000	        lda     #0
.39804f		8f 00 00 3c	sta $3c0000	        sta     @l PACKETS
.398053		aa		tax		        tax
.398054		a8		tay		        tay
.398055		c8		iny		        iny
.398056		3a		dec a		        dec     a
.398057		8b		phb		        phb
.398058		54 3c 3c	mvn $3c,$3c	        mvn     `PACKETS,`PACKETS
.39805b		ab		plb		        plb
.39805c		60		rts		        rts
.39805d						pbuf_alloc_x:
.39805d		08		php		        php
.39805e		78		sei		        sei
.39805f		ae 38 80	ldx $8038	        ldx     <>pbufs,b
.398062		f0 07		beq $39806b	        beq     _done
.398064		bf 00 00 3c	lda $3c0000,x	        lda     pbuf.stack,x
.398068		8d 38 80	sta $8038	        sta     <>pbufs,b
.39806b		28		plp		_done   plp
.39806c		8a		txa		        txa
.39806d		60		rts		        rts
.39806e						pbuf_free_x:
.39806e		08		php		        php
.39806f		78		sei		        sei
.398070		ad 38 80	lda $8038	        lda     <>pbufs,b
.398073		9f 00 00 3c	sta $3c0000,x	        sta     pbuf.stack,x
.398077		8e 38 80	stx $8038	        stx     <>pbufs,b
.39807a		28		plp		        plp
.39807b		60		rts		        rts

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/arp.asm

.39807c						recv
.39807c		bf 14 00 3c	lda $3c0014,x	        lda     pbuf.eth.arp.htype,x
.398080		eb		xba		        xba
.398081		c9 01 00	cmp #$0001	        cmp     #$0001  ; Ethernet
.398084		d0 3a		bne $3980c0	        bne     _drop
.398086		bf 16 00 3c	lda $3c0016,x	        lda     pbuf.eth.arp.ptype,x
.39808a		eb		xba		        xba
.39808b		c9 00 08	cmp #$0800	        cmp     #$0800  ; IPv4
.39808e		d0 30		bne $3980c0	        bne     _drop
.398090		bf 18 00 3c	lda $3c0018,x	        lda     pbuf.eth.arp.hlen,x ; and plen
.398094		eb		xba		        xba
.398095		c9 04 06	cmp #$0604	        cmp     #$0604  ; 6 ether, 4 ip
.398098		d0 26		bne $3980c0	        bne     _drop
.39809a		bf 1a 00 3c	lda $3c001a,x	        lda     pbuf.eth.arp.oper,x
.39809e		eb		xba		        xba
.39809f		c9 02 00	cmp #$0002	        cmp     #$0002      ; reply
.3980a2		f0 19		beq $3980bd	        beq     _record
.3980a4		c9 01 00	cmp #$0001	        cmp     #$0001      ; request or broadcast
.3980a7		d0 17		bne $3980c0	        bne     _drop       ; Invalid arp packet
.3980a9		bf 2c 00 3c	lda $3c002c,x	        lda     kernel.net.pbuf.eth.arp.tpa+0,x
.3980ad		5f 22 00 3c	eor $3c0022,x	        eor     kernel.net.pbuf.eth.arp.spa+0,x
.3980b1		d0 10		bne $3980c3	        bne     _request    ; not a broadcast
.3980b3		bf 2e 00 3c	lda $3c002e,x	        lda     kernel.net.pbuf.eth.arp.tpa+2,x
.3980b7		5f 24 00 3c	eor $3c0024,x	        eor     kernel.net.pbuf.eth.arp.spa+2,x
.3980bb		d0 06		bne $3980c3	        bne     _request    ; not a broadcast
.3980bd						_record
.3980bd		20 66 82	jsr $398266	        jsr     cache_arp_reply
.3980c0		4c 6e 80	jmp $39806e	_drop   jmp     kernel.net.pbuf_free_x
.3980c3						_request
.3980c3		bf 2c 00 3c	lda $3c002c,x	        lda     kernel.net.pbuf.eth.arp.tpa+0,x
.3980c7		4f 85 86 39	eor $398685	        eor     kernel.net.conf.ip_addr+0
.3980cb		d0 f3		bne $3980c0	        bne     _drop
.3980cd		bf 2e 00 3c	lda $3c002e,x	        lda     kernel.net.pbuf.eth.arp.tpa+2,x
.3980d1		4f 87 86 39	eor $398687	        eor     kernel.net.conf.ip_addr+2
.3980d5		d0 e9		bne $3980c0	        bne     _drop
.3980d7		20 75 81	jsr $398175	        jsr     arp_reply
.3980da		4c 57 7f	jmp $397f57	        jmp     hardware.lan9221.eth_packet_send
.3980dd						arp_request
.3980dd		20 5d 80	jsr $39805d	        jsr     kernel.net.pbuf_alloc_x
.3980e0		d0 01		bne $3980e3	        bne     _good
.3980e2		60		rts		        rts
.3980e3		a9 ff ff	lda #$ffff	_good   lda     #$ffff
.3980e6		9f 06 00 3c	sta $3c0006,x	        sta     kernel.net.pbuf.eth.d_mac+0,x
.3980ea		9f 08 00 3c	sta $3c0008,x	        sta     kernel.net.pbuf.eth.d_mac+2,x
.3980ee		9f 0a 00 3c	sta $3c000a,x	        sta     kernel.net.pbuf.eth.d_mac+4,x
.3980f2		a9 06 08	lda #$0806	        lda     #$0806  ; ARP packet
.3980f5		eb		xba		        xba
.3980f6		9f 12 00 3c	sta $3c0012,x	        sta     kernel.net.pbuf.eth.type,x
.3980fa		a9 01 00	lda #$0001	        lda     #1      ; ethernet request
.3980fd		eb		xba		        xba
.3980fe		9f 14 00 3c	sta $3c0014,x	        sta     kernel.net.pbuf.eth.arp.htype,x
.398102		a9 00 08	lda #$0800	        lda     #$0800  ; ethernet IPv4 type
.398105		eb		xba		        xba
.398106		9f 16 00 3c	sta $3c0016,x	        sta     kernel.net.pbuf.eth.arp.ptype,x
.39810a		a9 04 06	lda #$0604	        lda     #$0604      ; 6-byte hardware address (MAC)
.39810d		eb		xba		        xba                 ; 4-byte protocol address (IPv4)
.39810e		9f 18 00 3c	sta $3c0018,x	        sta     kernel.net.pbuf.eth.arp.hlen,x
.398112		a9 01 00	lda #$0001	        lda     #1      ; ARP request
.398115		eb		xba		        xba
.398116		9f 1a 00 3c	sta $3c001a,x	        sta     kernel.net.pbuf.eth.arp.oper,x
.39811a		a9 ff ff	lda #$ffff	        lda     #$ffff
.39811d		9f 06 00 3c	sta $3c0006,x	        sta     kernel.net.pbuf.eth.d_mac+0,x
.398121		9f 08 00 3c	sta $3c0008,x	        sta     kernel.net.pbuf.eth.d_mac+2,x
.398125		9f 0a 00 3c	sta $3c000a,x	        sta     kernel.net.pbuf.eth.d_mac+4,x
.398129		af 83 86 39	lda $398683	        lda     kernel.net.conf.eth_mac+0
.39812d		9f 1c 00 3c	sta $3c001c,x	        sta     kernel.net.pbuf.eth.arp.sha+0,x
.398131		9f 0c 00 3c	sta $3c000c,x	        sta     kernel.net.pbuf.eth.s_mac+0,x
.398135		af 85 86 39	lda $398685	        lda     kernel.net.conf.eth_mac+2
.398139		9f 1e 00 3c	sta $3c001e,x	        sta     kernel.net.pbuf.eth.arp.sha+2,x
.39813d		9f 0e 00 3c	sta $3c000e,x	        sta     kernel.net.pbuf.eth.s_mac+2,x
.398141		af 87 86 39	lda $398687	        lda     kernel.net.conf.eth_mac+4
.398145		9f 20 00 3c	sta $3c0020,x	        sta     kernel.net.pbuf.eth.arp.sha+4,x
.398149		9f 10 00 3c	sta $3c0010,x	        sta     kernel.net.pbuf.eth.s_mac+4,x
.39814d		af 85 86 39	lda $398685	        lda     kernel.net.conf.ip_addr+0
.398151		9f 22 00 3c	sta $3c0022,x	        sta     kernel.net.pbuf.eth.arp.spa+0,x
.398155		af 87 86 39	lda $398687	        lda     kernel.net.conf.ip_addr+2
.398159		9f 24 00 3c	sta $3c0024,x	        sta     kernel.net.pbuf.eth.arp.spa+2,x
.39815d		b9 00 00	lda $0000,y	        lda     entry.ip+0,b,y
.398160		9f 2c 00 3c	sta $3c002c,x	        sta     kernel.net.pbuf.eth.arp.tpa+0,x
.398164		b9 02 00	lda $0002,y	        lda     entry.ip+2,b,y
.398167		9f 2e 00 3c	sta $3c002e,x	        sta     kernel.net.pbuf.eth.arp.tpa+2,x
.39816b		a9 2a 00	lda #$002a	        lda     #eth_t.arp.size
.39816e		9f 04 00 3c	sta $3c0004,x	        sta     kernel.net.pbuf.length,x
.398172		4c 57 7f	jmp $397f57	        jmp     hardware.lan9221.eth_packet_send
.398175						arp_reply
.398175		a9 02 00	lda #$0002	        lda     #$0002
.398178		eb		xba		        xba
.398179		9f 1a 00 3c	sta $3c001a,x	        sta     pbuf.eth.arp.oper,x
.39817d		bf 0c 00 3c	lda $3c000c,x	        lda     pbuf.eth.s_mac+0,x
.398181		9f 06 00 3c	sta $3c0006,x	        sta     pbuf.eth.d_mac+0,x
.398185		9f 26 00 3c	sta $3c0026,x	        sta     pbuf.eth.arp.tha+0,x
.398189		bf 0e 00 3c	lda $3c000e,x	        lda     pbuf.eth.s_mac+2,x
.39818d		9f 08 00 3c	sta $3c0008,x	        sta     pbuf.eth.d_mac+2,x
.398191		9f 28 00 3c	sta $3c0028,x	        sta     pbuf.eth.arp.tha+2,x
.398195		bf 10 00 3c	lda $3c0010,x	        lda     pbuf.eth.s_mac+4,x
.398199		9f 0a 00 3c	sta $3c000a,x	        sta     pbuf.eth.d_mac+4,x
.39819d		9f 2a 00 3c	sta $3c002a,x	        sta     pbuf.eth.arp.tha+4,x
.3981a1		20 c9 81	jsr $3981c9	        jsr     swap_ip
.3981a4		af 83 86 39	lda $398683	        lda     kernel.net.conf.eth_mac+0
.3981a8		9f 1c 00 3c	sta $3c001c,x	        sta     pbuf.eth.arp.sha+0,x
.3981ac		9f 0c 00 3c	sta $3c000c,x	        sta     pbuf.eth.s_mac+0,x
.3981b0		af 85 86 39	lda $398685	        lda     kernel.net.conf.eth_mac+2
.3981b4		9f 1e 00 3c	sta $3c001e,x	        sta     pbuf.eth.arp.sha+2,x
.3981b8		9f 0e 00 3c	sta $3c000e,x	        sta     pbuf.eth.s_mac+2,x
.3981bc		af 87 86 39	lda $398687	        lda     kernel.net.conf.eth_mac+4
.3981c0		9f 20 00 3c	sta $3c0020,x	        sta     pbuf.eth.arp.sha+4,x
.3981c4		9f 10 00 3c	sta $3c0010,x	        sta     pbuf.eth.s_mac+4,x
.3981c8		60		rts		        rts
.3981c9						swap_ip
.3981c9		5a		phy		        phy
.3981ca		bf 22 00 3c	lda $3c0022,x	        lda     pbuf.eth.arp.spa+0,x
.3981ce		a8		tay		        tay
.3981cf		bf 2c 00 3c	lda $3c002c,x	        lda     pbuf.eth.arp.tpa+0,x
.3981d3		9f 22 00 3c	sta $3c0022,x	        sta     pbuf.eth.arp.spa+0,x
.3981d7		98		tya		        tya
.3981d8		9f 2c 00 3c	sta $3c002c,x	        sta     pbuf.eth.arp.tpa+0,x
.3981dc		bf 24 00 3c	lda $3c0024,x	        lda     pbuf.eth.arp.spa+2,x
.3981e0		a8		tay		        tay
.3981e1		bf 2e 00 3c	lda $3c002e,x	        lda     pbuf.eth.arp.tpa+2,x
.3981e5		9f 24 00 3c	sta $3c0024,x	        sta     pbuf.eth.arp.spa+2,x
.3981e9		98		tya		        tya
.3981ea		9f 2e 00 3c	sta $3c002e,x	        sta     pbuf.eth.arp.tpa+2,x
.3981ee		7a		ply		        ply
.3981ef		60		rts		        rts
.0000						entry
>0000						ip      .fill   4
>0004						mac     .fill   6
>000a						pending .word   ?
>000c						last    .word   ?
.000e						size
>3981f0		00 00				count   .word   0
>3981f2		00 00 00 00 00 00 00 00		entries .fill   8*entry.size,0
>3981fa		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>39825a		00 00 00 00 00 00 00 00
.398262						entries_end
>398262						target  .fill   4
.398266						cache_arp_reply
.398266		bf 22 00 3c	lda $3c0022,x	        lda     kernel.net.pbuf.eth.arp.spa+0,x
.39826a		8f 20 00 3c	sta $3c0020	        sta     kernel.net.pbuf.ipv4.src+0
.39826e		bf 24 00 3c	lda $3c0024,x	        lda     kernel.net.pbuf.eth.arp.spa+2,x
.398272		8f 22 00 3c	sta $3c0022	        sta     kernel.net.pbuf.ipv4.src+2
.398276		bf 1c 00 3c	lda $3c001c,x	        lda     kernel.net.pbuf.eth.arp.sha+0,x
.39827a		8f 0c 00 3c	sta $3c000c	        sta     kernel.net.pbuf.eth.s_mac+0
.39827e		bf 1e 00 3c	lda $3c001e,x	        lda     kernel.net.pbuf.eth.arp.sha+2,x
.398282		8f 0e 00 3c	sta $3c000e	        sta     kernel.net.pbuf.eth.s_mac+2
.398286		bf 20 00 3c	lda $3c0020,x	        lda     kernel.net.pbuf.eth.arp.sha+4,x
.39828a		8f 10 00 3c	sta $3c0010	        sta     kernel.net.pbuf.eth.s_mac+4
.39828e		da		phx		        phx
.39828f		a2 00 00	ldx #$0000	        ldx     #0
.398292		20 97 82	jsr $398297	        jsr     cache_ip
.398295		fa		plx		        plx
.398296		60		rts		        rts
.398297						cache_ip
.398297		bf 20 00 3c	lda $3c0020,x	        lda     kernel.net.pbuf.ipv4.src+0,x
.39829b		8f 62 82 39	sta $398262	        sta     target+0
.39829f		bf 22 00 3c	lda $3c0022,x	        lda     kernel.net.pbuf.ipv4.src+2,x
.3982a3		8f 64 82 39	sta $398264	        sta     target+2
.3982a7		20 df 83	jsr $3983df	        jsr     find
.3982aa		90 11		bcc $3982bd	        bcc     _update         ; Found; update MAC.
.3982ac		20 11 84	jsr $398411	        jsr     find_oldest     ; Not found, make new entry.
.3982af		bf 20 00 3c	lda $3c0020,x	        lda     kernel.net.pbuf.ipv4.src+0,x
.3982b3		99 00 00	sta $0000,y	        sta     entry.ip+0,b,y
.3982b6		bf 22 00 3c	lda $3c0022,x	        lda     kernel.net.pbuf.ipv4.src+2,x
.3982ba		99 02 00	sta $0002,y	        sta     entry.ip+2,b,y
.3982bd						_update
.3982bd		bf 0c 00 3c	lda $3c000c,x	        lda     kernel.net.pbuf.eth.s_mac+0,x
.3982c1		99 04 00	sta $0004,y	        sta     entry.mac+0,b,y
.3982c4		bf 0e 00 3c	lda $3c000e,x	        lda     kernel.net.pbuf.eth.s_mac+2,x
.3982c8		99 06 00	sta $0006,y	        sta     entry.mac+2,b,y
.3982cb		bf 10 00 3c	lda $3c0010,x	        lda     kernel.net.pbuf.eth.s_mac+4,x
.3982cf		99 08 00	sta $0008,y	        sta     entry.mac+4,b,y
.3982d2		a9 00 00	lda #$0000	        lda     #0
.3982d5		99 0a 00	sta $000a,y	        sta     entry.pending,b,y
.3982d8		20 dc 82	jsr $3982dc	        jsr     touch
.3982db		60		rts		_out    rts
.3982dc						touch
.3982dc		af 95 86 39	lda $398695	        lda     kernel.net.conf.ticks
.3982e0		99 0c 00	sta $000c,y	        sta     entry.last,b,y
.3982e3		60		rts		        rts
.3982e4						local:
.3982e4		bf 26 00 3c	lda $3c0026,x	        lda     kernel.net.pbuf.ipv4.dest+2,x
.3982e8		4f 87 86 39	eor $398687	        eor     kernel.net.conf.ip_addr+2
.3982ec		2f 8b 86 39	and $39868b	        and     kernel.net.conf.ip_mask+2
.3982f0		d0 0c		bne $3982fe	        bne     _out
.3982f2		bf 24 00 3c	lda $3c0024,x	        lda     kernel.net.pbuf.ipv4.dest+0,x
.3982f6		4f 85 86 39	eor $398685	        eor     kernel.net.conf.ip_addr+0
.3982fa		2f 89 86 39	and $398689	        and     kernel.net.conf.ip_mask+0
.3982fe		60		rts		_out    rts
.3982ff						bind:
.3982ff		bf 26 00 3c	lda $3c0026,x	        lda     kernel.net.pbuf.ipv4.dest+2,x
.398303		4f 8f 86 39	eor $39868f	        eor     kernel.net.conf.broadcast+2
.398307		d0 1c		bne $398325	        bne     _lookup
.398309		bf 24 00 3c	lda $3c0024,x	        lda     kernel.net.pbuf.ipv4.dest+0,x
.39830d		4f 8d 86 39	eor $39868d	        eor     kernel.net.conf.broadcast+0
.398311		d0 12		bne $398325	        bne     _lookup
.398313		a9 ff ff	lda #$ffff	        lda     #$ffff
.398316		9f 06 00 3c	sta $3c0006,x	        sta     kernel.net.pbuf.eth.d_mac+0,x
.39831a		9f 08 00 3c	sta $3c0008,x	        sta     kernel.net.pbuf.eth.d_mac+2,x
.39831e		9f 0a 00 3c	sta $3c000a,x	        sta     kernel.net.pbuf.eth.d_mac+4,x
.398322		4c 77 83	jmp $398377	        jmp     _finish
.398325						_lookup
.398325		20 e4 82	jsr $3982e4	        jsr     local
.398328		d0 13		bne $39833d	        bne     _router
.39832a		bf 24 00 3c	lda $3c0024,x	        lda     kernel.net.pbuf.ipv4.dest+0,x
.39832e		8f 62 82 39	sta $398262	        sta     target+0
.398332		bf 26 00 3c	lda $3c0026,x	        lda     kernel.net.pbuf.ipv4.dest+2,x
.398336		8f 64 82 39	sta $398264	        sta     target+2
.39833a		4c 52 83	jmp $398352	        jmp     _find
.39833d						_router
.39833d		af 93 86 39	lda $398693	        lda     kernel.net.conf.default+2
.398341		c9 00 01	cmp #$0100	        cmp     #$0100
.398344		90 60		bcc $3983a6	        bcc     _fail   ; No default route
.398346		8f 64 82 39	sta $398264	        sta     target+2
.39834a		af 91 86 39	lda $398691	        lda     kernel.net.conf.default+0
.39834e		8f 62 82 39	sta $398262	        sta     target+0
.398352						_find
.398352		20 df 83	jsr $3983df	        jsr     find
.398355		b0 61		bcs $3983b8	        bcs     _arp
.398357		b9 0a 00	lda $000a,y	        lda     entry.pending,b,y
.39835a		f0 03		beq $39835f	        beq     _found
.39835c		4c a8 83	jmp $3983a8	        jmp     _retry
.39835f						_found
.39835f		b9 04 00	lda $0004,y	        lda     entry.mac+0,b,y
.398362		9f 06 00 3c	sta $3c0006,x	        sta     kernel.net.pbuf.eth.d_mac+0,x
.398366		b9 06 00	lda $0006,y	        lda     entry.mac+2,b,y
.398369		9f 08 00 3c	sta $3c0008,x	        sta     kernel.net.pbuf.eth.d_mac+2,x
.39836d		b9 08 00	lda $0008,y	        lda     entry.mac+4,b,y
.398370		9f 0a 00 3c	sta $3c000a,x	        sta     kernel.net.pbuf.eth.d_mac+4,x
.398374		20 dc 82	jsr $3982dc	        jsr     touch   ; Keep this arp entry :).
.398377						_finish
.398377		a9 00 08	lda #$0800	        lda     #$0800
.39837a		eb		xba		        xba
.39837b		9f 12 00 3c	sta $3c0012,x	        sta     kernel.net.pbuf.eth.type+0,x
.39837f		af 83 86 39	lda $398683	        lda     kernel.net.conf.eth_mac+0
.398383		9f 0c 00 3c	sta $3c000c,x	        sta     kernel.net.pbuf.eth.s_mac+0,x
.398387		af 85 86 39	lda $398685	        lda     kernel.net.conf.eth_mac+2
.39838b		9f 0e 00 3c	sta $3c000e,x	        sta     kernel.net.pbuf.eth.s_mac+2,x
.39838f		af 87 86 39	lda $398687	        lda     kernel.net.conf.eth_mac+4
.398393		9f 10 00 3c	sta $3c0010,x	        sta     kernel.net.pbuf.eth.s_mac+4,x
.398397		bf 16 00 3c	lda $3c0016,x	        lda     pbuf.ipv4.len,x
.39839b		eb		xba		        xba
.39839c		18		clc		        clc
.39839d		69 0e 00	adc #$000e	        adc     #eth_t.size
.3983a0		9f 04 00 3c	sta $3c0004,x	        sta     pbuf.length,x
.3983a4		18		clc		        clc
.3983a5		60		rts		        rts
.3983a6		38		sec		_fail   sec
.3983a7		60		rts		        rts
.3983a8		af 95 86 39	lda $398695	_retry  lda     kernel.net.conf.ticks
.3983ac		38		sec		        sec
.3983ad		f9 0c 00	sbc $000c,y	        sbc     entry.last,b,y
.3983b0		c9 05 00	cmp #$0005	        cmp     #5
.3983b3		90 f1		bcc $3983a6	        bcc     _fail    ; Too soon.
.3983b5		4c d6 83	jmp $3983d6	        jmp     _request
.3983b8						_arp
.3983b8		20 11 84	jsr $398411	        jsr     find_oldest
.3983bb		af 62 82 39	lda $398262	        lda     target+0
.3983bf		99 00 00	sta $0000,y	        sta     entry.ip+0,b,y
.3983c2		af 64 82 39	lda $398264	        lda     target+2
.3983c6		99 02 00	sta $0002,y	        sta     entry.ip+2,b,y
.3983c9		a9 01 00	lda #$0001	        lda     #1
.3983cc		99 0a 00	sta $000a,y	        sta     entry.pending,b,y
.3983cf		af 95 86 39	lda $398695	        lda     kernel.net.conf.ticks
.3983d3		99 0c 00	sta $000c,y	        sta     entry.last,b,y
.3983d6						_request
.3983d6		20 dd 80	jsr $3980dd	        jsr     arp_request
.3983d9		20 dc 82	jsr $3982dc	        jsr     touch
.3983dc		4c a6 83	jmp $3983a6	        jmp     _fail
.3983df						find:
.3983df		a0 f2 81	ldy #$81f2	        ldy     #<>entries
.3983e2		c0 62 82	cpy #$8262	_loop   cpy     #<>entries_end
.3983e5		f0 0e		beq $3983f5	        beq     _none
.3983e7		20 00 84	jsr $398400	        jsr     compare
.3983ea		f0 0b		beq $3983f7	        beq     _done
.3983ec		98		tya		        tya
.3983ed		18		clc		        clc
.3983ee		69 0e 00	adc #$000e	        adc     #entry.size
.3983f1		a8		tay		        tay
.3983f2		4c e2 83	jmp $3983e2	        jmp     _loop
.3983f5		38		sec		_none   sec
.3983f6		60		rts		        rts
.3983f7		af 95 86 39	lda $398695	_done   lda     kernel.net.conf.ticks
.3983fb		99 0c 00	sta $000c,y	        sta     entry.last,b,y
.3983fe		18		clc		        clc
.3983ff		60		rts		        rts
.398400						compare:
.398400		af 62 82 39	lda $398262	        lda     target+0
.398404		59 00 00	eor $0000,y	        eor     entry.ip+0,b,y
.398407		d0 07		bne $398410	        bne     _done
.398409		af 64 82 39	lda $398264	        lda     target+2
.39840d		59 02 00	eor $0002,y	        eor     entry.ip+2,b,y
.398410		60		rts		_done   rts
.398411						find_oldest:
.398411		da		phx		        phx
.398412		f4 00 00	pea #$0000	        pea     #0              ; Max age
.398415		a0 f2 81	ldy #$81f2	        ldy     #<>entries
.398418		bb		tyx		        tyx
.398419		b9 00 00	lda $0000,y	_loop   lda     entry.ip+0,b,y  ; Empty is free.
.39841c		f0 19		beq $398437	        beq     _done
.39841e		af 95 86 39	lda $398695	        lda     kernel.net.conf.ticks
.398422		38		sec		        sec
.398423		f9 0c 00	sbc $000c,y	        sbc     entry.last,b,y  ; Age of this entry in A.
.398426		c3 01		cmp $01,s	        cmp     1,s
.398428		90 01		bcc $39842b	        bcc     _next
.39842a		bb		tyx		        tyx                     ; X = new oldest
.39842b		98		tya		_next   tya
.39842c		18		clc		        clc
.39842d		69 0e 00	adc #$000e	        adc     #entry.size
.398430		a8		tay		        tay
.398431		c0 62 82	cpy #$8262	        cpy     #<>entries_end
.398434		d0 e3		bne $398419	        bne     _loop
.398436		9b		txy		        txy                     ; Y = X = oldest
.398437		68		pla		_done   pla                     ; Max age
.398438		fa		plx		        plx                     ; Original
.398439		60		rts		        rts

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/net_ip.asm

.39843a						ip_check:
.39843a		a0 00 00	ldy #$0000	        ldy     #0  ; for now.
.39843d		bf 14 00 3c	lda $3c0014,x	        lda     pbuf.ipv4.ihl,x
.398441		29 ff 00	and #$00ff	        and     #255            ; little endian version/ihl
.398444		c9 45 00	cmp #$0045	        cmp     #$45            ; Version 4, minimal header.
.398447		d0 2e		bne $398477	        bne     _bad
.398449		20 0a 85	jsr $39850a	        jsr     compute_ip_checksum
.39844c		1a		inc a		        inc     a
.39844d		d0 28		bne $398477	        bne     _bad
.39844f		bf 1c 00 3c	lda $3c001c,x	        lda     pbuf.ipv4.ttl,x
.398453		3a		dec a		        dec     a
.398454		89 ff 00	bit #$00ff	        bit     #$ff
.398457		f0 1e		beq $398477	        beq     _bad
.398459		9f 1c 00 3c	sta $3c001c,x	        sta     pbuf.ipv4.ttl,x
.39845d		bf 1a 00 3c	lda $3c001a,x	        lda     pbuf.ipv4.flags,x
.398461		29 00 c0	and #$c000	        and     #65536-$4000
.398464		d0 11		bne $398477	        bne     _bad
.398466		bf 1d 00 3c	lda $3c001d,x	        lda     pbuf.ipv4.proto,x
.39846a		29 ff 00	and #$00ff	        and     #255
.39846d		c9 11 00	cmp #$0011	        cmp     #17
.398470		f0 08		beq $39847a	        beq     _udp
.398472		c9 01 00	cmp #$0001	        cmp     #1
.398475		f0 06		beq $39847d	        beq     ip_icmp
.398477		4c 6e 80	jmp $39806e	_bad    jmp     pbuf_free_x
.39847a		4c 73 85	jmp $398573	_udp    jmp     ip_udp
.39847d						ip_icmp:
.39847d		bf 28 00 3c	lda $3c0028,x	        lda     pbuf.ipv4.icmp.type,x
.398481		29 ff 00	and #$00ff	        and     #255
.398484		c9 08 00	cmp #$0008	        cmp     #8
.398487		d0 06		bne $39848f	        bne     _drop
.398489		20 29 85	jsr $398529	        jsr     compute_icmp_checksum
.39848c		1a		inc a		        inc     a
.39848d		f0 03		beq $398492	        beq     _good
.39848f		4c 6e 80	jmp $39806e	_drop   jmp     pbuf_free_x
.398492						_good
.398492		bf 28 00 3c	lda $3c0028,x	        lda     pbuf.ipv4.icmp.type,x
.398496		29 00 ff	and #$ff00	        and     #$ff00
.398499		9f 28 00 3c	sta $3c0028,x	        sta     pbuf.ipv4.icmp.type,x
.39849d		20 ac 84	jsr $3984ac	        jsr     swap_ip_addrs
.3984a0		20 16 85	jsr $398516	        jsr update_ip_checksum
.3984a3		20 42 85	jsr $398542	        jsr update_icmp_checksum
.3984a6		20 d1 84	jsr $3984d1	        jsr swap_mac
.3984a9		4c 57 7f	jmp $397f57	        jmp hardware.lan9221.eth_packet_send
.3984ac						swap_ip_addrs
.3984ac		bf 20 00 3c	lda $3c0020,x	        lda     pbuf.ipv4.src+0,x
.3984b0		48		pha		        pha
.3984b1		bf 22 00 3c	lda $3c0022,x	        lda     pbuf.ipv4.src+2,x
.3984b5		48		pha		        pha
.3984b6		bf 24 00 3c	lda $3c0024,x	        lda     pbuf.ipv4.dest+0,x
.3984ba		9f 20 00 3c	sta $3c0020,x	        sta     pbuf.ipv4.src+0,x
.3984be		bf 26 00 3c	lda $3c0026,x	        lda     pbuf.ipv4.dest+2,x
.3984c2		9f 22 00 3c	sta $3c0022,x	        sta     pbuf.ipv4.src+2,x
.3984c6		68		pla		        pla
.3984c7		9f 26 00 3c	sta $3c0026,x	        sta     pbuf.ipv4.dest+2,x
.3984cb		68		pla		        pla
.3984cc		9f 24 00 3c	sta $3c0024,x	        sta     pbuf.ipv4.dest+0,x
.3984d0		60		rts		        rts
.3984d1						swap_mac
.3984d1		5a		phy		        phy
.3984d2		bf 0c 00 3c	lda $3c000c,x	        lda     pbuf.eth.s_mac+0,x
.3984d6		a8		tay		        tay
.3984d7		bf 06 00 3c	lda $3c0006,x	        lda     pbuf.eth.d_mac+0,x
.3984db		9f 0c 00 3c	sta $3c000c,x	        sta     pbuf.eth.s_mac+0,x
.3984df		98		tya		        tya
.3984e0		9f 06 00 3c	sta $3c0006,x	        sta     pbuf.eth.d_mac+0,x
.3984e4		bf 0e 00 3c	lda $3c000e,x	        lda     pbuf.eth.s_mac+2,x
.3984e8		a8		tay		        tay
.3984e9		bf 08 00 3c	lda $3c0008,x	        lda     pbuf.eth.d_mac+2,x
.3984ed		9f 0e 00 3c	sta $3c000e,x	        sta     pbuf.eth.s_mac+2,x
.3984f1		98		tya		        tya
.3984f2		9f 08 00 3c	sta $3c0008,x	        sta     pbuf.eth.d_mac+2,x
.3984f6		bf 10 00 3c	lda $3c0010,x	        lda     pbuf.eth.s_mac+4,x
.3984fa		a8		tay		        tay
.3984fb		bf 0a 00 3c	lda $3c000a,x	        lda     pbuf.eth.d_mac+4,x
.3984ff		9f 10 00 3c	sta $3c0010,x	        sta     pbuf.eth.s_mac+4,x
.398503		98		tya		        tya
.398504		9f 0a 00 3c	sta $3c000a,x	        sta     pbuf.eth.d_mac+4,x
.398508		7a		ply		        ply
.398509		60		rts		        rts
.39850a						compute_ip_checksum:
.39850a		5a		phy		        phy
.39850b		a0 14 00	ldy #$0014	        ldy     #ip_t.size      ; size of header
.39850e		a9 00 00	lda #$0000	        lda     #0              ; starting from 0
.398511		20 55 85	jsr $398555	        jsr     header_checksum
.398514		7a		ply		        ply
.398515		60		rts		        rts
.398516						update_ip_checksum:
.398516		a9 00 00	lda #$0000	        lda     #0
.398519		9f 1e 00 3c	sta $3c001e,x	        sta     pbuf.ipv4.check,x
.39851d		20 0a 85	jsr $39850a	        jsr     compute_ip_checksum
.398520		49 ff ff	eor #$ffff	        eor     #$ffff
.398523		eb		xba		        xba
.398524		9f 1e 00 3c	sta $3c001e,x	        sta     pbuf.ipv4.check,x
.398528		60		rts		        rts
.398529						compute_icmp_checksum
.398529		5a		phy		        phy
.39852a		bf 16 00 3c	lda $3c0016,x	        lda     pbuf.ipv4.len,x
.39852e		eb		xba		        xba
.39852f		89 01 00	bit #$0001	        bit     #1
.398532		f0 01		beq $398535	        beq     _check
.398534		1a		inc a		        inc     a       ; driver ensures a trailing zero.
.398535		38		sec		_check  sec
.398536		e9 14 00	sbc #$0014	        sbc     #ip_t.size
.398539		a8		tay		        tay
.39853a		a9 14 00	lda #$0014	        lda     #ip_t.size
.39853d		20 55 85	jsr $398555	        jsr     header_checksum
.398540		7a		ply		        ply
.398541		60		rts		        rts
.398542						update_icmp_checksum:
.398542		a9 00 00	lda #$0000	        lda     #0
.398545		9f 2a 00 3c	sta $3c002a,x	        sta     pbuf.ipv4.icmp.check,x
.398549		20 29 85	jsr $398529	        jsr     compute_icmp_checksum
.39854c		eb		xba		        xba
.39854d		49 ff ff	eor #$ffff	        eor     #$ffff
.398550		9f 2a 00 3c	sta $3c002a,x	        sta     pbuf.ipv4.icmp.check,x
.398554		60		rts		        rts
.398555						header_checksum:
.398555		da		phx		        phx
.398556		18		clc		        clc
.398557		63 01		adc $01,s	        adc     1,s
.398559		aa		tax		        tax
.39855a		f4 00 00	pea #$0000	        pea     #0
.39855d		18		clc		        clc
.39855e		bf 14 00 3c	lda $3c0014,x	_loop   lda     pbuf.ipv4,x
.398562		eb		xba		        xba
.398563		63 01		adc $01,s	        adc     1,s
.398565		83 01		sta $01,s	        sta     1,s
.398567		e8		inx		        inx
.398568		e8		inx		        inx
.398569		88		dey		        dey
.39856a		88		dey		        dey
.39856b		d0 f1		bne $39855e	        bne     _loop
.39856d		68		pla		        pla
.39856e		69 00 00	adc #$0000	        adc     #0
.398571		fa		plx		        plx
.398572		60		rts		        rts

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/net_udp.asm

.398573						ip_udp
.398573		20 92 85	jsr $398592	        jsr     udp_checksum
.398576		1a		inc a		        inc     a
.398577		d0 03		bne $39857c	        bne     _done
.398579		4c 07 87	jmp $398707	        jmp     rx_enqueue
.39857c		4c 6e 80	jmp $39806e	_done   jmp     pbuf_free_x
.39857f						update_udp_checksum
.39857f		a9 00 00	lda #$0000	        lda     #0
.398582		9f 2e 00 3c	sta $3c002e,x	        sta     pbuf.ipv4.udp.check,x
.398586		20 92 85	jsr $398592	        jsr     udp_checksum
.398589		49 ff ff	eor #$ffff	        eor     #$ffff
.39858c		eb		xba		        xba
.39858d		9f 2e 00 3c	sta $3c002e,x	        sta     pbuf.ipv4.udp.check,x
.398591		60		rts		        rts
.398592						udp_checksum
.398592		5a		phy		        phy
.398593		da		phx		        phx
.398594		bf 16 00 3c	lda $3c0016,x	        lda     pbuf.ipv4.len,x
.398598		eb		xba		        xba
.398599		18		clc		        clc
.39859a		63 01		adc $01,s	        adc     1,s
.39859c		aa		tax		        tax
.39859d		a9 00 00	lda #$0000	        lda     #0
.3985a0		9f 14 00 3c	sta $3c0014,x	        sta     pbuf.ipv4,x
.3985a4		fa		plx		        plx
.3985a5		bf 16 00 3c	lda $3c0016,x	        lda     pbuf.ipv4.len,x
.3985a9		eb		xba		        xba
.3985aa		38		sec		        sec
.3985ab		e9 14 00	sbc #$0014	        sbc     #ip_t.size
.3985ae		48		pha		        pha                 ; Save for pseudo-header.
.3985af		89 01 00	bit #$0001	        bit     #1
.3985b2		f0 01		beq $3985b5	        beq     _aligned
.3985b4		1a		inc a		        inc     a
.3985b5						_aligned
.3985b5		a8		tay		        tay
.3985b6		a9 14 00	lda #$0014	        lda     #ip_t.size
.3985b9		20 55 85	jsr $398555	        jsr     header_checksum
.3985bc		18		clc		        clc
.3985bd		63 01		adc $01,s	        adc     1,s
.3985bf		83 01		sta $01,s	        sta     1,s
.3985c1		bf 1d 00 3c	lda $3c001d,x	        lda     pbuf.ipv4.proto,x
.3985c5		29 ff 00	and #$00ff	        and     #$ff
.3985c8		63 01		adc $01,s	        adc     1,s
.3985ca		83 01		sta $01,s	        sta     1,s
.3985cc		bf 20 00 3c	lda $3c0020,x	        lda     pbuf.ipv4.src+0,x
.3985d0		20 ee 85	jsr $3985ee	        jsr     _sum
.3985d3		bf 22 00 3c	lda $3c0022,x	        lda     pbuf.ipv4.src+2,x
.3985d7		20 ee 85	jsr $3985ee	        jsr     _sum
.3985da		bf 24 00 3c	lda $3c0024,x	        lda     pbuf.ipv4.dest+0,x
.3985de		20 ee 85	jsr $3985ee	        jsr     _sum
.3985e1		bf 26 00 3c	lda $3c0026,x	        lda     pbuf.ipv4.dest+2,x
.3985e5		20 ee 85	jsr $3985ee	        jsr     _sum
.3985e8		68		pla		        pla
.3985e9		69 00 00	adc #$0000	        adc     #0
.3985ec		7a		ply		        ply
.3985ed		60		rts		        rts
.3985ee		eb		xba		_sum    xba
.3985ef		63 03		adc $03,s	        adc     3,s
.3985f1		83 03		sta $03,s	        sta     3,s
.3985f3		60		rts		        rts
.3985f4						udp_make:
.3985f4		20 5d 80	jsr $39805d	        jsr     pbuf_alloc_x
.3985f7		d0 02		bne $3985fb	        bne     _fill
.3985f9		38		sec		        sec
.3985fa		60		rts		        rts
.3985fb						_fill
.3985fb		a9 45 00	lda #$0045	        lda     #$45                ; Version=4, IHL=5, TOS=0
.3985fe		9f 14 00 3c	sta $3c0014,x	        sta     pbuf.ipv4.ihl,x
.398602		a9 00 00	lda #$0000	        lda     #0                  ; Frag ID=0 (no fragmentation)
.398605		9f 18 00 3c	sta $3c0018,x	        sta     pbuf.ipv4.id,x
.398609		a9 40 00	lda #$0040	        lda     #$40                ; May fragment
.39860c		9f 1a 00 3c	sta $3c001a,x	        sta     pbuf.ipv4.flags,x
.398610		a9 40 11	lda #$1140	        lda     #$1140              ; Protocol=UDP, TTL=$40
.398613		9f 1c 00 3c	sta $3c001c,x	        sta     pbuf.ipv4.ttl,x
.398617		af 85 86 39	lda $398685	        lda     conf.ip_addr+0
.39861b		9f 20 00 3c	sta $3c0020,x	        sta     pbuf.ipv4.src+0,x
.39861f		af 87 86 39	lda $398687	        lda     conf.ip_addr+2
.398623		9f 22 00 3c	sta $3c0022,x	        sta     pbuf.ipv4.src+2,x
.398627		a5 02		lda $02		        lda     user.udp_info.remote_ip+0,d
.398629		9f 24 00 3c	sta $3c0024,x	        sta     pbuf.ipv4.dest+0,x
.39862d		a5 04		lda $04		        lda     user.udp_info.remote_ip+2,d
.39862f		9f 26 00 3c	sta $3c0026,x	        sta     pbuf.ipv4.dest+2,x
.398633		a5 00		lda $00		        lda     user.udp_info.local_port,d
.398635		eb		xba		        xba
.398636		9f 28 00 3c	sta $3c0028,x	        sta     pbuf.ipv4.udp.sport,x
.39863a		a5 06		lda $06		        lda     user.udp_info.remote_port,d
.39863c		eb		xba		        xba
.39863d		9f 2a 00 3c	sta $3c002a,x	        sta     pbuf.ipv4.udp.dport,x
.398641		20 6a 86	jsr $39866a	        jsr     copy_msg_data
.398644		a5 0c		lda $0c		        lda     user.udp_info.buflen,d
.398646		c9 b2 05	cmp #$05b2	        cmp     #1500 - eth_t.ipv4.udp.size ; Max data size
.398649		90 03		bcc $39864e	        bcc     _size
.39864b		a9 b2 05	lda #$05b2	        lda     #1500 - eth_t.ipv4.udp.size ; limit to max data size
.39864e		85 0e		sta $0e		_size   sta     user.udp_info.copied,d
.398650		18		clc		        clc
.398651		69 08 00	adc #$0008	        adc     #udp_t.size
.398654		eb		xba		        xba
.398655		9f 2c 00 3c	sta $3c002c,x	        sta     pbuf.ipv4.udp.length,x
.398659		eb		xba		        xba
.39865a		18		clc		        clc
.39865b		69 14 00	adc #$0014	        adc     #ip_t.size
.39865e		eb		xba		        xba
.39865f		9f 16 00 3c	sta $3c0016,x	        sta     pbuf.ipv4.len,x
.398663		20 7f 85	jsr $39857f	        jsr     update_udp_checksum
.398666		20 16 85	jsr $398516	        jsr     update_ip_checksum
.398669		60		rts		        rts
.39866a						copy_msg_data
.39866a		a0 00 00	ldy #$0000	        ldy     #0
.39866d		da		phx		        phx
.39866e		c4 0e		cpy $0e		_loop   cpy     user.udp_info.copied,d
.398670		b0 0d		bcs $39867f	        bcs     _done
.398672		b7 08		lda [$08],y	        lda     [user.udp_info.buffer],y
.398674		9f 30 00 3c	sta $3c0030,x	        sta     kernel.net.pbuf.ipv4.udp.data,x
.398678		e8		inx		        inx
.398679		e8		inx		        inx
.39867a		c8		iny		        iny
.39867b		c8		iny		        iny
.39867c		4c 6e 86	jmp $39866e	        jmp     _loop
.39867f		fa		plx		_done   plx
.398680		60		rts		        rts

;******  Return to file: src\networking/net.asm

>398681		00 00				init        .word   0   ; NZ if init has succeeded
>398683		c2				eth_mac     .byte   $c2 ; NIC's MAC prefix; the rest is the IP address.
>398684		56				            .byte   $56 ; c2:56: just happens to be a "local assignment" prefix :).
>398685						ip_addr     .fill   4   ; Local IP address, MUST IMMEDIATELY FOLLOW THE MAC!
>398689						ip_mask     .fill   4   ; Local netmask
>39868d						broadcast   .fill   4   ; Broadcast address
>398691		00 00 00 00			default     .dword  0   ; Default route (0 = local only)
>398695		00 00				ticks       .word   0   ; virtual timer
.398697						init
.398697		af e2 63 39	lda $3963e2	            lda     HAS_ETHERNET
.39869b		d0 02		bne $39869f	            bne     _init
.39869d		38		sec		            sec
.39869e		60		rts		            rts
.39869f						_init
.39869f		a9 00 00	lda #$0000	            lda     #0
.3986a2		8f 03 87 39	sta $398703	            sta     rx_queue+0
.3986a6		8f 05 87 39	sta $398705	            sta     rx_queue+2
.3986aa		b9 00 00	lda $0000,y	            lda     0+user.ip_info.ip,y
.3986ad		8f 85 86 39	sta $398685	            sta @l  0+conf.ip_addr
.3986b1		b9 02 00	lda $0002,y	            lda     2+user.ip_info.ip,y
.3986b4		8f 87 86 39	sta $398687	            sta @l  2+conf.ip_addr
.3986b8		b9 04 00	lda $0004,y	            lda     0+user.ip_info.mask,y
.3986bb		8f 89 86 39	sta $398689	            sta @l  0+conf.ip_mask
.3986bf		b9 06 00	lda $0006,y	            lda     2+user.ip_info.mask,y
.3986c2		8f 8b 86 39	sta $39868b	            sta @l  2+conf.ip_mask
.3986c6		b9 08 00	lda $0008,y	            lda     0+user.ip_info.default,y
.3986c9		8f 91 86 39	sta $398691	            sta @l  0+conf.default
.3986cd		b9 0a 00	lda $000a,y	            lda     2+user.ip_info.default,y
.3986d0		8f 93 86 39	sta $398693	            sta @l  2+conf.default
.3986d4		af 89 86 39	lda $398689	            lda     conf.ip_mask+0
.3986d8		49 ff ff	eor #$ffff	            eor     #$ffff
.3986db		0f 85 86 39	ora $398685	            ora     conf.ip_addr+0
.3986df		8f 8d 86 39	sta $39868d	            sta     conf.broadcast+0
.3986e3		af 8b 86 39	lda $39868b	            lda     conf.ip_mask+2
.3986e7		49 ff ff	eor #$ffff	            eor     #$ffff
.3986ea		0f 87 86 39	ora $398687	            ora     conf.ip_addr+2
.3986ee		8f 8f 86 39	sta $39868f	            sta     conf.broadcast+2
.3986f2		4b		phk		            phk
.3986f3		ab		plb		            plb
.3986f4		20 3a 80	jsr $39803a	            jsr     pbuf_init
.3986f7		20 ad 7e	jsr $397ead	            jsr     hardware.lan9221.eth_open
.3986fa		a9 01 00	lda #$0001	            lda     #1
.3986fd		8f 81 86 39	sta $398681	            sta     conf.init
.398701		18		clc		            clc
.398702		60		rts		            rts
.398703						rx_queue
>398703		00 00				head    .word   0
>398705		00 00				tail    .word   0
.398707						end
.398707						rx_enqueue
.398707		ad 03 87	lda $8703	        lda     <>rx_queue+lib.deque_t.head  ; or tail
.39870a		d0 0d		bne $398719	        bne     _ins
.39870c		9f 00 00 3c	sta $3c0000,x	        sta @l  kernel.net.pbuf.deque,x
.398710		8e 03 87	stx $8703	        stx    <>rx_queue+lib.deque_t.head,b
.398713		8e 05 87	stx $8705	        stx    <>rx_queue+lib.deque_t.tail,b
.398716		4c 2b 87	jmp $39872b	        jmp     _done
.398719		a9 00 00	lda #$0000	_ins    lda     #0
.39871c		9f 00 00 3c	sta $3c0000,x	        sta @l  kernel.net.pbuf.deque,x
.398720		8a		txa		        txa
.398721		ae 05 87	ldx $8705	        ldx    <>rx_queue+lib.deque_t.tail,b
.398724		9f 00 00 3c	sta $3c0000,x	        sta @l  kernel.net.pbuf.deque,x
.398728		8d 05 87	sta $8705	        sta     <>rx_queue+lib.deque_t.tail,b
.39872b		60		rts		        rts
.39872c						packet_recv
.39872c		20 00 7f	jsr $397f00	_loop   jsr     hardware.lan9221.eth_tick   ; NZ if the 100ms timer has reset.
.39872f		f0 09		beq $39873a	        beq     _recv
.398731		af 95 86 39	lda $398695	        lda     conf.ticks
.398735		1a		inc a		        inc     a
.398736		8f 95 86 39	sta $398695	        sta     conf.ticks
.39873a		20 5d 7f	jsr $397f5d	_recv   jsr     hardware.lan9221.eth_packet_recv
.39873d		aa		tax		        tax
.39873e		f0 21		beq $398761	        beq     _done
.398740		bf 12 00 3c	lda $3c0012,x	        lda     pbuf.eth.type,x
.398744		eb		xba		        xba
.398745		c9 00 08	cmp #$0800	        cmp     #$0800
.398748		f0 11		beq $39875b	        beq     _ipv4
.39874a		c9 06 08	cmp #$0806	        cmp     #$0806
.39874d		f0 06		beq $398755	        beq     _arp
.39874f		20 6e 80	jsr $39806e	        jsr     kernel.net.pbuf_free_x  ; We don't handle anything else.
.398752		4c 2c 87	jmp $39872c	        jmp     _loop
.398755		20 7c 80	jsr $39807c	_arp    jsr     arp.recv
.398758		4c 2c 87	jmp $39872c	        jmp     _loop
.39875b		20 3a 84	jsr $39843a	_ipv4   jsr     ip_check
.39875e		4c 2c 87	jmp $39872c	        jmp     _loop
.398761		60		rts		_done   rts
.398762						udp_send
.398762		af 81 86 39	lda $398681	            lda     conf.init
.398766		f0 30		beq $398798	            beq     _error
.398768		4b		phk		            phk
.398769		ab		plb		            plb
.39876a		20 2c 87	jsr $39872c	            jsr     packet_recv
.39876d		20 f4 85	jsr $3985f4	            jsr     udp_make
.398770		b0 22		bcs $398794	            bcs     _out
.398772		bf 24 00 3c	lda $3c0024,x	            lda     pbuf.ipv4.dest+0,x
.398776		cf 85 86 39	cmp $398685	            cmp     conf.ip_addr+0
.39877a		d0 0f		bne $39878b	            bne     _extern
.39877c		bf 26 00 3c	lda $3c0026,x	            lda     pbuf.ipv4.dest+2,x
.398780		cf 87 86 39	cmp $398687	            cmp     conf.ip_addr+2
.398784		d0 05		bne $39878b	            bne     _extern
.398786		20 3a 84	jsr $39843a	            jsr     ip_check
.398789		80 08		bra $398793	            bra     _done
.39878b		20 ff 82	jsr $3982ff	_extern     jsr     arp.bind
.39878e		b0 05		bcs $398795	            bcs     _fail
.398790		20 57 7f	jsr $397f57	            jsr     hardware.lan9221.eth_packet_send
.398793		18		clc		_done       clc
.398794		60		rts		_out        rts
.398795		20 6e 80	jsr $39806e	_fail       jsr     kernel.net.pbuf_free_x
.398798		38		sec		_error      sec
.398799		60		rts		            rts
.39879a						udp_recv
.39879a		af 81 86 39	lda $398681	            lda     conf.init
.39879e		d0 05		bne $3987a5	            bne     _recv
.3987a0		a9 00 00	lda #$0000	            lda     #0
.3987a3		38		sec		            sec
.3987a4		60		rts		            rts
.3987a5						_recv
.3987a5		4b		phk		            phk
.3987a6		ab		plb		            plb
.3987a7		20 2c 87	jsr $39872c	            jsr     packet_recv
.3987aa		64 0e		stz $0e		            stz     user.udp_info.copied,d
.3987ac		ae 03 87	ldx $8703	        ldx    <>rx_queue+lib.deque_t.head,b
.3987af		f0 0d		beq $3987be	        beq     _done
.3987b1		bf 00 00 3c	lda $3c0000,x	        lda @l  kernel.net.pbuf.deque,x
.3987b5		8d 03 87	sta $8703	        sta     <>rx_queue+lib.deque_t.head,b
.3987b8		d0 03		bne $3987bd	        bne     _okay
.3987ba		8d 05 87	sta $8705	        sta     <>rx_queue+lib.deque_t.tail,b
.3987bd		8a		txa		_okay   txa
.3987be		f0 59		beq $398819	            beq     _out
.3987c0		20 97 82	jsr $398297	            jsr     arp.cache_ip
.3987c3		bf 20 00 3c	lda $3c0020,x	            lda     pbuf.ipv4.src+0,x
.3987c7		85 02		sta $02		            sta     user.udp_info.remote_ip,d
.3987c9		bf 22 00 3c	lda $3c0022,x	            lda     pbuf.ipv4.src+2,x
.3987cd		85 04		sta $04		            sta     user.udp_info.remote_ip+2,d
.3987cf		bf 28 00 3c	lda $3c0028,x	            lda     pbuf.ipv4.udp.sport,x
.3987d3		eb		xba		            xba
.3987d4		85 06		sta $06		            sta     user.udp_info.remote_port,d
.3987d6		bf 2a 00 3c	lda $3c002a,x	            lda     pbuf.ipv4.udp.dport,x
.3987da		eb		xba		            xba
.3987db		85 00		sta $00		            sta     user.udp_info.local_port,d
.3987dd		bf 2c 00 3c	lda $3c002c,x	            lda     pbuf.ipv4.udp.length,x
.3987e1		eb		xba		            xba
.3987e2		38		sec		            sec
.3987e3		e9 08 00	sbc #$0008	            sbc     #udp_t.size
.3987e6		c5 0c		cmp $0c		            cmp     user.udp_info.buflen,d
.3987e8		90 04		bcc $3987ee	            bcc     _length
.3987ea		f0 02		beq $3987ee	            beq     _length
.3987ec		a5 0c		lda $0c		            lda     user.udp_info.buflen,d    ; Limit copy to buflen.
.3987ee		85 0e		sta $0e		_length     sta     user.udp_info.copied,d    ; copied = # of bytes to copy
.3987f0		da		phx		            phx
.3987f1		a0 00 00	ldy #$0000	            ldy     #0
.3987f4		4a		lsr a		            lsr     a
.3987f5		90 0f		bcc $398806	            bcc     _even
.3987f7		e2 20		sep #$20	_odd        sep     #$20
.3987f9		bf 30 00 3c	lda $3c0030,x	            lda     pbuf.ipv4.udp.data,x
.3987fd		97 08		sta [$08],y	            sta     [user.udp_info.buffer],y
.3987ff		e8		inx		            inx
.398800		c8		iny		            iny
.398801		c2 20		rep #$20	            rep     #$20
.398803		4c 10 88	jmp $398810	            jmp     _next
.398806		bf 30 00 3c	lda $3c0030,x	_even       lda     pbuf.ipv4.udp.data,x
.39880a		97 08		sta [$08],y	            sta     [user.udp_info.buffer],y
.39880c		e8		inx		            inx
.39880d		e8		inx		            inx
.39880e		c8		iny		            iny
.39880f		c8		iny		            iny
.398810		c4 0e		cpy $0e		_next       cpy     user.udp_info.copied,d
.398812		d0 f2		bne $398806	            bne     _even
.398814		fa		plx		            plx
.398815		20 6e 80	jsr $39806e	            jsr     kernel.net.pbuf_free_x
.398818		8a		txa		            txa     ; Set the NZ condition code.
.398819						_out
.398819		18		clc		            clc
.39881a		60		rts		            rts

;******  Return to file: src\kernel.asm

.39881b						    KERNEL_DATA
>39881b		20 20 20 20 0b 0c 0b 0c		    greet_msg   .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " UU    UU   +" ,$0D
>398823		0b 0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 20
>398833		20 20 2b 0d
>398837		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU   +",$0D
>39883f		0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 20 20
>39884f		20 2b 0d
>398852		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU +++++",$0D
>39885a		0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 20 2b 2b
>39886a		2b 2b 2b 0d
>39886e		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU   +",$0D
>398876		0c 0b 0c 20 55 55 20 20 20 20 55 55 20 20 20 2b
>398886		0d
>398887		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UUUUUUUU   +",$0D
>39888f		0b 0c 20 55 55 55 55 55 55 55 55 20 20 20 2b 0d
>39889f		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX U+ -- 3,670,016 Bytes Free", $0D
>3988a7		45 4e 49 58 20 55 2b 20 2d 2d 20 33 2c 36 37 30
>3988b7		2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65 0d
>3988c7		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com -- Kernel: "
>3988cf		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 2d 20 4b 65
>3988df		72 6e 65 6c 3a 20

;******  Processing file: src\version.asm

>3988e5		76 30 2e 35 2e 30 2d 61		.text "v0.5.0-alpha+2 (2023-07-19)"
>3988ed		6c 70 68 61 2b 32 20 28 32 30 32 33 2d 30 37 2d
>3988fd		31 39 29

;******  Return to file: src\kernel.asm

>398900		0d 00				                .text $0D,$00
>398902		90 90 90 90 90 90 d0 d0		  greet_clr_line1 .text $90, $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>39890a		b0 b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>39891a		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>39892a		f0 f0
>39892c		90 90 90 90 90 d0 d0 b0		  greet_clr_line2 .text $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>398934		b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398944		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398954		f0 f0
>398956		90 90 90 90 d0 d0 b0 b0		  greet_clr_line3 .text $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>39895e		a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>39896e		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>39897e		f0 f0
>398980		90 90 90 d0 d0 b0 b0 a0		  greet_clr_line4 .text $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>398988		a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398998		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>3989a8		f0 f0
>3989aa		90 90 d0 d0 b0 b0 a0 a0		  greet_clr_line5 .text $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>3989b2		e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>3989c2		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>3989d2		f0 f0
>3989d4		00 00 00 ff			fg_color_lut	.text $00, $00, $00, $FF
>3989d8		00 00 80 ff			                .text $00, $00, $80, $FF
>3989dc		00 80 00 ff			                .text $00, $80, $00, $FF
>3989e0		80 00 00 ff			                .text $80, $00, $00, $FF
>3989e4		00 80 80 ff			                .text $00, $80, $80, $FF
>3989e8		80 80 00 ff			                .text $80, $80, $00, $FF
>3989ec		80 00 80 ff			                .text $80, $00, $80, $FF
>3989f0		80 80 80 ff			                .text $80, $80, $80, $FF
>3989f4		00 45 ff ff			                .text $00, $45, $FF, $FF
>3989f8		13 45 8b ff			                .text $13, $45, $8B, $FF
>3989fc		00 00 20 ff			                .text $00, $00, $20, $FF
>398a00		00 20 00 ff			                .text $00, $20, $00, $FF
>398a04		20 00 00 ff			                .text $20, $00, $00, $FF
>398a08		20 20 20 ff			                .text $20, $20, $20, $FF
>398a0c		40 40 40 ff			                .text $40, $40, $40, $FF
>398a10		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>398a14		00 00 00 ff			bg_color_lut	.text $00, $00, $00, $FF
>398a18		00 00 80 ff			                .text $00, $00, $80, $FF
>398a1c		00 80 00 ff			                .text $00, $80, $00, $FF
>398a20		80 00 00 ff			                .text $80, $00, $00, $FF
>398a24		00 20 20 ff			                .text $00, $20, $20, $FF
>398a28		20 20 00 ff			                .text $20, $20, $00, $FF
>398a2c		20 00 20 ff			                .text $20, $00, $20, $FF
>398a30		20 20 20 ff			                .text $20, $20, $20, $FF
>398a34		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>398a38		13 45 8b ff			                .text $13, $45, $8B, $FF
>398a3c		00 00 20 ff			                .text $00, $00, $20, $FF
>398a40		00 20 00 ff			                .text $00, $20, $00, $FF
>398a44		40 00 00 ff			                .text $40, $00, $00, $FF
>398a48		10 10 10 ff			                .text $10, $10, $10, $FF
>398a4c		40 40 40 ff			                .text $40, $40, $40, $FF
>398a50		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>398a54		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>398a5c		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>398a6c		00
>398a6d		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>398a75		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>398a85		00
>398a86		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>398a8e		20 45 78 65 63 75 74 65 64 2e 0d 00
>398a9a		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>398aa2		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>398ab2		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>398aba		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>398aca		64 2e 2e 2e 0d 00
>398ad0		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>398ad8		20 50 72 65 73 65 6e 74 0d 00
>398ae2		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>398aea		65 73 65 6e 74 0d 00
>398af1		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>398af9		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>398b09		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>398b19		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>398b21		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>398b31		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>398b3e		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>398b46		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>398b52		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>398b5a		54 55 52 45 20 46 4f 55 4e 44 2e 00
>398b66		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>398b6e		45 44 2e 00
>398b72		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>398b7a		47 20 42 4d 50 20 50 41 52 53 45 52 00
>398b87		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>398b8f		50 72 65 73 65 6e 74 3a 00
>398b98		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>398ba0		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>398bb0		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>398bbe		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>398bc6		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>398bd6		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>398be3		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>398beb		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>398bfb		72 64 2e 00
>398bff		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>398c07		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>398c17		49 44 45 20 64 72 69 76 65 2e 00
>398c22		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>398c2a		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>398c3a		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>398c48		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>398c50		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>398c5f		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>398c67		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>398c76		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>398c7e		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>398c8e		2e 2e 00
>398c91		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>398c99		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>398ca1		52 4f 52 00
>398ca5		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>398cad		38 39 41 42 43 44 45 46 00
>398cb6						.align 256
>398d00		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398d08		37 38 39 30 2d 3d 08 09
>398d10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>398d18		6f 70 5b 5d 0d 00 61 73
>398d20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>398d28		27 60 00 5c 7a 78 63 76
>398d30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>398d38		00 20 00 81 82 83 84 85
>398d40		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>398d48		11 00 00 9d 00 1d 00 00
>398d50		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>398d58		8c 00 00 00 00 00 00 00
>398d60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398d68		00 00 00 00 00 00 00 00
>398d70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398d78		00 00 00 00 00 00 00 00
>398d80		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>398d88		26 2a 28 29 5f 2b 08 09
>398d90		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>398d98		4f 50 7b 7d 0d 00 41 53
>398da0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>398da8		22 7e 00 7c 5a 58 43 56
>398db0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>398db8		00 20 00 00 00 00 00 00
>398dc0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>398dc8		00 00 00 00 00 00 00 00
>398dd0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398dd8		00 00 00 00 00 00 00 00
>398de0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398de8		00 00 00 00 00 00 00 00
>398df0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398df8		00 00 00 00 00 00 00 00
>398e00		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398e08		37 38 39 30 2d 3d 08 09
>398e10		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>398e18		0f 10 5b 5d 0d 00 01 13
>398e20		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>398e28		27 00 00 5c 1a 18 03 16
>398e30		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>398e38		00 20 00 00 00 00 00 00
>398e40		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>398e48		00 00 00 00 00 00 00 00
>398e50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398e58		00 00 00 00 00 00 00 00
>398e60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398e68		00 00 00 00 00 00 00 00
>398e70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398e78		00 00 00 00 00 00 00 00
>398e80		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398e88		37 38 39 30 2d 3d 08 09
>398e90		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>398e98		6f 70 5b 5d 0d 00 61 73
>398ea0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>398ea8		27 60 00 5c 7a 78 63 76
>398eb0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>398eb8		00 20 00 00 00 00 00 00
>398ec0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>398ec8		00 00 00 00 00 00 00 00
>398ed0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398ed8		00 00 00 00 00 00 00 00
>398ee0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398ee8		00 00 00 00 00 00 00 00
>398ef0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398ef8		00 00 00 00 00 00 00 00
>398f00		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398f08		37 38 39 30 2d 3d 08 09
>398f10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>398f18		6f 70 5b 5d 0d 00 61 73
>398f20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>398f28		27 60 00 5c 7a 78 63 76
>398f30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>398f38		00 20 00 00 00 00 00 00
>398f40		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>398f48		00 00 00 00 00 00 00 00
>398f50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398f58		00 00 00 00 00 00 00 00
>398f60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398f68		00 00 00 00 00 00 00 00
>398f70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398f78		00 00 00 00 00 00 00 00
>398f80		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>398f88		00 00 00 00 00 00 00 00
>398f90		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>398f98		00 00 00 00 00 00 00 00
>398fa0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>398fa8		00 00 00 00 00 00 00 00
>398fb0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>398fb8		00 00 00 00 00 00 00 00
>398fc0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>398fc8		11 00 00 9d 00 1d 00 05
>398fd0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398fd8		00 00 00 00 00 00 00 00
>398fe0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398fe8		00 00 00 00 00 00 00 00
>398ff0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398ff8		00 00 00 00 00 00 00 00
>399000						.align 256
>399000		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>399008		34 37 3a 3d 3f 41 44 46
>399010		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>399018		57 58 5a 5b 5d 5e 60 61
>399020		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>399028		6d 6f 70 71 72 73 75 76
>399030		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>399038		80 81 82 83 84 85 86 87
>399040		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>399048		8f 90 91 92 93 93 94 95
>399050		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>399058		9d 9e 9e 9f a0 a1 a2 a2
>399060		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>399068		a9 aa ab ab ac ad ae ae
>399070		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>399078		b5 b5 b6 b7 b7 b8 b9 b9
>399080		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>399088		bf c0 c0 c1 c2 c2 c3 c4
>399090		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>399098		c9 ca ca cb cb cc cd cd
>3990a0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3990a8		d2 d3 d4 d4 d5 d5 d6 d6
>3990b0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3990b8		db dc dc dd de de df df
>3990c0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3990c8		e4 e4 e5 e5 e6 e6 e7 e7
>3990d0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3990d8		ec ec ed ed ee ee ef ef
>3990e0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3990e8		f4 f4 f5 f5 f6 f6 f7 f7
>3990f0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3990f8		fb fc fc fd fd fe fe ff
>399100						.align 256
>399100		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>399108		25 27 2a 2c 2e 30 32 34
>399110		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>399118		44 46 47 49 4a 4c 4d 4f
>399120		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>399128		5b 5c 5d 5e 60 61 62 63
>399130		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>399138		6d 6e 70 71 72 73 74 75
>399140		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>399148		7e 7f 80 81 82 83 84 84
>399150		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>399158		8d 8e 8e 8f 90 91 92 93
>399160		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>399168		9a 9b 9c 9d 9e 9f 9f a0
>399170		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>399178		a7 a8 a9 aa aa ab ac ad
>399180		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>399188		b3 b4 b5 b6 b6 b7 b8 b8
>399190		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>399198		bf bf c0 c1 c2 c2 c3 c4
>3991a0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3991a8		ca ca cb cc cc cd ce ce
>3991b0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3991b8		d4 d5 d6 d6 d7 d7 d8 d9
>3991c0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3991c8		de df e0 e0 e1 e1 e2 e3
>3991d0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3991d8		e8 e9 e9 ea ea eb ec ec
>3991e0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3991e8		f1 f2 f3 f3 f4 f4 f5 f5
>3991f0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3991f8		fb fb fc fc fd fd fe ff
>399200						.align 256
>399200		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		  .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>399208		83 dd ce 39 cd c5 3b 15
>399210		22 55 3b 94 e0 33 1f 38					          .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>399218		87 12 31 65 89 27 88 42
>399220		b2 32 72 84 b2 b2 31 52					          .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>399228		94 ce 56 ec fe da 58 c9
>399230		c8 5b 53 2a 08 3b 19 c1					          .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>399238		d0 10 2c b2 4b ea 32 61
>399240		da 34 33 8f 2b da 49 89					          .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>399248		a1 e6 ca 2d b3 ce b0 79
>399250		44 aa 32 82 91 e9 29 16					          .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>399258		5f e3 fb bd 15 2e be f5
>399260		e9 4a e4 2e 60 24 94 35					          .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>399268		8d 8f 2c 80 0a 5e 99 36
>399270		ac ab 21 26 42 7c 5e bc					          .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>399278		13 52 44 2f e3 ef 44 a2
>399280		86 c1 9c 47 5f 36 6d 02					          .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>399288		be 23 02 58 0a 52 5e b4
>399290		9f 06 08 c9 97 cb 9e dd					          .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>399298		d5 cf 3e df c4 9e da bb
>3992a0		9b 5d c9 f5 d9 c3 7e 87					          .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3992a8		77 7d b1 3b 4a 68 35 6e
>3992b0		ee 47 ad 8f fd 73 2e 46					          .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3992b8		b5 8f 44 63 55 6f e1 50
>3992c0		f4 b6 a3 4f 68 c4 a5 a4					          .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3992c8		57 74 b9 bd 05 14 50 eb
>3992d0		a5 5c 57 2f 99 dc 2e 8a					          .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3992d8		44 bc ec db 22 58 fc be
>3992e0		5f 3f 50 bd 2a 36 ab ae					          .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3992e8		24 aa 82 11 5c 9f 43 4d
>3992f0		8f 0c 20 00 91 b6 45 9e					          .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3992f8		3e 3d 66 7e 0a 1c 6b 74
>399300						.align 16
>399300		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>399308		01 01 01 00 00 00 00 00
>399310		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>399318		ff ff ff 01 00 00 00 00
>399320		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>399328		01 55 ff ff 01 00 00 00
>399330		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>399338		ff ff ff ff 01 00 00 00
>399340		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>399348		ff ff 01 ff ff 01 00 00
>399350		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>399358		01 ff ff 01 ff 01 00 00
>399360		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>399368		ff 01 ff ff ff 01 00 00
>399370		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>399378		ff ff ff ff ff 01 01 00
>399380		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>399388		ff ff ff ff 01 ff ff 01
>399390		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>399398		ff ff ff ff ff ff ff 01
>3993a0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3993a8		55 55 01 ff ff 55 01 00
>3993b0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3993b8		01 01 55 ff 55 01 00 00
>3993c0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3993c8		01 55 55 55 01 00 00 00
>3993d0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3993d8		01 55 55 01 00 00 00 00
>3993e0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3993e8		00 01 01 00 00 00 00 00
>3993f0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3993f8		00 00 00 00 00 00 00 00
>3a0000		5c 67 8a 3a 5c 79 70 3a		        .binary "binaries/basic816_3A0000.bin"
>3a0008		5c 6b 27 3a 5c ba 02 3a 5c 58 00 3a 5c b8 00 3a
>3a0018		5c 0f 04 3a 5c 5e 02 3a 5c 79 02 3a 5c 80 02 3a
>3a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>3a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>3a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>3a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078		0d d0 03 4c b1 00 c9 08 d0 1a e0 00 00 f0 ed da
>3a0088		bf 01 4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0
>3a0098		fa ca 80 0e c9 20 90 d4 9f 00 4c 00 e8 20 18 00
>3a00a8		80 ca a9 08 20 18 00 80 c3 a9 00 20 1c 00 28 60
>3a00b8		da 5a 8b 0b 08 22 4c 10 00 28 2b ab 7a fa 60 08
>3a00c8		e2 30 48 a9 1b 20 18 00 a9 5b 20 18 00 68 20 18
>3a00d8		00 28 60 0b 8b 08 08 e2 20 48 a9 00 48 ab 68 28
>3a00e8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 3b 38 e9 04
>3a00f8		00 1b e2 20 a9 00 83 02 83 03 83 04 20 14 00 c9
>3a0108		00 f0 f9 83 01 a3 02 d0 35 a3 01 c9 08 d0 0a 20
>3a0118		18 00 a9 50 20 c7 00 80 e3 c9 0d f0 0a c9 1b d0
>3a0128		06 a9 01 83 02 80 d5 20 18 00 a3 01 85 0c c2 20
>3a0138		3b 18 69 04 00 1b e2 20 a5 0c 28 2b ab 60 c9 01
>3a0148		d0 10 a3 01 c9 5b f0 03 82 a9 ff a9 02 83 02 82
>3a0158		aa ff c9 02 d0 29 a3 01 c9 41 90 0c c9 45 b0 08
>3a0168		a3 01 20 c7 00 82 8c ff c9 30 90 10 c9 3a b0 0c
>3a0178		38 e9 30 83 03 a9 03 83 02 82 80 ff 82 75 ff c9
>3a0188		03 d0 41 a3 01 c9 30 90 29 c9 3a b0 25 a3 03 8f
>3a0198		00 01 00 a9 00 8f 01 01 00 8f 03 01 00 a9 0a 8f
>3a01a8		02 01 00 a3 01 38 e9 30 18 6f 04 01 00 83 03 82
>3a01b8		4a ff c9 3b d0 07 a9 04 83 02 82 3f ff c9 7e f0
>3a01c8		40 82 30 ff c9 04 f0 03 82 5f ff a3 01 c9 30 90
>3a01d8		29 c9 3a b0 25 a3 04 8f 00 01 00 a9 00 8f 01 01
>3a01e8		00 8f 03 01 00 a9 0a 8f 02 01 00 a3 01 38 e9 30
>3a01f8		18 6f 04 01 00 83 04 82 02 ff c9 7e f0 03 82 f3
>3a0208		fe a3 03 c9 02 f0 0b c9 03 f0 0b c9 18 f0 0f 82
>3a0218		e2 fe a9 40 80 02 a9 50 20 c7 00 82 d6 fe a5 d2
>3a0228		d0 10 a3 04 c9 08 d0 0a a9 1b 20 18 00 a9 5f 20
>3a0238		18 00 82 bf fe 08 e2 20 af 00 00 af 89 3c f0 08
>3a0248		09 03 8f 00 00 af 80 0c 09 01 8f 00 00 af a9 00
>3a0258		22 3c 10 00 28 60 08 e2 20 c9 00 f0 08 af 10 00
>3a0268		af 09 01 80 06 af 10 00 af 29 fe 8f 10 00 af 28
>3a0278		60 08 22 84 10 00 28 60 48 da 5a 0b 08 e2 20 c2
>3a0288		10 a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f 00
>3a0298		c0 af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00 5b
>3a02a8		68 28 a2 00 00 a0 00 00 22 84 10 00 28 2b 7a fa
>3a02b8		68 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a02c8		c2 30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2 20
>3a02d8		29 ff 00 85 0a af 11 00 00 8f 08 01 00 af 1c 00
>3a02e8		00 3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08 a5
>3a02f8		0a 69 00 00 85 0a e2 20 af 0f 00 00 85 8f a0 00
>3a0308		00 a2 00 00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0 f4
>3a0318		af 0f 00 00 3a aa bf 00 4f 00 c9 20 d0 09 a9 00
>3a0328		9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 20 69
>3a0338		03 a2 00 00 a9 00 9f 18 f0 3a e8 e0 40 00 d0 f6
>3a0348		a9 80 8f b4 08 00 e2 20 a9 00 8f 89 0f 00 a9 00
>3a0358		8f 00 02 af 8f 0c 02 af 8f 18 02 af 8f 24 02 af
>3a0368		60 08 e2 20 af 0e 08 af 09 08 8f 0e 08 af af 00
>3a0378		08 af 8f 84 e8 af af 02 08 af 8f 85 e8 af a9 03
>3a0388		8f 86 e8 af af 0e 08 af 29 f7 8f 0e 08 af ea ea
>3a0398		ea a9 01 8f 86 e8 af 28 60 08 e2 20 48 48 a9 00
>3a03a8		22 3c 10 00 68 22 18 10 00 af 89 0f 00 29 01 d0
>3a03b8		f8 68 28 60 08 e2 20 48 48 a9 01 22 3c 10 00 68
>3a03c8		22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60 08
>3a03d8		c2 20 48 e2 20 a9 0d 20 18 00 c2 20 68 28 60 08
>3a03e8		22 78 10 00 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a03f8		68 28 e2 20 a5 b6 1a 85 b6 cf 13 00 00 90 05 20
>3a0408		14 00 64 b6 2b 28 60 da 5a 0b 08 08 c2 20 48 a9
>3a0418		00 08 5b 68 28 e2 20 c2 10 8f b5 08 00 af b4 08
>3a0428		00 29 20 f0 07 af b5 08 00 20 28 00 af b4 08 00
>3a0438		29 80 f0 07 af b5 08 00 20 a1 03 af b4 08 00 29
>3a0448		40 f0 14 af b5 08 00 20 bc 03 af b5 08 00 c9 0d
>3a0458		d0 05 a9 0a 20 bc 03 28 2b 7a fa 60 08 e2 20 bd
>3a0468		00 00 f0 06 20 18 00 e8 80 f5 28 60 08 c2 20 48
>3a0478		48 4a 4a 4a 4a 4a 4a 4a 4a 20 8e 04 68 29 ff 00
>3a0488		20 8e 04 68 28 60 08 c2 20 48 e2 20 48 4a 4a 4a
>3a0498		4a 20 a5 04 68 20 a5 04 c2 20 68 28 60 08 c2 30
>3a04a8		da 29 0f 00 aa bf 00 d0 3a 20 18 00 fa 28 60 08
>3a04b8		c2 30 48 da 5a 8b 0b c2 30 a3 0b 18 69 03 00 aa
>3a04c8		e2 20 a9 3a 48 ab bd 00 00 f0 06 20 a1 03 e8 80
>3a04d8		f5 c2 30 2b ab 7a fa 68 28 60 08 e2 20 c9 5b b0
>3a04e8		04 c9 41 b0 0b c9 7b b0 04 c9 61 b0 03 28 18 60
>3a04f8		28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 03 28 18
>3a0508		60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 13 c9
>3a0518		67 b0 04 c9 61 b0 0b c9 47 b0 04 c9 41 b0 03 28
>3a0528		18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 12
>3a0538		c9 67 b0 04 c9 61 b0 0f c9 47 b0 04 c9 41 b0 09
>3a0548		28 60 38 e9 30 80 f9 29 df 38 e9 37 80 f2 08 e2
>3a0558		20 c9 7b b0 06 c9 61 90 02 29 df 28 60 08 e2 20
>3a0568		c2 10 bd 00 00 f0 09 20 56 05 9d 00 00 e8 80 f2
>3a0578		28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>3a0588		48 06 23 26 25 a5 23 85 0c a5 25 85 0e 06 0c 26
>3a0598		0e 06 0c 26 0e 18 a5 23 65 0c 85 23 a5 25 65 0e
>3a05a8		85 25 68 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a05b8		68 28 c2 20 a5 23 8f 1a 01 00 a9 0a 00 8f 18 01
>3a05c8		00 af 1c 01 00 85 23 64 25 af 1e 01 00 85 29 64
>3a05d8		2b e2 20 a9 00 85 27 85 2d 2b 28 60 08 0b 08 c2
>3a05e8		20 48 a9 00 08 5b 68 28 c2 20 a5 23 8f 1a 01 00
>3a05f8		a9 64 00 8f 18 01 00 af 1c 01 00 85 23 64 25 af
>3a0608		1e 01 00 85 29 64 2b e2 20 a9 00 85 27 85 2d 2b
>3a0618		28 60 08 c2 20 a5 23 d0 08 a5 25 d0 04 28 e2 02
>3a0628		60 28 c2 02 60 08 c2 30 a9 ff ff 85 23 85 25 e2
>3a0638		20 a9 00 85 27 28 60 08 c2 30 a9 00 00 85 23 85
>3a0648		25 e2 20 a9 00 85 27 28 60 08 e2 20 a5 27 c9 00
>3a0658		f0 07 c9 01 d0 05 20 ff 5b 28 60 08 c2 20 48 a9
>3a0668		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a0678		ff 00 20 5b 1e e2 20 dc d4 08 08 e2 20 a5 2d c9
>3a0688		00 f0 37 c9 01 d0 35 c2 20 a5 25 48 a5 23 48 c2
>3a0698		20 a5 29 85 23 a5 2b 85 25 e2 20 a9 01 85 27 20
>3a06a8		ff 5b c2 20 a5 23 85 29 a5 25 85 2b e2 20 a9 00
>3a06b8		85 2d c2 20 68 85 23 68 85 25 28 60 08 c2 20 48
>3a06c8		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>3a06d8		29 ff 00 20 5b 1e e2 20 dc d4 08 08 e2 20 a5 27
>3a06e8		c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a06f8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a0708		e2 20 dc d4 08 08 e2 20 a5 27 c9 00 f0 07 c9 01
>3a0718		d0 0b 20 ff 5b c2 20 a5 25 d0 21 28 60 08 c2 20
>3a0728		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a0738		20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2 20 48
>3a0748		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>3a0758		29 ff 00 20 5b 1e e2 20 dc d4 08 08 e2 20 a5 27
>3a0768		c9 00 f0 07 c9 01 d0 11 20 ff 5b a5 26 d0 29 a5
>3a0778		25 d0 25 a5 24 d0 21 28 60 08 c2 20 48 a9 00 08
>3a0788		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a0798		20 5b 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a07a8		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a07b8		5b 1e e2 20 dc d4 08 08 e2 20 a5 27 c9 01 f0 26
>3a07c8		c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a07d8		a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>3a07e8		dc d4 08 20 f9 5b 28 60 08 e2 20 a5 2d c9 01 f0
>3a07f8		26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0808		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>3a0818		20 dc d4 08 20 21 08 28 60 c2 20 a5 25 48 a5 23
>3a0828		48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20 a9 00 85
>3a0838		27 20 f9 5b c2 20 a5 23 85 29 a5 25 85 2b e2 20
>3a0848		a9 01 85 2d c2 20 68 85 23 68 85 25 60 08 e2 20
>3a0858		a5 27 c9 00 f0 23 c9 01 f0 2e 08 c2 20 48 a9 00
>3a0868		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a0878		00 20 5b 1e e2 20 dc d4 08 a5 2d c9 00 f0 16 c9
>3a0888		01 d0 d7 20 f9 5b 80 0d a5 2d c9 01 f0 07 c9 00
>3a0898		d0 c8 20 21 08 e2 20 a5 27 28 60 08 e2 20 a5 27
>3a08a8		c9 02 d0 25 a5 2d c9 02 f0 24 08 c2 20 48 a9 00
>3a08b8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a08c8		00 20 5b 1e e2 20 dc d4 08 20 55 08 a5 27 28 60
>3a08d8		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 64 23
>3a08e8		64 25 e2 20 64 27 a7 00 c9 26 f0 44 e2 20 a7 00
>3a08f8		20 fb 04 90 76 20 7a 05 38 e9 30 c2 20 29 ff 00
>3a0908		18 65 23 85 23 a5 25 69 00 00 85 25 20 1a 21 80
>3a0918		db 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a0928		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a0938		20 1a 21 a7 00 c9 48 f0 04 c9 68 d0 d4 20 1a 21
>3a0948		e2 20 a7 00 20 0c 05 90 22 20 2d 05 c2 20 06 23
>3a0958		26 25 06 23 26 25 06 23 26 25 06 23 26 25 29 ff
>3a0968		00 18 65 23 85 23 20 1a 21 80 d5 2b 28 60 08 c2
>3a0978		30 a5 04 f0 1c 38 a5 04 e5 1a a8 e2 20 b7 1a f0
>3a0988		10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0 ff ff d0
>3a0998		ec a9 00 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a09a8		c2 30 a5 1a 85 00 e2 20 a5 1c 85 02 20 3b 21 a7
>3a09b8		00 20 fb 04 90 0c 20 d8 08 c2 20 a5 23 85 d7 20
>3a09c8		3b 21 c2 20 a5 00 85 1a e2 20 a5 02 85 1c 20 ea
>3a09d8		09 e2 20 20 5b 0a c9 00 f0 05 20 06 0c 80 f4 2b
>3a09e8		28 60 08 c2 20 a5 1a 85 00 a5 1c 85 02 a2 00 00
>3a09f8		e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0 53 c9 3a
>3a0a08		f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0 10 c9
>3a0a18		72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72 d0 1a c8
>3a0a28		b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7 00 f0
>3a0a38		20 c9 4d f0 0a c9 6d f0 06 e8 20 1a 21 80 b3 a7
>3a0a48		00 c9 3a d0 03 20 1a 21 a9 03 85 1e a9 91 20 06
>3a0a58		0c 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0a68		20 a9 7f 85 1e c2 10 20 bb 0b a5 1e d0 03 4c fb
>3a0a78		0a c2 20 a5 1a 85 00 e2 20 a5 1c 85 02 c2 20 64
>3a0a88		04 64 06 e2 30 a0 00 b7 00 f0 da c9 91 f0 d6 c8
>3a0a98		c4 1e 90 f3 c2 10 a7 00 c9 22 d0 05 20 1d 0b 80
>3a0aa8		28 a5 1e c9 03 90 19 c2 20 a5 00 c5 1a d0 08 e2
>3a0ab8		20 a5 02 c5 1c f0 09 e2 20 a7 04 20 42 51 b0 09
>3a0ac8		e2 20 20 2d 0b c9 00 d0 11 c2 20 a5 00 85 04 e2
>3a0ad8		20 a5 02 85 06 20 1a 21 80 a9 c9 81 d0 15 20 76
>3a0ae8		09 c9 00 f0 11 89 80 f0 08 c9 90 f0 04 a9 af 80
>3a0af8		02 a9 81 2b 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a0b08		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a0b18		e2 20 dc d4 08 08 e2 20 20 1a 21 a7 00 f0 04 c9
>3a0b28		22 d0 f5 28 60 da 5a 08 0b 08 c2 20 48 a9 00 08
>3a0b38		5b 68 28 c2 20 a5 04 d0 0a e2 20 a5 04 d0 04 a9
>3a0b48		00 80 0a e2 20 a7 04 20 42 51 a9 00 2a 85 28 c2
>3a0b58		30 a9 fb 0c 85 08 e2 20 a9 3a 85 0a a2 80 00 e2
>3a0b68		20 a0 01 00 b7 08 f0 31 c5 1e d0 32 c2 30 a0 02
>3a0b78		00 b7 08 85 0c e2 20 a9 3a 85 0e a5 28 f0 07 a7
>3a0b88		0c 20 42 51 b0 18 e2 10 a0 00 b7 00 20 56 05 d7
>3a0b98		0c d0 0b c8 c4 1e 90 f2 8a 2b 28 7a fa 60 c2 30
>3a0ba8		18 a5 08 69 08 00 85 08 e2 20 a5 0a 69 00 85 0a
>3a0bb8		e8 80 ac 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a0bc8		c2 30 a9 fb 0c 85 08 a9 3a 00 85 0a 64 0c e2 20
>3a0bd8		a0 01 00 b7 08 f0 1d c5 1e b0 06 c5 0c 90 02 85
>3a0be8		0c c2 20 18 a5 08 69 08 00 85 08 a5 0a 69 00 00
>3a0bf8		85 0a 80 da e2 20 a5 0c 85 1e ab 2b 28 60 08 0b
>3a0c08		08 c2 20 48 a9 00 08 5b 68 28 e2 20 87 00 c2 20
>3a0c18		18 a5 00 69 01 00 85 08 a5 02 69 00 00 85 0a e2
>3a0c28		10 a4 1e 88 e2 20 b7 08 87 08 f0 13 c2 20 18 a5
>3a0c38		08 69 01 00 85 08 a5 0a 69 00 00 85 0a 80 e5 2b
>3a0c48		28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69 fb 0c aa
>3a0c58		28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a0c68		e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 4a 0c
>3a0c78		bd 00 00 c2 20 29 0f 00 2b ab 28 60 08 8b 0b 08
>3a0c88		c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 3a 48
>3a0c98		ab 68 28 c2 30 20 4a 0c bd 04 00 2b ab 28 60 08
>3a0ca8		8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a0cb8		a9 3a 48 ab 68 28 e2 20 c2 10 20 4a 0c bd 00 00
>3a0cc8		c2 20 29 f0 00 2b ab 28 60 08 8b 0b 08 c2 20 48
>3a0cd8		a9 00 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28
>3a0ce8		e2 20 c2 10 20 4a 0c bd 06 00 c2 20 29 ff 00 2b
>3a0cf8		ab 28 60 03 01 10 d0 d8 27 02 00 03 01 12 d0 18
>3a0d08		28 02 00 02 01 14 d0 4f 28 02 00 02 01 16 d0 86
>3a0d18		28 02 00 02 03 18 d0 90 28 02 00 00 01 1c d0 a3
>3a0d28		28 02 00 04 02 1e d0 61 2a 02 00 04 02 21 d0 21
>3a0d38		2a 02 00 04 02 24 d0 e1 29 02 00 04 01 27 d0 21
>3a0d48		29 02 00 04 01 29 d0 a1 29 02 00 04 01 2b d0 61
>3a0d58		29 02 00 05 03 2d d0 0b 29 01 00 06 03 31 d0 dd
>3a0d68		28 02 00 07 02 35 d0 f4 28 02 00 ff 01 38 d0 00
>3a0d78		00 00 00 40 01 3a d0 00 00 00 00 20 03 3c d0 74
>3a0d88		41 00 00 20 05 40 d0 79 45 00 00 20 03 46 d0 c4
>3a0d98		44 00 00 20 04 4a d0 64 44 00 00 20 03 4f d0 5b
>3a0da8		44 00 00 20 02 53 d0 f3 43 00 00 50 04 56 d0 00
>3a0db8		00 00 00 50 04 5b d0 00 00 00 00 20 05 60 d0 36
>3a0dc8		43 00 00 20 06 66 d0 af 43 00 00 20 03 6d d0 8b
>3a0dd8		41 00 00 50 02 71 d0 00 00 00 00 50 04 74 d0 00
>3a0de8		00 00 00 20 04 79 d0 7f 42 00 00 20 02 7e d0 85
>3a0df8		41 00 00 20 04 81 d0 88 41 00 00 50 05 86 d0 00
>3a0e08		00 00 00 50 05 8c d0 00 00 00 00 20 04 92 d0 82
>3a0e18		41 00 00 20 03 97 d0 ba 44 00 00 20 04 9b d0 55
>3a0e28		41 00 00 20 04 a0 d0 e5 40 00 00 20 05 a5 d0 7b
>3a0e38		40 00 00 20 05 ab d0 08 40 00 00 20 03 b1 d0 04
>3a0e48		40 00 00 20 04 b5 d0 e5 3e 00 00 20 04 ba d0 f7
>3a0e58		3f 00 00 20 07 bf d0 fb 3f 00 00 20 03 c7 d0 38
>3a0e68		3e 00 00 20 04 cb d0 a1 3d 00 00 00 01 d0 d0 a1
>3a0e78		2a 01 00 30 03 d2 d0 91 4b 00 00 30 04 d6 d0 e1
>3a0e88		4b 00 00 30 05 db d0 aa 4c 00 00 30 05 e1 d0 37
>3a0e98		4c 00 00 30 04 e7 d0 09 4d 00 00 30 03 ec d0 5e
>3a0ea8		4d 00 00 30 03 f0 d0 a3 4d 00 00 30 03 f4 d0 2c
>3a0eb8		4e 00 00 30 03 f8 d0 b5 4e 00 00 30 03 fc d0 17
>3a0ec8		4f 00 00 30 04 00 d1 03 4b 00 00 30 03 05 d1 a2
>3a0ed8		4a 00 00 30 04 09 d1 54 4a 00 00 30 03 0e d1 fe
>3a0ee8		49 00 00 30 05 12 d1 35 49 00 00 30 06 18 d1 54
>3a0ef8		48 00 00 30 04 1f d1 9f 47 00 00 10 03 24 d1 7e
>3a0f08		50 00 00 10 03 28 d1 49 50 00 00 10 04 2c d1 52
>3a0f18		6c 00 00 10 04 31 d1 95 50 00 00 10 03 36 d1 79
>3a0f28		69 00 00 20 05 3a d1 24 6b 00 00 10 04 40 d1 ff
>3a0f38		6b 00 00 20 05 45 d1 0b 6d 00 00 20 03 4b d1 2a
>3a0f48		6e 00 00 10 04 4f d1 97 6d 00 00 20 06 54 d1 a0
>3a0f58		6e 00 00 20 04 5b d1 c4 6f 00 00 10 07 60 d1 46
>3a0f68		50 00 00 20 03 68 d1 2f 3d 00 00 20 05 6c d1 3f
>3a0f78		3c 00 00 20 09 72 d1 60 2c 00 00 20 09 7c d1 ed
>3a0f88		2b 00 00 20 0a 86 d1 1d 2c 00 00 20 07 91 d1 5a
>3a0f98		2b 00 00 30 08 99 d1 56 46 00 00 20 07 a2 d1 ef
>3a0fa8		2a 00 00 30 08 aa d1 c0 46 00 00 20 08 b3 d1 a5
>3a0fb8		2d 00 00 20 08 bc d1 d9 2c 00 00 20 06 c5 d1 df
>3a0fc8		2e 00 00 20 09 cc d1 e7 2f 00 00 20 04 d6 d1 44
>3a0fd8		31 00 00 20 04 db d1 b5 31 00 00 20 04 e0 d1 4e
>3a0fe8		32 00 00 20 06 e5 d1 8a 33 00 00 20 08 ec d1 28
>3a0ff8		34 00 00 20 0a f5 d1 76 34 00 00 20 07 00 d2 ad
>3a1008		35 00 00 20 07 08 d2 2b 36 00 00 20 08 10 d2 9d
>3a1018		36 00 00 20 06 19 d2 da 36 00 00 20 07 20 d2 0a
>3a1028		3a 00 00 50 06 28 d2 00 00 00 00 50 04 2f d2 00
>3a1038		00 00 00 20 06 34 d2 1f 3c 00 00 30 03 3b d2 6d
>3a1048		4f 00 00 30 03 3f d2 25 47 00 00 30 03 43 d2 80
>3a1058		4f 00 00 30 03 47 d2 96 4f 00 00 30 03 4b d2 ac
>3a1068		4f 00 00 30 02 4f d2 c2 4f 00 00 30 04 52 d2 d8
>3a1078		4f 00 00 30 04 57 d2 ee 4f 00 00 30 04 5c d2 04
>3a1088		50 00 00 30 03 61 d2 1a 50 00 00 30 03 65 d2 30
>3a1098		50 00 00 30 05 69 d2 7b 47 00 00 00 00 00 00 00
>3a10a8		00 00 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a10b8		30 a9 ff ff 85 ba e2 20 a9 37 85 bc c2 20 64 b7
>3a10c8		64 bd e2 20 64 b9 64 bf 2b 28 60 5a 08 e2 20 85
>3a10d8		ea c2 10 86 8f c2 20 a5 0e 48 a5 0c 48 a5 12 48
>3a10e8		a5 10 48 20 83 11 b0 03 20 07 11 20 0f 13 c2 20
>3a10f8		68 85 10 68 85 12 68 85 0c 68 85 0e 28 7a 60 08
>3a1108		0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a6 8f ca
>3a1118		86 0c e8 c2 30 38 a5 ba e5 0c 85 c0 e2 20 a5 bc
>3a1128		e9 00 85 c2 20 0f 13 e2 20 a5 ea a0 00 00 97 c3
>3a1138		a9 00 a0 01 00 97 c3 a0 02 00 97 c3 c2 20 a9 00
>3a1148		00 97 c3 c2 20 18 a5 ba 69 01 00 a0 05 00 97 c3
>3a1158		e2 20 c8 c8 a5 bc 69 00 97 c3 c2 20 a5 c0 85 b7
>3a1168		e2 20 a5 c2 85 b9 c2 20 38 a5 c3 e9 01 00 85 ba
>3a1178		e2 20 a5 c5 e9 00 85 bc 2b 28 60 08 0b 08 c2 20
>3a1188		48 a9 00 08 5b 68 28 c2 30 c2 20 a5 bd 85 c9 e2
>3a1198		20 a5 bf 85 cb a5 c9 d0 17 e2 20 a5 cb d0 11 c2
>3a11a8		20 a9 00 00 85 cf e2 20 a9 00 85 d1 2b 28 18 60
>3a11b8		c2 20 a0 05 00 b7 c9 85 cc e2 20 c8 c8 b7 c9 85
>3a11c8		ce c2 20 18 a5 c9 65 8f 85 0c e2 20 a5 cb 69 00
>3a11d8		85 0e c2 20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e
>3a11e8		69 00 85 0e c2 20 a5 0c c5 cc d0 28 e2 20 a5 0e
>3a11f8		c5 ce d0 20 c2 20 a5 cf d0 5d e2 20 a5 d1 d0 57
>3a1208		c2 20 a0 02 00 b7 c9 85 bd e2 20 c8 c8 b7 c9 85
>3a1218		bf 4c c0 12 c2 20 a5 0c 69 08 00 85 10 e2 20 a5
>3a1228		0e 69 00 85 12 e2 20 a5 c6 c5 10 b0 3e 90 08 c2
>3a1238		20 a5 c6 c5 10 b0 34 c2 20 a5 c9 85 cf e2 20 a5
>3a1248		cb 85 d1 c2 20 a0 02 00 b7 cf 85 c9 e2 20 c8 c8
>3a1258		b7 cf 85 cb 4c 9d 11 c2 20 a0 02 00 b7 c9 97 cf
>3a1268		e2 20 c8 c8 b7 c9 97 cf 4c c0 12 c2 20 a0 05 00
>3a1278		b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a0 02
>3a1288		00 b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a5
>3a1298		cf d0 14 e2 20 a5 cf d0 0e c2 20 a5 0c 85 bd e2
>3a12a8		20 a5 0e 85 bf 80 11 c2 20 a0 02 00 a5 0c 97 cf
>3a12b8		e2 20 c8 c8 a5 0e 97 cf c2 20 a5 c9 85 c3 e2 20
>3a12c8		a5 cb 85 c5 c2 20 a5 c3 85 b7 e2 20 a5 c5 85 b9
>3a12d8		c2 20 a0 05 00 a5 0c 97 c3 e2 20 c8 c8 a5 0e 97
>3a12e8		c3 c2 20 a0 02 00 a9 00 00 97 c3 e2 20 c8 c8 97
>3a12f8		c3 e2 20 a5 ea e2 20 a0 00 00 97 c3 a0 01 00 a9
>3a1308		00 97 c3 2b 28 38 60 08 c2 20 38 a5 c0 e9 08 00
>3a1318		85 c3 e2 20 a5 c2 e9 00 85 c5 28 60 08 e2 20 a5
>3a1328		c5 f0 04 c9 38 b0 12 c2 20 a5 c3 f0 0c e2 20 a0
>3a1338		01 00 b7 c3 1a 97 c3 28 60 00 ea 08 e2 20 a5 c5
>3a1348		f0 04 c9 38 b0 17 c2 20 a5 c3 f0 11 e2 20 a0 01
>3a1358		00 b7 c3 3a 97 c3 d0 03 20 67 13 28 60 00 ea 08
>3a1368		c2 20 a5 bd d0 21 e2 20 a5 bf d0 1b a5 c5 85 bf
>3a1378		c2 20 a5 c3 85 bd a9 00 00 a0 02 00 97 c3 c8 c8
>3a1388		e2 20 97 c3 4c 4e 14 e2 20 a5 bf c5 c5 90 28 c2
>3a1398		20 a5 bd c5 c3 90 20 c2 20 a5 bd a0 02 00 97 c3
>3a13a8		e2 20 c8 c8 a5 bf 97 c3 c2 20 a5 c3 85 bd e2 20
>3a13b8		a5 c5 85 bf 4c 4e 14 c2 20 a5 bd 85 08 e2 20 a5
>3a13c8		bf 85 0a e2 20 a0 04 00 b7 08 c5 c8 90 32 d0 0b
>3a13d8		c2 20 a0 02 00 b7 08 c5 c6 90 25 c2 20 a0 02 00
>3a13e8		b7 08 97 c3 e2 20 c8 c8 b7 08 97 c3 c2 20 a5 c3
>3a13f8		a0 02 00 97 08 e2 20 a5 c5 c8 c8 97 08 4c 4e 14
>3a1408		c2 20 a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0
>3a1418		19 c2 20 a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08
>3a1428		85 0a c2 20 a5 0c 85 08 80 99 c2 20 a5 c3 a0 02
>3a1438		00 97 08 e2 20 c8 c8 a5 c5 97 08 a9 00 97 c3 c2
>3a1448		20 a0 02 00 97 c3 20 53 14 28 60 08 c2 20 a5 bd
>3a1458		85 c3 e2 20 a5 bf 85 c5 c2 20 a5 c3 d0 09 e2 20
>3a1468		a5 c5 d0 03 4c f6 14 c2 20 a0 02 00 b7 c3 85 0c
>3a1478		e2 20 c8 c8 b7 c3 85 0e c2 20 a0 05 00 b7 c3 85
>3a1488		10 e2 20 c8 c8 b7 c3 85 12 c2 20 a5 0c c5 10 d0
>3a1498		08 e2 20 a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c3
>3a14a8		85 0c e2 20 c8 c8 b7 c3 85 0e c2 20 a5 0c 85 c3
>3a14b8		e2 20 a5 0e 85 c5 80 a0 c2 20 a0 02 00 b7 c3 85
>3a14c8		0c e2 20 c8 c8 b7 c3 85 0e c2 20 a0 02 00 b7 0c
>3a14d8		97 c3 e2 20 c8 c8 b7 0c 97 c3 c2 20 a0 05 00 b7
>3a14e8		0c 97 c3 e2 20 c8 c8 b7 0c 97 c3 4c 6f 14 28 60
>3a14f8		08 c2 20 64 16 64 18 28 60 08 c2 30 a5 16 d0 16
>3a1508		a5 18 d0 12 e2 20 64 16 a5 e2 1a 1a 85 17 a5 e3
>3a1518		85 18 64 19 80 07 c2 20 a5 17 1a 85 17 c2 20 a5
>3a1528		bb 3a c5 17 f0 02 b0 1f 08 c2 20 48 a9 00 08 5b
>3a1538		68 28 e2 20 a9 03 8f d3 08 00 c2 20 29 ff 00 20
>3a1548		5b 1e e2 20 dc d4 08 28 60 c9 00 d0 05 c0 01 00
>3a1558		f0 05 09 30 97 16 c8 60 08 c2 30 64 0c a5 25 10
>3a1568		1a 18 a5 23 49 ff ff 69 01 00 85 23 a5 25 49 ff
>3a1578		ff 69 00 00 85 25 a9 ff ff 85 0c 64 10 64 12 64
>3a1588		14 a2 1f 00 f8 06 23 26 25 a5 10 65 10 85 10 a5
>3a1598		12 65 12 85 12 a5 14 65 14 85 14 ca 10 e7 d8 e2
>3a15a8		20 20 01 15 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9
>3a15b8		20 97 16 c8 a2 05 00 b5 10 29 f0 4a 4a 4a 4a 20
>3a15c8		51 15 b5 10 29 0f 20 51 15 ca 10 eb c0 01 00 d0
>3a15d8		0c a9 20 87 16 a0 01 00 a9 30 97 16 c8 a9 00 97
>3a15e8		16 28 60 00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00
>3a15f8		f0 04 e8 c8 80 f7 28 60 08 0b 08 c2 20 48 a9 00
>3a1608		08 5b 68 28 e2 20 c2 10 a0 00 00 b7 23 d0 04 b7
>3a1618		29 f0 25 b7 23 d7 29 90 12 d0 03 c8 80 ed c2 20
>3a1628		a9 01 00 85 23 e2 20 64 25 80 15 c2 20 a9 ff ff
>3a1638		85 23 e2 20 85 25 80 08 c2 20 64 23 e2 20 64 25
>3a1648		e2 20 a9 00 85 27 2b 28 60 08 0b 8b 08 c2 20 48
>3a1658		a9 00 08 5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20
>3a1668		a5 25 48 ab c2 20 68 28 a6 23 20 ed 15 84 0c 08
>3a1678		c2 20 48 e2 20 a5 2b 48 ab c2 20 68 28 a6 29 20
>3a1688		ed 15 c2 20 98 38 65 0c aa e2 20 a9 02 20 d3 10
>3a1698		c2 20 a5 b7 85 08 e2 20 a5 b9 85 0a a0 00 00 08
>3a16a8		c2 20 48 e2 20 a5 25 48 ab c2 20 68 28 a6 23 bd
>3a16b8		00 00 f0 06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48
>3a16c8		e2 20 a5 2b 48 ab c2 20 68 28 a6 29 bd 00 00 97
>3a16d8		08 f0 04 e8 c8 80 f5 c2 20 a5 08 85 23 e2 20 a5
>3a16e8		0a 85 25 a9 02 85 27 ab 2b 28 60 da 5a 08 0b 8b
>3a16f8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 0a 48 a5
>3a1708		08 48 c2 30 08 c2 20 48 e2 20 a5 25 48 ab c2 20
>3a1718		68 28 a6 23 20 ed 15 98 aa e8 e2 20 a9 02 20 d3
>3a1728		10 c2 20 a5 c0 85 08 a5 c2 85 0a a0 00 00 e2 20
>3a1738		b7 23 97 08 f0 03 c8 80 f7 c2 20 a5 08 85 23 a5
>3a1748		0a 85 25 c2 20 68 85 08 68 85 0a ab 2b 28 7a fa
>3a1758		60 08 e2 20 c2 10 a0 00 00 b7 23 f0 05 c8 80 f9
>3a1768		84 92 c2 30 c4 29 90 13 f0 11 a5 8f 30 0d f0 0b
>3a1778		c4 8f b0 12 a5 29 d0 0e 4c d7 17 20 01 15 e2 20
>3a1788		a9 00 87 16 80 39 20 01 15 c2 30 18 a5 23 65 29
>3a1798		85 23 a5 25 69 00 00 85 25 a0 00 00 e2 20 a7 23
>3a17a8		97 16 f0 1b c2 20 18 a5 23 69 01 00 85 23 a5 25
>3a17b8		69 00 00 85 25 c8 c4 8f d0 e2 a9 00 00 97 16 c2
>3a17c8		20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28
>3a17d8		60 08 c2 30 20 00 16 a5 23 c9 ff ff d0 05 20 2d
>3a17e8		06 80 03 20 3f 06 28 60 08 c2 30 20 00 16 a5 23
>3a17f8		c9 01 00 d0 05 20 2d 06 80 03 20 3f 06 28 60 08
>3a1808		c2 30 20 00 16 a5 23 c9 00 00 d0 05 20 2d 06 80
>3a1818		03 20 3f 06 28 60 08 c2 30 20 00 16 a5 23 c9 00
>3a1828		00 f0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2 30
>3a1838		20 00 16 a5 23 c9 ff ff f0 05 20 2d 06 80 03 20
>3a1848		3f 06 28 60 08 c2 30 20 00 16 a5 23 c9 01 00 f0
>3a1858		05 20 2d 06 80 03 20 3f 06 28 60 08 e2 20 a5 27
>3a1868		c9 02 d0 1d a5 23 d0 19 a5 24 d0 15 a5 25 d0 11
>3a1878		20 01 15 a9 00 87 16 c2 20 a5 16 85 23 a5 18 85
>3a1888		25 28 60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a1898		28 c2 30 a9 00 00 85 00 85 1a a9 36 00 85 02 85
>3a18a8		1c 22 3c 11 00 b0 20 a0 02 00 b7 1a f0 0f c5 55
>3a18b8		90 10 c5 59 f0 02 b0 05 20 ee 18 80 e4 28 2b 7a
>3a18c8		68 60 20 f7 21 80 da 08 c2 20 48 a9 00 08 5b 68
>3a18d8		28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20 5b
>3a18e8		1e e2 20 dc d4 08 08 c2 30 85 23 64 25 20 60 15
>3a18f8		a5 16 1a 85 23 a5 18 85 25 20 f5 45 18 a5 1a 69
>3a1908		04 00 85 00 a5 1c 69 00 00 85 02 e2 20 a9 20 20
>3a1918		18 00 c2 20 20 2d 19 90 fb e2 20 a9 0d 20 18 00
>3a1928		20 f7 21 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a1938		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>3a1948		a7 00 f0 3a 30 05 20 18 00 80 29 c2 20 29 7f 00
>3a1958		0a 0a 0a 18 69 fb 0c 85 08 a9 3a 00 69 00 00 85
>3a1968		0a 08 e2 20 48 a9 3a 48 ab 68 28 a0 02 00 b7 08
>3a1978		aa 20 64 04 c2 20 20 1a 21 ab 2b 28 18 60 ab 2b
>3a1988		28 38 60 08 c2 20 a9 ff 6f 85 1f a9 ff 7f 85 21
>3a1998		a9 ff ff 85 23 85 25 85 29 85 2b e2 20 85 27 85
>3a19a8		2d 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a19b8		08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a a4 1f bd
>3a19c8		00 00 99 00 00 bd 02 00 99 02 00 e2 20 bd 04 00
>3a19d8		99 04 00 c2 20 38 98 e9 05 00 85 1f 7a ab 2b 28
>3a19e8		60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a19f8		20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5 1f 69 05
>3a1a08		00 85 1f a8 b9 00 00 9d 00 00 b9 02 00 9d 02 00
>3a1a18		e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab 2b 28 60
>3a1a28		08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a1a38		48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 21 99 00
>3a1a48		00 88 84 21 7a ab 2b 28 60 08 0b 8b 08 c2 20 48
>3a1a58		a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a1a68		e2 20 c2 10 5a a4 21 c8 84 21 b9 00 00 c2 20 29
>3a1a78		ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20 28 1a 28
>3a1a88		60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68 28 e2 20
>3a1a98		a4 21 b9 01 00 c9 01 d0 08 c2 20 e6 21 ab 28 7a
>3a1aa8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a1ab8		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a1ac8		48 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a1ad8		20 48 a9 00 48 ab 68 28 e2 20 a4 21 c0 ff 7f f0
>3a1ae8		11 20 5a 0c 85 0c b9 01 00 20 5a 0c c5 0c f0 02
>3a1af8		90 08 c2 20 ab 2b 28 68 18 60 c2 20 ab 2b 28 68
>3a1b08		38 60 08 e2 20 a9 00 8f 00 4d 00 a2 01 00 20 09
>3a1b18		1d 20 51 06 c2 20 a5 23 9f 00 4d 00 e2 20 af 00
>3a1b28		4d 00 1a 30 3e 8f 00 4d 00 e8 e8 20 3b 21 e2 20
>3a1b38		a7 00 c9 90 f0 09 c9 2c d0 0a 20 1a 21 80 cf 20
>3a1b48		1a 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1b58		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>3a1b68		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1b78		0a 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a1b88		d4 08 08 20 15 54 90 47 e2 20 a5 ea 29 80 d0 06
>3a1b98		20 16 52 4c d5 1b 20 88 51 90 53 c2 20 a5 c2 48
>3a1ba8		a5 c0 48 a0 09 00 b7 08 85 c0 e2 20 c8 c8 b7 08
>3a1bb8		85 c2 e2 20 a9 8f 20 27 22 20 7f 1a 20 0a 1b 20
>3a1bc8		ec 68 20 89 1a c2 20 68 85 c2 68 85 c0 28 60 08
>3a1bd8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a1be8		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>3a1bf8		20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00
>3a1c08		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 0b 08
>3a1c18		c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 20 1a 21
>3a1c28		a0 00 00 b7 00 f0 24 c9 22 f0 03 c8 80 f5 84 0c
>3a1c38		e2 20 a9 02 a6 0c e8 20 01 15 a0 00 00 c4 0c f0
>3a1c48		29 a7 00 97 16 c8 20 1a 21 80 f2 08 c2 20 48 a9
>3a1c58		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>3a1c68		ff 00 20 5b 1e e2 20 dc d4 08 a9 00 97 16 c2 20
>3a1c78		a5 16 85 23 a5 18 85 25 a9 02 00 85 27 20 1a 21
>3a1c88		2b 28 60 08 e2 20 a7 00 c2 20 29 ff 00 20 84 0c
>3a1c98		85 2f 20 7f 1a 08 e2 20 48 a9 00 48 ab 68 28 20
>3a1ca8		af 1c 20 89 1a 28 60 20 1a 21 6c 2f 08 48 08 0b
>3a1cb8		8b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20 51 1a
>3a1cc8		89 80 00 f0 37 48 20 84 0c 85 2f 68 20 d1 0c c9
>3a1cd8		01 00 f0 08 c2 30 a2 29 08 20 e9 19 c2 30 a2 23
>3a1ce8		08 20 e9 19 08 e2 20 48 a9 00 48 ab 68 28 20 06
>3a1cf8		1d a2 23 08 20 ab 19 ab 2b 28 68 60 00 ea 6c 2f
>3a1d08		08 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a1d18		a9 00 48 ab 68 28 c2 10 da e2 20 a7 00 d0 03 4c
>3a1d28		cc 1d 30 33 c9 20 d0 03 4c c6 1d c9 3a b0 04 c9
>3a1d38		30 b0 56 c9 26 f0 52 c9 22 d0 03 4c df 1d c9 5b
>3a1d48		b0 07 c9 41 90 03 4c eb 1d c9 7b b0 07 c9 61 90
>3a1d58		03 4c eb 1d 4c cc 1d c9 8f f0 40 c9 90 f0 41 20
>3a1d68		a7 0c c9 30 d0 0c 20 8b 1c a2 23 08 20 ab 19 4c
>3a1d78		21 1d c9 00 d0 4e a7 00 a6 21 e0 ff 7f f0 05 20
>3a1d88		c8 1a b0 12 20 28 1a 80 35 c2 20 20 37 5a a2 23
>3a1d98		08 20 ab 19 80 83 20 b5 1c 80 dd 20 28 1a 80 1e
>3a1da8		e2 20 a4 21 c0 ff 7f f0 46 a4 21 b9 01 00 c9 01
>3a1db8		f0 3d c9 8f f0 05 20 b5 1c 80 ee 20 51 1a 20 1a
>3a1dc8		21 4c 21 1d a6 21 e0 ff 7f b0 24 bd 01 00 c9 01
>3a1dd8		f0 1d 20 b5 1c 80 ed 20 15 1c a2 23 08 20 ab 19
>3a1de8		4c 21 1d 20 8a 1b a2 23 08 20 ab 19 4c 21 1d a2
>3a1df8		23 08 20 e9 19 fa 28 60 08 0b 8b 08 e2 20 48 a9
>3a1e08		00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1e18		30 a9 fd 5f 85 33 ab 2b 28 60 08 0b 08 c2 20 48
>3a1e28		a9 00 08 5b 68 28 c2 30 92 33 c6 33 c6 33 2b 28
>3a1e38		60 08 c2 30 29 ff 00 20 22 1e 28 60 08 0b 08 c2
>3a1e48		20 48 a9 00 08 5b 68 28 c2 30 e6 33 e6 33 b2 33
>3a1e58		2b 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a1e68		08 e2 20 48 a9 00 48 ab 68 28 c2 20 85 23 a9 00
>3a1e78		00 85 25 e2 20 a9 00 85 27 85 ea a9 3a 85 e9 c2
>3a1e88		20 a9 b5 1e 85 e7 20 78 53 c2 20 a5 d7 85 23 a5
>3a1e98		d9 85 25 e2 20 a9 00 85 27 85 ea a9 3a 85 e9 c2
>3a1ea8		20 a9 b9 1e 85 e7 20 78 53 28 2b ab 60 45 52 52
>3a1eb8		00 45 52 4c 00 e2 20 c2 10 20 d7 03 af d3 08 00
>3a1ec8		0a c2 20 29 ff 00 a8 08 e2 20 48 a9 3a 48 ab 68
>3a1ed8		28 be 0f 1f 20 64 04 c2 20 a5 d7 f0 27 a2 3f 1f
>3a1ee8		20 64 04 08 e2 20 48 a9 00 48 ab 68 28 c2 20 af
>3a1ef8		d7 08 00 8f 23 08 00 a9 00 00 8f 25 08 00 20 13
>3a1f08		46 20 d7 03 4c b5 27 43 1f 46 1f 4c 1f 59 1f 67
>3a1f18		1f 75 1f 88 1f 9e 1f ae 1f bd 1f ca 1f db 1f ea
>3a1f28		1f f7 1f 05 20 14 20 25 20 3e 20 52 20 66 20 7c
>3a1f38		20 90 20 ab 20 c3 20 20 61 74 00 4f 4b 00 42 72
>3a1f48		65 61 6b 00 53 79 6e 74 61 78 20 65 72 72 6f 72
>3a1f58		00 4f 75 74 20 6f 66 20 6d 65 6d 6f 72 79 00 54
>3a1f68		79 70 65 20 6d 69 73 6d 61 74 63 68 00 56 61 72
>3a1f78		69 61 62 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00
>3a1f88		4c 69 6e 65 20 6e 75 6d 62 65 72 20 6e 6f 74 20
>3a1f98		66 6f 75 6e 64 00 53 74 61 63 6b 20 75 6e 64 65
>3a1fa8		72 66 6c 6f 77 00 53 74 61 63 6b 20 6f 76 65 72
>3a1fb8		66 6c 6f 77 00 4f 75 74 20 6f 66 20 72 61 6e 67
>3a1fc8		65 00 49 6c 6c 65 67 61 6c 20 61 72 67 75 6d 65
>3a1fd8		6e 74 00 46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e
>3a1fe8		64 00 4e 6f 74 20 61 20 6e 75 6d 62 65 72 00 4d
>3a1ff8		61 74 68 20 6f 76 65 72 66 6c 6f 77 00 4d 61 74
>3a2008		68 20 75 6e 64 65 72 66 6c 6f 77 00 44 69 76 69
>3a2018		73 69 6f 6e 20 62 79 20 7a 65 72 6f 00 55 6e 61
>3a2028		62 6c 65 20 74 6f 20 72 65 61 64 20 64 69 72 65
>3a2038		63 74 6f 72 79 00 55 6e 61 62 6c 65 20 74 6f 20
>3a2048		6c 6f 61 64 20 66 69 6c 65 00 55 6e 61 62 6c 65
>3a2058		20 74 6f 20 73 61 76 65 20 66 69 6c 65 00 55 6e
>3a2068		61 62 6c 65 20 74 6f 20 64 65 6c 65 74 65 20 66
>3a2078		69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74 20 66 69
>3a2088		6e 64 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f
>3a2098		74 20 75 70 64 61 74 65 20 64 69 72 65 63 74 6f
>3a20a8		72 79 00 43 6f 75 6c 64 20 6e 6f 74 20 63 6f 70
>3a20b8		79 20 74 68 65 20 66 69 6c 65 00 41 72 67 75 6d
>3a20c8		65 6e 74 20 6f 75 74 73 69 64 65 20 64 6f 6d 61
>3a20d8		69 6e 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a20e8		20 a9 00 85 d2 2b 28 60 0b 08 08 c2 20 48 a9 00
>3a20f8		08 5b 68 28 08 c2 20 a9 bd 1e 8f d4 08 00 e2 20
>3a2108		a9 3a 8f d6 08 00 28 20 ba 44 20 fb 3f 64 31 28
>3a2118		2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>3a2128		18 a5 00 69 01 00 85 00 e2 20 a5 02 69 00 85 02
>3a2138		2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2148		20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02 80 05 20
>3a2158		1a 21 80 ed 2b 28 60 08 e2 20 a7 00 f0 09 c9 3a
>3a2168		f0 05 20 1a 21 80 f3 28 60 08 e2 20 64 36 a7 00
>3a2178		f0 19 c5 37 f0 2c c9 9b f0 1e c9 9f f0 1a c9 9e
>3a2188		f0 1a c9 a0 f0 16 20 1a 21 80 e3 20 f7 21 c2 20
>3a2198		a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea c6 36 30 30
>3a21a8		80 e4 a5 35 30 06 a5 36 f0 02 80 da 20 1a 21 28
>3a21b8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a21c8		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a21d8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>3a21e8		08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08
>3a21f8		c2 30 a0 00 00 b7 1a 85 0c 18 a5 1a 65 0c 85 1a
>3a2208		a5 1c 69 00 00 85 1c a0 02 00 b7 1a 85 d7 18 a5
>3a2218		1a 69 04 00 85 00 a5 1c 69 00 00 85 02 28 60 08
>3a2228		e2 20 48 20 3b 21 68 e2 20 c7 00 d0 08 20 1a 21
>3a2238		20 3b 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2248		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>3a2258		20 dc d4 08 08 e2 20 20 3b 21 e2 20 a7 00 f0 10
>3a2268		c9 3a f0 0c c5 37 f0 05 20 1a 21 80 ef 28 38 60
>3a2278		28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0 0d c9 3a
>3a2288		f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a 60 08 0b
>3a2298		8b 08 c2 20 48 a9 00 08 5b 68 28 20 f8 14 20 8b
>3a22a8		19 e2 20 a9 00 85 dc 22 3c 11 00 b0 4b a7 00 c9
>3a22b8		3a d0 03 20 1a 21 20 3b 21 a7 00 d0 03 4c 4a 23
>3a22c8		20 e2 04 b0 52 a7 00 10 10 20 a7 0c 85 0c c9 20
>3a22d8		d0 03 4c 38 23 a5 d2 f0 51 08 c2 20 48 a9 00 08
>3a22e8		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>3a22f8		20 5b 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a2308		68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20
>3a2318		5b 1e e2 20 dc d4 08 20 c4 44 4c 4a 23 08 e2 20
>3a2328		48 a9 00 48 ab 68 28 6c 2f 08 a5 0c c9 10 d0 a9
>3a2338		a7 00 20 84 0c c2 20 85 2f 20 8b 19 20 1a 21 20
>3a2348		25 23 ab 2b 28 60 08 58 20 db 20 20 00 1e e2 20
>3a2358		9c 8a 0f c2 20 a5 1a 85 00 a5 1c 85 02 4c 8c 23
>3a2368		08 c2 20 a0 02 00 b7 1a 85 d7 e2 20 a5 dc c9 03
>3a2378		f0 12 c2 20 18 a5 1a 69 04 00 85 00 e2 20 a5 1c
>3a2388		69 00 85 02 c2 20 20 96 22 e2 20 a5 dc c9 03 f0
>3a2398		f3 c9 00 d0 31 e2 20 20 3b 21 a7 00 f0 28 c9 3a
>3a23a8		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a23b8		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a23c8		08 20 1a 21 80 be 28 60 08 58 e2 20 a9 80 85 d2
>3a23d8		9c 8a 0f 20 00 1e c2 30 64 31 c2 20 a0 02 00 b7
>3a23e8		1a f0 28 20 68 23 e2 20 a5 dc c9 01 f0 1d c9 02
>3a23f8		f0 e8 c9 03 f0 e4 c2 20 a0 00 00 18 a5 1a 77 1a
>3a2408		85 1a a5 1c 69 00 00 85 1c 80 cf e2 20 a9 00 85
>3a2418		d2 28 60 08 c2 30 a9 00 00 85 08 a9 36 00 85 0a
>3a2428		a0 02 00 b7 08 f0 2c c5 23 f0 19 b0 26 a0 00 00
>3a2438		18 a5 08 77 08 85 0c a5 0a 69 00 00 85 0a a5 0c
>3a2448		85 08 80 dc c2 20 a5 08 85 1a e2 20 a5 0a 85 1c
>3a2458		28 38 60 28 18 60 08 e2 20 a7 0c 87 08 c2 20 a5
>3a2468		0c c5 00 d0 08 e2 20 a5 0e c5 02 f0 26 c2 20 18
>3a2478		a5 0c 69 01 00 85 0c e2 20 a5 0e 69 00 85 0e c2
>3a2488		20 18 a5 08 69 01 00 85 08 e2 20 a5 0a 69 00 85
>3a2498		0a 80 c4 28 60 08 e2 20 a7 0c 87 08 c2 20 a5 0c
>3a24a8		c5 00 d0 06 a5 0e c5 02 f0 26 c2 20 38 a5 0c e9
>3a24b8		01 00 85 0c e2 20 a5 0e e9 00 85 0e c2 20 38 a5
>3a24c8		08 e9 01 00 85 08 e2 20 a5 0a e9 00 85 0a 80 c6
>3a24d8		28 60 08 a0 00 00 c2 20 18 a5 08 77 08 85 0c e2
>3a24e8		20 a5 0a 69 00 85 0e c2 20 18 a5 d9 69 04 00 85
>3a24f8		00 e2 20 a5 db 69 00 85 02 a0 00 00 c2 20 38 a5
>3a2508		d9 f7 08 85 d9 e2 20 a5 db e9 00 85 db 20 5e 24
>3a2518		20 ba 44 28 60 08 08 c2 20 48 a9 00 08 5b 68 28
>3a2528		c2 30 a0 02 00 97 d9 18 a5 d9 69 04 00 85 08 e2
>3a2538		20 a5 db 69 00 85 0a e2 20 a0 00 00 b7 1a 97 08
>3a2548		f0 03 c8 80 f7 c2 20 98 18 69 05 00 85 0c c2 20
>3a2558		a0 00 00 a5 0c 97 d9 c2 20 18 a5 d9 65 0c 85 0c
>3a2568		e2 20 a5 db 69 00 85 db c2 20 a5 0c 85 d9 c2 20
>3a2578		a0 00 00 a9 00 00 97 d9 c8 c0 05 00 d0 f8 20 ba
>3a2588		44 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a2598		30 a9 00 00 85 08 a9 36 00 85 0a a0 02 00 b7 08
>3a25a8		f0 1d c5 d7 f0 25 b0 1d a0 00 00 18 a5 08 77 08
>3a25b8		85 0c a5 0a 69 00 00 85 0a a5 0c 85 08 80 dc a9
>3a25c8		00 00 28 2b 60 a9 01 00 28 2b 60 a9 02 00 28 2b
>3a25d8		60 08 c2 30 a9 05 00 85 10 a0 00 00 e2 20 b7 1a
>3a25e8		f0 07 c2 20 e6 10 c8 80 f3 c2 20 a5 08 85 00 a5
>3a25f8		0a 85 02 18 a5 d9 69 04 00 85 0c a5 db 69 00 00
>3a2608		85 0e 18 a5 d9 65 10 85 d9 a5 db 69 00 00 85 db
>3a2618		18 a5 d9 69 04 00 85 08 a5 db 69 00 00 85 0a 20
>3a2628		9d 24 c2 20 a5 10 a0 00 00 97 00 a5 d7 a0 02 00
>3a2638		97 00 18 a5 00 69 04 00 85 00 a5 02 69 00 00 85
>3a2648		02 a0 00 00 e2 20 b7 1a 97 00 f0 03 c8 80 f7 20
>3a2658		ba 44 28 60 08 c2 30 85 d7 20 8b 25 c9 00 00 f0
>3a2668		2c c9 01 00 f0 22 c2 20 a5 08 48 a5 0a 48 20 da
>3a2678		24 68 85 0a 68 85 08 a5 1a 85 00 a5 1c 85 02 20
>3a2688		3b 21 e2 20 a7 00 f0 0a 20 d9 25 80 05 a5 d7 20
>3a2698		1d 25 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a26a8		e2 20 c2 10 a2 00 00 bd 00 4f f0 03 e8 80 f8 86
>3a26b8		0c c2 30 8a c9 02 00 90 12 3a 18 69 00 4f aa 18
>3a26c8		65 8f a8 a5 0c 3a 8b 44 00 00 ab c2 20 a6 55 a0
>3a26d8		00 4f a5 8f 8b 54 00 3a ab e2 20 a5 0c c9 02 90
>3a26e8		18 a6 8f a9 22 9d 00 4f e8 bd 00 4f d0 fa a9 22
>3a26f8		9d 00 4f a9 00 e8 9d 00 4f 28 2b 60 da 5a 8b 0b
>3a2708		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 ad
>3a2718		00 4f c9 23 f0 0a c9 7c f0 17 28 2b ab 7a fa 60
>3a2728		c2 20 a9 03 00 85 8f a9 4a 27 85 55 20 9c 26 80
>3a2738		e9 c2 20 a9 04 00 85 8f a9 4e 27 85 55 20 9c 26
>3a2748		80 d8 44 49 52 00 42 52 55 4e 00 8b 08 20 3d 02
>3a2758		08 e2 20 48 a9 3a 48 ab 68 28 a2 6f d2 20 64 04
>3a2768		28 ab 60 08 e2 30 a9 01 20 1c 00 20 db 00 c9 00
>3a2778		f0 f9 c9 0d f0 02 80 f3 28 60 0b 08 08 c2 20 48
>3a2788		a9 00 08 5b 68 28 c2 30 64 d7 a9 00 4f 85 1a a9
>3a2798		00 00 85 1c 20 9c 09 c2 20 a5 d7 d0 05 20 4e 23
>3a27a8		80 07 20 5c 26 28 2b 38 60 28 2b 18 60 c2 30 a2
>3a27b8		ff fe 9a 20 53 27 20 08 00 20 0c 00 22 3c 11 00
>3a27c8		a9 00 00 20 1c 00 20 04 27 20 82 27 b0 e8 80 e3
>3a27d8		08 e2 20 20 a3 08 c9 00 f0 2c c9 01 f0 2d c9 02
>3a27e8		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a27f8		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a2808		08 20 51 16 80 08 20 67 54 80 03 20 d6 56 28 60
>3a2818		08 e2 20 20 55 08 c9 00 f0 23 c9 01 f0 24 08 c2
>3a2828		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>3a2838		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 20 79 54
>3a2848		80 03 20 cb 56 28 60 08 e2 20 20 55 08 c9 00 f0
>3a2858		23 c9 01 f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2868		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>3a2878		20 dc d4 08 20 8b 54 80 03 20 6c 57 28 60 20 bf
>3a2888		07 20 f0 07 20 21 57 60 a5 23 8f 1a 01 00 a5 29
>3a2898		8f 18 01 00 af 1e 01 00 85 23 60 08 c2 30 48 20
>3a28a8		bf 07 a5 2d c9 00 00 d0 0d a5 2b d0 09 da a6 29
>3a28b8		20 3f 64 fa 80 1c 20 f0 07 c2 20 a5 2b 48 a5 29
>3a28c8		48 20 ca 62 c2 20 68 85 29 68 85 2b 20 6c 57 20
>3a28d8		a9 64 68 28 60 08 20 51 06 20 82 06 c2 20 a5 23
>3a28e8		25 29 85 23 a5 25 25 2b 85 25 28 60 08 20 51 06
>3a28f8		20 82 06 c2 20 a5 23 05 29 85 23 a5 25 05 2b 85
>3a2908		25 28 60 08 20 51 06 c2 20 a5 23 49 ff ff 85 23
>3a2918		a5 25 49 ff ff 85 25 28 60 08 e2 20 20 a3 08 c9
>3a2928		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a2938		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2948		ff 00 20 5b 1e e2 20 dc d4 08 20 d9 17 80 08 20
>3a2958		8c 55 80 03 20 01 5d 28 60 08 e2 20 20 a3 08 c9
>3a2968		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a2978		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2988		ff 00 20 5b 1e e2 20 dc d4 08 20 f0 17 80 08 20
>3a2998		ad 55 80 03 20 16 5d 28 60 08 e2 20 20 a3 08 c9
>3a29a8		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a29b8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a29c8		ff 00 20 5b 1e e2 20 dc d4 08 20 07 18 80 08 20
>3a29d8		da 55 80 03 20 2b 5d 28 60 08 e2 20 20 a3 08 c9
>3a29e8		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a29f8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2a08		ff 00 20 5b 1e e2 20 dc d4 08 20 1e 18 80 08 20
>3a2a18		f8 55 80 03 20 6a 5d 28 60 08 e2 20 20 a3 08 c9
>3a2a28		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a2a38		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2a48		ff 00 20 5b 1e e2 20 dc d4 08 20 35 18 80 08 20
>3a2a58		16 56 80 03 20 55 5d 28 60 08 e2 20 20 a3 08 c9
>3a2a68		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a2a78		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2a88		ff 00 20 5b 1e e2 20 dc d4 08 20 4c 18 80 08 20
>3a2a98		43 56 80 03 20 40 5d 28 60 08 e2 20 a5 27 c9 00
>3a2aa8		f0 2d c9 01 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a2ab8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a2ac8		e2 20 dc d4 08 e2 20 a5 26 49 80 85 26 80 16 c2
>3a2ad8		20 a5 23 49 ff ff 85 23 a5 25 49 ff ff 85 25 e6
>3a2ae8		23 d0 02 e6 25 28 60 08 e2 20 20 09 1d 20 63 07
>3a2af8		20 ae 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 27
>3a2b08		22 20 09 1d 20 63 07 20 ae 05 a5 23 0a 0a 0a 0a
>3a2b18		05 29 48 a9 2c 20 27 22 20 09 1d 20 63 07 20 ae
>3a2b28		05 a5 23 0a 0a 0a 0a 05 29 48 af 0e 08 af 09 0c
>3a2b38		8f 0e 08 af 68 8f 00 08 af 68 8f 02 08 af 68 8f
>3a2b48		04 08 af af 0e 08 af 29 f7 8f 0e 08 af 20 5f 21
>3a2b58		28 60 08 e2 20 20 09 1d 20 63 07 20 ae 05 a5 23
>3a2b68		0a 0a 0a 0a 05 29 48 a9 2c 20 27 22 20 09 1d 20
>3a2b78		63 07 20 ae 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c
>3a2b88		20 27 22 20 09 1d 20 51 06 20 e4 05 c2 20 a5 23
>3a2b98		85 92 a5 29 85 23 20 ae 05 e2 20 a5 23 0a 0a 0a
>3a2ba8		0a 05 29 48 c2 20 a5 92 85 23 20 ae 05 e2 20 a5
>3a2bb8		23 0a 0a 0a 0a 05 29 48 af 0e 08 af 09 0c 8f 0e
>3a2bc8		08 af 68 8f 0f 08 af 68 8f 0a 08 af 68 8f 09 08
>3a2bd8		af 68 8f 06 08 af af 0e 08 af 29 f7 8f 0e 08 af
>3a2be8		20 5f 21 28 60 08 e2 20 48 20 09 1d 20 63 07 e2
>3a2bf8		20 a5 23 29 0f 0a 0a 0a 0a 83 01 a9 2c 20 27 22
>3a2c08		20 09 1d 20 63 07 a5 23 29 0f 03 01 8f 1e 00 00
>3a2c18		e2 20 68 28 60 08 c2 20 f4 00 00 e2 20 20 09 1d
>3a2c28		20 63 07 a5 23 83 01 a9 2c 20 27 22 20 09 1d 20
>3a2c38		63 07 a5 23 83 02 a9 2c 20 27 22 20 09 1d 20 63
>3a2c48		07 a5 23 8f 0d 00 af a3 02 8f 0e 00 af a3 01 8f
>3a2c58		0f 00 af c2 20 68 28 60 08 c2 20 f4 00 00 e2 20
>3a2c68		20 09 1d 20 51 06 a5 23 f0 16 a9 01 8f 04 00 af
>3a2c78		a9 20 8f 08 00 af 8f 09 00 af 22 2c 11 00 80 0a
>3a2c88		a9 00 8f 04 00 af 22 2c 11 00 a9 2c 85 37 20 5c
>3a2c98		22 90 39 20 1a 21 20 09 1d 20 63 07 a5 23 83 01
>3a2ca8		a9 2c 20 27 22 20 09 1d 20 63 07 a5 23 83 02 a9
>3a2cb8		2c 20 27 22 20 09 1d 20 63 07 a5 23 8f 05 00 af
>3a2cc8		a3 02 8f 06 00 af a3 01 8f 07 00 af c2 20 68 28
>3a2cd8		60 08 c2 20 3b 38 e9 05 00 1b e2 20 20 09 1d 20
>3a2ce8		63 07 a5 23 c9 0a 90 1f 08 c2 20 48 a9 00 08 5b
>3a2cf8		68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20
>3a2d08		5b 1e e2 20 dc d4 08 83 01 a9 2c 20 27 22 20 09
>3a2d18		1d 20 63 07 a5 23 83 02 a9 2c 20 27 22 20 09 1d
>3a2d28		20 63 07 a5 23 83 03 a9 2c 20 27 22 20 09 1d 20
>3a2d38		63 07 a5 23 83 04 a9 2c 20 27 22 20 09 1d 20 63
>3a2d48		07 a5 23 83 05 a9 af 85 a0 a3 01 0a c2 20 29 ff
>3a2d58		00 aa bf 91 2d 3a 85 9e e2 20 a3 02 c2 20 29 ff
>3a2d68		00 0a 0a 18 65 9e 85 9e e2 20 a0 02 00 a3 03 97
>3a2d78		9e a0 01 00 a3 04 97 9e a0 00 00 a3 05 97 9e c2
>3a2d88		20 3b 18 69 05 00 1b 28 60 00 20 00 24 00 28 00
>3a2d98		2c 00 30 00 34 00 38 00 3c 40 1f 80 1f da 5a 08
>3a2da8		20 09 1d 20 51 06 c2 20 a5 23 89 00 01 d0 17 af
>3a2db8		00 00 af 89 00 01 f0 0e e2 20 a9 00 8f 01 00 af
>3a2dc8		a9 01 8f 01 00 af c2 20 a5 23 8f 00 00 af e2 20
>3a2dd8		a5 24 c2 20 29 03 00 0a aa c2 20 bf 2c 2e 3a 8f
>3a2de8		10 f0 3a bf 34 2e 3a 8f 12 f0 3a af 10 f0 3a 8f
>3a2df8		08 01 00 af 12 f0 3a 8f 0a 01 00 af 0c 01 00 8f
>3a2e08		14 f0 3a e2 20 af 0e 01 00 8f 16 f0 3a 22 2c 11
>3a2e18		00 c2 20 af 1a 00 00 aa af 1c 00 00 a8 20 20 00
>3a2e28		28 7a fa 60 80 02 20 03 40 01 90 01 e0 01 58 02
>3a2e38		f0 00 2c 01 50 00 64 00 28 00 32 00 3c 00 4b 00
>3a2e48		1e 00 32 00 48 00 5c 00 20 00 2a 00 34 00 43 00
>3a2e58		16 00 34 00 da 08 c2 30 c9 02 00 b0 1c 0a 0a aa
>3a2e68		bf 00 f0 3a 85 9e bf 02 f0 3a 85 a0 c9 f0 00 b0
>3a2e78		08 c9 b0 00 90 03 28 fa 60 08 c2 20 48 a9 00 08
>3a2e88		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>3a2e98		20 5b 1e e2 20 dc d4 08 da 08 c2 30 c9 02 00 b0
>3a2ea8		17 0a 0a aa bf 08 f0 3a 85 9e bf 0a f0 3a 85 a0
>3a2eb8		c9 40 00 b0 03 28 fa 60 08 c2 20 48 a9 00 08 5b
>3a2ec8		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a2ed8		5b 1e e2 20 dc d4 08 08 c2 30 3b 38 e9 07 00 1b
>3a2ee8		20 09 1d 20 63 07 c2 20 a5 23 c9 02 00 b0 59 83
>3a2ef8		01 e2 20 a9 2c 20 27 22 20 09 1d 20 63 07 a5 23
>3a2f08		83 03 a9 2c 20 27 22 20 09 1d 20 63 07 a3 01 0a
>3a2f18		0a 0a aa a3 03 d0 05 a5 23 0a 80 04 a5 23 38 2a
>3a2f28		9f 00 01 af c2 20 a9 2c 00 85 37 20 5c 22 b0 37
>3a2f38		c2 20 08 c2 20 a9 00 00 85 23 a9 b0 00 85 25 e2
>3a2f48		20 a9 00 85 27 28 80 27 08 c2 20 48 a9 00 08 5b
>3a2f58		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a2f68		5b 1e e2 20 dc d4 08 c2 20 20 1a 21 20 09 1d c2
>3a2f78		20 a3 01 0a 0a aa a5 23 9f 00 f0 3a 9f 08 f0 3a
>3a2f88		83 04 a5 25 9f 02 f0 3a 38 e9 b0 00 9f 0a f0 3a
>3a2f98		83 06 a3 01 0a 0a 0a aa e2 20 a3 04 9f 01 01 af
>3a2fa8		a3 05 9f 02 01 af a3 06 9f 03 01 af a9 00 9f 04
>3a2fb8		01 af 9f 05 01 af c2 30 3b 18 69 07 00 1b 28 60
>3a2fc8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>3a2fd8		08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08
>3a2fe8		c2 20 20 09 1d 20 63 07 a5 23 20 a0 2e c2 20 a5
>3a2ff8		9e 8f 05 04 af af 14 f0 3a 8f 08 04 af e2 20 a5
>3a3008		a0 8f 07 04 af af 16 f0 3a 8f 0a 04 af a9 00 8f
>3a3018		01 04 af a9 85 8f 00 04 af af 01 04 af 30 fa a9
>3a3028		00 8f 00 04 af 28 60 08 c2 20 a5 59 cf 10 f0 3a
>3a3038		90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a3048		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a3058		08 c2 30 a5 5d cf 12 f0 3a b0 d7 8f 08 01 00 af
>3a3068		10 f0 3a 8f 0a 01 00 18 af 0c 01 00 65 59 85 0c
>3a3078		af 0e 01 00 69 00 00 85 0e 18 a5 0c 65 9e 85 0c
>3a3088		a5 0e 65 a0 85 0e e2 20 a5 55 87 0c 28 60 c2 20
>3a3098		a9 01 00 85 dd 38 a5 61 e5 59 85 69 10 0b 49 ff
>3a30a8		ff 1a 85 69 a9 ff ff 85 dd a9 01 00 85 df 38 a5
>3a30b8		65 e5 5d 85 6d 10 0b 49 ff ff 1a 85 6d a9 ff ff
>3a30c8		85 df a5 6d c9 01 00 d0 19 a5 69 c9 01 00 d0 10
>3a30d8		20 2f 30 a5 61 85 59 a5 65 85 5d 20 2f 30 80 5b
>3a30e8		a5 6d c5 69 b0 04 a5 69 80 06 a5 6d 49 ff ff 1a
>3a30f8		48 0a 68 6a 85 71 20 2f 30 a5 59 c5 61 d0 06 a5
>3a3108		5d c5 65 f0 36 a5 71 85 75 a5 69 49 ff ff 1a c5
>3a3118		75 10 10 f0 0e 38 a5 71 e5 6d 85 71 18 a5 59 65
>3a3128		dd 85 59 a5 75 c5 6d 10 cd f0 cb 18 a5 71 65 69
>3a3138		85 71 18 a5 5d 65 df 85 5d 80 bb 60 08 c2 20 3b
>3a3148		38 e9 06 00 1b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a3158		e2 20 48 a9 00 48 ab 68 28 c2 30 20 09 1d 20 63
>3a3168		07 83 01 a9 2c 00 20 27 22 20 09 1d 20 51 06 a5
>3a3178		23 83 03 a9 2c 00 20 27 22 20 09 1d 20 51 06 a5
>3a3188		23 83 05 a9 2c 00 20 27 22 20 09 1d 20 63 07 a5
>3a3198		23 85 55 a3 03 85 59 a3 05 85 5d a3 01 20 5c 2e
>3a31a8		20 2f 30 c2 20 3b 18 69 06 00 1b 28 60 08 c2 20
>3a31b8		3b 38 e9 0a 00 1b 08 c2 20 48 a9 00 08 5b 68 28
>3a31c8		08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 09 1d 20
>3a31d8		63 07 83 01 a9 2c 00 20 27 22 20 09 1d 20 51 06
>3a31e8		a5 23 83 03 a9 2c 00 20 27 22 20 09 1d 20 51 06
>3a31f8		a5 23 83 05 a9 2c 00 20 27 22 20 09 1d 20 51 06
>3a3208		a5 23 83 07 a9 2c 00 20 27 22 20 09 1d 20 51 06
>3a3218		a5 23 83 09 a9 2c 00 20 27 22 20 09 1d 20 63 07
>3a3228		a5 23 85 55 a3 03 85 59 a3 05 85 5d a3 07 85 61
>3a3238		a3 09 85 65 a3 01 20 5c 2e 20 96 30 c2 20 3b 18
>3a3248		69 0a 00 1b 28 60 08 c2 20 3b 38 e9 0c 00 1b 08
>3a3258		c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a3268		ab 68 28 c2 30 20 09 1d 20 63 07 83 01 a9 2c 00
>3a3278		20 27 22 20 09 1d 20 51 06 a5 23 83 03 a9 2c 00
>3a3288		20 27 22 20 09 1d 20 51 06 a5 23 83 05 a9 2c 00
>3a3298		20 27 22 20 09 1d 20 51 06 a5 23 83 07 a9 2c 00
>3a32a8		20 27 22 20 09 1d 20 51 06 a5 23 83 09 a9 2c 00
>3a32b8		20 27 22 20 09 1d 20 63 07 a5 23 83 0b a3 01 20
>3a32c8		a0 2e a9 07 00 8f 00 04 af c2 20 a3 05 8f 00 01
>3a32d8		00 af 10 f0 3a 8f 02 01 00 18 af 04 01 00 63 03
>3a32e8		85 0c e2 20 af 06 01 00 69 00 85 0e c2 20 18 a5
>3a32f8		9e 65 0c 8f 05 04 af e2 20 a5 a0 65 0e 8f 07 04
>3a3308		af c2 20 38 a3 07 e3 03 85 0c 8f 08 04 af 38 af
>3a3318		10 f0 3a 8f 0e 04 af 38 a3 09 e3 05 8f 0a 04 af
>3a3328		e2 20 a3 0b 8f 01 04 af af 00 04 af 09 80 8f 00
>3a3338		04 af af 01 04 af 30 fa a9 00 8f 00 04 af c2 20
>3a3348		3b 18 69 0c 00 1b 28 60 08 c2 20 c9 40 00 b0 13
>3a3358		0a 0a 0a 18 69 00 0c 85 9e a9 af 00 69 00 00 85
>3a3368		a0 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3378		09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a3388		d4 08 08 c2 20 3b 38 e9 03 00 1b c2 30 20 09 1d
>3a3398		20 63 07 a5 23 83 01 a9 2c 00 20 27 22 e2 20 20
>3a33a8		09 1d 20 63 07 a5 23 c9 08 b0 56 83 03 a9 2c 20
>3a33b8		27 22 20 09 1d 20 51 06 c2 20 38 a5 23 e9 00 00
>3a33c8		85 23 a5 25 e9 b0 00 85 25 30 36 c2 20 a3 01 aa
>3a33d8		20 50 33 a5 23 a0 01 00 97 9e e2 20 a5 25 c8 c8
>3a33e8		97 9e bf 18 f0 3a 29 f1 85 0c a3 03 0a 29 0e 05
>3a33f8		0c 87 9e 9f 18 f0 3a c2 20 3b 18 69 03 00 1b 28
>3a3408		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a3418		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a3428		08 c2 20 3b 38 e9 04 00 1b c2 30 20 09 1d 20 63
>3a3438		07 a5 23 83 01 a9 2c 00 20 27 22 20 09 1d 20 51
>3a3448		06 a5 23 83 03 a9 2c 00 20 27 22 20 09 1d 20 51
>3a3458		06 a3 01 20 50 33 a3 03 a0 04 00 97 9e a5 23 a0
>3a3468		06 00 97 9e c2 20 3b 18 69 04 00 1b 28 60 08 c2
>3a3478		20 3b 38 e9 03 00 1b c2 30 20 09 1d 20 63 07 a5
>3a3488		23 83 01 a9 2c 00 20 27 22 e2 20 20 09 1d 20 51
>3a3498		06 a5 23 d0 04 83 03 80 04 a9 01 83 03 a9 2c 85
>3a34a8		37 20 5c 22 b0 20 c2 30 a3 01 aa 20 50 33 e2 20
>3a34b8		bf 18 f0 3a 29 fe 85 0c a3 03 29 01 05 0c 9f 18
>3a34c8		f0 3a 87 9e 80 36 c2 30 20 1a 21 20 09 1d 20 63
>3a34d8		07 a5 23 c9 08 00 b0 2e 0a 0a 0a 0a 85 0c a3 01
>3a34e8		aa 20 50 33 e2 20 a3 03 29 01 05 0c 85 0c bf 18
>3a34f8		f0 3a 29 8e 05 0c 87 9e 9f 18 f0 3a c2 20 3b 18
>3a3508		69 03 00 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3518		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a3528		e2 20 dc d4 08 08 c2 20 c9 04 00 b0 19 8d 00 01
>3a3538		a9 04 00 8d 02 01 18 ad 04 01 69 80 02 85 9e a9
>3a3548		af 00 85 a0 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3558		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a3568		e2 20 dc d4 08 08 c2 20 c9 04 00 b0 19 8d 00 01
>3a3578		a9 0c 00 8d 02 01 18 ad 04 01 69 00 02 85 9e a9
>3a3588		af 00 85 a0 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3598		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a35a8		e2 20 dc d4 08 08 c2 20 3b 38 e9 06 00 1b c2 20
>3a35b8		20 09 1d 20 63 07 a5 23 83 01 a9 2c 00 20 27 22
>3a35c8		20 09 1d 20 63 07 a5 23 83 03 a9 2c 00 20 27 22
>3a35d8		20 09 1d 20 63 07 a5 23 83 05 a9 2c 00 20 27 22
>3a35e8		20 09 1d 20 51 06 a3 01 20 2d 35 a5 23 87 9e e2
>3a35f8		20 38 a5 25 e9 b0 a0 02 00 97 9e a3 05 d0 0d e2
>3a3608		20 a3 03 29 07 a0 03 00 97 9e 80 0d e2 20 a3 03
>3a3618		29 07 09 08 a0 03 00 97 9e c2 20 3b 18 69 06 00
>3a3628		1b 28 60 08 c2 20 3b 38 e9 06 00 1b c2 20 20 09
>3a3638		1d 20 63 07 a5 23 83 01 a9 2c 00 20 27 22 20 09
>3a3648		1d 20 51 06 a5 23 83 03 a9 2c 00 20 27 22 20 09
>3a3658		1d 20 51 06 a5 23 83 05 a9 2c 00 20 27 22 20 09
>3a3668		1d 20 51 06 a3 01 20 6d 35 a5 23 a0 01 00 97 9e
>3a3678		e2 20 38 a5 25 e9 b0 c8 c8 97 9e c2 20 a3 03 a0
>3a3688		04 00 97 9e a3 05 a0 06 00 97 9e c2 20 3b 18 69
>3a3698		06 00 1b 28 60 08 c2 20 f4 00 00 c2 20 20 09 1d
>3a36a8		20 63 07 a5 23 83 01 a9 2c 00 20 27 22 20 09 1d
>3a36b8		20 51 06 a3 01 20 6d 35 a5 23 d0 06 e2 20 a9 00
>3a36c8		80 04 e2 20 a9 01 e2 20 a0 00 00 97 9e c2 20 68
>3a36d8		28 60 08 c2 20 3b 38 e9 04 00 1b c2 20 20 09 1d
>3a36e8		20 63 07 a5 23 83 01 a9 2c 00 20 27 22 20 09 1d
>3a36f8		20 51 06 a5 23 83 03 a9 2c 00 20 27 22 20 09 1d
>3a3708		20 51 06 a3 01 20 6d 35 a5 23 a0 0a 00 97 9e a3
>3a3718		03 a0 08 00 97 9e c2 20 3b 18 69 04 00 1b 28 60
>3a3728		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 00
>3a3738		8f 58 f0 3a af 5c f0 3a c9 b0 b0 1c 8f 24 04 af
>3a3748		af 5b f0 3a 8f 23 04 af af 5a f0 3a 8f 22 04 af
>3a3758		a9 10 8f 58 f0 3a 80 17 38 e9 b0 8f 04 04 af af
>3a3768		5b f0 3a 8f 03 04 af af 5a f0 3a 8f 02 04 af af
>3a3778		59 f0 3a d0 3c af 58 f0 3a f0 1b af 5d f0 3a 8f
>3a3788		28 04 af af 5e f0 3a 8f 29 04 af af 5f f0 3a 8f
>3a3798		2a 04 af 82 8b 00 af 5d f0 3a 8f 08 04 af af 5e
>3a37a8		f0 3a 8f 09 04 af af 5f f0 3a 8f 0a 04 af 82 70
>3a37b8		00 af 58 f0 3a 09 01 8f 58 f0 3a 89 10 f0 32 af
>3a37c8		60 f0 3a 8f 28 04 af af 61 f0 3a 8f 29 04 af af
>3a37d8		62 f0 3a 8f 2a 04 af af 63 f0 3a 8f 2b 04 af af
>3a37e8		64 f0 3a 8f 2c 04 af af 65 f0 3a 8f 2d 04 af 80
>3a37f8		30 af 60 f0 3a 8f 08 04 af af 61 f0 3a 8f 09 04
>3a3808		af af 62 f0 3a 8f 0a 04 af af 63 f0 3a 8f 0b 04
>3a3818		af af 64 f0 3a 8f 0c 04 af af 65 f0 3a 8f 0d 04
>3a3828		af e2 20 af 69 f0 3a c9 b0 b0 20 8f 27 04 af af
>3a3838		68 f0 3a 8f 26 04 af af 67 f0 3a 8f 25 04 af af
>3a3848		58 f0 3a 09 20 8f 58 f0 3a 80 17 38 e9 b0 8f 07
>3a3858		04 af af 68 f0 3a 8f 06 04 af af 67 f0 3a 8f 05
>3a3868		04 af af 66 f0 3a d0 3e af 58 f0 3a 89 20 f0 1b
>3a3878		af 6a f0 3a 8f 28 04 af af 6b f0 3a 8f 29 04 af
>3a3888		af 6c f0 3a 8f 2a 04 af 82 8b 00 af 6a f0 3a 8f
>3a3898		08 04 af af 6b f0 3a 8f 09 04 af af 6c f0 3a 8f
>3a38a8		0a 04 af 82 70 00 af 58 f0 3a 09 02 8f 58 f0 3a
>3a38b8		89 20 f0 32 af 6d f0 3a 8f 28 04 af af 6e f0 3a
>3a38c8		8f 29 04 af af 6f f0 3a 8f 2a 04 af af 70 f0 3a
>3a38d8		8f 2b 04 af af 71 f0 3a 8f 2e 04 af af 72 f0 3a
>3a38e8		8f 2f 04 af 80 30 af 6d f0 3a 8f 08 04 af af 6e
>3a38f8		f0 3a 8f 09 04 af af 6f f0 3a 8f 0a 04 af af 70
>3a3908		f0 3a 8f 0b 04 af af 71 f0 3a 8f 0e 04 af af 72
>3a3918		f0 3a 8f 0f 04 af af 58 f0 3a 29 30 f0 43 c9 10
>3a3928		f0 76 c9 20 d0 03 82 8a 00 af 58 f0 3a 29 03 f0
>3a3938		23 c9 03 f0 23 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3948		20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>3a3958		20 dc d4 08 a9 01 80 02 a9 03 8f 20 04 af 82 7d
>3a3968		00 af 58 f0 3a 29 03 f0 23 c9 03 f0 23 08 c2 20
>3a3978		48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2
>3a3988		20 29 ff 00 20 5b 1e e2 20 dc d4 08 a9 01 80 02
>3a3998		a9 03 8f 00 04 af 80 34 af 58 f0 3a 29 01 0a 09
>3a39a8		11 8f 20 04 af af 58 f0 3a 29 02 09 11 8f 00 04
>3a39b8		af 80 19 af 58 f0 3a 29 02 09 21 8f 20 04 af af
>3a39c8		58 f0 3a 29 01 0a 09 21 8f 00 04 af af 00 04 af
>3a39d8		09 80 8f 00 04 af af 58 f0 3a 29 30 f0 0f af 20
>3a39e8		04 af 09 80 8f 20 04 af ea ea ea ea ea af 01 04
>3a39f8		af 89 80 d0 f8 a9 00 8f 20 04 af 8f 00 04 af 28
>3a3a08		2b 60 0b 08 e2 20 c2 10 a9 00 a2 00 00 8f 59 f0
>3a3a18		3a e8 e0 1a 00 d0 f6 20 7b 22 c9 e6 f0 23 c9 e7
>3a3a28		f0 5e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a3a38		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a3a48		08 20 27 22 20 09 1d 20 51 06 c2 20 a5 23 8f 5a
>3a3a58		f0 3a e2 20 a5 25 8f 5c f0 3a a9 2c 20 27 22 20
>3a3a68		09 1d 20 51 06 c2 20 a5 23 8f 5d f0 3a e2 20 a5
>3a3a78		25 8f 5f f0 3a e2 20 a9 00 8f 59 f0 3a 82 74 00
>3a3a88		20 27 22 20 09 1d 20 51 06 c2 20 a5 23 8f 5a f0
>3a3a98		3a e2 20 a5 25 8f 5c f0 3a a9 2c 20 27 22 20 09
>3a3aa8		1d 20 0d 07 c2 20 a5 23 8f 60 f0 3a 8d 00 01 a9
>3a3ab8		2c 00 20 27 22 20 09 1d 20 0d 07 c2 20 a5 23 8f
>3a3ac8		62 f0 3a 8d 02 01 a9 2c 00 20 27 22 20 09 1d 20
>3a3ad8		0d 07 c2 20 a5 23 8f 64 f0 3a c2 20 ad 04 01 8f
>3a3ae8		5d f0 3a e2 20 ad 06 01 8f 5f f0 3a e2 20 a9 01
>3a3af8		8f 59 f0 3a e2 20 a9 9c 20 27 22 20 7b 22 c9 e6
>3a3b08		f0 23 c9 e7 f0 5e 08 c2 20 48 a9 00 08 5b 68 28
>3a3b18		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a3b28		e2 20 dc d4 08 20 27 22 20 09 1d 20 51 06 c2 20
>3a3b38		a5 23 8f 67 f0 3a e2 20 a5 25 8f 69 f0 3a a9 2c
>3a3b48		20 27 22 20 09 1d 20 51 06 c2 20 a5 23 8f 6a f0
>3a3b58		3a e2 20 a5 25 8f 6c f0 3a e2 20 a9 00 8f 66 f0
>3a3b68		3a 82 74 00 20 27 22 20 09 1d 20 51 06 c2 20 a5
>3a3b78		23 8f 67 f0 3a e2 20 a5 25 8f 69 f0 3a a9 2c 20
>3a3b88		27 22 20 09 1d 20 0d 07 c2 20 a5 23 8f 6d f0 3a
>3a3b98		8d 00 01 a9 2c 00 20 27 22 20 09 1d 20 0d 07 c2
>3a3ba8		20 a5 23 8f 6f f0 3a 8d 02 01 a9 2c 00 20 27 22
>3a3bb8		20 09 1d 20 0d 07 c2 20 a5 23 8f 71 f0 3a c2 20
>3a3bc8		ad 04 01 8f 6a f0 3a e2 20 ad 06 01 8f 6c f0 3a
>3a3bd8		e2 20 a9 01 8f 66 f0 3a c2 20 af 5d f0 3a cf 6a
>3a3be8		f0 3a d0 14 e2 20 af 5f f0 3a cf 6c f0 3a d0 08
>3a3bf8		c2 20 20 28 37 28 2b 60 08 c2 20 48 a9 00 08 5b
>3a3c08		68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20
>3a3c18		5b 1e e2 20 dc d4 08 08 c2 30 20 09 1d 20 63 07
>3a3c28		a5 23 48 a9 2c 00 20 27 22 20 09 1d 20 63 07 a4
>3a3c38		23 fa 20 20 00 28 60 08 20 3b 21 e2 20 a7 00 d0
>3a3c48		03 4c e7 3c c9 3a d0 03 4c e7 3c c9 22 d0 0b 20
>3a3c58		15 1c 20 f5 45 a9 3b 20 27 22 20 e2 04 90 44 20
>3a3c68		15 54 90 3f a9 3f 20 18 00 a9 20 20 18 00 20 10
>3a3c78		00 e2 20 a5 ea c9 02 f0 49 c9 00 d0 03 82 84 00
>3a3c88		c9 01 f0 5d 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3c98		a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>3a3ca8		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3cb8		02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a3cc8		d4 08 c2 20 a9 00 4c 85 23 a9 00 00 85 25 e2 20
>3a3cd8		a9 02 85 27 c2 20 20 78 53 a9 0d 00 20 18 00 28
>3a3ce8		60 c2 20 a5 00 85 40 a5 02 85 42 a9 00 4c 85 00
>3a3cf8		a9 00 00 85 02 20 37 5a c2 20 a5 40 85 00 a5 42
>3a3d08		85 02 80 d0 c2 20 a5 00 85 40 a5 02 85 42 a9 00
>3a3d18		4c 85 00 a9 00 00 85 02 20 d8 08 c2 20 a5 40 85
>3a3d28		00 a5 42 85 02 80 ad 08 20 3b 21 e2 20 a7 00 f0
>3a3d38		47 c9 3a f0 43 20 e2 04 90 40 20 15 54 90 3b 20
>3a3d48		01 15 20 14 00 e2 20 a0 00 00 97 16 a9 00 c8 97
>3a3d58		16 c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>3a3d68		27 20 78 53 20 3b 21 a7 00 f0 0d c9 3a f0 09 c9
>3a3d78		2c d0 07 20 1a 21 80 b0 28 60 08 c2 20 48 a9 00
>3a3d88		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a3d98		00 20 5b 1e e2 20 dc d4 08 08 20 09 1d 20 51 06
>3a3da8		e2 20 a9 5c 85 a2 c2 20 a5 23 85 a3 e2 20 a5 25
>3a3db8		85 a5 e2 20 a9 2c 85 37 20 5c 22 90 41 20 1a 21
>3a3dc8		20 09 1d 20 0d 07 c2 20 a5 23 85 55 e2 20 a9 2c
>3a3dd8		85 37 20 5c 22 90 27 20 1a 21 20 09 1d 20 0d 07
>3a3de8		c2 20 a5 23 85 59 e2 20 a9 2c 85 37 20 5c 22 90
>3a3df8		0d 20 1a 21 20 09 1d 20 0d 07 c2 20 a4 23 a6 59
>3a3e08		a5 55 0b 8b 08 22 a2 08 00 28 ab 2b 20 5f 21 28
>3a3e18		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a3e28		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a3e38		08 e2 20 20 3b 21 20 15 54 90 64 a9 8f 20 27 22
>3a3e48		a9 01 20 28 1a a2 01 00 a9 00 8f 00 4d 00 20 09
>3a3e58		1d 20 51 06 c2 20 a5 23 9f 00 4d 00 e2 20 af 00
>3a3e68		4d 00 1a 8f 00 4d 00 30 55 e8 e8 20 3b 21 a7 00
>3a3e78		c9 2c f0 25 c9 90 d0 27 20 1a 21 20 93 66 c2 20
>3a3e88		a5 c0 85 23 e2 20 a5 c2 85 25 64 26 a5 ea 09 80
>3a3e98		85 ea 85 27 20 78 53 28 60 20 1a 21 4c 56 3e 08
>3a3ea8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a3eb8		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>3a3ec8		20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00
>3a3ed8		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 20 3b
>3a3ee8		21 e2 20 a7 00 f0 28 c9 3a f0 24 20 e2 04 90 21
>3a3ef8		20 15 54 90 1c 20 38 3f 20 78 53 20 3b 21 a7 00
>3a3f08		f0 0d c9 3a f0 09 c9 2c d0 07 20 1a 21 80 cf 28
>3a3f18		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3f28		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a3f38		08 a5 02 85 42 a5 00 85 40 a5 1c 85 46 a5 1a 85
>3a3f48		44 c2 20 a5 3a d0 04 a5 38 f0 4e a5 38 85 00 a5
>3a3f58		3a 85 02 a5 3c 85 1a a5 3e 85 1c e2 20 a7 00 f0
>3a3f68		53 c9 3a f0 4f c9 2c d0 03 20 1a 21 20 3b 21 a7
>3a3f78		00 c9 22 f0 4e 20 fb 04 b0 4e 08 c2 20 48 a9 00
>3a3f88		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a3f98		00 20 5b 1e e2 20 dc d4 08 c2 20 a9 00 00 85 1a
>3a3fa8		a9 36 00 85 1c 18 a5 1a 69 04 00 85 00 a5 1c 69
>3a3fb8		00 00 85 02 e2 20 a9 80 85 35 a9 ab 85 37 20 71
>3a3fc8		21 80 a9 20 15 1c 80 03 20 37 5a c2 20 a5 00 85
>3a3fd8		38 a5 02 85 3a a5 1a 85 3c a5 1c 85 3e a5 44 85
>3a3fe8		1a a5 46 85 1c a5 40 85 00 a5 42 85 02 28 60 20
>3a3ff8		5f 21 60 64 38 64 3a 64 3c 64 3e 60 20 24 00 60
>3a4008		20 09 1d c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9
>3a4018		2c d0 22 20 1a 21 20 09 1d c2 20 a5 26 d0 35 68
>3a4028		85 08 68 85 0a c2 20 a5 23 87 08 e2 20 a0 02 00
>3a4038		a5 25 97 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4048		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>3a4058		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4068		a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>3a4078		dc d4 08 20 09 1d c2 20 a5 25 48 a5 23 48 e2 20
>3a4088		a7 00 c9 2c d0 19 20 1a 21 20 09 1d c2 20 a5 25
>3a4098		d0 2c 68 85 08 68 85 0a c2 20 a5 23 87 08 60 08
>3a40a8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a40b8		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>3a40c8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a40d8		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 20 09 1d
>3a40e8		c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0 1f
>3a40f8		20 1a 21 20 09 1d e2 20 a5 24 d0 32 c2 20 a5 25
>3a4108		d0 2c 68 85 08 68 85 0a e2 20 a5 23 87 08 60 08
>3a4118		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a4128		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>3a4138		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a4148		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2 20
>3a4158		48 a9 00 08 5b 68 28 e2 20 a9 01 8f d3 08 00 c2
>3a4168		20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 e2 20 a7
>3a4178		00 f0 05 20 1a 21 80 f7 28 60 08 28 60 08 28 60
>3a4188		08 28 60 08 c2 20 a5 1c 20 22 1e a5 1a 20 22 1e
>3a4198		a5 02 48 a5 00 48 20 5f 21 a5 02 20 22 1e a5 00
>3a41a8		20 22 1e 68 85 00 68 85 02 20 3b 21 20 15 54 b0
>3a41b8		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f
>3a41c8		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a41d8		e2 20 a5 ea 20 39 1e a5 e9 20 39 1e c2 20 a5 e7
>3a41e8		20 22 1e 20 3b 21 e2 20 a7 00 c9 8a d0 6a a5 ea
>3a41f8		c9 00 f0 04 c9 01 f0 00 20 1a 21 20 09 1d 20 78
>3a4208		53 e2 20 a9 9c 20 27 22 20 09 1d c2 20 a5 27 20
>3a4218		22 1e a5 25 20 22 1e a5 23 20 22 1e e2 20 a9 9d
>3a4228		85 37 20 5c 22 90 1b 20 1a 21 20 09 1d e2 20 a5
>3a4238		27 20 22 1e c2 20 a5 25 20 22 1e a5 23 20 22 1e
>3a4248		80 14 c2 20 a9 00 00 20 22 1e a9 00 00 20 22 1e
>3a4258		a9 01 00 20 22 1e 28 60 08 c2 20 48 a9 00 08 5b
>3a4268		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a4278		5b 1e e2 20 dc d4 08 08 8b 08 e2 20 48 a9 00 48
>3a4288		ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a4
>3a4298		33 c8 c8 c2 20 b9 0c 00 85 e7 b9 0e 00 e2 20 85
>3a42a8		e9 b9 10 00 85 ea c2 20 5a 20 16 52 7a c2 20 b9
>3a42b8		00 00 85 29 b9 02 00 85 2b e2 20 b9 04 00 85 2d
>3a42c8		c2 20 5a 20 d8 27 20 78 53 7a c2 20 b9 06 00 85
>3a42d8		29 b9 08 00 85 2b e2 20 b9 0a 00 85 2d c2 20 b9
>3a42e8		02 00 30 0a 20 61 2a 20 1a 06 f0 28 80 08 20 21
>3a42f8		2a 20 1a 06 f0 1e c2 20 b9 12 00 85 00 b9 14 00
>3a4308		85 02 b9 16 00 85 1a b9 18 00 85 1c e2 20 a9 03
>3a4318		85 dc 80 17 a2 23 08 20 e9 19 c2 20 18 a5 33 69
>3a4328		1a 00 85 33 a5 35 69 00 00 85 35 ab 28 60 08 a5
>3a4338		1a 48 a5 1c 48 20 3b 21 20 d8 08 a5 23 f0 26 20
>3a4348		1b 24 90 42 e2 20 a9 02 85 dc 20 5f 21 c2 20 68
>3a4358		20 22 1e 68 20 22 1e a5 02 20 22 1e a5 00 20 22
>3a4368		1e e6 31 28 60 68 68 08 c2 20 48 a9 00 08 5b 68
>3a4378		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b
>3a4388		1e e2 20 dc d4 08 68 68 08 c2 20 48 a9 00 08 5b
>3a4398		68 28 e2 20 a9 06 8f d3 08 00 c2 20 29 ff 00 20
>3a43a8		5b 1e e2 20 dc d4 08 08 c2 30 a5 31 f0 1e 20 44
>3a43b8		1e 85 00 20 44 1e 85 02 20 44 1e 85 1a 20 44 1e
>3a43c8		85 1c c6 31 e2 20 a9 03 85 dc 28 60 08 c2 20 48
>3a43d8		a9 00 08 5b 68 28 e2 20 a9 07 8f d3 08 00 c2 20
>3a43e8		29 ff 00 20 5b 1e e2 20 dc d4 08 08 20 09 1d 20
>3a43f8		1a 06 f0 1c e2 20 a9 97 20 27 22 20 d8 08 20 1a
>3a4408		06 f0 12 20 1b 24 90 2c e2 20 a9 02 85 dc 80 03
>3a4418		20 5f 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4428		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>3a4438		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4448		a9 06 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>3a4458		dc d4 08 08 e2 20 a9 01 85 dc 28 60 08 20 3b 21
>3a4468		20 d8 08 a5 23 f0 0d 20 1b 24 90 27 e2 20 a9 02
>3a4478		85 dc 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4488		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>3a4498		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a44a8		06 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a44b8		d4 08 20 8b 19 20 ab 10 20 15 51 60 08 a7 00 10
>3a44c8		03 20 1a 21 20 15 54 b0 03 4c 3b 45 e2 20 a5 ea
>3a44d8		48 a5 e9 48 a5 e8 48 a5 e7 48 20 7b 22 c9 8f d0
>3a44e8		0e a9 8f 20 27 22 a9 00 8f 00 4d 00 20 0a 1b 20
>3a44f8		3b 21 e2 20 a7 00 c9 8a f0 03 4c 3b 45 20 1a 21
>3a4508		20 09 1d 68 85 e7 68 85 e8 68 85 e9 68 85 ea 29
>3a4518		80 f0 1b 20 88 51 90 3a c2 20 a0 09 00 b7 08 85
>3a4528		c0 e2 20 c8 c8 b7 08 85 c2 20 7f 68 80 03 20 78
>3a4538		53 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4548		02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a4558		d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05
>3a4568		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a4578		08 08 e2 20 20 7b 22 c9 00 f0 6d 20 09 1d e2 20
>3a4588		a5 27 c9 ff f0 1b c9 02 d0 05 20 f5 45 80 12 c9
>3a4598		00 d0 05 20 13 46 80 09 c9 01 d0 4f 20 26 46 80
>3a45a8		00 20 3b 21 a7 00 f0 40 c9 3a f0 3c c9 2c f0 23
>3a45b8		c9 3b f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a45c8		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>3a45d8		dc d4 08 a9 09 20 18 00 20 1a 21 20 3b 21 a7 00
>3a45e8		f0 09 c9 3a f0 05 80 93 20 d7 03 28 60 08 8b 08
>3a45f8		c2 20 48 a9 00 08 5b 68 28 e2 20 a0 00 00 b7 23
>3a4608		f0 06 20 18 00 c8 80 f6 ab 28 60 08 c2 20 20 60
>3a4618		15 a5 16 85 23 a5 18 85 25 20 f5 45 28 60 08 20
>3a4628		de 5d c2 20 a5 16 85 23 a5 18 85 25 20 f5 45 28
>3a4638		60 08 e2 20 85 b5 4a 4a 4a 4a 29 0f 18 69 30 97
>3a4648		16 c8 a5 b5 29 0f 18 69 30 97 16 c8 28 60 e2 20
>3a4658		a9 8f 20 27 22 08 20 09 1d e2 20 c2 10 af 0e 08
>3a4668		af 09 08 8f 0e 08 af 20 01 15 a0 00 00 af 06 08
>3a4678		af 20 39 46 a9 2f 97 16 c8 af 09 08 af 20 39 46
>3a4688		a9 2f 97 16 c8 af 0f 08 af 20 39 46 af 0a 08 af
>3a4698		20 39 46 a9 00 97 16 af 0e 08 af 29 f7 8f 0e 08
>3a46a8		af c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>3a46b8		27 28 e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 08
>3a46c8		20 09 1d e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08
>3a46d8		af 20 01 15 a0 00 00 af 04 08 af 29 7f 20 39 46
>3a46e8		a9 3a 97 16 c8 af 02 08 af 20 39 46 a9 3a 97 16
>3a46f8		c8 af 00 08 af 20 39 46 a9 00 97 16 af 0e 08 af
>3a4708		29 f7 8f 0e 08 af c2 20 a5 16 85 23 a5 18 85 25
>3a4718		e2 20 a9 02 85 27 28 e2 20 20 1a 21 60 e2 20 a9
>3a4728		8f 20 27 22 08 20 09 1d e2 20 a9 01 85 27 a9 03
>3a4738		8f 00 e2 af a9 01 8f 01 e2 af c2 30 af 84 e8 af
>3a4748		8f 08 e2 af af 84 e8 af 29 ff 7f 8f 0a e2 af a9
>3a4758		ff ff 8f 0c e2 af a9 ff 7f 8f 0e e2 af ea ea ea
>3a4768		af 08 e2 af 85 23 af 0a e2 af 85 25 28 e2 20 20
>3a4778		1a 21 60 e2 20 a9 8f 20 27 22 08 20 09 1d 22 28
>3a4788		10 00 e2 20 85 23 64 24 64 25 64 26 a9 00 85 27
>3a4798		28 e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 08 c2
>3a47a8		30 20 09 1d 20 e3 06 c2 20 a5 25 48 a5 23 48 20
>3a47b8		3b 21 e2 20 a7 00 c9 2c f0 03 4c 16 48 20 1a 21
>3a47c8		20 09 1d 20 0d 07 c2 20 a5 23 48 20 3b 21 e2 20
>3a47d8		a7 00 c9 2c f0 03 4c 16 48 20 1a 21 20 09 1d 20
>3a47e8		0d 07 c2 20 a5 23 85 8f e2 20 a5 25 85 91 c2 20
>3a47f8		68 85 29 a9 00 00 85 2b 68 85 23 68 85 25 e2 20
>3a4808		a9 02 85 27 20 59 17 e2 20 20 1a 21 28 60 08 c2
>3a4818		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a4828		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2 20
>3a4838		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>3a4848		20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f
>3a4858		20 27 22 08 c2 30 20 09 1d e2 20 a5 27 c9 02 f0
>3a4868		03 4c d8 48 c2 20 a5 25 48 a5 23 48 20 3b 21 e2
>3a4878		20 a7 00 c9 2c f0 03 4c f7 48 20 1a 21 20 09 1d
>3a4888		e2 20 a5 27 c9 00 d0 48 c2 20 a5 23 85 8f c2 20
>3a4898		68 85 23 68 85 25 e2 20 a9 02 85 27 e2 20 a0 00
>3a48a8		00 b7 23 f0 03 c8 80 f9 c2 20 98 38 e5 8f 30 09
>3a48b8		85 29 a9 00 00 85 2b 80 07 a9 00 00 85 29 85 2b
>3a48c8		e2 20 a9 00 85 2d 20 59 17 e2 20 20 1a 21 28 60
>3a48d8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a48e8		08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08
>3a48f8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a4908		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>3a4918		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a4928		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9
>3a4938		8f 20 27 22 08 c2 30 20 09 1d e2 20 a5 27 c9 02
>3a4948		f0 03 4c a1 49 c2 20 a5 25 48 a5 23 48 20 3b 21
>3a4958		e2 20 a7 00 c9 2c f0 03 4c c0 49 20 1a 21 20 09
>3a4968		1d e2 20 a5 27 c9 00 d0 30 c2 20 a5 23 85 8f c2
>3a4978		20 a9 00 00 85 29 a9 00 00 85 2b e2 20 a9 00 85
>3a4988		2d c2 20 68 85 23 68 85 25 e2 20 a9 02 85 27 20
>3a4998		59 17 e2 20 20 1a 21 28 60 08 c2 20 48 a9 00 08
>3a49a8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a49b8		20 5b 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a49c8		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a49d8		5b 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>3a49e8		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b
>3a49f8		1e e2 20 dc d4 08 e2 20 a9 8f 20 27 22 20 09 1d
>3a4a08		c2 10 e2 20 a5 27 c9 02 d0 23 c2 20 a5 00 85 40
>3a4a18		a5 02 85 42 a5 23 85 00 a5 25 85 02 20 d8 08 a5
>3a4a28		40 85 00 a5 42 85 02 e2 20 20 1a 21 60 08 c2 20
>3a4a38		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a4a48		20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f
>3a4a58		20 27 22 08 20 09 1d c2 10 e2 20 a5 27 c9 00 d0
>3a4a68		1a 20 60 15 c2 20 a5 16 85 23 a5 18 85 25 e2 20
>3a4a78		a9 02 85 27 28 e2 20 20 1a 21 60 08 c2 20 48 a9
>3a4a88		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a4a98		ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f 20 27
>3a4aa8		22 08 20 09 1d 20 e3 06 c2 20 64 0c 64 0e e2 30
>3a4ab8		a0 00 b7 23 c9 20 f0 04 c9 24 d0 03 c8 80 f3 b7
>3a4ac8		23 20 0c 05 90 1e c2 20 06 0c 26 0e 06 0c 26 0e
>3a4ad8		06 0c 26 0e 06 0c 26 0e e2 20 20 2d 05 05 0c 85
>3a4ae8		0c c8 80 db c2 20 a5 0c 85 23 a5 0e 85 25 e2 20
>3a4af8		a9 00 85 27 28 e2 20 20 1a 21 60 e2 20 a9 8f 20
>3a4b08		27 22 08 20 09 1d 20 51 06 20 01 15 e2 30 a0 ff
>3a4b18		a9 00 97 16 88 a5 23 29 0f aa bf 00 d0 3a 97 16
>3a4b28		88 a5 23 29 f0 4a 4a 4a 4a aa bf 00 d0 3a 97 16
>3a4b38		88 a5 24 85 23 a5 25 85 24 a5 26 85 25 a9 00 85
>3a4b48		26 a5 23 d0 d0 a5 24 d0 cc a5 25 d0 c8 98 38 65
>3a4b58		16 85 23 a5 17 85 24 a5 18 85 25 a5 19 85 26 a9
>3a4b68		02 85 27 28 e2 20 20 1a 21 60 08 c2 20 48 a9 00
>3a4b78		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a4b88		00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f 20 27 22
>3a4b98		20 09 1d e2 20 a5 27 c9 02 d0 1f 8b a5 25 48 ab
>3a4ba8		c2 10 a6 23 20 ed 15 ab 84 23 c2 20 64 25 e2 20
>3a4bb8		a9 00 85 27 e2 20 20 1a 21 60 08 c2 20 48 a9 00
>3a4bc8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a4bd8		00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f 20 27 22
>3a4be8		20 09 1d 20 51 06 e2 20 a5 25 c9 b0 90 10 c9 f0
>3a4bf8		b0 0c 8b 48 ab a6 23 22 44 11 00 ab 80 04 e2 20
>3a4c08		a7 23 85 23 64 24 64 25 64 26 e2 20 20 1a 21 60
>3a4c18		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a4c28		08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2
>3a4c38		20 a9 8f 20 27 22 20 09 1d 20 51 06 e2 20 a5 25
>3a4c48		c9 b0 90 22 c9 f0 b0 1e 8b 48 ab a6 23 da 22 44
>3a4c58		11 00 85 0c fa e8 da 22 44 11 00 85 0d fa e8 22
>3a4c68		44 11 00 ab 80 0d c2 20 a7 23 85 0c e2 20 a0 02
>3a4c78		00 b7 23 85 25 64 26 c2 20 a5 0c 85 23 e2 20 20
>3a4c88		1a 21 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4c98		04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a4ca8		d4 08 e2 20 a9 8f 20 27 22 20 09 1d 20 51 06 e2
>3a4cb8		20 a5 25 c9 b0 90 1d c9 f0 b0 19 8b 48 ab a6 23
>3a4cc8		da 22 44 11 00 85 23 fa e8 22 44 11 00 85 24 ab
>3a4cd8		c2 20 80 06 c2 20 a7 23 85 23 64 25 e2 20 20 1a
>3a4ce8		21 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a4cf8		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a4d08		08 e2 20 a9 8f 20 27 22 20 09 1d e2 20 a5 27 c9
>3a4d18		00 d0 24 20 01 15 a5 23 87 16 a9 00 a0 01 00 97
>3a4d28		16 c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>3a4d38		27 e2 20 20 1a 21 60 08 c2 20 48 a9 00 08 5b 68
>3a4d48		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b
>3a4d58		1e e2 20 dc d4 08 e2 20 a9 8f 20 27 22 20 09 1d
>3a4d68		e2 20 a5 27 c9 02 d0 14 a7 23 85 23 64 24 64 25
>3a4d78		64 26 a9 00 85 27 e2 20 20 1a 21 60 08 c2 20 48
>3a4d88		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>3a4d98		29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f 20
>3a4da8		27 22 20 09 1d e2 20 a5 27 c9 00 d0 39 e2 20 a5
>3a4db8		26 d0 52 a5 25 d0 4e a5 24 d0 4a c2 10 20 01 15
>3a4dc8		a4 23 e2 20 a9 00 97 16 88 30 07 a9 20 97 16 88
>3a4dd8		10 fb a9 02 85 27 c2 20 a5 16 85 23 a5 18 85 25
>3a4de8		e2 20 20 1a 21 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4df8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a4e08		e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4e18		20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>3a4e28		20 dc d4 08 e2 20 a9 8f 20 27 22 20 09 1d e2 20
>3a4e38		a5 27 c9 00 d0 39 e2 20 a5 26 d0 52 a5 25 d0 4e
>3a4e48		a5 24 d0 4a c2 10 20 01 15 a4 23 e2 20 a9 00 97
>3a4e58		16 88 30 07 a9 09 97 16 88 10 fb a9 02 85 27 c2
>3a4e68		20 a5 16 85 23 a5 18 85 25 e2 20 20 1a 21 60 08
>3a4e78		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>3a4e88		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>3a4e98		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a4ea8		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9
>3a4eb8		8f 20 27 22 20 09 1d e2 20 a5 27 c9 00 f0 23 c9
>3a4ec8		01 f0 3e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4ed8		04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a4ee8		d4 08 c2 20 a5 25 10 21 49 ff ff 85 25 a5 23 49
>3a4ef8		ff ff 18 69 01 00 85 23 a5 25 69 00 00 85 25 80
>3a4f08		08 e2 20 a5 26 29 7f 85 26 e2 20 20 1a 21 60 e2
>3a4f18		20 a9 8f 20 27 22 20 09 1d e2 20 a5 27 c9 00 d0
>3a4f28		25 c2 20 a5 25 30 12 d0 04 a5 23 f0 13 a9 00 00
>3a4f38		85 25 a9 01 00 85 23 80 07 a9 ff ff 85 25 85 23
>3a4f48		e2 20 20 1a 21 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4f58		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a4f68		e2 20 dc d4 08 e2 20 a9 8f 20 27 22 20 09 1d 20
>3a4f78		51 06 e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 20
>3a4f88		09 1d 20 bf 07 20 3e 62 e2 20 20 1a 21 60 e2 20
>3a4f98		a9 8f 20 27 22 20 09 1d 20 bf 07 20 6d 62 e2 20
>3a4fa8		20 1a 21 60 e2 20 a9 8f 20 27 22 20 09 1d 20 bf
>3a4fb8		07 20 9c 62 e2 20 20 1a 21 60 e2 20 a9 8f 20 27
>3a4fc8		22 20 09 1d 20 bf 07 20 ca 62 e2 20 20 1a 21 60
>3a4fd8		e2 20 a9 8f 20 27 22 20 09 1d 20 bf 07 20 f3 63
>3a4fe8		e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 20 09 1d
>3a4ff8		20 bf 07 20 c9 63 e2 20 20 1a 21 60 e2 20 a9 8f
>3a5008		20 27 22 20 09 1d 20 bf 07 20 15 64 e2 20 20 1a
>3a5018		21 60 e2 20 a9 8f 20 27 22 20 09 1d 20 bf 07 20
>3a5028		a9 64 e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 20
>3a5038		09 1d 20 bf 07 20 2b 65 e2 20 20 1a 21 60 00 ea
>3a5048		60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2
>3a5058		20 a9 00 00 85 d9 e2 20 a9 36 85 db c2 30 a9 00
>3a5068		00 a0 00 00 97 d9 a0 02 00 97 d9 a0 04 00 97 d9
>3a5078		20 f0 20 2b 28 60 8b 08 c2 20 a9 00 00 85 1a a9
>3a5088		36 00 85 1c 20 f0 20 20 d0 23 28 ab 60 08 c2 20
>3a5098		64 55 a9 ff 7f 85 59 20 d7 03 20 7b 22 29 ff 00
>3a50a8		c9 00 00 f0 2c c9 81 00 f0 1a 20 3b 21 20 d8 08
>3a50b8		a5 23 85 55 20 7b 22 29 ff 00 c9 00 00 f0 12 c9
>3a50c8		81 00 d0 2a 20 27 22 20 3b 21 20 d8 08 a5 23 85
>3a50d8		59 a5 1c 48 a5 1a 48 a5 02 48 a5 00 48 20 8b 18
>3a50e8		68 85 00 68 85 02 68 85 1a 68 85 1c 28 60 08 c2
>3a50f8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a5108		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 08 c2
>3a5118		20 48 a9 00 08 5b 68 28 c2 20 64 e4 64 e7 e2 20
>3a5128		64 e6 64 e9 64 ea c2 20 38 a5 d9 69 04 00 85 e1
>3a5138		e2 20 a5 db 69 00 85 e3 28 60 c9 5f f0 1a c9 3a
>3a5148		b0 04 c9 30 b0 12 c9 5b b0 04 c9 41 b0 0a c9 7b
>3a5158		b0 04 c9 61 b0 02 18 60 38 60 08 e2 20 c2 10 a0
>3a5168		00 00 b7 0c f0 0a d7 e7 d0 13 c8 c0 08 00 d0 f2
>3a5178		b7 e7 20 56 05 20 42 51 b0 03 28 38 60 28 18 60
>3a5188		08 e2 20 c2 10 a0 00 00 a2 00 00 b7 e7 f0 0b 20
>3a5198		56 05 9f 00 4e 00 c8 e8 80 f1 a9 00 9f 00 4e 00
>3a51a8		c2 20 a9 00 4e 85 e7 e2 20 a9 00 85 e9 c2 20 a5
>3a51b8		e4 85 08 d0 06 e2 20 a5 e6 f0 4d e2 20 a5 e6 85
>3a51c8		0a a5 ea a0 00 00 d7 08 d0 17 c2 20 18 a5 08 69
>3a51d8		01 00 85 0c e2 20 a5 0a 69 00 85 0e 20 62 51 b0
>3a51e8		2a a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2 20 b7 08
>3a51f8		85 0e d0 06 c2 20 a5 0c f0 0e c2 20 a5 0c 85 08
>3a5208		e2 20 a5 0e 85 0a 80 b9 28 18 60 28 38 60 08 20
>3a5218		88 51 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a5228		a9 05 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>3a5238		dc d4 08 c2 30 a0 09 00 b7 08 85 23 c8 c8 b7 08
>3a5248		85 25 e2 20 a0 00 00 b7 08 85 27 28 60 08 c2 20
>3a5258		18 a5 e1 69 10 00 85 08 e2 20 a5 e3 69 00 85 0a
>3a5268		c5 bc 90 27 c2 20 a5 08 c5 ba 90 1f 08 c2 20 48
>3a5278		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>3a5288		29 ff 00 20 5b 1e e2 20 dc d4 08 c2 20 a5 e1 85
>3a5298		c0 e2 20 a5 e3 85 c2 c2 20 a5 08 85 e1 e2 20 a5
>3a52a8		0a 85 e3 28 60 08 e2 20 a5 27 c5 ea f0 33 a5 ea
>3a52b8		c9 00 d0 05 20 51 06 80 2f c9 01 d0 05 20 bf 07
>3a52c8		80 26 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a52d8		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a52e8		08 c9 02 d0 03 20 f3 16 c2 10 20 55 52 c2 30 18
>3a52f8		a5 c0 69 01 00 85 08 e2 20 a5 c2 69 00 85 0a a0
>3a5308		00 00 a9 00 97 08 c8 c0 08 00 d0 f8 a0 00 00 b7
>3a5318		e7 f0 10 20 56 05 20 42 51 90 08 97 08 c8 c0 08
>3a5328		00 d0 ec c2 20 a0 09 00 a5 23 97 c0 a5 25 c8 c8
>3a5338		97 c0 a5 e4 a0 0d 00 97 c0 c8 c8 e2 20 a5 e6 97
>3a5348		c0 c2 20 a5 c0 85 e4 e2 20 a5 c2 85 e6 e2 20 a0
>3a5358		00 00 a5 27 97 c0 c9 02 f0 02 28 60 c2 20 a5 23
>3a5368		85 c0 e2 20 a5 25 85 c2 20 0f 13 20 24 13 80 ea
>3a5378		08 c2 30 a5 e4 d0 06 e2 20 a5 e6 f0 05 20 88 51
>3a5388		b0 05 20 ad 52 80 4e e2 20 a5 27 c5 ea f0 33 a5
>3a5398		ea c9 00 d0 05 20 51 06 80 2c c9 01 d0 05 20 bf
>3a53a8		07 80 23 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a53b8		04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a53c8		d4 08 c9 02 f0 11 c2 30 a0 09 00 a5 23 97 08 c8
>3a53d8		c8 a5 25 97 08 28 60 20 f3 16 a0 09 00 b7 08 85
>3a53e8		c0 c8 c8 e2 20 b7 08 85 c2 20 0f 13 20 43 13 e2
>3a53f8		20 a5 27 c9 02 f0 02 80 cd c2 20 a5 23 85 c0 e2
>3a5408		20 a5 25 85 c2 20 0f 13 20 24 13 80 b9 08 20 3b
>3a5418		21 e2 20 a7 00 20 e2 04 90 42 c2 20 a5 00 85 e7
>3a5428		e2 20 a5 02 85 e9 20 1a 21 a7 00 f0 0d c9 24 f0
>3a5438		14 c9 25 f0 09 20 42 51 b0 ec a9 01 80 0c 20 1a
>3a5448		21 a9 00 80 05 20 1a 21 a9 02 85 ea 20 7b 22 c9
>3a5458		8f d0 06 a5 ea 09 80 85 ea 28 38 60 28 18 60 08
>3a5468		c2 20 18 a5 23 65 29 85 23 a5 25 65 2b 85 25 28
>3a5478		60 08 c2 20 38 a5 23 e5 29 85 23 a5 25 e5 2b 85
>3a5488		25 28 60 08 c2 20 3b 38 e9 0a 00 1b c2 30 a9 00
>3a5498		00 83 01 83 03 83 05 83 07 83 09 a5 25 10 18 a9
>3a54a8		00 80 83 01 a5 25 49 ff ff 85 25 a5 23 49 ff ff
>3a54b8		1a 85 23 d0 02 e6 25 a5 2b 10 1a a3 01 49 00 80
>3a54c8		83 01 a5 2b 49 ff ff 85 2b a5 29 49 ff ff 1a 85
>3a54d8		29 d0 02 e6 2b a5 25 f0 04 a5 2b d0 5a a5 23 8f
>3a54e8		00 01 00 a5 29 8f 02 01 00 af 04 01 00 83 03 af
>3a54f8		06 01 00 83 05 a5 25 8f 00 01 00 a5 29 8f 02 01
>3a5508		00 18 af 04 01 00 63 05 83 05 af 06 01 00 63 07
>3a5518		83 07 a5 23 8f 00 01 00 a5 2b 8f 02 01 00 18 af
>3a5528		04 01 00 63 05 83 05 af 06 01 00 63 07 83 07 a3
>3a5538		07 f0 23 a3 09 f0 1f 08 c2 20 48 a9 00 08 5b 68
>3a5548		28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00 20 5b
>3a5558		1e e2 20 dc d4 08 c2 30 a3 01 10 16 a3 05 49 ff
>3a5568		ff 83 05 a3 03 49 ff ff 1a 83 03 d0 05 a3 05 1a
>3a5578		83 05 a3 03 85 23 a3 05 85 25 c2 20 3b 18 69 0a
>3a5588		00 1b 28 60 08 c2 20 a5 23 c5 29 a5 25 e5 2b 50
>3a5598		03 49 00 80 30 06 64 23 64 25 80 07 a9 ff ff 85
>3a55a8		23 85 25 28 60 08 c2 20 a5 23 c5 29 d0 0c a5 25
>3a55b8		c5 2b d0 06 64 23 64 25 80 16 a5 29 c5 23 a5 2b
>3a55c8		e5 25 50 03 49 00 80 10 eb a9 ff ff 85 23 85 25
>3a55d8		28 60 08 c2 20 a5 2b c5 25 d0 0f a5 29 c5 23 d0
>3a55e8		09 a9 ff ff 85 23 85 25 80 04 64 23 64 25 28 60
>3a55f8		08 c2 20 a5 2b c5 25 d0 0c a5 29 c5 23 d0 06 64
>3a5608		23 64 25 80 07 a9 ff ff 85 23 85 25 28 60 08 c2
>3a5618		20 a5 23 c5 29 d0 0f a5 25 c5 2b d0 09 a9 ff ff
>3a5628		85 23 85 25 80 13 a5 29 c5 23 a5 2b e5 25 50 03
>3a5638		49 00 80 30 e8 64 23 64 25 28 60 08 c2 20 a5 23
>3a5648		c5 29 d0 0f a5 25 c5 2b d0 09 a9 ff ff 85 23 85
>3a5658		25 80 13 a5 23 c5 29 a5 25 e5 2b 50 03 49 00 80
>3a5668		30 e8 64 23 64 25 28 60 08 c2 20 8f 12 01 00 8a
>3a5678		8f 10 01 00 af 16 01 00 aa af 14 01 00 28 60 08
>3a5688		e2 20 a9 03 8f 00 e2 af a9 00 8f 01 e2 af c2 20
>3a5698		a5 23 8f 08 e2 af a5 25 8f 0a e2 af a9 00 00 8f
>3a56a8		0c e2 af a9 00 01 8f 0e e2 af ea ea ea ea ea ea
>3a56b8		af 08 e2 af 85 23 af 0a e2 af 85 25 a9 01 00 85
>3a56c8		27 28 60 08 e2 20 a9 40 8f 00 e2 af 80 09 08 e2
>3a56d8		20 a9 48 8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5
>3a56e8		23 8f 08 e2 af a5 25 8f 0a e2 af a5 29 8f 0c e2
>3a56f8		af a5 2b 8f 0e e2 af ea ea ea e2 20 af 06 e2 af
>3a5708		29 07 d0 10 c2 20 af 08 e2 af 85 23 af 0a e2 af
>3a5718		85 25 28 60 20 b7 57 80 f9 08 e2 20 a9 01 8f 01
>3a5728		e2 af a9 00 8f 00 e2 af c2 20 a5 23 8f 08 e2 af
>3a5738		a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e
>3a5748		e2 af ea ea ea e2 20 af 05 e2 af 29 17 d0 10 c2
>3a5758		20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60 20
>3a5768		b7 57 80 f9 08 e2 20 a9 00 8f 01 e2 af a9 00 8f
>3a5778		00 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2
>3a5788		af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af ea ea ea
>3a5798		e2 20 af 04 e2 af 29 07 d0 10 c2 20 af 08 e2 af
>3a57a8		85 23 af 0a e2 af 85 25 28 60 20 b7 57 80 f9 e2
>3a57b8		20 89 01 f0 20 00 08 c2 20 48 a9 00 08 5b 68 28
>3a57c8		e2 20 a9 0c 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a57d8		e2 20 dc d4 08 89 02 f0 1f 08 c2 20 48 a9 00 08
>3a57e8		5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00
>3a57f8		20 5b 1e e2 20 dc d4 08 89 04 f0 1f 08 c2 20 48
>3a5808		a9 00 08 5b 68 28 e2 20 a9 0e 8f d3 08 00 c2 20
>3a5818		29 ff 00 20 5b 1e e2 20 dc d4 08 60 08 e2 20 a9
>3a5828		00 8f 01 e2 af a9 02 8f 00 e2 af c2 20 a9 00 a0
>3a5838		8f 0c e2 af a9 00 00 8f 0e e2 af a5 23 8f 08 e2
>3a5848		af a5 25 8f 0a e2 af ea ea ea e2 20 af 04 e2 af
>3a5858		89 07 f0 01 00 c2 20 af 08 e2 af 85 23 af 0a e2
>3a5868		af 85 25 28 60 08 e2 20 a9 01 8f 01 e2 af a9 02
>3a5878		8f 00 e2 af c2 20 a9 00 a0 8f 0c e2 af a9 00 00
>3a5888		8f 0e e2 af a5 23 8f 08 e2 af a5 25 8f 0a e2 af
>3a5898		ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 28
>3a58a8		60 08 c2 20 a5 23 d0 0a a5 25 29 ff 7f d0 03 28
>3a58b8		38 60 28 18 60 08 e2 20 38 e9 30 20 7a 05 c2 20
>3a58c8		29 ff 00 18 65 23 85 23 a5 25 69 00 00 85 25 28
>3a58d8		60 08 e2 20 c9 30 90 04 c9 3a 90 1c c9 61 90 04
>3a58e8		c9 67 90 0a c9 41 90 04 c9 47 90 07 80 31 38 e9
>3a58f8		57 80 08 38 e9 37 80 03 38 e9 30 06 23 26 24 26
>3a5908		25 26 26 06 23 26 24 26 25 26 26 06 23 26 24 26
>3a5918		25 26 26 06 23 26 24 26 25 26 26 05 23 85 23 28
>3a5928		60 08 e2 20 c9 30 f0 06 c9 31 f0 0a 80 0f c2 20
>3a5938		06 23 26 25 80 07 c2 20 38 26 23 26 25 28 60 08
>3a5948		e2 30 a5 61 f0 0d aa a5 69 d0 15 a9 00 8f 01 e2
>3a5958		af 80 15 e2 20 a9 03 8f 01 e2 af ea ea ea 80 62
>3a5968		e2 20 a9 01 8f 01 e2 af e2 20 a9 43 8f 00 e2 af
>3a5978		c2 20 a9 00 10 8f 08 e2 af a9 00 00 8f 0a e2 af
>3a5988		c2 20 a9 00 a0 8f 0c e2 af a9 00 00 8f 0e e2 af
>3a5998		ea ea ea ca f0 2c af 08 e2 af 8f 0c 08 00 af 0a
>3a59a8		e2 af 8f 0e 08 00 e2 20 a9 42 8f 00 e2 af c2 20
>3a59b8		af 0c 08 00 8f 08 e2 af af 0e 08 00 8f 0a e2 af
>3a59c8		80 be c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25
>3a59d8		e2 20 a9 01 85 27 28 60 08 c2 20 a5 5d 85 23 a5
>3a59e8		5f 85 25 20 f9 5b c2 20 a5 23 85 29 a5 25 85 2b
>3a59f8		c2 20 a5 59 85 23 a5 5b 85 25 20 21 57 c2 20 a5
>3a5a08		55 85 29 a5 57 85 2b 20 d6 56 c2 20 a5 23 85 29
>3a5a18		a5 25 85 2b 20 47 59 20 6c 57 c2 20 a5 65 f0 07
>3a5a28		a5 25 09 00 80 85 25 e2 20 a9 01 85 27 28 60 5a
>3a5a38		08 c2 30 64 23 64 25 64 55 64 57 64 65 64 59 64
>3a5a48		5b a9 01 00 85 5d 64 5f 64 61 64 63 64 69 e2 20
>3a5a58		a0 00 00 b7 00 c9 2b f0 33 c9 2d f0 2b c9 26 f0
>3a5a68		3a 20 fb 04 90 03 82 ac 00 08 c2 20 48 a9 00 08
>3a5a78		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>3a5a88		20 5b 1e e2 20 dc d4 08 a9 01 85 65 c8 b7 00 c9
>3a5a98		26 f0 08 20 fb 04 90 d1 82 7a 00 c8 b7 00 c9 68
>3a5aa8		f0 0e c9 48 f0 0a c9 62 f0 4c c9 42 f0 48 80 b9
>3a5ab8		c8 b7 00 20 0c 05 b0 02 80 af 20 d9 58 c8 b7 00
>3a5ac8		20 0c 05 b0 f5 e2 20 a5 65 f0 11 c2 20 38 a9 00
>3a5ad8		00 e5 23 85 23 a9 00 00 e5 25 85 25 e2 20 a9 00
>3a5ae8		85 27 c2 20 18 98 65 00 85 00 a5 02 69 00 00 85
>3a5af8		02 e2 20 28 7a 60 c8 b7 00 c9 30 f0 07 c9 31 f0
>3a5b08		03 82 65 ff 20 29 59 c8 b7 00 c9 30 f0 f6 c9 31
>3a5b18		f0 f2 82 b0 ff 20 bd 58 c8 b7 00 c9 2e f0 08 20
>3a5b28		fb 04 b0 f1 82 9e ff c2 20 20 f9 5b c2 20 a5 23
>3a5b38		85 55 a5 25 85 57 64 23 64 25 e2 20 80 36 20 bd
>3a5b48		58 c2 20 a5 5f 8f 00 01 00 a9 0a 00 8f 02 01 00
>3a5b58		af 04 01 00 85 5f a5 5d 8f 00 01 00 a9 0a 00 8f
>3a5b68		02 01 00 af 04 01 00 85 5d af 06 01 00 18 65 5f
>3a5b78		85 5f e2 20 c8 b7 00 c9 65 f0 24 c9 45 f0 20 20
>3a5b88		fb 04 b0 ba c2 20 20 f9 5b c2 20 a5 23 85 59 a5
>3a5b98		25 85 5b 64 23 64 25 20 e0 59 e2 20 82 43 ff c2
>3a5ba8		20 20 f9 5b c2 20 a5 23 85 59 a5 25 85 5b 64 23
>3a5bb8		64 25 e2 20 c8 b7 00 c9 2b f0 10 c9 2d f0 08 20
>3a5bc8		fb 04 b0 12 82 a2 fe a9 01 85 69 c8 b7 00 20 fb
>3a5bd8		04 b0 03 82 93 fe 20 bd 58 c8 b7 00 20 fb 04 b0
>3a5be8		f5 c2 20 a5 23 85 61 a5 25 85 63 20 e0 59 82 f1
>3a5bf8		fe 08 20 87 56 28 60 08 c2 20 a9 f6 5e 85 29 a9
>3a5c08		3a 00 85 2b e2 20 a9 01 85 2d c2 20 20 d2 5c c9
>3a5c18		ff ff d0 0c a9 00 00 8d 23 08 8d 25 08 82 a1 00
>3a5c28		f4 00 00 f4 00 00 f4 00 00 e2 20 ad 26 08 29 80
>3a5c38		83 01 ad 25 08 2a ad 26 08 2a 83 02 a9 00 83 06
>3a5c48		ad 25 08 09 80 83 05 ad 24 08 83 04 ad 23 08 83
>3a5c58		03 a3 02 c9 96 f0 3a 90 1f 08 c2 20 48 a9 00 08
>3a5c68		5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00
>3a5c78		20 5b 1e e2 20 dc d4 08 c2 20 a3 05 4a 83 05 a3
>3a5c88		03 6a 83 03 e2 20 a3 02 1a 83 02 c9 96 f0 02 80
>3a5c98		e7 a3 01 f0 1b c2 20 a3 03 49 ff ff 18 69 01 00
>3a5ca8		8d 23 08 a3 05 49 ff ff 69 00 00 8d 25 08 80 0c
>3a5cb8		c2 20 a3 03 8d 23 08 a3 05 8d 25 08 c2 20 68 68
>3a5cc8		68 e2 20 a9 00 8d 27 08 28 60 da 08 c2 20 a5 25
>3a5cd8		48 a5 23 48 20 cb 56 20 a9 58 b0 11 a5 25 89 00
>3a5ce8		80 d0 05 a9 01 00 80 08 a9 ff ff 80 03 a9 00 00
>3a5cf8		fa 86 23 fa 86 25 28 fa 60 08 c2 30 20 d2 5c c9
>3a5d08		ff ff d0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2
>3a5d18		30 20 d2 5c c9 01 00 d0 05 20 2d 06 80 03 20 3f
>3a5d28		06 28 60 08 c2 30 20 d2 5c c9 00 00 d0 05 20 2d
>3a5d38		06 80 03 20 3f 06 28 60 08 c2 30 20 d2 5c c9 01
>3a5d48		00 f0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2 30
>3a5d58		20 d2 5c c9 ff ff f0 05 20 2d 06 80 03 20 3f 06
>3a5d68		28 60 08 c2 30 20 d2 5c c9 00 00 f0 05 20 2d 06
>3a5d78		80 03 20 3f 06 28 60 08 e2 20 97 23 c8 a9 00 97
>3a5d88		23 28 60 da 08 e2 20 c9 80 90 0a 48 a9 2d 20 7f
>3a5d98		5d 68 49 ff 1a c2 30 29 ff 00 c9 64 00 90 0e a2
>3a5da8		64 00 20 70 56 18 69 30 00 20 7f 5d 8a a2 0a 00
>3a5db8		20 70 56 18 69 30 00 20 7f 5d 8a 18 69 30 00 20
>3a5dc8		7f 5d 28 fa 60 08 e2 20 c2 10 a0 00 00 b7 23 f0
>3a5dd8		03 c8 80 f9 28 60 08 e2 20 c2 10 f4 00 00 f4 00
>3a5de8		00 f4 00 00 20 a9 58 90 19 20 01 15 e2 20 a0 00
>3a5df8		00 a9 20 97 16 c8 a9 30 97 16 c8 a9 00 97 16 82
>3a5e08		ce 00 e2 20 a5 26 10 08 29 7f 85 26 a9 01 83 01
>3a5e18		c2 20 a9 00 00 83 03 c2 20 af f2 5e 3a 85 29 af
>3a5e28		f4 5e 3a 85 2b 20 d2 5c 89 00 80 d0 12 20 6d 58
>3a5e38		a3 03 1a 83 03 20 d2 5c c9 ff ff f0 12 80 ee 20
>3a5e48		24 58 a3 03 3a 83 03 20 d2 5c c9 ff ff f0 f0 e2
>3a5e58		30 a5 25 0a a5 26 2a 83 05 38 a9 96 e3 05 aa f0
>3a5e68		0f a5 25 09 80 85 25 46 25 66 24 66 23 ca d0 f7
>3a5e78		c2 10 e2 20 64 26 a9 00 85 27 a3 01 f0 11 c2 20
>3a5e88		38 a9 00 00 e5 23 85 23 a9 00 00 e5 25 85 25 20
>3a5e98		60 15 c2 20 a5 16 85 23 a5 18 85 25 20 cd 5d e2
>3a5ea8		20 c8 a9 00 97 23 88 88 b7 23 c8 97 23 c0 02 00
>3a5eb8		d0 f4 a9 2e 97 23 e2 20 18 a3 03 69 05 83 06 f0
>3a5ec8		19 20 cd 5d a9 45 20 7f 5d a3 06 20 8b 5d 80 0a
>3a5ed8		c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27
>3a5ee8		c2 20 3b 18 69 06 00 1b 28 60 00 50 c3 47 00 00
>3a5ef8		80 3f f3 04 b5 3f f3 04 35 3f e2 20 a9 48 8f 00
>3a5f08		e2 af c2 20 bd 00 00 8f 08 e2 af bd 02 00 8f 0a
>3a5f18		e2 af 88 e8 e8 e8 e8 e2 20 a9 00 8f 01 e2 af c2
>3a5f28		20 af 23 08 00 8f 0c e2 af af 25 08 00 8f 0e e2
>3a5f38		af ea ea ea af 08 e2 af 48 af 0a e2 af 8f 0a e2
>3a5f48		af 68 8f 08 e2 af e2 20 a9 02 8f 01 e2 af c2 20
>3a5f58		bd 00 00 8f 0c e2 af bd 02 00 8f 0e e2 af ea ea
>3a5f68		ea 88 f0 14 af 08 e2 af 48 af 0a e2 af 8f 0a e2
>3a5f78		af 68 8f 08 e2 af 80 9b af 08 e2 af 8f 23 08 00
>3a5f88		af 0a e2 af 8f 25 08 00 60 e2 20 a9 00 8f 00 e2
>3a5f98		af a9 00 8f 01 e2 af c2 20 a5 23 8f 08 e2 af 8f
>3a5fa8		0c e2 af af 25 08 00 8f 0a e2 af 8f 0e e2 af ea
>3a5fb8		ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 60 e2
>3a5fc8		20 a9 00 8f 00 e2 af a9 01 8f 01 e2 af c2 20 a5
>3a5fd8		23 8f 0c e2 af af 25 08 00 8f 0e e2 af af 1b 66
>3a5fe8		3a 8f 08 e2 af af 1d 66 3a 8f 0a e2 af ea ea ea
>3a5ff8		af 08 e2 af 85 23 af 0a e2 af 85 25 60 a2 00 00
>3a6008		a5 23 c5 29 a5 25 e5 2b 90 1e a5 23 8f 08 e2 af
>3a6018		a5 25 8f 0a e2 af ea ea ea af 08 e2 af 85 23 af
>3a6028		0a e2 af 85 25 e8 80 d8 60 e2 20 a5 26 10 09 29
>3a6038		7f 85 26 a9 01 48 80 03 a9 00 48 a9 40 8f 00 e2
>3a6048		af a9 02 8f 01 e2 af c2 30 af 83 66 3a 85 29 8f
>3a6058		0c e2 af af 85 66 3a 85 2b 8f 0e e2 af 20 05 60
>3a6068		e2 20 68 c2 20 f0 1e a5 23 8f 08 e2 af a5 25 8f
>3a6078		0a e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af
>3a6088		29 ff 7f 85 25 60 5a a2 00 00 a0 00 00 a5 23 df
>3a6098		87 66 3a a5 25 ff 89 66 3a 90 2c bf 83 66 3a 8f
>3a60a8		08 e2 af bf 85 66 3a 8f 0a e2 af a5 23 8f 0c e2
>3a60b8		af a5 25 8f 0e e2 af ea ea ea af 08 e2 af 85 23
>3a60c8		af 0a e2 af 85 25 38 98 2a a8 e8 e8 e8 e8 e0 0c
>3a60d8		00 d0 ba 98 aa 7a 60 08 c2 30 48 da 20 91 5f 8b
>3a60e8		e2 20 a9 3a 48 ab c2 20 a2 c3 65 5a a0 05 00 20
>3a60f8		02 5f 7a a9 01 00 8f 27 08 00 ab fa 68 28 60 08
>3a6108		c2 30 48 da a5 23 85 29 a5 25 85 2b 20 91 5f 8b
>3a6118		e2 20 a9 3a 48 ab c2 20 a2 d7 65 5a a0 05 00 20
>3a6128		02 5f 7a ab 20 6c 57 fa 68 28 60 08 c2 30 48 da
>3a6138		a5 23 85 29 a5 25 85 2b 20 91 5f 8b e2 20 a9 3a
>3a6148		48 ab c2 20 a2 eb 65 5a a0 05 00 20 02 5f 7a ab
>3a6158		20 6c 57 fa 68 28 60 08 c2 30 48 da e2 20 a9 40
>3a6168		8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f 08
>3a6178		e2 af a5 25 8f 0a e2 af af 1b 66 3a 8f 0c e2 af
>3a6188		af 1d 66 3a 8f 0e e2 af ea ea ea af 08 e2 af 85
>3a6198		0c af 0a e2 af 85 0e e2 20 a9 48 8f 00 e2 af c2
>3a61a8		20 ea ea ea af 08 e2 af 85 10 af 0a e2 af 85 12
>3a61b8		e2 20 a9 01 8f 01 e2 af c2 20 a5 0c 8f 08 e2 af
>3a61c8		a5 0e 8f 0a e2 af a5 10 8f 0c e2 af a5 12 8f 0e
>3a61d8		e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85
>3a61e8		25 e2 20 a9 08 8f 00 e2 af a9 02 8f 01 e2 af c2
>3a61f8		20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af ea ea ea
>3a6208		af 08 e2 af 85 29 af 0a e2 af 85 2b 20 91 5f 8b
>3a6218		e2 20 a9 3a 48 ab c2 20 a2 ff 65 5a a0 08 00 20
>3a6228		02 5f 7a a9 01 00 8f 27 08 00 8f 2d 08 00 20 6c
>3a6238		57 ab fa 68 28 60 08 c2 30 48 da 20 31 60 20 8e
>3a6248		60 da 8a 29 01 00 d0 05 20 07 61 80 03 20 df 60
>3a6258		fa 8a 29 04 00 f0 0a e2 20 a5 26 09 80 85 26 c2
>3a6268		20 fa 68 28 60 08 c2 30 48 da 20 31 60 20 8e 60
>3a6278		da 8a 29 01 00 d0 05 20 df 60 80 03 20 07 61 fa
>3a6288		8a 29 02 00 f0 0a e2 20 a5 26 09 80 85 26 c2 20
>3a6298		fa 68 28 60 08 c2 30 48 da 20 31 60 20 8e 60 20
>3a62a8		33 61 8a 29 01 00 f0 03 20 c7 5f 8a e2 20 4a 4a
>3a62b8		69 00 29 01 f0 06 a5 26 09 80 85 26 c2 20 fa 68
>3a62c8		28 60 08 c2 30 48 da 5a a5 25 10 1f 08 c2 20 48
>3a62d8		a9 00 08 5b 68 28 e2 20 a9 17 8f d3 08 00 c2 20
>3a62e8		29 ff 00 20 5b 1e e2 20 dc d4 08 c2 30 a5 23 cf
>3a62f8		1b 66 3a a5 25 cf 1d 66 3a b0 04 20 c7 5f 18 a9
>3a6308		00 00 a8 2a 48 e2 20 a9 00 8f 00 e2 af a9 01 8f
>3a6318		01 e2 af c2 20 af 73 66 3a 85 29 8f 0c e2 af af
>3a6328		75 66 3a 85 2b 8f 0e e2 af 20 05 60 8a f0 07 0a
>3a6338		0a 0a 0a 0a 0a a8 af 77 66 3a 85 29 8f 0c e2 af
>3a6348		af 79 66 3a 85 2b 8f 0e e2 af 20 05 60 8a f0 0b
>3a6358		0a 0a 0a 0a 85 29 18 98 65 29 a8 af 7b 66 3a 85
>3a6368		29 8f 0c e2 af af 7d 66 3a 85 2b 8f 0e e2 af 20
>3a6378		05 60 8a f0 09 0a 0a 85 29 18 98 65 29 a8 af 7f
>3a6388		66 3a 85 29 8f 0c e2 af af 81 66 3a 85 2b 8f 0e
>3a6398		e2 af 20 05 60 86 29 18 98 65 29 a8 20 5f 61 a5
>3a63a8		23 85 29 a5 25 85 2b 98 85 23 64 25 20 f9 5b 20
>3a63b8		d6 56 68 d0 07 a5 25 09 00 80 85 25 7a fa 68 28
>3a63c8		60 08 c2 30 48 da a5 23 85 29 a5 25 85 2b 20 91
>3a63d8		5f 8b e2 20 a9 3a 48 ab c2 20 a2 23 66 a0 05 00
>3a63e8		20 02 5f ab 20 6c 57 fa 68 28 60 08 c2 30 48 da
>3a63f8		20 c9 63 af 8b 66 3a 85 29 af 8d 66 3a 85 2b 20
>3a6408		cb 56 a5 25 49 00 80 85 25 fa 68 28 60 08 c2 30
>3a6418		48 da a5 23 85 29 a5 25 85 2b 20 91 5f 8b e2 20
>3a6428		a9 3a 48 ab c2 20 a2 37 66 a0 05 00 20 02 5f ab
>3a6438		20 6c 57 fa 68 28 60 c2 20 a5 23 85 29 a5 25 85
>3a6448		2b c2 20 af 1b 66 3a 85 23 af 1d 66 3a 85 25 8a
>3a6458		f0 30 4a aa 90 03 20 6c 57 c2 20 a5 25 48 a5 23
>3a6468		48 c2 20 a5 29 85 23 a5 2b 85 25 20 91 5f c2 20
>3a6478		a5 23 85 29 a5 25 85 2b c2 20 68 85 23 68 85 25
>3a6488		80 cd 60 08 c2 30 48 da 8b e2 20 a9 3a 48 ab c2
>3a6498		20 a2 4b 66 5a a0 0a 00 20 02 5f 7a ab fa 68 28
>3a64a8		60 08 c2 30 48 da 5a a5 23 05 25 d0 10 c2 20 af
>3a64b8		1b 66 3a 85 23 af 1d 66 3a 85 25 80 61 a5 25 29
>3a64c8		00 80 a8 f0 07 a5 25 29 ff 7f 85 25 c2 20 a5 25
>3a64d8		48 a5 23 48 20 51 06 a6 23 20 bf 07 c2 20 a5 23
>3a64e8		85 29 a5 25 85 2b c2 20 68 85 23 68 85 25 20 cb
>3a64f8		56 20 8b 64 c2 20 a5 25 48 a5 23 48 c2 20 af 7f
>3a6508		66 3a 85 23 af 81 66 3a 85 25 20 3f 64 c2 20 68
>3a6518		85 29 68 85 2b 20 6c 57 98 f0 03 20 c7 5f 7a fa
>3a6528		68 28 60 08 c2 30 48 a5 25 10 1f 08 c2 20 48 a9
>3a6538		00 08 5b 68 28 e2 20 a9 17 8f d3 08 00 c2 20 29
>3a6548		ff 00 20 5b 1e e2 20 dc d4 08 c2 30 05 23 f0 68
>3a6558		c2 20 af 1f 66 3a 85 29 af 21 66 3a 85 2b e2 20
>3a6568		a9 01 85 2d c2 20 c2 20 a5 25 48 a5 23 48 20 21
>3a6578		57 a5 25 c5 2b d0 09 a5 23 45 29 29 f8 ff f0 30
>3a6588		20 d6 56 c2 20 af 1f 66 3a 85 29 af 21 66 3a 85
>3a6598		2b 20 21 57 c2 20 a5 23 85 29 a5 25 85 2b c2 20
>3a65a8		68 85 23 68 85 25 c2 20 a5 25 48 a5 23 48 80 be
>3a65b8		c2 20 68 85 29 68 85 2b 68 28 60 01 0d d0 37 61
>3a65c8		0b b6 ba ab aa 2a 3d 00 00 00 bf 00 00 80 3f 1d
>3a65d8		ef 38 36 01 0d 50 b9 89 88 08 3c ab aa 2a be 00
>3a65e8		00 80 3f a4 27 b3 3c d1 0d 5d 3d 89 88 08 3e ab
>3a65f8		aa aa 3e 00 00 80 3f 89 88 88 3d d9 89 9d 3d 8c
>3a6608		2e ba 3d 39 8e e3 3d 25 49 12 3e cd cc 4c 3e ab
>3a6618		aa aa 3e 00 00 80 3f 00 00 00 40 8e e3 f8 3c 6e
>3a6628		db 36 3d 9a 99 99 3d ab aa 2a 3e 00 00 80 3f 39
>3a6638		8e e3 3d 25 49 12 be cd cc 4c 3e ab aa aa be 00
>3a6648		00 80 3f 1d ef 38 36 01 0d d0 37 01 0d 50 39 61
>3a6658		0b b6 3a 89 88 08 3c ab aa 2a 3d ab aa 2a 3e 00
>3a6668		00 00 3f 00 00 80 3f 00 00 80 3f c1 2c a1 6d 5f
>3a6678		97 07 4b 81 64 5a 42 54 f8 2d 40 db 0f c9 40 db
>3a6688		0f 49 40 db 0f c9 3f db 0f 49 3f 08 20 0f 13 c2
>3a6698		20 a9 01 00 85 23 a9 00 00 85 25 e2 20 af 00 4d
>3a66a8		00 c2 20 29 ff 00 85 8f a8 a2 01 00 c2 20 bf 00
>3a66b8		4d 00 85 29 a9 00 00 85 2b e2 20 a9 00 85 2d c2
>3a66c8		20 20 4f 28 e8 e8 88 d0 e3 c2 20 a9 04 00 85 29
>3a66d8		a9 00 00 85 2b 20 4f 28 e2 20 af 00 4d 00 85 0c
>3a66e8		a9 00 85 0d c2 20 06 0c 38 a5 23 65 0c 85 23 a5
>3a66f8		25 69 00 00 85 25 d0 29 e2 20 a5 ea 09 80 a6 23
>3a6708		20 d3 10 e2 20 af 00 4d 00 87 c0 a0 01 00 a2 00
>3a6718		00 e2 20 bf 01 4d 00 97 c0 e4 8f f0 23 e8 c8 80
>3a6728		f0 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a6738		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a6748		e2 20 38 a5 c0 67 c0 85 08 a5 c1 69 00 85 09 a5
>3a6758		c2 69 00 85 0a 64 0b c2 20 a0 05 00 b7 c3 85 0c
>3a6768		e2 20 c8 c8 b7 c3 85 0e 64 0f e2 20 a9 00 87 08
>3a6778		c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85
>3a6788		0a c5 0e d0 e5 a5 08 c5 0c d0 df 28 60 08 c2 20
>3a6798		64 08 64 0a e2 20 af 00 4d 00 85 8f 64 90 a2 01
>3a67a8		00 e2 20 a7 c0 c5 8f f0 22 a6 8f 00 08 c2 20 48
>3a67b8		a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20
>3a67c8		29 ff 00 20 5b 1e e2 20 dc d4 08 c9 01 f0 3a a0
>3a67d8		01 00 e2 20 bf 00 4d 00 85 23 64 24 64 25 64 26
>3a67e8		b7 c0 85 29 64 2a 64 2b 64 2c a5 23 c5 29 b0 68
>3a67f8		20 4f 28 c2 20 18 a5 08 65 23 85 08 a5 0a 65 25
>3a6808		85 0a e8 e8 c8 c4 8f d0 c9 e2 20 18 bf 00 4d 00
>3a6818		85 90 65 08 85 08 a5 09 69 00 85 09 c2 20 a5 0a
>3a6828		69 00 00 85 0a c2 20 06 08 26 0a 06 08 26 0a e2
>3a6838		20 38 a5 08 65 8f 85 08 a5 09 69 00 85 09 c2 20
>3a6848		a5 0a 69 00 00 85 0a 18 a5 08 65 c0 85 08 e2 20
>3a6858		a5 0a 65 c2 85 0a 28 60 08 c2 20 48 a9 00 08 5b
>3a6868		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a6878		5b 1e e2 20 dc d4 08 08 20 0f 13 e2 20 a0 00 00
>3a6888		b7 c3 29 7f c9 02 d0 05 20 e3 06 80 10 c9 00 d0
>3a6898		05 20 51 06 80 07 c9 01 d0 2b 20 bf 07 a5 27 48
>3a68a8		c2 20 a5 25 48 a5 23 48 20 95 67 68 85 23 68 85
>3a68b8		25 e2 20 68 85 27 c2 20 a5 23 87 08 a0 02 00 a5
>3a68c8		25 97 08 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a68d8		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>3a68e8		20 dc d4 08 08 20 0f 13 f4 00 00 f4 00 00 e2 20
>3a68f8		48 20 95 67 e2 20 68 c2 20 68 68 c2 20 a7 08 85
>3a6908		23 a0 02 00 b7 08 85 25 e2 20 a0 00 00 b7 c3 29
>3a6918		7f 85 27 20 63 18 28 60 da 0b 08 08 c2 20 48 a9
>3a6928		00 08 5b 68 28 c2 30 a5 25 89 f0 ff d0 29 89 0f
>3a6938		00 d0 0c a5 23 89 00 fc d0 05 20 13 46 80 2e a2
>3a6948		0a 00 46 25 66 23 ca d0 f9 20 13 46 e2 20 a9 4b
>3a6958		20 18 00 c2 20 80 16 a2 14 00 46 25 66 23 ca d0
>3a6968		f9 20 13 46 e2 20 a9 4d 20 18 00 c2 20 28 2b fa
>3a6978		60 0b 08 c2 30 a9 00 00 8f b6 08 00 8f b8 08 00
>3a6988		e2 20 20 7b 22 c9 00 f0 08 20 09 1d 20 e3 06 80
>3a6998		11 c2 20 a9 00 00 85 23 85 25 e2 20 a9 02 85 27
>3a69a8		c2 20 20 da 6a 22 08 11 00 b0 22 20 8b 6b 08 c2
>3a69b8		20 48 a9 00 08 5b 68 28 e2 20 a9 10 8f d3 08 00
>3a69c8		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 20 d7 03
>3a69d8		08 c2 20 48 a9 20 03 5b 68 28 e2 20 a0 00 00 b7
>3a69e8		18 d0 03 82 a9 00 c9 e5 d0 03 82 96 00 a0 0b 00
>3a69f8		b7 18 89 08 f0 03 82 a9 00 89 02 f0 03 82 83 00
>3a6a08		29 0f c9 0f d0 03 82 7a 00 a0 00 00 b7 18 20 18
>3a6a18		00 c8 c0 08 00 d0 f5 a9 20 20 18 00 a0 08 00 b7
>3a6a28		18 20 18 00 c8 c0 0b 00 d0 f5 a9 09 20 18 00 a0
>3a6a38		0b 00 b7 18 89 10 d0 1e c2 20 a0 1c 00 b7 18 8f
>3a6a48		23 08 00 c8 c8 b7 18 8f 25 08 00 e2 20 a9 00 8f
>3a6a58		27 08 00 20 20 69 a9 09 20 18 00 a0 0b 00 b7 18
>3a6a68		89 08 d0 1c 89 01 f0 05 a9 52 20 18 00 89 04 f0
>3a6a78		05 a9 53 20 18 00 89 10 f0 05 a9 44 20 18 00 ea
>3a6a88		20 d7 03 20 ee 03 22 0c 11 00 90 03 82 41 ff 20
>3a6a98		8b 6b 08 c2 20 48 a9 00 08 5b 68 28 20 5f 21 28
>3a6aa8		2b 60 08 c2 20 48 a9 20 03 5b 68 28 e2 20 29 0f
>3a6ab8		c9 0f f0 cf a9 5b 20 18 00 a0 00 00 b7 18 c9 20
>3a6ac8		f0 09 20 18 00 c8 c0 08 00 d0 f1 a9 5d 20 18 00
>3a6ad8		80 ae 0b 08 08 c2 20 48 a9 20 03 5b 68 28 c2 30
>3a6ae8		a9 73 f2 85 20 a9 3a 00 85 22 a0 00 00 e2 20 a9
>3a6af8		00 97 20 c8 c0 1e 00 d0 f8 c2 20 a9 73 f0 8f 81
>3a6b08		f2 3a a9 3a 00 8f 83 f2 3a af 23 08 00 8f 75 f2
>3a6b18		3a af 25 08 00 8f 77 f2 3a 28 2b 60 08 c2 30 20
>3a6b28		3b 21 20 09 1d 20 e3 06 20 da 6a e2 20 a9 2c 85
>3a6b38		37 20 5c 22 b0 0f c2 20 a9 ff ff 8f 54 03 00 8f
>3a6b48		56 03 00 80 17 20 1a 21 20 09 1d 20 51 06 c2 20
>3a6b58		a5 23 8f 54 03 00 a5 25 8f 56 03 00 22 18 11 00
>3a6b68		b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11
>3a6b78		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a6b88		08 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a6b98		08 e2 20 48 a9 00 48 ab 68 28 e2 20 af 2e 03 00
>3a6ba8		85 23 a9 00 85 24 85 25 85 26 a9 00 85 27 85 ea
>3a6bb8		a9 3a 85 e9 c2 20 a9 ee 6b 85 e7 20 78 53 e2 20
>3a6bc8		af 20 03 00 85 23 a9 00 85 24 85 25 85 26 a9 00
>3a6bd8		85 27 85 ea a9 3a 85 e9 c2 20 a9 f6 6b 85 e7 20
>3a6be8		78 53 28 2b ab 60 44 4f 53 53 54 41 54 00 42 49
>3a6bf8		4f 53 53 54 41 54 00 08 c2 30 20 3b 21 20 09 1d
>3a6c08		20 e3 06 a5 23 8f 60 03 00 a5 25 8f 62 03 00 a9
>3a6c18		ff ff 8f 54 03 00 8f 56 03 00 22 24 11 00 b0 25
>3a6c28		20 5b 1e 20 8b 6b 08 c2 20 48 a9 00 08 5b 68 28
>3a6c38		e2 20 a9 11 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a6c48		e2 20 dc d4 08 20 5b 1e 28 60 08 c2 30 20 3b 21
>3a6c58		20 09 1d 20 e3 06 20 da 6a a9 00 00 8f 54 03 00
>3a6c68		a9 01 00 8f 56 03 00 20 49 50 22 18 11 00 b0 22
>3a6c78		20 8b 6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a6c88		11 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a6c98		d4 08 20 8b 6b c2 20 a2 12 00 18 bf 73 f2 3a 69
>3a6ca8		00 00 85 92 bf 75 f2 3a 69 01 00 85 94 e2 20 a9
>3a6cb8		00 87 92 c2 20 a9 00 00 85 7a a9 01 00 85 7c a2
>3a6cc8		00 00 e2 20 a7 7a f0 2a c9 0d f0 12 c9 0a f0 04
>3a6cd8		9d 00 4f e8 c2 20 e6 7a d0 e8 e6 7c 80 e4 e2 20
>3a6ce8		a9 00 9d 00 4f 20 82 27 c2 20 e6 7a d0 d1 e6 7c
>3a6cf8		80 cd e0 00 00 f0 0a e2 20 a9 00 9d 00 4f 20 82
>3a6d08		27 28 60 08 c2 30 20 3b 21 20 09 1d 20 e3 06 20
>3a6d18		da 6a e2 20 a9 2c 20 27 22 c2 20 20 09 1d 20 51
>3a6d28		06 a5 23 8f 50 03 00 a5 25 8f 52 03 00 e2 20 a9
>3a6d38		2c c2 20 20 27 22 20 09 1d 20 51 06 a5 23 8f 58
>3a6d48		03 00 a5 25 8f 5a 03 00 22 1c 11 00 b0 22 20 8b
>3a6d58		6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f
>3a6d68		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a6d78		20 8b 6b 28 60 da 5a 08 a2 00 00 a0 00 00 e2 20
>3a6d88		b7 23 9d 00 04 f0 04 e8 c8 80 f5 28 7a fa 60 08
>3a6d98		c2 30 20 3b 21 20 09 1d 20 e3 06 20 da 6a a9 00
>3a6da8		00 85 a6 e2 20 a9 01 85 a8 a9 20 85 b4 c2 20 a9
>3a6db8		00 00 85 ab a9 ff ff 85 a9 c2 20 a9 00 00 85 55
>3a6dc8		85 57 a9 ff ff 85 59 a9 ff 7f 85 5b 20 8b 18 e2
>3a6dd8		20 a9 80 85 b4 c2 20 c6 ab 18 a9 00 00 8f 50 03
>3a6de8		00 65 ab 8f 58 03 00 a9 01 00 8f 52 03 00 69 00
>3a6df8		00 8f 5a 03 00 22 1c 11 00 b0 22 20 8b 6b 08 c2
>3a6e08		20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f d3 08 00
>3a6e18		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 20 8b 6b
>3a6e28		28 60 08 c2 30 20 3b 21 20 09 1d 20 e3 06 20 7d
>3a6e38		6d 22 04 11 00 b0 22 20 8b 6b 08 c2 20 48 a9 00
>3a6e48		08 5b 68 28 e2 20 a9 13 8f d3 08 00 c2 20 29 ff
>3a6e58		00 20 5b 1e e2 20 dc d4 08 20 8b 6b 28 60 da 08
>3a6e68		e2 20 c9 61 90 08 c9 7b b0 04 29 df 80 13 c9 20
>3a6e78		90 13 a2 00 00 df 91 6e 3a f0 0a e8 e0 0f 00 d0
>3a6e88		f4 28 38 fa 6b 28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c
>3a6e98		3d 3e 3f 5c 5b 5d 7c 22 08 08 c2 20 48 a9 00 08
>3a6ea8		5b 68 28 c2 30 20 09 1d 20 e3 06 20 7d 6d 22 10
>3a6eb8		11 00 b0 22 20 8b 6b 08 c2 20 48 a9 00 08 5b 68
>3a6ec8		28 e2 20 a9 14 8f d3 08 00 c2 20 29 ff 00 20 5b
>3a6ed8		1e e2 20 dc d4 08 e2 20 a9 2c 20 27 22 c2 20 20
>3a6ee8		09 1d 20 e3 06 ad 38 03 85 08 ad 3a 03 85 0a e2
>3a6ef8		20 a2 00 00 a9 20 95 7e e8 e0 0b 00 d0 f8 a2 00
>3a6f08		00 a0 00 00 b7 23 f0 76 c9 2e f0 39 22 66 6e 3a
>3a6f18		b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a6f28		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a6f38		08 95 7e c8 e8 c0 08 00 d0 ca b7 23 f0 40 c9 2e
>3a6f48		f0 03 c8 80 f5 c8 a2 08 00 b7 23 f0 31 22 66 6e
>3a6f58		3a b0 22 20 8b 6b 08 c2 20 48 a9 00 08 5b 68 28
>3a6f68		e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a6f78		e2 20 dc d4 08 95 7e c8 e8 c0 0c 00 d0 cb a2 00
>3a6f88		00 a0 00 00 b5 7e 97 08 e8 c8 c0 0b 00 d0 f5 22
>3a6f98		14 11 00 b0 22 20 8b 6b 08 c2 20 48 a9 00 08 5b
>3a6fa8		68 28 e2 20 a9 15 8f d3 08 00 c2 20 29 ff 00 20
>3a6fb8		5b 1e e2 20 dc d4 08 20 8b 6b 28 60 08 08 c2 20
>3a6fc8		48 a9 00 08 5b 68 28 c2 30 20 09 1d 20 e3 06 a5
>3a6fd8		23 8f 64 03 00 a5 25 8f 66 03 00 e2 20 a9 2c 20
>3a6fe8		27 22 c2 20 20 09 1d 20 e3 06 a5 23 8f 68 03 00
>3a6ff8		a5 25 8f 6a 03 00 22 30 11 00 b0 1f 08 c2 20 48
>3a7008		a9 00 08 5b 68 28 e2 20 a9 16 8f d3 08 00 c2 20
>3a7018		29 ff 00 20 5b 1e e2 20 dc d4 08 28 60 5c e2 89
>3a7028		3a 5c 33 88 3a 5c e3 89 3a 5c 5f 79 3a 5c bc 79
>3a7038		3a 5c ef 78 3a 5c 75 78 3a 5c f2 7d 3a 5c e0 74
>3a7048		3a 5c 0d 78 3a 5c c8 77 3a 5c 52 77 3a 5c f1 88
>3a7058		3a 5c ee 75 3a 5c 3e 74 3a 5c 6c 89 3a 5c 1c 75
>3a7068		3a 5c e5 89 3a 5c de 89 3a 5c 0b 77 3a 5c e6 89
>3a7078		3a 18 fb 58 5c 80 70 3a c2 30 22 3e 74 3a 20 08
>3a7088		00 20 0c 00 8b e2 20 a9 00 48 ab a2 00 4f 20 65
>3a7098		05 ab 22 29 70 3a 22 31 70 3a 80 e2 08 8b e2 20
>3a70a8		a9 3a 48 ab c2 10 a2 b7 70 20 64 04 ab 28 6b 41
>3a70b8		20 3c 73 74 61 72 74 3e 20 3c 61 73 73 65 6d 62
>3a70c8		6c 79 3e 0d 20 20 41 73 73 65 6d 62 6c 65 20 61
>3a70d8		20 70 72 6f 67 72 61 6d 0d 0d 43 20 3c 73 74 61
>3a70e8		72 74 31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c
>3a70f8		65 6e 20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d
>3a7108		0d 20 20 43 6f 6d 70 61 72 65 20 74 6f 20 73 65
>3a7118		63 74 69 6f 6e 73 20 6f 66 20 6d 65 6d 6f 72 79
>3a7128		0d 0d 44 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64
>3a7138		5d 0d 20 20 44 69 73 61 73 73 65 6d 62 6c 65 20
>3a7148		61 20 70 72 6f 67 72 61 6d 0d 0d 46 20 3c 73 74
>3a7158		61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65
>3a7168		3e 0d 20 20 46 69 6c 6c 20 61 20 62 6c 6f 63 6b
>3a7178		20 6f 66 20 6d 65 6d 6f 72 79 20 77 69 74 68 20
>3a7188		61 20 62 79 74 65 0d 0d 47 20 5b 61 64 64 72 65
>3a7198		73 73 5d 0d 20 20 53 74 61 72 74 20 65 78 65 63
>3a71a8		75 74 69 6f 6e 20 61 74 20 61 20 6c 6f 63 61 74
>3a71b8		69 6f 6e 0d 0d 4a 20 5b 61 64 64 72 65 73 73 5d
>3a71c8		20 2d 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63
>3a71d8		61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a71e8		20 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63 61
>3a71f8		74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a7208		48 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20
>3a7218		3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 0d
>3a7228		20 20 48 75 6e 74 20 66 6f 72 20 76 61 6c 75 65
>3a7238		73 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 4c 20 20
>3a7248		20 20 20 4c 4f 41 44 20 20 20 20 20 20 20 20 20
>3a7258		22 46 69 6c 65 22 20 5b 64 65 73 74 69 6e 61 74
>3a7268		69 6f 6e 5d 0d 4d 20 3c 73 74 61 72 74 3e 20 5b
>3a7278		65 6e 64 5d 0d 20 20 44 75 6d 70 20 74 68 65 20
>3a7288		76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a7298		0d 52 20 2d 20 44 69 73 70 6c 61 79 20 74 68 65
>3a72a8		20 76 61 6c 75 65 73 20 6f 66 20 74 68 65 20 72
>3a72b8		65 67 69 73 74 65 72 73 0d 0d 3b 20 3c 50 43 3e
>3a72c8		20 3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50
>3a72d8		3e 20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56
>3a72e8		4d 58 44 49 5a 43 3e 0d 20 20 43 68 61 6e 67 65
>3a72f8		20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66
>3a7308		20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>3a7318		53 20 20 20 20 20 53 41 56 45 20 20 20 20 20 20
>3a7328		20 20 20 22 46 69 6c 65 22 20 3c 73 74 61 72 74
>3a7338		3e 20 3c 65 6e 64 3e 0d 54 20 3c 73 74 61 72 74
>3a7348		3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61
>3a7358		74 69 6f 6e 3e 0d 20 20 54 72 61 6e 73 66 65 72
>3a7368		20 28 63 6f 70 79 29 20 64 61 74 61 20 77 69 74
>3a7378		68 69 6e 20 6d 65 6d 6f 72 79 0d 0d 57 20 3c 62
>3a7388		79 74 65 3e 0d 20 20 53 65 74 20 74 68 65 20 72
>3a7398		65 67 69 73 74 65 72 20 77 69 64 74 68 20 66 6c
>3a73a8		61 67 73 20 66 6f 72 20 74 68 65 20 64 69 73 61
>3a73b8		73 73 65 6d 62 6c 65 72 0d 0d 58 20 2d 20 52 65
>3a73c8		74 75 72 6e 20 74 6f 20 42 41 53 49 43 0d 0d 3e
>3a73d8		20 3c 73 74 61 72 74 3e 20 3c 62 79 74 65 3e 20
>3a73e8		5b 62 79 74 65 5d 2e 2e 2e 0d 20 20 45 64 69 74
>3a73f8		20 64 61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a7408		0d 3f 20 2d 20 44 69 73 70 6c 61 79 20 61 20 73
>3a7418		68 6f 72 74 20 68 65 6c 70 20 73 63 72 65 65 6e
>3a7428		0d 0d 00 08 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>3a7438		a5 0d 85 4e 28 6b 20 3d 02 08 e2 20 48 a9 3a 48
>3a7448		ab 68 28 a2 23 8a 20 64 04 e2 20 a9 3b 20 18 00
>3a7458		a9 20 20 18 00 c2 30 08 e2 20 48 a9 00 48 ab 68
>3a7468		28 a0 03 00 a2 42 02 20 e7 03 c2 20 a9 20 00 20
>3a7478		18 00 af 44 02 00 20 74 04 a9 20 00 20 18 00 af
>3a7488		46 02 00 20 74 04 a9 20 00 20 18 00 af 48 02 00
>3a7498		20 74 04 a9 20 00 20 18 00 af 4a 02 00 20 74 04
>3a74a8		a9 20 00 20 18 00 af 4e 02 00 20 8e 04 a9 20 00
>3a74b8		20 18 00 a9 20 00 20 18 00 af 4c 02 00 20 74 04
>3a74c8		a9 20 00 20 18 00 08 e2 20 ad 4f 02 22 3c 87 3a
>3a74d8		28 20 d7 03 20 d7 03 6b 08 0b 08 c2 20 48 a9 48
>3a74e8		08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5 0f c5 13
>3a74f8		d0 0e c2 20 a5 0d c5 11 d0 06 20 d7 03 2b 28 6b
>3a7508		c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69 00
>3a7518		85 0e 80 d0 08 0b 08 c2 20 48 a9 48 08 5b 68 28
>3a7528		e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5 15 90 3d
>3a7538		e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2 20 a5 0d
>3a7548		c5 11 d0 03 4c d3 75 c2 20 18 a5 0d 69 01 00 85
>3a7558		0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5 15 69 01
>3a7568		00 85 15 e2 20 a5 16 69 00 85 16 80 c3 c2 20 38
>3a7578		a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85 1b c2 20
>3a7588		18 a5 19 65 15 85 15 e2 20 a5 1b 65 17 85 17 e2
>3a7598		20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20 a5 11 c5
>3a75a8		0d d0 02 80 26 c2 20 38 a5 11 e9 01 00 85 11 e2
>3a75b8		20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9 01 00 85
>3a75c8		15 e2 20 a5 16 e9 00 85 16 80 c4 20 d7 03 2b 28
>3a75d8		6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9 a0 90 03
>3a75e8		28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48 a9 48 08
>3a75f8		5b 68 28 e2 20 a9 00 8f b6 08 00 a5 31 c9 02 b0
>3a7608		16 c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11 e2
>3a7618		20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5
>3a7628		0f 85 34 80 12 c2 20 18 a5 32 69 00 01 85 11 e2
>3a7638		20 a5 34 69 00 85 13 e2 20 a0 00 00 c2 20 a5 32
>3a7648		85 19 e2 20 a5 34 85 1b e2 20 a7 19 22 d9 75 3a
>3a7658		b0 02 a9 3f 99 7e 08 c2 20 18 a5 19 69 01 00 85
>3a7668		19 e2 20 a5 1b 69 00 85 1b c8 c0 08 00 90 db a9
>3a7678		00 99 7e 08 a9 3e 20 18 00 a9 20 20 18 00 e2 20
>3a7688		a5 34 20 8e 04 a9 3a 20 18 00 c2 20 a5 32 20 74
>3a7698		04 c2 20 a9 08 00 85 47 e2 20 a9 20 20 18 00 a7
>3a76a8		32 20 8e 04 22 1b 87 3a e2 20 c6 47 d0 ea a9 20
>3a76b8		20 18 00 a9 20 20 18 00 08 e2 20 48 a9 00 48 ab
>3a76c8		68 28 a2 7e 08 20 64 04 20 d7 03 20 ee 03 a5 34
>3a76d8		c5 13 90 0f c2 20 a5 32 c5 11 90 07 20 d7 03 2b
>3a76e8		ab 28 6b 4c 3f 76 08 8d 92 08 e2 20 bd 00 00 99
>3a76f8		00 00 ad 92 08 f0 0a c8 e8 e8 e8 e8 ce 92 08 80
>3a7708		eb 28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b 68 28
>3a7718		08 e2 20 48 a9 00 48 ab 68 28 c2 30 a5 0d 85 32
>3a7728		a5 0f 85 34 e2 20 a5 31 3a 85 47 a2 59 08 a0 7e
>3a7738		08 22 ee 76 3a a0 00 00 b9 7e 08 87 32 22 1b 87
>3a7748		3a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b 8b 08 c2 20
>3a7758		48 a9 48 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a7768		28 e2 20 c2 10 a5 31 3a 3a 85 47 a2 5d 08 a0 7e
>3a7778		08 22 ee 76 3a c2 20 a5 0d 85 32 a5 0f 85 34 c2
>3a7788		20 a5 34 c5 13 d0 06 a5 32 c5 11 f0 2c e2 20 a0
>3a7798		00 00 b7 32 d9 7e 08 d0 1a c8 c4 47 d0 f4 c2 20
>3a77a8		a5 32 85 4a a5 34 85 4c 22 c5 81 3a e2 20 a9 20
>3a77b8		20 18 00 22 1b 87 3a 80 c6 20 d7 03 ab 2b 28 6b
>3a77c8		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0 0e
>3a77d8		c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46
>3a77e8		02 00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c 02
>3a77f8		00 5b e2 20 a9 3a 48 a9 78 48 a9 08 48 4c 3f 78
>3a7808		ea 5c 04 00 3a 08 c2 20 48 a9 48 08 5b 68 28 e2
>3a7818		20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02 00 a5 0f 8f
>3a7828		42 02 00 af 46 02 00 aa af 48 02 00 a8 af 4a 02
>3a7838		00 1b af 4c 02 00 5b e2 20 af 4e 02 00 48 ab a9
>3a7848		5c 8f a2 08 00 af 42 02 00 8f a5 08 00 af 41 02
>3a7858		00 8f a4 08 00 af 40 02 00 8f a3 08 00 af 4f 02
>3a7868		00 48 c2 20 af 44 02 00 28 5c a2 08 00 08 0b 8b
>3a7878		08 e2 20 48 a9 3a 48 ab 68 28 08 c2 20 48 a9 48
>3a7888		08 5b 68 28 c2 10 e2 20 a5 31 c9 02 f0 0c c9 03
>3a7898		d0 11 c2 20 a5 15 85 47 80 11 c2 20 a9 01 00 85
>3a78a8		47 80 08 a2 e7 89 20 64 04 80 35 a5 0d 85 4a a5
>3a78b8		0f 85 4c a0 00 00 e2 20 a7 4a d7 11 f0 09 22 c5
>3a78c8		81 3a a9 20 20 18 00 c2 20 18 a5 4a 69 01 00 85
>3a78d8		4a a5 4c 69 00 00 85 4c c8 c4 47 d0 d9 20 d7 03
>3a78e8		20 d7 03 ab 2b 28 6b 08 0b 8b 08 e2 20 48 a9 00
>3a78f8		48 ab 68 28 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>3a7908		a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e 42 02 c9 01
>3a7918		f0 41 a6 11 8e 44 02 c9 02 f0 38 a6 15 8e 46 02
>3a7928		c9 03 f0 2f a6 19 8e 48 02 c9 04 f0 26 a6 1d 8e
>3a7938		4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e 02 c9 06 f0
>3a7948		12 c2 10 a6 25 8e 4c 02 c9 07 f0 07 e2 10 a6 29
>3a7958		8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 48
>3a7968		08 5b 68 28 e2 20 c2 10 a2 00 00 bf 54 8a 3a f0
>3a7978		18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a aa bf 95 79
>3a7988		3a 8f 2f 08 00 22 b9 79 3a ab 2b 28 6b 35 70 3d
>3a7998		70 41 70 45 70 49 70 4d 70 51 70 55 70 59 70 5d
>3a79a8		70 39 70 61 70 65 70 69 70 2b 74 6d 70 71 70 a4
>3a79b8		70 6c 2f 08 08 8b 0b 08 c2 20 48 a9 48 08 5b 68
>3a79c8		28 e2 20 a5 31 c9 02 b0 03 4c 62 7b c2 20 a5 0d
>3a79d8		85 32 a5 0f 85 34 c2 20 22 64 7d 3a c9 ff ff f0
>3a79e8		10 85 54 e2 20 a5 31 c9 03 f0 36 a9 13 85 4f 80
>3a79f8		4c 20 d7 03 08 e2 20 48 a9 3a 48 ab 68 28 c2 10
>3a7a08		a2 99 7b 20 64 04 4c 62 7b 20 d7 03 08 e2 20 48
>3a7a18		a9 3a 48 ab 68 28 c2 10 a2 a8 7b 20 64 04 4c 62
>3a7a28		7b e2 20 22 9a 7d 3a c9 ff f0 de 85 4f c9 03 f0
>3a7a38		62 c9 0b f0 5e c9 13 f0 04 c9 08 f0 00 22 92 7c
>3a7a48		3a b0 03 4c 2b 7b 87 32 22 1b 87 3a 08 e2 20 48
>3a7a58		a9 00 48 ab 68 28 c2 20 a5 32 85 56 a5 34 85 58
>3a7a68		e2 20 a5 4f c9 12 f0 6c c9 16 f0 68 c9 14 f0 7c
>3a7a78		29 3f c9 02 d0 03 4c 59 7b c2 20 29 ff 00 aa e2
>3a7a88		20 bf 61 86 3a c9 03 f0 57 c9 02 f0 5f c9 01 f0
>3a7a98		67 80 71 c2 20 a5 54 c9 d9 82 f0 26 c9 3d 83 f0
>3a7aa8		2a c9 bd 82 f0 1c c9 c1 82 f0 17 c9 c9 82 f0 12
>3a7ab8		c9 b1 82 f0 0d c9 c5 82 f0 08 c9 ad 82 f0 03 4c
>3a7ac8		45 7a e2 20 a9 12 85 4f 4c 45 7a e2 20 a9 16 85
>3a7ad8		4f 4c 45 7a 22 d5 7b 3a 90 60 c9 02 f0 0e 80 18
>3a7ae8		a0 02 00 b9 98 08 97 56 22 1b 87 3a a0 01 00 b9
>3a7af8		98 08 97 56 22 1b 87 3a a0 00 00 b9 98 08 97 56
>3a7b08		22 1b 87 3a e2 20 a9 41 20 18 00 a9 20 20 18 00
>3a7b18		a6 32 86 4a a6 34 86 4c 22 c5 81 3a a9 20 20 18
>3a7b28		00 80 37 20 d7 03 08 e2 20 48 a9 3a 48 ab 68 28
>3a7b38		c2 10 a2 66 7b 20 64 04 80 20 20 d7 03 08 e2 20
>3a7b48		48 a9 3a 48 ab 68 28 c2 10 a2 b6 7b 20 64 04 80
>3a7b58		09 a5 4f 29 c0 d0 95 4c 00 7b 2b ab 28 6b 41 64
>3a7b68		64 72 65 73 73 69 6e 67 20 6d 6f 64 65 20 6e 6f
>3a7b78		74 20 64 65 66 69 6e 65 64 20 66 6f 72 20 74 68
>3a7b88		61 74 20 69 6e 73 74 72 75 63 74 69 6f 6e 2e 0d
>3a7b98		00 42 61 64 20 6d 6e 65 6d 6f 6e 69 63 2e 0d 00
>3a7ba8		42 61 64 20 6f 70 65 72 61 6e 64 2e 0d 00 52 65
>3a7bb8		6c 61 74 69 76 65 20 6f 66 66 73 65 74 20 69 73
>3a7bc8		20 74 6f 6f 20 6c 61 72 67 65 2e 0d 00 08 0b 08
>3a7bd8		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4f c9 12 f0
>3a7be8		0a c2 20 18 a5 32 69 02 00 80 08 c2 20 18 a5 32
>3a7bf8		69 01 00 85 4a a5 34 69 00 00 85 4c 38 a5 50 e5
>3a7c08		4a 85 50 a5 52 e5 4c 85 52 e2 20 a5 4f c9 16 f0
>3a7c18		1e a5 50 30 0c a5 51 d0 2a a5 52 d0 26 a9 01 80
>3a7c28		26 a5 51 c9 ff d0 1c a5 52 c9 ff d0 16 80 18 a5
>3a7c38		51 30 06 a5 52 d0 0c 80 0e a5 52 c9 ff d0 04 a9
>3a7c48		02 80 04 2b 28 18 6b 2b 28 38 6b 08 0b c2 10 da
>3a7c58		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a2 00 00 df
>3a7c68		00 d0 3a f0 08 e8 e0 10 00 f0 1b 80 f2 c2 20 06
>3a7c78		50 26 52 06 50 26 52 06 50 26 52 06 50 26 52 e2
>3a7c88		20 8a 05 50 85 50 fa 2b 28 6b 0b 8b 08 c2 20 48
>3a7c98		a9 48 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28
>3a7ca8		e2 20 a5 4f 29 3f 85 4a c2 30 a2 00 00 a0 00 00
>3a7cb8		bd 5f 83 f0 1b c5 54 d0 0d e2 20 b9 61 85 29 3f
>3a7cc8		c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98 38 ab 2b 6b
>3a7cd8		18 ab 2b 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28
>3a7ce8		e2 20 c2 10 a0 00 00 64 50 64 52 b7 03 f0 11 c9
>3a7cf8		64 f0 19 48 b7 36 85 4a 68 c5 4a d0 0b c8 80 eb
>3a7d08		b7 36 d0 04 2b 28 38 6b 2b 28 18 6b e2 20 b7 36
>3a7d18		c9 3a b0 04 c9 30 b0 14 c9 47 b0 04 c9 41 b0 0c
>3a7d28		c9 67 b0 e4 c9 61 b0 02 80 de 29 df 22 53 7c 3a
>3a7d38		80 cb 0b 08 c2 20 48 a9 48 08 5b 68 28 a0 00 00
>3a7d48		e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8 5a 68 18 65
>3a7d58		03 85 03 a5 05 69 00 00 85 05 2b 6b 0b 08 c2 20
>3a7d68		48 a9 48 08 5b 68 28 c2 20 a5 11 85 36 a5 13 85
>3a7d78		38 a9 ed 81 85 03 a9 3a 00 85 05 22 dc 7c 3a b0
>3a7d88		0d 22 3a 7d 3a a7 03 d0 f2 a9 ff ff 80 02 a5 03
>3a7d98		2b 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28 c2 30
>3a7da8		a5 15 85 36 a5 17 85 38 a9 79 86 85 03 a9 3a 00
>3a7db8		85 05 22 dc 7c 3a b0 22 22 3a 7d 3a c2 20 18 a5
>3a7dc8		03 69 01 00 85 03 a5 05 69 00 00 85 05 e2 20 a7
>3a7dd8		03 d0 df c2 20 a9 ff ff 80 0d 22 3a 7d 3a e2 20
>3a7de8		a7 03 c2 20 29 ff 00 2b 28 6b 08 8b 0b 08 c2 20
>3a7df8		48 a9 48 08 5b 68 28 e2 20 a9 00 8f b6 08 00 a5
>3a7e08		31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00
>3a7e18		01 85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85
>3a7e28		32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69 00
>3a7e38		01 85 11 e2 20 a5 34 69 00 85 13 22 5e 7e 3a e2
>3a7e48		20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11 90 ec 20
>3a7e58		d7 03 2b ab 28 6b 08 0b e2 20 a9 41 20 18 00 a9
>3a7e68		20 20 18 00 08 c2 20 48 a9 7a 08 5b 68 28 c2 20
>3a7e78		a5 00 85 18 e2 20 a5 02 85 1a 22 c5 81 3a a9 20
>3a7e88		20 18 00 c2 20 18 a5 00 69 01 00 85 18 e2 20 a5
>3a7e98		02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2 d0 0b 48
>3a7ea8		a7 18 49 ff 2f 96 08 00 80 0b c9 e2 d0 0c 48 a7
>3a7eb8		18 0f 96 08 00 8f 96 08 00 68 c2 20 29 ff 00 0a
>3a7ec8		aa bf 5f 83 3a aa 22 3f 81 3a e2 20 a7 00 aa bf
>3a7ed8		61 85 3a 22 1b 87 3a 22 ec 7e 3a 20 d7 03 20 ee
>3a7ee8		03 2b 28 6b 08 e2 20 48 29 3f 0a c2 10 aa 68 7c
>3a7ef8		fa 7e 2a 7f 45 7f 4c 7f 71 7f 78 7f 93 7f b5 7f
>3a7f08		c6 7f 03 80 0b 80 1c 80 2d 80 34 80 59 80 86 80
>3a7f18		f2 7f d7 7f a4 7f 79 80 83 80 97 80 c6 80 74 80
>3a7f28		d7 80 a9 28 20 18 00 22 ee 80 3a a9 2c 20 18 00
>3a7f38		a9 58 20 18 00 a9 29 20 18 00 4c e8 80 22 ee 80
>3a7f48		3a 4c e8 80 e2 20 48 a9 23 20 18 00 68 29 c0 c9
>3a7f58		00 f0 0f 4a 4a 2f 96 08 00 d0 07 22 f8 80 3a 4c
>3a7f68		e8 80 22 ee 80 3a 4c e8 80 22 f8 80 3a 4c e8 80
>3a7f78		a9 28 20 18 00 22 ee 80 3a a9 29 20 18 00 a9 2c
>3a7f88		20 18 00 a9 59 20 18 00 4c e8 80 22 ee 80 3a a9
>3a7f98		2c 20 18 00 a9 58 20 18 00 4c e8 80 22 ee 80 3a
>3a7fa8		a9 2c 20 18 00 a9 59 20 18 00 4c e8 80 22 f8 80
>3a7fb8		3a a9 2c 20 18 00 a9 59 20 18 00 4c e8 80 22 f8
>3a7fc8		80 3a a9 2c 20 18 00 a9 58 20 18 00 4c e8 80 a9
>3a7fd8		28 20 18 00 22 f8 80 3a a9 2c 20 18 00 a9 58 20
>3a7fe8		18 00 a9 29 20 18 00 4c e8 80 a9 28 20 18 00 22
>3a7ff8		ee 80 3a a9 29 20 18 00 4c e8 80 a9 41 20 18 00
>3a8008		4c ec 80 22 ee 80 3a a9 2c 20 18 00 a9 53 20 18
>3a8018		00 4c e8 80 a9 5b 20 18 00 22 ee 80 3a a9 5d 20
>3a8028		18 00 4c e8 80 22 06 81 3a 4c ec 80 a9 28 20 18
>3a8038		00 22 ee 80 3a a9 2c 20 18 00 a9 53 20 18 00 a9
>3a8048		29 20 18 00 a9 2c 20 18 00 a9 59 20 18 00 4c e8
>3a8058		80 a9 5b 20 18 00 22 ee 80 3a a9 5d 20 18 00 a9
>3a8068		2c 20 18 00 a9 59 20 18 00 4c e8 80 a0 02 00 80
>3a8078		03 a0 01 00 22 6c 81 3a 4c ec 80 4c ec 80 22 06
>3a8088		81 3a a9 2c 20 18 00 a9 58 20 18 00 4c ec 80 a9
>3a8098		23 20 18 00 8b a5 02 48 ab a6 00 e8 a0 01 00 22
>3a80a8		e7 03 3a a9 2c 20 18 00 a9 23 20 18 00 a6 00 a0
>3a80b8		01 00 22 e7 03 3a ab 22 1b 87 3a 4c e8 80 a9 28
>3a80c8		20 18 00 22 f8 80 3a a9 29 20 18 00 4c e8 80 a9
>3a80d8		5b 20 18 00 22 f8 80 3a a9 5d 20 18 00 4c e8 80
>3a80e8		22 1b 87 3a 28 6b 08 e2 20 a7 00 20 8e 04 28 6b
>3a80f8		08 c2 30 a7 00 20 74 04 22 1b 87 3a 28 6b 08 8b
>3a8108		0b c2 30 5a 08 c2 20 48 a9 7a 08 5b 68 28 08 e2
>3a8118		20 48 a9 00 48 ab 68 28 e2 20 a0 00 00 a7 00 99
>3a8128		92 08 22 1b 87 3a c8 c0 03 00 d0 f1 22 c5 81 3a
>3a8138		c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10 08 e2 20
>3a8148		48 a9 3a 48 ab 68 28 bd 00 00 20 18 00 e8 bd 00
>3a8158		00 20 18 00 e8 bd 00 00 20 18 00 e8 a9 20 20 18
>3a8168		00 ab 28 6b 08 0b 08 c2 20 48 a9 7a 08 5b 68 28
>3a8178		e2 20 c0 02 00 f0 14 a7 00 85 18 30 06 64 19 64
>3a8188		1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00 85 18 22
>3a8198		1b 87 3a a7 00 85 19 30 04 64 1a 80 04 a9 ff 85
>3a81a8		1a c2 20 38 a5 00 65 18 85 18 e2 20 a5 02 65 1a
>3a81b8		85 1a 22 c5 81 3a 22 1b 87 3a 2b 28 6b 08 0b c2
>3a81c8		20 48 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4c
>3a81d8		20 8e 04 e2 20 a9 3a 20 18 00 c2 20 a5 4a 20 74
>3a81e8		04 68 2b 28 6b 4f 52 41 00 41 4e 44 00 45 4f 52
>3a81f8		00 41 44 43 00 53 54 41 00 4c 44 41 00 43 4d 50
>3a8208		00 53 42 43 00 41 53 4c 00 52 4f 4c 00 4c 53 52
>3a8218		00 52 4f 52 00 53 54 58 00 4c 44 58 00 44 45 43
>3a8228		00 49 4e 43 00 42 49 54 00 4a 4d 50 00 53 54 59
>3a8238		00 4c 44 59 00 43 50 59 00 43 50 58 00 42 52 4b
>3a8248		00 4a 53 52 00 52 54 49 00 52 54 53 00 50 48 50
>3a8258		00 50 4c 50 00 50 48 41 00 50 4c 41 00 44 45 59
>3a8268		00 54 41 59 00 49 4e 59 00 49 4e 58 00 43 4c 43
>3a8278		00 53 45 43 00 43 4c 49 00 53 45 49 00 54 59 41
>3a8288		00 43 4c 56 00 43 4c 44 00 53 45 44 00 54 58 41
>3a8298		00 54 58 53 00 54 41 58 00 54 53 58 00 44 45 58
>3a82a8		00 4e 4f 50 00 42 50 4c 00 42 4d 49 00 42 56 43
>3a82b8		00 42 56 53 00 42 43 43 00 42 43 53 00 42 4e 45
>3a82c8		00 42 45 51 00 54 53 42 00 54 52 42 00 53 54 5a
>3a82d8		00 42 52 41 00 50 48 59 00 50 4c 59 00 50 48 58
>3a82e8		00 50 4c 58 00 50 48 44 00 50 4c 44 00 50 48 4b
>3a82f8		00 52 54 4c 00 50 48 42 00 50 4c 42 00 57 41 49
>3a8308		00 58 42 41 00 54 43 53 00 54 53 43 00 54 43 44
>3a8318		00 54 44 43 00 54 58 59 00 54 59 58 00 53 54 50
>3a8328		00 58 43 45 00 43 4f 50 00 4a 53 4c 00 57 44 4d
>3a8338		00 50 45 52 00 42 52 4c 00 52 45 50 00 53 45 50
>3a8348		00 4d 56 50 00 4d 56 4e 00 50 45 49 00 50 45 41
>3a8358		00 4a 4d 4c 00 00 00 45 82 ed 81 2d 83 ed 81 cd
>3a8368		82 ed 81 0d 82 ed 81 55 82 ed 81 0d 82 ed 82 cd
>3a8378		82 ed 81 0d 82 ed 81 ad 82 ed 81 ed 81 ed 81 d1
>3a8388		82 ed 81 0d 82 ed 81 75 82 ed 81 29 82 0d 83 d1
>3a8398		82 ed 81 0d 82 ed 81 49 82 f1 81 31 83 f1 81 2d
>3a83a8		82 f1 81 11 82 f1 81 59 82 f1 81 11 82 f1 82 2d
>3a83b8		82 f1 81 11 82 f1 81 b1 82 f1 81 f1 81 f1 81 2d
>3a83c8		82 f1 81 11 82 f1 81 79 82 f1 81 25 82 11 83 2d
>3a83d8		82 f1 81 11 82 f1 81 4d 82 f5 81 35 83 f5 81 49
>3a83e8		83 f5 81 15 82 f5 81 5d 82 f5 81 15 82 f5 82 31
>3a83f8		82 f5 81 15 82 f5 81 b5 82 f5 81 f5 81 f5 81 4d
>3a8408		83 f5 81 15 82 f5 81 7d 82 f5 81 dd 82 15 83 59
>3a8418		83 f5 81 15 82 f5 81 51 82 f9 81 39 83 f9 81 d5
>3a8428		82 f9 81 19 82 f9 81 61 82 f9 81 19 82 f9 82 31
>3a8438		82 f9 81 19 82 f9 81 b9 82 f9 81 f9 81 f9 81 d5
>3a8448		82 f9 81 19 82 f9 81 81 82 f9 81 e1 82 19 83 31
>3a8458		82 f9 81 19 82 f9 81 d9 82 fd 81 3d 83 fd 81 35
>3a8468		82 fd 81 1d 82 fd 81 65 82 2d 82 95 82 fd 82 35
>3a8478		82 fd 81 1d 82 fd 81 bd 82 fd 81 fd 81 fd 81 35
>3a8488		82 fd 81 1d 82 fd 81 85 82 fd 81 99 82 1d 83 d5
>3a8498		82 fd 81 d5 82 fd 81 39 82 01 82 21 82 01 82 39
>3a84a8		82 01 82 21 82 01 82 69 82 01 82 9d 82 01 83 39
>3a84b8		82 01 82 21 82 01 82 c1 82 01 82 01 82 01 82 39
>3a84c8		82 01 82 21 82 01 82 89 82 01 82 a1 82 21 83 39
>3a84d8		82 01 82 21 82 01 82 3d 82 05 82 41 83 05 82 3d
>3a84e8		82 05 82 25 82 05 82 6d 82 05 82 a5 82 05 83 3d
>3a84f8		82 05 82 25 82 05 82 c5 82 05 82 05 82 05 82 51
>3a8508		83 05 82 25 82 05 82 8d 82 05 82 e5 82 25 83 59
>3a8518		83 05 82 25 82 05 82 41 82 09 82 45 83 09 82 41
>3a8528		82 09 82 29 82 09 82 71 82 09 82 a9 82 09 83 41
>3a8538		82 09 82 29 82 09 82 c9 82 09 82 09 82 09 82 55
>3a8548		83 09 82 29 82 09 82 91 82 09 82 e9 82 29 83 49
>3a8558		82 09 82 29 82 09 82 00 00 13 00 02 09 01 01 01
>3a8568		0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 01 05 05
>3a8578		0d 13 06 08 13 03 07 07 0e 03 00 0b 09 01 01 01
>3a8588		0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 05 05 05
>3a8598		0d 13 06 08 13 07 07 07 0e 13 00 13 09 14 01 01
>3a85a8		0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 14 05 05
>3a85b8		0d 13 06 13 13 0b 07 07 0b 13 00 16 09 01 01 01
>3a85c8		0a 13 82 08 13 15 03 03 0b 12 04 0f 0c 05 05 05
>3a85d8		0d 13 06 13 13 10 07 07 0e 12 00 16 09 01 01 01
>3a85e8		0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05 11
>3a85f8		0d 13 06 13 13 03 07 07 0e 82 00 42 09 01 01 01
>3a8608		0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05 11
>3a8618		0d 13 06 13 13 07 07 06 0e 42 00 02 09 01 01 01
>3a8628		0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 01 05 05
>3a8638		0d 13 06 13 13 17 07 07 0e 42 00 02 09 01 01 01
>3a8648		0f 13 82 13 13 03 03 03 0b 12 04 0f 0c 03 05 05
>3a8658		0d 13 06 13 13 10 07 07 0e 01 01 01 02 01 01 02
>3a8668		02 00 01 01 03 01 01 03 01 02 01 01 00 02 02 02
>3a8678		02 41 00 08 64 64 3a 64 64 64 64 2c 58 00 0e 64
>3a8688		64 3a 64 64 64 64 00 0b 64 64 64 64 2c 58 00 07
>3a8698		64 64 64 64 2c 59 00 06 64 64 64 64 00 03 64 64
>3a86a8		2c 58 00 05 64 64 2c 59 00 11 64 64 2c 53 00 09
>3a86b8		64 64 00 01 23 64 64 64 64 00 c2 23 64 64 2c 23
>3a86c8		64 64 00 14 23 64 64 00 02 28 64 64 2c 53 29 2c
>3a86d8		59 00 0c 28 64 64 64 64 2c 58 29 00 10 28 64 64
>3a86e8		64 64 29 00 10 28 64 64 2c 58 29 00 00 28 64 64
>3a86f8		29 2c 59 00 04 28 64 64 29 00 0f 5b 64 64 64 64
>3a8708		5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64 64 5d 00
>3a8718		0a 00 00 08 c2 20 48 18 af 7a 08 00 69 01 00 8f
>3a8728		7a 08 00 e2 20 af 7c 08 00 69 00 8f 7c 08 00 c2
>3a8738		20 68 28 6b 08 c2 10 e2 20 da a2 08 00 0a b0 08
>3a8748		48 a9 30 20 18 00 80 06 48 a9 31 20 18 00 68 ca
>3a8758		d0 eb fa 28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2
>3a8768		20 a7 32 f0 0a c9 20 d0 06 22 1b 87 3a 80 f2 6b
>3a8778		08 08 c2 20 48 a9 48 08 5b 68 28 22 1b 87 3a 22
>3a8788		5d 87 3a c2 30 a5 31 c2 20 29 ff 00 0a 0a aa a5
>3a8798		32 95 0d a5 34 95 0f e2 20 a7 32 f0 14 c9 22 f0
>3a87a8		06 22 1b 87 3a 80 f2 a9 00 87 32 22 1b 87 3a e6
>3a87b8		31 28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 64
>3a87c8		4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a f0 0d 20
>3a87d8		0c 05 90 0e 22 53 7c 3a a9 01 85 4a 22 1b 87 3a
>3a87e8		80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00 0a 0a aa
>3a87f8		a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b e2 20 64
>3a8808		31 22 5d 87 3a a7 32 f0 21 c9 22 d0 06 22 78 87
>3a8818		3a 80 0a 22 bb 87 3a a5 31 c9 09 b0 0d a7 32 f0
>3a8828		09 c9 20 f0 dc 20 0c 05 b0 d7 6b 08 0b 08 c2 20
>3a8838		48 a9 48 08 5b 68 28 c2 10 e2 20 a2 31 00 74 00
>3a8848		ca d0 fb a9 00 85 02 85 34 c2 20 a9 00 4f 85 00
>3a8858		85 32 e2 20 22 5d 87 3a c9 00 f0 38 c2 20 a5 32
>3a8868		85 08 e2 20 a5 34 85 0a a2 01 00 22 1b 87 3a a7
>3a8878		32 d0 06 86 0b 64 31 80 1b c9 20 f0 03 e8 80 eb
>3a8888		86 0b a9 00 87 32 22 1b 87 3a a7 08 c9 41 f0 07
>3a8898		22 05 88 3a 2b 28 6b 22 5d 87 3a a7 32 f0 f5 22
>3a88a8		bb 87 3a 22 5d 87 3a a7 32 f0 e9 c2 20 a5 32 85
>3a88b8		11 e2 20 a5 34 85 13 22 1b 87 3a a7 32 f0 26 c9
>3a88c8		20 d0 f4 a9 00 87 32 e6 31 22 1b 87 3a 22 5d 87
>3a88d8		3a a7 32 f0 bf c2 20 a5 32 85 15 e2 20 a5 34 85
>3a88e8		17 e6 31 80 af e6 31 80 ab 08 c2 10 e2 20 a5 31
>3a88f8		d0 0f a2 e7 89 a9 3a 48 ab 20 64 04 20 d7 03 80
>3a8908		61 c2 20 a5 0d 8f 23 08 00 a5 0f 8f 25 08 00 20
>3a8918		da 6a e2 20 a5 31 c9 01 d0 0f c2 20 a9 ff ff 8f
>3a8928		54 03 00 8f 56 03 00 80 0e c2 20 a5 11 8f 54 03
>3a8938		00 a5 13 8f 56 03 00 22 18 11 00 b0 25 e2 20 a2
>3a8948		0d 8a a9 3a 48 ab 20 64 04 af 2e 03 00 20 8e 04
>3a8958		a9 20 20 18 00 af 20 03 00 20 8e 04 20 d7 03 20
>3a8968		d7 03 28 6b 8b 08 c2 10 e2 20 a5 31 c9 03 f0 0f
>3a8978		a2 e7 89 a9 3a 48 ab 20 64 04 20 d7 03 80 54 c2
>3a8988		20 a5 0d 8f 23 08 00 a5 0f 8f 25 08 00 20 da 6a
>3a8998		a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5 15 8f 58
>3a89a8		03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0 25 e2 20
>3a89b8		a2 f7 89 a9 3a 48 ab 20 64 04 af 2e 03 00 20 8e
>3a89c8		04 a9 20 20 18 00 af 20 03 00 20 8e 04 20 d7 03
>3a89d8		20 d7 03 28 ab 6b 5c b5 27 3a 6b 00 00 00 00 42
>3a89e8		61 64 20 61 72 67 75 6d 65 6e 74 73 0d 0d 00 55
>3a89f8		6e 61 62 6c 65 20 74 6f 20 73 61 76 65 20 66 69
>3a8a08		6c 65 3a 20 00 55 6e 61 62 6c 65 20 74 6f 20 6c
>3a8a18		6f 61 64 20 66 69 6c 65 3a 20 00 0d 20 20 50 43
>3a8a28		20 20 20 20 20 41 20 20 20 20 58 20 20 20 20 59
>3a8a38		20 20 20 20 53 50 20 20 20 44 42 52 20 44 50 20
>3a8a48		20 20 4e 56 4d 58 44 49 5a 43 0d 00 41 43 44 46
>3a8a58		47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e 3f 00 18
>3a8a68		fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a8a78		00 48 ab 68 28 c2 30 20 a6 8a a9 ff fe 1b 08 e2
>3a8a88		20 48 a9 3a 48 ab 68 28 a2 77 d2 20 64 04 08 e2
>3a8a98		20 48 a9 00 48 ab 68 28 4c b5 27 4c a3 8a 08 20
>3a8aa8		34 03 20 49 50 28 60 00 00 00 00 00 00 00 00 00
>3a8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1107 times (17712 bytes)...
>3acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>3ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>3ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>3ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>3ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>3ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>3ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>3ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>3ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>3ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>3ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>3ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>3ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>3ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>3ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>3ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>3ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>3ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>3ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>3ad248		4f 53 00 54 41 4e 00 4c 4e 00 41 43 4f 53 00 41
>3ad258		53 49 4e 00 41 54 41 4e 00 45 58 50 00 53 51 52
>3ad268		00 49 4e 4b 45 59 00 0d 52 45 41 44 59 0d 00 43
>3ad278		32 35 36 20 46 6f 65 6e 69 78 20 42 41 53 49 43
>3ad288		38 31 36 20 76 30 2e 32 2e 30 2d 61 6c 70 68 61
>3ad298		2b 34 31 35 0d 00
>3b0000						.align 256
.3b0000						CREDITS_TEXT
>3b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>3b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>3b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>3b004f		20
>3b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>3b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>3b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>3b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>3b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>3b009f		20
>3b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b00ef		20
>3b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b013f		20
>3b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>3b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>3b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>3b0168		6e 79 20 41 6c 6c 61 69 72 65
>3b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>3b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b018a		20 20 20 20 20 20
>3b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>3b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>3b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>3b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b01da		20 20 20 20 20 20
>3b01e0		20				                .text " "
>3b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0229		20 20 20 20 20 20 20
>3b0230		20				                .text " "
>3b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0279		20 20 20 20 20 20 20
>3b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>3b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>3b0298		53 3a
>3b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>3b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>3b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>3b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>3b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>3b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b031d		20 20 20
>3b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>3b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>3b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>3b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>3b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>3b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>3b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>3b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>3b0398		75 73 68
>3b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>3b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>3b03c8		54 68 61 6e 6b 73 3a
>3b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>3b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0407		20 20 20 20 20 20 20 20 20
>3b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>3b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>3b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>3b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>3b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>3b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b045f		20
>3b0460		20				                .text " "
>3b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b04a9		20 20 20 20 20 20 20
>3b04b0		20				                .text " "
>3b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b04f9		20 20 20 20 20 20 20
>3b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>3b0508		45 53 20 41 55 54 48 4f 52 53 3a
>3b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>3b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b054b		20 20 20 20 20
>3b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>3b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>3b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>3b0578		63 6f 72 65 73 2e 6f 72 67
>3b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>3b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0599		20 20 20 20 20 20 20
>3b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>3b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>3b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>3b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>3b05d8		6d
>3b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>3b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>3b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>3b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>3b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>3b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>3b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>3b063b		20 20 20 20 20
>3b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>3b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>3b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>3b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>3b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>3b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b068b		20 20 20 20 20
>3b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>3b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>3b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>3b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>3b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b06da		20 20 20 20 20 20
>3b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>3b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>3b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>3b0708		6a 61 64 61 20 47 6f 6d 65 7a
>3b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>3b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b072a		20 20 20 20 20 20
>3b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>3b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>3b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>3b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>3b0768		6f 6d
>3b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>3b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>3b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>3b0798		6e 69 78 20 55 29 3a 20 54 42 44
>3b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>3b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b07cb		20 20 20 20 20
>3b07d0		20				                .text " "
>3b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0819		20 20 20 20 20 20 20
>3b0820		20				                .text " "
>3b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0869		20 20 20 20 20 20 20
>3b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>3b0878		54 48 41 4e 4b 53 3a
>3b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>3b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b08b7		20 20 20 20 20 20 20 20 20
>3b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>3b08c8		56 61 6e 68 61 72 65 6e
>3b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>3b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0908		20 20 20 20 20 20 20 20
>3b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>3b0918		65 77
>3b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>3b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>3b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>3b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>3b0988		65 66 65 72 65 6e 63 65 73 29
>3b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>3b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b09aa		20 20 20 20 20 20
>3b09b0		20				                .text " "
>3b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b09f9		20 20 20 20 20 20 20
>3b0a00		20				                .text " "
>3b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0a49		20 20 20 20 20 20 20
>3b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b0a9f		20
>3b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>3b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>3b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>3b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>3b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>3b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>3b0aec		20 20 20 20
>3b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>3b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>3b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>3b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>3b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>3b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>3b0b3c		20 20 20 20
>3b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>3b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>3b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>3b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>3b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>3b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>3b0b8d		20 20 20
>3b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>3b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>3b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>3b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>3b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>3b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>3b0bdd		20 20 20
>3b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>3b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>3b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>3b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>3b0c2d		20 20 20
>3b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b0c7f		20
>3b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>3b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c98		53 74 65 66 61 6e 79
>3b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>3b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0cc7		20 20 20 20 20 20 20 20 20
>3b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>3b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>3b1768		20 20 20 20 20 20 20 20
>3b1770						.align 256
>3b1800		f4 f4 f4 f4 f4 f4 f4 f4		CREDITS_COLOR   .fill 80 * 60, $F4
>3b1808		f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4
;		...repeated 298 times (4768 bytes)...
>3b2ab8		f4 f4 f4 f4 f4 f4 f4 f4

;******  Processing file: src\boot_menu.asm

.3e0000						BOOT_MENU
.3e0000						SplashScreenMain:
.3e0000		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.3e0003		2b		pld		                PLD
.3e0004		c2 10		rep #$10	                REP #$10        ; set X long
.3e0006		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0008		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.3e000c		a9 00		lda #$00	                LDA #$00
.3e000e		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e0010		85 f1		sta $f1		                STA INTERRUPT_COUNT
.3e0012		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e0014		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.3e0018		29 04		and #$04	                AND #FNX0_INT02_TMR0
.3e001a		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.3e001e		20 e8 00	jsr $3e00e8	                JSR Splash_Get_Machine_ID
.3e0021		20 1b 01	jsr $3e011b	                JSR Splash_Clear_Screen
.3e0024		20 05 01	jsr $3e0105	                JSR Splash_Load_FontSet
.3e0027		22 f8 02 3e	jsl $3e02f8	                JSL Splashscreen_BitMapSetup
.3e002b		20 0b 06	jsr $3e060b	                JSR Model_Update_Info_Field
.3e002e		20 ec 05	jsr $3e05ec	                JSR Set_Text_Color
.3e0031		a9 00		lda #$00	                LDA #$00
.3e0033		85 a6		sta $a6		                STA LINE_INDEX  ; Point to the first line to be displayed
.3e0035		85 a7		sta $a7		                STA LINE_INDEX + 1
.3e0037		20 93 08	jsr $3e0893	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.3e003a						HAVE_FUN:
.3e003a		22 00 7c 39	jsl $397c00	                JSL BOOT_SOUND_OFF
.3e003e		22 35 01 3e	jsl $3e0135	                JSL Splash_Moniker_Color_Rolling  ; Go Move The Colors on the Logo
.3e0042		a6 a6		ldx $a6		                LDX LINE_INDEX
.3e0044		e0 17 00	cpx #$0017	                CPX #NumberOfEntry
.3e0047		f0 08		beq $3e0051	                BEQ ByPassCharDisplay           ; If Equal all Lines have been displayed
.3e0049		20 d0 08	jsr $3e08d0	                JSR Line_Display_1_Character    ; Go move the cursor one stop
.3e004c		90 21		bcc $3e006f	                BCC Still_Displaying_Char
.3e004e		20 93 08	jsr $3e0893	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.3e0051						ByPassCharDisplay:
.3e0051		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0053		22 28 10 00	jsl $001028	                JSL GETSCANCODE         ; Try to get a scan code
.3e0057		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.3e0059		f0 14		beq $3e006f	                BEQ Still_Displaying_Char            ; No: keep waiting until timeout
.3e005b		c9 3b		cmp #$3b	                CMP #CHAR_F1            ; Did the user press F1?
.3e005d		f0 1f		beq $3e007e	                BEQ return              ; Yes: return it
.3e005f		c9 3c		cmp #$3c	                CMP #CHAR_F2            ; Did the user press F2?
.3e0061		f0 1b		beq $3e007e	                BEQ return              ; Yes: return it
.3e0063		c9 3d		cmp #$3d	                CMP #CHAR_F3            ; Did the user press F3?
.3e0065		f0 17		beq $3e007e	                BEQ return              ; Yes: return it
.3e0067		c9 1c		cmp #$1c	                CMP #SCAN_CR            ; Did the user press CR?
.3e0069		f0 13		beq $3e007e	                BEQ return              ; Yes: return it
.3e006b		c9 39		cmp #$39	                CMP #SCAN_SP            ; Did the user press SPACE?
.3e006d		f0 0d		beq $3e007c	                BEQ exitshere
.3e006f						Still_Displaying_Char:
.3e006f						WaitForNextSOF:
.3e006f		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0
.3e0073		29 01		and #$01	                AND #FNX0_INT00_SOF
.3e0075		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.3e0077		d0 f6		bne $3e006f	                BNE WaitForNextSOF;
.3e0079		4c 3a 00	jmp $3e003a	                JMP HAVE_FUN
.3e007c						exitshere:
.3e007c						timeout
.3e007c		a9 00		lda #$00	                LDA #0                  ; Return 0 for a timeout / SPACE
.3e007e						return
.3e007e		8f 08 00 00	sta $000008	                STA @l KRNL_BOOT_MENU_K          ; Store ther Keyboard Value
.3e0082		a9 00		lda #$00	                LDA #$00
.3e0084		8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L         ; Disable Everything
.3e0088		22 2c 05 3e	jsl $3e052c	                JSL SS_VDMA_CLEAR_MEMORY_640_480 ; Clear the Bitmap Screen
.3e008c		20 a1 00	jsr $3e00a1	                JSR VickyII_Registers_Clear      ; Reset All Vicky Registers
.3e008f		22 c0 10 00	jsl $0010c0	                JSL INITFONTSET ; Reload the Official FONT set
.3e0093		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR ; Reset the Cursor to its origin
.3e0097		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.3e009b		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE  ; Init VICKY TextMode now contains Hi-Res Dipswitch read and Automatic Text Size Parameter adjust
.3e009f		ea		nop		                NOP
.3e00a0		6b		rtl		                RTL
.3e00a1						VickyII_Registers_Clear:
.3e00a1		e2 20		sep #$20	                SEP #$20        ; set A short
.3e00a3		c2 10		rep #$10	                REP #$10        ; set X long
.3e00a5		a2 00 00	ldx #$0000	                LDX #$0000
.3e00a8		a9 00		lda #$00	                LDA #$00
.3e00aa						ClearSpriteRegisters:
.3e00aa		9f 00 0c af	sta $af0c00,x	                STA @l SP00_CONTROL_REG, X
.3e00ae		e8		inx		                INX
.3e00af		e0 00 02	cpx #$0200	                CPX #$0200
.3e00b2		d0 f6		bne $3e00aa	                BNE ClearSpriteRegisters
.3e00b4		a2 00 00	ldx #$0000	                LDX #$0000
.3e00b7		a9 00		lda #$00	                LDA #$00
.3e00b9						ClearTiles0Registers:
.3e00b9		9f 00 02 af	sta $af0200,x	                STA @l TL0_CONTROL_REG, X
.3e00bd		e8		inx		                INX
.3e00be		e0 30 00	cpx #$0030	                CPX #$0030
.3e00c1		d0 f6		bne $3e00b9	                BNE ClearTiles0Registers
.3e00c3		ea		nop		                NOP
.3e00c4		a2 00 00	ldx #$0000	                LDX #$0000
.3e00c7		a9 00		lda #$00	                LDA #$00
.3e00c9						ClearTiles1Registers:
.3e00c9		9f 80 02 af	sta $af0280,x	                STA @l TILESET0_ADDY_L, X
.3e00cd		e8		inx		                INX
.3e00ce		e0 20 00	cpx #$0020	                CPX #$0020
.3e00d1		d0 f6		bne $3e00c9	                BNE ClearTiles1Registers
.3e00d3		ea		nop		                NOP
.3e00d4		a2 00 00	ldx #$0000	                LDX #$0000
.3e00d7		a9 00		lda #$00	                LDA #$00
.3e00d9						ClearBitmapRegisters:
.3e00d9		9f 00 01 af	sta $af0100,x	                STA @l BM0_CONTROL_REG, X
.3e00dd		9f 08 01 af	sta $af0108,x	                STA @l BM1_CONTROL_REG, X
.3e00e1		e8		inx		                INX
.3e00e2		e0 10 00	cpx #$0010	                CPX #$0010
.3e00e5		d0 f2		bne $3e00d9	                BNE ClearBitmapRegisters
.3e00e7		60		rts		                RTS
.3e00e8						Splash_Get_Machine_ID
.3e00e8		e2 20		sep #$20	                SEP #$20        ; set A short
.3e00ea		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.3e00ee		29 03		and #$03	                AND #$03        ; Isolate the first 2 bits to know if it is a U or FMX
.3e00f0		85 b0		sta $b0		                STA MODEL
.3e00f2		c9 00		cmp #$00	                CMP #$00
.3e00f4		f0 0e		beq $3e0104	                BEQ DONE
.3e00f6		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.3e00fa		29 04		and #$04	                AND #GABE_SYS_STAT_MID2 ; High 4Meg, Low - 2Megs
.3e00fc		c9 04		cmp #$04	                CMP #GABE_SYS_STAT_MID2
.3e00fe		f0 04		beq $3e0104	                BEQ DONE
.3e0100		a9 02		lda #$02	                LDA #$02
.3e0102		85 b0		sta $b0		                STA MODEL       ; In this Scheme 00 - FMX, 01 - U+, 02 - U
.3e0104						DONE:
.3e0104		60		rts		                RTS
.3e0105						Splash_Load_FontSet
.3e0105		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0107		c2 10		rep #$10	                REP #$10        ; set X long
.3e0109		a2 00 00	ldx #$0000	                LDX #$0000
.3e010c						DONE_LOADING_FONT:
.3e010c		bf 00 08 3f	lda $3f0800,x	                LDA @l FONT_4_SPLASH, X
.3e0110		9f 00 80 af	sta $af8000,x	                STA @l FONT_MEMORY_BANK0, X
.3e0114		e8		inx		                INX
.3e0115		e0 00 08	cpx #$0800	                CPX #2048
.3e0118		d0 f2		bne $3e010c	                BNE DONE_LOADING_FONT
.3e011a		60		rts		                RTS
.3e011b						Splash_Clear_Screen
.3e011b		e2 20		sep #$20	                SEP #$20        ; set A short
.3e011d		c2 10		rep #$10	                REP #$10        ; set X long
.3e011f		a2 00 00	ldx #$0000	                LDX #$0000
.3e0122						Branch_Clear:
.3e0122		a9 20		lda #$20	                LDA #$20
.3e0124		9f 00 a0 af	sta $afa000,x	                STA @l CS_TEXT_MEM_PTR,X
.3e0128		a9 f0		lda #$f0	                LDA #$F0
.3e012a		9f 00 c0 af	sta $afc000,x	                STA @l CS_COLOR_MEM_PTR,X
.3e012e		e8		inx		                INX
.3e012f		e0 00 20	cpx #$2000	                CPX #$2000
.3e0132		d0 ee		bne $3e0122	                BNE Branch_Clear
.3e0134		60		rts		                RTS
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
.3e0135						Splash_Moniker_Color_Rolling
.3e0135		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0137		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3e013b		29 01		and #$01	                AND #FNX0_INT00_SOF
.3e013d		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3e0141		a5 f0		lda $f0		                LDA INTERRUPT_STATE
.3e0143		c9 00		cmp #$00	                CMP #IRQ_SOF_ST0
.3e0145		f0 0c		beq $3e0153	                BEQ SERVE_STATE0
.3e0147		c9 01		cmp #$01	                CMP #IRQ_SOF_ST1
.3e0149		f0 1a		beq $3e0165	                BEQ SERVE_STATE1
.3e014b		c9 02		cmp #$02	                CMP #IRQ_SOF_ST2
.3e014d		d0 03		bne $3e0152	                BNE NOT_SERVE_STATE2
.3e014f		82 39 01	brl $3e028b	                BRL SERVE_STATE2
.3e0152						NOT_SERVE_STATE2
.3e0152		6b		rtl		                RTL
.3e0153						SERVE_STATE0
.3e0153		a5 f1		lda $f1		                LDA INTERRUPT_COUNT
.3e0155		c9 04		cmp #$04	                CMP #$04
.3e0157		f0 03		beq $3e015c	                BEQ SERVE_NEXT_STATE
.3e0159		e6 f1		inc $f1		                INC INTERRUPT_COUNT
.3e015b		6b		rtl		                RTL
.3e015c						SERVE_NEXT_STATE
.3e015c		a9 00		lda #$00	                LDA #$00
.3e015e		85 f1		sta $f1		                STA INTERRUPT_COUNT
.3e0160		a9 01		lda #$01	                LDA #IRQ_SOF_ST1
.3e0162		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e0164		6b		rtl		                RTL
.3e0165						SERVE_STATE1
.3e0165		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e0167		a9 00 00	lda #$0000	                LDA #$0000
.3e016a		a2 00 00	ldx #$0000	                LDX #$0000
.3e016d		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3e016f		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e0171		bf b0 02 3e	lda $3e02b0,x	                LDA @lCOLOR_POINTER+0, X
.3e0175		aa		tax		                TAX
.3e0176		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e017a		8f e0 3f af	sta $af3fe0	                STA @lGRPH_LUT7_PTR+992
.3e017e		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e0182		8f e1 3f af	sta $af3fe1	                STA @lGRPH_LUT7_PTR+993
.3e0186		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e018a		8f e2 3f af	sta $af3fe2	                STA @lGRPH_LUT7_PTR+994
.3e018e		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e0190		bf b1 02 3e	lda $3e02b1,x	                LDA @lCOLOR_POINTER+1, X
.3e0194		aa		tax		                TAX
.3e0195		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0199		8f e4 3f af	sta $af3fe4	                STA @lGRPH_LUT7_PTR+996
.3e019d		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e01a1		8f e5 3f af	sta $af3fe5	                STA @lGRPH_LUT7_PTR+997
.3e01a5		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e01a9		8f e6 3f af	sta $af3fe6	                STA @lGRPH_LUT7_PTR+998
.3e01ad		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01af		bf b2 02 3e	lda $3e02b2,x	                LDA @lCOLOR_POINTER+2, X
.3e01b3		aa		tax		                TAX
.3e01b4		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e01b8		8f e8 3f af	sta $af3fe8	                STA @lGRPH_LUT7_PTR+1000
.3e01bc		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e01c0		8f e9 3f af	sta $af3fe9	                STA @lGRPH_LUT7_PTR+1001
.3e01c4		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e01c8		8f ea 3f af	sta $af3fea	                STA @lGRPH_LUT7_PTR+1002
.3e01cc		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01ce		bf b3 02 3e	lda $3e02b3,x	                LDA @lCOLOR_POINTER+3, X
.3e01d2		aa		tax		                TAX
.3e01d3		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e01d7		8f ec 3f af	sta $af3fec	                STA @lGRPH_LUT7_PTR+1004
.3e01db		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e01df		8f ed 3f af	sta $af3fed	                STA @lGRPH_LUT7_PTR+1005
.3e01e3		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e01e7		8f ee 3f af	sta $af3fee	                STA @lGRPH_LUT7_PTR+1006
.3e01eb		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01ed		bf b4 02 3e	lda $3e02b4,x	                LDA @lCOLOR_POINTER+4, X
.3e01f1		aa		tax		                TAX
.3e01f2		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e01f6		8f f0 3f af	sta $af3ff0	                STA @lGRPH_LUT7_PTR+1008
.3e01fa		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e01fe		8f f1 3f af	sta $af3ff1	                STA @lGRPH_LUT7_PTR+1009
.3e0202		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e0206		8f f2 3f af	sta $af3ff2	                STA @lGRPH_LUT7_PTR+1010
.3e020a		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e020c		bf b5 02 3e	lda $3e02b5,x	                LDA @lCOLOR_POINTER+5, X
.3e0210		aa		tax		                TAX
.3e0211		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0215		8f f4 3f af	sta $af3ff4	                STA @lGRPH_LUT7_PTR+1012
.3e0219		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e021d		8f f5 3f af	sta $af3ff5	                STA @lGRPH_LUT7_PTR+1013
.3e0221		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e0225		8f f6 3f af	sta $af3ff6	                STA @lGRPH_LUT7_PTR+1014
.3e0229		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e022b		bf b6 02 3e	lda $3e02b6,x	                LDA @lCOLOR_POINTER+6, X
.3e022f		aa		tax		                TAX
.3e0230		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0234		8f f8 3f af	sta $af3ff8	                STA @lGRPH_LUT7_PTR+1016
.3e0238		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e023c		8f f9 3f af	sta $af3ff9	                STA @lGRPH_LUT7_PTR+1017
.3e0240		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e0244		8f fa 3f af	sta $af3ffa	                STA @lGRPH_LUT7_PTR+1018
.3e0248		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e024a		bf b7 02 3e	lda $3e02b7,x	                LDA @lCOLOR_POINTER+7, X
.3e024e		aa		tax		                TAX
.3e024f		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0253		8f fc 3f af	sta $af3ffc	                STA @lGRPH_LUT7_PTR+1020
.3e0257		8f 50 1f af	sta $af1f50	                STA @lFG_CHAR_LUT_PTR + $10           ;
.3e025b		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e025f		8f fd 3f af	sta $af3ffd	                STA @lGRPH_LUT7_PTR+1021
.3e0263		8f 51 1f af	sta $af1f51	                STA @lFG_CHAR_LUT_PTR + $11            ;
.3e0267		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e026b		8f fe 3f af	sta $af3ffe	                STA @lGRPH_LUT7_PTR+1022
.3e026f		8f 52 1f af	sta $af1f52	                STA @lFG_CHAR_LUT_PTR + $12            ;
.3e0273						HERE
.3e0273		18		clc		                CLC
.3e0274		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.3e0276		69 09		adc #$09	                ADC #$09
.3e0278		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e027a		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.3e027c		c9 48		cmp #$48	                CMP #$48
.3e027e		d0 04		bne $3e0284	                BNE EXIT_COLOR_CHANGE
.3e0280		a9 00		lda #$00	                LDA #$00
.3e0282		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e0284						EXIT_COLOR_CHANGE
.3e0284		c2 10		rep #$10	                REP #$10        ; set X long
.3e0286		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.3e0288		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e028a		6b		rtl		                RTL
.3e028b						SERVE_STATE2
.3e028b		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.3e028d		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e028f		6b		rtl		                RTL
>3e0290						.align 16
>3e0290		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>3e0294		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>3e0298		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>3e029c		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>3e02a0		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>3e02a4		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>3e02a8		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>3e02ac		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>3e02b0		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>3e02b8		00
>3e02b9		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>3e02c1		00
>3e02c2		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>3e02ca		00
>3e02cb		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>3e02d3		00
>3e02d4		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>3e02dc		00
>3e02dd		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>3e02e5		00
>3e02e6		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>3e02ee		00
>3e02ef		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>3e02f7		00

;******  Processing file: src\SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480
.3e02f8						Splashscreen_BitMapSetup
.3e02f8		e2 20		sep #$20	                SEP #$20        ; set A short
.3e02fa		c2 10		rep #$10	                REP #$10        ; set X long
.3e02fc		a9 0f		lda #$0f	        LDA #( Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay );
.3e02fe		8f 00 00 af	sta $af0000	        STA @l MASTER_CTRL_REG_L
.3e0302		a9 00		lda #$00	        LDA #$00
.3e0304		8f 01 00 af	sta $af0001	        STA @l MASTER_CTRL_REG_H
.3e0308		a9 00		lda #$00	        LDA #$00
.3e030a		8f 00 01 af	sta $af0100	        STA @l BM0_CONTROL_REG
.3e030e		a9 0f		lda #$0f	        LDA #( BM_Enable | BM_LUT7)
.3e0310		8f 08 01 af	sta $af0108	        STA @l BM1_CONTROL_REG
.3e0314		a9 00		lda #$00	        LDA #$00
.3e0316		8f 09 01 af	sta $af0109	        STA @l BM1_START_ADDY_L
.3e031a		a9 00		lda #$00	        LDA #$00
.3e031c		8f 0a 01 af	sta $af010a	        STA @l BM1_START_ADDY_M
.3e0320		8f 0b 01 af	sta $af010b	        STA @l BM1_START_ADDY_H
.3e0324		a9 01		lda #$01	        LDA #$01
.3e0326		8f 04 00 af	sta $af0004	        STA BORDER_CTRL_REG
.3e032a		a9 08		lda #$08	        LDA #$08
.3e032c		8f 08 00 af	sta $af0008	        STA BORDER_X_SIZE
.3e0330		8f 09 00 af	sta $af0009	        STA BORDER_Y_SIZE
.3e0334		a9 80		lda #$80	        LDA #$80
.3e0336		8f 06 00 af	sta $af0006	        STA BORDER_COLOR_G
.3e033a		a9 00		lda #$00	        LDA #$00
.3e033c		8f 05 00 af	sta $af0005	        STA BORDER_COLOR_B
.3e0340		8f 07 00 af	sta $af0007	        STA BORDER_COLOR_R
.3e0344		a9 a0		lda #$a0	        LDA #$A0
.3e0346		8f 12 00 af	sta $af0012	        STA @l VKY_TXT_CURSOR_CHAR_REG
.3e034a		a9 10		lda #$10	        LDA #$10
.3e034c		8f 0e 00 af	sta $af000e	        STA @l BACKGROUND_COLOR_G
.3e0350		a9 10		lda #$10	        LDA #$10
.3e0352		8f 0f 00 af	sta $af000f	        STA @l BACKGROUND_COLOR_R
.3e0356		8f 0d 00 af	sta $af000d	        STA @l BACKGROUND_COLOR_B
.3e035a		e2 20		sep #$20	                SEP #$20        ; set A short
.3e035c		c2 10		rep #$10	                REP #$10        ; set X long
.3e035e		a2 00 00	ldx #$0000	        LDX #$0000
.3e0361						SS_LUT_BRANCH:
.3e0361		bf 00 0e 3e	lda $3e0e00,x	        LDA @l SS_MONIKER_LUT, X
.3e0365		ea		nop		        NOP
.3e0366		9f 00 3c af	sta $af3c00,x	        STA @l GRPH_LUT7_PTR, X
.3e036a		e8		inx		        INX
.3e036b		e0 00 04	cpx #$0400	        CPX #1024
.3e036e		d0 f1		bne $3e0361	        BNE SS_LUT_BRANCH
.3e0370		a9 00		lda #$00	        LDA #$00
.3e0372		8f 04 3c af	sta $af3c04	        STA @l GRPH_LUT7_PTR + 4
.3e0376		8f 05 3c af	sta $af3c05	        STA @l GRPH_LUT7_PTR + 5
.3e037a		8f 06 3c af	sta $af3c06	        STA @l GRPH_LUT7_PTR + 6
.3e037e		22 2c 05 3e	jsl $3e052c	        JSL SS_VDMA_CLEAR_MEMORY_640_480;
.3e0382		c2 20		rep #$20	                REP #$20        ; set A long
.3e0384		a9 00 12	lda #$1200	        LDA #<>SS_MONIKER      ; Set up the Source
.3e0387		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e038b		a9 00 50	lda #$5000	        LDA #<>( C256Moniker_SizeX * C256Moniker_SizeY )
.3e038e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e0392		a9 00 00	lda #$0000	        LDA #$0000
.3e0395		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0399		a9 a0 78	lda #$78a0	        LDA #<>( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)    ; Set up the Source
.3e039c		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e03a0		a9 40 01	lda #$0140	        LDA #C256Moniker_SizeX
.3e03a3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e03a7		a9 40 00	lda #$0040	        LDA #C256Moniker_SizeY
.3e03aa		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e03ae		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e03b1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e03b5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e03b7		a9 3e		lda #$3e	        LDA #`SS_MONIKER
.3e03b9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e03bd		a9 00		lda #$00	        LDA #`( C256Moniker_SizeX * C256Moniker_SizeY )
.3e03bf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e03c3		a9 00		lda #$00	        LDA #$00
.3e03c5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e03c9		a9 00		lda #$00	        LDA #`( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)
.3e03cb		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e03cf		22 e7 04 3e	jsl $3e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e03d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3e03d5		af b0 00 00	lda $0000b0	        LDA @lMODEL
.3e03d9		29 03		and #$03	        AND #$03
.3e03db		c9 00		cmp #$00	        CMP #$00
.3e03dd		f0 0b		beq $3e03ea	        BEQ DMA_FMX_Moniker
.3e03df		c9 01		cmp #$01	        CMP #$01
.3e03e1		f0 5b		beq $3e043e	        BEQ DMA_UPlus_Moniker
.3e03e3		c9 02		cmp #$02	        CMP #$02
.3e03e5		d0 03		bne $3e03ea	        BNE BAD_MODEL_NUMBER
.3e03e7		82 a8 00	brl $3e0492	        BRL DMA_U_Moniker
.3e03ea						 BAD_MODEL_NUMBER:
.3e03ea						DMA_FMX_Moniker:
.3e03ea		c2 20		rep #$20	                REP #$20        ; set A long
.3e03ec		a9 00 62	lda #$6200	        LDA #<>SS_FMX_TXT      ; Set up the Source
.3e03ef		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e03f3		a9 00 32	lda #$3200	        LDA #<>( FMXMoniker_SizeX * FMXMoniker_SizeY )
.3e03f6		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e03fa		a9 00 00	lda #$0000	        LDA #$0000
.3e03fd		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0401		a9 f0 13	lda #$13f0	        LDA #<>( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)    ; Set up the Source
.3e0404		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e0408		a9 a0 00	lda #$00a0	        LDA #FMXMoniker_SizeX
.3e040b		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e040f		a9 50 00	lda #$0050	        LDA #FMXMoniker_SizeY
.3e0412		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e0416		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e0419		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e041d		e2 20		sep #$20	                SEP #$20        ; set A short
.3e041f		a9 3e		lda #$3e	        LDA #`SS_FMX_TXT
.3e0421		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e0425		a9 00		lda #$00	        LDA #`( FMXMoniker_SizeX * FMXMoniker_SizeY )
.3e0427		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e042b		a9 00		lda #$00	        LDA #$00
.3e042d		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0431		a9 01		lda #$01	        LDA #`( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)
.3e0433		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e0437		22 e7 04 3e	jsl $3e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e043b		4c e6 04	jmp $3e04e6	        JMP Done_DMA_Model_Moniker
.3e043e						DMA_UPlus_Moniker:
.3e043e		c2 20		rep #$20	                REP #$20        ; set A long
.3e0440		a9 00 94	lda #$9400	        LDA #<>SS_UPlus_TXT      ; Set up the Source
.3e0443		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e0447		a9 00 18	lda #$1800	        LDA #<>( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.3e044a		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e044e		a9 00 00	lda #$0000	        LDA #$0000
.3e0451		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0455		a9 10 14	lda #$1410	        LDA #<>( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)    ; Set up the Source
.3e0458		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e045c		a9 60 00	lda #$0060	        LDA #UPlusMoniker_SizeX
.3e045f		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e0463		a9 40 00	lda #$0040	        LDA #UPlusMoniker_SizeY
.3e0466		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e046a		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e046d		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e0471		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0473		a9 3e		lda #$3e	        LDA #`SS_UPlus_TXT
.3e0475		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e0479		a9 00		lda #$00	        LDA #`( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.3e047b		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e047f		a9 00		lda #$00	        LDA #$00
.3e0481		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0485		a9 01		lda #$01	        LDA #`( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)
.3e0487		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e048b		22 e7 04 3e	jsl $3e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e048f		4c e6 04	jmp $3e04e6	        JMP Done_DMA_Model_Moniker
.3e0492						DMA_U_Moniker:
.3e0492		c2 20		rep #$20	                REP #$20        ; set A long
.3e0494		a9 00 ac	lda #$ac00	        LDA #<>SS_U_TXT      ; Set up the Source
.3e0497		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e049b		a9 00 10	lda #$1000	        LDA #<>( UMoniker_SizeX *UMoniker_SizeY )
.3e049e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e04a2		a9 00 00	lda #$0000	        LDA #$0000
.3e04a5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e04a9		a9 20 14	lda #$1420	        LDA #<>( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)    ; Set up the Source
.3e04ac		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e04b0		a9 40 00	lda #$0040	        LDA #UMoniker_SizeX
.3e04b3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e04b7		a9 40 00	lda #$0040	        LDA #UMoniker_SizeY
.3e04ba		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e04be		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e04c1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e04c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04c7		a9 3e		lda #$3e	        LDA #`SS_U_TXT
.3e04c9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e04cd		a9 00		lda #$00	        LDA #`( UMoniker_SizeX * UMoniker_SizeY )
.3e04cf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e04d3		a9 00		lda #$00	        LDA #$00
.3e04d5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e04d9		a9 01		lda #$01	        LDA #`( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)
.3e04db		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e04df		22 e7 04 3e	jsl $3e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e04e3		4c e6 04	jmp $3e04e6	        JMP Done_DMA_Model_Moniker
.3e04e6						Done_DMA_Model_Moniker
.3e04e6		6b		rtl		        RTL
.3e04e7						SS_VDMA_SETUP_2_TRANSFER_IMAGE
.3e04e7		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04e9		a9 11		lda #$11	        LDA #( SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src )
.3e04eb		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e04ef		a9 13		lda #$13	        LDA #( VDMA_CTRL_Enable |  VDMA_CTRL_SysRAM_Src | VDMA_CTRL_1D_2D )
.3e04f1		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e04f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04f7		af 00 04 af	lda $af0400	        LDA @l VDMA_CONTROL_REG
.3e04fb		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e04fd		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0501		af 20 04 af	lda $af0420	        LDA @l SDMA_CTRL_REG0
.3e0505		09 80		ora #$80	        ORA #SDMA_CTRL0_Start_TRF
.3e0507		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e050b		ea		nop		        NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3e050c		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.3e050d		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.3e050e		ea		nop		        NOP
.3e050f		ea		nop		        NOP
.3e0510		ea		nop		        NOP
.3e0511		ea		nop		        NOP
.3e0512		ea		nop		        NOP
.3e0513		ea		nop		        NOP
.3e0514		ea		nop		        NOP
.3e0515		a9 00		lda #$00	        LDA #$00
.3e0517		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e051b						NOTFINISHED:
.3e051b		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e051f		29 80		and #$80	        AND #$80
.3e0521		c9 80		cmp #$80	        CMP #$80
.3e0523		f0 f6		beq $3e051b	        BEQ NOTFINISHED
.3e0525		a9 00		lda #$00	        LDA #$00
.3e0527		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e052b		6b		rtl		        RTL
.3e052c						SS_VDMA_CLEAR_MEMORY_640_480
.3e052c		e2 20		sep #$20	                SEP #$20        ; set A short
.3e052e		a9 05		lda #$05	        LDA #( VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill )
.3e0530		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0534		a9 00		lda #$00	        LDA #$00
.3e0536		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.3e053a		c2 20		rep #$20	                REP #$20        ; set A long
.3e053c		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.3e053f		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e0543		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0545		a9 00		lda #$00	        LDA #$00
.3e0547		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e054b		c2 20		rep #$20	                REP #$20        ; set A long
.3e054d		a9 00 b0	lda #$b000	        LDA #<>(640*480)
.3e0550		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.3e0554		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0556		a9 04		lda #$04	        LDA #`(640*480)
.3e0558		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.3e055c		a9 00		lda #$00	        LDA #$00
.3e055e		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0562		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.3e0566		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e0568		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e056c		ea		nop		         NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3e056d		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.3e056e		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.3e056f		ea		nop		        NOP
.3e0570		ea		nop		        NOP
.3e0571		ea		nop		        NOP
.3e0572		ea		nop		        NOP
.3e0573		ea		nop		        NOP
.3e0574						SS_VDMA_CLR_LOOPA:
.3e0574		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e0578		29 80		and #$80	        AND #$80
.3e057a		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.3e057c		f0 f6		beq $3e0574	        BEQ SS_VDMA_CLR_LOOPA
.3e057e		ea		nop		        NOP
.3e057f		a9 00		lda #$00	        LDA #$00
.3e0581		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0585		6b		rtl		        RTL
.3e0586						SS_VDMA_TRANSFER_VRAM_2_VRAM
.3e0586		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0588		a9 01		lda #$01	        LDA #( VDMA_CTRL_Enable )
.3e058a		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e058e		a9 00		lda #$00	        LDA #$00
.3e0590		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.3e0594		c2 20		rep #$20	                REP #$20        ; set A long
.3e0596		a9 00 96	lda #$9600	        LDA #$9600      ; Set up the Source
.3e0599		8f 02 04 af	sta $af0402	        STA @l VDMA_SRC_ADDY_L
.3e059d		e2 20		sep #$20	                SEP #$20        ; set A short
.3e059f		a9 00		lda #$00	        LDA #$00
.3e05a1		8f 04 04 af	sta $af0404	        STA @l VDMA_SRC_ADDY_H
.3e05a5		c2 20		rep #$20	                REP #$20        ; set A long
.3e05a7		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.3e05aa		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e05ae		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05b0		a9 00		lda #$00	        LDA #$00
.3e05b2		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e05b6		c2 20		rep #$20	                REP #$20        ; set A long
.3e05b8		a9 00 14	lda #$1400	        LDA #<>(320*16)
.3e05bb		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.3e05bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05c1		a9 00		lda #$00	        LDA #`(320*16)
.3e05c3		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.3e05c7		a9 00		lda #$00	        LDA #$00
.3e05c9		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e05cd		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.3e05d1		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e05d3		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e05d7		ea		nop		        NOP
.3e05d8		ea		nop		        NOP
.3e05d9		ea		nop		        NOP
.3e05da						SS_VDMA_CLR_LOOPB:
.3e05da		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e05de		29 80		and #$80	        AND #$80
.3e05e0		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.3e05e2		f0 f6		beq $3e05da	        BEQ SS_VDMA_CLR_LOOPB
.3e05e4		ea		nop		        NOP
.3e05e5		a9 00		lda #$00	        LDA #$00
.3e05e7		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e05eb		6b		rtl		        RTL

;******  Return to file: src\boot_menu.asm


;******  Processing file: src\SplashScreenCode/Splashscreen_Text_Display.asm

=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
.3e05ec						Set_Text_Color:
.3e05ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e05ee		a9 00 00	lda #$0000	            LDA #00
.3e05f1		85 a2		sta $a2		            STA TEXT_CURSOR_X
.3e05f3		a9 30 00	lda #$0030	            LDA #48
.3e05f6		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.3e05f8		20 ec 08	jsr $3e08ec	            JSR Line_Display_Compute_Pointer
.3e05fb		a0 00 00	ldy #$0000	            LDY #$0000
.3e05fe		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0600		a9 40		lda #$40	            LDA #$40
.3e0602						SetColorBranch:
.3e0602		97 a8		sta [$a8],y	            STA [COLOR_DST_PTR_L],Y
.3e0604		c8		iny		            INY
.3e0605		c0 50 00	cpy #$0050	            CPY #80
.3e0608		d0 f8		bne $3e0602	            BNE SetColorBranch
.3e060a		60		rts		            RTS
.3e060b						Model_Update_Info_Field:
.3e060b		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e060d		a9 00 00	lda #$0000	            LDA #$0000
.3e0610		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0612		a5 b0		lda $b0		            LDA MODEL
.3e0614		0a		asl a		            ASL
.3e0615		0a		asl a		            ASL
.3e0616		aa		tax		            TAX
.3e0617		c2 20		rep #$20	                REP #$20        ; set A long
.3e0619		bf 9f 0c 3e	lda $3e0c9f,x	            LDA MODEL_TABLE, X
.3e061d		85 a0		sta $a0		            STA MOD_SELECT_L
.3e061f		bf a1 0c 3e	lda $3e0ca1,x	            LDA MODEL_TABLE + 2, X
.3e0623		85 a2		sta $a2		            STA MOD_SELECT_H
.3e0625		a0 00 00	ldy #$0000	            LDY #$0000
.3e0628		84 a6		sty $a6		            STY LINE_INDEX
.3e062a						Next_Change_Here:
.3e062a		c2 20		rep #$20	                REP #$20        ; set A long
.3e062c		a4 a6		ldy $a6		            LDY LINE_INDEX
.3e062e		bb		tyx		            TYX
.3e062f		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.3e0631		85 98		sta $98		            STA TEXT_SRC_PTR_L
.3e0633		bf ef 0c 3e	lda $3e0cef,x	            LDA LINE_MOD, X
.3e0637		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0639		c8		iny		            INY
.3e063a		c8		iny		            INY
.3e063b		bb		tyx		            TYX
.3e063c		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.3e063e		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.3e0640		bf ef 0c 3e	lda $3e0cef,x	            LDA LINE_MOD, X
.3e0644		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0646		c8		iny		            INY
.3e0647		c8		iny		            INY
.3e0648		84 a6		sty $a6		            STY LINE_INDEX
.3e064a		c0 10 00	cpy #$0010	            CPY #16
.3e064d		f0 10		beq $3e065f	            BEQ LetsMoveOn
.3e064f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0651		a0 00 00	ldy #$0000	            LDY #$0000
.3e0654						nextchar:
.3e0654		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.3e0656		c9 00		cmp #$00	            CMP #$00
.3e0658		f0 d0		beq $3e062a	            BEQ Next_Change_Here
.3e065a		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e065c		c8		iny		            INY
.3e065d		80 f5		bra $3e0654	            BRA nextchar
.3e065f						LetsMoveOn:
.3e065f		af fb 0c 3e	lda $3e0cfb	            LDA LINE_MOD + 12
.3e0663		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0665		a0 00 00	ldy #$0000	            LDY #$0000
.3e0668		e2 20		sep #$20	                SEP #$20        ; set A short
.3e066a		af 05 e8 af	lda $afe805	            LDA @lREVOFPCB_C
.3e066e		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0670		c8		iny		            INY
.3e0671		af 06 e8 af	lda $afe806	            LDA @lREVOFPCB_4
.3e0675		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0677		c8		iny		            INY
.3e0678		af 07 e8 af	lda $afe807	            LDA @lREVOFPCB_A
.3e067c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e067e		18		clc		            CLC
.3e067f		af 0d 07 af	lda $af070d	            LDA @l FPGA_DOR   ; it is in BCD
.3e0683		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0686		8f ca 0a 3e	sta $3e0aca	            STA @lLINE8 + 56    ; FAT VICKY in U/U+ Model
.3e068a		8f 03 0b 3e	sta $3e0b03	            STA @lLINE9 + 47    ; GABE in FMX
.3e068e		8f 49 0b 3e	sta $3e0b49	            STA @lLINE10 + 51   ; VICKY II in FMX
.3e0692		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR
.3e0696		29 0f		and #$0f	            AND #$0F
.3e0698		69 30		adc #$30	            ADC #$30
.3e069a		8f cb 0a 3e	sta $3e0acb	            STA @lLINE8 + 57    ; FAT VICKY in U/U+ Model
.3e069e		8f 04 0b 3e	sta $3e0b04	            STA @lLINE9 + 48    ; GABE in FMX
.3e06a2		8f 4a 0b 3e	sta $3e0b4a	            STA @lLINE10 + 52   ; VICKY II in FMX
.3e06a6		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR   ; it is in BCD
.3e06aa		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e06ad		8f cd 0a 3e	sta $3e0acd	            STA @lLINE8 + 59    ; FAT VICKY in U/U+ Model
.3e06b1		8f 06 0b 3e	sta $3e0b06	            STA @lLINE9 + 50    ; GABE in FMX
.3e06b5		8f 4c 0b 3e	sta $3e0b4c	            STA @lLINE10 + 54   ; VICKY II in FMX
.3e06b9		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR
.3e06bd		29 0f		and #$0f	            AND #$0F
.3e06bf		69 30		adc #$30	            ADC #$30
.3e06c1		8f ce 0a 3e	sta $3e0ace	            STA @lLINE8 + 60    ; FAT VICKY in U/U+ Model
.3e06c5		8f 07 0b 3e	sta $3e0b07	            STA @lLINE9 + 51    ; GABE in FMX
.3e06c9		8f 4d 0b 3e	sta $3e0b4d	            STA @lLINE10 + 55   ; VICKY II in FMX
.3e06cd		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR   ; it is in BCD
.3e06d1		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e06d4		8f d0 0a 3e	sta $3e0ad0	            STA @lLINE8 + 62    ; FAT VICKY in U/U+ Model
.3e06d8		8f 09 0b 3e	sta $3e0b09	            STA @lLINE9 + 53    ; GABE in FMX
.3e06dc		8f 4f 0b 3e	sta $3e0b4f	            STA @lLINE10 + 57   ; VICKY II in FMX
.3e06e0		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR
.3e06e4		29 0f		and #$0f	            AND #$0F
.3e06e6		69 30		adc #$30	            ADC #$30
.3e06e8		8f d1 0a 3e	sta $3e0ad1	            STA @lLINE8 + 63    ; FAT VICKY in U/U+ Model
.3e06ec		8f 0a 0b 3e	sta $3e0b0a	            STA @lLINE9 + 54    ; GABE in FMX
.3e06f0		8f 50 0b 3e	sta $3e0b50	            STA @lLINE10 + 58   ; VICKY II in FMX
.3e06f4		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.3e06f8		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e06fb		8f c0 0a 3e	sta $3e0ac0	            STA @lLINE8 + 46    ; U/U+
.3e06ff		8f f9 0a 3e	sta $3e0af9	            STA @lLINE9 + 37    ; When FMX, this is the Info for GABE
.3e0703		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.3e0707		29 0f		and #$0f	            AND #$0F
.3e0709		69 30		adc #$30	            ADC #$30
.3e070b		8f c1 0a 3e	sta $3e0ac1	            STA @lLINE8 + 47
.3e070f		8f fa 0a 3e	sta $3e0afa	            STA @lLINE9 + 38    ; When FMX, this is the Info for GABE
.3e0713		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.3e0717		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e071a		8f 3f 0b 3e	sta $3e0b3f	            STA @lLINE10 + 41    ; When FMX, this is the Info for GABE
.3e071e		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.3e0722		29 0f		and #$0f	            AND #$0F
.3e0724		69 30		adc #$30	            ADC #$30
.3e0726		8f 40 0b 3e	sta $3e0b40	            STA @lLINE10 + 42    ; When FMX, this is the Info for GABE
.3e072a		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.3e072e		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0731		8f c2 0a 3e	sta $3e0ac2	            STA @lLINE8 + 48
.3e0735		8f fb 0a 3e	sta $3e0afb	            STA @lLINE9 + 39    ; When FMX, this is the Info for GABE
.3e0739		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.3e073d		29 0f		and #$0f	            AND #$0F
.3e073f		69 30		adc #$30	            ADC #$30
.3e0741		8f c3 0a 3e	sta $3e0ac3	            STA @lLINE8 + 49
.3e0745		8f fc 0a 3e	sta $3e0afc	            STA @lLINE9 + 40    ; When FMX, this is the Info for GABE
.3e0749		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.3e074d		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0750		8f 41 0b 3e	sta $3e0b41	            STA @lLINE10 + 43    ; When FMX, this is the Info for GABE
.3e0754		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.3e0758		29 0f		and #$0f	            AND #$0F
.3e075a		69 30		adc #$30	            ADC #$30
.3e075c		8f 42 0b 3e	sta $3e0b42	            STA @lLINE10 + 44    ; When FMX, this is the Info for GABE
.3e0760		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.3e0764		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0767		8f b4 0a 3e	sta $3e0ab4	            STA @lLINE8 + 34
.3e076b		8f ed 0a 3e	sta $3e0aed	            STA @lLINE9 + 25    ; When FMX, this is the Info for GABE
.3e076f		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.3e0773		29 0f		and #$0f	            AND #$0F
.3e0775		69 30		adc #$30	            ADC #$30
.3e0777		8f b5 0a 3e	sta $3e0ab5	            STA @lLINE8 + 35
.3e077b		8f ee 0a 3e	sta $3e0aee	            STA @lLINE9 + 26    ; When FMX, this is the Info for GABE
.3e077f		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.3e0783		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0786		8f 34 0b 3e	sta $3e0b34	            STA @lLINE10 + 30    ; When FMX, this is the Info for GABE
.3e078a		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.3e078e		29 0f		and #$0f	            AND #$0F
.3e0790		69 30		adc #$30	            ADC #$30
.3e0792		8f 35 0b 3e	sta $3e0b35	            STA @lLINE10 + 31    ; When FMX, this is the Info for GABE
.3e0796		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.3e079a		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e079d		8f b6 0a 3e	sta $3e0ab6	            STA @lLINE8 + 36
.3e07a1		8f ef 0a 3e	sta $3e0aef	            STA @lLINE9 + 27    ; When FMX, this is the Info for GABE
.3e07a5		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.3e07a9		29 0f		and #$0f	            AND #$0F
.3e07ab		69 30		adc #$30	            ADC #$30
.3e07ad		8f b7 0a 3e	sta $3e0ab7	            STA @lLINE8 + 37
.3e07b1		8f f0 0a 3e	sta $3e0af0	            STA @lLINE9 + 28    ; When FMX, this is the Info for GABE
.3e07b5		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.3e07b9		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e07bc		8f 36 0b 3e	sta $3e0b36	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.3e07c0		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.3e07c4		29 0f		and #$0f	            AND #$0F
.3e07c6		69 30		adc #$30	            ADC #$30
.3e07c8		8f 36 0b 3e	sta $3e0b36	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.3e07cc		20 3f 08	jsr $3e083f	            JSR GODETECTHIRES ; Dip-Switch and Change Text
.3e07cf		20 60 08	jsr $3e0860	            JSR GODETECTHDD   ; Dip-Switch and Change Text
.3e07d2		20 61 08	jsr $3e0861	            JSR GODETECTEXP   ; Go Check if there is a Card Change Text
.3e07d5		a5 b0		lda $b0		            LDA MODEL
.3e07d7		29 03		and #$03	            AND #$03
.3e07d9		c9 00		cmp #$00	            CMP #$00
.3e07db		f0 12		beq $3e07ef	            BEQ Erase_FATVicky_Line;
.3e07dd		c9 01		cmp #$01	            CMP #$01
.3e07df		f0 29		beq $3e080a	            BEQ Erase_2Lines;
.3e07e1		c9 02		cmp #$02	            CMP #$02
.3e07e3		f0 25		beq $3e080a	            BEQ Erase_2Lines;
.3e07e5		60		rts		            RTS
.3e07e6						HighNibblerBCD:
.3e07e6		29 f0		and #$f0	            AND #$F0
.3e07e8		4a		lsr a		            LSR A
.3e07e9		4a		lsr a		            LSR A
.3e07ea		4a		lsr a		            LSR A
.3e07eb		4a		lsr a		            LSR A
.3e07ec		69 30		adc #$30	            ADC #$30
.3e07ee		60		rts		            RTS
.3e07ef						Erase_FATVicky_Line:
.3e07ef		c2 20		rep #$20	                REP #$20        ; set A long
.3e07f1		a9 92 0a	lda #$0a92	            LDA #<>LINE8
.3e07f4		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e07f6		a9 3e 00	lda #$003e	            LDA #`LINE8
.3e07f9		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e07fb		e2 20		sep #$20	                SEP #$20        ; set A short
.3e07fd		a0 00 00	ldy #$0000	            LDY #$0000
.3e0800		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e0802		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0804		c8		iny		            INY
.3e0805		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e0807		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0809		60		rts		            RTS
.3e080a						Erase_2Lines
.3e080a		c2 20		rep #$20	                REP #$20        ; set A long
.3e080c		a9 d4 0a	lda #$0ad4	            LDA #<>LINE9
.3e080f		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0811		a9 3e 00	lda #$003e	            LDA #`LINE9
.3e0814		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0816		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0818		a0 00 00	ldy #$0000	            LDY #$0000
.3e081b		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e081d		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e081f		c8		iny		            INY
.3e0820		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e0822		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0824		c2 20		rep #$20	                REP #$20        ; set A long
.3e0826		a9 16 0b	lda #$0b16	            LDA #<>LINE10
.3e0829		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e082b		a9 3e 00	lda #$003e	            LDA #`LINE10
.3e082e		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0830		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0832		a0 00 00	ldy #$0000	            LDY #$0000
.3e0835		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e0837		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0839		c8		iny		            INY
.3e083a		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e083c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e083e		60		rts		            RTS
.3e083f						GODETECTHIRES
.3e083f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0841		af 02 00 af	lda $af0002	            LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.3e0845		29 10		and #$10	            AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.3e0847		c9 10		cmp #$10	            CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.3e0849		f0 14		beq $3e085f	            BEQ WeAreDone
.3e084b		c2 10		rep #$10	                REP #$10        ; set X long
.3e084d		a2 00 00	ldx #$0000	            LDX #$0000
.3e0850						ChangeNextChar
.3e0850		bf 4f 0d 3e	lda $3e0d4f,x	            LDA @l ON_TEXT, X
.3e0854		c9 00		cmp #$00	            CMP #$00
.3e0856		f0 07		beq $3e085f	            BEQ WeAreDone
.3e0858		9f 43 0c 3e	sta $3e0c43,x	            STA @l LINE17 +13, X
.3e085c		e8		inx		            INX
.3e085d		d0 f1		bne $3e0850	            BNE ChangeNextChar
.3e085f						WeAreDone
.3e085f						NoExpansionCardPresent
.3e085f		60		rts		            RTS
.3e0860						GODETECTHDD
.3e0860		60		rts		            RTS
.3e0861						GODETECTEXP
.3e0861		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0863		af 87 e8 af	lda $afe887	            LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.3e0867		29 10		and #$10	            AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.3e0869		c9 10		cmp #$10	            CMP #GABE_SYS_STAT_EXP
.3e086b		d0 25		bne $3e0892	            BNE NoExpansionCardPresent
.3e086d		c2 10		rep #$10	                REP #$10        ; set X long
.3e086f		a2 00 00	ldx #$0000	            LDX #$0000
.3e0872						ChangeNextChar
.3e0872		bf 53 0d 3e	lda $3e0d53,x	            LDA @l YES_TEXT, X
.3e0876		c9 00		cmp #$00	            CMP #$00
.3e0878		f0 07		beq $3e0881	            BEQ WeAreDone
.3e087a		9f 75 0c 3e	sta $3e0c75,x	            STA @l LINE19 +26, X
.3e087e		e8		inx		            INX
.3e087f		d0 f1		bne $3e0872	            BNE ChangeNextChar
.3e0881						WeAreDone
.3e0881		a2 00 00	ldx #$0000	            LDX #$0000
.3e0884						AddCardName
.3e0884		bf 00 00 ae	lda $ae0000,x	            LDA @l EVID_ID_NAME_ASCII, X
.3e0888		9f 79 0c 3e	sta $3e0c79,x	            STA @l LINE20, X
.3e088c		e8		inx		            INX
.3e088d		e0 10 00	cpx #$0010	            CPX #$10
.3e0890		d0 f2		bne $3e0884	            BNE AddCardName
.3e0892						NoExpansionCardPresent
.3e0892		60		rts		            RTS
.3e0893						Line_Setup_Before_Display
.3e0893		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e0895		a5 a6		lda $a6		            LDA LINE_INDEX
.3e0897		c9 17 00	cmp #$0017	            CMP #NumberOfEntry
.3e089a		f0 33		beq $3e08cf	            BEQ DONE
.3e089c		a5 a6		lda $a6		            LDA LINE_INDEX
.3e089e		0a		asl a		            ASL A
.3e089f		0a		asl a		            ASL A
.3e08a0		aa		tax		            TAX
.3e08a1		bf 14 09 3e	lda $3e0914,x	            LDA TEXT_TABLE, X
.3e08a5		85 98		sta $98		            STA TEXT_SRC_PTR_L
.3e08a7		bf 16 09 3e	lda $3e0916,x	            LDA TEXT_TABLE + 2, X
.3e08ab		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.3e08ad		a5 a6		lda $a6		            LDA LINE_INDEX
.3e08af		0a		asl a		            ASL A
.3e08b0		aa		tax		            TAX
.3e08b1		bf 70 09 3e	lda $3e0970,x	            LDA TEXT_POSX, X
.3e08b5		85 a2		sta $a2		            STA TEXT_CURSOR_X
.3e08b7		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.3e08bb		bf 9e 09 3e	lda $3e099e,x	            LDA TEXT_POSY, X
.3e08bf		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.3e08c1		8f 16 00 af	sta $af0016	            STA @l VKY_TXT_CURSOR_Y_REG_L
.3e08c5		20 ec 08	jsr $3e08ec	            JSR Line_Display_Compute_Pointer
.3e08c8		a9 00 00	lda #$0000	            LDA #$0000
.3e08cb		85 a0		sta $a0		            STA TEXT_INDEX
.3e08cd		e6 a6		inc $a6		            INC LINE_INDEX
.3e08cf						DONE:
.3e08cf		60		rts		            RTS
.3e08d0						Line_Display_1_Character
.3e08d0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08d2		e6 a2		inc $a2		            INC TEXT_CURSOR_X       ; Always put the Cursor In Front of the "To be displayed Char"
.3e08d4		a5 a2		lda $a2		            LDA TEXT_CURSOR_X
.3e08d6		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.3e08da		e2 20		sep #$20	                SEP #$20        ; set A short
.3e08dc		38		sec		            SEC
.3e08dd		a4 a0		ldy $a0		            LDY TEXT_INDEX
.3e08df		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.3e08e1		c9 00		cmp #$00	            CMP #$00
.3e08e3		f0 06		beq $3e08eb	            BEQ WE_ARE_DONE;
.3e08e5		18		clc		            CLC
.3e08e6		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e08e8		c8		iny		            INY
.3e08e9		84 a0		sty $a0		            STY TEXT_INDEX
.3e08eb						WE_ARE_DONE:
.3e08eb		60		rts		            RTS
.3e08ec						Line_Display_Compute_Pointer
.3e08ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08ee		a5 a4		lda $a4		            LDA TEXT_CURSOR_Y
.3e08f0		8f 00 01 00	sta $000100	            STA @lUNSIGNED_MULT_A_LO
.3e08f4		a9 50 00	lda #$0050	            LDA #80
.3e08f7		8f 02 01 00	sta $000102	            STA @lUNSIGNED_MULT_B_LO
.3e08fb		18		clc		            CLC
.3e08fc		af 04 01 00	lda $000104	            LDA @lUNSIGNED_MULT_AL_LO
.3e0900		65 a2		adc $a2		            ADC TEXT_CURSOR_X
.3e0902		69 00 a0	adc #$a000	            ADC #$A000
.3e0905		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0907		69 00 20	adc #$2000	            ADC #$2000
.3e090a		85 a8		sta $a8		            STA COLOR_DST_PTR_L
.3e090c		a9 af 00	lda #$00af	            LDA #$00AF
.3e090f		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0911		85 aa		sta $aa		            STA COLOR_DST_PTR_H
.3e0913		60		rts		            RTS
>3e0914		cc 09 3e 00 ed 09 3e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>3e091c		03 0a 3e 00 11 0a 3e 00 29 0a 3e 00 4c 0a 3e 00
>3e092c		70 0a 3e 00 85 0a 3e 00
>3e0934		92 0a 3e 00 d4 0a 3e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>3e093c		16 0b 3e 00 58 0b 3e 00 62 0b 3e 00 8b 0b 3e 00
>3e094c		c2 0b 3e 00 e5 0b 3e 00
>3e0954		f7 0b 3e 00 36 0c 3e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>3e095c		48 0c 3e 00 5b 0c 3e 00 79 0c 3e 00 8a 0c 3e 00
>3e096c		9d 0c 3e 00
>3e0970		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>3e0978		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>3e0988		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>3e0998		2d 00 1e 00 48 00
>3e099e		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>3e09a6		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>3e09b6		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>3e09c6		35 00 39 00 39 00
=6						leftAlign = 6
>3e09cc		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>3e09d4		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>3e09e4		20 20 20 20 20 20 20 20 00
>3e09ed		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>3e09f5		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>3e0a03		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>3e0a0b		4e 46 4f 3a 20 00
>3e0a11		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>3e0a19		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>3e0a29		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>3e0a31		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>3e0a41		20 20 20 20 20 20 20 20 20 20 00
>3e0a4c		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>3e0a54		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>3e0a64		20 20 20 20 20 20 20 20 20 20 20 00
>3e0a70		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>3e0a78		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>3e0a85		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>3e0a8d		53 29 3a 20 00
>3e0a92		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>3e0a9a		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>3e0aaa		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>3e0aba		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>3e0aca		30 30 2f 30 30 2f 30 30 20 00
>3e0ad4		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533  - GABE     - REV:0000 SUBREV:0000 DATE:00/00/00     ", $00
>3e0adc		35 33 33 20 20 2d 20 47 41 42 45 20 20 20 20 20
>3e0aec		2d 20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45
>3e0afc		56 3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30
>3e0b0c		30 2f 30 30 20 20 20 20 20 00
>3e0b16		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551  - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00     ", $00
>3e0b1e		35 35 31 20 20 2d 20 56 49 43 4b 59 20 49 49 20
>3e0b2e		2d 20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45
>3e0b3e		56 3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30
>3e0b4e		30 2f 30 30 20 20 20 20 20 00
>3e0b58		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>3e0b60		20 00
>3e0b62		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>3e0b6a		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>3e0b7a		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>3e0b8a		00
>3e0b8b		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>3e0b93		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>3e0ba3		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>3e0bb3		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>3e0bc2		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>3e0bca		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>3e0bda		4c 20 54 52 45 4d 42 4c 41 59 00
>3e0be5		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>3e0bed		20 4d 45 4e 55 2d 2d 2d 2d 00
>3e0bf7		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>3e0bff		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>3e0c0f		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>3e0c1f		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>3e0c2f		46 41 55 4c 54 20 00
>3e0c36		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>3e0c3e		4f 44 45 3a 20 4f 46 46 20 00
>3e0c48		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>3e0c50		41 4c 4c 45 44 3a 20 2d 2d 20 00
>3e0c5b		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>3e0c63		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>3e0c73		3a 20 4e 4f 20 00
>3e0c79		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3e0c81		00 00 00 00 00 00 00 00 00
>3e0c8a		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>3e0c92		46 4f 45 4e 49 58 2e 43 4f 4d 00
>3e0c9d		20 00				LINE22 .text " ", $00
>3e0c9f		af 0c 3e 00 bf 0c 3e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>3e0ca7		cf 0c 3e 00 df 0c 3e 00
>3e0caf		ff 0c 3e 00 3f 0d 3e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>3e0cb7		3f 0d 3e 00 00 00 00 00
>3e0cbf		0f 0d 3e 00 3f 0d 3e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>3e0cc7		2f 0d 3e 00 00 00 00 00
>3e0ccf		1f 0d 3e 00 2f 0d 3e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>3e0cd7		2f 0d 3e 00 00 00 00 00
>3e0cdf		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>3e0ce7		00 00 00 00 00 00 00 00
>3e0cef		dc 09 3e 00 3b 0a 3e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>3e0cf7		5f 0a 3e 00 7e 0a 3e 00
>3e0cff		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>3e0d07		4e 49 58 20 46 4d 58 00
>3e0d0f		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>3e0d17		4e 49 58 20 55 2b 20 00
>3e0d1f		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>3e0d27		4e 49 58 20 55 20 20 00
>3e0d2f		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>3e0d37		32 20 42 59 54 45 53 00
>3e0d3f		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>3e0d47		34 20 42 59 54 45 53 00
>3e0d4f		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>3e0d53		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src\boot_menu.asm

>3e0d57						.align 256
.3e0e00						SS_MONIKER_LUT
>3e0e00		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>3e0e08		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>3e0e18		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>3e0e28		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>3e0e38		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>3e0e48		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>3e0e58		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>3e0e68		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>3e0e78		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>3e0e88		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>3e0e98		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>3e0ea8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>3e0eb8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>3e0ec8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>3e0ed8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>3e0ee8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>3e0ef8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>3e0f08		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>3e0f18		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>3e0f28		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>3e0f38		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>3e0f48		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>3e0f58		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>3e0f68		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>3e0f78		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>3e0f88		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>3e0f98		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>3e0fa8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>3e0fb8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>3e0fc8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>3e0fd8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>3e0fe8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>3e0ff8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>3e1008		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>3e1018		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>3e1028		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>3e1038		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>3e1048		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>3e1058		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>3e1068		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>3e1078		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>3e1088		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>3e1098		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>3e10a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>3e10b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>3e10c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>3e10d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>3e10e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>3e10f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>3e1108		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>3e1118		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>3e1128		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>3e1138		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>3e1148		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>3e1158		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>3e1168		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>3e1178		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>3e1188		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>3e1198		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>3e11a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>3e11b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>3e11c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>3e11d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>3e11e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>3e11f8		ff ff ff 00 e5 80 80 00
.3e1200						SS_MONIKER
>3e1200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>3e1208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>3e1808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e1818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>3e1958		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e1968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>3e1a98		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>3e1aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>3e1bd8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1d08		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e1d18		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>3e1d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1e48		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e1e58		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1f88		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>3e1f98		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e20c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>3e20d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e20e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2128		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>3e2138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>3e2208		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>3e2218		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e2228		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2268		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>3e2278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>3e2348		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e2358		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e2368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e23a8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e23b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>3e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2488		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2498		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e24a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e24e8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e24f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>3e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e25c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e25d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e25e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2628		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>3e2638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2668		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>3e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e2708		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2718		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2738		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2768		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>3e2778		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e2788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2798		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>3e27a8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e27b8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e27c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e27d8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>3e27e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>3e2848		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2868		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e28a8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>3e28b8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>3e28c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e28d8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>3e28e8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>3e28f8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e2908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2918		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>3e2928		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>3e2938		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>3e2948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2958		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>3e2968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2978		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>3e2988		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>3e29b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>3e29e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>3e29f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3e2a08		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>3e2a18		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>3e2a28		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>3e2a38		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>3e2a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2a58		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>3e2a68		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>3e2a78		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>3e2a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2a98		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>3e2aa8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>3e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>3e2ac8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>3e2ad8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>3e2ae8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>3e2af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b18		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>3e2b28		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>3e2b38		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e2b48		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e2b58		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e2b68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2b78		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2b98		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ba8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>3e2bb8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>3e2bc8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>3e2bd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2be8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>3e2bf8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>3e2c08		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2c18		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>3e2c28		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>3e2c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2c58		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2c68		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2c78		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e2c88		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>3e2c98		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>3e2ca8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>3e2cb8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2cc8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>3e2cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ce8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>3e2cf8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e2d08		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>3e2d18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2d28		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>3e2d38		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>3e2d48		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2d58		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>3e2d68		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>3e2d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2d98		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2da8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2db8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e2dc8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e2dd8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e2de8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e2df8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2e08		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>3e2e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e28		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>3e2e38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e48		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e68		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2e78		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>3e2e88		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e2e98		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>3e2ea8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>3e2eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3e2ed8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ee8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e2ef8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e2f08		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2f18		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>3e2f28		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e2f38		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2f48		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2f58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>3e2f88		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>3e2f98		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2fa8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>3e2fb8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>3e2fc8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e2fd8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>3e2fe8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>3e2ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3008		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>3e3018		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e3028		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e3038		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e3048		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e3058		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>3e3068		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>3e3078		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3088		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e3098		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e30a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>3e30b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>3e30c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e30d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>3e30e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>3e30f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e3108		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>3e3118		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>3e3128		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>3e3138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3148		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e3158		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e3168		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3178		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e3188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e3198		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e31a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>3e31b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e31c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>3e31d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>3e31e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>3e31f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>3e3208		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>3e3218		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>3e3228		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3238		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3248		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3258		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>3e3268		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e3278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3288		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3298		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e32a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e32b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e32c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>3e32d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e32e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e32f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3308		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>3e3318		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>3e3328		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3338		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>3e3348		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3358		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>3e3368		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3378		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3388		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>3e3398		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>3e33a8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e33b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e33c8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e33d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e33e8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>3e33f8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3408		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>3e3418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3428		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3448		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>3e3458		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>3e3468		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>3e3478		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>3e3488		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3498		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e34a8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e34b8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e34c8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e34d8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>3e34e8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e34f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3508		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3518		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>3e3528		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>3e3538		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3548		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e3558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e3568		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3588		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e3598		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3e35a8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e35b8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e35c8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e35d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e35e8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e35f8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>3e3608		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e3618		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>3e3628		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3648		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3658		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>3e3668		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>3e3678		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3688		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>3e3698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e36a8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e36b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e36c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e36d8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3e36e8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e36f8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3708		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>3e3718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3728		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e3738		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e3748		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>3e3758		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e3768		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>3e3778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3788		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3798		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>3e37a8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>3e37b8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e37c8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e37d8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e37e8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>3e37f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3808		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e3818		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3e3828		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3838		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3848		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3858		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>3e3868		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e3878		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>3e3888		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>3e3898		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e38a8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e38b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e38c8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e38d8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>3e38e8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>3e38f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e3908		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3918		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3928		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>3e3938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3948		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3958		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>3e3968		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>3e3978		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3988		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3998		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e39a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e39b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>3e39c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e39d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e39e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>3e39f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a08		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3a18		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e3a28		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3a38		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>3e3a48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3a58		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>3e3a68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3a78		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a88		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e3a98		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>3e3aa8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>3e3ab8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3ac8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3ad8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>3e3ae8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3af8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>3e3b08		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e3b18		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3b28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3e3b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3b48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>3e3b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3b68		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e3b78		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>3e3b88		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3b98		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>3e3ba8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3bb8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3bc8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>3e3bd8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>3e3be8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e3bf8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3c08		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3c18		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3c28		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>3e3c38		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>3e3c48		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3c58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3c68		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e3c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3c88		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>3e3c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3ca8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>3e3cb8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e3cc8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3cd8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>3e3ce8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3cf8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3d08		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>3e3d18		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>3e3d28		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3d38		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3d48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3d58		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>3e3d68		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>3e3d78		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>3e3d88		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3d98		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3da8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3dc8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>3e3dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3de8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3df8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e3e08		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>3e3e18		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>3e3e28		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e38		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e3e48		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e58		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>3e3e68		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3e78		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e3e88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e98		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e3ea8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>3e3eb8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e3ec8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3ed8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3ee8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3f08		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3f28		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3f38		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e3f48		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>3e3f58		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>3e3f68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3f78		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>3e3f88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3f98		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>3e3fa8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e3fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e3fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3fd8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>3e3fe8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>3e3ff8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e4008		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e4018		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e4028		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4048		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4068		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>3e4078		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e4088		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e4098		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>3e40a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>3e40b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>3e40c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e40d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>3e40e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e40f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>3e4108		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>3e4118		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4128		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>3e4138		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4148		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4158		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e4168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4188		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e41a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>3e41b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e41c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e41d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>3e41e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e41f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4208		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e4218		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4228		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4238		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>3e4248		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>3e4258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4268		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>3e4278		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>3e4288		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4298		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e42a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e42d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>3e42f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4308		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e4318		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4328		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e4338		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4348		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e4358		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4368		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4378		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>3e4388		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e43a8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e43b8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>3e43c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e43d8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e43e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e43f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4408		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e4428		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e4438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4448		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>3e4458		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e4468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e4478		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e4488		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>3e4498		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e44a8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e44b8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e44c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e44d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e44e8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e44f8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>3e4508		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>3e4518		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4528		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4548		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4558		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e4568		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>3e4578		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>3e4588		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>3e4598		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e45a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e45b8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e45c8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>3e45d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e45e8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e45f8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e4608		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4618		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e4628		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>3e4638		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>3e4648		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>3e4658		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4668		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4688		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4698		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>3e46a8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e46b8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>3e46c8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>3e46d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e46e8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e46f8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4708		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>3e4718		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4728		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>3e4738		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>3e4748		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>3e4758		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>3e4768		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>3e4778		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>3e4788		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>3e4798		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e47a8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e47b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e47c8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e47d8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>3e47e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e47f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3e4808		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4818		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4828		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e4838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4848		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4868		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>3e4878		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>3e4888		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>3e4898		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>3e48a8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e48b8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>3e48c8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e48d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>3e48e8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e48f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4908		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4918		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e4928		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4938		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e4948		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4958		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4968		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>3e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4988		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e49a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>3e49b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>3e49c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>3e49d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>3e49e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e49f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3e4a08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>3e4a18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>3e4a28		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4a48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4a58		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>3e4a88		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a98		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4aa8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ac8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4ae8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4af8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>3e4b08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4b18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4b28		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4b38		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3e4b48		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>3e4b58		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>3e4b68		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4b88		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4b98		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ba8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>3e4bd8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4be8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4c08		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4c28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c38		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>3e4c48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c68		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e4c88		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>3e4c98		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>3e4ca8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4cc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>3e4cd8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ce8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4cf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4d18		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4d48		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4d68		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d78		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>3e4d88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d98		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>3e4da8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e4db8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e4dc8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e4dd8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>3e4de8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>3e4df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4e08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>3e4e18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>3e4e28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e38		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>3e4e58		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>3e4e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4e88		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e4e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ea8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4eb8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>3e4ec8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ed8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>3e4ee8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e4ef8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e4f08		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e4f18		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4f28		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e4f38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f58		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>3e4f68		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f78		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>3e4f98		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e4fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>3e4fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4fc8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>3e4fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4fe8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4ff8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3e5018		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>3e5028		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e5038		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>3e5048		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e5058		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5068		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>3e5078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5088		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5098		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>3e50a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>3e50b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e50c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>3e50d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e50e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>3e50f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5108		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e5118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5128		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3e5138		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5148		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>3e5158		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>3e5168		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>3e5178		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>3e5188		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>3e5198		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e51a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e51b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e51c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e51d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>3e51e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>3e51f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5208		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>3e5218		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>3e5228		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>3e5238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5248		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e5258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5268		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>3e5278		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e5288		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>3e5298		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>3e52a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e52b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>3e52c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>3e52d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e52e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e52f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5308		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5318		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>3e5328		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>3e5338		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>3e5348		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e5358		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>3e5368		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5388		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>3e5398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e53a8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>3e53b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e53c8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>3e53d8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>3e53e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e53f8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>3e5408		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>3e5418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e5428		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5448		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5458		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e5468		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e5478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>3e54a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e54b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e54c8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>3e54d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e5508		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5518		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>3e5528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5538		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3e5548		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>3e5558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e5568		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5588		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>3e5598		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e55a8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e55b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e5608		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>3e5618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5658		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>3e5668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5678		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e5688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56a8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56c8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>3e56d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>3e5748		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>3e5758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5798		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>3e57a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e57c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57e8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e5888		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>3e5898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e58d8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>3e58e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5928		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e59c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e59d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5a18		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>3e5a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>3e5b08		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>3e5c48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>3e61f8		00 00 00 00 00 00 00 00
.3e6200						SS_FMX_TXT
>3e6200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>3e6208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>3e64b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e64c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e6558		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e6568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e65f8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e6608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e6698		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e66a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e66f8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>3e6708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6738		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e6748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e6798		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e67a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e67d8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>3e67e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6838		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6878		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>3e6888		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e68c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>3e68d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e68e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6918		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>3e6928		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6968		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>3e6978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e69b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e69c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6a08		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>3e6a18		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a48		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a58		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e6a68		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6aa8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>3e6ab8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ae8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6af8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e6b08		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b28		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b48		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>3e6b58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b88		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b98		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>3e6ba8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6bc8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6be8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>3e6bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e6c28		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>3e6c38		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>3e6c48		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>3e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>3e6c68		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>3e6c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c88		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>3e6c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6cb8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>3e6cc8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>3e6cd8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>3e6ce8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e6d08		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>3e6d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d28		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>3e6d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d58		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>3e6d68		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6d78		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>3e6d88		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e6d98		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>3e6da8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>3e6db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6dc8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>3e6dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6de8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e6df8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6e08		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6e18		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>3e6e28		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e6e38		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>3e6e48		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>3e6e58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e68		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>3e6e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e88		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>3e6e98		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6ea8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6eb8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>3e6ec8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>3e6ed8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>3e6ee8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e6ef8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6f08		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>3e6f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6f28		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>3e6f38		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6f48		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6f58		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>3e6f68		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>3e6f78		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>3e6f88		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e6f98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e6fa8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>3e6fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6fc8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>3e6fd8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6fe8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6ff8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>3e7008		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>3e7018		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>3e7028		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e7038		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>3e7048		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>3e7058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7068		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>3e7078		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7088		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7098		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>3e70a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>3e70b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>3e70c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>3e70d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>3e70e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>3e70f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7108		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>3e7118		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7128		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>3e7138		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>3e7148		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e7158		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>3e7168		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>3e7178		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>3e7188		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>3e7198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e71a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>3e71b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e71c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>3e71d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>3e71e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e71f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>3e7208		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>3e7218		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>3e7228		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e7238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7248		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e7258		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>3e7268		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>3e7278		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7288		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e7298		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e72a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>3e72b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>3e72c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e72d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e72e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e72f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7308		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e7318		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e7328		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e7338		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7348		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e7358		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7368		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e7378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7388		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7398		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e73a8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e73b8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e73c8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e73d8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e73e8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e73f8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e7408		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>3e7418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7438		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7448		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7458		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7468		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>3e7478		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7488		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7498		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e74a8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>3e74b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e74e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74f8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7508		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>3e7518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7528		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7548		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e7558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7578		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>3e7588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7598		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e75a8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>3e75b8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e75c8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e75d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e75e8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e75f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7618		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e7628		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e7638		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7648		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>3e7658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7668		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7678		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7688		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e76b8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e76c8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>3e76d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e76e8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e76f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7708		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e7718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7758		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7768		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7778		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e7788		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7798		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e77a8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e77b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>3e77c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e77d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e77e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e77f8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7808		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e7818		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e7828		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7838		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e7848		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e7858		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7888		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>3e7898		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e78a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e78b8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e78c8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e78d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e78e8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e78f8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e7908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7928		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>3e7938		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7948		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>3e7958		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>3e7968		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7978		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e7988		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e7998		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e79a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e79b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e79c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>3e79d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e79e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e79f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7a08		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a18		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3e7a28		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e7a38		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>3e7a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7a68		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a78		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a88		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>3e7a98		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7aa8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7ab8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3e7ac8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>3e7ad8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7af8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e7b08		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e7b18		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7b28		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e7b38		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>3e7b48		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>3e7b58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7b68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e7b78		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ba8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>3e7bb8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>3e7bc8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7bd8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>3e7be8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7bf8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7c08		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>3e7c18		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c48		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e7c58		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7c78		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7c88		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>3e7c98		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7ca8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e7cb8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e7cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ce8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>3e7cf8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7d18		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d28		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>3e7d38		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e7d58		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d88		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>3e7d98		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7db8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7dc8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>3e7dd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7de8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7df8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e28		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>3e7e38		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3e7e58		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7e68		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>3e7e78		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7e88		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7e98		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ec8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7ed8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3e7ef8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7f08		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>3e7f18		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>3e7f28		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7f38		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f68		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7f78		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7f88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e7f98		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e7fb8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>3e7fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7fd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8008		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e8018		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e8038		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e8048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e8058		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>3e8068		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>3e8078		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e8088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e80a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e80b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e80c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e80d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e80e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e80f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>3e8108		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>3e8118		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e8128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8148		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8158		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e8168		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e8178		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e8188		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e8198		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e81a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>3e81b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e81c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e81d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e81e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e81f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8208		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8218		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8228		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8238		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>3e8248		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e8258		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e8268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8288		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8298		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e82a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e82b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e82c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e82d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>3e82e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e82f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e8308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8328		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8338		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8348		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8358		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8368		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8378		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>3e8388		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e8398		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3e83a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e83b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e83c8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e83d8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e83e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e83f8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>3e8408		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8418		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>3e8428		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e8438		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3e8448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8478		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e8488		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8498		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e84a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e84b8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>3e84c8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e84d8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e84e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e84f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8508		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e8518		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8528		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8538		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8548		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8558		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>3e8568		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8578		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e8588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85a8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e85b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85c8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>3e85d8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85e8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e85f8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>3e8608		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8618		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>3e8628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8648		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e8658		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8668		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>3e8678		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8688		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>3e8698		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>3e86a8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e86b8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e86c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e86d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e86e8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e86f8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8708		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>3e8718		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8728		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e8738		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>3e8748		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8758		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8788		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8798		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87a8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87c8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e87d8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>3e87e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87f8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>3e8808		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8828		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8848		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e8858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8868		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8878		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>3e8888		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8898		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>3e88a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88c8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>3e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3e88f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8908		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8918		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>3e8928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8938		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>3e8948		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8968		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>3e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e89a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e89b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>3e89e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a08		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>3e8a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8a48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a78		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>3e8a88		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8aa8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>3e8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8ae8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>3e8af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b18		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>3e8b28		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b48		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>3e8b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8b88		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e8b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8bb8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>3e8bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8be8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>3e8bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8c28		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>3e8c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c58		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>3e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c88		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>3e8c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8cc8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>3e8cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8cf8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>3e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d28		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>3e8d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8d68		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>3e8d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d98		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>3e8da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8dc8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8e08		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e8e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8e38		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>3e8e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8ea8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>3e8eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ed8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>3e8ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8f48		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>3e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8f78		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>3e8f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8fe8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>3e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e9028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e9088		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>3e9098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e90c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9128		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e9138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e91c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e91d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e9268		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>3e93f8		00 00 00 00 00 00 00 00
.3e9400						SS_UPlus_TXT
>3e9400		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>3e9408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>3e94f8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9558		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e95b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e95c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e9608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9618		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e9668		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>3e9678		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e96c8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>3e96d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9728		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>3e9738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9788		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>3e9798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e97e8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>3e97f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9848		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>3e9858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e98a8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>3e98b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e98e8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>3e98f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9908		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e9918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e9948		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>3e9958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9968		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e9978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e99a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>3e99b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e99c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e99d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>3e99e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a08		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>3e9a18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a28		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e9a38		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>3e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a68		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e9a78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9a88		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e9a98		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>3e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ac8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e9ad8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9ae8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e9af8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>3e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e9b48		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e9b58		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e9b68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b88		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e9ba8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e9bb8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e9bc8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9be8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e9bf8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e9c08		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e9c18		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e9c28		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c48		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3e9c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e9c68		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e9c78		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e9c88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ca8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3e9cb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e9cc8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3e9cd8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e9ce8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d08		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3e9d18		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e9d28		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3e9d38		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e9d48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d68		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e9d78		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e9d88		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e9d98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9da8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9dc8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e9dd8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e9de8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3e9df8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e28		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>3e9e38		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>3e9e48		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e9e58		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>3e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e88		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>3e9e98		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e9ea8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e9eb8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>3e9ec8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>3e9ed8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ee8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9ef8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e9f08		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e9f18		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>3e9f28		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>3e9f38		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9f48		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9f58		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e9f68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3e9f78		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e9f88		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>3e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9fa8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e9fc8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9fd8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e9fe8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea008		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3ea018		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3ea028		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>3ea038		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea048		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>3ea058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea068		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3ea078		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3ea088		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>3ea098		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea0a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>3ea0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea0c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3ea0d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3ea0e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>3ea0f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea108		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3ea118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea128		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea138		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>3ea148		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>3ea158		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea168		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea188		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea198		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3ea1a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea1b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea1c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>3ea1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea1e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea1f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea208		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea218		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea228		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>3ea238		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea248		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea258		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea268		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea278		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>3ea288		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea298		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea2a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea2b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea2c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>3ea2d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>3ea2e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea308		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea318		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3ea328		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>3ea338		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>3ea348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea368		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea378		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3ea388		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>3ea398		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea3a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea3b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3ea3c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>3ea3d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3ea3e8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea3f8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea418		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea428		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>3ea438		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>3ea458		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea478		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea488		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>3ea498		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3ea4a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>3ea4b8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea4c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea4d8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea4e8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>3ea4f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3ea508		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea518		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea538		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea548		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>3ea558		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3ea568		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea578		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea598		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea5a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>3ea5b8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>3ea5c8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3ea5d8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea608		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea618		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>3ea628		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>3ea638		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea658		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea668		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea678		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3ea688		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>3ea698		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>3ea6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea6c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea6d8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>3ea6e8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>3ea6f8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>3ea708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea718		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3ea728		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea738		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>3ea748		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea758		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea778		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3ea788		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea798		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>3ea7a8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea7b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea7c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3ea7e8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea7f8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>3ea808		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3ea848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea858		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea868		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>3ea878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3ea8a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea8b8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8c8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>3ea8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea918		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea928		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea968		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>3ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea988		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3ea998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea9c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>3ea9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea9e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaa28		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>3eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>3eabf8		00 00 00 00 00 00 00 00
.3eac00						SS_U_TXT
>3eac00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>3eac08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>3eacb8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eacc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eacf8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ead38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3ead78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eada8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>3eadb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eade8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>3eadf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eae28		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>3eae38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eae68		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>3eae78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaea8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>3eaeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaee8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>3eaef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaf28		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>3eaf38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf48		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>3eaf58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf68		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3eaf78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf88		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>3eaf98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafa8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3eafb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafc8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>3eafd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafe8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3eaff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb008		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>3eb018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb028		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3eb038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb048		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>3eb058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3eb068		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3eb078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb088		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>3eb098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3eb0a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb0c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3eb0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3eb0e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb108		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3eb128		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb148		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3eb158		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3eb168		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3eb178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>3eb198		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3eb1a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3eb1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb1c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3eb1d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3eb1e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3eb1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb208		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3eb218		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3eb228		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3eb238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb248		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3eb258		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3eb268		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3eb278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb288		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3eb298		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3eb2a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3eb2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb2c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3eb2d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3eb2e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3eb2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb308		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3eb318		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3eb328		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3eb338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb348		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb358		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3eb368		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3eb378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb388		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb398		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3eb3a8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3eb3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb3c8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb3d8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3eb3e8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb408		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3eb418		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3eb428		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb448		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3eb458		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3eb468		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb488		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3eb498		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3eb4a8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb4c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb4d8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3eb4e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb508		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb518		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>3eb528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb538		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb548		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb558		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb578		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb588		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3eb598		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb5a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb5b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb5c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3eb5d8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb608		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3eb618		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3eb628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb638		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb648		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>3eb658		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3eb668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb678		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3eb688		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>3eb698		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3eb6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb6b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb6c8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3eb6d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3eb6e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb6f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb708		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>3eb718		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3eb728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb738		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb748		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>3eb758		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3eb768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb778		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb788		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>3eb798		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>3eb7a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb7b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb7c8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>3eb7d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>3eb7e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb7f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb808		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb818		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3eb828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb838		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb848		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb858		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3eb868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb878		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb888		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb898		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>3eb8a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb8b8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>3eb8c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb8d8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>3eb8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb8f8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>3eb908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb918		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>3eb928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb938		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3eb948		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb958		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb978		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3eb988		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb998		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3eb9c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb9d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3eba08		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3eba18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eba28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eba38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eba48		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>3eba58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eba88		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>3eba98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ebac8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>3ebad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3ebbf8		00 00 00 00 00 00 00 00

;******  Return to file: src\kernel.asm

.3f0000						FONT_4_BANK0
>3f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3f07f8		00 00 00 00 00 00 00 00
.3f0800						FONT_4_SPLASH
>3f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>3f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>3f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>3f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>3f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>3f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>3f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>3f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>3f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>3f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>3f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>3f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>3f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>3f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>3f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>3f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>3f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>3f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>3f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>3f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>3f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>3f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>3f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>3f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>3f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>3f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>3f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>3f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>3f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>3f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>3f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>3f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>3f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>3f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>3f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>3f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>3f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>3f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>3f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>3f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>3f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>3f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>3f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>3f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>3f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>3f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>3f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>3f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>3f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>3f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>3f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>3f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>3f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>3f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>3f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>3f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>3f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>3f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>3f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>3f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>3f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>3f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>3f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>3f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>3f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>3f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>3f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>3f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>3f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>3f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>3f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>3f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>3f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>3f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>3f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>3f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>3f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>3f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>3f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>3f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>3f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>3f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>3f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>3f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>3f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>3f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>3f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>3f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>3f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>3f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>3f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>3f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>3f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>3f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>3f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>3f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>3f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>3f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>3f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>3f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>3f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>3f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>3f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>3f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>3f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>3f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>3f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>3f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>3f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>3f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>3f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>3f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>3f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>3f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>3f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>3f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>3f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>3f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>3f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>3f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>3f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>3f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>3f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>3f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>3f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>3f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>3f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>3f0ff8		0f 0f 0f 0f f0 f0 f0 00
>3fffff		ff				.byte $FF               ; Last byte of flash data

;******  End of listing
